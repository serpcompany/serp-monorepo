[
  {
    "owner": "farama-foundation",
    "repo": "gymnasium",
    "content": "TITLE: Interacting with a CartPole Environment using Gymnasium API in Python\nDESCRIPTION: This snippet demonstrates the basic Gymnasium API usage by creating a CartPole environment instance, running it for 1000 steps with random actions, and handling termination conditions. It showcases environment creation, action sampling, step execution, and proper cleanup.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport gymnasium as gym\nenv = gym.make(\"CartPole-v1\")\n\nobservation, info = env.reset(seed=42)\nfor _ in range(1000):\n    action = env.action_space.sample()\n    observation, reward, terminated, truncated, info = env.step(action)\n\n    if terminated or truncated:\n        observation, info = env.reset()\nenv.close()\n```\n\n----------------------------------------\n\nTITLE: Setting up and Training Q-learning Agent for Blackjack in Python\nDESCRIPTION: This code snippet demonstrates how to set up the Blackjack-v1 environment, initialize the Q-learning agent with hyperparameters, and train it over multiple episodes.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/introduction/train_agent.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# hyperparameters\nlearning_rate = 0.01\nn_episodes = 100_000\nstart_epsilon = 1.0\nepsilon_decay = start_epsilon / (n_episodes / 2)  # reduce the exploration over time\nfinal_epsilon = 0.1\n\nenv = gym.make(\"Blackjack-v1\", sab=False)\nenv = gym.wrappers.RecordEpisodeStatistics(env, buffer_length=n_episodes)\n\nagent = BlackjackAgent(\n    env=env,\n    learning_rate=learning_rate,\n    initial_epsilon=start_epsilon,\n    epsilon_decay=epsilon_decay,\n    final_epsilon=final_epsilon,\n)\n\nfrom tqdm import tqdm\n\nfor episode in tqdm(range(n_episodes)):\n    obs, info = env.reset()\n    done = False\n\n    # play one episode\n    while not done:\n        action = agent.get_action(obs)\n        next_obs, reward, terminated, truncated, info = env.step(action)\n\n        # update the agent\n        agent.update(obs, action, reward, terminated, next_obs)\n\n        # update if the environment is done and the current obs\n        done = terminated or truncated\n        obs = next_obs\n\n    agent.decay_epsilon()\n```\n\n----------------------------------------\n\nTITLE: Inspecting Observation Space Bounds in Python\nDESCRIPTION: Shows how to access the upper and lower bounds of a Box observation space in a Gymnasium environment. This is useful for understanding the range of possible observations.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/env.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> env.observation_space.high\narray([4.8000002e+00, inf, 4.1887903e-01, inf], dtype=float32)\n>>> env.observation_space.low\narray([-4.8000002e+00, -inf, -4.1887903e-01, -inf], dtype=float32)\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running a Gymnasium Environment in Python\nDESCRIPTION: This snippet demonstrates how to create, initialize, and run a basic loop for a Gymnasium environment. It shows environment creation, reset, action sampling, stepping through the environment, and handling episode termination.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/index.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport gymnasium as gym\n\n# Initialise the environment\nenv = gym.make(\"LunarLander-v3\", render_mode=\"human\")\n\n# Reset the environment to generate the first observation\nobservation, info = env.reset(seed=42)\nfor _ in range(1000):\n    # this is where you would insert your policy\n    action = env.action_space.sample()\n\n    # step (transition) through the environment with the action\n    # receiving the next observation, reward and if the episode has terminated or truncated\n    observation, reward, terminated, truncated, info = env.step(action)\n\n    # If the episode has ended then we can reset to start a new episode\n    if terminated or truncated:\n        observation, info = env.reset()\n\nenv.close()\n```\n\n----------------------------------------\n\nTITLE: Implementing Q-learning Agent for Blackjack in Python\nDESCRIPTION: This code snippet defines a BlackjackAgent class that implements Q-learning for the Blackjack-v1 environment. It includes methods for action selection, Q-value updates, and epsilon decay for exploration.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/introduction/train_agent.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom collections import defaultdict\nimport gymnasium as gym\nimport numpy as np\n\n\nclass BlackjackAgent:\n    def __init__(\n        self,\n        env: gym.Env,\n        learning_rate: float,\n        initial_epsilon: float,\n        epsilon_decay: float,\n        final_epsilon: float,\n        discount_factor: float = 0.95,\n    ):\n        \"\"\"Initialize a Reinforcement Learning agent with an empty dictionary\n        of state-action values (q_values), a learning rate and an epsilon.\n\n        Args:\n            env: The training environment\n            learning_rate: The learning rate\n            initial_epsilon: The initial epsilon value\n            epsilon_decay: The decay for epsilon\n            final_epsilon: The final epsilon value\n            discount_factor: The discount factor for computing the Q-value\n        \"\"\"\n        self.env = env\n        self.q_values = defaultdict(lambda: np.zeros(env.action_space.n))\n\n        self.lr = learning_rate\n        self.discount_factor = discount_factor\n\n        self.epsilon = initial_epsilon\n        self.epsilon_decay = epsilon_decay\n        self.final_epsilon = final_epsilon\n\n        self.training_error = []\n\n    def get_action(self, obs: tuple[int, int, bool]) -> int:\n        \"\"\"\n        Returns the best action with probability (1 - epsilon)\n        otherwise a random action with probability epsilon to ensure exploration.\n        \"\"\"\n        # with probability epsilon return a random action to explore the environment\n        if np.random.random() < self.epsilon:\n            return self.env.action_space.sample()\n        # with probability (1 - epsilon) act greedily (exploit)\n        else:\n            return int(np.argmax(self.q_values[obs]))\n\n    def update(\n        self,\n        obs: tuple[int, int, bool],\n        action: int,\n        reward: float,\n        terminated: bool,\n        next_obs: tuple[int, int, bool],\n    ):\n        \"\"\"Updates the Q-value of an action.\"\"\"\n        future_q_value = (not terminated) * np.max(self.q_values[next_obs])\n        temporal_difference = (\n            reward + self.discount_factor * future_q_value - self.q_values[obs][action]\n        )\n\n        self.q_values[obs][action] = (\n            self.q_values[obs][action] + self.lr * temporal_difference\n        )\n        self.training_error.append(temporal_difference)\n\n    def decay_epsilon(self):\n        self.epsilon = max(self.final_epsilon, self.epsilon - self.epsilon_decay)\n```\n\n----------------------------------------\n\nTITLE: Recording Every Episode in Gymnasium Environment\nDESCRIPTION: This snippet demonstrates how to record video and statistics for every episode of an agent's interaction with a Gymnasium environment, typically used for evaluation. It uses RecordVideo and RecordEpisodeStatistics wrappers to capture performance data.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/introduction/record_agent.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport gymnasium as gym\nfrom gymnasium.wrappers import RecordEpisodeStatistics, RecordVideo\n\nnum_eval_episodes = 4\n\nenv = gym.make(\"CartPole-v1\", render_mode=\"rgb_array\")  # replace with your environment\nenv = RecordVideo(env, video_folder=\"cartpole-agent\", name_prefix=\"eval\",\n                 episode_trigger=lambda x: True)\nenv = RecordEpisodeStatistics(env, buffer_length=num_eval_episodes)\n\nfor episode_num in range(num_eval_episodes):\n    obs, info = env.reset()\n\n    episode_over = False\n    while not episode_over:\n        action = env.action_space.sample()  # replace with actual agent\n        obs, reward, terminated, truncated, info = env.step(action)\n\n        episode_over = terminated or truncated\nenv.close()\n\nprint(f'Episode time taken: {env.time_queue}')\nprint(f'Episode total rewards: {env.return_queue}')\nprint(f'Episode lengths: {env.length_queue}')\n```\n\n----------------------------------------\n\nTITLE: Initializing Gymnasium Environment\nDESCRIPTION: Shows how to create a basic CartPole environment instance using Gymnasium's make function.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/introduction/basic_usage.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport gymnasium as gym\nenv = gym.make('CartPole-v1')\n```\n\n----------------------------------------\n\nTITLE: Complete Agent-Environment Loop Implementation\nDESCRIPTION: Demonstrates a full episode implementation of the agent-environment interaction loop using the LunarLander environment. Requires swig and gymnasium[box2d] dependencies.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/introduction/basic_usage.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport gymnasium as gym\n\nenv = gym.make(\"LunarLander-v3\", render_mode=\"human\")\nobservation, info = env.reset()\n\nepisode_over = False\nwhile not episode_over:\n    action = env.action_space.sample()  # agent policy that uses the observation and info\n    observation, reward, terminated, truncated, info = env.step(action)\n\n    episode_over = terminated or truncated\n\nenv.close()\n```\n\n----------------------------------------\n\nTITLE: Implementing Reset Function for GridWorldEnv in Python\nDESCRIPTION: Defines the reset method for GridWorldEnv, which initializes a new episode by randomly placing the agent and target, and returns the initial observation and info.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/introduction/create_custom_env.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef reset(self, seed: Optional[int] = None, options: Optional[dict] = None):\n    # We need the following line to seed self.np_random\n    super().reset(seed=seed)\n\n    # Choose the agent's location uniformly at random\n    self._agent_location = self.np_random.integers(0, self.size, size=2, dtype=int)\n\n    # We will sample the target's location randomly until it does not coincide with the agent's location\n    self._target_location = self._agent_location\n    while np.array_equal(self._target_location, self._agent_location):\n        self._target_location = self.np_random.integers(\n            0, self.size, size=2, dtype=int\n        )\n\n    observation = self._get_obs()\n    info = self._get_info()\n\n    return observation, info\n```\n\n----------------------------------------\n\nTITLE: Fundamental Spaces Documentation\nDESCRIPTION: RST markup listing and describing the fundamental space types in Gymnasium.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/spaces.md#2025-04-22_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. py:currentmodule:: gymnasium.spaces\n\n* :class:`Box` - Supports continuous (and discrete) vectors or matrices, used for vector observations, images, etc\n* :class:`Discrete` - Supports a single discrete number of values with an optional start for the values\n* :class:`MultiBinary` - Supports single or matrices of binary values, used for holding down a button or if an agent has an object\n* :class:`MultiDiscrete` - Supports multiple discrete values with multiple axes, used for controller actions\n* :class:`Text` - Supports strings, used for passing agent messages, mission details, etc\n```\n\n----------------------------------------\n\nTITLE: Visualizing Training Results for Q-learning Agent in Python\nDESCRIPTION: This code snippet shows how to use matplotlib to visualize the training results of the Q-learning agent, including episode rewards, episode lengths, and training error.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/introduction/train_agent.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom matplotlib import pyplot as plt\n\ndef get_moving_avgs(arr, window, convolution_mode):\n    return np.convolve(\n        np.array(arr).flatten(),\n        np.ones(window),\n        mode=convolution_mode\n    ) / window\n\n# Smooth over a 500 episode window\nrolling_length = 500\nfig, axs = plt.subplots(ncols=3, figsize=(12, 5))\n\naxs[0].set_title(\"Episode rewards\")\nreward_moving_average = get_moving_avgs(\n    env.return_queue,\n    rolling_length,\n    \"valid\"\n)\naxs[0].plot(range(len(reward_moving_average)), reward_moving_average)\n\naxs[1].set_title(\"Episode lengths\")\nlength_moving_average = get_moving_avgs(\n    env.length_queue,\n    rolling_length,\n    \"valid\"\n)\naxs[1].plot(range(len(length_moving_average)), length_moving_average)\n\naxs[2].set_title(\"Training Error\")\ntraining_error_moving_average = get_moving_avgs(\n    agent.training_error,\n    rolling_length,\n    \"same\"\n)\naxs[2].plot(range(len(training_error_moving_average)), training_error_moving_average)\nplt.tight_layout()\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Core SyncVectorEnv Methods Documentation\nDESCRIPTION: RST documentation block defining the main SyncVectorEnv class methods including reset, step, close, call, get_attr, and set_attr functions.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/vector/sync_vector_env.md#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n{eval-rst}\n.. autoclass:: gymnasium.vector.SyncVectorEnv\n\n    .. automethod:: gymnasium.vector.SyncVectorEnv.reset\n    .. automethod:: gymnasium.vector.SyncVectorEnv.step\n    .. automethod:: gymnasium.vector.SyncVectorEnv.close\n\n    .. automethod:: gymnasium.vector.SyncVectorEnv.call\n    .. automethod:: gymnasium.vector.SyncVectorEnv.get_attr\n    .. automethod:: gymnasium.vector.SyncVectorEnv.set_attr\n```\n\n----------------------------------------\n\nTITLE: Applying FlattenObservation Wrapper to a Gymnasium Environment\nDESCRIPTION: This snippet demonstrates how to apply the FlattenObservation wrapper to transform a dictionary observation space into a flat array. It shows the environment before and after wrapping, highlighting how the observation space and reset output are modified without changing the underlying environment.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/introduction/create_custom_env.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> from gymnasium.wrappers import FlattenObservation\n\n>>> env = gym.make('gymnasium_env/GridWorld-v0')\n>>> env.observation_space\nDict('agent': Box(0, 4, (2,), int64), 'target': Box(0, 4, (2,), int64))\n>>> env.reset()\n({'agent': array([4, 1]), 'target': array([2, 4])}, {'distance': 5.0})\n>>> wrapped_env = FlattenObservation(env)\n>>> wrapped_env.observation_space\nBox(0, 4, (4,), int64)\n>>> wrapped_env.reset()\n(array([3, 0, 2, 1]), {'distance': 2.0})\n```\n\n----------------------------------------\n\nTITLE: Creating Gymnasium Environments with Different Configurations\nDESCRIPTION: This snippet shows multiple ways to create the registered GridWorld environment using gym.make with different parameters. It demonstrates basic initialization, setting episode limits, customizing environment size, and creating vectorized environments with multiple instances.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/introduction/create_custom_env.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport gymnasium as gym\n>>> gym.make(\"gymnasium_env/GridWorld-v0\")\n<OrderEnforcing<PassiveEnvChecker<GridWorld<gymnasium_env/GridWorld-v0>>>>\n>>> gym.make(\"gymnasium_env/GridWorld-v0\", max_episode_steps=100)\n<TimeLimit<OrderEnforcing<PassiveEnvChecker<GridWorld<gymnasium_env/GridWorld-v0>>>>>\n>>> env = gym.make(\"gymnasium_env/GridWorld-v0\", size=10)\n>>> env.unwrapped.size\n10\n>>> gym.make_vec(\"gymnasium_env/GridWorld-v0\", num_envs=3)\nSyncVectorEnv(gymnasium_env/GridWorld-v0, num_envs=3)\n```\n\n----------------------------------------\n\nTITLE: VectorEnv Additional Methods Documentation\nDESCRIPTION: Auto-documentation directives for additional VectorEnv properties including unwrapped and random number generation.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/vector.md#2025-04-22_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. autoproperty:: gymnasium.vector.VectorEnv.unwrapped\n.. autoproperty:: gymnasium.vector.VectorEnv.np_random\n.. autoproperty:: gymnasium.vector.VectorEnv.np_random_seed\n```\n\n----------------------------------------\n\nTITLE: Vectorized Environment Usage in RST Documentation\nDESCRIPTION: RST documentation block explaining the use of vectorized environments in Gymnasium. References SyncVectorEnv and AsyncVectorEnv classes for parallel environment execution, and the make_vec method for easy creation of vectorized environments.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/introduction/speed_up_env.md#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. py:currentmodule:: gymnasium\n\nNormally in training, agents will sample from a single environment limiting the number of steps (samples) per second to the speed of the environment. Training can be substantially increased through acting in multiple environments at the same time, referred to as vectorized environments where multiple instances of the same environment run in parallel (on multiple CPUs). Gymnasium provide two built in classes to vectorize most generic environments: :class:`gymnasium.vector.SyncVectorEnv` and :class:`gymnasium.vector.AsyncVectorEnv` which can be easily created with :meth:`gymnasium.make_vec`.\n\nIt should be noted that vectorizing environments might require changes to your training algorithm and can cause instability in training for very large numbers of sub-environments.\n```\n\n----------------------------------------\n\nTITLE: AsyncVectorEnv Random Properties Documentation\nDESCRIPTION: RST documentation block for additional properties related to random number generation in AsyncVectorEnv.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/vector/async_vector_env.md#2025-04-22_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n{eval-rst}\n.. autoproperty:: gymnasium.vector.AsyncVectorEnv.np_random\n.. autoproperty:: gymnasium.vector.AsyncVectorEnv.np_random_seed\n```\n\n----------------------------------------\n\nTITLE: Vector-Specific Wrappers Documentation in RST\nDESCRIPTION: ReStructuredText documentation for wrappers that are specific to vectorized environments. Includes DictInfoToList and vector transformation wrappers for observations, actions, and rewards.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/vector/wrappers.md#2025-04-22_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: gymnasium.wrappers.vector.DictInfoToList\n\n.. autoclass:: gymnasium.wrappers.vector.VectorizeTransformObservation\n.. autoclass:: gymnasium.wrappers.vector.VectorizeTransformAction\n.. autoclass:: gymnasium.wrappers.vector.VectorizeTransformReward\n```\n\n----------------------------------------\n\nTITLE: Implementing Step Function for GridWorldEnv in Python\nDESCRIPTION: Defines the step method for GridWorldEnv, which processes the agent's action, updates the environment state, and returns the new observation, reward, termination status, and info.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/introduction/create_custom_env.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef step(self, action):\n    # Map the action (element of {0,1,2,3}) to the direction we walk in\n    direction = self._action_to_direction[action]\n    # We use `np.clip` to make sure we don't leave the grid bounds\n    self._agent_location = np.clip(\n        self._agent_location + direction, 0, self.size - 1\n    )\n\n    # An environment is completed if and only if the agent has reached the target\n    terminated = np.array_equal(self._agent_location, self._target_location)\n    truncated = False\n    reward = 1 if terminated else 0  # the agent is only reached at the end of the episode\n    observation = self._get_obs()\n    info = self._get_info()\n\n    return observation, reward, terminated, truncated, info\n```\n\n----------------------------------------\n\nTITLE: Accessing Action and Observation Spaces in Python\nDESCRIPTION: Demonstrates how to access and inspect the action and observation spaces of a Gymnasium environment. It shows the structure of discrete action spaces and continuous observation spaces.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/env.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> env.action_space\nDiscrete(2)\n>>> env.observation_space\nBox(-inf, inf, (4,), float32)\n```\n\n----------------------------------------\n\nTITLE: Gymnasium Make and Register Overview\nDESCRIPTION: Documentation block for core Gymnasium functions including make, make_vec, register, spec, and pprint_registry, which are used to create and manage environments.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/registry.md#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nGymnasium allows users to automatically load environments, pre-wrapped with several important wrappers through the :meth:`gymnasium.make` function. To do this, the environment must be registered prior with :meth:`gymnasium.register`. To get the environment specifications for a registered environment, use :meth:`gymnasium.spec` and to print the whole registry, use :meth:`gymnasium.pprint_registry`.\n\n.. autofunction:: gymnasium.make\n.. autofunction:: gymnasium.make_vec\n.. autofunction:: gymnasium.register\n.. autofunction:: gymnasium.spec\n.. autofunction:: gymnasium.pprint_registry\n```\n\n----------------------------------------\n\nTITLE: Core Registry Variables and Classes\nDESCRIPTION: Documentation for core registry components including EnvSpec and WrapperSpec classes, the global registry object, and the current_namespace variable.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/registry.md#2025-04-22_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: gymnasium.envs.registration.EnvSpec\n.. autoclass:: gymnasium.envs.registration.WrapperSpec\n.. attribute:: gymnasium.envs.registration.registry\n\n    The Global registry for gymnasium which is where environment specifications are stored by :meth:`gymnasium.register` and from which :meth:`gymnasium.make` is used to create environments.\n\n.. attribute:: gymnasium.envs.registration.current_namespace\n\n    The current namespace when creating or registering environments. This is by default ``None`` by with :meth:`namespace` this can be modified to automatically set the environment id namespace.\n```\n\n----------------------------------------\n\nTITLE: Listing Gymnasium Standard Wrappers with RST Table\nDESCRIPTION: A restructured text (RST) table that lists all standard wrappers provided by Gymnasium, including their names and descriptions. Each wrapper is documented with a brief explanation of its purpose and functionality.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/wrappers/table.md#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. py:currentmodule:: gymnasium.wrappers\n\n.. list-table::\n    :header-rows: 1\n\n    * - Name\n      - Description\n    * - :class:`AtariPreprocessing`\n      - Implements the common preprocessing techniques for Atari environments (excluding frame stacking).\n    * - :class:`Autoreset`\n      - The wrapped environment is automatically reset when an terminated or truncated state is reached.\n    * - :class:`ClipAction`\n      - Clips the ``action`` pass to ``step`` to be within the environment's `action_space`.\n    * - :class:`ClipReward`\n      - Clips the rewards for an environment between an upper and lower bound.\n    * - :class:`DelayObservation`\n      - Adds a delay to the returned observation from the environment.\n    * - :class:`DtypeObservation`\n      - Modifies the dtype of an observation array to a specified dtype.\n    * - :class:`FilterObservation`\n      - Filters a Dict or Tuple observation spaces by a set of keys or indexes.\n    * - :class:`FlattenObservation`\n      - Flattens the environment's observation space and each observation from ``reset`` and ``step`` functions.\n    * - :class:`FrameStackObservation`\n      - Stacks the observations from the last ``N`` time steps in a rolling manner.\n    * - :class:`GrayscaleObservation`\n      - Converts an image observation computed by ``reset`` and ``step`` from RGB to Grayscale.\n    * - :class:`HumanRendering`\n      - Allows human like rendering for environments that support \"rgb_array\" rendering.\n    * - :class:`JaxToNumpy`\n      - Wraps a Jax-based environment such that it can be interacted with NumPy arrays.\n    * - :class:`JaxToTorch`\n      - Wraps a Jax-based environment so that it can be interacted with PyTorch Tensors.\n    * - :class:`MaxAndSkipObservation`\n      - Skips the N-th frame (observation) and return the max values between the two last observations.\n    * - :class:`NormalizeObservation`\n      - Normalizes observations to be centered at the mean with unit variance.\n    * - :class:`NormalizeReward`\n      - Normalizes immediate rewards such that their exponential moving average has a fixed variance.\n    * - :class:`NumpyToTorch`\n      - Wraps a NumPy-based environment such that it can be interacted with PyTorch Tensors.\n    * - :class:`OrderEnforcing`\n      - Will produce an error if ``step`` or ``render`` is called before ``reset``.\n    * - :class:`PassiveEnvChecker`\n      - A passive environment checker wrapper that surrounds the ``step``, ``reset`` and ``render`` functions to check they follows gymnasium's API.\n    * - :class:`RecordEpisodeStatistics`\n      - This wrapper will keep track of cumulative rewards and episode lengths.\n    * - :class:`RecordVideo`\n      - Records videos of environment episodes using the environment's render function.\n    * - :class:`RenderCollection`\n      - Collect rendered frames of an environment such ``render`` returns a ``list[RenderedFrame]``.\n    * - :class:`AddRenderObservation`\n      - Includes the rendered observations in the environment's observations.\n    * - :class:`RescaleAction`\n      - Affinely (linearly) rescales a ``Box`` action space of the environment to within the range of ``[min_action, max_action]``.\n    * - :class:`RescaleObservation`\n      - Affinely (linearly) rescales a ``Box`` observation space of the environment to within the range of ``[min_obs, max_obs]``.\n    * - :class:`ReshapeObservation`\n      - Reshapes Array based observations to a specified shape.\n    * - :class:`ResizeObservation`\n      - Resizes image observations using OpenCV to a specified shape.\n    * - :class:`StickyAction`\n      - Adds a probability that the action is repeated for the same ``step`` function.\n    * - :class:`TimeAwareObservation`\n      - Augment the observation with the number of time steps taken within an episode.\n    * - :class:`TimeLimit`\n      - Limits the number of steps for an environment through truncating the environment if a maximum number of timesteps is exceeded.\n    * - :class:`TransformAction`\n      - Applies a function to the ``action`` before passing the modified value to the environment ``step`` function.\n    * - :class:`TransformObservation`\n      - Applies a function to the ``observation`` received from the environment's ``reset`` and ``step`` that is passed back to the user.\n    * - :class:`TransformReward`\n      - Applies a function to the ``reward`` received from the environment's ``step``.\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Gymnasium Environment\nDESCRIPTION: This snippet demonstrates how to register a custom GridWorld environment in Gymnasium. The registration process assigns an ID with an optional namespace, a name, and a version, and specifies the entry point to the environment class.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/introduction/create_custom_env.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ngym.register(\n    id=\"gymnasium_env/GridWorld-v0\",\n    entry_point=GridWorldEnv,\n)\n```\n\n----------------------------------------\n\nTITLE: Vectorizing Spaces Functions Reference in Python\nDESCRIPTION: References to utility functions for vectorizing spaces in Gymnasium, including batch_space for creating batched versions of spaces, concatenate for combining data from multiple spaces, iterate for iterating through batched samples, and create_empty_array for initializing arrays.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/vector/utils.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: gymnasium.vector.utils.batch_space\n.. autofunction:: gymnasium.vector.utils.concatenate\n.. autofunction:: gymnasium.vector.utils.iterate\n.. autofunction:: gymnasium.vector.utils.create_empty_array\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running a Gym Environment (v0.21)\nDESCRIPTION: Demonstrates how to create, seed, and run a Gym environment using the v0.21 API. It includes environment creation, seeding, resetting, stepping through the environment, and rendering.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/introduction/migration_guide.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport gym\nenv = gym.make(\"LunarLander-v3\", options={})\nenv.seed(123)\nobservation = env.reset()\n\ndone = False\nwhile not done:\n    action = env.action_space.sample()  # agent policy that uses the observation and info\n    observation, reward, done, info = env.step(action)\n\n    env.render(mode=\"human\")\n\nenv.close()\n```\n\n----------------------------------------\n\nTITLE: Converting Jax-based Functional Environments to Standard Env in Gymnasium\nDESCRIPTION: Documentation reference for the FunctionalJaxEnv class which allows converting Jax-based functional environments to standard Gymnasium environments. It includes standard environment interface methods like reset, step, and render.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/functional.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: gymnasium.envs.functional_jax_env.FunctionalJaxEnv\n\n    .. automethod:: gymnasium.envs.functional_jax_env.FunctionalJaxEnv.reset\n    .. automethod:: gymnasium.envs.functional_jax_env.FunctionalJaxEnv.step\n    .. automethod:: gymnasium.envs.functional_jax_env.FunctionalJaxEnv.render\n```\n\n----------------------------------------\n\nTITLE: Recording Agent Behavior Periodically During Training in Gymnasium\nDESCRIPTION: This code snippet shows how to record video periodically and statistics for every episode during agent training in a Gymnasium environment. It uses RecordVideo wrapper with a custom trigger and RecordEpisodeStatistics wrapper to capture performance data.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/introduction/record_agent.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nimport gymnasium as gym\nfrom gymnasium.wrappers import RecordEpisodeStatistics, RecordVideo\n\ntraining_period = 250  # record the agent's episode every 250\nnum_training_episodes = 10_000  # total number of training episodes\n\nenv = gym.make(\"CartPole-v1\", render_mode=\"rgb_array\")  # replace with your environment\nenv = RecordVideo(env, video_folder=\"cartpole-agent\", name_prefix=\"training\",\n                 episode_trigger=lambda x: x % training_period == 0)\nenv = RecordEpisodeStatistics(env)\n\nfor episode_num in range(num_training_episodes):\n    obs, info = env.reset()\n\n    episode_over = False\n    while not episode_over:\n        action = env.action_space.sample()  # replace with actual agent\n        obs, reward, terminated, truncated, info = env.step(action)\n\n        episode_over = terminated or truncated\n\n    logging.info(f\"episode-{episode_num}\", info[\"episode\"])\nenv.close()\n```\n\n----------------------------------------\n\nTITLE: Composite Spaces Documentation\nDESCRIPTION: RST markup listing and describing the composite space types for combining fundamental spaces.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/spaces.md#2025-04-22_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n.. py:currentmodule:: gymnasium.spaces\n\n* :class:`Dict` - Supports a dictionary of keys and subspaces, used for a fixed number of unordered spaces\n* :class:`Tuple` - Supports a tuple of subspaces, used for multiple for a fixed number of ordered spaces\n* :class:`Sequence` - Supports a variable number of instances of a single subspace, used for entities spaces or selecting a variable number of actions\n* :class:`Graph` - Supports graph based actions or observations with discrete or continuous nodes and edge values\n* :class:`OneOf` - Supports optional action spaces such that an action can be one of N possible subspaces\n```\n\n----------------------------------------\n\nTITLE: Accessing Unwrapped Environment in Gymnasium\nDESCRIPTION: This code shows how to access the base environment beneath multiple layers of wrappers using the unwrapped attribute, which is useful for directly accessing underlying environment functions.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/introduction/basic_usage.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> wrapped_env\n<FlattenObservation<TimeLimit<OrderEnforcing<PassiveEnvChecker<CarRacing<CarRacing-v3>>>>>>\n>>> wrapped_env.unwrapped\n<gymnasium.envs.box2d.car_racing.CarRacing object at 0x7f04efcb8850>\n```\n\n----------------------------------------\n\nTITLE: Documenting Gymnasium Wrapper Attributes in reStructuredText\nDESCRIPTION: This snippet uses the eval-rst directive to document various attributes and properties of the gymnasium.Wrapper class using Sphinx's autoattribute and autoproperty directives.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/wrappers.md#2025-04-22_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n{eval-rst}\n.. autoattribute:: gymnasium.Wrapper.env\n\n    The environment (one level underneath) this wrapper.\n\n    This may itself be a wrapped environment. To obtain the environment underneath all layers of wrappers, use :attr:`gymnasium.Wrapper.unwrapped`.\n\n.. autoproperty:: gymnasium.Wrapper.action_space\n.. autoproperty:: gymnasium.Wrapper.observation_space\n.. autoproperty:: gymnasium.Wrapper.spec\n.. autoproperty:: gymnasium.Wrapper.metadata\n.. autoproperty:: gymnasium.Wrapper.np_random\n.. autoproperty:: gymnasium.Wrapper.np_random_seed\n.. autoproperty:: gymnasium.Wrapper.unwrapped\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running a Gymnasium Environment (v0.26+)\nDESCRIPTION: Shows how to create, seed, and run a Gymnasium environment using the v0.26+ API. It demonstrates the new initialization process, seeding method, reset function, step function with additional return values, and the new rendering approach.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/introduction/migration_guide.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport gym\nenv = gym.make(\"LunarLander-v3\", render_mode=\"human\")\nobservation, info = env.reset(seed=123, options={})\n\ndone = False\nwhile not done:\n    action = env.action_space.sample()  # agent policy that uses the observation and info\n    observation, reward, terminated, truncated, info = env.step(action)\n\n    done = terminated or truncated\n\nenv.close()\n```\n\n----------------------------------------\n\nTITLE: Initializing GridWorldEnv Class in Python\nDESCRIPTION: Defines the GridWorldEnv class, inheriting from gym.Env. Sets up the environment's size, agent and target locations, observation space, and action space.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/introduction/create_custom_env.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\nimport numpy as np\nimport gymnasium as gym\n\n\nclass GridWorldEnv(gym.Env):\n\n    def __init__(self, size: int = 5):\n        # The size of the square grid\n        self.size = size\n\n        # Define the agent and target location; randomly chosen in `reset` and updated in `step`\n        self._agent_location = np.array([-1, -1], dtype=np.int32)\n        self._target_location = np.array([-1, -1], dtype=np.int32)\n\n        # Observations are dictionaries with the agent's and the target's location.\n        # Each location is encoded as an element of {0, ..., `size`-1}^2\n        self.observation_space = gym.spaces.Dict(\n            {\n                \"agent\": gym.spaces.Box(0, size - 1, shape=(2,), dtype=int),\n                \"target\": gym.spaces.Box(0, size - 1, shape=(2,), dtype=int),\n            }\n        )\n\n        # We have 4 actions, corresponding to \"right\", \"up\", \"left\", \"down\"\n        self.action_space = gym.spaces.Discrete(4)\n        # Dictionary maps the abstract actions to the directions on the grid\n        self._action_to_direction = {\n            0: np.array([1, 0]),  # right\n            1: np.array([0, 1]),  # up\n            2: np.array([-1, 0]),  # left\n            3: np.array([0, -1]),  # down\n        }\n```\n\n----------------------------------------\n\nTITLE: Using Gymnasium's Specialized Compatibility Environments\nDESCRIPTION: Demonstrates how to use Gymnasium's specialized compatibility environments for handling older Gym versions, including direct environment instantiation and environment ID-based creation.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/introduction/gym_compatibility.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport gymnasium\n\nenv = gymnasium.make(\"GymV21Environment-v0\", env_id=\"CartPole-v1\", render_mode=\"human\")\n# or\nenv = gymnasium.make(\"GymV21Environment-v0\", env=OldV21Env())\n\n```\n\n----------------------------------------\n\nTITLE: Documenting ActionWrapper Base Class in Python\nDESCRIPTION: This code snippet uses Sphinx's eval-rst directive to generate documentation for the ActionWrapper base class in Gymnasium. It includes the class definition and the 'action' method.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/wrappers/action_wrappers.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: gymnasium.ActionWrapper\n\n    .. automethod:: gymnasium.ActionWrapper.action\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Gymnasium FuncEnv\nDESCRIPTION: Documentation reference for the FuncEnv class in Gymnasium's experimental functional module. This class provides methods for functional environment operations including state transformation, initialization, transitions, observations, rewards, and rendering.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/functional.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: gymnasium.experimental.functional.FuncEnv\n\n    .. automethod:: gymnasium.experimental.functional.FuncEnv.transform\n\n    .. automethod:: gymnasium.experimental.functional.FuncEnv.initial\n\n    .. automethod:: gymnasium.experimental.functional.FuncEnv.transition\n    .. automethod:: gymnasium.experimental.functional.FuncEnv.observation\n    .. automethod:: gymnasium.experimental.functional.FuncEnv.reward\n    .. automethod:: gymnasium.experimental.functional.FuncEnv.terminal\n\n    .. automethod:: gymnasium.experimental.functional.FuncEnv.state_info\n    .. automethod:: gymnasium.experimental.functional.FuncEnv.transition_info\n\n    .. automethod:: gymnasium.experimental.functional.FuncEnv.render_init\n    .. automethod:: gymnasium.experimental.functional.FuncEnv.render_image\n    .. automethod:: gymnasium.experimental.functional.FuncEnv.render_close\n```\n\n----------------------------------------\n\nTITLE: Uncommon Wrappers Reference in RST\nDESCRIPTION: Documentation reference for less common Gymnasium wrappers including Autoreset, PassiveEnvChecker, HumanRendering, OrderEnforcing, and RenderCollection using Sphinx autoclass directives.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/wrappers/misc_wrappers.md#2025-04-22_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: gymnasium.wrappers.Autoreset\n.. autoclass:: gymnasium.wrappers.PassiveEnvChecker\n.. autoclass:: gymnasium.wrappers.HumanRendering\n.. autoclass:: gymnasium.wrappers.OrderEnforcing\n.. autoclass:: gymnasium.wrappers.RenderCollection\n```\n\n----------------------------------------\n\nTITLE: Documenting Available Action Wrappers in Python\nDESCRIPTION: This code snippet uses Sphinx's eval-rst directive to generate documentation for four specific action wrapper classes available in Gymnasium: TransformAction, ClipAction, RescaleAction, and StickyAction.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/wrappers/action_wrappers.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: gymnasium.wrappers.TransformAction\n.. autoclass:: gymnasium.wrappers.ClipAction\n.. autoclass:: gymnasium.wrappers.RescaleAction\n.. autoclass:: gymnasium.wrappers.StickyAction\n```\n\n----------------------------------------\n\nTITLE: Vector Utility Functions Documentation\nDESCRIPTION: RST markup documenting utility functions specific to vector environments.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/spaces.md#2025-04-22_snippet_7\n\nLANGUAGE: rst\nCODE:\n```\n.. py:currentmodule:: gymnasium\n\n* :class:`vector.utils.batch_space` - Transforms a space into the equivalent space for ``n`` users\n* :class:`vector.utils.concatenate` - Concatenates a space's samples into a pre-generated space\n* :class:`vector.utils.iterate` - Iterate over the batched space's samples\n* :class:`vector.utils.create_empty_array` - Creates an empty sample for an space (generally used with ``concatenate``)\n* :class:`vector.utils.create_shared_memory` - Creates a shared memory for asynchronous (multiprocessing) environment\n* :class:`vector.utils.read_from_shared_memory` - Reads a shared memory for asynchronous (multiprocessing) environment\n* :class:`vector.utils.write_to_shared_memory` - Write to a shared memory for asynchronous (multiprocessing) environment\n```\n\n----------------------------------------\n\nTITLE: Utility Functions Documentation\nDESCRIPTION: RST markup documenting utility functions for space manipulation.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/spaces.md#2025-04-22_snippet_6\n\nLANGUAGE: rst\nCODE:\n```\n.. py:currentmodule:: gymnasium.spaces\n\n* :class:`utils.flatdim` - The number of dimensions the flattened space will contain\n* :class:`utils.flatten_space` - Flattens a space for which the :class:`utils.flattened` space instances will contain\n* :class:`utils.flatten` - Flattens an instance of a space that is contained within the flattened version of the space\n* :class:`utils.unflatten` - The reverse of the :class:`utils.flatten_space` function\n```\n\n----------------------------------------\n\nTITLE: Implementing Observation and Info Methods in Python\nDESCRIPTION: Defines methods to construct observations and auxiliary information for the GridWorldEnv.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/introduction/create_custom_env.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef _get_obs(self):\n    return {\"agent\": self._agent_location, \"target\": self._target_location}\n\ndef _get_info(self):\n    return {\n        \"distance\": np.linalg.norm(\n            self._agent_location - self._target_location, ord=1\n        )\n    }\n```\n\n----------------------------------------\n\nTITLE: Using Gym v0.21 API Compatibility\nDESCRIPTION: Shows how to use the apply_api_compatibility flag to convert a v0.21 API compliant environment to be compatible with v0.26+.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/introduction/gym_compatibility.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport gym\n\nenv = gym.make(\"OldV21Env-v0\", apply_api_compatibility=True)\n```\n\n----------------------------------------\n\nTITLE: VectorEnv Class Documentation\nDESCRIPTION: Auto-documentation directive for the main VectorEnv class.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/vector.md#2025-04-22_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: gymnasium.vector.VectorEnv\n```\n\n----------------------------------------\n\nTITLE: VectorEnv Attributes Documentation\nDESCRIPTION: Auto-documentation directives for VectorEnv attributes including spaces, specifications, and metadata.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/vector.md#2025-04-22_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. autoattribute:: gymnasium.vector.VectorEnv.num_envs\n\n    The number of sub-environments in the vector environment.\n\n.. autoattribute:: gymnasium.vector.VectorEnv.action_space\n\n    The (batched) action space. The input actions of `step` must be valid elements of `action_space`.\n\n.. autoattribute:: gymnasium.vector.VectorEnv.observation_space\n\n    The (batched) observation space. The observations returned by `reset` and `step` are valid elements of `observation_space`.\n\n.. autoattribute:: gymnasium.vector.VectorEnv.single_action_space\n\n    The action space of a sub-environment.\n\n.. autoattribute:: gymnasium.vector.VectorEnv.single_observation_space\n\n    The observation space of a sub-environment.\n\n.. autoattribute:: gymnasium.vector.VectorEnv.spec\n\n    The ``EnvSpec`` of the environment normally set during :py:meth:`gymnasium.make_vec`\n\n.. autoattribute:: gymnasium.vector.VectorEnv.metadata\n\n    The metadata of the environment containing rendering modes, rendering fps, etc\n\n.. autoattribute:: gymnasium.vector.VectorEnv.render_mode\n\n    The render mode of the environment which should follow similar specifications to `Env.render_mode`.\n\n.. autoattribute:: gymnasium.vector.VectorEnv.closed\n\n    If the vector environment has been closed already.\n```\n\n----------------------------------------\n\nTITLE: Base Vector Wrapper Class Documentation in RST\nDESCRIPTION: ReStructuredText documentation for the base vector wrapper classes in Gymnasium. This includes VectorWrapper, VectorObservationWrapper, VectorActionWrapper, and VectorRewardWrapper along with their core methods.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/vector/wrappers.md#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: gymnasium.vector.VectorWrapper\n\n    .. automethod:: gymnasium.vector.VectorWrapper.step\n    .. automethod:: gymnasium.vector.VectorWrapper.reset\n    .. automethod:: gymnasium.vector.VectorWrapper.render\n    .. automethod:: gymnasium.vector.VectorWrapper.close\n\n.. autoclass:: gymnasium.vector.VectorObservationWrapper\n\n    .. automethod:: gymnasium.vector.VectorObservationWrapper.observations\n\n.. autoclass:: gymnasium.vector.VectorActionWrapper\n\n    .. automethod:: gymnasium.vector.VectorActionWrapper.actions\n\n.. autoclass:: gymnasium.vector.VectorRewardWrapper\n\n    .. automethod:: gymnasium.vector.VectorRewardWrapper.rewards\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx RST Documentation for Environment Checker\nDESCRIPTION: RST directive for documenting the environment validation utility function.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/utils.md#2025-04-22_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: gymnasium.utils.env_checker.check_env\n```\n\n----------------------------------------\n\nTITLE: Vectorized Observation Wrappers Documentation in RST\nDESCRIPTION: ReStructuredText documentation for observation transformation wrappers implemented for vectorized environments. These wrappers modify observation data in various ways such as filtering, flattening, rescaling, and normalizing.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/vector/wrappers.md#2025-04-22_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: gymnasium.wrappers.vector.TransformObservation\n.. autoclass:: gymnasium.wrappers.vector.FilterObservation\n.. autoclass:: gymnasium.wrappers.vector.FlattenObservation\n.. autoclass:: gymnasium.wrappers.vector.GrayscaleObservation\n.. autoclass:: gymnasium.wrappers.vector.ResizeObservation\n.. autoclass:: gymnasium.wrappers.vector.ReshapeObservation\n.. autoclass:: gymnasium.wrappers.vector.RescaleObservation\n.. autoclass:: gymnasium.wrappers.vector.DtypeObservation\n.. autoclass:: gymnasium.wrappers.vector.NormalizeObservation\n```\n\n----------------------------------------\n\nTITLE: Vectorized Reward Wrappers Documentation in RST\nDESCRIPTION: ReStructuredText documentation for reward transformation wrappers implemented for vectorized environments. Includes wrappers for transforming, clipping, and normalizing rewards.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/vector/wrappers.md#2025-04-22_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: gymnasium.wrappers.vector.TransformReward\n.. autoclass:: gymnasium.wrappers.vector.ClipReward\n.. autoclass:: gymnasium.wrappers.vector.NormalizeReward\n```\n\n----------------------------------------\n\nTITLE: Vectorized Action Wrappers Documentation in RST\nDESCRIPTION: ReStructuredText documentation for action transformation wrappers implemented for vectorized environments. Includes wrappers for transforming, clipping, and rescaling actions.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/vector/wrappers.md#2025-04-22_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: gymnasium.wrappers.vector.TransformAction\n.. autoclass:: gymnasium.wrappers.vector.ClipAction\n.. autoclass:: gymnasium.wrappers.vector.RescaleAction\n```\n\n----------------------------------------\n\nTITLE: Vectorized Common Wrappers Documentation in RST\nDESCRIPTION: ReStructuredText documentation for common wrappers implemented for vectorized environments. Currently includes RecordEpisodeStatistics for tracking episode information.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/vector/wrappers.md#2025-04-22_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: gymnasium.wrappers.vector.RecordEpisodeStatistics\n```\n\n----------------------------------------\n\nTITLE: Documenting Gymnasium Wrapper Class in reStructuredText\nDESCRIPTION: This snippet uses the eval-rst directive to document the gymnasium.Wrapper class using Sphinx's autoclass directive.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/wrappers.md#2025-04-22_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n{eval-rst}\n.. autoclass:: gymnasium.Wrapper\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx RST Documentation for Performance Benchmarking\nDESCRIPTION: RST directives for documenting performance benchmarking utilities for measuring environment runtime performance.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/utils.md#2025-04-22_snippet_6\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: gymnasium.utils.performance.benchmark_step\n.. autofunction:: gymnasium.utils.performance.benchmark_init\n.. autofunction:: gymnasium.utils.performance.benchmark_render\n```\n\n----------------------------------------\n\nTITLE: Data Conversion Wrappers Documentation in RST\nDESCRIPTION: ReStructuredText documentation for data conversion wrappers implemented for vectorized environments. These wrappers facilitate conversion between different numerical computing libraries like JAX, NumPy, and PyTorch.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/vector/wrappers.md#2025-04-22_snippet_6\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: gymnasium.wrappers.vector.JaxToNumpy\n.. autoclass:: gymnasium.wrappers.vector.JaxToTorch\n.. autoclass:: gymnasium.wrappers.vector.NumpyToTorch\n```\n\n----------------------------------------\n\nTITLE: Loading OpenAI Gym Environment in Gymnasium\nDESCRIPTION: Demonstrates how to load an OpenAI Gym environment using Gymnasium's compatibility features through the GymV26Environment-v0 environment wrapper.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/introduction/gym_compatibility.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport gymnasium as gym\n\nenv = gym.make(\"GymV26Environment-v0\", env_id=\"GymEnv-v1\")\n```\n\n----------------------------------------\n\nTITLE: Space Methods Documentation\nDESCRIPTION: RST markup documenting the core methods of the Space class.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/spaces.md#2025-04-22_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. py:currentmodule:: gymnasium.spaces\n\n.. automethod:: Space.sample\n.. automethod:: Space.contains\n.. automethod:: Space.seed\n.. automethod:: Space.to_jsonable\n.. automethod:: Space.from_jsonable\n```\n\n----------------------------------------\n\nTITLE: Documenting Gymnasium Composite Spaces with RST\nDESCRIPTION: ReStructuredText documentation blocks for Gymnasium's composite spaces including Dict, Tuple, Sequence, Graph, and OneOf classes with their respective sample and seed methods.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/spaces/composite.md#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: gymnasium.spaces.Dict\n\n    .. automethod:: gymnasium.spaces.Dict.sample\n    .. automethod:: gymnasium.spaces.Dict.seed\n\n.. autoclass:: gymnasium.spaces.Tuple\n\n    .. automethod:: gymnasium.spaces.Tuple.sample\n    .. automethod:: gymnasium.spaces.Tuple.seed\n\n.. autoclass:: gymnasium.spaces.Sequence\n\n    .. automethod:: gymnasium.spaces.Sequence.sample\n    .. automethod:: gymnasium.spaces.Sequence.seed\n\n.. autoclass:: gymnasium.spaces.Graph\n\n    .. automethod:: gymnasium.spaces.Graph.sample\n    .. automethod:: gymnasium.spaces.Graph.seed\n\n.. autoclass:: gymnasium.spaces.OneOf\n\n    .. automethod:: gymnasium.spaces.OneOf.sample\n    .. automethod:: gymnasium.spaces.OneOf.seed\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx RST Documentation for Video Saving\nDESCRIPTION: RST directives for documenting video saving utilities including save_video function and capped_cubic_video_schedule.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/utils.md#2025-04-22_snippet_4\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: gymnasium.utils.save_video.save_video\n.. autofunction:: gymnasium.utils.save_video.capped_cubic_video_schedule\n```\n\n----------------------------------------\n\nTITLE: SyncVectorEnv Random Properties Documentation\nDESCRIPTION: RST documentation block for random number generation properties of SyncVectorEnv, including np_random and np_random_seed.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/vector/sync_vector_env.md#2025-04-22_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n{eval-rst}\n.. autoproperty:: gymnasium.vector.SyncVectorEnv.np_random\n.. autoproperty:: gymnasium.vector.SyncVectorEnv.np_random_seed\n```\n\n----------------------------------------\n\nTITLE: Building Gymnasium Documentation Once\nDESCRIPTION: Commands to build the Gymnasium documentation a single time using the make dirhtml command.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd docs\nmake dirhtml\n```\n\n----------------------------------------\n\nTITLE: Documenting Gymnasium Space Utility Functions with RST\nDESCRIPTION: RestructuredText directives for auto-generating documentation of four core Gymnasium space utility functions: flatten_space, flatten, flatdim, and unflatten. These functions handle space flattening operations in the Gymnasium reinforcement learning library.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/spaces/utils.md#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: gymnasium.spaces.utils.flatten_space\n.. autofunction:: gymnasium.spaces.utils.flatten\n.. autofunction:: gymnasium.spaces.utils.flatdim\n.. autofunction:: gymnasium.spaces.utils.unflatten\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx RST Documentation for Environment Pickling\nDESCRIPTION: RST directive for documenting the EzPickle utility class for environment serialization.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/utils.md#2025-04-22_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: gymnasium.utils.ezpickle.EzPickle\n```\n\n----------------------------------------\n\nTITLE: Space Attributes Documentation\nDESCRIPTION: RST markup documenting the core attributes of the Space class including shape, dtype, and other properties.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/spaces.md#2025-04-22_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. py:currentmodule:: gymnasium.spaces\n\n.. autoproperty:: Space.shape\n.. property:: Space.dtype\n\n    Return the data type of this space.\n.. autoproperty:: Space.is_np_flattenable\n.. autoproperty:: Space.np_random\n```\n\n----------------------------------------\n\nTITLE: Configuring Toy Text Environment Navigation\nDESCRIPTION: Table of contents configuration for toy text environments documentation, hiding the navigation menu and listing the available environments.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/toy_text.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{toctree}\n:hidden:\n\ntoy_text/blackjack.md\ntoy_text/taxi.md\ntoy_text/cliff_walking.md\ntoy_text/frozen_lake.md\n```\n\n----------------------------------------\n\nTITLE: Space Class Documentation\nDESCRIPTION: RST markup for auto-documenting the Space class and module.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/spaces.md#2025-04-22_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: gymnasium.spaces\n\n.. autoclass:: gymnasium.spaces.Space\n```\n\n----------------------------------------\n\nTITLE: Applying FlattenObservation Wrapper to CarRacing Environment in Python\nDESCRIPTION: This snippet demonstrates how to flatten a 3D observation space (96x96x3) to a 1D array (27648,) using the FlattenObservation wrapper in Gymnasium.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/introduction/basic_usage.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import gymnasium as gym\n>>> from gymnasium.wrappers import FlattenObservation\n>>> env = gym.make(\"CarRacing-v3\")\n>>> env.observation_space.shape\n(96, 96, 3)\n>>> wrapped_env = FlattenObservation(env)\n>>> wrapped_env.observation_space.shape\n(27648,)\n```\n\n----------------------------------------\n\nTITLE: Table of Contents Structure in RST\nDESCRIPTION: RST markup defining the hidden table of contents structure for the spaces documentation.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/spaces.md#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n{toctree}\n:hidden:\nspaces/fundamental\nspaces/composite\nspaces/utils\n```\n\n----------------------------------------\n\nTITLE: Documenting RewardWrapper Class in Python\nDESCRIPTION: This snippet uses Sphinx's autoclass and automethod directives to generate documentation for the RewardWrapper class and its reward method in Gymnasium.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/wrappers/reward_wrappers.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: gymnasium.RewardWrapper\n\n    .. automethod:: gymnasium.RewardWrapper.reward\n```\n\n----------------------------------------\n\nTITLE: VectorEnv Methods Documentation\nDESCRIPTION: Auto-documentation directives for VectorEnv core methods including step, reset, render, and close.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/vector.md#2025-04-22_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. automethod:: gymnasium.vector.VectorEnv.step\n.. automethod:: gymnasium.vector.VectorEnv.reset\n.. automethod:: gymnasium.vector.VectorEnv.render\n.. automethod:: gymnasium.vector.VectorEnv.close\n```\n\n----------------------------------------\n\nTITLE: Python Dependencies List for Gymnasium Documentation\nDESCRIPTION: A list of required Python packages and dependencies for building Gymnasium documentation and running environments. Includes Sphinx documentation tools, media processing libraries like MoviePy, and game interfaces like ALE-py.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsphinx\nsphinx-autobuild\nmyst-parser\nsphinx-gallery==0.14.0\ngit+https://github.com/Farama-Foundation/Celshast#egg=furo\nmoviepy\npygame\nsphinx_github_changelog\nale_py\ntabulate\n```\n\n----------------------------------------\n\nTITLE: Shared Memory Space Operations in Python\nDESCRIPTION: References to functions for shared memory operations, including create_shared_memory to initialize shared memory for a space, read_from_shared_memory to extract data from shared memory, and write_to_shared_memory to store data in shared memory.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/vector/utils.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: gymnasium.vector.utils.create_shared_memory\n.. autofunction:: gymnasium.vector.utils.read_from_shared_memory\n.. autofunction:: gymnasium.vector.utils.write_to_shared_memory\n```\n\n----------------------------------------\n\nTITLE: Core AsyncVectorEnv Methods Documentation\nDESCRIPTION: RST documentation block defining the main AsyncVectorEnv class and its core methods including reset, step, close, call, get_attr, and set_attr.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/vector/async_vector_env.md#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n{eval-rst}\n.. autoclass:: gymnasium.vector.AsyncVectorEnv\n\n    .. automethod:: gymnasium.vector.AsyncVectorEnv.reset\n    .. automethod:: gymnasium.vector.AsyncVectorEnv.step\n    .. automethod:: gymnasium.vector.AsyncVectorEnv.close\n\n    .. automethod:: gymnasium.vector.AsyncVectorEnv.call\n    .. automethod:: gymnasium.vector.AsyncVectorEnv.get_attr\n    .. automethod:: gymnasium.vector.AsyncVectorEnv.set_attr\n```\n\n----------------------------------------\n\nTITLE: Documenting Fundamental Spaces in Gymnasium using reStructuredText\nDESCRIPTION: This code snippet uses reStructuredText directives to generate documentation for the fundamental space classes in Gymnasium. It includes autoclass and automethod directives for Box, Discrete, MultiBinary, MultiDiscrete, and Text classes, focusing on their sample and seed methods.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/spaces/fundamental.md#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: gymnasium.spaces.Box\n\n    .. automethod:: gymnasium.spaces.Box.sample\n    .. automethod:: gymnasium.spaces.Box.seed\n    .. automethod:: gymnasium.spaces.Box.is_bounded\n\n.. autoclass:: gymnasium.spaces.Discrete\n\n    .. automethod:: gymnasium.spaces.Discrete.sample\n    .. automethod:: gymnasium.spaces.Discrete.seed\n\n.. autoclass:: gymnasium.spaces.MultiBinary\n\n    .. automethod:: gymnasium.spaces.MultiBinary.sample\n    .. automethod:: gymnasium.spaces.MultiBinary.seed\n\n.. autoclass:: gymnasium.spaces.MultiDiscrete\n\n    .. automethod:: gymnasium.spaces.MultiDiscrete.sample\n    .. automethod:: gymnasium.spaces.MultiDiscrete.seed\n\n.. autoclass:: gymnasium.spaces.Text\n\n    .. automethod:: gymnasium.spaces.Text.sample\n    .. automethod:: gymnasium.spaces.Text.seed\n```\n\n----------------------------------------\n\nTITLE: Documenting Implemented Observation Wrappers in Gymnasium using RST\nDESCRIPTION: RST directives to auto-generate documentation for various implemented observation wrappers in Gymnasium from their class docstrings.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/wrappers/observation_wrappers.md#2025-04-22_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: gymnasium.wrappers.TransformObservation\n.. autoclass:: gymnasium.wrappers.DelayObservation\n.. autoclass:: gymnasium.wrappers.DtypeObservation\n.. autoclass:: gymnasium.wrappers.FilterObservation\n.. autoclass:: gymnasium.wrappers.FlattenObservation\n.. autoclass:: gymnasium.wrappers.FrameStackObservation\n.. autoclass:: gymnasium.wrappers.GrayscaleObservation\n.. autoclass:: gymnasium.wrappers.MaxAndSkipObservation\n.. autoclass:: gymnasium.wrappers.NormalizeObservation\n.. autoclass:: gymnasium.wrappers.AddRenderObservation\n.. autoclass:: gymnasium.wrappers.ResizeObservation\n.. autoclass:: gymnasium.wrappers.ReshapeObservation\n.. autoclass:: gymnasium.wrappers.RescaleObservation\n.. autoclass:: gymnasium.wrappers.TimeAwareObservation\n```\n\n----------------------------------------\n\nTITLE: Documenting Gymnasium Wrapper Methods in reStructuredText\nDESCRIPTION: This snippet uses the eval-rst directive to document various methods of the gymnasium.Wrapper class using Sphinx's automethod directive.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/wrappers.md#2025-04-22_snippet_3\n\nLANGUAGE: rst\nCODE:\n```\n{eval-rst}\n.. automethod:: gymnasium.Wrapper.step\n.. automethod:: gymnasium.Wrapper.reset\n.. automethod:: gymnasium.Wrapper.render\n.. automethod:: gymnasium.Wrapper.close\n.. automethod:: gymnasium.Wrapper.wrapper_spec\n.. automethod:: gymnasium.Wrapper.get_wrapper_attr\n.. automethod:: gymnasium.Wrapper.set_wrapper_attr\n```\n\n----------------------------------------\n\nTITLE: Miscellaneous Vector Utilities in Python\nDESCRIPTION: References to miscellaneous utility functions including CloudpickleWrapper for serialization of objects in multiprocessing contexts and clear_mpi_env_vars for cleaning environment variables related to MPI.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/vector/utils.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n.. autofunction:: gymnasium.vector.utils.CloudpickleWrapper\n.. autofunction:: gymnasium.vector.utils.clear_mpi_env_vars\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirection Logic in JavaScript\nDESCRIPTION: Contains functions for managing cookies, applying themes, and handling user interactions with the redirection popup. It checks for existing preferences and redirects users accordingly.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/time_pilot.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/time_pilot\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/time_pilot\";\n})\n```\n\n----------------------------------------\n\nTITLE: Common Wrappers Reference in RST\nDESCRIPTION: Documentation reference for common Gymnasium wrappers including TimeLimit, RecordVideo, RecordEpisodeStatistics, and AtariPreprocessing using Sphinx autoclass directives.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/wrappers/misc_wrappers.md#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: gymnasium.wrappers.TimeLimit\n.. autoclass:: gymnasium.wrappers.RecordVideo\n.. autoclass:: gymnasium.wrappers.RecordEpisodeStatistics\n.. autoclass:: gymnasium.wrappers.AtariPreprocessing\n```\n\n----------------------------------------\n\nTITLE: RST Configuration Block\nDESCRIPTION: Sets the table of contents depth to 3 levels for the RST documentation\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/third_party_environments.md#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n{eval-rst}\n:tocdepth: 3\n```\n\n----------------------------------------\n\nTITLE: Installing Classic Control Dependencies for Gymnasium\nDESCRIPTION: This command installs the unique dependencies required for the classic control environments in Gymnasium using pip.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/classic_control.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install gymnasium[classic-control]\n```\n\n----------------------------------------\n\nTITLE: Gymnasium Vector Environment Table of Contents\nDESCRIPTION: RST-based table of contents structure for vector environment documentation sections.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/vector.md#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n{toctree}\n:hidden:\nvector/wrappers\nvector/async_vector_env\nvector/sync_vector_env\nvector/utils\n```\n\n----------------------------------------\n\nTITLE: Automatically Rebuilding Gymnasium Documentation\nDESCRIPTION: Command to continuously rebuild the documentation when changes are detected using sphinx-autobuild, allowing real-time preview at localhost:8000.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd docs\nsphinx-autobuild -b dirhtml --watch ../gymnasium --re-ignore \"pickle$\" . _build\n```\n\n----------------------------------------\n\nTITLE: Implementing Video Cube Redirection Logic in JavaScript\nDESCRIPTION: This JavaScript code handles the redirection logic for the Video Cube documentation. It includes functions for managing cookies, applying themes, and controlling the popup behavior. The script checks for auto-redirect preferences and handles user interactions with the popup.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/video_cube.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/video_cube\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/video_cube\";\n})\n```\n\n----------------------------------------\n\nTITLE: Documenting Implemented Reward Wrappers in Python\nDESCRIPTION: This snippet uses Sphinx's autoclass directive to generate documentation for three implemented reward wrappers in Gymnasium: TransformReward, NormalizeReward, and ClipReward.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/wrappers/reward_wrappers.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: gymnasium.wrappers.TransformReward\n.. autoclass:: gymnasium.wrappers.NormalizeReward\n.. autoclass:: gymnasium.wrappers.ClipReward\n```\n\n----------------------------------------\n\nTITLE: Initializing MuJoCo Environment with Custom Render Settings\nDESCRIPTION: Example showing how to create a MuJoCo environment instance with specific render mode and window dimensions. This demonstrates setting up an Ant environment with rgb_array rendering at 1280x720 resolution.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/mujoco.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nenv = gymnasium.make(\"Ant-v5\", render_mode=\"rgb_array\", width=1280, height=720)\n```\n\n----------------------------------------\n\nTITLE: Importing Gymnasium Wrappers Module in reStructuredText\nDESCRIPTION: This snippet uses the eval-rst directive to import and document the gymnasium.wrappers module using Sphinx's automodule directive.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/wrappers.md#2025-04-22_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n{eval-rst}\n.. automodule:: gymnasium.wrappers\n```\n\n----------------------------------------\n\nTITLE: Installing Box2D Dependencies for Gymnasium\nDESCRIPTION: Commands to install the necessary dependencies for running Box2D environments in Gymnasium. This includes SWIG for building the box2d-py wheel and the Box2D extras for Gymnasium.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/box2d.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install swig\npip install gymnasium[box2d]\n```\n\n----------------------------------------\n\nTITLE: Theme Management in JavaScript\nDESCRIPTION: Function to handle theme application based on user preference or system settings. Supports dark, light, and auto themes with system preference detection.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/pong.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction applyTheme() { const theme = localStorage.getItem(\"theme\") || \"auto\"; const body = document.body; body.classList.remove(\"dark-theme\", \"light-theme\"); if (theme === \"dark\") { body.classList.add(\"dark-theme\"); } else if (theme === \"light\") { body.classList.add(\"light-theme\"); } else if (theme === \"auto\") { if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) { body.classList.add(\"dark-theme\"); } else { body.classList.add(\"light-theme\"); } window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => { body.classList.remove(\"dark-theme\", \"light-theme\"); body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\"); }); } }\n```\n\n----------------------------------------\n\nTITLE: Listing Gymnasium Vector-Only Wrappers with RST Table\nDESCRIPTION: A restructured text (RST) table that documents the vector-specific wrappers available in Gymnasium. These wrappers are specifically designed to work with vectorized environments and provide functionality for transforming actions, observations, and rewards.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/wrappers/table.md#2025-04-22_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. py:currentmodule:: gymnasium.wrappers.vector\n\n.. list-table::\n    :header-rows: 1\n\n    * - Name\n      - Description\n    * - :class:`DictInfoToList`\n      - Converts infos of vectorized environments from ``dict`` to ``List[dict]``.\n    * - :class:`VectorizeTransformAction`\n      - Vectorizes a single-agent transform action wrapper for vector environments.\n    * - :class:`VectorizeTransformObservation`\n      - Vectorizes a single-agent transform observation wrapper for vector environments.\n    * - :class:`VectorizeTransformReward`\n      - Vectorizes a single-agent transform reward wrapper for vector environments.\n```\n\n----------------------------------------\n\nTITLE: Documenting ObservationWrapper Class in Gymnasium using RST\nDESCRIPTION: RST directive to auto-generate documentation for the ObservationWrapper base class and its observation method from docstrings.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/wrappers/observation_wrappers.md#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: gymnasium.ObservationWrapper\n\n    .. automethod:: gymnasium.ObservationWrapper.observation\n```\n\n----------------------------------------\n\nTITLE: Installing MuJoCo Dependencies for Gymnasium\nDESCRIPTION: Command to install the necessary dependencies for using MuJoCo environments in Gymnasium. This includes the MuJoCo simulator.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/mujoco.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install gymnasium[mujoco]\n```\n\n----------------------------------------\n\nTITLE: Window Load and Event Handlers in JavaScript\nDESCRIPTION: JavaScript event handlers for window load and button clicks. Manages popup display, redirect functionality, and cookie-based preferences.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/mr_do.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = function() { applyTheme(); const atariAutoRedirect = getCookie('atariAutoRedirect'); if (atariAutoRedirect) { window.location.href = \"https://ale.farama.org/environments/mr_do\"; } else { document.getElementById('popup').style.display = 'flex'; } }; document.getElementById('closePopupBtn').addEventListener('click', function() { document.getElementById('popup').style.display = 'none'; }); document.getElementById('atariRedirectBtn').addEventListener(\"click\", function() { if (document.getElementById('atariAutoRedirect').checked) { setCookie('atariAutoRedirect', 'true', 90); } console.log(\"redirecting\"); window.location.href = \"https://ale.farama.org/environments/mr_do\"; })\n```\n\n----------------------------------------\n\nTITLE: Page Load and Event Handlers in JavaScript\nDESCRIPTION: Window load event handler and click event listeners for popup management. Handles automatic redirect based on cookies and user interactions with the popup.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/pong.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = function() { applyTheme(); const atariAutoRedirect = getCookie('atariAutoRedirect'); if (atariAutoRedirect) { window.location.href = \"https://ale.farama.org/environments/pong\"; } else { document.getElementById('popup').style.display = 'flex'; } }; document.getElementById('closePopupBtn').addEventListener('click', function() { document.getElementById('popup').style.display = 'none'; }); document.getElementById('atariRedirectBtn').addEventListener(\"click\", function() { if (document.getElementById('atariAutoRedirect').checked) { setCookie('atariAutoRedirect', 'true', 90); } console.log(\"redirecting\"); window.location.href = \"https://ale.farama.org/environments/pong\"; })\n```\n\n----------------------------------------\n\nTITLE: Additional Registry Functions\nDESCRIPTION: Documentation for utility functions related to environment registration and management, including functions for parsing environment IDs, finding versions, and loading environment creators.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/registry.md#2025-04-22_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: gymnasium.envs.registration.get_env_id\n.. autofunction:: gymnasium.envs.registration.parse_env_id\n.. autofunction:: gymnasium.envs.registration.find_highest_version\n.. autofunction:: gymnasium.envs.registration.namespace\n.. autofunction:: gymnasium.envs.registration.load_env_creator\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx RST Documentation for Seeding\nDESCRIPTION: RST directive for documenting the np_random seeding utility function.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/utils.md#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: gymnasium.utils.seeding.np_random\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx RST Documentation for Step API Compatibility\nDESCRIPTION: RST directives for documenting step API compatibility functions for handling different versions of the step API.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/utils.md#2025-04-22_snippet_5\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: gymnasium.utils.step_api_compatibility.step_api_compatibility\n.. autofunction:: gymnasium.utils.step_api_compatibility.convert_to_terminated_truncated_step_api\n.. autofunction:: gymnasium.utils.step_api_compatibility.convert_to_done_step_api\n```\n\n----------------------------------------\n\nTITLE: Implementing Freeway Redirect Popup in HTML\nDESCRIPTION: Creates the HTML structure for the Freeway redirect page, including a fallback link and a popup notification. The popup contains information about the new documentation location and options for auto-redirect.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/freeway.md#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<body>\n    <p>If you are not redirected automatically, follow this <a href=\"https://ale.farama.org/environments/freeway\">link to Freeway's new page</a>.</p>\n    <div id=\"popup\" class=\"popup\">\n    <div class=\"popup-content\">\n        <p>Freeway's documentation has moved to <b>ale.farama.org</b></p>\n        <label>\n            <input type=\"checkbox\" id=\"atariAutoRedirect\">Enable auto-redirect next time\n        </label>\n        <br>\n        <button id=\"atariRedirectBtn\">Redirect to the new website</button>\n        <button id=\"closePopupBtn\">Close</button>\n    </div>\n    </div>\n  </body>\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx RST Documentation for Visualization Classes\nDESCRIPTION: RST directives for documenting the play function and related visualization classes PlayPlot and PlayableGame.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/utils.md#2025-04-22_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autofunction:: gymnasium.utils.play.play\n.. autoclass:: gymnasium.utils.play.PlayPlot\n\n    .. automethod:: callback\n\n.. autoclass:: gymnasium.utils.play.PlayableGame\n\n    .. automethod:: process_event\n```\n\n----------------------------------------\n\nTITLE: Structuring HTML for Atari Redirection Page\nDESCRIPTION: Defines the HTML structure for the redirection page, including a popup for user interaction and links to the new documentation location.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\n  <head>\n    <title>Redirecting to Atari's documentation</title>\n    <style>\n      /* Basic styles for the popup */\n      .popup {\n          display: none;\n          position: fixed;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n          z-index: 999;\n          justify-content: center;\n          align-items: center;\n      }\n      .popup-content {\n          background-color: #fff; /* Default light content background */\n          padding: 20px;\n          border-radius: 10px;\n          text-align: center;\n          width: 300px;\n      }\n      .dark-theme .popup {\n          background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n      }\n      .dark-theme .popup-content {\n          background-color: #333; /* Dark content background */\n          color: #fff; /* Light text for dark theme */\n      }\n      button {\n          margin-top: 10px;\n          padding: 5px 10px;\n          cursor: pointer;\n      }\n      /* Add spacing between checkbox and label text */\n      input[type=\"checkbox\"] {\n          margin-right: 5px;\n      }\n    </style>\n  </head>\n  <body>\n    <p>If you are not redirected automatically, follow this <a href=\"https://ale.farama.org/environments/\">link to Atari's new page</a>.</p>\n    <div id=\"popup\" class=\"popup\">\n    <div class=\"popup-content\">\n        <p>Atari's documentation has moved to <b>ale.farama.org</b></p>\n        <label>\n            <input type=\"checkbox\" id=\"atariAutoRedirect\">Enable auto-redirect next time\n        </label>\n        <br>\n        <button id=\"atariRedirectBtn\">Redirect to the new website</button>\n        <button id=\"closePopupBtn\">Close</button>\n    </div>\n    </div>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Data Conversion Wrappers Reference in RST\nDESCRIPTION: Documentation reference for Gymnasium data conversion wrappers that transform data between different formats (JAX, NumPy, PyTorch) using Sphinx autoclass directives.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/wrappers/misc_wrappers.md#2025-04-22_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: gymnasium.wrappers.JaxToNumpy\n.. autoclass:: gymnasium.wrappers.JaxToTorch\n.. autoclass:: gymnasium.wrappers.NumpyToTorch\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirect Popup for Beam Rider in HTML\nDESCRIPTION: Creates the HTML structure for the redirect popup, including the message, checkbox for auto-redirect, and buttons for redirecting or closing the popup.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/beam_rider.md#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"popup\" class=\"popup\">\n    <div class=\"popup-content\">\n        <p>Beam Rider's documentation has moved to <b>ale.farama.org</b></p>\n        <label>\n            <input type=\"checkbox\" id=\"atariAutoRedirect\">Enable auto-redirect next time\n        </label>\n        <br>\n        <button id=\"atariRedirectBtn\">Redirect to the new website</button>\n        <button id=\"closePopupBtn\">Close</button>\n    </div>\n    </div>\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Wrapper Documentation in reStructuredText\nDESCRIPTION: This snippet defines a hidden table of contents for various wrapper-related documentation pages using reStructuredText directives.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/api/wrappers.md#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n{toctree}\n:hidden:\n\nwrappers/table\nwrappers/misc_wrappers\nwrappers/action_wrappers\nwrappers/observation_wrappers\nwrappers/reward_wrappers\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Redirection Page with Popup Notification\nDESCRIPTION: HTML markup that provides a basic redirect page with a popup notification. It includes a default redirect link and a styled popup with options to enable auto-redirect for future visits.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/hangman.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <title>Redirecting to Hangman's documentation</title>\n    <style>\n      /* Basic styles for the popup */\n      .popup {\n          display: none;\n          position: fixed;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n          z-index: 999;\n          justify-content: center;\n          align-items: center;\n      }\n      .popup-content {\n          background-color: #fff; /* Default light content background */\n          padding: 20px;\n          border-radius: 10px;\n          text-align: center;\n          width: 300px;\n      }\n      .dark-theme .popup {\n          background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n      }\n      .dark-theme .popup-content {\n          background-color: #333; /* Dark content background */\n          color: #fff; /* Light text for dark theme */\n      }\n      button {\n          margin-top: 10px;\n          padding: 5px 10px;\n          cursor: pointer;\n      }\n      /* Add spacing between checkbox and label text */\n      input[type=\"checkbox\"] {\n          margin-right: 5px;\n      }\n    </style>\n  </head>\n  <body>\n    <p>If you are not redirected automatically, follow this <a href=\"https://ale.farama.org/environments/hangman\">link to Hangman's new page</a>.</p>\n    <div id=\"popup\" class=\"popup\">\n    <div class=\"popup-content\">\n        <p>Hangman's documentation has moved to <b>ale.farama.org</b></p>\n        <label>\n            <input type=\"checkbox\" id=\"atariAutoRedirect\">Enable auto-redirect next time\n        </label>\n        <br>\n        <button id=\"atariRedirectBtn\">Redirect to the new website</button>\n        <button id=\"closePopupBtn\">Close</button>\n    </div>\n    </div>\n  </body>\n\n  <script>\n    // Function to get a cookie by name\n    function getCookie(name) {\n        console.log(`${document.cookie}`);\n        const value = `; ${document.cookie}`;\n        const parts = value.split(`; ${name}=`);\n        if (parts.length === 2) {\n            return parts.pop().split(';').shift();\n        }\n    }\n\n    // Function to set a cookie\n    function setCookie(name, value, days) {\n        const date = new Date();\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n        const expires = `expires=${date.toUTCString()}`;\n        document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n    }\n\n    // Function to apply theme to the popup\n    function applyTheme() {\n        const theme = localStorage.getItem(\"theme\") || \"auto\";\n        const body = document.body;\n\n        // Remove any existing theme classes\n        body.classList.remove(\"dark-theme\", \"light-theme\");\n\n        if (theme === \"dark\") {\n            body.classList.add(\"dark-theme\");\n        } else if (theme === \"light\") {\n            body.classList.add(\"light-theme\");\n        } else if (theme === \"auto\") {\n            // Check system preference for dark mode\n            if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n                body.classList.add(\"dark-theme\");\n            } else {\n                body.classList.add(\"light-theme\");\n            }\n\n            // Listen for system theme changes\n            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n                body.classList.remove(\"dark-theme\", \"light-theme\");\n                body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n            });\n        }\n    }\n\n    // Show popup if the cookie doesn't exist\n    window.onload = function() {\n        // Apply theme first\n        applyTheme();\n\n        const atariAutoRedirect = getCookie('atariAutoRedirect');\n        if (atariAutoRedirect) {\n            window.location.href = \"https://ale.farama.org/environments/hangman\";\n        } else {\n            document.getElementById('popup').style.display = 'flex';\n        }\n    };\n\n    // Close popup and handle the \"Don't show again\" option\n    document.getElementById('closePopupBtn').addEventListener('click', function() {\n        document.getElementById('popup').style.display = 'none';\n    });\n    document.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n        if (document.getElementById('atariAutoRedirect').checked) {\n            setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n        }\n        console.log(\"redirecting\");\n        window.location.href = \"https://ale.farama.org/environments/hangman\";\n    })\n  </script>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring 404 Page Layout in Markdown\nDESCRIPTION: This snippet sets up the layout for a 404 error page using Markdown. It hides the table of contents and defines the page title and message.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/404.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nhide-toc: true\n---\n\n# 404 - Page Not Found\n\n## The requested page could not be found.\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Galaxian Documentation Redirection\nDESCRIPTION: HTML markup that defines the structure of the Galaxian documentation redirection page. It includes the page title, redirect link, and an interactive popup that allows users to choose their redirection preferences while providing information about the documentation's new location.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/galaxian.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <title>Redirecting to Galaxian's documentation</title>\n    <style>\n      /* Basic styles for the popup */\n      .popup {\n          display: none;\n          position: fixed;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n          z-index: 999;\n          justify-content: center;\n          align-items: center;\n      }\n      .popup-content {\n          background-color: #fff; /* Default light content background */\n          padding: 20px;\n          border-radius: 10px;\n          text-align: center;\n          width: 300px;\n      }\n      .dark-theme .popup {\n          background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n      }\n      .dark-theme .popup-content {\n          background-color: #333; /* Dark content background */\n          color: #fff; /* Light text for dark theme */\n      }\n      button {\n          margin-top: 10px;\n          padding: 5px 10px;\n          cursor: pointer;\n      }\n      /* Add spacing between checkbox and label text */\n      input[type=\"checkbox\"] {\n          margin-right: 5px;\n      }\n    </style>\n  </head>\n  <body>\n    <p>If you are not redirected automatically, follow this <a href=\"https://ale.farama.org/environments/galaxian\">link to Galaxian's new page</a>.</p>\n    <div id=\"popup\" class=\"popup\">\n    <div class=\"popup-content\">\n        <p>Galaxian's documentation has moved to <b>ale.farama.org</b></p>\n        <label>\n            <input type=\"checkbox\" id=\"atariAutoRedirect\">Enable auto-redirect next time\n        </label>\n        <br>\n        <button id=\"atariRedirectBtn\">Redirect to the new website</button>\n        <button id=\"closePopupBtn\">Close</button>\n    </div>\n    </div>\n  </body>\n\n  <script>\n    // Function to get a cookie by name\n    function getCookie(name) {\n        console.log(`${document.cookie}`);\n        const value = `; ${document.cookie}`;\n        const parts = value.split(`; ${name}=`);\n        if (parts.length === 2) {\n            return parts.pop().split(';').shift();\n        }\n    }\n\n    // Function to set a cookie\n    function setCookie(name, value, days) {\n        const date = new Date();\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n        const expires = `expires=${date.toUTCString()}`;\n        document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n    }\n\n    // Function to apply theme to the popup\n    function applyTheme() {\n        const theme = localStorage.getItem(\"theme\") || \"auto\";\n        const body = document.body;\n\n        // Remove any existing theme classes\n        body.classList.remove(\"dark-theme\", \"light-theme\");\n\n        if (theme === \"dark\") {\n            body.classList.add(\"dark-theme\");\n        } else if (theme === \"light\") {\n            body.classList.add(\"light-theme\");\n        } else if (theme === \"auto\") {\n            // Check system preference for dark mode\n            if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n                body.classList.add(\"dark-theme\");\n            } else {\n                body.classList.add(\"light-theme\");\n            }\n\n            // Listen for system theme changes\n            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n                body.classList.remove(\"dark-theme\", \"light-theme\");\n                body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n            });\n        }\n    }\n\n    // Show popup if the cookie doesn't exist\n    window.onload = function() {\n        // Apply theme first\n        applyTheme();\n\n        const atariAutoRedirect = getCookie('atariAutoRedirect');\n        if (atariAutoRedirect) {\n            window.location.href = \"https://ale.farama.org/environments/galaxian\";\n        } else {\n            document.getElementById('popup').style.display = 'flex';\n        }\n    };\n\n    // Close popup and handle the \"Don't show again\" option\n    document.getElementById('closePopupBtn').addEventListener('click', function() {\n        document.getElementById('popup').style.display = 'none';\n    });\n    document.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n        if (document.getElementById('atariAutoRedirect').checked) {\n            setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n        }\n        console.log(\"redirecting\");\n        window.location.href = \"https://ale.farama.org/environments/galaxian\";\n    })\n  </script>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Managing Cookies and Theme for Ice Hockey Redirection in JavaScript\nDESCRIPTION: Implements functions to get and set cookies, apply theme preferences, and handle the redirection logic. It checks for existing preferences, shows the popup if needed, and manages user interactions with the redirection options.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/ice_hockey.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/ice_hockey\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/ice_hockey\";\n})\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Notification for Video Cube Redirection\nDESCRIPTION: This CSS snippet defines the styles for the popup notification, including responsive design for both light and dark themes. It sets up the layout, colors, and appearance of the popup and its contents.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/video_cube.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Redirection Popup in CSS\nDESCRIPTION: Defines the styles for the redirection popup, including responsive design for light and dark themes. It sets up the layout, colors, and positioning of the popup elements.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/time_pilot.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Changelog Display for Gymnasium in reStructuredText\nDESCRIPTION: This snippet sets up a changelog directive to automatically fetch and display release information for Gymnasium from GitHub and PyPI. It uses the eval-rst block to include reStructuredText within a markdown file.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/gymnasium_release_notes/index.md#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. changelog::\n    :github: https://github.com/Farama-Foundation/Gymnasium/releases\n    :pypi: https://pypi.org/project/gymnasium/\n    :changelog-url:\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Dialog with CSS\nDESCRIPTION: CSS styles for a responsive popup dialog with light/dark theme support. Includes styling for overlay, content area, buttons, and checkbox inputs.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/road_runner.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Interface with CSS\nDESCRIPTION: Defines the styling for a popup notification system including support for light and dark themes. Includes styles for the popup overlay, content container, buttons, and checkbox inputs.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/ms_pacman.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Gymnasium Documentation Dependencies\nDESCRIPTION: Commands to install Gymnasium and the required documentation packages before building the documentation.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install gymnasium\npip install -r docs/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Generating Changelog for Gym Project in RST\nDESCRIPTION: This RST directive generates a changelog for the Gym project. It pulls release information from GitHub releases and PyPI package versions.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/gym_release_notes/index.md#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. changelog::\n    :github: https://github.com/openai/gym/releases\n    :pypi: https://pypi.org/project/gym/\n    :changelog-url:\n```\n\n----------------------------------------\n\nTITLE: Including HTML List Component\nDESCRIPTION: Raw HTML inclusion directive for rendering a list of toy text environments from an external file.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/toy_text.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{raw} html\n   :file: toy_text/list.html\n```\n\n----------------------------------------\n\nTITLE: Styling Popup for Othello Documentation Redirect in CSS\nDESCRIPTION: Defines styles for a popup notification, including support for light and dark themes. The CSS handles the layout, colors, and responsive design of the popup.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/othello.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Modal with Theme Support in CSS\nDESCRIPTION: CSS styles for a themed popup modal with responsive dark/light mode support. Includes styling for overlay, content area, buttons, and checkbox elements.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/up_n_down.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Dialog with Theme Support in CSS\nDESCRIPTION: CSS styles for a modal popup with support for light and dark themes, including responsive positioning and theme-specific color schemes.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/tutankham.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Popup for Pitfall Documentation Redirection in CSS\nDESCRIPTION: Defines CSS styles for the redirection popup, including light and dark theme variations. It sets up the layout, colors, and responsiveness of the popup elements.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/pitfall.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Redirection with JavaScript for Adventure Documentation\nDESCRIPTION: JavaScript code that handles cookie management, theme detection, and redirection functionality for the Adventure documentation. It includes functions to get/set cookies, apply theme preferences, and event listeners for the popup buttons.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/adventure.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/adventure\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/adventure\";\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirection Logic in JavaScript\nDESCRIPTION: Handles the redirection logic, including cookie management for auto-redirect preferences, theme application, and event listeners for user interactions. It checks for existing preferences and applies them accordingly.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/solaris.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/solaris\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/solaris\";\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Cookies and Theme for Pacman Redirection in JavaScript\nDESCRIPTION: Implements JavaScript functions to handle cookies, apply themes, and control the redirection behavior. It includes functionality to get and set cookies, apply dark or light themes, and handle user interactions with the popup.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/pacman.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n  <script>\n    // Function to get a cookie by name\n    function getCookie(name) {\n        console.log(`${document.cookie}`);\n        const value = `; ${document.cookie}`;\n        const parts = value.split(`; ${name}=`);\n        if (parts.length === 2) {\n            return parts.pop().split(';').shift();\n        }\n    }\n\n    // Function to set a cookie\n    function setCookie(name, value, days) {\n        const date = new Date();\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n        const expires = `expires=${date.toUTCString()}`;\n        document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n    }\n\n    // Function to apply theme to the popup\n    function applyTheme() {\n        const theme = localStorage.getItem(\"theme\") || \"auto\";\n        const body = document.body;\n\n        // Remove any existing theme classes\n        body.classList.remove(\"dark-theme\", \"light-theme\");\n\n        if (theme === \"dark\") {\n            body.classList.add(\"dark-theme\");\n        } else if (theme === \"light\") {\n            body.classList.add(\"light-theme\");\n        } else if (theme === \"auto\") {\n            // Check system preference for dark mode\n            if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n                body.classList.add(\"dark-theme\");\n            } else {\n                body.classList.add(\"light-theme\");\n            }\n\n            // Listen for system theme changes\n            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n                body.classList.remove(\"dark-theme\", \"light-theme\");\n                body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n            });\n        }\n    }\n\n    // Show popup if the cookie doesn't exist\n    window.onload = function() {\n        // Apply theme first\n        applyTheme();\n\n        const atariAutoRedirect = getCookie('atariAutoRedirect');\n        if (atariAutoRedirect) {\n            window.location.href = \"https://ale.farama.org/environments/pacman\";\n        } else {\n            document.getElementById('popup').style.display = 'flex';\n        }\n    };\n\n    // Close popup and handle the \"Don't show again\" option\n    document.getElementById('closePopupBtn').addEventListener('click', function() {\n        document.getElementById('popup').style.display = 'none';\n    });\n    document.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n        if (document.getElementById('atariAutoRedirect').checked) {\n            setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n        }\n        console.log(\"redirecting\");\n        window.location.href = \"https://ale.farama.org/environments/pacman\";\n    })\n  </script>\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Interface with CSS\nDESCRIPTION: CSS styles for the popup interface including theme support (light/dark mode) and basic layout styling for the redirect notification dialog.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/human_cannonball.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Redirection Popup in CSS\nDESCRIPTION: Defines styles for the redirection popup, including theme-specific colors and layout. It handles both light and dark themes.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/krull.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Popup Event Handling and Redirection Logic\nDESCRIPTION: JavaScript code for handling popup events, auto-redirect functionality, and window load behavior based on stored preferences.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/mario_bros.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = function() {\n    applyTheme();\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/mario_bros\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\n\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/mario_bros\";\n})\n```\n\n----------------------------------------\n\nTITLE: Styling Popup for Video Pinball Documentation Redirect in CSS\nDESCRIPTION: Defines CSS styles for the popup used in the Video Pinball documentation redirect page. It includes styles for both light and dark themes, and responsive design elements.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/video_pinball.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Page Load and Event Handlers\nDESCRIPTION: JavaScript event handlers for page load and user interactions, including popup display logic and redirect functionality with user preference storage.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/journey_escape.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = function() {\n    applyTheme();\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/journey_escape\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\n\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/journey_escape\";\n})\n```\n\n----------------------------------------\n\nTITLE: Styling Popup and Theme Management in CSS\nDESCRIPTION: Defines styles for a popup notification and manages light/dark themes. It includes responsive design for different screen sizes and theme preferences.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/kung_fu_master.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Cookie Management and Theme Handling in JavaScript\nDESCRIPTION: Implements cookie management functions and theme handling logic, including system theme detection and automatic theme switching. Manages user preferences for auto-redirect functionality.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/jamesbond.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirect Logic for Assault Documentation\nDESCRIPTION: JavaScript code for handling the redirect mechanism, including cookie management, theme application, and user interaction with the popup. It checks for existing preferences and applies appropriate actions.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/assault.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/assault\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/assault\";\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirection Logic with JavaScript\nDESCRIPTION: JavaScript code that manages the redirection behavior. It includes functions for cookie management, theme detection and application, and event listeners for handling user interactions with the popup. The code checks for auto-redirect preferences and redirects users to the new Berzerk documentation URL.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/berzerk.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/berzerk\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/berzerk\";\n})\n```\n\n----------------------------------------\n\nTITLE: Styling Popup and Theme Handling in CSS\nDESCRIPTION: Defines styles for the popup, including theme-specific variations for light and dark modes. It sets up the layout, colors, and responsive design for the redirect notification.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/king_kong.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Cookies and Theme for Pitfall Redirection in JavaScript\nDESCRIPTION: Implements functions to manage cookies, apply themes, and handle user interactions for the Pitfall documentation redirection popup. It includes functionality for automatic redirection and theme switching based on user preferences or system settings.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/pitfall.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\nwindow.onload = function() {\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/pitfall\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\n\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/pitfall\";\n})\n```\n\n----------------------------------------\n\nTITLE: Redirect and Popup Management with Theme Support in JavaScript\nDESCRIPTION: JavaScript functions for managing cookies, applying theme preferences, and handling the redirect popup. Includes cookie management for auto-redirect preferences, theme detection based on system settings, and event handlers for popup actions.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/breakout.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/breakout\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/breakout\";\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirection Logic with Theme Support in JavaScript\nDESCRIPTION: JavaScript code that handles cookie management, theme detection, and redirection functionality. It includes functions to get and set cookies, apply light/dark themes based on user preferences, and manage the popup notification behavior.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/elevator_action.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/elevator_action\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/elevator_action\";\n})\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Adventure Documentation Redirection Page\nDESCRIPTION: HTML document structure that creates a redirection page for Adventure documentation. It contains a simple message with a manual link and a popup notification that informs users about the moved documentation location.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/adventure.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <title>Redirecting to Adventure's documentation</title>\n    <style>\n      /* Basic styles for the popup */\n      .popup {\n          display: none;\n          position: fixed;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n          z-index: 999;\n          justify-content: center;\n          align-items: center;\n      }\n      .popup-content {\n          background-color: #fff; /* Default light content background */\n          padding: 20px;\n          border-radius: 10px;\n          text-align: center;\n          width: 300px;\n      }\n      .dark-theme .popup {\n          background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n      }\n      .dark-theme .popup-content {\n          background-color: #333; /* Dark content background */\n          color: #fff; /* Light text for dark theme */\n      }\n      button {\n          margin-top: 10px;\n          padding: 5px 10px;\n          cursor: pointer;\n      }\n      /* Add spacing between checkbox and label text */\n      input[type=\"checkbox\"] {\n          margin-right: 5px;\n      }\n    </style>\n  </head>\n  <body>\n    <p>If you are not redirected automatically, follow this <a href=\"https://ale.farama.org/environments/adventure\">link to Adventure's new page</a>.</p>\n    <div id=\"popup\" class=\"popup\">\n    <div class=\"popup-content\">\n        <p>Adventure's documentation has moved to <b>ale.farama.org</b></p>\n        <label>\n            <input type=\"checkbox\" id=\"atariAutoRedirect\">Enable auto-redirect next time\n        </label>\n        <br>\n        <button id=\"atariRedirectBtn\">Redirect to the new website</button>\n        <button id=\"closePopupBtn\">Close</button>\n    </div>\n    </div>\n  </body>\n\n  <script>\n    // Function to get a cookie by name\n    function getCookie(name) {\n        console.log(`${document.cookie}`);\n        const value = `; ${document.cookie}`;\n        const parts = value.split(`; ${name}=`);\n        if (parts.length === 2) {\n            return parts.pop().split(';').shift();\n        }\n    }\n\n    // Function to set a cookie\n    function setCookie(name, value, days) {\n        const date = new Date();\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n        const expires = `expires=${date.toUTCString()}`;\n        document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n    }\n\n    // Function to apply theme to the popup\n    function applyTheme() {\n        const theme = localStorage.getItem(\"theme\") || \"auto\";\n        const body = document.body;\n\n        // Remove any existing theme classes\n        body.classList.remove(\"dark-theme\", \"light-theme\");\n\n        if (theme === \"dark\") {\n            body.classList.add(\"dark-theme\");\n        } else if (theme === \"light\") {\n            body.classList.add(\"light-theme\");\n        } else if (theme === \"auto\") {\n            // Check system preference for dark mode\n            if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n                body.classList.add(\"dark-theme\");\n            } else {\n                body.classList.add(\"light-theme\");\n            }\n\n            // Listen for system theme changes\n            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n                body.classList.remove(\"dark-theme\", \"light-theme\");\n                body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n            });\n        }\n    }\n\n    // Show popup if the cookie doesn't exist\n    window.onload = function() {\n        // Apply theme first\n        applyTheme();\n\n        const atariAutoRedirect = getCookie('atariAutoRedirect');\n        if (atariAutoRedirect) {\n            window.location.href = \"https://ale.farama.org/environments/adventure\";\n        } else {\n            document.getElementById('popup').style.display = 'flex';\n        }\n    };\n\n    // Close popup and handle the \"Don't show again\" option\n    document.getElementById('closePopupBtn').addEventListener('click', function() {\n        document.getElementById('popup').style.display = 'none';\n    });\n    document.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n        if (document.getElementById('atariAutoRedirect').checked) {\n            setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n        }\n        console.log(\"redirecting\");\n        window.location.href = \"https://ale.farama.org/environments/adventure\";\n    })\n  </script>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Casino Redirection Logic in JavaScript\nDESCRIPTION: Handles the redirection logic for the Casino environment page. It includes functions for managing cookies, applying themes, and controlling the popup behavior. The script checks for auto-redirect preferences and handles user interactions with the popup.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/casino.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\n    function getCookie(name) {\n        console.log(`${document.cookie}`);\n        const value = `; ${document.cookie}`;\n        const parts = value.split(`; ${name}=`);\n        if (parts.length === 2) {\n            return parts.pop().split(';').shift();\n        }\n    }\n\n    // Function to set a cookie\n    function setCookie(name, value, days) {\n        const date = new Date();\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n        const expires = `expires=${date.toUTCString()}`;\n        document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n    }\n\n    // Function to apply theme to the popup\n    function applyTheme() {\n        const theme = localStorage.getItem(\"theme\") || \"auto\";\n        const body = document.body;\n\n        // Remove any existing theme classes\n        body.classList.remove(\"dark-theme\", \"light-theme\");\n\n        if (theme === \"dark\") {\n            body.classList.add(\"dark-theme\");\n        } else if (theme === \"light\") {\n            body.classList.add(\"light-theme\");\n        } else if (theme === \"auto\") {\n            // Check system preference for dark mode\n            if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n                body.classList.add(\"dark-theme\");\n            } else {\n                body.classList.add(\"light-theme\");\n            }\n\n            // Listen for system theme changes\n            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n                body.classList.remove(\"dark-theme\", \"light-theme\");\n                body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n            });\n        }\n    }\n\n    // Show popup if the cookie doesn't exist\n    window.onload = function() {\n        // Apply theme first\n        applyTheme();\n\n        const atariAutoRedirect = getCookie('atariAutoRedirect');\n        if (atariAutoRedirect) {\n            window.location.href = \"https://ale.farama.org/environments/casino\";\n        } else {\n            document.getElementById('popup').style.display = 'flex';\n        }\n    };\n\n    // Close popup and handle the \"Don't show again\" option\n    document.getElementById('closePopupBtn').addEventListener('click', function() {\n        document.getElementById('popup').style.display = 'none';\n    });\n    document.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n        if (document.getElementById('atariAutoRedirect').checked) {\n            setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n        }\n        console.log(\"redirecting\");\n        window.location.href = \"https://ale.farama.org/environments/casino\";\n    })\n```\n\n----------------------------------------\n\nTITLE: Cookie Management and Theme Handling in JavaScript\nDESCRIPTION: JavaScript functions for managing cookies, handling theme preferences, and controlling the redirect popup behavior. Includes functions for getting/setting cookies and applying theme based on system preferences.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/darkchambers.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Cookies and Theme for Kangaroo Documentation Redirect in JavaScript\nDESCRIPTION: Implements functions to handle cookies, apply themes, and manage the redirection process. It includes logic for auto-redirect, theme preference, and user interaction with the popup.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/kangaroo.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/kangaroo\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/kangaroo\";\n})\n```\n\n----------------------------------------\n\nTITLE: Cookie Management and Theme Handling in JavaScript\nDESCRIPTION: JavaScript functions for managing cookies, handling theme preferences, and controlling the popup behavior. Includes functions for getting/setting cookies, applying themes based on system preferences, and handling redirect logic.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/laser_gates.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cookie Management and Theme Handling - JavaScript\nDESCRIPTION: JavaScript functions for managing cookies, handling theme preferences, and controlling popup behavior. Includes automatic theme detection and system preference monitoring.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/klax.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Redirect Cookies and Theme Preferences with JavaScript\nDESCRIPTION: JavaScript code that handles user preferences for the Gopher redirect page. It includes functions for managing cookies to remember auto-redirect settings, applying theme preferences (light/dark/auto), and controlling the popup behavior when the page loads.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/gopher.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n  <script>\n    // Function to get a cookie by name\n    function getCookie(name) {\n        console.log(`${document.cookie}`);\n        const value = `; ${document.cookie}`;\n        const parts = value.split(`; ${name}=`);\n        if (parts.length === 2) {\n            return parts.pop().split(';').shift();\n        }\n    }\n\n    // Function to set a cookie\n    function setCookie(name, value, days) {\n        const date = new Date();\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n        const expires = `expires=${date.toUTCString()}`;\n        document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n    }\n\n    // Function to apply theme to the popup\n    function applyTheme() {\n        const theme = localStorage.getItem(\"theme\") || \"auto\";\n        const body = document.body;\n\n        // Remove any existing theme classes\n        body.classList.remove(\"dark-theme\", \"light-theme\");\n\n        if (theme === \"dark\") {\n            body.classList.add(\"dark-theme\");\n        } else if (theme === \"light\") {\n            body.classList.add(\"light-theme\");\n        } else if (theme === \"auto\") {\n            // Check system preference for dark mode\n            if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n                body.classList.add(\"dark-theme\");\n            } else {\n                body.classList.add(\"light-theme\");\n            }\n\n            // Listen for system theme changes\n            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n                body.classList.remove(\"dark-theme\", \"light-theme\");\n                body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n            });\n        }\n    }\n\n    // Show popup if the cookie doesn't exist\n    window.onload = function() {\n        // Apply theme first\n        applyTheme();\n\n        const atariAutoRedirect = getCookie('atariAutoRedirect');\n        if (atariAutoRedirect) {\n            window.location.href = \"https://ale.farama.org/environments/gopher\";\n        } else {\n            document.getElementById('popup').style.display = 'flex';\n        }\n    };\n\n    // Close popup and handle the \"Don't show again\" option\n    document.getElementById('closePopupBtn').addEventListener('click', function() {\n        document.getElementById('popup').style.display = 'none';\n    });\n    document.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n        if (document.getElementById('atariAutoRedirect').checked) {\n            setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n        }\n        console.log(\"redirecting\");\n        window.location.href = \"https://ale.farama.org/environments/gopher\";\n    })\n  </script>\n```\n\n----------------------------------------\n\nTITLE: Managing Cookies and Theme Preferences in JavaScript\nDESCRIPTION: JavaScript functions for managing cookies, handling theme preferences, and controlling popup behavior. Includes cookie getting/setting, theme application, and event listeners for user interactions.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/montezuma_revenge.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cookie Management and Theme Handling in JavaScript\nDESCRIPTION: JavaScript functions for managing cookies, handling theme preferences, and controlling the redirect popup behavior. Includes functions for getting/setting cookies and applying theme based on system preferences.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/defender.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Adventure Redirection Popup with CSS\nDESCRIPTION: CSS styles for the Adventure redirection popup that supports both light and dark themes. Includes styling for the overlay, popup content, buttons, and checkbox elements.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/adventure.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Cookie Management and Theme Handling\nDESCRIPTION: JavaScript functions for managing cookies, applying themes, and handling redirects with user preferences\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/phoenix.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\nwindow.onload = function() {\n    applyTheme();\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/phoenix\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/phoenix\";\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Robotank Documentation Redirect Logic in JavaScript\nDESCRIPTION: Contains JavaScript functions for managing cookies, applying themes, and handling the redirect logic for the Robotank documentation. It includes functionality for auto-redirect, theme switching, and user preferences.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/robotank.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/robotank\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/robotank\";\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirect Logic for Othello Documentation in JavaScript\nDESCRIPTION: Manages the redirect functionality, including cookie handling, theme application, and user interaction with the popup. It checks for existing preferences and handles the redirection to the new documentation URL.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/othello.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/othello\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/othello\";\n})\n```\n\n----------------------------------------\n\nTITLE: Cookie Management and Theme Handling with JavaScript\nDESCRIPTION: JavaScript functions to manage cookies for auto-redirect preferences and handle theme switching between light and dark modes. Includes system theme detection and dynamic theme application.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/crossbow.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Cookies and Theme in JavaScript\nDESCRIPTION: JavaScript functions for getting and setting cookies, applying themes, and handling the redirection popup. It includes event listeners for user interactions and checks for existing preferences.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/keystone_kapers.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/keystone_kapers\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/keystone_kapers\";\n})\n```\n\n----------------------------------------\n\nTITLE: Cookie Management and Theme Handling in JavaScript\nDESCRIPTION: JavaScript functions for managing cookies, handling theme preferences, and controlling the redirect popup behavior\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/riverraid.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cookie Management and Theme Handling in JavaScript\nDESCRIPTION: JavaScript functions to manage cookies, handle theme preferences, and control popup behavior for the redirection system\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/sir_lancelot.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) { console.log(`${document.cookie}`); const value = `; ${document.cookie}`; const parts = value.split(`; ${name}=`); if (parts.length === 2) { return parts.pop().split(';').shift(); } } function setCookie(name, value, days) { const date = new Date(); date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000)); const expires = `expires=${date.toUTCString()}`; document.cookie = `${name}=${value}; ${expires}; path=/`; } function applyTheme() { const theme = localStorage.getItem(\"theme\") || \"auto\"; const body = document.body; body.classList.remove(\"dark-theme\", \"light-theme\"); if (theme === \"dark\") { body.classList.add(\"dark-theme\"); } else if (theme === \"light\") { body.classList.add(\"light-theme\"); } else if (theme === \"auto\") { if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) { body.classList.add(\"dark-theme\"); } else { body.classList.add(\"light-theme\"); } window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => { body.classList.remove(\"dark-theme\", \"light-theme\"); body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\"); }); } }\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirect Logic for Name This Game Documentation\nDESCRIPTION: JavaScript code handling the redirect functionality for the Name This Game documentation. It manages cookies for auto-redirect preferences, applies themes, and controls the popup display.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/name_this_game.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\nwindow.onload = function() {\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/name_this_game\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/name_this_game\";\n})\n```\n\n----------------------------------------\n\nTITLE: Styling Popup for Ice Hockey Redirection in HTML/CSS\nDESCRIPTION: Defines the CSS styles for the redirection popup, including theme-specific styles for light and dark modes. It sets up the layout, colors, and responsive behavior of the popup elements.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/ice_hockey.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\n      /* Basic styles for the popup */\n      .popup {\n          display: none;\n          position: fixed;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n          z-index: 999;\n          justify-content: center;\n          align-items: center;\n      }\n      .popup-content {\n          background-color: #fff; /* Default light content background */\n          padding: 20px;\n          border-radius: 10px;\n          text-align: center;\n          width: 300px;\n      }\n      .dark-theme .popup {\n          background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n      }\n      .dark-theme .popup-content {\n          background-color: #333; /* Dark content background */\n          color: #fff; /* Light text for dark theme */\n      }\n      button {\n          margin-top: 10px;\n          padding: 5px 10px;\n          cursor: pointer;\n      }\n      /* Add spacing between checkbox and label text */\n      input[type=\"checkbox\"] {\n          margin-right: 5px;\n      }\n    </style>\n```\n\n----------------------------------------\n\nTITLE: Cookie Management and Theme Control JavaScript\nDESCRIPTION: JavaScript functions for managing cookies, handling theme preferences, and controlling the redirect popup behavior. Includes functions for getting/setting cookies and applying theme based on system preferences.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/human_cannonball.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cookie Management and Theme Handling in JavaScript\nDESCRIPTION: JavaScript functions for managing cookies, handling theme preferences, and controlling popup behavior for the redirect functionality\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/video_checkers.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Zaxxon Redirect Functionality in JavaScript\nDESCRIPTION: This JavaScript code handles the redirect functionality for the Zaxxon environment page. It includes functions for managing cookies, applying themes, and controlling the popup behavior. The script also implements auto-redirect based on user preferences.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/zaxxon.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/zaxxon\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/zaxxon\";\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirection and Theme Management in JavaScript\nDESCRIPTION: Handles cookie management, theme application, and redirection logic. It includes functions to get/set cookies, apply themes based on user preference or system settings, and manage the popup display and redirection.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/lost_luggage.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/lost_luggage\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/lost_luggage\";\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Cookies and Theme in JavaScript\nDESCRIPTION: Implements functions for getting and setting cookies, applying themes based on user preferences or system settings, and handling the redirection logic. It also includes event listeners for user interactions with the popup.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/flag_capture.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/flag_capture\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/flag_capture\";\n})\n```\n\n----------------------------------------\n\nTITLE: Cookie Management and Theme Handling\nDESCRIPTION: JavaScript functions for managing cookies and implementing theme preferences, including system dark mode detection and auto-redirect functionality.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/miniature_golf.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cookie Management and Theme Functions in JavaScript\nDESCRIPTION: JavaScript functions for managing cookies and theme preferences. Includes functions to get/set cookies, apply theme settings based on system preferences, and handle popup interactions.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/mr_do.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) { console.log(`${document.cookie}`); const value = `; ${document.cookie}`; const parts = value.split(`; ${name}=`); if (parts.length === 2) { return parts.pop().split(';').shift(); } } function setCookie(name, value, days) { const date = new Date(); date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000)); const expires = `expires=${date.toUTCString()}`; document.cookie = `${name}=${value}; ${expires}; path=/`; } function applyTheme() { const theme = localStorage.getItem(\"theme\") || \"auto\"; const body = document.body; body.classList.remove(\"dark-theme\", \"light-theme\"); if (theme === \"dark\") { body.classList.add(\"dark-theme\"); } else if (theme === \"light\") { body.classList.add(\"light-theme\"); } else if (theme === \"auto\") { if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) { body.classList.add(\"dark-theme\"); } else { body.classList.add(\"light-theme\"); } window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => { body.classList.remove(\"dark-theme\", \"light-theme\"); body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\"); }); } }\n```\n\n----------------------------------------\n\nTITLE: Popup Event Handling with JavaScript\nDESCRIPTION: JavaScript code for handling popup interactions including window load events, popup closing, and redirect button functionality with cookie storage for user preferences.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/crossbow.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = function() {\n    applyTheme();\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/crossbow\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/crossbow\";\n})\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Notification with Theme Support in CSS\nDESCRIPTION: CSS styles for a popup notification system with support for light and dark themes. Includes styles for the popup overlay, content container, buttons, and checkbox input with proper spacing.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/breakout.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Page Load and Event Handling\nDESCRIPTION: Handles window load event and button click events for the popup interface, including redirect functionality and cookie setting based on user preferences.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/jamesbond.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = function() {\n    applyTheme();\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/jamesbond\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\n\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/jamesbond\";\n});\n```\n\n----------------------------------------\n\nTITLE: Popup Event Handlers and Page Load Logic\nDESCRIPTION: JavaScript code for handling page load events, popup interactions, and redirect functionality. Includes automatic redirect based on cookie preferences.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/alien.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = function() {\n    applyTheme();\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/alien\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/alien\";\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Popup Styling with Theme Support in CSS\nDESCRIPTION: This CSS snippet styles a popup notification with support for both light and dark themes. It defines the layout, positioning, and appearance of the popup components, including responsive design for different theme preferences.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/double_dunk.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Popup Initialization and Event Handlers - JavaScript\nDESCRIPTION: JavaScript code for initializing the popup on page load and handling user interactions with the redirect and close buttons. Includes cookie-based auto-redirect functionality.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/klax.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = function() {\n    applyTheme();\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/klax\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/klax\";\n})\n```\n\n----------------------------------------\n\nTITLE: Popup Event Handlers and Window Load Logic\nDESCRIPTION: JavaScript event handlers for popup interactions and window load behavior, including redirect functionality and cookie-based preferences\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/video_checkers.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.onload = function() {\n    applyTheme();\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/video_checkers\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\n\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/video_checkers\";\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing redirection functionality with JavaScript\nDESCRIPTION: JavaScript code that manages the redirection process from Gymnasium to ALE's website. It handles cookie management for the auto-redirect feature, applies theme settings based on user preferences, and controls the popup visibility and actions.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/fishing_derby.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Function to get a cookie by name\n    function getCookie(name) {\n        console.log(`${document.cookie}`);\n        const value = `; ${document.cookie}`;\n        const parts = value.split(`; ${name}=`);\n        if (parts.length === 2) {\n            return parts.pop().split(';').shift();\n        }\n    }\n\n    // Function to set a cookie\n    function setCookie(name, value, days) {\n        const date = new Date();\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n        const expires = `expires=${date.toUTCString()}`;\n        document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n    }\n\n    // Function to apply theme to the popup\n    function applyTheme() {\n        const theme = localStorage.getItem(\"theme\") || \"auto\";\n        const body = document.body;\n\n        // Remove any existing theme classes\n        body.classList.remove(\"dark-theme\", \"light-theme\");\n\n        if (theme === \"dark\") {\n            body.classList.add(\"dark-theme\");\n        } else if (theme === \"light\") {\n            body.classList.add(\"light-theme\");\n        } else if (theme === \"auto\") {\n            // Check system preference for dark mode\n            if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n                body.classList.add(\"dark-theme\");\n            } else {\n                body.classList.add(\"light-theme\");\n            }\n\n            // Listen for system theme changes\n            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n                body.classList.remove(\"dark-theme\", \"light-theme\");\n                body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n            });\n        }\n    }\n\n    // Show popup if the cookie doesn't exist\n    window.onload = function() {\n        // Apply theme first\n        applyTheme();\n\n        const atariAutoRedirect = getCookie('atariAutoRedirect');\n        if (atariAutoRedirect) {\n            window.location.href = \"https://ale.farama.org/environments/fishing_derby\";\n        } else {\n            document.getElementById('popup').style.display = 'flex';\n        }\n    };\n\n    // Close popup and handle the \"Don't show again\" option\n    document.getElementById('closePopupBtn').addEventListener('click', function() {\n        document.getElementById('popup').style.display = 'none';\n    });\n    document.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n        if (document.getElementById('atariAutoRedirect').checked) {\n            setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n        }\n        console.log(\"redirecting\");\n        window.location.href = \"https://ale.farama.org/environments/fishing_derby\";\n    })\n```\n\n----------------------------------------\n\nTITLE: Managing Cookies and Theme for Kaboom Redirection in JavaScript\nDESCRIPTION: Implements functions for cookie management, theme application, and handling user interactions for the Kaboom redirection page. Includes auto-redirect functionality and theme switching based on system preferences.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/kaboom.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/kaboom\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/kaboom\";\n})\n```\n\n----------------------------------------\n\nTITLE: Styling Popup UI Components with CSS\nDESCRIPTION: CSS styles for a modal popup with theme support (light/dark) including overlay, content container, buttons and checkbox styling.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/defender.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Amidar Redirection Page\nDESCRIPTION: The HTML structure of the redirection page, including the main content with a manual link and the popup notification system. The popup provides options to enable auto-redirection for future visits and contains buttons for redirection or closing the popup.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/amidar.md#2025-04-22_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\n  <head>\n    <title>Redirecting to Amidar's documentation</title>\n    <style>\n      /* CSS styles here */\n    </style>\n  </head>\n  <body>\n    <p>If you are not redirected automatically, follow this <a href=\"https://ale.farama.org/environments/amidar\">link to Amidar's new page</a>.</p>\n    <div id=\"popup\" class=\"popup\">\n    <div class=\"popup-content\">\n        <p>Amidar's documentation has moved to <b>ale.farama.org</b></p>\n        <label>\n            <input type=\"checkbox\" id=\"atariAutoRedirect\">Enable auto-redirect next time\n        </label>\n        <br>\n        <button id=\"atariRedirectBtn\">Redirect to the new website</button>\n        <button id=\"closePopupBtn\">Close</button>\n    </div>\n    </div>\n  </body>\n\n  <script>\n    // JavaScript code here\n  </script>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Cookie Management and Theme Handling in JavaScript\nDESCRIPTION: JavaScript functions for managing cookies, handling user preferences, and implementing theme switching functionality. Includes cookie getter/setter functions and theme application logic.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/tutankham.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the Redirection Popup with Theme Support\nDESCRIPTION: CSS styling for the redirection popup that appears when users visit the deprecated Atlantis page. The styles include responsive positioning, theming support for light and dark modes, and formatting for buttons and checkboxes.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/atlantis.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Basic styles for the popup */\n      .popup {\n          display: none;\n          position: fixed;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n          z-index: 999;\n          justify-content: center;\n          align-items: center;\n      }\n      .popup-content {\n          background-color: #fff; /* Default light content background */\n          padding: 20px;\n          border-radius: 10px;\n          text-align: center;\n          width: 300px;\n      }\n      .dark-theme .popup {\n          background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n      }\n      .dark-theme .popup-content {\n          background-color: #333; /* Dark content background */\n          color: #fff; /* Light text for dark theme */\n      }\n      button {\n          margin-top: 10px;\n          padding: 5px 10px;\n          cursor: pointer;\n      }\n      /* Add spacing between checkbox and label text */\n      input[type=\"checkbox\"] {\n          margin-right: 5px;\n      }\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirect Logic for Yars Revenge in JavaScript\nDESCRIPTION: Handles cookie management, theme application, and redirect functionality for the Yars Revenge documentation page. Includes functions to get and set cookies, apply theme based on user preferences, and handle user interactions with the popup.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/yars_revenge.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/yars_revenge\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/yars_revenge\";\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirect Logic and Theme Handling in JavaScript\nDESCRIPTION: JavaScript code for handling cookies, applying themes, and managing the redirect functionality. It includes functions for getting and setting cookies, applying light/dark themes, and handling user interactions with the popup.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/tic_tac_toe_3d.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/tic_tac_toe_3d\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/tic_tac_toe_3d\";\n})\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Components with CSS\nDESCRIPTION: CSS styles for a popup overlay and content with dark/light theme support. Includes styling for buttons, checkboxes, and responsive positioning.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/mr_do.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup { display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); z-index: 999; justify-content: center; align-items: center; } .popup-content { background-color: #fff; padding: 20px; border-radius: 10px; text-align: center; width: 300px; } .dark-theme .popup { background-color: rgba(0, 0, 0, 0.7); } .dark-theme .popup-content { background-color: #333; color: #fff; } button { margin-top: 10px; padding: 5px 10px; cursor: pointer; } input[type=\"checkbox\"] { margin-right: 5px; }\n```\n\n----------------------------------------\n\nTITLE: Styling Popup and Theme Management in CSS\nDESCRIPTION: CSS code for styling the popup notification and managing light/dark themes. It defines styles for the popup overlay, content, buttons, and theme-specific color schemes.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/battle_zone.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Page Load and Event Handlers JavaScript\nDESCRIPTION: JavaScript code for initializing the page, handling popup events, and managing redirect behavior. Includes window.onload handler and click event listeners for popup buttons.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/pooyan.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = function() {\n    applyTheme();\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/pooyan\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\n\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/pooyan\";\n})\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Modal with Theme Support\nDESCRIPTION: CSS styles for a popup modal with light/dark theme support, including overlay effects, content positioning, and button styling.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/journey_escape.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Page Load and Redirect in JavaScript\nDESCRIPTION: JavaScript code that runs when the page loads to check for redirect preferences and show the popup if needed. Includes event listeners for the popup buttons to handle redirect actions and user preferences.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/frogger.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/frogger\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/frogger\";\n})\n```\n\n----------------------------------------\n\nTITLE: Cookie Management and Theme Handling\nDESCRIPTION: JavaScript functions for managing cookies, handling theme preferences, and controlling the redirect popup behavior. Includes functionality for getting/setting cookies and applying theme based on system preferences.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/journey_escape.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Interface with CSS\nDESCRIPTION: CSS styles for a modal popup interface with dark/light theme support. Includes styling for the overlay, content container, buttons, and checkbox inputs.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/frostbite.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirect and Theme Management in JavaScript\nDESCRIPTION: JavaScript code for managing cookies, applying themes, and handling the redirect functionality. It includes functions for getting/setting cookies, applying themes based on user preference or system settings, and managing the popup display and redirect behavior.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/battle_zone.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/battle_zone\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/battle_zone\";\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirect Logic and Theme Handling in JavaScript\nDESCRIPTION: Contains functions for cookie management, theme application, and redirect handling. It also includes event listeners for user interactions with the popup.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/atlantis2.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/atlantis2\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/atlantis2\";\n})\n```\n\n----------------------------------------\n\nTITLE: Styling Theme-Aware Popup\nDESCRIPTION: CSS styles for a responsive popup with light/dark theme support. Includes styling for the popup overlay, content container, buttons, and checkbox elements.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/space_invaders.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Event Handlers and Window Load Logic\nDESCRIPTION: JavaScript code for handling window load events, popup interactions, and redirect functionality. Includes event listeners for buttons and initialization of the popup based on cookie presence.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/laser_gates.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = function() {\n    applyTheme();\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/laser_gates\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\n\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/laser_gates\";\n})\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Redirection Page\nDESCRIPTION: HTML markup for the redirection page that includes a direct link to the new documentation location and a popup notification system. Contains the document structure and interactive elements.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/demon_attack.md#2025-04-22_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\n  <head>\n    <title>Redirecting to Demon Attack's documentation</title>\n    <style>\n      /* Basic styles for the popup */\n      .popup {\n          display: none;\n          position: fixed;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n          z-index: 999;\n          justify-content: center;\n          align-items: center;\n      }\n      .popup-content {\n          background-color: #fff; /* Default light content background */\n          padding: 20px;\n          border-radius: 10px;\n          text-align: center;\n          width: 300px;\n      }\n      .dark-theme .popup {\n          background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n      }\n      .dark-theme .popup-content {\n          background-color: #333; /* Dark content background */\n          color: #fff; /* Light text for dark theme */\n      }\n      button {\n          margin-top: 10px;\n          padding: 5px 10px;\n          cursor: pointer;\n      }\n      /* Add spacing between checkbox and label text */\n      input[type=\"checkbox\"] {\n          margin-right: 5px;\n      }\n    </style>\n  </head>\n  <body>\n    <p>If you are not redirected automatically, follow this <a href=\"https://ale.farama.org/environments/demon_attack\">link to Demon Attack's new page</a>.</p>\n    <div id=\"popup\" class=\"popup\">\n    <div class=\"popup-content\">\n        <p>Demon Attack's documentation has moved to <b>ale.farama.org</b></p>\n        <label>\n            <input type=\"checkbox\" id=\"atariAutoRedirect\">Enable auto-redirect next time\n        </label>\n        <br>\n        <button id=\"atariRedirectBtn\">Redirect to the new website</button>\n        <button id=\"closePopupBtn\">Close</button>\n    </div>\n    </div>\n  </body>\n\n  <script>\n    // Function to get a cookie by name\n    function getCookie(name) {\n        console.log(`${document.cookie}`);\n        const value = `; ${document.cookie}`;\n        const parts = value.split(`; ${name}=`);\n        if (parts.length === 2) {\n            return parts.pop().split(';').shift();\n        }\n    }\n\n    // Function to set a cookie\n    function setCookie(name, value, days) {\n        const date = new Date();\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n        const expires = `expires=${date.toUTCString()}`;\n        document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n    }\n\n    // Function to apply theme to the popup\n    function applyTheme() {\n        const theme = localStorage.getItem(\"theme\") || \"auto\";\n        const body = document.body;\n\n        // Remove any existing theme classes\n        body.classList.remove(\"dark-theme\", \"light-theme\");\n\n        if (theme === \"dark\") {\n            body.classList.add(\"dark-theme\");\n        } else if (theme === \"light\") {\n            body.classList.add(\"light-theme\");\n        } else if (theme === \"auto\") {\n            // Check system preference for dark mode\n            if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n                body.classList.add(\"dark-theme\");\n            } else {\n                body.classList.add(\"light-theme\");\n            }\n\n            // Listen for system theme changes\n            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n                body.classList.remove(\"dark-theme\", \"light-theme\");\n                body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n            });\n        }\n    }\n\n    // Show popup if the cookie doesn't exist\n    window.onload = function() {\n        // Apply theme first\n        applyTheme();\n\n        const atariAutoRedirect = getCookie('atariAutoRedirect');\n        if (atariAutoRedirect) {\n            window.location.href = \"https://ale.farama.org/environments/demon_attack\";\n        } else {\n            document.getElementById('popup').style.display = 'flex';\n        }\n    };\n\n    // Close popup and handle the \"Don't show again\" option\n    document.getElementById('closePopupBtn').addEventListener('click', function() {\n        document.getElementById('popup').style.display = 'none';\n    });\n    document.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n        if (document.getElementById('atariAutoRedirect').checked) {\n            setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n        }\n        console.log(\"redirecting\");\n        window.location.href = \"https://ale.farama.org/environments/demon_attack\";\n    })\n  </script>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Page Load and Event Handlers\nDESCRIPTION: JavaScript code for handling page load events, popup interactions, and redirect functionality based on user preferences.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/skiing.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = function() { applyTheme(); const atariAutoRedirect = getCookie('atariAutoRedirect'); if (atariAutoRedirect) { window.location.href = \"https://ale.farama.org/environments/skiing\"; } else { document.getElementById('popup').style.display = 'flex'; } }; document.getElementById('closePopupBtn').addEventListener('click', function() { document.getElementById('popup').style.display = 'none'; }); document.getElementById('atariRedirectBtn').addEventListener(\"click\", function() { if (document.getElementById('atariAutoRedirect').checked) { setCookie('atariAutoRedirect', 'true', 90); } console.log(\"redirecting\"); window.location.href = \"https://ale.farama.org/environments/skiing\"; })\n```\n\n----------------------------------------\n\nTITLE: Styling Popup for Redirection Notification\nDESCRIPTION: CSS styling for a popup notification that informs users about the relocated documentation. Includes styles for both light and dark themes, popup positioning, and basic form elements.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/demon_attack.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Basic styles for the popup */\n      .popup {\n          display: none;\n          position: fixed;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n          z-index: 999;\n          justify-content: center;\n          align-items: center;\n      }\n      .popup-content {\n          background-color: #fff; /* Default light content background */\n          padding: 20px;\n          border-radius: 10px;\n          text-align: center;\n          width: 300px;\n      }\n      .dark-theme .popup {\n          background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n      }\n      .dark-theme .popup-content {\n          background-color: #333; /* Dark content background */\n          color: #fff; /* Light text for dark theme */\n      }\n      button {\n          margin-top: 10px;\n          padding: 5px 10px;\n          cursor: pointer;\n      }\n      /* Add spacing between checkbox and label text */\n      input[type=\"checkbox\"] {\n          margin-right: 5px;\n      }\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Notification for Bowling Redirection Page in CSS\nDESCRIPTION: CSS styles for a popup notification that appears when users visit the old Bowling documentation page. The styles include theme support (light/dark mode), positioning, and appearance settings for the popup elements.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/bowling.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Redirect Handler with Cookie-Based Preferences\nDESCRIPTION: JavaScript code that initializes the redirect functionality when the page loads. It checks for existing cookies to determine if automatic redirection should occur, displays the popup if needed, and sets up event listeners for user interactions with the redirect buttons.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/crazy_climber.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Show popup if the cookie doesn't exist\n    window.onload = function() {\n        // Apply theme first\n        applyTheme();\n\n        const atariAutoRedirect = getCookie('atariAutoRedirect');\n        if (atariAutoRedirect) {\n            window.location.href = \"https://ale.farama.org/environments/crazy_climber\";\n        } else {\n            document.getElementById('popup').style.display = 'flex';\n        }\n    };\n\n    // Close popup and handle the \"Don't show again\" option\n    document.getElementById('closePopupBtn').addEventListener('click', function() {\n        document.getElementById('popup').style.display = 'none';\n    });\n    document.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n        if (document.getElementById('atariAutoRedirect').checked) {\n            setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n        }\n        console.log(\"redirecting\");\n        window.location.href = \"https://ale.farama.org/environments/crazy_climber\";\n    })\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Component with CSS\nDESCRIPTION: Defines styles for a modal popup including dark/light theme support, layout positioning, and basic button styling.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/jamesbond.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: User Redirection Management for Bank Heist Documentation\nDESCRIPTION: JavaScript code that manages redirection to the new Bank Heist documentation page. It includes functions for cookie management to remember user preferences, theme handling for the popup, and event listeners for user interaction with the redirection options.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/bank_heist.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Function to get a cookie by name\n    function getCookie(name) {\n        console.log(`${document.cookie}`);\n        const value = `; ${document.cookie}`;\n        const parts = value.split(`; ${name}=`);\n        if (parts.length === 2) {\n            return parts.pop().split(';').shift();\n        }\n    }\n\n    // Function to set a cookie\n    function setCookie(name, value, days) {\n        const date = new Date();\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n        const expires = `expires=${date.toUTCString()}`;\n        document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n    }\n\n    // Function to apply theme to the popup\n    function applyTheme() {\n        const theme = localStorage.getItem(\"theme\") || \"auto\";\n        const body = document.body;\n\n        // Remove any existing theme classes\n        body.classList.remove(\"dark-theme\", \"light-theme\");\n\n        if (theme === \"dark\") {\n            body.classList.add(\"dark-theme\");\n        } else if (theme === \"light\") {\n            body.classList.add(\"light-theme\");\n        } else if (theme === \"auto\") {\n            // Check system preference for dark mode\n            if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n                body.classList.add(\"dark-theme\");\n            } else {\n                body.classList.add(\"light-theme\");\n            }\n\n            // Listen for system theme changes\n            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n                body.classList.remove(\"dark-theme\", \"light-theme\");\n                body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n            });\n        }\n    }\n\n    // Show popup if the cookie doesn't exist\n    window.onload = function() {\n        // Apply theme first\n        applyTheme();\n\n        const atariAutoRedirect = getCookie('atariAutoRedirect');\n        if (atariAutoRedirect) {\n            window.location.href = \"https://ale.farama.org/environments/bank_heist\";\n        } else {\n            document.getElementById('popup').style.display = 'flex';\n        }\n    };\n\n    // Close popup and handle the \"Don't show again\" option\n    document.getElementById('closePopupBtn').addEventListener('click', function() {\n        document.getElementById('popup').style.display = 'none';\n    });\n    document.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n        if (document.getElementById('atariAutoRedirect').checked) {\n            setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n        }\n        console.log(\"redirecting\");\n        window.location.href = \"https://ale.farama.org/environments/bank_heist\";\n    })\n```\n\n----------------------------------------\n\nTITLE: Styling Popup for Zaxxon Redirect Page in CSS\nDESCRIPTION: This CSS snippet defines the styles for the popup used in the Zaxxon redirect page. It includes responsive design for both light and dark themes, and styles for the popup content, buttons, and checkbox.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/zaxxon.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Cookie Management and Theme Handling JavaScript\nDESCRIPTION: JavaScript functions for managing cookies and theme preferences. Includes functions to get/set cookies, apply theme settings based on system preferences, and handle redirect functionality.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/video_chess.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Redirect Popup with CSS\nDESCRIPTION: CSS styling for the popup notification that appears when users visit the page. It includes styles for both light and dark themes, with responsive design elements for the popup overlay, content container, buttons, and form elements.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/crazy_climber.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Basic styles for the popup */\n      .popup {\n          display: none;\n          position: fixed;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n          z-index: 999;\n          justify-content: center;\n          align-items: center;\n      }\n      .popup-content {\n          background-color: #fff; /* Default light content background */\n          padding: 20px;\n          border-radius: 10px;\n          text-align: center;\n          width: 300px;\n      }\n      .dark-theme .popup {\n          background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n      }\n      .dark-theme .popup-content {\n          background-color: #333; /* Dark content background */\n          color: #fff; /* Light text for dark theme */\n      }\n      button {\n          margin-top: 10px;\n          padding: 5px 10px;\n          cursor: pointer;\n      }\n      /* Add spacing between checkbox and label text */\n      input[type=\"checkbox\"] {\n          margin-right: 5px;\n      }\n```\n\n----------------------------------------\n\nTITLE: Styling Popup for Kangaroo Documentation Redirect in CSS\nDESCRIPTION: Defines styles for a popup notification, including dark theme support. It sets up the layout, colors, and responsive design for the redirect message.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/kangaroo.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Cookie Management and Theme Handling in JavaScript\nDESCRIPTION: JavaScript functions for managing cookies, handling user preferences, and implementing theme switching functionality. Includes cookie getter/setter functions and theme application logic with system preference detection.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/asterix.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Dark/Light Theme Popup in CSS\nDESCRIPTION: CSS styles for a themed popup overlay with responsive design, including dark and light theme support. Defines layout, colors, and interactive elements like buttons and checkboxes.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/superman.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Cookie Management and Theme Handling in JavaScript\nDESCRIPTION: JavaScript functions for managing cookies and theme preferences. Includes functions for getting/setting cookies, applying themes based on system preferences, and handling redirect logic.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/up_n_down.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Cookies and Theme for Donkey Kong Redirection in JavaScript\nDESCRIPTION: JavaScript functions for managing cookies, applying themes, and handling user interactions for the Donkey Kong documentation redirection. It includes functions to get/set cookies, apply light/dark themes, and handle redirection based on user preferences.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/donkey_kong.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/donkey_kong\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/donkey_kong\";\n})\n```\n\n----------------------------------------\n\nTITLE: Styling Theme-Aware Popup CSS\nDESCRIPTION: CSS styles for a responsive popup dialog with light/dark theme support. Includes styling for the overlay, content area, buttons and checkbox inputs.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/centipede.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Redirection with JavaScript\nDESCRIPTION: JavaScript code that handles user redirection to the new Amidar documentation page. It includes functions for managing cookies to remember user preferences, applying theme settings based on system preferences, and controlling the popup visibility and redirection behavior.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/amidar.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/amidar\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/amidar\";\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Cookies and Theme for Beam Rider Redirect in JavaScript\nDESCRIPTION: Implements functions to get and set cookies, apply theme based on user preference or system settings, and handle the popup display and redirection logic.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/beam_rider.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction getCookie(name) {\n        console.log(`${document.cookie}`);\n        const value = `; ${document.cookie}`;\n        const parts = value.split(`; ${name}=`);\n        if (parts.length === 2) {\n            return parts.pop().split(';').shift();\n        }\n    }\n\n    function setCookie(name, value, days) {\n        const date = new Date();\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n        const expires = `expires=${date.toUTCString()}`;\n        document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n    }\n\n    function applyTheme() {\n        const theme = localStorage.getItem(\"theme\") || \"auto\";\n        const body = document.body;\n\n        body.classList.remove(\"dark-theme\", \"light-theme\");\n\n        if (theme === \"dark\") {\n            body.classList.add(\"dark-theme\");\n        } else if (theme === \"light\") {\n            body.classList.add(\"light-theme\");\n        } else if (theme === \"auto\") {\n            if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n                body.classList.add(\"dark-theme\");\n            } else {\n                body.classList.add(\"light-theme\");\n            }\n\n            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n                body.classList.remove(\"dark-theme\", \"light-theme\");\n                body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n            });\n        }\n    }\n\n    window.onload = function() {\n        applyTheme();\n\n        const atariAutoRedirect = getCookie('atariAutoRedirect');\n        if (atariAutoRedirect) {\n            window.location.href = \"https://ale.farama.org/environments/beam_rider\";\n        } else {\n            document.getElementById('popup').style.display = 'flex';\n        }\n    };\n\n    document.getElementById('closePopupBtn').addEventListener('click', function() {\n        document.getElementById('popup').style.display = 'none';\n    });\n    document.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n        if (document.getElementById('atariAutoRedirect').checked) {\n            setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n        }\n        console.log(\"redirecting\");\n        window.location.href = \"https://ale.farama.org/environments/beam_rider\";\n    })\n```\n\n----------------------------------------\n\nTITLE: Styling Popup and Theme Support in CSS\nDESCRIPTION: Defines styles for the popup, including dark and light theme variations. It handles positioning, colors, and basic layout for the popup content.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/qbert.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Page Load and Event Handlers in JavaScript\nDESCRIPTION: JavaScript code for handling page load events and user interactions. Includes popup display logic, redirect handling, and cookie-based preferences management.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/asteroids.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = function() {\n    applyTheme();\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/asteroids\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/asteroids\";\n})\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Modal with Theme Support in CSS\nDESCRIPTION: CSS styles for a responsive popup modal with light/dark theme support. Includes styling for overlay, content area, buttons, and checkbox inputs.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/koolaid.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Cookie Management and Theme Handling in JavaScript\nDESCRIPTION: JavaScript code that manages cookies for saving user preferences about auto-redirects, and applies appropriate theme styling based on user preferences or system settings. It includes functions for getting cookies, setting cookies, and applying theme preferences.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/crazy_climber.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Function to get a cookie by name\n    function getCookie(name) {\n        console.log(`${document.cookie}`);\n        const value = `; ${document.cookie}`;\n        const parts = value.split(`; ${name}=`);\n        if (parts.length === 2) {\n            return parts.pop().split(';').shift();\n        }\n    }\n\n    // Function to set a cookie\n    function setCookie(name, value, days) {\n        const date = new Date();\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n        const expires = `expires=${date.toUTCString()}`;\n        document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n    }\n\n    // Function to apply theme to the popup\n    function applyTheme() {\n        const theme = localStorage.getItem(\"theme\") || \"auto\";\n        const body = document.body;\n\n        // Remove any existing theme classes\n        body.classList.remove(\"dark-theme\", \"light-theme\");\n\n        if (theme === \"dark\") {\n            body.classList.add(\"dark-theme\");\n        } else if (theme === \"light\") {\n            body.classList.add(\"light-theme\");\n        } else if (theme === \"auto\") {\n            // Check system preference for dark mode\n            if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n                body.classList.add(\"dark-theme\");\n            } else {\n                body.classList.add(\"light-theme\");\n            }\n\n            // Listen for system theme changes\n            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n                body.classList.remove(\"dark-theme\", \"light-theme\");\n                body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n            });\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Popup Styling CSS\nDESCRIPTION: CSS styles for the redirect popup dialog with dark/light theme support. Includes styling for overlay, content box, buttons, and checkbox elements.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/pooyan.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Redirection with Cookie-Based Preferences\nDESCRIPTION: JavaScript implementation for handling user redirection preferences. Manages cookies for auto-redirect settings, applies theme preferences, and controls the visibility of the popup notification.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/demon_attack.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\n    function getCookie(name) {\n        console.log(`${document.cookie}`);\n        const value = `; ${document.cookie}`;\n        const parts = value.split(`; ${name}=`);\n        if (parts.length === 2) {\n            return parts.pop().split(';').shift();\n        }\n    }\n\n    // Function to set a cookie\n    function setCookie(name, value, days) {\n        const date = new Date();\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n        const expires = `expires=${date.toUTCString()}`;\n        document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n    }\n\n    // Function to apply theme to the popup\n    function applyTheme() {\n        const theme = localStorage.getItem(\"theme\") || \"auto\";\n        const body = document.body;\n\n        // Remove any existing theme classes\n        body.classList.remove(\"dark-theme\", \"light-theme\");\n\n        if (theme === \"dark\") {\n            body.classList.add(\"dark-theme\");\n        } else if (theme === \"light\") {\n            body.classList.add(\"light-theme\");\n        } else if (theme === \"auto\") {\n            // Check system preference for dark mode\n            if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n                body.classList.add(\"dark-theme\");\n            } else {\n                body.classList.add(\"light-theme\");\n            }\n\n            // Listen for system theme changes\n            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n                body.classList.remove(\"dark-theme\", \"light-theme\");\n                body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n            });\n        }\n    }\n\n    // Show popup if the cookie doesn't exist\n    window.onload = function() {\n        // Apply theme first\n        applyTheme();\n\n        const atariAutoRedirect = getCookie('atariAutoRedirect');\n        if (atariAutoRedirect) {\n            window.location.href = \"https://ale.farama.org/environments/demon_attack\";\n        } else {\n            document.getElementById('popup').style.display = 'flex';\n        }\n    };\n\n    // Close popup and handle the \"Don't show again\" option\n    document.getElementById('closePopupBtn').addEventListener('click', function() {\n        document.getElementById('popup').style.display = 'none';\n    });\n    document.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n        if (document.getElementById('atariAutoRedirect').checked) {\n            setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n        }\n        console.log(\"redirecting\");\n        window.location.href = \"https://ale.farama.org/environments/demon_attack\";\n    })\n```\n\n----------------------------------------\n\nTITLE: Cookie Management and Theme Handling in JavaScript\nDESCRIPTION: JavaScript functions for managing cookies, handling theme preferences, and controlling the redirect popup behavior. Includes system theme detection and automatic redirect functionality.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/koolaid.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Popup for Bank Heist Redirection\nDESCRIPTION: CSS styles for a modal popup that notifies users about Bank Heist's documentation being moved. The styles include support for both light and dark themes, with responsive overlay backgrounds and content styling.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/bank_heist.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Basic styles for the popup */\n      .popup {\n          display: none;\n          position: fixed;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n          z-index: 999;\n          justify-content: center;\n          align-items: center;\n      }\n      .popup-content {\n          background-color: #fff; /* Default light content background */\n          padding: 20px;\n          border-radius: 10px;\n          text-align: center;\n          width: 300px;\n      }\n      .dark-theme .popup {\n          background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n      }\n      .dark-theme .popup-content {\n          background-color: #333; /* Dark content background */\n          color: #fff; /* Light text for dark theme */\n      }\n      button {\n          margin-top: 10px;\n          padding: 5px 10px;\n          cursor: pointer;\n      }\n      /* Add spacing between checkbox and label text */\n      input[type=\"checkbox\"] {\n          margin-right: 5px;\n      }\n```\n\n----------------------------------------\n\nTITLE: Implementing Cookie Management and Theme Control\nDESCRIPTION: JavaScript functions for managing cookies, handling redirects, and implementing theme switching based on system preferences\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/haunted_house.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Phoenix Documentation Popup\nDESCRIPTION: CSS styles for a modal popup with theme support (light/dark) and basic layout formatting\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/phoenix.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Cookie Management and Theme Handling in JavaScript\nDESCRIPTION: JavaScript functions to manage cookies for redirect preferences and handle theme switching between light/dark modes based on system preferences and user settings.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/mario_bros.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Popup for Kaboom Redirection in CSS\nDESCRIPTION: Defines styles for a popup used in the Kaboom redirection page. Includes basic popup layout, dark theme support, and button styling.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/kaboom.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Page Load and Event Handlers in JavaScript\nDESCRIPTION: JavaScript code for handling page load events, popup interactions, and redirect functionality with user preference storage.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/defender.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = function() {\n    applyTheme();\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/defender\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\n\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/defender\";\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Cookies and Theme for Hero Documentation Redirect in JavaScript\nDESCRIPTION: This JavaScript code manages cookies for auto-redirect preferences and applies theme settings for the Hero documentation redirect page. It includes functions for getting and setting cookies, applying themes, and handling user interactions.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/hero.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/hero\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/hero\";\n})\n```\n\n----------------------------------------\n\nTITLE: Styling the Redirection Popup with CSS\nDESCRIPTION: CSS styles for a popup notification that informs users about the relocated documentation. Includes styling for both light and dark themes, with proper positioning, backgrounds, text formatting, and button styles.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/amidar.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Page Behavior and Event Handlers in JavaScript\nDESCRIPTION: JavaScript code for initializing the page behavior, including window load handling, popup display logic, and click event handlers for redirect and close buttons.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/montezuma_revenge.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = function() {\n    applyTheme();\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/montezuma_revenge\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\n\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/montezuma_revenge\";\n})\n```\n\n----------------------------------------\n\nTITLE: Theme Management JavaScript\nDESCRIPTION: JavaScript function to apply and manage light/dark themes based on user preferences and system settings. Includes support for auto theme detection and dynamic theme switching.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/centipede.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cookie Management Functions JavaScript\nDESCRIPTION: JavaScript functions for managing browser cookies including getting and setting cookie values with expiration dates.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/centipede.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Component with CSS\nDESCRIPTION: CSS styles for the popup notification component with theme support (light/dark mode) and basic layout styling\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/chopper_command.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Load and Event Handlers\nDESCRIPTION: JavaScript event handlers for managing popup display, redirect functionality, and cookie-based auto-redirect settings\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/haunted_house.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.onload = function() {\n    applyTheme();\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/haunted_house\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\n\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/haunted_house\";\n});\n```\n\n----------------------------------------\n\nTITLE: Cookie Management and Theme Handling in JavaScript\nDESCRIPTION: JavaScript functions for managing cookies, handling theme preferences, and controlling the redirect popup behavior\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/chopper_command.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Components with CSS\nDESCRIPTION: CSS styles defining the appearance and behavior of the popup dialog, including support for light and dark themes. Includes styling for popup overlay, content container, buttons, and checkbox elements.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/laser_gates.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Popup Event Handling and Redirection Logic\nDESCRIPTION: JavaScript code for handling window load events, popup interactions, and redirection logic. Implements auto-redirect functionality based on user preferences stored in cookies.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/asterix.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = function() {\n    applyTheme();\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/asterix\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/asterix\";\n})\n```\n\n----------------------------------------\n\nTITLE: Page Load and Event Handlers\nDESCRIPTION: JavaScript code for handling page load events, popup interactions, and redirect functionality with user preference storage.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/miniature_golf.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = function() {\n    applyTheme();\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/miniature_golf\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/miniature_golf\";\n})\n```\n\n----------------------------------------\n\nTITLE: Popup Event Handlers\nDESCRIPTION: JavaScript event handlers for popup functionality including window load behavior, close button, and redirect button with preference saving.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/space_invaders.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = function() {\n    applyTheme();\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/space_invaders\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\n\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/space_invaders\";\n})\n```\n\n----------------------------------------\n\nTITLE: Styling Popup and Theme Handling in CSS\nDESCRIPTION: Defines styles for a popup overlay and its content, including dark theme support. It also styles buttons and checkboxes within the popup.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/atlantis2.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Theme Management System\nDESCRIPTION: JavaScript function to handle theme application based on user preferences and system settings, including dark/light mode support.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/skiing.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction applyTheme() { const theme = localStorage.getItem(\"theme\") || \"auto\"; const body = document.body; body.classList.remove(\"dark-theme\", \"light-theme\"); if (theme === \"dark\") { body.classList.add(\"dark-theme\"); } else if (theme === \"light\") { body.classList.add(\"light-theme\"); } else if (theme === \"auto\") { if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) { body.classList.add(\"dark-theme\"); } else { body.classList.add(\"light-theme\"); } window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => { body.classList.remove(\"dark-theme\", \"light-theme\"); body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\"); }); } }\n```\n\n----------------------------------------\n\nTITLE: Cookie Management and Theme Control with JavaScript\nDESCRIPTION: JavaScript functions for managing cookies, handling theme preferences, and controlling the redirect popup behavior. Includes functions for getting/setting cookies and applying theme based on system preferences.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/word_zapper.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Popup and Theme in CSS\nDESCRIPTION: CSS styles for the popup notification and theme-specific colors. It includes basic positioning, dark and light theme variations, and styles for buttons and checkboxes.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/keystone_kapers.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Page Load and Event Handling in JavaScript\nDESCRIPTION: Handles page load events and user interactions including popup display, redirect functionality, and cookie-based preferences storage.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/ms_pacman.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = function() {\n    applyTheme();\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/ms_pacman\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\n\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/ms_pacman\";\n})\n```\n\n----------------------------------------\n\nTITLE: Cookie and Theme Management JavaScript\nDESCRIPTION: JavaScript functions for managing cookies, handling theme preferences, and controlling the redirect popup behavior. Includes functions for getting/setting cookies and applying dark/light themes based on system preferences.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/pooyan.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirection Logic for Star Gunner Documentation in JavaScript\nDESCRIPTION: Handles the redirection logic, cookie management, and theme application for the Star Gunner documentation redirection page. It includes functions for getting and setting cookies, applying themes, and managing the popup display and redirection behavior.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/star_gunner.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/star_gunner\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/star_gunner\";\n})\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Dialog with CSS\nDESCRIPTION: CSS styles for a modal popup dialog with support for light and dark themes, including overlay, content positioning, and button styling.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/word_zapper.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Cookies and Theme in JavaScript\nDESCRIPTION: Implements functions for cookie management, theme application, and handling user interactions for the redirect popup. It checks for existing preferences and applies the appropriate theme and redirect behavior.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/king_kong.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/king_kong\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/king_kong\";\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirection Logic in JavaScript\nDESCRIPTION: Handles the redirection logic, including cookie management for auto-redirect preferences, theme application, and event listeners for user interactions. It checks for existing preferences and applies the appropriate action on page load.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/boxing.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/boxing\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/boxing\";\n})\n```\n\n----------------------------------------\n\nTITLE: Structuring HTML for the redirection page interface\nDESCRIPTION: HTML structure for the redirection page, which includes a simple link to the new documentation page and a modal popup informing users about the change. The popup provides options to enable auto-redirect or manually navigate to the new location.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/fishing_derby.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <title>Redirecting to Fishing Derby's documentation</title>\n    <style>\n      /* CSS styles are in another snippet */\n    </style>\n  </head>\n  <body>\n    <p>If you are not redirected automatically, follow this <a href=\"https://ale.farama.org/environments/fishing_derby\">link to Fishing Derby's new page</a>.</p>\n    <div id=\"popup\" class=\"popup\">\n    <div class=\"popup-content\">\n        <p>Fishing Derby's documentation has moved to <b>ale.farama.org</b></p>\n        <label>\n            <input type=\"checkbox\" id=\"atariAutoRedirect\">Enable auto-redirect next time\n        </label>\n        <br>\n        <button id=\"atariRedirectBtn\">Redirect to the new website</button>\n        <button id=\"closePopupBtn\">Close</button>\n    </div>\n    </div>\n  </body>\n\n  <script>\n    // JavaScript code is in another snippet\n  </script>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Cookie Management and Theme-Aware Redirection in JavaScript\nDESCRIPTION: JavaScript functionality that manages cookies for user preferences, applies theme styling based on system preferences or user settings, and handles the redirection to the new documentation location. It includes functions for getting/setting cookies and event listeners for popup interactions.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/hangman.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Function to get a cookie by name\n    function getCookie(name) {\n        console.log(`${document.cookie}`);\n        const value = `; ${document.cookie}`;\n        const parts = value.split(`; ${name}=`);\n        if (parts.length === 2) {\n            return parts.pop().split(';').shift();\n        }\n    }\n\n    // Function to set a cookie\n    function setCookie(name, value, days) {\n        const date = new Date();\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n        const expires = `expires=${date.toUTCString()}`;\n        document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n    }\n\n    // Function to apply theme to the popup\n    function applyTheme() {\n        const theme = localStorage.getItem(\"theme\") || \"auto\";\n        const body = document.body;\n\n        // Remove any existing theme classes\n        body.classList.remove(\"dark-theme\", \"light-theme\");\n\n        if (theme === \"dark\") {\n            body.classList.add(\"dark-theme\");\n        } else if (theme === \"light\") {\n            body.classList.add(\"light-theme\");\n        } else if (theme === \"auto\") {\n            // Check system preference for dark mode\n            if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n                body.classList.add(\"dark-theme\");\n            } else {\n                body.classList.add(\"light-theme\");\n            }\n\n            // Listen for system theme changes\n            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n                body.classList.remove(\"dark-theme\", \"light-theme\");\n                body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n            });\n        }\n    }\n\n    // Show popup if the cookie doesn't exist\n    window.onload = function() {\n        // Apply theme first\n        applyTheme();\n\n        const atariAutoRedirect = getCookie('atariAutoRedirect');\n        if (atariAutoRedirect) {\n            window.location.href = \"https://ale.farama.org/environments/hangman\";\n        } else {\n            document.getElementById('popup').style.display = 'flex';\n        }\n    };\n\n    // Close popup and handle the \"Don't show again\" option\n    document.getElementById('closePopupBtn').addEventListener('click', function() {\n        document.getElementById('popup').style.display = 'none';\n    });\n    document.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n        if (document.getElementById('atariAutoRedirect').checked) {\n            setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n        }\n        console.log(\"redirecting\");\n        window.location.href = \"https://ale.farama.org/environments/hangman\";\n    })\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Interface with CSS\nDESCRIPTION: CSS styles for a modal popup interface with dark/light theme support. Includes styling for popup overlay, content container, buttons, and checkbox elements.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/pong.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup { display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); z-index: 999; justify-content: center; align-items: center; } .popup-content { background-color: #fff; padding: 20px; border-radius: 10px; text-align: center; width: 300px; } .dark-theme .popup { background-color: rgba(0, 0, 0, 0.7); } .dark-theme .popup-content { background-color: #333; color: #fff; } button { margin-top: 10px; padding: 5px 10px; cursor: pointer; } input[type=\"checkbox\"] { margin-right: 5px; }\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirection Logic in JavaScript\nDESCRIPTION: Handles cookie management, theme application, and redirection functionality. It includes functions to get and set cookies, apply light/dark themes, and control the visibility and behavior of the redirection popup.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/tennis.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\nwindow.onload = function() {\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/tennis\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/tennis\";\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up HTML Structure for Elevator Action Redirection Page\nDESCRIPTION: Defines the basic HTML structure for a redirection page with a popup notification system that informs users about the new location of the Elevator Action documentation.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/elevator_action.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <title>Redirecting to Elevator Action's documentation</title>\n    <style>\n      /* Basic styles for the popup */\n      .popup {\n          display: none;\n          position: fixed;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n          z-index: 999;\n          justify-content: center;\n          align-items: center;\n      }\n      .popup-content {\n          background-color: #fff; /* Default light content background */\n          padding: 20px;\n          border-radius: 10px;\n          text-align: center;\n          width: 300px;\n      }\n      .dark-theme .popup {\n          background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n      }\n      .dark-theme .popup-content {\n          background-color: #333; /* Dark content background */\n          color: #fff; /* Light text for dark theme */\n      }\n      button {\n          margin-top: 10px;\n          padding: 5px 10px;\n          cursor: pointer;\n      }\n      /* Add spacing between checkbox and label text */\n      input[type=\"checkbox\"] {\n          margin-right: 5px;\n      }\n    </style>\n  </head>\n  <body>\n    <p>If you are not redirected automatically, follow this <a href=\"https://ale.farama.org/environments/elevator_action\">link to Elevator Action's new page</a>.</p>\n    <div id=\"popup\" class=\"popup\">\n    <div class=\"popup-content\">\n        <p>Elevator Action's documentation has moved to <b>ale.farama.org</b></p>\n        <label>\n            <input type=\"checkbox\" id=\"atariAutoRedirect\">Enable auto-redirect next time\n        </label>\n        <br>\n        <button id=\"atariRedirectBtn\">Redirect to the new website</button>\n        <button id=\"closePopupBtn\">Close</button>\n    </div>\n    </div>\n  </body>\n```\n\n----------------------------------------\n\nTITLE: Cookie Management and Theme Handling\nDESCRIPTION: JavaScript functions for managing cookies and handling theme preferences. Includes functionality for getting/setting cookies and applying theme based on system preferences or user settings.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/frostbite.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cookie Management and Theme Handling with JavaScript\nDESCRIPTION: JavaScript functions for managing cookies, handling theme preferences, and controlling popup behavior for the redirect functionality.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/air_raid.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\nwindow.onload = function() {\n    applyTheme();\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/air_raid\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/air_raid\";\n})\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Earthworld Documentation Redirect Page\nDESCRIPTION: The main HTML document structure that provides information about the Earthworld documentation migration to ale.farama.org. Includes a static link for manual navigation and a popup notification system for managing redirect preferences.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/earthworld.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <title>Redirecting to Earthworld's documentation</title>\n    <style>\n      /* Basic styles for the popup */\n      .popup {\n          display: none;\n          position: fixed;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n          z-index: 999;\n          justify-content: center;\n          align-items: center;\n      }\n      .popup-content {\n          background-color: #fff; /* Default light content background */\n          padding: 20px;\n          border-radius: 10px;\n          text-align: center;\n          width: 300px;\n      }\n      .dark-theme .popup {\n          background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n      }\n      .dark-theme .popup-content {\n          background-color: #333; /* Dark content background */\n          color: #fff; /* Light text for dark theme */\n      }\n      button {\n          margin-top: 10px;\n          padding: 5px 10px;\n          cursor: pointer;\n      }\n      /* Add spacing between checkbox and label text */\n      input[type=\"checkbox\"] {\n          margin-right: 5px;\n      }\n    </style>\n  </head>\n  <body>\n    <p>If you are not redirected automatically, follow this <a href=\"https://ale.farama.org/environments/earthworld\">link to Earthworld's new page</a>.</p>\n    <div id=\"popup\" class=\"popup\">\n    <div class=\"popup-content\">\n        <p>Earthworld's documentation has moved to <b>ale.farama.org</b></p>\n        <label>\n            <input type=\"checkbox\" id=\"atariAutoRedirect\">Enable auto-redirect next time\n        </label>\n        <br>\n        <button id=\"atariRedirectBtn\">Redirect to the new website</button>\n        <button id=\"closePopupBtn\">Close</button>\n    </div>\n    </div>\n  </body>\n\n  <script>\n    // Function to get a cookie by name\n    function getCookie(name) {\n        console.log(`${document.cookie}`);\n        const value = `; ${document.cookie}`;\n        const parts = value.split(`; ${name}=`);\n        if (parts.length === 2) {\n            return parts.pop().split(';').shift();\n        }\n    }\n\n    // Function to set a cookie\n    function setCookie(name, value, days) {\n        const date = new Date();\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n        const expires = `expires=${date.toUTCString()}`;\n        document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n    }\n\n    // Function to apply theme to the popup\n    function applyTheme() {\n        const theme = localStorage.getItem(\"theme\") || \"auto\";\n        const body = document.body;\n\n        // Remove any existing theme classes\n        body.classList.remove(\"dark-theme\", \"light-theme\");\n\n        if (theme === \"dark\") {\n            body.classList.add(\"dark-theme\");\n        } else if (theme === \"light\") {\n            body.classList.add(\"light-theme\");\n        } else if (theme === \"auto\") {\n            // Check system preference for dark mode\n            if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n                body.classList.add(\"dark-theme\");\n            } else {\n                body.classList.add(\"light-theme\");\n            }\n\n            // Listen for system theme changes\n            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n                body.classList.remove(\"dark-theme\", \"light-theme\");\n                body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n            });\n        }\n    }\n\n    // Show popup if the cookie doesn't exist\n    window.onload = function() {\n        // Apply theme first\n        applyTheme();\n\n        const atariAutoRedirect = getCookie('atariAutoRedirect');\n        if (atariAutoRedirect) {\n            window.location.href = \"https://ale.farama.org/environments/earthworld\";\n        } else {\n            document.getElementById('popup').style.display = 'flex';\n        }\n    };\n\n    // Close popup and handle the \"Don't show again\" option\n    document.getElementById('closePopupBtn').addEventListener('click', function() {\n        document.getElementById('popup').style.display = 'none';\n    });\n    document.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n        if (document.getElementById('atariAutoRedirect').checked) {\n            setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n        }\n        console.log(\"redirecting\");\n        window.location.href = \"https://ale.farama.org/environments/earthworld\";\n    })\n  </script>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Cookie and Theme Management JavaScript\nDESCRIPTION: JavaScript functions for managing cookies, handling theme preferences, and controlling popup behavior. Includes functions for getting/setting cookies, applying themes based on system preferences, and handling redirect logic.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/road_runner.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Redirection Page\nDESCRIPTION: HTML markup that creates the structure for the Enduro redirection page, including the notification popup with options for auto-redirect and manual navigation links.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/enduro.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <title>Redirecting to Enduro's documentation</title>\n    <style>\n      /* Basic styles for the popup */\n      .popup {\n          display: none;\n          position: fixed;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n          z-index: 999;\n          justify-content: center;\n          align-items: center;\n      }\n      .popup-content {\n          background-color: #fff; /* Default light content background */\n          padding: 20px;\n          border-radius: 10px;\n          text-align: center;\n          width: 300px;\n      }\n      .dark-theme .popup {\n          background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n      }\n      .dark-theme .popup-content {\n          background-color: #333; /* Dark content background */\n          color: #fff; /* Light text for dark theme */\n      }\n      button {\n          margin-top: 10px;\n          padding: 5px 10px;\n          cursor: pointer;\n      }\n      /* Add spacing between checkbox and label text */\n      input[type=\"checkbox\"] {\n          margin-right: 5px;\n      }\n    </style>\n  </head>\n  <body>\n    <p>If you are not redirected automatically, follow this <a href=\"https://ale.farama.org/environments/enduro\">link to Enduro's new page</a>.</p>\n    <div id=\"popup\" class=\"popup\">\n    <div class=\"popup-content\">\n        <p>Enduro's documentation has moved to <b>ale.farama.org</b></p>\n        <label>\n            <input type=\"checkbox\" id=\"atariAutoRedirect\">Enable auto-redirect next time\n        </label>\n        <br>\n        <button id=\"atariRedirectBtn\">Redirect to the new website</button>\n        <button id=\"closePopupBtn\">Close</button>\n    </div>\n    </div>\n  </body>\n\n  <script>\n    // Function to get a cookie by name\n    function getCookie(name) {\n        console.log(`${document.cookie}`);\n        const value = `; ${document.cookie}`;\n        const parts = value.split(`; ${name}=`);\n        if (parts.length === 2) {\n            return parts.pop().split(';').shift();\n        }\n    }\n\n    // Function to set a cookie\n    function setCookie(name, value, days) {\n        const date = new Date();\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n        const expires = `expires=${date.toUTCString()}`;\n        document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n    }\n\n    // Function to apply theme to the popup\n    function applyTheme() {\n        const theme = localStorage.getItem(\"theme\") || \"auto\";\n        const body = document.body;\n\n        // Remove any existing theme classes\n        body.classList.remove(\"dark-theme\", \"light-theme\");\n\n        if (theme === \"dark\") {\n            body.classList.add(\"dark-theme\");\n        } else if (theme === \"light\") {\n            body.classList.add(\"light-theme\");\n        } else if (theme === \"auto\") {\n            // Check system preference for dark mode\n            if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n                body.classList.add(\"dark-theme\");\n            } else {\n                body.classList.add(\"light-theme\");\n            }\n\n            // Listen for system theme changes\n            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n                body.classList.remove(\"dark-theme\", \"light-theme\");\n                body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n            });\n        }\n    }\n\n    // Show popup if the cookie doesn't exist\n    window.onload = function() {\n        // Apply theme first\n        applyTheme();\n\n        const atariAutoRedirect = getCookie('atariAutoRedirect');\n        if (atariAutoRedirect) {\n            window.location.href = \"https://ale.farama.org/environments/enduro\";\n        } else {\n            document.getElementById('popup').style.display = 'flex';\n        }\n    };\n\n    // Close popup and handle the \"Don't show again\" option\n    document.getElementById('closePopupBtn').addEventListener('click', function() {\n        document.getElementById('popup').style.display = 'none';\n    });\n    document.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n        if (document.getElementById('atariAutoRedirect').checked) {\n            setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n        }\n        console.log(\"redirecting\");\n        window.location.href = \"https://ale.farama.org/environments/enduro\";\n    })\n  </script>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirect Logic for Video Pinball Documentation in JavaScript\nDESCRIPTION: Contains JavaScript functions to handle cookie management, theme application, and redirection logic for the Video Pinball documentation page. It includes functionality for auto-redirect and theme switching based on user preferences and system settings.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/video_pinball.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\nwindow.onload = function() {\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/video_pinball\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/video_pinball\";\n})\n```\n\n----------------------------------------\n\nTITLE: Cookie Management and Theme Handling in JavaScript\nDESCRIPTION: JavaScript functions for managing cookies, handling theme preferences, and controlling the redirect popup behavior. Includes functions for getting/setting cookies, applying themes based on system preferences, and event handlers for user interactions.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/tetris.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cookie Management and Theme Handling\nDESCRIPTION: JavaScript functions to manage cookies for redirect preferences and handle theme switching between light/dark modes. Includes system theme detection and event listeners for theme changes.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/alien.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Page Load and Event Handling in JavaScript\nDESCRIPTION: JavaScript code for handling page load events, popup interactions, and redirect functionality. Includes auto-redirect logic and event listeners for user interactions.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/tutankham.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = function() {\n    applyTheme();\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/tutankham\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\n\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/tutankham\";\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Popup for Yars Revenge Redirect in CSS\nDESCRIPTION: Defines CSS styles for a popup that appears when redirecting to the new Yars Revenge documentation. Includes styles for both light and dark themes, as well as responsive design elements.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/yars_revenge.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Cookie-Based Redirect Preferences in JavaScript\nDESCRIPTION: JavaScript functionality for handling redirection to the new Earthworld documentation. Includes functions for retrieving and setting cookies, applying theme preferences, and event handlers for the popup buttons that save user preferences for auto-redirecting.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/earthworld.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/earthworld\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/earthworld\";\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirection and Theme Management in JavaScript\nDESCRIPTION: Handles cookie management, theme application, and user interaction for redirecting to the new Basic Math documentation. Includes functions for getting/setting cookies, applying themes, and event listeners for user actions.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/basic_math.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/basic_math\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/basic_math\";\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirection and Theme Handling in JavaScript\nDESCRIPTION: This JavaScript code handles cookie management, theme application, and redirection functionality. It includes functions to get and set cookies, apply theme preferences, and manage the redirection popup behavior.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/surround.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/surround\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/surround\";\n})\n```\n\n----------------------------------------\n\nTITLE: Cookie Management and Theme Handling in JavaScript\nDESCRIPTION: JavaScript functions for managing cookies, handling theme preferences, and controlling the redirect popup behavior. Includes functions for getting/setting cookies and applying theme based on system preferences.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/et.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Popup UI Components with CSS\nDESCRIPTION: CSS styles defining the appearance and layout of the popup notification system, including dark/light theme support and basic interactive elements like buttons and checkboxes.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/pitfall2.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Detection and Application in JavaScript\nDESCRIPTION: A function that applies light or dark theme to the popup based on user preferences stored in localStorage or system settings. Includes event listeners to handle theme changes from system preferences.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/frogger.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cookie Management Functions in JavaScript\nDESCRIPTION: JavaScript functions for getting and setting cookies. Includes utility functions for managing user preferences regarding auto-redirect functionality.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/asteroids.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n```\n\n----------------------------------------\n\nTITLE: Event Handling and Page Load Logic in JavaScript\nDESCRIPTION: JavaScript event handlers for popup interactions and page load behavior. Implements redirect logic, cookie checking, and theme application on page load.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/koolaid.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = function() {\n    applyTheme();\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/koolaid\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\n\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/koolaid\";\n});\n```\n\n----------------------------------------\n\nTITLE: Cookie Management Functions in JavaScript\nDESCRIPTION: Functions to get and set cookies for managing redirect preferences. Includes getCookie() to retrieve cookie values and setCookie() to store preferences with expiration.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/pong.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) { console.log(`${document.cookie}`); const value = `; ${document.cookie}`; const parts = value.split(`; ${name}=`); if (parts.length === 2) { return parts.pop().split(';').shift(); } } function setCookie(name, value, days) { const date = new Date(); date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000)); const expires = `expires=${date.toUTCString()}`; document.cookie = `${name}=${value}; ${expires}; path=/`; }\n```\n\n----------------------------------------\n\nTITLE: Styling Popup and Theme Management in CSS\nDESCRIPTION: CSS styles for creating a popup and managing light/dark themes. It defines the layout and appearance of the popup, including responsive design for different theme modes.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/private_eye.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Event Handling and Initialization\nDESCRIPTION: JavaScript code for initializing the page and handling user interactions. Includes window load event handling, popup visibility control, and redirect functionality with user preference storage.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/turmoil.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = function() {\n    applyTheme();\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/turmoil\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\n\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/turmoil\";\n})\n```\n\n----------------------------------------\n\nTITLE: Styling Popup for Name This Game Documentation Redirect\nDESCRIPTION: CSS styles for the popup used in the Name This Game documentation redirect page. Includes styles for both light and dark themes, as well as responsive design elements.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/name_this_game.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Popup Event Handlers and Window Load Logic\nDESCRIPTION: JavaScript code for handling window load events, popup interactions, and redirect functionality\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/chopper_command.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = function() {\n    applyTheme();\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/chopper_command\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\n\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/chopper_command\";\n})\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Notification for Seaquest Redirect (CSS)\nDESCRIPTION: Defines the CSS styles for the popup notification, including theme-specific styles for light and dark modes. It sets up the layout, colors, and responsive design for the popup content.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/seaquest.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Event Handling and Page Load Logic in JavaScript\nDESCRIPTION: JavaScript code for handling page load events, popup interactions, and redirect functionality. Includes auto-redirect checking and event listeners for popup buttons.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/up_n_down.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = function() {\n    applyTheme();\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/up_n_down\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\n\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/up_n_down\";\n})\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Atlantis Redirection Page\nDESCRIPTION: The HTML markup that creates the redirection page structure, including the popup dialog for notifying users about the moved documentation. It contains a default redirect link and a popup with options for enabling auto-redirect.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/atlantis.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <title>Redirecting to Atlantis's documentation</title>\n    <style>\n      /* Basic styles for the popup */\n      .popup {\n          display: none;\n          position: fixed;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n          z-index: 999;\n          justify-content: center;\n          align-items: center;\n      }\n      .popup-content {\n          background-color: #fff; /* Default light content background */\n          padding: 20px;\n          border-radius: 10px;\n          text-align: center;\n          width: 300px;\n      }\n      .dark-theme .popup {\n          background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n      }\n      .dark-theme .popup-content {\n          background-color: #333; /* Dark content background */\n          color: #fff; /* Light text for dark theme */\n      }\n      button {\n          margin-top: 10px;\n          padding: 5px 10px;\n          cursor: pointer;\n      }\n      /* Add spacing between checkbox and label text */\n      input[type=\"checkbox\"] {\n          margin-right: 5px;\n      }\n    </style>\n  </head>\n  <body>\n    <p>If you are not redirected automatically, follow this <a href=\"https://ale.farama.org/environments/atlantis\">link to Atlantis's new page</a>.</p>\n    <div id=\"popup\" class=\"popup\">\n    <div class=\"popup-content\">\n        <p>Atlantis's documentation has moved to <b>ale.farama.org</b></p>\n        <label>\n            <input type=\"checkbox\" id=\"atariAutoRedirect\">Enable auto-redirect next time\n        </label>\n        <br>\n        <button id=\"atariRedirectBtn\">Redirect to the new website</button>\n        <button id=\"closePopupBtn\">Close</button>\n    </div>\n    </div>\n  </body>\n\n  <script>\n    // Function to get a cookie by name\n    function getCookie(name) {\n        console.log(`${document.cookie}`);\n        const value = `; ${document.cookie}`;\n        const parts = value.split(`; ${name}=`);\n        if (parts.length === 2) {\n            return parts.pop().split(';').shift();\n        }\n    }\n\n    // Function to set a cookie\n    function setCookie(name, value, days) {\n        const date = new Date();\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n        const expires = `expires=${date.toUTCString()}`;\n        document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n    }\n\n    // Function to apply theme to the popup\n    function applyTheme() {\n        const theme = localStorage.getItem(\"theme\") || \"auto\";\n        const body = document.body;\n\n        // Remove any existing theme classes\n        body.classList.remove(\"dark-theme\", \"light-theme\");\n\n        if (theme === \"dark\") {\n            body.classList.add(\"dark-theme\");\n        } else if (theme === \"light\") {\n            body.classList.add(\"light-theme\");\n        } else if (theme === \"auto\") {\n            // Check system preference for dark mode\n            if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n                body.classList.add(\"dark-theme\");\n            } else {\n                body.classList.add(\"light-theme\");\n            }\n\n            // Listen for system theme changes\n            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n                body.classList.remove(\"dark-theme\", \"light-theme\");\n                body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n            });\n        }\n    }\n\n    // Show popup if the cookie doesn't exist\n    window.onload = function() {\n        // Apply theme first\n        applyTheme();\n\n        const atariAutoRedirect = getCookie('atariAutoRedirect');\n        if (atariAutoRedirect) {\n            window.location.href = \"https://ale.farama.org/environments/atlantis\";\n        } else {\n            document.getElementById('popup').style.display = 'flex';\n        }\n    };\n\n    // Close popup and handle the \"Don't show again\" option\n    document.getElementById('closePopupBtn').addEventListener('click', function() {\n        document.getElementById('popup').style.display = 'none';\n    });\n    document.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n        if (document.getElementById('atariAutoRedirect').checked) {\n            setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n        }\n        console.log(\"redirecting\");\n        window.location.href = \"https://ale.farama.org/environments/atlantis\";\n    })\n  </script>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Dialog with CSS\nDESCRIPTION: CSS styles for a themed popup dialog with light/dark mode support, including overlay, content formatting, and button styling\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/riverraid.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Ice Hockey Redirection Popup in HTML\nDESCRIPTION: Creates the HTML structure for the redirection popup, including the message, checkbox for auto-redirect preference, and buttons for redirecting or closing the popup.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/ice_hockey.md#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"popup\" class=\"popup\">\n    <div class=\"popup-content\">\n        <p>Ice Hockey's documentation has moved to <b>ale.farama.org</b></p>\n        <label>\n            <input type=\"checkbox\" id=\"atariAutoRedirect\">Enable auto-redirect next time\n        </label>\n        <br>\n        <button id=\"atariRedirectBtn\">Redirect to the new website</button>\n        <button id=\"closePopupBtn\">Close</button>\n    </div>\n    </div>\n```\n\n----------------------------------------\n\nTITLE: Styling Redirection Popup in CSS\nDESCRIPTION: Defines the styles for the redirection popup, including responsive design for light and dark themes. It sets up the layout, colors, and positioning of the popup elements.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/boxing.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Redirection with JavaScript\nDESCRIPTION: JavaScript code that handles the redirection logic for the Enduro documentation page. It includes functions for cookie management, theme application based on user preferences, and event listeners for the popup buttons.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/enduro.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/enduro\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/enduro\";\n})\n```\n\n----------------------------------------\n\nTITLE: Styling Popup UI Components with CSS\nDESCRIPTION: CSS styles that define the appearance of the redirection popup, including positioning, colors, and theme support for both light and dark modes. It handles the overlay background, content container, buttons, and checkbox styling.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/berzerk.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Theme-Aware Popup with CSS\nDESCRIPTION: CSS styles for a responsive popup dialog that supports both light and dark themes. Includes styling for the overlay, content area, buttons and checkbox inputs.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/crossbow.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Popup for Donkey Kong Redirection in CSS\nDESCRIPTION: CSS styles for creating a responsive popup with light and dark theme support. It defines the layout, colors, and positioning for the popup and its content.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/donkey_kong.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Popup for Hero Documentation Redirect in CSS\nDESCRIPTION: This CSS snippet defines styles for a popup used in the Hero documentation redirect page. It includes styles for light and dark themes, and responsive design elements.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/hero.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirection Logic for Backgammon Documentation in JavaScript\nDESCRIPTION: JavaScript functions for handling cookie-based redirection, theme application, and user interactions for the Backgammon documentation relocation popup. It includes functions for getting/setting cookies, applying themes, and event listeners for user actions.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/backgammon.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/backgammon\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/backgammon\";\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Cookies and Theme for Seaquest Redirect (JavaScript)\nDESCRIPTION: Implements functions to manage cookies, apply themes, and handle the popup display and redirection. It includes logic for getting and setting cookies, applying light/dark themes based on user preference or system settings, and handling user interactions with the popup.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/seaquest.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/seaquest\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/seaquest\";\n})\n```\n\n----------------------------------------\n\nTITLE: Styling Redirect Popup in CSS\nDESCRIPTION: Defines styles for the redirect popup, including layout, colors, and theme-specific adjustments. It handles both light and dark themes.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/entombed.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring HTML for Venture Documentation Redirection\nDESCRIPTION: Defines the basic HTML structure for the redirection page, including meta information, styles, and content placeholders.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/venture.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\n  <head>\n    <title>Redirecting to Venture's documentation</title>\n    <style>\n      /* Basic styles for the popup */\n      .popup {\n          display: none;\n          position: fixed;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n          z-index: 999;\n          justify-content: center;\n          align-items: center;\n      }\n      .popup-content {\n          background-color: #fff; /* Default light content background */\n          padding: 20px;\n          border-radius: 10px;\n          text-align: center;\n          width: 300px;\n      }\n      .dark-theme .popup {\n          background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n      }\n      .dark-theme .popup-content {\n          background-color: #333; /* Dark content background */\n          color: #fff; /* Light text for dark theme */\n      }\n      button {\n          margin-top: 10px;\n          padding: 5px 10px;\n          cursor: pointer;\n      }\n      /* Add spacing between checkbox and label text */\n      input[type=\"checkbox\"] {\n          margin-right: 5px;\n      }\n    </style>\n  </head>\n  <body>\n    <p>If you are not redirected automatically, follow this <a href=\"https://ale.farama.org/environments/venture\">link to Venture's new page</a>.</p>\n    <div id=\"popup\" class=\"popup\">\n    <div class=\"popup-content\">\n        <p>Venture's documentation has moved to <b>ale.farama.org</b></p>\n        <label>\n            <input type=\"checkbox\" id=\"atariAutoRedirect\">Enable auto-redirect next time\n        </label>\n        <br>\n        <button id=\"atariRedirectBtn\">Redirect to the new website</button>\n        <button id=\"closePopupBtn\">Close</button>\n    </div>\n    </div>\n  </body>\n\n  <script>\n    // JavaScript code here\n  </script>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirection and Theme Handling in JavaScript\nDESCRIPTION: Provides functionality for cookie management, theme application, and handling user interactions for redirection. It checks for existing cookies, applies themes based on user preferences or system settings, and manages the redirection process.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/venture.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/venture\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/venture\";\n})\n```\n\n----------------------------------------\n\nTITLE: Styling Theme-Aware Popup with CSS\nDESCRIPTION: CSS styles for a responsive popup dialog with light/dark theme support, including overlay backgrounds, content styling, and button formatting.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/mario_bros.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the Redirection Popup with CSS\nDESCRIPTION: CSS styling for the redirection popup that appears when a user visits the Galaxian documentation page. The styles define the appearance of the popup overlay, content container, and interactive elements with support for both light and dark themes.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/galaxian.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Basic styles for the popup */\n      .popup {\n          display: none;\n          position: fixed;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n          z-index: 999;\n          justify-content: center;\n          align-items: center;\n      }\n      .popup-content {\n          background-color: #fff; /* Default light content background */\n          padding: 20px;\n          border-radius: 10px;\n          text-align: center;\n          width: 300px;\n      }\n      .dark-theme .popup {\n          background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n      }\n      .dark-theme .popup-content {\n          background-color: #333; /* Dark content background */\n          color: #fff; /* Light text for dark theme */\n      }\n      button {\n          margin-top: 10px;\n          padding: 5px 10px;\n          cursor: pointer;\n      }\n      /* Add spacing between checkbox and label text */\n      input[type=\"checkbox\"] {\n          margin-right: 5px;\n      }\n```\n\n----------------------------------------\n\nTITLE: Managing Cookies and Theme for Freeway Redirect in JavaScript\nDESCRIPTION: Implements JavaScript functions to handle cookies, apply themes, and control the redirect behavior. It includes functions for getting and setting cookies, applying light/dark themes, and managing the popup display and redirect actions.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/freeway.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\n    function getCookie(name) {\n        console.log(`${document.cookie}`);\n        const value = `; ${document.cookie}`;\n        const parts = value.split(`; ${name}=`);\n        if (parts.length === 2) {\n            return parts.pop().split(';').shift();\n        }\n    }\n\n    // Function to set a cookie\n    function setCookie(name, value, days) {\n        const date = new Date();\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n        const expires = `expires=${date.toUTCString()}`;\n        document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n    }\n\n    // Function to apply theme to the popup\n    function applyTheme() {\n        const theme = localStorage.getItem(\"theme\") || \"auto\";\n        const body = document.body;\n\n        // Remove any existing theme classes\n        body.classList.remove(\"dark-theme\", \"light-theme\");\n\n        if (theme === \"dark\") {\n            body.classList.add(\"dark-theme\");\n        } else if (theme === \"light\") {\n            body.classList.add(\"light-theme\");\n        } else if (theme === \"auto\") {\n            // Check system preference for dark mode\n            if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n                body.classList.add(\"dark-theme\");\n            } else {\n                body.classList.add(\"light-theme\");\n            }\n\n            // Listen for system theme changes\n            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n                body.classList.remove(\"dark-theme\", \"light-theme\");\n                body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n            });\n        }\n    }\n\n    // Show popup if the cookie doesn't exist\n    window.onload = function() {\n        // Apply theme first\n        applyTheme();\n\n        const atariAutoRedirect = getCookie('atariAutoRedirect');\n        if (atariAutoRedirect) {\n            window.location.href = \"https://ale.farama.org/environments/freeway\";\n        } else {\n            document.getElementById('popup').style.display = 'flex';\n        }\n    };\n\n    // Close popup and handle the \"Don't show again\" option\n    document.getElementById('closePopupBtn').addEventListener('click', function() {\n        document.getElementById('popup').style.display = 'none';\n    });\n    document.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n        if (document.getElementById('atariAutoRedirect').checked) {\n            setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n        }\n        console.log(\"redirecting\");\n        window.location.href = \"https://ale.farama.org/environments/freeway\";\n    })\n```\n\n----------------------------------------\n\nTITLE: Managing Cookies and Redirection with JavaScript\nDESCRIPTION: JavaScript functions to handle cookies for storing user preferences about auto-redirection, applying theme settings based on system preferences, and managing the redirection popup behavior.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/gravitar.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Function to get a cookie by name\n    function getCookie(name) {\n        console.log(`${document.cookie}`);\n        const value = `; ${document.cookie}`;\n        const parts = value.split(`; ${name}=`);\n        if (parts.length === 2) {\n            return parts.pop().split(';').shift();\n        }\n    }\n\n    // Function to set a cookie\n    function setCookie(name, value, days) {\n        const date = new Date();\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n        const expires = `expires=${date.toUTCString()}`;\n        document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n    }\n\n    // Function to apply theme to the popup\n    function applyTheme() {\n        const theme = localStorage.getItem(\"theme\") || \"auto\";\n        const body = document.body;\n\n        // Remove any existing theme classes\n        body.classList.remove(\"dark-theme\", \"light-theme\");\n\n        if (theme === \"dark\") {\n            body.classList.add(\"dark-theme\");\n        } else if (theme === \"light\") {\n            body.classList.add(\"light-theme\");\n        } else if (theme === \"auto\") {\n            // Check system preference for dark mode\n            if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n                body.classList.add(\"dark-theme\");\n            } else {\n                body.classList.add(\"light-theme\");\n            }\n\n            // Listen for system theme changes\n            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n                body.classList.remove(\"dark-theme\", \"light-theme\");\n                body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n            });\n        }\n    }\n\n    // Show popup if the cookie doesn't exist\n    window.onload = function() {\n        // Apply theme first\n        applyTheme();\n\n        const atariAutoRedirect = getCookie('atariAutoRedirect');\n        if (atariAutoRedirect) {\n            window.location.href = \"https://ale.farama.org/environments/gravitar\";\n        } else {\n            document.getElementById('popup').style.display = 'flex';\n        }\n    };\n\n    // Close popup and handle the \"Don't show again\" option\n    document.getElementById('closePopupBtn').addEventListener('click', function() {\n        document.getElementById('popup').style.display = 'none';\n    });\n    document.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n        if (document.getElementById('atariAutoRedirect').checked) {\n            setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n        }\n        console.log(\"redirecting\");\n        window.location.href = \"https://ale.farama.org/environments/gravitar\";\n    })\n```\n\n----------------------------------------\n\nTITLE: Setting up Popup Styles with CSS\nDESCRIPTION: CSS styling for a popup notification that appears when users visit the page. Includes styles for both light and dark themes, positioning, and styling for buttons and checkboxes.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/enduro.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Redirection Page and Popup\nDESCRIPTION: The HTML structure for the Berzerk redirection page, including the popup dialog that informs users about the documentation move. It contains a static redirect link, a modal popup with message, checkbox for auto-redirect option, and action buttons.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/berzerk.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <title>Redirecting to Berzerk's documentation</title>\n    <style>\n      /* CSS styles here */\n    </style>\n  </head>\n  <body>\n    <p>If you are not redirected automatically, follow this <a href=\"https://ale.farama.org/environments/berzerk\">link to Berzerk's new page</a>.</p>\n    <div id=\"popup\" class=\"popup\">\n    <div class=\"popup-content\">\n        <p>Berzerk's documentation has moved to <b>ale.farama.org</b></p>\n        <label>\n            <input type=\"checkbox\" id=\"atariAutoRedirect\">Enable auto-redirect next time\n        </label>\n        <br>\n        <button id=\"atariRedirectBtn\">Redirect to the new website</button>\n        <button id=\"closePopupBtn\">Close</button>\n    </div>\n    </div>\n  </body>\n\n  <script>\n    // JavaScript code here\n  </script>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirection and Theme Management in JavaScript\nDESCRIPTION: JavaScript code that handles cookie management, theme application, and redirection logic. It includes functions for getting/setting cookies, applying themes based on user preferences or system settings, and managing the popup display and redirection behavior.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/space_war.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/space_war\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/space_war\";\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Redirection with Cookie-Based Preferences in JavaScript\nDESCRIPTION: This JavaScript code handles the redirection logic for the Double Dunk environment page. It includes functions for cookie management, theme detection, and user interaction with the popup. The script checks for existing preferences and either redirects automatically or displays a popup based on user settings.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/double_dunk.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/double_dunk\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/double_dunk\";\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirection Logic with Cookie-based Preferences\nDESCRIPTION: JavaScript functions that handle the redirection process, manage user preferences via cookies, and apply appropriate theming. The code checks for existing preferences, applies theme settings, and sets up event listeners for user interactions with the popup.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/atlantis.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Function to get a cookie by name\n    function getCookie(name) {\n        console.log(`${document.cookie}`);\n        const value = `; ${document.cookie}`;\n        const parts = value.split(`; ${name}=`);\n        if (parts.length === 2) {\n            return parts.pop().split(';').shift();\n        }\n    }\n\n    // Function to set a cookie\n    function setCookie(name, value, days) {\n        const date = new Date();\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n        const expires = `expires=${date.toUTCString()}`;\n        document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n    }\n\n    // Function to apply theme to the popup\n    function applyTheme() {\n        const theme = localStorage.getItem(\"theme\") || \"auto\";\n        const body = document.body;\n\n        // Remove any existing theme classes\n        body.classList.remove(\"dark-theme\", \"light-theme\");\n\n        if (theme === \"dark\") {\n            body.classList.add(\"dark-theme\");\n        } else if (theme === \"light\") {\n            body.classList.add(\"light-theme\");\n        } else if (theme === \"auto\") {\n            // Check system preference for dark mode\n            if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n                body.classList.add(\"dark-theme\");\n            } else {\n                body.classList.add(\"light-theme\");\n            }\n\n            // Listen for system theme changes\n            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n                body.classList.remove(\"dark-theme\", \"light-theme\");\n                body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n            });\n        }\n    }\n\n    // Show popup if the cookie doesn't exist\n    window.onload = function() {\n        // Apply theme first\n        applyTheme();\n\n        const atariAutoRedirect = getCookie('atariAutoRedirect');\n        if (atariAutoRedirect) {\n            window.location.href = \"https://ale.farama.org/environments/atlantis\";\n        } else {\n            document.getElementById('popup').style.display = 'flex';\n        }\n    };\n\n    // Close popup and handle the \"Don't show again\" option\n    document.getElementById('closePopupBtn').addEventListener('click', function() {\n        document.getElementById('popup').style.display = 'none';\n    });\n    document.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n        if (document.getElementById('atariAutoRedirect').checked) {\n            setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n        }\n        console.log(\"redirecting\");\n        window.location.href = \"https://ale.farama.org/environments/atlantis\";\n    })\n```\n\n----------------------------------------\n\nTITLE: Styling Popup for Beam Rider Redirect in HTML/CSS\nDESCRIPTION: Defines the CSS styles for a popup notification, including themes for light and dark mode. The styles control the appearance of the popup, buttons, and checkbox.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/beam_rider.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\n      /* Basic styles for the popup */\n      .popup {\n          display: none;\n          position: fixed;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n          z-index: 999;\n          justify-content: center;\n          align-items: center;\n      }\n      .popup-content {\n          background-color: #fff; /* Default light content background */\n          padding: 20px;\n          border-radius: 10px;\n          text-align: center;\n          width: 300px;\n      }\n      .dark-theme .popup {\n          background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n      }\n      .dark-theme .popup-content {\n          background-color: #333; /* Dark content background */\n          color: #fff; /* Light text for dark theme */\n      }\n      button {\n          margin-top: 10px;\n          padding: 5px 10px;\n          cursor: pointer;\n      }\n      /* Add spacing between checkbox and label text */\n      input[type=\"checkbox\"] {\n          margin-right: 5px;\n      }\n    </style>\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Interface with CSS\nDESCRIPTION: CSS styles for a modal popup with dark/light theme support, including overlay, content container, buttons, and checkbox styling\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/sir_lancelot.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup { display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); z-index: 999; justify-content: center; align-items: center; } .popup-content { background-color: #fff; padding: 20px; border-radius: 10px; text-align: center; width: 300px; } .dark-theme .popup { background-color: rgba(0, 0, 0, 0.7); } .dark-theme .popup-content { background-color: #333; color: #fff; } button { margin-top: 10px; padding: 5px 10px; cursor: pointer; } input[type=\"checkbox\"] { margin-right: 5px; }\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirection and Theme Management in JavaScript\nDESCRIPTION: JavaScript code for managing cookies, applying themes, and handling user interactions for redirection. It includes functions for getting/setting cookies, applying themes based on user preferences or system settings, and event listeners for popup interactions.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/private_eye.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/private_eye\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/private_eye\";\n})\n```\n\n----------------------------------------\n\nTITLE: Cookie Management and Theme Control JavaScript\nDESCRIPTION: JavaScript functions handling cookie management for user preferences, theme detection and application, and popup display logic. Includes event listeners for user interactions and system theme changes.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/pitfall2.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirection and Theme Logic in JavaScript\nDESCRIPTION: Contains functions for cookie management, theme application, and handling user interactions for redirection. It checks for existing preferences and applies the appropriate theme and redirection behavior.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/qbert.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/qbert\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/qbert\";\n})\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Modal with Theme Support\nDESCRIPTION: CSS styles for a popup modal with light/dark theme support, including overlay backgrounds, content styling, and button formatting.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/skiing.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup { display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); z-index: 999; justify-content: center; align-items: center; } .popup-content { background-color: #fff; padding: 20px; border-radius: 10px; text-align: center; width: 300px; } .dark-theme .popup { background-color: rgba(0, 0, 0, 0.7); } .dark-theme .popup-content { background-color: #333; color: #fff; } button { margin-top: 10px; padding: 5px 10px; cursor: pointer; } input[type=\"checkbox\"] { margin-right: 5px; }\n```\n\n----------------------------------------\n\nTITLE: Styling Popup UI Components in CSS\nDESCRIPTION: CSS styles for a popup notification system with dark/light theme support. Includes styling for the overlay, content container, buttons, and checkbox inputs.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/montezuma_revenge.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Dialog with Theme Support\nDESCRIPTION: CSS styles for a modal popup with light/dark theme support, including overlay backgrounds, content styling, and button formatting.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/miniature_golf.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Cookie Management and Theme Handling in JavaScript\nDESCRIPTION: JavaScript functions for managing cookies, handling theme preferences, and controlling the redirection popup. Includes functions for getting/setting cookies, applying themes based on system preferences, and handling user interactions.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/superman.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cookie Management and Theme Functions\nDESCRIPTION: JavaScript functions for managing cookies and applying theme preferences. Includes functions to get/set cookies and apply theme settings based on user preferences or system settings.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/space_invaders.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Cookies and Theme in JavaScript\nDESCRIPTION: Implements functions to get and set cookies, apply theme preferences, and handle the redirection popup. It checks for existing preferences and system theme.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/krull.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\nwindow.onload = function() {\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/krull\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/krull\";\n})\n```\n\n----------------------------------------\n\nTITLE: Cookie Management and Theme Handling in JavaScript\nDESCRIPTION: JavaScript functions for managing cookies and applying theme preferences. Includes functions for getting/setting cookies, handling system theme preferences, and managing the popup display and redirect functionality.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/turmoil.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Popup and Theme Handling in CSS\nDESCRIPTION: Defines styles for a popup notification and handles light/dark theme variations. It includes responsive design for different screen sizes and theme preferences.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/lost_luggage.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pacman Redirection Popup in HTML\nDESCRIPTION: Creates the HTML structure for the redirection page, including the popup notification. The popup informs users about the new location of Pacman's documentation and provides options for auto-redirect.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/pacman.md#2025-04-22_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<body>\n    <p>If you are not redirected automatically, follow this <a href=\"https://ale.farama.org/environments/pacman\">link to Pacman's new page</a>.</p>\n    <div id=\"popup\" class=\"popup\">\n    <div class=\"popup-content\">\n        <p>Pacman's documentation has moved to <b>ale.farama.org</b></p>\n        <label>\n            <input type=\"checkbox\" id=\"atariAutoRedirect\">Enable auto-redirect next time\n        </label>\n        <br>\n        <button id=\"atariRedirectBtn\">Redirect to the new website</button>\n        <button id=\"closePopupBtn\">Close</button>\n    </div>\n    </div>\n  </body>\n```\n\n----------------------------------------\n\nTITLE: Cookie Management Functions\nDESCRIPTION: JavaScript functions for getting and setting cookies to manage user preferences for auto-redirect functionality.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/skiing.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) { console.log(`${document.cookie}`); const value = `; ${document.cookie}`; const parts = value.split(`; ${name}=`); if (parts.length === 2) { return parts.pop().split(';').shift(); } } function setCookie(name, value, days) { const date = new Date(); date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000)); const expires = `expires=${date.toUTCString()}`; document.cookie = `${name}=${value}; ${expires}; path=/`; }\n```\n\n----------------------------------------\n\nTITLE: Theme Management in JavaScript\nDESCRIPTION: JavaScript function to handle theme application (light/dark) based on user preferences and system settings. Includes dynamic theme switching and system preference monitoring.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/asteroids.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirect Popup with Theme Support in HTML\nDESCRIPTION: HTML structure for a redirect page with a popup notification that informs users about Gopher's documentation being moved to ale.farama.org. Includes styling for both light and dark themes and links to the new documentation location.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/gopher.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <title>Redirecting to Gopher's documentation</title>\n    <style>\n      /* Basic styles for the popup */\n      .popup {\n          display: none;\n          position: fixed;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n          z-index: 999;\n          justify-content: center;\n          align-items: center;\n      }\n      .popup-content {\n          background-color: #fff; /* Default light content background */\n          padding: 20px;\n          border-radius: 10px;\n          text-align: center;\n          width: 300px;\n      }\n      .dark-theme .popup {\n          background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n      }\n      .dark-theme .popup-content {\n          background-color: #333; /* Dark content background */\n          color: #fff; /* Light text for dark theme */\n      }\n      button {\n          margin-top: 10px;\n          padding: 5px 10px;\n          cursor: pointer;\n      }\n      /* Add spacing between checkbox and label text */\n      input[type=\"checkbox\"] {\n          margin-right: 5px;\n      }\n    </style>\n  </head>\n  <body>\n    <p>If you are not redirected automatically, follow this <a href=\"https://ale.farama.org/environments/gopher\">link to Gopher's new page</a>.</p>\n    <div id=\"popup\" class=\"popup\">\n    <div class=\"popup-content\">\n        <p>Gopher's documentation has moved to <b>ale.farama.org</b></p>\n        <label>\n            <input type=\"checkbox\" id=\"atariAutoRedirect\">Enable auto-redirect next time\n        </label>\n        <br>\n        <button id=\"atariRedirectBtn\">Redirect to the new website</button>\n        <button id=\"closePopupBtn\">Close</button>\n    </div>\n    </div>\n  </body>\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Interface with CSS\nDESCRIPTION: CSS styles for a modal popup interface with dark/light theme support. Includes styling for popup overlay, content container, buttons, and checkbox inputs.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/asterix.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the Redirect Popup with CSS\nDESCRIPTION: CSS styling for the popup notification that informs users about the documentation move. Includes styles for both light and dark themes, popup positioning, and button styling.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/frogger.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Page Load and Event Handling in JavaScript\nDESCRIPTION: JavaScript code for handling page load events, popup visibility, and redirect functionality. Includes event listeners for buttons and checkbox handling.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/et.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = function() {\n    applyTheme();\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/et\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/et\";\n})\n```\n\n----------------------------------------\n\nTITLE: Page Load and Event Handlers JavaScript\nDESCRIPTION: JavaScript code for initializing the page, handling popup visibility, and managing redirect preferences. Includes window load event handler and click event listeners for popup buttons.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/centipede.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = function() {\n    applyTheme();\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/centipede\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/centipede\";\n})\n```\n\n----------------------------------------\n\nTITLE: Page Load and Event Handlers\nDESCRIPTION: JavaScript event handlers for page load and user interactions. Implements redirect logic, popup display control, and cookie-based preferences.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/frostbite.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = function() {\n    applyTheme();\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/frostbite\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\n\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/frostbite\";\n})\n```\n\n----------------------------------------\n\nTITLE: Page Load and Event Handlers in JavaScript\nDESCRIPTION: JavaScript code for handling page load events and user interactions with the redirect popup. Includes auto-redirect logic and event listeners for popup buttons.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/superman.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = function() {\n    applyTheme();\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/superman\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/superman\";\n})\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Modal with Theme Support\nDESCRIPTION: CSS styles for a popup modal with light/dark theme support. Includes styling for the overlay, content container, buttons and checkbox elements.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/alien.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up HTML Structure for Redirect Page\nDESCRIPTION: The HTML structure for a redirect page that includes a notification popup with options for auto-redirection. The document has a simple fallback link and a popup element that appears if JavaScript is enabled.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/gravitar.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <title>Redirecting to Gravitar's documentation</title>\n    <style>\n      /* Basic styles for the popup */\n      .popup {\n          display: none;\n          position: fixed;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n          z-index: 999;\n          justify-content: center;\n          align-items: center;\n      }\n      .popup-content {\n          background-color: #fff; /* Default light content background */\n          padding: 20px;\n          border-radius: 10px;\n          text-align: center;\n          width: 300px;\n      }\n      .dark-theme .popup {\n          background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n      }\n      .dark-theme .popup-content {\n          background-color: #333; /* Dark content background */\n          color: #fff; /* Light text for dark theme */\n      }\n      button {\n          margin-top: 10px;\n          padding: 5px 10px;\n          cursor: pointer;\n      }\n      /* Add spacing between checkbox and label text */\n      input[type=\"checkbox\"] {\n          margin-right: 5px;\n      }\n    </style>\n  </head>\n  <body>\n    <p>If you are not redirected automatically, follow this <a href=\"https://ale.farama.org/environments/gravitar\">link to Gravitar's new page</a>.</p>\n    <div id=\"popup\" class=\"popup\">\n    <div class=\"popup-content\">\n        <p>Gravitar's documentation has moved to <b>ale.farama.org</b></p>\n        <label>\n            <input type=\"checkbox\" id=\"atariAutoRedirect\">Enable auto-redirect next time\n        </label>\n        <br>\n        <button id=\"atariRedirectBtn\">Redirect to the new website</button>\n        <button id=\"closePopupBtn\">Close</button>\n    </div>\n    </div>\n  </body>\n\n  <script>\n    // Function to get a cookie by name\n    function getCookie(name) {\n        console.log(`${document.cookie}`);\n        const value = `; ${document.cookie}`;\n        const parts = value.split(`; ${name}=`);\n        if (parts.length === 2) {\n            return parts.pop().split(';').shift();\n        }\n    }\n\n    // Function to set a cookie\n    function setCookie(name, value, days) {\n        const date = new Date();\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n        const expires = `expires=${date.toUTCString()}`;\n        document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n    }\n\n    // Function to apply theme to the popup\n    function applyTheme() {\n        const theme = localStorage.getItem(\"theme\") || \"auto\";\n        const body = document.body;\n\n        // Remove any existing theme classes\n        body.classList.remove(\"dark-theme\", \"light-theme\");\n\n        if (theme === \"dark\") {\n            body.classList.add(\"dark-theme\");\n        } else if (theme === \"light\") {\n            body.classList.add(\"light-theme\");\n        } else if (theme === \"auto\") {\n            // Check system preference for dark mode\n            if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n                body.classList.add(\"dark-theme\");\n            } else {\n                body.classList.add(\"light-theme\");\n            }\n\n            // Listen for system theme changes\n            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n                body.classList.remove(\"dark-theme\", \"light-theme\");\n                body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n            });\n        }\n    }\n\n    // Show popup if the cookie doesn't exist\n    window.onload = function() {\n        // Apply theme first\n        applyTheme();\n\n        const atariAutoRedirect = getCookie('atariAutoRedirect');\n        if (atariAutoRedirect) {\n            window.location.href = \"https://ale.farama.org/environments/gravitar\";\n        } else {\n            document.getElementById('popup').style.display = 'flex';\n        }\n    };\n\n    // Close popup and handle the \"Don't show again\" option\n    document.getElementById('closePopupBtn').addEventListener('click', function() {\n        document.getElementById('popup').style.display = 'none';\n    });\n    document.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n        if (document.getElementById('atariAutoRedirect').checked) {\n            setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n        }\n        console.log(\"redirecting\");\n        window.location.href = \"https://ale.farama.org/environments/gravitar\";\n    })\n  </script>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Page Load and Event Handling JavaScript\nDESCRIPTION: JavaScript code for handling page load events, popup display/hide functionality, and redirect behavior based on user preferences.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/video_chess.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = function() {\n    applyTheme();\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/video_chess\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\n\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/video_chess\";\n})\n```\n\n----------------------------------------\n\nTITLE: Event Handlers and Window Load JavaScript\nDESCRIPTION: JavaScript code for handling window load events, popup interactions, and redirect functionality. Includes event listeners for buttons and automatic redirect based on cookie preferences.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/road_runner.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = function() {\n    applyTheme();\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/road_runner\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\n\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/road_runner\";\n})\n```\n\n----------------------------------------\n\nTITLE: Popup Initialization and Event Handling in JavaScript\nDESCRIPTION: JavaScript code for initializing the popup on page load and handling user interactions with the redirect options. Includes window.onload handler and click event listeners for popup buttons.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/tetris.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = function() {\n    applyTheme();\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/tetris\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/tetris\";\n})\n```\n\n----------------------------------------\n\nTITLE: Styling Dark/Light Theme Popup Interface with CSS\nDESCRIPTION: CSS styles for a popup notification system with dark/light theme support, including overlay effects, content styling, and button formatting.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/darkchambers.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Popup and Theme Management in CSS\nDESCRIPTION: Defines styles for a popup overlay, its content, and theme-specific variations (light/dark). Includes responsive design for different screen sizes and theme preferences.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/basic_math.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Crazy Climber Redirect Page\nDESCRIPTION: The HTML structure for the redirect page, including the basic layout, popup notification elements, and necessary UI components. It contains both the main page content with a manual redirect link and the popup notification with user preference options.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/crazy_climber.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <title>Redirecting to Crazy Climber's documentation</title>\n    <style>\n      /* CSS styles omitted for brevity */\n    </style>\n  </head>\n  <body>\n    <p>If you are not redirected automatically, follow this <a href=\"https://ale.farama.org/environments/crazy_climber\">link to Crazy Climber's new page</a>.</p>\n    <div id=\"popup\" class=\"popup\">\n    <div class=\"popup-content\">\n        <p>Crazy Climber's documentation has moved to <b>ale.farama.org</b></p>\n        <label>\n            <input type=\"checkbox\" id=\"atariAutoRedirect\">Enable auto-redirect next time\n        </label>\n        <br>\n        <button id=\"atariRedirectBtn\">Redirect to the new website</button>\n        <button id=\"closePopupBtn\">Close</button>\n    </div>\n    </div>\n  </body>\n\n  <script>\n    // JavaScript code omitted for brevity\n  </script>\n</html>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Bank Heist Redirection Page\nDESCRIPTION: HTML markup for the Bank Heist redirection page. It includes a fallback text link to the new documentation location and a popup dialog that offers users the option to enable automatic redirection for future visits.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/bank_heist.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <title>Redirecting to Bank Heist's documentation</title>\n    <style>\n      /* Basic styles for the popup */\n      .popup {\n          display: none;\n          position: fixed;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n          z-index: 999;\n          justify-content: center;\n          align-items: center;\n      }\n      .popup-content {\n          background-color: #fff; /* Default light content background */\n          padding: 20px;\n          border-radius: 10px;\n          text-align: center;\n          width: 300px;\n      }\n      .dark-theme .popup {\n          background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n      }\n      .dark-theme .popup-content {\n          background-color: #333; /* Dark content background */\n          color: #fff; /* Light text for dark theme */\n      }\n      button {\n          margin-top: 10px;\n          padding: 5px 10px;\n          cursor: pointer;\n      }\n      /* Add spacing between checkbox and label text */\n      input[type=\"checkbox\"] {\n          margin-right: 5px;\n      }\n    </style>\n  </head>\n  <body>\n    <p>If you are not redirected automatically, follow this <a href=\"https://ale.farama.org/environments/bank_heist\">link to Bank Heist's new page</a>.</p>\n    <div id=\"popup\" class=\"popup\">\n    <div class=\"popup-content\">\n        <p>Bank Heist's documentation has moved to <b>ale.farama.org</b></p>\n        <label>\n            <input type=\"checkbox\" id=\"atariAutoRedirect\">Enable auto-redirect next time\n        </label>\n        <br>\n        <button id=\"atariRedirectBtn\">Redirect to the new website</button>\n        <button id=\"closePopupBtn\">Close</button>\n    </div>\n    </div>\n  </body>\n\n  <script>\n    // Function to get a cookie by name\n    function getCookie(name) {\n        console.log(`${document.cookie}`);\n        const value = `; ${document.cookie}`;\n        const parts = value.split(`; ${name}=`);\n        if (parts.length === 2) {\n            return parts.pop().split(';').shift();\n        }\n    }\n\n    // Function to set a cookie\n    function setCookie(name, value, days) {\n        const date = new Date();\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n        const expires = `expires=${date.toUTCString()}`;\n        document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n    }\n\n    // Function to apply theme to the popup\n    function applyTheme() {\n        const theme = localStorage.getItem(\"theme\") || \"auto\";\n        const body = document.body;\n\n        // Remove any existing theme classes\n        body.classList.remove(\"dark-theme\", \"light-theme\");\n\n        if (theme === \"dark\") {\n            body.classList.add(\"dark-theme\");\n        } else if (theme === \"light\") {\n            body.classList.add(\"light-theme\");\n        } else if (theme === \"auto\") {\n            // Check system preference for dark mode\n            if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n                body.classList.add(\"dark-theme\");\n            } else {\n                body.classList.add(\"light-theme\");\n            }\n\n            // Listen for system theme changes\n            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n                body.classList.remove(\"dark-theme\", \"light-theme\");\n                body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n            });\n        }\n    }\n\n    // Show popup if the cookie doesn't exist\n    window.onload = function() {\n        // Apply theme first\n        applyTheme();\n\n        const atariAutoRedirect = getCookie('atariAutoRedirect');\n        if (atariAutoRedirect) {\n            window.location.href = \"https://ale.farama.org/environments/bank_heist\";\n        } else {\n            document.getElementById('popup').style.display = 'flex';\n        }\n    };\n\n    // Close popup and handle the \"Don't show again\" option\n    document.getElementById('closePopupBtn').addEventListener('click', function() {\n        document.getElementById('popup').style.display = 'none';\n    });\n    document.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n        if (document.getElementById('atariAutoRedirect').checked) {\n            setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n        }\n        console.log(\"redirecting\");\n        window.location.href = \"https://ale.farama.org/environments/bank_heist\";\n    })\n  </script>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Styling Popup and Theme Management in CSS\nDESCRIPTION: Defines styles for a popup notification and implements theme-specific styles for light and dark modes. It includes responsive design elements and styling for buttons and checkboxes.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/flag_capture.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Notification for Blackjack Documentation Redirection\nDESCRIPTION: CSS styles for creating a responsive popup notification with light and dark theme support. It defines the layout, colors, and positioning of the popup elements.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/blackjack.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Popup for Backgammon Redirection in HTML/CSS\nDESCRIPTION: CSS styles for creating a popup notification about the Backgammon documentation relocation. It includes styles for both light and dark themes, and responsive design elements.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/backgammon.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirection Logic in JavaScript\nDESCRIPTION: Defines JavaScript functions for cookie management, theme application, and user interaction handling for the Atari redirection page.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/\";\n})\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Dialog with Theme Support in CSS\nDESCRIPTION: CSS styles for a popup dialog box with support for light and dark themes. Includes styling for the overlay, content area, buttons, and checkbox inputs.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/tetris.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Interface with CSS\nDESCRIPTION: CSS styles for a modal popup with theme support (light/dark) including overlay, content container, buttons and checkbox styling.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/air_raid.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Popup for Freeway Redirect in HTML/CSS\nDESCRIPTION: Defines the CSS styles for a popup notification, including theme support for light and dark modes. The styles control the appearance of the popup, its content, and interactive elements like buttons and checkboxes.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/freeway.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\n      /* Basic styles for the popup */\n      .popup {\n          display: none;\n          position: fixed;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n          z-index: 999;\n          justify-content: center;\n          align-items: center;\n      }\n      .popup-content {\n          background-color: #fff; /* Default light content background */\n          padding: 20px;\n          border-radius: 10px;\n          text-align: center;\n          width: 300px;\n      }\n      .dark-theme .popup {\n          background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n      }\n      .dark-theme .popup-content {\n          background-color: #333; /* Dark content background */\n          color: #fff; /* Light text for dark theme */\n      }\n      button {\n          margin-top: 10px;\n          padding: 5px 10px;\n          cursor: pointer;\n      }\n      /* Add spacing between checkbox and label text */\n      input[type=\"checkbox\"] {\n          margin-right: 5px;\n      }\n    </style>\n```\n\n----------------------------------------\n\nTITLE: Styling Popup for Casino Redirection in HTML/CSS\nDESCRIPTION: Defines the CSS styles for the redirection popup, including theme-specific styles for light and dark modes. It sets the layout, colors, and responsive behavior of the popup elements.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/casino.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\n      /* Basic styles for the popup */\n      .popup {\n          display: none;\n          position: fixed;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n          z-index: 999;\n          justify-content: center;\n          align-items: center;\n      }\n      .popup-content {\n          background-color: #fff; /* Default light content background */\n          padding: 20px;\n          border-radius: 10px;\n          text-align: center;\n          width: 300px;\n      }\n      .dark-theme .popup {\n          background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n      }\n      .dark-theme .popup-content {\n          background-color: #333; /* Dark content background */\n          color: #fff; /* Light text for dark theme */\n      }\n      button {\n          margin-top: 10px;\n          padding: 5px 10px;\n          cursor: pointer;\n      }\n      /* Add spacing between checkbox and label text */\n      input[type=\"checkbox\"] {\n          margin-right: 5px;\n      }\n    </style>\n```\n\n----------------------------------------\n\nTITLE: Styling Redirection Popup in CSS\nDESCRIPTION: Defines styles for the redirection popup, including responsive design for light and dark themes. It sets the layout, colors, and positioning of the popup elements.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/solaris.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Dialog with CSS\nDESCRIPTION: CSS styles for a modal popup dialog with support for light and dark themes. Includes styling for the overlay, content container, buttons, and checkbox inputs.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/asteroids.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Popup Styles with Theme Support\nDESCRIPTION: CSS styles for a popup notification system with light/dark theme support, including overlay effects and responsive design elements\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/haunted_house.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.popup { display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); z-index: 999; justify-content: center; align-items: center; }\n.popup-content { background-color: #fff; padding: 20px; border-radius: 10px; text-align: center; width: 300px; }\n.dark-theme .popup { background-color: rgba(0, 0, 0, 0.7); }\n.dark-theme .popup-content { background-color: #333; color: #fff; }\nbutton { margin-top: 10px; padding: 5px 10px; cursor: pointer; }\ninput[type=\"checkbox\"] { margin-right: 5px; }\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Bowling Documentation Redirection Page\nDESCRIPTION: The HTML structure for a redirection page that informs users about the Bowling documentation's new location. It includes a simple link and a popup notification with options for automatic redirection in future visits.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/bowling.md#2025-04-22_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\n  <head>\n    <title>Redirecting to Bowling's documentation</title>\n    <style>\n      /* Basic styles for the popup */\n      .popup {\n          display: none;\n          position: fixed;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n          z-index: 999;\n          justify-content: center;\n          align-items: center;\n      }\n      .popup-content {\n          background-color: #fff; /* Default light content background */\n          padding: 20px;\n          border-radius: 10px;\n          text-align: center;\n          width: 300px;\n      }\n      .dark-theme .popup {\n          background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n      }\n      .dark-theme .popup-content {\n          background-color: #333; /* Dark content background */\n          color: #fff; /* Light text for dark theme */\n      }\n      button {\n          margin-top: 10px;\n          padding: 5px 10px;\n          cursor: pointer;\n      }\n      /* Add spacing between checkbox and label text */\n      input[type=\"checkbox\"] {\n          margin-right: 5px;\n      }\n    </style>\n  </head>\n  <body>\n    <p>If you are not redirected automatically, follow this <a href=\"https://ale.farama.org/environments/bowling\">link to Bowling's new page</a>.</p>\n    <div id=\"popup\" class=\"popup\">\n    <div class=\"popup-content\">\n        <p>Bowling's documentation has moved to <b>ale.farama.org</b></p>\n        <label>\n            <input type=\"checkbox\" id=\"atariAutoRedirect\">Enable auto-redirect next time\n        </label>\n        <br>\n        <button id=\"atariRedirectBtn\">Redirect to the new website</button>\n        <button id=\"closePopupBtn\">Close</button>\n    </div>\n    </div>\n  </body>\n\n  <script>\n    // Function to get a cookie by name\n    function getCookie(name) {\n        console.log(`${document.cookie}`);\n        const value = `; ${document.cookie}`;\n        const parts = value.split(`; ${name}=`);\n        if (parts.length === 2) {\n            return parts.pop().split(';').shift();\n        }\n    }\n\n    // Function to set a cookie\n    function setCookie(name, value, days) {\n        const date = new Date();\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n        const expires = `expires=${date.toUTCString()}`;\n        document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n    }\n\n    // Function to apply theme to the popup\n    function applyTheme() {\n        const theme = localStorage.getItem(\"theme\") || \"auto\";\n        const body = document.body;\n\n        // Remove any existing theme classes\n        body.classList.remove(\"dark-theme\", \"light-theme\");\n\n        if (theme === \"dark\") {\n            body.classList.add(\"dark-theme\");\n        } else if (theme === \"light\") {\n            body.classList.add(\"light-theme\");\n        } else if (theme === \"auto\") {\n            // Check system preference for dark mode\n            if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n                body.classList.add(\"dark-theme\");\n            } else {\n                body.classList.add(\"light-theme\");\n            }\n\n            // Listen for system theme changes\n            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n                body.classList.remove(\"dark-theme\", \"light-theme\");\n                body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n            });\n        }\n    }\n\n    // Show popup if the cookie doesn't exist\n    window.onload = function() {\n        // Apply theme first\n        applyTheme();\n\n        const atariAutoRedirect = getCookie('atariAutoRedirect');\n        if (atariAutoRedirect) {\n            window.location.href = \"https://ale.farama.org/environments/bowling\";\n        } else {\n            document.getElementById('popup').style.display = 'flex';\n        }\n    };\n\n    // Close popup and handle the \"Don't show again\" option\n    document.getElementById('closePopupBtn').addEventListener('click', function() {\n        document.getElementById('popup').style.display = 'none';\n    });\n    document.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n        if (document.getElementById('atariAutoRedirect').checked) {\n            setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n        }\n        console.log(\"redirecting\");\n        window.location.href = \"https://ale.farama.org/environments/bowling\";\n    })\n  </script>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Styling Popup UI Components with CSS\nDESCRIPTION: CSS styles for the popup dialog including dark/light theme support, layout positioning, and basic button styling.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/carnival.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Component with CSS\nDESCRIPTION: CSS styles for a popup dialog component with dark/light theme support, including overlay, content area, buttons, and checkbox styling\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/video_checkers.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Popup for Robotank Documentation Redirect in CSS\nDESCRIPTION: Defines CSS styles for a popup notification, including light and dark theme variations. The styles control the appearance of the popup overlay, content box, buttons, and checkbox.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/robotank.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Notification with Theme Support in CSS\nDESCRIPTION: CSS styles for a popup notification that supports both light and dark themes. The styles control the appearance of the overlay, content box, buttons, and form elements.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/hangman.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Basic styles for the popup */\n      .popup {\n          display: none;\n          position: fixed;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n          z-index: 999;\n          justify-content: center;\n          align-items: center;\n      }\n      .popup-content {\n          background-color: #fff; /* Default light content background */\n          padding: 20px;\n          border-radius: 10px;\n          text-align: center;\n          width: 300px;\n      }\n      .dark-theme .popup {\n          background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n      }\n      .dark-theme .popup-content {\n          background-color: #333; /* Dark content background */\n          color: #fff; /* Light text for dark theme */\n      }\n      button {\n          margin-top: 10px;\n          padding: 5px 10px;\n          cursor: pointer;\n      }\n      /* Add spacing between checkbox and label text */\n      input[type=\"checkbox\"] {\n          margin-right: 5px;\n      }\n```\n\n----------------------------------------\n\nTITLE: Styling Redirection Popup in CSS\nDESCRIPTION: Defines styles for the redirection popup, including light and dark theme support. It sets the layout, colors, and responsive behavior of the popup elements.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/tennis.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Popup Styling with CSS\nDESCRIPTION: CSS styles for a notification popup that informs users about the documentation relocation. The styling includes support for both light and dark themes with appropriate color schemes for each mode.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/gravitar.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Basic styles for the popup */\n      .popup {\n          display: none;\n          position: fixed;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n          z-index: 999;\n          justify-content: center;\n          align-items: center;\n      }\n      .popup-content {\n          background-color: #fff; /* Default light content background */\n          padding: 20px;\n          border-radius: 10px;\n          text-align: center;\n          width: 300px;\n      }\n      .dark-theme .popup {\n          background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n      }\n      .dark-theme .popup-content {\n          background-color: #333; /* Dark content background */\n          color: #fff; /* Light text for dark theme */\n      }\n      button {\n          margin-top: 10px;\n          padding: 5px 10px;\n          cursor: pointer;\n      }\n      /* Add spacing between checkbox and label text */\n      input[type=\"checkbox\"] {\n          margin-right: 5px;\n      }\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Dialog with CSS\nDESCRIPTION: CSS styles for creating a modal popup with dark/light theme support, including overlay background, content styling, and button formatting.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/et.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Popup for Star Gunner Documentation Redirection in CSS\nDESCRIPTION: Defines styles for a popup notification, including light and dark theme support. The CSS handles the layout, colors, and responsiveness of the popup.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/star_gunner.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Theme-Aware Popup Component - CSS\nDESCRIPTION: CSS styles for a responsive popup component with light/dark theme support. Includes styling for overlay, content area, buttons, and checkbox inputs.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/klax.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Popup and Theme Support in CSS\nDESCRIPTION: Defines CSS styles for a popup notification, including support for light and dark themes. It sets up the layout, colors, and responsive design for the popup content.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/trondead.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Dialog CSS\nDESCRIPTION: CSS styles for a popup dialog with dark/light theme support. Includes styling for overlay, content area, buttons and checkbox inputs.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/video_chess.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Popup for Pacman Redirection in HTML/CSS\nDESCRIPTION: Defines CSS styles for a popup notification, including dark and light theme support. The styles control the appearance of the popup, its content, buttons, and checkbox.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/pacman.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\n      /* Basic styles for the popup */\n      .popup {\n          display: none;\n          position: fixed;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n          z-index: 999;\n          justify-content: center;\n          align-items: center;\n      }\n      .popup-content {\n          background-color: #fff; /* Default light content background */\n          padding: 20px;\n          border-radius: 10px;\n          text-align: center;\n          width: 300px;\n      }\n      .dark-theme .popup {\n          background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n      }\n      .dark-theme .popup-content {\n          background-color: #333; /* Dark content background */\n          color: #fff; /* Light text for dark theme */\n      }\n      button {\n          margin-top: 10px;\n          padding: 5px 10px;\n          cursor: pointer;\n      }\n      /* Add spacing between checkbox and label text */\n      input[type=\"checkbox\"] {\n          margin-right: 5px;\n      }\n    </style>\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Modal with Theme Support in CSS\nDESCRIPTION: CSS styles for a responsive popup notification that supports both light and dark themes. The styles include overlay backgrounds, content containers, buttons, and checkbox elements with appropriate spacing and appearance.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/earthworld.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirection Popup in HTML and CSS\nDESCRIPTION: This snippet defines the HTML structure and CSS styles for a redirection popup. It includes responsive design elements and theme support for light and dark modes.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/surround.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\n  <head>\n    <title>Redirecting to Surround's documentation</title>\n    <style>\n      /* Basic styles for the popup */\n      .popup {\n          display: none;\n          position: fixed;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n          z-index: 999;\n          justify-content: center;\n          align-items: center;\n      }\n      .popup-content {\n          background-color: #fff; /* Default light content background */\n          padding: 20px;\n          border-radius: 10px;\n          text-align: center;\n          width: 300px;\n      }\n      .dark-theme .popup {\n          background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n      }\n      .dark-theme .popup-content {\n          background-color: #333; /* Dark content background */\n          color: #fff; /* Light text for dark theme */\n      }\n      button {\n          margin-top: 10px;\n          padding: 5px 10px;\n          cursor: pointer;\n      }\n      /* Add spacing between checkbox and label text */\n      input[type=\"checkbox\"] {\n          margin-right: 5px;\n      }\n    </style>\n  </head>\n  <body>\n    <p>If you are not redirected automatically, follow this <a href=\"https://ale.farama.org/environments/surround\">link to Surround's new page</a>.</p>\n    <div id=\"popup\" class=\"popup\">\n    <div class=\"popup-content\">\n        <p>Surround's documentation has moved to <b>ale.farama.org</b></p>\n        <label>\n            <input type=\"checkbox\" id=\"atariAutoRedirect\">Enable auto-redirect next time\n        </label>\n        <br>\n        <button id=\"atariRedirectBtn\">Redirect to the new website</button>\n        <button id=\"closePopupBtn\">Close</button>\n    </div>\n    </div>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Setting up CSS styles for the redirection popup\nDESCRIPTION: Defines CSS styles for a modal popup that informs users about the documentation relocation. It includes styling for both light and dark themes with responsive design elements.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/fishing_derby.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Basic styles for the popup */\n      .popup {\n          display: none;\n          position: fixed;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n          z-index: 999;\n          justify-content: center;\n          align-items: center;\n      }\n      .popup-content {\n          background-color: #fff; /* Default light content background */\n          padding: 20px;\n          border-radius: 10px;\n          text-align: center;\n          width: 300px;\n      }\n      .dark-theme .popup {\n          background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n      }\n      .dark-theme .popup-content {\n          background-color: #333; /* Dark content background */\n          color: #fff; /* Light text for dark theme */\n      }\n      button {\n          margin-top: 10px;\n          padding: 5px 10px;\n          cursor: pointer;\n      }\n      /* Add spacing between checkbox and label text */\n      input[type=\"checkbox\"] {\n          margin-right: 5px;\n      }\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirect Logic in JavaScript\nDESCRIPTION: Handles cookie management, theme application, and redirect functionality. It includes functions for getting/setting cookies, applying themes based on user preferences or system settings, and managing the redirect popup.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/entombed.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/entombed\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/entombed\";\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirection and Popup Logic in JavaScript\nDESCRIPTION: Defines functions for handling cookies, applying themes, and managing the redirection popup. It includes event listeners for user interactions and implements the auto-redirect functionality based on user preferences.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/trondead.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/trondead\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/trondead\";\n})\n```\n\n----------------------------------------\n\nTITLE: Cookie Management and Theme Handling in JavaScript\nDESCRIPTION: Implements cookie management functions and theme handling logic. Includes functions to get/set cookies, apply theme preferences based on system settings, and handle popup display and redirect functionality.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/ms_pacman.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;\n}\n\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cookie Management and Theme Handling with JavaScript\nDESCRIPTION: JavaScript functions to manage cookies, handle theme preferences, and control popup behavior for the redirect functionality.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/carnival.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = function() {\n    applyTheme();\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/carnival\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/carnival\";\n})\n```\n\n----------------------------------------\n\nTITLE: Styling Popup Interface with CSS\nDESCRIPTION: CSS styles for a themeable popup interface that handles both light and dark modes. Includes styling for the popup overlay, content container, buttons, and checkbox inputs.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/turmoil.md#2025-04-22_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7);\n}\n.dark-theme .popup-content {\n    background-color: #333;\n    color: #fff;\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Redirect Cookies with JavaScript\nDESCRIPTION: JavaScript functions for handling cookies to track user preferences about auto-redirecting to the new documentation site. Includes functions to get and set cookies with expiration dates.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/frogger.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Cookies and Theme Preferences in JavaScript\nDESCRIPTION: Implements functions to handle cookies, apply themes, and manage user preferences for auto-redirecting. It also includes event listeners for user interactions with the popup.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/kung_fu_master.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/kung_fu_master\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/kung_fu_master\";\n})\n```\n\n----------------------------------------\n\nTITLE: Styling Popup for Assault Documentation Redirect\nDESCRIPTION: CSS styles for creating a responsive popup notification with light and dark theme support. Includes styles for the popup overlay, content, buttons, and checkbox.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/assault.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Popup Event Handlers and Window Load JavaScript\nDESCRIPTION: JavaScript code for handling window load events, popup interactions, and redirect functionality including auto-redirect based on cookie preferences.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/human_cannonball.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = function() {\n    applyTheme();\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/human_cannonball\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\n\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/human_cannonball\";\n})\n```\n\n----------------------------------------\n\nTITLE: Styling Popup and Theme Support in CSS\nDESCRIPTION: CSS code for styling the popup notification and implementing light/dark theme support. It defines the layout, colors, and responsiveness of the popup elements.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/space_war.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Popup for Tic Tac Toe 3D Redirect Page in CSS\nDESCRIPTION: CSS styles for creating a responsive popup with light and dark theme support. It defines the layout, colors, and positioning for the popup and its content.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/tic_tac_toe_3d.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Popup Event Handling and Redirection Logic\nDESCRIPTION: JavaScript event handlers for window load, popup interactions, and redirection functionality\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/sir_lancelot.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = function() { applyTheme(); const atariAutoRedirect = getCookie('atariAutoRedirect'); if (atariAutoRedirect) { window.location.href = \"https://ale.farama.org/environments/sir_lancelot\"; } else { document.getElementById('popup').style.display = 'flex'; } }; document.getElementById('closePopupBtn').addEventListener('click', function() { document.getElementById('popup').style.display = 'none'; }); document.getElementById('atariRedirectBtn').addEventListener(\"click\", function() { if (document.getElementById('atariAutoRedirect').checked) { setCookie('atariAutoRedirect', 'true', 90); } console.log(\"redirecting\"); window.location.href = \"https://ale.farama.org/environments/sir_lancelot\"; })\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirection Logic in JavaScript\nDESCRIPTION: Handles cookie management, theme application, and redirection functionality. It includes functions to get and set cookies, apply themes based on user preferences or system settings, and manage the popup display and redirection process.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/wizard_of_wor.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/wizard_of_wor\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/wizard_of_wor\";\n})\n```\n\n----------------------------------------\n\nTITLE: Styling Redirection Popup in CSS\nDESCRIPTION: Defines styles for the redirection popup, including responsive design for light and dark themes. It sets up the layout, colors, and basic interactivity for the popup elements.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/wizard_of_wor.md#2025-04-22_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Basic styles for the popup */\n.popup {\n    display: none;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5); /* Default background overlay */\n    z-index: 999;\n    justify-content: center;\n    align-items: center;\n}\n.popup-content {\n    background-color: #fff; /* Default light content background */\n    padding: 20px;\n    border-radius: 10px;\n    text-align: center;\n    width: 300px;\n}\n.dark-theme .popup {\n    background-color: rgba(0, 0, 0, 0.7); /* Darker overlay for dark theme */\n}\n.dark-theme .popup-content {\n    background-color: #333; /* Dark content background */\n    color: #fff; /* Light text for dark theme */\n}\nbutton {\n    margin-top: 10px;\n    padding: 5px 10px;\n    cursor: pointer;\n}\n/* Add spacing between checkbox and label text */\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Redirection with JavaScript\nDESCRIPTION: JavaScript code that handles the redirection logic, cookie management, and theme application for the Galaxian documentation page. The script checks for user preferences stored in cookies, provides functions to manage those preferences, and implements automatic redirection to the new documentation location when configured.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/galaxian.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Function to get a cookie by name\n    function getCookie(name) {\n        console.log(`${document.cookie}`);\n        const value = `; ${document.cookie}`;\n        const parts = value.split(`; ${name}=`);\n        if (parts.length === 2) {\n            return parts.pop().split(';').shift();\n        }\n    }\n\n    // Function to set a cookie\n    function setCookie(name, value, days) {\n        const date = new Date();\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n        const expires = `expires=${date.toUTCString()}`;\n        document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n    }\n\n    // Function to apply theme to the popup\n    function applyTheme() {\n        const theme = localStorage.getItem(\"theme\") || \"auto\";\n        const body = document.body;\n\n        // Remove any existing theme classes\n        body.classList.remove(\"dark-theme\", \"light-theme\");\n\n        if (theme === \"dark\") {\n            body.classList.add(\"dark-theme\");\n        } else if (theme === \"light\") {\n            body.classList.add(\"light-theme\");\n        } else if (theme === \"auto\") {\n            // Check system preference for dark mode\n            if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n                body.classList.add(\"dark-theme\");\n            } else {\n                body.classList.add(\"light-theme\");\n            }\n\n            // Listen for system theme changes\n            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n                body.classList.remove(\"dark-theme\", \"light-theme\");\n                body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n            });\n        }\n    }\n\n    // Show popup if the cookie doesn't exist\n    window.onload = function() {\n        // Apply theme first\n        applyTheme();\n\n        const atariAutoRedirect = getCookie('atariAutoRedirect');\n        if (atariAutoRedirect) {\n            window.location.href = \"https://ale.farama.org/environments/galaxian\";\n        } else {\n            document.getElementById('popup').style.display = 'flex';\n        }\n    };\n\n    // Close popup and handle the \"Don't show again\" option\n    document.getElementById('closePopupBtn').addEventListener('click', function() {\n        document.getElementById('popup').style.display = 'none';\n    });\n    document.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n        if (document.getElementById('atariAutoRedirect').checked) {\n            setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n        }\n        console.log(\"redirecting\");\n        window.location.href = \"https://ale.farama.org/environments/galaxian\";\n    })\n```\n\n----------------------------------------\n\nTITLE: Managing Cookies and Theme for Blackjack Documentation Redirection\nDESCRIPTION: JavaScript functions for managing cookies, applying themes, and handling user interactions for the Blackjack documentation redirection popup. It includes functions to get and set cookies, apply light/dark themes, and handle redirection preferences.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/blackjack.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/blackjack\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/blackjack\";\n})\n```\n\n----------------------------------------\n\nTITLE: Redirection Handling for Bowling Documentation in JavaScript\nDESCRIPTION: JavaScript functions that manage the redirection from the old Bowling documentation to its new location at ale.farama.org. It handles cookie management for user preferences, theme application based on system settings, and controls the popup notification behavior.\nSOURCE: https://github.com/farama-foundation/gymnasium/blob/main/docs/environments/atari/bowling.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Function to get a cookie by name\nfunction getCookie(name) {\n    console.log(`${document.cookie}`);\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${name}=`);\n    if (parts.length === 2) {\n        return parts.pop().split(';').shift();\n    }\n}\n\n// Function to set a cookie\nfunction setCookie(name, value, days) {\n    const date = new Date();\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n    const expires = `expires=${date.toUTCString()}`;\n    document.cookie = `${name}=${value}; ${expires}; path=/`;  // environments/atari/\n}\n\n// Function to apply theme to the popup\nfunction applyTheme() {\n    const theme = localStorage.getItem(\"theme\") || \"auto\";\n    const body = document.body;\n\n    // Remove any existing theme classes\n    body.classList.remove(\"dark-theme\", \"light-theme\");\n\n    if (theme === \"dark\") {\n        body.classList.add(\"dark-theme\");\n    } else if (theme === \"light\") {\n        body.classList.add(\"light-theme\");\n    } else if (theme === \"auto\") {\n        // Check system preference for dark mode\n        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n            body.classList.add(\"dark-theme\");\n        } else {\n            body.classList.add(\"light-theme\");\n        }\n\n        // Listen for system theme changes\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            body.classList.remove(\"dark-theme\", \"light-theme\");\n            body.classList.add(e.matches ? \"dark-theme\" : \"light-theme\");\n        });\n    }\n}\n\n// Show popup if the cookie doesn't exist\nwindow.onload = function() {\n    // Apply theme first\n    applyTheme();\n\n    const atariAutoRedirect = getCookie('atariAutoRedirect');\n    if (atariAutoRedirect) {\n        window.location.href = \"https://ale.farama.org/environments/bowling\";\n    } else {\n        document.getElementById('popup').style.display = 'flex';\n    }\n};\n\n// Close popup and handle the \"Don't show again\" option\ndocument.getElementById('closePopupBtn').addEventListener('click', function() {\n    document.getElementById('popup').style.display = 'none';\n});\ndocument.getElementById('atariRedirectBtn').addEventListener(\"click\", function() {\n    if (document.getElementById('atariAutoRedirect').checked) {\n        setCookie('atariAutoRedirect', 'true', 90);  // Set cookie to not show for 90 days\n    }\n    console.log(\"redirecting\");\n    window.location.href = \"https://ale.farama.org/environments/bowling\";\n})\n```"
  }
]