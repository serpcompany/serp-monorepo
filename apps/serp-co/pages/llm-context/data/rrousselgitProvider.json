[
  {
    "owner": "rrousselgit",
    "repo": "provider",
    "content": "TITLE: Using MultiProvider to Avoid Deeply Nested Providers\nDESCRIPTION: Example showing how to refactor deeply nested Provider widgets into a more readable MultiProvider structure without changing the behavior.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/es_MX/README.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nProvider<Something>(\n  create: (_) => Something(),\n  child: Provider<SomethingElse>(\n    create: (_) => SomethingElse(),\n    child: Provider<AnotherThing>(\n      create: (_) => AnotherThing(),\n      child: someWidget,\n    ),\n  ),\n),\n```\n\nLANGUAGE: dart\nCODE:\n```\nMultiProvider(\n  providers: [\n    Provider<Something>(create: (_) => Something()),\n    Provider<SomethingElse>(create: (_) => SomethingElse()),\n    Provider<AnotherThing>(create: (_) => AnotherThing()),\n  ],\n  child: someWidget,\n)\n```\n\n----------------------------------------\n\nTITLE: MultiProvider Implementation\nDESCRIPTION: Shows how to use MultiProvider to organize multiple providers in a cleaner way versus nested providers.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/packages/provider/README.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nMultiProvider(\n  providers: [\n    Provider<Something>(create: (_) => Something()),\n    Provider<SomethingElse>(create: (_) => SomethingElse()),\n    Provider<AnotherThing>(create: (_) => AnotherThing()),\n  ],\n  child: someWidget,\n)\n```\n\n----------------------------------------\n\nTITLE: Consuming Interface and Providing Implementation in Flutter using Provider\nDESCRIPTION: This snippet demonstrates how to consume an interface and provide its implementation using Provider in Flutter. It shows the declaration of an interface, its implementation, and how to use it in a widget and provider setup.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/packages/provider/README.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nabstract class ProviderInterface with ChangeNotifier {\n  ...\n}\n\nclass ProviderImplementation with ChangeNotifier implements ProviderInterface {\n  ...\n}\n\nclass Foo extends StatelessWidget {\n  @override\n  build(context) {\n    final provider = Provider.of<ProviderInterface>(context);\n    return ...\n  }\n}\n\nChangeNotifierProvider<ProviderInterface>(\n  create: (_) => ProviderImplementation(),\n  child: Foo(),\n),\n```\n\n----------------------------------------\n\nTITLE: Using MultiProvider to Simplify Provider Nesting in Flutter\nDESCRIPTION: Example comparing nested Provider widgets with the cleaner MultiProvider approach. MultiProvider simplifies the code structure while maintaining the same functionality as nested providers.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/ko-KR/README.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nMultiProvider(\n  providers: [\n    Provider<Something>(create: (_) => Something()),\n    Provider<SomethingElse>(create: (_) => SomethingElse()),\n    Provider<AnotherThing>(create: (_) => AnotherThing()),\n  ],\n  child: someWidget,\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Provider Value Reading\nDESCRIPTION: Shows how to read values from a Provider using BuildContext extension methods in a StatelessWidget.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/packages/provider/README.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass Home extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Text(\n      // Don't forget to pass the type of the object you want to obtain to `watch`!\n      context.watch<String>(),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplifying Nested Providers with MultiProvider in Dart\nDESCRIPTION: Demonstrates how to use MultiProvider to simplify deeply nested Provider widgets. The MultiProvider combines multiple Provider instances into a single widget, improving code readability.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/fr_FR/README.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nMultiProvider(\n  providers: [\n    Provider<Something>(create: (_) => Something()),\n    Provider<SomethingElse>(create: (_) => SomethingElse()),\n    Provider<AnotherThing>(create: (_) => AnotherThing()),\n  ],\n  child: someWidget,\n)\n```\n\n----------------------------------------\n\nTITLE: ProxyProvider Usage Example\nDESCRIPTION: Demonstrates how to use ProxyProvider to pass dynamic variables to a model.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/packages/provider/README.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nProxyProvider0(\n  update: (_, __) => MyModel(count),\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: Provider Object Creation\nDESCRIPTION: Shows the correct way to create and expose new objects using Provider, including proper usage of create callback.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/packages/provider/README.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nProvider(\n  create: (_) => MyModel(),\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: MultiProvider Implementation\nDESCRIPTION: Demonstrates how to use MultiProvider to manage multiple providers cleanly\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/pt_br/README.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nMultiProvider(\n  providers: [\n    Provider<Something>(create: (_) => Something()),\n    Provider<SomethingElse>(create: (_) => SomethingElse()),\n    Provider<AnotherThing>(create: (_) => AnotherThing()),\n  ],\n  child: someWidget,\n)\n```\n\n----------------------------------------\n\nTITLE: MultiProvider Implementation in Dart\nDESCRIPTION: Shows how to use MultiProvider to avoid nested Provider widgets and improve code readability\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/zh-CN/README.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nMultiProvider(\n  providers: [\n    Provider<Something>(create: (_) => Something()),\n    Provider<SomethingElse>(create: (_) => SomethingElse()),\n    Provider<AnotherThing>(create: (_) => AnotherThing()),\n  ],\n  child: someWidget,\n)\n```\n\n----------------------------------------\n\nTITLE: Custom State Management Example\nDESCRIPTION: Demonstrates implementing a custom state management solution using Provider.value and StatefulWidget.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/packages/provider/README.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nclass Example extends StatefulWidget {\n  const Example({Key key, this.child}) : super(key: key);\n\n  final Widget child;\n\n  @override\n  ExampleState createState() => ExampleState();\n}\n\nclass ExampleState extends State<Example> {\n  int _count;\n\n  void increment() {\n    setState(() {\n      _count++;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Provider.value(\n      value: _count,\n      child: Provider.value(\n        value: this,\n        child: widget.child,\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using context.read in Flutter initState\nDESCRIPTION: Shows how to use context.read to access a provider's value once without listening for updates in the initState method.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/zh-CN/README.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\ninitState() {\n  super.initState();\n  print(context.read<Foo>().value);\n}\n```\n\n----------------------------------------\n\nTITLE: Using context.select for Optimized Rebuilds in Flutter\nDESCRIPTION: Demonstrates how to use context.select to listen to specific properties of a provider, reducing unnecessary widget rebuilds.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/zh-CN/README.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  final name = context.select((Person p) => p.name);\n  return Text(name);\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing a New Object Instance with Provider in Dart\nDESCRIPTION: Demonstrates how to properly expose a new object instance using the Provider's default constructor. This is the recommended way to create and expose new objects.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/ja_JP/README.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nProvider(\n  create: (_) => MyModel(),\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: Reading Provider Value in StatelessWidget\nDESCRIPTION: Example showing how to access a provider's value in a widget using context.watch<T>(), which makes the widget listen to changes in the provided value.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/es_MX/README.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass Home extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Text(\n      // Don't forget to pass the type of the object you want to obtain to `watch`!\n      context.watch<String>(),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Staggered Provider Initialization in Flutter\nDESCRIPTION: This code snippet shows how to implement staggered initialization of providers in Flutter to avoid StackOverflowError. It demonstrates using conditional providers and a step-based initialization process in the initState method.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/packages/provider/README.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nMultiProvider(\n  providers: [\n    if (step1) ...[<lots of providers>,],\n    if (step2) ...[<some more providers>]\n  ],\n)\n```\n\nLANGUAGE: dart\nCODE:\n```\nbool step1 = false;\nbool step2 = false;\n@override\ninitState() {\n  super.initState();\n  Future(() {\n    setState(() => step1 = true);\n    Future(() {\n      setState(() => step2 = true);\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using MultiProvider for Multiple Providers in Dart\nDESCRIPTION: Demonstrates how to use MultiProvider to simplify the nesting of multiple providers. This approach improves code readability when injecting many values.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/ja_JP/README.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nMultiProvider(\n  providers: [\n    Provider<Something>(create: (_) => Something()),\n    Provider<SomethingElse>(create: (_) => SomethingElse()),\n    Provider<AnotherThing>(create: (_) => AnotherThing()),\n  ],\n  child: someWidget,\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing ProxyProvider with Counter and Translations\nDESCRIPTION: Example showing how to use ProxyProvider to combine a Counter with Translations, updating translations when counter changes.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/packages/provider/README.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  return MultiProvider(\n    providers: [\n      ChangeNotifierProvider(create: (_) => Counter()),\n      ProxyProvider<Counter, Translations>(\n        update: (_, counter, __) => Translations(counter.value),\n      ),\n    ],\n    child: Foo(),\n  );\n}\n\nclass Translations {\n  const Translations(this._value);\n\n  final int _value;\n\n  String get title => 'You clicked $_value times';\n}\n```\n\n----------------------------------------\n\nTITLE: Using ProxyProvider to Combine Multiple Provider Values in Flutter\nDESCRIPTION: Example showing how to use ProxyProvider to create an object that depends on values from other providers. This translations object updates whenever the counter changes.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/ko-KR/README.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  return MultiProvider(\n    providers: [\n      ChangeNotifierProvider(create: (_) => Counter()),\n      ProxyProvider<Counter, Translations>(\n        update: (_, counter, __) => Translations(counter.value),\n      ),\n    ],\n    child: Foo(),\n  );\n}\n\nclass Translations {\n  const Translations(this._value);\n\n  final int _value;\n\n  String get title => 'You clicked $_value times';\n}\n```\n\n----------------------------------------\n\nTITLE: context.selectを使用したパフォーマンス最適化\nDESCRIPTION: context.watchの代わりにcontext.selectを使用して、オブジェクトの特定のプロパティのみをリッスンします。これにより、不必要な再構築を防ぎ、パフォーマンスを向上させることができます。\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/ja_JP/README.md#2025-04-21_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  final name = context.select((Person p) => p.name);\n  return Text(name);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Provider with ValueNotifier in Flutter\nDESCRIPTION: This snippet demonstrates how to create a custom provider using ValueNotifier as the state management solution in Flutter.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/es_MX/README.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nclass Example extends StatefulWidget {\n  const Example({Key key, this.child}) : super(key: key);\n\n  final Widget child;\n\n  @override\n  ExampleState createState() => ExampleState();\n}\n\nclass ExampleState extends State<Example> {\n  int _count;\n\n  void increment() {\n    setState(() {\n      _count++;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Provider.value(\n      value: _count,\n      child: Provider.value(\n        value: this,\n        child: widget.child,\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ProxyProvider for Objects with Changing Dependencies in Dart\nDESCRIPTION: Shows how to use ProxyProvider to create objects that depend on changing variables. This approach updates the object when the dependencies change.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/ja_JP/README.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nint count;\n\nProxyProvider0(\n  update: (_, __) => MyModel(count),\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Diagnosticable for DevTools Debugging\nDESCRIPTION: Shows how to implement DiagnosticableTreeMixin for better debugging visualization in Flutter DevTools.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/packages/provider/README.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass MyClass with DiagnosticableTreeMixin {\n  MyClass({this.a, this.b});\n\n  final int a;\n  final String b;\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    super.debugFillProperties(properties);\n    properties.add(IntProperty('a', a));\n    properties.add(StringProperty('b', b));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ValueListenableProvider Migration Pattern\nDESCRIPTION: Demonstrates how to migrate from ValueListenableProvider to a combination of ValueListenableBuilder and Provider.value.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/packages/provider/README.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nValueListenableBuilder<int>(\n  valueListenable: myValueListenable,\n  builder: (context, value, _) {\n    return Provider<int>.value(\n      value: value,\n      child: MyApp(),\n    );\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Correctly Reusing Existing ChangeNotifier Objects with Provider in Flutter\nDESCRIPTION: Example showing the proper way to provide an existing ChangeNotifier instance using the .value constructor. This approach prevents disposal issues when the object is still in use.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/ko-KR/README.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nMyChangeNotifier variable;\n\nChangeNotifierProvider.value(\n  value: variable,\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing DiagnosticableTreeMixin for Improved Debugging in Flutter\nDESCRIPTION: This code snippet shows how to implement DiagnosticableTreeMixin to provide more detailed information about an object's properties when debugging in Flutter DevTools.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/es_MX/README.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nclass MyClass with DiagnosticableTreeMixin {\n  MyClass({this.a, this.b});\n\n  final int a;\n  final String b;\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    super.debugFillProperties(properties);\n    // list all the properties of your class here.\n    // See the documentation of debugFillProperties for more information.\n    properties.add(IntProperty('a', a));\n    properties.add(StringProperty('b', b));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Provider with a New Object Instance in Dart\nDESCRIPTION: Example of the correct way to create a new object within a Provider using the create parameter. This follows best practices for dependency injection in Flutter.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/es_MX/README.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nProvider(\n  create: (_) => MyModel(),\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling Lazy Initialization in Provider in Dart\nDESCRIPTION: Demonstrates how to disable lazy initialization of a provider by setting the 'lazy' parameter to false. This causes the create/update callback to be called immediately.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/ja_JP/README.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nMyProvider(\n  create: (_) => Something(),\n  lazy: false,\n)\n```\n\n----------------------------------------\n\nTITLE: Using Selector Widget in Flutter\nDESCRIPTION: Example showing how to use the Selector widget to select and display a specific property from a Person object.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/packages/provider/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  return Selector<Person, String>(\n    selector: (_, p) => p.name,\n    builder: (_, name, __) {\n      return Text(name);\n    },\n  ),\n}\n```\n\n----------------------------------------\n\nTITLE: Using Provider with StatefulWidget in Flutter\nDESCRIPTION: Shows an alternative architecture for managing complex state using Provider.value with a StatefulWidget instead of ChangeNotifier.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/zh-CN/README.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nclass Example extends StatefulWidget {\n  const Example({Key key, this.child}) : super(key: key);\n\n  final Widget child;\n\n  @override\n  ExampleState createState() => ExampleState();\n}\n\nclass ExampleState extends State<Example> {\n  int _count;\n\n  void increment() {\n    setState(() {\n      _count++;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Provider.value(\n      value: _count,\n      child: Provider.value(\n        value: this,\n        child: widget.child,\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using context.watch in Flutter build Method\nDESCRIPTION: Demonstrates how to properly use context.watch to listen for changes in a provider within the build method.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/zh-CN/README.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nValue value;\n\nWidget build(BuildContext context) {\n  final value = context.watch<Foo>().value;\n  if (value != this.value) {\n    this.value = value;\n    print(value);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using MultiProvider with Builder in Dart\nDESCRIPTION: Shows how to use the new builder parameter on MultiProvider to directly access and use provided values.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/packages/provider/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nMultiProvider(\n  providers: [\n    ChangeNotifierProvider(create: (ct) => Counter()),\n  ],\n  builder: (ctx, child) {\n    final counter = ctx.watch<Counter>();\n    return Text('${counter.count}');\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Using ProxyProvider for objects that depend on changing variables in Dart\nDESCRIPTION: Shows how to use ProxyProvider when your object depends on variables that can change over time, ensuring updates are properly handled.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/tr_TR/README.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nint count;\n\nProxyProvider0(\n  update: (_, __) => MyModel(count),\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: Reading Provider Values in a StatelessWidget in Dart\nDESCRIPTION: Shows how to read values from a provider in a StatelessWidget using the context.watch method. This approach allows the widget to listen for changes in the provided value.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/ja_JP/README.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass Home extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Text(\n      // Make sure to specify the type of the value you want to retrieve in watch's generic!\n      context.watch<String>(),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reusing Existing ChangeNotifier Instance with Provider in Dart\nDESCRIPTION: Shows the correct way to reuse an existing ChangeNotifier instance using the ChangeNotifierProvider.value constructor.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/ja_JP/README.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nMyChangeNotifier variable;\n\nChangeNotifierProvider.value(\n  value: variable,\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: Reusing Existing ChangeNotifier Instance with Provider in Dart\nDESCRIPTION: Demonstrates the correct way to provide an existing ChangeNotifier instance using the ChangeNotifierProvider.value constructor.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/bn_BD/README.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nMyChangeNotifier variable;\n\nChangeNotifierProvider.value(\n  value: variable,\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: Using MultiProvider for Multiple Providers in Dart\nDESCRIPTION: Demonstrates how to use MultiProvider to combine multiple Provider widgets, improving code readability in large applications with many injected values.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/bn_BD/README.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nMultiProvider(\n  providers: [\n    Provider<Something>(create: (_) => Something()),\n    Provider<SomethingElse>(create: (_) => SomethingElse()),\n    Provider<AnotherThing>(create: (_) => AnotherThing()),\n  ],\n  child: someWidget,\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling Lazy Loading in Provider\nDESCRIPTION: Example showing how to disable lazy loading behavior in providers by setting the lazy parameter to false, which causes the create callback to be called immediately rather than on first access.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/es_MX/README.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nMyProvider(\n  create: (_) => Something(),\n  lazy: false,\n)\n```\n\n----------------------------------------\n\nTITLE: Using ProxyProvider in Dart\nDESCRIPTION: Shows how to use ProxyProvider when passing dynamic variables to a model\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/fr_FR/README.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nProxyProvider0(\n  update: (_, __) => MyModel(count),\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: Using ProxyProvider for Dynamic Dependencies\nDESCRIPTION: Example showing how to use ProxyProvider to create objects that depend on values that might change over time, ensuring the object is recreated when dependencies change.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/es_MX/README.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nint count;\n\nProxyProvider0(\n  update: (_, __) => MyModel(count),\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling Lazy Loading with Provider in Flutter\nDESCRIPTION: Example showing how to disable the lazy loading behavior of Provider. By default, the create/update callbacks are called lazily; setting lazy to false precomputes the value.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/ko-KR/README.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nMyProvider(\n  create: (_) => Something(),\n  lazy: false,\n)\n```\n\n----------------------------------------\n\nTITLE: Using ProxyProvider for Dynamic Object Creation in Dart\nDESCRIPTION: Shows how to use ProxyProvider to create an object with variables that can change over time, allowing the object to update when the values change.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/it_IT/README.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nint count;\n\nProxyProvider0(\n  update: (_, __) => MyModel(count),\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: Using ProxyProvider to Combine Multiple Providers in Dart\nDESCRIPTION: Shows how to use ProxyProvider to create a new object that depends on values from other providers. The example creates a Translations object based on a Counter provider.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/ja_JP/README.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  return MultiProvider(\n    providers: [\n      ChangeNotifierProvider(create: (_) => Counter()),\n      ProxyProvider<Counter, Translations>(\n        update: (_, counter, __) => Translations(counter.value),\n      ),\n    ],\n    child: Foo(),\n  );\n}\n\nclass Translations {\n  const Translations(this._value);\n\n  final int _value;\n\n  String get title => 'You clicked $_value times';\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling lazy initialization in Provider in Dart\nDESCRIPTION: Shows how to disable the default lazy initialization of providers using the lazy parameter, which forces immediate creation.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/tr_TR/README.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nMyProvider(\n  create: (_) => Something(),\n  lazy: false,\n)\n```\n\n----------------------------------------\n\nTITLE: Exposing a New Object Instance with Provider in Dart\nDESCRIPTION: Demonstrates how to use Provider to create and expose a new instance of an object. This is the recommended way to create and expose objects using Provider.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/it_IT/README.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nProvider(\n  create: (_) => MyModel(),\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: Using ProxyProvider for Dependent Providers in Dart\nDESCRIPTION: Shows how to use ProxyProvider to create a new object that depends on values from other providers. In this example, it creates translations based on a counter from another provider.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/fr_FR/README.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  return MultiProvider(\n    providers: [\n      ChangeNotifierProvider(create: (_) => Counter()),\n      ProxyProvider<Counter, Translations>(\n        update: (_, counter, __) => Translations(counter.value),\n      ),\n    ],\n    child: Foo(),\n  );\n}\n\nclass Translations {\n  const Translations(this._value);\n\n  final int _value;\n\n  String get title => 'Vous avez cliqué $_value fois';\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Provider Implementation in Dart\nDESCRIPTION: Demonstrates how to disable lazy loading behavior in Provider\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/fr_FR/README.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nMyProvider(\n  create: (_) => Something(),\n  lazy: false,\n)\n```\n\n----------------------------------------\n\nTITLE: Exposing a New Object Instance with Provider in Dart\nDESCRIPTION: Demonstrates how to correctly expose a new object instance using the Provider widget. This method ensures proper creation and disposal of resources.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/bn_BD/README.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nProvider(\n  create: (_) => MyModel(),\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: Using Select Extension in Flutter\nDESCRIPTION: Example demonstrating the new select extension method on BuildContext to access a specific property more concisely.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/packages/provider/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  final name = context.select((Person p) => p.name);\n  return Text(name);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Provider Constructor for New Object Instances in Flutter\nDESCRIPTION: Example showing the correct way to create new objects with Provider's default constructor. This approach ensures proper object lifecycle management by creating the object inside the create callback.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/ko-KR/README.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nProvider(\n  create: (_) => MyModel(),\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing DiagnosticableTreeMixin for Debugging in Dart\nDESCRIPTION: Demonstrates how to implement DiagnosticableTreeMixin to provide better debugging information for custom classes in Flutter's devtools.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/fr_FR/README.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nclass MyClass with DiagnosticableTreeMixin {\n  MyClass({this.a, this.b});\n\n  final int a;\n  final String b;\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    super.debugFillProperties(properties);\n    properties.add(IntProperty('a', a));\n    properties.add(StringProperty('b', b));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing ValueListenableProvider with ValueListenableBuilder and Provider in Flutter\nDESCRIPTION: Example showing how to replace the deprecated ValueListenableProvider by combining ValueListenableBuilder with Provider.value. This approach achieves the same functionality.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/ko-KR/README.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nValueListenableBuilder<int>(\n  valueListenable: myValueListenable,\n  builder: (context, value, _) {\n    return Provider<int>.value(\n      value: value,\n      child: MyApp(),\n    );\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Reading a Provider without ProviderNotFoundException in Dart\nDESCRIPTION: Demonstrates how to read a provider without throwing a ProviderNotFoundException if the provider is optional by making the generic type nullable.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/packages/provider/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\ncontext.watch<Model?>()\n```\n\n----------------------------------------\n\nTITLE: Implementing ReassembleHandler for Hot Reload in Dart\nDESCRIPTION: Demonstrates how to implement the ReassembleHandler interface to handle hot reload events in a provider object.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/zh-CN/README.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nclass Example extends ChangeNotifier implements ReassembleHandler {\n  @override\n  void reassemble() {\n    print('Did hot-reload');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling optional Providers with nullable types in Dart\nDESCRIPTION: Shows how to make a Provider optional by using nullable generic types, returning null instead of throwing exceptions when no matching provider is found.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/tr_TR/README.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\ncontext.watch<Model>()\n```\n\nLANGUAGE: dart\nCODE:\n```\ncontext.watch<Model?>()\n```\n\n----------------------------------------\n\nTITLE: DiagnosticableTreeMixinを使用したデバッグ情報の改善\nDESCRIPTION: devtoolでクラスインスタンスの詳細情報を表示するために、DiagnosticableTreeMixinをミックスインし、debugFillPropertiesメソッドをオーバーライドします。これにより、クラスのプロパティがdevtoolで適切に表示されます。\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/ja_JP/README.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nclass MyClass with DiagnosticableTreeMixin {\n  MyClass({this.a, this.b});\n\n  final int a;\n  final String b;\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    super.debugFillProperties(properties);\n    // このクラスで定義した全フィールドを以下のように出力プロパティとして定義します。\n    // 詳細は、debugFillPropertiesのドキュメントを参照してください。\n    properties.add(IntProperty('a', a));\n    properties.add(StringProperty('b', b));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating ValueListenableProvider in Dart\nDESCRIPTION: Demonstrates how to migrate from ValueListenableProvider to using Provider with ValueListenableBuilder\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/fr_FR/README.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nValueListenableBuilder<int>(\n  valueListenable: myValueListenable,\n  builder: (context, value, _) {\n    return Provider<int>.value(\n      value: value,\n      child: MyApp(),\n    );\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Provider Implementation for ValueNotifier in Dart\nDESCRIPTION: Provides a link to an example of creating a custom provider that uses ValueNotifier as its state management mechanism.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/fr_FR/README.md#2025-04-21_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n// Example available at:\n// https://gist.github.com/rrousselGit/4910f3125e41600df3c2577e26967c91\n```\n\n----------------------------------------\n\nTITLE: Migrating FutureProvider in Dart\nDESCRIPTION: Shows how to migrate FutureProvider from 4.x.x to 5.0.0-nullsafety version, demonstrating the required initialData changes.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/fr_FR/README.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFutureProvider<int?>(\n  initialValue: null,\n  create: (context) => Future.value(42),\n  child: MyApp(),\n)\n\nWidget build(BuildContext context) {\n  // be sure to specify the ? in watch<int?>\n  final value = context.watch<int?>();\n  return Text('$value');\n}\n```\n\n----------------------------------------\n\nTITLE: ValueListenableProvider Migration in Dart\nDESCRIPTION: Demonstrates how to replace ValueListenableProvider with a combination of ValueListenableBuilder and Provider\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/zh-CN/README.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nValueListenableBuilder<int>(\n  valueListenable: myValueListenable,\n  builder: (context, value, _) {\n    return Provider<int>.value(\n      value: value,\n      child: MyApp(),\n    );\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Migrating FutureProvider to Null Safety in Dart\nDESCRIPTION: Shows how to migrate a FutureProvider to null safety, including making the type nullable and adding an initialValue.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/packages/provider/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFutureProvider<int?>(\n  initialValue: null,\n  create: (context) => Future.value(42),\n  child: MyApp(),\n)\n\nWidget build(BuildContext context) {\n  // be sure to specify the ? in watch<int?>\n  final value = context.watch<int?>();\n  return Text('$value');\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating FutureProvider Example in Dart\nDESCRIPTION: Shows how to migrate FutureProvider usage from 4.x.x to 5.0.0-nullsafety, demonstrating the required initialData parameter and null safety changes.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/zh-CN/README.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFutureProvider<int?>(\n  initialValue: null,\n  create: (context) => Future.value(42),\n  child: MyApp(),\n)\n\nWidget build(BuildContext context) {\n  // be sure to specify the ? in watch<int?>()\n  final value = context.watch<int?>();\n  return Text('$value');\n}\n```\n\n----------------------------------------\n\nTITLE: StatefulWidgetとProvider.valueを組み合わせた状態管理\nDESCRIPTION: 複雑な状態管理のために、StatefulWidgetとProvider.valueを組み合わせて使用する方法を示します。これはChangeNotifierの代替として使用できます。\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/ja_JP/README.md#2025-04-21_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nclass Example extends StatefulWidget {\n  const Example({Key key, this.child}) : super(key: key);\n\n  final Widget child;\n\n  @override\n  ExampleState createState() => ExampleState();\n}\n\nclass ExampleState extends State<Example> {\n  int _count;\n\n  void increment() {\n    setState(() {\n      _count++;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Provider.value(\n      value: _count,\n      child: Provider.value(\n        value: this,\n        child: widget.child,\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new object instance with Provider in Dart\nDESCRIPTION: Demonstrates the correct way to expose a newly created object using Provider's default constructor with the create method.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/tr_TR/README.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nProvider(\n  create: (_) => MyModel(),\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: インターフェースを使用したプロバイダーの実装\nDESCRIPTION: インターフェースを使用してプロバイダーの実装を提供する方法を示します。これにより、実装の詳細を隠蔽しながら、必要な機能を公開できます。\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/ja_JP/README.md#2025-04-21_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nabstract class ProviderInterface with ChangeNotifier {\n  ...\n}\n\nclass ProviderImplementation with ChangeNotifier implements ProviderInterface {\n  ...\n}\n\nclass Foo extends StatelessWidget {\n  @override\n  build(context) {\n    final provider = Provider.of<ProviderInterface>(context);\n    return ...\n  }\n}\n\nChangeNotifierProvider<ProviderInterface>(\n  create: (_) => ProviderImplementation(),\n  child: Foo(),\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Provider Creation\nDESCRIPTION: Example of creating a new object with Provider\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/pt_br/README.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nProvider(\n  create: (_) => MyModel(),\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: Reading Provider Value in Stateless Widget for Dart\nDESCRIPTION: Shows how to read a value from a Provider within a StatelessWidget using the context.watch method.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/bn_BD/README.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass Home extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Text(\n      context.watch<String>(),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Provider Instance in Dart\nDESCRIPTION: Example of correct way to create and expose a new object instance using Provider\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/fr_FR/README.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nProvider(\n  create: (_) => MyModel(),\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: Listening to data with context extensions in Dart\nDESCRIPTION: Example of using BuildContext extension methods to listen to data changes in a StatelessWidget with context.watch.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/tr_TR/README.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nclass Home extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Text(\n      // \"watch\" işlemi ile elde etmek istediğiniz objenin tipini belirtmeyi unutmayın!\n      context.watch<String>(),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Provider Values with BuildContext Extensions in Flutter\nDESCRIPTION: Example showing how to read values from a Provider using the BuildContext extension method watch(). This widget will rebuild whenever the provided String value changes.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/ko-KR/README.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass Home extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Text(\n      // Don't forget to pass the type of the object you want to obtain to `watch`!\n      context.watch<String>(),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Provider Value in Widget\nDESCRIPTION: Shows how to read a value from a Provider in a StatelessWidget using context.watch\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/fr_FR/README.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass Home extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Text(\n      context.watch<String>(),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: initState内でのプロバイダー値の一回限りの読み取り\nDESCRIPTION: initState内でcontext.readを使用してプロバイダーの値を一度だけ読み取ります。これは初期化時に値が必要で、その後の更新を無視する場合に適しています。\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/ja_JP/README.md#2025-04-21_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\ninitState() {\n  super.initState();\n  print(context.read<Foo>().value);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Providers with Nullable Types in Dart\nDESCRIPTION: Example of defining multiple providers with different nullability of the exposed value, which is no longer supported in version 6.0.0.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/packages/provider/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nMultiProvider(\n  providers: [\n    Provider<Model>(...),\n    Provider<Model?>(...)\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Reading Provider Value in StatelessWidget in Dart\nDESCRIPTION: Shows how to read a value from a Provider using the context.watch method within a StatelessWidget.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/it_IT/README.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass Home extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Text(\n      // Don't forget to pass the type of the object you want to obtain to `watch`!\n      context.watch<String>(),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing ValueListenableProvider with ValueListenableBuilder in Dart\nDESCRIPTION: Demonstrates how to migrate from the removed ValueListenableProvider by combining ValueListenableBuilder with Provider.value.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/tr_TR/README.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nValueListenableBuilder<int>(\n  valueListenable: myValueListenable,\n  builder: (context, value, _) {\n    return Provider<int>.value(\n      value: value,\n      child: MyApp(),\n    );\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing DiagnosticableTreeMixin in Dart\nDESCRIPTION: Demonstrates how to use DiagnosticableTreeMixin to provide more detailed information in DevTools for custom classes.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/zh-CN/README.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass MyClass with DiagnosticableTreeMixin {\n  MyClass({this.a, this.b});\n\n  final int a;\n  final String b;\n\n  @override\n  void debugFillProperties(DiagnosticPropertiesBuilder properties) {\n    super.debugFillProperties(properties);\n    // list all the properties of your class here.\n    // See the documentation of debugFillProperties for more information.\n    properties.add(IntProperty('a', a));\n    properties.add(StringProperty('b', b));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ValueListenableProvider Migration\nDESCRIPTION: Shows how to migrate from ValueListenableProvider to Provider with ValueListenableBuilder\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/pt_br/README.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nValueListenableBuilder<int>(\n  valueListenable: myValueListenable,\n  builder: (context, value, _) {\n    return Provider<int>.value(\n      value: value,\n      child: MyApp(),\n    );\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing ReassembleHandler for Hot Reload in Dart\nDESCRIPTION: Shows how to implement ReassembleHandler interface to handle hot reload events in a custom class used with Provider.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/fr_FR/README.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nclass Example extends ChangeNotifier implements ReassembleHandler {\n  @override\n  void reassemble() {\n    print('Did hot-reload');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ProxyProvider Example in Dart\nDESCRIPTION: Demonstrates how to use ProxyProvider to combine multiple provider values into a new object\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/zh-CN/README.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  return MultiProvider(\n    providers: [\n      ChangeNotifierProvider(create: (_) => Counter()),\n      ProxyProvider<Counter, Translations>(\n        update: (_, counter, __) => Translations(counter.value),\n      ),\n    ],\n    child: Foo(),\n  );\n}\n\nclass Translations {\n  const Translations(this._value);\n\n  final int _value;\n\n  String get title => 'You clicked $_value times';\n}\n```\n\n----------------------------------------\n\nTITLE: Provider with Builder Parameter\nDESCRIPTION: Simplified approach using Provider's builder parameter to access the provider's value directly.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/packages/provider/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nProvider(\n  create: (_) => Something(),\n  builder: (context, child) {\n    final name = context.select((Something s) => s.name);\n    return Text(name);\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: ProxyProvider Implementation\nDESCRIPTION: Example of using ProxyProvider to combine values from multiple providers\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/pt_br/README.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  return MultiProvider(\n    providers: [\n      ChangeNotifierProvider(create: (_) => Counter()),\n      ProxyProvider<Counter, Translations>(\n        update: (_, counter, __) => Translations(counter.value),\n      ),\n    ],\n    child: Foo(),\n  );\n}\n\nclass Translations {\n  const Translations(this._value);\n\n  final int _value;\n\n  String get title => 'You clicked $_value times';\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Lazy Initialization in Provider for Dart\nDESCRIPTION: Shows how to disable the default lazy initialization behavior of Provider using the 'lazy' parameter, allowing for pre-computation of values.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/bn_BD/README.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nMyProvider(\n  create: (_) => Something(),\n  lazy: false,\n)\n```\n\n----------------------------------------\n\nTITLE: Using ProxyProvider for Variable-Dependent Objects in Flutter\nDESCRIPTION: Example showing how to use ProxyProvider0 to properly handle passing variables that change over time to created objects. This approach ensures the object updates when the variable changes.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/ko-KR/README.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nint count;\n\nProxyProvider0(\n  update: (_, __) => MyModel(count),\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling Lazy Initialization in Provider in Dart\nDESCRIPTION: Demonstrates how to disable lazy initialization in Provider when pre-computation of logic is desired.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/it_IT/README.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nMyProvider(\n  create: (_) => Something(),\n  lazy: false,\n)\n```\n\n----------------------------------------\n\nTITLE: Using ProxyProvider for Dynamic Object Creation in Dart\nDESCRIPTION: Demonstrates how to use ProxyProvider to create objects that depend on variables that may change over time, ensuring the object updates when the variables change.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/bn_BD/README.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nint count;\n\nProxyProvider0(\n  update: (_, __) => MyModel(count),\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: Replacing ValueListenableProvider with Provider and ValueListenableBuilder in Dart\nDESCRIPTION: Demonstrates how to replace the removed ValueListenableProvider with a combination of Provider and ValueListenableBuilder.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/packages/provider/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nValueListenableBuilder<int>(\n  valueListenable: myValueListenable,\n  builder: (context, value, _) {\n    return Provider<int>.value(\n      value: value,\n      child: MyApp(),\n    );\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Reusing existing object instances with ChangeNotifierProvider.value in Dart\nDESCRIPTION: Demonstrates the correct way to reuse an existing object instance with the .value constructor of ChangeNotifierProvider.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/tr_TR/README.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nMyChangeNotifier variable;\n\nChangeNotifierProvider.value(\n  value: variable,\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: Optional Provider Dependency in Dart\nDESCRIPTION: Demonstrates how to optionally depend on a provider by making the generic type nullable, allowing for cases where the provider might not exist.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/it_IT/README.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\ncontext.watch<Model?>()\n```\n\n----------------------------------------\n\nTITLE: Overriding toString Method in Dart\nDESCRIPTION: Shows how to override the toString method to provide custom string representation for objects when DiagnosticableTreeMixin cannot be used.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/zh-CN/README.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass MyClass with DiagnosticableTreeMixin {\n  MyClass({this.a, this.b});\n\n  final int a;\n  final String b;\n\n  @override\n  String toString() {\n    return '$runtimeType(a: $a, b: $b)';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding toString() for Improved Debugging in Flutter\nDESCRIPTION: This snippet demonstrates how to override the toString() method to provide more meaningful debug information when DiagnosticableTreeMixin cannot be used.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/es_MX/README.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nclass MyClass with DiagnosticableTreeMixin {\n  MyClass({this.a, this.b});\n\n  final int a;\n  final String b;\n\n  @override\n  String toString() {\n    return '$runtimeType(a: $a, b: $b)';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Provider with Builder Pattern (Traditional)\nDESCRIPTION: Traditional approach using Provider with a Builder widget to access the provider's value.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/packages/provider/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nProvider(\n  create: (_) => Something(),\n  child: Builder(\n    builder: (context) {\n      final name = context.select((Something s) => s.name);\n      return Text(name);\n    },\n  ),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing ReassembleHandler for Hot Reload in Flutter\nDESCRIPTION: This code shows how to implement the ReassembleHandler interface to handle hot reloads in a provider object.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/es_MX/README.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nclass Example extends ChangeNotifier implements ReassembleHandler {\n  @override\n  void reassemble() {\n    print('Did hot-reload');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating FutureProvider from 4.x.x to 5.0.0-nullsafety in Dart\nDESCRIPTION: Shows how to migrate FutureProvider code from version 4.x.x to 5.0.0-nullsafety, which requires initialData and null-safe types.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/tr_TR/README.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFutureProvider<int>(\n  create: (context) => Future.value(42),\n  child: MyApp(),\n)\n\nWidget build(BuildContext context) {\n  final value = context.watch<int>();\n  return Text('$value');\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nFutureProvider<int?>(\n  initialValue: null,\n  create: (context) => Future.value(42),\n  child: MyApp(),\n)\n\nWidget build(BuildContext context) {\n  // ? ile işaretlendiğine emin ol watch<int?>\n  final value = context.watch<int?>();\n  return Text('$value');\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Provider.value for Object Creation in Flutter\nDESCRIPTION: Example demonstrating what not to do when creating new objects with Provider. Using Provider.value constructor for new objects can lead to unwanted side effects and improper lifecycle management.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/ko-KR/README.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nChangeNotifierProvider.value(\n  value: MyModel(),\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing ProxyProvider with Counter and Translations in Flutter\nDESCRIPTION: This snippet demonstrates how to use ProxyProvider to combine multiple values from other providers into a new object. It creates a translation based on a counter value from another provider.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/es_MX/README.md#2025-04-21_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nWidget build(BuildContext context) {\n  return MultiProvider(\n    providers: [\n      ChangeNotifierProvider(create: (_) => Counter()),\n      ProxyProvider<Counter, Translations>(\n        update: (_, counter, __) => Translations(counter.value),\n      ),\n    ],\n    child: Foo(),\n  );\n}\n\nclass Translations {\n  const Translations(this._value);\n\n  final int _value;\n\n  String get title => 'You clicked $_value times';\n}\n```\n\n----------------------------------------\n\nTITLE: Basic FutureProvider Implementation\nDESCRIPTION: Example showing migration from Provider 4.x to 5.0.0-nullsafety with FutureProvider\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/pt_br/README.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFutureProvider<int?>(\n  initialValue: null,\n  create: (context) => Future.value(42),\n  child: MyApp(),\n)\n\nWidget build(BuildContext context) {\n  final value = context.watch<int?>();\n  return Text('$value');\n}\n```\n\n----------------------------------------\n\nTITLE: Reusing Existing Object with ChangeNotifierProvider.value\nDESCRIPTION: Example showing the correct way to expose an existing ChangeNotifier instance using the .value constructor, which prevents the dispose method from being called prematurely.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/es_MX/README.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nMyChangeNotifier variable;\n\nChangeNotifierProvider.value(\n  value: variable,\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Sponsors Image in Markdown\nDESCRIPTION: This snippet shows how to display a sponsors image in a centered alignment using Markdown syntax. It includes a link to the raw image file on GitHub.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/ko-KR/README.md#2025-04-21_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n<p align=\"center\">\n  <a href=\"https://raw.githubusercontent.com/rrousselGit/freezed/master/sponsorkit/sponsors.svg\">\n    <img src='https://raw.githubusercontent.com/rrousselGit/freezed/master/sponsorkit/sponsors.svg'/>\n  </a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Migrating FutureProvider from Provider 4.x to 5.0.0-nullsafety\nDESCRIPTION: Example showing the migration process for FutureProvider to support null safety. This includes adding initialValue and properly handling nullable types in watch method.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/ko-KR/README.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nFutureProvider<int?>(\n  initialValue: null,\n  create: (context) => Future.value(42),\n  child: MyApp(),\n)\n\nWidget build(BuildContext context) {\n  // be sure to specify the ? in watch<int?>()\n  final value = context.watch<int?>();\n  return Text('$value');\n}\n```\n\n----------------------------------------\n\nTITLE: Running Provider DevTool Locally with Flutter and Chrome\nDESCRIPTION: This command runs the provider's devtool in Chrome using Flutter. It utilizes a simulated environment for development purposes.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/packages/provider_devtools_extension/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflutter run -d chrome --dart-define=use_simulated_environment=true\n```\n\n----------------------------------------\n\nTITLE: buildメソッド内でのプロバイダー値の監視と更新\nDESCRIPTION: initStateではなくbuildメソッド内でプロバイダーの値を監視し、更新を処理します。これにより、ウィジェットのライフサイクル全体を通じて値の変更を適切に追跡できます。\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/ja_JP/README.md#2025-04-21_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nValue value;\n\nWidget build(BuildContext context) {\n  final value = context.watch<Foo>().value;\n  if (value != this.value) {\n    this.value = value;\n    print(value);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Reusing ChangeNotifier Objects with Provider in Flutter\nDESCRIPTION: Example showing incorrect usage of Provider's default constructor with existing ChangeNotifier objects. This approach can lead to premature disposal of the object.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/ko-KR/README.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nMyChangeNotifier variable;\n\nChangeNotifierProvider(\n  create: (_) => variable,\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Reuse of Existing ChangeNotifier with Provider in Dart\nDESCRIPTION: Demonstrates an incorrect way of reusing an existing ChangeNotifier instance. This approach should be avoided as it can lead to unexpected behavior.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/ja_JP/README.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nMyChangeNotifier variable;\n\nChangeNotifierProvider(\n  create: (_) => variable,\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: Incorrect way of reusing existing ChangeNotifier instances in Dart\nDESCRIPTION: Shows the incorrect approach of reusing existing ChangeNotifier instances with the default constructor, which can cause disposal issues.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/tr_TR/README.md#2025-04-21_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nMyChangeNotifier variable;\n\nChangeNotifierProvider(\n  create: (_) => variable,\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Reuse of Existing ChangeNotifier in Dart\nDESCRIPTION: Demonstrates an incorrect way of reusing an existing ChangeNotifier using the default constructor, which can lead to unexpected behavior.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/it_IT/README.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nMyChangeNotifier variable;\n\nChangeNotifierProvider(\n  create: (_) => variable,\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: Incorrect use of variables that change over time in Provider in Dart\nDESCRIPTION: Shows an incorrect implementation where the object depends on variables that can change over time but won't update when they do.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/tr_TR/README.md#2025-04-21_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nint count;\n\nProvider(\n  create: (_) => MyModel(count),\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Reuse of Existing ChangeNotifier\nDESCRIPTION: Example showing the incorrect way of exposing an existing ChangeNotifier instance using the default constructor, which can lead to unintended dispose calls.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/es_MX/README.md#2025-04-21_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nMyChangeNotifier variable;\n\nChangeNotifierProvider(\n  create: (_) => variable,\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: Avoiding Variable-Based Object Creation with Provider in Flutter\nDESCRIPTION: Example showing incorrect usage of Provider with variables that may change over time. This approach is problematic because the created object won't update when the variable changes.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/ko-KR/README.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nint count;\n\nProvider(\n  create: (_) => MyModel(count),\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Provider Implementation with Changing Variables\nDESCRIPTION: Example showing an anti-pattern where a Provider creates an object using variables that can change over time, resulting in the object not being updated when the variable changes.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/es_MX/README.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nint count;\n\nProvider(\n  create: (_) => MyModel(count),\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Provider.value for New Objects in Dart\nDESCRIPTION: Shows an incorrect way of exposing a new object instance using Provider.value. This approach should be avoided as it can lead to unexpected side effects.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/ja_JP/README.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nChangeNotifierProvider.value(\n  value: MyModel(),\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Provider.value for Object Creation\nDESCRIPTION: Example of incorrect usage where Provider.value constructor is used to create a new object, which can lead to unwanted side effects and potential memory leaks.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/es_MX/README.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nChangeNotifierProvider.value(\n  value: MyModel(),\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Provider.value for Object Creation in Dart\nDESCRIPTION: Shows an incorrect way of using Provider.value to create and expose an object. This approach is not recommended as it can lead to unintended side effects.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/it_IT/README.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nChangeNotifierProvider.value(\n  value: MyModel(),\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Object Creation with Changing Variables in Dart\nDESCRIPTION: Demonstrates an incorrect way of creating objects from variables that might change. This approach doesn't update the object when the variable changes.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/ja_JP/README.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nint count;\n\nProvider(\n  create: (_) => MyModel(count),\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Provider.value for Object Creation in Dart\nDESCRIPTION: Shows an example of incorrect usage of Provider.value constructor for creating new objects, which can lead to unintended side effects.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/bn_BD/README.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nChangeNotifierProvider.value(\n  value: MyModel(),\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Object Creation with Changing Variables in Dart\nDESCRIPTION: Demonstrates an incorrect way of creating an object with variables that can change over time. This approach prevents the object from updating when the value changes.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/it_IT/README.md#2025-04-21_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nint count;\n\nProvider(\n  create: (_) => MyModel(count),\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: Incorrect way of creating objects with Provider.value in Dart\nDESCRIPTION: Shows the incorrect approach of creating objects with Provider.value constructor, which can lead to unwanted side effects.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/tr_TR/README.md#2025-04-21_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nChangeNotifierProvider.value(\n  value: MyModel(),\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: Consuming Interface and Providing Implementation with Provider\nDESCRIPTION: Shows how to consume an interface and provide a concrete implementation using Provider in Flutter.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/zh-CN/README.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nabstract class ProviderInterface with ChangeNotifier {\n  ...\n}\n\nclass ProviderImplementation with ChangeNotifier implements ProviderInterface {\n  ...\n}\n\nclass Foo extends StatelessWidget {\n  @override\n  build(context) {\n    final provider = Provider.of<ProviderInterface>(context);\n    return ...\n  }\n}\n\nChangeNotifierProvider<ProviderInterface>(\n  create: (_) => ProviderImplementation(),\n  child: Foo(),\n)\n```\n\n----------------------------------------\n\nTITLE: toStringメソッドのオーバーライドによるデバッグ情報の改善\nDESCRIPTION: DiagnosticableTreeMixinを使用できない場合、toStringメソッドをオーバーライドしてクラスインスタンスの文字列表現をカスタマイズします。これは簡単な方法ですが、オブジェクトの詳細を展開または折りたたむ機能は失われます。\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/ja_JP/README.md#2025-04-21_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nclass MyClass with DiagnosticableTreeMixin {\n  MyClass({this.a, this.b});\n\n  final int a;\n  final String b;\n\n  @override\n  String toString() {\n    return '$runtimeType(a: $a, b: $b)';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ReassembleHandlerを実装したホットリロード対応クラス\nDESCRIPTION: ReassembleHandlerインターフェースを実装することで、ホットリロード時の動作をカスタマイズできます。これはデバッグ時に特に有用です。\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/ja_JP/README.md#2025-04-21_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nclass Example extends ChangeNotifier implements ReassembleHandler {\n  @override\n  void reassemble() {\n    print('Did hot-reload');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of ChangeNotifierProvider.value in Dart\nDESCRIPTION: Shows the correct way to use ChangeNotifierProvider.value to provide an existing ChangeNotifier instance.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/resources/translations/it_IT/README.md#2025-04-21_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nMyChangeNotifier variable;\n\nChangeNotifierProvider.value(\n  value: variable,\n  child: ...\n)\n```\n\n----------------------------------------\n\nTITLE: Migrating FutureProvider with Null Safety\nDESCRIPTION: Shows how to migrate a FutureProvider implementation from pre-null safety to null safety version, demonstrating the required changes for initialValue and type declarations.\nSOURCE: https://github.com/rrousselgit/provider/blob/master/packages/provider/README.md#2025-04-21_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFutureProvider<int?>(\n  initialValue: null,\n  create: (context) => Future.value(42),\n  child: MyApp(),\n)\n\nWidget build(BuildContext context) {\n  // be sure to specify the ? in watch<int?>()\n  final value = context.watch<int?>();\n  return Text('$value');\n}\n```"
  }
]