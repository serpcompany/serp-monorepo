[
  {
    "owner": "paralleldrive",
    "repo": "cuid2",
    "content": "TITLE: Generating IDs with Cuid2 in JavaScript\nDESCRIPTION: Basic usage example showing how to import and use the createId function to generate unique IDs with Cuid2.\nSOURCE: https://github.com/paralleldrive/cuid2/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createId } from '@paralleldrive/cuid2';\n\nconst ids = [\n  createId(), // 'tz4a98xxat96iws9zmbrgj3a'\n  createId(), // 'pfh0haxfpzowht3oi213cqos'\n  createId(), // 'nc6bzmkmd014706rfda898to'\n];\n```\n\n----------------------------------------\n\nTITLE: Installing Cuid2 with npm or yarn\nDESCRIPTION: Installation commands for adding the Cuid2 library to your JavaScript project using either npm or yarn package managers.\nSOURCE: https://github.com/paralleldrive/cuid2/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @paralleldrive/cuid2\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @paralleldrive/cuid2\n```\n\n----------------------------------------\n\nTITLE: Configuring Cuid2 with Custom Parameters\nDESCRIPTION: Shows how to configure Cuid2 using the init function with custom parameters including random function, ID length, and host fingerprint. This allows for customization of the ID generation process.\nSOURCE: https://github.com/paralleldrive/cuid2/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { init } from '@paralleldrive/cuid2';\n\n// The init function returns a custom createId function with the specified\n// configuration. All configuration properties are optional.\nconst createId = init({\n  // A custom random function with the same API as Math.random.\n  // You can use this to pass a cryptographically secure random function.\n  random: Math.random,\n  // the length of the id\n  length: 10,\n  // A custom fingerprint for the host environment. This is used to help\n  // prevent collisions when generating ids in a distributed system.\n  fingerprint: 'a-custom-host-fingerprint',\n});\n\nconsole.log(\n  createId(), // wjfazn7qnd\n  createId(), // cerhuy9499\n  createId(), // itp2u4ozr4\n);\n```\n\n----------------------------------------\n\nTITLE: Validating Cuid2 IDs in JavaScript\nDESCRIPTION: Demonstrates how to use the isCuid function to validate whether a string is a valid Cuid2 ID. This is useful for input validation and data integrity checks.\nSOURCE: https://github.com/paralleldrive/cuid2/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createId, isCuid } from '@paralleldrive/cuid2';\n\n\nconsole.log(\n  isCuid(createId()), // true\n  isCuid('not a cuid'), // false\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Cuid2 with Custom Length in JavaScript\nDESCRIPTION: This snippet demonstrates how to import and initialize Cuid2 with a custom length. It sets up a Cuid2 generator with a length of 10 characters, which provides a balance between uniqueness and brevity.\nSOURCE: https://github.com/paralleldrive/cuid2/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { init } from '@paralleldrive/cuid2';\nconst length = 10; // 50% odds of collision after ~51,386,368 ids\nconst cuid = init({ length });\nconsole.log(cuid()); // nw8zzfaa4v\n```\n\n----------------------------------------\n\nTITLE: Installing Text Encoding Polyfill for React Native\nDESCRIPTION: Shows how to install and import the fast-text-encoding polyfill to address TextEncoding feature missing in some React Native environments before importing CUID2.\nSOURCE: https://github.com/paralleldrive/cuid2/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save fast-text-encoding\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"fast-text-encoding\";\n```\n\n----------------------------------------\n\nTITLE: Alternative Text Encoding Polyfill for React Native\nDESCRIPTION: Shows how to install and import the text-encoding-polyfill as an alternative solution for TextEncoding features missing in some React Native environments.\nSOURCE: https://github.com/paralleldrive/cuid2/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save text-encoding-polyfill\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"text-encoding-polyfill\";\n```\n\n----------------------------------------\n\nTITLE: Installing Jest Environment for JSDOM Compatibility\nDESCRIPTION: Shows how to install the jest-environment-jsdom package to ensure compatibility with CUID2 when using Jest's JSDOM environment.\nSOURCE: https://github.com/paralleldrive/cuid2/blob/main/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm i jest-environment-jsdom@27\n```\n\n----------------------------------------\n\nTITLE: Creating Custom JSDOM Environment for Jest\nDESCRIPTION: Creates a custom JSDOM environment file that properly overrides the Uint8Array implementation to fix compatibility issues between TextEncoder and Uint8Array in Jest tests.\nSOURCE: https://github.com/paralleldrive/cuid2/blob/main/README.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst JSDOMEnvironmentBase = require('jest-environment-jsdom');\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nclass JSDOMEnvironment extends JSDOMEnvironmentBase {\n    constructor(...args) {\n        const { global } = super(...args);\n\n        global.Uint8Array = Uint8Array;\n    }\n}\n\nexports.default = JSDOMEnvironment;\nexports.TestEnvironment = JSDOMEnvironment;\n```\n\n----------------------------------------\n\nTITLE: Updating Jest Configuration for Custom Environment\nDESCRIPTION: Shows how to modify package.json scripts to use the custom JSDOM environment when running Jest tests for CUID2 compatibility.\nSOURCE: https://github.com/paralleldrive/cuid2/blob/main/README.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    // ...\n    \"scripts\": {\n        // ...\n        \"test\": \"react-scripts test --env=./jsdom-env.js\",\n        // ...\n    },\n}\n```"
  }
]