[
  {
    "owner": "gunpal5",
    "repo": "google_generativeai",
    "content": "TITLE: Complete Minimal API Example in C#\nDESCRIPTION: This C# code presents a complete example of using the `Google_GenerativeAI.Web` library in an ASP.NET Core Minimal API. It configures the service with an API key (read from environment variables) and defines two endpoints: `/generate` for generating text and `/stream` for streaming text. The stream endpoint is particularly important to observe.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/src/GenerativeAI.Web/README.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nusing GenerativeAI;\nusing Google_GenerativeAI.Web;\nusing GenerativeAI.GoogleAuth;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// API Key Example (read from environment variables):\nbuilder.Services.AddGenerativeAI();\n\n// OR OAuth 2.0 Example (read access token however you obtain it):\n//builder.Services.AddGenerativeAI(options =>\n//{\n//  options.Credentials = new GoogleAICredentials(null, \"YOUR_ACCESS_TOKEN\", DateTime.UtcNow.AddHours(1));\n//});\n\n//OR Service Account\n//builder.Services.WithGoogleServiceAuthentication(\"path/to/your/service-account.json\");\n//builder.Services.AddGenerativeAI();\n\nvar app = builder.Build();\n\napp.MapGet(\"/generate\", async (IGenerativeAiService aiService, string prompt) =>\n{\n    var response = await aiService.GenerateContentAsync(prompt);\n    return response.Text();\n});\n\napp.MapGet(\"/stream\", async (IGenerativeAiService aiService, string prompt, HttpContext context) =>\n{\n    context.Response.ContentType = \"text/plain\";\n    await foreach (var chunk in aiService.GenerateContentStreamAsync(prompt))\n    {\n        await context.Response.WriteAsync(chunk.Text());\n        await context.Response.Body.FlushAsync();\n    }\n});\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Full VertexAI Usage Example in C#\nDESCRIPTION: This snippet combines the steps of initializing VertexAI, creating a GenerativeModel, generating content, and printing the response. It showcases the complete workflow for generating text using VertexAI. The code uses Google Cloud CLI's ADC to get the Access token.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar vertexAI = new VertexAI(); //usage Google Cloud CLI's ADC to get the Access token\nvar vertexModel = vertexAI.CreateGenerativeModel(\"models/gemini-1.5-flash\");\nvar vertexResponse = await vertexModel.GenerateContentAsync(\"Hello from Vertex AI!\");\nConsole.WriteLine(\"Vertex AI Response:\");\nConsole.WriteLine(vertexResponse.Text());\n```\n\n----------------------------------------\n\nTITLE: Create RAG Corpus and Query Gemini Model (C#)\nDESCRIPTION: This C# code snippet demonstrates how to initialize VertexAI, create a corpus for RAG, import data into the corpus, create a Gemini generative model configured to use the corpus, and generate content by querying the model.  It showcases the process of integrating a knowledge base with Gemini to provide more grounded responses.  The code assumes `GetTestVertexAIPlatform()` and `GcsSource` are defined elsewhere.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README.md#_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\n// Initialize VertexAI with your platform configuration.\nvar vertexAi = new VertexAI(GetTestVertexAIPlatform());\n\n// Create an instance of the RAG manager for corpus operations.\nvar ragManager = vertexAi.CreateRagManager();\n\n// Create a new corpus for your knowledge base.\n// Optional: Use overload methods to specify a vector database (Pinecone, Weaviate, etc.).\n// If no specific vector database is provided, a default one will be used.\nvar corpus = await ragManager.CreateCorpusAsync(\"My New Corpus\", \"My description\");\n\n// Import data into the corpus from a specified source.\n// Replace GcsSource with the appropriate source (Jira, Slack, SharePoint, etc.) and configure it.\nvar fileSource = new GcsSource() { /* Configure your GcsSource here */ };\nawait ragManager.ImportFilesAsync(corpus.Name, fileSource);\n\n// Create a Gemini generative model configured to use the created corpus for RAG.\n// The corpusIdForRag parameter links the model to your knowledge base.\nvar model = vertexAi.CreateGenerativeModel(VertexAIModels.Gemini.Gemini2Flash, corpusIdForRag: corpus.Name);\n\n// Generate content by querying the model.\n// The model will retrieve relevant information from the corpus to provide a grounded response.\nvar result = await model.GenerateContentAsync(\"query related to the corpus\");\n```\n\n----------------------------------------\n\nTITLE: Using IGenerativeAiService for Text Generation in C#\nDESCRIPTION: This C# code demonstrates how to use the `IGenerativeAiService` to generate text. It injects the service into a controller via constructor injection and then calls the `GenerateContentAsync` method to generate text based on a given prompt. The generated text is then returned in an Ok result.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/src/GenerativeAI.Web/README.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nusing GenerativeAI; // From the main Google_GenerativeAI SDK\nusing Microsoft.AspNetCore.Mvc;\nusing System.Threading.Tasks;\n\npublic class MyController : Controller\n{\n    private readonly IGenerativeAiService _aiService;\n\n    public MyController(IGenerativeAiService aiService)\n    {\n        _aiService = aiService;\n    }\n\n    [HttpGet]\n    public async Task<IActionResult> GenerateText(string prompt)\n    {\n        var response = await _aiService.GenerateContentAsync(prompt);\n        return Ok(response.Text()); // Access the generated text.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting a Chat Session with VertexAI in C#\nDESCRIPTION: This example shows how to initiate a chat session using VertexAI's GenerativeModel. It initializes a VertexAI instance, creates a GenerativeModel, starts a chat session, sends a message, and prints the response. This demonstrates how to implement a conversational interface with VertexAI.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n// Example: Starting a chat session with a Vertex AI GenerativeModel\n\n// 1) Initialize your AI instance (VertexAI) using one of the available authentication methods\nvar vertexAI = new VertexAI(); \n\n// 2) Create a GenerativeModel using \"gemini-1.5-flash\"\nvar generativeModel = vertexAI.CreateGenerativeModel(\"models/gemini-1.5-flash\");\n\n// 3) Start a chat\nvar chatSession = generativeModel.StartChat();\n\n// 4) Send a chat message and read the response\nvar response = await chatSession.GenerateContentAsync(\"Hello from Vertex AI Chat using Gemini 1.5 Flash!\");\nConsole.WriteLine(response.Text());\n```\n\n----------------------------------------\n\nTITLE: Registering GenerativeAIChatClient in .NET\nDESCRIPTION: This C# code snippet demonstrates how to register the GenerativeAIChatClient in the .NET service collection using dependency injection. It retrieves the Google API key from environment variables and configures the IChatClient to use the GenerativeAIChatClient implementation. Ensure the API key is stored securely and not hardcoded.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/src/GenerativeAI.Microsoft/README.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Google_GenerativeAI.Microsoft;\nusing Microsoft.Extensions.AI;\nusing Microsoft.Extensions.DependencyInjection;\n\n// ...\n\npublic void ConfigureServices(IServiceCollection services)\n{\n    // Get API key from environment variables (recommended).\n    string apiKey = Environment.GetEnvironmentVariable(\"GOOGLE_API_KEY\");\n\n    // Basic configuration:\n    services.AddScoped<IChatClient>(provider => new GenerativeAIChatClient(apiKey));    \n}\n```\n\n----------------------------------------\n\nTITLE: Defining Function Tools using Interfaces\nDESCRIPTION: This C# code demonstrates how to define function tools using interfaces and the `[GenerateJsonSchema]` attribute. It defines an interface `IWeatherFunctions` with a `GetCurrentWeather` method, then implements the interface with a `WeatherService` class. It shows how to register the `WeatherService` as a function tool in the `GenerativeModel`.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/src/GenerativeAI.Tools/README.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n[GenerateJsonSchema(GoogleFunctionTool = true)]\npublic interface IWeatherFunctions\n{\n    [Description(\"Get current weather in a location\")]\n    Weather GetCurrentWeather(\n        [Description(\"City and state, e.g. San Francisco, CA\")]\n        string location, \n        Unit unit = Unit.Celsius);\n    // ...   \n}\n\npublic class WeatherService : IWeatherFunctions\n{\n    public Weather GetCurrentWeather(string location, Unit unit = Unit.Celsius)\n    {\n        return new Weather\n        {\n            Location = location,\n            Temperature = 20,\n            Unit = unit\n        };\n    }\n}\n\n// Register after code generation\nvar weatherService = new WeatherService();\nvar googleTool = weatherService.AsGoogleFunctionTool();\nmodel.AddFunctionTool(googleTool);\n```\n\n----------------------------------------\n\nTITLE: Function Calling with Gemini Pro - C#\nDESCRIPTION: This code demonstrates how to use function calling with the Gemini Pro model. It defines a function, implements a service, adds the service functions to the GenerativeModel, and then calls the GenerateContentAsync method to execute the function based on the input.  The API Key is retrieved from the environment variables.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README_old.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing GenerativeAI;\n\npublic enum Unit\n{\n    Celsius,\n    Fahrenheit,\n    Imperial\n}\n\npublic class Weather\n{\n    public string Location { get; set; } = string.Empty;\n    public double Temperature { get; set; }\n    public Unit Unit { get; set; }\n    public string Description { get; set; } = string.Empty;\n}\n\n[GenerativeAIFunctions]\npublic interface IWeatherFunctions\n{\n    [Description(\"Get the current weather in a given location\")]\n    public Task<Weather> GetCurrentWeatherAsync(\n        [Description(\"The city and state, e.g. San Francisco, CA\")] string location,\n        Unit unit = Unit.Celsius,\n        CancellationToken cancellationToken = default);\n}\n\npublic class WeatherService : IWeatherFunctions\n{\n    public Task<Weather> GetCurrentWeatherAsync(string location, Unit unit = Unit.Celsius, CancellationToken cancellationToken = default)\n    {\n        return Task.FromResult(new Weather\n        {\n            Location = location,\n            Temperature = 22.0,\n            Unit = unit,\n            Description = \"Sunny\",\n        });\n    }\n}\n\n WeatherService service = new WeatherService();\n \n var apiKey = Environment.GetEnvironmentVariable(\"Gemini_API_Key\", EnvironmentVariableTarget.User);\n\n var model = new GenerativeModel(apiKey);\n\n // Add Global Functions\n model.AddGlobalFunctions(service.AsGoogleFunctions(), service.AsGoogleCalls())\n\n var result = await model.GenerateContentAsync(\"How is the weather in San Francisco today?\");\n \n Console.WriteLine(result);\n\n```\n\n----------------------------------------\n\nTITLE: Starting a Chat Session with GoogleAI in C#\nDESCRIPTION: This code demonstrates how to start a chat session using GoogleAI's GenerativeModel. It initializes a GoogleAI instance with an API key, creates a GenerativeModel, starts a chat session, sends a message, and prints the response. The code showcases a multi-turn conversational flow.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n// Example: Starting a chat session with a Google AI GenerativeModel\n\n// 1) Initialize your AI instance (GoogleAI) with credentials or environment variables\nvar googleAI = new GoogleAI(\"YOUR_GOOGLE_API_KEY\");\n\n// 2) Create a GenerativeModel using the model name \"gemini-1.5-flash\"\nvar generativeModel = googleAI.CreateGenerativeModel(\"models/gemini-1.5-flash\");\n\n// 3) Start a chat session from the GenerativeModel\nvar chatSession = generativeModel.StartChat();\n\n// 4) Send and receive messages\nvar firstResponse = await chatSession.GenerateContentAsync(\"Welcome to the Gemini 1.5 Flash chat!\");\nConsole.WriteLine(\"First response: \" + firstResponse.Text());\n\n// Continue the conversation\nvar secondResponse = await chatSession.GenerateContentAsync(\"How can you help me with my AI development?\");\nConsole.WriteLine(\"Second response: \" + secondResponse.Text());\n```\n\n----------------------------------------\n\nTITLE: Automatic JSON Handling with ToObject in C#\nDESCRIPTION: This snippet demonstrates how to handle JSON data using GenerateContentAsync and then deserializing the response using the ToObject method.  The generated content is parsed as JSON into a SampleJsonClass object.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README.md#_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nvar response = await model.GenerateContentAsync<SampleJsonClass>(request);\nvar myObject = response.ToObject<SampleJsonClass>();\n```\n\n----------------------------------------\n\nTITLE: Binding appsettings.json to Generative AI Configuration in C#\nDESCRIPTION: These C# code snippets demonstrate how to bind the configuration from `appsettings.json` to the Generative AI service. It uses the `AddGenerativeAI` extension method and either passes in the `IConfigurationSection` directly or a configuration path string. This allows for strongly-typed configuration via the options pattern.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/src/GenerativeAI.Web/README.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n// In Program.cs or Startup.cs\nbuilder.Services.AddGenerativeAI(builder.Configuration.GetSection(\"GenerativeAI\"));\n\n// OR, using a configuration path:\nbuilder.Services.AddGenerativeAI(\"GenerativeAI\");\n```\n\n----------------------------------------\n\nTITLE: Automatic JSON Handling with GenerateObjectAsync in C#\nDESCRIPTION: This snippet demonstrates how to automatically handle JSON data using the GenerateObjectAsync method. It directly deserializes the JSON response into a specified object type (SampleJsonClass).\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README.md#_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nvar myObject = await model.GenerateObjectAsync<SampleJsonClass>(request);\n```\n\n----------------------------------------\n\nTITLE: Image Captioning and Visual QA with ImageTextModel in C#\nDESCRIPTION: This code shows how to use the `ImageTextModel` to generate captions for images and perform visual question answering tasks using the Google_GenerativeAI SDK.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README.md#_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\n// 1. Create a Vertex AI client (example shown here).\nvar vertexAi = new VertexAI(projecId, region);\n\n// 2. Instantiate the ImageTextModel.\nvar imageTextModel = vertexAi.CreateImageTextModel();\n\n// 3. Generate captions or perform visual QA.\nvar captionResult = await imageTextModel.GenerateImageCaptionFromLocalFileAsync(\"path/to/local/image.jpg\");\nvar vqaResult = await imageTextModel.VisualQuestionAnsweringFromLocalFileAsync(\"What is in the picture?\", \"path/to/local/image.jpg\");\n\n// Results now contain the model's captions or answers.\n```\n\n----------------------------------------\n\nTITLE: Generating Content with a Request and Files in C#\nDESCRIPTION: This snippet demonstrates how to generate content using a GenerateContentRequest object. It adds a text prompt, attaches a local file, and attaches a remote file with its MIME type. This approach provides granular control over the request parameters.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README.md#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\n// Create a request with a text prompt\nvar request = new GenerateContentRequest();\nrequest.AddText(\"Describe what's in this document\");\n\n// Attach a local file\nrequest.AddInlineFile(@\"C:\\\\files\\\\example.png\");\n\n// Attach a remote file with its MIME type\nrequest.AddRemoteFile(\"https://example.com/path/to/sample.pdf\", \"application/pdf\");\n\n// Generate the content with attached files\nvar response = await geminiModel.GenerateContentAsync(request);\nConsole.WriteLine(response.Text());\n```\n\n----------------------------------------\n\nTITLE: FunctionToolAttribute-based Function Calling in C#\nDESCRIPTION: This code demonstrates how to use the `FunctionToolAttribute` to automatically generate a function tool from a method. This is useful for defining a small set of functions as static methods that Gemini can call.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README.md#_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\n[FunctionTool(GoogleFunctionTool = true)]\n[Description(\"Get book page content\")]\npublic static Task<string> GetBookPageContentAsync(string bookName, int pageNumber)\n{\n    return Task.FromResult($\"Content for {bookName} on page {pageNumber}\");\n}\n\n// Create the model and add the function as a tool\nvar model = new GenerativeModel(\"YOUR_API_KEY\", GoogleAIModels.Gemini2Flash);\nmodel.AddFunctionTool(new Tools(new[] { GetBookPageContentAsync }));\n```\n\n----------------------------------------\n\nTITLE: Creating MultiModalLiveClient using GenerativeModel Extension in C#\nDESCRIPTION: This C# code demonstrates an alternative way to create a `MultiModalLiveClient` instance, using an extension method on a `GenerativeModel` object. It initializes a `GoogleAi` instance, creates a `GenerativeModel`, and then calls the `CreateMultiModalLiveClient` extension method to create the client. This approach simplifies the client creation process when working with a `GenerativeModel` instance. The GenerationConfig specifies both text and audio modalities.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/src/GenerativeAI.Live/README.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing GenerativeAI; // For GenerativeModel\nusing GenerativeAI.Live;\nusing GenerativeAI.Types; // For GenerationConfig, SafetySetting, etc.\n//... other necessary using statements\n\npublic async Task RunGeminiLiveAsync()\n{\n    // 1. Initialize GoogleAi\n    var googleAi = new GoogleAi(apiKey);\n\n    // 2. Initialize GenerativeModel\n    var generativeModel = googleAi.CreateGenerativeModel('gemini-1.5-flash-exp')\n\n    // 2. Create the MultiModalLiveClient using the extension method\n    var client = generativeModel.CreateMultiModalLiveClient(\n        new GenerationConfig { ResponseModalities = { Modality.TEXT, Modality.AUDIO } }, // Generation Config\n        null, // Safety Settings (Optional)\n        \"You are a helpful assistant.\"); // System Instruction (Optional) \n\n    //... (rest of the code remains the same)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Generative AI via Environment Variables in C#\nDESCRIPTION: This C# code shows how to configure the Generative AI service to read configuration from environment variables.  It relies on the `AddGenerativeAI` extension method, which automatically picks up values from environment variables like `GOOGLE_API_KEY`, `GOOGLE_PROJECT_ID`, `GOOGLE_REGION`, and `GOOGLE_AI_MODEL`.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/src/GenerativeAI.Web/README.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n// In Program.cs or Startup.cs\nbuilder.Services.AddGenerativeAI(); // Reads from environment variables.\n```\n\n----------------------------------------\n\nTITLE: Streaming Content with GenerativeAI in C#\nDESCRIPTION: This snippet demonstrates how to stream text responses using the StreamContentAsync method. It initializes a GenerativeModel, calls StreamContentAsync with a prompt, and iterates over the resulting asynchronous enumerable to process each chunk of the response as it arrives. This is useful for long-running generation tasks.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nusing GenerativeAI;\n\n// ... (Assume model is already initialized) ...\n\nvar prompt = \"Write a long story about a cat.\";\nawait foreach (var chunk in model.StreamContentAsync(prompt))\n{\n    Console.Write(chunk.Text); // Print each chunk as it arrives\n}\nConsole.WriteLine(); // Newline after the complete response\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Service Account (JSON)\nDESCRIPTION: This C# snippet demonstrates how to authenticate using a service account JSON key file with the Google Generative AI SDK. It initializes a GoogleServiceAccountAuthenticator with the file path and then uses it to create a VertexAIModel instance.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/src/GenerativeAI.Auth/README.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n// Assuming 'jsonFilePath' is the path to your service account JSON key file.\nvar authenticator = new GoogleServiceAccountAuthenticator(jsonFilePath);\nvar vertexAi = new VertexAIModel(authenticator: authenticator);\n```\n\n----------------------------------------\n\nTITLE: Using the Multimodal Live API in C#\nDESCRIPTION: This code snippet demonstrates how to use the `MultiModalLiveClient` to connect to the Google Multimodal Live API, send text and audio, and handle events for real-time conversations with Gemini models.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README.md#_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\nusing GenerativeAI.Live;\n\npublic async Task RunLiveConversationAsync()\n{\n    var client = new MultiModalLiveClient(\n        platformAdapter: new GoogleAIPlatformAdapter(), \n        modelName: \"gemini-1.5-flash-exp\", \n        generationConfig: new GenerationConfig { ResponseModalities = { Modality.TEXT, Modality.AUDIO } }, \n        safetySettings: null, \n        systemInstruction: \"You are a helpful assistant.\"\n    );\n\n    client.Connected += (s, e) => Console.WriteLine(\"Connected!\");\n    client.TextChunkReceived += (s, e) => Console.WriteLine($\"Text chunk: {e.TextChunk}\");\n    client.AudioChunkReceived += (s, e) => Console.WriteLine($\"Audio received: {e.Buffer.Length} bytes\");\n    \n    await client.ConnectAsync();\n\n    await client.SentTextAsync(\"Hello, Gemini! What's the weather like?\");\n    await client.SendAudioAsync(audioData: new byte[] { /* audio bytes */ }, audioContentType: \"audio/pcm; rate=16000\");\n\n    Console.ReadKey();\n    await client.DisconnectAsync();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MultiModalLiveClient using Constructor in C#\nDESCRIPTION: This C# code demonstrates how to create a `MultiModalLiveClient` instance directly using its constructor. It initializes the client with a platform adapter, model name, generation configuration, safety settings, and system instructions. It also sets up event handlers for connection status, message reception, audio chunks, and errors, then sends text and audio input. Finally, it disconnects the client.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/src/GenerativeAI.Live/README.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing GenerativeAI.Live;\nusing GenerativeAI.Types; // For GenerationConfig, SafetySetting, etc.\n//... other necessary using statements\n\n// Example usage:\npublic async Task RunGeminiLiveAsync()\n{\n    // 1. Initialize Platform Adapter\n    IPlatformAdapter platformAdapter = new GoogleAIPlatformAdapter(); // or VertextPlatformAdapter\n\n    // 2. Create the MultiModalLiveClient\n    var client = new MultiModalLiveClient(platformAdapter, \"gemini-1.5-flash-exp\", // Model Name\n        new GenerationConfig { ResponseModalities = { Modality.AUDIO } }, // Generation Config\n        null, // Safety Settings (Optional)\n        \"You are a helpful assistant.\"); // System Instruction (Optional) \n\n        // 3. Event Handlers\n        client.Connected += (sender, args) => Console.WriteLine(\"Connected!\");\n        client.Disconnected += (sender, args) => Console.WriteLine(\"Disconnected!\");\n        client.MessageReceived += (sender, args) =>\n        {\n            Console.WriteLine($\"Message Received: {args.Payload}\");\n        };\n        client.TextChunkReceived += (sender, args) =>\n        {\n            Console.Write(args.TextChunk);\n            if (args.TurnComplete) Console.WriteLine();\n        };\n        client.AudioChunkReceived += (sender, args) =>\n        {\n            Console.WriteLine($\"Audio Chunk Received: {args.Buffer.Length} bytes\");\n            // Process audio data\n        };\n        client.AudioReceiveCompleted += (sender, args) =>\n        {\n            Console.WriteLine($\"Audio Reception Completed: {args.Buffer.Length} bytes\");\n            // Process complete audio data\n        };\n        client.ErrorOccurred += (sender, args) =>\n        {\n            Console.WriteLine($\"Error: {args.Exception.Message}\");\n        };\n\n        // 4. Connect\n        await client.ConnectAsync();\n\n        // 5. Send text input\n        await client.SentTextAsync(\"Hello, Gemini!\");\n\n        // 6. Send Audio Input\n        byte[] audioData = { /* Your audio data */ };\n        await client.SendAudioAsync(audioData, \"audio/pcm; rate=16000\");\n\n        // 7. Keep the application running to receive responses\n        Console.ReadKey();\n\n        // 8. Disconnect\n        await client.DisconnectAsync();        \n\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Content with Gemini Pro - C#\nDESCRIPTION: This code snippet demonstrates how to generate content using the Gemini Pro model with your API Key. It initializes the GenerativeModel with an API key and then uses the GenerateContentAsync method to generate content based on the provided prompt.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README_old.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n var apiKey = 'Your API Key';\n\n var model = new GenerativeModel(apiKey);\n //or var model = new GeminiProModel(apiKey)\n\n var res = await model.GenerateContentAsync(\"How are you doing?\");\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Google ADC Authentication in C#\nDESCRIPTION: This C# code snippet configures Google Application Default Credentials (ADC) for authentication with Google Generative AI services. It uses the `AddGenerativeAI` extension method along with `WithGoogleAdcAuthentication` to enable ADC.  This is the recommended authentication method when running on Google Cloud.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/src/GenerativeAI.Web/README.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// In Program.cs or Startup.cs\nusing Google_GenerativeAI.Web;\n\nbuilder.Services.AddGenerativeAI().builder.Services.WithGoogleAdcAuthentication(); // Or any other AddGenerativeAI overload.\n```\n\n----------------------------------------\n\nTITLE: Configuring Generative AI using appsettings.json\nDESCRIPTION: This JSON configuration snippet shows how to specify the API key, project ID, region, and model in the `appsettings.json` file.  It uses a nested `GenerativeAI` section and then a `Credentials` section for the API key or OAuth access token.  The code below it shows how to bind that configuration.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/src/GenerativeAI.Web/README.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"GenerativeAI\": {\n    \"Credentials\": {\n      \"ApiKey\": \"YOUR_API_KEY\"\n      // OR, for OAuth 2.0:\n      // \"AccessToken\": \"YOUR_ACCESS_TOKEN\",\n      // \"Expiry\": \"2024-03-15T12:00:00Z\"  // Optional.  ISO 8601 format.\n    },\n    \"ProjectId\": \"YOUR_PROJECT_ID\", // Optional (for Vertex AI)\n    \"Region\": \"us-central1\",        // Optional (defaults to us-central1)\n    \"Model\": \"gemini-pro\",          // Optional (defaults to gemini-1.0-pro)\n    \"IsVertex\": false,              // Optional.  Set to true to force Vertex AI.\n    \"ExpressMode\": false            // Optional\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Content Request with Response Mime Type in C#\nDESCRIPTION: This snippet demonstrates creating a GenerateContentRequest, setting GenerationConfig, and explicitly setting ResponseMimeType to \"application/json\". Also the ResponseSchema is set to an instance of the class SampleJsonClass.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README.md#_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nvar request = new GenerateContentRequest();\nrequest.GenerationConfig = new GenerationConfig()\n        {\n            ResponseMimeType = \"application/json\",\n            ResponseSchema = new SampleJsonClass()\n        }\nrequest.AddText(\"Give me a really good response.\");\n```\n\n----------------------------------------\n\nTITLE: Creating a GenerativeModel with VertexAI in C#\nDESCRIPTION: This snippet demonstrates how to create a GenerativeModel instance using the VertexAI service. It requires an existing VertexAI instance and a model name. The model name specifies which Gemini model to use for content generation.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar vertexModel = vertexAI.CreateGenerativeModel(\"models/gemini-1.5-flash\");\n```\n\n----------------------------------------\n\nTITLE: Generating Content with a Remote File in C#\nDESCRIPTION: This snippet demonstrates how to generate content using a remote file. It calls the GenerateContentAsync method with a description, the URL of the remote file, and its MIME type.  The model uses the content of the remote file as context for the prompt.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n// Generate content from a remote file (e.g., a PDF)\nvar response = await geminiModel.GenerateContentAsync(\n    \"Summarize the information in this PDF document\",\n    \"https://example.com/path/to/sample.pdf\",\n    \"application/pdf\"\n);\n\nConsole.WriteLine(response.Text());\n```\n\n----------------------------------------\n\nTITLE: Initializing VertexAI in C#\nDESCRIPTION: This snippet shows how to initialize an instance of the VertexAI class. It assumes that the Google Cloud SDK (CLI) is installed and set up correctly and that Application Default Credentials (ADC) are configured. This is a prerequisite for interacting with Vertex AI services.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar vertexAI = new VertexAI();\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Service Account Authentication (PKCS12) in C#\nDESCRIPTION: This C# code configures Google Service Account authentication using a PKCS12/P12 certificate file.  The `WithGoogleServiceAuthentication` extension method is used with the service account email, certificate path, and passphrase to configure the `Authenticator` property.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/src/GenerativeAI.Web/README.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nbuilder.Services.AddGenerativeAI().WithGoogleServiceAuthentication(\"[email address removed]\", \"path/to/certificate.p12\", \"your-passphrase\");\n```\n\n----------------------------------------\n\nTITLE: Using IGenerativeAiService for Streaming Text in C#\nDESCRIPTION: This C# code shows how to use the `IGenerativeAiService` to stream text. It calls the `GenerateContentStreamAsync` method and iterates through the resulting asynchronous stream of chunks. For each chunk, it writes the text to the response and flushes the response buffer, which is crucial for streaming the content to the client.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/src/GenerativeAI.Web/README.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\n [HttpGet]\n    public async Task StreamText(string prompt)\n    {\n        Response.ContentType = \"text/plain\"; // Set content type for streaming.\n        await foreach (var chunk in _aiService.GenerateContentStreamAsync(prompt))\n        {\n            await Response.WriteAsync(chunk.Text());\n            await Response.Body.FlushAsync(); // Crucial for streaming!\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Reflection-based QuickTool Function Calling in C#\nDESCRIPTION: This code shows how to quickly wrap an inline function using reflection and the `QuickTool` class. This approach is ideal for rapid prototyping of custom functions called by Gemini.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README.md#_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\n// Define a QuickTool using an inline async function\nvar quickTool = new QuickTool(\n    async ([Description(\"Query a student record\")] QueryStudentRecordRequest query) =>\n    {\n        return new StudentRecord\n        {\n            StudentId = \"12345\",\n            FullName = query.FullName,\n            EnrollmentDate = DateTime.UtcNow\n        };\n    },\n    \"GetStudentRecord\",\n    \"Retrieve a student record\"\n);\n\n// Add the function tool to your generative model\nvar model = new GenerativeModel(\"YOUR_API_KEY\", GoogleAIModels.Gemini2Flash);\nmodel.AddFunctionTool(quickTool);\n```\n\n----------------------------------------\n\nTITLE: Manual JSON Parsing with ExtractJsonBlocks in C#\nDESCRIPTION: This snippet demonstrates how to manually parse JSON data from the response. It uses the ExtractJsonBlocks method to get the raw JSON blocks and then deserializes them using the ToObject method. It offers more control over the parsing process.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README.md#_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nvar response = await model.GenerateContentAsync(request);\nvar jsonBlocks = response.ExtractJsonBlocks();\nvar myObjects = jsonBlocks.Select(block => block.ToObject<SampleJsonClass>());\n```\n\n----------------------------------------\n\nTITLE: Generating Content with VertexAI in C#\nDESCRIPTION: This snippet illustrates how to generate text content using a GenerativeModel instance from VertexAI. It calls the GenerateContentAsync method with a prompt string. The response contains the generated text, which is then printed to the console.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar response = await vertexModel.GenerateContentAsync(\"Hello from Vertex AI!\");\nConsole.WriteLine(response.Text());\n```\n\n----------------------------------------\n\nTITLE: Installing Google_GenerativeAI.Auth NuGet package\nDESCRIPTION: Install the Google_GenerativeAI.Auth NuGet package using the dotnet CLI. This command adds the package to your project.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/src/GenerativeAI.Auth/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ndotnet add package Google_GenerativeAI.Auth\n```\n\n----------------------------------------\n\nTITLE: Installing Google_GenerativeAI Nuget Package\nDESCRIPTION: These commands show how to install the Google_GenerativeAI Nuget package, which is required to use the C# SDK.  The package can be installed either through the Package Manager Console or using the .NET CLI.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README_old.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Package Google_GenerativeAI\n```\n\n----------------------------------------\n\nTITLE: Streaming Chat Response to Console\nDESCRIPTION: This C# code snippet demonstrates how to use the IChatClient to stream chat responses to the console. It creates a chat history and uses the StreamGenerateMessageAsync method to get a streaming response, writing each chunk to the console. A cancellation token is used to allow for cancellation of the streaming operation.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/src/GenerativeAI.Microsoft/README.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Extensions.AI;\nusing System.Threading.Tasks;\nusing System.Threading;\n\npublic class MyChatService\n{\n    private readonly IChatClient _chatClient;\n\n    public MyChatService(IChatClient chatClient)\n    {\n        _chatClient = chatClient;\n    }\n\n    public async Task StreamChatResponseToConsole(string userMessage, CancellationToken cancellationToken = default)\n    {\n         var chatHistory = new List<ChatMessage>\n         {\n             new ChatMessage(AuthorRole.User, userMessage)\n         };\n\n         await foreach (var chunk in _chatClient.StreamGenerateMessageAsync(chatHistory, cancellationToken: cancellationToken))\n         {\n             Console.Write(chunk.Content);\n         }\n         Console.WriteLine();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing GoogleAI C#\nDESCRIPTION: Initializes the GoogleAI class with an API key to interact with Google Generative AI models.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar googleAI = new GoogleAI(\"Your_API_Key\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Generative AI Directly in Code (API Key)\nDESCRIPTION: This C# code shows how to configure the Generative AI service directly in code using a `GenerativeAIOptions` instance. It creates a new `GenerativeAIOptions` object, sets the `Credentials` property using an API key, and provides optional settings for the project ID, region, and model.  It then passes this options object to the `AddGenerativeAI` extension method.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/src/GenerativeAI.Web/README.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nusing Google_GenerativeAI.Web;\nusing GenerativeAI.GoogleAuth;\n\n// API Key:\nbuilder.Services.AddGenerativeAI(new GenerativeAIOptions\n{\n    Credentials = new GoogleAICredentials(\"YOUR_API_KEY\"),\n    ProjectId = \"YOUR_PROJECT_ID\", // Optional (for Vertex AI)\n    Region = \"us-central1\",        // Optional\n    Model = \"gemini-pro\"           // Optional\n});\n```\n\n----------------------------------------\n\nTITLE: Chat Mode with Gemini Pro - C#\nDESCRIPTION: This example showcases how to use the chat mode with the Gemini Pro model. It initializes the model and starts a chat session using StartChat.  It then sends two messages and prints the results.  The API Key is pulled from the environment variables.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README_old.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n var apiKey = Environment.GetEnvironmentVariable(\"Gemini_API_Key\", EnvironmentVariableTarget.User);\n\n var model = new GenerativeModel(apiKey);\n //or var model = new GeminiProModel(apiKey)\n\n var chat = model.StartChat(new StartChatParams());\n\n var result = await chat.SendMessageAsync(\"Write a poem\");\n Console.WriteLine(\"Initial Poem\\r\\n\");\n Console.WriteLine(result);\n\n var result2 = await chat.SendMessageAsync(\"Make it longer\");\n Console.WriteLine(\"Long Poem\\r\\n\");\n Console.WriteLine(result2);\n \n```\n\n----------------------------------------\n\nTITLE: Interface-based Function Tools in C#\nDESCRIPTION: This code shows how to define an interface for a reusable set of functions that Gemini can call. This approach promotes structured and maintainable code when working with function calling.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README.md#_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\n[GenerateJsonSchema(GoogleFunctionTool = true)]\npublic interface IWeatherFunctions\n{\n    [Description(\"Get current weather\")]\n    Weather GetCurrentWeather(string location);\n}\n\npublic class WeatherService : IWeatherFunctions\n{\n    public Weather GetCurrentWeather(string location) =>\n        new Weather { Location = location, Temperature = 25.0, Description = \"Sunny\" };\n}\n\n// Use the generated extension method to add the tool to your model\nvar service = new WeatherService();\nvar model = new GenerativeModel(\"YOUR_API_KEY\", GoogleAIModels.Gemini2Flash);\nmodel.AddFunctionTool(service.AsGoogleFunctionTool());\n```\n\n----------------------------------------\n\nTITLE: Configuring Generative AI using Action Delegate\nDESCRIPTION: This C# snippet configures the Generative AI service using an action delegate that receives a `GenerativeAIOptions` instance. This allows for flexible configuration within the delegate, setting credentials (either API key or OAuth token) and other options like project ID, region, and model.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/src/GenerativeAI.Web/README.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\n// OR, using an Action:\nbuilder.Services.AddGenerativeAI(options =>\n{\n    options.Credentials = new GoogleAICredentials(\"YOUR_API_KEY\");\n    // OR, for OAuth 2.0:\n    // options.Credentials = new GoogleAICredentials(null, \"YOUR_ACCESS_TOKEN\", DateTime.UtcNow.AddHours(1));\n    options.ProjectId = \"YOUR_PROJECT_ID\"; // Optional\n    options.Region = \"us-central1\";        // Optional\n    options.Model = \"gemini-pro\";          // Optional\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Gemini Inbuilt Tools in C#\nDESCRIPTION: This code snippet demonstrates how to enable or disable the Google Search and Code Execution tools using the `UseGoogleSearch` and `UseCodeExecutionTool` properties of the `GenerativeModel` class.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README.md#_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\n// Example: Enabling Google Search and Code Execution\nvar model = new GenerativeModel(apiKey: \"YOUR_API_KEY\");\nmodel.UseGoogleSearch = true;\nmodel.UseCodeExecutionTool = true;\n\n// Example: Disabling all inbuilt tools.\nvar model = new GenerativeModel(apiKey: \"YOUR_API_KEY\");\nmodel.UseGoogleSearch = false;\nmodel.UseGrounding = false; \nmodel.UseCodeExecutionTool = false;\n```\n\n----------------------------------------\n\nTITLE: Generating Images with Imagen in C#\nDESCRIPTION: This code demonstrates how to initialize an image generation model (`ImagenModel`) and generate an image from a text prompt using the Google_GenerativeAI SDK.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README.md#_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\n// 1. Create a Google AI client \nvar googleAi = new GoogleAi(apiKey);\n\n// 2. Create the Imagen model instance with your chosen model name.\nvar imageModel = googleAi.CreateImageModel(\"imagen-3.0-generate-002\");\n\n// 3. Generate images by providing a text prompt.\nvar response = await imageModel.GenerateImagesAsync(\"A peaceful forest clearing at sunrise\");\n\n// The response contains the generated image(s).\n```\n\n----------------------------------------\n\nTITLE: Defining Function Tools using Attribute\nDESCRIPTION: This C# code demonstrates how to define a function tool using the `[FunctionTool]` attribute. It decorates a method with `[FunctionTool]` and `[Description]` attributes to generate the necessary schemas and integrate it with the `GenerativeModel`.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/src/GenerativeAI.Tools/README.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n[FunctionTool(GoogleFunctionTool = true)]\n[Description(\"Retrieves content of a specific book page\")]\npublic static Task<string> GetBookPageContentAsync(\n    string bookName, \n    int pageNumber, \n    CancellationToken cancellationToken = default)\n{\n    // Implementation\n    return Task.FromResult($\"Page {pageNumber} of {bookName}\");\n}\n\n//Usage\n\nvar tools = new Tools([GetBookPageContentAsync]);\ngenerativeModel.AddFunctionTool(tools);\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Service Account Authentication (JSON) in C#\nDESCRIPTION: This C# snippet sets up Google Service Account authentication using a JSON key file. The `WithGoogleServiceAuthentication` extension method configures the `Authenticator` property with the path to the service account key file. This method is suitable for applications running outside Google Cloud or when a specific service account is required.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/src/GenerativeAI.Web/README.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nbuilder.Services.AddGenerativeAI().WithGoogleServiceAuthentication(\"path/to/your/service-account.json\");;\n```\n\n----------------------------------------\n\nTITLE: Configuring Google OAuth 2.0 Authentication in C#\nDESCRIPTION: This C# snippet configures Google OAuth 2.0 authentication using a client secret JSON file. It uses the `WithGoogleOAuthAuthentication` extension method to set up the necessary authentication for accessing Google AI on behalf of a user.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/src/GenerativeAI.Web/README.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nbuilder.Services.AddGenerativeAI().WithGoogleOAuthAuthentication(\"path/to/your/client_secret.json\");\n```\n\n----------------------------------------\n\nTITLE: Vision with Gemini Pro Using Parts - C#\nDESCRIPTION: This example showcases another way to use the Gemini Pro Vision model, where the image and text are passed as separate parts. It reads an image, converts it to a base64 string, and creates Part objects for both the image and text.  These parts are passed to the GenerateContentAsync method.  The API Key is read from environment variables.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README_old.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar imageBytes = await File.ReadAllBytesAsync(\"image.png\");\n\nvar imagePart = new Part()\n{\n    InlineData = new GenerativeContentBlob()\n    {\n        MimeType = \"image/png\",\n        Data = Convert.ToBase64String(imageBytes)\n    }\n};\n\nvar textPart = new Part()\n{\n    Text = \"What is in the image?\"\n};\n\nvar parts = new[] { textPart, imagePart };\n\nvar apiKey = Environment.GetEnvironmentVariable(\"Gemini_API_Key\", EnvironmentVariableTarget.User);\nvar visionModel = new GeminiProVision(apiKey);\nvar result = await visionModel.GenerateContentAsync(parts);\n\nConsole.WriteLine(result.Text());\n```\n\n----------------------------------------\n\nTITLE: Streaming with Gemini Pro Vision - C#\nDESCRIPTION: This code demonstrates how to stream content using the Gemini Pro Vision Model. It reads an image from a file, sets up a prompt, starts a chat session and defines an action to print each chunk of the response to the console. The StreamContentVisionAsync method sends the vision request and streams the results.  The API Key is retrieved from environment variables.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README_old.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar imageBytes = await File.ReadAllBytesAsync(\"image.png\");\n\nstring prompt = \"What is in the image?\";\n\nvar apiKey = Environment.GetEnvironmentVariable(\"Gemini_API_Key\", EnvironmentVariableTarget.User);\n\nvar visionModel = new GeminiProVision(apiKey);\n\nvar chat = visionModel.StartChat(new StartChatParams());\n\nAction<string> handler = (a) =>\n{\n    Console.WriteLine(a);\n};\n\nvar result = await chat.StreamContentVisionAsync(prompt, new FileObject(imageBytes, \"image.png\"), handler);\n\n```\n\n----------------------------------------\n\nTITLE: Streaming with Generative Model - C#\nDESCRIPTION: This code snippet demonstrates how to stream content using the GenerativeModel.  An action is defined to handle each chunk of the streaming response by writing it to the console. The StreamContentAsync method sends a request and executes the handler for each part of the response.  The API Key is retrieved from environment variables.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README_old.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar apiKey = Environment.GetEnvironmentVariable(\"Gemini_API_Key\", EnvironmentVariableTarget.User);\n\nvar model = new GenerativeModel(apiKey);\n//or var model = new GeminiProModel(apiKey);\n\nvar action = new Action<string>(s =>\n{\n    Console.Write(s);\n});\n\nawait model.StreamContentAsync(\"How are you doing?\",action);\n\n```\n\n----------------------------------------\n\nTITLE: Defining Reflection-Based Tools with QuickTool\nDESCRIPTION: This C# code defines a reflection-based tool using `QuickTool`. It creates a `StudentRecord` record, a delegate function to retrieve the student record, and then uses `QuickTool` to wrap the function.  Finally, it's added to a `GenerativeModel`.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/src/GenerativeAI.Tools/README.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic record StudentRecord\n{\n    public string StudentId { get; set; }\n    public string FullName { get; set; }\n    // ...\n}\n\n// Reflection-based delegate\nvar func = (async ([Description(\"Query to retrieve student record\")] string fullName) =>\n{\n    // Implementation detail\n    return new StudentRecord\n    {\n        StudentId = \"12345\",\n        FullName = fullName\n    };\n});\n\n// Create QuickTool\nvar quickFt = new QuickTool(func, \"GetStudentRecordAsync\", \"Returns the student record\");\n\nvar model = new GenerativeModel(/* your config */);\nmodel.AddFunctionTool(quickFt);\n\n// Usage\nvar result = await model.GenerateContentAsync(\"What's the student record for John Joe?\");\nConsole.WriteLine(result.Text());\n```\n\n----------------------------------------\n\nTITLE: Streaming with ChatSession - C#\nDESCRIPTION: This code demonstrates how to stream content within a ChatSession. It initializes the GenerativeModel, starts a chat session, and defines an action to print each chunk of the response to the console.  The StreamContentAsync method sends a chat message and streams the response.  The API Key is retrieved from environment variables.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README_old.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar apiKey = Environment.GetEnvironmentVariable(\"Gemini_API_Key\", EnvironmentVariableTarget.User);\n\nvar model = new GenerativeModel(apiKey);\n\nvar handler = new Action<string>((a) =>\n{\n    Console.Write(a);\n});\n\nvar chat = model.StartChat(new StartChatParams());\nawait chat.StreamContentAsync(\"Write a poem\", handler);\n\n```\n\n----------------------------------------\n\nTITLE: Vision with Gemini Pro - C#\nDESCRIPTION: This code snippet demonstrates how to use the Gemini Pro Vision model to analyze an image. It reads an image from a file, sets up a prompt, and then calls the GenerateContentAsync method to get a description of the image.  The API key is retrieved from environment variables.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README_old.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar imageBytes = await File.ReadAllBytesAsync(\"image.png\");\n\nstring prompt = \"What is in the image?\";\n\nvar apiKey = Environment.GetEnvironmentVariable(\"Gemini_API_Key\", EnvironmentVariableTarget.User);\n\nvar visionModel = new GeminiProVision(apiKey);\n\nvar result = await visionModel.GenerateContentAsync(prompt,new FileObject(imageBytes,\"image.png\"));\n\nConsole.WriteLine(result.Text());\n\n```\n\n----------------------------------------\n\nTITLE: Generating Content with a Local File in C#\nDESCRIPTION: This snippet demonstrates how to generate content using a local file. It calls the GenerateContentAsync method with a description and the path to a local image file.  The model will use the image as context for the prompt.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n// Generate content from a local file (e.g., an image)\nvar response = await geminiModel.GenerateContentAsync(\n    \"Describe the details in this uploaded image\",\n    @\"C:\\\\path\\\\to\\\\local\\\\image.jpg\"\n);\n\nConsole.WriteLine(response.Text());\n```\n\n----------------------------------------\n\nTITLE: Full Google AI Example C#\nDESCRIPTION: A complete example demonstrating the initialization of GoogleAI, creation of a generative model, and content generation using the Gemini API.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar apiKey = \"YOUR_GOOGLE_API_KEY\";\nvar googleAI = new GoogleAI(apiKey);\n\nvar googleModel = googleAI.CreateGenerativeModel(\"models/gemini-1.5-flash\");\nvar googleResponse = await googleModel.GenerateContentAsync(\"How is the weather today?\");\nConsole.WriteLine(\"Google AI Response:\");\nConsole.WriteLine(googleResponse.Text());\nConsole.WriteLine();\n```\n\n----------------------------------------\n\nTITLE: Get List of Available Models - C#\nDESCRIPTION: This code snippet shows how to retrieve a list of available models using the ModelInfoService. It initializes the service with an API key and then calls the GetModelsAsync method to get the list of models.  The API Key is retrieved from environment variables.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README_old.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nvar apiKey = Environment.GetEnvironmentVariable(\"Gemini_API_Key\", EnvironmentVariableTarget.User);\n\nvar service = new ModelInfoService(apiKey);\n\nvar models = await service.GetModelsAsync();\n```\n\n----------------------------------------\n\nTITLE: Configuring Generative AI Directly in Code (OAuth)\nDESCRIPTION: This C# code shows how to configure the Generative AI service directly in code using a `GenerativeAIOptions` instance and an OAuth 2.0 access token. It sets the access token and its expiry time within the `GoogleAICredentials` object, providing the necessary authentication for OAuth.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/src/GenerativeAI.Web/README.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n// OR, for OAuth 2.0 Access Token:\nbuilder.Services.AddGenerativeAI(new GenerativeAIOptions\n{\n    Credentials = new GoogleAICredentials(null, \"YOUR_ACCESS_TOKEN\", DateTime.UtcNow.AddHours(1)), // Access token with expiry\n    ProjectId = \"YOUR_PROJECT_ID\", // Optional\n    Region = \"us-central1\",        // Optional\n    Model = \"gemini-pro\"           // Optional\n});\n```\n\n----------------------------------------\n\nTITLE: Get Model Info with Model ID - C#\nDESCRIPTION: This code demonstrates how to retrieve information about a specific model using its ID with the ModelInfoService. It initializes the service with an API key and then calls the GetModelInfoAsync method to get the model information.  The API Key is retrieved from environment variables.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README_old.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n var apiKey = Environment.GetEnvironmentVariable(\"Gemini_API_Key\", EnvironmentVariableTarget.User);\n\n var service = new ModelInfoService(apiKey);\n\n var modelInfo = await service.GetModelInfoAsync(\"gemini-pro\");\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Service Account (Key and Password)\nDESCRIPTION: This C# snippet demonstrates how to authenticate using a service account email, key, and password with the Google Generative AI SDK. It initializes a GoogleServiceAccountAuthenticator with the credentials and uses it to create a VertexAIModel instance.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/src/GenerativeAI.Auth/README.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n// Assuming 'email', 'key', and 'password' are your service account credentials.\nvar authenticator = new GoogleServiceAccountAuthenticator(email, key, password);\nvar vertexAi = new VertexAIModel(authenticator: authenticator);\n```\n\n----------------------------------------\n\nTITLE: Getting Access Token Directly\nDESCRIPTION: This C# snippet shows how to retrieve the access token directly from the IGoogleAuthenticator interface using the GetAccessTokenAsync() method. The token is then printed to the console.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/src/GenerativeAI.Auth/README.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nvar token = await authenticator.GetAccessTokenAsync();\nConsole.WriteLine(token.AccessToken); // Use the token as needed.\n```\n\n----------------------------------------\n\nTITLE: Obtaining GenerativeModel C#\nDESCRIPTION: Creates a GenerativeModel instance using the GoogleAI class with a specified model name.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar model = googleAI.CreateGenerativeModel(\"models/gemini-1.5-flash\");\n```\n\n----------------------------------------\n\nTITLE: Generating Content C#\nDESCRIPTION: Generates content using the GenerativeModel's GenerateContentAsync method and prints the response to the console.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar response = await model.GenerateContentAsync(\"How is the weather today?\");\nConsole.WriteLine(response.Text());\n```\n\n----------------------------------------\n\nTITLE: Installing Google_GenerativeAI.Web NuGet Package\nDESCRIPTION: This command installs the Google_GenerativeAI.Web NuGet package, which provides the necessary components for integrating Google Generative AI services into your .NET web application. This package simplifies the configuration and usage of Google's generative models.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/src/GenerativeAI.Web/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Google_GenerativeAI.Web\n```\n\n----------------------------------------\n\nTITLE: OAuth Authentication with Client Secret and Client Id\nDESCRIPTION: This C# snippet demonstrates OAuth authentication using a client_secret.json file.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/src/GenerativeAI.Auth/README.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n// Assuming 'credentialFile' your client_secret.json file.\nvar authenticator = new GoogleOAuthAuthenticator(credentialFile);\nvar vertexAi = new VertexAIModel(authenticator: authenticator);\n```\n\n----------------------------------------\n\nTITLE: Install Google GenerativeAI Package .NET CLI\nDESCRIPTION: Installs the Google GenerativeAI NuGet package using the .NET CLI.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Google_GenerativeAI\n```\n\n----------------------------------------\n\nTITLE: Install Google GenerativeAI Package PowerShell\nDESCRIPTION: Installs the Google GenerativeAI NuGet package using the PowerShell Package Manager console.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Package Google_GenerativeAI\n```\n\n----------------------------------------\n\nTITLE: Referencing Google.GenerativeAI.Tools in Project File\nDESCRIPTION: This snippet shows how to reference the Google.GenerativeAI.Tools package in your C# project's .csproj file.  Replace `x.x.x` with the desired version number.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/src/GenerativeAI.Tools/README.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"Google.GenerativeAI.Tools\" Version=\"x.x.x\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Installing Google_GenerativeAI.Live NuGet Package\nDESCRIPTION: This command installs the Google_GenerativeAI.Live NuGet package, which provides the necessary libraries for real-time multimodal communication with the Gemini API in .NET applications. It fetches the package and its dependencies from the NuGet package manager.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/src/GenerativeAI.Live/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nInstall-Package Google_GenerativeAI.Live\n```\n\n----------------------------------------\n\nTITLE: Installing Google_GenerativeAI.Microsoft Package\nDESCRIPTION: This command adds the Google_GenerativeAI.Microsoft NuGet package to your .NET project. This package provides the IChatClient implementation for using Google's Gemini models with Microsoft.Extensions.AI.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/src/GenerativeAI.Microsoft/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Google_GenerativeAI.Microsoft\n```\n\n----------------------------------------\n\nTITLE: Installing Google.GenerativeAI.Tools NuGet package\nDESCRIPTION: This snippet demonstrates how to install the Google.GenerativeAI.Tools NuGet package using the dotnet CLI. It adds the package to the project.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/src/GenerativeAI.Tools/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ndotnet add package Google.GenerativeAI.Tools\n```\n\n----------------------------------------\n\nTITLE: Installing Google_GenerativeAI Nuget Package\nDESCRIPTION: These commands show how to install the Google_GenerativeAI Nuget package, which is required to use the C# SDK.  The package can be installed either through the Package Manager Console or using the .NET CLI.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README_old.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\ndotnet add package Google_GenerativeAI\n```\n\n----------------------------------------\n\nTITLE: Installing Google_GenerativeAI.Live Package in C#\nDESCRIPTION: This code snippet shows how to install the `Google_GenerativeAI.Live` package via NuGet for using the Multimodal Live API.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README.md#_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\nInstall-Package Google_GenerativeAI.Live\n```\n\n----------------------------------------\n\nTITLE: Installing Google Generative AI SDK NuGet package\nDESCRIPTION: Install the main Google Generative AI SDK NuGet package using the dotnet CLI. This package is a peer dependency for the authentication library.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/src/GenerativeAI.Auth/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ndotnet add package Google_GenerativeAI\n```\n\n----------------------------------------\n\nTITLE: Restoring NuGet Packages\nDESCRIPTION: This command is used to restore the NuGet packages specified in the project file.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/src/GenerativeAI.Tools/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ndotnet restore\n```\n\n----------------------------------------\n\nTITLE: Using IChatClient to Get Chat Response\nDESCRIPTION: This C# code snippet shows how to use the injected IChatClient to generate chat responses. It creates a chat history with the user's message and uses the GenerateMessageAsync method to get a non-streaming response. The chat history is maintained internally by the IChatClient for multi-turn conversations.\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/src/GenerativeAI.Microsoft/README.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Extensions.AI;\nusing System.Threading.Tasks;\nusing System.Threading;\n\npublic class MyChatService\n{\n    private readonly IChatClient _chatClient;\n\n    public MyChatService(IChatClient chatClient)\n    {\n        _chatClient = chatClient;\n    }\n\n    public async Task<string> GetChatResponse(string userMessage)\n    {\n        // IChatClient maintains history internally. Add messages for multi-turn context.\n        var chatHistory = new List<ChatMessage>\n        {\n            new ChatMessage(AuthorRole.User, userMessage)\n        };\n        return (await _chatClient.GenerateMessageAsync(chatHistory)).Content;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using JsonMode for JSON Responses in C#\nDESCRIPTION: This snippet demonstrates how to use the UseJsonMode extension method when creating a GenerateContentRequest. This tells the SDK to expect a JSON response of the specified type (SampleJsonClass).\nSOURCE: https://github.com/gunpal5/google_generativeai/blob/main/README.md#_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nvar request = new GenerateContentRequest();\nrequest.UseJsonMode<SampleJsonClass>();\nrequest.AddText(\"Give me a really good response.\");\n```"
  }
]