[
  {
    "owner": "surrealdb",
    "repo": "surrealdb",
    "content": "TITLE: Using SurrealDB Rust SDK with WebSocket Connection\nDESCRIPTION: This example demonstrates connecting to a SurrealDB database via WebSockets, authenticating as a root user, and performing CRUD operations with typed models. It showcases creating records with both random and specific IDs, updating records, querying with custom SQL, and deleting records.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/crates/sdk/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse serde::{Deserialize, Serialize};\nuse serde_json::json;\nuse surrealdb::sql;\nuse surrealdb::sql::Thing;\nuse surrealdb::Surreal;\nuse surrealdb::engine::remote::ws::Ws;\nuse surrealdb::opt::auth::Root;\nuse surrealdb::Error;\n\n#[derive(Serialize, Deserialize)]\nstruct Name {\n    first: String,\n    last: String,\n}\n\n#[derive(Serialize, Deserialize)]\nstruct Person {\n    #[serde(skip_serializing)]\n    id: Option<Thing>,\n    title: String,\n    name: Name,\n    marketing: bool,\n}\n\n// Install at https://surrealdb.com/install \n// and use `surreal start --user root --pass root`\n// to start a working database to take the following queries\n// \n// See the results via `surreal sql --ns namespace --db database --pretty` \n// or https://surrealist.app/\n// followed by the query `SELECT * FROM person;`\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    let db = Surreal::new::<Ws>(\"localhost:8000\").await?;\n\n    // Signin as a namespace, database, or root user\n    db.signin(Root {\n        username: \"root\",\n        password: \"root\",\n    })\n    .await?;\n\n    // Select a specific namespace and database\n    db.use_ns(\"namespace\").use_db(\"database\").await?;\n\n    // Create a new person with a random ID\n    let tobie: Option<Person> = db\n        .create(\"person\")\n        .content(Person {\n            id: None,\n            title: \"Founder & CEO\".into(),\n            name: Name {\n                first: \"Tobie\".into(),\n                last: \"Morgan Hitchcock\".into(),\n            },\n            marketing: true,\n        })\n        .await?;\n\n    // Create a new person with a specific ID\n    let mut jaime: Option<Person> = db\n        .create((\"person\", \"jaime\"))\n        .content(Person {\n            id: None,\n            title: \"Founder & COO\".into(),\n            name: Name {\n                first: \"Jaime\".into(),\n                last: \"Morgan Hitchcock\".into(),\n            },\n            marketing: false,\n        })\n        .await?;\n\n    // Update a person record with a specific ID\n    jaime = db\n        .update((\"person\", \"jaime\"))\n        .merge(json!({ \"marketing\": true }))\n        .await?;\n\n    // Select all people records\n    let people: Vec<Person> = db.select(\"person\").await?;\n\n    // Perform a custom advanced query\n    let query = r#\"\n        SELECT marketing, count()\n        FROM type::table($table)\n        GROUP BY marketing\n    \"#;\n\n    let groups = db.query(query)\n        .bind((\"table\", \"person\"))\n        .await?;\n\n    // Delete all people up to but not including Jaime\n    let people: Vec<Person> = db.delete(\"person\").range(..\"jaime\").await?;\n\n    // Delete all people\n    let people: Vec<Person> = db.delete(\"person\").await?;\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Running SurrealDB with Docker\nDESCRIPTION: This snippet shows how to start a SurrealDB development server in Docker with memory storage, debug logging, and root user credentials. It also includes how to access the server using the SurrealDB CLI provided in the container.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/docker/DOCKER.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm --pull always --name surrealdb -p 8000:8000 surrealdb/surrealdb:latest start --log debug --user root --pass root memory\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it <container_name> /surreal sql -e http://localhost:8000 -u root -p root --ns test --db test --pretty\n```\n\n----------------------------------------\n\nTITLE: SurrealDB Schema and Event Definition\nDESCRIPTION: SQL examples demonstrating schema definition, field constraints, and event handling.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n-- Create a schemafull table\nDEFINE TABLE user SCHEMAFULL;\n\n-- Specify fields on the user table\nDEFINE FIELD name ON TABLE user TYPE object;\nDEFINE FIELD name.first ON TABLE user TYPE string;\nDEFINE FIELD name.last ON TABLE user TYPE string;\nDEFINE FIELD email ON TABLE user TYPE string ASSERT string::is::email($value);\n\n-- Add a unique index on the email field preventing duplicate values\nDEFINE INDEX email ON TABLE user COLUMNS email UNIQUE;\n\n-- Create a new event whenever a user changes their email address\nDEFINE EVENT email ON TABLE user WHEN $before.email != $after.email THEN (\n    CREATE event SET user = $value, time = time::now(), value = $after.email, action = 'email_changed'\n);\n```\n\n----------------------------------------\n\nTITLE: SurrealDB Advanced Queries\nDESCRIPTION: Complex SQL queries demonstrating array filtering and graph traversal capabilities.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n-- Select a nested array, and filter based on an attribute\nSELECT emails[WHERE active = true] FROM person;\n\n-- Select all 1st, 2nd, and 3rd level people who this specific person record knows, or likes, as separate outputs\nSELECT ->knows->(? AS f1)->knows->(? AS f2)->(knows, likes AS e3 WHERE influencer = true)->(? AS f3) FROM person:tobie;\n\n-- Select all person records (and their recipients), who have sent more than 5 emails\nSELECT *, ->sent->email->to->person FROM person WHERE count(->sent->email) > 5;\n\n-- Select other products purchased by people who purchased this laptop\nSELECT <-purchased<-person->purchased->product FROM product:laptop;\n\n-- Select products purchased by people in the last 3 weeks who have purchased the same products that we purchased\nSELECT ->purchased->product<-purchased<-person->(purchased WHERE created_at > time::now() - 3w)->product FROM person:tobie;\n```\n\n----------------------------------------\n\nTITLE: Schema Definition and Event Handling\nDESCRIPTION: Demonstrates creating a schema-full table with field definitions, unique constraints, and event triggers for field changes.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/crates/sdk/CARGO.md#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n-- Create a schemafull table\nDEFINE TABLE user SCHEMAFULL;\n\n-- Specify fields on the user table\nDEFINE FIELD name ON TABLE user TYPE object;\nDEFINE FIELD name.first ON TABLE user TYPE string;\nDEFINE FIELD name.last ON TABLE user TYPE string;\nDEFINE FIELD email ON TABLE user TYPE string ASSERT string::is::email($value);\n\n-- Add a unique index on the email field preventing duplicate values\nDEFINE INDEX email ON TABLE user COLUMNS email UNIQUE;\n\n-- Create a new event whenever a user changes their email address\nDEFINE EVENT email ON TABLE user WHEN $before.email != $after.email THEN (\n\tCREATE event SET user = $this, time = time::now(), value = $after.email, action = 'email_changed'\n);\n```\n\n----------------------------------------\n\nTITLE: Advanced Querying and Graph Traversal\nDESCRIPTION: Illustrates complex query patterns including nested array filtering, multi-level graph traversal, and relationship-based queries.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/crates/sdk/CARGO.md#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\n-- Select a nested array, and filter based on an attribute\nSELECT emails[WHERE active = true] FROM person;\n\n-- Select all 1st, 2nd, and 3rd level people who this specific person record knows, or likes, as separate outputs\nSELECT ->knows->(? AS f1)->knows->(? AS f2)->(knows, likes AS e3 WHERE influencer = true)->(? AS f3) FROM person:tobie;\n\n-- Select all person records (and their recipients), who have sent more than 5 emails\nSELECT *, ->sent->email->to->person FROM person WHERE count(->sent->email) > 5;\n\n-- Select other products purchased by people who purchased this laptop\nSELECT <-purchased<-person->purchased->product FROM product:laptop;\n\n-- Select products purchased by people in the last 3 weeks who have purchased the same products that we purchased\nSELECT ->purchased->product<-purchased<-person->(purchased WHERE created_at > time::now() - 3w)->product FROM person:tobie;\n```\n\n----------------------------------------\n\nTITLE: Graph Relationships\nDESCRIPTION: Shows how to create directed graph edge connections between records and establish relationships between multiple entities.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/crates/sdk/CARGO.md#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\n-- Add a graph edge between user:tobie and article:surreal\nRELATE user:tobie->write->article:surreal\n\tSET time.written = time::now()\n;\n\n-- Add a graph edge between specific users and developers\nLET $from = (SELECT users FROM company:surrealdb);\nLET $devs = (SELECT * FROM user WHERE tags CONTAINS 'developer');\nRELATE $from->like->$devs UNIQUE\n\tSET time.connected = time::now()\n;\n```\n\n----------------------------------------\n\nTITLE: SurrealDB Graph Queries\nDESCRIPTION: SQL examples showing graph relationships and advanced query capabilities.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n-- Add a graph edge between user:tobie and article:surreal\nRELATE user:tobie->write->article:surreal\n    SET time.written = time::now()\n;\n\n-- Add a graph edge between specific users and developers\nLET $from = (SELECT users FROM company:surrealdb);\nLET $devs = (SELECT * FROM user WHERE tags CONTAINS 'developer');\nRELATE $from->like->$devs UNIQUE\n    SET time.connected = time::now()\n;\n```\n\n----------------------------------------\n\nTITLE: SurrealDB Data Type Examples\nDESCRIPTION: SQL examples showing SurrealDB's strongly-typed data types and computed fields.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE person SET\n    waist = <int> \"34\",\n    height = <float> 201,\n    score = <decimal> 0.3 + 0.3 + 0.3 + 0.1\n;\n```\n\nLANGUAGE: sql\nCODE:\n```\nCREATE person SET\n    birthday = <datetime> \"2007-06-22\",\n    can_drive = <future> { time::now() > birthday + 18y }\n;\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB with OpenTelemetry for Local Development\nDESCRIPTION: Commands to start the observability stack using Docker Compose and launch SurrealDB with OpenTelemetry configuration. This sets up Grafana, Prometheus, and Tempo for monitoring and visualization of telemetry data.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/doc/TELEMETRY.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose -f dev/docker/compose.yaml up -d\n$ SURREAL_TELEMETRY_PROVIDER=otlp OTEL_EXPORTER_OTLP_ENDPOINT=\"http://localhost:4317\" surreal start\n```\n\n----------------------------------------\n\nTITLE: SurrealDB Access Permissions\nDESCRIPTION: SQL example showing granular access control definition for tables.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/README.md#2025-04-21_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\n-- Specify access permissions for the 'post' table\nDEFINE TABLE post SCHEMALESS\n    PERMISSIONS\n        FOR select\n            -- Published posts can be selected\n            WHERE published = true\n            -- A user can select all their own posts\n            OR user = $auth.id\n        FOR create, update\n            -- A user can create or update their own posts\n            WHERE user = $auth.id\n        FOR delete\n            -- A user can delete their own posts\n            WHERE user = $auth.id\n            -- Or an admin can delete any posts\n            OR $auth.admin = true\n;\n```\n\n----------------------------------------\n\nTITLE: Basic Docker Compose Configuration for SurrealDB\nDESCRIPTION: A basic Docker Compose configuration for running SurrealDB. It includes container setup with port mapping and environment variables for setting log level and root credentials.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/docker/DOCKER.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  surrealdb:\n    command: start \n    image: surrealdb/surrealdb:latest # Consider using a specific version\n    pull_policy: always\n    ports:\n      - 8000:8000\n    environment:\n      - SURREAL_LOG=info # Use \"info\" in production\n      - SURREAL_USER=root\n      - SURREAL_PASS=root # Change this in production!\n```\n\n----------------------------------------\n\nTITLE: Running SurrealDB with Docker\nDESCRIPTION: Docker commands for running SurrealDB containers with different configurations.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm --pull always --name surrealdb -p 8000:8000 surrealdb/surrealdb:latest start\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm --pull always --name surrealdb -p 8000:8000 surrealdb/surrealdb:latest start --log info --user root --pass root memory\n```\n\n----------------------------------------\n\nTITLE: Access Control Permissions\nDESCRIPTION: Defines granular access permissions for database operations including conditions for select, create, update, and delete operations.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/crates/sdk/CARGO.md#2025-04-21_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\n-- Specify access permissions for the 'post' table\nDEFINE TABLE post SCHEMALESS\n\tPERMISSIONS\n\t\tFOR select\n\t\t\t-- Published posts can be selected\n\t\t\tWHERE published = true\n\t\t\t-- A user can select all their own posts\n\t\t\tOR user = $auth.id\n\t\tFOR create, update\n\t\t\t-- A user can create or update their own posts\n\t\t\tWHERE user = $auth.id\n\t\tFOR delete\n\t\t\t-- A user can delete their own posts\n\t\t\tWHERE user = $auth.id\n\t\t\t-- Or an admin can delete any posts\n\t\t\tOR $auth.admin = true\n;\n```\n\n----------------------------------------\n\nTITLE: GeoJSON Data Storage\nDESCRIPTION: Demonstrates storing geographical data using GeoJSON format including points and polygons.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/crates/sdk/CARGO.md#2025-04-21_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE city:london SET\n\tcentre = (-0.118092, 51.509865),\n\tboundary = {\n\t\ttype: \"Polygon\",\n\t\tcoordinates: [[\n\t\t\t[-0.38314819, 51.37692386], [0.1785278, 51.37692386],\n\t\t\t[0.1785278, 51.61460570], [-0.38314819, 51.61460570],\n\t\t\t[-0.38314819, 51.37692386]\n\t\t]]\n\t}\n;\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealDB on Linux\nDESCRIPTION: Shell commands for installing SurrealDB on Linux systems using the official installer script.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://install.surrealdb.com | sh\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://install.surrealdb.com | sh -s -- --beta\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://install.surrealdb.com | sh -s -- --nightly\n```\n\n----------------------------------------\n\nTITLE: SurrealDB GeoJSON Support\nDESCRIPTION: SQL example showing GeoJSON data type usage with geographical coordinates.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE city:london SET\n    centre = (-0.118092, 51.509865),\n    boundary = {\n        type: \"Polygon\",\n        coordinates: [[\n            [-0.38314819, 51.37692386], [0.1785278, 51.37692386],\n            [0.1785278, 51.61460570], [-0.38314819, 51.61460570],\n            [-0.38314819, 51.37692386]\n        ]]\n    }\n;\n```\n\n----------------------------------------\n\nTITLE: Running SurrealDB RocksDB Datastore Benchmarks (Library and SDK)\nDESCRIPTION: Commands to run benchmarks for the RocksDB datastore using both the library and SDK implementations.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/crates/sdk/benches/README.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ cargo make bench-lib-rocksdb\n$ cargo make bench-sdk-rocksdb\n```\n\n----------------------------------------\n\nTITLE: Data Type Casting in SurrealDB\nDESCRIPTION: Demonstrates strongly-typed data conversion for different field types including integer, float and decimal calculations.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/crates/sdk/CARGO.md#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE person SET\n\twaist = <int> \"34.59\",\n\theight = <float> 201,\n\tscore = <decimal> 0.3 + 0.3 + 0.3 + 0.1\n;\n```\n\n----------------------------------------\n\nTITLE: Running SurrealDB Memory Datastore Benchmarks (Library and SDK)\nDESCRIPTION: Commands to run benchmarks for the memory datastore using both the library and SDK implementations.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/crates/sdk/benches/README.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ cargo make bench-lib-mem\n$ cargo make bench-sdk-mem\n```\n\n----------------------------------------\n\nTITLE: SurrealDB JavaScript Functions\nDESCRIPTION: SQL example demonstrating embedded JavaScript function usage within queries.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/README.md#2025-04-21_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nCREATE film SET\n    ratings = [\n        { rating: 6, user: user:bt8e39uh1ouhfm8ko8s0 },\n        { rating: 8, user: user:bsilfhu88j04rgs0ga70 },\n    ],\n    featured = function() {\n        return this.ratings.filter(r => {\n            return r.rating >= 7;\n        }).map(r => {\n            return { ...r, rating: r.rating * 10 };\n        });\n    }\n;\n```\n\n----------------------------------------\n\nTITLE: Running Individual Test Files in SurrealDB (Bash)\nDESCRIPTION: This command runs individual test files for the SurrealDB project, excluding the API module. It uses the in-memory key-value store feature and enables the bootstrap test with no output capture.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/crates/sdk/tests/running.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo test -p surrealdb --features kv-mem --test bootstrap -- --nocapture\n```\n\n----------------------------------------\n\nTITLE: JavaScript Functions in SurrealDB\nDESCRIPTION: Shows how to embed JavaScript functions for custom data processing and transformation within the database.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/crates/sdk/CARGO.md#2025-04-21_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nCREATE film SET\n\tratings = [\n\t\t{ rating: 6, user: user:bt8e39uh1ouhfm8ko8s0 },\n\t\t{ rating: 8, user: user:bsilfhu88j04rgs0ga70 },\n\t],\n\tfeatured = function() {\n\t\treturn this.ratings.filter(r => {\n\t\t\treturn r.rating >= 7;\n\t\t}).map(r => {\n\t\t\treturn { ...r, rating: r.rating * 10 };\n\t\t});\n\t}\n;\n```\n\n----------------------------------------\n\nTITLE: Running API Module Tests in SurrealDB (Bash)\nDESCRIPTION: This is a placeholder command for running API module tests in SurrealDB. It uses the RocksDB key-value store feature and targets a specific test within the API integration file module.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/crates/sdk/tests/running.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nTODO\ncargo test -p surrealdb --features kv-rocksdb --test api api_integration::file::delete_record_range\n```\n\n----------------------------------------\n\nTITLE: Computed Fields with Future Values\nDESCRIPTION: Shows how to create dynamically computed fields that are calculated at retrieval time using temporal functions.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/crates/sdk/CARGO.md#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE person SET\n\tbirthday = \"2007-06-22\",\n\tcan_drive = <future> { time::now() > birthday + 18y }\n;\n```\n\n----------------------------------------\n\nTITLE: Building SurrealDB for macOS (apple-darwin)\nDESCRIPTION: Commands to compile SurrealDB for both x86_64 and aarch64 macOS architectures. Requires cmake and protobuf as dependencies.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/doc/BUILDING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Setup\nbrew install cmake protobuf\nrustup target add x86_64-apple-darwin\nrustup target add aarch64-apple-darwin\n# Compile for x86_64-apple-darwin\ncargo build --release --locked --target x86_64-apple-darwin\n# Compile for aarch64-apple-darwin\ncargo build --release --locked --target aarch64-apple-darwin\n```\n\n----------------------------------------\n\nTITLE: Configuring Level-based Login in SurrealDB Test Environment using TOML\nDESCRIPTION: This snippet demonstrates how to configure a level-based login for test environments in SurrealDB. It specifies the login level as 'database' with a 'viewer' role, which restricts permissions to read-only access for the specified database.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/crates/language-tests/README.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[env]\nlogin = { level = \"database\", role = \"viewer\" }\n```\n\n----------------------------------------\n\nTITLE: Building SurrealDB for Linux x86_64\nDESCRIPTION: Docker-based build process for compiling SurrealDB for x86_64 Linux architecture. Includes setup of build environment and dependencies.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/doc/BUILDING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Run Docker\ndocker run -it --platform linux/amd64 -v $PWD:/code ubuntu\n# Setup\napt-get -y update\napt-get -y install \\\n\tcurl \\\n\tllvm \\\n\tcmake \\\n\tbinutils \\\n\tclang-11 \\\n\tqemu-user \\\n\tmusl-tools \\\n\tlibssl-dev \\\n\tpkg-config \\\n\tbuild-essential \\\n\tprotobuf-compiler\n# Install rustlang and cargo\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\nsource \"$HOME/.cargo/env\"\n# Add extra targets for rust\nrustup target add x86_64-unknown-linux-gnu\n# Compile for x86_64-unknown-linux-gnu\ncargo build --release --locked --target x86_64-unknown-linux-gnu\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealDB on macOS using Homebrew\nDESCRIPTION: Commands for installing SurrealDB on macOS using Homebrew package manager, including options for stable and nightly builds.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install surrealdb/tap/surreal\n```\n\nLANGUAGE: bash\nCODE:\n```\nbrew install surrealdb/tap/surreal-nightly\n```\n\n----------------------------------------\n\nTITLE: Building SurrealDB Docker Image with Nix\nDESCRIPTION: Command to build a Docker image for SurrealDB using Nix within a Docker container. This method supports all SurrealDB features and storage backends.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/pkg/nix/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm -v $(pwd):/surrealdb -w /surrealdb nixos/nix sh -c \"nix-build -A packages.x86_64-linux.docker-image && mkdir docker && cp -vL ./result docker/surreal.tar.gz && rm result\"\n```\n\n----------------------------------------\n\nTITLE: Building SurrealDB Static Binary with Nix\nDESCRIPTION: Command to build a static binary for SurrealDB using Nix within a Docker container. Note that this binary has limited features and only supports in-memory storage.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/pkg/nix/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm -v $(pwd):/surrealdb -w /surrealdb nixos/nix sh -c \"nix-build -A packages.x86_64-linux.static-binary && mkdir bin && cp -v ./result/bin/surreal bin/ && rm result\"\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealDB on macOS using Homebrew\nDESCRIPTION: This command installs SurrealDB on macOS using the Homebrew package manager. It installs both the command-line tools and the SurrealDB server as a single executable.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/crates/sdk/CARGO.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install surrealdb/tap/surreal\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealDB via Script\nDESCRIPTION: Command to install SurrealDB using the official installation script.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/pkg/deb/NOTES.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://deb.surrealdb.com | sh\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealDB on Windows\nDESCRIPTION: PowerShell commands for installing SurrealDB on Windows systems.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\niwr https://windows.surrealdb.com -useb | iex\n```\n\nLANGUAGE: powershell\nCODE:\n```\niex \"& { $(irm https://windows.surrealdb.com) } -Nightly\"\n```\n\n----------------------------------------\n\nTITLE: Building SurrealDB Debian Package\nDESCRIPTION: Command to build SurrealDB into a Debian package using cargo-deb.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/pkg/deb/NOTES.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo deb\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealDB on Linux using curl\nDESCRIPTION: This command downloads and runs the SurrealDB installation script on Linux systems. It installs the SurrealDB command-line tool.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/crates/sdk/CARGO.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSf https://install.surrealdb.com | sh\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealDB with Nix\nDESCRIPTION: Command to install SurrealDB using Nix.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/pkg/nix/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnix profile install github:surrealdb/surrealdb\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealDB on Windows using PowerShell\nDESCRIPTION: This PowerShell command downloads and runs the SurrealDB installation script on Windows systems. It installs the SurrealDB command-line tool.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/crates/sdk/CARGO.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\niwr https://install.surrealdb.com -useb | iex\n```\n\n----------------------------------------\n\nTITLE: Running Specific SurrealDB Version with Nix\nDESCRIPTION: Example command to run a specific version of SurrealDB using Nix.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/pkg/nix/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnix run github:surrealdb/surrealdb/v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Running SurrealDB with Docker Compose and Persistent Storage\nDESCRIPTION: Advanced Docker Compose configuration that runs SurrealDB as a non-root user with persistent storage. It includes volume mounting, user security settings, and environment variables for configuration.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/docker/DOCKER.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  surrealdb:\n    image: surrealdb/surrealdb:latest # Consider using a specific version\n    pull_policy: always\n    command: start rocksdb:/mydata/mydatabase.db\n    user: \"1000\"\n    ports:\n      - 8000:8000\n    volumes:\n      - ./mydata:/mydata\n    environment:\n      - SURREAL_LOG=debug # Use \"info\" in production\n      - SURREAL_USER=root\n      - SURREAL_PASS=root # Change this in production!\n```\n\n----------------------------------------\n\nTITLE: Running SurrealDB with Nix\nDESCRIPTION: Command to run SurrealDB directly using Nix without installation.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/pkg/nix/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnix run github:surrealdb/surrealdb\n```\n\n----------------------------------------\n\nTITLE: Running SurrealDB using Docker\nDESCRIPTION: This Docker command runs a SurrealDB instance in a container, exposing it on port 8000. It uses the latest version of the SurrealDB Docker image.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/crates/sdk/CARGO.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -p 8000:8000 surrealdb/surrealdb:latest start\n```\n\n----------------------------------------\n\nTITLE: Running General SurrealDB Benchmarks using Cargo\nDESCRIPTION: Execute this command at the top level of the repository to run all benchmarks.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/crates/sdk/benches/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ cargo make bench\n```\n\n----------------------------------------\n\nTITLE: Running SurrealDB Server in Development\nDESCRIPTION: Command to start SurrealDB server with memory storage and HTTP features enabled\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --no-default-features --features storage-mem,http,scripting -- start --log trace --user root --pass root memory\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Fuzzer\nDESCRIPTION: Command to run a specific fuzzer (in this case, fuzz_executor) with optimizations and debug assertions enabled. This executes the fuzz test on a single thread.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/crates/fuzz/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo +nightly fuzz run -O --debug-assertions fuzz_executor\n```\n\n----------------------------------------\n\nTITLE: Watch Mode for Development\nDESCRIPTION: Command to run SurrealDB with code watching for development changes\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo watch -x 'run --no-default-features --features storage-mem,http,scripting -- start --log trace --user root --pass root memory'\n```\n\n----------------------------------------\n\nTITLE: Listing Available Fuzz Harnesses\nDESCRIPTION: Command to list all available fuzz harnesses for SurrealDB. This helps in identifying which specific fuzzer to run.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/crates/fuzz/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo +nightly fuzz list\n```\n\n----------------------------------------\n\nTITLE: Custom Port Configuration\nDESCRIPTION: Command to run SurrealDB with custom binding address and port\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --no-default-features --features storage-mem,http,scripting -- start --log trace --user root --pass root --bind 0.0.0.0:9000 memory\n```\n\n----------------------------------------\n\nTITLE: Generating Load with Benchmarking Tool\nDESCRIPTION: Uses the crud-bench tool from the SurrealDB benchmarking repository to generate load on the database during profiling, with parameters for database type, size, and threads.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/profiling/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo run -r -- -d surrealdb -s 1000 -t 2\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealDB Debian Package\nDESCRIPTION: Command to install the built SurrealDB Debian package using dpkg.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/pkg/deb/NOTES.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo dpkg -i target/debian/surreal_1.0.0~beta.9_amd64.deb\n```\n\n----------------------------------------\n\nTITLE: Loading SurrealDB Docker Image\nDESCRIPTION: Command to load the built SurrealDB Docker image into Docker.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/pkg/nix/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker load -i docker/surreal.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Updating SurrealDB Docker image\nDESCRIPTION: This Docker command pulls the latest version of the SurrealDB image, ensuring you have the most up-to-date version available.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/crates/sdk/CARGO.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull surrealdb/surrealdb:latest\n```\n\n----------------------------------------\n\nTITLE: Starting SurrealDB with Docker Compose\nDESCRIPTION: Launches the SurrealDB services defined in the docker-compose.yml file in detached mode. The -d flag runs containers in the background.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/dev/docker/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Managing SurrealDB Service\nDESCRIPTION: Collection of commands for starting, stopping, enabling, disabling, and checking status of the SurrealDB service.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/pkg/deb/NOTES.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo service surreal start\n$ sudo service surreal stop\n$ sudo service surreal enable\n$ sudo service surreal disable\n$ sudo service surreal status\n```\n\n----------------------------------------\n\nTITLE: Stopping SurrealDB Docker Compose Services\nDESCRIPTION: Stops and removes all containers, networks, and volumes defined in the docker-compose.yml file. The -v flag ensures that all associated volumes are also removed.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/dev/docker/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down -v\n```\n\n----------------------------------------\n\nTITLE: Viewing SurrealDB Service Logs\nDESCRIPTION: Command to view real-time logs of the SurrealDB service using journalctl.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/pkg/deb/NOTES.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsudo journalctl -f -u surreal\n```\n\n----------------------------------------\n\nTITLE: Installing Direnv and Nix-direnv\nDESCRIPTION: Commands to install direnv and nix-direnv for automatic dependency setup in the SurrealDB project directory.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/pkg/nix/README.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnix profile install nixpkgs#direnv\nnix profile install nixpkgs#nix-direnv\n```\n\n----------------------------------------\n\nTITLE: Setting up SurrealDB Development Environment\nDESCRIPTION: Initial setup commands for cloning and running SurrealDB in development mode\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Use the default (stable) release channel if prompted\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\ngit clone git@github.com:[YOUR_FORK_HERE]/surrealdb.git\ncd surrealdb\ncargo run -- help\n```\n\n----------------------------------------\n\nTITLE: Configuring Direnv for Bash\nDESCRIPTION: Command to add to .bashrc for configuring direnv with bash.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/pkg/nix/README.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\neval \"$(direnv hook bash)\"\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Command to execute all SurrealDB tests\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncargo test\n```\n\n----------------------------------------\n\nTITLE: Setting up SurrealDB Binary Cache with Cachix\nDESCRIPTION: Command to configure Nix to use SurrealDB's binary cache for faster builds.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/pkg/nix/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnix run nixpkgs#cachix use surrealdb\n```\n\n----------------------------------------\n\nTITLE: Running SurrealDB WebSocket Remote Server Benchmarks (SDK)\nDESCRIPTION: Instructions for starting the SurrealDB server and running WebSocket benchmarks using the SDK.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/crates/sdk/benches/README.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ cargo make build\n$ ./target/release/surreal start\n```\n\nLANGUAGE: console\nCODE:\n```\n$ cargo make bench-sdk-ws\n```\n\n----------------------------------------\n\nTITLE: Configuring Nix for Flakes Support\nDESCRIPTION: Configuration to add to Nix configuration file to enable experimental features including Flakes support.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/pkg/nix/README.md#2025-04-21_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\nexperimental-features = nix-command flakes\n```\n\n----------------------------------------\n\nTITLE: Building Production Binary\nDESCRIPTION: Command to build a release version of SurrealDB\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Installing SurrealDB Dependencies\nDESCRIPTION: Initial setup commands to install required dependencies and tools for building SurrealDB on Ubuntu 20.04.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/pkg/deb/NOTES.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nrustup upgrade\nsudo apt-get -y update\nsudo apt-get -y install -y cmake g++ libprotobuf-dev protobuf-compiler\ncargo install cargo-deb\n```\n\n----------------------------------------\n\nTITLE: Cloning the SurrealDB Repository with Git\nDESCRIPTION: Command to clone the SurrealDB repository to your local machine. This is the first step in the contribution workflow.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/CONTRIBUTING.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/surrealdb/surrealdb\n```\n\n----------------------------------------\n\nTITLE: Committing Changes to Git\nDESCRIPTION: Commands to stage all changes and commit them with a descriptive message explaining what was changed and why.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/CONTRIBUTING.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngit add -A\ngit commit -m \"[your commit message]\"\n```\n\n----------------------------------------\n\nTITLE: Pulling Latest Changes from Upstream\nDESCRIPTION: Command to pull all changes from the upstream main branch to ensure your local main branch is up-to-date.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/CONTRIBUTING.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit pull\n```\n\n----------------------------------------\n\nTITLE: Updating Revision Lock\nDESCRIPTION: Commands for installing and running revision-lock for managing internal type versions\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/CONTRIBUTING.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncargo install revision-lock\nrevision-lock\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch for Changes\nDESCRIPTION: Command to create and check out a new branch from main for your changes. The branch name should be descriptive of the issue or feature.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/CONTRIBUTING.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b \"[the name of your branch]\"\n```\n\n----------------------------------------\n\nTITLE: Adding GCC and patch binary paths to Windows environment variables\nDESCRIPTION: PowerShell command to add the necessary binary paths for GCC and patch to the system PATH environment variable. This step requires elevated privileges and is crucial for the SurrealDB compilation process on Windows.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/doc/BUILDING.md#2025-04-21_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n[System.Environment]::SetEnvironmentVariable(\n\t\"PATH\", \n\t[System.Environment]::GetEnvironmentVariable(\"PATH\", \"Machine\") + \n\t\";\" +\n\t\"C:\\msys64\\mingw64\\bin;\" +\n\t\"C:\\msys64\\mingw32\\bin;\" +\n\t\"C:\\patch\\bin;\",\n\t\"Machine\"\n)\n```\n\n----------------------------------------\n\nTITLE: Building SurrealDB for Linux ARM64\nDESCRIPTION: Docker-based build process for compiling SurrealDB for aarch64 Linux architecture. Includes installation of required dependencies and rust toolchain setup.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/doc/BUILDING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Run Docker\ndocker run -it --platform linux/arm64 -v $PWD:/code ubuntu\n# Setup\napt-get -y update\napt-get -y install \\\n\tcurl \\\n\tllvm \\\n\tcmake \\\n\tbinutils \\\n\tclang-11 \\\n\tqemu-user \\\n\tmusl-tools \\\n\tlibssl-dev \\\n\tpkg-config \\\n\tbuild-essential \\\n\tprotobuf-compiler\n# Install rustlang and cargo\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\nsource \"$HOME/.cargo/env\"\n# Add extra targets for rust\nrustup target add aarch64-unknown-linux-gnu\n# Compile for aarch64-unknown-linux-gnu\ncargo build --release --locked --target aarch64-unknown-linux-gnu\n```\n\n----------------------------------------\n\nTITLE: Cloning SurrealDB Repository\nDESCRIPTION: Commands to clone the SurrealDB repository and change to its directory.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/pkg/nix/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/surrealdb/surrealdb.git\ncd surrealdb\n```\n\n----------------------------------------\n\nTITLE: Formatting Code with Cargo\nDESCRIPTION: Command to format your code changes using Cargo's formatting tool to ensure they meet the project's style guidelines.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/CONTRIBUTING.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncargo fmt\n```\n\n----------------------------------------\n\nTITLE: Creating Data Directory for SurrealDB in Bash\nDESCRIPTION: Creates a directory called 'tempo-data' that will be used for storing SurrealDB data. This directory is required before starting the Docker Compose services.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/dev/docker/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir tempo-data\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to GitHub\nDESCRIPTION: Command to push your local branch with commits to your GitHub repository, making it available for a pull request.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/CONTRIBUTING.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin \"[the name of your branch]\"\n```\n\n----------------------------------------\n\nTITLE: Collecting Garbage in Nix\nDESCRIPTION: Command to reclaim disk space used by Nix.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/pkg/nix/README.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnix-collect-garbage -d\n```\n\n----------------------------------------\n\nTITLE: Installing GCC via MSYS2 shell for Windows SurrealDB compilation\nDESCRIPTION: Commands to install both 32-bit and 64-bit versions of GCC using the MSYS2 package manager on Windows. This is a prerequisite for compiling SurrealDB on Windows.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/doc/BUILDING.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npacman -S mingw-w64-i686-gcc\npacman -S mingw-w64-x86_64-gcc\n```\n\n----------------------------------------\n\nTITLE: Building and Starting SurrealDB with Profiling Symbols\nDESCRIPTION: Builds SurrealDB with the bench profile to preserve symbols for profiling, and starts it with in-memory storage configuration.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/profiling/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --profile bench --features=storage-mem -- start --user root --pass root memory\n```\n\n----------------------------------------\n\nTITLE: Installing cargo-fuzz with Nightly Rust\nDESCRIPTION: Command to install cargo-fuzz using the nightly Rust compiler. This is necessary for high-performance fuzzing with code-coverage feedback.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/crates/fuzz/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo +nightly install cargo-fuzz\n```\n\n----------------------------------------\n\nTITLE: Building Fuzzers for SurrealDB\nDESCRIPTION: Commands to navigate to the lib directory and build optimized fuzzers with debug assertions enabled. This prepares SurrealDB for fuzz testing.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/crates/fuzz/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd lib  \n# -O: Optimised build\n# --debug-assertions: Catch common bugs, e.g. integer overflow.\ncargo +nightly fuzz build -O --debug-assertions\n```\n\n----------------------------------------\n\nTITLE: Running Fuzzer with Parallel Processing and Dictionary\nDESCRIPTION: Advanced command to run the fuzzer using all available CPU cores and a custom dictionary file. This approach speeds up the fuzzing process and potentially improves test coverage.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/crates/fuzz/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# -fork: Run N separate process fuzzing in parallel in this case we\n#        use nproc to match the number of processors on our local\n#        machine.\n# -dict: Make use the fuzzer specific dictionary file.\ncargo +nightly fuzz run -O --debug-assertions \\\n  fuzz_executor -- -fork=$(nproc) \\\n  -dict=fuzz/fuzz_targets/fuzz_executor.dict\n```\n\n----------------------------------------\n\nTITLE: Running the DTrace Profiler\nDESCRIPTION: Executes the profile.sh script that contains the DTrace commands to start profiling SurrealDB.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/profiling/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./profiling/profile.sh\n```\n\n----------------------------------------\n\nTITLE: Profiling SurrealDB Benchmarks with CPU Flamegraph\nDESCRIPTION: Command to run benchmarks with CPU profiling enabled, generating flamegraph output for performance analysis.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/crates/sdk/benches/README.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ncargo make bench --profile-time=5\n```\n\n----------------------------------------\n\nTITLE: Installing rustfmt for Code Formatting\nDESCRIPTION: Command to install rustfmt component for ensuring consistent code formatting in SurrealDB development\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrustup component add rustfmt\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit for Running Checks\nDESCRIPTION: Optional command to install pre-commit hooks that will run checks automatically before each commit.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/CONTRIBUTING.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: SurrealDB Service Status Example\nDESCRIPTION: Example output of the service status command showing running service details.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/pkg/deb/NOTES.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n● surreal.service - SurrealDB Service\n     Loaded: loaded (/lib/systemd/system/surreal.service; enabled; vendor preset: enabled)\n     Active: active (running) since Thu 2022-08-11 23:34:35 UTC; 5min ago\n   Main PID: 23177 (surreal)\n      Tasks: 5 (limit: 4605)\n     Memory: 3.2M\n     CGroup: /system.slice/surreal.service\n             └─23177 /usr/share/surreal/surreal start --log info --user root --pass root\n```\n\n----------------------------------------\n\nTITLE: Installing Dependency Checking Tools for SurrealDB\nDESCRIPTION: Commands for installing the required tools for checking dependencies locally, including cargo-deny, cargo-vet, and cargo-acl. Also provides Docker-based installation for systems other than Linux.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/supply-chain/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo install --locked cargo-deny\ncargo install --locked cargo-vet\n\n# Linux\ncargo install --locked cargo-acl\nsudo apt install -y bubblewrap # Adapt as required\n\n# Other Systems (Docker)\n# You will need to build the following image at least once:\ndocker build -t surrealdb-local/builder --target builder -f docker/Dockerfile .\n# Disable the sandboxing configuration in favor of Docker.\nsed -i 's/kind = \"Bubblewrap\"/kind = \"Disabled\"/g' cackle.toml\n# Run Cackle interactively inside the Docker image.\ndocker run --entrypoint /bin/bash -it --rm -v $(pwd):/app -w /app surrealdb-local/builder \\\n  -c \"cargo install cargo-acl && cargo acl\"\n# Revert the sandboxing configuration before committing your changes.\nsed -i 's/kind = \"Disabled\"/kind = \"Bubblewrap\"/g' cackle.toml\n```\n\n----------------------------------------\n\nTITLE: Allowing Direnv in SurrealDB Project\nDESCRIPTION: Command to allow direnv to manage dependencies in the SurrealDB project directory.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/pkg/nix/README.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndirenv allow\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Logging for SurrealDB CLI Tests\nDESCRIPTION: Environment variable configuration for enabling debug logging output during CLI integration tests.\nSOURCE: https://github.com/surrealdb/surrealdb/blob/main/tests/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nRUST_LOG=debug\n```"
  }
]