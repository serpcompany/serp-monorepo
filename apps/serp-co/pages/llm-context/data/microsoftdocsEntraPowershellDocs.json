[
  {
    "owner": "microsoftdocs",
    "repo": "entra-powershell-docs",
    "content": "TITLE: Assign Multiple App Roles to a Service Principal\nDESCRIPTION: Assigns multiple app roles (e.g., 'Application.Read.All', 'User.Read.All') exposed by a resource application (Microsoft Graph) to a client service principal ('My application'). It retrieves both the client and resource service principals, then filters the resource's `AppRoles` to find the matching app roles.  A `ForEach` loop iterates through the filtered app roles and uses `New-EntraServicePrincipalAppRoleAssignment` to create an assignment for each role.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/how-to-grant-revoke-api-permissions.md#_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\n$permissions = 'Application.Read.All', 'User.Read.All'\n\n$clientServicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'My application'\"\n$resourceServicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Microsoft Graph'\"\n\n$appRoles = $resourceServicePrincipal.AppRoles | Where-Object { $_.Value -in $permissions }\n\nForEach ($appRole in $appRoles) {\n    New-EntraServicePrincipalAppRoleAssignment -ObjectId $clientServicePrincipal.Id `\n        -PrincipalId $clientServicePrincipal.Id -Id $appRole.Id -ResourceId $resourceServicePrincipal.Id\n}\n```\n\n----------------------------------------\n\nTITLE: Create Conditional Access Policy with All Conditions and Controls (PowerShell)\nDESCRIPTION: This example demonstrates creating a new conditional access policy in Microsoft Entra ID using all available conditions and controls. It configures client app types, application conditions, user conditions, grant controls requiring MFA, and session controls to enforce application restrictions. This comprehensive policy example illustrates the full capabilities of the New-EntraConditionalAccessPolicy cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraConditionalAccessPolicy.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ConditionalAccess','Policy.Read.All'\n\n$Condition = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessConditionSet\n$Condition.clientAppTypes = @(\"mobileAppsAndDesktopClients\",\"browser\")\n$Condition.Applications = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessApplicationCondition\n$Condition.Applications.IncludeApplications = \"00000002-0000-0ff1-ce00-000000000000\"\n$Condition.Users = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessUserCondition\n$Condition.Users.IncludeUsers = \"all\"\n\n$Controls = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessGrantControls\n$Controls._Operator = \"AND\"\n$Controls.BuiltInControls = @(\"mfa\")\n\n$SessionControls = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessSessionControls\n$ApplicationEnforcedRestrictions = New-Object Microsoft.Open.MSGraph.Model.ConditionalAccessApplicationEnforcedRestrictions\n$ApplicationEnforcedRestrictions.IsEnabled = $true\n$SessionControls.applicationEnforcedRestrictions = $ApplicationEnforcedRestrictions\nNew-EntraConditionalAccessPolicy -DisplayName 'MFA policy' -SessionControls $SessionControls -Conditions $conditions -GrantControls  $controls\n```\n\n----------------------------------------\n\nTITLE: New Conditional Access Policy with MFA Requirement (PowerShell)\nDESCRIPTION: This example demonstrates how to create a new conditional access policy in Microsoft Entra ID that requires multi-factor authentication (MFA) to access Exchange Online. It uses the New-EntraBetaConditionalAccessPolicy cmdlet with specific parameters to define the policy's conditions and grant controls.  The signed-in user must have a supported Microsoft Entra role or custom role with the necessary permissions such as Security Administrator or Conditional Access Administrator. Requires the 'Policy.ReadWrite.ConditionalAccess' and 'Policy.Read.All' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaConditionalAccessPolicy.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ConditionalAccess','Policy.Read.All'\n$conditions = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessConditionSet\n$conditions.Applications = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessApplicationCondition\n$conditions.Applications.IncludeApplications = '00000002-0000-0ff1-ce00-000000000000'\n$conditions.Users = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessUserCondition\n$conditions.Users.IncludeUsers = 'all'\n$controls = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessGrantControls\n$controls._Operator = 'OR'\n$controls.BuiltInControls = 'mfa'\nNew-EntraBetaConditionalAccessPolicy -DisplayName 'MFA policy' -State 'Enabled' -Conditions $conditions -GrantControls  $controls\n```\n\n----------------------------------------\n\nTITLE: Limiting App Sign-in to Assigned Identities\nDESCRIPTION: This snippet demonstrates how to configure a service principal to require app role assignments, limiting sign-ins to only assigned identities. It uses `Set-EntraServicePrincipal` to set the `AppRoleAssignmentRequired` property to `$true`. It requires `Application.ReadWrite.All` scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-apps.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All'\n$application = Get-EntraApplication -Filter \"DisplayName eq 'My new application'\"\nSet-EntraServicePrincipal -ServicePrincipalId $application.Id -AppRoleAssignmentRequired $true\n```\n\n----------------------------------------\n\nTITLE: Create Role-Assignable Group - PowerShell\nDESCRIPTION: This code snippet creates a new Microsoft Entra group that can be assigned to a role, using the New-EntraGroup command. It requires the Group.ReadWrite.All scope and the IsAssignableToRole parameter must be set to $True. The output displays the group's DisplayName, Id, MailNickname, Description and GroupTypes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-roles.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All'\n$params = @{\n    DisplayName = 'HelpDesk admin group2'\n    Description = 'Group assignable to role'\n    MailEnabled = $False\n    MailNickname = 'helpDeskAdminGroup'\n    SecurityEnabled = $True\n    IsAssignableToRole = $True\n}\n$group = New-EntraGroup @params\n```\n\n----------------------------------------\n\nTITLE: Removing Role Assignments - Entra PowerShell\nDESCRIPTION: This snippet removes a role assignment using the `Remove-EntraDirectoryRoleAssignment` cmdlet. It first retrieves the group and role definition, then filters the role assignments to find the one matching the group and role, and finally removes it.  It requires the 'RoleManagement.ReadWrite.Directory' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-roles.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory'\n$group = Get-EntraGroup -Filter \"DisplayName eq 'HelpDesk admin group2'\"\n$directoryRole = Get-EntraDirectoryRoleDefinition -Filter \"DisplayName eq 'Helpdesk Administrator'\"\nGet-EntraDirectoryRoleAssignment | Where-Object {$_.PrincipalId -eq $group.Id -and $_.RoleDefinitionId -eq $directoryRole.Id} | Remove-EntraDirectoryRoleAssignment\n```\n\n----------------------------------------\n\nTITLE: Search Entra Users by MailNickname - PowerShell\nDESCRIPTION: This snippet searches for a user by `mailNickname` using the `Get-EntraUser` cmdlet with the `-Filter` parameter. The `startswith` operator filters users whose mail nickname begins with 'AdeleV'.  It requires the `User.Read.All` scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-user.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraUser -Filter \"startswith(MailNickname,'AdeleV')\"\n```\n\n----------------------------------------\n\nTITLE: Delete Stale Devices - PowerShell\nDESCRIPTION: This script connects to Microsoft Entra ID, retrieves devices that haven't signed in for the last 6 months and are disabled (`AccountEnabled -eq $false`), then removes them using the `Remove-EntraDevice` cmdlet. It requires 'Device.ReadWrite.All' scope. Warning: Deleting devices is irreversible and BitLocker keys associated with these devices will be lost.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-stale-devices.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.ReadWrite.All'   \n$dt = (Get-Date).AddMonths(-6) # Devices not signed in for the last 6 months  \n  \nGet-EntraDevice -All |  \nWhere-Object {  \n    ($_.ApproximateLastSignInDateTime -le $dt) -and  \n    ($_.AccountEnabled -eq $false)  \n} |  \nRemove-EntraDevice\n```\n\n----------------------------------------\n\nTITLE: Creating User with City - New-EntraUser (PowerShell)\nDESCRIPTION: This example demonstrates creating a new user with the City parameter.  It connects to Entra ID, creates a PasswordProfile, defines user parameters (including City), and calls New-EntraUser to create the user.  This shows how to set the user's city during creation.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraUser.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\n$passwordProfile = New-Object -TypeName Microsoft.Open.AzureAD.Model.PasswordProfile\n$passwordProfile.Password = '<Password>'\n\n$userParams = @{\n    DisplayName       = 'Blake Martin'\n    PasswordProfile   = $passwordProfile\n    UserPrincipalName = 'BlakeM@contoso.com'\n    AccountEnabled    = $true\n    MailNickName      = 'BlakeM'\n    City              = 'New York'\n}\n\nNew-EntraUser @userParams\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nObjectId                             DisplayName UserPrincipalName               UserType\n--------                             ----------- -----------------               --------\ncccccccc-2222-3333-4444-dddddddddddd Blake Martin    BlakeM@contoso.com             Member\n```\n\n----------------------------------------\n\nTITLE: Create application and service principal - PowerShell\nDESCRIPTION: Creates a new application and its corresponding service principal in Microsoft Entra ID. The application is configured with a display name, redirect URI, and public client settings.  It then creates a service principal associated with the new application.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/create-custom-application.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Define application name and redirect URI\n$appName = 'Entra PowerShell Helpdesk App'\n$redirectUri = 'http://localhost'\n\n# Create a new application\n$app = New-EntraApplication -DisplayName $appName -PublicClient @{ RedirectUris = $redirectUri } -IsFallbackPublicClient $False\n\n# Create a service principal for the application\n$servicePrincipal = New-EntraServicePrincipal -AppId $app.AppId\n```\n\n----------------------------------------\n\nTITLE: Bulk Invite Guest Users - PowerShell\nDESCRIPTION: Imports a CSV file containing a list of invitee user names and email addresses, then iterates through each entry to send an invitation. A custom message is defined and sent to each invited user. Requires 'Name' and 'Email' column headings in the CSV file. The script requires the Connect-Entra command to be run beforehand to establish a connection to Microsoft Entra with User.Invite.All scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-guest-users.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Import the CSV file containing the invitations.\n$invitations = Import-Csv -Path \"c:\\bulkinvite\\invitations.csv\"\n\n# Define the message to be sent to the invited users.\n$messageBody = \"Hello. You are invited to the Contoso organization.\"\n\n# Iterate over each invitation in the CSV file.\nforeach ($invitation in $invitations) {\n    # Define the invitation parameters\n    $invitationParams = @{\n        InvitedUserEmailAddress = $invitation.Email  # Ensure this matches your CSV column name\n        InviteRedirectUrl       = \"https://contoso.com\"\n        SendInvitationMessage   = $true\n        InvitedUserMessageInfo  = @{\n            CustomizedMessageBody = $messageBody\n        }\n    }\n\n    # Create a new invitation using the defined parameters\n    New-EntraInvitation @invitationParams\n}\n```\n\n----------------------------------------\n\nTITLE: Connect to Entra ID using Certificate Name - PowerShell\nDESCRIPTION: This snippet shows how to authenticate with Microsoft Entra ID using the certificate name (subject). It defines the ClientId, TenantId, and CertificateName parameters and passes them to the Connect-Entra cmdlet. Replace 'YOUR_APP_ID', 'YOUR_TENANT_ID', and 'YOUR_CERT_SUBJECT' with your application's and tenant's information. The Microsoft Entra PowerShell module is required.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/app-only-access-auth.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n$params = @{\n    ClientId = 'YOUR_APP_ID'\n    TenantId = 'YOUR_TENANT_ID'\n    CertificateName = 'YOUR_CERT_SUBJECT'\n}\n\nConnect-Entra @params\n```\n\n----------------------------------------\n\nTITLE: Restore Administrative Unit by ID - PowerShell\nDESCRIPTION: This snippet restores a soft-deleted administrative unit in Microsoft Entra ID by its ID. It connects to Entra ID with the 'AdministrativeUnit.ReadWrite.All' scope and uses the 'Restore-EntraDeletedDirectoryObject' cmdlet to restore the administrative unit with the specified ID. The ID parameter should be the unique identifier of the deleted administrative unit.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/recover-deleted-data.md#_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.ReadWrite.All'\nRestore-EntraDeletedDirectoryObject -Id 'aaaaaaaa-bbbb-cccc-1111-222222222222'\n```\n\n----------------------------------------\n\nTITLE: Update User MFA Status - PowerShell\nDESCRIPTION: This code snippet demonstrates how to update the MFA status of a user in Microsoft Entra ID using the `Update-EntraBetaUserAuthenticationRequirement` cmdlet. It requires the `UserId` and `PerUserMfaState` parameters to specify the user and the desired MFA status (enabled, disabled, or enforced). The `Connect-Entra` cmdlet is used to establish a connection to Microsoft Entra ID with the necessary scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Update-EntraBetaUserAuthenticationRequirement.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.AuthenticationMethod'\nUpdate-EntraBetaUserAuthenticationRequirement -UserId 'SawyerM@Contoso.com' -PerUserMfaState 'enabled'\n```\n\n----------------------------------------\n\nTITLE: Connecting to Entra ID with Connect-Entra (PowerShell)\nDESCRIPTION: This code snippet demonstrates how to connect to Entra ID using the `Connect-Entra` cmdlet. It requires the `ClientId` and `TenantId` of the application you want to use for authentication.  It is necessary to have the Microsoft.Entra module installed.  The user needs to replace `<Your_APPLICATION_Id_Here>` and `<Your_TENANT_Id_Here>` with valid values.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/create-custom-application.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -ClientId <Your_APPLICATION_Id_Here> -TenantId <Your_TENANT_Id_Here>\n```\n\n----------------------------------------\n\nTITLE: Creating a Key Credential (PowerShell)\nDESCRIPTION: This example demonstrates how to create a key credential for a service principal using the New-EntraServicePrincipalKeyCredential cmdlet. It first connects to Entra ID using Connect-Entra with the 'Application.ReadWrite.All' scope. Then, it calls New-EntraServicePrincipalKeyCredential to create the credential.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraServicePrincipalKeyCredential.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All'\nNew-EntraServicePrincipalKeyCredential \n```\n\n----------------------------------------\n\nTITLE: List Users with Disabled Accounts - Entra ID - PowerShell\nDESCRIPTION: This example retrieves all users with disabled accounts by using the `-Filter` parameter. It filters for users where the `accountEnabled` property is equal to `false`. Requires 'User.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUser.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraUser -Filter \"accountEnabled eq false\" | Select-Object DisplayName, Id, Mail, UserPrincipalName\n```\n\n----------------------------------------\n\nTITLE: New Conditional Access Policy Using All Conditions and Controls (PowerShell)\nDESCRIPTION: This example showcases the creation of a new conditional access policy in Microsoft Entra ID using all available conditions and controls. It configures client application types, applications, users, grant controls with the AND operator, and session controls to enforce application restrictions. The signed-in user must have a supported Microsoft Entra role or custom role with the necessary permissions such as Security Administrator or Conditional Access Administrator. Requires the 'Policy.ReadWrite.ConditionalAccess' and 'Policy.Read.All' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaConditionalAccessPolicy.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ConditionalAccess','Policy.Read.All'\n\n$Condition = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessConditionSet\n$Condition.clientAppTypes = @(\"mobileAppsAndDesktopClients\",\"browser\")\n$Condition.Applications = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessApplicationCondition\n$Condition.Applications.IncludeApplications = \"00000002-0000-0ff1-ce00-000000000000\"\n$Condition.Users = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessUserCondition\n$Condition.Users.IncludeUsers = \"all\"\n\n$Controls = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessGrantControls\n$Controls._Operator = \"AND\"\n$Controls.BuiltInControls = @(\"mfa\")\n\n$SessionControls = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessSessionControls\n$ApplicationEnforcedRestrictions = New-Object Microsoft.Open.MSGraph.Model.ConditionalAccessApplicationEnforcedRestrictions\n$ApplicationEnforcedRestrictions.IsEnabled = $true\n$SessionControls.applicationEnforcedRestrictions = $ApplicationEnforcedRestrictions\nNew-EntraBetaConditionalAccessPolicy -DisplayName 'MFA policy' -SessionControls $SessionControls -Conditions $conditions -GrantControls  $controls\n```\n\n----------------------------------------\n\nTITLE: Connect to Entra ID using Client Secret - PowerShell\nDESCRIPTION: This snippet illustrates how to connect to Microsoft Entra ID using a client secret. It defines the Application (Client) ID, Secret, and Tenant ID, converts the client secret to a secure string, creates a PSCredential object, and then uses the Connect-Entra cmdlet with the TenantId and ClientSecretCredential parameters.  Replace '<application(client)ID>', '<secret.value>', and 'Tenant_Id' with appropriate values.  Requires the Microsoft Entra PowerShell module and PowerShell 7 or higher is recommended.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/app-only-access-auth.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Define the Application (Client) ID and Secret\n$applicationClientId = '<application(client)ID>' # Application (Client) ID\n$applicationClientSecret = '<secret.value>' # Application Secret Value\n$tenantId = 'Tenant_Id' # Tenant ID\n\n# Convert the Client Secret to a Secure String\n$secureClientSecret = ConvertTo-SecureString -String $applicationClientSecret -AsPlainText -Force\n\n# Create a PSCredential Object Using the Client ID and Secure Client Secret\n$clientSecretCredential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $applicationClientId, $secureClientSecret\n\n# Connect to Microsoft Graph Using the Tenant ID and Client Secret Credential\nConnect-Entra -TenantId $tenantId -ClientSecretCredential $clientSecretCredential\n```\n\n----------------------------------------\n\nTITLE: Connect to Microsoft Entra ID\nDESCRIPTION: Connects a PowerShell session to a Microsoft Entra ID tenant using user credentials interactively. This is the simplest way to connect and relies on the user providing their credentials when prompted.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Connect-Entra.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra\n```\n\n----------------------------------------\n\nTITLE: Search Entra Users by JobTitle - PowerShell\nDESCRIPTION: This snippet searches for users with a specific job title using the `Get-EntraUser` cmdlet with the `-Filter` parameter. The `eq` operator filters users whose job title matches 'Retail Manager'. It requires the `User.Read.All` scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-user.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraUser -Filter \"jobTitle eq 'Retail Manager'\"\n```\n\n----------------------------------------\n\nTITLE: Get All Applications - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all applications from Microsoft Entra ID.  It requires the 'Application.Read.All' scope and connects to Entra ID before executing the Get-EntraApplication cmdlet with the -All parameter.  The output displays a list of applications with their DisplayName, Id, AppId, SignInAudience, and PublisherDomain.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplication.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraApplication -All\n```\n\n----------------------------------------\n\nTITLE: Create Entra Group using New-EntraGroup Cmdlet\nDESCRIPTION: This example demonstrates how to create a new Microsoft Entra ID group using the New-EntraGroup cmdlet. It includes connecting to Entra ID with appropriate scopes and defining parameters such as DisplayName, MailEnabled, MailNickname, and SecurityEnabled.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraGroup.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All','Group.Create'\n$params = @{\n    DisplayName = 'HelpDesk admin group2'\n    MailEnabled = $False\n    MailNickname = 'helpDeskAdminGroup'\n    SecurityEnabled = $True\n}\n\nNew-EntraGroup @params\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDisplayName           Id                                   MailNickname       Description GroupTypes\n-----------           --                                   ------------       ----------- ----------\nHelpDesk admin group2 bbbbbbbb-5555-5555-0000-qqqqqqqqqqqq helpDeskAdminGroup             {}\n```\n\n----------------------------------------\n\nTITLE: Assign App Role to Group - PowerShell\nDESCRIPTION: This example demonstrates how to assign an app role to a group in Microsoft Entra ID. It retrieves the service principal and group using Get-EntraBetaServicePrincipal and Get-EntraBetaGroup respectively, and then assigns the role using New-EntraBetaServicePrincipalAppRoleAssignment. It requires the 'AppRoleAssignment.ReadWrite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaServicePrincipalAppRoleAssignment.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AppRoleAssignment.ReadWrite.All'\n$servicePrincipalObject = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Box'\"\n$group = Get-EntraBetaGroup -Filter \"displayName eq 'Contoso marketing'\"\n\nNew-EntraBetaServicePrincipalAppRoleAssignment `\n    -ServicePrincipalId $servicePrincipalObject.Id `\n    -ResourceId $servicePrincipalObject.Id `\n    -AppRoleId $servicePrincipalObject.Approles[1].Id `\n    -PrincipalId $group.Id\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple User Properties - Set-EntraUser (PowerShell)\nDESCRIPTION: This example demonstrates updating multiple user properties by using a hashtable to define the parameters. This approach allows to set multiple attributes in a single call to `Set-EntraUser`, such as `City`, `CompanyName`, `Country`, `Department`, etc.  The `Connect-Entra` establishes a connection before the properties are updated.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUser.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\n$params = @{\n    UserId           = 'SawyerM@contoso.com'\n    City             = 'Add city name'\n    CompanyName      = 'Microsoft'\n    Country          = 'Add country name'\n    Department       = 'Add department name'\n    GivenName        = 'Sawyer Miller G'\n    JobTitle         = 'Manager'\n    MailNickName     = 'Add mailnickname'\n    Mobile           = '9984534564'\n    OtherMails       = 'johndoe@contosodev.com'\n    PasswordPolicies = 'DisableStrongPassword'\n    State            = 'UP'\n    StreetAddress    = 'Add address'\n    UserType         = 'Member'\n}\nSet-EntraUser @params\n```\n\n----------------------------------------\n\nTITLE: Create Conditional Access Policy with MFA for Exchange Online (PowerShell)\nDESCRIPTION: This example demonstrates how to create a new conditional access policy in Microsoft Entra ID that requires multi-factor authentication (MFA) to access Exchange Online.  It configures the conditions to include all users and the Exchange Online application, then sets the grant controls to require MFA. The signed-in user must have a supported Microsoft Entra role such as Security Administrator or Conditional Access Administrator.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraConditionalAccessPolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ConditionalAccess','Policy.Read.All'\n$conditions = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessConditionSet\n$conditions.Applications = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessApplicationCondition\n$conditions.Applications.IncludeApplications = '00000002-0000-0ff1-ce00-000000000000'\n$conditions.Users = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessUserCondition\n$conditions.Users.IncludeUsers = 'all'\n$controls = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessGrantControls\n$controls._Operator = 'OR'\n$controls.BuiltInControls = 'mfa'\nNew-EntraConditionalAccessPolicy -DisplayName 'MFA policy' -State 'Enabled' -Conditions $conditions -GrantControls  $controls\n```\n\n----------------------------------------\n\nTITLE: Connect with Scopes\nDESCRIPTION: Connects to Microsoft Entra ID with specific scopes.  This requires the user to consent to the requested permissions. The scopes parameter defines the permissions that the PowerShell session will have.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Connect-Entra.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All', 'Group.ReadWrite.All'\n```\n\n----------------------------------------\n\nTITLE: Updating Microsoft Entra PowerShell Module - PowerShell\nDESCRIPTION: This snippet shows how to update the Microsoft Entra PowerShell module to the latest version. Keeping the module up to date ensures you have the latest features, enhancements, and security fixes. Requires the PowerShellGet module to be installed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/entra-powershell-best-practices.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-Module -Name Microsoft.Entra\n```\n\n----------------------------------------\n\nTITLE: Create a New Entra User - PowerShell\nDESCRIPTION: This snippet demonstrates how to create a new user in Microsoft Entra ID using the `New-EntraUser` cmdlet. It defines a password profile and user parameters, including display name, password, user principal name, account enabled status, and mail nickname.  It requires the `User.ReadWrite.All` scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-user.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\n$passwordProfile = New-Object -TypeName Microsoft.Open.AzureAD.Model.PasswordProfile\n$passwordProfile.Password = '<Strong-Password>'\n$userParams = @{\n    DisplayName = 'New User'\n    PasswordProfile = $passwordProfile\n    UserPrincipalName = 'NewUser@contoso.com'\n    AccountEnabled = $true\n    MailNickName = 'NewUser'\n}\nNew-EntraUser @userParams\n```\n\n----------------------------------------\n\nTITLE: Remove Entra Policy Example - PowerShell\nDESCRIPTION: This snippet demonstrates how to remove a specific policy from Microsoft Entra ID using the Remove-EntraPolicy cmdlet. It first connects to Entra ID with appropriate scopes, retrieves the desired policy using Get-EntraPolicy, and then removes it using its ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraPolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.ApplicationConfiguration'\n$policy = Get-EntraPolicy | Where-Object { $_.DisplayName -eq 'Microsoft User Default Recommended Policy' }\nRemove-EntraPolicy -Id $policy.Id\n```\n\n----------------------------------------\n\nTITLE: Update AccountEnabled of Service Principal - PowerShell\nDESCRIPTION: This example demonstrates how to update the AccountEnabled property of a service principal in Microsoft Entra ID using the Set-EntraServicePrincipal cmdlet. It first connects to Entra ID, retrieves the service principal by display name, and then updates the AccountEnabled property.  It requires the Application.ReadWrite.All and Application.ReadWrite.OwnedBy scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraServicePrincipal.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nSet-EntraServicePrincipal -ServicePrincipalId $servicePrincipal.Id -AccountEnabled $false\n```\n\n----------------------------------------\n\nTITLE: List users with a specific license - PowerShell\nDESCRIPTION: This script retrieves a list of users who have a specific license assigned. It connects to Entra with User.Read.All scope.  It first retrieves the SkuId for the 'POWERAPPS_DEV' license. Then, it uses this SkuId to filter users who have that license assigned and selects specific properties to display in a formatted table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUser.md#_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\n$skuId = (Get-EntraSubscribedSku | Where-Object { $_.SkuPartNumber -eq 'POWERAPPS_DEV' }).SkuId\nGet-EntraUser -Filter \"assignedLicenses/any(l:l/skuId eq $skuId)\" -Select id, displayName, userPrincipalName, userType, accountEnabled, assignedLicenses |\nSelect-Object id, displayName, userPrincipalName, userType, accountEnabled | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Add member to a group - PowerShell\nDESCRIPTION: This example demonstrates how to add a user to a Microsoft Entra group. It first connects to Entra ID with the required scope, then retrieves the group and user objects using their display names and user ID respectively. Finally, it uses Add-EntraGroupMember to add the user to the specified group. The GroupMember.ReadWrite.All scope is required.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Add-EntraGroupMember.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.ReadWrite.All'\n$group = Get-EntraGroup -Filter \"DisplayName eq 'Contoso Marketing Group'\"\n$user = Get-EntraUser -UserId 'SawyerM@contoso.com'\nAdd-EntraGroupMember -GroupId $group.Id -MemberId $user.Id\n```\n\n----------------------------------------\n\nTITLE: Update Custom Security Attribute - PowerShell\nDESCRIPTION: This PowerShell script updates a custom security attribute definition. It first connects to Entra ID, retrieves the desired attribute definition (identified by name 'Engineering'), and then uses `Set-EntraCustomSecurityAttributeDefinition` to update its description, status, and `UsePreDefinedValuesOnly` properties.\n\nDependencies: Requires the Microsoft.Entra module and appropriate permissions (CustomSecAttributeDefinition.Read.All, CustomSecAttributeDefinition.ReadWrite.All).\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraCustomSecurityAttributeDefinition.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'CustomSecAttributeDefinition.Read.All', 'CustomSecAttributeDefinition.ReadWrite.All'\n$attributeDefinition = Get-EntraCustomSecurityAttributeDefinition | Where-Object { $_.Name -eq 'Engineering' }\nSet-EntraCustomSecurityAttributeDefinition -Id $attributeDefinition.Id -Description 'Engineering Description' -Status 'Available' -UsePreDefinedValuesOnly $false\n```\n\n----------------------------------------\n\nTITLE: Get Applications with Expiring Secrets - PowerShell\nDESCRIPTION: This example retrieves applications with expiring secrets within 30 days. It calculates the expiration threshold, then filters applications to find those with PasswordCredentials expiring soon. The result is formatted into a table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplication.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n$expirationThreshold = (Get-Date).AddDays(30)\n$appsWithExpiringPasswords = Get-EntraBetaApplication -All | Where-Object { $_.PasswordCredentials } |\nForEach-Object {\n    $app = $_\n    $app.PasswordCredentials | Where-Object { $_.EndDate -le $expirationThreshold } |\n    ForEach-Object {\n        [PSCustomObject]@{\n            DisplayName       = $app.DisplayName\n            AppId             = $app.AppId\n            SecretDisplayName = $_.DisplayName\n            KeyId             = $_.KeyId\n            ExpiringSecret    = $_.EndDate\n        }\n    }\n}\n$appsWithExpiringPasswords | Format-Table DisplayName, AppId, SecretDisplayName, KeyId, ExpiringSecret -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Remove a user\nDESCRIPTION: Removes a user from Microsoft Entra ID using their User ID. It first connects to Entra ID with appropriate scopes and then executes the Remove-EntraUser cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraUser.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nRemove-EntraUser -UserId 'SawyerM@Contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Assign an app role to a group - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to assign an application role to a group using the `New-EntraServicePrincipalAppRoleAssignment` cmdlet. It retrieves the service principal and group objects, then assigns a specific app role to that group. Note the use of backticks for line continuation.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraServicePrincipalAppRoleAssignment.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AppRoleAssignment.ReadWrite.All'\n$servicePrincipalObject = Get-EntraServicePrincipal -Filter \"displayName eq 'Box'\"\n$group = Get-EntraGroup -Filter \"displayName eq 'Contoso marketing'\"\n\nNew-EntraServicePrincipalAppRoleAssignment `\n    -ServicePrincipalId $servicePrincipalObject.Id `\n    -ResourceId $servicePrincipalObject.Id `\n    -Id $servicePrincipalObject.Approles[1].Id `\n    -PrincipalId $group.Id\n```\n\n----------------------------------------\n\nTITLE: Search Applications by String - PowerShell\nDESCRIPTION: This example demonstrates how to search for applications using a specific string in their properties. It requires the 'Application.Read.All' scope and connects to Entra ID before executing the Get-EntraApplication cmdlet with the -SearchString parameter. The output displays applications matching the search criteria.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplication.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraApplication -SearchString 'My new application 2'\n```\n\n----------------------------------------\n\nTITLE: Create Application Key Credential PowerShell\nDESCRIPTION: This example demonstrates how to create a new application key credential using the `New-EntraApplicationKeyCredential` cmdlet. It retrieves an application by its display name, then constructs a parameter hash table to specify the key's properties, including its ID, start date, type, usage, and value. Requires 'Application.ReadWrite.All' and 'Application.ReadWrite.OwnedBy' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplicationKeyCredential.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\n$params = @{\n    ApplicationId = $application.Id\n    CustomKeyIdentifier = 'EntraPowerShellKey'\n    StartDate = '2024-03-21T14:14:14Z'\n    Type = 'Symmetric'\n    Usage = 'Sign'\n    Value = '<my-value>'\n}\nNew-EntraApplicationKeyCredential @params\n```\n\n----------------------------------------\n\nTITLE: Setting Account Enabled Status - Set-EntraUser (PowerShell)\nDESCRIPTION: This example shows how to set the `AccountEnabled` parameter for a user. The example uses `Connect-Entra` to authorize with required scopes, then updates the `AccountEnabled` property for the given `UserId`. The `-AccountEnabled` parameter takes a boolean value, `$true` in this case, to enable the account.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUser.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nSet-EntraUser -UserId 'SawyerM@contoso.com' -AccountEnabled $true\n```\n\n----------------------------------------\n\nTITLE: Get Password Credential for Application (PowerShell)\nDESCRIPTION: Demonstrates how to retrieve the password credential for a specified Microsoft Entra ID application. It first connects to Entra using `Connect-Entra` with the 'Application.Read.All' scope, then retrieves the application object using `Get-EntraApplication` based on its display name, and finally uses `Get-EntraApplicationPasswordCredential` with the application's ID to fetch the password credential.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplicationPasswordCredential.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$application = Get-EntraApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\nGet-EntraApplicationPasswordCredential -ApplicationId $application.Id\n```\n\n----------------------------------------\n\nTITLE: Creating PasswordProfile Object in PowerShell\nDESCRIPTION: This code snippet demonstrates how to create a PasswordProfile object using New-Object in PowerShell, set the password, and potentially other attributes like EnforceChangePasswordPolicy and ForceChangePasswordNextLogin. This PasswordProfile object can be passed to the New-EntraUser cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraUser.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\n$passwordProfile = New-Object -TypeName Microsoft.Open.AzureAD.Model.PasswordProfile\n\n$passwordProfile.Password = \"\\<Password\\>\"\n\nNew-EntraUser -PasswordProfile $passwordProfile ...\n\n$passwordProfile.EnforceChangePasswordPolicy\n\n$passwordProfile.ForceChangePasswordNextLogin\n```\n\n----------------------------------------\n\nTITLE: New Conditional Access Policy Blocking Access from Untrusted Regions (PowerShell)\nDESCRIPTION: This example demonstrates how to create a new conditional access policy in Microsoft Entra ID that blocks access to Exchange Online from non-trusted regions. It uses the New-EntraBetaConditionalAccessPolicy cmdlet with specific parameters, including location conditions and grant controls to block access. The signed-in user must have a supported Microsoft Entra role or custom role with the necessary permissions such as Security Administrator or Conditional Access Administrator. Requires the 'Policy.ReadWrite.ConditionalAccess' and 'Policy.Read.All' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaConditionalAccessPolicy.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ConditionalAccess','Policy.Read.All'\n$conditions = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessConditionSet\n$conditions.Applications = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessApplicationCondition\n$conditions.Applications.IncludeApplications = '00000002-0000-0ff1-ce00-000000000000'\n$conditions.Users = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessUserCondition\n$conditions.Users.IncludeUsers = 'all'\n$conditions.Locations = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessLocationCondition\n$conditions.Locations.IncludeLocations = '5eeeeee5-6ff6-7aa7-8bb8-9cccccccccc9'\n$controls = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessGrantControls\n$controls._Operator = 'OR'\n$controls.BuiltInControls = 'block'\nNew-EntraBetaConditionalAccessPolicy -DisplayName 'MFA policy' -State 'Enabled' -Conditions $conditions -GrantControls  $controls\n```\n\n----------------------------------------\n\nTITLE: Creating User with Department - New-EntraUser (PowerShell)\nDESCRIPTION: This example illustrates how to create a new Entra ID user and set the Department attribute during user creation. The script establishes a connection to Entra ID, creates a PasswordProfile, and defines a hashtable of user properties including Department. The New-EntraUser cmdlet is then invoked with the user parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraUser.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\n$passwordProfile = New-Object -TypeName Microsoft.Open.AzureAD.Model.PasswordProfile\n$passwordProfile.Password = '<Password>'\n$userParams = @{\n    DisplayName       = 'Parker Jones'\n    PasswordProfile   = $passwordProfile\n    UserPrincipalName = 'ParkerJ@contoso.com'\n    AccountEnabled    = $true\n    MailNickName      = 'ParkerJ'\n    Department        = 'IT'\n}\n\nNew-EntraUser @userParams\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nObjectId                             DisplayName UserPrincipalName               UserType\n--------                             ----------- -----------------               --------\ndddddddd-3333-4444-5555-eeeeeeeeeeee Parker Jones    ParkerJ@contoso.com             Member\n```\n\n----------------------------------------\n\nTITLE: List Inactive Users with Active Licenses - PowerShell\nDESCRIPTION: This snippet identifies and lists inactive users who still have active licenses assigned in Entra ID. It connects to Entra ID with the `User.Read.All` scope and filters users based on the `accountEnabled` property being false. The output is then formatted into a table displaying user details like ID, DisplayName, UserPrincipalName, and AccountEnabled.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/how-to-manage-user-licenses.md#_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\n$disabledUsersWithLicenses = Get-EntraUser -Filter \"accountEnabled eq false\" -All | Where-Object {\n    $_.AssignedLicenses -ne $null -and $_.AssignedLicenses.Count -gt 0\n}\n$disabledUsersWithLicenses | Select-Object Id, DisplayName, UserPrincipalName, AccountEnabled | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Remove Service Principal Example - PowerShell\nDESCRIPTION: Demonstrates how to remove a service principal using the Remove-EntraServicePrincipal cmdlet.  It first connects to Entra ID with necessary scopes, then retrieves the service principal using Get-EntraServicePrincipal based on display name, and pipes the result to Remove-EntraServicePrincipal for deletion.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraServicePrincipal.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\nGet-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\" | Remove-EntraServicePrincipal\n```\n\n----------------------------------------\n\nTITLE: Create Service Principal with DisplayName, AccountEnabled, Tags, AppRoleAssignmentRequired\nDESCRIPTION: This example shows how to create a new service principal using the DisplayName, AccountEnabled, Tags, and AppRoleAssignmentRequired parameters. It retrieves an application by its display name using Get-EntraBetaApplication and then creates the service principal with the specified parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaServicePrincipal.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraBetaApplication -Filter \"DisplayName eq 'Helpdesk Application'\"\n$params = @{\n    AccountEnabled = $true \n    AppId = $application.AppId \n    AppRoleAssignmentRequired = $true \n    DisplayName = $application.DisplayName \n    Tags = {WindowsAzureActiveDirectoryIntegratedApp}\n}\nNew-EntraBetaServicePrincipal @params\n```\n\nLANGUAGE: powershell\nCODE:\n```\nDisplayName Id                                   AppId                                SignInAudience ServicePrincipalType\n----------- --                                   -----                                -------------- --------------------\nHelpdesk Application    bbbbbbbb-1111-2222-3333-cccccccccccc 00001111-aaaa-2222-bbbb-3333cccc4444 AzureADMyOrg   Application\n```\n\n----------------------------------------\n\nTITLE: New Entra Application Password Credential - Basic\nDESCRIPTION: This example demonstrates how to create a new password credential for a specified application using the `New-EntraApplicationPasswordCredential` cmdlet. It first connects to Entra ID with necessary scopes and retrieves the application object before creating the credential using the application's ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplicationPasswordCredential.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraApplication -Filter \"displayName eq '<displayName>'\"\nNew-EntraApplicationPasswordCredential -ApplicationId $application.Id\n```\n\n----------------------------------------\n\nTITLE: Retrieve User Extension Attributes - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve the extension attributes for a specified user. It first connects to Entra ID with the 'User.Read' scope, then uses `Get-EntraBetaUserExtension` with the `-UserId` parameter to specify the target user by their UserPrincipalName.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserExtension.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read'\nGet-EntraBetaUserExtension -UserId 'SawyerM@contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Retrieve all guest users - PowerShell\nDESCRIPTION: This script retrieves all guest users from Entra ID using the Get-EntraUser cmdlet with a filter. It retrieves all users whose userType is 'Guest'. The -All parameter is used to ensure all guest users are retrieved, regardless of the default page size.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-guest-users.md#_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\n$guestUsers = Get-EntraUser -Filter \"userType eq 'Guest'\" -All\n```\n\n----------------------------------------\n\nTITLE: Assign application permissions - PowerShell\nDESCRIPTION: Assigns application permissions to the application by creating a service principal app role assignment.  This allows the application to act without a user present.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/create-custom-application.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\n$applicationPermission = 'Group.Read.All'\n$graphApiId = '00000003-0000-0000-c000-000000000000'\n$graphServicePrincipal = Get-EntraServicePrincipal -Filter \"AppId eq '$graphApiId'\"\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"DisplayName eq '$appName'\"\n\n# Get application role ID\n$appRoleId = ($graphServicePrincipal.AppRoles | Where-Object { $_.Value -eq $applicationPermission }).Id\n\nNew-EntraServicePrincipalAppRoleAssignment -ObjectId $servicePrincipal.Id -ResourceId $graphServicePrincipal.Id -Id $appRoleId -PrincipalId $servicePrincipal.Id\n```\n\n----------------------------------------\n\nTITLE: Show User Additions to a Group - PowerShell\nDESCRIPTION: This PowerShell code retrieves audit logs to determine when users were added to a specific Entra ID group. It first connects to Entra ID with the necessary scopes, then retrieves the group ID using `Get-EntraGroup`, and finally uses `Get-EntraAuditDirectoryLog` with a filter to find 'Add member to group' events related to the specified group and users. The filter ensures that only audit logs related to user additions to the specified group are returned.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAuditDirectoryLog.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All, Directory.Read.All'\n$groupId = (Get-EntraGroup -SearchString 'Contoso Group').Id\nGet-EntraAuditDirectoryLog -Filter \"\n    activityDisplayName eq 'Add member to group' \n    and targetResources/any(r:r/type eq 'User') \n    and targetResources/any(r:r/id eq '$groupId' and r/type eq 'Group')\"\n```\n\n----------------------------------------\n\nTITLE: Create Password Credential with StartDate - PowerShell\nDESCRIPTION: This PowerShell snippet creates a new password credential for a service principal in Microsoft Entra ID, specifying a start date for the credential's validity. It requires the `Application.ReadWrite.All` and `Application.ReadWrite.OwnedBy` scopes. The `Connect-Entra` cmdlet establishes the connection, `Get-EntraServicePrincipal` retrieves the service principal, and `New-EntraServicePrincipalPasswordCredential` creates the password with the specified parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraServicePrincipalPasswordCredential.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nNew-EntraServicePrincipalPasswordCredential -ServicePrincipalId $servicePrincipal.Id -DisplayName 'Helpdesk App Credential' -StartDate '2024-11-04T14:14:14Z'\n```\n\n----------------------------------------\n\nTITLE: Get a list of recently updated user's registered authentication methods details\nDESCRIPTION: This example shows how to retrieve user registration details, sorted by the `lastUpdatedDateTime` property in descending order.  It connects with `Connect-Entra`, then calls `Get-EntraBetaAuthenticationMethodUserRegistrationDetailReport` with the `-All` parameter to retrieve all records.  The `-Sort` parameter specifies the sorting property and direction, and `-Limit` restricts the output to the top 4 results.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAuthenticationMethodUserRegistrationDetailReport.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All'\nGet-EntraBetaAuthenticationMethodUserRegistrationDetailReport -All -Sort 'lastUpdatedDateTime desc' -Limit 4 | Format-Table -AutoSize\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                   IsAdmin IsMfaCapable IsMfaRegistered IsPasswordlessCapable IsSsprCapable \n--                                   ------- ------------ --------------- --------------------- -------------\naaaaaaaa-0000-1111-2222-bbbbbbbbbbbb True    False        False           False                 True \n```\n\n----------------------------------------\n\nTITLE: Get Specific Administrative Unit by ID - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a specific administrative unit by its ID using the `-AdministrativeUnitId` parameter. It requires the 'AdministrativeUnit.Read.All' scope. The output displays the details of the specified administrative unit, including its properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAdministrativeUnit.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.Read.All'\nGet-EntraAdministrativeUnit -AdministrativeUnitId 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb'\n```\n\n----------------------------------------\n\nTITLE: List SAML Application Details - PowerShell\nDESCRIPTION: This PowerShell snippet retrieves details of all SAML applications in Entra ID. It connects to Entra ID using Connect-Entra with the 'Application.Read.All' scope, filters service principals to those with PreferredSingleSignOnMode set to 'saml', and then selects and formats specific properties for display.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipal.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"PreferredSingleSignOnMode eq 'saml'\"\n$servicePrincipal | Select-Object Id, DisplayName, AccountEnabled, AppId, PreferredSingleSignOnMode, AppRoleAssignmentRequired, SignInAudience, NotificationEmailAddresses, PreferredTokenSigningKeyEndDateTime, PreferredTokenSigningKeyValid, ReplyUrls,LoginUrl, LogoutUrl | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get all sign-in audit logs - PowerShell\nDESCRIPTION: This example retrieves all sign-in audit logs from Microsoft Entra ID. It first establishes a connection to Entra ID with the necessary scopes for reading audit logs and directory information, and then uses the `Get-EntraAuditSignInLog` cmdlet with the `-All` parameter to fetch all available logs. The output displays key properties of each sign-in event, such as ID, application display name, application ID, token protection status, authentication methods used, and authentication protocol.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAuditSignInLog.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All','Directory.Read.All'\nGet-EntraAuditSignInLog -All\n```\n\n----------------------------------------\n\nTITLE: Get Applications with Expiring Secrets - PowerShell\nDESCRIPTION: This example retrieves applications with expiring secrets within the next 30 days.  It calculates the expiration threshold, filters applications with PasswordCredentials, and then filters those credentials for expiry dates within the threshold. The result is formatted into a table displaying DisplayName, AppId, SecretDisplayName, KeyId, and ExpiringSecret.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplication.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$expirationThreshold = (Get-Date).AddDays(30)\n$appsWithExpiringPasswords = Get-EntraApplication -All | Where-Object { $_.PasswordCredentials } |\nForEach-Object {\n    $app = $_\n    $app.PasswordCredentials | Where-Object { $_.EndDate -le $expirationThreshold } |\n    ForEach-Object {\n        [PSCustomObject]@{\n            DisplayName       = $app.DisplayName\n            AppId             = $app.AppId\n            SecretDisplayName = $_.DisplayName\n            KeyId             = $_.KeyId\n            ExpiringSecret    = $_.EndDate\n        }\n    }\n}\n$appsWithExpiringPasswords | Format-Table DisplayName, AppId, SecretDisplayName, KeyId, ExpiringSecret -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get a group by DisplayName - PowerShell\nDESCRIPTION: This PowerShell snippet retrieves a group from Microsoft Entra ID based on its DisplayName.  It establishes a connection using Connect-Entra with the necessary scopes and employs Get-EntraGroup in conjunction with the `-Filter` parameter to locate a group where the DisplayName matches the specified criteria.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraGroup.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All'\nGet-EntraGroup -Filter \"DisplayName eq 'Azure Panda'\"\n```\n\n----------------------------------------\n\nTITLE: Set User Password - Example 1 (PowerShell)\nDESCRIPTION: Sets the password for a specified user in Microsoft Entra ID.  It connects to Entra ID, converts a plain-text password to a secure string, and then uses the `Set-EntraUserPassword` cmdlet to set the password for the given user ID.  Requires the 'Directory.AccessAsUser.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUserPassword.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.AccessAsUser.All'\n$newPassword = '<strong-password>'\n$securePassword = ConvertTo-SecureString $newPassword -AsPlainText -Force\nSet-EntraUserPassword -UserId 'SawyerM@contoso.com' -Password $securePassword\n```\n\n----------------------------------------\n\nTITLE: Get Application by identifierUris - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve an application by its identifierUris.  It requires the 'Application.Read.All' scope and uses the -Filter parameter with an OData query to filter based on identifier URIs. The output displays the application properties matching the specified identifier URI.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplication.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraApplication -Filter \"identifierUris/any(uri:uri eq 'https://wingtips.wingtiptoysonline.com')\"\n```\n\n----------------------------------------\n\nTITLE: Get Scoped Role Administrator - PowerShell\nDESCRIPTION: This PowerShell snippet retrieves a scoped role administrator within a specified administrative unit. It first connects to Entra with the 'RoleManagement.Read.Directory' scope, then retrieves a specific role (e.g., 'Helpdesk Administrator') and administrative unit (e.g., 'Pacific Administrative Unit'). Finally, it retrieves the scoped role membership based on the administrative unit ID and role ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaScopedRoleMembership.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory'\n$role = Get-EntraBetaDirectoryRole -Filter \"DisplayName eq 'Helpdesk Administrator'\" \n$administrativeUnit = Get-EntraBetaAdministrativeUnit -Filter \"DisplayName eq 'Pacific Administrative Unit'\"\n$roleMembership = Get-EntraBetaScopedRoleMembership -AdministrativeUnitId $administrativeUnit.Id | Where-Object {$_.RoleId -eq $role.Id}\nGet-EntraBetaScopedRoleMembership -AdministrativeUnitId $administrativeUnit.Id -ScopedRoleMembershipId $roleMembership.Id\n```\n\n----------------------------------------\n\nTITLE: Enable Directory Role in Entra ID - PowerShell\nDESCRIPTION: This example demonstrates how to enable a directory role in Microsoft Entra ID using the Enable-EntraBetaDirectoryRole cmdlet. It first connects to Entra ID with the necessary scopes, then retrieves the desired role template using Get-EntraBetaDirectoryRoleTemplate, and finally enables the role using its RoleTemplateId. Requires the Microsoft.Entra.Beta module and appropriate permissions (Privileged Role Administrator).\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Enable-EntraBetaDirectoryRole.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory'\n$guestRole = Get-EntraBetaDirectoryRoleTemplate | Where-Object {$_.DisplayName -eq 'Guest Inviter'}\nEnable-EntraBetaDirectoryRole -RoleTemplateId $guestRole.Id\n```\n\n----------------------------------------\n\nTITLE: Updating Password Policies - Set-EntraUser (PowerShell)\nDESCRIPTION: This example shows how to update password policies for a user. It retrieves the user with `Get-EntraUser`, then pipes the object to `Set-EntraUser`, setting `-PasswordPolicies` to `DisablePasswordExpiration`. `Connect-Entra` is used to authorize the session.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUser.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nGet-EntraUser -UserId 'SawyerM@contoso.com' | Set-EntraUser -PasswordPolicies DisablePasswordExpiration\n```\n\n----------------------------------------\n\nTITLE: Get User by MailNickname - Entra ID - PowerShell\nDESCRIPTION: This example demonstrates retrieving users by filtering based on their MailNickname. It uses the `startsWith` function in the `-Filter` parameter to find users whose MailNickname begins with 'Ada'. Requires 'User.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUser.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraUser -Filter \"startsWith(MailNickname,'Ada')\"\n```\n\n----------------------------------------\n\nTITLE: Create Password Credential with EndDate - PowerShell\nDESCRIPTION: This PowerShell snippet creates a password credential for a service principal using the `EndDate` parameter to define the expiration date. It requires the `Application.ReadWrite.All` and `Application.ReadWrite.OwnedBy` scopes.  It begins by connecting to Entra ID, retrieving the target service principal, and then calling `New-EntraServicePrincipalPasswordCredential` with the service principal's ID, a display name, and the desired end date in ISO 8601 format.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraServicePrincipalPasswordCredential.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nNew-EntraServicePrincipalPasswordCredential -ServicePrincipalId $servicePrincipal.Id -DisplayName 'Helpdesk App Credential' -EndDate '2024-11-04T14:14:14Z'\n```\n\n----------------------------------------\n\nTITLE: Remove Key Credential Example - PowerShell\nDESCRIPTION: Demonstrates how to remove a specific key credential from an application. It first connects to Entra ID using specific scopes, then retrieves an application by its display name. Finally, it calls `Remove-EntraBetaApplicationKeyCredential` to remove the key using the application ID and key ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaApplicationKeyCredential.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraBetaApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\nRemove-EntraBetaApplicationKeyCredential -ApplicationId $application.Id -KeyId 'aaaaaaaa-0b0b-1c1c-2d2d-333333333333'\n```\n\n----------------------------------------\n\nTITLE: List all guest users - PowerShell\nDESCRIPTION: This script retrieves a list of all guest users in the Entra ID. It connects to Entra with User.Read.All scope. It filters for users with 'Guest' userType, selects specific properties, and formats the output as a table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUser.md#_snippet_15\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\n$guestUsers = Get-EntraUser -Filter \"userType eq 'Guest'\" -All\n$guestUsers | Select-Object DisplayName, UserPrincipalName, Id, createdDateTime, creationType, accountEnabled, UserState | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: List SAML Application Details - PowerShell\nDESCRIPTION: This code snippet retrieves all service principals configured for SAML-based single sign-on and displays their details, including ID, Display Name, Account Enabled status, App ID, SSO mode, App Role Assignment requirements, sign-in audience, notification email addresses, token signing key information, reply URLs, login URL, and logout URL. It requires the 'Application.Read.All' scope and utilizes the `Get-EntraServicePrincipal` cmdlet with a filter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipal.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"PreferredSingleSignOnMode eq 'saml'\"\n$servicePrincipal | Select-Object Id, DisplayName, AccountEnabled, AppId, PreferredSingleSignOnMode, AppRoleAssignmentRequired, SignInAudience, NotificationEmailAddresses, PreferredTokenSigningKeyEndDateTime, PreferredTokenSigningKeyValid, ReplyUrls,LoginUrl, LogoutUrl | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Remove OAuth2 Permission Grant - Entra ID - PowerShell\nDESCRIPTION: This example demonstrates how to remove an OAuth2PermissionGrant object in Microsoft Entra ID using the Remove-EntraOAuth2PermissionGrant cmdlet. It first connects to Entra ID, retrieves the service principal for SharePoint, finds the specific OAuth2 permission grant for 'AllSites.Read', and then removes it using its ID.\n\nDependencies: Microsoft.Entra module, Entra ID account with DelegatedPermissionGrant.ReadWrite.All scope.\n\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraOAuth2PermissionGrant.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'DelegatedPermissionGrant.ReadWrite.All'\n$sharePointSP = Get-EntraServicePrincipal | Where-Object { $_.DisplayName -eq 'Microsoft.SharePoint' }\n$sharePointOAuth2AllSitesRead = Get-EntraOAuth2PermissionGrant | Where-Object { $_.ResourceId -eq $sharePointSP.Id } | Where-Object { $_.Scope -eq 'AllSites.Read' }\nRemove-EntraOAuth2PermissionGrant -OAuth2PermissionGrantId $sharePointOAuth2AllSitesRead.Id\n```\n\n----------------------------------------\n\nTITLE: Retrieve Users Without Sign-Ins - Example 1\nDESCRIPTION: This example demonstrates retrieving users who have not signed in within the last 10 days. It connects to Entra ID using specified scopes and then uses `Get-EntraBetaUserInactiveSignIn` with the `-Ago` parameter set to 10.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserInactiveSignIn.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All','AuditLog.Read.All'\nGet-EntraBetaUserInactiveSignIn -Ago 10\n```\n\n----------------------------------------\n\nTITLE: Bulk Assign Licenses to Multiple Users - PowerShell\nDESCRIPTION: This PowerShell script demonstrates how to bulk assign licenses to multiple users. It retrieves SkuIds for specific license plans, defines an array of users, creates license assignment objects, and then assigns the licenses to each user in the array.  Requires the 'Organization.ReadWrite.All' scope.  Allows importing user list from a CSV file. Requires the Microsoft.Open.AzureAD.Model assembly.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUserLicense.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.ReadWrite.All'\n# Retrieve the SkuId for the desired license plans\n$skuId1 = (Get-EntraSubscribedSku | Where-Object { $_.SkuPartNumber -eq 'AAD_PREMIUM_P2' }).SkuId\n$skuId2 = (Get-EntraSubscribedSku | Where-Object { $_.SkuPartNumber -eq 'EMS' }).SkuId\n# Define the user to whom the licenses will be assigned\n$users = ('AljosaH@Contoso.com', 'PalameeC@Contoso.com')\n# You can, alternatively, import users from a csv file. For this example, the CSV should have a column named 'user'\n$users = Import-Csv -Path \"C:\\path\\to\\your\\users.csv\" | Select-Object -ExpandProperty user\n# Create license assignment objects\n$license1 = New-Object -TypeName Microsoft.Open.AzureAD.Model.AssignedLicense\n$license1.SkuId = $skuId1\n$license2 = New-Object -TypeName Microsoft.Open.AzureAD.Model.AssignedLicense\n$license2.SkuId = $skuId2\n$licenses = New-Object -TypeName Microsoft.Open.AzureAD.Model.AssignedLicenses\n$licenses.AddLicenses = $license1, $license2\n# Assign the licenses to each user\nforeach ($user in $users$users) {\n    Set-EntraUserLicense -UserId $user -AssignedLicenses $licenses\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Phone Details - Set-EntraUser (PowerShell)\nDESCRIPTION: This example shows how to update a user's phone details, including business phones and office location. It uses the `Set-EntraUser` cmdlet with the `-BusinessPhones` and `-OfficeLocation` parameters to update these properties for the specified user. The `Connect-Entra` makes sure of authorization to the Entra tenant.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUser.md#_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nSet-EntraUser -UserId 'SawyerM@contoso.com' -BusinessPhones '+1 425 555 0109' -OfficeLocation '18/2111'\n```\n\n----------------------------------------\n\nTITLE: Defining RequiredResourceAccess Parameter\nDESCRIPTION: Specifies the resources that this application requires access to, along with the OAuth permission scopes and application roles needed for each resource. This parameter is used to pre-configure required resource access and drives the consent experience. It accepts a list of RequiredResourceAccess objects.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplication.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.RequiredResourceAccess]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Resetting a User Password - PowerShell\nDESCRIPTION: This snippet connects to Entra ID with the 'Directory.AccessAsUser.All' scope, creates a secure password, and resets the user's password using the Set-EntraUserPassword cmdlet. This ensures the user cannot use their old credentials. Requires the Entra PowerShell module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-user.md#_snippet_22\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.AccessAsUser.All'\n$securePassword = ConvertTo-SecureString 'Some-strong-random-password' -AsPlainText -Force\nSet-EntraUserPassword -ObjectId 'SawyerM@contoso.com' -Password $securePassword\n```\n\n----------------------------------------\n\nTITLE: Sync users from one group to another - PowerShell\nDESCRIPTION: This example demonstrates how to synchronize members from one Microsoft Entra group (the source group) to another (the target group).  It first connects to Entra ID using the required scope. It then retrieves the target group by display name, and pipes the members of the source group to the Add-EntraGroupMember cmdlet, effectively adding all members of the source group to the target group.  The GroupMember.ReadWrite.All scope is required.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Add-EntraGroupMember.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.ReadWrite.All'\n$group = Get-EntraGroup -Filter \"DisplayName eq 'Sales and Marketing'\"\nGet-EntraGroupMember -GroupId \"source-group-id\" |\n    Add-EntraGroupMember -GroupId $group.Id\n```\n\n----------------------------------------\n\nTITLE: Update Homepage of Service Principal - PowerShell\nDESCRIPTION: This example demonstrates how to update the Homepage property of a service principal in Microsoft Entra ID. It connects to Entra ID, retrieves a service principal, and updates its Homepage. It requires Application.ReadWrite.All and Application.ReadWrite.OwnedBy scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraServicePrincipal.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\n$homePage = 'https://*.e-days.com/SSO/SAML2/SP/AssertionConsumer.aspx?metadata=e-days|ISV9.2|primary|z'\nSet-EntraServicePrincipal -ServicePrincipalId $servicePrincipal.Id -Homepage $homePage\n```\n\n----------------------------------------\n\nTITLE: Create Trusted Certificate Authority\nDESCRIPTION: This PowerShell snippet creates a trusted certificate authority in Microsoft Entra ID. It first connects to Entra ID with the required scopes, then creates a `CertificateAuthorityInformation` object, sets its properties, and finally uses the `New-EntraBetaTrustedCertificateAuthority` cmdlet to create the trusted certificate authority using the created object. The example expects a path to a '.cer' file for the certificate.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaTrustedCertificateAuthority.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.ReadWrite.All'\n\n$new_ca = New-Object -TypeName Microsoft.Open.AzureAD.Model.CertificateAuthorityInformation #Create CertificateAuthorityInformation object\n$new_ca.AuthorityType = \"RootAuthority\"\n$new_ca.CrlDistributionPoint = \"https://example.crl\"\n$new_ca.DeltaCrlDistributionPoint = \"https://deltaexample.crl\"\n$new_ca.TrustedCertificate = \"Path to .cer file(including cer file name)\"\nNew-EntraBetaTrustedCertificateAuthority -CertificateAuthorityInformation $new_ca\n```\n\n----------------------------------------\n\nTITLE: Remove Application - PowerShell Example 1\nDESCRIPTION: This example demonstrates how to remove an application object. It first connects to Entra ID with the 'Application.ReadWrite.All' scope. Then, it retrieves the application object using Get-EntraBetaApplication based on the display name. Finally, it deletes the application using Remove-EntraBetaApplication, passing the application's ID as the ApplicationId parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaApplication.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All'\n$application = Get-EntraBetaApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\nRemove-EntraBetaApplication -ApplicationId $application.Id\n```\n\n----------------------------------------\n\nTITLE: Export List of Stale Devices to CSV - PowerShell\nDESCRIPTION: This script connects to Microsoft Entra ID, identifies stale devices based on the `ApproximateLastSignInDateTime` being older than 6 months, and exports the device details (AccountEnabled, DeviceId, OperatingSystem, OperatingSystemVersion, DisplayName, TrustType, ApproximateLastSignInDateTime) to a CSV file. The CSV file is saved to the user's Downloads folder.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-stale-devices.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'  \n  \n$dt = (Get-Date).AddMonths(-6) # Devices not signed in for the last 6 months\n  \n$staleDevices = Get-EntraDevice -All |  \nWhere-Object {  \n    $_.ApproximateLastSignInDateTime -le $dt  \n} |  \nSelect-Object -Property AccountEnabled, DeviceId, OperatingSystem, OperatingSystemVersion, DisplayName, TrustType, ApproximateLastSignInDateTime  \n  \n$staleDevices | Export-Csv \"$env:UserProfile\\Downloads\\stale-devices1.csv\" -NoTypeInformation\n```\n\n----------------------------------------\n\nTITLE: Update Device Display Name - PowerShell\nDESCRIPTION: This example demonstrates how to update the display name of a specific device in Microsoft Entra ID using the Set-EntraDevice cmdlet. It first connects to Entra ID with necessary scopes, retrieves the device object using Get-EntraDevice, and then updates the display name.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraDevice.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.AccessAsUser.All', 'Device.ReadWrite.All'\n$device = Get-EntraDevice -Filter \"DisplayName eq 'Woodgrove Desktop'\"\nSet-EntraDevice -DeviceObjectId $device.ObjectId -DisplayName 'My OS/2 computer'\n```\n\n----------------------------------------\n\nTITLE: Revoking User Authentication Tokens - PowerShell\nDESCRIPTION: This snippet connects to Entra ID with the 'Directory.AccessAsUser.All' scope and revokes all refresh tokens for a specified user ID.  This invalidates existing sessions and cached logins, preventing unauthorized re-access. Requires the Entra PowerShell module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-user.md#_snippet_20\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.AccessAsUser.All'\nRevoke-EntraUserAllRefreshToken -UserId 'SawyerM@contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Restoring Soft-Deleted Groups using Restore-EntraDeletedDirectoryObject in PowerShell\nDESCRIPTION: This snippet shows how to restore a soft-deleted group using the `Restore-EntraDeletedDirectoryObject` cmdlet. It requires the `Group.ReadWrite.All` scope. The `-Id` parameter specifies the object ID of the deleted group to be restored.  It also shows how to retrieve the group ID first using `Get-EntraDeletedGroup` and filtering by display name.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/recover-deleted-data.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All' \n$group = Get-EntraDeletedGroup -Filter \"displayName eq 'test21'\"\nRestore-EntraDeletedDirectoryObject -Id $group.Id\n```\n\n----------------------------------------\n\nTITLE: Retrieve Key Credential of Service Principal PowerShell\nDESCRIPTION: This example demonstrates how to retrieve the key credentials for a specified service principal in Microsoft Entra ID. It first connects to Entra ID using `Connect-Entra`, retrieves a service principal using `Get-EntraServicePrincipal` based on its display name, and then retrieves the key credentials using `Get-EntraServicePrincipalKeyCredential` using the service principal's ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalKeyCredential.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraServicePrincipalKeyCredential -ServicePrincipalId $servicePrincipal.Id\n```\n\n----------------------------------------\n\nTITLE: Invite Single Guest User - PowerShell\nDESCRIPTION: Invites a single guest user to the organization by specifying the invited user's email address, invite redirect URL, sending invitation message, and the invited user's display name. The script requires the Connect-Entra command to be run beforehand to establish a connection to Microsoft Entra with User.Invite.All scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-guest-users.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n#Invite the guest user\nNew-EntraInvitation `\n    -InvitedUserEmailAddress 'guestUser@contoso.com' `\n    -InviteRedirectUrl 'https://contoso.com' `\n    -SendInvitationMessage $true `\n    -InvitedUserDisplayName 'Guest User'\n```\n\n----------------------------------------\n\nTITLE: Assign Role to Group - PowerShell\nDESCRIPTION: This code snippet assigns a Microsoft Entra role to a group using the New-EntraDirectoryRoleAssignment command. It requires the RoleManagement.ReadWrite.Directory scope. It takes the RoleDefinitionId (obtained from Get-EntraDirectoryRoleDefinition) and the PrincipalId (the group's Id obtained from New-EntraGroup) as input parameters. The DirectoryScopeId parameter specifies the scope of the role assignment.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-roles.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory'\nNew-EntraDirectoryRoleAssignment -RoleDefinitionId $directoryRole.Id -PrincipalId $group.Id -DirectoryScopeId '/'\n```\n\n----------------------------------------\n\nTITLE: Disabling a User Device - PowerShell\nDESCRIPTION: This snippet connects to Entra ID with the 'Directory.AccessAsUser.All' and 'Device.ReadWrite.All' scopes, retrieves a device by its display name, and disables the device using Set-EntraDevice. Safeguards organization security, data, and resources. Requires the Entra PowerShell module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-user.md#_snippet_24\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.AccessAsUser.All', 'Device.ReadWrite.All'\n$device = Get-EntraDevice -Filter \"DisplayName eq 'Woodgrove Desktop'\"\nSet-EntraDevice -DeviceObjectId $device.ObjectId -AccountEnabled $false\n```\n\n----------------------------------------\n\nTITLE: Sort Deleted Users by Deletion Date - PowerShell\nDESCRIPTION: This script retrieves deleted users from Entra ID and sorts them in descending order based on their deletion date. It utilizes the `Get-EntraDeletedUser` cmdlet to fetch the deleted users and then pipes the result to `Sort-Object` to sort by the `deletedDateTime` property.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-user.md#_snippet_16\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nGet-EntraDeletedUser -All | Sort-Object -Property deletedDateTime -Descending\n```\n\n----------------------------------------\n\nTITLE: View Guest User Accounts - PowerShell\nDESCRIPTION: Retrieves all guest user accounts from Microsoft Entra ID, displaying their display names, email addresses, and creation dates. Requires a connection to Microsoft Entra with the 'User.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-guest-users.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Define the current date.\n$now = Get-Date  \n\n# Initialize an array to store the report data.\n$report = @()  \n\n# Retrieve all guest user accounts.\n$guestUsers = Get-EntraUser -Filter \"userType eq 'Guest'\" -All -Property \"displayName\", \"mail\", \"createdDateTime\"\n\n#view the guest users\n$guestUsers\n```\n\n----------------------------------------\n\nTITLE: Creating a Service Principal with DisplayName, AccountEnabled, Tags, AppRoleAssignmentRequired - PowerShell\nDESCRIPTION: This example demonstrates how to create a new service principal with specified DisplayName, AccountEnabled, Tags, and AppRoleAssignmentRequired parameters using the New-EntraServicePrincipal cmdlet. It first connects to Entra ID, retrieves an application, and then creates the service principal using the retrieved application's AppId and other specified parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraServicePrincipal.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraApplication -Filter \"DisplayName eq 'Helpdesk Application'\"\n$params = @{\n    AccountEnabled = $true \n    AppId = $application.AppId \n    AppRoleAssignmentRequired = $true \n    DisplayName = $application.DisplayName \n    Tags = {WindowsAzureActiveDirectoryIntegratedApp}\n}\nNew-EntraServicePrincipal @params\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDisplayName Id                                   AppId                                SignInAudience ServicePrincipalType\n----------- --                                   -----                                -------------- --------------------\nHelpdesk Application    bbbbbbbb-1111-2222-3333-cccccccccccc 00001111-aaaa-2222-bbbb-3333cccc4444 AzureADMyOrg   Application\n```\n\n----------------------------------------\n\nTITLE: Get Objects by Object IDs - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve Microsoft Entra objects using their Object IDs. The command connects to Entra ID with the required scopes and then uses `Get-EntraObjectByObjectId` to fetch objects specified by their GUIDs.  The `ObjectIds` parameter accepts one or more object IDs as a comma-separated list.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraObjectByObjectId.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\nGet-EntraObjectByObjectId  -ObjectIds 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb' , 'bbbbbbbb-1111-2222-3333-cccccccccccc'\n```\n\n----------------------------------------\n\nTITLE: Define delegated permissions - PowerShell\nDESCRIPTION: Defines delegated permissions for the application. It retrieves the Microsoft Graph service principal and creates resource access objects, then sets these permissions to the application.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/create-custom-application.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Get Graph service principal\n$graphApiId = '00000003-0000-0000-c000-000000000000'\n$graphServicePrincipal = Get-EntraServicePrincipal -Filter \"AppId eq '$graphApiId'\"\n$delegatedPermission = 'User.Read.All'\n$app = Get-EntraApplication -Filter \"DisplayName eq '$appName'\"\n\n# Create resource access object\n$resourceAccessDelegated = New-Object Microsoft.Open.MSGraph.Model.ResourceAccess\n$resourceAccessDelegated.Id = ((Get-EntraServicePrincipal -ServicePrincipalId $graphServicePrincipal.Id).Oauth2PermissionScopes | Where-Object { $_.Value -eq $delegatedPermission }).Id\n$resourceAccessDelegated.Type = 'Scope'\n\n# Create required resource access object\n$requiredResourceAccessDelegated = New-Object Microsoft.Open.MSGraph.Model.RequiredResourceAccess\n$requiredResourceAccessDelegated.ResourceAppId = $graphApiId\n$requiredResourceAccessDelegated.ResourceAccess = $resourceAccessDelegated\n\n# Set application required resource access\nSet-EntraApplication -ApplicationId $app.Id -RequiredResourceAccess $requiredResourceAccessDelegated\n```\n\n----------------------------------------\n\nTITLE: Add members based on search results to a group - PowerShell\nDESCRIPTION: This example shows how to add multiple users to a group based on a filter applied to their display names.  It connects to Entra ID with the required scope, retrieves the target group by its display name, and then pipes the results of a Get-EntraUser command (filtered by display name) to the Add-EntraGroupMember cmdlet to add matching users to the group specified by the GroupId.  The GroupMember.ReadWrite.All scope is required.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Add-EntraGroupMember.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.ReadWrite.All'\n$group = Get-EntraGroup -Filter \"DisplayName eq 'Sales and Marketing'\"\nGet-EntraUser -Filter \"startsWith(displayName,'Updated User')\" |\n    Add-EntraGroupMember -GroupId $group.Id\n```\n\n----------------------------------------\n\nTITLE: Creating an application from Global service application template\nDESCRIPTION: This example demonstrates how to create a non-gallery app by providing a specific application template ID, in this case for the Global Service.  The ApplicationTemplateId parameter specifies the application template, and the DisplayName parameter sets the application template display name.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplicationFromApplicationTemplate.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n# Global service: `8adf8e6e-67b2-4cf2-a259-e3dc5476c621`\n# US government: `4602d0b4-76bb-404b-bca9-2652e1a39c6d`\n# China (21Vianet): `5a532e38-1581-4918-9658-008dc27c1d68`\n```\n\n----------------------------------------\n\nTITLE: List users with Global Administrator role - PowerShell\nDESCRIPTION: This script retrieves a list of users who have the Global Administrator role assigned. It connects to Entra with User.Read.All and RoleManagement.Read.Directory scopes.  It first retrieves the Role ID for the 'Global Administrator' role. Then, it retrieves all role assignments for that role, fetches the user information for each assignment, and formats the output as a table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUser.md#_snippet_17\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All', 'RoleManagement.Read.Directory'\n$roleId = Get-EntraDirectoryRoleTemplate | Where-Object { $_.DisplayName -eq 'Global Administrator' } | Select-Object -ExpandProperty Id\n$globalAdmins = Get-EntraDirectoryRoleAssignment -Filter \"roleDefinitionId eq '$roleId'\" | ForEach-Object {\n    Get-EntraUser -UserId $_.PrincipalId\n}\n$globalAdmins | Select-Object Id, DisplayName, UserPrincipalName, CreatedDateTime, AccountEnabled | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Create Conditional Access Policy to Block Access from Nontrusted Regions (PowerShell)\nDESCRIPTION: This example creates a new conditional access policy in Microsoft Entra ID to block access to Exchange Online from nontrusted regions. It defines the conditions to include all users and the Exchange Online application, and specifies a location condition using a location ID. The grant control is set to block access.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraConditionalAccessPolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ConditionalAccess','Policy.Read.All'\n$conditions = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessConditionSet\n$conditions.Applications = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessApplicationCondition\n$conditions.Applications.IncludeApplications = '00000002-0000-0ff1-ce00-000000000000'\n$conditions.Users = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessUserCondition\n$conditions.Users.IncludeUsers = 'all'\n$conditions.Locations = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessLocationCondition\n$conditions.Locations.IncludeLocations = '5eeeeee5-6ff6-7aa7-8bb8-9cccccccccc9'\n$controls = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessGrantControls\n$controls._Operator = 'OR'\n$controls.BuiltInControls = 'block'\nNew-EntraConditionalAccessPolicy -DisplayName 'MFA policy' -State 'Enabled' -Conditions $conditions -GrantControls  $controls\n```\n\n----------------------------------------\n\nTITLE: Listing All Guest Users (PowerShell)\nDESCRIPTION: This snippet demonstrates how to retrieve and list all guest users in Entra ID. It connects to Entra ID, filters users based on the 'Guest' userType, and then selects specific properties to display in a formatted table, including DisplayName, UserPrincipalName, Id, createdDateTime, creationType, accountEnabled, and UserState.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUser.md#_snippet_15\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\n$guestUsers = Get-EntraBetaUser -Filter \"userType eq 'Guest'\" -All\n$guestUsers | Select-Object DisplayName, UserPrincipalName, Id, createdDateTime, creationType, accountEnabled, UserState | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Adding Group to Cloud Authentication Rollout Policy (Example) - PowerShell\nDESCRIPTION: This example demonstrates how to add a group to the cloud authentication roll-out policy using the `Add-EntraBetaFeatureRolloutPolicyDirectoryObject` cmdlet. It requires connecting to Entra with 'Directory.ReadWrite.All' scopes, defining the `-Id` (policy ID) and `-RefObjectId` (group ID) parameters and then calling the cmdlet with these parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaFeatureRolloutPolicyDirectoryObject.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\n$params = @{\n    Id = '00aa00aa-bb11-cc22-dd33-44ee44ee44ee'\n    RefObjectId = 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb'\n}\nAdd-EntraBetaFeatureRolloutPolicyDirectoryObject @params\n```\n\n----------------------------------------\n\nTITLE: Removing a deleted application object using ApplicationId - PowerShell\nDESCRIPTION: This example demonstrates how to remove a recently deleted application object using the `Remove-EntraDeletedApplication` cmdlet. It first connects to Entra ID with the required scopes, retrieves the deleted application using `Get-EntraDeletedApplication` and then removes it using its Id. The `-ApplicationId` parameter specifies the unique identifier of the deleted application.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraDeletedApplication.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All'\n$deletedApplication = Get-EntraDeletedApplication -SearchString 'My PowerShell Application' \nRemove-EntraDeletedApplication -ApplicationId $deletedApplication.Id\n```\n\n----------------------------------------\n\nTITLE: Finding Deleted Groups using Get-EntraDeletedGroup in PowerShell\nDESCRIPTION: This snippet demonstrates how to find deleted groups using the `Get-EntraDeletedGroup` cmdlet in Microsoft Entra PowerShell. It requires the `Group.Read.All` scope. The cmdlet retrieves soft-deleted groups that can be recovered within 30 days.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/recover-deleted-data.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Group.Read.All'\nGet-EntraDeletedGroup\n```\n\n----------------------------------------\n\nTITLE: Creating a Permission Grant Policy using New-EntraBetaPermissionGrantPolicy (PowerShell)\nDESCRIPTION: This example demonstrates how to create a new permission grant policy in Microsoft Entra ID using the `New-EntraBetaPermissionGrantPolicy` cmdlet. It requires connecting to Entra ID with the appropriate scopes using `Connect-Entra` and specifies the policy's ID, display name, and description. The output shows the created policy's details.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaPermissionGrantPolicy.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.PermissionGrant'\nNew-EntraBetaPermissionGrantPolicy -Id 'my_new_permission_grant_policy_id' -DisplayName 'MyNewPermissionGrantPolicy' -Description 'My new permission grant policy'\n```\n\n----------------------------------------\n\nTITLE: Connect with Specific Context Scope\nDESCRIPTION: Connects to Microsoft Entra ID with a specified context scope. Setting the ContextScope to 'Process' allows connecting as a different identity than the CurrentUser.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Connect-Entra.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -ContextScope 'Process'\n```\n\n----------------------------------------\n\nTITLE: Creating User with MailNickName - New-EntraUser (PowerShell)\nDESCRIPTION: This example demonstrates how to create a new Microsoft Entra ID user using the New-EntraUser cmdlet with the MailNickName parameter.  It first connects to Entra ID using Connect-Entra with the 'User.ReadWrite.All' scope and creates a PasswordProfile object.  It then defines user parameters in a hashtable and passes it to New-EntraUser to create the user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraUser.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\n$passwordProfile = New-Object -TypeName Microsoft.Open.AzureAD.Model.PasswordProfile\n$passwordProfile.Password = '<Password>'\n$userParams = @{\n    DisplayName       = 'Avery Iona'\n    PasswordProfile   = $passwordProfile\n    UserPrincipalName = 'AveryI@contoso.com'\n    AccountEnabled    = $true\n    MailNickName      = 'averyi'\n}\n\nNew-EntraUser @userParams\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nObjectId                             DisplayName UserPrincipalName               UserType\n--------                             ----------- -----------------               --------\naaaaaaaa-0000-1111-2222-bbbbbbbbbbbb Avery Iona    AveryI@contoso.com             Member\n```\n\n----------------------------------------\n\nTITLE: Add User to Administrative Unit (Example 1) - PowerShell\nDESCRIPTION: This PowerShell snippet adds a user to a specified administrative unit. It first connects to Entra, retrieves the administrative unit and user objects using their display name and UserId, respectively, then uses Add-EntraAdministrativeUnitMember to add the user to the administrative unit. It requires the AdministrativeUnit.ReadWrite.All scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Add-EntraAdministrativeUnitMember.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.ReadWrite.All'\n$administrativeUnit = Get-EntraAdministrativeUnit -Filter \"DisplayName eq '<administrativeunit-display-name>'\"\n$user = Get-EntraUser -UserId 'SawyerM@contoso.com'\nAdd-EntraAdministrativeUnitMember -AdministrativeUnitId $administrativeUnit.Id -MemberId $user.Id\n```\n\n----------------------------------------\n\nTITLE: Setting Application Verified Publisher using Set-EntraApplicationVerifiedPublisher (PowerShell)\nDESCRIPTION: This PowerShell snippet demonstrates how to set the verified publisher of an application using the Set-EntraApplicationVerifiedPublisher cmdlet. It requires the Application.ReadWrite.All scope, retrieves an application by its display name, specifies the MPN ID, creates a request object with the verifiedPublisherId, and then calls the Set-EntraApplicationVerifiedPublisher cmdlet with the application object ID and the request object. The MPN ID should be obtained from the publisher's Partner Center account.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraApplicationVerifiedPublisher.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All'\n$application = Get-EntraApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\n$mpnId =  '0433167'\n$req =  @{verifiedPublisherId = $mpnId}\nSet-EntraApplicationVerifiedPublisher -AppObjectId $application.Id -SetVerifiedPublisherRequest $req\n```\n\n----------------------------------------\n\nTITLE: Setting App Role Assignment Required - PowerShell\nDESCRIPTION: This snippet sets the `AppRoleAssignmentRequired` property for a specified Entra service principal. This setting restricts application sign-ins to only assigned identities, enhancing security. It requires the Microsoft Entra PowerShell module. Replace `'Contoso Demo App'` with the actual display name of your application.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/entra-powershell-best-practices.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All'\nGet-EntraServicePrincipal -Filter \"DisplayName eq 'Contoso Demo App'\" | Set-EntraServicePrincipal -AppRoleAssignmentRequired $true\n```\n\n----------------------------------------\n\nTITLE: List Failed Sign-ins for a User with PowerShell\nDESCRIPTION: This PowerShell script retrieves a list of failed sign-in attempts for a specific user.  It uses the Get-EntraAuditSignInLog cmdlet with a filter to identify failed sign-ins for the user specified by userPrincipalName. The script then selects and formats specific properties for display, including UserPrincipalName, CreatedDateTime, Status, IpAddress, and ClientAppUsed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAuditSignInLog.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All','Directory.Read.All'\n$failedSignIns = Get-EntraAuditSignInLog -Filter \"userPrincipalName eq 'SawyerM@contoso.com' and status/errorCode ne 0\"\n$failedSignIns | Select-Object UserPrincipalName, CreatedDateTime, Status, IpAddress, ClientAppUsed | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Assign Role to User - PowerShell\nDESCRIPTION: This code snippet assigns a Microsoft Entra role to a user using the New-EntraDirectoryRoleAssignment command. It requires the RoleManagement.ReadWrite.Directory scope.  It takes the RoleDefinitionId (obtained from Get-EntraDirectoryRoleDefinition) and the PrincipalId (obtained from Get-EntraUser) as input parameters.  The DirectoryScopeId parameter specifies the scope of the role assignment.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-roles.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory'\nNew-EntraDirectoryRoleAssignment -RoleDefinitionId $directoryRole.Id -PrincipalId $user.Id -DirectoryScopeId '/'\n```\n\n----------------------------------------\n\nTITLE: Get Sign-in Logs Between Dates with PowerShell\nDESCRIPTION: This PowerShell script retrieves all sign-in logs within a specified date range using the Get-EntraAuditSignInLog cmdlet. It requires the 'AuditLog.Read.All' and 'Directory.Read.All' scopes and uses an OData filter to specify the date range. The output is a list of sign-in logs that fall within the specified dates.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAuditSignInLog.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All','Directory.Read.All'\nGet-EntraAuditSignInLog -Filter \"createdDateTime ge 2024-07-01T00:00:00Z and createdDateTime le 2024-07-14T23:59:59Z\"\n```\n\n----------------------------------------\n\nTITLE: Set HTTP Client Timeout\nDESCRIPTION: Sets the HTTP client timeout in seconds for the connection. This allows you to control how long the cmdlet will wait for a response from the Microsoft Entra ID service.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Connect-Entra.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\n Connect-Entra -ClientTimeout 60\n```\n\n----------------------------------------\n\nTITLE: Connect to Microsoft Entra ID - PowerShell\nDESCRIPTION: This command connects to Microsoft Entra ID using the Connect-Entra cmdlet and requests specific permissions ('Directory.Read.All', 'Application.Read.All').  It establishes a session for subsequent operations. Requires the Microsoft Entra PowerShell module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-user-group-assignment.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All', 'Application.Read.All'\n```\n\n----------------------------------------\n\nTITLE: Revoke Refresh Tokens for Current User - PowerShell\nDESCRIPTION: This example demonstrates how to revoke refresh tokens for the currently signed-in user using the `Revoke-EntraSignedInUserAllRefreshToken` cmdlet. It first connects to Entra ID with the required scope and then executes the revocation command. This action prevents unauthorized access by requiring the user to re-authenticate to all previously consented applications.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Revoke-EntraSignedInUserAllRefreshToken.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.RevokeSessions.All'\nRevoke-EntraSignedInUserAllRefreshToken\n```\n\nLANGUAGE: powershell\nCODE:\n```\nValue\n-----\nTrue\n```\n\n----------------------------------------\n\nTITLE: Get Objects Created by a Service Principal\nDESCRIPTION: This code retrieves objects created by a specific service principal. It first retrieves the service principal using `Get-EntraServicePrincipal` and then uses `Get-EntraServicePrincipalCreatedObject` to list the objects created by it. Requires the `Application.Read.All` scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-apps.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraServicePrincipalCreatedObject -ServicePrincipalId $servicePrincipal.Id\n```\n\n----------------------------------------\n\nTITLE: Define application permissions - PowerShell\nDESCRIPTION: Defines application permissions for the application. It retrieves the Microsoft Graph service principal and creates resource access objects, then sets these permissions to the application.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/create-custom-application.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Get Graph service principal\n$applicationPermission = 'Group.Read.All'\n$graphApiId = '00000003-0000-0000-c000-000000000000'\n$graphServicePrincipal = Get-EntraServicePrincipal -Filter \"AppId eq '$graphApiId'\"\n$app = Get-EntraApplication -Filter \"DisplayName eq '$appName'\"\n\n# Create resource access object\n$resourceAccess = New-Object Microsoft.Open.MSGraph.Model.ResourceAccess\n$resourceAccess.Id = ((Get-EntraServicePrincipal -ServicePrincipalId $graphServicePrincipal.ObjectId).AppRoles | Where-Object { $_.Value -eq $applicationPermission}).Id\n$resourceAccess.Type = 'Scope'\n\n# Create required resource access object\n$requiredResourceAccess = New-Object Microsoft.Open.MSGraph.Model.RequiredResourceAccess\n$requiredResourceAccess.ResourceAppId = $graphApiId\n$requiredResourceAccess.ResourceAccess = $resourceAccess\n\n# Set application required resource access\nSet-EntraApplication -ApplicationId $app.Id -RequiredResourceAccess $requiredResourceAccess\n```\n\n----------------------------------------\n\nTITLE: List User's Group Memberships - PowerShell\nDESCRIPTION: This script retrieves and displays the group memberships of a specified user in Entra ID. It uses the `Get-EntraUserMembership` cmdlet to fetch the membership information and then formats the output to show the ID, display name, creation date, and type of each group.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-user.md#_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read'\nGet-EntraUserMembership -UserId 'SawyerM@contoso.com' |\n Select-Object Id, displayName, createdDateTime, '@odata.type' |\n Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Connect with Client Secret\nDESCRIPTION: Connects to Microsoft Entra ID using a client secret.  The client secret is passed as a PSCredential object. Requires TenantId and ClientSecretCredential.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Connect-Entra.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\n$ClientSecretCredential = Get-Credential -Credential '00001111-aaaa-2222-bbbb-3333cccc4444'\n# Enter client_secret in the password prompt.\nConnect-Entra -TenantId 'aaaabbbb-0000-cccc-1111-dddd2222eeee' -ClientSecretCredential $ClientSecretCredential\n```\n\n----------------------------------------\n\nTITLE: Assign License based on Template User - PowerShell\nDESCRIPTION: This PowerShell script assigns licenses to a target user based on the licenses assigned to a template user. It retrieves both users, iterates through the template user's assigned licenses, and assigns the same licenses to the target user. Requires the 'User.ReadWrite.All' scope. Requires the Microsoft.Open.AzureAD.Model assembly.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUserLicense.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\n$licensedUser = Get-EntraUser -UserId 'TemplateUser@contoso.com'\n$targetUser = Get-EntraUser -UserId 'SawyerM@contoso.com'\n$sourceUserLicenses = $licensedUser.AssignedLicenses\n$licensesToAssign = New-Object -TypeName Microsoft.Open.AzureAD.Model.AssignedLicenses \nforeach ($license in $sourceUserLicenses) {\n    $assignedLicense = New-Object -TypeName Microsoft.Open.AzureAD.Model.AssignedLicense\n    $assignedLicense.SkuId = $license.SkuId\n    $licensesToAssign.AddLicenses = $assignedLicense\n    Set-EntraUserLicense -UserId $targetUser.Id -AssignedLicenses $licensesToAssign\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Role - Entra PowerShell\nDESCRIPTION: This snippet creates a new custom role in Microsoft Entra ID using the `New-EntraDirectoryRoleDefinition` cmdlet. It defines the role's permissions, enables it, and sets its display name. It requires the 'RoleManagement.ReadWrite.Directory' scope and the 'Privileged Role Administrator' role.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-roles.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory'\n$rolePermissions = New-object Microsoft.Open.MSGraph.Model.RolePermission\n$rolePermissions.AllowedResourceActions =  @(\"microsoft.directory/applications/basic/read\")\nNew-EntraDirectoryRoleDefinition -RolePermissions $rolePermissions -IsEnabled $true -DisplayName 'Custom Application Read'\n```\n\n----------------------------------------\n\nTITLE: Set User CBA Certificate User ID - Path - PowerShell\nDESCRIPTION: This example demonstrates how to update a user's certificate authorization information using a certificate file path and maps both the Subject and PrincipalName fields.\nIt requires the 'Directory.ReadWrite.All' and 'User.ReadWrite.All' scopes and uses the `Set-EntraUserCBACertificateUserId` cmdlet.\nThe updated details can be viewed with `Get-EntraUserCBAAuthorizationInfo`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUserCBACertificateUserId.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All', 'User.ReadWrite.All'\nSet-EntraUserCBACertificateUserId -UserId 'SawyerM@contoso.com' -CertPath 'C:\\path\\to\\certificate.cer' -CertificateMapping @('Subject', 'PrincipalName')\n```\n\n----------------------------------------\n\nTITLE: Get Entra Group Members with PowerShell\nDESCRIPTION: This PowerShell command retrieves the members of a specific Microsoft Entra group and displays their ID, DisplayName, and @odata.type properties.  It first retrieves the group using Get-EntraGroup, then pipes the GroupId to Get-EntraGroupMember to get the members, and finally uses Select-Object to format the output. It requires the Microsoft Entra PowerShell module and appropriate permissions to read group membership.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-groups.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\n$group = Get-EntraGroup -Filter \"displayName eq 'Contoso marketing'\"\nGet-EntraGroup -GroupId $group.Id | Get-EntraGroupMember | Select-Object Id, DisplayName, '@odata.type' \n```\n\n----------------------------------------\n\nTITLE: Query Entra Groups without Owners with PowerShell\nDESCRIPTION: This PowerShell script identifies Microsoft Entra groups that do not have any owners. It retrieves all groups using Get-EntraGroup, iterates through each group, and uses Get-EntraGroupOwner to check if the group has any owners. If a group has no owners, it's added to the $groupsWithoutOwners collection. The script requires the Microsoft Entra PowerShell module and sufficient permissions to retrieve group and owner information.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-groups.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\n$allGroups = Get-EntraGroup -All\n$groupsWithoutOwners = foreach ($group in $allGroups) {\n    $owners = Get-EntraGroupOwner -GroupId $group.Id\n    if ($owners.Count -eq 0) {\n        $group\n    }\n}\n$groupsWithoutOwners | Format-Table DisplayName, Id, GroupTypes\n```\n\n----------------------------------------\n\nTITLE: Restore Deleted Object with ID - PowerShell\nDESCRIPTION: This example demonstrates how to restore a deleted object using its ID in Microsoft Entra ID. It first connects to Entra ID with necessary scopes, retrieves a deleted user, and then restores the user using the `Restore-EntraDeletedDirectoryObject` cmdlet with the `-Id` parameter.  It requires the Microsoft.Entra module. The `Connect-Entra` cmdlet establishes the connection with appropriate scopes, and `Get-EntraDeletedUser` retrieves the deleted user object by display name.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Restore-EntraDeletedDirectoryObject.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All', 'AdministrativeUnit.ReadWrite.All', 'Application.ReadWrite.All', 'Group.ReadWrite.All'\n$deletedUser = Get-EntraDeletedUser -Filter \"DisplayName eq 'Adele Vance'\"\nRestore-EntraDeletedDirectoryObject -Id $deletedUser.Id\n```\n\n----------------------------------------\n\nTITLE: Add Member To Entra ID Role - PowerShell\nDESCRIPTION: This example demonstrates how to add a member to a Microsoft Entra ID role using the Add-EntraDirectoryRoleMember cmdlet.\n\nDependencies: Requires the Microsoft.Entra module and connection to Entra ID with appropriate scopes (RoleManagement.ReadWrite.Directory).\n\nInputs: Directory Role ID, User ID.\n\nOutputs: Modifies the directory role to include the specified user as a member.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Add-EntraDirectoryRoleMember.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory'\n$directoryRole = Get-EntraDirectoryRole -Filter \"DisplayName eq 'Helpdesk Administrator'\"\n$user = Get-EntraUser -UserId 'SawyerM@Contoso.com'\nAdd-EntraDirectoryRoleMember -DirectoryRoleId $directoryRole.Id -MemberId $user.Id\n```\n\n----------------------------------------\n\nTITLE: Get User Sign-In Activity - Entra ID - PowerShell\nDESCRIPTION: This example retrieves the Sign-In Activity of a specific user using the `-Property` parameter and expands the 'SignInActivity' property. Requires 'User.Read.All' and 'AuditLog.Read.All' scopes to be granted when connecting to Entra ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUser.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All','AuditLog.Read.All'\nGet-EntraUser -UserId 'SawyerM@contoso.com' -Property 'SignInActivity' | Select-Object -Property Id, DisplayName, UserPrincipalName -ExpandProperty 'SignInActivity'\n```\n\n----------------------------------------\n\nTITLE: Get Policy by Display Name - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a specific policy using its display name.  It connects to Entra ID with 'Policy.Read.All' scope, retrieves all policies, and filters them based on the DisplayName property using Where-Object.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraPolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.All'\nGet-EntraPolicy | Where-Object {$_.DisplayName -eq 'Microsoft User Default Recommended Policy'}\n```\n\n----------------------------------------\n\nTITLE: Updating User Display Name - Set-EntraUser (PowerShell)\nDESCRIPTION: This example demonstrates how to update a user's display name using the `Set-EntraUser` cmdlet. It requires the `User.ReadWrite.All` scope and specifies the `UserId` and the new `DisplayName`. The `Connect-Entra` cmdlet establishes a connection to Microsoft Entra ID with the necessary permissions before updating the user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUser.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nSet-EntraUser -UserId 'SawyerM@contoso.com' -DisplayName 'Updated user Name'\n```\n\n----------------------------------------\n\nTITLE: Remove a Role Assignment (PowerShell)\nDESCRIPTION: This example demonstrates how to remove a specific role assignment from Microsoft Entra ID. It first retrieves a user, a role definition, and the corresponding role assignment using other Entra Beta cmdlets. Then, it uses Remove-EntraBetaDirectoryRoleAssignment to delete the assignment based on its UnifiedRoleAssignmentId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaDirectoryRoleAssignment.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory', 'EntitlementManagement.ReadWrite.All'\n$user = Get-EntraBetaUser -UserId 'SawyerM@contoso.com'\n$role = Get-EntraBetaDirectoryRoleDefinition -Filter \"DisplayName eq 'Helpdesk Administrator'\"\n$assignment = Get-EntraBetaDirectoryRoleAssignment -All | Where-Object { $_.principalId -eq $user.Id -AND $_.RoleDefinitionId -eq $role.Id }\nRemove-EntraBetaDirectoryRoleAssignment -UnifiedRoleAssignmentId $assignment.Id\n```\n\n----------------------------------------\n\nTITLE: Get Application by Identifier URI - PowerShell\nDESCRIPTION: This example demonstrates retrieving applications by their identifier URIs using the '-Filter' parameter with an OData filter. The script connects to Entra ID with the 'Application.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplication.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraBetaApplication -Filter \"identifierUris/any(uri:uri eq 'https://wingtips.wingtiptoysonline.com')\"\n```\n\n----------------------------------------\n\nTITLE: Get all sign-in logs using Get-EntraBetaAuditSignInLog (PowerShell)\nDESCRIPTION: This example shows how to retrieve all audit logs of sign-ins using the `Get-EntraBetaAuditSignInLog` cmdlet. It first connects to Entra ID using `Connect-Entra` with the necessary scopes for reading audit logs and directory information. It uses the `-All` parameter to retrieve all available logs.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAuditSignInLog.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All','Directory.Read.All'\nGet-EntraBetaAuditSignInLog -All\n```\n\n----------------------------------------\n\nTITLE: Restore Deleted User and Resolve Proxy Conflicts - PowerShell\nDESCRIPTION: This example demonstrates how to restore a soft-deleted user and automatically resolve any proxy address conflicts. It connects to Entra ID, retrieves a deleted user, and then restores the user using the `Restore-EntraDeletedDirectoryObject` cmdlet with the `-Id` and `-AutoReconcileProxyConflict` parameters.  It requires the Microsoft.Entra module. The `-AutoReconcileProxyConflict` parameter ensures that any conflicting proxy addresses are removed during the restoration process.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Restore-EntraDeletedDirectoryObject.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\n$deletedUser = Get-EntraDeletedUser -Filter \"DisplayName eq 'Adele Vance'\"\nRestore-EntraDeletedDirectoryObject -Id $deletedUser.Id -AutoReconcileProxyConflict\n```\n\n----------------------------------------\n\nTITLE: Get User Manager - Microsoft Entra ID - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve the manager of a specific user in Microsoft Entra ID using the Get-EntraUserManager cmdlet. It connects to Entra ID with 'User.Read.All' scopes, retrieves the manager based on the UserID, and then displays selected properties in a formatted table. Requires the Microsoft.Entra module to be installed and properly configured.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserManager.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraUserManager -UserId 'SawyerM@contoso.com' |\nSelect-Object Id, displayName, userPrincipalName, createdDateTime, accountEnabled, userType |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Update Multiple Group Properties - PowerShell\nDESCRIPTION: This example demonstrates how to update multiple properties of an existing Microsoft Entra ID group simultaneously. It connects to Entra ID, retrieves the group, and then utilizes Set-EntraGroup to modify Visibility, GroupTypes, and IsAssignableToRole properties in a single operation.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraGroup.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All'\n$group = Get-EntraGroup -Filter \"DisplayName eq 'HelpDesk Team Leaders'\"\nSet-EntraGroup -GroupId $group.Id -Visibility 'Private' -GroupTypes 'DynamicMembership' -IsAssignableToRole $True\n```\n\n----------------------------------------\n\nTITLE: Retrieve Recent Group Creation Audit Logs - PowerShell\nDESCRIPTION: This example shows how to retrieve and format recent audit logs related to group creation. The script connects to Entra ID, filters for 'Add group' activity, limits the results to 5, and then selects and formats specific properties such as ID, activity time, initiator UPN, result, and group display name using `Select-Object` and `Format-Table` cmdlets.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAuditDirectoryLog.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All, Directory.Read.All'\nGet-EntraAuditDirectoryLog -Filter \"activityDisplayName eq 'Add group'\" -Limit 5 |\nSelect-Object id, activityDateTime, \n              @{Name=\"InitiatedByUPN\"; Expression={ $_.initiatedBy.user.userPrincipalName }},\n              result, \n              @{Name=\"GroupDisplayName\"; Expression={ $_.targetResources[0].displayName }} |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Connect to Microsoft Entra\nDESCRIPTION: Connects to Microsoft Entra with the specified scope to allow inviting guest users.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-guest-users.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Invite.All'\n```\n\n----------------------------------------\n\nTITLE: Create Entra Group Assignable to Role\nDESCRIPTION: This example demonstrates how to create a new Microsoft Entra ID group that is assignable to a role using the New-EntraGroup cmdlet. It includes setting the IsAssignableToRole parameter to $True.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraGroup.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All','Group.Create'\n$params = @{\n    DisplayName = 'HelpDesk admin group2'\n    Description = 'Group assignable to role'\n    MailEnabled = $False\n    MailNickname = 'helpDeskAdminGroup'\n    SecurityEnabled = $True\n    IsAssignableToRole = $True\n}\n\nNew-EntraGroup @params\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDisplayName           Id                                   MailNickname       Description              GroupTypes\n-----------           --                                   ------------       -----------              ----------\nHelpDesk admin group2 vvvvvvvv-8888-9999-0000-jjjjjjjjjjjj helpDeskAdminGroup Group assignable to role {}\n```\n\n----------------------------------------\n\nTITLE: Invite New External User\nDESCRIPTION: This example demonstrates inviting a new external user by specifying the email address, whether to send an invitation message, and the redirect URL after the user accepts the invitation. It utilizes the New-EntraBetaInvitation cmdlet with the -InvitedUserEmailAddress, -SendInvitationMessage, and -InviteRedirectUrl parameters.  It requires the 'User.Invite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaInvitation.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Invite.All'\n$emailAddress = 'someexternaluser@externaldomain.com'\n$sendInvitationMessage = $True\n$redirectUrl = 'https://myapps.contoso.com'\nNew-EntraBetaInvitation -InvitedUserEmailAddress $emailAddress -SendInvitationMessage $sendInvitationMessage -InviteRedirectUrl $redirectUrl\n```\n\n----------------------------------------\n\nTITLE: Deleting a Device - PowerShell\nDESCRIPTION: This PowerShell script deletes a Microsoft Entra device. It first connects to Entra ID with the 'Device.ReadWrite.All' scope. Then, it retrieves the device's ObjectId using Get-EntraDevice with a filter on DisplayName. Finally, it uses the Remove-EntraDevice cmdlet to delete the device using its ObjectId. Requires Cloud Device Administrator, Intune Administrator, or Windows 365 Administrator role.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-devices.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.ReadWrite.All'  \n$Device = Get-EntraDevice -Filter \"DisplayName eq 'Woodgrove Desktop'\"  \nRemove-EntraDevice -ObjectId $Device.ObjectId  \n```\n\n----------------------------------------\n\nTITLE: Update a User's Manager\nDESCRIPTION: This example demonstrates how to update the manager for a specified user in Microsoft Entra ID. It first connects to Entra with User.ReadWrite.All scopes, then uses Set-EntraUserManager to assign a new manager.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUserManager.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nSet-EntraUserManager -UserId 'SawyerM@contoso.com' -ManagerId 'Manager@contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Users with -All Parameter - PowerShell\nDESCRIPTION: This example retrieves all recoverable deleted users in Microsoft Entra ID using the `-All` parameter. It displays selected properties (Id, UserPrincipalName, DisplayName, AccountEnabled, DeletedDateTime, DeletionAgeInDays, UserType) in a formatted table. Connect-Entra is used to establish connection requiring the 'User.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedUser.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraDeletedUser -All | Select-Object Id, UserPrincipalName, DisplayName, AccountEnabled, DeletedDateTime, DeletionAgeInDays, UserType | Format-Table -AutoSize\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                   UserPrincipalName                                              DisplayName   AccountEnabled DeletedDateTime       DeletionAgeInDays UserType\n--                                   -----------------                                              -----------   -------------- ---------------       ----------------- --------\ndddddddd-3333-4444-5555-eeeeeeeeeeee dddddddd-3333-4444-5555-eeeeeeeeeeeeAveryS@contoso.com        Avery Smith   False          2/12/2025 1:15:34 PM  3                 Member\n```\n\n----------------------------------------\n\nTITLE: Turn off directory synchronization - PowerShell\nDESCRIPTION: This example shows how to turn off directory synchronization for a company using the Set-EntraBetaDirSyncEnabled cmdlet. It connects to Entra ID, retrieves the Tenant ID, and then executes the cmdlet with EnableDirsync set to $false, the TenantId specified, and Force to bypass confirmation.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaDirSyncEnabled.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'OnPremDirectorySynchronization.ReadWrite.All', 'Organization.ReadWrite.All'\n$tenantID = (Get-EntraContext).TenantId\nSet-EntraBetaDirSyncEnabled -EnableDirsync $false -TenantId $tenantID -Force\n```\n\n----------------------------------------\n\nTITLE: Remove Conditional Access Policy by PolicyId - PowerShell\nDESCRIPTION: This example demonstrates how to delete a conditional access policy in Microsoft Entra ID using the Remove-EntraConditionalAccessPolicy cmdlet. It retrieves the policy using Get-EntraConditionalAccessPolicy based on its display name and then removes it using its Id. Requires 'Policy.ReadWrite.ConditionalAccess' and 'Policy.Read.All' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraConditionalAccessPolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ConditionalAccess','Policy.Read.All'\n$policy = Get-EntraConditionalAccessPolicy | Where-Object {$_.DisplayName -eq 'MFA policy'}\nRemove-EntraConditionalAccessPolicy -PolicyId $policy.Id\n```\n\n----------------------------------------\n\nTITLE: Removing a Role Definition using Remove-EntraBetaDirectoryRoleDefinition PowerShell\nDESCRIPTION: This PowerShell script demonstrates how to remove a specified role definition from Microsoft Entra ID using the Remove-EntraBetaDirectoryRoleDefinition cmdlet. It first connects to Entra ID using Connect-Entra with the 'RoleManagement.ReadWrite.Directory' scope. Then, it retrieves the role definition to be removed using Get-EntraBetaDirectoryRoleDefinition, filtering by the display name 'Contoso Custom Role Definition'. Finally, it removes the role definition using Remove-EntraBetaDirectoryRoleDefinition, specifying the UnifiedRoleDefinitionId using the Id property of the retrieved role.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaDirectoryRoleDefinition.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory'\n$role = Get-EntraBetaDirectoryRoleDefinition -Filter \"DisplayName eq 'Contoso Custom Role Definition'\"\nRemove-EntraBetaDirectoryRoleDefinition -UnifiedRoleDefinitionId $role.Id\n```\n\n----------------------------------------\n\nTITLE: Remove Owner from Device - PowerShell\nDESCRIPTION: This example demonstrates how to remove an owner from a Microsoft Entra device using PowerShell. It first connects to Entra ID, retrieves the device and owner objects, and then removes the owner using the Remove-EntraDeviceRegisteredOwner cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraDeviceRegisteredOwner.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.AccessAsUser.All'\n$device = Get-EntraDevice -Filter \"DisplayName eq 'Woodgrove Desktop'\"\n$owner = Get-EntraDeviceRegisteredOwner -DeviceId $device.Id | Where-Object {$_.userPrincipalName -eq 'parker@contoso.com'}\nRemove-EntraDeviceRegisteredOwner -DeviceId $device.Id -OwnerId $owner.Id\n```\n\n----------------------------------------\n\nTITLE: Add LinkedIn Identity Provider (PowerShell)\nDESCRIPTION: This example demonstrates how to add a LinkedIn identity provider using the New-EntraIdentityProvider cmdlet. It requires the IdentityProvider.ReadWrite.All scope and provides values for the -Type, -Name, -ClientId, and -ClientSecret parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraIdentityProvider.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'IdentityProvider.ReadWrite.All'\nNew-EntraIdentityProvider -Type 'LinkedIn' -Name 'LinkedInName' -ClientId 'LinkedInAppClientId' -ClientSecret 'LinkedInAppClientSecret'\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId             DisplayName\n--             -----------\nLinkedIn-OAUTH LinkedInName\n```\n\n----------------------------------------\n\nTITLE: Get Device using Display Name (startsWith) - PowerShell\nDESCRIPTION: Connects to Entra ID and retrieves devices whose display name starts with a specified string, utilizing the `startsWith` function in the filter. Requires the Microsoft.Entra module and the 'Device.Read.All' scope.  This enables partial name matching for device retrieval.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDevice.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraDevice -Filter \"startsWith(DisplayName,'Woodgrove')\"\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDeletedDateTime Id                                   AccountEnabled ApproximateLastSignInDateTime ComplianceExpirationDateTime DeviceCategory DeviceId                             DeviceMetadata DeviceOwnership\n--------------- --                                   -------------- ----------------------------- ---------------------------- -------------- --------                             -------------- ---------------\n                bbbbbbbb-1111-2222-3333-cccccccccccc True                                                                                     eeeeeeee-4444-5555-6666-ffffffffffff MetaData\n```\n\n----------------------------------------\n\nTITLE: Creating User with Mobile - New-EntraUser (PowerShell)\nDESCRIPTION: This example shows how to create a new Microsoft Entra ID user and include their mobile phone number using the 'Mobile' parameter. The process includes connecting to Entra ID, creating a password profile, then defining the user properties (including the mobile number) in a hashtable before calling New-EntraUser to create the user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraUser.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\n$passwordProfile = New-Object -TypeName Microsoft.Open.AzureAD.Model.PasswordProfile\n$passwordProfile.Password = '<Password>'\n\n$UserParams = @{\n    DisplayName        = 'Sawyer Miller'\n    PasswordProfile    = $passwordProfile\n    UserPrincipalName  = 'SawyerM@contoso.com'\n    AccountEnabled     = $true\n    MailNickName       = 'SawyerM'\n    Mobile             = '+18989898989'\n}\n\nNew-EntraUser @UserParams\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nObjectId                             DisplayName UserPrincipalName               UserType\n--------                             ----------- -----------------               --------\neeeeeeee-4444-5555-6666-ffffffffffff Sawyer Miller    SawyerM@contoso.com             Member\n```\n\n----------------------------------------\n\nTITLE: Bulk Assigning Multiple Licenses to Multiple Users (PowerShell)\nDESCRIPTION: This PowerShell script demonstrates how to bulk assign multiple licenses to multiple users simultaneously in Microsoft Entra ID. It defines the license plans and the users to whom the licenses will be assigned. Optionally, it shows how to import a list of users from a CSV file. Requires `Organization.ReadWrite.All` scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/how-to-manage-user-licenses.md#_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\n# Connect to Entra\nConnect-Entra -Scopes 'Organization.ReadWrite.All'\n\n# Retrieve the SkuId for the desired license plans\n$skuId1 = (Get-EntraSubscribedSku | Where-Object { $_.SkuPartNumber -eq 'AAD_PREMIUM_P2' }).SkuId\n$skuId2 = (Get-EntraSubscribedSku | Where-Object { $_.SkuPartNumber -eq 'EMS' }).SkuId\n\n# Define the user to whom the licenses will be assigned\n$users = ('AljosaH@Contoso.com','PalameeC@Contoso.com')\n\n# You can, alternatively, import users from a csv file. For this example, the CSV should have a column named 'user'\n$users = Import-Csv -Path \"C:\\path\\to\\your\\users.csv\" | Select-Object -ExpandProperty user\n```\n\n----------------------------------------\n\nTITLE: Get Objects by Type using Get-EntraDirectoryObject in PowerShell\nDESCRIPTION: This example demonstrates how to retrieve directory objects based on their type, using the `-ObjectTypes` parameter.  It uses `Get-EntraDirectoryObject` with specific object IDs and the 'User' object type to filter the results, and then selects the 'Id', 'DisplayName', and '@odata.type' properties using `Select-Object`.\n\nPrerequisites: The Microsoft.Entra module must be installed and the user must have the 'Directory.Read.All' scope granted using `Connect-Entra`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDirectoryObject.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\nGet-EntraDirectoryObject -DirectoryObjectIds 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb', 'bbbbbbbb-1111-2222-3333-cccccccccccc' -ObjectTypes 'User' | \nSelect-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Add Key Credential to Application - PowerShell\nDESCRIPTION: This PowerShell script adds a key credential to a specified application using the New-EntraBetaApplicationKey cmdlet.  It first connects to Entra with required scopes, retrieves the application, and then constructs parameters for the key credential, password credential, and proof.  It then executes the New-EntraBetaApplicationKey cmdlet with these parameters. It requires the Microsoft.Entra.Beta module to be installed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplicationKey.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All', 'Application.ReadWrite.OwnedBy'\n$app = Get-EntraBetaApplication -Filter \"DisplayName eq '<application-display-name>'\"\n$params = @{\n    ApplicationId      = $app.Id\n    KeyCredential      = @{ key = [System.Convert]::FromBase64String('{base64cert}') }\n    PasswordCredential = @{ DisplayName = 'mypassword' }\n    Proof              = '{token}'\n}\nNew-EntraBetaApplicationKey @params\n```\n\n----------------------------------------\n\nTITLE: Setting Password Profile - Set-EntraUser (PowerShell)\nDESCRIPTION: This example illustrates how to set the password profile of a user, including the password and the option to force a password change on the next sign-in. The `PasswordProfile` parameter accepts a hashtable containing the `Password` and `ForceChangePasswordNextSignIn` properties. The `Connect-Entra` cmdlet must be used before running this.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUser.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nSet-EntraUser -UserId 'SawyerM@contoso.com' -PasswordProfile @{\n    Password = '*****'\n    ForceChangePasswordNextSignIn = $true\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Managed Devices - PowerShell\nDESCRIPTION: This PowerShell script lists managed devices in Microsoft Entra ID. It connects to Entra ID with the 'Device.Read.All' scope, then filters the devices using Get-EntraDevice with a filter to find devices where the 'isManaged' property is true. The script selects and displays the Id, isManaged, DeviceId, and DisplayName properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-devices.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraDevice -Filter \"isManaged eq true\" | Select-Object Id, isManaged,DeviceId, DisplayName\n```\n\n----------------------------------------\n\nTITLE: Assign users and groups to the application - PowerShell\nDESCRIPTION: Assigns users and groups to the created application. It retrieves a user and a group from Microsoft Entra ID, then creates user and group app role assignments using the New-EntraUserAppRoleAssignment and New-EntraGroupAppRoleAssignment cmdlets, linking them to the service principal.  An empty Guid is used for the Id parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/create-custom-application.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Get a user and a group\n$user = Get-EntraUser -UserId 'AdeleV@contoso.com'\n$group = Get-EntraGroup -Search 'Sales and Marketing'\n\n# Assign users and groups to the application\n$emptyGuidUser = [Guid]::Empty.ToString()\nNew-EntraUserAppRoleAssignment -ObjectId $user.Id -PrincipalId $user.Id -ResourceId $servicePrincipal.Id -Id $emptyGuidUser\n\n$emptyGuidGroup = [Guid]::Empty.ToString()\nNew-EntraGroupAppRoleAssignment -GroupId $group.Id -PrincipalId $group.Id -ResourceId $servicePrincipal.Id -Id $emptyGuidGroup\n```\n\n----------------------------------------\n\nTITLE: Update Multiple Device Properties - PowerShell\nDESCRIPTION: This example shows how to update multiple properties of a device using a hashtable with the Set-EntraDevice cmdlet. It connects to Entra ID, retrieves the device object, creates a hashtable containing the properties to be updated, and then passes the hashtable to the cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraDevice.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.AccessAsUser.All', 'Device.ReadWrite.All'\n$device = Get-EntraDevice -Filter \"DisplayName eq 'Woodgrove Desktop'\"\n$params = @{\n    DeviceObjectId      = $device.ObjectId\n    DeviceMetadata      = 'Testdevice'\n    DeviceObjectVersion = 4\n    DevicePhysicalIds   = '[GID]:g:1234567890123456'\n    IsCompliant         = $false\n}\nSet-EntraDevice @params\n```\n\n----------------------------------------\n\nTITLE: Retrieve User's MFA Status - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a user's MFA status using the `Get-EntraBetaUserAuthenticationRequirement` cmdlet. It first connects to Entra ID using `Connect-Entra` with the 'Policy.Read.All' scope and then uses `Get-EntraBetaUserAuthenticationRequirement` with the user's ID to retrieve the status.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserAuthenticationRequirement.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.All'\nGet-EntraBetaUserAuthenticationRequirement -UserId 'SawyerM@contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Remove Role Assignment in Entra ID (PowerShell)\nDESCRIPTION: This PowerShell script removes a specific role assignment from Microsoft Entra ID. It requires the 'RoleManagement.ReadWrite.Directory' and 'EntitlementManagement.ReadWrite.All' scopes. The script first retrieves a user and a role definition, then finds the corresponding role assignment based on the user and role IDs, and finally removes the assignment using its ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraDirectoryRoleAssignment.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory', 'EntitlementManagement.ReadWrite.All'1\n$user = Get-EntraUser -UserId 'SawyerM@contoso.com'\n$role = Get-EntraDirectoryRoleDefinition -Filter \"DisplayName eq 'Helpdesk Administrator'\"\n$assignment = Get-EntraDirectoryRoleAssignment -All | Where-Object { $_.principalId -eq $user.Id -AND $_.RoleDefinitionId -eq $role.Id }\nRemove-EntraDirectoryRoleAssignment -UnifiedRoleAssignmentId $assignment.Id\n```\n\n----------------------------------------\n\nTITLE: Update Role Definition IsEnabled - PowerShell\nDESCRIPTION: This snippet updates the `IsEnabled` property of an existing Microsoft Entra role definition, specifying whether the role definition is enabled. It requires connecting to Entra ID with 'RoleManagement.ReadWrite.Directory' scope, retrieves the role by name, and sets the `IsEnabled` property using `Set-EntraDirectoryRoleDefinition`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraDirectoryRoleDefinition.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory'\n$roleDefinition = Get-EntraDirectoryRoleDefinition -Filter \"DisplayName eq '<Role-Definition-Name>'\"\nSet-EntraDirectoryRoleDefinition -UnifiedRoleDefinitionId $roleDefinition.Id -IsEnabled $true\n```\n\n----------------------------------------\n\nTITLE: Get the first two sign-in logs - PowerShell\nDESCRIPTION: This example retrieves the first two sign-in audit logs.  It connects to Entra ID with the necessary scopes and uses the `Get-EntraAuditSignInLog` cmdlet with the `-Top` parameter set to 2. This limits the output to the first two entries. The output displays properties such as ID, application display name, application ID, token protection status, authentication methods used, and authentication protocol.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAuditSignInLog.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All','Directory.Read.All'\nGet-EntraAuditSignInLog -Top 2\n```\n\n----------------------------------------\n\nTITLE: Create Password Credential with EndDate - PowerShell\nDESCRIPTION: This example demonstrates how to create a password credential with a specific end date for a service principal in Microsoft Entra ID using the `New-EntraBetaServicePrincipalPasswordCredential` cmdlet. The example first connects to Entra using specific scopes, retrieves the service principal by its display name, and then creates the password credential with a defined end date. It requires the `Application.ReadWrite.All` and `Application.ReadWrite.OwnedBy` scopes. The output contains information about the newly created credential, including the secret, start date, and end date.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaServicePrincipalPasswordCredential.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nNew-EntraBetaServicePrincipalPasswordCredential -ServicePrincipalId $servicePrincipal.Id -DisplayName 'Helpdesk App Credential' -EndDate '2024-11-04T14:14:14Z'\n```\n\n----------------------------------------\n\nTITLE: List Service Principal App Roles - PowerShell\nDESCRIPTION: This snippet shows how to retrieve the app roles assigned to a specific service principal. It connects to Entra with the 'Application.Read.All' scope, searches for a service principal by its display name using `Get-EntraServicePrincipal`, and then displays the app roles associated with that service principal.  The output shows the allowed member types, description, display name, ID, enabled status, origin and value of the app roles.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipal.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraServicePrincipal -SearchString 'Contoso Helpdesk Application'\n$servicePrincipal.AppRoles | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: List Jailbroken Devices - EntraBetaDevice - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a list of devices that are identified as jailbroken (rooted). It requires the 'Device.Read.All' scope and uses the Get-EntraBetaDevice cmdlet to retrieve all devices, then filters the results using `Where-Object` to select devices where the `isRooted` property is equal to `$true`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDevice.md#_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraBetaDevice -All | Where-Object { $_.isRooted -eq $true }\n```\n\n----------------------------------------\n\nTITLE: Removing Device Ownership - PowerShell\nDESCRIPTION: This snippet connects to Entra ID with the 'Directory.AccessAsUser.All' scope, retrieves a device by its display name, gets the registered owner of the device, and removes the owner. This helps prevent unauthorized device access. Requires the Entra PowerShell module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-user.md#_snippet_23\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.AccessAsUser.All'\n$device = Get-EntraDevice -Filter \"DisplayName eq 'Sawyer Laptop'\"\n$owner = Get-EntraDeviceRegisteredOwner -DeviceId $device.Id\nRemove-EntraDeviceRegisteredOwner -DeviceId $device.Id -OwnerId $owner.Id\n```\n\n----------------------------------------\n\nTITLE: Get User Memberships - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve user memberships in Microsoft Entra ID using the Get-EntraUserMembership cmdlet. It connects to Entra ID with the User.Read scope, retrieves memberships for a specified user ID, and then selects and formats the output to display the ID, displayName, createdDateTime, and @odata.type properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserMembership.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read'\nGet-EntraUserMembership -UserId 'SawyerM@contoso.com' |\nSelect-Object Id, displayName, createdDateTime, '@odata.type' |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Set User Password with Enforce Policy (PowerShell)\nDESCRIPTION: Sets a user's password and enforces the password change policy, requiring the user to change their password upon next login.  It connects to Entra ID, converts a plain-text password to a secure string, and then uses the `Set-EntraUserPassword` cmdlet with the `-EnforceChangePasswordPolicy` parameter set to `$True`. Requires the 'Directory.AccessAsUser.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUserPassword.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.AccessAsUser.All'\n$newPassword= '<strong-password>'\n$securePassword = ConvertTo-SecureString $newPassword -AsPlainText -Force \nSet-EntraUserPassword -UserId 'SawyerM@contoso.com' -Password $securePassword -EnforceChangePasswordPolicy $True\n```\n\n----------------------------------------\n\nTITLE: Remove Application Password Example - PowerShell\nDESCRIPTION: This example demonstrates how to remove a password from an application using the Remove-EntraApplicationPassword cmdlet. It first connects to Entra ID, retrieves the application and password credential, and then removes the password using the ApplicationId and KeyId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraApplicationPassword.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\n$applicationPassword = Get-EntraApplicationPasswordCredential -ApplicationId $application.Id | Where-Object {$_.DisplayName -eq 'CRM Helpdesk App'}\nRemove-EntraApplicationPassword -ApplicationId $application.Id -KeyId $applicationPassword.KeyId\n```\n\n----------------------------------------\n\nTITLE: Update Signed-In User Password using Update-EntraSignedInUserPassword (PowerShell)\nDESCRIPTION: This PowerShell example demonstrates how to update the password for the currently signed-in user in Microsoft Entra ID. It uses the `Connect-Entra` cmdlet to establish a connection with the necessary scopes, then defines the current and new passwords as secure strings using `ConvertTo-SecureString`. Finally, it calls `Update-EntraSignedInUserPassword` to perform the password update, passing the current and new password secure strings as parameters.\n\nDependencies: Requires the Microsoft.Entra module.\nParameters: -CurrentPassword (SecureString, current password), -NewPassword (SecureString, new password).\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Update-EntraSignedInUserPassword.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.AccessAsUser.All'\n$currentPassword = ConvertTo-SecureString '<strong-password>' -AsPlainText -Force\n$newPassword = ConvertTo-SecureString '<strong-password>' -AsPlainText -Force\nUpdate-EntraSignedInUserPassword -CurrentPassword $currentPassword -NewPassword $newPassword\n```\n\n----------------------------------------\n\nTITLE: List Jail Broken Devices - PowerShell\nDESCRIPTION: Connects to Entra ID and retrieves a list of jailbroken (rooted) devices. Requires the Microsoft.Entra module and the 'Device.Read.All' scope. The example retrieves all devices and then filters them based on the `isRooted` property.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDevice.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraDevice -All | Where-Object { $_.isRooted -eq $true }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Users Assigned to a Specific License (PowerShell)\nDESCRIPTION: This PowerShell snippet retrieves all users assigned to a specific license plan. It uses `Get-EntraSubscribedSku` to get the `SkuId` of the license, then `Get-EntraUser` with the `AssignedLicenses` parameter to filter users who have that license.  The results are formatted into a table showing user details.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/how-to-manage-user-licenses.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All'\n$skuId = (Get-EntraSubscribedSku | Where-Object { $_.SkuPartNumber -eq 'EMSPREMIUM' }).SkuId\n$usersWithLicense = Get-EntraUser -All | Where-Object {$_.AssignedLicenses -and ($_.AssignedLicenses.SkuId -contains $skuId)}\n$usersWithLicense | Select-Object Id, DisplayName, UserPrincipalName, AccountEnabled, UserType | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Remove User Extension Example - PowerShell\nDESCRIPTION: This example demonstrates how to remove a specific user extension from Microsoft Entra ID. It first connects to Entra ID with the necessary scopes, then uses the Remove-EntraUserExtension cmdlet to remove an extension named 'Test Extension' from the user with the ObjectId 'SawyerM@Contoso.com'. It requires the 'User.ReadWrite.All' scope and valid user and extension identifiers.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraUserExtension.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nRemove-EntraUserExtension -ObjectId 'SawyerM@Contoso.com' -ExtensionName 'Test Extension'\n```\n\n----------------------------------------\n\nTITLE: Retrieve User Password Policy - Entra ID - PowerShell\nDESCRIPTION: This example shows how to retrieve a user's password policy in Microsoft Entra ID. It selects the UserPrincipalName and a calculated property indicating whether the password never expires. It requires connecting to Entra ID with the 'User.Read.All' scope. It utilizes the `-Property` parameter in conjunction with `Select-Object` to obtain the desired attributes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUser.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraUser -UserId 'SawyerM@contoso.com' `\n              -Property UserPrincipalName, PasswordPolicies |\n    Select-Object UserPrincipalName, \n                  @{\n                      Name = \"PasswordNeverExpires\"\n                      Expression = { $_.PasswordPolicies -contains \"DisablePasswordExpiration\" }\n                  }\n```\n\n----------------------------------------\n\nTITLE: List Duplicate Devices using Entra PowerShell\nDESCRIPTION: This PowerShell script retrieves all devices, groups them by display name, filters for display names with more than one entry, and then formats the output to show the display name, operating system, and count of each duplicate device.  It requires the Device.Read.All scope. The output is sorted in descending order by count.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-devices.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'  \nGet-EntraDevice -All -Select DisplayName, OperatingSystem |\nGroup-Object DisplayName |\nWhere-Object { $_.Count -gt 1 } |\nSelect-Object Name, @{Name = \"OperatingSystem\"; Expression = { ($_.Group | Select-Object -First 1).OperatingSystem } }, Count | Sort-Object Count -Descending |\nFormat-Table Name, OperatingSystem, Count -AutoSize \n```\n\n----------------------------------------\n\nTITLE: Add a user as a registered owner using PowerShell\nDESCRIPTION: This example shows how to add a registered user to a device.  It utilizes the `Connect-Entra`, `Get-EntraUser`, `Get-EntraDevice`, and `Add-EntraDeviceRegisteredOwner` cmdlets to achieve this.  The script retrieves user and device objects based on their identifiers and then associates the user as a registered owner of the device. Requires Device.ReadWrite.All scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Add-EntraDeviceRegisteredOwner.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Device.ReadWrite.All'\n$user = Get-EntraUser -UserId 'SawyerM@contoso.com'\n$device = Get-EntraDevice -SearchString '<device-display-name>'\nAdd-EntraDeviceRegisteredOwner -DeviceId $device.Id -OwnerId $user.Id\n```\n\n----------------------------------------\n\nTITLE: Create application from application template\nDESCRIPTION: This example demonstrates how to create an application from an application template using `New-EntraApplicationFromApplicationTemplate`. It first connects to Entra ID with specific scopes, retrieves an application template, and then creates the application. `Application.ReadWrite.OwnedBy` is an application only permission.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplicationFromApplicationTemplate.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy' # Application.ReadWrite.OwnedBy is an app-only permission (non-interactive)\n$applicationTemplate = Get-EntraApplicationTemplate -Filter \"DisplayName eq 'SAP Fieldglass'\"\nNew-EntraApplicationFromApplicationTemplate -ApplicationTemplateId $applicationTemplate.Id -DisplayName 'Contoso SAP App'\n```\n\nLANGUAGE: powershell\nCODE:\n```\n@odata.context                                                                         servicePrincipal\n--------------                                                                         ----------------\nhttps://graph.microsoft.com/v1.0/$metadata#microsoft.graph.applicationServicePrincipal @{oauth2PermissionScopes=System.Object[]; servicePrincipalType=Application; displ...}\n```\n\n----------------------------------------\n\nTITLE: Remove Entra Application Password Credential Syntax - PowerShell\nDESCRIPTION: Defines the syntax of the Remove-EntraApplicationPasswordCredential cmdlet, including the required parameters ApplicationId and KeyId. This allows a user to properly format the command when removing a password credential.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraApplicationPasswordCredential.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraApplicationPasswordCredential\n -ApplicationId <String>\n -KeyId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get device count by Join Type using Entra PowerShell\nDESCRIPTION: This code snippet retrieves all devices from the Microsoft Entra directory and groups them by their TrustType property, providing a count of devices for each join type. It requires the Device.Read.All scope. The TrustType indicates how the device is joined, such as Microsoft Entra joined or Hybrid Microsoft Entra joined. The output displays the Name (TrustType) and Count for each group.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-devices.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'  \nGet-EntraDevice -All | Group-Object -Property TrustType | Select-Object Name, Count\n```\n\n----------------------------------------\n\nTITLE: Set User CBA Certificate User ID - Certificate - PowerShell\nDESCRIPTION: This example demonstrates how to update a user's certificate authorization information using a certificate object and maps the RFC822Name and SKI fields.\nIt requires the 'Directory.ReadWrite.All' and 'User.ReadWrite.All' scopes and uses the `Set-EntraUserCBACertificateUserId` cmdlet.\nThe updated details can be viewed with `Get-EntraUserCBAAuthorizationInfo`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUserCBACertificateUserId.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All', 'User.ReadWrite.All'\n$text = '-----BEGIN CERTIFICATE-----\\nMIIDiz...=\\n-----END CERTIFICATE-----'\n$bytes = [System.Text.Encoding]::UTF8.GetBytes($text)\n$certificate = [System.Security.Cryptography.X509Certificates.X509Certificate2]::new($bytes)\nSet-EntraUserCBACertificateUserId -UserId 'SawyerM@contoso.com' -Cert $certificate -CertificateMapping @('RFC822Name', 'SKI')\n```\n\n----------------------------------------\n\nTITLE: Remove a contact - Remove-EntraContact - PowerShell\nDESCRIPTION: This example demonstrates how to remove a specific contact from Microsoft Entra ID. It first connects to Entra ID with the necessary scopes, retrieves the contact using Get-EntraContact based on its display name, and then removes it using the Remove-EntraContact cmdlet, providing the contact's object ID.  Requires the 'OrgContact.Read.All' scope to be granted to the application. The $contact.Id parameter passes the object ID of the contact to be removed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraContact.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'OrgContact.Read.All'\n$contact = Get-EntraContact -Filter \"displayName eq 'Contoso Contact'\"\nRemove-EntraContact -OrgContactId $contact.Id\n```\n\n----------------------------------------\n\nTITLE: Create App Key Credential with Certificate PowerShell\nDESCRIPTION: This example shows how to add an application key credential using a certificate. It imports a certificate from a file, extracts relevant information such as the raw data and thumbprint, converts them to base64 strings, and then uses these values to create the key credential. Requires 'Application.ReadWrite.All' and 'Application.ReadWrite.OwnedBy' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplicationKeyCredential.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\n$cer = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2 #create a new certificate object\n$cer.Import('C:\\Users\\ContosoUser\\appcert.cer') \n$bin = $cer.GetRawCertData()\n$base64Value = [System.Convert]::ToBase64String($bin)\n$bin = $cer.GetCertHash()\n$base64Thumbprint = [System.Convert]::ToBase64String($bin)\n$keyid = [System.Guid]::NewGuid().ToString() \n\n$params = @{\n    ApplicationId = $application.Id\n    CustomKeyIdentifier = $base64Thumbprint\n    Type = 'AsymmetricX509Cert'\n    Usage = 'Verify'\n    Value = $base64Value\n    StartDate = $cer.GetEffectiveDateString()\n    EndDate = $cer.GetExpirationDateString()\n}\nNew-EntraApplicationKeyCredential @params\n```\n\n----------------------------------------\n\nTITLE: List Failed Sign-ins for a User - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve failed sign-ins for a specific user using the `Get-EntraBetaAuditSignInLog` cmdlet. It requires connecting to Entra ID with appropriate scopes.  The `-Filter` parameter filters for a specific `userPrincipalName` and where the `errorCode` is not equal to 0. The results are then formatted into a table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAuditSignInLog.md#_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All','Directory.Read.All'\n$failedSignIns = Get-EntraBetaAuditSignInLog -Filter \"userPrincipalName eq 'SawyerM@contoso.com' and status/errorCode ne 0\"\n$failedSignIns | Select-Object UserPrincipalName, CreatedDateTime, Status, IpAddress, ClientAppUsed | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: View all devices with Entra PowerShell\nDESCRIPTION: This code snippet retrieves all devices in the Microsoft Entra directory and displays selected properties such as AccountEnabled, DeviceId, OperatingSystem, ApproximateLastSignInDateTime, and DisplayName. It requires the Device.Read.All scope and utilizes the Get-EntraDevice cmdlet with the -All parameter to fetch all devices. The output is formatted as a table for readability.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-devices.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'  \nGet-EntraDevice -All | Select-Object AccountEnabled, DeviceId, OperatingSystem, ApproximateLastSignInDateTime, DisplayName | ft\n```\n\n----------------------------------------\n\nTITLE: Add Google Identity Provider - PowerShell\nDESCRIPTION: This example demonstrates how to add a Google identity provider using the New-EntraBetaIdentityProvider cmdlet. It includes connecting to Entra with the necessary scopes and specifying the provider type, name, client ID, and client secret.  The output shows the ID and display name of the newly created identity provider.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaIdentityProvider.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'IdentityProvider.ReadWrite.All'\nNew-EntraBetaIdentityProvider -Type 'Google' -Name 'GoogleName' -ClientId 'Google123' -ClientSecret 'GoogleClientSecret'\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId             DisplayName\n--             -----------\nGoogle-OAUTH   GoogleName\n```\n\n----------------------------------------\n\nTITLE: Remove Named Location Policy by PolicyId - PowerShell\nDESCRIPTION: This PowerShell code snippet demonstrates how to delete a named location policy in Microsoft Entra ID using the Remove-EntraNamedLocationPolicy cmdlet. It first connects to Entra ID with specific scopes, retrieves the target policy by its display name, and then deletes it using its ID. Requires 'Policy.ReadWrite.ConditionalAccess' and 'Policy.Read.All' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraNamedLocationPolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ConditionalAccess', 'Policy.Read.All'\n$policy = Get-EntraNamedLocationPolicy | Where-Object { $_.DisplayName -eq 'IP named location policy' }\nRemove-EntraNamedLocationPolicy -PolicyId $policy.Id\n```\n\n----------------------------------------\n\nTITLE: Retrieve guest users with active licenses - PowerShell\nDESCRIPTION: This script retrieves guest users who have active licenses assigned to them. It first connects to Entra with User.Read.All scope. It then filters for users with 'Guest' userType, iterates through them, checks if they have assigned licenses, and outputs selected properties if they do. The final result is formatted as a table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUser.md#_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\n$guestUsers = Get-EntraUser -Filter \"userType eq 'Guest'\" -All\n$guestUsersWithLicenses = foreach ($guest in $guestUsers) {\n    if ($guest.AssignedLicenses.Count -gt 0) {\n        [PSCustomObject]@{\n            Id                = $guest.Id\n            DisplayName       = $guest.DisplayName\n            UserPrincipalName = $guest.UserPrincipalName\n            AssignedLicenses  = ($guest.AssignedLicenses | ForEach-Object { $_.SkuId }) -join \", \"\n        }\n    }\n}\n$guestUsersWithLicenses | Format-Table Id, DisplayName, UserPrincipalName, AssignedLicenses -AutoSize\n```\n\n----------------------------------------\n\nTITLE: List Users by Country - Entra ID - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all users located in a specific country. It filters users based on the `Country` property using the `-Filter` parameter and formats the output to display relevant properties. Requires 'User.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUser.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\n$usersInCanada = Get-EntraUser -Filter \"Country eq 'Canada'\"\n$usersInCanada | Select-Object Id, DisplayName, UserPrincipalName, OfficeLocation, Country | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: New-EntraServicePrincipal Syntax\nDESCRIPTION: This snippet shows the syntax for the New-EntraServicePrincipal command in PowerShell. It outlines all available parameters including AppId, KeyCredentials, Homepage, LogoutUrl, ServicePrincipalType, AlternativeNames, PasswordCredentials, Tags, AccountEnabled, ServicePrincipalNames, AppRoleAssignmentRequired, DisplayName, and ReplyUrls. CommonParameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraServicePrincipal.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-EntraServicePrincipal\n -AppId <String>\n [-KeyCredentials <System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.KeyCredential]>] \n [-Homepage <String>]\n [-LogoutUrl <String>]\n [-ServicePrincipalType <String>]\n [-AlternativeNames <System.Collections.Generic.List`1[System.String]>]\n [-PasswordCredentials <System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.PasswordCredential]>]\n [-Tags <System.Collections.Generic.List`1[System.String]>]\n [-AccountEnabled <String>]\n [-ServicePrincipalNames <System.Collections.Generic.List`1[System.String]>]\n [-AppRoleAssignmentRequired <Boolean>]\n [-DisplayName <String>]\n [-ReplyUrls <System.Collections.Generic.List`1[System.String]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Create User with AgeGroup\nDESCRIPTION: This example creates a new user using the AgeGroup parameter. It connects to Entra, creates a PasswordProfile object, and then calls the New-EntraBetaUser cmdlet with parameters including DisplayName, PasswordProfile, UserPrincipalName, AccountEnabled, MailNickName, and AgeGroup. Requires the User.ReadWrite.All scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaUser.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\n$passwordProfile = New-Object -TypeName Microsoft.Open.AzureAD.Model.PasswordProfile\n$passwordProfile.Password = '<Password>'\n$params = @{\n    DisplayName = 'New User'\n    PasswordProfile = $passwordProfile\n    UserPrincipalName = 'NewUser@contoso.com'\n    AccountEnabled = $true\n    MailNickName = 'Newuser'\n    AgeGroup = 'adult'\n}\n\nNew-EntraBetaUser @params\n```\n\nLANGUAGE: powershell\nCODE:\n```\nDisplayName Id                                   Mail UserPrincipalName\n----------- --                                   ---- -----------------\nNew User 00aa00aa-bb11-cc22-dd33-44ee44ee44ee      NewUser@contoso.com\n```\n\n----------------------------------------\n\nTITLE: Unassign users/groups from service principal - PowerShell\nDESCRIPTION: This script connects to Microsoft Entra, retrieves a service principal by its ID, and removes all app role assignments associated with that service principal. It requires the 'AppRoleAssignment.ReadWrite.All' scope. The script iterates through each assignment and removes it using `Remove-EntraServicePrincipalAppRoleAssignment`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-user-group-assignment.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AppRoleAssignment.ReadWrite.All'\n$servicePrincipal = Get-EntraServicePrincipal -ServicePrincipalId '31f1d894-0a2b-4901-b30c-b61a0e87acfe'\n# Remove all app role assignments from the service principal\n$assignments = Get-EntraServicePrincipalAppRoleAssignedTo -ServicePrincipalId $servicePrincipal.Id\nforeach ($assignment in $assignments) {\n    Remove-EntraServicePrincipalAppRoleAssignment -ServicePrincipalId $servicePrincipal.Id -AppRoleAssignmentId $assignment.Id\n}\n```\n\n----------------------------------------\n\nTITLE: Create an Administrative Unit with Detailed Configuration - PowerShell\nDESCRIPTION: Shows how to create an administrative unit with a dynamic membership rule, membership type, rule processing state and visibility settings. Requires the 'AdministrativeUnit.ReadWrite.All' scope. This configuration allows for automatically managing administrative unit memberships based on user properties. It demonstrates the use of variables for parameter values to improve readability.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaAdministrativeUnit.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.ReadWrite.All'\n$displayName = 'Seattle District Technical Schools'\n$description = 'Seattle district technical schools administration'\n$membershipRule = '(user.country -eq \"United States\")'\n\nNew-EntraBetaAdministrativeUnit `\n    -DisplayName $displayName `\n    -Description $description `\n    -MembershipType 'Dynamic' `\n    -MembershipRule $membershipRule `\n    -MembershipRuleProcessingState 'On' `\n    -Visibility 'HiddenMembership'\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nid                            : bbbbbbbb-1111-2222-3333-cccccccccccc\ndisplayName                   : Chester District Schools\ndescription                   : Chester District schools administration\nisMemberManagementRestricted  :\nmembershipRule                : (user.country -eq \"Australia\")\nmembershipRuleProcessingState : On\nmembershipType                : Dynamic\nvisibility                    : HiddenMembership\n```\n\n----------------------------------------\n\nTITLE: Creating a role definition with ResourceScopes\nDESCRIPTION: This PowerShell script creates a new role definition in Microsoft Entra ID with specified resource scopes. It establishes a connection to Entra ID, sets up role permissions, and uses the `New-EntraDirectoryRoleDefinition` cmdlet to create the role, incorporating the specified permissions, enabled status, display name, and resource scopes. Connecting to Entra ID requires the correct scopes and the `Microsoft.Graph` module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraDirectoryRoleDefinition.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory'\n$rolePermissions = New-object Microsoft.Open.MSGraph.Model.RolePermission\n$rolePermissions.AllowedResourceActions = @(\"microsoft.directory/applications/basic/read\")\nNew-EntraDirectoryRoleDefinition -RolePermissions $rolePermissions -IsEnabled $false -DisplayName 'MyRoleDefinition' -ResourceScopes '/'\n```\n\n----------------------------------------\n\nTITLE: Add User as Application Owner - PowerShell\nDESCRIPTION: This example demonstrates how to add a user as an owner to an application in Microsoft Entra ID using PowerShell. It first connects to Entra ID with required scopes, then retrieves the application and user objects by their display name and user ID respectively, and finally adds the user as an owner to the application using the Add-EntraApplicationOwner cmdlet. It assumes that the Microsoft.Entra module is already installed and that the user has the necessary permissions.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Add-EntraApplicationOwner.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All'\n$application = Get-EntraApplication -Filter \"DisplayName eq 'Helpdesk Application'\"\n$user = Get-EntraUser -UserId 'SawyerM@contoso.com'\nAdd-EntraApplicationOwner -ApplicationId $application.Id -OwnerId $user.Id\n```\n\n----------------------------------------\n\nTITLE: Creating a Password Credential with a Start Date\nDESCRIPTION: This example shows how to create a password credential specifying a start date.  It connects to Entra ID, retrieves an application, calculates the start date, and then uses the `-StartDate` parameter to set when the password becomes valid. Note: '<displayName>' and '<userfriendlyDisplayName>' should be replaced with actual values.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplicationPasswordCredential.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraBetaApplication -Filter \"displayName eq '<displayName>'\"\n$startDate = (Get-Date).AddYears(0)\nNew-EntraBetaApplicationPasswordCredential -ApplicationId $application.Id -CustomKeyIdentifier '<userfriendlyDisplayName>' -StartDate $startDate\n```\n\n----------------------------------------\n\nTITLE: Bulk Assigning Licenses to Users (Entra Beta)\nDESCRIPTION: This PowerShell script shows how to assign licenses in bulk to multiple users.  It retrieves the SkuId of the desired licenses, defines an array of users, creates the license assignment objects, and then iterates through the user list to assign licenses to each user using the `Set-EntraBetaUserLicense` cmdlet. The script requires a connection to Entra with the 'Organization.ReadWrite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUserLicense.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.ReadWrite.All'\n# Retrieve the SkuId for the desired license plans\n$skuId1 = (Get-EntraBetaSubscribedSku | Where-Object { $_.SkuPartNumber -eq 'AAD_PREMIUM_P2' }).SkuId\n$skuId2 = (Get-EntraBetaSubscribedSku | Where-Object { $_.SkuPartNumber -eq 'EMS' }).SkuId\n# Define the user to whom the licenses will be assigned\n$users = ('AljosaH@Contoso.com', 'PalameeC@Contoso.com')\n# You can, alternatively, import users from a csv file. For this example, the CSV should have a column named 'user'\n$users = Import-Csv -Path \"C:\\path\\to\\your\\users.csv\" | Select-Object -ExpandProperty user\n# Create license assignment objects\n$license1 = New-Object -TypeName Microsoft.Open.AzureAD.Model.AssignedLicense\n$license1.SkuId = $skuId1\n$license2 = New-Object -TypeName Microsoft.Open.AzureAD.Model.AssignedLicense\n$license2.SkuId = $skuId2\n$licenses = New-Object -TypeName Microsoft.Open.AzureAD.Model.AssignedLicenses\n$licenses.AddLicenses = $license1, $license2\n# Assign the licenses to each user\nforeach ($user in $users) {\n    Set-EntraBetaUserLicense -UserId $user -AssignedLicenses $licenses\n}\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Users by Search String - PowerShell\nDESCRIPTION: This example retrieves deleted users containing the string 'Avery Smith' in the directory. It displays selected properties (Id, UserPrincipalName, DisplayName, AccountEnabled, DeletedDateTime, DeletionAgeInDays, UserType) in a formatted table. Requires connection established with Connect-Entra using 'User.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedUser.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraDeletedUser -SearchString 'Avery Smith' | Select-Object Id, UserPrincipalName, DisplayName, AccountEnabled, DeletedDateTime, DeletionAgeInDays, UserType | Format-Table -AutoSize\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                   UserPrincipalName                                              DisplayName   AccountEnabled DeletedDateTime       DeletionAgeInDays UserType\n--                                   -----------------                                              -----------   -------------- ---------------       ----------------- --------\ndddddddd-3333-4444-5555-eeeeeeeeeeee dddddddd-3333-4444-5555-eeeeeeeeeeeeAveryS@contoso.com        Avery Smith   False          2/12/2025 1:15:34 PM  3                 Member\n```\n\n----------------------------------------\n\nTITLE: Create Entra Group with Visibility\nDESCRIPTION: This example demonstrates how to create a new Microsoft Entra ID group with a specified visibility setting using the New-EntraGroup cmdlet. The Visibility parameter can be set to 'Public', 'Private', or 'HiddenMembership'.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraGroup.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All','Group.Create'\n$params = @{\n    DisplayName = 'HelpDesk admin group2'\n    Description = 'Group assignable to role'\n    MailEnabled = $False\n    MailNickname = 'helpDeskAdminGroup'\n    SecurityEnabled = $True\n    Visibility = 'Private'\n}\n\nNew-EntraGroup @params\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDisplayName           Id                                   MailNickname       Description              GroupTypes\n-----------           --                                   ------------       -----------              ----------\nHelpDesk admin group2 gggggggg-0000-4444-3333-llllllllllll helpDeskAdminGroup Group assignable to role {}\n```\n\n----------------------------------------\n\nTITLE: List User's Directory Roles - PowerShell\nDESCRIPTION: This example demonstrates how to list a user's assigned directory roles in Microsoft Entra ID using the Get-EntraUserMembership cmdlet and filtering by the '@odata.type' property. It connects to Entra ID with the User.Read.All scope, retrieves memberships for a specified user ID, filters for directory roles, and then selects and formats the output.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserMembership.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraUserMembership -UserId 'SawyerM@contoso.com' |\nWhere-Object { $_.'@odata.type' -eq '#microsoft.graph.directoryRole' } |\nSelect-Object Id, displayName, Description, RoleTemplateId, '@odata.type' |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Create an extension property with data type - PowerShell\nDESCRIPTION: This PowerShell code demonstrates how to create an application extension property with a specified data type. It connects to Entra ID, retrieves an application, and then uses the `New-EntraApplicationExtensionProperty` cmdlet with the `-DataType` parameter to define the data type of the new attribute as 'Boolean'. This allows the extension property to hold boolean values.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplicationExtensionProperty.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\nNew-EntraApplicationExtensionProperty -ApplicationId $application.Id -Name 'NewAttribute1' -DataType 'Boolean'\n```\n\n----------------------------------------\n\nTITLE: Update Permission Grant Condition Set Classification - PowerShell\nDESCRIPTION: This example demonstrates how to update the permission classification of a permission grant condition set using the Set-EntraPermissionGrantConditionSet cmdlet. It requires the Policy.ReadWrite.PermissionGrant scope and fetches the permission grant policy and condition set objects before updating the classification to 'low'.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraPermissionGrantConditionSet.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.PermissionGrant'\n$permissionGrantPolicy = Get-EntraPermissionGrantPolicy | Where-Object { $_.Id -eq 'my-custom-consent-policy' }\n$conditionSet = Get-EntraPermissionGrantConditionSet -PolicyId $permissionGrantPolicy.Id -ConditionSetType 'includes' | Where-Object { $_.PermissionType -eq 'delegated' }\nSet-EntraPermissionGrantConditionSet -PolicyId $permissionGrantPolicy -ConditionSetType 'includes' -Id $conditionSet.Id -PermissionClassification 'low'\n```\n\n----------------------------------------\n\nTITLE: Update Policy State - PowerShell\nDESCRIPTION: This example shows how to update the state (Enabled or Disabled) of a conditional access policy.  It connects to Entra ID, retrieves the relevant policy, and modifies only its state using Set-EntraConditionalAccessPolicy.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraConditionalAccessPolicy.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ConditionalAccess', 'Policy.Read.All'\n$policy = Get-EntraConditionalAccessPolicy | Where-Object { $_.DisplayName -eq 'MFA policy' }\nSet-EntraConditionalAccessPolicy -PolicyId $policy.Id -State 'Enabled'\n```\n\n----------------------------------------\n\nTITLE: Get permission grant policy by ID using Get-EntraBetaPermissionGrantPolicy (PowerShell)\nDESCRIPTION: This example demonstrates how to retrieve a specific permission grant policy by its ID using the Get-EntraBetaPermissionGrantPolicy cmdlet. It first connects to Entra ID with the required scopes and then executes the cmdlet with the -Id parameter.  The output displays the details of the specified policy.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPermissionGrantPolicy.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.PermissionGrant'\nGet-EntraBetaPermissionGrantPolicy -Id 'testtenant-sampleapp-permissions'\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n```Output\nDeletedDateTime Description                               DisplayName            Id\n--------------- -----------                               -----------            --\n                Permissions for sample app in test tenant Sample app permissions testtenant-sampleapp-permissions\n```\n```\n\n----------------------------------------\n\nTITLE: Add a Password to an Entra Application\nDESCRIPTION: This example demonstrates how to add a password to a specified Entra application using the New-EntraApplicationPassword cmdlet. It requires connecting to Entra ID with appropriate scopes, retrieving the application object, creating a PasswordCredential object with specified start and end dates, custom key identifier, hint, and display name, and then passing these values to the cmdlet.  It utilizes Connect-Entra, Get-EntraApplication, and New-Object.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplicationPassword.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Directory.ReadWrite.All'\n$application = Get-EntraApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\n$passwordCredential= New-Object Microsoft.Open.MSGraph.Model.PasswordCredential\n$passwordCredential.StartDateTime = Get-Date -Year 2024 -Month 10 -Day 23\n$passwordCredential.EndDateTime = Get-Date -Year 2025 -Month 2 -Day 28\n$passwordCredential.CustomKeyIdentifier = [System.Text.Encoding]::UTF8.GetBytes('Analytics App Password')\n$passwordCredential.Hint = 'analytics'\n$passwordCredential.DisplayName = 'Analytics App Password'\nNew-EntraApplicationPassword -ApplicationId $application.Id -PasswordCredential $passwordCredential\n```\n\n----------------------------------------\n\nTITLE: Get OAuth2 Permission Grants for User\nDESCRIPTION: Retrieves OAuth2 permission grants for a user using the Get-EntraUserOAuth2PermissionGrant cmdlet. It requires the Microsoft.Entra module and the Directory.Read.All scope. The -UserId parameter specifies the user's object ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserOAuth2PermissionGrant.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\nGet-EntraUserOAuth2PermissionGrant -UserId 'SawyerM@contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Update Delegated Permission Grant Scope - PowerShell\nDESCRIPTION: This example demonstrates how to update the scope of a delegated permission grant using the Update-EntraOauth2PermissionGrant cmdlet. It first connects to Entra ID, retrieves a service principal, fetches the permission grant, and then updates the scope to include 'Directory.Read.All' and 'User.Read.All'.  Requires the DelegatedPermissionGrant.ReadWrite.All scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Update-EntraOauth2PermissionGrant.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'DelegatedPermissionGrant.ReadWrite.All'\n$clientServicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'My application'\"\n$permissionGrant = Get-EntraOauth2PermissionGrant | Where-Object {$_.ClientId -eq $clientServicePrincipal.Id -and $_.Scope -eq 'Directory.Read.All'}\nUpdate-EntraOauth2PermissionGrant -OAuth2PermissionGrantId $permissionGrant.Id -Scope 'Directory.Read.All User.Read.All'\n```\n\n----------------------------------------\n\nTITLE: Get Enterprise Apps - PowerShell\nDESCRIPTION: This example retrieves all enterprise applications by filtering on the `tags` property. It looks for service principals that have the `WindowsAzureActiveDirectoryIntegratedApp` tag.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipal.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraServicePrincipal -Filter \"tags/Any(x: x eq 'WindowsAzureActiveDirectoryIntegratedApp')\"\n```\n\n----------------------------------------\n\nTITLE: Get All Direct Reports - Get-EntraUserDirectReport PowerShell\nDESCRIPTION: This snippet shows how to retrieve all direct reports for a user in Microsoft Entra ID. It utilizes the `-All` parameter with the `Get-EntraUserDirectReport` cmdlet. Scopes 'User.Read' and 'User.Read.All' are needed. It filters and formats the output to display relevant user properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserDirectReport.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read', 'User.Read.All'\nGet-EntraUserDirectReport -UserId 'SawyerM@contoso.com' -All |\nSelect-Object Id, displayName, userPrincipalName, createdDateTime, accountEnabled, userType |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Assign an app role to another service principal - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to assign an application role of one service principal to another service principal using the `New-EntraServicePrincipalAppRoleAssignment` cmdlet. It requires connecting to Entra ID with appropriate scopes and retrieves the necessary service principal objects before assigning the role.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraServicePrincipalAppRoleAssignment.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AppRoleAssignment.ReadWrite.All'\n$clientServicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\n$servicePrincipalObject = Get-EntraServicePrincipal -Filter \"displayName eq 'Box'\"\nNew-EntraServicePrincipalAppRoleAssignment -ServicePrincipalId $clientServicePrincipal.Id -PrincipalId $clientServicePrincipal.Id -ResourceId $servicePrincipalObject.Id -Id $servicePrincipalObject.Approles[1].Id\n```\n\n----------------------------------------\n\nTITLE: Updating PromptLoginBehavior for a Federated Domain (Entra)\nDESCRIPTION: This example demonstrates how to update the `PromptLoginBehavior` setting for a federated domain using the `Set-EntraDomainFederationSettings` cmdlet. It requires connecting to Entra ID with the `Domain.ReadWrite.All` scope and specifies the domain name, authentication protocol, and desired prompt login behavior. The `PromptLoginBehavior` can be set to `TranslateToFreshPasswordAuth`, `NativeSupport`, or `Disabled`, each affecting how `prompt=login` is handled.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraDomainFederationSettings.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Domain.ReadWrite.All'\n$domain = 'contoso.com'\n$authProtocol = 'WsFed'\n$promptLoginBehavior = 'TranslateToFreshPasswordAuth' # Or 'NativeSupport' or 'Disabled', depending on the requirement\nSet-EntraDomainFederationSettings -DomainName $domain -PreferredAuthenticationProtocol $authProtocol -PromptLoginBehavior $promptLoginBehavior\n```\n\n----------------------------------------\n\nTITLE: Get Password Policy By Domain - PowerShell\nDESCRIPTION: Retrieves the password policy for a specified domain. The `DomainName` parameter is required. The domain must be a verified domain for the company. Requires the Domain Name Administrator role or equivalent permissions.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraPasswordPolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraPasswordPolicy\n -DomainName <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Retrieve User License Details - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve license details for a specific user from Microsoft Entra ID. It first connects to Entra ID using Connect-Entra with the 'User.Read.All' scope, then uses Get-EntraBetaUserLicenseDetail to retrieve the license details for the user with the specified UserId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserLicenseDetail.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraBetaUserLicenseDetail -UserId 'SawyerM@contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Creating a new role definition in Entra ID\nDESCRIPTION: This PowerShell script creates a new role definition in Microsoft Entra ID. It connects to Entra ID using the specified scopes, defines role permissions, and then uses the `New-EntraDirectoryRoleDefinition` cmdlet to create the role with the specified permissions, enabled status, and display name. The `Connect-Entra` cmdlet requires the `Microsoft.Graph` module to be installed. The minimum required role is Privileged Role Administrator.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraDirectoryRoleDefinition.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory'\n$rolePermissions = New-object Microsoft.Open.MSGraph.Model.RolePermission\n$rolePermissions.AllowedResourceActions = @(\"microsoft.directory/applications/basic/read\")\nNew-EntraDirectoryRoleDefinition -RolePermissions $rolePermissions -IsEnabled $false -DisplayName 'MyRoleDefinition'\n```\n\n----------------------------------------\n\nTITLE: Get list of active subscriptions\nDESCRIPTION: This example shows how to retrieve a list of active commercial subscriptions. It connects to Entra, retrieves all subscriptions, and then filters them based on Status (excluding 'Suspended' and 'LockedOut') and NextLifecycleDateTime (excluding null values). The results are then sorted by NextLifecycleDateTime and all properties are selected for output.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraSubscription.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All'\nGet-EntraSubscription |\n    Where-Object {\n        ($_.Status -ne \"Suspended\" -and $_.Status -ne \"LockedOut\") -and\n        ($_.NextLifecycleDateTime -ne $null)\n    } |\n    Sort-Object NextLifecycleDateTime |\n    Select-Object *\n```\n\n----------------------------------------\n\nTITLE: Revoke Delegated Permissions - PowerShell\nDESCRIPTION: This script revokes delegated permissions previously granted to a client service principal. It retrieves the client service principal by display name, then finds the OAuth2 permission grants associated with that client and removes them. This effectively revokes the granted delegated permissions.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/how-to-grant-revoke-api-permissions.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n$clientServicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'My application'\" \nGet-EntraOAuth2PermissionGrant |\n  Where-Object {$_.ClientId -eq $clientServicePrincipal.Id} |\n  Remove-EntraOauth2PermissionGrant\n```\n\n----------------------------------------\n\nTITLE: Get All Service Principals - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all service principals from the directory. It uses the `Get-EntraServicePrincipal` cmdlet without any specific filters to return all service principal objects.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipal.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraServicePrincipal\n```\n\n----------------------------------------\n\nTITLE: List Devices with Specific OS and Version - PowerShell\nDESCRIPTION: Connects to Entra ID and retrieves a list of devices with a specific operating system and version. Requires the Microsoft.Entra module and the 'Device.Read.All' scope. The `-Filter` parameter is used with the `operatingSystem` and `operatingSystemVersion` properties to find matching devices.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDevice.md#_snippet_15\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraDevice -Filter \"operatingSystem eq 'Windows Server' and operatingSystemVersion eq '10.0.20348.3091'\"\n```\n\n----------------------------------------\n\nTITLE: Retrieve Raw API Response - PowerShell\nDESCRIPTION: This example demonstrates retrieving the raw, unprocessed API response using the `-Raw` parameter. It connects to Entra ID using `Connect-Entra` with the scope 'User.Read.All' and then calls `Get-EntraUserCBAAuthorizationInfo` with the `-Raw` parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserCBAAuthorizationInfo.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraUserCBAAuthorizationInfo -UserId 'SawyerM@contoso.com' -Raw\n```\n\n----------------------------------------\n\nTITLE: Removing a Group by ID - PowerShell\nDESCRIPTION: This code snippet demonstrates how to remove a group from Microsoft Entra ID using the Remove-EntraBetaGroup cmdlet, specifying the GroupId.  It requires connecting to Entra ID with 'Group.ReadWrite.All' scope and fetching the group object first to retrieve its ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaGroup.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All'\n$group = Get-EntraBetaGroup -Filter \"DisplayName eq 'HelpDesk Team Leaders'\"\nRemove-EntraBetaGroup -GroupId $group.Id\n```\n\n----------------------------------------\n\nTITLE: Create User with Mobile\nDESCRIPTION: Illustrates the creation of a new user with the Mobile parameter. This example connects to Entra with the required scopes, creates a PasswordProfile, then calls the New-EntraBetaUser cmdlet passing in parameters including DisplayName, PasswordProfile, UserPrincipalName, AccountEnabled, MailNickName, and Mobile.  Requires the User.ReadWrite.All scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaUser.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\n$passwordProfile = New-Object -TypeName Microsoft.Open.AzureAD.Model.PasswordProfile\n$passwordProfile.Password = '<Password>'\n$params = @{\n    DisplayName = 'New User'\n    PasswordProfile = $passwordProfile\n    UserPrincipalName = 'NewUser@contoso.com'\n    AccountEnabled = $true\n    MailNickName = 'Newuser'\n    Mobile = '02883655253'\n}\n\nNew-EntraBetaUser @params\n```\n\nLANGUAGE: powershell\nCODE:\n```\nDisplayName Id                                   Mail UserPrincipalName\n----------- --                                   ---- -----------------\nNew User 00aa00aa-bb11-cc22-dd33-44ee44ee44ee      NewUser@contoso.com\n```\n\n----------------------------------------\n\nTITLE: Application Creation with App Roles\nDESCRIPTION: This snippet demonstrates how to create a new application and define application roles using the `-AppRoles` parameter. It requires `Application.ReadWrite.All` and `Application.ReadWrite.OwnedBy` scopes. App roles define the permissions an application can request.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplication.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$types = @()\n$types += 'User'\n$approle = New-Object Microsoft.Open.MSGraph.Model.AppRole\n$approle.AllowedMemberTypes =  $types\n$approle.Description          = 'msiam_access'\n$approle.DisplayName = 'msiam_access'\n$approle.Id = '643985ce-3eaf-4a67-9550-ecca25cb6814'\n$approle.Value = 'Application'\n$approle.IsEnabled = $true\nNew-EntraBetaApplication -DisplayName 'My new application' -AppRoles $approle\n```\n\n----------------------------------------\n\nTITLE: Get User Owned Devices - Basic\nDESCRIPTION: Retrieves the registered devices owned by the specified user using their User Principal Name (UPN). It first connects to Entra ID with the necessary scope (User.Read.All) and then calls Get-EntraUserOwnedDevice with the -UserId parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserOwnedDevice.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraUserOwnedDevice -UserId 'SawyerM@contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Restore Deleted User and Resolve Proxy Conflicts - PowerShell\nDESCRIPTION: This example illustrates restoring a soft-deleted user and automatically resolving potential proxy address conflicts. It connects to Entra ID with the 'User.ReadWrite.All' scope, retrieves a deleted user, and then restores the user using Restore-EntraBetaDeletedDirectoryObject, specifying the -AutoReconcileProxyConflict parameter to automatically remove conflicting proxy addresses if they exist. This is useful when a user's proxy addresses are already in use by an active user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Restore-EntraBetaDeletedDirectoryObject.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\n$deletedUser = Get-EntraBetaDeletedUser -Filter \"DisplayName eq 'Adele Vance'\"\nRestore-EntraBetaDeletedDirectoryObject -Id $deletedUser.Id -AutoReconcileProxyConflict\n```\n\n----------------------------------------\n\nTITLE: Invite User: Custom Message - PowerShell\nDESCRIPTION: This example illustrates inviting a new external user and customizing the invitation message. It constructs an `InvitedUserMessageInfo` object with a custom message body and language, then passes this object to the `New-EntraInvitation` cmdlet using the `-InvitedUserMessageInfo` parameter along with other required parameters. Requires `Connect-Entra` for authentication.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraInvitation.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Invite.All'\n$a= New-Object Microsoft.Open.MSGraph.Model.InvitedUserMessageInfo\n$a.CustomizedMessageBody = 'Hi there, how are you'\n$a.MessageLanguage = 'EN'\n$params = @{\n    InvitedUserEmailAddress = 'someexternaluser@externaldomain.com'\n    SendInvitationMessage = $True\n    InviteRedirectUrl = 'https://myapps.microsoft.com'\n    InvitedUserMessageInfo = $a\n}\n\nNew-EntraInvitation @params\n```\n\n----------------------------------------\n\nTITLE: Get Extension Properties Synced from On-Premises Microsoft Entra ID (PowerShell)\nDESCRIPTION: This PowerShell code snippet retrieves extension properties that are synced from on-premises Microsoft Entra ID. It first connects to Entra ID with the 'Directory.Read.All' scope and then uses `Get-EntraExtensionProperty` to filter for properties synced from on-premises.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraExtensionProperty.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\nGet-EntraExtensionProperty -IsSyncedFromOnPremises $True\n```\n\n----------------------------------------\n\nTITLE: Remove Permission Grant Condition Set - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to delete a Microsoft Entra ID permission grant condition set using its ID. It first connects to Entra with the required scope, retrieves the permission grant policy and the condition set to be removed, and then uses the Remove-EntraBetaPermissionGrantConditionSet cmdlet to delete the condition set.\n\nRequires the 'Policy.ReadWrite.PermissionGrant' scope and the Microsoft.Entra.Beta module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaPermissionGrantConditionSet.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraBetaPermissionGrantConditionSet\n -Id <String>\n -ConditionSetType <String>\n -PolicyId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating a Service Principal for an Application\nDESCRIPTION: This snippet demonstrates how to create a service principal for an existing application using the `New-EntraServicePrincipal` cmdlet. It first retrieves the application object using `Get-EntraApplication` based on the display name and then uses its AppId to create the service principal. The `Application.ReadWrite.All` scope is required.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-apps.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All'\n$myApp = Get-EntraApplication -Filter \"DisplayName eq 'My new application'\"\nNew-EntraServicePrincipal  -AppId $myApp.AppId -DisplayName 'My new service principal'\n```\n\n----------------------------------------\n\nTITLE: Find Applications with Expiring Secrets\nDESCRIPTION: This script identifies applications with expiring password credentials (secrets). It retrieves all applications and filters for those with password credentials expiring within 30 days. The script outputs the application display name, AppId, secret display name, KeyId, and expiration date.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-apps.md#_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\n$expirationThreshold = (Get-Date).AddDays(30)\n$appsWithExpiringPasswords = Get-EntraApplication -All | Where-Object { $_.PasswordCredentials } | \nForEach-Object {\n    $app = $_\n    $app.PasswordCredentials | Where-Object { $_.EndDate -le $expirationThreshold } | \n    ForEach-Object {\n        [PSCustomObject]@{\n            DisplayName       = $app.DisplayName\n            AppId             = $app.AppId\n            SecretDisplayName = $_.DisplayName\n            KeyId             = $_.KeyId\n            ExpiringSecret    = $_.EndDate\n        }\n    }\n}\n$appsWithExpiringPasswords | Format-Table DisplayName, AppId, SecretDisplayName, KeyId, ExpiringSecret -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get Group Membership of a Service Principal - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve the group membership of a service principal.  It connects to Entra ID, creates a `GroupIdsForMembershipCheck` object with a list of group IDs (obtained from `Get-EntraBetaGroup`), retrieves a service principal by display name using `Get-EntraBetaServicePrincipal`, and then uses `Select-EntraBetaGroupIdsServicePrincipalIsMemberOf` to check the membership.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Select-EntraBetaGroupIdsServicePrincipalIsMemberOf.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$group = New-Object Microsoft.Open.AzureAD.Model.GroupIdsForMembershipCheck\n$group.GroupIds = (Get-EntraBetaGroup -Top 10).Id\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"DisplayName eq 'Helpdesk Application'\"\nSelect-EntraBetaGroupIdsServicePrincipalIsMemberOf -ServicePrincipalId $servicePrincipal.Id -GroupIdsForMembershipCheck $group\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\naaaaaaaa-0000-1111-2222-bbbbbbbbbbbb\n```\n\n----------------------------------------\n\nTITLE: Get User Authentication Methods (PowerShell)\nDESCRIPTION: Retrieves a list of authentication methods registered to a specified user using `Get-EntraUserAuthenticationMethod`. The output is filtered to display `Id`, `DisplayName`, and `AuthenticationMethodType` properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserAuthenticationMethod.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'UserAuthenticationMethod.Read.All'\nGet-EntraUserAuthenticationMethod -UserId 'SawyerM@Contoso.com' | Select-Object Id, DisplayName, AuthenticationMethodType\n```\n\n----------------------------------------\n\nTITLE: Set Application Logo with ByteArray - PowerShell\nDESCRIPTION: Sets the logo for an Azure AD application using a byte array. Requires the ApplicationId of the application. Requires the Microsoft.Entra module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraApplicationLogo.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nSet-EntraApplicationLogo\n -ApplicationId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get All Group Members - PowerShell\nDESCRIPTION: This example shows how to retrieve all members within a group by its ID.  It connects to Entra ID, retrieves a group by its display name, and uses `Get-EntraGroupMember` with the `-All` parameter to retrieve all members of the specified group. The output is then filtered to display only the `Id`, `DisplayName`, and `@odata.type` properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraGroupMember.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All'\n$group = Get-EntraGroup -Filter \"DisplayName eq 'Sales and Marketing'\"\nGet-EntraGroupMember -GroupId $group.Id -All | Select-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Disable Directory Synchronization - PowerShell\nDESCRIPTION: This example demonstrates how to disable directory synchronization for a company using the `Set-EntraDirSyncEnabled` cmdlet.  It requires the 'OnPremDirectorySynchronization.ReadWrite.All' and 'Organization.ReadWrite.All' scopes.  It retrieves the TenantId and uses the `-Force` parameter to bypass confirmation prompts.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraDirSyncEnabled.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'OnPremDirectorySynchronization.ReadWrite.All', 'Organization.ReadWrite.All'\n$tenantID = (Get-EntraContext).TenantId\nSet-EntraDirSyncEnabled -EnableDirsync $false -TenantId $tenantID -Force\n```\n\n----------------------------------------\n\nTITLE: Get Directory Role Members\nDESCRIPTION: This PowerShell code snippet retrieves the members of a specified directory role in Microsoft Entra ID. It first connects to Entra ID, retrieves a directory role based on its display name, and then gets the members of that role, selecting specific properties for output. The signed-in user needs a Microsoft Entra role or a custom role with specific permissions (e.g., User Administrator, Directory Readers).\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDirectoryRoleMember.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory'\n$directoryRole = Get-EntraDirectoryRole -Filter \"displayName eq 'Helpdesk Administrator'\"\nGet-EntraDirectoryRoleMember -DirectoryRoleId $directoryRole.Id | Select Id, DisplayName, '@odata.type', CreatedDateTime\n```\n\n----------------------------------------\n\nTITLE: Get Objects Owned by a Service Principal\nDESCRIPTION: This snippet demonstrates how to get a list of objects owned by a service principal using `Get-EntraServicePrincipalOwnedObject`. It requires the `Application.Read.All` scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-apps.md#_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraServicePrincipalOwnedObject -ServicePrincipalId $servicePrincipal.Id -All | Select-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Update Password Profile PowerShell\nDESCRIPTION: This example demonstrates how to update a user's password profile in Microsoft Entra ID.  It requires the 'User.ReadWrite.All' scope and sets parameters such as the user's password and whether the user should be forced to change their password on the next sign-in.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUser.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nSet-EntraBetaUser -UserId 'SawyerM@contoso.com' -PasswordProfile @{\n    Password = '*****'\n    ForceChangePasswordNextSignIn = $true\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Group Owner Example - PowerShell\nDESCRIPTION: This example demonstrates how to remove an owner from a group using Remove-EntraBetaGroupOwner. It first connects to Entra ID, retrieves the group and owner IDs, and then removes the owner from the group.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaGroupOwner.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All'\n$group = Get-EntraBetaGroup -Filter \"DisplayName eq 'HelpDesk Team Leaders'\"\n$groupOwner = Get-EntraBetaGroup -GroupId $group.Id | Get-EntraBetaGroupOwner | Where-Object {$_.displayName -eq 'Adele Vance'}\nRemove-EntraBetaGroupOwner -GroupId $group.Id -OwnerId $groupOwner.Id\n```\n\n----------------------------------------\n\nTITLE: Restore Deleted Object by ID - PowerShell\nDESCRIPTION: This example demonstrates how to restore a deleted object using its ID. It first connects to Entra ID with necessary scopes, retrieves a deleted user using Get-EntraBetaDeletedUser, and then restores the user using Restore-EntraBetaDeletedDirectoryObject with the user's ID. The cmdlet requires the 'User.ReadWrite.All', 'AdministrativeUnit.ReadWrite.All', 'Application.ReadWrite.All', and 'Group.ReadWrite.All' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Restore-EntraBetaDeletedDirectoryObject.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All', 'AdministrativeUnit.ReadWrite.All', 'Application.ReadWrite.All', 'Group.ReadWrite.All'\n$deletedUser = Get-EntraBetaDeletedUser -Filter \"DisplayName eq 'Adele Vance'\"\nRestore-EntraBetaDeletedDirectoryObject -Id $deletedUser.Id\n```\n\n----------------------------------------\n\nTITLE: Find Entra Applications with Expiring Certificates - PowerShell\nDESCRIPTION: This PowerShell script identifies Entra ID applications that have certificates expiring within a specified threshold (30 days). It retrieves all applications, filters those with key credentials, and checks the expiration date of each certificate. The script outputs a formatted table displaying the application's name, ID, certificate details, and expiration date.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-apps.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\n$expirationThreshold = (Get-Date).AddDays(30)\n$appsWithExpiringKeys = Get-EntraApplication -All | Where-Object { $_.KeyCredentials } |\nForEach-Object {\n    $app = $_\n    $app.KeyCredentials | Where-Object { $_.EndDate -le $expirationThreshold } |\n    ForEach-Object {\n        [PSCustomObject]@{\n            DisplayName            = $app.DisplayName\n            AppId                  = $app.AppId\n            CertificateDisplayName = $_.DisplayName\n            KeyId                  = $_.KeyId\n            ExpiringKeys           = $_.EndDate\n        }\n    }\n}\n$appsWithExpiringKeys | Format-Table DisplayName, AppId, CertificateDisplayName, KeyId, ExpiringKeys -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Remove a Device - PowerShell\nDESCRIPTION: This example demonstrates how to remove a device from Microsoft Entra ID using the `Remove-EntraDevice` cmdlet. It first connects to Entra ID, retrieves a device by its display name, and then removes the device using its ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraDevice.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.AccessAsUser.All', 'Device.ReadWrite.All'\n$device = Get-EntraDevice -Filter \"DisplayName eq 'Woodgrove Desktop'\"\nRemove-EntraDevice -DeviceId $device.Id\n```\n\n----------------------------------------\n\nTITLE: Assign User to Specific App Role - PowerShell\nDESCRIPTION: This PowerShell snippet assigns a user to a specific application role in Microsoft Entra ID. It retrieves the service principal and user objects, then constructs a parameter hashtable for the `New-EntraBetaUserAppRoleAssignment` cmdlet. `Connect-Entra` is used to connect to Entra ID using the required scope. The `AppRoleId` is obtained from the service principal's `AppRoles` property.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaUserAppRoleAssignment.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AppRoleAssignment.ReadWrite.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Box'\"\n$user = Get-EntraBetaUser -UserId 'SawyerM@contoso.com'\n$params = @{\n    UserId      = $user.Id\n    PrincipalId = $user.Id\n    ResourceId  = $servicePrincipal.Id\n    AppRoleId   = $servicePrincipal.AppRoles[1].Id\n}\nNew-EntraBetaUserAppRoleAssignment @params\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId                                          AppRoleId                            CreationTimestamp   PrincipalDisplayName PrincipalId                          PrincipalType ResourceDisplayName  ResourceId\n--                                          ---------                            -----------------   -------------------- -----------                          ------------- -------------------  ----------\nIdn1u1K7S0OWoJWIjkT69Stnjqd1iblKlg-GoqVkNlM cbbf6a32-6dcd-4f22-9be7-ffb128119fae 08-08-2024 08:13:26 Test One Updated     bbbbbbbb-cccc-dddd-2222-333333333333 User          M365 License Manager 0008861a-d455-4…\n```\n\n----------------------------------------\n\nTITLE: Assigning User to Application without Roles - PowerShell\nDESCRIPTION: This example demonstrates how to assign a user to an application that doesn't have any roles defined. It uses Get-EntraApplication, Get-EntraUser, and Get-EntraServicePrincipal to retrieve the required Ids, and then assigns the user with an empty Guid for AppRoleId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraUserAppRoleAssignment.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AppRoleAssignment.ReadWrite.All'\n$appId = (Get-EntraApplication -SearchString '<App-DisplayName>').AppId\n$user = Get-EntraUser -SearchString '<UserPrincipalName>'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"appId eq '$appId'\"\n$params = @{\n    UserId      = $user.Id\n    PrincipalId = $user.Id\n    ResourceId  = $servicePrincipal.Id\n    AppRoleId   = [Guid]::Empty\n}\nNew-EntraUserAppRoleAssignment @params\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDeletedDateTime Id                                          AppRoleId                            CreatedDateTime     PrincipalDisplayName PrincipalId                          PrincipalType ResourceDisplayName\n--------------- --                                          ---------                            ---------------     -------------------- -----------                          ------------- ------------------- -\n                A1bC2dE3fH4iJ5kL6mN7oP8qR9sT0u 00aa00aa-bb11-cc22-dd33-44ee44ee44ee 18-06-2024 11:22:40 UserPrincipalName          aaaaaaaa-bbbb-cccc-1111-222222222222 User          App-DisplayName \n```\n\n----------------------------------------\n\nTITLE: List sign-in failures due to specific Conditional Access policy (PowerShell)\nDESCRIPTION: This example explains how to filter sign-in logs to identify failures related to a specific Conditional Access policy. It connects to Entra ID, defines a `$policyId`, and then uses `Get-EntraBetaAuditSignInLog` with a complex `-Filter` that checks both `conditionalAccessStatus` and `appliedConditionalAccessPolicies`. It filters for failures related to the policy ID and displays selected properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAuditSignInLog.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All','Directory.Read.All'\n$policyId = \"dcf66a39-965f-4958-871f-f62613b6cabd\"\nGet-EntraBetaAuditSignInLog -Filter \"\n    conditionalAccessStatus eq 'failure' \n    and appliedConditionalAccessPolicies/any(c:c/id eq '$policyId' and c/result eq 'failure')\" -Limit 1 | \nSelect-Object id, userDisplayName, appDisplayName, clientAppUsed, \n              conditionalAccessStatus, status, appliedConditionalAccessPolicies\n```\n\n----------------------------------------\n\nTITLE: Retrieve Top N Service Principal Owners - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a specified number of owners (top 2 in this case) of a service principal using the -Top parameter. It requires 'Application.Read.All' scope. `-Limit` can be used as an alias for `-Top`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalOwner.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraServicePrincipalOwner -ServicePrincipalId $servicePrincipal.Id -Top 2 | Select-Object Id, userPrincipalName, DisplayName, '@odata.type'\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                   userPrincipalName                       displayName    @odata.type\n--                                   -----------------                       -----------    -----------\naaaaaaaa-0000-1111-2222-bbbbbbbbbbbb AlexW@Contoso.com     Alex Wilber    #microsoft.graph.user\nbbbbbbbb-1111-2222-3333-cccccccccccc ChristieC@Contoso.com Christie Cline #microsoft.graph.user\n```\n\n----------------------------------------\n\nTITLE: Get all Application Segments for an Application in PowerShell\nDESCRIPTION: This PowerShell code retrieves all application segments associated with a given Private Access application using Get-EntraBetaPrivateAccessApplicationSegment.  It first connects to Entra ID using Connect-Entra with necessary scopes and then retrieves the application using Get-EntraBetaApplication, filtering by display name. The application ID is then used to fetch the application segments. Dependencies: Microsoft.Entra.Beta module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPrivateAccessApplicationSegment.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'NetworkAccessPolicy.ReadWrite.All', 'Application.ReadWrite.All', 'NetworkAccess.ReadWrite.All'\n$application = Get-EntraBetaApplication -Filter \"displayName eq '<GlobalSecureAccess_Application_DisplayName>'\"\nGet-EntraBetaPrivateAccessApplicationSegment -ApplicationId $application.Id\n```\n\n----------------------------------------\n\nTITLE: Create Application Example\nDESCRIPTION: This example demonstrates how to create a new application in Microsoft Entra ID using the New-EntraApplication cmdlet.  It requires the Application.ReadWrite.All and Application.ReadWrite.OwnedBy scopes. The output displays the created application's properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplication.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\nNew-EntraApplication -DisplayName 'My new application'\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDisplayName Id                                   AppId                                SignInAudience PublisherDomain\n----------- --                                   -----                                -------------- ---------------\nMy new application       dddd3333-ee44-5555-66ff-777777aaaaaa 22223333-cccc-4444-dddd-5555eeee6666 AzureADMyOrg   contoso.com\n```\n\n----------------------------------------\n\nTITLE: Get OAuth2 Permission Grants for User/Service Principal - PowerShell\nDESCRIPTION: This example shows how to retrieve OAuth2 permission grants for a specific user within a service principal. It first retrieves the user and service principal objects, then filters the grants based on the ClientId and PrincipalId to display the matching grants using Format-List.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraOAuth2PermissionGrant.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\n$user = Get-EntraUser -UserId 'SawyerM@contoso.com'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"DisplayName eq 'Helpdesk Application'\"\nGet-EntraOAuth2PermissionGrant | Where-Object {$_.ClientId -eq $servicePrincipal.Id -and $_.PrincipalId -eq $user.Id} | Format-List\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nObjectId             : E3fH4iJ5kL6mN7oP8qR9sT0uV1wX2\nClientId             : 22223333-cccc-4444-dddd-5555eeee6666\nConsentType          : Principal\nId                   : E3fH4iJ5kL6mN7oP8qR9sT0uV1wX2\nPrincipalId          : aaaaaaaa-bbbb-cccc-1111-222222222222\nResourceId           : c2c2c2c2-dddd-eeee-ffff-a3a3a3a3a3a3\nScope                :  User.Read.All openid profile offline_access Organization.Read.All User.ReadWrite.All Device.Read.All Device.ReadWrite.All Directory.Read.All User.Read RoleManagement.ReadWrite.Directory Group.ReadWrite.All\nAdditionalProperties : {}\n```\n\n----------------------------------------\n\nTITLE: Get Password Policy for Domain Example\nDESCRIPTION: Demonstrates how to retrieve the password policy for a specific domain. It first connects to Entra using Connect-Entra with the 'Domain.Read.All' scope, then uses Get-EntraBetaPasswordPolicy with the -DomainName parameter to specify the domain.  The example assumes that you have the Microsoft.Entra.Beta module installed and proper permissions.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPasswordPolicy.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Domain.Read.All'\nGet-EntraBetaPasswordPolicy -DomainName 'contoso.com'\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n```Output\nNotificationDays ValidityPeriod\n---------------- --------------\n            90             180\n```\n```\n\n----------------------------------------\n\nTITLE: Get all custom security attribute definitions - PowerShell\nDESCRIPTION: This PowerShell code snippet demonstrates how to retrieve a list of all custom security attribute definitions in Microsoft Entra ID using the Get-EntraCustomSecurityAttributeDefinition cmdlet. It requires the 'CustomSecAttributeDefinition.Read.All' or 'CustomSecAttributeDefinition.ReadWrite.All' scopes. The output displays key properties such as Id, AttributeSet, Description, IsCollection, IsSearchable, Name, Status, Type, and UsePreDefinedValuesOnly.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraCustomSecurityAttributeDefinition.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'CustomSecAttributeDefinition.Read.All, CustomSecAttributeDefinition.ReadWrite.All'\nGet-EntraCustomSecurityAttributeDefinition\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId                                      AttributeSet          Description                         IsCollection IsSearchable Name                             Status     Type    UsePreDefinedValuesOnly\n--                                      ------------          -----------                         ------------ ------------ ----                             ------     ----    -----------------------\nEngineering_newvalue                    Engineering           New Eng Value          True         True         NewValue                         Available  String  False\nEngineering_ProjectDate                 Engineering           Target completion date              False        True         ProjectDate                      Available  String  False\n```\n\n----------------------------------------\n\nTITLE: Get Identity Provider by ID - PowerShell\nDESCRIPTION: This example shows how to retrieve the properties for a specific identity provider using the IdentityProviderBaseId parameter. It requires a connection to Entra ID with the 'IdentityProvider.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraIdentityProvider.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'IdentityProvider.Read.All'\nGet-EntraIdentityProvider -IdentityProviderBaseId Google-OAUTH\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n```Output\nId           DisplayName\n--           -----------\nGoogle-OAUTH GoogleName\n```\n```\n\n----------------------------------------\n\nTITLE: Confirm Entra Domain (PowerShell)\nDESCRIPTION: This example demonstrates how to verify a domain and update its status to verified using the Confirm-EntraDomain cmdlet. It requires connecting to Entra ID with the 'Domain.ReadWrite.All' scope and specifies the domain name.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Confirm-EntraDomain.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Domain.ReadWrite.All'\nConfirm-EntraDomain -Name Contoso.com\n```\n\n----------------------------------------\n\nTITLE: Remove Administrative Unit Member Example - PowerShell\nDESCRIPTION: This example demonstrates how to remove a user or group from a specified administrative unit using the Remove-EntraBetaAdministrativeUnitMember cmdlet.  It retrieves the administrative unit and member IDs before calling the remove cmdlet.  Requires the 'AdministrativeUnit.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaAdministrativeUnitMember.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.Read.All'\n$administrativeUnit = Get-EntraBetaAdministrativeUnit -Filter \"DisplayName eq 'Pacific Administrative Unit'\"\n$adminUnitMember = Get-EntraBetaAdministrativeUnitMember -AdministrativeUnitId $administrativeUnit.Id | Select-Object Id, DisplayName,'@odata.type' | Where-Object {$_.DisplayName -eq 'Saywer Miller'}\nRemove-EntraBetaAdministrativeUnitMember -AdministrativeUnitId $administrativeUnit.Id -MemberId $adminUnitMember.Id\n```\n\n----------------------------------------\n\nTITLE: Get Microsoft Graph Service Principal - PowerShell\nDESCRIPTION: This command retrieves the service principal for Microsoft Graph from the Entra ID tenant, filtering by the display name 'Microsoft Graph'. It then expands the `Oauth2PermissionScopes` property and formats the output as a list. This is used to examine the available delegated permissions exposed by Microsoft Graph.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/how-to-grant-revoke-api-permissions.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraServicePrincipal -Filter \"displayName eq 'Microsoft Graph'\" -Property Oauth2PermissionScopes |\n  Select-Object -ExpandProperty Oauth2PermissionScopes | Format-List\n```\n\n----------------------------------------\n\nTITLE: Create Group with MembershipRule - New-EntraBetaGroup PowerShell\nDESCRIPTION: This snippet demonstrates how to create a new Microsoft Entra ID group with a specified MembershipRule and MembershipRuleProcessingState using the New-EntraBetaGroup cmdlet. It requires the 'Group.ReadWrite.All' (Delegated Permission) and 'Group.Create' (Application permission) scopes and specifies parameters such as DisplayName, MailEnabled, MailNickname, SecurityEnabled, MembershipRule and MembershipRuleProcessingState. The output shows the created group's properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaGroup.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All' #Delegated Permission\nConnect-Entra -Scopes 'Group.Create' #Application permission\n$params = @{\n    DisplayName = 'HelpDesk admin group2'\n    MailEnabled = $False\n    MailNickname = 'helpDeskAdminGroup'\n    SecurityEnabled = $True\n    MembershipRule = '(user.department -contains \"Marketing\")'\n    MembershipRuleProcessingState = 'On'\n}\n\nNew-EntraBetaGroup @params\n```\n\nLANGUAGE: powershell\nCODE:\n```\nDisplayName           Id                                   MailNickname       Description GroupTypes\n-----------           --                                   ------------       ----------- ----------\nHelpDesk admin group2 xxxxxxxx-8888-5555-9999-bbbbbbbbbbbb helpDeskAdminGroup             {}\n```\n\n----------------------------------------\n\nTITLE: Get Password Policy for Domain Example - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve the password policy for a specific domain ('contoso.com'). It first connects to Entra ID with the 'Domain.Read.All' scope, then uses Get-EntraPasswordPolicy with the DomainName parameter to retrieve the policy.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraPasswordPolicy.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Domain.Read.All'\nGet-EntraPasswordPolicy -DomainName 'contoso.com'\n```\n\nLANGUAGE: powershell\nCODE:\n```\nNotificationDays ValidityPeriod\n---------------- --------------\n            90             180\n```\n\n----------------------------------------\n\nTITLE: Add Delegated Permission Classification - PowerShell\nDESCRIPTION: This PowerShell script demonstrates how to create a delegated permission classification for a specified service principal. It requires the `Policy.ReadWrite.PermissionGrant` scope and utilizes `Get-EntraServicePrincipal` to retrieve the service principal.  It then sets parameters for ServicePrincipalId, PermissionId, Classification and PermissionName and passes it to the cmdlet to create the classification.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Add-EntraServicePrincipalDelegatedPermissionClassification.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.PermissionGrant'\n$ServicePrincipal = Get-EntraServicePrincipal -Filter \"DisplayName eq '<service-principal-display-name>'\"\n$PermissionId = $ServicePrincipal.PublishedPermissionScopes[0].Id\n$PermissionName =  $ServicePrincipal.PublishedPermissionScopes[0].Value\n\n$params = @{\n    ServicePrincipalId = $ServicePrincipal.ObjectId\n    PermissionId = $PermissionId\n    Classification = 'Low'\n    PermissionName = $PermissionName\n}\n\nAdd-EntraServicePrincipalDelegatedPermissionClassification @params\n```\n\n----------------------------------------\n\nTITLE: UserId Parameter Definition (YAML)\nDESCRIPTION: Defines the `-UserId` parameter for the `Get-EntraUserAuthenticationMethod` cmdlet in YAML format. Specifies that it accepts a user's UserPrincipalName or ObjectId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserAuthenticationMethod.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: GetQuery\nAliases: ObjectId, UPN, Identity, UserPrincipalName\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Add Members from Search Results - PowerShell\nDESCRIPTION: This example shows how to add multiple users to a group based on a search result. It retrieves users whose display names start with 'Updated User' and adds them to the 'Sales and Marketing' group. The `Get-EntraBetaUser` cmdlet is used with a filter to find the relevant users, and the pipeline passes these users to `Add-EntraBetaGroupMember` for addition to the group.  Requires 'GroupMember.ReadWrite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaGroupMember.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.ReadWrite.All'\n$group = Get-EntraBetaGroup -Filter \"DisplayName eq 'Sales and Marketing'\"\nGet-EntraBetaUser -Filter \"startsWith(displayName,'Updated User')\" | \n    Add-EntraBetaGroupMember -GroupId $group.Id\n```\n\n----------------------------------------\n\nTITLE: Setting Usage Location - Set-EntraUser (PowerShell)\nDESCRIPTION: This example shows how to set the `UsageLocation` property for a user. Setting the `UsageLocation` is important for license assignment and service availability checks. The location is specified using a two-letter ISO 3166 country code. The `Connect-Entra` ensures the session is authorized before executing `Set-EntraUser`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUser.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nSet-EntraUser -UserId 'SawyerM@contoso.com' -UsageLocation 'US'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Guest Users with Active Licenses (PowerShell)\nDESCRIPTION: This snippet demonstrates how to retrieve guest users that have active licenses assigned to them. It first connects to Entra ID, filters for guest users, iterates through each guest user to check for assigned licenses, and then formats the output to display relevant information like ID, Display Name, User Principal Name and assigned licenses.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUser.md#_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\n$guestUsers = Get-EntraBetaUser -Filter \"userType eq 'Guest'\" -All\n$guestUsersWithLicenses = foreach ($guest in $guestUsers) {\n    if ($guest.AssignedLicenses.Count -gt 0) {\n        [PSCustomObject]@{\n            Id                = $guest.Id\n            DisplayName       = $guest.DisplayName\n            UserPrincipalName = $guest.UserPrincipalName\n            AssignedLicenses  = ($guest.AssignedLicenses | ForEach-Object { $_.SkuId }) -join \", \"\n        }\n    }\n}\n$guestUsersWithLicenses | Format-Table Id, DisplayName, UserPrincipalName, AssignedLicenses -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get logs by AppDisplayName - PowerShell\nDESCRIPTION: This example shows how to retrieve sign-in logs based on the application display name. It connects to Entra ID and uses the `Get-EntraAuditSignInLog` cmdlet with the `-Filter` parameter to select logs where the `AppDisplayName` matches 'Graph Explorer'. The `-Top` parameter limits the result to one entry. The resulting output includes properties such as ID, application display name, application ID, and authentication details.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAuditSignInLog.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All','Directory.Read.All'\nGet-EntraAuditSignInLog -Filter \"AppDisplayName eq 'Graph Explorer'\" -Top 1\n```\n\n----------------------------------------\n\nTITLE: Update Group Description - PowerShell\nDESCRIPTION: This example demonstrates how to update the description of an existing Microsoft Entra ID group. It connects to Entra ID, retrieves the group based on its display name, and pipes the result to Set-EntraGroup to update the Description property.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraGroup.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All'\nGet-EntraGroup -Filter \"displayName eq 'HelpDesk Team Leaders'\" | Set-EntraGroup -Description 'HelpDesk Team Leaders Global'\n```\n\n----------------------------------------\n\nTITLE: Find Deleted User by Display Name - PowerShell\nDESCRIPTION: This snippet retrieves a soft-deleted user in Microsoft Entra ID using their display name. It connects to Entra ID with the 'User.Read.All' scope and uses the 'Get-EntraDeletedUser' cmdlet with a filter to find the user by their 'displayName'. The result will include the user's ID which can then be used to restore the user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/recover-deleted-data.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraDeletedUser -Filter \"displayName eq 'Avery Smith'\"\n```\n\n----------------------------------------\n\nTITLE: Remove External Domain Federation - PowerShell\nDESCRIPTION: This code snippet demonstrates how to delete an external domain federation setting for a given external domain using the Remove-EntraExternalDomainFederation cmdlet. It first connects to Entra ID with the required scopes and then removes the specified external domain federation.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraExternalDomainFederation.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraExternalDomainFederation\n -ExternalDomainName <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get subscribed SKUs PowerShell\nDESCRIPTION: This PowerShell code snippet demonstrates how to retrieve a list of all subscribed SKUs for Microsoft services. It first connects to Entra ID with specific scopes and then uses the `Get-EntraSubscribedSku` cmdlet to fetch the SKUs.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraSubscribedSku.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All', 'LicenseAssignment.Read.All'\nGet-EntraSubscribedSku\n```\n\n----------------------------------------\n\nTITLE: List Users with Disabled Accounts - EntraBetaUser PowerShell\nDESCRIPTION: This example shows how to retrieve all users with disabled accounts from Microsoft Entra ID using the `-Filter` parameter.  The `Connect-Entra` cmdlet is used to establish a connection with the required scopes.  `Get-EntraBetaUser` is used with the `-Filter` parameter to specify the condition `accountEnabled eq false`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUser.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraBetaUser -Filter \"accountEnabled eq false\" | Select-Object DisplayName, Id, Mail, UserPrincipalName\n```\n\n----------------------------------------\n\nTITLE: Get All Policies Using -All Parameter - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all policies in Microsoft Entra ID using the `-All` parameter. It connects to Entra ID with the 'Policy.Read.All' scope and uses the `Get-EntraPolicy` cmdlet with `-All` to fetch all policies.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraPolicy.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.All'\nGet-EntraPolicy -All\n```\n\n----------------------------------------\n\nTITLE: Create a Group - New-EntraBetaGroup PowerShell\nDESCRIPTION: This snippet demonstrates how to create a new Microsoft Entra ID group using the New-EntraBetaGroup cmdlet. It requires the 'Group.ReadWrite.All' and 'Group.Create' scopes and specifies parameters such as DisplayName, MailEnabled, MailNickname, and SecurityEnabled. The output shows the created group's properties, including DisplayName, Id, MailNickname, Description, and GroupTypes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaGroup.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All','Group.Create'\n$params = @{\n    DisplayName = 'HelpDesk admin group2'\n    MailEnabled = $False\n    MailNickname = 'helpDeskAdminGroup'\n    SecurityEnabled = $True\n}\n\nNew-EntraBetaGroup @params\n```\n\nLANGUAGE: powershell\nCODE:\n```\nDisplayName           Id                                   MailNickname       Description GroupTypes\n-----------           --                                   ------------       ----------- ----------\nHelpDesk admin group2 bbbbbbbb-5555-5555-0000-qqqqqqqqqqqq helpDeskAdminGroup             {}\n```\n\n----------------------------------------\n\nTITLE: Remove Conditional Access Policy by PolicyId - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to delete a conditional access policy in Microsoft Entra ID by specifying its PolicyId. It first connects to Entra ID with the necessary scopes, retrieves a conditional access policy by its display name, and then removes it using the Remove-EntraBetaConditionalAccessPolicy cmdlet.\n\nDependencies: Microsoft.Entra.Beta PowerShell module, Connect-Entra, Get-EntraBetaConditionalAccessPolicy cmdlets.\n\nParameters: -PolicyId specifies the Id of the conditional access policy to be deleted.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaConditionalAccessPolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ConditionalAccess','Policy.Read.All'\n$policy = Get-EntraBetaConditionalAccessPolicy | Where-Object {$_.DisplayName -eq 'MFA policy'}\nRemove-EntraBetaConditionalAccessPolicy -PolicyId $policy.Id\n```\n\n----------------------------------------\n\nTITLE: Revoke Refresh Tokens for Current User - PowerShell\nDESCRIPTION: This code snippet demonstrates how to revoke all refresh tokens issued to applications for the currently signed-in user. It first connects to Entra ID with the required scope and then executes the Revoke-EntraBetaSignedInUserAllRefreshToken cmdlet. The output confirms the successful revocation.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Revoke-EntraBetaSignedInUserAllRefreshToken.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.RevokeSessions.All'\nRevoke-EntraBetaSignedInUserAllRefreshToken\n```\n\nLANGUAGE: powershell\nCODE:\n```\nValue\n-----\nTrue\n```\n\n----------------------------------------\n\nTITLE: List sign-ins from non-compliant devices - PowerShell\nDESCRIPTION: This example retrieves sign-in audit logs for sign-ins originating from non-compliant devices. After connecting to Entra ID with the required scopes, the `Get-EntraAuditSignInLog` cmdlet is used with a `-Filter` to select logs where `deviceDetail/isCompliant` is `false`. The `-Top` parameter limits the output to a single entry, and `Select-Object` displays the ID, user display name, application display name, client application used, Conditional Access status, device details, and status of the sign-in attempt.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAuditSignInLog.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All','Directory.Read.All'\nGet-EntraAuditSignInLog -Filter \"deviceDetail/isCompliant eq false\" -Top 1 | Select-Object id, userDisplayName, appDisplayName, clientAppUsed, conditionalAccessStatus, deviceDetail, status\n```\n\n----------------------------------------\n\nTITLE: Setting Extension Properties - Set-EntraUser (PowerShell)\nDESCRIPTION: This example demonstrates how to set extension properties for a user, such as an app role for an application. It retrieves an application, gets the extension property name, and then sets the extension property for the user.  `Connect-Entra` cmdlet should be used beforehand to authorize the session.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUser.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\n$application = Get-EntraApplication -Filter \"DisplayName eq 'Helpdesk Application'\"\n$extensionName = (Get-EntraApplicationExtensionProperty -ApplicationId $application.Id).Name | Select-Object -First 1\n$additionalProperties = @{ $extensionName = \"Survey.Report\" }\nSet-EntraUser -UserId 'SawyerM@contoso.com' -AdditionalProperties $additionalProperties\n```\n\n----------------------------------------\n\nTITLE: Get a specific group by GroupId - PowerShell\nDESCRIPTION: This PowerShell snippet retrieves a specific group from Microsoft Entra ID using its GroupId. It first connects to Entra ID using Connect-Entra with the 'GroupMember.Read.All' scope. It then retrieves a group based on its DisplayName, and subsequently retrieves the group based on the retrieved group's ID using Get-EntraGroup. The output displays the group's attributes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraGroup.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All'\n$group = Get-EntraGroup -Filter \"DisplayName eq 'Azure Panda'\"\nGet-EntraGroup -GroupId $group.Id\n```\n\n----------------------------------------\n\nTITLE: Remove Service Principal App Role Assignment - PowerShell\nDESCRIPTION: This code snippet demonstrates how to remove a service principal application role assignment in Microsoft Entra ID using the `Remove-EntraServicePrincipalAppRoleAssignment` cmdlet. It requires the `AppRoleAssignmentId` and `ServicePrincipalId` to identify the assignment to be removed, and also shows the commands to retrieve them.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraServicePrincipalAppRoleAssignment.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AppRoleAssignment.ReadWrite.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\n$group = Get-EntraGroup -Filter \"displayName eq 'Contoso marketing'\"\n$assignment = Get-EntraServicePrincipalAppRoleAssignment -ServicePrincipalId $servicePrincipal.Id | Where-Object {$_.PrincipalId -eq $group.Id} \nRemove-EntraServicePrincipalAppRoleAssignment -ServicePrincipalId $servicePrincipal.Id  -AppRoleAssignmentId $assignment.Id\n```\n\n----------------------------------------\n\nTITLE: List Users Without Managers - PowerShell\nDESCRIPTION: This script identifies and lists users in Entra ID who do not have a manager assigned.  It retrieves all users using `Get-EntraUser`, iterates through them, and checks for a manager using `Get-EntraUserManager`. Users without a manager are then displayed with their ID, display name, user principal name, user type, account status, and creation date.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-user.md#_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\n$allUsers = Get-EntraUser -All\n$usersWithoutManagers = foreach ($user in $allUsers) {\n    $manager = Get-EntraUserManager -UserId $user.Id -ErrorAction SilentlyContinue\n    if (-not $manager) {\n        [PSCustomObject]@{\n            Id                = $user.Id\n            DisplayName       = $user.DisplayName\n            UserPrincipalName = $user.UserPrincipalName\n            UserType          = $user.userType\n            AccountEnabled    = $user.accountEnabled\n            CreatedDateTime   = $user.createdDateTime\n        }\n    }\n}\n$usersWithoutManagers | Format-Table Id, DisplayName, UserPrincipalName, CreatedDateTime, UserType, AccountEnabled  -AutoSize\n```\n\n----------------------------------------\n\nTITLE: List sign-ins failing Conditional Access - PowerShell\nDESCRIPTION: This example retrieves sign-in audit logs specifically for sign-ins that failed due to Conditional Access policies. It connects to Entra ID with appropriate scopes and then uses `Get-EntraAuditSignInLog` with a `-Filter` parameter to select logs where the `conditionalAccessStatus` is `failure`. The `-Limit` parameter restricts the output to 10 entries, and `Select-Object` is used to display only the ID, user display name, creation date/time, application display name, and status of each sign-in attempt.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAuditSignInLog.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All','Directory.Read.All'\nGet-EntraAuditSignInLog -Filter \"conditionalAccessStatus eq 'failure'\" -Limit 10 | Select-Object id, userDisplayName, createdDateTime, appDisplayName, status\n```\n\n----------------------------------------\n\nTITLE: Get User by userPrincipalName - Entra ID - PowerShell\nDESCRIPTION: This example demonstrates retrieving a user by their userPrincipalName using the `-Filter` parameter.  It requires a connection to Entra ID with the 'User.Read.All' scope. The filter uses the `eq` operator to match the provided userPrincipalName exactly.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUser.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraUser -Filter \"userPrincipalName eq 'SawyerM@contoso.com'\"\n```\n\n----------------------------------------\n\nTITLE: List User's Direct Reports - PowerShell\nDESCRIPTION: This script retrieves and displays the direct reports of a specified user in Entra ID. It uses the `Get-EntraUserDirectReport` cmdlet to fetch the direct reports' information and formats the output to show each direct report's ID, display name, user principal name, creation date, account status, and user type.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-user.md#_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read','User.Read.All'\nGet-EntraUserDirectReport -UserId 'SawyerM@contoso.com' |\n    Select-Object Id, displayName, userPrincipalName, createdDateTime, accountEnabled, userType |\n    Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Update Group Mail Nickname - PowerShell\nDESCRIPTION: This example demonstrates how to update the mail nickname of an existing Microsoft Entra ID group. The script connects to Entra ID, retrieves the group using its display name, and then uses Set-EntraGroup to modify the MailNickName property.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraGroup.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All'\n$group = Get-EntraGroup -Filter \"DisplayName eq 'HelpDesk Team Leaders'\"\nSet-EntraGroup -GroupId $group.Id -MailNickName 'newnickname'\n```\n\n----------------------------------------\n\nTITLE: Assigning Permissions to an Application\nDESCRIPTION: This code snippet shows how to assign permissions to an application by updating its `RequiredResourceAccess` property. The example assigns specific scope and role permissions from the Microsoft Graph API. The `Application.ReadWrite.All` scope is needed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-apps.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All'\n$application = Get-EntraApplication -Filter \"DisplayName eq 'My new application'\"\n$requiredResourceAccess = @(\n    @{\n        resourceAppId    = '00000003-0000-0000-c000-000000000000'\n        resourceAccess = @(\n            @{\n                id   = 'c79f8feb-a9db-4090-85f9-90d820caa0eb'\n                type = 'Scope'\n            }\n            @{\n                id   = '9a5d68dd-52b0-4cc2-bd40-abcf44ac3a30'\n                type = 'Role'\n            } )\n    })\nSet-EntraApplication -ApplicationId $application.Id -RequiredResourceAccess $requiredResourceAccess\n```\n\n----------------------------------------\n\nTITLE: Create Application with AddIns Parameter\nDESCRIPTION: This example shows how to create an application and configure the AddIns parameter, which defines custom behaviors.  It involves creating a new AddIn object with properties and adding it to the application. It requires the Application.ReadWrite.All and Application.ReadWrite.OwnedBy scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplication.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$addin = New-Object Microsoft.Open.MSGraph.Model.AddIn\n$addin.Type = 'testtype'\n$addinproperties = New-Object System.collections.Generic.List[Microsoft.Open.MSGraph.Model.KeyValue]\n$addinproperties.Add([Microsoft.Open.MSGraph.Model.KeyValue]@{ Key = \"key\"; Value = \"value\" })\n$addin.Properties = $addinproperties\nNew-EntraApplication -DisplayName 'My new application' -AddIns $addin\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDisplayName Id                                   AppId                                SignInAudience PublisherDomain\n----------- --                                   -----                                -------------- ---------------\nMy new application       dddd3333-ee44-5555-66ff-777777aaaaaa 22223333-cccc-4444-dddd-5555eeee6666 AzureADMyOrg   contoso.com\n```\n\n----------------------------------------\n\nTITLE: Retrieve Registered Owner of a Device\nDESCRIPTION: This example demonstrates how to retrieve the registered owner of a device using the Get-EntraBetaDeviceRegisteredOwner cmdlet. It first connects to Entra ID, retrieves a device using its display name, and then retrieves the registered owner of that device, selecting and formatting specific properties for display. It requires the 'Device.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeviceRegisteredOwner.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\n$device = Get-EntraBetaDevice -SearchString '<device-display-name>'\nGet-EntraBetaDeviceRegisteredOwner -DeviceId $device.Id |\nSelect-Object Id, displayName, UserPrincipalName, createdDateTime, userType, accountEnabled |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Grant User Administrative Role - PowerShell\nDESCRIPTION: This script grants a user an administrative role in Entra ID. It first retrieves the desired directory role using `Get-EntraDirectoryRole` and the user using `Get-EntraUser`. It then adds the user as a member of the directory role using `Add-EntraDirectoryRoleMember`. Requires 'User.ReadWrite.All' and 'RoleManagement.ReadWrite.Directory' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-user.md#_snippet_19\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All', 'RoleManagement.ReadWrite.Directory'\n$directoryRole = Get-EntraDirectoryRole -Filter \"DisplayName eq 'Helpdesk Administrator'\"\n$user = Get-EntraUser -Filter \"UserPrincipalName eq 'SawyerM@contoso.com'\"\nAdd-EntraDirectoryRoleMember -DirectoryRoleId $directoryRole.Id -MemberId $user.Id\n```\n\n----------------------------------------\n\nTITLE: Add Group to Administrative Unit (PowerShell)\nDESCRIPTION: This example demonstrates how to add a group as a member of an administrative unit. It uses Connect-Entra to connect, Get-EntraBetaAdministrativeUnit to find the administrative unit by display name, Get-EntraBetaGroup to find the group by search string, and then Add-EntraBetaAdministrativeUnitMember to add the group to the administrative unit.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaAdministrativeUnitMember.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.ReadWrite.All'\n$administrativeUnit = Get-EntraBetaAdministrativeUnit -Filter \"DisplayName eq '<administrativeunit-display-name>'\"\n$group = Get-EntraBetaGroup -SearchString 'Sales and Marketing'\nAdd-EntraBetaAdministrativeUnitMember -AdministrativeUnitId $administrativeUnit.Id -MemberId $group.Id\n```\n\n----------------------------------------\n\nTITLE: Retrieve All Owned Objects of a Service Principal (Example 2)\nDESCRIPTION: This example retrieves all owned objects of a service principal.  It connects to Entra ID with the necessary scopes, finds the service principal, and then uses the `-All` parameter with `Get-EntraServicePrincipalOwnedObject` to retrieve all owned objects, selecting specific properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalOwnedObject.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraServicePrincipalOwnedObject -ServicePrincipalId $servicePrincipal.Id -All | Select-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Get Key Credentials Example - PowerShell\nDESCRIPTION: Illustrates how to retrieve the key credentials for a specific application using the Get-EntraBetaApplicationKeyCredential cmdlet. It first connects to Entra ID with the required scope, retrieves the application object using its display name, and then retrieves the key credentials using the ApplicationId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationKeyCredential.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$application = Get-EntraBetaApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\nGet-EntraBetaApplicationKeyCredential -ApplicationId $application.Id\n```\n\n----------------------------------------\n\nTITLE: Add Group to Administrative Unit (Example 2) - PowerShell\nDESCRIPTION: This PowerShell snippet adds a group to a specified administrative unit. It connects to Entra, retrieves the administrative unit and group objects using their display name and SearchString, respectively, then uses Add-EntraAdministrativeUnitMember to add the group to the administrative unit.  It requires the AdministrativeUnit.ReadWrite.All scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Add-EntraAdministrativeUnitMember.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.ReadWrite.All'\n$administrativeUnit = Get-EntraAdministrativeUnit -Filter \"DisplayName eq '<administrativeunit-display-name>'\"\n$group = Get-EntraGroup -SearchString 'Sales and Marketing'\nAdd-EntraAdministrativeUnitMember -AdministrativeUnitId $administrativeUnit.Id -MemberId $group.Id\n```\n\n----------------------------------------\n\nTITLE: Assigning Multiple Licenses to a User (PowerShell)\nDESCRIPTION: This PowerShell snippet demonstrates how to assign multiple licenses to a single user.  It retrieves the `SkuId` for each desired license using `Get-EntraSubscribedSku`, then creates `AssignedLicense` objects for each. These are added to an `AssignedLicenses` object, and finally assigned to the user using `Set-EntraUserLicense`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/how-to-manage-user-licenses.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\n# Connect to Entra\nConnect-Entra -Scopes 'Organization.ReadWrite.All'\n\n# Retrieve the SkuId for the desired license plans\n$skuId1 = (Get-EntraSubscribedSku | Where-Object { $_.SkuPartNumber -eq 'AAD_PREMIUM_P2' }).SkuId\n$skuId2 = (Get-EntraSubscribedSku | Where-Object { $_.SkuPartNumber -eq 'EMS' }).SkuId\n\n# Get the user to assign the licenses to\n$user = Get-EntraUser -UserId 'AljosaH@Contoso.com'\n\n# Create license assignment objects\n$license1 = New-Object -TypeName Microsoft.Open.AzureAD.Model.AssignedLicense\n$license1.SkuId = $skuId1\n\n$license2 = New-Object -TypeName Microsoft.Open.AzureAD.Model.AssignedLicense\n$license2.SkuId = $skuId2\n\n$licenses = New-Object -TypeName Microsoft.Open.AzureAD.Model.AssignedLicenses\n$licenses.AddLicenses = $license1, $license2\n\n# Assign the licenses to the user\nSet-EntraUserLicense -UserId $user.Id -AssignedLicenses $licenses\n```\n\n----------------------------------------\n\nTITLE: Creating a Service Principal with Homepage, LogoutUrl, and ReplyUrls - PowerShell\nDESCRIPTION: This example shows how to create a service principal with Homepage, LogoutUrl, and ReplyUrls properties. It connects to Entra ID, fetches an application, and then creates a service principal, setting the AppId, Homepage, LogoutUrl, and ReplyUrls parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraServicePrincipal.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraApplication -Filter \"DisplayName eq 'Helpdesk Application'\"\n$params = @{\n    AppId = $application.AppId \n    Homepage = 'https://localhost/home' \n    LogoutUrl = 'htpp://localhost/logout' \n    ReplyUrls = 'https://localhost/redirect'\n}\nNew-EntraServicePrincipal @params  \n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDisplayName Id                                   AppId                                SignInAudience ServicePrincipalType\n----------- --                                   -----                                -------------- --------------------\nHelpdesk Application    bbbbbbbb-1111-2222-3333-cccccccccccc 00001111-aaaa-2222-bbbb-3333cccc4444 AzureADMyOrg   Application\n```\n\n----------------------------------------\n\nTITLE: Get Sync Errors\nDESCRIPTION: This example retrieves directory synchronization errors for users, groups, or organizational contacts during on-premises synchronization to Microsoft Entra ID.  It first connects to Entra using Connect-Entra with specific scopes.  Then, it executes the Get-EntraDirectoryObjectOnPremisesProvisioningError cmdlet and formats the output into a table for easy readability.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDirectoryObjectOnPremisesProvisioningError.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All', 'Directory.Read.All', 'Group.Read.All', 'Contacts.Read'\nGet-EntraDirectoryObjectOnPremisesProvisioningError | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: New Entra Application Password Credential - End Date\nDESCRIPTION: This example shows how to create a password credential with a specific expiration date using the `-EndDate` parameter. It connects to Entra ID, gets the application, defines the `$endDate` variable by adding two years to the current date, then creates the password credential. \nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplicationPasswordCredential.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraApplication -Filter \"displayName eq '<displayName>'\"\n$endDate = (Get-Date).AddYears(2)\nNew-EntraApplicationPasswordCredential -ApplicationId $application.Id -CustomKeyIdentifier '<userfriendlyDisplayName>' -EndDate $endDate\n```\n\n----------------------------------------\n\nTITLE: Remove Assigned User License - PowerShell\nDESCRIPTION: This PowerShell script removes an assigned license from a user. It retrieves the user and the SkuId of the license to be removed, creates a new AssignedLicenses object, and then removes the specified license from the user. Requires the 'User.ReadWrite.All' scope. Requires the Microsoft.Open.AzureAD.Model assembly.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUserLicense.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\n$userPrincipalName = 'SawyerM@Mcontoso.com'\n$user = Get-EntraUser -UserId $userPrincipalName\n$skuId = (Get-EntraUserLicenseDetail -UserId $userPrincipalName).SkuId\n$licenses = New-Object -TypeName Microsoft.Open.AzureAD.Model.AssignedLicenses \n$licenses.RemoveLicenses = $skuId \nSet-EntraUserLicense -UserId $user.Id -AssignedLicenses $licenses\n```\n\n----------------------------------------\n\nTITLE: Set Domain Capabilities - PowerShell\nDESCRIPTION: This PowerShell example demonstrates how to set the capabilities assigned to a domain in Microsoft Entra ID using the `Set-EntraDomain` cmdlet. It first connects to Entra ID using `Connect-Entra` and then uses `Set-EntraDomain` to set the supported services for the specified domain. Requires the 'Domain.ReadWrite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraDomain.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Domain.ReadWrite.All'\nSet-EntraDomain -Name Contoso.com -SupportedServices @('Email', 'OfficeCommunicationsOnline')\n```\n\n----------------------------------------\n\nTITLE: Add Group to Lifecycle Policy Example - PowerShell\nDESCRIPTION: This example demonstrates how to add a group to a lifecycle policy using the `Add-EntraLifecyclePolicyGroup` cmdlet. It first connects to Entra ID, retrieves a group and a lifecycle policy, and then adds the group to the policy using their respective IDs.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Add-EntraLifecyclePolicyGroup.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\n$group = Get-EntraGroup -Filter \"DisplayName eq 'Office365 group'\"\n$policy = Get-EntraGroupLifecyclePolicy | Select-Object -First 1\nAdd-EntraLifecyclePolicyGroup -GroupLifecyclePolicyId $policy.Id -GroupId $group.Id\n```\n\n----------------------------------------\n\nTITLE: Update Signed-In User Password - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to update the password for the currently signed-in user in Microsoft Entra ID using the Update-EntraBetaSignedInUserPassword cmdlet. It requires the Directory.AccessAsUser.All scope and converts the current and new passwords to SecureString objects. The cmdlet then updates the password.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Update-EntraBetaSignedInUserPassword.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.AccessAsUser.All'\n$currentPassword = ConvertTo-SecureString '<strong-password>' -AsPlainText -Force\n$newPassword = ConvertTo-SecureString '<strong-password>' -AsPlainText -Force\nUpdate-EntraBetaSignedInUserPassword -CurrentPassword $currentPassword -NewPassword $newPassword\n```\n\n----------------------------------------\n\nTITLE: Create TokenLifetimePolicy - New-EntraPolicy (PowerShell)\nDESCRIPTION: This example shows how to create a TokenLifetimePolicy using the `New-EntraPolicy` cmdlet. The policy defines the lifetime of access tokens in Microsoft Entra ID.  Requires the `Policy.ReadWrite.ApplicationConfiguration` scope. The definition parameter takes an array of JSON strings.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraPolicy.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ApplicationConfiguration'\n$definition = @('{\"TokenLifetimePolicy\":{\"Version\":1,\"AccessTokenLifetime\":\"8:00:00\"}}')\nNew-EntraPolicy -Definition $definition -DisplayName 'TokenLifetimePolicy' -Type 'TokenLifetimePolicy' -IsOrganizationDefault $false\n```\n\n----------------------------------------\n\nTITLE: Remove User Manager Example - PowerShell\nDESCRIPTION: Demonstrates how to remove a user's manager using the Remove-EntraUserManager cmdlet.  It first connects to Entra ID with the required scopes and then removes the manager for a specified user by their User Principal Name.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraUserManager.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nRemove-EntraUserManager -UserId 'SawyerM@Contoso.com'\n```\n\n----------------------------------------\n\nTITLE: List risky sign-ins using Get-EntraBetaAuditSignInLog (PowerShell)\nDESCRIPTION: This example demonstrates how to retrieve audit logs of sign-ins identified as risky. It connects to Entra ID and uses `Get-EntraBetaAuditSignInLog` with a `-Filter` to select sign-ins where `riskLevelDuringSignIn` is not 'none' or `riskEventTypes_v2` is not 'none'. It retrieves the top entry and selects properties related to the sign-in and risk levels.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAuditSignInLog.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All','Directory.Read.All'\nGet-EntraBetaAuditSignInLog -Filter \"\n    (riskLevelDuringSignIn ne 'none' or \n    riskEventTypes_v2/any(r:r ne 'none'))\n\" -Limit 1 | \nSelect-Object id, userDisplayName, appDisplayName, clientAppUsed, \n              riskLevelDuringSignIn, riskEventTypes_v2\n```\n\n----------------------------------------\n\nTITLE: Invite New External User with Display Name\nDESCRIPTION: This example extends the previous one by adding the -InvitedUserDisplayName parameter, which allows specifying the display name of the invited user in the directory. It uses the New-EntraBetaInvitation cmdlet in PowerShell and requires the 'User.Invite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaInvitation.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Invite.All'\n$emailAddress = 'someexternaluser@externaldomain.com'\n$sendInvitationMessage = $True\n$redirectUrl = 'https://myapps.onmicrosoft.com'\n$displayName = 'microsoftuser'\nNew-EntraBetaInvitation -InvitedUserEmailAddress $emailAddress -SendInvitationMessage $sendInvitationMessage -InviteRedirectUrl $redirectUrl -InvitedUserDisplayName $displayName\n```\n\n----------------------------------------\n\nTITLE: Get Deleted User by UserId - PowerShell\nDESCRIPTION: This example retrieves a specific deleted user by their UserId. It displays selected properties (Id, UserPrincipalName, DisplayName, AccountEnabled, DeletedDateTime, DeletionAgeInDays, UserType) in a formatted table. Requires connection established with Connect-Entra using 'User.Read.All' scope and specifies the user ID to search for.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedUser.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraDeletedUser -UserId 'dddddddd-3333-4444-5555-eeeeeeeeeeee' | Select-Object Id, UserPrincipalName, DisplayName, AccountEnabled, DeletedDateTime, DeletionAgeInDays, UserType | Format-Table -AutoSize\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                   UserPrincipalName                                              DisplayName   AccountEnabled DeletedDateTime       DeletionAgeInDays UserType\n--                                   -----------------                                              -----------   -------------- ---------------       ----------------- --------\ndddddddd-3333-4444-5555-eeeeeeeeeeee dddddddd-3333-4444-5555-eeeeeeeeeeeeAveryS@contoso.com        Avery Smith   False          2/12/2025 1:15:34 PM  3                 Member\n```\n\n----------------------------------------\n\nTITLE: Add an owner to a group - PowerShell\nDESCRIPTION: This example demonstrates how to add a user as an owner to a specific group. It first connects to Entra ID with the required scopes, retrieves the group and user objects, and then uses `Add-EntraBetaGroupOwner` to add the user as an owner to the group. Dependencies include the Microsoft.Entra.Beta module and appropriate permissions (Group.ReadWrite.All scope).\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaGroupOwner.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All'\n$group = Get-EntraBetaGroup -Filter \"DisplayName eq 'HelpDesk Team Leaders'\"\n$user = Get-EntraBetaUser -UserId 'SawyerM@contoso.com'\nAdd-EntraBetaGroupOwner -GroupId $group.Id -OwnerId $user.Id\n```\n\n----------------------------------------\n\nTITLE: Update onPremisesExtensionAttributes PowerShell\nDESCRIPTION: This example demonstrates updating the onPremisesExtensionAttributes properties for a user.  Requires 'User.ReadWrite.All' scope. It leverages -AdditionalProperties to set values for attributes like extensionAttribute1 and extensionAttribute2.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUser.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nSet-EntraBetaUser -UserId 'SawyerM@contoso.com' -AdditionalProperties @{\n    onPremisesExtensionAttributes = @{\n        extensionAttribute1 = \"Job Group D\"\n        extensionAttribute2 = \"Audit Role\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Assign an app role to a service principal - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to assign an application role to a service principal using the `New-EntraServicePrincipalAppRoleAssignment` cmdlet. It retrieves the client and resource service principals, identifies the desired app role, and then assigns the role to the service principal. The calling user needs specific Microsoft Entra roles like 'AppRoleAssignment.ReadWrite.All' for delegated scenarios.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraServicePrincipalAppRoleAssignment.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AppRoleAssignment.ReadWrite.All'\n$clientServicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\" \n$resourceServicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Microsoft Graph'\"\n$appRole = $resourceServicePrincipal.AppRoles | Where-Object { $_.Value -eq \"User.ReadBasic.All\" }\n\nNew-EntraServicePrincipalAppRoleAssignment -ServicePrincipalId $clientServicePrincipal.Id -PrincipalId $clientServicePrincipal.Id -Id $appRole.Id -ResourceId $resourceServicePrincipal.Id\n```\n\n----------------------------------------\n\nTITLE: New-EntraUser Syntax\nDESCRIPTION: Displays the syntax for the New-EntraUser cmdlet. This includes the mandatory parameters like DisplayName, AccountEnabled, and PasswordProfile, along with optional parameters such as City, Department, Mobile, and others. Understanding the syntax is essential for properly using the cmdlet to create new Entra ID users.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraUser.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-EntraUser\n -DisplayName <String>\n -AccountEnabled <Boolean>\n -PasswordProfile <PasswordProfile>\n [-City <String>]\n [-UserStateChangedOn <String>]\n [-CompanyName <String>]\n [-PreferredLanguage <String>]\n [-FacsimileTelephoneNumber <String>]\n [-GivenName <String>]\n [-Mobile <String>]\n [-UsageLocation <String>]\n [-PostalCode <String>]\n [-AgeGroup <String>]\n [-CreationType <String>]\n [-ExtensionProperty <System.Collections.Generic.Dictionary`2[System.String,System.String]>]\n [-ConsentProvidedForMinor <String>]\n [-MailNickName <String>]\n [-ImmutableId <String>]\n [-Country <String>]\n [-SignInNames <System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.SignInName]>]\n [-Department <String>]\n [-PasswordPolicies <String>]\n [-JobTitle <String>]\n [-IsCompromised <Boolean>]\n [-UserState <String>]\n [-UserType <String>]\n [-OtherMails <System.Collections.Generic.List`1[System.String]>]\n [-PhysicalDeliveryOfficeName <String>]\n [-UserPrincipalName <String>]\n [-State <String>]\n [-StreetAddress <String>]\n [-TelephoneNumber <String>]\n [-Surname <String>]\n [-ShowInAddressList <Boolean>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove Group Owner Example - PowerShell\nDESCRIPTION: This example demonstrates how to remove an owner from a group in Microsoft Entra ID using the Remove-EntraGroupOwner cmdlet.  It first connects to Entra ID with the necessary scopes, retrieves the group and owner, and then removes the owner using their respective IDs.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraGroupOwner.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All'\n$group = Get-EntraGroup -Filter \"DisplayName eq 'HelpDesk Team Leaders'\"\n$groupOwner = Get-EntraGroup -GroupId $group.Id | Get-EntraGroupOwner | Where-Object {$_.displayName -eq 'Adele Vance'}\nRemove-EntraGroupOwner -GroupId $group.Id -OwnerId $groupOwner.Id\n```\n\n----------------------------------------\n\nTITLE: Get Group Member by ID - PowerShell\nDESCRIPTION: This example retrieves group members using the `GroupId` parameter. It connects to Entra ID, retrieves a group by its display name using `Get-EntraGroup`, then retrieves members of the group using `Get-EntraGroupMember` and filters the output to only show `Id`, `DisplayName`, and `@odata.type`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraGroupMember.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All'\n$group = Get-EntraGroup -Filter \"DisplayName eq 'Sales and Marketing'\"\nGet-EntraGroupMember -GroupId $group.Id | Select-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Creating a Permission Grant Policy (PowerShell)\nDESCRIPTION: This example demonstrates how to create a new permission grant policy in Microsoft Entra ID using the New-EntraPermissionGrantPolicy cmdlet. It first connects to Entra with specific scopes, then creates the policy using the Id, DisplayName, and Description parameters. The output shows the details of the newly created policy.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraPermissionGrantPolicy.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.PermissionGrant'\nNew-EntraPermissionGrantPolicy -Id 'my_new_permission_grant_policy_id' -DisplayName 'MyNewPermissionGrantPolicy' -Description 'My new permission grant policy'\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDeletedDateTime Description                    DisplayName                Id\n--------------- -----------                    -----------                --\n                My new permission grant policy MyNewPermissionGrantPolicy my_new_permission_grant_policy_id\n```\n\n----------------------------------------\n\nTITLE: Get Audit Logs by Result - PowerShell\nDESCRIPTION: This command retrieves all audit logs with a specific result, in this case, 'failure'. The code connects to Entra ID using the necessary scopes. The `Get-EntraAuditDirectoryLog` cmdlet is then used with the `-Filter` parameter set to \"result eq 'failure'\" and the `-All` parameter to retrieve all logs matching the filter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAuditDirectoryLog.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All, Directory.Read.All'\nGet-EntraAuditDirectoryLog -Filter \"result eq 'failure'\" -All\n```\n\n----------------------------------------\n\nTITLE: Set Entra Group Display Name - PowerShell\nDESCRIPTION: This example demonstrates how to update the display name of a specified group in Microsoft Entra ID. It first connects to Entra ID, retrieves the group using Get-EntraBetaGroup, and then uses Set-EntraBetaGroup to modify the DisplayName.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaGroup.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All'\n$group = Get-EntraBetaGroup -Filter \"DisplayName eq 'HelpDesk Team Leaders'\"\nSet-EntraBetaGroup -GroupId $group.Id -DisplayName 'Global HelpDesk Team Leaders'\n```\n\n----------------------------------------\n\nTITLE: Remove Deleted Application Using Pipelining - PowerShell\nDESCRIPTION: This example demonstrates how to remove a recently deleted application object using pipelining.  It connects to Entra ID with the necessary scopes, retrieves the deleted application using Get-EntraBetaDeletedApplication with a filter, and pipes the output to Remove-EntraBetaDeletedApplication. The calling user needs to have at least one of the following Microsoft Entra roles: Application Administrator, Cloud Application Administrator, or Hybrid Identity Administrator.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaDeletedApplication.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All'\nGet-EntraBetaDeletedApplication -Filter \"DisplayName eq 'My PowerShell Application'\" | Remove-EntraBetaDeletedApplication\n```\n\n----------------------------------------\n\nTITLE: Creating Application Proxy App - Cookie and Connector Settings - PowerShell\nDESCRIPTION: This example demonstrates creating a new application with the `IsHttpOnlyCookieEnabled`, `IsSecureCookieEnabled`, `IsTranslateLinksInBodyEnabled`, and `ConnectorGroupId` parameters.  It sets cookie options and assigns a specific connector group. It also connects to Entra with the necessary scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplicationProxyApplication.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\n$params = @{\n    DisplayName = 'Finance Tracker' \n    ExternalUrl = 'https://finance-awcycles.msappproxy.net/' \n    InternalUrl = 'http://finance/'\n    IsHttpOnlyCookieEnabled = $false \n    IsSecureCookieEnabled = $false \n    IsPersistentCookieEnabled = $false \n    IsTranslateLinksInBodyEnabled = $false  \n    ConnectorGroupId = 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb'\n}\nNew-EntraBetaApplicationProxyApplication @params\n```\n\n----------------------------------------\n\nTITLE: Creating an application from application template\nDESCRIPTION: This PowerShell script connects to Entra ID, retrieves an application template by its display name (SAP Fieldglass), and then creates an application instance based on that template with a specified display name ('Contoso SAP App'). It uses the `Connect-Entra`, `Get-EntraBetaApplicationTemplate`, and `New-EntraBetaApplicationFromApplicationTemplate` cmdlets.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplicationFromApplicationTemplate.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy' # Application.ReadWrite.OwnedBy is an app-only permission (non-interactive)\n$applicationTemplate = Get-EntraBetaApplicationTemplate -Filter \"DisplayName eq 'SAP Fieldglass'\"\nNew-EntraBetaApplicationFromApplicationTemplate -ApplicationTemplateId $applicationTemplate.Id -DisplayName 'Contoso SAP App'\n```\n\nLANGUAGE: powershell\nCODE:\n```\n@odata.context                                                                         servicePrincipal\n--------------                                                                         ----------------\nhttps://graph.microsoft.com/beta/$metadata#microsoft.graph.applicationServicePrincipal @{oauth2PermissionScopes=System.Object[]; servicePrincipalType=Application; displ...}\n```\n\n----------------------------------------\n\nTITLE: Get Applications with Expiring Certificates - PowerShell\nDESCRIPTION: This example retrieves applications with expiring certificates within the next 30 days.  It calculates the expiration threshold, filters applications with KeyCredentials, and then filters those credentials for expiry dates within the threshold. The result is formatted into a table displaying DisplayName, AppId, CertificateDisplayName, KeyId, and ExpiringKeys.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplication.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$expirationThreshold = (Get-Date).AddDays(30)\n$appsWithExpiringKeys = Get-EntraApplication -All | Where-Object { $_.KeyCredentials } |\nForEach-Object {\n    $app = $_\n    $app.KeyCredentials | Where-Object { $_.EndDate -le $expirationThreshold } |\n    ForEach-Object {\n        [PSCustomObject]@{\n            DisplayName            = $app.DisplayName\n            AppId                  = $app.AppId\n            CertificateDisplayName = $_.DisplayName\n            KeyId                  = $_.KeyId\n            ExpiringKeys           = $_.EndDate\n        }\n    }\n}\n$appsWithExpiringKeys | Format-Table DisplayName, AppId, CertificateDisplayName, KeyId, ExpiringKeys -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Listing Jailbroken Devices - PowerShell\nDESCRIPTION: This PowerShell script lists jailbroken devices in Microsoft Entra ID.  It connects to Entra ID with the 'Device.Read.All' scope, retrieves all devices using Get-EntraDevice, and then filters the results using Where-Object to find devices where the 'isRooted' property is true.  The script then selects and displays the Id, IsRooted, DeviceId, and DisplayName properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-devices.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraDevice -All | Where-Object { $_.isRooted -eq $true } | Select-Object Id, IsRooted,DeviceId, DisplayName\n```\n\n----------------------------------------\n\nTITLE: Get Group Membership for a Group (PowerShell)\nDESCRIPTION: Demonstrates how to retrieve the group membership of a specific group using `Select-EntraGroupIdsGroupIsMemberOf`.  It first connects to Entra ID with the required scopes, creates a `GroupIdsForMembershipCheck` object, populates it with the ID of a group (Tailspin Toys), then retrieves the ID of another group (sg-Legal) and checks the membership.  The example requires the 'GroupMember.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Select-EntraGroupIdsGroupIsMemberOf.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All'\n$groupObject = New-Object Microsoft.Open.AzureAD.Model.GroupIdsForMembershipCheck\n$groupObject.GroupIds = (Get-EntraGroup -Filter \"displayName eq 'Tailspin Toys'\").Id\n$group = Get-EntraGroup -Filter \"displayName eq 'sg-Legal'\"\nSelect-EntraGroupIdsGroupIsMemberOf  -GroupId $group.Id -GroupIdsForMembershipCheck $groupObject\n```\n\n----------------------------------------\n\nTITLE: Create an ActivityBasedTimeoutPolicy\nDESCRIPTION: This example shows how to create an ActivityBasedTimeoutPolicy. It connects to Entra ID, defines a policy with AlternateLoginIDLookup enabled, and creates the policy using the New-EntraBetaPolicy cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaPolicy.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ApplicationConfiguration'\n$definition = @('{\"activityBasedTimeoutPolicies\":{\"AlternateLoginIDLookup\":true, \"IncludedUserIds\":[\"UserID\"]}}')\nNew-EntraBetaPolicy -Definition $definition -DisplayName 'ActivityBasedTimeoutPolicyname' -Type 'ActivityBasedTimeoutPolicy'\n```\n\nLANGUAGE: powershell\nCODE:\n```\nDefinition                                                                                       DeletedDateTime Description DisplayName                    Id\n----------                                                                                       --------------- ----------- -----------                    --\n{{\"activityBasedTimeoutPolicies\":{\"AlternateLoginIDLookup\":true, \"IncludedUserIds\":[\"UserID\"]}}}                             ActivityBasedTimeoutPolicyname aaaaaaaa-0000-1111-2222...\n```\n\n----------------------------------------\n\nTITLE: Get deleted applications filter by display name - PowerShell\nDESCRIPTION: Retrieves deleted applications that have a display name equal to 'Contoso Fieldglass' and displays specific properties. It requires the 'Application.Read.All' scope and uses the Connect-Entra cmdlet for authentication. It filters the results based on display name.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedApplication.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraDeletedApplication -Filter \"displayName eq 'Contoso Fieldglass'\" | Select-Object Id, AppId, DisplayName, SignInAudience, PublisherDomain, DeletedDateTime, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get groups that contain a search string - PowerShell\nDESCRIPTION: This PowerShell snippet retrieves groups from Microsoft Entra ID that contain a specified search string in their display names. It connects to Entra ID using Connect-Entra with the 'GroupMember.Read.All' scope, and uses Get-EntraGroup with the `-SearchString` parameter to find groups with display names containing the specified string.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraGroup.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All'\nGet-EntraGroup -SearchString 'New'\n```\n\n----------------------------------------\n\nTITLE: Get Commercial Subscriptions by ID - PowerShell\nDESCRIPTION: This example retrieves a specific commercial subscription using its CommerceSubscriptionId. It connects to Entra ID using the 'Organization.Read.All' scope and then utilizes the Get-EntraBetaSubscription cmdlet with the -CommerceSubscriptionId parameter, specifying the unique identifier of the subscription. The output will show the details of the matching subscription.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaSubscription.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All'\nGet-EntraBetaSubscription -CommerceSubscriptionId 'eeeeeeee-4444-5555-6666-ffffffffffff'\n```\n\n----------------------------------------\n\nTITLE: Get Objects by ID using Get-EntraDirectoryObject in PowerShell\nDESCRIPTION: This example shows how to retrieve directory objects using their IDs. It first retrieves a list of groups using `Get-EntraGroup`, then uses `Get-EntraDirectoryObject` to get the objects corresponding to the group IDs.  The output is then filtered to display the 'Id', 'DisplayName', and '@odata.type' properties using `Select-Object`.\n\nPrerequisites: The Microsoft.Entra module must be installed and the user must have the 'Directory.Read.All' scope granted using `Connect-Entra`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDirectoryObject.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\n$groups = Get-EntraGroup -Limit 4\nGet-EntraDirectoryObject -DirectoryObjectIds $groups.Id | \nSelect-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Get a specific deleted application using Application ID - PowerShell\nDESCRIPTION: Retrieves a specific deleted application using its Application ID ('aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb') and displays specific properties. It requires the 'Application.Read.All' scope and uses the Connect-Entra cmdlet for authentication.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedApplication.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraDeletedApplication -ApplicationId aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb | Select-Object Id, AppId, DisplayName, DeletedDateTime, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Assign an app role to a user - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to assign an application role to a user using the `New-EntraServicePrincipalAppRoleAssignment` cmdlet.  It retrieves the service principal and user objects, and then assigns a specific app role to that user. Note the use of backticks for line continuation.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraServicePrincipalAppRoleAssignment.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AppRoleAssignment.ReadWrite.All'\n$servicePrincipalObject = Get-EntraServicePrincipal -Filter \"displayName eq 'Box'\"\n$user = Get-EntraUser -UserId 'PattiF@Contoso.com'\n\nNew-EntraServicePrincipalAppRoleAssignment `\n    -ServicePrincipalId $servicePrincipalObject.Id `\n    -ResourceId $servicePrincipalObject.Id `\n    -Id $servicePrincipalObject.Approles[1].Id `\n    -PrincipalId $user.Id\n```\n\n----------------------------------------\n\nTITLE: Remove delegated permission classification example - PowerShell\nDESCRIPTION: This PowerShell script removes a delegated permission classification from a specified service principal. It first connects to Entra with the required scopes, retrieves the service principal and the permission classification by name, and then removes the permission classification using its ID. The script relies on the `Connect-Entra`, `Get-EntraBetaServicePrincipal`, `Get-EntraBetaServicePrincipalDelegatedPermissionClassification`, and `Remove-EntraBetaServicePrincipalDelegatedPermissionClassification` cmdlets.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaServicePrincipalDelegatedPermissionClassification.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.PermissionGrant'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\n$permissionClassification = Get-EntraBetaServicePrincipalDelegatedPermissionClassification -ServicePrincipalId $servicePrincipal.Id | Where-Object {$_.PermissionName -eq 'Sites.Read.All'}\nRemove-EntraBetaServicePrincipalDelegatedPermissionClassification -ServicePrincipalId $servicePrincipal.Id -Id $permissionClassification.Id\n```\n\n----------------------------------------\n\nTITLE: Get OAuth2 Permission Grants of Service Principal - PowerShell\nDESCRIPTION: This example retrieves the OAuth2 permission grants associated with a specific service principal using its ID.  It requires connecting to Entra ID with 'Directory.Read.All' scope and fetching the service principal ID before executing the Get-EntraBetaServicePrincipalOAuth2PermissionGrant cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalOAuth2PermissionGrant.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraBetaServicePrincipalOAuth2PermissionGrant -ServicePrincipalId $servicePrincipal.Id\n```\n\n----------------------------------------\n\nTITLE: Get all groups - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all groups from Microsoft Entra ID using the Get-EntraBetaGroup cmdlet. It requires connecting to Entra ID with the GroupMember.Read.All scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaGroup.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All'\nGet-EntraBetaGroup\n```\n\n----------------------------------------\n\nTITLE: Update Group Mail Enabled - PowerShell\nDESCRIPTION: This example demonstrates how to update the MailEnabled property of an existing Microsoft Entra ID group. The script connects to Entra ID, retrieves the group using its display name, and then applies Set-EntraGroup to set the MailEnabled property to $False.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraGroup.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All'\n$group = Get-EntraGroup -Filter \"DisplayName eq 'HelpDesk Team Leaders'\"\nSet-EntraGroup -GroupId $group.Id -MailEnabled $False\n```\n\n----------------------------------------\n\nTITLE: Update AlternativeNames and DisplayName - PowerShell\nDESCRIPTION: This example shows how to update the AlternativeNames and DisplayName properties of a service principal in Microsoft Entra ID using the Set-EntraServicePrincipal cmdlet. It connects to Entra ID with required scopes, finds the service principal by displayName filter and sets the new values.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraServicePrincipal.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nSet-EntraServicePrincipal -ServicePrincipalId $servicePrincipal.Id -AlternativeNames 'Helpdesk Application Global' -DisplayName 'NewName'\n```\n\n----------------------------------------\n\nTITLE: List External Applications - PowerShell\nDESCRIPTION: This code snippet retrieves applications (service principals) that are registered outside the current tenant. It connects to Entra with the 'Application.Read.All' scope, retrieves the current tenant ID, gets all service principals, filters out those that do not belong to the current tenant, and then displays the Display Name, ID, App ID, and App Owner Organization ID of the external service principals.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipal.md#_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$tenantId = Get-EntraContext | Select-Object -ExpandProperty TenantId\n$servicePrincipals = Get-EntraServicePrincipal -All -Property AppOwnerOrganizationId, Id, DisplayName, AppId\n$externalServicePrincipals = $servicePrincipals | Where-Object { $_.AppOwnerOrganizationId -ne $tenantId }\n$externalServicePrincipals | Select-Object DisplayName, Id, AppId, AppOwnerOrganizationId | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Device - By DeviceId\nDESCRIPTION: This PowerShell snippet retrieves a specific deleted device using its DeviceId by using the Filter parameter. It connects to Entra with Connect-Entra, then uses Get-EntraDeletedDevice with the `-Filter` parameter and a filter expression containing `deviceId` to fetch the device. It then displays selected device properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedDevice.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraDeletedDevice -Filter \"deviceId eq 'bbbbbbbb-1111-2222-3333-cccccccccccc'\"\n```\n\n----------------------------------------\n\nTITLE: Deleting a Deleted Directory Object - PowerShell\nDESCRIPTION: This PowerShell example shows how to permanently delete a previously deleted directory object using the Remove-EntraDeletedDirectoryObject cmdlet. It first connects to Entra ID with required scopes, retrieves the deleted application by its name, and then permanently deletes the object using its DirectoryObjectId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraDeletedDirectoryObject.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Group.ReadWrite.All','Application.ReadWrite.All','User.ReadWrite.All'\n$deletedApplication = Get-EntraDeletedApplication -SearchString 'My PowerShell Application'\nRemove-EntraDeletedDirectoryObject -DirectoryObjectId $deletedApplication.Id\n```\n\n----------------------------------------\n\nTITLE: Add Application Role (AppRole) - PowerShell\nDESCRIPTION: This snippet shows how to add an app role to an application using the Set-EntraApplication cmdlet. It constructs a new AppRole object with properties like AllowedMemberTypes, Description, DisplayName, Id, IsEnabled, and Value, then updates the application with the new role. Requires the 'Application.ReadWrite.All' and 'Application.ReadWrite.OwnedBy' scopes. Note that existing app roles are replaced unless included in the request.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraApplication.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraApplication -SearchString 'Contoso Helpdesk Application'\n$appRole = New-Object Microsoft.Open.MSGraph.Model.AppRole\n$appRole.AllowedMemberTypes = @(\"User\", \"Application\")\n$appRole.Description = \"General role\"\n$appRole.DisplayName = \"General\"\n$appRole.Id = [guid]::NewGuid()\n$appRole.IsEnabled = $true\n$appRole.Value = \"General\"\n$tags = \"WindowsAzureActiveDirectoryIntegratedApp\"\nSet-EntraApplication -ApplicationId $application.Id -AppRoles $appRole -Tags $tags\n```\n\n----------------------------------------\n\nTITLE: Update Display Name - PowerShell\nDESCRIPTION: This example demonstrates how to update only the display name of a conditional access policy using the Set-EntraConditionalAccessPolicy cmdlet. It connects to Entra ID, retrieves the policy by its current display name, and then updates it with a new display name.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraConditionalAccessPolicy.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ConditionalAccess', 'Policy.Read.All'\n$policy = Get-EntraConditionalAccessPolicy | Where-Object { $_.DisplayName -eq 'MFA policy' }\nSet-EntraConditionalAccessPolicy -PolicyId $policy.Id -DisplayName 'MFA policy updated'\n```\n\n----------------------------------------\n\nTITLE: Connect with System-Assigned Managed Identity\nDESCRIPTION: Connects to Microsoft Entra ID using a system-assigned managed identity. This is typically used in Azure services that automatically manage the identity lifecycle.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Connect-Entra.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Identity\n```\n\n----------------------------------------\n\nTITLE: Update Permission Grant Policy Display Name - PowerShell\nDESCRIPTION: This example demonstrates how to update the display name of a specified permission grant policy using the Set-EntraPermissionGrantPolicy command. It connects to Entra with required scopes, retrieves the policy by its display name, and then updates its display name using the policy ID. Requires the 'Policy.ReadWrite.PermissionGrant' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraPermissionGrantPolicy.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.PermissionGrant'\n$policy = Get-EntraPermissionGrantPolicy | Where-Object { $_.DisplayName -eq 'Microsoft User Default Recommended Policy' }\nSet-EntraPermissionGrantPolicy -Id $policy.Id -DisplayName 'Updated DisplayName'\n```\n\n----------------------------------------\n\nTITLE: UserId Parameter Definition - YAML\nDESCRIPTION: Defines the UserId parameter for the Remove-EntraBetaUser cmdlet, specifying its type, requirement, position, default value, and accepted input types.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaUser.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Assign Manager to User - PowerShell\nDESCRIPTION: This script assigns a manager to a specified user in Entra ID. It uses the `Set-EntraUserManager` cmdlet to update the user's manager property.  Requires User.ReadWrite.All scope. The `-UserId` parameter specifies the user to update, and the `-ManagerId` parameter specifies the manager to assign.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-user.md#_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nSet-EntraUserManager -UserId 'SawyerM@contoso.com' -ManagerId 'AdeleV@contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Get All Application Owners\nDESCRIPTION: This example demonstrates how to retrieve all owners of a specified application using the `-All` parameter. The script first connects to Entra ID, retrieves the application by display name, and then calls Get-EntraApplicationOwner with the ApplicationId and the -All parameter. The output is formatted to display specific properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplicationOwner.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraApplication -Filter \"DisplayName eq 'Helpdesk Application'\"\nGet-EntraApplicationOwner -ApplicationId $application.Id -All |\nSelect-Object Id, displayName, UserPrincipalName, createdDateTime, userType, accountEnabled |\nFormat-Table -AutoSize\n```\n\nLANGUAGE: powershell\nCODE:\n```\nid                                   DisplayName   UserPrincipalName                CreatedDateTime       UserType AccountEnabled\n--                                   -----------   -----------------                ---------------       -------- --------------\nbbbbbbbb-1111-2222-3333-cccccccccccc Adele Vance   AdeleV@contoso.com               10/7/2024 12:33:36 AM Member   True\ndddddddd-3333-4444-5555-eeeeeeeeeeee Cameron White CameronW@contoso.com            10/7/2024 12:34:47 AM Member   True\n```\n\n----------------------------------------\n\nTITLE: Remove Verified Publisher from Application using PowerShell\nDESCRIPTION: This example shows how to remove the verified publisher from an application using the Remove-EntraBetaApplicationVerifiedPublisher cmdlet. It first connects to Entra ID with the necessary scopes and then retrieves the application object ID. Finally, it removes the verified publisher using the cmdlet and the retrieved application ID.\n\nDependencies: Microsoft.Entra.Beta module, Application.ReadWrite.All scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaApplicationVerifiedPublisher.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All'\n$application = Get-EntraBetaApplication -Filter \"displayName eq 'Contoso Helpdesk Application'\"\nRemove-EntraBetaApplicationVerifiedPublisher -AppObjectId $application.Id\n```\n\n----------------------------------------\n\nTITLE: Revoke User Refresh Tokens - PowerShell\nDESCRIPTION: This PowerShell code invalidates all refresh tokens issued to applications for a specific user. It requires connecting to Entra ID with the 'User.RevokeSessions.All' scope. The `-UserId` parameter specifies the unique identifier of the target user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Revoke-EntraUserAllRefreshToken.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.RevokeSessions.All'\nRevoke-EntraUserAllRefreshToken -UserId 'SawyerM@contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Update Entra Group Description with PowerShell\nDESCRIPTION: This PowerShell command updates the description of a Microsoft Entra group. It first retrieves the group using Get-EntraGroup based on its display name, then pipes the result to Set-EntraGroup to update the Description property. It depends on the Microsoft Entra PowerShell module and requires appropriate permissions to modify group properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-groups.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraGroup -Filter \"displayName eq 'Contoso marketing'\" | Set-EntraGroup -Description 'Contoso marketing Global'\n```\n\n----------------------------------------\n\nTITLE: Update Partner Support Telephones with TenantId (PowerShell)\nDESCRIPTION: This snippet demonstrates how to update the support telephone numbers for a partner using the Set-EntraBetaPartnerInformation cmdlet, including specifying the TenantId. It requires the 'Organization.ReadWrite.All' scope and updates the PartnerSupportTelephones property.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaPartnerInformation.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.ReadWrite.All'\n$tenantId = (Get-EntraContext).TenantId\nSet-EntraBetaPartnerInformation -PartnerSupportTelephones '234234234' -TenantId $tenantId\n```\n\n----------------------------------------\n\nTITLE: Retrieve Service Principal Memberships - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve the memberships of a service principal using its display name as a filter. It requires connecting to Entra ID with the appropriate scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalMembership.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraServicePrincipalMembership -ServicePrincipalId $servicePrincipal.Id | Select-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Get list of deleted service principals - PowerShell\nDESCRIPTION: This PowerShell script retrieves a list of deleted service principals and displays selected properties (Id, DisplayName, AppId, DeletedDateTime, DeletionAgeInDays, ServicePrincipalType) in a formatted table. It requires the 'Application.Read.All' scope and the Microsoft.Entra.Beta module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedServicePrincipal.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraBetaDeletedServicePrincipal | Select-Object Id, DisplayName, AppId, DeletedDateTime, DeletionAgeInDays, ServicePrincipalType | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Connect to Entra ID using User-Assigned Managed Identity - PowerShell\nDESCRIPTION: This example shows how to connect to Microsoft Entra ID using a user-assigned managed identity. It uses the Connect-Entra cmdlet with the -Identity and -ClientId parameters. Replace 'User_Assigned_Managed_identity_Client_Id' with the client ID of the user-assigned managed identity. Requires the Microsoft Entra PowerShell module, and the Azure resource must have the user-assigned managed identity assigned.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/app-only-access-auth.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Identity -ClientId 'User_Assigned_Managed_identity_Client_Id'\n```\n\n----------------------------------------\n\nTITLE: Create a new Microsoft Entra ID role assignment - PowerShell\nDESCRIPTION: Demonstrates how to create a new role assignment in Microsoft Entra ID. It first connects to Entra using Connect-Entra, retrieves a user and a role definition, and then creates the role assignment using New-EntraDirectoryRoleAssignment, specifying the RoleDefinitionId, PrincipalId, and DirectoryScopeId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraDirectoryRoleAssignment.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory', 'EntitlementManagement.ReadWrite.All'\n$user = Get-EntraUser -UserId 'SawyerM@contoso.com'\n$role = Get-EntraDirectoryRoleDefinition -Filter \"DisplayName eq 'Helpdesk Administrator'\"\nNew-EntraDirectoryRoleAssignment -RoleDefinitionId $role.Id -PrincipalId $user.Id -DirectoryScopeId '/'\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                            PrincipalId                          RoleDefinitionId                     DirectoryScopeId AppScopeId\n--                                            -----------                          ----------------                     ---------------- ----------\nA1bC2dE3fH4iJ5kL6mN7oP8qR9sT0u aaaaaaaa-bbbb-cccc-1111-222222222222 a0a0a0a0-bbbb-cccc-dddd-e1e1e1e1e1e1 /\n```\n\n----------------------------------------\n\nTITLE: Remove a user based on search results\nDESCRIPTION: Removes a user from Microsoft Entra ID after finding them using Get-EntraUser. The pipeline passes the user object to Remove-EntraUser for deletion.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraUser.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nGet-EntraUser -UserId 'SawyerM@Contoso.com' | Remove-EntraUser\n```\n\n----------------------------------------\n\nTITLE: Retrieve users without managers - PowerShell\nDESCRIPTION: This script retrieves users who do not have a manager assigned. It connects to Entra with User.Read.All scope. It retrieves all users, iterates through them, attempts to retrieve the manager for each user. If no manager is found, the user's Id, DisplayName, and UserPrincipalName are captured in a PSCustomObject and formatted as a table at the end.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUser.md#_snippet_14\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\n$allUsers = Get-EntraUser -All\n$usersWithoutManagers = foreach ($user in $allUsers) {\n    $manager = Get-EntraUserManager -ObjectId $user.Id -ErrorAction SilentlyContinue\n    if (-not $manager) {\n        [PSCustomObject]@{\n            Id                = $user.Id\n            DisplayName       = $user.DisplayName\n            UserPrincipalName = $user.UserPrincipalName\n        }\n    }\n}\n$usersWithoutManagers | Format-Table Id, DisplayName, UserPrincipalName -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Assigning a Group to an Application Role - PowerShell\nDESCRIPTION: This example demonstrates how to assign a group of users to an application role in Microsoft Entra ID using `New-EntraBetaGroupAppRoleAssignment`. It first connects to Entra ID, retrieves a service principal and a group, then assigns the group to an application role defined on the service principal.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaGroupAppRoleAssignment.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AppRoleAssignment.ReadWrite.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"Displayname eq 'Box'\"\n$group = Get-EntraBetaGroup -SearchString 'Contoso Global'\nNew-EntraBetaGroupAppRoleAssignment -GroupId $group.Id -PrincipalId $group.Id -ResourceId $servicePrincipal.Id -AppRoleId $servicePrincipal.Approles[1].Id\n```\n\n----------------------------------------\n\nTITLE: Remove Administrative Unit using ID - PowerShell\nDESCRIPTION: This example demonstrates how to remove an administrative unit by first retrieving it using `Get-EntraAdministrativeUnit` with a filter on the display name, and then using `Remove-EntraAdministrativeUnit` with the administrative unit's ID. It requires the 'AdministrativeUnit.ReadWrite.All' scope and the calling principal to have the Privileged Role Administrator role. It connects to Entra ID using `Connect-Entra`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraAdministrativeUnit.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.ReadWrite.All'\n$administrativeUnit = Get-EntraAdministrativeUnit -Filter \"DisplayName eq '<administrative-unit-display-name>'\"\nRemove-EntraAdministrativeUnit -AdministrativeUnitId $administrativeUnit.Id\n```\n\n----------------------------------------\n\nTITLE: Remove Application using Pipelining - PowerShell\nDESCRIPTION: This example demonstrates how to remove an application object using pipelining. It connects to Entra ID with the 'Application.ReadWrite.All' scope, retrieves the application using Get-EntraApplication with a filter on the display name, and then pipes the result to Remove-EntraApplication for deletion. It depends on the Get-EntraApplication cmdlet and requires the 'Application.ReadWrite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraApplication.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All'\nGet-EntraApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\" | Remove-EntraApplication\n```\n\n----------------------------------------\n\nTITLE: Invite User: Specify User Type - PowerShell\nDESCRIPTION: This example demonstrates how to invite a new external user to your directory and specify the type of user to be invited, such as 'Guest'. It utilizes the `New-EntraInvitation` cmdlet with the `-InvitedUserEmailAddress`, `-SendInvitationMessage`, `-InviteRedirectUrl`, and `-InvitedUserType` parameters. The `Connect-Entra` cmdlet is required for authentication.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraInvitation.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Invite.All'\n$emailAddress = 'someexternaluser@externaldomain.com'\n$sendInvitationMessage = $True\n$redirectUrl = 'https://myapps.onmicrosoft.com'\n$userType = 'Guest'\nNew-EntraInvitation -InvitedUserEmailAddress $emailAddress -SendInvitationMessage $sendInvitationMessage -InviteRedirectUrl $redirectUrl -InvitedUserType $userType\n```\n\n----------------------------------------\n\nTITLE: List Disabled Users with Active Licenses - Entra ID - PowerShell\nDESCRIPTION: This example demonstrates how to find disabled users who still have active licenses assigned. It first filters for disabled users and then uses `Where-Object` to find those with assigned licenses.  Requires 'User.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUser.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\n$disabledUsersWithLicenses = Get-EntraUser -Filter \"accountEnabled eq false\" -All | Where-Object {\n    $_.AssignedLicenses -ne $null -and $_.AssignedLicenses.Count -gt 0\n}\n$disabledUsersWithLicenses | Select-Object Id, DisplayName, UserPrincipalName, AccountEnabled | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Create a New Policy\nDESCRIPTION: This example demonstrates how to create a new policy using the New-EntraBetaPolicy cmdlet. It connects to Entra ID, defines a HomeRealmDiscoveryPolicy with AlternateLoginIDLookup enabled, and creates the policy with the specified definition, display name, and type.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaPolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ApplicationConfiguration'\n$definition = @('{\"HomeRealmDiscoveryPolicy\":{\"AlternateLoginIDLookup\":true, \"IncludedUserIds\":[\"UserID\"]}}')\nNew-EntraBetaPolicy -Definition $definition -DisplayName 'NewPolicy' -Type 'HomeRealmDiscoveryPolicy'\n```\n\nLANGUAGE: powershell\nCODE:\n```\nDefinition                                                                     DeletedDateTime Description DisplayName Id                                   IsOrganizationD\n                                                                                                                                                            efault\n----------                                                                     --------------- ----------- ----------- --                                   ---------------\n{{\"HomeReayPolicy\":{\"AlternateLoginIDLookup\":true, \"IncluderIds\":[\"UserID\"]}}}                              NewPolicy aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb False\n```\n\n----------------------------------------\n\nTITLE: Retrieve users with specific license PowerShell\nDESCRIPTION: This PowerShell code retrieves all users assigned a specific license ('DEVELOPERPACK_E5'). It first connects to Entra, retrieves the SkuId for the specified SkuPartNumber, and then filters users based on their assigned licenses. The final output is formatted as a table showing user details.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraSubscribedSku.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All', 'LicenseAssignment.Read.All'\n$sku = Get-EntraSubscribedSku | Where-Object { $_.SkuPartNumber -eq 'DEVELOPERPACK_E5' }\n$skuId = $sku.SkuId\n$usersWithDeveloperPackE5 = Get-EntraUser -All | Where-Object {\n    $_.AssignedLicenses -and ($_.AssignedLicenses.SkuId -contains $skuId)\n}\n$usersWithDeveloperPackE5 | Select-Object Id, DisplayName, UserPrincipalName, AccountEnabled, UserType | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Update User in Domain (Example 1)\nDESCRIPTION: This example demonstrates how to update a user in a domain using the `Update-EntraUserFromFederated` cmdlet. The system automatically generates a new password for the user and returns it. It requires the 'UserAuthenticationMethod.ReadWrite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Update-EntraUserFromFederated.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'UserAuthenticationMethod.ReadWrite.All'\nUpdate-EntraUserFromFederated -UserPrincipalName 'pattifuller@contoso.com'\n```\n\nLANGUAGE: powershell\nCODE:\n```\nName                           Value\n----\nnewPassword                    HuHu8765\n@odata.context                 https://graph.microsoft.com/v1.0/$metadata#microsoft.graph.passwordResetResponse\n```\n\n----------------------------------------\n\nTITLE: Creating Application Proxy App - Timeout and Auth Type - PowerShell\nDESCRIPTION: This example demonstrates how to create a new application with the `ApplicationServerTimeout` and `ExternalAuthenticationType` parameters. It sets the application server timeout to 'Long' and the external authentication type to 'aadPreAuthentication'.  It also connects to Entra with the necessary scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplicationProxyApplication.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\n$params = @{\n    DisplayName = 'Finance Tracker' \n    ExternalUrl = 'https://finance-awcycles.msappproxy.net/' \n    InternalUrl = 'http://finance/'\n    ApplicationServerTimeout = Long  \n    ExternalAuthenticationType = 'aadPreAuthentication'\n}\nNew-EntraBetaApplicationProxyApplication @params\n```\n\n----------------------------------------\n\nTITLE: Add Registered User to Entra Device - PowerShell\nDESCRIPTION: This PowerShell snippet adds a registered user to a Microsoft Entra device using the `Add-EntraBetaDeviceRegisteredUser` cmdlet. It requires the DeviceId and UserId of the device and user, respectively.  The signed-in user must have a supported Microsoft Entra role or a custom role with the required permissions, such as Intune Administrator or Windows 365 Administrator. Requires the Microsoft.Entra.Beta module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaDeviceRegisteredUser.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-EntraBetaDeviceRegisteredUser\n -DeviceId <String>\n -UserId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Filter Sign-In Detailed Summary by App and Date - PowerShell\nDESCRIPTION: This example shows how to filter sign-in summaries by application display name and date using the -Filter parameter of the Get-EntraBetaApplicationSignInDetailedSummary cmdlet.  It connects to Entra ID with the necessary scopes and then filters the results to only include sign-ins for 'Azure Portal' within a specified date range.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationSignInDetailedSummary.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Reports.Read.All'\nGet-EntraBetaApplicationSignInDetailedSummary -Filter \"appDisplayName eq 'Azure Portal' AND aggregatedEventDateTime gt 2024-10-20 AND aggregatedEventDateTime lt 2024-10-22\"\n```\n\n----------------------------------------\n\nTITLE: Renew a Group - PowerShell\nDESCRIPTION: This example demonstrates how to renew a group using the Reset-EntraBetaLifeCycleGroup cmdlet. It first connects to Entra ID with the necessary scopes, then retrieves the group by its display name, and finally renews the group using its ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Reset-EntraBetaLifeCycleGroup.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All'\n$group = Get-EntraBetaGroup -Filter \"DisplayName eq 'Sales and Marketing'\"\nReset-EntraBetaLifeCycleGroup -GroupId $group.Id\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Application Properties\nDESCRIPTION: This example shows how to update the display name of an application using `Set-EntraApplication`. It first retrieves the application object using `Get-EntraApplication` based on its display name and then updates the `DisplayName` property. The `Application.ReadWrite.All` scope is required.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-apps.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All'\n$application = Get-EntraApplication -Filter \"DisplayName eq 'My new application'\"\nSet-EntraApplication -ApplicationId $application.Id -DisplayName 'Contoso application'\n```\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All'\nGet-EntraApplication -Filter \"DisplayName eq 'My new application'\" | Set-EntraApplication -DisplayName 'Contoso application'\n```\n\n----------------------------------------\n\nTITLE: Example of Getting Domain Federation Settings PowerShell\nDESCRIPTION: This example shows how to retrieve federation settings for a specific domain using the Get-EntraDomainFederationSettings cmdlet. It first connects to Entra ID using Connect-Entra with the 'Domain.Read.All' scope, and then retrieves the federation settings for 'contoso.com'.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDomainFederationSettings.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Domain.Read.All'\nGet-EntraDomainFederationSettings -DomainName 'contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Create User with Department\nDESCRIPTION: This example shows how to create a new user and set the Department property. It connects to Entra using Connect-Entra, creates a PasswordProfile object, and then creates a new user via New-EntraBetaUser, setting DisplayName, PasswordProfile, UserPrincipalName, AccountEnabled, MailNickName, and Department. Requires User.ReadWrite.All scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaUser.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\n$passwordProfile = New-Object -TypeName Microsoft.Open.AzureAD.Model.PasswordProfile\n$passwordProfile.Password = '<Password>'\n$params = @{\n    DisplayName = 'New User'\n    PasswordProfile = $passwordProfile\n    UserPrincipalName = 'NewUser@contoso.com'\n    AccountEnabled = $true\n    MailNickName = 'Newuser'\n    Department = 'IT'\n}\n\nNew-EntraBetaUser @params\n```\n\nLANGUAGE: powershell\nCODE:\n```\nDisplayName Id                                   Mail UserPrincipalName\n----------- --                                   ---- -----------------\nNew User 00aa00aa-bb11-cc22-dd33-44ee44ee44ee      NewUser@contoso.com\n```\n\n----------------------------------------\n\nTITLE: Add Key Credential to Application\nDESCRIPTION: Demonstrates how to add a key credential to an Entra ID application using the New-EntraApplicationKey cmdlet.  It connects to Entra ID, retrieves an application, constructs parameters including KeyCredential, PasswordCredential and Proof, and then executes New-EntraApplicationKey. The base64 encoded certificate and a signed JWT token are required.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplicationKey.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraApplication -Filter \"DisplayName eq '<application-display-name>'\"\n$params = @{\n    ApplicationId = $application.Id\n    KeyCredential = @{ key=[System.Convert]::FromBase64String('{base64cert}') }\n    PasswordCredential = @{ DisplayName = 'mypassword' }\n    Proof = '{token}'\n}\n\nNew-EntraApplicationKey @params\n```\n\n----------------------------------------\n\nTITLE: Search for Exact Match Permissions - PowerShell\nDESCRIPTION: This example demonstrates searching for permissions that exactly match the string 'User.Read.All' using the `-SearchString` and `-ExactMatch` parameters with `Find-EntraPermission`. The output displays the matching Delegated and Application permission types with their details.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Find-EntraPermission.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nFind-EntraPermission -SearchString 'User.Read.All' -ExactMatch\n```\n\n----------------------------------------\n\nTITLE: Retrieve User Extension Attributes - PowerShell\nDESCRIPTION: This example shows how to retrieve the extension attributes for a specific user. It first connects to Entra ID using `Connect-Entra` with the 'User.Read' scope. Then, it calls `Get-EntraUserExtension` with the `-UserId` parameter to specify the user to retrieve the extension attributes from.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserExtension.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read'\nGet-EntraUserExtension -UserId 'SawyerM@contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Get Directory Objects by ID - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve directory objects using the `Get-EntraBetaDirectoryObject` cmdlet by specifying a list of object IDs. It first connects to Entra using `Connect-Entra`, retrieves a limited number of groups, and then uses their IDs to fetch the corresponding directory objects.  It selects and displays the Id, DisplayName and '@odata.type' properties. Requires the 'Directory.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirectoryObject.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\n$groups = Get-EntraBetaGroup -Limit 4\nGet-EntraBetaDirectoryObject -DirectoryObjectIds $groups.Id |\nSelect-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Creating IP Named Location Policy in Entra ID (PowerShell)\nDESCRIPTION: This example demonstrates how to create a new IP named location policy in Microsoft Entra ID using the New-EntraNamedLocationPolicy cmdlet. It requires the 'Policy.ReadWrite.ConditionalAccess' scope and utilizes the Microsoft.Open.MSGraph.Model.IpRange object to define the IP range.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraNamedLocationPolicy.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ConditionalAccess'\n$ipRanges = New-Object -TypeName Microsoft.Open.MSGraph.Model.IpRange\n$ipRanges.cidrAddress = '6.5.4.3/32'\n$type = '#microsoft.graph.ipNamedLocation'\nNew-EntraNamedLocationPolicy -OdataType $type -DisplayName 'IP named location policy' -IsTrusted $false -IpRanges $ipRanges\n```\n\n----------------------------------------\n\nTITLE: Setting Technical Notification Emails in PowerShell\nDESCRIPTION: This PowerShell snippet illustrates how to set the technical notification emails for an Entra tenant using the `Set-EntraTenantDetail` cmdlet. It requires the 'Organization.ReadWrite.All' scope. The script connects to Entra ID and subsequently uses the cmdlet with the `-TechnicalNotificationMails` parameter to specify the email address.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraTenantDetail.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.ReadWrite.All'\nSet-EntraTenantDetail -TechnicalNotificationMails 'peter@contoso.com'\n```\n\n----------------------------------------\n\nTITLE: List Users Without Manager - Microsoft Entra ID - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a list of users without managers in Microsoft Entra ID. It first retrieves all users, then iterates through each user, attempting to retrieve their manager. If no manager is found, the user's properties are added to a custom object and displayed in a formatted table.  Requires the Microsoft.Entra module and sufficient permissions to read all users.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserManager.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\n$allUsers = Get-EntraUser -All\n$usersWithoutManagers = foreach ($user in $allUsers) {\n    $manager = Get-EntraUserManager -UserId $user.Id -ErrorAction SilentlyContinue\n    if (-not $manager) {\n        [PSCustomObject]@{\n            Id                = $user.Id\n            DisplayName       = $user.DisplayName\n            UserPrincipalName = $user.UserPrincipalName\n            UserType          = $user.userType\n            AccountEnabled    = $user.accountEnabled\n            CreatedDateTime   = $user.createdDateTime\n        }\n    }\n}\n$usersWithoutManagers | Format-Table Id, DisplayName, UserPrincipalName, CreatedDateTime, UserType, AccountEnabled  -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Create Application with IdentifierUris\nDESCRIPTION: This example shows how to create an application with a specific IdentifierUri. The IdentifierUri is a unique URI that identifies the application within the Azure AD tenant. It requires the Application.ReadWrite.All and Application.ReadWrite.OwnedBy scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplication.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\nNew-EntraApplication -DisplayName 'My new application' -IdentifierUris 'https://mynewapp.contoso.com'\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDisplayName Id                                   AppId                                SignInAudience PublisherDomain\n----------- --                                   -----                                -------------- ---------------\nMy new application       dddd3333-ee44-5555-66ff-777777aaaaaa 22223333-cccc-4444-dddd-5555eeee6666 AzureADMyOrg   contoso.com\n```\n\n----------------------------------------\n\nTITLE: Update Domain Federation URIs - Entra ID (Beta)\nDESCRIPTION: This snippet demonstrates how to update multiple domain federation URI settings for a given domain using the Set-EntraBetaDomainFederationSettings cmdlet. It uses a hashtable to pass the parameters, including DomainName, LogOffUri, PassiveLogOnUri, ActiveLogOnUri, IssuerUri, and MetadataExchangeUri. It first connects to Entra ID with the 'Domain.ReadWrite.All' scope. It requires the Microsoft.Entra.Beta module to be installed and the user to have appropriate permissions.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaDomainFederationSettings.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Domain.ReadWrite.All'\n\n$params = @{\n    DomainName = 'contoso.com'\n    LogOffUri = 'https://adfs1.entra.lab/adfs/'\n    PassiveLogOnUri = 'https://adfs1.entra.lab/adfs/'\n    ActiveLogOnUri = 'https://adfs1.entra.lab/adfs/services/trust/2005/'\n    IssuerUri = 'http://adfs1.entra.lab/adfs/services/'\n    MetadataExchangeUri = 'https://adfs1.entra.lab/adfs/services/trust/'\n}\nSet-EntraBetaDomainFederationSettings @params\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Groups Filtered by Display Name\nDESCRIPTION: This PowerShell script retrieves deleted groups filtered by display name. It connects to Entra ID with the necessary scopes and then uses `Get-EntraBetaDeletedGroup` with the `-Filter` parameter and an OData filter to find groups with a display name of 'Contoso Group'.  It selects specific properties and formats the output as a table. It requires the 'Group.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedGroup.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Group.Read.All'\nGet-EntraBetaDeletedGroup -Filter \"displayName eq 'Contoso Group'\" | Select-Object Id, DisplayName, MailNickname, GroupTypes, DeletedDateTime, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Renew a Group - PowerShell\nDESCRIPTION: This example demonstrates how to renew a group using the `Reset-EntraLifeCycleGroup` cmdlet. It first connects to Entra ID with the `Group.ReadWrite.All` scope. It then retrieves a group by its display name and renews it using the group's ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Reset-EntraLifeCycleGroup.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All'\n$group = Get-EntraGroup -Filter \"DisplayName eq 'Sales and Marketing'\"\nReset-EntraLifeCycleGroup -Id $group.Id\n```\n\n----------------------------------------\n\nTITLE: Retrieve All Object Settings - Example 4 - PowerShell\nDESCRIPTION: Retrieves all object settings from Microsoft Entra ID. Connects to Entra ID, retrieves a group using Get-EntraGroup and then retrieves all the object settings associated with the group using the -All parameter of the Get-EntraObjectSetting cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraObjectSetting.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\n$group = Get-EntraGroup -Filter \"DisplayName eq 'Sales and Marketing'\"\nGet-EntraObjectSetting -TargetType 'Groups' -TargetObjectId $group.Id -All\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId                                   DisplayName         TemplateId\n--                                   -----------         ----------\naaaaaaaa-0000-1111-2222-bbbbbbbbbbbb Group.Unified.Guest 22cc22cc-dd33-ee44-ff55-66aa66aa66aa\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Security Attribute Definition Allowed Value - PowerShell\nDESCRIPTION: This PowerShell script adds a predefined value to an existing custom security attribute definition within Microsoft Entra ID. It first connects to Entra ID using the specified scopes, retrieves the custom security attribute definition, and then adds the allowed value using the Add-EntraCustomSecurityAttributeDefinitionAllowedValue cmdlet. The script requires the CustomSecAttributeDefinition.ReadWrite.All scope and a valid custom security attribute definition name.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Add-EntraCustomSecurityAttributeDefinitionAllowedValue.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'CustomSecAttributeDefinition.ReadWrite.All'\n$attributeDefinition = Get-EntraCustomSecurityAttributeDefinition | Where-Object {$_.Name -eq 'Engineering'}\nAdd-EntraCustomSecurityAttributeDefinitionAllowedValue -CustomSecurityAttributeDefinitionId $attributeDefinition.Id -Id 'Alpine' -IsActive $true\n```\n\n----------------------------------------\n\nTITLE: Update Delegated Permission Grant Scope - PowerShell\nDESCRIPTION: This example demonstrates how to update the scope of a delegated permission grant using the Update-EntraBetaOauth2PermissionGrant cmdlet. It first connects to Entra ID, retrieves the service principal and permission grant, and then updates the scope. Requires the 'DelegatedPermissionGrant.ReadWrite.All' scope to be granted.  It assumes a service principal named 'My application' exists and an initial scope of 'Directory.Read.All' is already granted.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Update-EntraBetaOauth2PermissionGrant.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'DelegatedPermissionGrant.ReadWrite.All'\n$clientServicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'My application'\"\n$permissionGrant = Get-EntraBetaOAuth2PermissionGrant | Where-Object {$_.ClientId -eq $clientServicePrincipal.Id -and $_.Scope -eq 'Directory.Read.All'}\nUpdate-EntraBetaOauth2PermissionGrant -OAuth2PermissionGrantId $permissionGrant.Id -Scope 'Directory.Read.All User.Read.All'\n```\n\n----------------------------------------\n\nTITLE: Required Resource Access Definition (YAML)\nDESCRIPTION: Defines the resources an application requires access to, including OAuth permission scopes and application roles for each resource.  This configuration drives the consent experience for users. The data type is a generic list of `Microsoft.Open.MSGraph.Model.RequiredResourceAccess` objects.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraApplication.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.RequiredResourceAccess]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get subscriptions with filtering\nDESCRIPTION: This example demonstrates how to filter commercial subscriptions based on their ID. It connects to Entra with the appropriate scope and then uses Get-EntraSubscription with the -Filter parameter, specifying an OData filter expression to match the 'id' property. The output displays the details of the subscription that matches the specified ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraSubscription.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All'\nGet-EntraSubscription -Filter \"id eq 'aaaa0000-bb11-2222-33cc-444444dddddd'\"\n```\n\n----------------------------------------\n\nTITLE: Restoring Soft-Deleted Applications using Restore-EntraDeletedDirectoryObject in PowerShell\nDESCRIPTION: This snippet shows how to restore a soft-deleted application using the `Restore-EntraDeletedDirectoryObject` cmdlet with the `-Id` parameter. The snippet also demonstrates restoring an application by piping output from `Get-EntraDeletedApplication`. Requires `Application.ReadWrite.All` scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/recover-deleted-data.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All' \nRestore-EntraDeletedDirectoryObject -Id 'aaaaaaaa-bbbb-cccc-1111-222222222222'\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All' \nGet-EntraDeletedApplication -Filter \"displayName eq 'TestApp1'\" | Restore-EntraDeletedDirectoryObject\n```\n\n----------------------------------------\n\nTITLE: New-EntraUserAppRoleAssignment Syntax - PowerShell\nDESCRIPTION: This section defines the syntax for the New-EntraUserAppRoleAssignment cmdlet. It takes parameters such as UserId, PrincipalId, AppRoleId, and ResourceId to assign a user to an application role. It supports common parameters for debugging and error handling.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraUserAppRoleAssignment.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-EntraUserAppRoleAssignment\n -UserId <String>\n -PrincipalId <String>\n -AppRoleId <String>\n -ResourceId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove Group Member Example - PowerShell\nDESCRIPTION: This example shows how to remove a specific member from a specified group using Remove-EntraGroupMember in PowerShell. It first connects to Entra with the required scopes, retrieves the group and member objects, and then removes the member using the cmdlet with the group and member IDs.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraGroupMember.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.ReadWrite.All'\n$group = Get-EntraGroup -Filter \"DisplayName eq 'HelpDesk Team Leaders'\"\n$groupMember = Get-EntraGroup -GroupId $group.Id | Get-EntraGroupMember | Where-Object {$_.displayName -eq 'Adele Vance'}\nRemove-EntraGroupMember -GroupId $group.Id -MemberId $groupMember.Id\n```\n\n----------------------------------------\n\nTITLE: Remove Identity Provider Example - PowerShell\nDESCRIPTION: Demonstrates how to remove an identity provider using the Remove-EntraBetaIdentityProvider cmdlet.  It connects to Entra ID using Connect-Entra and then removes the identity provider specified by its ID. Requires the 'IdentityProvider.ReadWrite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaIdentityProvider.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'IdentityProvider.ReadWrite.All'\nRemove-EntraBetaIdentityProvider -IdentityProviderBaseId 'LinkedIn-OAUTH'\n```\n\n----------------------------------------\n\nTITLE: Get Administrative Unit Member by ID - PowerShell\nDESCRIPTION: This PowerShell script retrieves an administrative unit member by specifying the AdministrativeUnitId. It first connects to Entra with necessary scopes and retrieves the administrative unit. Then, it retrieves the member based on the administrative unit ID and selects specific properties for output.  It requires the Microsoft.Entra.Beta module and AdministrativeUnit.ReadWrite.All scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAdministrativeUnitMember.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.ReadWrite.All'\n$administrativeUnit = Get-EntraBetaAdministrativeUnit -Filter \"DisplayName eq '<administrativeunit-display-name>'\"\nGet-EntraBetaAdministrativeUnitMember -AdministrativeUnitId $administrativeUnit.Id |\nSelect-Object Id, DisplayName, '@odata.type', createdDateTime\n```\n\n----------------------------------------\n\nTITLE: Update Permission Grant Policy Description - PowerShell\nDESCRIPTION: This example demonstrates how to update the description of a specified permission grant policy using the Set-EntraPermissionGrantPolicy command. It first connects to Entra with the required scopes, retrieves the policy based on its display name, and then updates its description using the policy ID.  Requires the 'Policy.ReadWrite.PermissionGrant' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraPermissionGrantPolicy.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.PermissionGrant'\n$policy = Get-EntraPermissionGrantPolicy | Where-Object { $_.DisplayName -eq 'Microsoft User Default Recommended Policy' }\nSet-EntraPermissionGrantPolicy -Id $policy.Id -Description 'Updated description'\n```\n\n----------------------------------------\n\nTITLE: Retrieve Top App Role Assignments of a Group - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a limited number of application role assignments for a specific group using the `-Top` parameter.  It requires connecting to Entra with the necessary scope and fetching the group object before calling the cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraGroupAppRoleAssignment.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\n$group = Get-EntraGroup -SearchString 'Contoso marketing'\nGet-EntraGroupAppRoleAssignment -GroupId $group.Id -Top 2\n```\n\nLANGUAGE: powershell\nCODE:\n```\nObjectId                                    ResourceDisplayName                 PrincipalDisplayName\n--------                                    -------------------                 --------------------\nMSVrBV4APk--eAGnHqMKBLflsQG3rU1EmDFKvgra41I Microsoft Device Management Checkin Ask HR\nMSVrBV4APk--eAGnHqMKBExhQK4StEFHidLvUymzo4I ProvisioningPowerBi                 Ask HR\n```\n\n----------------------------------------\n\nTITLE: Get App Role Assignments for Service Principal - PowerShell\nDESCRIPTION: This example retrieves the app role assignments for a given service principal, granted to users, groups, and other service principals. It requires the 'Application.Read.All' scope. First, it connects to Entra ID and retrieves the service principal ID based on its display name. Then it uses the Get-EntraServicePrincipalAppRoleAssignedTo cmdlet to get the role assignments.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalAppRoleAssignedTo.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraServicePrincipalAppRoleAssignedTo -ServicePrincipalId $servicePrincipal.Id\n```\n\n----------------------------------------\n\nTITLE: Assigning a License to a User (PowerShell)\nDESCRIPTION: This PowerShell snippet demonstrates how to assign a license to a user in Microsoft Entra ID. It connects to Entra ID with `User.ReadWrite.All` scopes, retrieves user details, defines the license plan, and assigns the license using `Set-EntraUserLicense`. It uses `New-Object` to create objects of type `Microsoft.Open.AzureAD.Model.AssignedLicense` and `Microsoft.Open.AzureAD.Model.AssignedLicenses`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/how-to-manage-user-licenses.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n# Connect to Entra\nConnect-Entra -Scopes 'User.ReadWrite.All'\n\n# Get user details\n$user = Get-EntraUser -UserId 'AljosaH@Contoso.com'\n\n# Define the license plan to assign to the user\n$license = New-Object -TypeName Microsoft.Open.AzureAD.Model.AssignedLicense\n$license.SkuId = (Get-EntraSubscribedSku | Where-Object { $_.SkuPartNumber -eq 'AAD_PREMIUM_P2' }).SkuId\n\n$licenses = New-Object -TypeName Microsoft.Open.AzureAD.Model.AssignedLicenses\n$licenses.AddLicenses = $license\n\n# Assign the license to the user\nSet-EntraUserLicense -UserId $user.Id -AssignedLicenses $licenses\n```\n\n----------------------------------------\n\nTITLE: Disable Stale Devices - PowerShell\nDESCRIPTION: This PowerShell script connects to Microsoft Entra ID, identifies stale devices that haven't signed in for the last 6 months using the `ApproximateLastSignInDateTime`, and disables them by setting the `AccountEnabled` property to `$false`. It requires 'Device.ReadWrite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-stale-devices.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.ReadWrite.All'  \n  \n$dt = (Get-Date).AddMonths(-6) # Devices not signed in for the last 6 months  \n\nGet-EntraDevice -All | \nWhere-Object {\n    $_.ApproximateLastSignInDateTime -le $dt\n} | \nSet-EntraDevice -AccountEnabled $false\n```\n\n----------------------------------------\n\nTITLE: Update User in Domain - Example 1\nDESCRIPTION: This example demonstrates updating a user in a domain after a conversion from federated authentication. It uses Connect-Entra to connect with the required scopes and then calls Update-EntraBetaUserFromFederated with the user's principal name. The system generates a new password, which is then returned.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Update-EntraBetaUserFromFederated.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'UserAuthenticationMethod.ReadWrite.All'\nUpdate-EntraBetaUserFromFederated -UserPrincipalName 'pattifuller@contoso.com'\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nName                           Value\n----\t                           -----\nnewPassword                    HuHu8765\n@odata.context                 https://graph.microsoft.com/beta/$metadata#microsoft.graph.passwordResetResponse\n```\n\n----------------------------------------\n\nTITLE: Add Registered User to Device - PowerShell\nDESCRIPTION: This PowerShell code snippet demonstrates how to add a registered user to a specific device in Microsoft Entra ID. It first connects to Entra ID, retrieves the user and device objects by their IDs, and then uses the `Add-EntraDeviceRegisteredUser` cmdlet to register the user to the device. The signed-in user must have appropriate permissions, such as Intune Administrator or Windows 365 Administrator.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Add-EntraDeviceRegisteredUser.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-EntraDeviceRegisteredUser\n -DeviceId <String>\n -UserId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Restore Deleted Application Example - PowerShell\nDESCRIPTION: This example demonstrates how to restore a previously deleted application using the Restore-EntraBetaDeletedApplication cmdlet. It first connects to Entra ID with the required scopes, retrieves the deleted application using Get-EntraBetaDeletedApplication, and then restores it using the ApplicationId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Restore-EntraBetaDeletedApplication.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All'\n$deletedApplication = Get-EntraBetaDeletedApplication -SearchString 'My PowerShell Application'\nRestore-EntraBetaDeletedApplication -ApplicationId $deletedApplication.Id\n```\n\n----------------------------------------\n\nTITLE: Restore Service Principal by Display Name - PowerShell\nDESCRIPTION: This snippet restores a soft-deleted service principal in Microsoft Entra ID using its display name. It connects to Entra ID with the 'Application.ReadWrite.All' scope, uses 'Get-EntraDeletedServicePrincipal' to find the service principal by its display name, and then pipes the result to 'Restore-EntraDeletedDirectoryObject' to restore it.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/recover-deleted-data.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All' \nGet-EntraDeletedServicePrincipal -Filter \"displayName eq 'Contoso Fieldglass'\" | Restore-EntraDeletedDirectoryObject\n```\n\n----------------------------------------\n\nTITLE: Get Sync Errors with Filtering\nDESCRIPTION: This example retrieves directory synchronization errors and filters the results based on the 'propertyCausingError' attribute. It shows errors related to a specific property. It connects to Entra with Connect-Entra, gets the provisioning errors with Get-EntraDirectoryObjectOnPremisesProvisioningError, and filters based on `propertyCausingError` equals to `UserPrincipalName`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDirectoryObjectOnPremisesProvisioningError.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All', 'Directory.Read.All', 'Group.Read.All', 'Contacts.Read'\nGet-EntraDirectoryObjectOnPremisesProvisioningError | where-Object propertyCausingError -eq 'UserPrincipalName' | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get Device by ID - PowerShell\nDESCRIPTION: Connects to Entra ID and retrieves a device by its object ID, first finding the device by its display name. Requires the Microsoft.Entra module and the 'Device.Read.All' scope. This example showcases retrieving device details based on a known object ID retrieved from a prior search.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDevice.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\n$device = Get-EntraDevice -SearchString '<device-display-name>'\nGet-EntraDevice -ObjectId $device.ObjectId\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDeletedDateTime Id                                   AccountEnabled ApproximateLastSignInDateTime ComplianceExpirationDateTime DeviceCategory DeviceId                             DeviceMetadata DeviceOwnership\n--------------- --                                   -------------- ----------------------------- ---------------------------- -------------- --------                             -------------- ---------------\n                bbbbbbbb-1111-2222-3333-cccccccccccc True                                                                                     eeeeeeee-4444-5555-6666-ffffffffffff MetaData\n```\n\n----------------------------------------\n\nTITLE: Remove Group from Feature Rollout Policy (PowerShell)\nDESCRIPTION: This PowerShell code snippet demonstrates how to remove a group from a cloud authentication rollout policy in Microsoft Entra ID.  It first connects to Entra ID, retrieves the desired policy and group, and then uses `Remove-EntraFeatureRolloutPolicyDirectoryObject` to remove the group from the policy. The `-FeatureRolloutPolicyId` parameter specifies the policy's ID, and the `-DirectoryObjectId` parameter specifies the group's ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraFeatureRolloutPolicyDirectoryObject.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\n$policy = Get-EntraFeatureRolloutPolicy -Filter \"displayName eq 'MFA Rollout Policy'\"\n$group = Get-EntraGroup -Filter \"displayName eq 'Sales and Marketing'\"\nRemove-EntraFeatureRolloutPolicyDirectoryObject -FeatureRolloutPolicyId $policy.Id  -DirectoryObjectId $group.Id\n```\n\n----------------------------------------\n\nTITLE: Setting RequiredResourceAccess Parameter\nDESCRIPTION: This parameter specifies resources that this application needs access to and the set of OAuth permission scopes and application roles required for each resource.  This configuration drives the consent experience for users.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplication.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.RequiredResourceAccess]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get All Audit Logs - PowerShell\nDESCRIPTION: This code snippet demonstrates how to retrieve all audit logs from Microsoft Entra ID using the `Get-EntraAuditDirectoryLog` cmdlet with the `-All` parameter. It first establishes a connection to Entra ID with the necessary scopes for reading audit logs and directory information. No specific inputs are required beyond the Entra ID connection.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAuditDirectoryLog.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All, Directory.Read.All'\nGet-EntraAuditDirectoryLog -All\n```\n\n----------------------------------------\n\nTITLE: Get All Administrative Units for a User\nDESCRIPTION: This example demonstrates how to retrieve all administrative units to which a specific user belongs using the -All parameter.  It requires the 'AdministrativeUnit.Read.All' scope, and the -UserId specifies the user to retrieve the administrative units from.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserAdministrativeUnit.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.Read.All'\nGet-EntraBetaUserAdministrativeUnit -UserId 'SawyerM@contoso.com' -All\n```\n\n----------------------------------------\n\nTITLE: Create Application Key Credential - Symmetric Key - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to create a new application key credential using a symmetric key. It retrieves an application by its display name, defines parameters including ApplicationId, CustomKeyIdentifier, StartDate, Type, Usage, and Value, and then uses the New-EntraBetaApplicationKeyCredential cmdlet to create the credential. It requires the 'Application.ReadWrite.All' and 'Application.ReadWrite.OwnedBy' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplicationKeyCredential.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraBetaApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\n$params = @{\n    ApplicationId = $application.Id\n    CustomKeyIdentifier = 'EntraPowerShellKey'\n    StartDate = '2024-03-21T14:14:14Z'\n    Type = 'Symmetric'\n    Usage = 'Sign'\n    Value = '<my-value>'\n}\nNew-EntraBetaApplicationKeyCredential @params\n```\n\n----------------------------------------\n\nTITLE: Set Tenant Contact Details using Parameters - PowerShell\nDESCRIPTION: This example demonstrates how to set marketing, security compliance (email and phone), and technical notification details for a tenant using the `Set-EntraBetaTenantDetail` cmdlet.  It connects to Entra ID with the 'Organization.ReadWrite.All' scope and then utilizes a hashtable to pass the parameter values.  Requires the Microsoft.Entra.Beta module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaTenantDetail.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.ReadWrite.All'\n$params = @{\n    MarketingNotificationEmails = @('amy@contoso.com', 'henry@contoso.com')\n    SecurityComplianceNotificationMails = @('john@contoso.com', 'mary@contoso.com')\n    SecurityComplianceNotificationPhones = @('1-555-625-9999', '1-555-233-5544')\n    TechnicalNotificationMails = 'peter@contoso.com'\n}\n\nSet-EntraBetaTenantDetail @params\n```\n\n----------------------------------------\n\nTITLE: Retrieve Application Proxy Connector by ID - PowerShell\nDESCRIPTION: This PowerShell snippet connects to Entra ID and retrieves a specific Application Proxy connector by its ID using the `-OnPremisesPublishingProfileId` parameter.  The `OnPremisesPublishingProfileId` parameter takes the connector's unique identifier as input.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationProxyConnector.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\nGet-EntraBetaApplicationProxyConnector -OnPremisesPublishingProfileId 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb'\n```\n\n----------------------------------------\n\nTITLE: Get User Memberships - Entra ID - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve user memberships in Microsoft Entra ID for a specific user.  It connects to Entra ID with the User.Read scope, then uses the Get-EntraBetaUserMembership cmdlet to retrieve the memberships of the user specified by the UserId parameter. The output is then formatted to display specific properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserMembership.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read'\nGet-EntraBetaUserMembership -UserId 'SawyerM@contoso.com' |\nSelect-Object Id, displayName, createdDateTime, '@odata.type' |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Create a New Entra Application - PowerShell\nDESCRIPTION: This command creates a new application within Microsoft Entra ID with the display name 'My application'. The output is then formatted to display the Id, DisplayName, AppId, SignInAudience, and PublisherDomain properties of the newly created application. This is the first step in creating a service principal to grant permissions to.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/how-to-grant-revoke-api-permissions.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-EntraApplication -DisplayName 'My application' |\n  Format-List Id, DisplayName, AppId, SignInAudience, PublisherDomain\n```\n\n----------------------------------------\n\nTITLE: Set User Extension - Single Value - PowerShell\nDESCRIPTION: This snippet demonstrates how to set the value of a single extension attribute for a user using the Set-EntraBetaUserExtension cmdlet.  It requires the User.ReadWrite.All scope and specifies the UserId, ExtensionName, and ExtensionValue parameters.  The extension name can be retrieved using Get-EntraBetaApplicationExtensionProperty.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUserExtension.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\n$extensionName = 'extension_e5e29b8a85d941eab8d12162bd004528_JobGroup'\n$extensionValue = 'Job Group D'\nSet-EntraBetaUserExtension -UserId 'SawyerM@contoso.com' -ExtensionName $extensionName -ExtensionValue $extensionValue\n```\n\n----------------------------------------\n\nTITLE: Get Specific Role Template - Entra ID PowerShell\nDESCRIPTION: This example shows how to retrieve a specific role template (Helpdesk Administrator) from Microsoft Entra ID. It connects to Entra ID using Connect-Entra and then uses Get-EntraDirectoryRoleTemplate in conjunction with Where-Object to filter the results based on the DisplayName property.  The output displays properties such as DeletedDateTime, Id, Description, and DisplayName of the matched role template.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDirectoryRoleTemplate.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory'\nGet-EntraDirectoryRoleTemplate | Where-Object {$_.DisplayName -eq 'Helpdesk Administrator'}\n```\n\n----------------------------------------\n\nTITLE: Search Users - Entra ID - PowerShell\nDESCRIPTION: This example demonstrates how to search for users in Microsoft Entra ID based on a search string. The search is performed against the DisplayName or UserPrincipalName. A connection to Entra ID with the 'User.Read.All' scope is required. The `-SearchString` parameter specifies the search term.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUser.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraUser -SearchString 'New'\n```\n\n----------------------------------------\n\nTITLE: Assigning Licenses by Copying From Another User (PowerShell)\nDESCRIPTION: This PowerShell script assigns licenses to a target user by copying the licenses from an existing user. It iterates through the licenses of the source user and assigns each license to the target user, requiring the `User.ReadWrite.All` scope. It connects to Entra, retrieves user objects, and then iterates through the licenses to assign them.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/how-to-manage-user-licenses.md#_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\n# Connect to Entra\nConnect-Entra -Scopes 'User.ReadWrite.All'\n\n# Define the source and target users\n$licensedUser = Get-EntraUser -UserId 'AljosaH@Contoso.com'\n$targetUser = Get-EntraUser -UserId 'PalameeC@Contoso.com' \n\n# Retrieve the source user and their licenses\n$sourceUserLicenses = $licensedUser.AssignedLicenses\n\n# Create license assignment objects for each license and assign them to the target user\n$licensesToAssign = New-Object -TypeName Microsoft.Open.AzureAD.Model.AssignedLicenses \nforeach ($license in $sourceUserLicenses) {\n    $assignedLicense = New-Object -TypeName Microsoft.Open.AzureAD.Model.AssignedLicense\n    $assignedLicense.SkuId = $license.SkuId\n    $licensesToAssign.AddLicenses= $assignedLicense\n    Set-EntraUserLicense -UserId $targetUser.Id -AssignedLicenses $licensesToAssign\n}\n```\n\n----------------------------------------\n\nTITLE: Update Service Principal Logout and Reply URLs - PowerShell\nDESCRIPTION: This example shows how to update the LogoutUrl and ReplyUrls of a service principal using the Set-EntraBetaServicePrincipal cmdlet. It connects to Entra ID, retrieves a service principal by its display name, and then updates its logout and reply URLs.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaServicePrincipal.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\n$logoutUrl = 'https://securescore.office.com/SignOut'\n$replyUrls = 'https://admin.contoso.com'\nSet-EntraBetaServicePrincipal -ServicePrincipalId $servicePrincipal.Id -LogoutUrl $logoutUrl -ReplyUrls $replyUrls\n```\n\n----------------------------------------\n\nTITLE: Listing Users with Global Administrator Role (PowerShell)\nDESCRIPTION: This snippet demonstrates how to retrieve and list all users who have the Global Administrator role assigned to them in Entra ID.  It retrieves the role ID for the 'Global Administrator' role template, then retrieves the role assignments for that role, and finally retrieves the user information for each assigned user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUser.md#_snippet_17\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All', 'RoleManagement.Read.Directory'\n$roleId = Get-EntraBetaDirectoryRoleTemplate | Where-Object { $_.DisplayName -eq 'Global Administrator' } | Select-Object -ExpandProperty Id\n$globalAdmins = Get-EntraBetaDirectoryRoleAssignment -Filter \"roleDefinitionId eq '$roleId'\" | ForEach-Object {\n    Get-EntraBetaUser -UserId $_.PrincipalId\n}\n$globalAdmins | Select-Object Id, DisplayName, UserPrincipalName, CreatedDateTime, AccountEnabled | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get Top Two Deleted Users - PowerShell\nDESCRIPTION: This example retrieves the top two recoverable deleted users in the directory using the `-Top` parameter.  It displays selected properties (Id, UserPrincipalName, DisplayName, AccountEnabled, DeletedDateTime, DeletionAgeInDays, UserType) in a formatted table. `-Limit` can be used as an alias for `-Top`. Requires a connection established with Connect-Entra using the 'User.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedUser.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraDeletedUser -Top 2 | Select-Object Id, UserPrincipalName, DisplayName, AccountEnabled, DeletedDateTime, DeletionAgeInDays, UserType | Format-Table -AutoSize\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                   UserPrincipalName                                              DisplayName   AccountEnabled DeletedDateTime       DeletionAgeInDays UserType\n--                                   -----------------                                              -----------   -------------- ---------------       ----------------- --------\ndddddddd-3333-4444-5555-eeeeeeeeeeee dddddddd-3333-4444-5555-eeeeeeeeeeeeAveryS@contoso.com        Avery Smith   False          2/12/2025 1:15:34 PM  3                 Member\n```\n\n----------------------------------------\n\nTITLE: Retrieve Specific Object Setting - Example 2 - PowerShell\nDESCRIPTION: Retrieves a specific object setting from Microsoft Entra ID. This example builds upon the previous one by first filtering object settings based on the DisplayName property before retrieving a specific setting by its ID. It connects to Entra ID, retrieves a group, gets the object setting, filters by display name, and then retrieves the setting using its ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraObjectSetting.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\n$group = Get-EntraGroup -Filter \"DisplayName eq 'Sales and Marketing'\"\n$setting = Get-EntraObjectSetting -TargetType 'Groups' -TargetObjectId $group.Id | Where-Object {$_.displayName -eq 'Group.Unified.Guest'}\nGet-EntraObjectSetting -TargetType 'Groups' -TargetObjectId $group.Id -Id $setting.Id\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId                                   DisplayName         TemplateId\n--                                   -----------         ----------\naaaaaaaa-0000-1111-2222-bbbbbbbbbbbb Group.Unified.Guest 22cc22cc-dd33-ee44-ff55-66aa66aa66aa\n```\n\n----------------------------------------\n\nTITLE: Get Registered Devices - Entra ID PowerShell\nDESCRIPTION: This example shows how to retrieve the registered devices for a specific user in Microsoft Entra ID.  It requires the 'User.Read.All' scope and utilizes the Get-EntraUserRegisteredDevice cmdlet, filtering by UserId and then selecting and expanding the AdditionalProperties to display relevant device details. The output is a list of device properties for each registered device.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserRegisteredDevice.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraUserRegisteredDevice -UserId 'SawyerM@contoso.com' | Select-Object Id -ExpandProperty AdditionalProperties\n```\n\n----------------------------------------\n\nTITLE: Set Security Compliance Notification Emails - PowerShell\nDESCRIPTION: This example demonstrates how to set the security compliance notification emails for a tenant using the `Set-EntraBetaTenantDetail` cmdlet. It connects to Entra ID with the 'Organization.ReadWrite.All' scope. Requires the Microsoft.Entra.Beta module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaTenantDetail.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.ReadWrite.All'\nSet-EntraBetaTenantDetail -SecurityComplianceNotificationMails @('john@contoso.com','mary@contoso.com')\n```\n\n----------------------------------------\n\nTITLE: Get All OAuth2 Permission Grants of Service Principal - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all OAuth2 permission grants for a given service principal. It involves connecting to Entra ID with appropriate permissions and using the `-All` parameter with the `Get-EntraBetaServicePrincipalOAuth2PermissionGrant` cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalOAuth2PermissionGrant.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraBetaServicePrincipalOAuth2PermissionGrant -ServicePrincipalId $servicePrincipal.Id -All\n```\n\n----------------------------------------\n\nTITLE: Update Entra User from Federated (Hybrid)\nDESCRIPTION: This snippet shows the syntax for updating a user in a hybrid environment after converting the domain from single sign-on to standard authentication. The `-UserPrincipalName` and `-NewPassword` parameters are mandatory in this scenario. The `-NewPassword` parameter accepts a SecureString.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Update-EntraUserFromFederated.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nUpdate-EntraUserFromFederated\n -UserPrincipalName <String>\n -NewPassword <SecureString>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Application Creation with API Settings\nDESCRIPTION: This snippet demonstrates how to create a new application and configure API-related settings using the `-Api` parameter.  It requires the `Application.ReadWrite.All` scope. The example sets the `RequestedAccessTokenVersion` to 2, indicating the desired access token version.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplication.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All'\n$api = @{ RequestedAccessTokenVersion = 2 }\nNew-EntraBetaApplication -DisplayName 'My new application' -Api $api\n```\n\n----------------------------------------\n\nTITLE: Get Directory Role with Filter (ID) - PowerShell\nDESCRIPTION: This snippet demonstrates how to retrieve a specific directory role using its unique ID and the -Filter parameter.  It requires an active connection to Entra ID and retrieves the role that matches the specified ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDirectoryRole.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory'\nGet-EntraDirectoryRole -Filter \"Id eq 'c0e36062-8c80-4d72-9bc3-cbb4efe03c21'\"\n```\n\n----------------------------------------\n\nTITLE: Query Audit Logs for Group Member Additions (PowerShell)\nDESCRIPTION: This PowerShell snippet connects to Entra ID, retrieves a group's ID, and then queries the audit logs to find entries where users were added to the specified group. It uses the `Get-EntraBetaAuditDirectoryLog` cmdlet with a filter to specifically target 'Add member to group' events related to the target group.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAuditDirectoryLog.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All, Directory.Read.All'\n$groupId = (Get-EntraBetaGroup -SearchString 'Contoso Group').Id\nGet-EntraBetaAuditDirectoryLog -Filter \"\n    activityDisplayName eq 'Add member to group' \n    and targetResources/any(r:r/type eq 'User') \n    and targetResources/any(r:r/id eq '$groupId' and r/type eq 'Group')\"\n```\n\n----------------------------------------\n\nTITLE: Create a New Entra Application\nDESCRIPTION: Registers a new application with Microsoft Entra ID and displays its properties.  It uses the `New-EntraApplication` cmdlet to create a new application with the display name 'My application'. The `Format-List` cmdlet is then used to display the `Id`, `DisplayName`, `AppId`, `SignInAudience`, and `PublisherDomain` properties of the newly created application.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/how-to-grant-revoke-api-permissions.md#_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nNew-EntraApplication -DisplayName 'My application' | \n  Format-List Id, DisplayName, AppId, SignInAudience, PublisherDomain\n```\n\n----------------------------------------\n\nTITLE: Get Top User Owned Devices\nDESCRIPTION: This example retrieves a limited number of registered devices owned by a specified user, using the -Top parameter. It also illustrates using an alias, -Limit, for the -Top parameter. The script first connects to Entra ID and then uses Get-EntraBetaUserOwnedDevice with the -UserId and -Top parameters to retrieve only the top 'n' number of devices.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserOwnedDevice.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraBetaUserOwnedDevice -UserId 'SawyerM@contoso.com' -Top 1\n```\n\n----------------------------------------\n\nTITLE: Set Group Lifecycle Policy in Entra ID (Update)\nDESCRIPTION: This code snippet demonstrates how to update a specific group lifecycle policy in Microsoft Entra ID using the `Set-EntraGroupLifecyclePolicy` cmdlet. It first connects to Entra ID with the necessary scopes, retrieves a policy based on its alternate notification email, and then updates the policy's group lifetime and notification email, and managed group type. Dependencies include the Microsoft.Entra module and appropriate permissions to manage group lifecycle policies.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraGroupLifecyclePolicy.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\n$policy = Get-EntraGroupLifecyclePolicy | Where-Object {$_.AlternateNotificationEmails -eq 'example@contoso.com'}\nSet-EntraGroupLifecyclePolicy -GroupLifecyclePolicyId $policy.Id -GroupLifetimeInDays 200 -AlternateNotificationEmails 'example@contoso.com' -ManagedGroupTypes 'All'\n```\n\nLANGUAGE: Output\nCODE:\n```\nId                                   AlternateNotificationEmails GroupLifetimeInDays ManagedGroupTypes\n--                                   --------------------------- ------------------- -----------------\nffffffff-5555-6666-7777-aaaaaaaaaaaa example@contoso.com                     200                 All\n```\n\n----------------------------------------\n\nTITLE: Get Recently Updated User Authentication Methods (Sort) - PowerShell\nDESCRIPTION: This example retrieves a list of recently updated user's registered authentication methods details, sorted by `lastUpdatedDateTime` in descending order, using the `Get-EntraAuthenticationMethodUserRegistrationDetailReport` cmdlet with the `-All`, `-Sort`, and `-Limit` parameters.  It requires connection to Entra ID with appropriate scopes and relies on the Microsoft.Entra module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAuthenticationMethodUserRegistrationDetailReport.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All'\nGet-EntraAuthenticationMethodUserRegistrationDetailReport -All -Sort 'lastUpdatedDateTime desc' -Limit 4 | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Create a new Entra Group with PowerShell\nDESCRIPTION: This PowerShell code creates a new security group in Microsoft Entra ID.  It defines parameters such as DisplayName, MailEnabled, SecurityEnabled, and MailNickName for the new group, and then uses the New-EntraGroup cmdlet to create the group based on these parameters. The MailEnabled parameter is set to $false, and the SecurityEnabled parameter is set to $true, indicating it is a security group and not a Microsoft 365 group.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-groups.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n$groupParams = @{\n    DisplayName = 'Contoso marketing'\n    MailEnabled = $false\n    SecurityEnabled = $true\n    MailNickName = 'NotSet'\n}\nNew-EntraGroup @groupParams\n```\n\n----------------------------------------\n\nTITLE: Get Application Templates by Category - PowerShell\nDESCRIPTION: This example retrieves application templates that belong to the 'crm' category.  It requires the 'Application.Read.All' scope. It uses the `-Filter` parameter with an OData query to filter templates based on the 'Categories' property, selecting the Id, DisplayName, Publisher, and Categories properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplicationTemplate.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraApplicationTemplate -Filter \"Categories/any(c:c eq 'crm')\" -Select Id, DisplayName, Publisher, Categories\n```\n\n----------------------------------------\n\nTITLE: Export user and group assignments - PowerShell\nDESCRIPTION: This script retrieves all service principals, iterates through them, and exports user and group assignments to a CSV file. It uses Get-EntraServicePrincipal, Get-EntraServicePrincipalAppRoleAssignedTo, Get-EntraUser, Get-EntraGroup, and Export-Csv cmdlets. The script requires the Microsoft Entra PowerShell module and Cloud Application Administrator role.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-user-group-assignment.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n# Get all service principals.\n$servicePrincipals = Get-EntraServicePrincipal -All  \n\n# Initialize an array to hold the results.\n $results = @()  \n\n#Loop through each service principal.\n foreach ($sp in $servicePrincipals) {\n\n     Write-Host \"Processing Service Principal: $($sp.DisplayName)\" -ForegroundColor Cyan \n\n     # Get assigned users and groups  \n     $assignedUsers = Get-EntraServicePrincipalAppRoleAssignedTo -ServicePrincipalId $sp.Id |   \n                     Where-Object { $_.PrincipalType -eq 'User' } |   \n                     Select-Object -ExpandProperty PrincipalId  \n \n     $assignedGroups = Get-EntraServicePrincipalAppRoleAssignedTo -ServicePrincipalId $sp.Id |   \n                     Where-Object { $_.PrincipalType -eq 'Group' } |   \n                     Select-Object -ExpandProperty PrincipalId  \n \n     # Resolve user and group names  \n     $userNames = $assignedUsers | ForEach-Object { (Get-EntraUser -UserId $_).DisplayName }  \n     $groupNames = $assignedGroups | ForEach-Object { (Get-EntraGroup -GroupId $_).DisplayName }  \n \n     # Only add to results if there are assigned users or groups\n     if ($userNames.Count -gt 0 -or $groupNames.Count -gt 0) {\n         # Create a result object  \n         $result = [PSCustomObject]@{\n             ServicePrincipalName = $sp.DisplayName  \n             AssignedUsers        = ($userNames -join \"; \")  \n             AssignedGroups       = ($groupNames -join \"; \")  \n         }  \n \n         # Add the result to the results array  \n         $results += $result  \n     }  \n }\n \n # Check if results array is not empty before exporting\n if ($results.Count -gt 0) { \n \n # Define CSV export parameters. Replace the path with your desired location.\n $csvParams = @{  \n     Path = \"C:\\Users\\$env:USERNAME\\Downloads\\ServicePrincipalAssignments.csv\"  \n     NoTypeInformation = $true  \n }  \n \n # Export the results to a CSV file\n $results | Export-Csv @csvParams\n Write-Host \"Service principal assignments exported to CSV file.\" -ForegroundColor Green\n } else {\n     Write-Host \"No service principals found or no data to export.\"\n }\n\n```\n\n----------------------------------------\n\nTITLE: Retrieve thumbnail photo by Id - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a user's thumbnail photo using the Get-EntraUserThumbnailPhoto command. It first connects to Entra ID using Connect-Entra with the required scopes and then retrieves the thumbnail photo using the UserId parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserThumbnailPhoto.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read','User.Read.All'\nGet-EntraUserThumbnailPhoto -UserId 'SawyerM@contoso.com'\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId      Height Width\n--      ------ -----\ndefault 292    278\n```\n\n----------------------------------------\n\nTITLE: Get all deleted users using -All\nDESCRIPTION: This PowerShell snippet retrieves all recoverable deleted users using the -All parameter. It connects to Entra ID, retrieves all deleted users, and formats the output into a table with specific properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedUser.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraBetaDeletedUser -All | Select-Object Id, UserPrincipalName, DisplayName, AccountEnabled, DeletedDateTime, DeletionAgeInDays, UserType | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get Contact's Group Membership (PowerShell)\nDESCRIPTION: Demonstrates how to retrieve groups in which a contact is a member in Microsoft Entra ID. It requires connecting to Entra with appropriate scopes, creating a GroupIdsForMembershipCheck object, retrieving a contact, and then calling the Select-EntraBetaGroupIdsContactIsMemberOf cmdlet. The OrgContactId parameter specifies the contact object ID and the GroupIdsForMembershipCheck parameter specifies the group object ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Select-EntraBetaGroupIdsContactIsMemberOf.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'OrgContact.Read.All', 'Group.Read.All'\n$group = New-Object Microsoft.Open.AzureAD.Model.GroupIdsForMembershipCheck\n$group.GroupIds = (Get-EntraBetaGroup -Filter \"displayName eq 'Sales and Marketing'\").Id\n$contact = Get-EntraBetaContact -Filter \"displayName eq 'Contoso Admin'\"\nSelect-EntraBetaGroupIdsContactIsMemberOf -OrgContactId $contact.Id -GroupIdsForMembershipCheck $group\n```\n\n----------------------------------------\n\nTITLE: Update User's Manager using Set-EntraBetaUserManager (PowerShell)\nDESCRIPTION: This example shows how to update a user's manager using the Set-EntraBetaUserManager cmdlet.  It first connects to Entra ID with the required scopes and then calls the cmdlet with the UserId and ManagerId. Requires the 'User.ReadWrite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUserManager.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nSet-EntraBetaUserManager -UserId 'SawyerM@contoso.com' -ManagerId 'Manager@contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Assigning a Group to an Application Role\nDESCRIPTION: Demonstrates how to assign a group of users to an application role in Microsoft Entra ID using the `New-EntraGroupAppRoleAssignment` cmdlet. It first connects to Entra ID, retrieves the service principal and group, and then assigns the group to the application role using the retrieved IDs.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraGroupAppRoleAssignment.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AppRoleAssignment.ReadWrite.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"Displayname eq 'Box'\"\n$group = Get-EntraGroup -SearchString 'Contoso Global'\nNew-EntraGroupAppRoleAssignment -GroupId $group.Id -PrincipalId $group.Id -ResourceId $servicePrincipal.Id -AppRoleId $servicePrincipal.Approles[1].Id\n```\n\n----------------------------------------\n\nTITLE: Resolve Tenant by Domain Name - Entra PowerShell\nDESCRIPTION: This example demonstrates how to resolve an Entra tenant by specifying its domain name using the Resolve-EntraTenant cmdlet. It requires the 'CrossTenantInformation.ReadBasic.All' scope. The output shows details of the resolved tenant including TenantId, DisplayName and DefaultDomainName.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Resolve-EntraTenant.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'CrossTenantInformation.ReadBasic.All'\nResolve-EntraTenant -DomainName example.com\n```\n\nLANGUAGE: powershell\nCODE:\n```\nEnvironment                   : Global\nValueFormat                   : DomainName\nResult                        : Resolved\nResultMessage                 : Tenant resolved successfully.\nTenantId                      : aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb\nDisplayName                   : Contoso, Ltd\nDefaultDomainName             : CONTOSO18839.onmicrosoft.com\nFederationBrandName           :\nOidcMetadataResult            : Not Found\nOidcMetadataTenantId          :\nOidcMetadataTenantRegionScope :\n```\n\n----------------------------------------\n\nTITLE: Get All Tenant Details - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all tenant details using the `Get-EntraTenantDetail` cmdlet with the `-All` parameter. It first connects to Entra ID using `Connect-Entra` and then executes the cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraTenantDetail.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All'\nGet-EntraTenantDetail -All\n```\n\nLANGUAGE: powershell\nCODE:\n```\nDisplayName Id                                   TenantType CountryLetterCode VerifiedDomains\n----------- --                                   ---------- ----------------- ---------------\nContoso     aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb AAD        NL                {@{Capabilities=Email, OfficeCommunicationsOnline; IsDefault=False; IsInitial=True; Name=contoso.onmicrosoft.com; Type=Mana... \n```\n\n----------------------------------------\n\nTITLE: Get All DirSync Features Status - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve the status of all directory synchronization features for a tenant. It first connects to Entra ID using the Connect-Entra cmdlet with the necessary scope, then uses Get-EntraDirSyncFeature to retrieve the list of features and their enabled/disabled status. The output shows each feature and whether it is enabled (True) or disabled (False).\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDirSyncfeature.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'OnPremDirectorySynchronization.Read.All'\nGet-EntraDirSyncFeature\n```\n\n----------------------------------------\n\nTITLE: Add User as Service Principal Owner - PowerShell\nDESCRIPTION: This example demonstrates how to add a specific user as an owner to a service principal using the Add-EntraServicePrincipalOwner cmdlet. It involves connecting to Entra ID with necessary scopes, retrieving the service principal and user objects, and then using the cmdlet to establish the ownership relationship. Ensure the required Entra module is installed and the user has the necessary permissions.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Add-EntraServicePrincipalOwner.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All', 'Application.ReadWrite.OwnedBy'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\n$owner = Get-EntraUser -UserId 'SawyerM@contoso.com'\nAdd-EntraServicePrincipalOwner -ServicePrincipalId $servicePrincipal.Id -OwnerId $owner.Id\n```\n\n----------------------------------------\n\nTITLE: Retrieving OAuth2 permission grants of a service principal - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all OAuth2 permission grants for a specific service principal in Microsoft Entra ID. It first connects to Entra with 'Directory.Read.All' scope, retrieves the service principal by its display name, and then fetches its OAuth2 permission grants using the Get-EntraServicePrincipalOAuth2PermissionGrant cmdlet. The ServicePrincipalId parameter is required.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalOAuth2PermissionGrant.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraServicePrincipalOAuth2PermissionGrant -ServicePrincipalId $servicePrincipal.Id\n```\n\n----------------------------------------\n\nTITLE: Output Example By ID - PowerShell\nDESCRIPTION: Demonstrates the output when retrieving a delegated permission classification by its ID. The output shows the details of the matching permission, including its ID, classification, permission ID, and permission name.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalDelegatedPermissionClassification.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                      Classification PermissionId                         PermissionName\n--                      -------------- ------------                         --------------\nbbbbbbbb-7777-8888-9999-cccccccccccc low            eeeeeeee-4444-5555-6666-ffffffffffff Sites.Read.All\n```\n\n----------------------------------------\n\nTITLE: List Non-Compliant Devices - PowerShell\nDESCRIPTION: Connects to Entra ID and retrieves a list of devices that are not compliant. Requires the Microsoft.Entra module and the 'Device.Read.All' scope. The `-Filter` parameter is used with the `isCompliant` property to find non-compliant devices.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDevice.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraDevice -Filter \"isCompliant eq false\"\n```\n\n----------------------------------------\n\nTITLE: Create Administrative Unit - Basic PowerShell\nDESCRIPTION: This code snippet demonstrates how to create a basic administrative unit using the `New-EntraAdministrativeUnit` cmdlet. It requires the `AdministrativeUnit.ReadWrite.All` scope and specifies the display name for the new unit. The output shows the properties of the created administrative unit.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraAdministrativeUnit.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.ReadWrite.All'\nNew-EntraAdministrativeUnit -DisplayName 'TestAU'\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDeletedDateTime Id                                   Description DisplayName Visibility\n--------------- --                                   ----------- ----------- ----------\n                bbbbbbbb-1111-2222-3333-cccccccccccc             TestAU\n```\n\n----------------------------------------\n\nTITLE: Get Top N App Role Assignments - PowerShell\nDESCRIPTION: This example retrieves a specified number of application role assignments for a given user. It connects to Entra ID using the required scopes, specifies the user's UserPrincipalName, and uses the `-Top` parameter to limit the number of returned assignments.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserAppRoleAssignment.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AppRoleAssignment.ReadWrite.All', 'Directory.Read.All'\nGet-EntraBetaUserAppRoleAssignment -UserId 'SawyerM@contoso.com' -Top 2\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Registered Users for a Device - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all registered users for a specific Microsoft Entra ID device using the `Get-EntraBetaDeviceRegisteredUser` cmdlet with the `-All` parameter. It connects to Entra ID, retrieves the device object and then gets all the registered users for the specified device.  The output is formatted as a table with the specified properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeviceRegisteredUser.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\n$device = Get-EntraBetaDevice -SearchString '<device-display-name>'\nGet-EntraBetaDeviceRegisteredUser -DeviceId $device.ObjectId -All |\nSelect-Object Id, displayName, UserPrincipalName, createdDateTime, userType, accountEnabled |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Connect to Entra ID using Environment Variables\nDESCRIPTION: Connects to Entra ID using credentials stored in environment variables. This can be useful for automation scenarios or when running in environments that provide credentials via environment variables.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Connect-Entra.md#_snippet_15\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -EnvironmentVariable\n```\n\n----------------------------------------\n\nTITLE: Assign application users to app roles and export to a default location (Example 3)\nDESCRIPTION: This example demonstrates assigning users to app roles and exporting the results to the current location using the `-Export` parameter. It connects to Entra ID with necessary scopes, specifies the data source, file path, and application name, enables export, and enables verbose output.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaAppRoleToApplicationUser.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All', 'Application.ReadWrite.All', 'AppRoleAssignment.ReadWrite.All', 'EntitlementManagement.ReadWrite.All'\nSet-EntraBetaAppRoleToApplicationUser -DataSource \"Generic\" -FilePath \"C:\\temp\\users.csv\" -ApplicationName \"TestApp\" -Export -Verbose\n```\n\n----------------------------------------\n\nTITLE: Connect to Entra ID with User-Assigned Managed Identity\nDESCRIPTION: Connects to Entra ID using a user-assigned managed identity.  This requires a user-created managed identity as a standalone Azure resource and needs the client ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Connect-Entra.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Identity -ClientId 'User_Assigned_Managed_identity_Client_Id'\n```\n\n----------------------------------------\n\nTITLE: Creating a Service Principal with AlternativeNames, ServicePrincipalType, ServicePrincipalNames - PowerShell\nDESCRIPTION: This example demonstrates creating a new service principal by setting AlternativeNames, ServicePrincipalType, and ServicePrincipalNames. It connects to Entra ID, gets an application, and creates the service principal, specifying the AppId, AlternativeNames, ServicePrincipalType, and ServicePrincipalNames.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraServicePrincipal.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraApplication -Filter \"DisplayName eq 'Helpdesk Application'\"\nNew-EntraServicePrincipal -AppId $application.AppId -AlternativeNames 'sktest2' -ServicePrincipalType 'Application' -ServicePrincipalNames $application.AppId\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDisplayName Id                                   AppId                                SignInAudience                     ServicePrincipalType\n----------- --                                   -----                                --------------                     --------------------\nHelpdesk Application   bbbbbbbb-1111-2222-3333-cccccccccccc 00001111-aaaa-2222-bbbb-3333cccc4444 AzureADandPersonalMicrosoftAccount Application\n```\n\n----------------------------------------\n\nTITLE: Get subscribed SKUs by Id PowerShell\nDESCRIPTION: This PowerShell code snippet demonstrates how to retrieve a specific subscribed SKU by its ID. It connects to Entra ID using specified scopes and then uses the `Get-EntraSubscribedSku` cmdlet with the `-SubscribedSkuId` parameter to filter the results.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraSubscribedSku.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All', 'LicenseAssignment.Read.All'\nGet-EntraSubscribedSku -SubscribedSkuId 'abcdefgh-1111-2222-bbbb-cccc33333333_dddddddd-4444-5555-eeee-666666666666'\n```\n\n----------------------------------------\n\nTITLE: Retrieve Recent Group Creation Audit Logs in PowerShell\nDESCRIPTION: This snippet demonstrates how to retrieve a limited number of recent group creation audit logs, selecting specific properties and formatting the output.  It uses `Get-EntraBetaAuditDirectoryLog` with a `Filter` and `Limit`, and then pipes the results to `Select-Object` to choose and rename specific properties such as `InitiatedByUPN` and `GroupDisplayName`. The result is formatted using `Format-Table` for improved readability. Dependencies include the Entra PowerShell module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAuditDirectoryLog.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All, Directory.Read.All'\nGet-EntraBetaAuditDirectoryLog -Filter \"activityDisplayName eq 'Add group'\" -Limit 5 |\nSelect-Object id, activityDateTime, \n              @{Name=\"InitiatedByUPN\"; Expression={ $_.initiatedBy.user.userPrincipalName }},\n              result, \n              @{Name=\"GroupDisplayName\"; Expression={ $_.targetResources[0].displayName }} |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Update Identity Provider Display Name - PowerShell\nDESCRIPTION: This example demonstrates updating the display name of an existing identity provider using the Set-EntraIdentityProvider cmdlet. It requires connecting to Entra ID with the IdentityProvider.ReadWrite.All scope. The -IdentityProviderBaseId specifies the identity provider to update, and the -Name parameter provides the new display name.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraIdentityProvider.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'IdentityProvider.ReadWrite.All'\nSet-EntraIdentityProvider -IdentityProviderBaseId 'Google-OAuth' -Name 'NewGoogleName'\n```\n\n----------------------------------------\n\nTITLE: Listing Non-Compliant Devices - PowerShell\nDESCRIPTION: This PowerShell script lists all non-compliant devices in Microsoft Entra ID. It connects to Entra ID with the 'Device.Read.All' scope and then uses the Get-EntraDevice cmdlet with a filter to retrieve devices where the 'isCompliant' property is false.  The script then selects and displays the Id, isCompliant, DeviceId, and DisplayName properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-devices.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraDevice -Filter \"isCompliant eq false\" | Select-Object Id, isCompliant,DeviceId, DisplayName\n```\n\n----------------------------------------\n\nTITLE: Update User Password in Domain - Example 2\nDESCRIPTION: This example shows how to update a user's password in a domain.  It connects to Entra with the necessary scopes, defines a new password, converts it to a secure string, and then uses Update-EntraBetaUserFromFederated to update the user's password. This is intended for hybrid scenarios.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Update-EntraBetaUserFromFederated.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'UserAuthenticationMethod.ReadWrite.All'\n$newPassword = '<strong-password>'\n$securePassword = ConvertTo-SecureString $newPassword -AsPlainText -Force\nUpdate-EntraBetaUserFromFederated -UserPrincipalName 'pattifuller@contoso.com' -NewPassword $securePassword\n```\n\n----------------------------------------\n\nTITLE: Setting Security Compliance Emails in PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to set the security compliance notification emails for an Entra tenant using the `Set-EntraTenantDetail` cmdlet. It requires the 'Organization.ReadWrite.All' scope. The script begins by connecting to Entra ID, followed by executing the cmdlet with the `-SecurityComplianceNotificationMails` parameter to specify the email addresses.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraTenantDetail.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.ReadWrite.All'\nSet-EntraTenantDetail -SecurityComplianceNotificationMails @('john@contoso.com','mary@contoso.com')\n```\n\n----------------------------------------\n\nTITLE: Sync Group Members - PowerShell\nDESCRIPTION: This example demonstrates how to synchronize members from one group to another. It retrieves members of a 'source-group-id' group and adds them to the 'Sales and Marketing' group. It utilizes `Get-EntraBetaGroupMember` to retrieve the members from the source group and the pipeline to add them to the target group using `Add-EntraBetaGroupMember`. A connection to Entra ID with 'GroupMember.ReadWrite.All' scope is required.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaGroupMember.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.ReadWrite.All'\n$group = Get-EntraBetaGroup -Filter \"DisplayName eq 'Sales and Marketing'\"\nGet-EntraBetaGroupMember -GroupId \"source-group-id\" | \n    Add-EntraBetaGroupMember -GroupId $group.Id\n```\n\n----------------------------------------\n\nTITLE: Retrieve Top N App Role Assignments for a Service Principal - PowerShell\nDESCRIPTION: This example retrieves the top three application role assignments for a specified service principal. It uses the `-Top` parameter to limit the number of results returned. It builds upon the assumption that connection and service principal retrieval steps have been handled using Connect-Entra and Get-EntraServicePrincipal, respectively.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalAppRoleAssignment.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraServicePrincipalAppRoleAssignment -ServicePrincipalId $servicePrincipal.Id -Top 3\n```\n\n----------------------------------------\n\nTITLE: Get All OAuth2 Permission Grants - PowerShell\nDESCRIPTION: This example retrieves all OAuth2 permission grants using the -All parameter, after connecting to Entra ID. It displays a comprehensive list of all permission grants along with relevant properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraOAuth2PermissionGrant.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\nGet-EntraOAuth2PermissionGrant -All\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                       ClientId                             ConsentType       PrincipalId                           ResourceId                            Scope\n--                                       --------                             -----------       -----------                           ----------                            -----\nA1bC2dE3fH4iJ5kL6mN7oP8qR9sT0u           00001111-aaaa-2222-bbbb-3333cccc4444 AllPrincipals                                           a0a0a0a0-bbbb-cccc-dddd-e1e1e1e1e1e1  User.ReadBasic.All\nC2dE3fH4iJ5kL6mN7oP8qR9sT0uV1w           00001111-aaaa-2222-bbbb-3333cccc4444 AllPrincipals                                           b1b1b1b1-cccc-dddd-eeee-f2f2f2f2f2f2  User.Read\nE3fH4iJ5kL6mN7oP8qR9sT0uV1wX2y           22223333-cccc-4444-dddd-5555eeee6666 Principal        aaaaaaaa-bbbb-cccc-1111-222222222222   c2c2c2c2-dddd-eeee-ffff-a3a3a3a3a3a3  User.Read\nH4iJ5kL6mN7oP8qR9sT0uV1wX2yZ3a           22223333-cccc-4444-dddd-5555eeee6666 Principal        aaaaaaaa-bbbb-cccc-1111-222222222222   d3d3d3d3-eeee-ffff-aaaa-b4b4b4b4b4b4  ActivityFeed.Read ServiceHealth.Read\n```\n\n----------------------------------------\n\nTITLE: Update Multiple User Properties PowerShell\nDESCRIPTION: This example showcases how to update multiple user properties simultaneously using a hashtable. It requires the 'User.ReadWrite.All' scope and uses the Set-EntraBetaUser cmdlet with a hashtable containing the properties to be updated.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUser.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\n$params = @{\n    UserId           = 'SawyerM@contoso.com'\n    City             = 'Add city name'\n    CompanyName      = 'Microsoft'\n    Country          = 'Add country name'\n    Department       = 'Add department name'\n    GivenName        = 'Sawyer Miller G'\n    JobTitle         = 'Manager'\n    MailNickName     = 'Add mailnickname'\n    Mobile           = '9984534564'\n    OtherMails       = 'johndoe@contosodev.com'\n    PasswordPolicies = 'DisableStrongPassword'\n    State            = 'UP'\n    StreetAddress    = 'Add address'\n    UserType         = 'Member'\n}\nSet-EntraBetaUser @params\n```\n\n----------------------------------------\n\nTITLE: Retrieve contacts objects by DisplayName filter - PowerShell\nDESCRIPTION: This example retrieves contact objects from the Microsoft Entra directory based on a filter applied to the 'displayName' property.  It first connects to Entra ID with the 'OrgContact.Read.All' scope. The `Get-EntraContact -Filter \"displayName eq 'Contoso Contact'\"` cmdlet retrieves contacts where the DisplayName is exactly 'Contoso Contact'.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraContact.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'OrgContact.Read.All'\nGet-EntraContact -Filter \"displayName eq 'Contoso Contact'\"\n```\n\n----------------------------------------\n\nTITLE: Update IsDeviceOnlyAuthSupported - PowerShell\nDESCRIPTION: This snippet shows how to update the IsDeviceOnlyAuthSupported property of an application using the Set-EntraApplication cmdlet. It retrieves the application object using Get-EntraApplication and then sets the IsDeviceOnlyAuthSupported property. Requires the 'Application.ReadWrite.All' and 'Application.ReadWrite.OwnedBy' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraApplication.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\nSet-EntraApplication -ApplicationId $application.Id -IsDeviceOnlyAuthSupported $False\n```\n\n----------------------------------------\n\nTITLE: Restoring Soft-Deleted Groups via Pipelining in PowerShell\nDESCRIPTION: This snippet demonstrates restoring a deleted group using pipelining with `Get-EntraDeletedGroup` and `Restore-EntraDeletedDirectoryObject`. It supports filtering by display name or directly using the group ID.  Requires the `Group.ReadWrite.All` scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/recover-deleted-data.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All' \nGet-EntraDeletedGroup -Filter \"displayName eq 'test21'\" | Restore-EntraDeletedDirectoryObject #if you know the display name\nGet-EntraDeletedGroup -Id '00aa00aa-bb11-cc22-dd33-44ee44ee44ee' | Restore-EntraDeletedDirectoryObject #if you know the group ID\n```\n\n----------------------------------------\n\nTITLE: Get All User's Registered Authentication Methods - PowerShell\nDESCRIPTION: This example retrieves all user's registered authentication methods using the `Get-EntraAuthenticationMethodUserRegistrationDetailReport` cmdlet with the `-All` parameter. It connects to Entra ID with the necessary scopes and formats the output as a table for readability. Dependencies include the Microsoft.Entra module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAuthenticationMethodUserRegistrationDetailReport.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All'\nGet-EntraAuthenticationMethodUserRegistrationDetailReport -All | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Set Application Properties - PowerShell\nDESCRIPTION: This snippet demonstrates how to update an application's properties such as display name, identifier URIs, group membership claims, IsDeviceOnlyAuthSupported, and tags using the Set-EntraApplication cmdlet. It retrieves an application object using Get-EntraApplication and then updates its properties based on provided parameters. Requires the 'Application.ReadWrite.All' and 'Application.ReadWrite.OwnedBy' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraApplication.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\n$params = @{\n    ApplicationId = $application.Id\n    DisplayName = 'Contoso Entra PowerShell App Production'\n    IdentifierUris = 'https://contoso.com'\n    GroupMembershipClaims = 'SecurityGroup'\n    IsDeviceOnlyAuthSupported = $False\n    Tags = 'mytag'\n}\nSet-EntraApplication @params\n```\n\n----------------------------------------\n\nTITLE: Filter Audit Logs by ActivityDisplayName in PowerShell\nDESCRIPTION: This snippet shows how to filter audit logs by a specific `ActivityDisplayName` using the `Get-EntraBetaAuditDirectoryLog` cmdlet with the `-Filter` parameter. This allows you to target audit logs for specific actions or events within the Microsoft Entra ID environment. `-Limit` can be used as an alias for `-Top` here as well.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAuditDirectoryLog.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All, Directory.Read.All'\nGet-EntraBetaAuditDirectoryLog -Filter \"ActivityDisplayName eq 'Update rollout policy of feature'\" -Top 1\n```\n\n----------------------------------------\n\nTITLE: List sign-ins from non-compliant devices (PowerShell)\nDESCRIPTION: This example shows how to retrieve sign-in logs specifically for sign-ins originating from non-compliant devices. It connects to Entra ID and then employs the `Get-EntraBetaAuditSignInLog` cmdlet with a `-Filter` to select logs where `deviceDetail/isCompliant eq false`. It retrieves the top entry and selects relevant properties such as ID, user display name, and device details.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAuditSignInLog.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All','Directory.Read.All'\nGet-EntraBetaAuditSignInLog -Filter \"deviceDetail/isCompliant eq false\" -Top 1 | Select-Object id, userDisplayName, appDisplayName, clientAppUsed, conditionalAccessStatus, deviceDetail, status\n```\n\n----------------------------------------\n\nTITLE: Get Sync Errors for Specific Tenant\nDESCRIPTION: This example shows how to get directory synchronization errors for a specific tenant ID. It uses Connect-Entra to authenticate. It obtains the tenant ID using Get-EntraTenantDetail, and then uses the Get-EntraDirectoryObjectOnPremisesProvisioningError cmdlet with the `-TenantId` parameter to specify the target tenant.  The output is formatted into a table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDirectoryObjectOnPremisesProvisioningError.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All', 'Directory.Read.All', 'Group.Read.All', 'Contacts.Read'\n$tenant = Get-EntraTenantDetail\nGet-EntraDirectoryObjectOnPremisesProvisioningError -TenantId $tenant.Id | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Show User Authentication Method Updates - PowerShell\nDESCRIPTION: This script retrieves audit logs related to a specific user's authentication method updates. It connects to Entra ID, retrieves the user's ID using `Get-EntraUser`, and then filters audit logs based on category, service, and the user's ID within the target resources. Requires connection to Entra ID with correct scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAuditDirectoryLog.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All, Directory.Read.All'\n$userId = (Get-EntraUser -UserId 'sawyerM@contoso.com').Id\nGet-EntraAuditDirectoryLog -Filter \"category eq 'UserManagement' and LoggedByService eq 'Authentication Methods' and targetResources/any(r:r/id eq '$userId')\"\n```\n\n----------------------------------------\n\nTITLE: List Users without Managers using PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a list of users who do not have a manager assigned in Microsoft Entra ID.  It connects to Entra with the User.Read.All scope, retrieves all users, iterates through each user, attempts to retrieve their manager and adds the user to a list if no manager is found, handling errors silently. Finally, it formats and displays the list of users without managers.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserManager.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\n$allUsers = Get-EntraBetaUser -All\n$usersWithoutManagers = foreach ($user in $allUsers) {\n    $manager = Get-EntraBetaUserManager -UserId $user.Id -ErrorAction SilentlyContinue\n    if (-not $manager) {\n        [PSCustomObject]@{\n            Id                = $user.Id\n            DisplayName       = $user.DisplayName\n            UserPrincipalName = $user.UserPrincipalName\n            UserType          = $user.userType\n            AccountEnabled    = $user.accountEnabled\n            CreatedDateTime   = $user.createdDateTime\n        }\n    }\n}\n$usersWithoutManagers | Format-Table Id, DisplayName, UserPrincipalName, CreatedDateTime, UserType, AccountEnabled  -AutoSize\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                   DisplayName         UserPrincipalName                           CreatedDateTime           UserType   AccountEnabled\n--                                   -----------         -----------------                           ---------------           --------   --------------\ncccccccc-2222-3333-4444-dddddddddddd New User           NewUser@tenant.com                         10/7/2024 2:24:26 PM      Member     True\nbbbbbbbb-1111-2222-3333-cccccccccccc Sawyer Miller     SawyerM@contoso.com                        10/7/2024 12:33:36 AM     Member     True\n```\n\n----------------------------------------\n\nTITLE: Get User CBA Authorization Info - UPN - PowerShell\nDESCRIPTION: This example retrieves the authorization information for a user by their User Principal Name (UPN). It requires connecting to Entra ID with the 'User.Read.All' scope using `Connect-Entra`. The output displays user details and authorization information.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserCBAAuthorizationInfo.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraUserCBAAuthorizationInfo -UserId 'SawyerM@contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Assign App Role to User - PowerShell\nDESCRIPTION: This example demonstrates how to assign an app role to a user in Microsoft Entra ID. It retrieves the service principal and user using Get-EntraBetaServicePrincipal and Get-EntraBetaUser respectively, and then assigns the role using New-EntraBetaServicePrincipalAppRoleAssignment. It requires the 'AppRoleAssignment.ReadWrite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaServicePrincipalAppRoleAssignment.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AppRoleAssignment.ReadWrite.All'\n$servicePrincipalObject = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Box'\"\n$user = Get-EntraBetaUser -UserId 'PattiF@Contoso.com'\n\nNew-EntraBetaServicePrincipalAppRoleAssignment `\n    -ServicePrincipalId $servicePrincipalObject.Id `\n    -ResourceId $servicePrincipalObject.Id `\n    -AppRoleId $servicePrincipalObject.Approles[1].Id `\n    -PrincipalId $user.Id\n```\n\n----------------------------------------\n\nTITLE: Creating a New Group Lifecycle Policy\nDESCRIPTION: Demonstrates how to create a new group lifecycle policy with specific parameters. It first connects to Entra ID using Connect-Entra and then creates a new policy using New-EntraGroupLifecyclePolicy, setting the group lifetime, managed group types, and alternate notification emails.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraGroupLifecyclePolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\nNew-EntraGroupLifecyclePolicy -GroupLifetimeInDays 99 -ManagedGroupTypes 'Selected' -AlternateNotificationEmails 'example@contoso.com'\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId                                   AlternateNotificationEmails GroupLifetimeInDays ManagedGroupTypes\n--                                   --------------------------- ------------------- -----------------\naaaaaaaa-0000-1111-2222-bbbbbbbbbbbb example@contoso.com         99                  Selected\n```\n\n----------------------------------------\n\nTITLE: Get Top N Service Principals - PowerShell\nDESCRIPTION: This example retrieves the top two service principals from the directory using the `-Top` parameter. The `-Limit` parameter can be used as an alias for `-Top`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipal.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraServicePrincipal -Top 2\n```\n\n----------------------------------------\n\nTITLE: Update PromptLoginBehavior - Entra ID (Beta)\nDESCRIPTION: This snippet updates the PromptLoginBehavior setting for a federated domain using the Set-EntraBetaDomainFederationSettings cmdlet. It first connects to Entra ID with the 'Domain.ReadWrite.All' scope, then sets the PromptLoginBehavior to either 'TranslateToFreshPasswordAuth', 'NativeSupport', or 'Disabled', depending on the requirement. It requires the Microsoft.Entra.Beta module to be installed and the user to have appropriate permissions. The domain name and authentication protocol are also specified.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaDomainFederationSettings.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Domain.ReadWrite.All'\n$domain = 'contoso.com'\n$authProtocol = 'WsFed'\n$promptLoginBehavior = 'TranslateToFreshPasswordAuth' # Or 'NativeSupport' or 'Disabled', depending on the requirement\nSet-EntraBetaDomainFederationSettings -DomainName $domain -PreferredAuthenticationProtocol $authProtocol -PromptLoginBehavior $promptLoginBehavior\n```\n\n----------------------------------------\n\nTITLE: Set User Thumbnail Photo from File - PowerShell\nDESCRIPTION: Sets the thumbnail photo of a user using a file path.  Requires the 'User.ReadWrite' or 'User.ReadWrite.All' permission.  The -UserId parameter specifies the target user, and -FilePath specifies the image file.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUserThumbnailPhoto.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-EntraUserThumbnailPhoto\n [-UserId <String>]\n -FilePath <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Restoring a deleted application - PowerShell\nDESCRIPTION: This example demonstrates how to restore a previously deleted application using PowerShell. It first connects to Entra ID with the necessary scopes, retrieves the deleted application using `Get-EntraDeletedApplication`, and then restores it using `Restore-EntraDeletedApplication` by specifying the application's Object ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Restore-EntraDeletedApplication.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All'\n$deletedApplication = Get-EntraDeletedApplication -SearchString 'My PowerShell Application'\nRestore-EntraDeletedApplication -ApplicationId $deletedApplication.Id\n```\n\n----------------------------------------\n\nTITLE: List User's Administrative Units - PowerShell\nDESCRIPTION: This example demonstrates how to list a user's administrative units in Microsoft Entra ID using the Get-EntraUserMembership cmdlet and filtering by the '@odata.type' property. It connects to Entra ID with the User.Read.All scope, retrieves memberships for a specified user ID, filters for administrative units, and then selects and formats the output.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserMembership.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraUserMembership -UserId 'SawyerM@contoso.com' |\nWhere-Object { $_.'@odata.type' -eq '#microsoft.graph.administrativeUnit' } |\nSelect-Object Id, displayName, Description, MembershipRule, MembershipType, Visibility |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Remove Service Principal Example - PowerShell\nDESCRIPTION: Demonstrates how to remove a service principal using the Remove-EntraBetaServicePrincipal cmdlet. First, it connects to Entra ID with required scopes.  Then retrieves a service principal using Get-EntraBetaServicePrincipal and pipes the output to Remove-EntraBetaServicePrincipal for deletion.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaServicePrincipal.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\nGet-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\" | Remove-EntraBetaServicePrincipal\n```\n\n----------------------------------------\n\nTITLE: Revoke an App Role Assignment from a Service Principal\nDESCRIPTION: Revokes a specific app role assignment from a client service principal.  It retrieves the client and resource service principals, finds the relevant app role, and then uses `Get-EntraServicePrincipalAppRoleAssignedTo` to retrieve the specific role assignment. Finally, it uses `Remove-EntraServicePrincipalAppRoleAssignment` to remove the assignment, specifying the service principal ID and the app role assignment ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/how-to-grant-revoke-api-permissions.md#_snippet_14\n\nLANGUAGE: powershell\nCODE:\n```\n$permissions = 'Application.Read.All'\n\n$clientServicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'My application'\"\n$resourceServicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Microsoft Graph'\"\n\n$appRole = $resourceServicePrincipal.AppRoles | Where-Object {$_.Value -eq $permissions}\n\n$roleAssignment = Get-EntraServicePrincipalAppRoleAssignedTo -ServicePrincipalId $clientServicePrincipal.Id | Where-Object {$_.AppRoleId -eq $appRole.Id}\n\nRemove-EntraServicePrincipalAppRoleAssignment -ServicePrincipalId $clientServicePrincipal.Id -AppRoleAssignmentId $roleAssignment.Id\n```\n\n----------------------------------------\n\nTITLE: Connect to Entra ID with Certificate Name\nDESCRIPTION: Connects to Entra ID using client credential with a certificate name. It retrieves the certificate subject and then uses it for authentication.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Connect-Entra.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\n$params = @{\n    ClientId = '00001111-aaaa-2222-bbbb-3333cccc4444'\n    TenantId = 'aaaabbbb-0000-cccc-1111-dddd2222eeee'\n    CertificateName = 'YOUR_CERT_SUBJECT'\n}\n\nConnect-Entra @params\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n $Cert = Get-ChildItem Cert:\\LocalMachine\\My\\$CertThumbprint\n Connect-Entra -ClientId '<App-Id>' -TenantId '<Tenant-Id>' -Certificate $Cert\n```\n\n----------------------------------------\n\nTITLE: Create a Simple Application Segment with New-EntraBetaPrivateAccessApplicationSegment\nDESCRIPTION: This example demonstrates how to create a basic application segment using the New-EntraBetaPrivateAccessApplicationSegment cmdlet. It connects to Entra ID, retrieves an application by its display name, and then creates a new application segment for it, specifying the destination host, ports, protocol, and destination type. The example requires the NetworkAccessPolicy.ReadWrite.All, Application.ReadWrite.All, and NetworkAccess.ReadWrite.All scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaPrivateAccessApplicationSegment.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'NetworkAccessPolicy.ReadWrite.All', 'Application.ReadWrite.All', 'NetworkAccess.ReadWrite.All'\n$application = Get-EntraBetaApplication -Filter \"displayName eq '<GlobalSecureAccess_Application_DisplayName>'\"\n$params = @{\n    ApplicationId = $application.Id\n    DestinationHost = 'ssh.contoso.local'\n    Ports = 22\n    Protocol = 'TCP'\n    DestinationType = 'FQDN'\n}\nNew-EntraBetaPrivateAccessApplicationSegment @params\n```\n\n----------------------------------------\n\nTITLE: Assigning a Usage Location to a User (PowerShell)\nDESCRIPTION: This PowerShell snippet sets the `UsageLocation` attribute for a specific user. The `Set-EntraUser` cmdlet is used to update the user's properties, with the `-UserId` parameter specifying the target user and the `-UsageLocation` parameter setting the location.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/how-to-manage-user-licenses.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nSet-EntraUser -UserId 'GjeEdla@Contoso.com' -UsageLocation 'US'\n```\n\n----------------------------------------\n\nTITLE: Connect to Entra ID with Certificate Thumbprint\nDESCRIPTION: Authenticates to Microsoft Entra ID using an ApplicationId and CertificateThumbprint for app-only access. This method is suitable for non-interactive authentication where a service principal uses a certificate for authentication.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Connect-Entra.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n$connectParams = @{\n    TenantId = 'aaaabbbb-0000-cccc-1111-dddd2222eeee'\n    ApplicationId = '00001111-aaaa-2222-bbbb-3333cccc4444'\n    CertificateThumbprint = 'AA11BB22CC33DD44EE55FF66AA77BB88CC99DD00'\n}\n\nConnect-Entra @connectParams\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n```Output\nWelcome to Microsoft Graph!\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Directory Synchronization Settings - PowerShell\nDESCRIPTION: This snippet demonstrates how to set directory synchronization settings using the Set-EntraBetaDirSyncConfiguration cmdlet. It connects to Entra ID with the necessary scopes and then sets the accidental deletion threshold and forces the command to run without confirmation.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaDirSyncConfiguration.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'OnPremDirectorySynchronization.ReadWrite.All'\nSet-EntraBetaDirSyncConfiguration -AccidentalDeletionThreshold 600 -Force\n```\n\n----------------------------------------\n\nTITLE: Get Delegated Permission Classification by ID - PowerShell\nDESCRIPTION: Retrieves a specific delegated permission classification by its ID. It first connects to Entra ID with the necessary scopes. It then finds the service principal and retrieves a specific permission classification based on PermissionName, before retrieving by ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalDelegatedPermissionClassification.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\n$permissionClassification = Get-EntraServicePrincipalDelegatedPermissionClassification -ServicePrincipalId $servicePrincipal.Id -Filter \"PermissionName eq 'Sites.Read.All'\"\nGet-EntraServicePrincipalDelegatedPermissionClassification -ServicePrincipalId $servicePrincipal.Id -Id $permissionClassification.Id\n```\n\n----------------------------------------\n\nTITLE: Retrieve Deleted Directory Object Details (PowerShell)\nDESCRIPTION: Demonstrates how to retrieve a deleted directory object and display its details using `Get-EntraDeletedDirectoryObject` and `Format-Table`.  It first connects to Entra ID using `Connect-Entra` with specific scopes for reading AdministrativeUnit, Application, Group, and User data. The output is then formatted to show the Id, displayName, '@odata.type', DeletedDateTime, and DeletionAgeInDays.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedDirectoryObject.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.Read.All', 'Application.Read.All','Group.Read.All','User.Read.All'\nGet-EntraDeletedDirectoryObject -DirectoryObjectId 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb' | Format-Table -Property Id, displayName, '@odata.type', DeletedDateTime, DeletionAgeInDays -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Remove Application Extension Property - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to remove an application extension property from a Microsoft Entra ID application. It connects to Entra ID, retrieves the application and extension property by their display name and name respectively, and then removes the extension property using `Remove-EntraApplicationExtensionProperty`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraApplicationExtensionProperty.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\n$extension = Get-EntraApplicationExtensionProperty -ApplicationId $application.Id | Where-Object {$_.Name -eq 'extension_3ed1a24748dd4e4cb91fc0ab09576ff0_NewAttribute'}\nRemove-EntraApplicationExtensionProperty -ApplicationId $application.Id -ExtensionPropertyId $extension.Id\n```\n\n----------------------------------------\n\nTITLE: Retrieving Entra Users with Page Size - PowerShell\nDESCRIPTION: This snippet demonstrates how to retrieve a large number of Entra users with a specified page size. Setting the page size using the `-Top` parameter optimizes performance. The `-All` parameter retrieves all users. Requires the Microsoft Entra PowerShell module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/entra-powershell-best-practices.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraUser -All -Top 999\n```\n\n----------------------------------------\n\nTITLE: Get All Applications - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all applications from Microsoft Entra ID. It connects to Entra ID with 'Application.Read.All' scope and then uses Get-EntraBetaApplication with the '-All' parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplication.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraBetaApplication -All\n```\n\n----------------------------------------\n\nTITLE: Update Role Definition Display Name - PowerShell\nDESCRIPTION: This snippet updates the display name of an existing Microsoft Entra role definition. It first connects to Entra ID, retrieves the role definition by its current display name, and then updates the display name using the `Set-EntraDirectoryRoleDefinition` cmdlet. It requires the 'RoleManagement.ReadWrite.Directory' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraDirectoryRoleDefinition.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory'\n$roleDefinition = Get-EntraDirectoryRoleDefinition -Filter \"DisplayName eq '<Role-Definition-Name>'\"\nSet-EntraDirectoryRoleDefinition -UnifiedRoleDefinitionId $roleDefinition.Id -DisplayName 'UpdatedDisplayName'\n```\n\n----------------------------------------\n\nTITLE: Get User Authentication Methods - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a list of authentication methods registered to a specific user using their UserPrincipalName. It connects to Entra ID with the required scope and then uses the Get-EntraBetaUserAuthenticationMethod cmdlet to fetch the authentication methods. The output is then filtered to display only the Id, DisplayName, and AuthenticationMethodType properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserAuthenticationMethod.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'UserAuthenticationMethod.Read.All'\nGet-EntraBetaUserAuthenticationMethod -UserId 'SawyerM@Contoso.com' | Select-Object Id, DisplayName, AuthenticationMethodType\n```\n\n----------------------------------------\n\nTITLE: Get top objects created by a service principal - PowerShell\nDESCRIPTION: This example retrieves the top two objects created by a specified service principal in Microsoft Entra ID. It first connects to Entra ID with the Application.Read.All scope. Then it gets a service principal based on its display name. Finally, it retrieves the top two objects created by the service principal using the Get-EntraBetaServicePrincipalCreatedObject cmdlet with the -Top parameter.  -ServicePrincipalId specifies the ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalCreatedObject.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraBetaServicePrincipalCreatedObject -ServicePrincipalId $servicePrincipal.Id -Top 2\n```\n\n----------------------------------------\n\nTITLE: Get Top N Group Owners in PowerShell\nDESCRIPTION: This PowerShell code snippet retrieves the specified top number of owners of a group. It connects to Entra ID with the required scope, fetches the target group via display name filtering, and uses Get-EntraGroupOwner with the `-GroupId` and `-Top` parameters to limit the results to the specified number. It then selects and shows the Id, DisplayName and '@odata.type' properties of the retrieved owners.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraGroupOwner.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All'\n$group = Get-EntraGroup -Filter \"DisplayName eq 'Sales and Marketing'\"\nGet-EntraGroupOwner -GroupId $group.Id -Top 2 | Select-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Removing SSO from an application using PowerShell\nDESCRIPTION: This example shows how to remove single sign-on (SSO) from an application configured with Application Proxy using the `Set-EntraBetaApplicationProxyApplicationSingleSignOn` cmdlet. It sets the `SingleSignOnMode` to 'None'. The script connects to Entra ID, then calls Set-EntraBetaApplicationProxyApplicationSingleSignOn with the application ID and SingleSignOnMode set to None. Ensure you have the necessary permissions and the correct application ID before executing this script.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplicationProxyApplicationSingleSignOn.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\nSet-EntraBetaApplicationProxyApplicationSingleSignOn -ApplicationId $application .Id -SingleSignOnMode None'\n```\n\n----------------------------------------\n\nTITLE: Updating Policy Description - PowerShell\nDESCRIPTION: This PowerShell code updates the description of a cloud authentication roll-out policy in Microsoft Entra ID. It first connects to Entra ID with the necessary scopes, retrieves a policy using its display name, and then updates its description using the Set-EntraBetaFeatureRolloutPolicy cmdlet. It requires the 'Directory.ReadWrite.All' scope. The input is the policy's ID, and the output is the updated policy object with the new description.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaFeatureRolloutPolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\n$policy = Get-EntraBetaFeatureRolloutPolicy -Filter \"DisplayName eq 'Feature-Rollout-Policy'\"\nSet-EntraBetaFeatureRolloutPolicy -Id $policy.Id -Description 'Feature-Rollout-Policytest'\n```\n\n----------------------------------------\n\nTITLE: Get Service Principal by ID - PowerShell\nDESCRIPTION: This example retrieves a specific service principal by its `ServicePrincipalId`. It first retrieves the service principal using a filter and then uses its ID to fetch the same service principal directly, demonstrating the use of the `-ServicePrincipalId` parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipal.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraServicePrincipal -ServicePrincipalId $servicePrincipal.Id\n```\n\n----------------------------------------\n\nTITLE: Get sign-ins without MFA (PowerShell)\nDESCRIPTION: This example shows how to retrieve audit logs of sign-ins that did not use multi-factor authentication (MFA). It connects to Entra ID and uses `Get-EntraBetaAuditSignInLog` with a `-Filter` to select logs where `authenticationRequirement ne 'multiFactorAuthentication'` and the sign-in was interactive (`isInteractive eq true`).\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAuditSignInLog.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All','Directory.Read.All'\nGet-EntraBetaAuditSignInLog -Filter \"authenticationRequirement ne 'multiFactorAuthentication' and isInteractive eq true\"\n```\n\n----------------------------------------\n\nTITLE: List Recently Deleted Users - PowerShell\nDESCRIPTION: This script retrieves and displays a list of recently deleted users from Entra ID. It uses the `Get-EntraDeletedUser` cmdlet to fetch deleted user accounts. The output includes the ID, user principal name, display name, account enabled status, deletion date and time, deletion age in days, and user type.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-user.md#_snippet_15\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nGet-EntraDeletedUser -All | Select-Object Id, UserPrincipalName, DisplayName, AccountEnabled, DeletedDateTime, DeletionAgeInDays, UserType | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Remove Owner from Service Principal - PowerShell\nDESCRIPTION: Demonstrates how to remove an owner from a service principal in Microsoft Entra ID using the Remove-EntraServicePrincipalOwner cmdlet. It first connects to Entra ID, retrieves the service principal and owner, then removes the owner using the specified IDs. Prerequisites include having the 'Application.ReadWrite.All' scope and existing service principal and owner objects.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraServicePrincipalOwner.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\n$ownership = Get-EntraServicePrincipalOwner -ServicePrincipalId $servicePrincipal.Id | Select-Object Id, userPrincipalName, DisplayName, '@odata.type'\n$owner = $ownership | Where-Object {$_.userPrincipalName -eq 'SawyerM@Contoso.com' }\nRemove-EntraServicePrincipalOwner -ServicePrincipalId $servicePrincipal.Id -OwnerId $owner.Id\n```\n\n----------------------------------------\n\nTITLE: Get Outbound Sign-in Events - PowerShell\nDESCRIPTION: This example retrieves sign-in events where local users accessed external tenants, listing unique external tenant IDs. Requires the 'AuditLog.Read.All' and 'Directory.Read.All' scopes. The `-AccessDirection` parameter is set to `Outbound` to filter results.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaCrossTenantAccessActivity.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All', 'Directory.Read.All'\nGet-EntraBetaCrossTenantAccessActivity -AccessDirection Outbound\n```\n\n----------------------------------------\n\nTITLE: List Top N Applications - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a specified number of applications using the -Top parameter. It requires the 'Application.Read.All' scope and connects to Entra ID before executing the Get-EntraApplication cmdlet. The output displays the top 'n' applications based on the specified limit.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplication.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraApplication -Top 2\n```\n\n----------------------------------------\n\nTITLE: Add an Owner to a Group - PowerShell\nDESCRIPTION: This PowerShell snippet adds a user as an owner to a Microsoft Entra group. It retrieves the group and user objects by their display name and User ID, respectively, and then uses the Add-EntraGroupOwner cmdlet to add the user as an owner to the group. The script requires the 'Group.ReadWrite.All' scope and the Connect-Entra cmdlet must have been used to establish a connection to Entra ID. The GroupId parameter specifies the unique identifier (Object ID) of the group, while OwnerId specifies the unique identifier (Object ID) of the owner.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Add-EntraGroupOwner.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All'\n$group = Get-EntraGroup -Filter \"DisplayName eq 'HelpDesk Team Leaders'\"\n$user = Get-EntraUser -UserId 'SawyerM@contoso.com'\nAdd-EntraGroupOwner -GroupId $group.Id -OwnerId $user.Id\n```\n\n----------------------------------------\n\nTITLE: Clear All Scopes in Delegated Permission Grant - PowerShell\nDESCRIPTION: This example illustrates how to clear all scopes in a delegated permission grant by setting the `-Scope` parameter to an empty string. It connects to Entra ID, retrieves a service principal, fetches the permission grant, and then updates the scope to be empty. Requires the DelegatedPermissionGrant.ReadWrite.All scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Update-EntraOauth2PermissionGrant.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'DelegatedPermissionGrant.ReadWrite.All'\n$clientServicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'My application'\"\n$permissionGrant = Get-EntraOauth2PermissionGrant | Where-Object {$_.ClientId -eq $clientServicePrincipal.Id -and $_.Scope -eq 'Directory.Read.All'}\nUpdate-EntraOauth2PermissionGrant -OAuth2PermissionGrantId $permissionGrant.Id -Scope ''\n```\n\n----------------------------------------\n\nTITLE: Updating Feature Rollout Policy - PowerShell\nDESCRIPTION: This PowerShell code updates an existing feature rollout policy in Microsoft Entra ID. It retrieves a policy based on its display name and then modifies its display name and enabled status using the Set-EntraBetaFeatureRolloutPolicy cmdlet. It requires the 'Directory.ReadWrite.All' scope and the Microsoft.Entra.Beta module. The expected input is the existing policy's ID, and the output is the updated policy object.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaFeatureRolloutPolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\n$policy = Get-EntraBetaFeatureRolloutPolicy -Filter \"DisplayName eq 'Feature-Rollout-Policy'\"\nSet-EntraBetaFeatureRolloutPolicy -Id $policy.Id -DisplayName 'Feature-Rollout-Policytest' -IsEnabled $false\n```\n\n----------------------------------------\n\nTITLE: Grant Delegated Permissions - PowerShell\nDESCRIPTION: This script grants delegated permissions to a client service principal to access a resource service principal on behalf of all users. It retrieves the client and resource service principals by their display names, then creates an OAuth2 permission grant. The granted permissions are defined in the `$scopes` variable. Finally, the Id, ClientId, ConsentType, and Scope of the new permission grant are displayed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/how-to-grant-revoke-api-permissions.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n$scopes = 'User.Read.All, Group.Read.All'\n$clientServicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'My application'\" \n$resourceServicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Microsoft Graph'\"\n\n$oauthPermissionGrant= New-EntraOauth2PermissionGrant -ClientId $clientServicePrincipal.Id -ConsentType 'AllPrincipals' -ResourceId $resourceServicePrincipal.Id -Scope $scopes\n\n$oauthPermissionGrant | Format-List Id, ClientId, ConsentType, Scope\n```\n\n----------------------------------------\n\nTITLE: Get Top N Sign-Ins - PowerShell\nDESCRIPTION: This example illustrates how to retrieve the top N sign-ins using the -Top parameter of the Get-EntraBetaApplicationSignInDetailedSummary cmdlet. It connects to Entra ID with the necessary 'Reports.Read.All' scopes and then retrieves the top 5 sign-in records.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationSignInDetailedSummary.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Reports.Read.All'\nGet-EntraBetaApplicationSignInDetailedSummary -Top 5\n```\n\n----------------------------------------\n\nTITLE: Connecting to Entra ID with Scopes - PowerShell\nDESCRIPTION: This code snippet demonstrates how to connect to Microsoft Entra ID using the `Connect-Entra` cmdlet in PowerShell. It specifies the required permission scopes for the session. The user is prompted to sign in with an admin account if needed. It establishes a connection with delegated access and requires user consent for specified scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/navigate-entraps.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\n```\n\n----------------------------------------\n\nTITLE: Assign application users to app role assignments with verbose mode (Example 2)\nDESCRIPTION: This example demonstrates assigning users to app roles and uses the `-Verbose` parameter for detailed output during processing.  It connects to Entra ID with necessary scopes, specifies the data source, file path, and application name, and enables verbose output.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaAppRoleToApplicationUser.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All', 'Application.ReadWrite.All', 'AppRoleAssignment.ReadWrite.All', 'EntitlementManagement.ReadWrite.All'\nSet-EntraBetaAppRoleToApplicationUser -DataSource \"SAPCloudIdentity\" -FilePath \"C:\\temp\\users-exported-from-sap.csv\" -ApplicationName \"TestApp\" -Verbose\n```\n\n----------------------------------------\n\nTITLE: Get Applications with Expiring Certificates - PowerShell\nDESCRIPTION: This example retrieves applications with expiring certificates within 30 days.  It calculates the expiration threshold, filters applications based on expiring KeyCredentials, and presents the result in a formatted table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplication.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n$expirationThreshold = (Get-Date).AddDays(30)\n$appsWithExpiringKeys = Get-EntraBetaApplication -All | Where-Object { $_.KeyCredentials } |\nForEach-Object {\n    $app = $_\n    $app.KeyCredentials | Where-Object { $_.EndDate -le $expirationThreshold } |\n    ForEach-Object {\n        [PSCustomObject]@{\n            DisplayName            = $app.DisplayName\n            AppId                  = $app.AppId\n            CertificateDisplayName = $_.DisplayName\n            KeyId                  = $_.KeyId\n            ExpiringKeys           = $_.EndDate\n        }\n    }\n}\n$appsWithExpiringKeys | Format-Table DisplayName, AppId, CertificateDisplayName, KeyId, ExpiringKeys -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get Connectors in Group with Filter\nDESCRIPTION: This example illustrates how to retrieve connectors from a specified Application Proxy connector group using a filter. It uses the `-Filter` parameter to specify a condition based on the `machineName` property. It requires connecting to Entra ID with the 'Directory.ReadWrite.All' scope. The `OnPremisesPublishingProfileId` parameter indicates the connector group.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationProxyConnectorGroupMembers.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\n$params = @{\n    OnPremisesPublishingProfileId = 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb'\n    Filter = \"machineName eq 'AppProxy Machine'\"\n}\nGet-EntraBetaApplicationProxyConnectorGroupMembers @params\n```\n\n----------------------------------------\n\nTITLE: Get user license details with Connect-Entra, PowerShell\nDESCRIPTION: This example demonstrates how to connect to Entra ID using Connect-Entra with the 'User.Read.All' scope and then retrieve license details for a specific user using Get-EntraUserLicenseDetail. It requires the Microsoft.Entra module and appropriate permissions to read user license details.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserLicenseDetail.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraUserLicenseDetail -UserId 'SawyerM@contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Create a new Domain\nDESCRIPTION: This example creates a new domain named 'testingDemo.com' in Microsoft Entra ID after connecting with the 'Domain.ReadWrite.All' scope. It showcases the basic usage of the New-EntraDomain cmdlet with only the required -Name parameter. The Connect-Entra cmdlet is used to establish a connection to Entra ID with the necessary permissions.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraDomain.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Domain.ReadWrite.All'\nNew-EntraDomain -Name testingDemo.com\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId              AuthenticationType AvailabilityStatus IsAdminManaged IsDefault IsInitial IsRoot IsVerified Manufacturer Model PasswordNotificationWindowInDays PasswordValidityPeriodInDays SupportedServices\n--              ------------------ ------------------ -------------- --------- --------- ------ ---------- ------------ ----- -------------------------------- ---------------------------- -----------------\ntestingDemo.com Managed                               True           False     False     False  False                                                                                       {}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Domain - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to set the default domain for new user account creation in Microsoft Entra ID. It first connects to Entra ID using Connect-Entra and scopes, and then uses Set-EntraBetaDomain to set the specified domain as the default. Domain.ReadWrite.All scope is required.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaDomain.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Domain.ReadWrite.All'\nSet-EntraBetaDomain -Name Contoso.com -IsDefault $true\n```\n\n----------------------------------------\n\nTITLE: Enable/Disable User Account PowerShell\nDESCRIPTION: This example enables or disables a user account in Microsoft Entra ID. It requires the 'User.ReadWrite.All' scope and utilizes the Set-EntraBetaUser cmdlet with the -UserId and -AccountEnabled parameters, where $true enables the account and $false disables it.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUser.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nSet-EntraBetaUser -UserId 'SawyerM@contoso.com' -AccountEnabled $true\n```\n\n----------------------------------------\n\nTITLE: Set User Thumbnail Photo from Byte Array - PowerShell\nDESCRIPTION: Sets the thumbnail photo of a user using a byte array. Requires the 'User.ReadWrite' or 'User.ReadWrite.All' permission.  The -ImageByteArray parameter specifies the byte array representing the image data, and -UserId specifies the target user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUserThumbnailPhoto.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-EntraUserThumbnailPhoto\n [-UserId <String>]\n -ImageByteArray <Byte[]>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Top User Memberships - Entra ID - PowerShell\nDESCRIPTION: This example illustrates how to retrieve the top three user memberships in Microsoft Entra ID. It connects to Entra ID with the User.Read scope. It calls the Get-EntraBetaUserMembership cmdlet with the -Top parameter to limit the output to the top 3 memberships for a given user.  The output is formatted to display key properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserMembership.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read'\nGet-EntraBetaUserMembership -UserId 'SawyerM@contoso.com' -Top 3 |\nSelect-Object Id, displayName, createdDateTime, '@odata.type' |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get Audit Logs by Group Creation - PowerShell\nDESCRIPTION: This code snippet retrieves audit logs specifically related to group creation within Microsoft Entra ID. It uses the `Get-EntraAuditDirectoryLog` cmdlet with a `-Filter` parameter to specify the activity display name as 'Add group' and targets a specific group identified by its ID, obtained through `Get-EntraGroup`. Requires connection to Entra ID with appropriate scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAuditDirectoryLog.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All, Directory.Read.All'\n$groupId = (Get-EntraGroup -SearchString 'Woodgrove DevOps').Id\nGet-EntraAuditDirectoryLog -Filter \"\n    activityDisplayName eq 'Add group' \n    and targetResources/any(r:r/id eq '$groupId')\"\n```\n\n----------------------------------------\n\nTITLE: Resolve Tenants from File (Tenant IDs) - Entra PowerShell\nDESCRIPTION: This example demonstrates resolving multiple Entra tenants by reading a list of Tenant IDs from a file and passing it to the Resolve-EntraTenant cmdlet.  It requires the 'CrossTenantInformation.ReadBasic.All' scope. The file 'TenantIdList.txt' should contain one TenantId per line.  The output displays details for each resolved tenant. Note: The example in the original document uses `Resolve-EntraBetaTenant`, which is not the cmdlet being documented. I am using `Resolve-EntraTenant`\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Resolve-EntraTenant.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'CrossTenantInformation.ReadBasic.All'\n$tenantList = Get-Content .\\TenantIdList.txt\nResolve-EntraTenant -TenantId $tenantList\n```\n\nLANGUAGE: powershell\nCODE:\n```\nEnvironment                   : Global\nValueToResolve                : Example1.com\nValueFormat                   : TenantId\nResult                        : Resolved\nResultMessage                 : Resolved Tenant\nTenantId                      : aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb\nDisplayName                   : Example1, Ltd\nDefaultDomainName             : example.com\nFederationBrandName           :\nOidcMetadataResult            : Resolved\nOidcMetadataTenantId          : aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb\nOidcMetadataTenantRegionScope : NA\n\nEnvironment                   : Global\nValueToResolve                : Example2.com\nValueFormat                   : TenantId\nResult                        : Resolved\nResultMessage                 : Resolved Tenant\nTenantId                      : aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb\nDisplayName                   : Example2, Ltd\nDefaultDomainName             : Example.com\nFederationBrandName           :\nOidcMetadataResult            : Resolved\nOidcMetadataTenantId          : aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb\nOidcMetadataTenantRegionScope : NA\n```\n\n----------------------------------------\n\nTITLE: Resolve Domain Names from File - PowerShell\nDESCRIPTION: This example demonstrates how to resolve multiple Microsoft Entra tenants using a list of domain names from a file.  It starts by connecting to Entra ID using `Connect-Entra` with the appropriate scope.  Then, it reads the list of domain names from a file named `DomainList.txt` using `Get-Content` and stores them in the `$domainList` variable. Finally, it uses `Resolve-EntraBetaTenant` with the `-DomainName` parameter to resolve each tenant in the list.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Resolve-EntraBetaTenant.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'CrossTenantInformation.ReadBasic.All'\n$domainList = Get-Content .\\DomainList.txt\nResolve-EntraBetaTenant -DomainName $domainList\n```\n\n----------------------------------------\n\nTITLE: Removing a Group using Pipelining - PowerShell\nDESCRIPTION: This code snippet demonstrates how to remove a group from Microsoft Entra ID using the Remove-EntraBetaGroup cmdlet with pipelining. It retrieves the group object using Get-EntraBetaGroup and pipes it directly to Remove-EntraBetaGroup, simplifying the command. Requires connecting to Entra ID with 'Group.ReadWrite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaGroup.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All'\nGet-EntraBetaGroup -Filter \"DisplayName eq 'HelpDesk Team Leaders'\" | Remove-EntraBetaGroup\n```\n\n----------------------------------------\n\nTITLE: Get a specific custom security attribute definition - PowerShell\nDESCRIPTION: This PowerShell code snippet retrieves a specific custom security attribute definition using its name and ID. It first connects to Entra ID with the required scopes, then retrieves the attribute definition by its name, and finally fetches the definition using its ID. The output displays the properties of the retrieved attribute definition.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraCustomSecurityAttributeDefinition.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'CustomSecAttributeDefinition.Read.All, CustomSecAttributeDefinition.ReadWrite.All'\n$attributeDefinition = Get-EntraCustomSecurityAttributeDefinition | Where-Object { $_.Name -eq 'Engineering' }\nGet-EntraCustomSecurityAttributeDefinition -Id $attributeDefinition.Id\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId                      AttributeSet Description            IsCollection IsSearchable Name        Status    Type   UsePreDefinedValuesOnly\n--                      ------------ -----------            ------------ ------------ ----        ------    ----   -----------------------\nEngineering_ProjectDate Engineering  Target completion date False        True         ProjectDate Available String False\n```\n\n----------------------------------------\n\nTITLE: Get Permission Grant Condition Sets - Includes - PowerShell\nDESCRIPTION: This PowerShell code retrieves all permission grant condition sets that are included in a specified permission grant policy. It first connects to Entra ID with the necessary scopes, retrieves the permission grant policy based on its ID, and then uses Get-EntraPermissionGrantConditionSet to fetch the condition sets. The PolicyId and ConditionSetType parameters are used to specify the policy and that the included condition sets should be retrieved.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraPermissionGrantConditionSet.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.PermissionGrant'\n$permissionGrantPolicy = Get-EntraPermissionGrantPolicy | Where-Object { $_.Id -eq 'my-custom-consent-policy' }\nGet-EntraPermissionGrantConditionSet -PolicyId $permissionGrantPolicy.Id -ConditionSetType 'includes'\n```\n\n----------------------------------------\n\nTITLE: Retrieve Application Proxy Application (PowerShell)\nDESCRIPTION: This example demonstrates how to retrieve an application configured for Application Proxy using Get-EntraBetaApplicationProxyApplication. It first connects to Entra ID and then retrieves the application using its display name, finally getting the proxy application using the application ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationProxyApplication.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\n$application = Get-EntraBetaApplication -Filter \"DisplayName eq 'Contoso App Proxy'\"\nGet-EntraBetaApplicationProxyApplication -ApplicationId $application.Id\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nAlternateUrl ApplicationServerTimeout ApplicationType ExternalAuthenticationType ExternalUrl\n------------ ------------------------ --------------- -------------------------- -----------\n             Long                     enterpriseapp   aadPreAuthentication      \nhttps://testp-m365x99297270.msapppr...\n```\n\n----------------------------------------\n\nTITLE: Remove Entra Group - Example 1 - PowerShell\nDESCRIPTION: This example demonstrates how to remove a group in Microsoft Entra ID using the GroupId. It first connects to Entra ID with the required scope and retrieves the group to delete. Requires the Microsoft.Entra module and Group.ReadWrite.All scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraGroup.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All'\n$group = Get-EntraGroup -Filter \"DisplayName eq 'HelpDesk Team Leaders'\"\nRemove-EntraGroup -GroupId $group.Id\n```\n\n----------------------------------------\n\nTITLE: Remove Application by ID - PowerShell\nDESCRIPTION: This code snippet demonstrates how to remove an application object by its ID using the Remove-EntraBetaApplication cmdlet. It requires the ApplicationId parameter, which specifies the ID of the application to be deleted. Ensure that you have the necessary permissions (Application.ReadWrite.All scope) and are connected to Entra ID before running this command.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaApplication.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraBetaApplication\n -ApplicationId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Top N OAuth2 Permission Grants - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a limited number of OAuth2 permission grant records using the -Top parameter after connecting to Entra ID. This is useful for managing large sets of data.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraOAuth2PermissionGrant.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\nGet-EntraOAuth2PermissionGrant -Top 2\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                       ClientId                             ConsentType   PrincipalId                           ResourceId                            Scope\n--                                       --------                             -----------   -----------                           ----------                            -----\nA1bC2dE3fH4iJ5kL6mN7oP8qR9sT0u           00001111-aaaa-2222-bbbb-3333cccc4444 AllPrincipals                                       a0a0a0a0-bbbb-cccc-dddd-e1e1e1e1e1e1  User.ReadBasic.All\nC2dE3fH4iJ5kL6mN7oP8qR9sT0uV1w           00001111-aaaa-2222-bbbb-3333cccc4444 AllPrincipals                                       b1b1b1b1-cccc-dddd-eeee-f2f2f2f2f2f2  User.Read\n```\n\n----------------------------------------\n\nTITLE: Retrieve Group Lifecycle Policy by Alternate Email - PowerShell\nDESCRIPTION: This code snippet retrieves a specific group lifecycle policy by filtering based on the alternate notification email. It first connects to Entra ID with the required scope and then uses the Where-Object cmdlet to filter the results.\n\nDependencies: Microsoft.Entra module, Connect-Entra cmdlet.\n\nInput: Requires 'Directory.Read.All' scope and an existing group lifecycle policy with a known alternate notification email.\nOutput: Displays the properties of the specific group lifecycle policy that matches the email address.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraGroupLifecyclePolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\n$policy = Get-EntraGroupLifecyclePolicy | Where-Object {$_.AlternateNotificationEmails -eq 'example@contoso.com'}\nGet-EntraGroupLifecyclePolicy -GroupLifecyclePolicyId $policy.Id\n```\n\n----------------------------------------\n\nTITLE: Invite User: Basic Invitation - PowerShell\nDESCRIPTION: This example demonstrates how to invite a new external user to your directory by specifying the email address, whether to send an invitation message, and the redirect URL. It uses the `New-EntraInvitation` cmdlet with the `-InvitedUserEmailAddress`, `-SendInvitationMessage`, and `-InviteRedirectUrl` parameters.  It depends on the `Connect-Entra` cmdlet for authentication with the required scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraInvitation.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Invite.All'\n$emailAddress = 'someexternaluser@externaldomain.com'\n$sendInvitationMessage = $True\n$redirectUrl = 'https://myapps.contoso.com'\nNew-EntraInvitation -InvitedUserEmailAddress $emailAddress -SendInvitationMessage $sendInvitationMessage -InviteRedirectUrl $redirectUrl\n```\n\n----------------------------------------\n\nTITLE: Create Trust Framework Policy from Content - PowerShell\nDESCRIPTION: This example demonstrates how to create a trust framework policy by directly providing the policy content as a string. It first connects to Entra ID with the required scopes and then uses the New-EntraBetaTrustFrameworkPolicy cmdlet with the -Content parameter to create the policy.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaTrustFrameworkPolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.TrustFramework'\n$policyContent = Get-Content 'C:\\temp\\CreatedPolicy.xml' | out-string\nNew-EntraBetaTrustFrameworkPolicy -Content $policyContent\n```\n\n----------------------------------------\n\nTITLE: Filter DirSync errors - PowerShell\nDESCRIPTION: This example retrieves directory synchronization errors and filters the results based on the 'propertyCausingError' property, specifically looking for errors related to 'UserPrincipalName'. The output is formatted into a table with autosizing.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirectoryObjectOnPremisesProvisioningError.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All', 'Directory.Read.All', 'Group.Read.All', 'Contacts.Read'\nGet-EntraBetaDirectoryObjectOnPremisesProvisioningError | where-Object propertyCausingError -eq 'UserPrincipalName' | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Set Entra Group Membership Rule - PowerShell\nDESCRIPTION: This example demonstrates how to update the membership rule of a specified group in Microsoft Entra ID. It retrieves the group and sets the MembershipRule property to a new rule.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaGroup.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All'\n$group = Get-EntraBetaGroup -Filter \"DisplayName eq 'HelpDesk Team Leaders'\"\nSet-EntraBetaGroup -GroupId $group.Id -MembershipRule '(user.UserType -contains \"Member\")'\n```\n\n----------------------------------------\n\nTITLE: Listing Users with Revoked Sessions (PowerShell)\nDESCRIPTION: This snippet demonstrates how to list all users who have had their sessions revoked in the last 30 days. It connects to Entra ID, calculates the date 30 days in the past, and then filters users based on the signInSessionsValidFromDateTime property to find users with revoked sessions within the specified timeframe.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUser.md#_snippet_18\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\n$pastDate = (Get-Date).AddDays(-30).ToUniversalTime()\nGet-EntraBetaUser | Where-Object { $_.signInSessionsValidFromDateTime -ge $pastDate } |\nSelect-Object DisplayName, UserPrincipalName, signInSessionsValidFromDateTime\n```\n\n----------------------------------------\n\nTITLE: Get Top N Devices - EntraBetaDevice - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a specified number of devices (in this case, the top 2) from Microsoft Entra ID. It requires the 'Device.Read.All' scope and uses the Get-EntraBetaDevice cmdlet with the -Top parameter. The output displays the first N devices with properties such as Id, AccountEnabled, and DeviceId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDevice.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraBetaDevice -Top 2\n```\n\n----------------------------------------\n\nTITLE: Connect to Entra ID with System-Assigned Managed Identity\nDESCRIPTION: Connects to Entra ID using a system-assigned managed identity.  This uses an automatically managed identity tied to the lifecycle of a service instance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Connect-Entra.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Identity\n```\n\n----------------------------------------\n\nTITLE: New Entra Application Password Credential - Start Date\nDESCRIPTION: This example demonstrates creating a password credential with a specified start date.  It connects to Entra ID, retrieves the application object, sets the `$startDate` variable to the current date, and then uses the `New-EntraApplicationPasswordCredential` cmdlet with the `-ApplicationId`, `-CustomKeyIdentifier`, and `-StartDate` parameters to create the credential.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplicationPasswordCredential.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraApplication -Filter \"displayName eq '<displayName>'\"\n$startDate = (Get-Date).AddYears(0)\nNew-EntraApplicationPasswordCredential -ApplicationId $application.Id -CustomKeyIdentifier '<userfriendlyDisplayName>' -StartDate $startDate\n```\n\n----------------------------------------\n\nTITLE: Create a Service Principal - PowerShell\nDESCRIPTION: This code snippet retrieves an existing Entra application (based on display name) and then creates a service principal for that application. The `AppId` from the application object is used in the `New-EntraServicePrincipal` command. Finally, the Id, DisplayName, AppId, and SignInAudience properties of the newly created service principal are formatted and displayed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/how-to-grant-revoke-api-permissions.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$application = Get-EntraApplication -Filter \"displayName eq 'My application'\"\nNew-EntraServicePrincipal -AppId $application.AppId |\n  Format-List Id, DisplayName, AppId, SignInAudience\n```\n\n----------------------------------------\n\nTITLE: Get Top N Administrative Unit Members by ID - PowerShell\nDESCRIPTION: This example retrieves a specified number of (top N) members of an administrative unit given its ID. The -Top parameter is used to limit the number of results. Requires 'AdministrativeUnit.ReadWrite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAdministrativeUnitMember.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.ReadWrite.All'\n$administrativeUnit = Get-EntraAdministrativeUnit -Filter \"DisplayName eq '<administrativeunit-display-name>'\"\nGet-EntraAdministrativeUnitMember -AdministrativeUnitId $administrativeUnit.Id -Top 3 |\nSelect-Object Id, DisplayName, '@odata.type', createdDateTime\n```\n\n----------------------------------------\n\nTITLE: Retrieve Microsoft 365 groups - PowerShell\nDESCRIPTION: This example retrieves Microsoft 365 (Unified) groups from Microsoft Entra ID. It uses the -Filter parameter to specify that only groups with a groupType of 'Unified' should be returned. The -Top parameter limits the number of results to 4.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaGroup.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All'\nGet-EntraBetaGroup -Filter \"groupTypes/any(g:g eq 'Unified')\" -Top 4\n```\n\n----------------------------------------\n\nTITLE: Get All Licenses in the Tenant - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all licenses in the tenant. It utilizes `Get-EntraTenantDetail` to get tenant details and pipes the output to `Select-Object` to expand the `ProvisionedPlans` property.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraTenantDetail.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All'\nGet-EntraTenantDetail | Select-Object -ExpandProperty ProvisionedPlans\n```\n\nLANGUAGE: powershell\nCODE:\n```\nCapabilityStatus ProvisioningStatus Service                       AdditionalProperties\n---------------- ------------------ -------                       --------------------\nEnabled          Success            SharePoint\nEnabled          Success            exchange\nEnabled          Success            exchange\nEnabled          Success            exchange\nEnabled          Success            SCO\nEnabled          Success            exchange\nEnabled          Success            SharePoint\nEnabled          Success            CloudPC-MX\nEnabled          Success            YammerEnterprise\n```\n\n----------------------------------------\n\nTITLE: Assigning User to Specific Role within Application - PowerShell\nDESCRIPTION: This example shows how to assign a user to a specific application role within an application. It retrieves the service principal and user, then uses the AppRoles property of the service principal to get the AppRoleId.  The script requires the 'AppRoleAssignment.ReadWrite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraUserAppRoleAssignment.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AppRoleAssignment.ReadWrite.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"DisplayName eq 'Box'\"\n$user = Get-EntraUser -UserId 'SawyerM@contoso.com'\n$params = @{\n    UserId      = $user.Id\n    PrincipalId = $user.Id\n    ResourceId  = $servicePrincipal.Id\n    AppRoleId   = $servicePrincipal.AppRoles[1].Id\n}\nNew-EntraUserAppRoleAssignment @params\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDeletedDateTime Id                                          AppRoleId                            CreatedDateTime     PrincipalDisplayName PrincipalId                          PrincipalType ResourceDisplayName\n--------------- --                                          ---------                            ---------------     -------------------- -----------                          ------------- -------------------\n                A1bC2dE3fH4iJ5kL6mN7oP8qR9sT0u 00aa00aa-bb11-cc22-dd33-44ee44ee44ee 06/18/2024 09:47:00 Sawyer Miller        1aaaaaa1-2bb2-3cc3-4dd4-5eeeeeeeeee5 User          Box\n```\n\n----------------------------------------\n\nTITLE: Update Device Account Enabled - PowerShell\nDESCRIPTION: This example demonstrates how to enable or disable a device account using the Set-EntraDevice cmdlet. It connects to Entra ID with necessary scopes, retrieves the device object, and then updates the AccountEnabled property.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraDevice.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.AccessAsUser.All', 'Device.ReadWrite.All'\n$device = Get-EntraDevice -Filter \"DisplayName eq 'Woodgrove Desktop'\"\nSet-EntraDevice -DeviceObjectId $device.ObjectId -AccountEnabled $true\n```\n\n----------------------------------------\n\nTITLE: Get Application Service Endpoint by ID - PowerShell\nDESCRIPTION: This example shows how to retrieve the service endpoint of an application specified by its Object ID. It first connects to Entra ID using the Connect-Entra cmdlet with the 'Application.Read.All' scope, then retrieves a service principal using Get-EntraBetaServicePrincipal filtered by display name. Finally, it retrieves the service endpoint using Get-EntraBetaApplicationServiceEndpoint with the ServicePrincipalId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationServiceEndpoint.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"DisplayName eq 'Contoso Helpdesk App'\"\nGet-EntraBetaApplicationServiceEndpoint -ServicePrincipalId $servicePrincipal.Id\n```\n\n----------------------------------------\n\nTITLE: Get Top Registered Users of a Device - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve the top two registered users for a specified device. It connects to Entra ID, retrieves the device object, and then uses the `Get-EntraDeviceRegisteredUser` cmdlet with the `-Top` parameter to retrieve the specified number of users. The output is formatted for readability.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeviceRegisteredUser.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\n$device = Get-EntraDevice -SearchString '<device-display-name>'\nGet-EntraDeviceRegisteredUser -DeviceId $device.Id -Top 2 |\nSelect-Object Id, displayName, UserPrincipalName, createdDateTime, userType, accountEnabled |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Connect to Entra with required scopes - PowerShell\nDESCRIPTION: Connects to Microsoft Entra ID with the necessary scopes using the Connect-Entra cmdlet. This establishes the session needed for subsequent operations on Microsoft Entra resources.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/create-custom-application.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Connect to Entra with required scopes\nConnect-Entra -Scopes 'Application.ReadWrite.All'\n```\n\n----------------------------------------\n\nTITLE: Update IP Named Location Policy - PowerShell\nDESCRIPTION: This snippet updates an IP named location policy in Microsoft Entra ID using the PolicyId. It utilizes the Set-EntraBetaNamedLocationPolicy cmdlet to modify the policy's OdataType, IsTrusted status, IncludeUnknownCountriesAndRegions status, and IP ranges. Requires the 'Policy.ReadWrite.ConditionalAccess' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaNamedLocationPolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ConditionalAccess'\n$policy = Get-EntraBetaNamedLocationPolicy | Where-Object {\"$_.DisplayName -eq 'IP named location policy'\"}\n$ipRanges = New-Object -TypeName Microsoft.Open.MSGraph.Model.IpRange\n$ipRanges.cidrAddress = '6.5.4.3/32'\n$type = '#microsoft.graph.ipNamedLocation'\nSet-EntraBetaNamedLocationPolicy -PolicyId $policy.Id -OdataType $type -IsTrusted $false -IncludeUnknownCountriesAndRegions $false -IpRanges $ipRanges\n```\n\n----------------------------------------\n\nTITLE: Remove User Sponsor (PowerShell)\nDESCRIPTION: This example demonstrates how to remove a user sponsor using the SponsorId. It first retrieves the sponsor's information using Get-EntraUserSponsor and then removes the sponsor using Remove-EntraUserSponsor with both UserId and SponsorId specified. Requires the 'User.ReadWrite.All' scope. UserId parameter specifies the UserId or User Principal Name of the User. SponsorId parameter specifies the ID of the sponsor to remove.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraUserSponsor.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\n$sponsor = Get-EntraUserSponsor -UserId 'SawyerM@contoso.com' -Top 1\nRemove-EntraUserSponsor -UserId 'SawyerM@Contoso.com' -SponsorId $sponsor.Id\n```\n\n----------------------------------------\n\nTITLE: Set User Extension - Single Value Example - PowerShell\nDESCRIPTION: This example shows how to update a user's extension attribute for a specified user. It uses the Set-EntraUserExtension cmdlet with the -UserId, -ExtensionName, and -ExtensionValue parameters. Prior connection to Entra ID with appropriate scopes ('User.ReadWrite.All') is required.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUserExtension.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\n$extensionName = 'extension_e5e29b8a85d941eab8d12162bd004528_JobGroup'\n$extensionValue = 'Job Group D'\nSet-EntraUserExtension -UserId 'SawyerM@contoso.com' -ExtensionName $extensionName -ExtensionValue $extensionValue\n```\n\n----------------------------------------\n\nTITLE: Get Top N User App Role Assignments - PowerShell\nDESCRIPTION: This example retrieves a limited number of application role assignments (top 2 in this case) for the specified user. It connects to Entra ID using Connect-Entra and then uses Get-EntraUserAppRoleAssignment with the -UserId and -Top parameters. The `-Limit` alias can also be used for `-Top`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserAppRoleAssignment.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AppRoleAssignment.ReadWrite.All', 'Directory.Read.All'\nGet-EntraUserAppRoleAssignment -UserId 'SawyerM@contoso.com' -Top 2\n```\n\n----------------------------------------\n\nTITLE: Get All Service Principal Memberships Example - PowerShell\nDESCRIPTION: This example showcases how to retrieve all memberships of a service principal using the Get-EntraBetaServicePrincipalMembership cmdlet with the -All parameter. It connects to Entra, gets the service principal, and retrieves all memberships. Requires 'Application.Read.All' scope and the service principal Id.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalMembership.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraBetaServicePrincipalMembership -ServicePrincipalId $servicePrincipal.Id -All | Select-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Retrieve Top Object Setting - Example 3 - PowerShell\nDESCRIPTION: Retrieves the top one object setting from Microsoft Entra ID. Connects to Entra ID, retrieves a group using its display name, and then uses the Get-EntraObjectSetting cmdlet to retrieve only the first object setting, using the -Top parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraObjectSetting.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\n$group = Get-EntraGroup -Filter \"DisplayName eq 'Sales and Marketing'\"\nGet-EntraObjectSetting -TargetType 'Groups' -TargetObjectId $group.Id -Top 1\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId                                   DisplayName         TemplateId\n--                                   -----------         ----------\naaaaaaaa-0000-1111-2222-bbbbbbbbbbbb Group.Unified.Guest 22cc22cc-dd33-ee44-ff55-66aa66aa66aa\n```\n\n----------------------------------------\n\nTITLE: Set User Password, Force Change on Login (PowerShell)\nDESCRIPTION: Sets a user's password and forces the user to change their password during their next login. It connects to Entra ID, converts a plain-text password to a secure string, and then uses the `Set-EntraUserPassword` cmdlet with the `-ForceChangePasswordNextLogin` parameter set to `$True`.  Requires the 'Directory.AccessAsUser.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUserPassword.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nconnect-Entra -Scopes 'Directory.AccessAsUser.All'\n$newPassword= '<strong-password>'\n$securePassword = ConvertTo-SecureString $newPassword -AsPlainText -Force\nSet-EntraUserPassword -UserId 'SawyerM@contoso.com' -Password $securePassword -ForceChangePasswordNextLogin $True\n```\n\n----------------------------------------\n\nTITLE: Creating a settings object - PowerShell\nDESCRIPTION: This example demonstrates how to create a settings object using the `New-EntraBetaObjectSetting` cmdlet. It first connects to Entra, retrieves a directory setting template, configures the setting, retrieves a group, and then creates the settings object, associating it with the specified group. Dependencies include the `Microsoft.Entra.Beta` module and a pre-existing group in Entra ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaObjectSetting.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\n$template = Get-EntraBetaDirectorySettingTemplate | Where-Object { $_.displayname -eq 'Group.Unified.Guest' }\n$setting = $template.CreateDirectorySetting()\n$setting['AllowToAddGuests'] = $False\n$group = Get-EntraBetaGroup -Filter \"DisplayName eq 'Sales and Marketing'\"\nNew-EntraBetaObjectSetting -TargetType 'Groups' -TargetObjectId $group.Id -DirectorySetting $setting\n```\n\n----------------------------------------\n\nTITLE: Add User as Service Principal Owner\nDESCRIPTION: This PowerShell example demonstrates how to add a user as an owner to a service principal using `Add-EntraBetaServicePrincipalOwner`. It first connects to Entra using `Connect-Entra`, retrieves the service principal and user objects using `Get-EntraBetaServicePrincipal` and `Get-EntraBetaUser` respectively, and then adds the user as an owner to the service principal.  Requires the 'Application.ReadWrite.All' and 'Application.ReadWrite.OwnedBy' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaServicePrincipalOwner.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All', 'Application.ReadWrite.OwnedBy'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\n$owner = Get-EntraBetaUser -UserId 'SawyerM@contoso.com'\nAdd-EntraBetaServicePrincipalOwner -ServicePrincipalId $servicePrincipal.Id -OwnerId $owner.Id\n```\n\n----------------------------------------\n\nTITLE: Get Outbound Sign-in Events for a Specific Tenant - PowerShell\nDESCRIPTION: This example retrieves sign-in events where local users accessed a specified external tenant.  It requires 'AuditLog.Read.All' and 'Directory.Read.All' scopes.  The `-AccessDirection` parameter is set to `Outbound` and the `-ExternalTenantId` parameter is used.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaCrossTenantAccessActivity.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All', 'Directory.Read.All'\nGet-EntraBetaCrossTenantAccessActivity -AccessDirection Outbound -ExternalTenantId 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb'\n```\n\n----------------------------------------\n\nTITLE: Remove Application Owner Example (Entra ID)\nDESCRIPTION: Demonstrates how to remove an owner from a specific application using Remove-EntraApplicationOwner.  It connects to Entra ID, retrieves the application and owner objects based on display name and user principal name, respectively, and then removes the owner from the application. Dependencies include the Microsoft.Entra module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraApplicationOwner.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All'\n$application = Get-EntraApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\n$owner = Get-EntraApplicationOwner -ApplicationId $application.Id | Where-Object {$_.userPrincipalName -eq 'SawyerM@contoso.com'}\nRemove-EntraApplicationOwner -ApplicationId $application.Id -OwnerId $owner.Id\n```\n\n----------------------------------------\n\nTITLE: Connect with Scopes and Authorization Code Flow - PowerShell\nDESCRIPTION: Connects to Microsoft Entra PowerShell using authorization code flow with specified scopes to request specific permissions (User.Read.All, Group.ReadWrite.All).  This example shows how to request permissions to get a user's details.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/delegated-access-auth.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All', 'Group.ReadWrite.All'\n```\n\n----------------------------------------\n\nTITLE: Updates group lifecycle policy - Set-EntraBetaGroupLifecyclePolicy (PowerShell)\nDESCRIPTION: This example demonstrates how to update a group lifecycle policy using Set-EntraBetaGroupLifecyclePolicy. It first connects to Entra ID with the necessary scopes, retrieves a specific policy based on the AlternateNotificationEmails property, and then updates the policy by specifying the GroupLifecyclePolicyId, GroupLifetimeInDays, AlternateNotificationEmails, and ManagedGroupTypes parameters.  It requires the Microsoft.Entra.Beta module and appropriate permissions to modify group lifecycle policies.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaGroupLifecyclePolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\n$policy = Get-EntraBetaGroupLifecyclePolicy | Where-Object {$_.AlternateNotificationEmails -eq 'example@contoso.com'}\nSet-EntraBetaGroupLifecyclePolicy -GroupLifecyclePolicyId $policy.Id -GroupLifetimeInDays 200 -AlternateNotificationEmails 'example@contoso.com' -ManagedGroupTypes 'All'\n```\n\nLANGUAGE: Output\nCODE:\n```\nId                                   AlternateNotificationEmails GroupLifetimeInDays ManagedGroupTypes\n--                                   --------------------------- ------------------- -----------------\nffffffff-5555-6666-7777-aaaaaaaaaaaa example@contoso.com                     200                 All\n```\n\n----------------------------------------\n\nTITLE: Get Role Assignments - PowerShell\nDESCRIPTION: Retrieves all role assignments in the Microsoft Entra ID. It requires connecting to Entra ID with specific scopes for role and entitlement management. It lists role assignments with their IDs, Principal IDs, Role Definition IDs, Directory Scope IDs, and App Scope IDs.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirectoryRoleAssignment.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory','EntitlementManagement.Read.All'\nGet-EntraBetaDirectoryRoleAssignment\n```\n\n----------------------------------------\n\nTITLE: Get Directory Synchronization Settings - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve directory synchronization settings using the Get-EntraDirSyncConfiguration cmdlet. It first connects to Entra ID with the necessary scopes and then executes the command to fetch the settings, displaying the AccidentalDeletionThreshold and DeletionPreventionType.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDirSyncConfiguration.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'OnPremDirectorySynchronization.ReadWrite.All'\nGet-EntraDirSyncConfiguration\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nAccidentalDeletionThreshold DeletionPreventionType\n--------------------------- ----------------------\n                        500 enabledForCount\n```\n\n----------------------------------------\n\nTITLE: Get Application by ApplicationId - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a specific application by providing its ApplicationId.  It requires the 'Application.Read.All' scope and connects to Entra ID before executing the Get-EntraApplication cmdlet. The output displays the application's properties such as DisplayName, Id, AppId, SignInAudience, and PublisherDomain.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplication.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraApplication -ApplicationId 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb'\n```\n\n----------------------------------------\n\nTITLE: Create User with MailNickName\nDESCRIPTION: This example creates a new user using the MailNickName parameter. It first connects to Entra, creates a PasswordProfile object, and then uses the New-EntraBetaUser cmdlet with parameters including DisplayName, PasswordProfile, UserPrincipalName, AccountEnabled and MailNickName. Requires the User.ReadWrite.All scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaUser.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\n$passwordProfile = New-Object -TypeName Microsoft.Open.AzureAD.Model.PasswordProfile\n$passwordProfile.Password = '<Password>'\n$params = @{\n    DisplayName = 'New User'\n    PasswordProfile = $passwordProfile\n    UserPrincipalName = 'NewUser@contoso.com'\n    AccountEnabled = $true\n    MailNickName = 'Newuser'\n}\n\nNew-EntraBetaUser @params\n```\n\nLANGUAGE: powershell\nCODE:\n```\nDisplayName Id                                   Mail UserPrincipalName\n----------- --                                   ---- -----------------\nNew User 00aa00aa-bb11-cc22-dd33-44ee44ee44ee      NewUser@contoso.com\n```\n\n----------------------------------------\n\nTITLE: Update Permission Grant Condition Set - Example 2\nDESCRIPTION: This example showcases updating a permission grant condition set using a hashtable for parameters. It connects to Entra ID, retrieves policy and condition set information, constructs a hashtable with parameters for updating the condition set, and then calls Set-EntraBetaPermissionGrantConditionSet with the hashtable.  This provides a more organized way to pass multiple parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaPermissionGrantConditionSet.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.PermissionGrant'\n$permissionGrantPolicy = Get-EntraBetaPermissionGrantPolicy | Where-Object { $_.Id -eq 'my-custom-consent-policy' }\n$conditionSet = Get-EntraBetaPermissionGrantConditionSet -PolicyId $permissionGrantPolicy.Id -ConditionSetType 'includes' | Where-Object { $_.PermissionType -eq 'delegated' }\n$params = @{\n    PolicyId                                    = $permissionGrantPolicy.Id\n    ConditionSetType                            = 'includes'\n    Id                                          = $conditionSet.Id\n    PermissionType                              = 'delegated'\n    PermissionClassification                    = 'low'\n    ResourceApplication                         = 'a0a0a0a0-bbbb-cccc-dddd-e1e1e1e1e1e1'\n    Permissions                                 = @('All')\n    ClientApplicationIds                        = @('All')\n    ClientApplicationTenantIds                  = @('All')\n    ClientApplicationPublisherIds               = @('All')\n    ClientApplicationsFromVerifiedPublisherOnly = $true\n}\n\nSet-EntraBetaPermissionGrantConditionSet @params\n```\n\n----------------------------------------\n\nTITLE: Get Audit Logs by ActivityDisplayName - PowerShell\nDESCRIPTION: This code snippet retrieves audit logs based on a specific `ActivityDisplayName`. It connects to Entra ID with specified scopes and uses the `Get-EntraAuditDirectoryLog` cmdlet with the `-Filter` parameter to search for logs where the `ActivityDisplayName` is equal to 'Update rollout policy of feature'. The `-Top` parameter limits the results to one log entry. `-Limit` can be used as an alias for `-Top`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAuditDirectoryLog.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All, Directory.Read.All'\nGet-EntraAuditDirectoryLog -Filter \"ActivityDisplayName eq 'Update rollout policy of feature'\" -Top 1\n```\n\n----------------------------------------\n\nTITLE: Get Permission Grant Policy by ID\nDESCRIPTION: Retrieves a specific permission grant policy from Microsoft Entra ID using its unique identifier.  Requires the 'Policy.Read.PermissionGrant' scope. The `-Id` parameter specifies the policy's ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraPermissionGrantPolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraPermissionGrantPolicy\n -Id <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.PermissionGrant'\nGet-EntraPermissionGrantPolicy -Id 'testtenant-sampleapp-permissions'\n```\n\n----------------------------------------\n\nTITLE: Add Device to Administrative Unit (Example 3) - PowerShell\nDESCRIPTION: This PowerShell snippet adds a device to a specified administrative unit. It connects to Entra, retrieves the administrative unit and device objects using their display name and SearchString, respectively, then uses Add-EntraAdministrativeUnitMember to add the device to the administrative unit. It requires the AdministrativeUnit.ReadWrite.All scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Add-EntraAdministrativeUnitMember.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.ReadWrite.All'\n$administrativeUnit = Get-EntraAdministrativeUnit -Filter \"DisplayName eq '<administrativeunit-display-name>'\"\n$device = Get-EntraDevice -SearchString 'ContosoDesktop01'\nAdd-EntraAdministrativeUnitMember -AdministrativeUnitId $administrativeUnit.Id -MemberId $device.Id\n```\n\n----------------------------------------\n\nTITLE: New Entra Application Password Credential - Custom Key\nDESCRIPTION: This example shows how to create a new password credential with a custom key identifier for the specified application. It requires connecting to Entra ID with the appropriate scopes, retrieving the application object, and then using the `New-EntraApplicationPasswordCredential` cmdlet with the `-ApplicationId` and `-CustomKeyIdentifier` parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplicationPasswordCredential.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraApplication -Filter \"displayName eq '<displayName>'\"\nNew-EntraApplicationPasswordCredential -ApplicationId $application.Id -CustomKeyIdentifier '<userfriendlyDisplayName>'\n```\n\n----------------------------------------\n\nTITLE: Get Directory Synchronization Settings by TenantId - PowerShell\nDESCRIPTION: This example demonstrates retrieving directory synchronization settings using the Get-EntraDirSyncConfiguration cmdlet with a specific TenantId. It connects to Entra ID, retrieves tenant details using Get-EntraTenantDetail, and then uses the TenantId parameter to fetch settings for that specific tenant.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDirSyncConfiguration.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'OnPremDirectorySynchronization.ReadWrite.All'\n$tenant = Get-EntraTenantDetail\nGet-EntraDirSyncConfiguration -TenantId $tenant.Id\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nAccidentalDeletionThreshold DeletionPreventionType\n--------------------------- ----------------------\n                        500 enabledForCount\n```\n\n----------------------------------------\n\nTITLE: Extract Specific Certificate User IDs - PowerShell\nDESCRIPTION: This example shows how to extract specific certificate user IDs, filtering by type. It retrieves authorization information, then filters the CertificateUserIds to display only the Principal Name (PN) certificate values. `Connect-Entra` is used with the 'User.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserCBAAuthorizationInfo.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\n$userInfo = Get-EntraUserCBAAuthorizationInfo -UserId 'SawyerM@contoso.com'\n$userInfo.AuthorizationInfo.CertificateUserIds | Where-Object Type -eq \"PN\" | Select-Object -ExpandProperty Value\n```\n\n----------------------------------------\n\nTITLE: Retrieve Owned Objects of a Service Principal (Example 1)\nDESCRIPTION: This example retrieves the owned objects of a specified service principal. It first connects to Entra ID with 'Application.Read.All' scopes, retrieves the service principal based on the display name, and then gets the owned objects, selecting the Id, DisplayName, and '@odata.type' properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalOwnedObject.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraServicePrincipalOwnedObject -ServicePrincipalId $servicePrincipal.Id | Select-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Filter Audit Logs by Result in PowerShell\nDESCRIPTION: This command demonstrates how to retrieve all audit logs that have a specific result (e.g., 'failure'). It uses the `Get-EntraBetaAuditDirectoryLog` cmdlet with the `-Filter` parameter and the `-All` parameter to retrieve all matching logs. This is useful for identifying and investigating failed operations within the Microsoft Entra ID environment.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAuditDirectoryLog.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All, Directory.Read.All'\nGet-EntraBetaAuditDirectoryLog -Filter \"result eq 'failure'\" -All\n```\n\n----------------------------------------\n\nTITLE: Get Objects by Type and Object ID - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve Microsoft Entra objects of a specific type using their Object ID. The command connects to Entra ID with the required scopes and then uses `Get-EntraObjectByObjectId` to fetch a 'User' object specified by its GUID.  The `Types` parameter filters the objects returned based on the specified type.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraObjectByObjectId.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\nGet-EntraObjectByObjectId -ObjectIds 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb' -Types User\n```\n\n----------------------------------------\n\nTITLE: Get Application Owner Example - PowerShell\nDESCRIPTION: Demonstrates how to retrieve the owner of an application using the Get-EntraBetaApplicationOwner cmdlet. It first connects to Entra with required scopes, retrieves the application, and then fetches the owner. The results are formatted and displayed in a table showing specific properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationOwner.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraBetaApplication -Filter \"DisplayName eq 'Helpdesk Application'\"\nGet-EntraBetaApplicationOwner -ApplicationId $application.Id |\nSelect-Object Id, displayName, UserPrincipalName, createdDateTime, userType, accountEnabled |\nFormat-Table -AutoSize\n```\n\nLANGUAGE: powershell\nCODE:\n```\nid                                   DisplayName   UserPrincipalName                CreatedDateTime       UserType AccountEnabled\n--                                   -----------   -----------------                ---------------       -------- --------------\nbbbbbbbb-1111-2222-3333-cccccccccccc Adele Vance   AdeleV@contoso.com               10/7/2024 12:33:36 AM Member   True\ndddddddd-3333-4444-5555-eeeeeeeeeeee Cameron White CameronW@contoso.com            10/7/2024 12:34:47 AM Member   True\n```\n\n----------------------------------------\n\nTITLE: Get Memberships of a Contact - PowerShell\nDESCRIPTION: This example shows how to retrieve the memberships of a contact using the Get-EntraContactMembership cmdlet. It first connects to Entra with OrgContact.Read.All scope, retrieves a contact by display name, and then retrieves the contact's memberships, selecting and formatting specific properties for display.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraContactMembership.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'OrgContact.Read.All'\n$contact = Get-EntraContact -Filter \"displayName eq 'Contoso Contact'\"\nGet-EntraContactMembership -OrgContactId $contact.Id |\nSelect-Object Id, DisplayName, '@odata.type', SecurityEnabled | Format-Table -AutoSize\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                   displayName   @odata.type            securityEnabled\n--                                   -----------   -----------            ---------------\nffffffff-5555-6666-7777-aaaaaaaaaaaa All Employees #microsoft.graph.group           False\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Applications by Display Name Filter\nDESCRIPTION: Retrieves deleted applications by filtering on the display name using the `-Filter` parameter. Requires the 'Application.Read.All' scope. The example shows how to construct a filter expression to match a specific display name.  The selected properties are then displayed in a formatted table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedApplication.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraBetaDeletedApplication -Filter \"displayName eq 'Contoso Fieldglass'\" | Select-Object Id, AppId, DisplayName, SignInAudience, PublisherDomain, DeletedDateTime, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Connect with User-Assigned Managed Identity\nDESCRIPTION: Connects to Microsoft Entra ID using a user-assigned managed identity. Requires the ClientId of the managed identity.  User-assigned managed identities are standalone Azure resources.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Connect-Entra.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Identity -ClientId 'User_Assigned_Managed_identity_Client_Id'\n```\n\n----------------------------------------\n\nTITLE: List Disabled Users - PowerShell\nDESCRIPTION: This script retrieves and displays a list of disabled user accounts in Entra ID. It uses the `Get-EntraUser` cmdlet with a filter to select only users where `accountEnabled` is `false`. The script then selects and displays the display name, ID, mail, and user principal name of the disabled users.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-user.md#_snippet_14\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nGet-EntraUser -Filter \"accountEnabled eq false\" | Select-Object DisplayName, Id, Mail, UserPrincipalName\n```\n\n----------------------------------------\n\nTITLE: Creating a Password Credential with Custom Key Identifier\nDESCRIPTION: This example demonstrates creating a password credential with a custom key identifier.  It connects to Entra ID, retrieves an application, and then creates the password credential, specifying a custom key identifier using the `-CustomKeyIdentifier` parameter. Note: '<displayName>' and '<userfriendlyDisplayName>' should be replaced with actual values.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplicationPasswordCredential.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraBetaApplication -Filter \"displayName eq '<displayName>'\"\nNew-EntraBetaApplicationPasswordCredential -ApplicationId $application.Id -CustomKeyIdentifier '<userfriendlyDisplayName>'\n```\n\n----------------------------------------\n\nTITLE: Retrieve Service Principal Owner - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve the owner of a service principal using the Get-EntraServicePrincipalOwner cmdlet.  It connects to Entra ID, retrieves a service principal by its display name, and then gets the owner's information, selecting specific properties for output.  Requires the 'Application.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalOwner.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraServicePrincipalOwner -ServicePrincipalId $servicePrincipal.Id | Select-Object Id, userPrincipalName, DisplayName, '@odata.type'\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                   userPrincipalName                       displayName    @odata.type\n--                                   -----------------                       -----------    -----------\naaaaaaaa-0000-1111-2222-bbbbbbbbbbbb AlexW@Contoso.com     Alex Wilber    #microsoft.graph.user\nbbbbbbbb-1111-2222-3333-cccccccccccc ChristieC@Contoso.com Christie Cline #microsoft.graph.user\n```\n\n----------------------------------------\n\nTITLE: List Quarantined Provisioning Jobs - PowerShell\nDESCRIPTION: This snippet lists quarantined provisioning jobs by filtering audit logs for the 'Quarantine' activity display name. It selects specific properties such as ID, activity time, category, logged service, result, result reason, and initiator display name, providing a summarized view of the quarantined job's details.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAuditDirectoryLog.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All, Directory.Read.All'\nGet-EntraAuditDirectoryLog -Filter \"activityDisplayName eq 'Quarantine'\" -Limit 1 |\nSelect-Object Id, ActivityDateTime, ActivityDisplayName, Category, LoggedByService, Result, \n              ResultReason, \n              @{Name=\"InitiatedByDisplayName\"; Expression={ $_.targetResources[0].displayName }}\n```\n\n----------------------------------------\n\nTITLE: List Apps Without User Assignment - PowerShell\nDESCRIPTION: This example retrieves all applications that do not require user assignment by using `Where-Object` to filter the results based on the `appRoleAssignmentRequired` property. It retrieves all service principals and then filters those where `appRoleAssignmentRequired` is not equal to `'true'`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipal.md#_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraServicePrincipal -All | Where-Object {$_.appRoleAssignmentRequired -ne 'true'}\n```\n\n----------------------------------------\n\nTITLE: Connect to Entra ID using Certificate Thumbprint - PowerShell\nDESCRIPTION: This snippet demonstrates how to connect to Microsoft Entra ID using certificate-based authentication with the certificate thumbprint. It sets the ClientId, TenantId, and CertificateThumbprint parameters and passes them to the Connect-Entra cmdlet. Replace 'YOUR_APP_ID', 'YOUR_TENANT_ID', and 'YOUR_CERT_THUMBPRINT' with your actual values. Requires the Microsoft Entra PowerShell module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/app-only-access-auth.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$params = @{\n    ClientId = 'YOUR_APP_ID'\n    TenantId = 'YOUR_TENANT_ID'\n    CertificateThumbprint = 'YOUR_CERT_THUMBPRINT'\n}\n\nConnect-Entra @params\n```\n\n----------------------------------------\n\nTITLE: Update Role Definition Properties - PowerShell\nDESCRIPTION: This snippet updates multiple properties (RolePermissions, TemplateId, ResourceScopes, IsEnabled, DisplayName, Description) of a specified role definition in Microsoft Entra ID using a hashtable for parameter passing.  It requires connecting to Entra ID with the 'RoleManagement.ReadWrite.Directory' scope and uses `New-Object` to create a `RolePermission` object.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraDirectoryRoleDefinition.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory'\n$roleDefinition = Get-EntraDirectoryRoleDefinition -Filter \"DisplayName eq '<Role-Definition-Name>'\"\n$rolePermissions = New-object Microsoft.Open.MSGraph.Model.RolePermission\n$rolePermissions.AllowedResourceActions = @(\"microsoft.directory/applications/standard/read\")\n$params = @{\n    UnifiedRoleDefinitionId = $roleDefinition.Id\n    Description             = 'Update'\n    DisplayName             = 'Update'\n    ResourceScopes          = '/'\n    IsEnabled               = $false\n    RolePermissions         = $rolePermissions\n    TemplateId              = 'f2ef992c-3afb-46b9-b7cf-a126ee74c451'\n    Version                 = 2\n}\nSet-EntraDirectoryRoleDefinition @params\n```\n\n----------------------------------------\n\nTITLE: List Users by Country - EntraBetaUser PowerShell\nDESCRIPTION: This example shows how to retrieve all users based in a specific country from Microsoft Entra ID using the `-Filter` parameter.  The `Connect-Entra` cmdlet is used to establish a connection with the required scopes.  `Get-EntraBetaUser` is used with the `-Filter` parameter to specify the condition `Country eq 'Canada'`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUser.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\n$usersInCanada = Get-EntraBetaUser -Filter \"Country eq 'Canada'\"\n$usersInCanada | Select-Object Id, DisplayName, UserPrincipalName, OfficeLocation, Country | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Add Service Principal as Owner\nDESCRIPTION: This PowerShell example demonstrates how to add a service principal as an owner to another service principal using `Add-EntraBetaServicePrincipalOwner`. It connects to Entra, retrieves both service principal objects, and then adds the first service principal as an owner to the second. Requires the 'Application.ReadWrite.All' and 'Application.ReadWrite.OwnedBy' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaServicePrincipalOwner.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All', 'Application.ReadWrite.OwnedBy'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\n$owner = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'IT Department'\"\nAdd-EntraBetaServicePrincipalOwner -ServicePrincipalId $servicePrincipal.Id -OwnerId $owner.Id\n```\n\n----------------------------------------\n\nTITLE: Get top two role definitions (PowerShell)\nDESCRIPTION: This example demonstrates how to retrieve the top two role definitions from Microsoft Entra ID using the `-Top` parameter. It first establishes a connection to Entra ID with required scopes. Then, it uses the `Get-EntraDirectoryRoleDefinition` cmdlet with the `-Top 2` parameter to limit the output to the first two role definitions. The output shows the `DisplayName`, `Id`, `TemplateId`, `Description`, `IsBuiltIn`, and `IsEnabled` properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDirectoryRoleDefinition.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory', 'EntitlementManagement.Read.All'\nGet-EntraDirectoryRoleDefinition -Top 2\n```\n\n----------------------------------------\n\nTITLE: Connecting to Entra ID with Custom App - PowerShell\nDESCRIPTION: This snippet demonstrates how to connect to Microsoft Entra ID using a registered application (custom app) for more granular permission management. It requires the Microsoft Entra PowerShell module to be installed. Replace `<your-custom-app-id>` and `<your-tenant-id>` with the actual application and tenant IDs.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/entra-powershell-best-practices.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -ClientId <your-custom-app-id> -TenantId <your-tenant-id>\n```\n\n----------------------------------------\n\nTITLE: Update Attribute Set MaxAttributesPerSet - PowerShell\nDESCRIPTION: This example demonstrates how to update the MaxAttributesPerSet property of an attribute set using the Set-EntraAttributeSet cmdlet. It connects to Entra ID with the required scopes and then updates the maximum number of custom security attributes using the specified AttributeSetId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraAttributeSet.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'CustomSecAttributeDefinition.ReadWrite.All'\nSet-EntraAttributeSet -AttributeSetId 'Engineering' -MaxAttributesPerSet 10\n```\n\n----------------------------------------\n\nTITLE: Get Specific Custom Security Attribute Definition Example\nDESCRIPTION: This example shows how to retrieve a specific custom security attribute definition by filtering based on its name and then using its ID to fetch the complete definition. Requires the CustomSecAttributeDefinition.Read.All or CustomSecAttributeDefinition.ReadWrite.All scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaCustomSecurityAttributeDefinition.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'CustomSecAttributeDefinition.Read.All, CustomSecAttributeDefinition.ReadWrite.All'\n$attributeDefinition = Get-EntraBetaCustomSecurityAttributeDefinition | Where-Object {$_.Name -eq 'Engineering'}\nGet-EntraBetaCustomSecurityAttributeDefinition -Id $attributeDefinition.Id\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId                      AttributeSet Description            IsCollection IsSearchable Name        Status    Type   UsePreDefinedValuesOnly\n--                      ------------ -----------            ------------ ------------ ----        ------    ----   -----------------------\nEngineering_ProjectDate Engineering  Target completion date False        True         ProjectDate Available String False\n```\n\n----------------------------------------\n\nTITLE: Get Disabled Apps - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all disabled applications by filtering on the `accountEnabled` property set to `false`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipal.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraServicePrincipal -Filter \"accountEnabled eq false\"\n```\n\n----------------------------------------\n\nTITLE: Retrieve User Object Settings - Example 5 - PowerShell\nDESCRIPTION: Retrieves user object settings from Microsoft Entra ID. Connects to Entra ID, retrieves a user using their User ID (email), and retrieves the user object settings using the Get-EntraObjectSetting cmdlet, specifying the TargetType as 'Users' and TargetObjectId as the user's ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraObjectSetting.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\n$user = Get-EntraUser -UserId 'AdeleV@Contoso.com'\nGet-EntraObjectSetting -TargetType 'Users' -TargetObjectId $user.Id\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId ContributionToContentDiscoveryAsOrganizationDisabled ContributionToContentDiscoveryDisabled\n-- ---------------------------------------------------- --------------------------------------\n   False                                                False\n```\n\n----------------------------------------\n\nTITLE: Get a device by ID using Entra PowerShell\nDESCRIPTION: This code snippet retrieves a specific device from the Microsoft Entra directory based on its ObjectId (DeviceId). It requires the Device.Read.All scope and uses the Get-EntraDevice cmdlet with the -ObjectId parameter to specify the target device. Replace 'bbbbbbbb-1111-2222-3333-cccccccccccc' with the actual DeviceId of the device you wish to retrieve.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-devices.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'  \nGet-EntraDevice -ObjectId 'bbbbbbbb-1111-2222-3333-cccccccccccc'\n```\n\n----------------------------------------\n\nTITLE: Get all groups - PowerShell\nDESCRIPTION: This PowerShell snippet retrieves all groups from Microsoft Entra ID. It first connects to Entra ID using the Connect-Entra cmdlet with the 'GroupMember.Read.All' scope, then uses Get-EntraGroup to retrieve all groups. The output displays the DisplayName, Id, MailNickname, and Description of each group.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraGroup.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All'\nGet-EntraGroup\n```\n\n----------------------------------------\n\nTITLE: Get Device Registered Owner - Specific Device\nDESCRIPTION: This example retrieves the registered owner of a device using its ID. It first connects to Entra ID with the 'Device.Read.All' scope, then retrieves the device using a search string. Finally, it gets the registered owner using the `Get-EntraDeviceRegisteredOwner` cmdlet and displays specific properties using `Select-Object` and `Format-Table`.\n\nDependencies: Microsoft.Entra module, Device.Read.All scope\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeviceRegisteredOwner.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\n$device = Get-EntraDevice -SearchString '<device-display-name>'\nGet-EntraDeviceRegisteredOwner -DeviceId $device.Id |\nSelect-Object Id, displayName, UserPrincipalName, createdDateTime, userType, accountEnabled |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Setting User License from Template User (Entra Beta)\nDESCRIPTION: This PowerShell snippet demonstrates how to assign licenses to a target user by copying the assigned licenses from a template user. It retrieves the licenses of the template user and then assigns them to the target user using the `Set-EntraBetaUserLicense` cmdlet. The snippet assumes that the Entra module is connected and the necessary scopes ('User.ReadWrite.All') are granted.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUserLicense.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\n$licensedUser = Get-EntraBetaUser -UserId 'TemplateUser@contoso.com'\n$targetUser = Get-EntraBetaUser -UserId 'SawyerM@contoso.com'\n$sourceUserLicenses = $licensedUser.AssignedLicenses\n$licensesToAssign = New-Object -TypeName Microsoft.Open.AzureAD.Model.AssignedLicenses \nforeach ($license in $sourceUserLicenses) {\n    $assignedLicense = New-Object -TypeName Microsoft.Open.AzureAD.Model.AssignedLicense\n    $assignedLicense.SkuId = $license.SkuId\n    $licensesToAssign.AddLicenses = $assignedLicense\n    Set-EntraBetaUserLicense -UserId $targetUser.Id -AssignedLicenses $licensesToAssign\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Entra Group with PowerShell\nDESCRIPTION: This PowerShell command removes a Microsoft Entra group. It first retrieves the group using Get-EntraGroup based on its display name and then pipes the result to Remove-EntraGroup, which deletes the group. It requires the Microsoft Entra PowerShell module and appropriate permissions to delete groups.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-groups.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraGroup -Filter \"displayName eq 'Contoso marketing'\" | Remove-EntraGroup\n```\n\n----------------------------------------\n\nTITLE: Get Role Definitions by Provider and Resource - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve role definitions for a specific provider and resource using the Get-EntraBetaPrivilegedRoleDefinition cmdlet. It requires connecting to Entra ID with appropriate scopes. The ProviderId and ResourceId parameters are used to filter the results.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPrivilegedRoleDefinition.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'PrivilegedAccess.Read.AzureAD', 'PrivilegedAccess.Read.AzureResources' 'PrivilegedAccess.Read.AzureADGroup'\n$params = @{\n    ProviderId = 'aadRoles'\n    ResourceId = 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb'\n}\nGet-EntraBetaPrivilegedRoleDefinition @params\n```\n\n----------------------------------------\n\nTITLE: Get Contract by ID - PowerShell\nDESCRIPTION: Retrieves a specific contract using its ID. Requires the 'Directory Readers' role in delegated scenarios. Returns the contract object if found; otherwise, returns an error.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraContract.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraContract\n -ContractId <String>\n [-All]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get list of deleted applications using All parameter - PowerShell\nDESCRIPTION: Retrieves all deleted applications and displays specific properties (Id, DisplayName, AppId, DeletedDateTime, DeletionAgeInDays) in a formatted table. It requires the 'Application.Read.All' scope and uses the Connect-Entra cmdlet for authentication.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedApplication.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraDeletedApplication -All | Select-Object Id, DisplayName, AppId, DeletedDateTime, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Set Technical Notification Emails - PowerShell\nDESCRIPTION: This example demonstrates how to set the technical notification emails for a tenant using the `Set-EntraBetaTenantDetail` cmdlet. It connects to Entra ID with the 'Organization.ReadWrite.All' scope. Requires the Microsoft.Entra.Beta module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaTenantDetail.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.ReadWrite.All'\nSet-EntraBetaTenantDetail -TechnicalNotificationMails 'peter@contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Update User Phone Details PowerShell\nDESCRIPTION: This example demonstrates how to update a user's phone details, including business phone and office location. Requires 'User.ReadWrite.All' scope. Uses the Set-EntraBetaUser cmdlet with the -BusinessPhones and -OfficeLocation parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUser.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nSet-EntraBetaUser -UserId 'SawyerM@contoso.com' -BusinessPhones '+1 425 555 0109' -OfficeLocation '18/2111'\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Service Principals List - PowerShell\nDESCRIPTION: This PowerShell script retrieves the list of deleted service principals in the Entra ID tenant. It first connects to Entra ID with the 'Application.Read.All' scope, and then uses the `Get-EntraDeletedServicePrincipal` cmdlet to fetch the deleted service principals. Finally, it selects and formats specific properties for display.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedServicePrincipal.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraDeletedServicePrincipal | Select-Object Id, DisplayName, AppId, DeletedDateTime, DeletionAgeInDays, ServicePrincipalType | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Update Trust Framework Policy and Output to File - PowerShell\nDESCRIPTION: This example updates a trust framework policy from content and writes the updated policy to a specified file path.  It connects to Entra, reads policy content from a file, and then uses `Set-EntraBetaTrustFrameworkPolicy` with the `OutputFilePath` parameter to save the updated policy content to the specified file. The admin must have a supported Microsoft Entra role or a custom role with the required permissions.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaTrustFrameworkPolicy.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.TrustFramework'\n$policyContent = Get-Content 'C:\\temp\\CreatedPolicy.xml' | out-string\n$params = @{\n    Id  = 'B2C_1A_signup_signin'\n    Content =  $policyContent\n    OutputFilePath = 'C:\\UpdatedPolicy.xml'\n}\nSet-EntraBetaTrustFrameworkPolicy @params\n```\n\n----------------------------------------\n\nTITLE: Getting all OAuth2 permission grants of a service principal - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all OAuth2 permission grants for a service principal in Microsoft Entra ID, including those that may be paginated. It connects to Entra with the 'Directory.Read.All' scope, retrieves the service principal by display name, and then uses the '-All' parameter with the Get-EntraServicePrincipalOAuth2PermissionGrant cmdlet to retrieve all grants.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalOAuth2PermissionGrant.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraServicePrincipalOAuth2PermissionGrant -ServicePrincipalId $servicePrincipal.Id -All\n```\n\n----------------------------------------\n\nTITLE: Setting Security Compliance Phones in PowerShell\nDESCRIPTION: This PowerShell snippet shows how to set the security compliance notification phone numbers for an Entra tenant using the `Set-EntraTenantDetail` cmdlet. It necessitates the 'Organization.ReadWrite.All' scope. The script establishes a connection to Entra ID and uses the cmdlet with the `-SecurityComplianceNotificationPhones` parameter to configure the phone numbers.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraTenantDetail.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.ReadWrite.All'\nSet-EntraTenantDetail -SecurityComplianceNotificationPhones @('1-555-625-9999', '1-555-233-5544')\n```\n\n----------------------------------------\n\nTITLE: Set User Extension Properties PowerShell\nDESCRIPTION: This example showcases how to set extension properties for a user, potentially for assigning app roles.  Requires the 'User.ReadWrite.All' scope. It retrieves an application, gets the extension property name, and then sets it for the user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUser.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\n$application = Get-EntraBetaApplication -Filter \"DisplayName eq 'Helpdesk Application'\"\n$extensionName = (Get-EntraBetaApplicationExtensionProperty -ApplicationId $application.Id).Name | Select-Object -First 1\n$additionalProperties = @{ $extensionName = \"Survey.Report\" }\nSet-EntraBetaUser -UserId 'SawyerM@contoso.com' -AdditionalProperties $additionalProperties\n```\n\n----------------------------------------\n\nTITLE: Enable Directory Synchronization - PowerShell\nDESCRIPTION: This example shows how to enable directory synchronization for a company using the `Set-EntraDirSyncEnabled` cmdlet.  It requires the 'OnPremDirectorySynchronization.ReadWrite.All' and 'Organization.ReadWrite.All' scopes. The `-Force` parameter is used to bypass confirmation prompts.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraDirSyncEnabled.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'OnPremDirectorySynchronization.ReadWrite.All', 'Organization.ReadWrite.All'\nSet-EntraDirSyncEnabled -EnableDirsync $true -Force $true\n```\n\n----------------------------------------\n\nTITLE: Set-EntraDomainFederationSettings Syntax\nDESCRIPTION: This code snippet presents the syntax for the `Set-EntraDomainFederationSettings` cmdlet. It shows the available parameters, including `-DomainName`, `-SigningCertificate`, `-NextSigningCertificate`, `-LogOffUri`, `-PassiveLogOnUri`, `-ActiveLogOnUri`, `-IssuerUri`, `-FederationBrandName`, `-MetadataExchangeUri`, `-PreferredAuthenticationProtocol`, `-SigningCertificateUpdateStatus`, and `-PromptLoginBehavior`.  The cmdlet is used to update settings for a federated domain in Microsoft Entra ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraDomainFederationSettings.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-EntraDomainFederationSettings\n -DomainName <String>\n [-SigningCertificate <String>]\n [-NextSigningCertificate <String>]\n [-LogOffUri <String>]\n [-PassiveLogOnUri <String>]\n [-ActiveLogOnUri <String>]\n [-IssuerUri <String>]\n [-FederationBrandName <String>]\n [-MetadataExchangeUri <String>]\n [-PreferredAuthenticationProtocol <AuthenticationProtocol>]\n [-SigningCertificateUpdateStatus <SigningCertificateUpdateStatus>]\n [-PromptLoginBehavior <PromptLoginBehavior>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Device by DeviceId using Filter\nDESCRIPTION: Retrieves a specific deleted device using its DeviceId via the Filter parameter within the Get-EntraBetaDeletedDevice cmdlet. An Entra connection with necessary scopes is required. The DeviceId uniquely identifies the deleted device.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedDevice.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraBetaDeletedDevice -Filter \"deviceId eq 'bbbbbbbb-1111-2222-3333-cccccccccccc'\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Private Access Application by Name in PowerShell\nDESCRIPTION: This example shows how to retrieve a specific Private Access application by its name. It first establishes a connection with the necessary scopes and uses the Get-EntraBetaPrivateAccessApplication cmdlet with the -ApplicationName parameter to retrieve the application details.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPrivateAccessApplication.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'NetworkAccessPolicy.ReadWrite.All', 'Application.ReadWrite.All', 'NetworkAccess.ReadWrite.All'\nGet-EntraBetaPrivateAccessApplication -ApplicationName 'Finance team file share'\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Devices Filtered by Display Name\nDESCRIPTION: Retrieves deleted devices that match a specified display name using the Get-EntraBetaDeletedDevice cmdlet with the -Filter parameter. Requires an active Entra connection with appropriate scopes. The output is filtered to display only specific properties and formatted into a table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedDevice.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraBetaDeletedDevice -Filter \"DisplayName eq 'Contoso Desktop'\" | Select-Object DeletedDateTime, Id, AccountEnabled, ApproximateLastSignInDateTime, DeviceId, DisplayName, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Create Connector Group with New-EntraBetaApplicationProxyConnectorGroup (PowerShell)\nDESCRIPTION: This example demonstrates how to create a new Application Proxy Connector Group using the `New-EntraBetaApplicationProxyConnectorGroup` cmdlet. It requires connecting to Entra ID with the appropriate scopes and then specifying the name of the new connector group. The cmdlet returns details of the newly created connector group.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplicationProxyConnectorGroup.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\nNew-EntraBetaApplicationProxyConnectorGroup -Name 'Backup Application Servers'\n```\n\n----------------------------------------\n\nTITLE: Update User Password in Domain (Example 2)\nDESCRIPTION: This example demonstrates how to update a user's password in a domain by supplying a new password as a SecureString. This is for hybrid scenarios. It requires the 'UserAuthenticationMethod.ReadWrite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Update-EntraUserFromFederated.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'UserAuthenticationMethod.ReadWrite.All'\n$newPassword = '<strong-password>'\n$securePassword = ConvertTo-SecureString $newPassword -AsPlainText -Force\nUpdate-EntraUserFromFederated -UserPrincipalName 'pattifuller@contoso.com' -NewPassword $securePassword\n```\n\n----------------------------------------\n\nTITLE: Get Top N Service Principal Created Objects\nDESCRIPTION: Retrieves a specified number of objects created by a service principal using the Get-EntraServicePrincipalCreatedObject cmdlet with the -Top parameter. Requires connecting to Entra ID with the 'Application.Read.All' scope and retrieving the service principal by display name to obtain its ID. The ServicePrincipalId parameter specifies the ID of the service principal. -Limit can be used as an alias for -Top.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalCreatedObject.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraServicePrincipalCreatedObject -ServicePrincipalId $servicePrincipal.Id -Top 2\n```\n\n----------------------------------------\n\nTITLE: Get Last 5 Recently Created Entra Users - PowerShell\nDESCRIPTION: This snippet retrieves the five most recently created users using the `Get-EntraUser` cmdlet, sorts them by creation date in descending order, and selects the first five. It leverages `Sort-Object` and `Select-Object` cmdlets.  It requires the `User.Read.All` scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-user.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraUser -All | Sort-Object -Property createdDateTime -Descending | Select-Object -First 5\n```\n\n----------------------------------------\n\nTITLE: Retrieve object setting example\nDESCRIPTION: This example demonstrates how to retrieve an object setting from Microsoft Entra ID, specifying the TargetType as 'Groups' and using a previously retrieved group's ID as the TargetObjectId.  It first connects to Entra ID with the necessary scopes and then retrieves the group.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaObjectSetting.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\n$group = Get-EntraBetaGroup -Filter \"DisplayName eq 'Sales and Marketing'\"\nGet-EntraBetaObjectSetting -TargetType 'Groups' -TargetObjectId $group.Id\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                   DisplayName         TemplateId\n--                                   -----------         ----------\naaaaaaaa-0000-1111-2222-bbbbbbbbbbbb Group.Unified.Guest 22cc22cc-dd33-ee44-ff55-66aa66aa66aa\n```\n\n----------------------------------------\n\nTITLE: Get DirSync errors for tenant - PowerShell\nDESCRIPTION: This example retrieves directory synchronization errors for a specific tenant. It first retrieves the tenant details using Get-EntraBetaTenantDetail and then uses the TenantId parameter to specify the tenant for which to retrieve the errors. The output is formatted into a table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirectoryObjectOnPremisesProvisioningError.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All', 'Directory.Read.All', 'Group.Read.All', 'Contacts.Read'\n$tenant = Get-EntraBetaTenantDetail\nGet-EntraBetaDirectoryObjectOnPremisesProvisioningError -TenantId $tenant.Id | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Retrieve all contacts objects in the directory using -All - PowerShell\nDESCRIPTION: This example demonstrates retrieving all contact objects in the Microsoft Entra directory using the `-All` parameter.  It first connects to Entra ID with the 'OrgContact.Read.All' scope.  The `Get-EntraContact -All` cmdlet retrieves all contacts without pagination. This is useful when dealing with a large number of contacts.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraContact.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'OrgContact.Read.All'\nGet-EntraContact -All\n```\n\n----------------------------------------\n\nTITLE: Update Display Name - Entra Beta (PowerShell)\nDESCRIPTION: This example demonstrates how to update only the display name of a conditional access policy. It connects to Entra ID, retrieves a policy by its original display name, and then updates the display name using the Set-EntraBetaConditionalAccessPolicy cmdlet. It requires the 'Policy.ReadWrite.ConditionalAccess' and 'Policy.Read.All' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaConditionalAccessPolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ConditionalAccess', 'Policy.Read.All'\n$policy = Get-EntraBetaConditionalAccessPolicy | Where-Object { $_.DisplayName -eq 'MFA policy' }\nSet-EntraBetaConditionalAccessPolicy -PolicyId $policy.Id -DisplayName 'MFA policy updated'\n```\n\n----------------------------------------\n\nTITLE: Creating a role definition with TemplateId\nDESCRIPTION: This PowerShell script creates a new role definition in Microsoft Entra ID utilizing a template ID. The script connects to Entra ID with the necessary scopes, configures role permissions, and then uses the `New-EntraDirectoryRoleDefinition` cmdlet. The role is created with specified permissions, enabled status, display name, and the provided template ID.  Ensure that the `Microsoft.Graph` module is installed for using `Connect-Entra`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraDirectoryRoleDefinition.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory'\n$rolePermissions = New-object Microsoft.Open.MSGraph.Model.RolePermission\n$rolePermissions.AllowedResourceActions = @(\"microsoft.directory/applications/basic/read\")\nNew-EntraDirectoryRoleDefinition -RolePermissions $rolePermissions -IsEnabled $false -DisplayName 'MyRoleDefinition' -TemplateId 'f2ef992c-3afb-46b9-b7cf-a126ee74c451'\n```\n\n----------------------------------------\n\nTITLE: Removing User App Role Assignment - Example PowerShell\nDESCRIPTION: This example shows how to remove a user application role assignment. It first connects to Entra using `Connect-Entra` with the `AppRoleAssignment.ReadWrite.All` scope. Then, it retrieves the `AppRoleAssignmentId` using `Get-EntraBetaUserAppRoleAssignment` and filters based on `ResourceDisplayName` and `PrincipalType`. Finally, it removes the role assignment using `Remove-EntraBetaUserAppRoleAssignment`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaUserAppRoleAssignment.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AppRoleAssignment.ReadWrite.All'\n$assignment = Get-EntraBetaUserAppRoleAssignment -UserId 'SawyerM@Contoso.com' | \nWhere-Object { $_.ResourceDisplayName -eq 'Helpdesk Application' -and $_.PrincipalType -eq 'User' }\nRemove-EntraBetaUserAppRoleAssignment -UserId 'SawyerM@Contoso.com' -AppRoleAssignmentId $assignment.Id\n```\n\n----------------------------------------\n\nTITLE: Get a top user-created object using Get-EntraUserCreatedObject in PowerShell\nDESCRIPTION: This example retrieves the top one object created by the specified user using the Get-EntraUserCreatedObject cmdlet with the -Top parameter. It requires the 'User.Read' and 'User.Read.All' scopes and selects the Id, DisplayName, and '@odata.type' properties. The -UserId parameter specifies the user's object ID (UPN or UserId).\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserCreatedObject.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read','User.Read.All'\nGet-EntraUserCreatedObject -UserId 'SawyerM@contoso.com' -Top 1 | Select-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Set Default Domain for User Creation - PowerShell\nDESCRIPTION: This PowerShell example demonstrates how to set the default domain for new user account creation in Microsoft Entra ID using the `Set-EntraDomain` cmdlet. It first connects to Entra ID using `Connect-Entra` and then uses `Set-EntraDomain` to set the specified domain as the default. Requires the 'Domain.ReadWrite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraDomain.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Domain.ReadWrite.All'\nSet-EntraDomain -Name Contoso.com -IsDefault $true\n```\n\n----------------------------------------\n\nTITLE: Get OAuth2 Permission Grants (Basic)\nDESCRIPTION: This example demonstrates how to retrieve OAuth2 permission grants using the Get-EntraBetaOAuth2PermissionGrant cmdlet after connecting to Entra ID with the necessary scopes. It fetches a list of permission grants and displays their properties, like ID, ClientId, ConsentType, ExpiryTime, PrincipalId, ResourceId, and Scope.  This command requires the 'Directory.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaOAuth2PermissionGrant.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\nGet-EntraBetaOAuth2PermissionGrant\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                              ClientId                             ConsentType   ExpiryTime          PrincipalId                          ResourceId                            Scope\n--                              --------                             -----------   ----------          -----------                          ----------                            -----\nA1bC2dE3fH4iJ5kL6mN7oP8qR9sT0u  00001111-aaaa-2222-bbbb-3333cccc4444 AllPrincipals 1/3/2024 1:28:59 PM                                      a0a0a0a0-bbbb-cccc-dddd-e1e1e1e1e1e1  User.ReadBasic.All\nC2dE3fH4iJ5kL6mN7oP8qR9sT0uV1w  00001111-aaaa-2222-bbbb-3333cccc4444 AllPrincipals 1/3/2024 1:28:59 PM                                      b1b1b1b1-cccc-dddd-eeee-f2f2f2f2f2f2  User.Read\nE3fH4iJ5kL6mN7oP8qR9sT0uV1wX2y  22223333-cccc-4444-dddd-5555eeee6666 Principal     1/3/2024 1:28:59 PM aaaaaaaa-bbbb-cccc-1111-222222222222 c2c2c2c2-dddd-eeee-ffff-a3a3a3a3a3a3  User.Read\nH4iJ5kL6mN7oP8qR9sT0uV1wX2yZ3a  22223333-cccc-4444-dddd-5555eeee6666 Principal     1/3/2024 1:28:59 PM aaaaaaaa-bbbb-cccc-1111-222222222222 d3d3d3d3-eeee-ffff-aaaa-b4b4b4b4b4b4  ActivityFeed.Read ServiceHealth.Read\n```\n\n----------------------------------------\n\nTITLE: Listing ownerless groups - PowerShell\nDESCRIPTION: This example retrieves groups without owners in Microsoft Entra ID.  It requires connecting to Entra ID with the GroupMember.Read.All scope.  It first retrieves all groups, then iterates through each group, checking if it has any owners using Get-EntraBetaGroupOwner.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaGroup.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All'\n$allGroups = Get-EntraBetaGroup -All\n$groupsWithoutOwners = foreach ($group in $allGroups) {\n    $owners = Get-EntraBetaGroupOwner -ObjectId $group.Id\n    if ($owners.Count -eq 0) {\n        $group\n    }\n}\n$groupsWithoutOwners | Format-Table DisplayName, Id, GroupTypes\n```\n\n----------------------------------------\n\nTITLE: Retrieve Guest Inactive Users - PowerShell\nDESCRIPTION: This example retrieves guest users who haven’t signed in within the past 10 days. It connects to Entra, then uses Get-EntraUserInactiveSignIn with both the -Ago parameter set to 10 and the -UserType parameter set to 'Guest'.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserInactiveSignIn.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All','AuditLog.Read.All'\nGet-EntraUserInactiveSignIn -Ago 10 -UserType 'Guest'\n```\n\n----------------------------------------\n\nTITLE: Creating a dynamic group in an administrative unit - PowerShell\nDESCRIPTION: This PowerShell code snippet demonstrates how to create a new dynamic group within an administrative unit. It defines parameters such as `AdministrativeUnitId`, `DisplayName`, `MailNickname`, `SecurityEnabled`, `MailEnabled`, `GroupTypes`, `MembershipRule`, and `MembershipRuleProcessingState`. The `Connect-Entra` cmdlet establishes a connection to Entra ID with the required scopes, and then `New-EntraBetaAdministrativeUnitMember` creates the group using the provided parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaAdministrativeUnitMember.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.ReadWrite.All'\n$params = @{\n    AdministrativeUnitId = 'bbbbbbbb-1111-2222-3333-cccccccccccc'\n    OdataType = 'Microsoft.Graph.Group'\n    DisplayName = 'NewAUMember'\n    Description = 'createdUnitMember'\n    MailEnabled = $True\n    MailNickname = 'new'\n    SecurityEnabled = $False\n    GroupTypes = @('Unified', 'DynamicMembership')\n    MembershipRule = \"(user.department -contains 'Marketing')\"\n    MembershipRuleProcessingState = 'On'\n    IsAssignableToRole = $false\n    Visibility = 'Public'\n    ProxyAddresses = @('SMTP:Ahiresh@M365x99297270.onmicrosoft.com')\n}\nNew-EntraBetaAdministrativeUnitMember @params\n```\n\n----------------------------------------\n\nTITLE: Get All Cross-Tenant Sign-in Events - PowerShell\nDESCRIPTION: This example retrieves all available sign-in events for both inbound and outbound connections, listing results by external tenant ID. It requires the 'AuditLog.Read.All' and 'CrossTenantInfo.ReadBasic.All' scopes to be granted. The cmdlet returns details about each sign-in event, including tenant IDs, user information, and application details.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaCrossTenantAccessActivity.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All', 'CrossTenantInfo.ReadBasic.All'\nGet-EntraBetaCrossTenantAccessActivity\n```\n\n----------------------------------------\n\nTITLE: Remove Feature Rollout Policy in Entra ID (PowerShell)\nDESCRIPTION: This PowerShell code removes a specific cloud authentication roll-out policy from Microsoft Entra ID. It first connects to Entra ID with the necessary scopes, retrieves the policy using its display name, and then removes it using its ID.  This action reverts affected users to the global authentication method. Requires the Microsoft.Entra module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraFeatureRolloutPolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\n$policy = Get-EntraFeatureRolloutPolicy -Filter \"DisplayName eq 'Feature-Rollout-Policy'\"\nRemove-EntraFeatureRolloutPolicy -Id $policy.Id\n```\n\n----------------------------------------\n\nTITLE: Get Contact by ID PowerShell\nDESCRIPTION: This cmdlet retrieves a specific contact from Microsoft Entra ID using its unique identifier. It employs the `Get-EntraBetaContact` cmdlet along with the `-OrgContactId` parameter to specify the ID of the contact to retrieve.  The `Connect-Entra` cmdlet is used to establish a connection with the required scopes. Output includes DisplayName, Id, Mail, and MailNickname.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaContact.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaContact\n -OrgContactId <String>\n [-All]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove a Domain - PowerShell\nDESCRIPTION: This example demonstrates how to remove a domain from Microsoft Entra ID using the Remove-EntraBetaDomain cmdlet. It first connects to Entra ID with the necessary scopes and then removes the specified domain.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaDomain.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Domain.ReadWrite.All'\nRemove-EntraBetaDomain -Name Contoso.com\n```\n\n----------------------------------------\n\nTITLE: Defining Tags Parameter in YAML\nDESCRIPTION: Defines the `-Tags` parameter, an array of tags used to categorize the service principal. Setting the value to `{WindowsAzureActiveDirectoryIntegratedApp}` makes the service principal visible in the All Applications list in the admin portal. This parameter is optional and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaServicePrincipal.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[System.String]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Remove Administrative Unit with Pipeline - PowerShell\nDESCRIPTION: This example shows how to remove an administrative unit using pipelining.  It uses `Get-EntraAdministrativeUnit` to retrieve an administrative unit based on its display name, and then pipes the output directly to `Remove-EntraAdministrativeUnit`. It requires the 'AdministrativeUnit.ReadWrite.All' scope and the calling principal to have at least the Privileged Role Administrator role. It connects to Entra ID using `Connect-Entra`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraAdministrativeUnit.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.ReadWrite.All'\nGet-EntraAdministrativeUnit -Filter \"DisplayName eq '<administrative-unit-display-name>'\" | Remove-EntraAdministrativeUnit\n```\n\n----------------------------------------\n\nTITLE: Get All Role Assignments using All Parameter PowerShell\nDESCRIPTION: This example retrieves all role assignments in Microsoft Entra ID using the `-All` parameter. It connects to Entra ID with the required scopes and executes the `Get-EntraDirectoryRoleAssignment` cmdlet with the `-All` parameter to ensure all role assignments are retrieved, regardless of pagination. The output shows the details of each role assignment.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDirectoryRoleAssignment.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory', 'EntitlementManagement.Read.All'\nGet-EntraDirectoryRoleAssignment -All\n```\n\n----------------------------------------\n\nTITLE: Get Group Member Properties - PowerShell\nDESCRIPTION: This example retrieves the members of a specified group by its `GroupId` and selects only the `Id`, `DisplayName` and `@odata.type` properties for each member. It connects to Entra ID with the 'GroupMember.Read.All' scope, retrieves a group by its display name, and then retrieves its members.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraGroupMember.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All'\n$group = Get-EntraGroup -Filter \"DisplayName eq 'Sales and Marketing'\"\nGet-EntraGroup -GroupId $group.Id | Get-EntraGroupMember | Select-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Get Device by Partial Display Name - EntraBetaDevice - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve devices based on a partial match of their display names, specifically those starting with 'Woodgrove'. It requires the 'Device.Read.All' scope and utilizes the Get-EntraBetaDevice cmdlet with the -Filter parameter using the `startsWith` function. The output displays the matching devices and their properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDevice.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraBetaDevice -Filter \"startsWith(DisplayName,'Woodgrove')\"\n```\n\n----------------------------------------\n\nTITLE: Get Top N OAuth2 Permission Grants\nDESCRIPTION: This example demonstrates retrieving a specified number of OAuth2 permission grants using the `-Top` parameter (or its alias, `-Limit`). It fetches the top 2 permission grants.  It requires the 'Directory.Read.All' scope.  This is useful for paginating results or testing purposes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaOAuth2PermissionGrant.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\nGet-EntraBetaOAuth2PermissionGrant -Top 2\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                             ClientId                             ConsentType   ExpiryTime           PrincipalId  ResourceId                            Scope\n--                             --------                             -----------   ----------           ------------ ----------                            -----\nA1bC2dE3fH4iJ5kL6mN7oP8qR9sT0u 00001111-aaaa-2222-bbbb-3333cccc4444 AllPrincipals 1/3/2024 1:28:59 PM               a0a0a0a0-bbbb-cccc-dddd-e1e1e1e1e1e1  User.ReadBasic.All\nC2dE3fH4iJ5kL6mN7oP8qR9sT0uV1w 00001111-aaaa-2222-bbbb-3333cccc4444 AllPrincipals 1/3/2024 1:28:59 PM               b1b1b1b1-cccc-dddd-eeee-f2f2f2f2f2f2  User.Read\n```\n\n----------------------------------------\n\nTITLE: Remove Specified Role Definition - PowerShell\nDESCRIPTION: This example demonstrates how to remove a specified role definition from Microsoft Entra ID using the Remove-EntraDirectoryRoleDefinition cmdlet. It first connects to Entra with appropriate scopes, retrieves the role definition by its display name using Get-EntraDirectoryRoleDefinition, and then removes it by providing its ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraDirectoryRoleDefinition.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory'\n$role = Get-EntraDirectoryRoleDefinition -Filter \"DisplayName eq 'Contoso Custom Role Definition'\"\nRemove-EntraDirectoryRoleDefinition -UnifiedRoleDefinitionId $role.Id\n```\n\n----------------------------------------\n\nTITLE: Update PreferredSingleSignOnMode - PowerShell\nDESCRIPTION: This example demonstrates updating the PreferredSingleSignOnMode property of a service principal in Microsoft Entra ID. It connects to Entra ID, retrieves the service principal, and then sets the PreferredSingleSignOnMode. It requires the Application.ReadWrite.All and Application.ReadWrite.OwnedBy scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraServicePrincipal.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nSet-EntraServicePrincipal -ServicePrincipalId $servicePrincipal.Id -PreferredSingleSignOnMode 'saml'\n```\n\n----------------------------------------\n\nTITLE: Create a new Domain as Default\nDESCRIPTION: This example creates a new domain 'testingDemo2.com' and sets it as the default domain for new user creation using the -IsDefault parameter. The Connect-Entra cmdlet is used to establish a connection to Entra ID with the necessary permissions. Only one domain can be set as default.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraDomain.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Domain.ReadWrite.All'\nNew-EntraDomain -Name testingDemo2.com -IsDefault $True\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId               AuthenticationType AvailabilityStatus IsAdminManaged IsDefault IsInitial IsRoot IsVerified Manufacturer Model PasswordNotificationWindowInDays PasswordValidityPeriodInDays SupportedServices\n--               ------------------ ------------------ -------------- --------- --------- ------ ---------- ------------ ----- -------------------------------- ---------------------------- -----------------\ntestingDemo2.com Managed                               True           False     False     False  False                                                                                       {}\n```\n\n----------------------------------------\n\nTITLE: Get Top N App Role Assignments for Service Principal - PowerShell\nDESCRIPTION: This example retrieves a limited number of app role assignments (in this case, five) for a given service principal. It uses the '-Top' parameter to specify the maximum number of records to return. The example showcases the output format of the command. The `-Limit` parameter can be used as an alias for the `-Top` parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalAppRoleAssignedTo.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraServicePrincipalAppRoleAssignedTo -ServicePrincipalId $servicePrincipal.Id -Top 5\n```\n\nLANGUAGE: powershell\nCODE:\n```\nDeletedDateTime Id                                          AppRoleId                            CreatedDateTime     PrincipalDisplayName PrincipalId\n--------------- --                                          ---------                            ---------------     -------------------- -----------\n                1aaaaaa1-2bb2-3cc3-4dd4-5eeeeeeeeee5 00000000-0000-0000-0000-000000000000 20/10/2023 17:03:41 Entra-App-Testing    aaaaaaaa-bbbb-cccc-1111-222222222222\n                2bbbbbb2-3cc3-4dd4-5ee5-6ffffffffff6 00000000-0000-0000-0000-000000000000 20/10/2023 17:03:38 Entra-App-Testing    aaaaaaaa-bbbb-cccc-1111-222222222222\n                3cccccc3-4dd4-5ee5-6ff6-7aaaaaaaaaa7 00000000-0000-0000-0000-000000000000 20/10/2023 17:03:37 Entra-App-Testing    aaaaaaaa-bbbb-cccc-1111-222222222222\n                4dddddd4-5ee5-6ff6-7aa7-8bbbbbbbbbb8 00000000-0000-0000-0000-000000000000 20/10/2023 17:03:39 Entra-App-Testing    aaaaaaaa-bbbb-cccc-1111-222222222222\n                5eeeeee5-6ff6-7aa7-8bb8-9cccccccccc9 00000000-0000-0000-0000-000000000000 20/10/2023 17:03:39 Entra-App-Testing    aaaaaaaa-bbbb-cccc-1111-222222222222\n```\n\n----------------------------------------\n\nTITLE: Get Device by DeviceID - PowerShell\nDESCRIPTION: Connects to Entra ID and retrieves a device using its DeviceID. Requires the Microsoft.Entra module and the 'Device.Read.All' scope. The 'DeviceId' parameter is used within the '-Filter' parameter to find the device, ensuring correct formatting of the ID string is important.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDevice.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraDevice -Filter \"DeviceId eq 'eeeeeeee-4444-5555-6666-ffffffffffff'\" \n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDeletedDateTime Id                                   AccountEnabled ApproximateLastSignInDateTime ComplianceExpirationDateTime DeviceCategory DeviceId                             DeviceMetadata DeviceOwnership\n--------------- --                                   -------------- ----------------------------- ---------------------------- -------------- --------                             -------------- ---------------\n                bbbbbbbb-1111-2222-3333-cccccccccccc True                                                                                     eeeeeeee-4444-5555-6666-ffffffffffff MetaData\n```\n\n----------------------------------------\n\nTITLE: Create Administrative Unit - PowerShell with Description\nDESCRIPTION: This code snippet shows how to create an administrative unit with a description using the `New-EntraAdministrativeUnit` cmdlet. It requires the `AdministrativeUnit.ReadWrite.All` scope. The output shows the properties of the created administrative unit, including the description.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraAdministrativeUnit.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.ReadWrite.All'\nNew-EntraAdministrativeUnit -DisplayName 'Pacific Administrative Unit' -Description 'Administrative Unit for Pacific region'\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDeletedDateTime Id                                   Description DisplayName IsMemberManagementRestricted Visibility\n--------------- --                                   ----------- ----------- ---------------------------- ----------\n                bbbbbbbb-1111-2222-3333-cccccccccccc Pacific Administrative Unit     test111     False\n```\n\n----------------------------------------\n\nTITLE: Reset Strong Authentication Method with UPN in PowerShell\nDESCRIPTION: This snippet demonstrates how to reset the strong authentication method for a user using their User Principal Name (UPN). It first connects to Entra with the required scope and then calls the `Reset-EntraBetaStrongAuthenticationMethodByUpn` cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Reset-EntraBetaStrongAuthenticationMethodByUpn.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'UserAuthenticationMethod.ReadWrite.All'\nReset-EntraBetaStrongAuthenticationMethodByUpn  -UserPrincipalName 'SawyerM@contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Get user-created object using Get-EntraUserCreatedObject in PowerShell\nDESCRIPTION: This example retrieves a single object created by the specified user using the Get-EntraUserCreatedObject cmdlet. It requires the 'User.Read' and 'User.Read.All' scopes and selects the Id, DisplayName, and '@odata.type' properties of the created object. The -UserId parameter specifies the user's object ID (UPN or UserId).\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserCreatedObject.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read','User.Read.All'\nGet-EntraUserCreatedObject -UserId 'SawyerM@contoso.com' | Select-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Get Lifecycle Policy by Group ID - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve the lifecycle policy object associated with a specific group in Microsoft Entra ID.  It first connects to Entra ID and retrieves a group object.  Then it uses `Get-EntraLifecyclePolicyGroup` with the group's ID to retrieve the associated lifecycle policy.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraLifecyclePolicyGroup.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\n$group = Get-EntraGroup -Filter \"DisplayName eq 'Sales and Marketing'\"\nGet-EntraLifecyclePolicyGroup -GroupId $group.Id\n```\n\n----------------------------------------\n\nTITLE: Set User Extension - Multiple Values - PowerShell\nDESCRIPTION: This cmdlet updates a user's extension attributes with multiple values using a dictionary. It requires the User ID and a dictionary containing Extension Name and Value pairs. The Connect-Entra cmdlet needs to be executed beforehand with the appropriate scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUserExtension.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-EntraUserExtension\n -UserId <String>\n -ExtensionNameValues <System.Collections.Generic.Dictionary`2[System.String,System.String]>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Connector Groups with Filter - PowerShell\nDESCRIPTION: This example retrieves Azure AD Application Proxy connector groups based on a filter. The `-Filter` parameter allows specifying an OData v4.0 filter statement to refine the search. A connection to Entra ID with the 'Directory.ReadWrite.All' scope is required.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationProxyConnectorGroup.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\nGet-EntraBetaApplicationProxyConnectorGroup -Filter \"name eq 'Default'\"\n```\n\n----------------------------------------\n\nTITLE: Get Cloud Authentication Roll-out Policy by Filter - PowerShell\nDESCRIPTION: This example retrieves a specific cloud authentication roll-out policy in Microsoft Entra ID using a filter. It connects to Entra ID with the required scopes and then uses the `Get-EntraFeatureRolloutPolicy` cmdlet with the `-Filter` parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraFeatureRolloutPolicy.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\nGet-EntraFeatureRolloutPolicy -Filter \"Description eq 'Feature-Rollout-Policy'\"\n```\n\n----------------------------------------\n\nTITLE: Get Extension Properties - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve extension properties for a specific application in Microsoft Entra ID.  It first connects to Entra ID with the necessary scopes, then retrieves the application, and finally uses `Get-EntraBetaApplicationExtensionProperty` to get the extension properties based on the application ID. The example uses `Connect-Entra` to establish a connection and `Get-EntraBetaApplication` to retrieve application details before fetching extension properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationExtensionProperty.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$application = Get-EntraBetaApplication -Filter \"DisplayName eq 'Helpdesk Application'\"\nGet-EntraBetaApplicationExtensionProperty -ApplicationId $application.Id\n```\n\n----------------------------------------\n\nTITLE: Remove Entra Device Syntax - PowerShell\nDESCRIPTION: This code snippet shows the syntax for the `Remove-EntraDevice` cmdlet. It takes the `DeviceId` as a parameter and supports common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraDevice.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraDevice\n -DeviceId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get User by ID - Entra ID - PowerShell\nDESCRIPTION: This example shows how to retrieve a specific user from Microsoft Entra ID using their UserId (User Principal Name in this instance). A connection to Entra ID is required with the 'User.Read.All' scope.  The `-UserId` parameter is used to specify the user's ID. The output displays user details.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUser.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraUser -UserId 'SawyerM@contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Get Role Templates - Entra ID PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all role templates in Microsoft Entra ID. It first connects to Entra ID with the necessary scopes and then uses the Get-EntraDirectoryRoleTemplate cmdlet to fetch the templates. The output displays properties such as DeletedDateTime, Id, and Description for each role template.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDirectoryRoleTemplate.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory'\nGet-EntraDirectoryRoleTemplate\n```\n\n----------------------------------------\n\nTITLE: Get groups by SearchString - PowerShell\nDESCRIPTION: This example retrieves groups that contain a specific search string in their display names.  It requires connecting to Entra ID with the GroupMember.Read.All scope. The -SearchString parameter is used to specify the search term.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaGroup.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All'\nGet-EntraBetaGroup -SearchString 'New'\n```\n\n----------------------------------------\n\nTITLE: Creating delegated permission grant for specific user - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to create a delegated permission grant that authorizes a client service principal to impersonate a specific user when accessing a resource service principal. It first connects to Entra ID, retrieves the service principals for the client, resource, and the target user. It uses the New-EntraOauth2PermissionGrant cmdlet with the ConsentType set to 'Principal' and specifies the PrincipalId of the user. The Scope is set to 'Directory.Read.All'. The script also sets an expiry time for the grant.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraOauth2PermissionGrant.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'DelegatedPermissionGrant.ReadWrite.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"DisplayName eq 'Contoso Marketing'\"\n$graphApp = Get-EntraServicePrincipal -Filter \"AppId eq '00000003-0000-0000-c000-000000000000'\"\n$user = Get-EntraUser -UserId 'SawyerM@contoso.com'\n$params = @{\n    ClientId    = $servicePrincipal.Id\n    ConsentType = 'Principal'\n    PrincipalId = $user.Id\n    ResourceId  = $graphApp.Id\n    Scope       = 'Directory.Read.All'\n    StartTime   = Get-Date\n    ExpiryTime  = (Get-Date).AddYears(1)\n}\nNew-EntraOauth2PermissionGrant @params\n```\n\n----------------------------------------\n\nTITLE: Retrieve Partner Information\nDESCRIPTION: This example demonstrates how to retrieve partner-specific information using `Get-EntraPartnerInformation`. It first connects to Entra ID using `Connect-Entra` with the 'Organization.Read.All' scope, and then retrieves the partner information.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraPartnerInformation.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All'\nGet-EntraPartnerInformation\n```\n\n----------------------------------------\n\nTITLE: Resolve Tenant IDs from File - PowerShell\nDESCRIPTION: This example demonstrates how to resolve multiple Microsoft Entra tenants by reading a list of Tenant IDs (GUIDs) from a file. The script first connects to Entra ID using `Connect-Entra` with the `CrossTenantInformation.ReadBasic.All` scope. Then, it retrieves the list of Tenant IDs from a text file named `TenantIdList.txt` using `Get-Content` and stores it in the `$tenantList` variable. Finally, it uses `Resolve-EntraBetaTenant` with the `-TenantId` parameter to resolve each tenant ID in the list.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Resolve-EntraBetaTenant.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'CrossTenantInformation.ReadBasic.All'\n$tenantList = Get-Content .\\TenantIdList.txt\nResolve-EntraBetaTenant -TenantId $tenantList\n```\n\n----------------------------------------\n\nTITLE: Get User Groups with -GroupId (Example 4)\nDESCRIPTION: This example shows how to retrieve a specific group using the `-GroupId` parameter. It first retrieves the group ID using `Get-EntraGroup` and then passes it to `Get-EntraUserGroup`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserGroup.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All', 'Group.Read.All', 'Directory.Read.All'\n$group = Get-EntraGroup -Filter \"DisplayName eq 'Contoso Marketing'\"\nGet-EntraUserGroup -UserId 'SawyerM@contoso.com' -GroupId $group.Id\n```\n\nLANGUAGE: powershell\nCODE:\n```\nDisplayName                Id                                   MailNickname        Description               GroupTypes\n-----------                --                                   ------------        -----------               ----------\nContoso Marketing          hhhhhhhh-3333-5555-3333-qqqqqqqqqqqq ContosoMarketing    Contoso Marketing         {Unified}\n```\n\n----------------------------------------\n\nTITLE: Get all tenant details using Get-EntraBetaTenantDetail (PowerShell)\nDESCRIPTION: This example demonstrates how to retrieve all tenant details using the Get-EntraBetaTenantDetail cmdlet. It first connects to Entra ID with the 'Organization.Read.All' scope and then executes the cmdlet with the -All parameter to fetch all tenant information.  This is useful for obtaining a complete overview of the tenant configuration.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaTenantDetail.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All'\nGet-EntraBetaTenantDetail -All\n```\n\n----------------------------------------\n\nTITLE: Retrieve Object Setting - Example 1 - PowerShell\nDESCRIPTION: Retrieves object setting from Microsoft Entra ID using the Get-EntraObjectSetting cmdlet. This example connects to Entra ID using Connect-Entra, retrieves a group using Get-EntraGroup, and then fetches the object setting associated with that group by specifying the TargetType as 'Groups' and TargetObjectId as the group's ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraObjectSetting.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\n$group = Get-EntraGroup -Filter \"DisplayName eq 'Sales and Marketing'\"\nGet-EntraObjectSetting -TargetType 'Groups' -TargetObjectId $group.Id\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId                                   DisplayName         TemplateId\n--                                   -----------         ----------\naaaaaaaa-0000-1111-2222-bbbbbbbbbbbb Group.Unified.Guest 22cc22cc-dd33-ee44-ff55-66aa66aa66aa\n```\n\n----------------------------------------\n\nTITLE: Create Trust Framework Policy from Input File - PowerShell\nDESCRIPTION: This example demonstrates how to create a trust framework policy by reading the policy content from an input file and specifying an output file path to save the created policy.  It connects to Entra ID and utilizes a hashtable to provide the -InputFilePath and -OutputFilePath parameters to the New-EntraBetaTrustFrameworkPolicy cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaTrustFrameworkPolicy.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.TrustFramework'\n$params = @{\n    InputFilePath = 'C:\\InputPolicy.xml'\n    OutputFilePath = 'C:\\CreatedPolicy.xml'\n}\nNew-EntraBetaTrustFrameworkPolicy @params\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Device - By DeviceObjectId\nDESCRIPTION: This PowerShell snippet retrieves a specific deleted device using its DeviceObjectId. It connects to Entra with Connect-Entra, then uses Get-EntraDeletedDevice with the `-DeviceObjectId` parameter to fetch the device. It then displays selected device properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedDevice.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraDeletedDevice -DeviceObjectId 'cccccccc-2222-3333-4444-dddddddddddd' | Select-Object DeletedDateTime, Id, AccountEnabled, ApproximateLastSignInDateTime, DeviceId, DisplayName, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get Enterprise Apps - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all enterprise apps by filtering based on tags. It connects to Entra ID and uses `Get-EntraBetaServicePrincipal` with a filter to select service principals that have the 'WindowsAzureActiveDirectoryIntegratedApp' tag. The output displays the properties of the retrieved enterprise apps.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipal.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraBetaServicePrincipal -Filter \"tags/Any(x: x eq 'WindowsAzureActiveDirectoryIntegratedApp')\"\n```\n\n----------------------------------------\n\nTITLE: Get Top N Deleted Groups - PowerShell\nDESCRIPTION: This PowerShell snippet retrieves the top two deleted groups in the directory. It connects to Entra ID, retrieves the specified number of groups using the `-Top` parameter, and then formats the output for easy readability.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedGroup.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Group.Read.All'\nGet-EntraDeletedGroup -Top 2 | Select-Object Id, DisplayName, MailNickname, GroupTypes, DeletedDateTime, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Remove-EntraServicePrincipalAppRoleAssignment Syntax - PowerShell\nDESCRIPTION: This snippet shows the syntax for the `Remove-EntraServicePrincipalAppRoleAssignment` cmdlet, including the required parameters `AppRoleAssignmentId` and `ServicePrincipalId`, and the optional `CommonParameters`. It illustrates how to structure the command for removing a service principal application role assignment.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraServicePrincipalAppRoleAssignment.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraServicePrincipalAppRoleAssignment\n -AppRoleAssignmentId <String>\n -ServicePrincipalId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Update Custom Security Attribute - PowerShell\nDESCRIPTION: This example updates a custom security attribute definition using Set-EntraBetaCustomSecurityAttributeDefinition. It requires the 'CustomSecAttributeDefinition.Read.All' and 'CustomSecAttributeDefinition.ReadWrite.All' scopes. It retrieves an existing attribute definition, then modifies its description, status, and UsePreDefinedValuesOnly setting.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaCustomSecurityAttributeDefinition.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'CustomSecAttributeDefinition.Read.All', 'CustomSecAttributeDefinition.ReadWrite.All'\n$attributeDefinition = Get-EntraBetaCustomSecurityAttributeDefinition | Where-Object { $_.Name -eq 'Engineering' }\nSet-EntraBetaCustomSecurityAttributeDefinition -Id $attributeDefinition.Id -Description 'Engineering Description' -Status 'Available' -UsePreDefinedValuesOnly $false\n```\n\n----------------------------------------\n\nTITLE: Get Group Owner by ID in PowerShell\nDESCRIPTION: This PowerShell snippet retrieves the owner of a group by its ID. It first connects to Entra ID with the 'GroupMember.Read.All' scope, retrieves the group object using its display name, and then uses Get-EntraGroupOwner to get the owner based on the group's ID. Finally, it selects and displays the Id, DisplayName, and '@odata.type' properties of the owner.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraGroupOwner.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All'\n$group = Get-EntraGroup -Filter \"DisplayName eq 'Sales and Marketing'\"\nGet-EntraGroup -GroupId $group.Id | Get-EntraGroupOwner | Select-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Remove Group Member Example - PowerShell\nDESCRIPTION: Demonstrates how to remove a member from a group in Microsoft Entra ID. It first connects to Entra, retrieves the group and member using their display names and IDs, and then removes the specified member from the group.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaGroupMember.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.ReadWrite.All'\n$group = Get-EntraBetaGroup -Filter \"DisplayName eq 'HelpDesk Team Leaders'\"\n$groupMember = Get-EntraBetaGroup -GroupId $group.Id | Get-EntraBetaGroupMember | Where-Object {$_.displayName -eq 'Adele Vance'}\nRemove-EntraBetaGroupMember -GroupId $group.Id -MemberId $groupMember.Id\n```\n\n----------------------------------------\n\nTITLE: Get Specific DirSync Feature Status - PowerShell\nDESCRIPTION: This example retrieves the status of a specific directory synchronization feature, in this case, PasswordSync. It connects to Entra ID with the required scope and then uses the Get-EntraDirSyncFeature cmdlet with the -Feature parameter to specify the feature to check. The output shows the status of PasswordSync (True or False).\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDirSyncfeature.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'OnPremDirectorySynchronization.Read.All'\nGet-EntraDirSyncFeature -Feature 'PasswordSync'\n```\n\n----------------------------------------\n\nTITLE: Create Role Definition w/ Version (PowerShell)\nDESCRIPTION: Creates a new role definition specifying a version. Illustrates the usage of the `-Version` parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaDirectoryRoleDefinition.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory'\n$rolePermissions = New-object Microsoft.Open.MSGraph.Model.RolePermission\n$rolePermissions.AllowedResourceActions = @(\"microsoft.directory/applications/basic/read\")\nNew-EntraBetaDirectoryRoleDefinition -RolePermissions $rolePermissions -IsEnabled $false -DisplayName 'MyRoleDefinition' -Version '2'\n```\n\n----------------------------------------\n\nTITLE: Remove Password Credential from Service Principal (PowerShell)\nDESCRIPTION: This example demonstrates how to remove a password credential from a service principal in Microsoft Entra ID using the Remove-EntraServicePrincipalPasswordCredential cmdlet.  It retrieves the service principal and key ID before removing the credential.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraServicePrincipalPasswordCredential.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\n$key = Get-EntraServicePrincipalPasswordCredential -ServicePrincipalId $servicePrincipal.Id\n$key = $key | Where-Object {$_.DisplayName -eq 'Helpdesk secret'}\nRemove-EntraServicePrincipalPasswordCredential -ServicePrincipalId $servicePrincipal.Id -KeyId $key.KeyId\n```\n\n----------------------------------------\n\nTITLE: Retrieve All Owned Objects of a Service Principal - PowerShell\nDESCRIPTION: This PowerShell script retrieves all owned objects of a service principal.  It uses the `-All` parameter with `Get-EntraBetaServicePrincipalOwnedObject`. It connects to Entra ID, retrieves a service principal by display name, and then fetches all owned objects, outputting their Id, DisplayName, and '@odata.type'.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalOwnedObject.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraBetaServicePrincipalOwnedObject -ServicePrincipalId $ServicePrincipal.Id -All | Select-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Get user's registered authentication methods by UserRegistrationDetailsId\nDESCRIPTION: This example retrieves user's registered authentication methods by `UserRegistrationDetailsId`.  It uses `Connect-Entra` to connect and then `Get-EntraBetaAuthenticationMethodUserRegistrationDetailReport` with the `-UserRegistrationDetailsId` parameter to filter for the specified user registration details.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAuthenticationMethodUserRegistrationDetailReport.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All'\nGet-EntraBetaAuthenticationMethodUserRegistrationDetailReport -UserRegistrationDetailsId 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb'\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nisMfaRegistered                               : False\n@odata.context                                : https://graph.microsoft.com/beta/$metadata#reports/authenticationMethods/userRegistrationDetails(*)/$entity\nuserPrincipalName                             : sawyermiller@contoso.com\nisSystemPreferredAuthenticationMethodEnabled  : True\nid                                            : aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb\nisSsprRegistered                              : False\nisSsprEnabled                                 : False\nuserDisplayName                               : Sawyer Miller\nlastUpdatedDateTime                           : 3/16/2025 7:55:54 AM\nuserType                                      : member\nisAdmin                                       : False\nmethodsRegistered                             : {}\nsystemPreferredAuthenticationMethods          : {}\nuserPreferredMethodForSecondaryAuthentication : none\nisPasswordlessCapable                         : False\nisSsprCapable                                 : False\nisMfaCapable                                  : False\n```\n\n----------------------------------------\n\nTITLE: Update Role Definition - Display Name - PowerShell\nDESCRIPTION: This example demonstrates how to update the display name of an existing role definition using the Set-EntraBetaDirectoryRoleDefinition cmdlet. It first retrieves the role definition based on its display name and then updates the display name using the cmdlet with the UnifiedRoleDefinitionId and DisplayName parameters. It requires the RoleManagement.ReadWrite.Directory scope and a Microsoft Entra ID P1 or P2 license.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaDirectoryRoleDefinition.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory'\n$roleDefinition = Get-EntraBetaDirectoryRoleDefinition -Filter \"DisplayName eq '<Role-Definition-Name>'\"\nSet-EntraBetaDirectoryRoleDefinition -UnifiedRoleDefinitionId $roleDefinition.Id -DisplayName 'UpdatedDisplayName'\n```\n\n----------------------------------------\n\nTITLE: Listing Devices by OS and Version - PowerShell\nDESCRIPTION: This PowerShell script retrieves devices with a specific operating system and version from Microsoft Entra ID. It first connects to Entra ID using 'Connect-Entra' with the 'Device.Read.All' scope. Then uses Get-EntraDevice with a filter containing 'operatingSystem' and 'operatingSystemVersion'. Finally, it selects specific properties using Select-Object and formats the output using Format-Table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-devices.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraDevice -Filter \"operatingSystem eq 'Windows Server' and operatingSystemVersion eq '10.0.20348.3091'\" |\n    Select-Object Id, AccountEnabled,DeviceId, DisplayName, operatingSystem, operatingSystemVersion | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Update Conditional Access Policy - PowerShell\nDESCRIPTION: This example shows how to update various properties of a conditional access policy, including the display name, state, conditions, grant controls, and session controls. It requires connecting to Entra ID with the appropriate scopes and retrieving the policy to be updated.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraConditionalAccessPolicy.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ConditionalAccess', 'Policy.Read.All'\n$policy = Get-EntraConditionalAccessPolicy | Where-Object { $_.DisplayName -eq 'MFA policy' }\n$cond = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessConditionSet\n$control = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessGrantControls\n$session = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessSessionControls\nSet-EntraConditionalAccessPolicy -PolicyId $policy.Id -DisplayName 'MFA policy updated' -State 'Enabled' -Conditions $cond -GrantControls $control -SessionControls $session\n```\n\n----------------------------------------\n\nTITLE: Update Service Principal Alternative Names and Display Name - PowerShell\nDESCRIPTION: This example demonstrates how to update both AlternativeNames and DisplayName of a service principal.  It connects to Entra ID, retrieves the target service principal, and updates the specified properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaServicePrincipal.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nSet-EntraBetaServicePrincipal -ServicePrincipalId $servicePrincipal.Id -AlternativeNames 'Helpdesk Application Global' -DisplayName 'NewName'\n```\n\n----------------------------------------\n\nTITLE: Connect with Access Token\nDESCRIPTION: Connects to Microsoft Entra ID using an existing access token.  The access token needs to be converted to a secure string before being passed to the cmdlet.  This avoids storing the token in plain text.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Connect-Entra.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n$secureString = ConvertTo-SecureString -String $AccessToken -AsPlainText -Force\nConnect-Entra -AccessToken $secureString\n```\n\n----------------------------------------\n\nTITLE: Get All App Role Assignments - PowerShell\nDESCRIPTION: This example shows how to retrieve all app role assignments for a specific service principal. The script first connects to Microsoft Entra ID, then retrieves the service principal using a filter, and finally calls Get-EntraBetaServicePrincipalAppRoleAssignedTo with the `-All` parameter to fetch all assignments.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalAppRoleAssignedTo.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraBetaServicePrincipalAppRoleAssignedTo -ServicePrincipalId $servicePrincipal.Id -All\n```\n\n----------------------------------------\n\nTITLE: Viewing Licenses Assigned to a User (PowerShell)\nDESCRIPTION: This PowerShell snippet retrieves the licenses assigned to a specific user. It uses the `Get-EntraUserLicenseDetail` cmdlet, specifying the user's ID, to fetch the license details. Requires the `User.Read.All` scope. The output shows the license Ids, SkuIds, and SkuPartNumbers.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/how-to-manage-user-licenses.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\n$userLicenses = Get-EntraUserLicenseDetail -UserId 'GjeEdla@Contoso.com'\n$userLicenses\n```\n\n----------------------------------------\n\nTITLE: Clear All Scopes in Delegated Permission Grant - PowerShell\nDESCRIPTION: This example shows how to clear all scopes in a delegated permission grant.  It connects to Entra ID, retrieves the relevant service principal and permission grant, and then updates the scope to an empty string, effectively removing all granted permissions.  Requires the 'DelegatedPermissionGrant.ReadWrite.All' scope to be granted. It assumes a service principal named 'My application' exists and an initial scope of 'Directory.Read.All' is already granted.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Update-EntraBetaOauth2PermissionGrant.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'DelegatedPermissionGrant.ReadWrite.All'\n$clientServicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'My application'\"\n$permissionGrant = Get-EntraBetaOAuth2PermissionGrant | Where-Object {$_.ClientId -eq $clientServicePrincipal.Id -and $_.Scope -eq 'Directory.Read.All'}\nUpdate-EntraBetaOauth2PermissionGrant -OAuth2PermissionGrantId $permissionGrant.Id -Scope ''\n```\n\n----------------------------------------\n\nTITLE: Retrieve top two contacts objects PowerShell\nDESCRIPTION: This example retrieves the top two contact objects in the directory. It connects to Entra ID using `Connect-Entra` with the 'OrgContact.Read.All' scope, and then uses `Get-EntraBetaContact` with the `-Top` parameter set to 2 to retrieve the first two contact objects from Microsoft Entra ID. `-Limit` can be used as alias for `-Top`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaContact.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'OrgContact.Read.All'\nGet-EntraBetaContact -Top 2\n```\n\n----------------------------------------\n\nTITLE: Get All Registered Devices - Entra ID PowerShell\nDESCRIPTION: This example retrieves all registered devices for a specific user in Microsoft Entra ID. It requires the 'User.Read.All' scope and utilizes the Get-EntraUserRegisteredDevice cmdlet with the `-All` parameter, filtering by UserId and then selecting and expanding the AdditionalProperties to display all device details. It returns all devices registered to the user without pagination.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserRegisteredDevice.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraUserRegisteredDevice -UserId 'SawyerM@contoso.com' -All | Select-Object Id -ExpandProperty AdditionalProperties\n```\n\n----------------------------------------\n\nTITLE: Force Domain Takeover\nDESCRIPTION: This example shows how to forcibly take control of an unmanaged domain associated with a tenant using the Confirm-EntraBetaDomain cmdlet with the -ForceTakeover parameter. This is useful when an external administrator needs to assume control.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Confirm-EntraBetaDomain.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Domain.ReadWrite.All'\nConfirm-EntraBetaDomain -DomainName Contoso.com -ForceTakeover $True\n```\n\n----------------------------------------\n\nTITLE: Remove Application using Pipelining - PowerShell Example 2\nDESCRIPTION: This example shows how to remove an application object using pipelining. It connects to Entra ID with the 'Application.ReadWrite.All' scope. The Get-EntraBetaApplication cmdlet retrieves the application object based on its display name and pipes the result to Remove-EntraBetaApplication, which automatically uses the piped object's ID to identify the application for deletion.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaApplication.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All'\nGet-EntraBetaApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\" | Remove-EntraBetaApplication\n```\n\n----------------------------------------\n\nTITLE: Setting Directory Synchronization Settings for Specific Tenant in PowerShell\nDESCRIPTION: This example illustrates how to set directory synchronization settings for a specific tenant using the Set-EntraDirSyncConfiguration cmdlet. It retrieves the tenant ID using Get-EntraContext and sets the accidental deletion threshold, forcing the operation without confirmation.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraDirSyncConfiguration.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'OnPremDirectorySynchronization.ReadWrite.All'\n$tenantID = (Get-EntraContext).TenantId\nSet-EntraDirSyncConfiguration -AccidentalDeletionThreshold 600 -TenantId $tenantID -Force\n```\n\n----------------------------------------\n\nTITLE: Get Named Location Policy by ID PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a specific named location policy by its ID in Microsoft Entra ID.  It first connects to Entra ID, retrieves all policies, filters for a specific display name, and then uses the PolicyId parameter of the Get-EntraBetaNamedLocationPolicy cmdlet to retrieve the desired policy.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaNamedLocationPolicy.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.All'\n$policy = Get-EntraBetaNamedLocationPolicy | Where-Object {$_.DisplayName -eq 'Provisioning Workers'}\nGet-EntraBetaNamedLocationPolicy -PolicyId $policy.Id\n```\n\n----------------------------------------\n\nTITLE: Creating Country Named Location Policy in Entra ID (PowerShell)\nDESCRIPTION: This example demonstrates how to create a new country named location policy in Microsoft Entra ID using the New-EntraNamedLocationPolicy cmdlet. It requires the 'Policy.ReadWrite.ConditionalAccess' scope and sets the CountriesAndRegions and IncludeUnknownCountriesAndRegions parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraNamedLocationPolicy.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ConditionalAccess'\n$type = '#microsoft.graph.countryNamedLocation'\nNew-EntraNamedLocationPolicy -OdataType $type -DisplayName 'Country named location policy' -CountriesAndRegions 'IN' -IncludeUnknownCountriesAndRegions $false\n```\n\n----------------------------------------\n\nTITLE: Setting Directory Synchronization Settings in PowerShell\nDESCRIPTION: This example demonstrates how to set directory synchronization settings, specifically the accidental deletion threshold, using the Set-EntraDirSyncConfiguration cmdlet. It requires the 'OnPremDirectorySynchronization.ReadWrite.All' scope and uses the -Force parameter to bypass confirmation prompts.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraDirSyncConfiguration.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'OnPremDirectorySynchronization.ReadWrite.All'\nSet-EntraDirSyncConfiguration -AccidentalDeletionThreshold 600 -Force\n```\n\n----------------------------------------\n\nTITLE: Assign User to App Without Roles - PowerShell\nDESCRIPTION: This PowerShell code snippet assigns a user to an application that does not have any roles defined. It retrieves the application and user objects, then constructs a parameter hashtable to be passed to the `New-EntraBetaUserAppRoleAssignment` cmdlet.  A connection to Entra ID is established using `Connect-Entra` with the `AppRoleAssignment.ReadWrite.All` scope.  The `AppRoleId` is set to an empty GUID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaUserAppRoleAssignment.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AppRoleAssignment.ReadWrite.All'\n$appId = (Get-EntraApplication -SearchString '<App-DisplayName>').AppId\n$user = Get-EntraBetaUser -searchstring 'NewUser'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"appId eq '$appId'\"\n$params = @{\n    UserId      = $user.Id \n    PrincipalId = $user.Id \n    ResourceId  = $servicePrincipal.Id \n    AppRoleId   = ([Guid]::Empty)\n}\nNew-EntraBetaUserAppRoleAssignment @params\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId                                          AppRoleId                            CreationTimestamp   PrincipalDisplayName PrincipalId                          PrincipalType ResourceDisplayName ResourceId\n--                                          ---------                            -----------------   -------------------- -----------                          ------------- ------------------- ----------\nZwFW_R__GkeNdDsAcKvOoerWWY8NKDJGlIgS4FjeyXQ 00000000-0000-0000-0000-000000000000 08-08-2024 05:40:06 Conf Room Adams      aaaaaaaa-bbbb-cccc-1111-222222222222 User          ResourceDisplayName             07188127-baa9-4f…\n```\n\n----------------------------------------\n\nTITLE: Update Role Definition - IsEnabled - PowerShell\nDESCRIPTION: This example demonstrates how to update the IsEnabled property of an existing role definition using the Set-EntraBetaDirectoryRoleDefinition cmdlet. It first retrieves the role definition based on its display name and then updates the IsEnabled property using the cmdlet with the UnifiedRoleDefinitionId and IsEnabled parameters. It requires the RoleManagement.ReadWrite.Directory scope and a Microsoft Entra ID P1 or P2 license.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaDirectoryRoleDefinition.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory'\n$roleDefinition = Get-EntraBetaDirectoryRoleDefinition -Filter \"DisplayName eq '<Role-Definition-Name>'\"\nSet-EntraBetaDirectoryRoleDefinition -UnifiedRoleDefinitionId $roleDefinition.Id -IsEnabled $true\n```\n\n----------------------------------------\n\nTITLE: Connect to Entra ID using an Access Token\nDESCRIPTION: Authenticates to Microsoft Entra ID using a provided access token. The access token is converted into a secure string and passed to the `Connect-Entra` cmdlet. An access token enables authentication without requiring interactive login.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Connect-Entra.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n$secureString = ConvertTo-SecureString -String $AccessToken -AsPlainText -Force\nConnect-Entra -AccessToken $secureString\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n```Output\nWelcome to Microsoft Graph!\n```\n```\n\n----------------------------------------\n\nTITLE: List Quarantined Provisioning Jobs in PowerShell\nDESCRIPTION: This snippet retrieves audit logs for quarantined provisioning jobs. It filters the logs based on the `activityDisplayName` being 'Quarantine', selects specific properties, and includes calculated properties using expressions within `Select-Object`. The output provides details about the quarantined job, including the reason for quarantine and the service involved. The required scope is AuditLog.Read.All, Directory.Read.All.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAuditDirectoryLog.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All, Directory.Read.All'\nGet-EntraBetaAuditDirectoryLog -Filter \"activityDisplayName eq 'Quarantine'\" -Limit 1 |\nSelect-Object Id, ActivityDateTime, ActivityDisplayName, Category, LoggedByService, Result, \n              ResultReason, \n              @{Name=\"InitiatedByDisplayName\"; Expression={ $_.targetResources[0].displayName }}\n```\n\n----------------------------------------\n\nTITLE: Update Attribute Set - PowerShell\nDESCRIPTION: Updates an attribute set with a new description. It uses `Connect-Entra` to establish a connection with the required scopes and then `Set-EntraBetaAttributeSet` to update the specified attribute set's description.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaAttributeSet.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'CustomSecAttributeDefinition.ReadWrite.All'\nSet-EntraBetaAttributeSet -AttributeSetId 'Engineering' -Description 'Attributes for cloud engineering team'\n```\n\n----------------------------------------\n\nTITLE: Getting two OAuth2 permission grants of a service principal - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a limited number of OAuth2 permission grants for a service principal in Microsoft Entra ID. It connects to Entra with 'Directory.Read.All' scope, retrieves the service principal by its display name, and then uses the '-Top 2' parameter with the Get-EntraServicePrincipalOAuth2PermissionGrant cmdlet to retrieve only the top two permission grants. The `-Limit` alias can be used instead of `-Top`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalOAuth2PermissionGrant.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraServicePrincipalOAuth2PermissionGrant -ServicePrincipalId $servicePrincipal.Id -Top 2\n```\n\n----------------------------------------\n\nTITLE: Removing a deleted application using pipelining - PowerShell\nDESCRIPTION: This example demonstrates how to remove a recently deleted application using pipelining.  It connects to Entra ID with the necessary scopes.  It then retrieves a deleted application object using `Get-EntraDeletedApplication` with a filter and pipes the result directly to `Remove-EntraDeletedApplication` for deletion.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraDeletedApplication.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All'\nGet-EntraDeletedApplication -Filter \"DisplayName eq 'My PowerShell Application'\" | Remove-EntraDeletedApplication\n```\n\n----------------------------------------\n\nTITLE: Retrieve Domain Verification DNS Record - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve the domain verification DNS records for a specified domain using the `Get-EntraBetaDomainVerificationDnsRecord` cmdlet.  First, it connects to Entra ID using `Connect-Entra` with the 'Domain.Read.All' scope. Then, it retrieves the DNS records for 'mail.contoso.com'.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDomainVerificationDnsRecord.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Domain.Read.All'\nGet-EntraBetaDomainVerificationDnsRecord -Name mail.contoso.com\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId                                   IsOptional Label       RecordType SupportedService Ttl\n--                                   ---------- -----       ---------- ---------------- ----\naaaabbbb-0000-cccc-1111-dddd2222eeee False      contoso.com Txt        Email            3600\naaaabbbb-1111-cccc-1111-dddd2222eeee False      contoso.com Mx         Email            3600\n```\n\n----------------------------------------\n\nTITLE: Get Service Principals by Search String - PowerShell\nDESCRIPTION: This example retrieves a list of service principals whose display name contains the specified search string using the `-SearchString` parameter. This allows for partial matches on the display name.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipal.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraServicePrincipal -SearchString 'Helpdesk Application'\n```\n\n----------------------------------------\n\nTITLE: Get Manager of a User using PowerShell\nDESCRIPTION: This example shows how to retrieve the manager of a specific user by their User ID or User Principal Name using the Get-EntraBetaUserManager cmdlet. It connects to Entra with the User.Read.All scope, gets the manager, and then selects and formats specific properties for display.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserManager.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraBetaUserManager -UserId 'SawyerM@contoso.com' |\nSelect-Object Id, displayName, userPrincipalName, createdDateTime, accountEnabled, userType |\nFormat-Table -AutoSize\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nid                                    displayName     userPrincipalName                    createdDateTime           accountEnabled  userType\n--                                    -----------     -----------------                    ---------------           --------------  --------\n00aa00aa-bb11-cc22-dd33-44ee44ee44ee  Patti Fernandez PattiF@Contoso.com                 10/7/2024 12:32:01 AM      True           Member\n```\n\n----------------------------------------\n\nTITLE: Disable Single Guest User - PowerShell\nDESCRIPTION: Disables a single guest user account in Microsoft Entra ID using the specified user ID. Requires a connection to Microsoft Entra with the 'User.ReadWrite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-guest-users.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Define the user ID of the guest account to disable.\n$guestUserId = '<guestUserId> for example, myuser#EXT#@contoso.com or user Object Id'\n  \n# Disable the guest user account.\nSet-EntraUser -UserId $guestUserId -AccountEnabled $false\n```\n\n----------------------------------------\n\nTITLE: Add Group to Lifecycle Policy - PowerShell\nDESCRIPTION: This snippet demonstrates how to add a group to a lifecycle policy using the `Add-EntraBetaLifecyclePolicyGroup` cmdlet. It requires the 'Directory.ReadWrite.All' scope and retrieves both the group and lifecycle policy objects before adding the group to the policy. The `-GroupLifecyclePolicyId` parameter specifies the ID of the Lifecycle Policy and the `-GroupId` parameter specifies the ID of the group.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaLifecyclePolicyGroup.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\n$group = Get-EntraBetaGroup -Filter \"DisplayName eq 'Office365 group'\"\n$policy = Get-EntraBetaGroupLifecyclePolicy | Select-Object -First 1\nAdd-EntraBetaLifecyclePolicyGroup -GroupLifecyclePolicyId $policy.Id -GroupId $group.Id\n```\n\n----------------------------------------\n\nTITLE: Filter role definitions by display name (PowerShell)\nDESCRIPTION: This example shows how to filter role definitions based on their display name using the `-Filter` parameter with the `startsWith` function. It establishes a connection to Entra ID and then retrieves all role definitions where the display name starts with 'Restricted'. The output displays the `DisplayName`, `Id`, `TemplateId`, and `Description` of each matched role definition.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDirectoryRoleDefinition.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory', 'EntitlementManagement.Read.All'\nGet-EntraDirectoryRoleDefinition -Filter \"startsWith(displayName, 'Restricted')\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Security Attribute Definition - PowerShell\nDESCRIPTION: This PowerShell code snippet demonstrates how to create a new custom security attribute definition using the `New-EntraCustomSecurityAttributeDefinition` cmdlet. It requires the `CustomSecAttributeDefinition.Read.All` and `CustomSecAttributeDefinition.ReadWrite.All` scopes to be granted. It defines parameters such as name, description, type, status, attribute set, and flags indicating if it's a collection, searchable, and if predefined values are enforced. This allows for flexible and structured definition of custom security attributes in Entra ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraCustomSecurityAttributeDefinition.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'CustomSecAttributeDefinition.Read.All', 'CustomSecAttributeDefinition.ReadWrite.All'\n$attributeSet = Get-EntraAttributeSet -Id 'ContosoSet'\n$params = @{\n    Name                    = 'ProjectTest' \n    Description             = 'Target completion'\n    Type                    = 'String'\n    Status                  = 'Available'\n    AttributeSet            = $attributeSet.Id \n    IsCollection            = $False\n    IsSearchable            = $True \n    UsePreDefinedValuesOnly = $True\n}\nNew-EntraCustomSecurityAttributeDefinition @params\n```\n\n----------------------------------------\n\nTITLE: Creating Extension Property - Data Type Parameter\nDESCRIPTION: Shows how to create an application extension property with a specified data type. It connects to Entra, gets an application, and then uses the `-DataType` parameter in New-EntraBetaApplicationExtensionProperty to define the data type as 'Boolean'. The required scopes are 'Application.ReadWrite.All' and 'Application.ReadWrite.OwnedBy'.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplicationExtensionProperty.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraBetaApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\nNew-EntraBetaApplicationExtensionProperty -ApplicationId $application.Id -Name 'NewAttribute1' -DataType 'Boolean'\n```\n\nLANGUAGE: powershell\nCODE:\n```\nDeletedDateTime Id                                   AppDisplayName  DataType IsSyncedFromOnPremises Name                                                    TargetObjects\n--------------- --                                   --------------  -------- ---------------------- ----                                                    -------------\n                11112222-bbbb-3333-cccc-4444dddd5555 My new test app Boolean  False                  extension_11112222-bbbb-3333-cccc-4444dddd5555_NewAttribute {}\n```\n\n----------------------------------------\n\nTITLE: Get Role Assignments in Entra ID PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all role assignments in Microsoft Entra ID. It first connects to Entra ID using `Connect-Entra` with the necessary scopes and then executes the `Get-EntraDirectoryRoleAssignment` cmdlet without any specific parameters to fetch all role assignments.  The output displays a list of role assignments with their properties such as Id, PrincipalId, RoleDefinitionId, DirectoryScopeId, and AppScopeId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDirectoryRoleAssignment.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory', 'EntitlementManagement.Read.All'\nGet-EntraDirectoryRoleAssignment\n```\n\n----------------------------------------\n\nTITLE: Block Cloud Object Takeover - PowerShell\nDESCRIPTION: This example demonstrates how to block cloud object takeover through hard matching by enabling the BlockCloudObjectTakeoverThroughHardMatch feature for a specific tenant. It also shows how to retrieve the TenantId dynamically.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraDirSyncFeature.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'OnPremDirectorySynchronization.ReadWrite.All'\n$tenantID = (Get-EntraContext).TenantId\nSet-EntraDirSyncFeature -Feature 'BlockCloudObjectTakeoverThroughHardMatch' -Enable $true -TenantId $tenantID -Force\n```\n\n----------------------------------------\n\nTITLE: Create Group with IsAssignableToRole - New-EntraBetaGroup PowerShell\nDESCRIPTION: This snippet demonstrates how to create a new Microsoft Entra ID group where the group can be assigned to a role using the New-EntraBetaGroup cmdlet. It requires the 'Group.ReadWrite.All' and 'Group.Create' scopes and specifies parameters such as DisplayName, Description, MailEnabled, MailNickname, SecurityEnabled and IsAssignableToRole. The output shows the created group's properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaGroup.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All','Group.Create'\n$params = @{\n    DisplayName = 'HelpDesk admin group2'\n    Description = 'Group assignable to role'\n    MailEnabled = $False\n    MailNickname = 'helpDeskAdminGroup'\n    SecurityEnabled = $True\n    IsAssignableToRole = $True\n}\n\nNew-EntraBetaGroup @params\n```\n\nLANGUAGE: powershell\nCODE:\n```\nDisplayName           Id                                   MailNickname       Description              GroupTypes\n-----------           --                                   ------------       -----------              ----------\nHelpDesk admin group2 vvvvvvvv-8888-9999-0000-jjjjjjjjjjjj helpDeskAdminGroup Group assignable to role {}\n```\n\n----------------------------------------\n\nTITLE: Get All Policies - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all policies in Microsoft Entra ID. It connects to Entra ID with the 'Policy.Read.All' scope and then executes the Get-EntraPolicy cmdlet without any parameters to retrieve all policies.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraPolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.All'\nGet-EntraPolicy\n```\n\n----------------------------------------\n\nTITLE: Create Org-Wide Authentication Rollout Policy\nDESCRIPTION: This example demonstrates creating a policy for cloud authentication roll-out in Microsoft Entra ID and applying it to the entire organization. It connects to Entra ID with Directory.ReadWrite.All scopes, creates the policy for 'PassthroughAuthentication', sets the display name, disables it, and applies it to the entire organization using `-IsAppliedToOrganization $false`. The output shows the created policy's properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraFeatureRolloutPolicy.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\nNew-EntraFeatureRolloutPolicy -Feature 'PassthroughAuthentication' -DisplayName 'FeatureRolloutPolicy' -IsEnabled $false -IsAppliedToOrganization $false\n```\n\n----------------------------------------\n\nTITLE: New Application Creation\nDESCRIPTION: This snippet demonstrates the basic usage of `New-EntraBetaApplication` to create a new application with a specified display name. It requires the `Application.ReadWrite.All` and `Application.ReadWrite.OwnedBy` scopes. The output displays the new application's properties, including DisplayName, Id, AppId, SignInAudience, and PublisherDomain.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplication.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\nNew-EntraBetaApplication -DisplayName 'My new application'\n```\n\n----------------------------------------\n\nTITLE: Update Application Identifier URIs - PowerShell\nDESCRIPTION: This snippet shows how to update the IdentifierUris property of an application using the Set-EntraApplication cmdlet. It fetches the application object using Get-EntraApplication and updates its IdentifierUris property. Requires the 'Application.ReadWrite.All' and 'Application.ReadWrite.OwnedBy' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraApplication.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\nSet-EntraApplication -ApplicationId $application.Id -IdentifierUris 'https://mynewapp.contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Retrieve and Select Group Member Properties - PowerShell\nDESCRIPTION: This snippet retrieves members of a specified group using its GroupId.  It then selects specific properties (Id, DisplayName, @odata.type) of each member for output.  It requires the 'GroupMember.Read.All' scope to be granted via Connect-Entra.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaGroupMember.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All'\n$group = Get-EntraBetaGroup -Filter \"DisplayName eq 'Sales and Marketing'\"\nGet-EntraBetaGroup -GroupId $group.Id | Get-EntraBetaGroupMember | Select-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Retrieve Top Registered Owner of a Device\nDESCRIPTION: This example retrieves the top registered owner of a device, limiting the results to one entry.  It connects to Entra ID with 'Device.Read.All' scope, gets the device by display name and then uses Get-EntraBetaDeviceRegisteredOwner with the `-Top 1` parameter. Selects and formats properties for readability. It requires the 'Device.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeviceRegisteredOwner.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\n$device = Get-EntraBetaDevice -SearchString '<device-display-name>'\nGet-EntraBetaDeviceRegisteredOwner -DeviceId $device.ObjectId -Top 1 |\nSelect-Object Id, displayName, UserPrincipalName, createdDateTime, userType, accountEnabled |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get User by MailNickname - EntraBetaUser PowerShell\nDESCRIPTION: This example demonstrates how to retrieve users from Microsoft Entra ID using the `-Filter` parameter with a MailNickname. The `Connect-Entra` cmdlet is used to establish a connection with the required scopes, and `Get-EntraBetaUser` is used with the `-Filter` parameter with `startsWith` to find users whose MailNickname starts with a specified string.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUser.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraBetaUser -Filter \"startsWith(MailNickname,'Ada')\"\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Devices - Filter\nDESCRIPTION: This PowerShell snippet retrieves deleted devices based on a filter expression. It establishes a connection to Entra ID, then employs Get-EntraDeletedDevice with the `-Filter` parameter to retrieve devices that match the provided filter. Finally, it selects and formats the resulting device properties for display.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedDevice.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraDeletedDevice -Filter \"DisplayName eq 'Contoso Desktop'\" | Select-Object DeletedDateTime, Id, AccountEnabled, ApproximateLastSignInDateTime, DeviceId, DisplayName, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Groups Containing String - PowerShell\nDESCRIPTION: This PowerShell snippet retrieves deleted groups containing a specific string in their properties. It connects to Entra ID and uses the `-SearchString` parameter to filter groups based on the provided string, formatting the output for display.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedGroup.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Group.Read.All'\nGet-EntraDeletedGroup -SearchString 'Contoso Group' | Select-Object Id, DisplayName, MailNickname, GroupTypes, DeletedDateTime, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Update Multiple Device Properties - PowerShell\nDESCRIPTION: This snippet demonstrates how to update multiple properties of a specified device in Microsoft Entra ID using the Set-EntraBetaDevice cmdlet. It connects to Entra ID, retrieves a device by its display name, and then updates several properties using a hashtable. Requires 'Directory.AccessAsUser.All' and 'Device.ReadWrite.All' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaDevice.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.AccessAsUser.All', 'Device.ReadWrite.All'\n$device = Get-EntraBetaDevice -Filter \"DisplayName eq 'Woodgrove Desktop'\"\n$params = @{\n    DeviceObjectId      = $device.ObjectId\n    DeviceMetadata      = 'Testdevice'\n    DeviceObjectVersion = 4\n    DevicePhysicalIds   = '[GID]:g:1234567890123456'\n    IsCompliant         = $false\n}\nSet-EntraBetaDevice @params\n```\n\n----------------------------------------\n\nTITLE: Enable a Directory Synchronization Feature - PowerShell\nDESCRIPTION: This example demonstrates how to enable a directory synchronization feature (BlockCloudObjectTakeoverThroughHardMatch) for the tenant using the Set-EntraDirSyncFeature cmdlet. It requires connecting to Entra ID with the 'OnPremDirectorySynchronization.ReadWrite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraDirSyncFeature.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'OnPremDirectorySynchronization.ReadWrite.All'\nSet-EntraDirSyncFeature -Feature 'BlockCloudObjectTakeoverThroughHardMatch' -Enable $true\n```\n\n----------------------------------------\n\nTITLE: Update Device OS Type - PowerShell\nDESCRIPTION: This example shows how to update the operating system type of a device using the Set-EntraDevice cmdlet. It connects to Entra ID, retrieves the device object, and then updates the DeviceOSType property.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraDevice.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.AccessAsUser.All', 'Device.ReadWrite.All'\n$device = Get-EntraDevice -Filter \"DisplayName eq 'Woodgrove Desktop'\"\nSet-EntraDevice -DeviceObjectId $device.ObjectId -DeviceOSType Windows\n```\n\n----------------------------------------\n\nTITLE: Get User Administrative Units (GetQuery)\nDESCRIPTION: This snippet shows the syntax for retrieving administrative units a user belongs to using the GetQuery parameter set. It uses the UserId parameter to identify the user and can optionally use the All, Top, and Property parameters to filter and limit the results.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserAdministrativeUnit.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraUserAdministrativeUnit\n -UserId <String>\n [-All]\n [-Top <Int32>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get SKUs for a company - PowerShell\nDESCRIPTION: This PowerShell script retrieves all the SKUs (commercial subscriptions) for a company. It first connects to Entra ID with the required scopes and then executes the `Get-EntraBetaAccountSku` cmdlet to fetch the list of SKUs. The output displays details such as ID, Account ID, Account Name, and SkuId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAccountSku.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All', 'LicenseAssignment.Read.All'\nGet-EntraBetaAccountSku\n```\n\n----------------------------------------\n\nTITLE: Get Top N Application Templates - PowerShell\nDESCRIPTION: This example retrieves the top two application templates using the `-Top` parameter. It also demonstrates how to use `-Limit` as an alias for `-Top`.  It requires the 'Application.Read.All' scope.  The output will only include the first two entries.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplicationTemplate.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraApplicationTemplate -Top 2 -Select Id, DisplayName, Publisher, Categories\n```\n\n----------------------------------------\n\nTITLE: Update Device Account Enabled - PowerShell\nDESCRIPTION: This snippet illustrates how to update the account enabled status of a specified device in Microsoft Entra ID using the Set-EntraBetaDevice cmdlet. It connects to Entra ID, retrieves a device by its display name, and then updates the AccountEnabled property. Requires 'Directory.AccessAsUser.All' and 'Device.ReadWrite.All' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaDevice.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.AccessAsUser.All', 'Device.ReadWrite.All'\n$device = Get-EntraBetaDevice -Filter \"DisplayName eq 'Woodgrove Desktop'\"\nSet-EntraBetaDevice -DeviceObjectId $device.ObjectId -AccountEnabled $true\n```\n\n----------------------------------------\n\nTITLE: Get Administrative Units Filtered by Display Name - PowerShell\nDESCRIPTION: This example demonstrates how to filter administrative units based on their display name using the `-Filter` parameter with an OData query. It requires the 'AdministrativeUnit.Read.All' scope. The output includes properties for each matching administrative unit.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAdministrativeUnit.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.Read.All'\nGet-EntraAdministrativeUnit -Filter \"DisplayName eq 'DAU-Test'\"\n```\n\n----------------------------------------\n\nTITLE: Get Role Assignments by Id PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a specific role assignment by its ID. It first connects to Entra ID and then retrieves a user and a role definition. Next, it retrieves all role assignments and filters them to find the one associated with the user and role. Finally, it retrieves the specific role assignment using its `UnifiedRoleAssignmentId`. The example requires the `RoleManagement.Read.Directory` and `EntitlementManagement.Read.All` scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDirectoryRoleAssignment.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory', 'EntitlementManagement.Read.All'\n$user = Get-EntraUser -UserId 'SawyerM@contoso.com'\n$role = Get-EntraDirectoryRoleDefinition -Filter \"DisplayName eq 'Helpdesk Administrator'\"\n$assignment = Get-EntraDirectoryRoleAssignment -All | Where-Object { $_.principalId -eq $user.Id -AND $_.RoleDefinitionId -eq $role.Id }\nGet-EntraDirectoryRoleAssignment -UnifiedRoleAssignmentId $assignment.Id\n```\n\n----------------------------------------\n\nTITLE: Get Tenant Details using Get-EntraTenantDetail PowerShell Cmdlet\nDESCRIPTION: Retrieves the details of a tenant in Microsoft Entra ID using the `Get-EntraTenantDetail` cmdlet.  It requires the Microsoft.Entra module. The signed-in user needs appropriate Microsoft Entra roles or custom roles with the necessary permissions.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraTenantDetail.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraTenantDetail\n [-All]\n [-Top <Int32>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Reset Strong Authentication Method Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Reset-EntraStrongAuthenticationMethodByUpn cmdlet, which resets a user's strong authentication method using their User Principal Name (UPN). The cmdlet allows specifying the UserPrincipalName and an optional TenantId. It also supports common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Reset-EntraStrongAuthenticationMethodByUpn.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nReset-EntraStrongAuthenticationMethodByUpn\n -UserPrincipalName <String>\n [-TenantId <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Update Group Display Name - PowerShell\nDESCRIPTION: This example demonstrates how to update the display name of an existing Microsoft Entra ID group.  It first connects to Entra ID, retrieves the group using Get-EntraGroup, and then uses Set-EntraGroup to modify the DisplayName property.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraGroup.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All'\n$group = Get-EntraGroup -Filter \"displayName eq 'HelpDesk Team Leaders'\"\nSet-EntraGroup -GroupId $group.Id -DisplayName 'Global HelpDesk Team Leaders'\n```\n\n----------------------------------------\n\nTITLE: List risky sign-ins - PowerShell\nDESCRIPTION: This example retrieves audit logs of sign-ins that are considered risky.  It connects to Entra ID and uses the `Get-EntraAuditSignInLog` cmdlet with a `-Filter` parameter to select sign-ins where the `riskLevelDuringSignIn` is not 'none' or where any of the `riskEventTypes_v2` are not 'none'. The `-Limit` parameter limits the output to one entry, and `Select-Object` is used to display relevant properties like ID, user display name, application display name, client application used, risk level during sign-in, and risk event types.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAuditSignInLog.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All','Directory.Read.All'\nGet-EntraAuditSignInLog -Filter \"\n    (riskLevelDuringSignIn ne 'none' or \n    riskEventTypes_v2/any(r:r ne 'none'))\n\" -Limit 1 | \nSelect-Object id, userDisplayName, appDisplayName, clientAppUsed, \n              riskLevelDuringSignIn, riskEventTypes_v2\n```\n\n----------------------------------------\n\nTITLE: Remove Application Key Credential Example - PowerShell\nDESCRIPTION: Demonstrates how to remove a key credential from an application using `Remove-EntraApplicationKeyCredential`. It connects to Entra ID, retrieves an application, and then removes a specified key credential.\n\nDependencies: Requires the Microsoft.Entra module to be installed and the user to be connected to Entra ID with appropriate scopes (Application.ReadWrite.All, Application.ReadWrite.OwnedBy).\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraApplicationKeyCredential.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\nRemove-EntraApplicationKeyCredential -ApplicationId $application.Id -KeyId 'aaaaaaaa-0b0b-1c1c-2d2d-333333333333'\n```\n\n----------------------------------------\n\nTITLE: Get-EntraNamedLocationPolicy Syntax - By ID\nDESCRIPTION: This shows the syntax for the Get-EntraNamedLocationPolicy cmdlet when retrieving a specific named location policy by its ID. It requires the -PolicyId parameter. It also allows specifying properties to be returned using the -Property parameter. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraNamedLocationPolicy.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraNamedLocationPolicy\n -PolicyId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Set User Thumbnail Photo from Stream - PowerShell\nDESCRIPTION: Sets the thumbnail photo of a user using a stream. Requires the 'User.ReadWrite' or 'User.ReadWrite.All' permission. The -FileStream parameter specifies the stream containing the image data, and -UserId specifies the target user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUserThumbnailPhoto.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-EntraUserThumbnailPhoto\n -FileStream <Stream>\n [-UserId <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Update Help URL using Set-EntraPartnerInformation (PowerShell)\nDESCRIPTION: This code snippet demonstrates how to update the help URL for a partner using the Set-EntraPartnerInformation cmdlet. It first connects to Entra ID with the necessary scopes and then updates the PartnerHelpUrl.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraPartnerInformation.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.ReadWrite.All'\nSet-EntraPartnerInformation -PartnerHelpUrl 'http://www.help.contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Get Objects by Type - Get-EntraBetaObjectByObjectId - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve Microsoft Entra objects based on their Object IDs and specified type using the `Get-EntraBetaObjectByObjectId` cmdlet. It requires the 'Directory.Read.All' scope to be authorized and specifies both the object ID and the object type.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaObjectByObjectId.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\nGet-EntraBetaObjectByObjectId -ObjectIds 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb' -Types User\n```\n\n----------------------------------------\n\nTITLE: Set User Extension - Multiple Values Example - PowerShell\nDESCRIPTION: This example shows how to update multiple user extension attributes using a dictionary. It uses the Set-EntraUserExtension cmdlet with the -UserId and -ExtensionNameValues parameters. Prior connection to Entra ID with appropriate scopes ('User.ReadWrite.All') is required.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUserExtension.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\n$userExtensionValues = New-Object 'System.Collections.Generic.Dictionary[String,String]'\n$userExtensionValues.Add(\"extension_d2ba83696c3f45429fbabb363ae391a0_Benefits\", \"Pension\")\n$userExtensionValues.Add(\"extension_d2ba83696c3f45429fbabb363ae391a0_JobGroup\", \"D\")\nSet-EntraUserExtension -UserId 'SawyerM@contoso.com' -ExtensionNameValues $userExtensionValues\n```\n\n----------------------------------------\n\nTITLE: Get Permissions for Read Permissions - PowerShell\nDESCRIPTION: This example demonstrates how to get a list of permissions related to 'application.Read' using `Find-EntraPermission` and pipes the output to `Format-List` for detailed display of the permissions properties such as Id, PermissionType, Consent, Name and Description.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Find-EntraPermission.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nFind-EntraPermission application.Read | Format-List\n```\n\n----------------------------------------\n\nTITLE: Create Service Principal with KeyCredentials\nDESCRIPTION: This example shows how to create a new service principal using the KeyCredentials parameter. It demonstrates how to create a KeyCredential object and set its properties before using it with the New-EntraBetaServicePrincipal cmdlet.  It retrieves an application by its display name using Get-EntraBetaApplication and then creates the service principal with the specified parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaServicePrincipal.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$creds = New-Object Microsoft.Open.AzureAD.Model.KeyCredential\n$creds.CustomKeyIdentifier = [System.Text.Encoding]::UTF8.GetBytes('Test')\n$startdate = Get-Date -Year 2024 -Month 07 -Day 23\n$creds.StartDate = $startdate\n$creds.Type = 'Symmetric'\n$creds.Usage = 'Sign'\n$creds.Value = [System.Text.Encoding]::UTF8.GetBytes('strong-cred-value')\n$creds.EndDate = Get-Date -Year 2024 -Month 10 -Day 23\n$application = Get-EntraBetaApplication -Filter \"DisplayName eq 'Helpdesk Application'\"\n\nNew-EntraBetaServicePrincipal -AppId $application.AppId -KeyCredentials $creds\n```\n\nLANGUAGE: powershell\nCODE:\n```\nDisplayName Id                                   AppId                                SignInAudience ServicePrincipalType\n----------- --                                   -----                                -------------- --------------------\nHelpdesk Application    bbbbbbbb-1111-2222-3333-cccccccccccc 00001111-aaaa-2222-bbbb-3333cccc4444 AzureADMyOrg   Application\n```\n\n----------------------------------------\n\nTITLE: Removing Group Lifecycle Policy Example - PowerShell\nDESCRIPTION: This example demonstrates how to remove a group lifecycle policy. It first connects to Entra with the required scopes, then retrieves the group lifecycle policy using Get-EntraGroupLifecyclePolicy and filters the result based on AlternateNotificationEmails. Finally, it pipes the filtered policy to Remove-EntraGroupLifecyclePolicy to delete it.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraGroupLifecyclePolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\nGet-EntraGroupLifecyclePolicy | Where-Object {$_.AlternateNotificationEmails -eq 'example@contoso.com'} | Remove-EntraGroupLifecyclePolicy\n```\n\n----------------------------------------\n\nTITLE: Search Entra Users by UserPrincipalName - PowerShell\nDESCRIPTION: This snippet searches for a user by `userPrincipalName` using the `Get-EntraUser` cmdlet with the `-Filter` parameter.  The `eq` operator filters users whose user principal name matches 'SawyerM@contoso.com'.  It requires the `User.Read.All` scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-user.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraUser -Filter \"userPrincipalName eq 'SawyerM@contoso.com'\"\n```\n\n----------------------------------------\n\nTITLE: Get Scoped Role Administrator - PowerShell\nDESCRIPTION: This PowerShell code snippet demonstrates how to retrieve a scoped role administrator for a specific administrative unit. It connects to Entra ID, retrieves the 'Helpdesk Administrator' role and the 'Pacific Administrative Unit', then retrieves the scoped role membership by filtering based on the role ID and administrative unit ID. Finally, it gets the scoped role membership using its ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraScopedRoleMembership.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory'\n$role = Get-EntraDirectoryRole -Filter \"DisplayName eq 'Helpdesk Administrator'\" \n$administrativeUnit = Get-EntraAdministrativeUnit -Filter \"DisplayName eq 'Pacific Administrative Unit'\"\n$roleMembership = Get-EntraScopedRoleMembership -AdministrativeUnitId $administrativeUnit.Id | Where-Object {$_.RoleId -eq $role.Id}\nGet-EntraScopedRoleMembership -AdministrativeUnitId $administrativeUnit.Id -ScopedRoleMembershipId $roleMembership.Id\n```\n\n----------------------------------------\n\nTITLE: Remove Administrative Unit via Pipeline - PowerShell\nDESCRIPTION: Illustrates removing an administrative unit using pipelining. It connects to Entra with the required scopes, retrieves the administrative unit based on its display name, and pipes the output to the Remove-EntraBetaAdministrativeUnit cmdlet for removal. Replace '<administrative-unit-display-name>' with the actual display name.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaAdministrativeUnit.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.ReadWrite.All'\nGet-EntraBetaAdministrativeUnit -Filter \"DisplayName eq '<administrative-unit-display-name>'\" | Remove-EntraBetaAdministrativeUnit\n```\n\n----------------------------------------\n\nTITLE: Connect to Entra ID with Client Secret Credential\nDESCRIPTION: Authenticates to Microsoft Entra ID using client secret credentials. This method is suitable for background interactions and involves retrieving the client secret via Get-Credential.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Connect-Entra.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\n$ClientSecretCredential = Get-Credential -Credential '00001111-aaaa-2222-bbbb-3333cccc4444'\n# Enter client_secret in the password prompt.\nConnect-Entra -TenantId 'aaaabbbb-0000-cccc-1111-dddd2222eeee' -ClientSecretCredential $ClientSecretCredential\n```\n\n----------------------------------------\n\nTITLE: Remove Member from Directory Role - PowerShell\nDESCRIPTION: This example demonstrates how to remove a member from a specified directory role in Microsoft Entra ID. It connects to Entra ID with the required scope, retrieves the directory role and member objects, and then removes the member using the Remove-EntraBetaDirectoryRoleMember cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaDirectoryRoleMember.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory'\n$directoryRole = Get-EntraBetaDirectoryRole -Filter \"displayName eq 'Helpdesk Administrator'\"\n$member = Get-EntraBetaDirectoryRoleMember -DirectoryRoleId $directoryRole.Id | Select Id, DisplayName, '@odata.type' | Where-Object {$_.DisplayName -eq 'Sawyer Miller'}\nRemove-EntraBetaDirectoryRoleMember -DirectoryRoleId $directoryRole.Id -MemberId $member.Id\n```\n\n----------------------------------------\n\nTITLE: Enable Azure AD Aliases for Entra PowerShell\nDESCRIPTION: This command simplifies migration from Azure AD PowerShell to Microsoft Entra PowerShell by enabling aliases. It requires the Microsoft.Entra module to be installed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/overview.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n[enable-entraazureadalis]: /powershell/module/microsoft.entra/enable-entraazureadalias\n```\n\n----------------------------------------\n\nTITLE: Get Predefined Value by ID - Entra Custom Security Attributes (PowerShell)\nDESCRIPTION: This PowerShell snippet demonstrates how to retrieve a specific predefined value for a custom security attribute definition using the `Get-EntraCustomSecurityAttributeDefinitionAllowedValue` cmdlet with the `-Id` parameter. It connects to Entra, retrieves the attribute definition, and then gets the allowed value by its ID.  The signed-in user must have the Attribute Definition Reader or Administrator role.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraCustomSecurityAttributeDefinitionAllowedValue.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'CustomSecAttributeDefinition.ReadWrite.All'\n$attributeDefinition = Get-EntraCustomSecurityAttributeDefinition | Where-Object {$_.Name -eq 'Engineering'}\nGet-EntraCustomSecurityAttributeDefinitionAllowedValue -CustomSecurityAttributeDefinitionId $attributeDefinition.Id -Id 'Alpine'\n```\n\n----------------------------------------\n\nTITLE: Create a Device with New-EntraBetaDevice\nDESCRIPTION: Demonstrates how to create a new device in Microsoft Entra ID using the New-EntraBetaDevice cmdlet.  It requires connecting to Entra ID with specific scopes. The example also shows how to create AlternativeSecurityId. It then creates the device with AccountEnabled, DisplayName, AlternativeSecurityIds, DeviceId, DeviceOSType, and DeviceOSVersion parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaDevice.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.AccessAsUser.All', 'Device.ReadWrite.All'\n$guid = [guid]::NewGuid()\n$newId = New-Object Microsoft.Open.AzureAD.Model.AlternativeSecurityId\n$newId.Key = [System.Text.Encoding]::UTF8.GetBytes('test')\n$newId.type = 2\n$params = @{\n    AccountEnabled         = $true\n    DisplayName            = 'My new device'\n    AlternativeSecurityIds = $newId\n    DeviceId               = $guid\n    DeviceOSType           = 'OS/2'\n    DeviceOSVersion        = '9.3'\n}\nNew-EntraBetaDevice @params\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nObjectId                             DeviceId                             DisplayName\n--------                             --------                             -----------\naaaaaaaa-0000-1111-2222-bbbbbbbbbbbb dddddddd-3333-4444-5555-eeeeeeeeeeee My new device\n```\n\n----------------------------------------\n\nTITLE: Get Device by ID - EntraBetaDevice - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a specific device from Microsoft Entra ID using its object ID after first retrieving the device using its display name. It requires the 'Device.Read.All' scope and uses the Connect-Entra cmdlet for authentication. The output displays device properties like Id, AccountEnabled, and DeviceId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDevice.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\n$device = Get-EntraBetaDevice -SearchString '<device-display-name>'\nGet-EntraBetaDevice -DeviceId $device.ObjectId\n```\n\n----------------------------------------\n\nTITLE: Get Top N OAuth2 Permission Grants of Service Principal - PowerShell\nDESCRIPTION: This example retrieves a specified number of OAuth2 permission grants for a service principal. It utilizes the `-Top` parameter (or its alias `-Limit`) to limit the number of returned permission grants, after connecting to Entra ID and identifying the target service principal.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalOAuth2PermissionGrant.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraBetaServicePrincipalOAuth2PermissionGrant -ServicePrincipalId $servicePrincipal.Id -Top 2\n```\n\n----------------------------------------\n\nTITLE: Add member to Entra ID role - PowerShell\nDESCRIPTION: Adds a user to a specified Microsoft Entra ID role.  It first connects to Entra ID using `Connect-Entra`, then retrieves the directory role and user objects using `Get-EntraBetaDirectoryRole` and `Get-EntraBetaUser` respectively, and finally adds the user as a member to the role.  Requires the 'RoleManagement.ReadWrite.Directory' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaDirectoryRoleMember.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory'\n$directoryRole = Get-EntraBetaDirectoryRole -Filter \"DisplayName eq 'Helpdesk Administrator'\"\n$user = Get-EntraBetaUser -UserId 'SawyerM@Contoso.com'\nAdd-EntraBetaDirectoryRoleMember -DirectoryRoleId $directoryRole.Id -MemberId $user.Id\n```\n\n----------------------------------------\n\nTITLE: Install Microsoft Graph PowerShell Beta Modules\nDESCRIPTION: This PowerShell script installs the required modules for the Microsoft Graph PowerShell SDK Beta. It defines an array containing the names of the required Beta modules. The script then loops through each module name and checks if the module is already installed. If not, it installs the module for the current user using the Install-Module cmdlet with the Scope parameter set to CurrentUser.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/includes/install-entra-powershell-dependencies.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$RequiredModules = (@'\nMicrosoft.Graph.Beta.Applications\nMicrosoft.Graph.Beta.Users\nMicrosoft.Graph.Beta.Users.Actions\nMicrosoft.Graph.Beta.Users.Functions\nMicrosoft.Graph.Beta.Groups\nMicrosoft.Graph.Beta.Identity.DirectoryManagement\nMicrosoft.Graph.Beta.Identity.Governance\nMicrosoft.Graph.Beta.Identity.SignIns\nMicrosoft.Graph.Beta.Reports\n'@).Split(\"`n\")\n# Check if the pre-requisite modules are installed and install them if needed\nforeach ($module in $RequiredModules) {\n    Write-Host -ForegroundColor Yellow -BackgroundColor DarkBlue \"Checking for $module\"\n    if (!(Get-Module -Name $module -ListAvailable)) {\n        Install-Module -Name $module -Scope CurrentUser\n    }\n}\n\n<# Attribution: https://github.com/SamErde and https://github.com/alexandair #>\n```\n\n----------------------------------------\n\nTITLE: Update Microsoft Entra Module - PowerShell\nDESCRIPTION: This command updates the Microsoft.Entra PowerShell module to the latest version available in the PowerShell Gallery.  It ensures that you have the most recent features and bug fixes. No specific inputs are required. The execution of this command upgrades the module, if a newer version is available.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/troubleshooting.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nUpdate-Module -Name Microsoft.Entra\n```\n\n----------------------------------------\n\nTITLE: Update Application Group Membership Claims - PowerShell\nDESCRIPTION: This snippet demonstrates how to update the GroupMembershipClaims property of an application using the Set-EntraApplication cmdlet.  It retrieves the application object using Get-EntraApplication and sets the GroupMembershipClaims property. Requires the 'Application.ReadWrite.All' and 'Application.ReadWrite.OwnedBy' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraApplication.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\nSet-EntraApplication -ApplicationId $application.Id -GroupMembershipClaims 'SecurityGroup'\n```\n\n----------------------------------------\n\nTITLE: Assign Single Group Sponsor - PowerShell\nDESCRIPTION: Assigns a single group as a sponsor to a target user account using the Set-EntraUserSponsor cmdlet. It connects to Entra ID with User.ReadWrite.All and GroupMember.Read.All scopes, retrieves the group ID, and then sets the group as the sponsor.  It requires the Microsoft.Entra.Beta module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUserSponsor.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All', 'GroupMember.Read.All'\n$group = Get-EntraGroup -SearchString 'Sales and Marketing'\nSet-EntraUserSponsor -UserId 'JohnstoneH@fabrikam.com' -Type Group -SponsorIds $group.Id\n```\n\n----------------------------------------\n\nTITLE: Resolve Tenants from File (Domain Names) - Entra PowerShell\nDESCRIPTION: This example demonstrates resolving multiple Entra tenants by reading a list of domain names from a file and passing it to the Resolve-EntraTenant cmdlet.  It requires the 'CrossTenantInformation.ReadBasic.All' scope. The file 'DomainList.txt' should contain one domain name per line.  The output displays details for each resolved tenant.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Resolve-EntraTenant.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'CrossTenantInformation.ReadBasic.All'\n$domainList = Get-Content .\\DomainList.txt\nResolve-EntraTenant -DomainName $domainList\n```\n\nLANGUAGE: powershell\nCODE:\n```\nEnvironment                   : Global\nValueToResolve                : Example1.com\nValueFormat                   : DomainName\nResult                        : Resolved\nResultMessage                 : Resolved Tenant\nTenantId                      : aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb\nDisplayName                   : Example1, Ltd\nDefaultDomainName             : example.com\nFederationBrandName           :\nOidcMetadataResult            : Resolved\nOidcMetadataTenantId          : aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb\nOidcMetadataTenantRegionScope : NA\n\nEnvironment                   : Global\nValueToResolve                : Example2.com\nValueFormat                   : DomainName\nResult                        : Resolved\nResultMessage                 : Resolved Tenant\nTenantId                      : aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb\nDisplayName                   : Example2, Ltd\nDefaultDomainName             : Example.com\nFederationBrandName           :\nOidcMetadataResult            : Resolved\nOidcMetadataTenantId          : aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb\nOidcMetadataTenantRegionScope : NA\n```\n\n----------------------------------------\n\nTITLE: Get top OAuth2 permission grant - PowerShell\nDESCRIPTION: This example retrieves the top one OAuth2 permission grant for a user in Microsoft Entra ID using the `-Top` parameter with the `Get-EntraBetaUserOAuth2PermissionGrant` cmdlet. The `-UserId` parameter specifies the user ID, and `-Top 1` limits the results to the first entry. It requires connecting to Entra ID with the 'Directory.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserOAuth2PermissionGrant.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\nGet-EntraBetaUserOAuth2PermissionGrant -UserId 'SawyerM@contoso.com' -Top 1\n```\n\n----------------------------------------\n\nTITLE: Get All Role Definitions - PowerShell\nDESCRIPTION: This code snippet retrieves all role definitions in Microsoft Entra ID using the Get-EntraDirectoryRoleDefinition command. It requires the Directory Readers role and the RoleManagement.Read.Directory scope.  The output displays the DisplayName, Id, TemplateId, and Description for each role definition.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-roles.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory'\nGet-EntraDirectoryRoleDefinition\n```\n\n----------------------------------------\n\nTITLE: Get All Deleted Groups - PowerShell\nDESCRIPTION: This PowerShell snippet retrieves all recoverable deleted groups in the Microsoft Entra ID. It connects to Entra ID and then uses Get-EntraDeletedGroup to fetch the groups, selecting specific properties for display in a formatted table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedGroup.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Group.Read.All'\nGet-EntraDeletedGroup | Select-Object Id, DisplayName, MailNickname, GroupTypes, DeletedDateTime, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Remove-EntraFeatureRolloutPolicy Syntax (PowerShell)\nDESCRIPTION: This is the syntax definition for the `Remove-EntraFeatureRolloutPolicy` cmdlet. It shows that the `-Id` parameter, which accepts a string representing the policy's unique identifier, is mandatory for removing the policy. This ensures that the correct policy is targeted for removal. The cmdlet also supports common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraFeatureRolloutPolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraFeatureRolloutPolicy\n -Id <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Update Trust Framework Policy from Content - PowerShell\nDESCRIPTION: This example updates a trust framework policy using the content specified in a variable. It first connects to Entra with the required scopes, reads the policy content from a file, and then uses `Set-EntraBetaTrustFrameworkPolicy` to update the policy with the given ID and content. The updated policy content is displayed on the screen.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaTrustFrameworkPolicy.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.TrustFramework'\n$policyContent = Get-Content 'C:\\temp\\CreatedPolicy.xml' | out-string\n$params = @{\n    Id  = 'B2C_1A_signup_signin'\n    Content =  $policyContent\n}\nSet-EntraBetaTrustFrameworkPolicy @params\n```\n\n----------------------------------------\n\nTITLE: Assign application users to app role assignments (Example 1)\nDESCRIPTION: This example demonstrates assigning users to app roles using the Set-EntraBetaAppRoleToApplicationUser command. It connects to Entra ID with necessary scopes, specifies the data source and file path for user data, and the application name in Entra ID. It creates missing users and app roles if they do not exist.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaAppRoleToApplicationUser.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All', 'Application.ReadWrite.All', 'AppRoleAssignment.ReadWrite.All', 'EntitlementManagement.ReadWrite.All'\nSet-EntraBetaAppRoleToApplicationUser -DataSource \"Generic\" -FilePath \"C:\\temp\\users.csv\" -ApplicationName \"TestApp\"\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Groups Containing String\nDESCRIPTION: This PowerShell script retrieves deleted groups containing a specific string. It connects to Entra ID with the necessary scopes and then uses `Get-EntraBetaDeletedGroup` with the `-SearchString` parameter to search for groups containing the specified string ('Contoso Group'). It selects specific properties and formats the output as a table. It requires the 'Group.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedGroup.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Group.Read.All'\nGet-EntraBetaDeletedGroup -SearchString 'Contoso Group' | Select-Object Id, DisplayName, MailNickname, GroupTypes, DeletedDateTime, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Retrieve All App Role Assignments of a Group - PowerShell\nDESCRIPTION: This example shows how to retrieve all application role assignments for a specific group using the `-All` parameter.  It requires connecting to Entra with the appropriate scope and retrieving the group object before calling the cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraGroupAppRoleAssignment.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\n$group = Get-EntraGroup -SearchString 'Contoso marketing'\nGet-EntraGroupAppRoleAssignment -GroupId $group.Id -All\n```\n\nLANGUAGE: powershell\nCODE:\n```\nObjectId                                    ResourceDisplayName                 PrincipalDisplayName\n--------                                    -------------------                 --------------------\nMSVrBV4APk--eAGnHqMKBLflsQG3rU1EmDFKvgra41I Microsoft Device Management Checkin Ask HR\nMSVrBV4APk--eAGnHqMKBExhQK4StEFHidLvUymzo4I ProvisioningPowerBi                 Ask HR\nMSVrBV4APk--eAGnHqMKBDtEqPRvu8xLqWHDSXUhoTE M365 License Manager                Ask HR\n```\n\n----------------------------------------\n\nTITLE: Get Top N Direct Reports - Get-EntraUserDirectReport PowerShell\nDESCRIPTION: Demonstrates how to retrieve a specified number of direct reports for a user in Microsoft Entra ID, using the `-Top` parameter.  The output includes Id, displayName, userPrincipalName, createdDateTime, accountEnabled, and userType, and is formatted into a table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserDirectReport.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraUserDirectReport -UserId 'SawyerM@contoso.com' -Top 2 |\nSelect-Object Id, displayName, userPrincipalName, createdDateTime, accountEnabled, userType |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Creating Extension Property - Target Objects Parameter\nDESCRIPTION: Illustrates how to create an application extension property targeting specific Microsoft Graph resources. It connects to Entra, retrieves an application, creates a list of target objects (e.g., 'User'), and then utilizes the `-TargetObjects` parameter in New-EntraBetaApplicationExtensionProperty to specify the target resources. Scopes: 'Application.ReadWrite.All', 'Application.ReadWrite.OwnedBy'.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplicationExtensionProperty.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraBetaApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\n$targets = New-Object System.Collections.Generic.List[System.String]\n$targets.Add('User')\nNew-EntraBetaApplicationExtensionProperty -ApplicationId $application.Id -Name 'NewAttribute2' -TargetObjects $targets\n```\n\nLANGUAGE: powershell\nCODE:\n```\nDeletedDateTime Id                                   AppDisplayName  DataType IsSyncedFromOnPremises Name                                                    TargetObjects\n--------------- --                                   --------------  -------- ---------------------- ----                                                    -------------\n                11112222-bbbb-3333-cccc-4444dddd5555 My new test app String   False                  extension_11112222-bbbb-3333-cccc-4444dddd5555_NewAttribute {User}\n```\n\n----------------------------------------\n\nTITLE: Removing a User Account - PowerShell\nDESCRIPTION: This snippet connects to Entra ID with the 'Directory.AccessAsUser.All' scope and removes a user account specified by UserID. Requires the Entra PowerShell module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-user.md#_snippet_25\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.AccessAsUser.All'\nRemove-EntraUser -UserId 'SawyerM@contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Get Self-Signed Certificate Thumbprint - PowerShell\nDESCRIPTION: This PowerShell snippet retrieves the self-signed certificate from the current user's certificate store. It is useful for obtaining the certificate thumbprint required for certificate-based authentication. This snippet uses Get-ChildItem to list certificates and requires PowerShell.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/app-only-access-auth.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-ChildItem Cert:\\CurrentUser\\My\n```\n\n----------------------------------------\n\nTITLE: Search Entra Users by Department - PowerShell\nDESCRIPTION: This snippet searches for users in a specific department using the `Get-EntraUser` cmdlet with the `-Filter` parameter.  The `eq` operator filters users whose department matches 'Marketing'.  It requires the `User.Read.All` scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-user.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraUser -Filter \"department eq 'Marketing'\"\n```\n\n----------------------------------------\n\nTITLE: Get Federation Properties for Domain - PowerShell\nDESCRIPTION: This code snippet retrieves federation properties for a specified domain using the Get-EntraFederationProperty cmdlet. It requires connecting to Entra ID with the 'Domain.Read.All' scope. The DomainName parameter specifies the domain for which to retrieve properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraFederationProperty.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Domain.Read.All'\nGet-EntraFederationProperty -DomainName contoso.com\n```\n\n----------------------------------------\n\nTITLE: Retrieve Top One Owned Object of a Service Principal (Example 3)\nDESCRIPTION: This example retrieves the top one owned object of a specified service principal. It uses the `-Top` parameter to limit the number of results to one. It requires a connection to Entra ID and the service principal's Id.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalOwnedObject.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraServicePrincipalOwnedObject -ServicePrincipalId $servicePrincipal.Id -Top 1 | Select-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Get Directory Role by ID - PowerShell\nDESCRIPTION: This snippet demonstrates how to retrieve a specific directory role by its ID using the Get-EntraDirectoryRole cmdlet and the -DirectoryRoleId parameter.  It first retrieves a directory role using a filter, then retrieves the role again using the role's ID.  It requires an active Entra ID connection.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDirectoryRole.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory'\n$directoryRole = Get-EntraDirectoryRole -Filter \"displayName eq 'Helpdesk Administrator'\"\nGet-EntraDirectoryRole -DirectoryRoleId $directoryRole.Id\n```\n\n----------------------------------------\n\nTITLE: Get Applications without User Assignment Required\nDESCRIPTION: This snippet retrieves a list of all applications where user assignment is not required. It retrieves all service principals using `Get-EntraServicePrincipal` and filters based on the `appRoleAssignmentRequired` property. The `Application.ReadWrite.All` scope is needed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-apps.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All'\nGet-EntraServicePrincipal -All | Where-Object {$_.appRoleAssignmentRequired -ne 'True'}\n```\n\n----------------------------------------\n\nTITLE: Get All OAuth2 Permission Grants\nDESCRIPTION: This example retrieves all OAuth2 permission grants. The `-All` parameter ensures that all available grants are fetched, bypassing any default limits. Requires 'Directory.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaOAuth2PermissionGrant.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\nGet-EntraBetaOAuth2PermissionGrant -All\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                              ClientId                             ConsentType   ExpiryTime          PrincipalId                          ResourceId                            Scope\n--                              --------                             -----------   ----------          -----------                          ----------                            -----\nA1bC2dE3fH4iJ5kL6mN7oP8qR9sT0u  00001111-aaaa-2222-bbbb-3333cccc4444 AllPrincipals 1/3/2024 1:28:59 PM                                      a0a0a0a0-bbbb-cccc-dddd-e1e1e1e1e1e1  User.ReadBasic.All\nC2dE3fH4iJ5kL6mN7oP8qR9sT0uV1w  00001111-aaaa-2222-bbbb-3333cccc4444 AllPrincipals 1/3/2024 1:28:59 PM                                      b1b1b1b1-cccc-dddd-eeee-f2f2f2f2f2f2  User.Read\nE3fH4iJ5kL6mN7oP8qR9sT0uV1wX2y  22223333-cccc-4444-dddd-5555eeee6666 Principal     1/3/2024 1:28:59 PM aaaaaaaa-bbbb-cccc-1111-222222222222 c2c2c2c2-dddd-eeee-ffff-a3a3a3a3a3a3  User.Read\nH4iJ5kL6mN7oP8qR9sT0uV1wX2yZ3a  22223333-cccc-4444-dddd-5555eeee6666 Principal     1/3/2024 1:28:59 PM aaaaaaaa-bbbb-cccc-1111-222222222222 d3d3d3d3-eeee-ffff-aaaa-b4b4b4b4b4b4  ActivityFeed.Read ServiceHealth.Read\n```\n\n----------------------------------------\n\nTITLE: Disable Service Principal Account - PowerShell\nDESCRIPTION: This example demonstrates how to disable the account of a service principal using the Set-EntraBetaServicePrincipal cmdlet. It connects to Entra ID, retrieves a service principal by its display name, and then disables its account.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaServicePrincipal.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nSet-EntraBetaServicePrincipal -ServicePrincipalId $servicePrincipal.Id -AccountEnabled $false\n```\n\n----------------------------------------\n\nTITLE: Get Top User-Created Object - PowerShell\nDESCRIPTION: This example retrieves the top one object created by a specific user using the -Top parameter, which can also be used as -Limit. It connects to Entra, fetches the specified number of objects, and then selects the Id, DisplayName, and @odata.type properties. The -UserId parameter identifies the user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserCreatedObject.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read','User.Read.All'\nGet-EntraBetaUserCreatedObject -UserId 'SawyerM@contoso.com' -Top 1 | Select-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: List Top N Applications - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a limited number of applications (in this case, the top 2) using the '-Top' parameter. It connects to Entra ID with 'Application.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplication.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraBetaApplication -Top 2\n```\n\n----------------------------------------\n\nTITLE: Get a group by DisplayName - PowerShell\nDESCRIPTION: This example retrieves a group from Microsoft Entra ID using its DisplayName.  It requires connecting to Entra ID with the GroupMember.Read.All scope.  The -Filter parameter is used to specify the display name of the group.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaGroup.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All'\nGet-EntraBetaGroup -Filter \"DisplayName eq 'Parents of Contoso'\"\n```\n\n----------------------------------------\n\nTITLE: Get Entra Domain by Name\nDESCRIPTION: Retrieves a specific domain from Microsoft Entra ID by its name, after establishing a connection with the 'Domain.Read.All' scope. Requires the domain name as input using the `-Name` parameter. Returns a domain object with properties like Id, AuthenticationType, and IsVerified.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDomain.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Domain.Read.All'\nGet-EntraDomain -Name TEST22.com\n```\n\n----------------------------------------\n\nTITLE: Example 2: Get a role assigment requests - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a specific role assignment request by its ID and provider ID.  The expected output is the specific role assignment request that matches the given criteria.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPrivilegedRoleAssignmentRequest.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> Get-EntraBetaPrivilegedRoleAssignmentRequest -ProviderId AzureResources -Id 247438d7-fc8d-4354-a737-4898a4019a95\n```\n\n----------------------------------------\n\nTITLE: Get Device by Display Name - PowerShell\nDESCRIPTION: Connects to Entra ID and retrieves a device by its display name using the '-Filter' parameter. Requires the Microsoft.Entra module and the 'Device.Read.All' scope. The display name is specified within the filter, enclosed in single quotes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDevice.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraDevice -Filter \"DisplayName eq 'Woodgrove Desktop'\"\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDeletedDateTime Id                                   AccountEnabled ApproximateLastSignInDateTime ComplianceExpirationDateTime DeviceCategory DeviceId                             DeviceMetadata DeviceOwnership\n--------------- --                                   -------------- ----------------------------- ---------------------------- -------------- --------                             -------------- ---------------\n                bbbbbbbb-1111-2222-3333-cccccccccccc True                                                                                     eeeeeeee-4444-5555-6666-ffffffffffff MetaData\n```\n\n----------------------------------------\n\nTITLE: Connect to Entra ID with Certificate Object\nDESCRIPTION: Connects to Entra ID using client credential with a certificate object. It retrieves the certificate and then passes it as a parameter for authentication.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Connect-Entra.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\n$Cert = Get-ChildItem Cert:\\LocalMachine\\My\\$CertThumbprint\n$params = @{\n    ClientId = '00001111-aaaa-2222-bbbb-3333cccc4444'\n    TenantId = 'aaaabbbb-0000-cccc-1111-dddd2222eeee'\n    Certificate = $Cert\n}\n\nConnect-Entra @params\n```\n\n----------------------------------------\n\nTITLE: Retrieve contacts filter by DisplayName PowerShell\nDESCRIPTION: This example retrieves contacts from the directory filtered by DisplayName. It connects to Entra ID using `Connect-Entra` with the 'OrgContact.Read.All' scope, and then uses `Get-EntraBetaContact` with the `-Filter` parameter to filter contacts whose display name equals 'Contoso Contact'.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaContact.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'OrgContact.Read.All'\nGet-EntraBetaContact -Filter \"displayName eq 'Contoso Contact'\"\n```\n\n----------------------------------------\n\nTITLE: Enable Global Secure Access Tenant\nDESCRIPTION: This PowerShell snippet demonstrates how to enable Global Secure Access for a tenant. It first connects to Entra using specific scopes for Network Access Policy, Application, and Network Access, then executes the `Enable-EntraBetaGlobalSecureAccessTenant` cmdlet to onboard the service.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Enable-EntraBetaGlobalSecureAccessTenant.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'NetworkAccessPolicy.ReadWrite.All', 'Application.ReadWrite.All', 'NetworkAccess.ReadWrite.All'\nEnable-EntraBetaGlobalSecureAccessTenant\n```\n\n----------------------------------------\n\nTITLE: Update permission grant policy description - PowerShell\nDESCRIPTION: Updates the description of a specified permission grant policy using Set-EntraBetaPermissionGrantPolicy. It first connects to Entra with the required scopes, retrieves the policy by its display name, and then updates its description. The `-Id` parameter specifies the policy's unique identifier and `-Description` parameter provides the new description.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaPermissionGrantPolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.PermissionGrant'\n$policy = Get-EntraBetaPermissionGrantPolicy | Where-Object { $_.DisplayName -eq 'Microsoft User Default Recommended Policy' }\nSet-EntraBetaPermissionGrantPolicy -Id $policy.Id -Description 'Updated description'\n```\n\n----------------------------------------\n\nTITLE: Retrieve Partner Information with TenantId - Example 2\nDESCRIPTION: This example shows how to retrieve partner information with a specific TenantId. It first connects to Entra ID, gets the current tenant ID, and then uses Get-EntraBetaPartnerInformation with the `-TenantId` parameter to retrieve partner information for that tenant.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPartnerInformation.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All'\n$tenantId = (Get-EntraContext).TenantId\nGet-EntraBetaPartnerInformation -TenantId $tenantId\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nPartnerCompanyName       : Contoso\ncompanyType              :\nPartnerSupportTelephones : {12123, +1911}\nPartnerSupportEmails     : {}\nPartnerHelpUrl           : http://www.help.contoso.com\nPartnerCommerceUrl       :\nObjectID                 : bbbbbbbb-1111-2222-3333-cccccccccccc\nPartnerSupportUrl        :\n```\n\n----------------------------------------\n\nTITLE: Get All Contact Memberships - PowerShell\nDESCRIPTION: This PowerShell code snippet retrieves all memberships of a specified contact in Microsoft Entra ID. It connects to Entra ID, retrieves the contact object, and then uses the Get-EntraBetaContactMembership cmdlet with the -All parameter to retrieve all memberships. The output is formatted into a table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaContactMembership.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'OrgContact.Read.All'\n$contact = Get-EntraBetaContact -Filter \"displayName eq 'Contoso Contact'\"\nGet-EntraBetaContactMembership -OrgContactId $contact.Id -All |\nSelect-Object Id, DisplayName, '@odata.type', SecurityEnabled | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get Top N Application Service Endpoints (PowerShell)\nDESCRIPTION: This example retrieves a limited number of service endpoints (in this case, the top 5) for an application, specified by its Service Principal ID.  It connects to Entra ID, finds the Service Principal, and then uses the `-Top` parameter of `Get-EntraApplicationServiceEndpoint` to limit the number of results returned. The `-Limit` alias can also be used.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplicationServiceEndpoint.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"DisplayName eq 'Contoso Helpdesk App'\"\nGet-EntraApplicationServiceEndpoint -ServicePrincipalId $servicePrincipal.Id -Top 5\n```\n\n----------------------------------------\n\nTITLE: List User Count Per Department - Entra ID - PowerShell\nDESCRIPTION: This example calculates and displays the number of users in each department. It retrieves all users using the `-All` parameter, groups them by department, and then displays the department name and the number of users in each. Requires 'User.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUser.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\n$departmentCounts = Get-EntraUser -All | Group-Object -Property Department | Select-Object Name, @{Name=\"MemberCount\"; Expression={$_.Count}}\n$departmentCounts | Format-Table Name, MemberCount -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Update KeyCredentials of Service Principal - PowerShell\nDESCRIPTION: This example shows how to update the KeyCredentials of a service principal. It creates a KeyCredential object and assigns values to properties such as CustomKeyIdentifier, StartDate, Type, Usage, Value, and EndDate.  It then uses Set-EntraServicePrincipal to apply the new credentials.  It connects to Entra ID with the required scopes, retrieves the service principal and then updates the KeyCredentials. It also requires the Application.ReadWrite.All and Application.ReadWrite.OwnedBy scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraServicePrincipal.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\n$creds = New-Object Microsoft.Open.AzureAD.Model.KeyCredential\n$creds.CustomKeyIdentifier = [System.Text.Encoding]::UTF8.GetBytes('Test')\n$startdate = Get-Date -Year 2024 -Month 10 -Day 10\n$creds.StartDate = $startdate\n$creds.Type = 'Symmetric'\n$creds.Usage = 'Sign'\n$creds.Value = [System.Text.Encoding]::UTF8.GetBytes('A')\n$creds.EndDate = Get-Date -Year 2025 -Month 12 -Day 20 \nSet-EntraServicePrincipal -ServicePrincipalId $servicePrincipal.Id -KeyCredentials $creds\n```\n\n----------------------------------------\n\nTITLE: Get groups with specific properties - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to retrieve groups and select specific properties in Microsoft Entra ID.  It connects to Entra ID using Connect-Entra, gets groups using Get-EntraGroup, specifies properties like Id, DisplayName, SecurityEnabled, Visibility, and GroupTypes with the `-Property` parameter. It then formats the selected properties into a table for display.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraGroup.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All'\nGet-EntraGroup -Property Id,DisplayName, SecurityEnabled,Visibility,GroupTypes | Select-Object Id,DisplayName, SecurityEnabled,Visibility,GroupTypes | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Updating IsAppliedToOrganization Parameter - PowerShell\nDESCRIPTION: This PowerShell code modifies the IsAppliedToOrganization parameter of a cloud authentication rollout policy in Microsoft Entra ID. It connects to Entra ID using the required scopes, retrieves the specific policy by its display name, and then updates the IsAppliedToOrganization property using the Set-EntraBetaFeatureRolloutPolicy cmdlet. The command requires the 'Directory.ReadWrite.All' scope, and the input is the policy's ID. The output is the policy object with the modified IsAppliedToOrganization parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaFeatureRolloutPolicy.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\n$policy = Get-EntraBetaFeatureRolloutPolicy -Filter \"DisplayName eq 'Feature-Rollout-Policy'\"\nSet-EntraBetaFeatureRolloutPolicy -Id $policy.Id -IsAppliedToOrganization $false\n```\n\n----------------------------------------\n\nTITLE: Get all service principals - PowerShell\nDESCRIPTION: This command retrieves all service principals in the Microsoft Entra tenant.  It uses the Get-EntraServicePrincipal cmdlet with the -All parameter. The results are then displayed with DisplayName and Id using Select-Object.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-user-group-assignment.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$servicePrincipals = Get-EntraServicePrincipal -All  \n$servicePrincipals | Select-Object DisplayName, Id\n```\n\n----------------------------------------\n\nTITLE: Enable Directory Sync Feature - PowerShell\nDESCRIPTION: This example demonstrates how to enable a specified directory synchronization feature for the tenant using the Set-EntraBetaDirSyncFeature cmdlet. It requires the 'OnPremDirectorySynchronization.ReadWrite.All' scope and forces the command to run without confirmation. Enabling features like EnableSoftMatchOnUpn and SynchronizationUpnForManagedUsers is permanent and cannot be undone.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaDirSyncFeature.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'OnPremDirectorySynchronization.ReadWrite.All'\nSet-EntraBetaDirSyncFeature -Feature 'BlockCloudObjectTakeoverThroughHardMatch' -Enable $true -Force\n```\n\n----------------------------------------\n\nTITLE: Get all Authorization Policies using Get-EntraAuthorizationPolicy (PowerShell)\nDESCRIPTION: This example demonstrates how to retrieve all Microsoft Entra ID authorization policies. It first connects to Entra ID using the specified scopes and then uses the Get-EntraAuthorizationPolicy cmdlet to fetch the policies.  It requires the 'Policy.Read.All' scope. The output displays key properties of the authorization policy.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAuthorizationPolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.All'\nGet-EntraAuthorizationPolicy\n```\n\n----------------------------------------\n\nTITLE: Block Soft Matching - PowerShell\nDESCRIPTION: This example shows how to block the Soft Matching feature for the tenant by enabling the 'BlockSoftMatch' feature using the Set-EntraBetaDirSyncFeature cmdlet. The cmdlet requires the 'OnPremDirectorySynchronization.ReadWrite.All' scope. After soft matching is completed and is no longer needed, this flag should be enabled again.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaDirSyncFeature.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'OnPremDirectorySynchronization.ReadWrite.All'\nSet-EntraBetaDirSyncFeature -Feature 'BlockSoftMatch' -Enable $true\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Users - All Properties - PowerShell\nDESCRIPTION: This example retrieves all recoverable deleted users in Microsoft Entra ID and displays selected properties (Id, UserPrincipalName, DisplayName, AccountEnabled, DeletedDateTime, DeletionAgeInDays, UserType) in a formatted table. It uses Connect-Entra to establish a connection and requires the 'User.Read.All' scope. The output shows the properties of the deleted users.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedUser.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraDeletedUser | Select-Object Id, UserPrincipalName, DisplayName, AccountEnabled, DeletedDateTime, DeletionAgeInDays, UserType | Format-Table -AutoSize\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                   UserPrincipalName                                              DisplayName   AccountEnabled DeletedDateTime       DeletionAgeInDays UserType\n--                                   -----------------                                              -----------   -------------- ---------------       ----------------- --------\ndddddddd-3333-4444-5555-eeeeeeeeeeee dddddddd-3333-4444-5555-eeeeeeeeeeeeAveryS@contoso.com        Avery Smith   False          2/12/2025 1:15:34 PM  3                 Member\n```\n\n----------------------------------------\n\nTITLE: Get Top Application Templates - Powershell\nDESCRIPTION: This PowerShell snippet retrieves the top two application templates from the Microsoft Entra gallery.  It uses the `-Top` parameter to limit the number of results. `Connect-Entra` establishes a connection to Entra ID. Requires the Microsoft.Entra.Beta module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationTemplate.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraBetaApplicationTemplate -Top 2 -Select Id, DisplayName, Publisher, Categories\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - DisplayName\nDESCRIPTION: This YAML snippet defines the DisplayName parameter for the Set-EntraConditionalAccessPolicy cmdlet. It's a String, optional, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraConditionalAccessPolicy.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Administrative Units\nDESCRIPTION: This PowerShell snippet retrieves a list of deleted administrative units and displays selected properties in a formatted table. It requires connecting to Entra ID with the 'AdministrativeUnit.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedAdministrativeUnit.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.Read.All'\nGet-EntraDeletedAdministrativeUnit | Select-Object Id, DisplayName, MembershipType, Visibility, DeletedDateTime, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get all objects created by a service principal - PowerShell\nDESCRIPTION: This example retrieves all objects created by a specific service principal in Microsoft Entra ID. It connects to Entra ID with required scopes, fetches the service principal ID, and utilizes the Get-EntraBetaServicePrincipalCreatedObject cmdlet with the -All parameter to retrieve all created objects.  The ServicePrincipalId parameter specifies the ID of the service principal.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalCreatedObject.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraBetaServicePrincipalCreatedObject -ServicePrincipalId $servicePrincipal.Id -All\n```\n\n----------------------------------------\n\nTITLE: New-EntraServicePrincipalKeyCredential Syntax (PowerShell)\nDESCRIPTION: This snippet shows the syntax of the New-EntraServicePrincipalKeyCredential cmdlet. It defines the parameters that can be used with the cmdlet, including ObjectId, CustomKeyIdentifier, StartDate, EndDate, Type, Usage, and Value. The ObjectId parameter is required, and the others are optional.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraServicePrincipalKeyCredential.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-EntraServicePrincipalKeyCredential\n -ObjectId <String>\n [-CustomKeyIdentifier <String>]\n [-StartDate <DateTime>]\n [-EndDate <DateTime>]\n [-Type <KeyType>]\n [-Usage <KeyUsage>]\n [-Value <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Administrative Units - Example 5 (Filter)\nDESCRIPTION: This example retrieves deleted administrative units based on a filter, selects specific properties, and displays them in a formatted table. The `-Filter \"DisplayName eq 'Americas Administrative Unit'\"` parameter filters the results to administrative units where the DisplayName is exactly 'Americas Administrative Unit'. It connects to Entra ID using the 'AdministrativeUnit.Read.All' scope. The output shows the selected properties for the matching deleted administrative units.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedAdministrativeUnit.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.Read.All'\nGet-EntraBetaDeletedAdministrativeUnit -Filter \"DisplayName eq 'Americas Administrative Unit'\" | Select-Object Id, DisplayName, MembershipType, Visibility, DeletedDateTime, DeletionAgeInDays | Format-Table -AutoSize\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                   DisplayName                   MembershipType     Visibility         DeletedDateTime           DeletionAgeInDays\n--                                   -----------                   --------------     ----------         ---------------           -----------------\ngggggggg-8888-9999-aaaa-hhhhhhhhhhhh Americas Administrative Unit   Dynamic           HiddenMembership   2/12/2025 12:40:52 PM     10\n```\n\n----------------------------------------\n\nTITLE: Use Results with Pipeline - PowerShell\nDESCRIPTION: This example demonstrates using the results of `Get-EntraUserCBAAuthorizationInfo` in a pipeline.  It selects the UserPrincipalName and creates a custom property CertificateTypes by joining the Type property of the CertificateUserIds array. `Connect-Entra` is used to authenticate with 'User.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserCBAAuthorizationInfo.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraUserCBAAuthorizationInfo -UserId 'SawyerM@contoso.com' |\n    Select-Object UserPrincipalName, @{\n        Name = 'CertificateTypes';\n        Expression = { $_.AuthorizationInfo.CertificateUserIds.Type -join \", \" }\n    }\n```\n\n----------------------------------------\n\nTITLE: Get all user's registered authentication methods\nDESCRIPTION: This example shows how to retrieve all user's registered authentication methods.  It uses `Connect-Entra` to establish a connection with the appropriate scopes and then calls `Get-EntraBetaAuthenticationMethodUserRegistrationDetailReport` with the `-All` parameter to retrieve all records.  The output is then formatted using `Format-Table` for readability.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAuthenticationMethodUserRegistrationDetailReport.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All'\nGet-EntraBetaAuthenticationMethodUserRegistrationDetailReport -All | Format-Table -AutoSize\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                   IsAdmin IsMfaCapable IsMfaRegistered IsPasswordlessCapable IsSsprCapable \n--                                   ------- ------------ --------------- --------------------- -------------\naaaaaaaa-0000-1111-2222-bbbbbbbbbbbb True    False        False           False                 True      \nbbbbbbbb-1111-2222-3333-cccccccccccc False   False        False           False                 False     \ncccccccc-2222-3333-4444-dddddddddddd False   False        False           False                 False     \ndddddddd-3333-4444-5555-eeeeeeeeeeee False   False        False           False                 False \n```\n\n----------------------------------------\n\nTITLE: Get Role Definition by Provider, Resource, and ID - PowerShell\nDESCRIPTION: This example shows how to retrieve a specific role definition using ProviderId, ResourceId, and Id parameters. It requires a connection to Entra ID with specified scopes. This retrieves a unique role definition based on its ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPrivilegedRoleDefinition.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'PrivilegedAccess.Read.AzureAD', 'PrivilegedAccess.Read.AzureResources' 'PrivilegedAccess.Read.AzureADGroup'\n$params = @{\n    ProviderId = 'aadRoles'\n    ResourceId = '11112222-bbbb-3333-cccc-4444dddd5555'\n    Id = 'bbbbbbbb-1111-2222-3333-cccccccccccc'\n}\nGet-EntraBetaPrivilegedRoleDefinition @params\n```\n\n----------------------------------------\n\nTITLE: Get top one tenant detail (PowerShell)\nDESCRIPTION: This example retrieves details for the top one tenant using Get-EntraBetaTenantDetail with the `-Top 1` parameter. The command first connects to Entra ID using the 'Organization.Read.All' scope. This is helpful for quickly inspecting the configuration of a single tenant.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaTenantDetail.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All'\nGet-EntraBetaTenantDetail -Top 1\n```\n\n----------------------------------------\n\nTITLE: Get List of Available Entra Environments - PowerShell\nDESCRIPTION: This PowerShell command retrieves a list of available Microsoft Entra environments.  It allows users to identify supported sovereign clouds for connecting using the `Connect-Entra` cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/authentication-scenarios.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraEnvironment\n```\n\n----------------------------------------\n\nTITLE: Get User's Registered Authentication Methods with Filtering - PowerShell\nDESCRIPTION: This example retrieves user's registered authentication methods with filtering based on the `userType` property using the `Get-EntraAuthenticationMethodUserRegistrationDetailReport` cmdlet with the `-Filter` parameter. It connects to Entra ID with the necessary scopes and formats the output as a table for readability. It requires the Microsoft.Entra module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAuthenticationMethodUserRegistrationDetailReport.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All'\nGet-EntraAuthenticationMethodUserRegistrationDetailReport -Filter \"userType eq 'member'\" | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Upload User Thumbnail Photo - PowerShell\nDESCRIPTION: This script uploads a thumbnail photo for a specified user in Entra ID. It uses the `Set-EntraUserThumbnailPhoto` cmdlet to set the user's thumbnail photo to the image specified by the `FilePath` parameter. Requires User.ReadWrite.All scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-user.md#_snippet_17\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nSet-EntraUserThumbnailPhoto -UserId 'SawyerM@contoso.com' -FilePath 'D:\\UserThumbnailPhoto.jpg'\n```\n\n----------------------------------------\n\nTITLE: Get Entra Environment by Name - PowerShell\nDESCRIPTION: Retrieves a specific Entra environment based on its name. The `-Name` parameter is required and specifies the name of the environment to retrieve. CommonParameters can also be passed to this cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraEnvironment.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraEnvironment\n -Name <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove Entra Group - Example 2 - PowerShell\nDESCRIPTION: This example demonstrates how to remove a group in Microsoft Entra ID using pipelining. It retrieves the group to delete and pipes the output to Remove-EntraGroup. Requires the Microsoft.Entra module and Group.ReadWrite.All scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraGroup.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All'\nGet-EntraGroup -Filter \"DisplayName eq 'HelpDesk Team Leaders'\" | Remove-EntraGroup\n```\n\n----------------------------------------\n\nTITLE: Web Application Settings Definition (YAML)\nDESCRIPTION: Specifies settings for a web application, such as redirect URIs and implicit grant settings. The `WebApplication` object contains configuration parameters specific to web-based applications.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraApplication.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nType: WebApplication\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get All Memberships of a Contact - PowerShell\nDESCRIPTION: This example shows how to retrieve all the memberships of a contact using the -All parameter with the Get-EntraContactMembership cmdlet. It connects to Entra, retrieves the contact, and then uses the -All parameter to retrieve all memberships.  The output is formatted to display specific properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraContactMembership.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'OrgContact.Read.All'\n$contact = Get-EntraContact -Filter \"displayName eq 'Contoso Contact'\"\nGet-EntraContactMembership -OrgContactId $contact.Id -All |\nSelect-Object Id, DisplayName, '@odata.type', SecurityEnabled | Format-Table -AutoSize\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                   displayName   @odata.type            securityEnabled\n--                                   -----------   -----------            ---------------\nffffffff-5555-6666-7777-aaaaaaaaaaaa All Employees #microsoft.graph.group           False\n```\n\n----------------------------------------\n\nTITLE: Remove Password Credential from Service Principal (PowerShell)\nDESCRIPTION: This example demonstrates how to remove a password credential from a service principal in Microsoft Entra ID. It first connects to Entra ID, retrieves the service principal and the specific password credential to be removed by its display name, and then uses Remove-EntraBetaServicePrincipalPasswordCredential to remove it, specifying the ServicePrincipalId and KeyId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaServicePrincipalPasswordCredential.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\n$key = Get-EntraBetaServicePrincipalPasswordCredential -ServicePrincipalId $servicePrincipal.Id\n$key = $key | Where-Object {$_.DisplayName -eq 'My Password friendly name'}\nRemove-EntraBetaServicePrincipalPasswordCredential -ServicePrincipalId $servicePrincipal.Id -KeyId $key.KeyId\n```\n\n----------------------------------------\n\nTITLE: Get-EntraBetaAccountSku Syntax (GetById) - PowerShell\nDESCRIPTION: This syntax allows filtering SKUs by a specific Tenant ID. The `-TenantId` parameter takes a string representing the tenant ID. This syntax is useful for partner scenarios where you need to retrieve SKUs for a tenant other than the one you're currently authenticated against. It also includes CommonParameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAccountSku.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaAccountSku\n [-TenantId <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Connect to Entra ID with Specified Scopes\nDESCRIPTION: Connects a PowerShell session to a Microsoft Entra ID tenant with specified scopes for delegated access. This allows the session to have specific permissions, such as reading all user profiles and read/write access to groups. The output confirms a successful connection to Microsoft Graph.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Connect-Entra.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All', 'Group.ReadWrite.All'\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n```Output\nWelcome to Microsoft Graph!\n\n```\n```\n\n----------------------------------------\n\nTITLE: List scoped administrators by ObjectId - PowerShell\nDESCRIPTION: This PowerShell code snippet demonstrates how to list scoped administrators for an administrative unit using its ObjectId. It connects to Entra ID, retrieves the 'Pacific Administrative Unit', and then retrieves all scoped role memberships associated with that administrative unit ID. The output displays the ID, AdministrativeUnitId, and RoleId of the scoped administrators.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraScopedRoleMembership.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory'\n$administrativeUnit = Get-EntraAdministrativeUnit -Filter \"DisplayName eq 'Pacific Administrative Unit'\"\nGet-EntraScopedRoleMembership -AdministrativeUnitId $administrativeUnit.Id\n```\n\n----------------------------------------\n\nTITLE: Add User as Registered User - PowerShell\nDESCRIPTION: This PowerShell example demonstrates adding a user as a registered user to a specific device. It first connects to Entra with `Device.ReadWrite.All` scopes. Then, it retrieves the user and device objects by their respective IDs using `Get-EntraBetaUser` and `Get-EntraBetaDevice`. Finally, it adds the user as a registered user to the device using `Add-EntraBetaDeviceRegisteredUser` with the device and user IDs. Requires the Microsoft.Entra.Beta module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaDeviceRegisteredUser.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.ReadWrite.All'\n$user = Get-EntraBetaUser -UserId 'SawyerM@contoso.com'\n$device = Get-EntraBetaDevice -SearchString '<device-display-name>'\nAdd-EntraBetaDeviceRegisteredUser -DeviceId $device.Id -UserId $user.Id\n```\n\n----------------------------------------\n\nTITLE: Get Service Principal Group Membership - PowerShell\nDESCRIPTION: This PowerShell script retrieves the group membership of a specified service principal by checking if the principal is a member of a list of groups. It uses `Connect-Entra` to authenticate, retrieves group IDs and service principal ID, then uses `Select-EntraGroupIdsServicePrincipalIsMemberOf` to find the matching group memberships.\n\nDependencies: Microsoft.Entra module, connection to Entra ID with 'Application.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Select-EntraGroupIdsServicePrincipalIsMemberOf.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$group = New-Object Microsoft.Open.AzureAD.Model.GroupIdsForMembershipCheck\n$group.GroupIds = (Get-EntraGroup -Top 10).Id\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"DisplayName eq 'Helpdesk Application'\"\nSelect-EntraGroupIdsServicePrincipalIsMemberOf -ServicePrincipalId $servicePrincipal.Id -GroupIdsForMembershipCheck $group\n```\n\n----------------------------------------\n\nTITLE: Get Feature Rollout Policy (GetVague Syntax) - PowerShell\nDESCRIPTION: This syntax retrieves cloud authentication rollout policies based on a search string. It uses the GetVague parameter set, allowing a search string to be specified to filter the results. The cmdlet returns a list of FeatureRolloutPolicy objects matching the search criteria.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraFeatureRolloutPolicy.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraFeatureRolloutPolicy\n [-SearchString <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get SKUs by TenantId - PowerShell\nDESCRIPTION: This snippet shows how to retrieve SKUs for a specific tenant using the `-TenantId` parameter.  It requires the Microsoft.Entra module and appropriate permissions. The `TenantId` is a string representing the unique identifier of the tenant. This command is useful in partner scenarios when managing multiple tenants.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAccountSku.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraAccountSku\n [-TenantId <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Set Application Logo Example - PowerShell\nDESCRIPTION: This example demonstrates how to set the application logo for an application specified by the ApplicationId parameter. It first connects to Entra ID, retrieves the application, and then sets the logo using a file path. Requires the Microsoft.Entra module and Application.ReadWrite.All scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraApplicationLogo.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All'\n$application = Get-EntraApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\nSet-EntraApplicationLogo -ApplicationId $application.Id -FilePath 'D:\\applogo.jpg'\n```\n\n----------------------------------------\n\nTITLE: Add Delegated Permission Classification - PowerShell\nDESCRIPTION: This PowerShell script demonstrates how to create a delegated permission classification for a specified permission on a given service principal. It utilizes cmdlets from the Microsoft.Entra.Beta module.  It requires the 'Policy.ReadWrite.PermissionGrant' scope and uses the `Get-EntraBetaServicePrincipal` cmdlet to retrieve service principal details and the `Add-EntraBetaServicePrincipalDelegatedPermissionClassification` cmdlet to add the permission classification. Input includes the service principal display name, permission ID, and desired classification ('Low', 'Medium', or 'High'). Output shows the newly created permission classification.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaServicePrincipalDelegatedPermissionClassification.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.PermissionGrant'\n$ServicePrincipal = Get-EntraBetaServicePrincipal -Filter \"DisplayName eq '<service-principal-display-name>'\"\n$PermissionId = $ServicePrincipal.PublishedPermissionScopes[0].Id\n$PermissionName =  $ServicePrincipal.PublishedPermissionScopes[0].Value\n\n$params = @{\n    ServicePrincipalId = $ServicePrincipal.ObjectId\n    PermissionId = $PermissionId\n    Classification = 'Low'\n    PermissionName = $PermissionName\n}\n\nAdd-EntraBetaServicePrincipalDelegatedPermissionClassification @params\n```\n\n----------------------------------------\n\nTITLE: Get-EntraUserOAuth2PermissionGrant Syntax\nDESCRIPTION: Defines the syntax for the Get-EntraUserOAuth2PermissionGrant cmdlet. It includes parameters such as UserId, All, Top, and Property, and supports CommonParameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserOAuth2PermissionGrant.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraUserOAuth2PermissionGrant\n -UserId <String>\n [-All]\n [-Top <Int32>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Custom Security Attribute Definition by ID\nDESCRIPTION: Retrieves a specific custom security attribute definition using its unique identifier.  Requires the CustomSecAttributeDefinition.Read.All or CustomSecAttributeDefinition.ReadWrite.All scope and appropriate Microsoft Entra role or custom role permissions. The `-Id` parameter specifies the custom security attribute definition object ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaCustomSecurityAttributeDefinition.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaCustomSecurityAttributeDefinition\n -Id <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get deleted service principals using All parameter - PowerShell\nDESCRIPTION: This PowerShell script retrieves all deleted service principals, bypassing any default limits, and displays selected properties in a formatted table. It needs the 'Application.Read.All' scope for the connection and uses the Microsoft.Entra.Beta module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedServicePrincipal.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraBetaDeletedServicePrincipal -All | Select-Object Id, DisplayName, AppId, DeletedDateTime, DeletionAgeInDays, ServicePrincipalType | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Update State - Entra Beta (PowerShell)\nDESCRIPTION: This example demonstrates how to update the state (enabled/disabled) of a conditional access policy. It connects to Entra ID, retrieves a policy by its display name, and updates its state to 'Enabled' using the Set-EntraBetaConditionalAccessPolicy cmdlet. It requires 'Policy.ReadWrite.ConditionalAccess' and 'Policy.Read.All' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaConditionalAccessPolicy.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ConditionalAccess', 'Policy.Read.All'\n$policy = Get-EntraBetaConditionalAccessPolicy | Where-Object { $_.DisplayName -eq 'MFA policy' }\nSet-EntraBetaConditionalAccessPolicy -PolicyId $policy.Id -State 'Enabled'\n```\n\n----------------------------------------\n\nTITLE: Remove Scoped Role Membership - PowerShell\nDESCRIPTION: This PowerShell code snippet demonstrates how to remove a specific scoped role membership from Microsoft Entra ID. It requires the 'RoleManagement.Read.Directory' scope to be connected. It uses `Get-EntraDirectoryRole`, `Get-EntraAdministrativeUnit`, and `Get-EntraScopedRoleMembership` to identify the target role membership before removing it using `Remove-EntraScopedRoleMembership`. The script assumes the existence of a \"Helpdesk Administrator\" role and a \"Pacific Administrative Unit\".\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraScopedRoleMembership.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory'\n$role = Get-EntraDirectoryRole -Filter \"DisplayName eq 'Helpdesk Administrator'\" \n$administrativeUnit = Get-EntraAdministrativeUnit -Filter \"DisplayName eq 'Pacific Administrative Unit'\"\n$roleMembership = Get-EntraScopedRoleMembership -AdministrativeUnitId $administrativeUnit.Id | Where-Object {$_.RoleId -eq $role.Id}\nRemove-EntraScopedRoleMembership -AdministrativeUnitId $administrativeUnit.Id -ScopedRoleMembershipId $roleMembership.Id\n```\n\n----------------------------------------\n\nTITLE: Update Entra User Password (Admin) - PowerShell\nDESCRIPTION: This snippet shows how an administrator can update a user's password in Microsoft Entra ID using the `Set-EntraUserPassword` cmdlet.  It converts the new password to a secure string and requires the `Directory.AccessAsUser.All` scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-user.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.AccessAsUser.All'\n$newPassword = '<strong-password>'\n$securePassword = ConvertTo-SecureString $newPassword -AsPlainText -Force\nSet-EntraUserPassword -UserId 'SawyerM@contoso.com' -Password $securePassword\n```\n\n----------------------------------------\n\nTITLE: Get All Directory Setting Templates in Entra ID with PowerShell\nDESCRIPTION: This PowerShell script retrieves all directory setting templates from Microsoft Entra ID using the `Get-EntraBetaDirectorySettingTemplate` cmdlet. It requires the 'Directory.ReadWrite.All' scope. The output displays the Id, DisplayName, and Description of each template.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirectorySettingTemplate.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\nGet-EntraBetaDirectorySettingTemplate\n```\n\n----------------------------------------\n\nTITLE: Get Application Sign-in Summary with Filter - PowerShell\nDESCRIPTION: This example retrieves the sign-in summary for a specific application (Graph Explorer) over the last 7 days. It requires connecting to Entra ID with 'Reports.Read.All' scope and uses the Get-EntraBetaApplicationSignInSummary cmdlet with the -Days and -Filter parameters. The output displays sign-in statistics for the specified application.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationSignInSummary.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Reports.Read.All'\nGet-EntraBetaApplicationSignInSummary -Days 7 -Filter \"appDisplayName eq 'Graph Explorer'\"\n```\n\n----------------------------------------\n\nTITLE: Update Device OS Type - PowerShell\nDESCRIPTION: This snippet shows how to update the operating system type of a specified device in Microsoft Entra ID using the Set-EntraBetaDevice cmdlet. It connects to Entra ID, retrieves a device by its display name, and then updates the DeviceOSType property. Requires 'Directory.AccessAsUser.All' and 'Device.ReadWrite.All' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaDevice.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.AccessAsUser.All', 'Device.ReadWrite.All'\n$device = Get-EntraBetaDevice -Filter \"DisplayName eq 'Woodgrove Desktop'\"\nSet-EntraBetaDevice -DeviceObjectId $device.ObjectId -DeviceOSType Windows\n```\n\n----------------------------------------\n\nTITLE: Get All Conditional Access Policies - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a list of all conditional access policies in a Microsoft Entra ID tenant. It first connects to Entra ID with the necessary scopes and then uses the Get-EntraBetaConditionalAccessPolicy cmdlet to fetch the policies.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaConditionalAccessPolicy.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.All'\nGet-EntraBetaConditionalAccessPolicy\n```\n\n----------------------------------------\n\nTITLE: Create a TokenIssuancePolicy\nDESCRIPTION: Illustrates how to create a TokenIssuancePolicy to configure token issuance settings. It connects to Entra ID, defines a policy with SigningAlgorithm, SamlTokenVersion, TokenResponseSigningPolicy, and EmitSAMLNameFormat settings, and creates the policy using the New-EntraBetaPolicy cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaPolicy.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ApplicationConfiguration'\n$definition = @('{\"TokenIssuancePolicy\":{\"Version\":1,\"SigningAlgorithm\":\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\",\"SamlTokenVersion\":1.1,\"TokenResponseSigningPolicy\":\"TokenOnly\",\"EmitSAMLNameFormat\":\"true\"}}')\nNew-EntraBetaPolicy -Definition $definition -DisplayName 'tokenIssuance' -Type 'TokenIssuancePolicy'\n```\n\nLANGUAGE: powershell\nCODE:\n```\nDefinition\n----------\n{{\"TokenIssuancePolicy\":{\"Version\":1,\"SigningAlgorithm\":\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\",\"SamlTokenVersion\":1.1,\"TokenResponseSigningPolicy\":\"TokenOnly…\n```\n\n----------------------------------------\n\nTITLE: Create ClaimsMappingPolicy with IsOrganizationDefault\nDESCRIPTION: Demonstrates how to create a ClaimsMappingPolicy and set the IsOrganizationDefault parameter. The example defines a policy with custom claims issuance rules and creates it using New-EntraBetaPolicy. It also showcases the use of the `-IsOrganizationDefault` parameter to specify whether the policy is the organization default.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaPolicy.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ApplicationConfiguration'\n$definition = @('{ \"definition\": [ \"{\\\"ClaimsMappingPolicy\\\":{\\\"Version\\\":1,\\\"IncludeBasicClaimSet\\\":\\\"true\\\",\\\"ClaimsSchema\\\":[{\\\"Source\\\":\\\"user\\\",\\\"ID\\\":\\\"userPrincipalName\\\",\\\"SAMLClaimType\\\":\\\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\\\",\\\"JwtClaimType\\\":\\\"upn\\\"},{\\\"Source\\\":\\\"user\\\",\\\"ID\\\":\\\"displayName\\\",\\\"SAMLClaimType\\\":\\\"http://schemas.microsoft.com/identity/claims/displayname\\\",\\\"JwtClaimType\\\":\\\"name\\\"}]}}\" ], \"displayName\": \"Custom Claims Issuance Policy\", \"isOrganizationDefault\": false }')\nNew-EntraBetaPolicy -Definition $definition -DisplayName 'ClaimstestPolicy' -Type 'claimsMappingPolicies' -IsOrganizationDefault $false\n```\n\nLANGUAGE: powershell\nCODE:\n```\nDefinition\n----------\n{{ \"definition\": [ \"{\\\"ClaimsMappingPolicy\\\":{\\\"Version\\\":1,\\\"IncludeBasicClaimSet\\\":\\\"true\\\",\\\"ClaimsSchema\\\":[{\\\"Source\\\":\\\"user\\\",\\\"ID\\\":\\\"userPrincipalName\\\",\\\"SAMLCl…\n```\n\n----------------------------------------\n\nTITLE: Get All Service Principals with -All - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all service principals using the `-All` parameter. This parameter is used to retrieve all service principals from the directory without any filtering or limitations.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipal.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraServicePrincipal -All\n```\n\n----------------------------------------\n\nTITLE: Get All Administrative Units - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all administrative units in Microsoft Entra ID using the Get-EntraAdministrativeUnit cmdlet. It requires the 'AdministrativeUnit.Read.All' scope. The output displays the properties of each administrative unit, such as Id, Description, DisplayName, and Visibility.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAdministrativeUnit.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.Read.All'\nGet-EntraAdministrativeUnit\n```\n\n----------------------------------------\n\nTITLE: Defining TokenEncryptionKeyId Parameter\nDESCRIPTION: Specifies the keyId of a public key from the keyCredentials collection. When configured, Microsoft Entra ID encrypts all tokens it emits using the specified key. The application receiving the encrypted token must use the matching private key for decryption.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplication.md#_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Directory Roles for Specific User\nDESCRIPTION: This example demonstrates how to retrieve the list of directory roles assigned to a specific user. It first connects to Entra ID using `Connect-Entra` with the 'Directory.Read.All' scope, then uses `Get-EntraUserRole` to fetch the roles for the user 'SawyerM@contoso.com'.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserRole.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\nGet-EntraUserRole -UserId 'SawyerM@contoso.com'\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDeletedDateTime         Id                                   DisplayName               RoleTemplateId\n---------------         --                                   -----------               --------------\n                       bbbbbbbb-1111-2222-3333-ccccccccccc  Helpdesk Administrator    729827e3-9c14-49f7-bb1b-9608f156bbb8\n                       dddddddd-3333-4444-5555-eeeeeeeeeeee Directory Readers         88d8e3e3-8f55-4a1e-953a-9b9898b8876b\n                       cccccccc-2222-3333-4444-dddddddddddd Application Administrator 9b895d92-2cd3-44c7-9d02-a6ac2d5ea5c3\n                       aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb Guest Inviter             95e79109-95c0-4d8e-aee3-d01accf2d47b\n```\n\n----------------------------------------\n\nTITLE: Create Excluded Permission Grant Condition Set - PowerShell\nDESCRIPTION: This snippet demonstrates how to create a permission grant condition set that is excluded in an existing Entra ID permission grant policy using the `New-EntraPermissionGrantConditionSet` cmdlet.  It requires the `Policy.ReadWrite.PermissionGrant` scope.  It uses parameters such as `PolicyId`, `ConditionSetType`, `PermissionType`, `Permissions`, `ResourceApplication`, `PermissionClassification`, `ClientApplicationsFromVerifiedPublisherOnly`, `ClientApplicationIds`, `ClientApplicationTenantIds`, and `ClientApplicationPublisherIds` to define the condition set. The `ConditionSetType` is set to 'excludes'.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraPermissionGrantConditionSet.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.PermissionGrant'\n$permissionGrantPolicy = Get-EntraPermissionGrantPolicy | Where-Object { $_.Id -eq 'my-custom-consent-policy' }\n$permission = (Get-EntraServicePrincipal -Filter \"DisplayName eq '<service-principal-displayname>' \").AppRoles.Id\n$params = @{\n    PolicyId                                    = $permissionGrantPolicy.Id\n    ConditionSetType                            = 'excludes'\n    PermissionType                              = 'delegated'\n    Permissions                                 = @($permission)\n    ResourceApplication                         = 'a0a0a0a0-bbbb-cccc-dddd-e1e1e1e1e1e1'\n    PermissionClassification                    = 'low'\n    ClientApplicationsFromVerifiedPublisherOnly = $true\n    ClientApplicationIds                        = @('00001111-aaaa-2222-bbbb-3333cccc4444', '11112222-bbbb-3333-cccc-4444dddd5555')\n    ClientApplicationTenantIds                  = @('aaaabbbb-0000-cccc-1111-dddd2222eeee', 'bbbbcccc-1111-dddd-2222-eeee3333ffff', 'ccccdddd-2222-eeee-3333-ffff4444aaaa')\n    ClientApplicationPublisherIds               = @('33334444-dddd-5555-eeee-6666ffff7777')\n}\nNew-EntraPermissionGrantConditionSet @params\n```\n\n----------------------------------------\n\nTITLE: Get Top N Connector Groups - PowerShell\nDESCRIPTION: This example retrieves the top N Azure AD Application Proxy connector groups.  The `-Top` parameter (or its alias `-Limit`) specifies the maximum number of connector groups to return. Requires no prior connection to Entra ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationProxyConnectorGroup.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaApplicationProxyConnectorGroup -Top 1\n```\n\n----------------------------------------\n\nTITLE: Restore User by ID - PowerShell\nDESCRIPTION: This snippet restores a soft-deleted user in Microsoft Entra ID by their ID. It connects to Entra ID with the 'User.ReadWrite.All' scope and uses the 'Restore-EntraDeletedDirectoryObject' cmdlet to restore the user with the specified ID.  The ID parameter should be the unique identifier of the deleted user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/recover-deleted-data.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nRestore-EntraDeletedDirectoryObject -Id '00aa00aa-bb11-cc22-dd33-44ee44ee44ee' \n```\n\n----------------------------------------\n\nTITLE: Get SignInActivity of a User - EntraBetaUser PowerShell\nDESCRIPTION: This example demonstrates how to retrieve the sign-in activity of a specific user from Microsoft Entra ID.  The `Connect-Entra` cmdlet is used to establish a connection with the required scopes. `Get-EntraBetaUser` is used with the `-UserId` and `-Property` parameter to select the desired user and the 'SignInActivity' property. `Select-Object` is used to format and display relevant information.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUser.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All','AuditLog.Read.All'\nGet-EntraBetaUser -UserId 'SawyerM@contoso.com' -Property 'SignInActivity' | Select-Object -Property Id, DisplayName, UserPrincipalName -ExpandProperty 'SignInActivity'\n```\n\n----------------------------------------\n\nTITLE: Get Directory Role by ID - Example\nDESCRIPTION: This example demonstrates retrieving a directory role by ID. It first connects to Entra ID with the required scope, then retrieves the directory role using `Get-EntraBetaDirectoryRole` and filters the result by display name. Finally, it retrieves the same role using its ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirectoryRole.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory'\n$directoryRole = Get-EntraBetaDirectoryRole -Filter \"displayName eq 'Helpdesk Administrator'\"\nGet-EntraBetaDirectoryRole -DirectoryRoleId $directoryRole.Id\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDeletedDateTime Id                                   Description\n---------------\n aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb Perform all migration functionality to migrate content to Microsoft 365 usin...\n```\n\n----------------------------------------\n\nTITLE: Get role definition by UnifiedRoleDefinitionId (PowerShell)\nDESCRIPTION: This example demonstrates how to retrieve a specific role definition by its `UnifiedRoleDefinitionId`. First, a connection to Entra ID is established with necessary scopes. Then, it retrieves the role definition object by filtering based on `DisplayName` and stores the object in the `$role` variable. Finally, it uses the `UnifiedRoleDefinitionId` parameter to get the desired role definition using the ID from the previous step. The output displays the `DisplayName`, `Id`, `TemplateId`, and `Description` of the matched role definition.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDirectoryRoleDefinition.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory', 'EntitlementManagement.Read.All'\n$role = Get-EntraDirectoryRoleDefinition -Filter \"DisplayName eq 'Helpdesk Administrator'\"\nGet-EntraDirectoryRoleDefinition -UnifiedRoleDefinitionId $role.Id\n```\n\n----------------------------------------\n\nTITLE: Creating Cloud Authentication Rollout Policy - Example 1 (PowerShell)\nDESCRIPTION: This example demonstrates creating a cloud authentication roll-out policy in Microsoft Entra ID for PassthroughAuthentication.  It requires the 'Directory.ReadWrite.All' scope. The policy is created with a specified display name and is initially disabled.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaFeatureRolloutPolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\nNew-EntraBetaFeatureRolloutPolicy -Feature 'PassthroughAuthentication' -DisplayName 'Passthrough Authentication Rollout Policy' -IsEnabled $false\n```\n\n----------------------------------------\n\nTITLE: Get Specific Environment by Name - PowerShell\nDESCRIPTION: Example demonstrating how to retrieve a specific environment by its name using the `-Name` parameter. In this case, the 'Global' environment is retrieved, and the output displays its details, including Name, AzureADEndpoint, and GraphEndpoint.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraEnvironment.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraEnvironment -Name 'Global'\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nName   AzureADEndpoint                   GraphEndpoint               Type\n----   ---------------                   -------------               ----\nGlobal https://login.microsoftonline.com https://graph.microsoft.com Built-in\n```\n\n----------------------------------------\n\nTITLE: Output of Get-EntraUserLicenseDetail, PowerShell\nDESCRIPTION: This is an example of the output returned by the Get-EntraUserLicenseDetail cmdlet. It shows the Id, SkuId, and SkuPartNumber for each license assigned to the specified user. The SkuIds and SkuPartNumbers are placeholders and will vary depending on the user's assigned licenses.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserLicenseDetail.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n```Output\nId                                          SkuId                                SkuPartNumber\n--                                          -----                                -------------\nX8Wu1RItQkSNL8zKldQ5DiH6ThjDmF1OlavQcFOpbmc aaaaaaaa-0b0b-1c1c-2d2d-333333333333 INFORMATION_PROTECTION_COMPLIANCE\nX8Wu1RItQkSNL8zKldQ5Dk8SXrDMx6BFpqqM94yUaWg bbbbbbbb-1c1c-2d2d-3e3e-444444444444 EMSPREMIUM\nX8Wu1RItQkSNL8zKldQ5DmAn38eBLPdOtXhbU5K1cd8 cccccccc-2d2d-3e3e-4f4f-555555555555 ENTERPRISEPREMIUM\n```\n```\n\n----------------------------------------\n\nTITLE: Get Device by Display Name - EntraBetaDevice - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a device using its display name. It requires the 'Device.Read.All' scope for authentication and utilizes the Get-EntraBetaDevice cmdlet with the -Filter parameter to specify the display name. The output includes device details such as Id, AccountEnabled, and DeviceId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDevice.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraBetaDevice -Filter \"DisplayName eq 'Woodgrove Desktop'\"\n```\n\n----------------------------------------\n\nTITLE: Add-EntraGroupOwner Syntax - PowerShell\nDESCRIPTION: This is the syntax block for the `Add-EntraGroupOwner` cmdlet. It takes the `GroupId` and `OwnerId` as required parameters.  GroupId is the ID of the group in Microsoft Entra ID. OwnerId is the Object ID of a user or service principal to assign as a group owner. It also supports common parameters like `-WhatIf` and `-Confirm`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Add-EntraGroupOwner.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-EntraGroupOwner\n -GroupId <String>\n -OwnerId <String>\n [-WhatIf]\n [-Confirm]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get OAuth2 Permission Grants - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve OAuth2 permission grants using the Get-EntraOAuth2PermissionGrant cmdlet after connecting to Entra ID with appropriate scopes. It lists the Id, ClientId, ConsentType, PrincipalId, ResourceId and Scope of the grants.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraOAuth2PermissionGrant.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\nGet-EntraOAuth2PermissionGrant\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                       ClientId                             ConsentType       PrincipalId                             ResourceId                            Scope\n--                                       --------                             -----------       -----------                             ----------                            -----\nA1bC2dE3fH4iJ5kL6mN7oP8qR9sT0u           00001111-aaaa-2222-bbbb-3333cccc4444 AllPrincipals                                             a0a0a0a0-bbbb-cccc-dddd-e1e1e1e1e1e1  User.ReadBasic.All\nC2dE3fH4iJ5kL6mN7oP8qR9sT0uV1w           00001111-aaaa-2222-bbbb-3333cccc4444 AllPrincipals                                             b1b1b1b1-cccc-dddd-eeee-f2f2f2f2f2f2  User.Read\nE3fH4iJ5kL6mN7oP8qR9sT0uV1wX2y           22223333-cccc-4444-dddd-5555eeee6666 Principal         aaaaaaaa-bbbb-cccc-1111-222222222222    c2c2c2c2-dddd-eeee-ffff-a3a3a3a3a3a3  User.Read\nH4iJ5kL6mN7oP8qR9sT0uV1wX2yZ3a           22223333-cccc-4444-dddd-5555eeee6666 Principal         aaaaaaaa-bbbb-cccc-1111-222222222222    d3d3d3d3-eeee-ffff-aaaa-b4b4b4b4b4b4  ActivityFeed.Read ServiceHealth.Read\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Service Principal by ID - PowerShell\nDESCRIPTION: This PowerShell script retrieves a specific deleted service principal by its ID using the `-ServicePrincipalId` parameter.  It requires the Application.Read.All scope to be set.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedServicePrincipal.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraDeletedServicePrincipal -ServicePrincipalId 'bbbbbbbb-1111-2222-3333-cccccccccccc' | Select-Object Id, DisplayName, AppId, DeletedDateTime, DeletionAgeInDays, ServicePrincipalType | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Retrieving certificate mapping from a file path - PowerShell\nDESCRIPTION: This PowerShell code retrieves a specific certificate mapping (Subject) from a certificate file. The `Get-EntraUserCertificateUserIdsFromCertificate` cmdlet is used with the `-Path` parameter to specify the certificate file and the `-CertificateMapping` parameter to specify the desired mapping. The command returns the value of the 'Subject' property.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserCertificateUserIdsFromCertificate.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraUserCertificateUserIdsFromCertificate -Path 'C:\\path\\to\\certificate.cer' -CertificateMapping 'Subject'\n```\n\n----------------------------------------\n\nTITLE: Get Authorization Policy by ID using Get-EntraAuthorizationPolicy (PowerShell)\nDESCRIPTION: This example demonstrates how to retrieve a specific Microsoft Entra ID authorization policy by its ID and format the output as a list. It requires the 'Policy.Read.All' scope. The `-Id` parameter specifies the unique identifier of the authorization policy to retrieve.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAuthorizationPolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.All'\nGet-EntraAuthorizationPolicy -Id 'authorizationPolicy' | Format-List\n```\n\n----------------------------------------\n\nTITLE: Get SKUs for a Tenant by TenantId - PowerShell\nDESCRIPTION: This PowerShell script retrieves SKUs for a specific tenant using the `TenantId` parameter. It first connects to Entra ID with the necessary scopes. Then, it retrieves the current tenant ID using `Get-EntraContext` and passes it to `Get-EntraBetaAccountSku` with the `-TenantId` parameter. The result is a list of SKUs associated with that specific tenant.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAccountSku.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All', 'LicenseAssignment.Read.All'\n$tenantId = (Get-EntraContext).TenantId\nGet-EntraBetaAccountSku -TenantId $tenantId\n```\n\n----------------------------------------\n\nTITLE: Remove User App Role Assignment - PowerShell\nDESCRIPTION: This PowerShell code snippet demonstrates how to remove a user application role assignment in Microsoft Entra ID using the `Remove-EntraUserAppRoleAssignment` cmdlet. It first retrieves the specific role assignment using `Get-EntraUserAppRoleAssignment` and then removes it using the assignment's ID. The script requires the 'AppRoleAssignment.ReadWrite.All' scope and uses parameters like `-UserId` and `-AppRoleAssignmentId` to identify the user and the assignment to be removed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraUserAppRoleAssignment.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AppRoleAssignment.ReadWrite.All'\n$assignment = Get-EntraUserAppRoleAssignment -UserId 'SawyerM@Contoso.com' | \nWhere-Object { $_.ResourceDisplayName -eq 'Helpdesk Application' -and $_.PrincipalType -eq 'User' }\nRemove-EntraUserAppRoleAssignment -UserId 'SawyerM@Contoso.com' -AppRoleAssignmentId $assignment.Id\n```\n\n----------------------------------------\n\nTITLE: Resolve Tenant by Domain Name - PowerShell\nDESCRIPTION: This example demonstrates how to resolve a Microsoft Entra tenant using its domain name.  It first connects to Entra ID using the `Connect-Entra` cmdlet with the `CrossTenantInformation.ReadBasic.All` scope. Then, it uses the `Resolve-EntraBetaTenant` cmdlet with the `-DomainName` parameter to resolve the tenant associated with the specified domain.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Resolve-EntraBetaTenant.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'CrossTenantInformation.ReadBasic.All'\nResolve-EntraBetaTenant -DomainName example.com\n```\n\n----------------------------------------\n\nTITLE: Get Directory Tenant Size Quota - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve the directory tenant size quota. It retrieves tenant details and accesses the `directorySizeQuota` property within the `AdditionalProperties`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraTenantDetail.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All'\n(Get-EntraTenantDetail).AdditionalProperties.directorySizeQuota\n```\n\nLANGUAGE: powershell\nCODE:\n```\nKey   Value\n---   -----\nused    339\ntotal 50000\n```\n\n----------------------------------------\n\nTITLE: Get All Policies with -All Parameter\nDESCRIPTION: This example demonstrates retrieving all policies using the `-All` parameter.  It connects to Entra ID with appropriate scopes and then calls `Get-EntraBetaPolicy -All`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPolicy.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.All'\nGet-EntraBetaPolicy -All\n```\n\nLANGUAGE: powershell\nCODE:\n```\nDefinition                                                                                       DeletedDateTime Description DisplayName                                 Id\n----------                                                                                       --------------- ----------- -----------                                 --\n{{\"activityBasedTimeoutPolicies\":{\"AlternateLoginIDLookup\":true, \"IncludedUserIds\":[\"UserID\"]}}}                             Activepolicy                            bbbbbbbb-1111-2222-3333-cccccccccccc\n{{\"HomeRealmDiscoveryPolicy\":{\"AlternateLoginIDLookup\":true, \"IncludedUserIds\":[\"UserID\"]}}}                                 PolicyDemo                              aaaaaaaa-1111-1111-1111-000000000000\n```\n\n----------------------------------------\n\nTITLE: Add a registered owner to a device using Add-EntraDeviceRegisteredOwner (PowerShell)\nDESCRIPTION: This code snippet demonstrates how to add a user as a registered owner for a device in Microsoft Entra ID using the `Add-EntraDeviceRegisteredOwner` cmdlet. It first connects to Entra ID with the required scope, retrieves the user and device objects using their respective IDs, and then adds the user as a registered owner to the device. The user needs 'Intune Administrator' or 'Windows 365 Administrator' role or equivalent permissions.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Add-EntraDeviceRegisteredOwner.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-EntraDeviceRegisteredOwner\n -DeviceId <String>\n -OwnerId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Update Timeout and Connector Group - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates updating the IsTranslateLinksInBodyEnabled, ApplicationServerTimeout, and ConnectorGroupId parameters. It uses the Set-EntraBetaApplicationProxyApplication command and a hashtable to pass the parameters.  The snippet also requires the 'Directory.ReadWrite.All' scope and the ApplicationId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplicationProxyApplication.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\n$params = @{\n    ApplicationId                = 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb'\n    ExternalUrl                  = 'https://finance-awcycles.msappproxy.net/' \n    InternalUrl                  = 'http://finance/'\n    ExternalAuthenticationType   = 'AadPreAuthentication' \n    IsTranslateHostHeaderEnabled = $false\n    ApplicationServerTimeout     = Long  \n    ConnectorGroupId             = 'bbbbbbbb-1111-2222-3333-cccccccccccc'\n}\nSet-EntraBetaApplicationProxyApplication @params\n```\n\n----------------------------------------\n\nTITLE: Get Directory Synchronization Settings by TenantId - PowerShell\nDESCRIPTION: This example retrieves directory synchronization settings for a specific tenant using the Get-EntraBetaDirSyncConfiguration cmdlet with the TenantId parameter. It first connects to Entra ID, retrieves tenant details, and then uses the tenant ID to get the configuration.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirSyncConfiguration.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'OnPremDirectorySynchronization.ReadWrite.All'\n$tenant = Get-EntraBetaTenantDetail\nGet-EntraBetaDirSyncConfiguration -TenantId $tenant.Id\n```\n\nLANGUAGE: powershell\nCODE:\n```\nAccidentalDeletionThreshold DeletionPreventionType\n--------------------------- ----------------------\n                        500 enabledForCount\n```\n\n----------------------------------------\n\nTITLE: Creating a Private Access App with Default Connector Group - PowerShell\nDESCRIPTION: This example demonstrates how to create a new Private Access application with the name 'Contoso GSA Application' and assign it to the default connector group. It requires the 'NetworkAccessPolicy.ReadWrite.All', 'Application.ReadWrite.All', and 'NetworkAccess.ReadWrite.All' scopes. The Connect-Entra cmdlet is used to establish a connection to Entra ID with the necessary permissions.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaPrivateAccessApplication.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'NetworkAccessPolicy.ReadWrite.All', 'Application.ReadWrite.All', 'NetworkAccess.ReadWrite.All'\nNew-EntraBetaPrivateAccessApplication -ApplicationName 'Contoso GSA Application'\n```\n\n----------------------------------------\n\nTITLE: Detecting Stale Devices using ApproximateLastSignInDateTime - PowerShell\nDESCRIPTION: This snippet connects to Microsoft Entra ID, retrieves devices, filters out those that haven't signed in for the last 6 months, and displays selected properties such as AccountEnabled, DeviceId, OperatingSystem, DisplayName, and ApproximateLastSignInDateTime. The code leverages the `ApproximateLastSignInDateTime` property to determine device staleness.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-stale-devices.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'  \n  \n$dt = (Get-Date).AddMonths(-6) # Devices not signed in for the last 6 months  \n  \nGet-EntraDevice -All |  \nWhere-Object {  \n    $_.ApproximateLastSignInDateTime -le $dt  \n} |  \nSelect-Object -Property AccountEnabled, DeviceId, OperatingSystem, OperatingSystemVersion, DisplayName, TrustType, ApproximateLastSignInDateTime | ft\n```\n\n----------------------------------------\n\nTITLE: Get Global Secure Access Tenant Status\nDESCRIPTION: This PowerShell cmdlet retrieves the onboarding status of the Global Secure Access service for the current tenant. It requires the user to have appropriate Microsoft Entra roles like Global Reader, Global Secure Access Administrator, or Security Administrator. It outputs the onboarding status (e.g., offboarded, onboarded) and any error messages.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaGlobalSecureAccessTenantStatus.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaGlobalSecureAccessTenantStatus\n```\n\n----------------------------------------\n\nTITLE: Get Top N Application Owners\nDESCRIPTION: This example shows how to retrieve the top two owners of an application using the `-Top` parameter. Similar to the previous examples, it connects to Entra ID, retrieves the application object, and then calls Get-EntraApplicationOwner with the ApplicationId and the `-Top 2` parameter, limiting the number of returned owners. The output is then formatted for readability.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplicationOwner.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraApplication -Filter \"DisplayName eq 'Helpdesk Application'\"\nGet-EntraApplicationOwner -ApplicationId $application.Id -Top 2 |\nSelect-Object Id, displayName, UserPrincipalName, createdDateTime, userType, accountEnabled |\nFormat-Table -AutoSize\n```\n\nLANGUAGE: powershell\nCODE:\n```\nid                                   DisplayName   UserPrincipalName                CreatedDateTime       UserType AccountEnabled\n--                                   -----------   -----------------                ---------------       -------- --------------\nbbbbbbbb-1111-2222-3333-cccccccccccc Adele Vance   AdeleV@contoso.com               10/7/2024 12:33:36 AM Member   True\ndddddddd-3333-4444-5555-eeeeeeeeeeee Cameron White CameronW@contoso.com            10/7/2024 12:34:47 AM Member   True\n```\n\n----------------------------------------\n\nTITLE: Get Group App Role Assignments\nDESCRIPTION: This example demonstrates how to retrieve the application role assignments for a specific group using the Get-EntraBetaGroupAppRoleAssignment cmdlet. It first connects to Entra ID with the necessary scopes and then retrieves the group object using Get-EntraBetaGroup before using its ID to fetch the role assignments.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaGroupAppRoleAssignment.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\n$group = Get-EntraBetaGroup -SearchString 'Contoso marketing'\nGet-EntraBetaGroupAppRoleAssignment -GroupId $group.Id\n```\n\n----------------------------------------\n\nTITLE: Get Conditional Access Policy (GetQuery Syntax) - PowerShell\nDESCRIPTION: Shows the basic syntax for retrieving Conditional Access policies.  It can be used to get all policies, and takes optional Property parameter to select properties to be returned.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaConditionalAccessPolicy.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaConditionalAccessPolicy\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Filter role definitions by display name using SearchString (PowerShell)\nDESCRIPTION: This example shows how to filter role definitions using the `-SearchString` parameter. It connects to Entra ID and then uses the cmdlet to search for role definitions whose display names contain 'Global'. The output includes the `DisplayName`, `Id`, `TemplateId`, `Description`, and `IsBuiltIn` properties of the matched roles.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDirectoryRoleDefinition.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory', 'EntitlementManagement.Read.All'\nGet-EntraDirectoryRoleDefinition -SearchString 'Global'\n```\n\n----------------------------------------\n\nTITLE: Retrieve Entra User Sign-In Activity - PowerShell\nDESCRIPTION: This snippet retrieves the sign-in activity of a specific user using the `Get-EntraUser` cmdlet with the `-Property` parameter to select the 'SignInActivity' property and expands it. The `-UserId` parameter specifies the user. It requires the `User.Read.All` and `AuditLog.Read.All` scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-user.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All','AuditLog.Read.All'\nGet-EntraUser -UserId 'SawyerM@contoso.com' -Property 'SignInActivity' |\n  Select-Object -Property Id, DisplayName, UserPrincipalName -ExpandProperty 'SignInActivity'\n```\n\n----------------------------------------\n\nTITLE: Setting User License by Copying Another User's Licenses (Entra Beta)\nDESCRIPTION: This PowerShell snippet demonstrates how to assign licenses to a user by copying licenses from another user. It retrieves the assigned licenses of the source user and then creates new license objects for each SkuId before assigning them to the target user using the `Set-EntraBetaUserLicense` cmdlet. The script requires the Entra module and appropriate scopes ('User.ReadWrite.All').\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUserLicense.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\n$licensedUser = Get-EntraUser -UserId 'AdeleV@contoso.com'\n$user = Get-EntraUser -UserId 'SawyerM@contoso.com' \n$license1 = New-Object -TypeName Microsoft.Open.AzureAD.Model.AssignedLicense \n$license1.SkuId = $licensedUser.AssignedLicenses.SkuId[0] \n$license2 = New-Object -TypeName Microsoft.Open.AzureAD.Model.AssignedLicense\n$license2.SkuId = $licensedUser.AssignedLicenses.SkuId[1]\n$addLicensesArray = @()\n$addLicensesArray += $license1\n$addLicensesArray += $license2\n$licenses = New-Object -TypeName Microsoft.Open.AzureAD.Model.AssignedLicenses \n$licenses.AddLicenses = $addLicensesArray\nSet-EntraBetaUserLicense -UserId $user.Id -AssignedLicenses $licenses\n```\n\n----------------------------------------\n\nTITLE: Set-EntraBetaGroup Syntax - PowerShell\nDESCRIPTION: This code block displays the syntax for using the Set-EntraBetaGroup cmdlet in PowerShell to modify properties of an existing Entra ID group. It shows the available parameters such as GroupId, DisplayName, and Description.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaGroup.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nSet-EntraBetaGroup\n -GroupId <String>\n [-GroupTypes <System.Collections.Generic.List`1[System.String]>] \n [-DisplayName <String>]\n [-Description <String>]\n [-IsAssignableToRole <Boolean>]\n [-SecurityEnabled <Boolean>]\n [-Visibility <String>]\n [-MailEnabled <Boolean>]\n [-MailNickname <String>]\n [-MembershipRule <String>]\n [-MembershipRuleProcessingState <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get a Group Member By ID - PowerShell\nDESCRIPTION: Retrieves group members based on the provided group ID using `Get-EntraBetaGroupMember`.  The example selects specific properties to output (Id, DisplayName, @odata.type). It requires the 'GroupMember.Read.All' scope to be granted.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaGroupMember.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All'\n$group = Get-EntraBetaGroup -Filter \"DisplayName eq 'Sales and Marketing'\"\nGet-EntraBetaGroupMember -GroupId $group.Id | Select-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Cmdlet Syntax - PowerShell\nDESCRIPTION: This is the syntax for the `Revoke-EntraUserAllRefreshToken` PowerShell cmdlet. It shows that the cmdlet requires the `-UserId` parameter, which accepts a string representing the user's unique identifier. It also indicates the availability of CommonParameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Revoke-EntraUserAllRefreshToken.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nRevoke-EntraUserAllRefreshToken\n -UserId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get User by ID - EntraBetaUser PowerShell\nDESCRIPTION: This example shows how to retrieve a specific user from Microsoft Entra ID using their User ID or User Principal Name (UPN). The `Connect-Entra` cmdlet is used to establish a connection with the required scopes, and `Get-EntraBetaUser` is used with the `-UserId` parameter to specify the user to be retrieved.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUser.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraBetaUser -UserId 'SawyerM@contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Setting Marketing Notification Emails in PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to set the marketing notification emails for an Entra tenant using the `Set-EntraTenantDetail` cmdlet. It requires the 'Organization.ReadWrite.All' scope. The script first connects to Entra ID and then calls the cmdlet, passing an array of email addresses to the `-MarketingNotificationEmails` parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraTenantDetail.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.ReadWrite.All'\nSet-EntraTenantDetail -MarketingNotificationEmails @('amy@contoso.com','henry@contoso.com')\n```\n\n----------------------------------------\n\nTITLE: Creating a role definition with Version\nDESCRIPTION: This PowerShell script creates a new role definition in Microsoft Entra ID while specifying a version number. The script connects to Entra ID using appropriate scopes, defines the necessary role permissions, and then uses `New-EntraDirectoryRoleDefinition` to create the role. The role is created with the specified permissions, enabled status, display name, and the defined version. Ensure the `Microsoft.Graph` module is present before using `Connect-Entra`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraDirectoryRoleDefinition.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory'\n$rolePermissions = New-object Microsoft.Open.MSGraph.Model.RolePermission\n$rolePermissions.AllowedResourceActions = @(\"microsoft.directory/applications/basic/read\")\nNew-EntraDirectoryRoleDefinition -RolePermissions $rolePermissions -IsEnabled $false -DisplayName 'MyRoleDefinition' -Version '2'\n```\n\n----------------------------------------\n\nTITLE: Block Soft Matching - PowerShell\nDESCRIPTION: This example shows how to block the Soft Matching feature in the tenant by enabling the BlockSoftMatch feature. It requires the 'OnPremDirectorySynchronization.ReadWrite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraDirSyncFeature.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'OnPremDirectorySynchronization.ReadWrite.All'\nSet-EntraDirSyncFeature -Feature 'BlockSoftMatch' -Enable $true\n```\n\n----------------------------------------\n\nTITLE: Get Group App Role Assignment Syntax - PowerShell\nDESCRIPTION: This code defines the syntax for the `Get-EntraGroupAppRoleAssignment` cmdlet. It shows the required `GroupId` parameter and optional parameters like `-All`, `-Top`, and `-Property` for filtering the results.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraGroupAppRoleAssignment.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraGroupAppRoleAssignment\n -GroupId <String>\n [-All]\n [-Top <Int32>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get User Administrative Units Example 2\nDESCRIPTION: This example shows how to retrieve all administrative units a user belongs to using the -All parameter.  It connects to Entra and then retrieves the list using the Get-EntraUserAdministrativeUnit cmdlet with both UserId and the All parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserAdministrativeUnit.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.Read.All'\nGet-EntraUserAdministrativeUnit -UserId 'SawyerM@contoso.com' -All\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDeletedDateTime Id                                   Description                            DisplayName             Visibility\n--------------- --                                   -----------                            -----------             ----------\n                dddddddd-3333-4444-5555-eeeeeeeeeeee Pacific Administrative Unit            Pacific Admin Unit\n                aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb Engineering Administrative Unit        Engineering Admin Unit\n```\n\n----------------------------------------\n\nTITLE: Assign License by Copying From Another User - PowerShell\nDESCRIPTION: This PowerShell script assigns licenses to a user by copying them from another user. It retrieves both users, creates new license objects for each SkuId of the licensed user, and then assigns these licenses to the target user. Requires the 'User.ReadWrite.All' scope. Requires the Microsoft.Open.AzureAD.Model assembly.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUserLicense.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\n$licensedUser = Get-EntraUser -UserId 'AdeleV@contoso.com'\n$user = Get-EntraUser -UserId 'SawyerM@contoso.com' \n$license1 = New-Object -TypeName Microsoft.Open.AzureAD.Model.AssignedLicense \n$license1.SkuId = $licensedUser.AssignedLicenses.SkuId[0] \n$license2 = New-Object -TypeName Microsoft.Open.AzureAD.Model.AssignedLicense\n$license2.SkuId = $licensedUser.AssignedLicenses.SkuId[1]\n$addLicensesArray = @()\n$addLicensesArray += $license1\n$addLicensesArray += $license2\n$licenses = New-Object -TypeName Microsoft.Open.AzureAD.Model.AssignedLicenses \n$licenses.AddLicenses = $addLicensesArray\nSet-EntraUserLicense -UserId $user.Id -AssignedLicenses $licenses\n```\n\n----------------------------------------\n\nTITLE: Viewing Entra User Properties - PowerShell\nDESCRIPTION: This code snippet retrieves a specific Entra user's properties and methods using `Get-EntraUser` and pipes the output to `Get-Member`. The `-UserId` parameter specifies the target user. This allows for detailed inspection of user attributes and available actions.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/navigate-entraps.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraUser -UserId 'rsmith@contoso.com' | Get-Member\n```\n\n----------------------------------------\n\nTITLE: Get Device by DeviceID - EntraBetaDevice - PowerShell\nDESCRIPTION: This example demonstrates retrieving a device using its DeviceID. It requires the 'Device.Read.All' scope for authentication and utilizes the Get-EntraBetaDevice cmdlet with the -Filter parameter to specify the DeviceID to search for. The output includes device details such as Id, AccountEnabled, and DeviceId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDevice.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraBetaDevice -Filter \"DeviceId eq 'eeeeeeee-4444-5555-6666-ffffffffffff'\" \n```\n\n----------------------------------------\n\nTITLE: Get-EntraDirectoryRole Syntax (GetById) - PowerShell\nDESCRIPTION: Defines the syntax for the Get-EntraDirectoryRole cmdlet using the GetById parameter set. It shows how to use the -DirectoryRoleId and -Property parameters with this set, along with the common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDirectoryRole.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraDirectoryRole\n -DirectoryRoleId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Setting Kerberos Constrained Delegation with PowerShell\nDESCRIPTION: This example demonstrates how to configure Kerberos Constrained Delegation (KCD) for an application using the `Set-EntraBetaApplicationProxyApplicationSingleSignOn` cmdlet. It sets the `SingleSignOnMode` to 'OnPremisesKerberos' and specifies the `KerberosInternalApplicationServicePrincipalName` and `KerberosDelegatedLoginIdentity`. The script first connects to Entra ID and retrieves the application object. Then, it constructs a hashtable of parameters including the ApplicationId, the SingleSignOnMode, the KerberosInternalApplicationServicePrincipalName, and the KerberosDelegatedLoginIdentity.  Finally, it calls the Set-EntraBetaApplicationProxyApplicationSingleSignOn cmdlet with the constructed hashtable. Before running, ensure the appropriate scopes are granted and you have the correct application ID and SPN.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplicationProxyApplicationSingleSignOn.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\n$application = Get-EntraBetaApplication -Filter \"DisplayName eq 'Contoso App Proxy'\"\n$params = @{\n    ApplicationId                                   = $application .Id \n    SingleSignOnMode                                = 'OnPremisesKerberos' \n    KerberosInternalApplicationServicePrincipalName = 'https/www.adventure-works.com' \n    KerberosDelegatedLoginIdentity                  = 'OnPremisesUserPrincipalName'\n}\nSet-EntraBetaApplicationProxyApplicationSingleSignOn @params\n```\n\n----------------------------------------\n\nTITLE: Search Users - EntraBetaUser PowerShell\nDESCRIPTION: This example demonstrates how to search for users in Microsoft Entra ID based on a search string. The `Connect-Entra` cmdlet is used to establish a connection with the required scopes, and `Get-EntraBetaUser` is used with the `-SearchString` parameter to specify the search term. The search is performed against the first characters of DisplayName and UserPrincipalName.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUser.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraBetaUser -SearchString 'New'\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Registered User for a Device - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a registered user for a specific Microsoft Entra ID device using the `Get-EntraBetaDeviceRegisteredUser` cmdlet.  It first connects to Entra ID with the required scopes and then retrieves the device object before getting the registered user. The output is then formatted as a table displaying relevant properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeviceRegisteredUser.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\n$device = Get-EntraBetaDevice -SearchString '<device-display-name>'\nGet-EntraBetaDeviceRegisteredUser -DeviceId $device.ObjectId |\nSelect-Object Id, displayName, UserPrincipalName, createdDateTime, userType, accountEnabled |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Update Country Named Location Policy - PowerShell\nDESCRIPTION: This example updates a country named location policy in Microsoft Entra ID by PolicyId. It leverages the Set-EntraBetaNamedLocationPolicy cmdlet with parameters to modify the OdataType and IncludeUnknownCountriesAndRegions setting. This requires the 'Policy.ReadWrite.ConditionalAccess' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaNamedLocationPolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ConditionalAccess'\n$policy = Get-EntraBetaNamedLocationPolicy | Where-Object {\"$_.DisplayName -eq 'IP named location policy'\"}\n$type = '#microsoft.graph.countryNamedLocation'\nSet-EntraBetaNamedLocationPolicy -PolicyId $policy.Id -OdataType $type -IncludeUnknownCountriesAndRegions $true\n```\n\n----------------------------------------\n\nTITLE: Get objects owned by user - Get-EntraBetaUserOwnedObject (PowerShell)\nDESCRIPTION: This example shows how to retrieve objects owned by a specific user using their User Principal Name (UPN). It connects to Entra ID with 'User.Read' scopes, then uses `Get-EntraBetaUserOwnedObject` to get the owned objects for the user 'SawyerM@contoso.com'. The output is then formatted to show only the Id, displayName, createdDateTime, and @odata.type properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserOwnedObject.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read'\nGet-EntraBetaUserOwnedObject -UserId 'SawyerM@contoso.com' |\nSelect-Object Id, displayName, createdDateTime, '@odata.type' |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Invite New External User with Custom Message\nDESCRIPTION: This example shows how to customize the invitation message using the -InvitedUserMessageInfo parameter.  It creates a Microsoft.Open.MSGraph.Model.InvitedUserMessageInfo object to define the customized message body and language, then passes this object to the New-EntraBetaInvitation cmdlet via splatting. Requires the 'User.Invite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaInvitation.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Invite.All'\n$a= New-Object Microsoft.Open.MSGraph.Model.InvitedUserMessageInfo\n$a.CustomizedMessageBody = 'Hi there, how are you'\n$a.MessageLanguage = 'EN'\n$params = @{\n    InvitedUserEmailAddress = 'someexternaluser@externaldomain.com'\n    SendInvitationMessage = $True\n    InviteRedirectUrl = 'https://myapps.microsoft.com'\n    InvitedUserMessageInfo = $a\n}\n\nNew-EntraBetaInvitation @params\n```\n\n----------------------------------------\n\nTITLE: Get All User Owned Objects\nDESCRIPTION: This PowerShell snippet retrieves all objects owned by a specified user. It uses the `-All` parameter to ensure that all objects, regardless of pagination, are retrieved. The output displays the object's ID, display name, creation date, and type, similar to the basic example but without any limit on the number of objects returned.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserOwnedObject.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read'\nGet-EntraUserOwnedObject -UserId 'SawyerM@contoso.com' -All |\nSelect-Object Id, displayName, createdDateTime, '@odata.type' |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Finding Deleted Applications using Get-EntraDeletedApplication in PowerShell\nDESCRIPTION: This snippet explains how to find deleted applications using the `Get-EntraDeletedApplication` cmdlet in Microsoft Entra PowerShell. It requires the `Application.Read.All` scope. The cmdlet retrieves soft-deleted applications and allows filtering by display name.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/recover-deleted-data.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraDeletedApplication -All\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraDeletedApplication -Filter \"displayName eq 'TestApp1'\"\n```\n\n----------------------------------------\n\nTITLE: Get-EntraDomainServiceConfigurationRecord Syntax - PowerShell\nDESCRIPTION: This snippet shows the syntax for the Get-EntraDomainServiceConfigurationRecord cmdlet. It includes the -Name parameter, which is a string that specifies the domain for which to retrieve the service configuration records, and the -Property parameter, an optional string array to specify properties to be returned.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDomainServiceConfigurationRecord.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraDomainServiceConfigurationRecord\n -Name <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Create Application Segment using Input File (CSV) with PowerShell\nDESCRIPTION: This example demonstrates creating application segments using data from a CSV file with the New-EntraBetaPrivateAccessApplicationSegment cmdlet. The script reads the CSV file, iterates through each row, and creates an application segment for each entry using parameters like ApplicationId, DestinationHost, Ports, Protocol, and DestinationType derived from the CSV. Requires the 'AppSegments.csv' file to be in the 'C:\\temp' directory.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaPrivateAccessApplicationSegment.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$csvFile = \"C:\\temp\\AppSegments.csv\"\n\n# Assuming the CSV file has columns named 'AppObjectId', 'DestHost', 'ports', 'protocol', 'type'\n$variables = Import-Csv $csvFile\n\n# Loop through each row of the CSV and execute the command for each set of variables\nforeach ($variable in $variables) {\n    $appObjectId = $variable.AppObjectId\n    $destHost = $variable.DestHost\n    $ports = $variable.ports -split \",\"\n    $protocol = $variable.protocol -split \",\"\n    $type = $variable.type\n\n    # Execute the command\n    $params = @{\n        ApplicationId = $appObjectId\n        DestinationHost = $destHost\n        Ports = $ports\n        Protocol = $protocol\n        DestinationType = $type\n    }\n    New-EntraBetaPrivateAccessApplicationSegment @params\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve All App Role Assignments for a Service Principal - PowerShell\nDESCRIPTION: This example retrieves all application role assignments for a specified service principal by including the `-All` parameter. It assumes that the user has already connected to Entra using `Connect-Entra` and has retrieved the service principal using `Get-EntraServicePrincipal`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalAppRoleAssignment.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraServicePrincipalAppRoleAssignment -ServicePrincipalId $servicePrincipal.Id -All\n```\n\n----------------------------------------\n\nTITLE: Viewing Active Service Plans in a License (PowerShell)\nDESCRIPTION: This PowerShell snippet filters the service plans associated with a user's license to show only the active ones.  It uses the output from `Get-EntraUserLicenseDetail` and filters where `ProvisioningStatus` is 'Success'.  It then selects the `ServicePlanName` and `ProvisioningStatus` properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/how-to-manage-user-licenses.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n$userLicenses.ServicePlans | Where-Object { $_.ProvisioningStatus -eq 'Success' } | Select-Object ServicePlanName, ProvisioningStatus\n```\n\n----------------------------------------\n\nTITLE: Create Group with GroupTypes - New-EntraBetaGroup PowerShell\nDESCRIPTION: This snippet demonstrates how to create a new Microsoft Entra ID group with a specified group type (Unified) using the New-EntraBetaGroup cmdlet. It requires the 'Group.ReadWrite.All' and 'Group.Create' scopes and specifies parameters such as DisplayName, Description, MailEnabled, MailNickname, SecurityEnabled and GroupTypes. The output shows the created group's properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaGroup.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All','Group.Create'\n$params = @{\n    DisplayName = 'HelpDesk admin group3'\n    Description = 'group des'\n    MailEnabled = $False\n    MailNickname = 'helpDeskAdminGroup1'\n    SecurityEnabled = $True\n    GroupTypes = 'Unified'\n}\n\nNew-EntraBetaGroup @params\n```\n\nLANGUAGE: powershell\nCODE:\n```\nDisplayName           Id                                   MailNickname        Description GroupTypes\n-----------           --                                   ------------        ----------- ----------\nHelpDesk admin group3 xxxxxxxx-8888-5555-9999-bbbbbbbbbbbb helpDeskAdminGroup1 group des   {Unified}\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Administrative Unit by ID\nDESCRIPTION: This PowerShell snippet retrieves a specific deleted administrative unit by its ID. The `-AdministrativeUnitId` parameter identifies the target unit. Requires 'AdministrativeUnit.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedAdministrativeUnit.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.Read.All'\nGet-EntraDeletedAdministrativeUnit -AdministrativeUnitId 'gggggggg-8888-9999-aaaa-hhhhhhhhhhhh' | Select-Object Id, DisplayName, MembershipType, Visibility, DeletedDateTime, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Creating a new directory settings object\nDESCRIPTION: This example demonstrates how to create a new directory settings object in Microsoft Entra ID using the New-EntraBetaDirectorySetting cmdlet. It retrieves a directory setting template, creates a setting based on the template, modifies some properties of the setting, and then creates the new setting object in Entra ID. It requires the 'Directory.ReadWrite.All', 'Group.Read.All', and 'Group.ReadWrite.All' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaDirectorySetting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All', 'Group.Read.All' , 'Group.ReadWrite.All'\n$TemplateId = (Get-EntraBetaDirectorySettingTemplate | where { $_.DisplayName -eq \"Group.Unified\" }).Id\n$Template = Get-EntraBetaDirectorySettingTemplate | where -Property Id -Value $TemplateId -EQ\n$Setting = $Template.CreateDirectorySetting()\n$Setting[\"UsageGuidelinesUrl\"] = \"https://guideline.example.com\"\n$Setting[\"EnableMIPLabels\"] = \"True\"\nNew-EntraBetaDirectorySetting -DirectorySetting $Setting\n```\n\n----------------------------------------\n\nTITLE: Retrieve all Application Proxy Connectors - PowerShell\nDESCRIPTION: This PowerShell snippet connects to Entra ID with the required scopes and retrieves all Application Proxy connectors associated with the tenant. It demonstrates the basic usage of the `Get-EntraBetaApplicationProxyConnector` cmdlet without any specific filters or parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationProxyConnector.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\nGet-EntraBetaApplicationProxyConnector\n```\n\n----------------------------------------\n\nTITLE: Get Service Principals by Search String - PowerShell\nDESCRIPTION: This example retrieves a list of service principals where the display name contains a specific string using the `-SearchString` parameter. It connects to Entra ID and uses `Get-EntraBetaServicePrincipal` with the search string. The output displays the properties of the matching service principals.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipal.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraBetaServicePrincipal -SearchString 'Helpdesk Application'\n```\n\n----------------------------------------\n\nTITLE: Migrated script using compatibility mode\nDESCRIPTION: This snippet shows a modified PowerShell script that migrates from AzureAD to Microsoft Entra PowerShell. The critical change is replacing `Connect-AzureAD` with `Connect-Entra` and enabling compatibility aliases via `Enable-EntraAzureADAlias`. The rest of the script remains largely unchanged, leveraging aliases for continued functionality.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/migration-guide.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-Module -Name Microsoft.Entra.Users\nConnect-Entra #Replaces Connect-AzureAD for auth\nEnable-EntraAzureADAlias #Activate aliasing\n\n$applications = Get-AzureADApplication -All $true\n$logs = @()\nWrite-Host \"I would like to see the Applications with the Secrets and Certificates that expire in the next X amount of Days? <<Replace X with the number of days. The answer should be ONLY in Numbers>>\" -ForegroundColor Green\n$days = Read-Host\nWrite-Host \"Would you like to see Applications with already expired secrets or certificates as well? <<Answer with [Yes] [No]>>\" -ForegroundColor Green\n$alreadyExpired = Read-Host\n$now = Get-Date\nforeach ($app in $applications) {\n    $appName = $app.DisplayName\n    $appID = $app.Objectid\n    $applID = $app.AppId\n    $appCreds = Get-AzureADApplication -ObjectId $appID | Select-Object -Property PasswordCredentials, KeyCredentials\n    $secret = $appCreds.PasswordCredentials\n    $cert = $appCreds.KeyCredentials\n```\n\n----------------------------------------\n\nTITLE: Get-EntraServicePrincipalOAuth2PermissionGrant Syntax - PowerShell\nDESCRIPTION: This snippet provides the syntax for using the `Get-EntraServicePrincipalOAuth2PermissionGrant` cmdlet in PowerShell. It shows the required `-ServicePrincipalId` parameter and optional parameters like `-All`, `-Top`, and `-Property`. It also indicates the support for CommonParameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalOAuth2PermissionGrant.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraServicePrincipalOAuth2PermissionGrant\n-ServicePrincipalId <String>\n[-All]\n[-Top <Int32>]\n[-Property <String[]>]\n[<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Named Location Policy by ID - PowerShell\nDESCRIPTION: This snippet shows how to retrieve a specific named location policy by its ID. It first connects to Entra ID with the 'Policy.Read.All' scope, then retrieves all named location policies, filters the collection for a specific DisplayName, and then uses the PolicyId parameter of Get-EntraNamedLocationPolicy to obtain the named location policy. An active Entra ID connection and a valid PolicyId are required.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraNamedLocationPolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.All'\n$policy = Get-EntraNamedLocationPolicy | Where-Object { $_.DisplayName -eq 'Provisioning Workers' }\nGet-EntraNamedLocationPolicy -PolicyId $policy.Id\n```\n\n----------------------------------------\n\nTITLE: Update Feature Rollout Policy - IsAppliedToOrganization - PowerShell\nDESCRIPTION: This example demonstrates how to update the IsAppliedToOrganization parameter of a cloud authentication roll-out policy in Microsoft Entra ID. This parameter specifies if the policy should be applied to the entire organization. The example requires the 'Directory.ReadWrite.All' scope. Connect-Entra connects to Entra ID and Get-EntraFeatureRolloutPolicy fetches the desired policy.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraFeatureRolloutPolicy.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\n$policy = Get-EntraFeatureRolloutPolicy -Filter \"DisplayName eq 'Feature-Rollout-Policy'\"\nSet-EntraFeatureRolloutPolicy -Id $policy.Id -IsAppliedToOrganization $false\n```\n\n----------------------------------------\n\nTITLE: Add Entra Directory Role Member Syntax - PowerShell\nDESCRIPTION: Shows the syntax of the Add-EntraDirectoryRoleMember cmdlet.\n\nDependencies: None.\n\nInputs: -DirectoryRoleId (String), -MemberId (String).\n\nOutputs: None directly visible in the syntax, but the command modifies the directory role membership.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Add-EntraDirectoryRoleMember.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-EntraDirectoryRoleMember\n -DirectoryRoleId <String>\n -MemberId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Create an extension property - PowerShell\nDESCRIPTION: This PowerShell code snippet demonstrates how to create an application extension property using the `New-EntraApplicationExtensionProperty` cmdlet. It first connects to Entra ID with specified scopes and then retrieves an application using `Get-EntraApplication`. Finally, it creates the extension property named 'NewAttribute' for the retrieved application. The `ApplicationId` and `Name` parameters are required.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplicationExtensionProperty.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\nNew-EntraApplicationExtensionProperty -ApplicationId $application.Id -Name 'NewAttribute'\n```\n\n----------------------------------------\n\nTITLE: Get All Service Principals with -All Parameter - PowerShell\nDESCRIPTION: This example retrieves all service principals from the directory using the `-All` parameter. It connects to Entra ID and uses `Get-EntraBetaServicePrincipal` with the `-All` parameter to retrieve all service principals. The output displays the properties of each service principal.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipal.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraBetaServicePrincipal -All\n```\n\n----------------------------------------\n\nTITLE: Update Group Security Enabled - PowerShell\nDESCRIPTION: This example demonstrates how to update the SecurityEnabled property of an existing Microsoft Entra ID group. The script connects to Entra ID, retrieves the group using its display name, and then utilizes Set-EntraGroup to change the SecurityEnabled property to $True.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraGroup.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All'\n$group = Get-EntraGroup -Filter \"DisplayName eq 'HelpDesk Team Leaders'\"\nSet-EntraGroup -GroupId $group.Id -SecurityEnabled $True\n```\n\n----------------------------------------\n\nTITLE: Select User Group Membership - PowerShell\nDESCRIPTION: This PowerShell code snippet demonstrates how to retrieve the group membership of a user using the Select-EntraGroupIdsUserIsMemberOf cmdlet. It first connects to Entra ID, retrieves a specific group, and then checks if the user is a member of that group.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Select-EntraGroupIdsUserIsMemberOf.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$myGroup = Get-EntraGroup -Filter \"DisplayName eq '<Group-DisplayName>'\"\n$UserId = 'SawyerM@contoso.com'\n$groups = New-Object Microsoft.Open.AzureAD.Model.GroupIdsForMembershipCheck\n$groups.GroupIds = $myGroup.Id\nSelect-EntraGroupIdsUserIsMemberOf -UserId 'SawyerM@contoso.com' -GroupIdsForMembershipCheck $groups\n```\n\n----------------------------------------\n\nTITLE: Get User Owned Objects\nDESCRIPTION: This PowerShell code snippet retrieves objects owned by a specific user in Microsoft Entra ID. It connects to Entra ID, gets the owned objects based on the User ID, and formats the output to display the object's ID, display name, creation date, and type.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserOwnedObject.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read'\nGet-EntraUserOwnedObject -UserId 'SawyerM@contoso.com' |\nSelect-Object Id, displayName, createdDateTime, '@odata.type' |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Create TokenIssuancePolicy - New-EntraPolicy (PowerShell)\nDESCRIPTION: This example demonstrates the creation of a TokenIssuancePolicy using the `New-EntraPolicy` cmdlet.  The policy configures token issuance settings within Microsoft Entra ID. Requires the `Policy.ReadWrite.ApplicationConfiguration` scope. The definition parameter takes an array of JSON strings.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraPolicy.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ApplicationConfiguration'\n$definition = @('{\"TokenIssuancePolicy\":{\"Version\":1,\"SigningAlgorithm\":\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\",\"SamlTokenVersion\":1.1,\"TokenResponseSigningPolicy\":\"TokenOnly\",\"EmitSAMLNameFormat\":\"true\"}}')\nNew-EntraPolicy -Definition $definition -DisplayName 'tokenIssuance' -Type 'TokenIssuancePolicy'\n```\n\n----------------------------------------\n\nTITLE: Setting IsFallbackPublicClient Parameter\nDESCRIPTION: This parameter specifies the fallback application type as a public client, such as an installed application running on a mobile device. The default value is false, meaning the fallback application type is a confidential client like a web app. This parameter is used by Microsoft Entra ID when it cannot determine the client application type.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplication.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Boolean\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get All Conditional Access Policies - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a list of all conditional access policies in Microsoft Entra ID. It requires connecting to Entra ID with the 'Policy.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraConditionalAccessPolicy.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.All'\nGet-EntraConditionalAccessPolicy\n```\n\n----------------------------------------\n\nTITLE: Get ConnectorGroup Membership - PowerShell\nDESCRIPTION: This cmdlet retrieves the ConnectorGroup that the specified Connector is a member of. It requires the OnPremisesPublishingProfileId, which represents the ID of the connector. The connector ID can be retrieved using the `Get-EntraBetaApplicationProxyConnector` cmdlet. If no group is assigned, the connector defaults to 'Default'.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationProxyConnectorMemberOf.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaApplicationProxyConnectorMemberOf\n -OnPremisesPublishingProfileId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get All Resources Example - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all resources for the 'aadRoles' provider. It first connects to Entra ID with the necessary scopes and then uses the Get-EntraBetaPrivilegedResource cmdlet with the ProviderId parameter to retrieve the resources. The command requires connection to Entra ID and the specified ProviderId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPrivilegedResource.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'PrivilegedAccess.Read.AzureAD', 'PrivilegedAccess.Read.AzureResources' 'PrivilegedAccess.Read.AzureADGroup'\nGet-EntraBetaPrivilegedResource -ProviderId 'aadRoles'\n```\n\n----------------------------------------\n\nTITLE: Check Installed Microsoft Entra Module Version - PowerShell\nDESCRIPTION: This command retrieves the version of the currently installed Microsoft.Entra PowerShell module. It is used to verify if the installed version is up-to-date compared to the latest release in the PowerShell Gallery. No specific inputs are required. The output displays the version information of the installed module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/troubleshooting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-InstalledModule -Name Microsoft.Entra\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Entra.Beta Module for Current User\nDESCRIPTION: This PowerShell command installs the Microsoft.Entra.Beta module from the PSGallery repository. It installs the module only for the current user using the CurrentUser scope. The -Force and -AllowClobber parameters ensure that any existing versions are overwritten and prevent prompts. This command doesn't need admin privileges.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/includes/installation-entrapowershell-all.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module -Name Microsoft.Entra.Beta -Repository PSGallery -Scope CurrentUser -Force -AllowClobber\n```\n\n----------------------------------------\n\nTITLE: Create ActivityBasedTimeoutPolicy - New-EntraPolicy (PowerShell)\nDESCRIPTION: This example creates an ActivityBasedTimeoutPolicy using the `New-EntraPolicy` cmdlet. This type of policy defines timeout settings based on user activity in Microsoft Entra ID. Requires the `Policy.ReadWrite.ApplicationConfiguration` scope. The definition parameter takes an array of JSON strings.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraPolicy.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ApplicationConfiguration'\n$definition = @('{\"activityBasedTimeoutPolicies\":{\"AlternateLoginIDLookup\":true, \"IncludedUserIds\":[\"UserID\"]}}')\nNew-EntraPolicy -Definition $definition -DisplayName 'ActivityBasedTimeoutPolicyname' -Type 'ActivityBasedTimeoutPolicy'\n```\n\n----------------------------------------\n\nTITLE: Get Role Definition by ID - PowerShell\nDESCRIPTION: This example shows how to retrieve a specific role definition using its `UnifiedRoleDefinitionId`. It first filters the role definitions to find the desired role and then uses its ID to retrieve the specific role definition. Requires 'RoleManagement.Read.Directory' and 'EntitlementManagement.Read.All' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirectoryRoleDefinition.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory', 'EntitlementManagement.Read.All'\n$role = Get-EntraBetaDirectoryRoleDefinition -Filter \"DisplayName eq 'Helpdesk Administrator'\"\nGet-EntraBetaDirectoryRoleDefinition -UnifiedRoleDefinitionId $role.Id\n```\n\n----------------------------------------\n\nTITLE: Retrieving all cloud authentication roll-out policies - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a list of all cloud authentication roll-out policies in Microsoft Entra ID. It first connects to Entra using the `Connect-Entra` cmdlet with the required scopes and then uses `Get-EntraBetaFeatureRolloutPolicy` to fetch the policies.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaFeatureRolloutPolicy.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\nGet-EntraBetaFeatureRolloutPolicy\n```\n\n----------------------------------------\n\nTITLE: Get all licenses in tenant using Get-EntraBetaTenantDetail (PowerShell)\nDESCRIPTION: This example demonstrates how to retrieve all licenses in the tenant by using the Get-EntraBetaTenantDetail cmdlet and then expanding the ProvisionedPlans property using Select-Object.  It first connects to Entra ID with the Organization.Read.All scope. The output shows the CapabilityStatus, ProvisioningStatus and Service properties of each license.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaTenantDetail.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All'\nGet-EntraBetaTenantDetail | Select-Object -ExpandProperty ProvisionedPlans\n```\n\n----------------------------------------\n\nTITLE: Get SKUs with GetQuery - PowerShell\nDESCRIPTION: This snippet shows the basic syntax for using `Get-EntraAccountSku` without any parameters to retrieve all SKUs for a company.  It requires the Microsoft.Entra module and appropriate permissions. The output will be a list of SKUs with details like Id, AccountId, AccountName, etc.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAccountSku.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraAccountSku\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Predefined Value with Filter - Entra Custom Security Attributes (PowerShell)\nDESCRIPTION: This PowerShell snippet demonstrates how to retrieve a predefined value for a custom security attribute definition using the `Get-EntraCustomSecurityAttributeDefinitionAllowedValue` cmdlet with the `-Filter` parameter. It connects to Entra, retrieves the attribute definition, and then uses a filter to select the allowed value based on its ID. The signed-in user must have the Attribute Definition Reader or Administrator role.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraCustomSecurityAttributeDefinitionAllowedValue.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'CustomSecAttributeDefinition.ReadWrite.All'\n$attributeDefinition = Get-EntraCustomSecurityAttributeDefinition | Where-Object {$_.Name -eq 'Engineering'}\nGet-EntraCustomSecurityAttributeDefinitionAllowedValue -CustomSecurityAttributeDefinitionId $attributeDefinition.Id -Filter \"Id eq 'Alpine'\"\n```\n\n----------------------------------------\n\nTITLE: Get Application Template by ID - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a specific application template by its ID.  First, it retrieves the application template object by display name, then uses the Id property of that object to fetch the specific template using the `-Id` parameter. It requires the 'Application.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplicationTemplate.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$applicationTemplate = Get-EntraApplicationTemplate -Filter \"DisplayName eq 'Dynamics CRM Online'\"\nGet-EntraApplicationTemplate -Id $applicationTemplate.Id\n```\n\n----------------------------------------\n\nTITLE: Remove Application Password Credential Example - PowerShell\nDESCRIPTION: This example demonstrates how to remove a password credential from an application using Remove-EntraBetaApplicationPasswordCredential. It first connects to Entra with the required scopes, retrieves the application and password credential details using Get-EntraBetaApplication and Get-EntraBetaApplicationPasswordCredential respectively, and then removes the credential.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaApplicationPasswordCredential.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All'\n$application = Get-EntraBetaApplication -Filter \"displayName eq 'Contoso Helpdesk Application'\"\n$applicationPassword = Get-EntraBetaApplicationPasswordCredential -ApplicationId $application.Id | Where-Object {$_.DisplayName -eq 'ERP App Password'}\nRemove-EntraBetaApplicationPasswordCredential -ApplicationId $application.Id -KeyId $applicationPassword.KeyId\n```\n\n----------------------------------------\n\nTITLE: Get Application Logo by ID - PowerShell\nDESCRIPTION: This example retrieves the application logo for an application specified by its Object ID. It first connects to Entra ID with the required scopes, retrieves the application using its display name, and then retrieves the logo and saves it to a file.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplicationLogo.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$application = Get-EntraApplication -Filter \"DisplayName eq 'Helpdesk Application'\"\nGet-EntraApplicationLogo -ApplicationId $application.Id -FilePath 'D:\\outfile1.jpg'\n```\n\n----------------------------------------\n\nTITLE: Update Policy Definition - PowerShell\nDESCRIPTION: This example updates the definition of a specified policy in Microsoft Entra ID. It connects to Entra ID, retrieves the policy, and then updates the definition using Set-EntraPolicy with the -Id and -Definition parameters. The definition parameter expects an array of stringified JSON representing the policy rules.  Requires the 'Policy.ReadWrite.ApplicationConfiguration' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraPolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ApplicationConfiguration'\n$policy = Get-EntraPolicy | Where-Object { $_.DisplayName -eq 'Microsoft User Default Recommended Policy' }\n$definition = @('{\"activityBasedTimeoutPolicies\":{\"AlternateLoginIDLookup\":true, \"IncludedUserIds\":[\"UserID\"]}}')\nSet-EntraPolicy -Id $policy.Id -Definition $definition\n```\n\n----------------------------------------\n\nTITLE: Get Sign-In Detailed Summary - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a detailed sign-in summary using the Get-EntraBetaApplicationSignInDetailedSummary cmdlet. It first connects to Entra ID with the required scopes and then executes the cmdlet to fetch the sign-in data. The output displays information like Id, AggregatedEventDateTime, AppDisplayName, AppId, and SignInCount.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationSignInDetailedSummary.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Reports.Read.All'\nGet-EntraBetaApplicationSignInDetailedSummary\n```\n\n----------------------------------------\n\nTITLE: DisplayName Parameter Definition\nDESCRIPTION: This YAML snippet describes the `-DisplayName` parameter for the `New-EntraApplication` cmdlet. It defines that `DisplayName` is of type `System.String`, is required, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplication.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Listing Beta Microsoft Entra Modules in PowerShell\nDESCRIPTION: This PowerShell command lists all Beta Microsoft Entra modules available in the PowerShell Gallery. It uses `Find-Module` to search for modules with names starting with \"Microsoft.Entra*\" and then filters for modules with \"beta\" in their name using `Where-Object`. This allows users to identify and explore the pre-release modules.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/includes/install-specific-submodules.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nFind-Module -Name \"Microsoft.Entra*\" -Repository PSGallery |\nWhere-Object { $_.Name -match \"beta\" }\n```\n\n----------------------------------------\n\nTITLE: Get Top N Administrative Units - PowerShell\nDESCRIPTION: This example shows how to retrieve a limited number of administrative units using the Get-EntraBetaAdministrativeUnit cmdlet and the `-Top` parameter. The `-Top` parameter specifies the maximum number of records to return. This is useful when you only need a sample of the administrative units or when dealing with performance considerations. It requires an active Entra ID connection with the necessary scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAdministrativeUnit.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.Read.All'\nGet-EntraBetaAdministrativeUnit -Top 1\n```\n\n----------------------------------------\n\nTITLE: Get Extension Properties Example\nDESCRIPTION: This example demonstrates how to get extension properties for a specified application using `Get-EntraApplicationExtensionProperty`. It first connects to Entra ID with appropriate scopes and retrieves the application using its display name before getting the extension properties by application ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplicationExtensionProperty.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$application = Get-EntraApplication -Filter \"DisplayName eq 'Helpdesk Application'\"\nGet-EntraApplicationExtensionProperty -ApplicationId $application.Id\n```\n\nLANGUAGE: powershell\nCODE:\n```\nDeletedDateTime Id                                   AppDisplayName DataType IsMultiValued IsSyncedFromOnPremises Name                                                    TargetObjects\n--------------- --                                   -------------- -------- ------------- ---------------------- ----                                                    -------------\n                aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb                Boolean  False         False                  extension_c371a443f6734a3e8982a26357fb7d59_NewAttribute {User}\n```\n\n----------------------------------------\n\nTITLE: Get Top OAuth2 Permission Grant\nDESCRIPTION: Retrieves the top OAuth2 permission grant for a user using the Get-EntraUserOAuth2PermissionGrant cmdlet with the -Top parameter.  It requires the Microsoft.Entra module and the Directory.Read.All scope. The -UserId parameter specifies the user's object ID. The `-Top` parameter limits the number of returned entries.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserOAuth2PermissionGrant.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\nGet-EntraUserOAuth2PermissionGrant -ObjectId 'SawyerM@contoso.com' -Top 1\n```\n\n----------------------------------------\n\nTITLE: Retrieve Inactive Users with Filter - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve inactive users and then filter the results based on a specific UserPrincipalName. It uses Connect-Entra to connect, retrieves users inactive for 10 days, and pipes the result to Where-Object to filter for a specific user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserInactiveSignIn.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All','AuditLog.Read.All'\nGet-EntraUserInactiveSignIn -Ago 10 | Where-Object {$_.UserPrincipalName -eq 'SawyerM@contoso.com'}\n```\n\n----------------------------------------\n\nTITLE: Retrieving certificate object from a file path - PowerShell\nDESCRIPTION: This PowerShell code retrieves certificate mappings as an object from a specified certificate file path. It uses the `Get-EntraUserCertificateUserIdsFromCertificate` cmdlet with the `-Path` parameter to specify the file location. The command returns the Name and Value pairs representing the extracted certificate information.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserCertificateUserIdsFromCertificate.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraUserCertificateUserIdsFromCertificate -Path 'C:\\path\\to\\certificate.cer'\n```\n\n----------------------------------------\n\nTITLE: Uninstall specific Microsoft.Entra submodule (v1)\nDESCRIPTION: This PowerShell command uninstalls a specific submodule of the Microsoft.Entra module, such as `Users`. The `-AllVersions` parameter removes all installed versions, and `-Force` suppresses confirmation prompts.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/includes/uninstall-entrapowershell-module.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nUninstall-Module -Name Microsoft.Entra.Users -AllVersions -Force\n```\n\n----------------------------------------\n\nTITLE: Create Service Principal with AlternativeNames, ServicePrincipalType, ServicePrincipalName\nDESCRIPTION: This example shows how to create a new service principal using the AlternativeNames, ServicePrincipalType, and ServicePrincipalNames parameters. It retrieves an application by its display name using Get-EntraBetaApplication and then creates the service principal with the specified parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaServicePrincipal.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraBetaApplication -Filter \"DisplayName eq 'Helpdesk Application'\"\nNew-EntraBetaServicePrincipal -AppId $application.AppId -AlternativeNames 'sktest2' -ServicePrincipalType 'Application' -ServicePrincipalNames $application.AppId\n```\n\nLANGUAGE: powershell\nCODE:\n```\nDisplayName Id                                   AppId                                SignInAudience ServicePrincipalType\n----------- --                                   -----                                -------------- --------------------\nHelpdesk Application    bbbbbbbb-1111-2222-3333-cccccccccccc 00001111-aaaa-2222-bbbb-3333cccc4444 AzureADMyOrg   Application\n```\n\n----------------------------------------\n\nTITLE: Get-EntraCustomSecurityAttributeDefinition Syntax - PowerShell\nDESCRIPTION: This PowerShell syntax shows the structure for using the Get-EntraCustomSecurityAttributeDefinition cmdlet in two ways: GetQuery and GetById. GetQuery allows retrieving all custom security attribute definitions, while GetById retrieves a specific definition using its ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraCustomSecurityAttributeDefinition.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraCustomSecurityAttributeDefinition\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get User Groups with -Top (Example 3)\nDESCRIPTION: This example demonstrates how to retrieve a limited number of groups to which a user belongs using the `-Top` parameter.  It also mentions that `-Limit` can be used as an alias for `-Top`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserGroup.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All', 'Group.Read.All', 'Directory.Read.All'\nGet-EntraUserGroup -UserId 'SawyerM@contoso.com' -Top 1\n```\n\nLANGUAGE: powershell\nCODE:\n```\nDisplayName                Id                                   MailNickname        Description               GroupTypes\n-----------                --                                   ------------        -----------               ----------\nContoso Marketing          hhhhhhhh-3333-5555-3333-qqqqqqqqqqqq ContosoMarketing    Contoso Marketing         {Unified}\n```\n\n----------------------------------------\n\nTITLE: Set Entra Group Membership Rule Processing State - PowerShell\nDESCRIPTION: This example demonstrates how to update the membership rule processing state of a specified group in Microsoft Entra ID.  It retrieves the group and then attempts to set the MembershipRule. Note that setting the processing state requires a valid MembershipRule.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaGroup.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All'\n$group = Get-EntraBetaGroup -Filter \"DisplayName eq 'HelpDesk Team Leaders'\"\nSet-EntraBetaGroup -GroupId $group.Id -MembershipRule '(user.UserType -contains \"Member\")'\n```\n\n----------------------------------------\n\nTITLE: Get User Administrative Units Example 3\nDESCRIPTION: This example demonstrates how to limit the number of administrative units returned using the -Top parameter (or its alias -Limit). The example connects to Entra and retrieves the first administrative unit associated with the specified user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserAdministrativeUnit.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.Read.All'\nGet-EntraUserAdministrativeUnit -UserId 'SawyerM@contoso.com' -Top 1\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDeletedDateTime Id                                   Description                            DisplayName             Visibility\n--------------- --                                   -----------                            -----------             ----------\n                dddddddd-3333-4444-5555-eeeeeeeeeeee Pacific Administrative Unit            Pacific Admin Unit\n                aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb Engineering Administrative Unit        Engineering Admin Unit\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Applications - GetByValue Syntax - PowerShell\nDESCRIPTION: Defines the syntax for retrieving deleted applications using a search string. It uses the GetByValue parameter set. Requires the SearchString parameter to filter by a given string.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedApplication.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraDeletedApplication\n [-SearchString <String>]\n [-All]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Update Permission Grant Condition Set - Example 1\nDESCRIPTION: This example demonstrates how to update a permission grant condition set to include permissions classified as low. It first connects to Entra ID with the required scopes, retrieves the permission grant policy and condition set, and then uses Set-EntraBetaPermissionGrantConditionSet to update the PermissionClassification to 'low'. Requires the 'Policy.ReadWrite.PermissionGrant' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaPermissionGrantConditionSet.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.PermissionGrant'\n$permissionGrantPolicy = Get-EntraBetaPermissionGrantPolicy | Where-Object { $_.Id -eq 'my-custom-consent-policy' }\n$conditionSet = Get-EntraBetaPermissionGrantConditionSet -PolicyId $permissionGrantPolicy.Id -ConditionSetType 'includes' | Where-Object { $_.PermissionType -eq 'delegated' }\nSet-EntraBetaPermissionGrantConditionSet -PolicyId $permissionGrantPolicy -ConditionSetType 'includes' -Id $conditionSet.Id -PermissionClassification 'low' \n```\n\n----------------------------------------\n\nTITLE: Get Entra Group by Display Name with PowerShell\nDESCRIPTION: This PowerShell command retrieves a Microsoft Entra group based on its display name. It uses the Get-EntraGroup cmdlet with the -Filter parameter to specify a filter condition that matches the displayName property to 'Contoso marketing'. This command requires the Microsoft Entra PowerShell module and appropriate permissions to read group information.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-groups.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraGroup -Filter \"displayName eq 'Contoso marketing'\"\n```\n\n----------------------------------------\n\nTITLE: Get cross-cloud verification code example - PowerShell\nDESCRIPTION: This example demonstrates how to use the Get-CrossCloudVerificationCode cmdlet with the -Name parameter to retrieve the verification code for the Contoso.com domain. The command returns a string to enable cross-cloud federation.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-CrossCloudVerificationCode.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CrossCloudVerificationCode -Name Contoso.com\n```\n\n----------------------------------------\n\nTITLE: Get All Group Owners in PowerShell\nDESCRIPTION: This PowerShell snippet retrieves all owners of a specific group. It establishes a connection to Entra ID with the 'GroupMember.Read.All' scope, retrieves the group using a filter on the display name, and then uses Get-EntraGroupOwner with the -All parameter to retrieve all owners. The snippet then selects and displays the Id, DisplayName, and '@odata.type' properties of the returned owners.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraGroupOwner.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All'\n$group = Get-EntraGroup -Filter \"DisplayName eq 'Sales and Marketing'\"\nGet-EntraGroupOwner -GroupId $group.Id -All | Select-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Get-EntraObjectByObjectId Syntax - PowerShell\nDESCRIPTION: This code snippet shows the syntax for the `Get-EntraObjectByObjectId` cmdlet in PowerShell. It details the required and optional parameters including `ObjectIds`, `Types`, and `Property` along with the common parameters. Understanding the syntax is crucial for correctly using the cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraObjectByObjectId.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraObjectByObjectId\n -ObjectIds <System.Collections.Generic.List`1[String]>\n [-Types <System.Collections.Generic.List`1[String]>] \n [-Property <String[]>] \n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Cmdlet Syntax - Get-EntraUserDirectReport PowerShell\nDESCRIPTION: This snippet represents the syntax for the Get-EntraUserDirectReport cmdlet. It lists the available parameters such as UserId, All, Top and Property.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserDirectReport.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraUserDirectReport\n -UserId <String>\n [-All]\n [-Top <Int32>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove Registered User Example - PowerShell\nDESCRIPTION: This example demonstrates how to remove a registered user from a device using Remove-EntraDeviceRegisteredUser. It fetches the device and user objects before removing the user. Requires the 'Directory.AccessAsUser.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraDeviceRegisteredUser.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.AccessAsUser.All'\n$device = Get-EntraDevice -Filter \"DisplayName eq 'Woodgrove Desktop'\"\n$user = Get-EntraDeviceRegisteredUser -DeviceId $device.Id | Where-Object {$_.userPrincipalName -eq 'parker@contoso.com'}\nRemove-EntraDeviceRegisteredUser -DeviceId $device.Id -UserId $user.Id\n```\n\n----------------------------------------\n\nTITLE: Get Application Sign-in Summary Last Month - PowerShell\nDESCRIPTION: This example retrieves the sign-in summaries for all applications over the last 30 days. It requires connecting to Entra ID with 'Reports.Read.All' scope and uses the Get-EntraBetaApplicationSignInSummary cmdlet with the -Days parameter. The output displays sign-in statistics for each application.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationSignInSummary.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Reports.Read.All'\nGet-EntraBetaApplicationSignInSummary -Days 30\n```\n\n----------------------------------------\n\nTITLE: Get-EntraConditionalAccessPolicy Syntax (GetById)\nDESCRIPTION: This snippet shows the syntax for the Get-EntraConditionalAccessPolicy cmdlet when specifying a PolicyId.  It retrieves a specific conditional access policy by its ID and can also use optional property filters. It utilizes common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraConditionalAccessPolicy.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraConditionalAccessPolicy\n -PolicyId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get OAuth2 permission grants for a user using All parameter - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all OAuth2 permission grants for a specific user using the `-All` parameter with the `Get-EntraBetaUserOAuth2PermissionGrant` cmdlet. It retrieves all permission grants without paging, connecting to Entra ID with 'Directory.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserOAuth2PermissionGrant.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\nGet-EntraBetaUserOAuth2PermissionGrant -UserId 'SawyerM@contoso.com' -All\n```\n\n----------------------------------------\n\nTITLE: Remove Permission Grant Policy Example - PowerShell\nDESCRIPTION: This example demonstrates how to remove a specific permission grant policy using the `Remove-EntraPermissionGrantPolicy` cmdlet. It first connects to Entra ID with the required scopes and then removes the policy using its ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraPermissionGrantPolicy.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.PermissionGrant'\nRemove-EntraPermissionGrantPolicy -Id 'my_permission_grant_policy_id'\n```\n\n----------------------------------------\n\nTITLE: Add Custom Security Attribute Definition Allowed Value - PowerShell\nDESCRIPTION: This snippet shows how to add a predefined value to a Microsoft Entra ID custom security attribute definition using the `Add-EntraBetaCustomSecurityAttributeDefinitionAllowedValue` cmdlet. It retrieves the attribute definition ID using `Get-EntraBetaCustomSecurityAttributeDefinition` and then adds the allowed value.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaCustomSecurityAttributeDefinitionAllowedValue.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-EntraBetaCustomSecurityAttributeDefinitionAllowedValue\n -IsActive <Boolean>\n -CustomSecurityAttributeDefinitionId <String>\n -Id <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Output of Get all licenses (PowerShell)\nDESCRIPTION: This is the expected output for getting all licenses in the tenant. It lists the CapabilityStatus, ProvisioningStatus, and Service for each provisioned plan.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaTenantDetail.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nCapabilityStatus ProvisioningStatus Service                       AdditionalProperties\n---------------- ------------------ -------                       --------------------\nEnabled          Success            SharePoint\nEnabled          Success            exchange\nEnabled          Success            exchange\nEnabled          Success            exchange\nEnabled          Success            SCO\nEnabled          Success            exchange\nEnabled          Success            SharePoint\nEnabled          Success            CloudPC-MX\nEnabled          Success            YammerEnterprise\n```\n\n----------------------------------------\n\nTITLE: Set-EntraBetaApplicationProxyApplicationConnectorGroup Syntax - PowerShell\nDESCRIPTION: Shows the syntax of the `Set-EntraBetaApplicationProxyApplicationConnectorGroup` cmdlet.  It requires `OnPremisesPublishingProfileId` and `ConnectorGroupId` parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplicationProxyApplicationConnectorGroup.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-EntraBetaApplicationProxyApplicationConnectorGroup\n -OnPremisesPublishingProfileId <String>\n -ConnectorGroupId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Contact with Filter Parameters PowerShell\nDESCRIPTION: This cmdlet retrieves contacts from Microsoft Entra ID based on the provided filter. It uses the `Get-EntraBetaContact` cmdlet with the `-Filter` parameter to specify the filtering criteria.  The `Connect-Entra` cmdlet is used to establish a connection with the required scopes. Output includes DisplayName, Id, Mail, and MailNickname.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaContact.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaContact\n [-Filter <String>]\n [-All]\n [-Top <Int32>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Create Cloud Authentication Rollout Policy\nDESCRIPTION: This example demonstrates creating a policy for cloud authentication roll-out in Microsoft Entra ID, specifically for 'PassthroughAuthentication'. It connects to Entra ID with Directory.ReadWrite.All scopes, creates the policy, and sets the display name and enablement status. The output shows the created policy's properties, including ID, Description, DisplayName, Feature, IsAppliedToOrganization, and IsEnabled.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraFeatureRolloutPolicy.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\nNew-EntraFeatureRolloutPolicy -Feature 'PassthroughAuthentication' -DisplayName 'Passthrough Authentication Rollout Policy' -IsEnabled $false\n```\n\n----------------------------------------\n\nTITLE: Get all deleted users\nDESCRIPTION: This PowerShell snippet retrieves all recoverable deleted users from the Microsoft Entra ID. It connects to Entra ID with the required scopes and uses Get-EntraBetaDeletedUser to get the deleted users. The output is then formatted into a table showing selected properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedUser.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraBetaDeletedUser | Select-Object Id, UserPrincipalName, DisplayName, AccountEnabled, DeletedDateTime, DeletionAgeInDays, UserType | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: List User's Groups - Entra ID - PowerShell\nDESCRIPTION: This example demonstrates how to list the groups a specific user is a member of in Microsoft Entra ID. It connects to Entra ID using the User.Read.All scope, then uses the Get-EntraBetaUserMembership cmdlet to retrieve user memberships. The results are filtered to only show entries where the '@odata.type' property is '#microsoft.graph.group'. The filtered results are then formatted for display.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserMembership.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraBetaUserMembership -UserId 'SawyerM@contoso.com' |\nWhere-Object { $_.'@odata.type' -eq '#microsoft.graph.group' } |\nSelect-Object Id, displayName, createdDateTime, groupTypes, securityEnabled, visibility, '@odata.type' |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Add Scoped Role Membership to Administrative Unit - PowerShell\nDESCRIPTION: This example demonstrates how to add a user to a specified role within a specified administrative unit using the Add-EntraBetaScopedRoleMembership cmdlet. It requires connecting to Entra ID with the 'RoleManagement.ReadWrite.Directory' scope, retrieving user, role, and administrative unit objects, and then creating a RoleMemberInfo object to pass to the cmdlet. The cmdlet assigns a scoped role membership to an administrative unit.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaScopedRoleMembership.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory'\n$user = Get-EntraBetaUser -UserId 'SawyerM@contoso.com'\n$role = Get-EntraBetaDirectoryRole -Filter \"DisplayName eq 'Helpdesk Administrator'\" \n$administrativeUnit = Get-EntraBetaAdministrativeUnit -Filter \"DisplayName eq 'Pacific Administrative Unit'\"\n$roleMember = New-Object -TypeName Microsoft.Open.MSGraph.Model.MsRoleMemberInfo\n$roleMember.Id = $user.Id\nAdd-EntraBetaScopedRoleMembership -AdministrativeUnitId $administrativeUnit.Id -RoleObjectId $role.Id -RoleMemberInfo $roleMember\n```\n\n----------------------------------------\n\nTITLE: Update Service Principal Type and App Role Assignment - PowerShell\nDESCRIPTION: This example demonstrates how to update the ServicePrincipalType and AppRoleAssignmentRequired properties of a service principal using the Set-EntraBetaServicePrincipal cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaServicePrincipal.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nSet-EntraBetaServicePrincipal -ServicePrincipalId $servicePrincipal.Id -ServicePrincipalType 'Application' -AppRoleAssignmentRequired $True\n```\n\n----------------------------------------\n\nTITLE: Remove Proxy Application and Delete from Entra ID - PowerShell\nDESCRIPTION: This example shows how to completely remove a Proxy Application, including its Entra ID application object. It connects to Entra ID and then uses the Remove-EntraBetaApplicationProxyApplication cmdlet with the -RemoveADApplication parameter set to $true to delete the entire application.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaApplicationProxyApplication.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\nRemove-EntraBetaApplicationProxyApplication -ApplicationId 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb' -RemoveADApplication $true\n```\n\n----------------------------------------\n\nTITLE: Get Contracts with Filter (GetQuery Syntax) - PowerShell\nDESCRIPTION: This code snippet shows the syntax for retrieving contracts using the GetQuery method, allowing filtering of results based on OData v4.0 filter statements.  It uses the `-Filter` parameter to control which contract objects are returned. No dependencies are required beyond the Microsoft.Entra.Beta module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaContract.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaContract\n [-Filter <String>]\n [-All]\n [-Top <Int32>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Directory Role with Filter (GetQuery)\nDESCRIPTION: This syntax retrieves directory roles using an OData filter. The `-Filter` parameter is used to specify the filter condition. The `-Property` parameter allows specifying which properties to return.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirectoryRole.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaDirectoryRole\n [-Filter <String>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Top Administrative Unit Members by ID - PowerShell\nDESCRIPTION: This PowerShell script retrieves a specified number of administrative unit members by specifying the AdministrativeUnitId and using the -Top parameter. It first connects to Entra with needed scopes and retrieves the administrative unit. It requires the Microsoft.Entra.Beta module and AdministrativeUnit.ReadWrite.All scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAdministrativeUnitMember.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.ReadWrite.All'\n$administrativeUnit = Get-EntraBetaAdministrativeUnit -Filter \"DisplayName eq '<administrativeunit-display-name>'\"\nGet-EntraBetaAdministrativeUnitMember -AdministrativeUnitId $administrativeUnit.Id -Top 3 |\nSelect-Object Id, DisplayName, '@odata.type', createdDateTime\n```\n\n----------------------------------------\n\nTITLE: Get Contact Memberships - PowerShell\nDESCRIPTION: This PowerShell code snippet retrieves the memberships of a specified contact in Microsoft Entra ID. It first connects to Entra ID with the required scopes, retrieves the contact object using its display name, and then uses the Get-EntraBetaContactMembership cmdlet to get the contact's memberships. The output is formatted into a table showing the ID, DisplayName, @odata.type, and SecurityEnabled properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaContactMembership.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'OrgContact.Read.All'\n$contact = Get-EntraBetaContact -Filter \"displayName eq 'Contoso Contact'\"\nGet-EntrabetaContactMembership -OrgContactId $contact.Id |\nSelect-Object Id, DisplayName, '@odata.type', SecurityEnabled | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Remove Entra Group Syntax - PowerShell\nDESCRIPTION: Shows the syntax for the Remove-EntraGroup cmdlet, including the required GroupId parameter.  It requires the Microsoft.Entra module to be installed. CommonParameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraGroup.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraGroup\n -GroupId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get objects created by a service principal - PowerShell\nDESCRIPTION: This example retrieves objects created by a specified service principal in Microsoft Entra ID. It first connects to Entra ID with the necessary scopes, then retrieves the service principal ID based on the display name, and finally uses the Get-EntraBetaServicePrincipalCreatedObject cmdlet to get the objects created by the service principal. The ServicePrincipalId parameter is used to specify the service principal ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalCreatedObject.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraBetaServicePrincipalCreatedObject -ServicePrincipalId $servicePrincipal.Id\n```\n\n----------------------------------------\n\nTITLE: Defining Translate Host Header Parameter in YAML\nDESCRIPTION: This YAML snippet defines the `-IsTranslateHostHeaderEnabled` parameter as a boolean, indicating whether URLs in headers should be translated. It's used to control host header translation for application proxy.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplicationProxyApplication.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Boolean\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get deleted applications using SearchString parameter - PowerShell\nDESCRIPTION: Retrieves deleted applications that match the specified search string ('TestApp1'). It requires the 'Application.Read.All' scope and uses the Connect-Entra cmdlet for authentication.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedApplication.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraDeletedApplication -SearchString 'TestApp1'\n```\n\n----------------------------------------\n\nTITLE: Filter Parameter Definition in YAML\nDESCRIPTION: This YAML snippet defines the -Filter parameter for a PowerShell cmdlet. It specifies the parameter's type as System.String, indicates that it's not required, and defines attributes like accept pipeline input and wildcard characters.  It's used to specify an OData v4.0 filter statement to control which objects are returned.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAuditSignInLog.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get All App Role Assignments - PowerShell\nDESCRIPTION: This example retrieves all application role assignments for a specified user. It connects to Entra ID with the necessary scopes and uses the `-All` parameter to retrieve all assignments.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserAppRoleAssignment.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AppRoleAssignment.ReadWrite.All', 'Directory.Read.All'\nGet-EntraBetaUserAppRoleAssignment -UserId 'SawyerM@contoso.com' -All\n```\n\n----------------------------------------\n\nTITLE: Listing Recently Created Users (PowerShell)\nDESCRIPTION: This snippet demonstrates how to retrieve and list the five most recently created users in Entra ID.  It retrieves all users, sorts them by createdDateTime in descending order, and then selects the first five users.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUser.md#_snippet_16\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaUser -All | Sort-Object -Property createdDateTime -Descending | Select-Object -First 5\n```\n\n----------------------------------------\n\nTITLE: Get-EntraBetaGroup Syntax (GetById) - PowerShell\nDESCRIPTION: This code shows the syntax for using Get-EntraBetaGroup with the GetById parameter set.  This retrieves a group by its unique GroupId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaGroup.md#_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaGroup\n -GroupId <String>\n [-All]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Set Entra Group Mail Enabled - PowerShell\nDESCRIPTION: This example demonstrates how to update the mail enabled property of a specified group. It retrieves the group and uses Set-EntraBetaGroup to set the MailEnabled parameter to false.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaGroup.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All'\n$group = Get-EntraBetaGroup -Filter \"DisplayName eq 'HelpDesk Team Leaders'\"\nSet-EntraBetaGroup -GroupId $group.Id -MailEnabled $False\n```\n\n----------------------------------------\n\nTITLE: Get Top Memberships Example - PowerShell\nDESCRIPTION: This example illustrates how to retrieve a specified number (top 2 in this case) of memberships of a service principal using the Get-EntraBetaServicePrincipalMembership cmdlet and the -Top parameter. Similar to previous examples, it connects to Entra and obtains the service principal first. Requires the 'Application.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalMembership.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraBetaServicePrincipalMembership -ServicePrincipalId $servicePrincipal.Id -Top 2 | Select-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Test Entra Script with File Path PowerShell\nDESCRIPTION: This example demonstrates how to use the Test-EntraScript command to check if a script file (usercreation.ps1) is compatible with Microsoft Entra PowerShell. The -Quiet parameter suppresses detailed output, returning only $true or $false.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Test-EntraScript.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nTest-EntraScript -Path .\\usercreation.ps1 -Quiet\n```\n\n----------------------------------------\n\nTITLE: IsDefault Parameter Definition\nDESCRIPTION: Defines the IsDefault parameter for the New-EntraDomain cmdlet, specifying that it is a boolean value indicating whether the domain should be used for new user creation. Only one default domain is permitted per company.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraDomain.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Boolean\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get User Role by ID (GetById)\nDESCRIPTION: This syntax block defines the GetById parameter set for the `Get-EntraUserRole` cmdlet. It retrieves a specific directory role assigned to a user, identified by both the user's ID (`-UserId`) and the directory role's ID (`-DirectoryRoleId`). The `-Property` parameter allows specifying which properties to return. `CommonParameters` are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserRole.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraUserRole\n -UserId <String>\n -DirectoryRoleId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Retrieve User Thumbnail Photo - PowerShell\nDESCRIPTION: This script retrieves the thumbnail photo of a specified user in Entra ID. It uses the `Get-EntraUserThumbnailPhoto` cmdlet to retrieve the photo data, which can then be further processed or displayed. Requires ProfilePhoto.Read.All scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-user.md#_snippet_18\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'ProfilePhoto.Read.All'\nGet-EntraUserThumbnailPhoto -UserId 'SawyerM@contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Add Administrative Unit Member Syntax - PowerShell\nDESCRIPTION: This PowerShell syntax block displays the structure and parameters required to use the `Add-EntraAdministrativeUnitMember` cmdlet.  It shows that the cmdlet requires the `-MemberId` and `-AdministrativeUnitId` parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Add-EntraAdministrativeUnitMember.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-EntraAdministrativeUnitMember\n -MemberId <String>\n -AdministrativeUnitId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Removing a Custom Role - Entra PowerShell\nDESCRIPTION: This snippet removes a custom role using the `Remove-EntraDirectoryRoleDefinition` cmdlet. It first retrieves the role definition by display name and then deletes it. This operation can only be performed on custom roles, not built-in roles. It requires the 'RoleManagement.ReadWrite.Directory' scope and the 'Privileged Role Administrator' role.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-roles.md#_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory'\nGet-EntraDirectoryRoleDefinition -Filter \"DisplayName eq 'Custom Application Read'\" | Remove-EntraDirectoryRoleDefinition\n```\n\n----------------------------------------\n\nTITLE: Get Group Lifecycle Policy by ID - PowerShell\nDESCRIPTION: This code snippet retrieves a specific Microsoft Group Lifecycle Policy by its ID. The `-GroupLifecyclePolicyId` parameter specifies the ID of the groupLifecyclePolicies object to retrieve from Microsoft Entra ID.\n\nDependencies: Microsoft.Entra module, Connect-Entra cmdlet.\n\nInput: Requires a valid GroupLifecyclePolicyId as input.\nOutput: Displays the properties of the specific group lifecycle policy matching the provided ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraGroupLifecyclePolicy.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraGroupLifecyclePolicy\n -GroupLifecyclePolicyId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove Service Principal Password Credential Syntax (PowerShell)\nDESCRIPTION: This snippet shows the syntax for the Remove-EntraServicePrincipalPasswordCredential cmdlet. It requires the ServicePrincipalId and KeyId parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraServicePrincipalPasswordCredential.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraServicePrincipalPasswordCredential\n -ServicePrincipalId <String>\n -KeyId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating Cloud Authentication Rollout Policy - Example 2 (PowerShell)\nDESCRIPTION: This example creates a cloud authentication roll-out policy for PassthroughAuthentication, specifying that it is not applied to the entire organization. It also requires the 'Directory.ReadWrite.All' scope. The policy is created with a specified display name and remains disabled.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaFeatureRolloutPolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\nNew-EntraBetaFeatureRolloutPolicy -Feature 'PassthroughAuthentication' -DisplayName 'FeatureRolloutPolicy' -IsEnabled $false -IsAppliedToOrganization $false\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Devices - Search String\nDESCRIPTION: This PowerShell snippet retrieves deleted devices based on a search string. It first connects to Entra using Connect-Entra, then uses Get-EntraDeletedDevice with the `-SearchString` parameter to filter the devices. Selected properties are displayed in a table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedDevice.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraDeletedDevice -SearchString 'Contoso Desktop' | Select-Object DeletedDateTime, Id, AccountEnabled, ApproximateLastSignInDateTime, DeviceId, DisplayName, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get All Deleted Groups with -All Parameter - PowerShell\nDESCRIPTION: This PowerShell snippet retrieves all recoverable deleted groups using the `-All` parameter. It connects to Entra ID and utilizes Get-EntraDeletedGroup with the `-All` parameter, selecting specific group properties and displaying them in a formatted table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedGroup.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Group.Read.All'\nGet-EntraDeletedGroup -All | Select-Object Id, DisplayName, MailNickname, GroupTypes, DeletedDateTime, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Add User-Defined Entra Environment Example\nDESCRIPTION: This example demonstrates how to add a user-defined Entra environment to the settings file using the Add-EntraEnvironment cmdlet. It defines the environment name, Graph endpoint, and Azure AD endpoint as variables and then uses these variables to add the environment.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Add-EntraEnvironment.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$name = 'Canary'\n$graphEndpoint = 'https://canary.graph.microsoft.com'\n$azureADEndpoint = 'https://login.microsoftonline.com'\nAdd-EntraEnvironment -Name $name -GraphEndpoint $graphEndpoint -AzureADEndpoint $azureADEndpoint\n```\n\nLANGUAGE: powershell\nCODE:\n```\nName       AzureADEndpoint                      GraphEndpoint                 Type          \n----       ---------------                      -------------                 ----          \nCanary     https://login.microsoftonline.com    https://microsoftgraph.com    User-defined  \n```\n\n----------------------------------------\n\nTITLE: List Enabled Devices - PowerShell\nDESCRIPTION: Connects to Entra ID and retrieves a list of enabled devices. Requires the Microsoft.Entra module and the 'Device.Read.All' scope. The `-Filter` parameter is used with the `accountEnabled` property to find enabled devices, and the `-All` parameter ensures all pages of results are retrieved.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDevice.md#_snippet_14\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraDevice -Filter \"accountEnabled eq true\" -All\n```\n\n----------------------------------------\n\nTITLE: Update Application Tags (Example 5)\nDESCRIPTION: This example demonstrates how to update the Tags property of an application in Microsoft Entra ID using Set-EntraBetaApplication. It shows connecting to Entra, retrieving the application, and setting the Tags.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplication.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraBetaApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\nSet-EntraBetaApplication -ApplicationId $application.Id -Tags 'mytag'\n```\n\n----------------------------------------\n\nTITLE: Update Support Telephones with TenantId (PowerShell)\nDESCRIPTION: This code snippet demonstrates how to update the support telephone numbers for a partner, including specifying the TenantId. It retrieves the TenantId from the Entra context and then sets the PartnerSupportTelephones using the Set-EntraPartnerInformation cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraPartnerInformation.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.ReadWrite.All'\n$tenantId = (Get-EntraContext).TenantId\nSet-EntraPartnerInformation -PartnerSupportTelephones '234234234' -TenantId $tenantId\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Tenant Contact Details in PowerShell\nDESCRIPTION: This PowerShell snippet sets multiple contact details for an Entra tenant, including marketing, security compliance emails and phones, and technical notification emails. It requires the 'Organization.ReadWrite.All' scope. Before running the `Set-EntraTenantDetail` cmdlet, it establishes a connection to Entra ID using `Connect-Entra` and creates a hash table containing the contact details to be updated.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraTenantDetail.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.ReadWrite.All'\n$params = @{\n    MarketingNotificationEmails = @('amy@contoso.com', 'henry@contoso.com')\n    SecurityComplianceNotificationMails = @('john@contoso.com', 'mary@contoso.com')\n    SecurityComplianceNotificationPhones = @('1-555-625-9999', '1-555-233-5544')\n    TechnicalNotificationMails = 'peter@contoso.com'\n}\n\nSet-EntraTenantDetail @params\n```\n\n----------------------------------------\n\nTITLE: Retrieving cloud authentication roll-out policy by ID - PowerShell\nDESCRIPTION: This example shows how to retrieve a specific cloud authentication roll-out policy by its ID. It first connects to Entra, then retrieves a policy using a filter, and finally uses the retrieved policy's ID to fetch the specific policy using `Get-EntraBetaFeatureRolloutPolicy`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaFeatureRolloutPolicy.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\n$policy = Get-EntraBetaFeatureRolloutPolicy -Filter \"DisplayName eq 'FeatureRolloutPolicy'\"\nGet-EntraBetaFeatureRolloutPolicy -Id $policy.Id\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition -SearchString - YAML\nDESCRIPTION: This YAML snippet defines the '-SearchString' parameter for a PowerShell cmdlet, specifying its type, the parameter set it belongs to, that it's not required, and that it accepts pipeline input by property name or value.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipal.md#_snippet_17\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: GetVague\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Delegated Permission Classifications By Id - PowerShell\nDESCRIPTION: Defines the syntax for retrieving a specific delegated permission classification from a service principal using its Id. It requires both the ServicePrincipalId and the Id of the permission classification. The Property parameter is optional.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalDelegatedPermissionClassification.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaServicePrincipalDelegatedPermissionClassification\n -ServicePrincipalId <String>\n -Id <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Update-EntraSignedInUserPassword Syntax (PowerShell)\nDESCRIPTION: The syntax for the `Update-EntraSignedInUserPassword` cmdlet in PowerShell. This cmdlet is used to update the password of the signed-in user in Microsoft Entra ID. It requires the current password and the new password as SecureString objects.\n\nParameters: -NewPassword (SecureString, required), -CurrentPassword (SecureString, required), [<CommonParameters>]\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Update-EntraSignedInUserPassword.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-EntraSignedInUserPassword\n -NewPassword <SecureString>\n -CurrentPassword <SecureString>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Domain Creation with Capabilities - PowerShell\nDESCRIPTION: This example demonstrates creating a new domain with specified service capabilities ('Email' and 'OfficeCommunicationsOnline') in Microsoft Entra ID. It uses the New-EntraBetaDomain cmdlet along with the -SupportedServices parameter to define the domain's capabilities. The 'Domain.ReadWrite.All' scope is required.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaDomain.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Domain.ReadWrite.All'\nNew-EntraBetaDomain -Name test22.com -SupportedServices @('Email', 'OfficeCommunicationsOnline')\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId          AuthenticationType AvailabilityStatus IsAdminManaged IsDefault IsInitial IsRoot IsVerified PasswordNotificationWindowInDays\n--          ------------------ ------------------ -------------- --------- --------- ------ ---------- --------------------------------\ntest22.com  Managed                               True           False     False     False  False      13\n```\n\n----------------------------------------\n\nTITLE: Get-EntraBetaApplicationProxyConnectorGroup Syntax - PowerShell\nDESCRIPTION: These are the different syntax sets available for the Get-EntraBetaApplicationProxyConnectorGroup cmdlet.  They define the different parameter combinations that can be used to query connector groups.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationProxyConnectorGroup.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaApplicationProxyConnectorGroup\n [-All]\n [-Top <Int32>]\n [-Filter <String>]\n [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaApplicationProxyConnectorGroup\n [-SearchString <String>]\n [-All]\n [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaApplicationProxyConnectorGroup\n -Id <String>\n [-All]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Retrieve Service Principal Password Credential - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve password credentials for a specific service principal in Microsoft Entra ID.  It first connects to Entra with required scopes, retrieves the service principal, and then uses its ID to get the password credentials. Requires the Microsoft.Entra.Beta module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalPasswordCredential.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraBetaServicePrincipalPasswordCredential -ServicePrincipalId $servicePrincipal.Id\n```\n\n----------------------------------------\n\nTITLE: Remove Object Settings Example - PowerShell\nDESCRIPTION: This example demonstrates how to remove object settings from Microsoft Entra ID using the Remove-EntraBetaObjectSetting cmdlet. It connects to Entra ID with required scopes and then removes settings for a specific target type and object ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaObjectSetting.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\n$params = @{\n    TargetType = 'Groups'\n    TargetObjectId = 'bbbbbbbb-1111-2222-3333-cccccccccccc'\n    Id = 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb'\n}\nRemove-EntraBetaObjectSetting @params\n```\n\n----------------------------------------\n\nTITLE: Update Country Named Location Policy - PowerShell\nDESCRIPTION: This command updates a country named location policy in Microsoft Entra ID by PolicyId. It connects to Entra, retrieves a specific named location policy by display name, and then uses Set-EntraNamedLocationPolicy to update the policy with the specified parameters, including PolicyId, OdataType, and IncludeUnknownCountriesAndRegions.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraNamedLocationPolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ConditionalAccess'\n$policy = Get-EntraNamedLocationPolicy | Where-Object { \"$_.DisplayName -eq 'IP named location policy'\" }\n$type = '#microsoft.graph.countryNamedLocation'\nSet-EntraNamedLocationPolicy -PolicyId $policy.Id -OdataType $type -IncludeUnknownCountriesAndRegions $true\n```\n\n----------------------------------------\n\nTITLE: Get All User Registered Devices\nDESCRIPTION: This example shows how to retrieve all devices registered to a specified user. It connects to Entra ID with the 'User.Read.All' scope and then uses the `Get-EntraBetaUserRegisteredDevice` cmdlet with the `-All` parameter to fetch all registered devices. The `Select-Object` is then used to display the `Id` and `AdditionalProperties`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserRegisteredDevice.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraBetaUserRegisteredDevice -UserId 'SawyerM@contoso.com' -All | Select-Object Id -ExpandProperty AdditionalProperties\n```\n\n----------------------------------------\n\nTITLE: Get Available License Plans\nDESCRIPTION: This PowerShell snippet retrieves available license plans, expanding the PrepaidUnits property to show details like Enabled, LockedOut, Suspended, and Warning counts. It requires 'User.ReadWrite.All', 'Organization.Read.All', and 'LicenseAssignment.Read.All' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaSubscribedSku.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All', 'Organization.Read.All', 'LicenseAssignment.Read.All'\nGet-EntraBetaSubscribedSku | Select-Object -Property Sku*, ConsumedUnits -ExpandProperty PrepaidUnits\n```\n\n----------------------------------------\n\nTITLE: Turn on directory synchronization - PowerShell\nDESCRIPTION: This example demonstrates how to turn on directory synchronization for a company using the Set-EntraBetaDirSyncEnabled cmdlet.  It first connects to Entra ID with the necessary scopes and then executes the cmdlet with the EnableDirsync parameter set to $true and the Force parameter to bypass confirmation.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaDirSyncEnabled.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'OnPremDirectorySynchronization.ReadWrite.All', 'Organization.ReadWrite.All'\nSet-EntraBetaDirSyncEnabled -EnableDirsync $true -Force $true\n```\n\n----------------------------------------\n\nTITLE: Get Contact Manager Example - PowerShell\nDESCRIPTION: Demonstrates how to retrieve the manager of a contact using Get-EntraBetaContactManager. It first retrieves the contact using Get-EntraBetaContact and then uses the contact's ID with Get-EntraBetaContactManager.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaContactManager.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'OrgContact.Read.All'\n$contact = Get-EntraBetaContact -Filter \"displayName eq 'Contoso Contact'\"\nGet-EntraBetaContactManager -OrgContactId $contact.Id\n```\n\n----------------------------------------\n\nTITLE: KeyCredentials Parameter Definition\nDESCRIPTION: This YAML snippet describes the `-KeyCredentials` parameter for the `New-EntraApplication` cmdlet. It defines that `KeyCredentials` is a list of `Microsoft.Open.MSGraph.Model.KeyCredential` objects, is not required, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplication.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.KeyCredential]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Creating a Password Credential for an Application (Basic)\nDESCRIPTION: This example demonstrates creating a new password credential for a specified application using the `New-EntraBetaApplicationPasswordCredential` cmdlet.  It first connects to Entra ID with specified scopes and retrieves the application. It requires the ApplicationId of the target application and displays the newly created password credential's properties. Note: '<displayName>' should be replaced with the actual display name.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplicationPasswordCredential.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraBetaApplication -Filter \"displayName eq '<displayName>'\"\nNew-EntraBetaApplicationPasswordCredential -ApplicationId $application.Id\n```\n\n----------------------------------------\n\nTITLE: Get-EntraBetaTrustFrameworkPolicy Syntax - GetQuery\nDESCRIPTION: This section shows the syntax for the `Get-EntraBetaTrustFrameworkPolicy` cmdlet using the `GetQuery` parameter set.  It allows specifying properties to be returned using the `-Property` parameter and supports common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaTrustFrameworkPolicy.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaTrustFrameworkPolicy\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Application Template List - Powershell\nDESCRIPTION: This PowerShell snippet retrieves a list of application template objects from the Microsoft Entra gallery. It connects to Entra with the necessary scopes and then uses the `Get-EntraBetaApplicationTemplate` cmdlet with `-Select` parameter to specify the properties to be returned.  This requires the Microsoft.Entra.Beta module to be installed and an active connection to Entra ID with appropriate permissions.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationTemplate.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraBetaApplicationTemplate -Select Id, DisplayName, Publisher, Categories\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Group with Get-EntraUserGroup (PowerShell)\nDESCRIPTION: This PowerShell command retrieves a user's group memberships using the Get-EntraUserGroup cmdlet from the Microsoft.Entra module. It depends on the Microsoft.Entra PowerShell module. It lists the groups a specific user is a member of.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_38\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraUserGroup\n```\n\n----------------------------------------\n\nTITLE: Get Service Principal Password Credential Syntax - PowerShell\nDESCRIPTION: This snippet shows the syntax of the `Get-EntraServicePrincipalPasswordCredential` cmdlet. It requires the `ServicePrincipalId` parameter, which is a string representing the object ID of the service principal. It also supports common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalPasswordCredential.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraServicePrincipalPasswordCredential\n -ServicePrincipalId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Set Application Proxy Connector Group - PowerShell\nDESCRIPTION: This snippet demonstrates how to set a new Connector Group for a specific application using the `Set-EntraBetaApplicationProxyApplicationConnectorGroup` cmdlet. It requires the `OnPremisesPublishingProfileId` (application ID) and `ConnectorGroupId` to be specified. Ensure you are connected to Entra ID with the appropriate scopes (`Directory.ReadWrite.All`).\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplicationProxyApplicationConnectorGroup.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\n$params = @{\n    OnPremisesPublishingProfileId = 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb' \n    ConnectorGroupId = 'bbbbbbbb-1111-2222-3333-cccccccccccc'\n}\nSet-EntraBetaApplicationProxyApplicationConnectorGroup @params\n```\n\n----------------------------------------\n\nTITLE: New-EntraDirectoryRoleAssignment Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the New-EntraDirectoryRoleAssignment cmdlet, including the required parameters PrincipalId and RoleDefinitionId, and the optional parameter DirectoryScopeId. This allows for creating a new Microsoft Entra ID role assignment.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraDirectoryRoleAssignment.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-EntraDirectoryRoleAssignment\n -PrincipalId <String>\n -RoleDefinitionId <String>\n [-DirectoryScopeId <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Update Custom Security Attribute Definition Predefined Value - PowerShell\nDESCRIPTION: This PowerShell snippet updates an existing custom security attribute definition's predefined value. It requires the 'CustomSecAttributeDefinition.ReadWrite.All' scope and the Attribute Definition Administrator role.  The example retrieves an attribute definition, then updates its predefined value ('Alpine') to be active.  It uses `Connect-Entra` to connect, `Get-EntraCustomSecurityAttributeDefinition` to fetch the definition, and `Set-EntraCustomSecurityAttributeDefinitionAllowedValue` to update the allowed value. Parameters are the CustomSecurityAttributeDefinitionId, the Id of the object to update and the IsActive status.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraCustomSecurityAttributeDefinitionAllowedValue.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'CustomSecAttributeDefinition.ReadWrite.All'\n$attributeDefinition = Get-EntraCustomSecurityAttributeDefinition | Where-Object { $_.Name -eq 'Engineering' }\nSet-EntraCustomSecurityAttributeDefinitionAllowedValue -CustomSecurityAttributeDefinitionId $attributeDefinition.Id -Id 'Alpine' -IsActive $true\n```\n\n----------------------------------------\n\nTITLE: Remove Feature Rollout Policy Example - PowerShell\nDESCRIPTION: This example demonstrates how to remove a cloud authentication roll-out policy in Microsoft Entra ID. It first connects to Entra with required scopes, then retrieves the policy using Get-EntraBetaFeatureRolloutPolicy, and finally removes the policy using Remove-EntraBetaFeatureRolloutPolicy with the policy's ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaFeatureRolloutPolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\n$policy = Get-EntraBetaFeatureRolloutPolicy -Filter \"DisplayName eq 'Feature-Rollout-Policy'\"\nRemove-EntraBetaFeatureRolloutPolicy -Id $policy.Id\n```\n\n----------------------------------------\n\nTITLE: Create Administrative Unit - PowerShell with Detailed Configuration\nDESCRIPTION: This example demonstrates creating an administrative unit with detailed configuration including DisplayName, Description, MembershipType, MembershipRule, MembershipRuleProcessingState, and Visibility using the `New-EntraAdministrativeUnit` cmdlet. It requires the `AdministrativeUnit.ReadWrite.All` scope. It shows the flexibility in configuring the administrative unit object.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraAdministrativeUnit.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.ReadWrite.All'\n$displayName = 'Seattle District Technical Schools'\n$description = 'Seattle district technical schools administration'\n$membershipRule = '(user.country -eq \"United States\")'\n\nNew-EntraAdministrativeUnit `\n    -DisplayName $displayName `\n    -Description $description `\n    -MembershipType 'Dynamic' `\n    -MembershipRule $membershipRule `\n    -MembershipRuleProcessingState 'On' `\n    -Visibility 'HiddenMembership'\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDeletedDateTime Id                                   Description                                       DisplayName                        Visibility\n--------------- --                                   -----------                                       -----------                        ----------\n                bbbbbbbb-1111-2222-3333-cccccccccccc Seattle district technical schools administration Seattle District Technical Schools HiddenMembership\n```\n\n----------------------------------------\n\nTITLE: Create Application Key Credential - Certificate - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to create a new application key credential using a certificate. It retrieves an application by its display name, imports a certificate from a file, converts the certificate data to Base64, defines parameters including ApplicationId, CustomKeyIdentifier, Type, Usage, Value, StartDate, and EndDate, and then uses the New-EntraBetaApplicationKeyCredential cmdlet to create the credential. It requires the 'Application.ReadWrite.All' and 'Application.ReadWrite.OwnedBy' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplicationKeyCredential.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraBetaApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\n$cer = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2 #create a new certificate object\n$cer.Import('C:\\Users\\ContosoUser\\appcert.cer') \n$bin = $cer.GetRawCertData()\n$base64Value = [System.Convert]::ToBase64String($bin)\n$bin = $cer.GetCertHash()\n$base64Thumbprint = [System.Convert]::ToBase64String($bin)\n$keyid = [System.Guid]::NewGuid().ToString() \n\n$params = @{\n    ApplicationId = $application.Id\n    CustomKeyIdentifier = $base64Thumbprint\n    Type = 'AsymmetricX509Cert'\n    Usage = 'Verify'\n    Value = $base64Value\n    StartDate = $cer.GetEffectiveDateString()\n    EndDate = $cer.GetExpirationDateString()\n}\nNew-EntraBetaApplicationKeyCredential @params\n```\n\n----------------------------------------\n\nTITLE: Get Top Resources Example - PowerShell\nDESCRIPTION: This example retrieves the top resources for the 'aadRoles' provider. It connects to Entra ID, and then uses the Get-EntraBetaPrivilegedResource cmdlet with the ProviderId parameter and the -Top parameter set to 1.  It demonstrates how to limit the number of returned resources. It requires an active Entra ID connection and a ProviderId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPrivilegedResource.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'PrivilegedAccess.ReadWrite.AzureAD', 'PrivilegedAccess.Read.AzureResources' 'PrivilegedAccess.Read.AzureADGroup'\n$params = @{\n    ProviderId = 'aadRoles'\n}\nGet-EntraBetaPrivilegedResource @params -Top 1\n```\n\n----------------------------------------\n\nTITLE: Defining ShowInAddressList Property in YAML\nDESCRIPTION: Defines the ShowInAddressList property which determines whether to show this user in the address list. It specifies the data type, parameter set, aliases, required status, position, default value, and pipeline input/wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUser.md#_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Boolean\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Update Application Tags - PowerShell\nDESCRIPTION: This snippet demonstrates how to update the Tags property of an application using the Set-EntraApplication cmdlet.  It retrieves the application object using Get-EntraApplication and then adds a tag. Requires the 'Application.ReadWrite.All' and 'Application.ReadWrite.OwnedBy' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraApplication.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\nSet-EntraApplication -ApplicationId $application.Id -Tags 'mytag'\n```\n\n----------------------------------------\n\nTITLE: Update Application Proxy Parameters - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to update the ExternalUrl, InternalUrl, ExternalAuthenticationType, and IsTranslateHostHeaderEnabled parameters of an application proxy configuration using the Set-EntraBetaApplicationProxyApplication command.  It requires the 'Directory.ReadWrite.All' scope and utilizes a hashtable to pass the parameters. The ApplicationId is a mandatory parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplicationProxyApplication.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\n$params = @{\n    ApplicationId                = 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb'\n    ExternalUrl                  = 'https://finance-awcycles.msappproxy.net/' \n    InternalUrl                  = 'http://finance/'\n    ExternalAuthenticationType   = 'AadPreAuthentication' \n    IsTranslateHostHeaderEnabled = $false\n}\nSet-EntraBetaApplicationProxyApplication @params\n```\n\n----------------------------------------\n\nTITLE: List User's Administrative Units - Entra ID - PowerShell\nDESCRIPTION: This example demonstrates how to list the administrative units a user belongs to in Microsoft Entra ID.  It connects to Entra ID using the User.Read.All scope, then uses the Get-EntraBetaUserMembership cmdlet. The resulting memberships are filtered to include only administrative units, after which specific properties are selected and formatted for clear presentation.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserMembership.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraBetaUserMembership -UserId 'SawyerM@contoso.com' |\nWhere-Object { $_.'@odata.type' -eq '#microsoft.graph.administrativeUnit' } |\nSelect-Object Id, displayName, Description, MembershipRule, MembershipType, Visibility |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get Application Templates with All Parameter - Powershell\nDESCRIPTION: This PowerShell script retrieves all application templates from the Microsoft Entra gallery, using the `-All` parameter.  It connects to Entra using `Connect-Entra` and retrieves application templates using the `Get-EntraBetaApplicationTemplate` cmdlet, specifying the `Id`, `DisplayName`, `Publisher`, and `Categories` properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationTemplate.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraBetaApplicationTemplate -Select Id, DisplayName, Publisher, Categories -All\n```\n\n----------------------------------------\n\nTITLE: Retrieve specific contact object PowerShell\nDESCRIPTION: This example retrieves a specific contact object in the directory.  It first retrieves the contact using a filter on display name, then uses the retrieved object's ID to fetch the specific contact again using `Get-EntraBetaContact` with the `-OrgContactId` parameter. It connects to Entra ID using `Connect-Entra` with the 'OrgContact.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaContact.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'OrgContact.Read.All'\n$contact = Get-EntraBetaContact -Filter \"displayName eq 'Contoso Contact'\"\nGet-EntraBetaContact -OrgContactId $contact.Id\n```\n\n----------------------------------------\n\nTITLE: Output of Adding Custom Security Attribute Definition Allowed Value - PowerShell\nDESCRIPTION: This is the expected output after successfully adding a custom security attribute definition allowed value. It displays the `Id` and `IsActive` properties of the newly added value.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Add-EntraCustomSecurityAttributeDefinitionAllowedValue.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nId   IsActive\n--   --------\nAlpine True\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Administrative Units with -SearchString\nDESCRIPTION: This PowerShell snippet retrieves deleted administrative units that match the specified search string. The `-SearchString` parameter filters results based on the display name. Requires 'AdministrativeUnit.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedAdministrativeUnit.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.Read.All'\nGet-EntraDeletedAdministrativeUnit -SearchString 'Americas Administrative Unit' | Select-Object Id, DisplayName, MembershipType, Visibility, DeletedDateTime, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get Permission Grant Condition Set by ID - PowerShell\nDESCRIPTION: This PowerShell code retrieves a specific permission grant condition set using its ID. It starts by connecting to Entra ID, retrieving the permission grant policy, and then fetching the includes condition sets. It then filters for a specific permission type, and finally uses Get-EntraPermissionGrantConditionSet again with the PolicyId, ConditionSetType ('includes'), and the specific Id of the condition set. This allows retrieval of a particular condition set.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraPermissionGrantConditionSet.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.PermissionGrant'\n$permissionGrantPolicy = Get-EntraPermissionGrantPolicy | Where-Object { $_.Id -eq 'my-custom-consent-policy' }\n$conditionSet = Get-EntraPermissionGrantConditionSet -PolicyId $permissionGrantPolicy.Id -ConditionSetType 'includes' | Where-Object { $_.PermissionType -eq 'delegated' }\nGet-EntraPermissionGrantConditionSet -PolicyId $permissionGrantPolicy.Id -ConditionSetType 'includes' -Id $conditionSet.Id\n```\n\n----------------------------------------\n\nTITLE: Get Five App Role Assignments - PowerShell\nDESCRIPTION: This example retrieves a limited number (five in this case) of app role assignments for a service principal. It starts by connecting to Entra, fetches the service principal, and uses the `-Top` parameter with Get-EntraBetaServicePrincipalAppRoleAssignedTo to specify the maximum number of assignments to retrieve.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalAppRoleAssignedTo.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraBetaServicePrincipalAppRoleAssignedTo -ServicePrincipalId $servicePrincipal.Id -Top 5\n```\n\n----------------------------------------\n\nTITLE: Remove-EntraBetaOAuth2PermissionGrant Syntax - PowerShell\nDESCRIPTION: This snippet shows the syntax for using the Remove-EntraBetaOAuth2PermissionGrant cmdlet. It requires the OAuth2PermissionGrantId as a string input. The cmdlet also supports common parameters like -Debug, -ErrorAction, and -Verbose for controlling the execution and output of the command.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaOAuth2PermissionGrant.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraBetaOAuth2PermissionGrant\n -OAuth2PermissionGrantId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating a Private Access App with Specific Connector Group - PowerShell\nDESCRIPTION: This example shows how to create a new Private Access application named 'Contoso GSA Application' and assign it to a specific connector group. It uses the Get-EntraBetaApplicationProxyConnectorGroup cmdlet to retrieve the connector group by its name using a filter. The ConnectorGroupId parameter of the New-EntraBetaPrivateAccessApplication cmdlet is then used to assign the application to the retrieved connector group. Requires 'NetworkAccessPolicy.ReadWrite.All', 'Application.ReadWrite.All', and 'NetworkAccess.ReadWrite.All' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaPrivateAccessApplication.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'NetworkAccessPolicy.ReadWrite.All', 'Application.ReadWrite.All', 'NetworkAccess.ReadWrite.All'\n$connectorGroup = Get-EntraBetaApplicationProxyConnectorGroup -Filter \"Name eq 'Contoso GSA Group'\"\nNew-EntraBetaPrivateAccessApplication -ApplicationName 'Contoso GSA Application' -ConnectorGroupId $connectorGroup.Id\n```\n\n----------------------------------------\n\nTITLE: Remove-EntraIdentityProvider Syntax - PowerShell\nDESCRIPTION: This snippet shows the syntax for the Remove-EntraIdentityProvider cmdlet. It takes IdentityProviderBaseId as a required parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraIdentityProvider.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraIdentityProvider\n -IdentityProviderBaseId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: AppRoleAssignmentId Parameter Definition (YAML)\nDESCRIPTION: This YAML snippet defines the AppRoleAssignmentId parameter for the Remove-EntraBetaGroupAppRoleAssignment cmdlet.  It specifies that it is a string, required, accepts pipeline input, and does not accept wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaGroupAppRoleAssignment.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get User App Role Assignment - PowerShell\nDESCRIPTION: This example retrieves a user application role assignment for a specific user. It first connects to Entra ID with the required scopes and then uses Get-EntraUserAppRoleAssignment with the -UserId parameter to specify the target user's object ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserAppRoleAssignment.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AppRoleAssignment.ReadWrite.All', 'Directory.Read.All'\nGet-EntraUserAppRoleAssignment -UserId 'SawyerM@contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Remove Group from Rollout Policy - PowerShell\nDESCRIPTION: This example demonstrates how to remove a group from the cloud authentication roll-out policy in Microsoft Entra ID. It first connects to Entra using Connect-Entra, then retrieves the desired policy and group using Get-EntraFeatureRolloutPolicy and Get-EntraGroup. Finally, it uses Remove-EntraBetaFeatureRolloutPolicyDirectoryObject to remove the group from the specified policy.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaFeatureRolloutPolicyDirectoryObject.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\n$policy = Get-EntraFeatureRolloutPolicy -Filter \"displayName eq 'MFA Rollout Policy'\"\n$group = Get-EntraGroup -Filter \"displayName eq 'Sales and Marketing'\"\nRemove-EntraBetaFeatureRolloutPolicyDirectoryObject -FeatureRolloutPolicyId $policy.Id  -DirectoryObjectId $group.Id\n```\n\n----------------------------------------\n\nTITLE: Add Device to Administrative Unit (PowerShell)\nDESCRIPTION: This example demonstrates how to add a device as a member of an administrative unit. It uses Connect-Entra to connect, Get-EntraBetaAdministrativeUnit to find the administrative unit by display name, Get-EntraBetaDevice to find the device by search string, and then Add-EntraBetaAdministrativeUnitMember to add the device to the administrative unit.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaAdministrativeUnitMember.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.ReadWrite.All'\n$administrativeUnit = Get-EntraBetaAdministrativeUnit -Filter \"DisplayName eq '<administrativeunit-display-name>'\"\n$device = Get-EntraBetaDevice -SearchString 'ContosoDesktop01'\nAdd-EntraBetaAdministrativeUnitMember -AdministrativeUnitId $administrativeUnit.Id -MemberId $device.Id\n```\n\n----------------------------------------\n\nTITLE: Get All Devices - PowerShell\nDESCRIPTION: Connects to Entra ID and retrieves all devices. Requires the Microsoft.Entra module and the 'Device.Read.All' scope. It demonstrates how to retrieve all device objects without filtering, potentially resulting in a large output.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDevice.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraDevice\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDeletedDateTime Id                                   AccountEnabled ApproximateLastSignInDateTime ComplianceExpirationDateTime DeviceCategory DeviceId                             DeviceMetadata DeviceOwnership\n--------------- --                                   -------------- ----------------------------- ---------------------------- -------------- --------                             -------------- ---------------\n                bbbbbbbb-1111-2222-3333-cccccccccccc True                                                                                     eeeeeeee-4444-5555-6666-ffffffffffff MetaData\n                cccccccc-2222-3333-4444-dddddddddddd True                                                                                     eeeeeeee-4444-5555-6666-ffffffffffff MetaData\n```\n\n----------------------------------------\n\nTITLE: OptionalClaims Parameter Definition\nDESCRIPTION: This YAML snippet describes the `-OptionalClaims` parameter for the `New-EntraApplication` cmdlet. It defines that `OptionalClaims` is of type `OptionalClaims`, is not required, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplication.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nType: OptionalClaims\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get All Administrative Unit Members by ID - PowerShell\nDESCRIPTION: This example retrieves all members of an administrative unit given its ID. It connects to Entra ID with the necessary scopes, retrieves the administrative unit, and then uses the -All parameter to get all members. The Select-Object cmdlet filters the output to show the desired properties. Requires 'AdministrativeUnit.ReadWrite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAdministrativeUnitMember.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.ReadWrite.All'\n$administrativeUnit = Get-EntraAdministrativeUnit -Filter \"DisplayName eq '<administrativeunit-display-name>'\"\nGet-EntraAdministrativeUnitMember -AdministrativeUnitId $administrativeUnit.Id -All |\nSelect-Object Id, DisplayName, '@odata.type', createdDateTime\n```\n\n----------------------------------------\n\nTITLE: Assign Single Group Sponsor - PowerShell\nDESCRIPTION: This example demonstrates how to assign a single group as a sponsor to a target user account using the Set-EntraBetaUserSponsor cmdlet. It connects to Entra using Connect-Entra with 'User.ReadWrite.All' and 'GroupMember.Read.All' scopes. Then, it retrieves the sponsor group using Get-EntraBetaGroup. Finally, it sets the sponsor using Set-EntraBetaUserSponsor, specifying the target user's ID, sponsor type as Group, and the sponsor's ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUserSponsor.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All', 'GroupMember.Read.All'\n$group = Get-EntraBetaGroup -SearchString 'Sales and Marketing'\nSet-EntraBetaUserSponsor -UserId 'JohnstoneH@fabrikam.com' -Type Group -SponsorIds $group.Id\n```\n\n----------------------------------------\n\nTITLE: Assign Multiple Group Sponsors - PowerShell\nDESCRIPTION: Assigns multiple groups as sponsors to a target user account using the Set-EntraUserSponsor cmdlet. It connects to Entra ID with User.ReadWrite.All scope and uses an array of group IDs as SponsorIds. It requires the Microsoft.Entra.Beta module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUserSponsor.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nSet-EntraUserSponsor -UserId 'JohnstoneH@fabrikam.com' -Type Group -SponsorIds @(\"db0c6f50-93ee-4b22-9bb9-c8454875d990\",\"c9db38b9-e5v8-4b5e-ae78-9812230af58d\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Top Registered Users for a Device - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve the top two registered users for a device using the `Get-EntraBetaDeviceRegisteredUser` cmdlet with the `-Top` parameter.  It connects to Entra ID, retrieves the device, and then retrieves the top 2 registered users.  The output is formatted as a table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeviceRegisteredUser.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\n$device = Get-EntraBetaDevice -SearchString '<device-display-name>'\nGet-EntraBetaDeviceRegisteredUser -DeviceId $device.ObjectId -Top 2 |\nSelect-Object Id, displayName, UserPrincipalName, createdDateTime, userType, accountEnabled |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Administrative Unit with Get-EntraUserAdministrativeUnit (PowerShell)\nDESCRIPTION: This PowerShell command retrieves a user's administrative unit using the Get-EntraUserAdministrativeUnit cmdlet from the Microsoft.Entra module. It depends on the Microsoft.Entra PowerShell module. It allows identifying the administrative unit a user belongs to.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_36\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraUserAdministrativeUnit\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Administrative Units with -Filter\nDESCRIPTION: This PowerShell snippet retrieves deleted administrative units based on a filter expression. The `-Filter` parameter uses OData filter syntax to specify criteria. Requires 'AdministrativeUnit.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedAdministrativeUnit.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.Read.All'\nGet-EntraDeletedAdministrativeUnit -Filter \"DisplayName eq 'Americas Administrative Unit'\" | Select-Object Id, DisplayName, MembershipType, Visibility, DeletedDateTime, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: New-EntraPermissionGrantConditionSet Syntax\nDESCRIPTION: This snippet shows the syntax for the New-EntraPermissionGrantConditionSet cmdlet, including parameters like PolicyId, ConditionSetType, Permissions, and others. It is used to define the structure and available options when creating a new permission grant condition set.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraPermissionGrantConditionSet.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-EntraPermissionGrantConditionSet\n -PolicyId <String>\n -ConditionSetType <String>\n [-Permissions <System.Collections.Generic.List`1[System.String]>]\n [-ClientApplicationTenantIds <System.Collections.Generic.List`1[System.String]>]n [-ClientApplicationIds <System.Collections.Generic.List`1[System.String]>]n [-ResourceApplication <String>]\n [-PermissionType <String>]\n [-PermissionClassification <String>]\n [-ClientApplicationsFromVerifiedPublisherOnly <Boolean>]\n [-ClientApplicationPublisherIds <System.Collections.Generic.List`1[System.String]>]n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Retrieve user's registered authentication methods properties\nDESCRIPTION: This example shows how to retrieve specific properties of user registration details. It connects using `Connect-Entra` and then uses `Get-EntraBetaAuthenticationMethodUserRegistrationDetailReport` with the `-Property` parameter to select the properties to retrieve.  The output is then formatted as a table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAuthenticationMethodUserRegistrationDetailReport.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All'\nGet-EntraBetaAuthenticationMethodUserRegistrationDetailReport -Property id, userDisplayName, userType, isMfaRegistered, isPasswordlessCapable | Format-Table -AutoSize\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                   UserDisplayName   UserType IsMfaRegistered IsPasswordlessCapable\n--                                   ---------------   -------- ---------------- ---------------------\ncccccccc-2222-3333-4444-dddddddddddd Angel Brown       member   True             False\ndddddddd-3333-4444-5555-eeeeeeeeeeee Alex Wilber       member   False            False\neeeeeeee-4444-5555-6666-ffffffffffff Avery Smith       member   False            False\nbbbbbbbb-1111-2222-3333-cccccccccccc Christie Cline    member   False            False\naaaaaaaa-bbbb-cccc-1111-222222222222 Patti Fernandez   member   False            False\n```\n\n----------------------------------------\n\nTITLE: Get Top N Direct Reports of a Contact - PowerShell\nDESCRIPTION: This example retrieves a specified number of direct reports using the -Top parameter of the Get-EntraContactDirectReport cmdlet. The example connects to Entra ID, finds a contact, and then retrieves the top 2 direct reports. You can also use the alias `-Limit` for the `-Top` parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraContactDirectReport.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'OrgContact.Read.All'\n$contact = Get-EntraContact -Filter \"displayName eq 'Contoso Contact'\"\nGet-EntraContactDirectReport -OrgContactId $contact.Id -Top 2\n```\n\n----------------------------------------\n\nTITLE: Remove Policy Example - PowerShell\nDESCRIPTION: Demonstrates how to remove a specific policy from Microsoft Entra ID using the Remove-EntraBetaPolicy cmdlet.  It first connects to Entra ID with the necessary scopes, retrieves a policy by display name, and then removes it using its ID. The example requires the 'Policy.Read.ApplicationConfiguration' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaPolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.ApplicationConfiguration'\n$policy = Get-EntraBetaPolicy | Where-Object {$_.DisplayName -eq 'Microsoft User Default Recommended Policy'}\nRemove-EntraBetaPolicy -Id $policy.Id\n```\n\n----------------------------------------\n\nTITLE: Get All Policies Example\nDESCRIPTION: This example retrieves all policies in Microsoft Entra ID.  It first connects to Entra ID using Connect-Entra and specifies the required scopes.  Then, it calls Get-EntraBetaPolicy without any parameters to retrieve all policies.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPolicy.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.All'\nGet-EntraBetaPolicy\n```\n\nLANGUAGE: powershell\nCODE:\n```\nDefinition                                                                                       DeletedDateTime Description DisplayName                                 Id\n----------                                                                                       --------------- ----------- -----------                                 --\n{{\"activityBasedTimeoutPolicies\":{\"AlternateLoginIDLookup\":true, \"IncludedUserIds\":[\"UserID\"]}}}                             Activepolicy                            bbbbbbbb-1111-2222-3333-cccccccccccc\n{{\"HomeRealmDiscoveryPolicy\":{\"AlternateLoginIDLookup\":true, \"IncludedUserIds\":[\"UserID\"]}}}                                 PolicyDemo                              aaaaaaaa-1111-1111-1111-000000000000\n```\n\n----------------------------------------\n\nTITLE: Example Output of Assignment\nDESCRIPTION: Shows the expected output after successfully assigning a group to an application role using the `New-EntraGroupAppRoleAssignment` cmdlet. The output includes details like DeletedDateTime, Id, AppRoleId, CreatedDateTime, PrincipalDisplayName, and PrincipalId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraGroupAppRoleAssignment.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nDeletedDateTime        Id                                          AppRoleId                            CreatedDateTime      PrincipalDisplayName PrincipalId\n---------------        --                                          ---------                            ---------------      -------------------- -----------\n                      AaBbCcDdEeFfGgHhIiJjKkLlMmNnOo1 00000000-0000-0000-0000-000000000000 3/13/2024 4:41:43 AM Contoso Team         aaaaaaaa-bbbb-cccc-1111-222222222222\n3/13/2024 4:45:00 AM  BbCcDdEeFfGgHhIiJjKkLlMmNnOoPp2 00000000-0000-0000-0000-000000000000 3/13/2024 4:45:00 AM Finance Group        bbbbbbbb-cccc-dddd-2222-333333333333\n```\n\n----------------------------------------\n\nTITLE: Get Application Template List - Select Properties PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a list of application template objects, selecting specific properties such as Id, DisplayName, Publisher, and Categories.  It requires the 'Application.Read.All' scope to be granted. The output displays the selected properties for each application template found.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplicationTemplate.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraApplicationTemplate -Select Id, DisplayName, Publisher, Categories\n```\n\n----------------------------------------\n\nTITLE: Retrieve specific contact object in the directory - PowerShell\nDESCRIPTION: This example retrieves a specific contact object from the Microsoft Entra directory by filtering on the 'displayName'. It first connects to Entra ID with the 'OrgContact.Read.All' scope.  It then filters for a contact with a specific display name and retrieves the contact's ID using `$contact.Id` which is then used to fetch the contact.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraContact.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'OrgContact.Read.All'\n$contact = Get-EntraContact -Filter \"displayName eq 'Contoso Contact'\"\nGet-EntraContact -OrgContactId $contact.Id\n```\n\n----------------------------------------\n\nTITLE: Add User to Entra Group with PowerShell\nDESCRIPTION: This PowerShell code adds a user to a Microsoft Entra group. It first retrieves the group and user objects using their respective display name and User ID. It then uses the Add-EntraGroupMember cmdlet to add the user as a member of the group, using the GroupId and MemberId parameters. It depends on the Microsoft Entra PowerShell module and requires the user to have appropriate permissions to modify group membership.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-groups.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n$group = Get-EntraGroup -Filter \"displayName eq 'Contoso marketing'\"\n$user = Get-EntraUser -UserId 'SawyerM@contoso.com'\nAdd-EntraGroupMember -GroupId $group.Id -MemberId $user.Id\n```\n\n----------------------------------------\n\nTITLE: Get User's Registered Authentication Methods by ID - PowerShell\nDESCRIPTION: This example retrieves a specific user's registered authentication methods using the `Get-EntraAuthenticationMethodUserRegistrationDetailReport` cmdlet with the `-UserRegistrationDetailsId` parameter. It connects to Entra ID with the necessary scopes and formats the output as a table for readability. It depends on the Microsoft.Entra module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAuthenticationMethodUserRegistrationDetailReport.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All'\nGet-EntraAuthenticationMethodUserRegistrationDetailReport -UserRegistrationDetailsId 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb' | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Service Principals with -All Parameter - PowerShell\nDESCRIPTION: This PowerShell script retrieves all deleted service principals using the `-All` parameter.  It connects to Entra ID with required scopes.  The output displays key properties like Id, DisplayName, AppId, DeletedDateTime, DeletionAgeInDays and ServicePrincipalType.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedServicePrincipal.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraDeletedServicePrincipal -All | Select-Object Id, DisplayName, AppId, DeletedDateTime, DeletionAgeInDays, ServicePrincipalType | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - SearchString - YAML\nDESCRIPTION: Defines the '-SearchString' parameter, which is a string used to search for deleted applications. This parameter is part of the GetVague parameter set.  It's an optional parameter that accepts pipeline input by property name or value, but does not accept wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedApplication.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: GetVague\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition -Top\nDESCRIPTION: This YAML snippet defines the `-Top` parameter, which specifies the maximum number of records to return. It is an optional parameter, accepts pipeline input by property name or value, and does not accept wildcard characters. `-Limit` is defined as an alias.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeviceRegisteredUser.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Int32\nParameter Sets: (All)\nAliases: Limit\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Update Application GroupMembershipClaims (Example 3)\nDESCRIPTION: This example demonstrates how to update an application's GroupMembershipClaims property.  It connects to Entra, retrieves the application, and then uses Set-EntraBetaApplication with the -GroupMembershipClaims parameter to update the claim.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplication.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraBetaApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\nSet-EntraBetaApplication -ApplicationId $application.Id -GroupMembershipClaims 'SecurityGroup'\n```\n\n----------------------------------------\n\nTITLE: Retrieving a specific sponsor by ID using Get-EntraBetaUserSponsor in PowerShell\nDESCRIPTION: This example shows how to retrieve a specific sponsor for a user using the Get-EntraBetaUserSponsor cmdlet and the `-SponsorId` parameter. It connects to Entra ID with the 'User.Read' scope, retrieves the sponsor with ID 'cccccccc-2222-3333-4444-dddddddddddd' for the user 'SawyerM@contoso.com', and then selects and formats specific properties for display.  The Microsoft.Entra.Beta module is required and the user needs adequate permissions.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserSponsor.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read' # User.Read.All is an application-only permission, which does not require a user to be signed in interactively\nGet-EntraBetaUserSponsor -UserId 'SawyerM@contoso.com' -SponsorId 'cccccccc-2222-3333-4444-dddddddddddd' |\nSelect-Object Id, DisplayName, '@odata.type', CreatedDateTime | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Rename Connector Group - PowerShell\nDESCRIPTION: This example demonstrates how to rename a Connector Group to \"Offsite Application Servers\". It first connects to Entra ID using the `Connect-Entra` cmdlet with the 'Directory.ReadWrite.All' scope, then uses `Set-EntraBetaApplicationProxyConnectorGroup` to update the name. The `-Id` parameter specifies the connector group ID, and the `-Name` parameter specifies the new name.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplicationProxyConnectorGroup.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\nSet-EntraBetaApplicationProxyConnectorGroup -Id 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb' -Name 'Offsite Application Servers'\n```\n\n----------------------------------------\n\nTITLE: Create Group with MembershipRuleProcessingState - New-EntraBetaGroup PowerShell\nDESCRIPTION: This snippet demonstrates how to create a new Microsoft Entra ID group with a specified MembershipRuleProcessingState (On) using the New-EntraBetaGroup cmdlet. It requires the 'Group.ReadWrite.All' (Delegated Permission) and 'Group.Create' (Application permission) scopes and specifies parameters such as DisplayName, MailEnabled, MailNickname, SecurityEnabled and MembershipRuleProcessingState. The output shows the created group's properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaGroup.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All' #Delegated Permission\nConnect-Entra -Scopes 'Group.Create' #Application permission\n$params = @{\n    DisplayName = 'HelpDesk admin group2'\n    MailEnabled = $False\n    MailNickname = 'helpDeskAdminGroup'\n    SecurityEnabled = $True\n    MembershipRuleProcessingState = 'On'\n}\n\nNew-EntraBetaGroup @params\n```\n\nLANGUAGE: powershell\nCODE:\n```\nDisplayName           Id                                   MailNickname       Description GroupTypes\n-----------           --                                   ------------       ----------- ----------\nHelpDesk admin group2 xxxxxxxx-8888-5555-9999-bbbbbbbbbbbb helpDeskAdminGroup             {}\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Directory Object Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Get-EntraBetaDeletedDirectoryObject cmdlet.  It shows the required and optional parameters for retrieving a soft-deleted directory object. It requires the DirectoryObjectId and optionally accepts the Property parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedDirectoryObject.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaDeletedDirectoryObject\n -DirectoryObjectId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Test Entra Script with Directory Scan PowerShell\nDESCRIPTION: This example shows how to use Get-ChildItem to recursively find all .ps1 files in a directory and then use Test-EntraScript to check their compatibility with Microsoft Entra PowerShell. The output lists each issue found with line and code references.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Test-EntraScript.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-ChildItem -Path \\\\contoso.com\\it\\code -Recurse -Filter *.ps1 | Test-EntraScript\n```\n\n----------------------------------------\n\nTITLE: Checking for DirSync Provisioning Errors - No TenantId - PowerShell\nDESCRIPTION: This example demonstrates how to check for DirSync provisioning errors in Microsoft Entra ID without specifying a TenantId. It first connects to Entra ID and then uses the Get-EntraHasObjectsWithDirSyncProvisioningError cmdlet. The cmdlet returns a boolean value indicating whether errors exist. Requires the Microsoft.Entra module and appropriate scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraHasObjectsWithDirSyncProvisioningError.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All', 'Directory.Read.All', 'Group.Read.All', 'Contacts.Read'\n\nGet-EntraHasObjectsWithDirSyncProvisioningError \n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nFalse\n```\n\n----------------------------------------\n\nTITLE: Defining Tags Parameter\nDESCRIPTION: Specifies custom strings used to categorize and identify the application. It accepts a list of strings as input. The default value is None and it is not a required parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplication.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[System.String]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Top N Deleted Applications\nDESCRIPTION: Retrieves the top N deleted applications using the `-Top` parameter. Requires the 'Application.Read.All' scope. The retrieved properties are selected and formatted into a table for clear display. The `-Top` parameter limits the number of results returned.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedApplication.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraBetaDeletedApplication -Top 2 | Select-Object Id, DisplayName, AppId, DeletedDateTime, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get deleted user by UserId\nDESCRIPTION: This PowerShell snippet retrieves a specific deleted user by their UserId. The `-UserId` parameter is used to identify the user. It connects to Entra ID and retrieves the user information, displaying selected properties in a table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedUser.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraBetaDeletedUser -UserId 'dddddddd-3333-4444-5555-eeeeeeeeeeee' | Select-Object Id, UserPrincipalName, DisplayName, AccountEnabled, DeletedDateTime, DeletionAgeInDays, UserType | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Find Entra Permissions with Search String - PowerShell\nDESCRIPTION: This snippet shows the syntax for using `Find-EntraPermission` with a search string to filter permissions based on a specified string. The `SearchString` parameter is required, and the cmdlet can also be used with the `ExactMatch` parameter to find permissions with exact matches. Other parameters like `PermissionType` and `Online` can be used.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Find-EntraPermission.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nFind-EntraPermission\n [-SearchString] <String>\n [-ExactMatch]\n [-PermissionType <String>]\n [-Online]\n [-ProgressAction <ActionPreference>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Description Parameter - YAML\nDESCRIPTION: This YAML snippet documents the `-Description` parameter for the `Set-EntraAttributeSet` cmdlet. It specifies the parameter type as `System.String`, indicates that it's optional, and describes its purpose: to provide a description for the attribute set, up to 128 Unicode characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraAttributeSet.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Assign Single User Sponsor - PowerShell\nDESCRIPTION: This example demonstrates assigning a single user as a sponsor to a target user account using the Set-EntraBetaUserSponsor cmdlet. It first connects to Entra using Connect-Entra with 'User.ReadWrite.All' scope. Then, it retrieves the sponsor user using Get-EntraBetaUser. Finally, it sets the sponsor using Set-EntraBetaUserSponsor, specifying the target user's ID, sponsor type as User, and the sponsor's ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUserSponsor.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\n$sponsor = Get-EntraBetaUser -UserId 'SponsorEmail@contoso.com'\nSet-EntraBetaUserSponsor -UserId 'JohnstoneH@fabrikam.com' -Type User -SponsorIds $sponsor.Id\n```\n\n----------------------------------------\n\nTITLE: Remove Application Key Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Remove-EntraApplicationKey cmdlet.  It shows the required and optional parameters, including ApplicationId, Proof, and KeyId.  It also includes the common parameters available for PowerShell cmdlets.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraApplicationKey.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraApplicationKey\n -ApplicationId <String>\n [-Proof <String>]\n [-KeyId <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Connect to Entra ID using a Certificate - PowerShell\nDESCRIPTION: This example demonstrates how to connect to Microsoft Entra ID using a certificate object. The script first retrieves the certificate using Get-ChildItem and then uses the Connect-Entra cmdlet with the ClientId, TenantId, and Certificate parameters. Replace 'YOUR_APP_ID', 'YOUR_TENANT_ID' and `$CertThumbprint` with your application's, tenant's and certificate thumbprint respectively. Requires the Microsoft Entra PowerShell module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/app-only-access-auth.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n$cert = Get-ChildItem Cert:\\CurrentUser\\My\\$CertThumbprint\nConnect-Entra -ClientId 'YOUR_APP_ID' -TenantId 'YOUR_TENANT_ID' -Certificate $cert\n```\n\n----------------------------------------\n\nTITLE: Get Specific Directory Setting Template by ID in Entra ID with PowerShell\nDESCRIPTION: This PowerShell script retrieves a specific directory setting template from Microsoft Entra ID using the `Get-EntraBetaDirectorySettingTemplate` cmdlet and the `-Id` parameter.  It also requires the 'Directory.ReadWrite.All' scope. The `-Id` parameter specifies the ID of the desired settings template.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirectorySettingTemplate.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\nGet-EntraBetaDirectorySettingTemplate -Id 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb'\n```\n\n----------------------------------------\n\nTITLE: Update Policy Organization Default - PowerShell\nDESCRIPTION: This example updates the organization default status of a specified policy in Microsoft Entra ID. It connects to Entra ID, retrieves the policy, and then updates the IsOrganizationDefault property using Set-EntraBetaPolicy. Setting this to $false deactivates the policy as the organization default. It requires the Policy.ReadWrite.ApplicationConfiguration scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaPolicy.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ApplicationConfiguration'\n$policy = Get-EntraBetaPolicy | Where-Object { $_.DisplayName -eq 'Microsoft User Default Recommended Policy' }\nSet-EntraBetaPolicy -Id $policy.Id -IsOrganizationDefault $false\n```\n\n----------------------------------------\n\nTITLE: Retrieve subscription SKU\nDESCRIPTION: This example demonstrates how to retrieve specific properties (skuPartNumber and Status) of subscriptions. It uses Connect-Entra to connect with the necessary scope, then uses Get-EntraSubscription with the -Property parameter to specify the desired properties. The Select-Object cmdlet is then used to display only the selected properties in the output.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraSubscription.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All'\nGet-EntraSubscription -Property skuPartNumber, Status | Select-Object skuPartNumber, Status\n```\n\n----------------------------------------\n\nTITLE: Defining SecurityEnabled Parameter in YAML\nDESCRIPTION: Defines the SecurityEnabled parameter, indicating whether a group is security-enabled.  This parameter is crucial for security groups, requiring a value of $True. It is a required parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaGroup.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Boolean\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Update Application (Example 1)\nDESCRIPTION: This example demonstrates how to update an application's properties, including DisplayName, IdentifierUris, GroupMembershipClaims, IsDeviceOnlyAuthSupported, and Tags.  It first connects to Entra with required scopes, retrieves the application by its display name, then uses Set-EntraBetaApplication to update the specified properties.  Parameters are passed using splatting.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplication.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraBetaApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\n$params = @{\n    ApplicationId = $application.Id\n    DisplayName = 'Contoso Entra PowerShell App Production'\n    IdentifierUris = 'https://contoso.com'\n    GroupMembershipClaims = 'SecurityGroup'\n    IsDeviceOnlyAuthSupported = $False\n    Tags = 'mytag'\n}\nSet-EntraBetaApplication @params\n```\n\n----------------------------------------\n\nTITLE: Get Top Owners Example - PowerShell\nDESCRIPTION: Demonstrates how to retrieve a limited number of owners for a specified application using the -Top parameter. It retrieves the top 2 owners in this example and formats the output to display relevant properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationOwner.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraBetaApplication -Filter \"DisplayName eq 'Helpdesk Application'\"\nGet-EntraBetaApplicationOwner -ApplicationId $application.Id -Top 2 |\nSelect-Object Id, displayName, UserPrincipalName, createdDateTime, userType, accountEnabled |\nFormat-Table -AutoSize\n```\n\nLANGUAGE: powershell\nCODE:\n```\nid                                   DisplayName   UserPrincipalName                CreatedDateTime       UserType AccountEnabled\n--                                   -----------   -----------------                ---------------       -------- --------------\nbbbbbbbb-1111-2222-3333-cccccccccccc Adele Vance   AdeleV@contoso.com               10/7/2024 12:33:36 AM Member   True\ndddddddd-3333-4444-5555-eeeeeeeeeeee Cameron White CameronW@contoso.com            10/7/2024 12:34:47 AM Member   True\n```\n\n----------------------------------------\n\nTITLE: Update Policy Type - PowerShell\nDESCRIPTION: This example updates the type property of a specified policy in Microsoft Entra ID. It connects to Entra ID, retrieves the policy, and updates the Type using Set-EntraPolicy with the -Id and -Type parameters. Requires the 'Policy.ReadWrite.ApplicationConfiguration' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraPolicy.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ApplicationConfiguration'\n$policy = Get-EntraPolicy | Where-Object { $_.DisplayName -eq 'Microsoft User Default Recommended Policy' }\nSet-EntraPolicy -Id $policy.Id -Type 'ActivityBasedTimeoutPolicy'\n```\n\n----------------------------------------\n\nTITLE: GroupId Parameter Definition (YAML)\nDESCRIPTION: Defines the GroupId parameter for the Get-EntraGroupPermissionGrant cmdlet, specifying its type, requirement, position, default value, and ability to accept pipeline input.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraGroupPermissionGrant.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: Id\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Domain Name References Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the `Get-EntraDomainNameReference` cmdlet, including the required `-Name` parameter and optional `-Property` parameter. `CommonParameters` are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDomainNameReference.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraDomainNameReference\n -Name <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Directory Synchronization Settings - PowerShell\nDESCRIPTION: This example retrieves directory synchronization settings using the Get-EntraBetaDirSyncConfiguration cmdlet. It first connects to Entra ID with the necessary scopes and then executes the cmdlet to retrieve the configuration.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirSyncConfiguration.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'OnPremDirectorySynchronization.ReadWrite.All'\nGet-EntraBetaDirSyncConfiguration\n```\n\nLANGUAGE: powershell\nCODE:\n```\nAccidentalDeletionThreshold DeletionPreventionType\n--------------------------- ----------------------\n                        500 enabledForCount\n```\n\n----------------------------------------\n\nTITLE: Creating a new groupLifecyclePolicy (PowerShell)\nDESCRIPTION: This example demonstrates how to create a new group lifecycle policy using the New-EntraBetaGroupLifecyclePolicy cmdlet. It connects to Entra ID with the required scopes, then creates a policy with a group lifetime of 99 days, applies it to a selected set of Office 365 groups, and sets an alternate notification email address. The command requires the Microsoft.Entra.Beta module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaGroupLifecyclePolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\nNew-EntraBetaGroupLifecyclePolicy -GroupLifetimeInDays 99 -ManagedGroupTypes 'Selected' -AlternateNotificationEmails 'example@contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Get All Direct Reports of a Contact - PowerShell\nDESCRIPTION: This example shows how to retrieve all direct reports of a contact using the -All parameter with the Get-EntraContactDirectReport cmdlet.  It assumes you've already connected to Entra ID and retrieved the target contact. The -All parameter ensures all direct reports are returned, regardless of the default page size.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraContactDirectReport.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'OrgContact.Read.All'\n$contact = Get-EntraContact -Filter \"displayName eq 'Contoso Contact'\"\nGet-EntraContactDirectReport -OrgContactId $contact.Id -All\n```\n\n----------------------------------------\n\nTITLE: Get DirSync errors & format output - PowerShell\nDESCRIPTION: This example retrieves directory synchronization errors and formats the output into a table with autosizing. It uses Connect-Entra to establish a connection with necessary scopes before fetching the provisioning errors.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirectoryObjectOnPremisesProvisioningError.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All', 'Directory.Read.All', 'Group.Read.All', 'Contacts.Read'\nGet-EntraBetaDirectoryObjectOnPremisesProvisioningError | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get Application Owner Syntax\nDESCRIPTION: This snippet shows the syntax for the Get-EntraApplicationOwner cmdlet, including the ApplicationId parameter and optional parameters like All, Top, and Property.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplicationOwner.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraApplicationOwner\n -ApplicationId <String>\n [-All]\n [-Top <Int32>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Contact Thumbnail Photo with Get-EntraContactThumbnailPhoto\nDESCRIPTION: Demonstrates how to retrieve the thumbnail photo of a contact using the Get-EntraContactThumbnailPhoto cmdlet.  First, it connects to Entra ID with the 'Contacts.Read' scope.  Then, it uses the cmdlet with a specific object ID to retrieve the thumbnail photo.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraContactThumbnailPhoto.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Contacts.Read'\nGet-EntraContactThumbnailPhoto -ObjectId 'bbbbbbbb-1111-2222-3333-cccccccccccc'\n```\n\nLANGUAGE: powershell\nCODE:\n```\nTag                  :\nPhysicalDimension    : {Width=279, Height=390}\nSize                 : {Width=279, Height=390}\nWidth                : 279\nHeight               : 390\nHorizontalResolution : 96\nVerticalResolution   : 96\nFlags                : 77840\nRawFormat            : [ImageFormat: aaaa0000-bb11-2222-33cc-444444dddddd]\nPixelFormat          : Format24bppRgb\nPalette              : System.Drawing.Imaging.ColorPalette\nFrameDimensionsList  : {eeee4444-ff55-6666-77aa-888888bbbbbb}\nPropertyIdList       : {274, 305, 306, 36867...}\nPropertyItems        : {274, 305, 306, 36867...}\n```\n\n----------------------------------------\n\nTITLE: Remove Password SSO Credential Example - PowerShell\nDESCRIPTION: This example demonstrates how to remove password single-sign-on credentials using the Remove-EntraBetaPasswordSingleSignOnCredential cmdlet. It first connects to Entra with required scopes and then removes the SSO credential for a specified service principal and password SSO object ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaPasswordSingleSignOnCredential.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All', 'Directory.ReadWrite.All'\n$servicePrincipal = Get-EntraBetaservicePrincipal -SearchString '<service-principal-name>'\nRemove-EntraBetaPasswordSingleSignOnCredential -ServicePrincipalId $servicePrincipal.Id -PasswordSSOCredential 'bbbbbbbb-1111-2222-3333-cccccccccccc'\n```\n\n----------------------------------------\n\nTITLE: Creating a Service Principal using KeyCredentials - PowerShell\nDESCRIPTION: This example demonstrates how to create a service principal using KeyCredentials. It connects to Entra ID, creates a KeyCredential object with specific properties (CustomKeyIdentifier, StartDate, Type, Usage, Value, EndDate), fetches an application, and creates the service principal, passing the KeyCredentials.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraServicePrincipal.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$creds = New-Object Microsoft.Open.AzureAD.Model.KeyCredential\n$creds.CustomKeyIdentifier = [System.Text.Encoding]::UTF8.GetBytes('Test')\n$startdate = Get-Date -Year 2023 -Month 10 -Day 23\n$creds.StartDate = $startdate\n$creds.Type = 'Symmetric'\n$creds.Usage = 'Sign'\n$creds.Value = [System.Text.Encoding]::UTF8.GetBytes('strong-cred-value')\n$creds.EndDate = Get-Date -Year 2024 -Month 10 -Day 23\n$application = Get-EntraApplication -Filter \"DisplayName eq 'Helpdesk Application'\"\n\nNew-EntraServicePrincipal -AppId $application.AppId -KeyCredentials $creds\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDisplayName Id                                   AppId                                SignInAudience ServicePrincipalType\n----------- --                                   -----                                -------------- --------------------\nHelpdesk Application    bbbbbbbb-1111-2222-3333-cccccccccccc 00001111-aaaa-2222-bbbb-3333cccc4444 AzureADMyOrg   Application\n```\n\n----------------------------------------\n\nTITLE: Retrieving all Private Access Applications using PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all Private Access applications using the Get-EntraBetaPrivateAccessApplication cmdlet. It first establishes a connection to Entra ID with the necessary scopes and then executes the cmdlet to retrieve the list of applications.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPrivateAccessApplication.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'NetworkAccessPolicy.ReadWrite.All', 'Application.ReadWrite.All', 'NetworkAccess.ReadWrite.All'\nGet-EntraBetaPrivateAccessApplication\n```\n\n----------------------------------------\n\nTITLE: Get-EntraDeletedAdministrativeUnit Syntax - GetVague\nDESCRIPTION: Syntax definition for the Get-EntraDeletedAdministrativeUnit cmdlet using the GetVague parameter set. Shows available parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedAdministrativeUnit.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraDeletedAdministrativeUnit\n [-SearchString <String>]\n [-All]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Add a single attribute set using New-EntraAttributeSet\nDESCRIPTION: Demonstrates how to add a single attribute set using the New-EntraAttributeSet command. It connects to Entra with the required scopes and then creates a new attribute set named 'ContosoSet' with a description and a maximum of 15 attributes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraAttributeSet.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'CustomSecAttributeDefinition.ReadWrite.All'\nNew-EntraAttributeSet -AttributeSetId 'ContosoSet' -Description 'Contoso Set' -MaxAttributesPerSet 15\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId      Description                     MaxAttributesPerSet\n--      -----------                     -------------------\nTesting Attributes for engineering team 10\n```\n\n----------------------------------------\n\nTITLE: Set Minor Consent PowerShell\nDESCRIPTION: This example demonstrates how to set parental consent for minors in Microsoft Entra ID. It retrieves all users, filters them based on their display name, and then sets their age group to 'minor' and consent to 'granted'.  Requires 'User.ReadWrite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUser.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nGet-EntraBetaUser -All | Where-Object -Property DisplayName -Match '(George|James|Education)' |\nForEach-Object { Set-EntraBetaUser -UserId $($_.Id) -AgeGroup 'minor' -ConsentProvidedForMinor 'granted' }\n```\n\n----------------------------------------\n\nTITLE: Creating a permission grant condition set with specific permissions\nDESCRIPTION: This example creates a permission grant condition set that includes specific permissions for a resource application. It retrieves the AppRoles ID of a service principal ('Box' in this example) and uses it as the permission. It requires connecting to Entra ID with the 'Policy.ReadWrite.PermissionGrant' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaPermissionGrantConditionSet.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.PermissionGrant'\n$permission = (Get-EntraBetaServicePrincipal -Filter \"DisplayName eq 'Box'\").AppRoles.Id\n$permissionGrantPolicy = Get-EntraBetaPermissionGrantPolicy | Where-Object { $_.Id -eq 'my-custom-consent-policy' }\nNew-EntraBetaPermissionGrantConditionSet -PolicyId $permissionGrantPolicy.Id -ConditionSetType 'includes' -PermissionType 'delegated' -Permissions @($permission) -ResourceApplication 'resource-application-id'\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId                                   CertifiedClientApplicationsOnly ClientApplicationIds ClientApplicationPublisherIds ClientApplicationTenantIds ClientApplicationsFromVerifiedPublisherOnly PermissionClassification\n--                                   ------------------------------- -------------------- ----------------------------- -------------------------- ------------------------------------------- -------------------\nbbbb1111-cc22-3333-44dd-555555eeeeee False                           {all}                {all}                         {all}                      False                                       all                                  all                      delegated      {all}\n```\n\n----------------------------------------\n\nTITLE: Remove Group App Role Assignment Example\nDESCRIPTION: This example demonstrates how to remove a group application role assignment. It first connects to Entra ID, retrieves a group and app role assignment, and then removes the assignment using the Remove-EntraGroupAppRoleAssignment cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraGroupAppRoleAssignment.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\n$group = Get-EntraGroup -Filter \"displayName eq 'Contoso Marketing'\"\n$appRoleAssignment = Get-EntraGroupAppRoleAssignment -GroupId $group.Id | Where-Object {$_.ResourceDisplayName -eq 'Box'}\nRemove-EntraGroupAppRoleAssignment -GroupId $group -AppRoleAssignmentId $appRoleAssignment.Id\n```\n\n----------------------------------------\n\nTITLE: Get Certificate Subject - PowerShell\nDESCRIPTION: This PowerShell snippet retrieves the subject of a certificate from the current user's certificate store using the certificate thumbprint. Replace `$CertThumbprint` with the actual thumbprint of the certificate. It uses Get-ChildItem and Select-Object cmdlets and requires PowerShell.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/app-only-access-auth.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-ChildItem Cert:\\CurrentUser\\My\\$CertThumbprint | Select Subject\n```\n\n----------------------------------------\n\nTITLE: Remove-EntraDirectoryRoleMember Syntax - PowerShell\nDESCRIPTION: This snippet shows the syntax for the Remove-EntraDirectoryRoleMember cmdlet. It requires the DirectoryRoleId and MemberId parameters to specify the directory role and the member to be removed, respectively. It also supports CommonParameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraDirectoryRoleMember.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraDirectoryRoleMember\n -DirectoryRoleId <String>\n -MemberId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Update Application IsDeviceOnlyAuthSupported (Example 4)\nDESCRIPTION: This example demonstrates updating the IsDeviceOnlyAuthSupported property of an application. It connects to Entra, retrieves the application, and then uses Set-EntraBetaApplication with the -IsDeviceOnlyAuthSupported parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplication.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraBetaApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\nSet-EntraBetaApplication -ApplicationId $application.Id -IsDeviceOnlyAuthSupported $False\n```\n\n----------------------------------------\n\nTITLE: Create License Assignment Objects - PowerShell\nDESCRIPTION: This snippet creates license assignment objects using the `Microsoft.Open.AzureAD.Model.AssignedLicense` type and assigns them to a user. It requires `$skuId1` and `$skuId2` to be defined beforehand, representing the SKU IDs of the licenses to be assigned. The `Set-EntraUserLicense` cmdlet is then used to apply these licenses to each user in the `$users` collection.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/how-to-manage-user-licenses.md#_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\n# Create license assignment objects\n$license1 = New-Object -TypeName Microsoft.Open.AzureAD.Model.AssignedLicense\n$license1.SkuId = $skuId1\n\n$license2 = New-Object -TypeName Microsoft.Open.AzureAD.Model.AssignedLicense\n$license2.SkuId = $skuId2\n\n$licenses = New-Object -TypeName Microsoft.Open.AzureAD.Model.AssignedLicenses\n$licenses.AddLicenses = $license1, $license2\n\n# Assign the licenses to each user\nforeach ($user in $users$users) {\n Set-EntraUserLicense -UserId $user -AssignedLicenses $licenses\n}\n```\n\n----------------------------------------\n\nTITLE: Parameter Description -Id - PowerShell\nDESCRIPTION: The `-Id` parameter specifies the ID of the directory object that will be permanently deleted. It is a required parameter and accepts input by property name or by value.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaDeletedDirectoryObject.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Delete Application Segment - PowerShell\nDESCRIPTION: This example demonstrates how to delete an application segment associated with a Private Access application using the Remove-EntraBetaPrivateAccessApplicationSegment cmdlet. It retrieves the application and application segment IDs before removing the segment.  It requires the NetworkAccessPolicy.ReadWrite.All, Application.ReadWrite.All and NetworkAccess.ReadWrite.All scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaPrivateAccessApplicationSegment.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'NetworkAccessPolicy.ReadWrite.All', 'Application.ReadWrite.All', 'NetworkAccess.ReadWrite.All'\n$application = Get-EntraBetaApplication -Filter \"displayName eq '<GlobalSecureAccess_Application_DisplayName>'\"\n$applicationSegment = Get-EntraBetaPrivateAccessApplicationSegment -ApplicationId $application.Id | Where-Object {$_.destinationType -eq 'fqdn'}\nRemove-EntraBetaPrivateAccessApplicationSegment -ApplicationId $application.Id -ApplicationSegmentId $applicationSegment.Id\n```\n\n----------------------------------------\n\nTITLE: Get predefined value with Filter parameter\nDESCRIPTION: This example demonstrates how to retrieve a predefined value by filtering based on a property value (in this case, the `Id`). It connects to Entra, retrieves the custom security attribute definition, and then filters the allowed values. It requires 'CustomSecAttributeDefinition.ReadWrite.All' scopes to execute.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaCustomSecurityAttributeDefinitionAllowedValue.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'CustomSecAttributeDefinition.ReadWrite.All'\n$attributeDefinition = Get-EntraBetaCustomSecurityAttributeDefinition | Where-Object {$_.Name -eq 'Engineering'}\nGet-EntraBetaCustomSecurityAttributeDefinitionAllowedValue -CustomSecurityAttributeDefinitionId $attributeDefinition.Id -Filter \"Id eq 'Alpine'\"\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n```Output\nId        IsActive\n--        --------\nApline    True\n```\n```\n\n----------------------------------------\n\nTITLE: ServicePrincipalId Parameter Definition - YAML\nDESCRIPTION: Defines the ServicePrincipalId parameter for the Remove-EntraBetaServicePrincipal cmdlet. The parameter is a string, required, accepts pipeline input by property name and value, and does not accept wildcard characters. This parameter specifies the ID of the service principal to be removed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaServicePrincipal.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get deleted users by search string\nDESCRIPTION: This PowerShell snippet retrieves deleted users that contain a specific string in their properties. The `-SearchString` parameter is used to filter the results. The script formats the output to display key user details in a table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedUser.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraBetaDeletedUser -SearchString 'Avery Smith' | Select-Object Id, UserPrincipalName, DisplayName, AccountEnabled, DeletedDateTime, DeletionAgeInDays, UserType | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: ApplicationTemplateId Parameter Definition\nDESCRIPTION: Defines the `ApplicationTemplateId` parameter, which is a string representing the ID of the application template.  It is a required parameter that accepts pipeline input by property name and value.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplicationFromApplicationTemplate.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: Id\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Update Service Principal Homepage - PowerShell\nDESCRIPTION: This example shows how to update the Homepage of a service principal using the Set-EntraBetaServicePrincipal cmdlet. It connects to Entra ID, retrieves a service principal by its display name, and then updates its homepage URL.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaServicePrincipal.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\n$homePage = 'https://*.e-days.com/SSO/SAML2/SP/AssertionConsumer.aspx?metadata=e-days|ISV9.2|primary|z'\nSet-EntraBetaServicePrincipal -ServicePrincipalId $servicePrincipal.Id -Homepage $homePage\n```\n\n----------------------------------------\n\nTITLE: Find Deleted Administrative Unit by Display Name - PowerShell\nDESCRIPTION: This snippet retrieves a specific soft-deleted administrative unit in Microsoft Entra ID by its display name. It connects to Entra ID with the 'AdministrativeUnit.Read.All' scope and uses the 'Get-EntraDeletedAdministrativeUnit' cmdlet with a filter to find the administrative unit by its 'displayName'.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/recover-deleted-data.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.Read.All'\nGet-EntraDeletedAdministrativeUnit -Filter \"displayName eq 'Pacific Administrative Unit'\"\n```\n\n----------------------------------------\n\nTITLE: Exporting All Devices to CSV - PowerShell\nDESCRIPTION: This PowerShell script exports a list of all Microsoft Entra devices to a CSV file. It uses Get-EntraDevice to retrieve all devices and then selects specific properties. It then exports the selected properties to a CSV file using Export-Csv. The file is saved to the user's Downloads folder.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-devices.md#_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraDevice -All `\n| Select-Object -Property AccountEnabled, DeviceId, OperatingSystem, OperatingSystemVersion, DisplayName, TrustType, ApproximateLastSignInDateTime `\n| Export-Csv \"$env:UserProfile\\Downloads\\deviceList.csv\" -NoTypeInformation \n```\n\n----------------------------------------\n\nTITLE: Get All Group Owners - EntraBeta PowerShell\nDESCRIPTION: This example retrieves all owners of a specific group. It first connects to Entra ID, gets the group object by filtering on the display name, and then uses the Get-EntraBetaGroupOwner cmdlet with the `-All` parameter to retrieve all associated owners. The resulting owner objects are then filtered to display only the ID, DisplayName, and @odata.type properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaGroupOwner.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All'\n$group = Get-EntraBetaGroup -Filter \"DisplayName eq 'Sales and Marketing'\"\nGet-EntraBetaGroupOwner -GroupId $group.Id -All | Select-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Get Group Membership Example - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve the group membership of a specified group using the Select-EntraBetaGroupIdsGroupIsMemberOf cmdlet. It requires connecting to Entra with the GroupMember.Read.All scope and utilizes Get-EntraBetaGroup to obtain group IDs.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Select-EntraBetaGroupIdsGroupIsMemberOf.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All'\n$groupObject = New-Object Microsoft.Open.AzureAD.Model.GroupIdsForMembershipCheck\n$groupObject.GroupIds = (Get-EntraBetaGroup -Filter \"displayName eq 'Tailspin Toys'\").Id\n$group = Get-EntraBetaGroup -Filter \"displayName eq 'sg-Legal'\"\nSelect-EntraBetaGroupIdsGroupIsMemberOf  -GroupId $group.Id -GroupIdsForMembershipCheck $groupObject\n```\n\n----------------------------------------\n\nTITLE: Remove-EntraUser Syntax\nDESCRIPTION: Defines the syntax for the Remove-EntraUser cmdlet. It requires the UserId parameter, which specifies the user to be removed. CommonParameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraUser.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraUser\n -UserId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove a Scoped Role Membership - PowerShell\nDESCRIPTION: Demonstrates how to remove a specific scoped role membership from Microsoft Entra ID using the Remove-EntraBetaScopedRoleMembership cmdlet. It involves connecting to Entra ID, retrieving the role and administrative unit, and then removing the scoped role membership based on their IDs.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaScopedRoleMembership.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory'\n$role = Get-EntraBetaDirectoryRole -Filter \"DisplayName eq 'Helpdesk Administrator'\" \n$administrativeUnit = Get-EntraBetaAdministrativeUnit -Filter \"DisplayName eq 'Pacific Administrative Unit'\"\n$roleMembership = Get-EntraBetaScopedRoleMembership -AdministrativeUnitId $administrativeUnit.Id | Where-Object {$_.RoleId -eq $role.Id}\nRemove-EntraBetaScopedRoleMembership -AdministrativeUnitId $administrativeUnit.Id -ScopedRoleMembershipId $roleMembership.Id\n```\n\n----------------------------------------\n\nTITLE: Add Scoped Role Membership to Administrative Unit - PowerShell\nDESCRIPTION: This PowerShell script adds a scoped role membership to an administrative unit, associating a user with a specific role within that unit. It requires the 'RoleManagement.ReadWrite.Directory' scope, retrieves user, role, and administrative unit objects, and then uses Add-EntraScopedRoleMembership to create the scoped membership.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Add-EntraScopedRoleMembership.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory'\n$user = Get-EntraUser -UserId 'SawyerM@contoso.com'\n$role = Get-EntraDirectoryRole -Filter \"DisplayName eq 'Helpdesk Administrator'\" \n$administrativeUnit = Get-EntraAdministrativeUnit -Filter \"DisplayName eq 'Pacific Administrative Unit'\"\n$roleMember = New-Object -TypeName Microsoft.Open.MSGraph.Model.MsRoleMemberInfo\n$roleMember.Id = $user.Id\nAdd-EntraScopedRoleMembership -AdministrativeUnitId $administrativeUnit.Id -RoleObjectId $role.Id -RoleMemberInfo $roleMember\n```\n\n----------------------------------------\n\nTITLE: Update DefaultUserRolePermissions - PowerShell\nDESCRIPTION: This example demonstrates how to update the DefaultUserRolePermissions of an authorization policy in Microsoft Entra ID. It creates a DefaultUserRolePermissions object and sets properties such as AllowedToCreateApps, AllowedToCreateSecurityGroups and AllowedToReadOtherUsers before updating the authorization policy. Requires 'Policy.ReadWrite.Authorization' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraAuthorizationPolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.Authorization'\n$defaultUserRolePermissions = New-Object -TypeName Microsoft.Open.MSGraph.Model.DefaultUserRolePermissions\n$defaultUserRolePermissions.AllowedToCreateApps = $false\n$defaultUserRolePermissions.AllowedToCreateSecurityGroups = $false\n$defaultUserRolePermissions.AllowedToReadOtherUsers = $false\nSet-EntraAuthorizationPolicy -DefaultUserRolePermissions $defaultUserRolePermissions\n```\n\n----------------------------------------\n\nTITLE: Remove User Manager via Pipelining - PowerShell\nDESCRIPTION: Demonstrates how to remove a user's manager using pipelining with the Remove-EntraUserManager cmdlet. It retrieves the user's details using Get-EntraUser and pipes the output to Remove-EntraUserManager.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraUserManager.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nGet-EntraUser -UserId 'SawyerM@Contoso.com' | Remove-EntraUserManager\n```\n\n----------------------------------------\n\nTITLE: Update Policy Organization Default - PowerShell\nDESCRIPTION: This example updates the organization default setting of a policy in Microsoft Entra ID.  It connects to Entra ID, retrieves the policy, and updates the IsOrganizationDefault property using Set-EntraPolicy with the -Id and -IsOrganizationDefault parameters.  Requires the 'Policy.ReadWrite.ApplicationConfiguration' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraPolicy.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ApplicationConfiguration'\n$policy = Get-EntraPolicy | Where-Object { $_.DisplayName -eq 'Microsoft User Default Recommended Policy' }\nSet-EntraPolicy -Id $policy.Id -IsOrganizationDefault $false\n```\n\n----------------------------------------\n\nTITLE: Get a device by display name using Entra PowerShell\nDESCRIPTION: This code snippet retrieves devices from the Microsoft Entra directory based on a filter applied to the DisplayName property. It requires the Device.Read.All scope and uses the Get-EntraDevice cmdlet with the -Filter parameter.  The filter \"startsWith(DisplayName,'Woodgrove')\" retrieves all devices whose display name begins with \"Woodgrove\".\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-devices.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'  \nGet-EntraDevice -Filter \"startsWith(DisplayName,'Woodgrove')\"\n```\n\n----------------------------------------\n\nTITLE: Create Excluded Permission Grant Condition Set in Entra ID Policy - PowerShell\nDESCRIPTION: This PowerShell script creates a new permission grant condition set within an existing Entra ID permission grant policy. The condition set is configured to *exclude* specified client applications, resources, and permissions. The script leverages the `EntraBeta` module, requiring connection with appropriate scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaPermissionGrantConditionSet.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.PermissionGrant'\n$permissionGrantPolicy = Get-EntraBetaPermissionGrantPolicy | Where-Object { $_.Id -eq 'my-custom-consent-policy' }\n$permission = (Get-EntraBetaServicePrincipal -Filter \"DisplayName eq '<service-principal-displayname>' \").AppRoles.Id\n$params = @{\n    PolicyId                                    = $permissionGrantPolicy.Id\n    ConditionSetType                            = 'excludes'\n    PermissionType                              = 'delegated'\n    Permissions                                 = @($permission)\n    ResourceApplication                         = 'a0a0a0a0-bbbb-cccc-dddd-e1e1e1e1e1e1'\n    PermissionClassification                    = 'low'\n    ClientApplicationsFromVerifiedPublisherOnly = $true\n    ClientApplicationIds                        = @('00001111-aaaa-2222-bbbb-3333cccc4444', '11112222-bbbb-3333-cccc-4444dddd5555')\n    ClientApplicationTenantIds                  = @('aaaabbbb-0000-cccc-1111-dddd2222eeee', 'bbbbcccc-1111-dddd-2222-eeee3333ffff', 'ccccdddd-2222-eeee-3333-ffff4444aaaa')\n    ClientApplicationPublisherIds               = @('33334444-dddd-5555-eeee-6666ffff7777')\n}\nNew-EntraBetaPermissionGrantConditionSet @params\n```\n\n----------------------------------------\n\nTITLE: Creating a device using New-EntraDevice (PowerShell)\nDESCRIPTION: This PowerShell code snippet demonstrates how to create a new device in Microsoft Entra ID using the `New-EntraDevice` cmdlet. It connects to Entra ID, generates a GUID for the device ID, creates an alternative security ID, and then uses these values along with other device properties to create the device. The code requires the Microsoft.Entra module and appropriate permissions to create devices in the Entra ID tenant.  The output displays the object ID, device ID, and display name of the newly created device.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraDevice.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.AccessAsUser.All', 'Device.ReadWrite.All'\n$guid = [guid]::NewGuid()\n$newId = New-Object Microsoft.Open.AzureAD.Model.AlternativeSecurityId\n$newId.Key = [System.Text.Encoding]::UTF8.GetBytes('test')\n$newId.type = 2\n$params = @{\n    AccountEnabled         = $true\n    DisplayName            = 'My new device'\n    AlternativeSecurityIds = $newId\n    DeviceId               = $guid\n    DeviceOSType           = 'OS/2'\n    DeviceOSVersion        = '9.3'\n}\nNew-EntraDevice @params\n```\n\n----------------------------------------\n\nTITLE: Get-EntraBetaDomainNameReference Syntax PowerShell\nDESCRIPTION: Defines the syntax for the Get-EntraBetaDomainNameReference cmdlet, specifying the required -Name parameter and the optional -Property parameter. It also includes the common parameters available to all PowerShell cmdlets.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDomainNameReference.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaDomainNameReference\n -Name <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: YAML Parameter Definition: -All\nDESCRIPTION: This YAML snippet defines the -All parameter for the Get-EntraBetaApplicationOwner cmdlet. It specifies the parameter's type, whether it is required, its position, default value, and other properties related to parameter behavior.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationOwner.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: New-EntraIdentityProvider Syntax (PowerShell)\nDESCRIPTION: This snippet shows the syntax for the New-EntraIdentityProvider cmdlet. It includes the required parameters (-Type, -ClientSecret, -ClientId) and the optional parameter (-Name). It also shows that it supports CommonParameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraIdentityProvider.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-EntraIdentityProvider\n -Type <String>\n -ClientSecret <String>\n -ClientId <String>\n [-Name <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Service Principal Key Credentials Syntax (PowerShell)\nDESCRIPTION: This syntax shows how to use the Get-EntraBetaServicePrincipalKeyCredential cmdlet to retrieve key credentials for a specified service principal. The cmdlet requires the ServicePrincipalId parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalKeyCredential.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaServicePrincipalKeyCredential\n -ServicePrincipalId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Current Session Scopes in PowerShell\nDESCRIPTION: This snippet retrieves the scopes of the current Entra session using `Get-EntraContext` and `Select-Object`.  It expands the `Scopes` property to list all consented scopes for the session, providing insight into the granted permissions.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraContext.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraContext | Select -ExpandProperty Scopes\n```\n\n----------------------------------------\n\nTITLE: Update Support URL using Set-EntraPartnerInformation (PowerShell)\nDESCRIPTION: This code snippet demonstrates how to update the support URL for a partner using the Set-EntraPartnerInformation cmdlet. It connects to Entra ID and then updates the PartnerSupportUrl.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraPartnerInformation.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.ReadWrite.All'\nSet-EntraPartnerInformation -PartnerSupportUrl 'http://www.test1.com'\n```\n\n----------------------------------------\n\nTITLE: Get all predefined values\nDESCRIPTION: This example demonstrates how to retrieve all predefined values for a specified custom security attribute definition using the Get-EntraBetaCustomSecurityAttributeDefinitionAllowedValue cmdlet. It first connects to Entra using Connect-Entra with the required scopes and then retrieves the attribute definition ID before using it in the Get cmdlet. It retrieves an all predefined values and requires 'CustomSecAttributeDefinition.ReadWrite.All' scopes to execute.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaCustomSecurityAttributeDefinitionAllowedValue.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'CustomSecAttributeDefinition.ReadWrite.All'\n$attributeDefinition = Get-EntraBetaCustomSecurityAttributeDefinition | Where-Object {$_.Name -eq 'Engineering'}\nGet-EntraBetaCustomSecurityAttributeDefinitionAllowedValue -CustomSecurityAttributeDefinitionId $attributeDefinition.Id\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n```Output\nId        IsActive\n--        --------\nApline    True\n```\n```\n\n----------------------------------------\n\nTITLE: GroupLifecyclePolicyId Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the GroupLifecyclePolicyId parameter for the Remove-EntraGroupLifecyclePolicy cmdlet. It specifies the type, parameter sets, aliases, requirement, position, default value, and whether it accepts pipeline input and wildcard characters. It is used to identify the group lifecycle policy to remove.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraGroupLifecyclePolicy.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: Id\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Subscriptions with Get-EntraSubscription (PowerShell)\nDESCRIPTION: This PowerShell command retrieves the organization's commercial subscriptions using the Get-EntraSubscription cmdlet from the Microsoft.Entra module. It requires the Microsoft.Entra PowerShell module to be installed. The command returns a list of subscription objects containing details of the organization's commercial subscriptions.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraSubscription\n```\n\n----------------------------------------\n\nTITLE: Get-EntraDeletedAdministrativeUnit Syntax - GetQuery\nDESCRIPTION: Syntax definition for the Get-EntraDeletedAdministrativeUnit cmdlet using the GetQuery parameter set.  Shows available parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedAdministrativeUnit.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraDeletedAdministrativeUnit\n [-Filter <String>]\n [-All]\n [-Top <Int32>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Enable Directory Role with Role Template ID in PowerShell\nDESCRIPTION: This PowerShell code snippet demonstrates how to enable a directory role in Microsoft Entra ID by using its Role Template ID. It first connects to Entra ID, retrieves the 'Guest Inviter' role template, and then enables the role using the Enable-EntraDirectoryRole cmdlet. The signed-in user needs appropriate permissions to perform this action, such as Privileged Role Administrator.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Enable-EntraDirectoryRole.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory'\n$guestRole = Get-EntraDirectoryRoleTemplate | Where-Object {$_.DisplayName -eq 'Guest Inviter'}\nEnable-EntraDirectoryRole -RoleTemplateId $guestRole.Id\n```\n\n----------------------------------------\n\nTITLE: Get Top N Directory Roles for User\nDESCRIPTION: This example shows how to retrieve the top two directory roles assigned to a specific user, demonstrating the use of the `-Top` parameter for limiting the number of results.  Requires connection to Entra ID with the 'Directory.Read.All' scope.  `-Limit` can also be used as an alias.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserRole.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\nGet-EntraUserRole -UserId 'SawyerM@contoso.com' -Top 2\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDeletedDateTime         Id                                   DisplayName               RoleTemplateId\n---------------         --                                   -----------               --------------\n                       bbbbbbbb-1111-2222-3333-ccccccccccc  Helpdesk Administrator    729827e3-9c14-49f7-bb1b-9608f156bbb8\n                       dddddddd-3333-4444-5555-eeeeeeeeeeee Directory Readers         88d8e3e3-8f55-4a1e-953a-9b9898b8876b\n```\n\n----------------------------------------\n\nTITLE: Get-EntraContact Syntax (GetQuery) - PowerShell\nDESCRIPTION: Shows the syntax for the GetQuery parameter set of the Get-EntraContact cmdlet. This is the default parameter set. It allows filtering and retrieving a specified number of contact objects.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraContact.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraContact\n [-Filter <String>]\n [-All]\n [-Top <Int32>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Directory Setting by ID - PowerShell\nDESCRIPTION: Retrieves a specific directory setting using its ID.  Requires connecting to Entra ID with appropriate scopes. The -Id parameter specifies the ID of the directory setting to retrieve.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirectorySetting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All, Group.Read.All, Group.ReadWrite.All'\nGet-EntraBetaDirectorySetting -Id 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb'\n```\n\n----------------------------------------\n\nTITLE: Get-EntraDirectoryRoleTemplate Syntax - PowerShell\nDESCRIPTION: This code snippet displays the syntax of the Get-EntraDirectoryRoleTemplate cmdlet, showing the available parameters.  It includes the optional -Property parameter and the CommonParameters which are standard for PowerShell cmdlets.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDirectoryRoleTemplate.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraDirectoryRoleTemplate\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Update Device Alternative Security ID - PowerShell\nDESCRIPTION: This snippet shows how to update an alternative security ID for a specified device in Microsoft Entra ID using the Set-EntraBetaDevice cmdlet. It creates a new alternative security ID object, sets its key and type, retrieves a device by its display name, and then updates the device's alternative security IDs. Requires 'Directory.AccessAsUser.All' and 'Device.ReadWrite.All' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaDevice.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.AccessAsUser.All', 'Device.ReadWrite.All'\n$NewId = New-Object Microsoft.Open.AzureAD.Model.AlternativeSecurityId\n$NewId.Key = [System.Text.Encoding]::UTF8.GetBytes('test')\n$NewId.type = 2\n$device = Get-EntraBetaDevice -Filter \"DisplayName eq 'Woodgrove Desktop'\"\nSet-EntraBetaDevice -DeviceObjectId $device.ObjectId -AlternativeSecurityIds $NewId\n```\n\n----------------------------------------\n\nTITLE: Add Application Owner by ID - PowerShell\nDESCRIPTION: Adds an owner to an application using the application ID and owner ID. This cmdlet requires the Microsoft.Entra.Beta module. Only individual users are supported as owners.  It utilizes the ApplicationId and OwnerId parameters to identify the application and user respectively.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaApplicationOwner.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-EntraBetaApplicationOwner\n -ApplicationId <String>\n -OwnerId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove Key Credential Syntax - PowerShell\nDESCRIPTION: This code snippet shows the syntax for the Remove-EntraServicePrincipalKeyCredential cmdlet. It requires the ServicePrincipalId and KeyId as parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraServicePrincipalKeyCredential.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraServicePrincipalKeyCredential\n -ServicePrincipalId <String>\n -KeyId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Application Owner\nDESCRIPTION: This example demonstrates how to retrieve the owner of an application using Get-EntraApplicationOwner. It first connects to Entra ID and retrieves the application object by its display name. It then calls Get-EntraApplicationOwner with the ApplicationId and selects specific properties to display in a table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplicationOwner.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraApplication -Filter \"DisplayName eq 'Helpdesk Application'\"\nGet-EntraApplicationOwner -ApplicationId $application.Id |\nSelect-Object Id, displayName, UserPrincipalName, createdDateTime, userType, accountEnabled |\nFormat-Table -AutoSize\n```\n\nLANGUAGE: powershell\nCODE:\n```\nid                                   DisplayName   UserPrincipalName                CreatedDateTime       UserType AccountEnabled\n--                                   -----------   -----------------                ---------------       -------- --------------\nbbbbbbbb-1111-2222-3333-cccccccccccc Adele Vance   AdeleV@contoso.com               10/7/2024 12:33:36 AM Member   True\ndddddddd-3333-4444-5555-eeeeeeeeeeee Cameron White CameronW@contoso.com            10/7/2024 12:34:47 AM Member   True\n```\n\n----------------------------------------\n\nTITLE: Remove Contact Syntax - Entra ID - PowerShell\nDESCRIPTION: This syntax block shows the structure and parameters for the `Remove-EntraBetaContact` cmdlet. The `-OrgContactId` parameter specifies the object ID of the contact to remove and is a required parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaContact.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraBetaContact\n -OrgContactId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: ApplicationId Parameter Definition - YAML\nDESCRIPTION: Describes the `-ApplicationId` parameter for the `Remove-EntraBetaApplicationKeyCredential` cmdlet.  It specifies the unique ID of an application in Microsoft Entra ID and can accept pipeline input by property name or value.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaApplicationKeyCredential.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: New-EntraGroupLifecyclePolicy Syntax\nDESCRIPTION: Defines the syntax for the New-EntraGroupLifecyclePolicy cmdlet. It shows the required parameters: -ManagedGroupTypes, -GroupLifetimeInDays, and -AlternateNotificationEmails. It also indicates the availability of CommonParameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraGroupLifecyclePolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-EntraGroupLifecyclePolicy\n -ManagedGroupTypes <String>\n -GroupLifetimeInDays <Int32>\n -AlternateNotificationEmails <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Password Single-Sign-On Credentials Example (PowerShell)\nDESCRIPTION: This example demonstrates how to retrieve password single-sign-on credentials for a given service principal and password SSO object ID.  It first connects to Entra ID, retrieves a service principal, and then calls Get-EntraBetaPasswordSingleSignOnCredential.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPasswordSingleSignOnCredential.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All', 'Directory.ReadWrite.All'\n$servicePrincipal = Get-EntraBetaservicePrincipal -SearchString '<service-principal-name>'\nGet-EntraBetaPasswordSingleSignOnCredential -ServicePrincipalId $servicePrincipal.Id -PasswordSSOObjectId 'bbbbbbbb-1111-2222-3333-cccccccccccc'\n```\n\n----------------------------------------\n\nTITLE: Remove Application Policy Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Remove-EntraBetaApplicationPolicy cmdlet. It requires the -Id and -PolicyId parameters, both strings, to identify the application and policy to be removed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaApplicationPolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraBetaApplicationPolicy\n -Id <String>\n -PolicyId <String>\n[<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition -Top - YAML\nDESCRIPTION: This YAML snippet defines the '-Top' parameter for a PowerShell cmdlet, which is used to specify the maximum number of records to return.  It indicates its type, aliases, that it's not required and it accepts pipeline input by property name or value.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipal.md#_snippet_18\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Int32\nParameter Sets: GetQuery\nAliases: Limit\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: New-EntraNamedLocationPolicy Syntax (PowerShell)\nDESCRIPTION: This syntax block defines the structure and parameters for the New-EntraNamedLocationPolicy cmdlet.  It shows all possible parameters that can be used when creating a new named location policy. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraNamedLocationPolicy.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-EntraNamedLocationPolicy\n [-OdataType <String>]\n [-Id <String>]\n [-DisplayName <String>]\n [-IpRanges <System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.IpRange]>] \n [-IsTrusted <Boolean>]\n [-CountriesAndRegions <System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.CountriesAndRegion]>] \n [-IncludeUnknownCountriesAndRegions <Boolean>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: List sign-in failures due to specific CA Policy - PowerShell\nDESCRIPTION: This example filters sign-in audit logs to find failures caused by a specific Conditional Access policy. It first connects to Entra ID. It then uses `Get-EntraAuditSignInLog` with a `-Filter` that checks for `conditionalAccessStatus eq 'failure'` and whether the `appliedConditionalAccessPolicies` array contains an entry with the specified `$policyId` and a `result` of `failure`. The `-Limit` parameter limits the output, and `Select-Object` displays relevant properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAuditSignInLog.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All','Directory.Read.All'\n$policyId = \"dcf66a39-965f-4958-871f-f62613b6cabd\"\nGet-EntraAuditSignInLog -Filter \"\n    conditionalAccessStatus eq 'failure' \n    and appliedConditionalAccessPolicies/any(c:c/id eq '$policyId' and c/result eq 'failure')\" -Limit 1 | \nSelect-Object id, userDisplayName, appDisplayName, clientAppUsed, \n              conditionalAccessStatus, status, appliedConditionalAccessPolicies\n```\n\n----------------------------------------\n\nTITLE: Assign Multiple Group Sponsors - PowerShell\nDESCRIPTION: This example demonstrates how to assign multiple groups as sponsors to a target user account using the Set-EntraBetaUserSponsor cmdlet. It connects to Entra with 'User.ReadWrite.All' scope and calls Set-EntraBetaUserSponsor, specifying the target user's ID, sponsor type as Group, and an array of group IDs.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUserSponsor.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nSet-EntraBetaUserSponsor -UserId 'JohnstoneH@fabrikam.com' -Type Group -SponsorIds @(\"db0c6f50-93ee-4b22-9bb9-c8454875d990\",\"c9db38b9-e5v8-4b5e-ae78-9812230af58d\")\n```\n\n----------------------------------------\n\nTITLE: Add password to application using New-EntraBetaApplicationPassword (PowerShell)\nDESCRIPTION: This example demonstrates how to add a password to a specified application in Entra ID. It utilizes cmdlets to connect to Entra ID, retrieve an application, create a new password credential with a start and end date, a custom key identifier and a hint, and then adds the password to the application. Requires the 'Application.ReadWrite.All' and 'Directory.ReadWrite.All' scopes. The ApplicationId parameter specifies the application's unique identifier, and the PasswordCredential parameter specifies the password credential object.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplicationPassword.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All', 'Directory.ReadWrite.All'\n$application = Get-EntraBetaApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\n$passwordCredential = New-Object Microsoft.Open.MSGraph.Model.PasswordCredential\n$passwordCredential.StartDateTime = Get-Date -Year 2024 -Month 10 -Day 23\n$passwordCredential.EndDateTime = Get-Date -Year 2025 -Month 2 -Day 28\n$passwordCredential.CustomKeyIdentifier = [System.Text.Encoding]::UTF8.GetBytes('ERP App Password')\n$passwordCredential.Hint = 'erpapppassword'\n$passwordCredential.DisplayName = 'ERP App Password'\nNew-EntraBetaApplicationPassword -ApplicationId $application.Id -PasswordCredential $passwordCredential\n```\n\n----------------------------------------\n\nTITLE: Assign an App Role to a Service Principal\nDESCRIPTION: Assigns a specific app role (e.g., 'Application.Read.All') exposed by a resource application (Microsoft Graph) to a client service principal ('My application').  It retrieves both the client and resource service principals using `Get-EntraServicePrincipal`, then filters the resource's `AppRoles` to find the matching app role. Finally, it uses `New-EntraServicePrincipalAppRoleAssignment` to create the assignment, providing the object IDs of the client and resource, the app role ID, and the principal ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/how-to-grant-revoke-api-permissions.md#_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\n$permission = \"Application.Read.All\"\n$clientServicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'My application'\" \n$resourceServicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Microsoft Graph'\"\n\n$appRole = $resourceServicePrincipal.AppRoles | Where-Object { $_.Value -eq $permission }\n\n$appRoleAssignment = New-EntraServicePrincipalAppRoleAssignment -ObjectId $clientServicePrincipal.Id -PrincipalId $clientServicePrincipal.Id -Id $appRole.Id -ResourceId $resourceServicePrincipal.Id\n\n$appRoleAssignment | Format-List Id, AppRoleId, CreatedDateTime, PrincipalDisplayName, PrincipalId, PrincipalType, ResourceDisplayName\n```\n\n----------------------------------------\n\nTITLE: Get-EntraBetaAccountSku Syntax (Default) - PowerShell\nDESCRIPTION: This defines the default syntax for the `Get-EntraBetaAccountSku` cmdlet. It retrieves SKUs without any specific filters, fetching all SKUs associated with the current context. It includes the standard CommonParameters for error handling, debugging, and output control.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAccountSku.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaAccountSku\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Api Parameter Definition\nDESCRIPTION: This YAML snippet defines the Api parameter for the Set-EntraBetaApplication cmdlet, describing its properties such as type, parameter sets, aliases, and input capabilities. This parameter specifies settings for an application that implements a web API.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplication.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nType: ApiApplication\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Domain Verification DNS Record Syntax - PowerShell\nDESCRIPTION: This section defines the syntax for the `Get-EntraBetaDomainVerificationDnsRecord` cmdlet. It requires the `-Name` parameter (the domain name) and optionally accepts the `-Property` parameter (specifying properties to be returned) and common parameters. It is used to retrieve the DNS records necessary to verify domain ownership in Microsoft Entra ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDomainVerificationDnsRecord.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaDomainVerificationDnsRecord\n -Name <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get List of SKUs - PowerShell\nDESCRIPTION: This example shows how to connect to Entra ID and retrieve a list of SKUs using `Get-EntraAccountSku`. It first connects using `Connect-Entra` with the required scopes, then calls `Get-EntraAccountSku` to retrieve the SKUs. The output displays details about each SKU, such as ID, Account ID, and SkuPartNumber.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAccountSku.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All', 'LicenseAssignment.Read.All'\nGet-EntraAccountSku\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId                                                                        AccountId                            AccountName   AppliesTo CapabilityStatus ConsumedUnits SkuId                                SkuPartNumber\n--                                                                        ---------                            -----------   --------- ---------------- ------------- -----                                -------\neeeeeeee-4444-5555-6666-ffffffffffff aaaabbbb-0000-cccc-1111-dddd2222eeee Contoso-User  User      Suspended        20            aaaaaaaa-0b0b-1c1c-2d2d-333333333333 EMSPRE…\nffffffff-5555-6666-7777-aaaaaaaaaaaa aaaabbbb-0000-cccc-1111-dddd2222eeee Contoso-User  User      Suspended        20            bbbbbbbb-1c1c-2d2d-3e3e-444444444444 ENTERP…\ndddddddd-3333-4444-5555-eeeeeeeeeeee aaaabbbb-0000-cccc-1111-dddd2222eeee Contoso-User  User      Suspended        2             cccccccc-2d2d-3e3e-4f4f-555555555555 ENTERP…\n```\n\n----------------------------------------\n\nTITLE: Get Top N User Owned Devices\nDESCRIPTION: Retrieves a limited number of registered devices owned by the specified user, using the -Top parameter to specify the maximum number of devices to return. In this example, it retrieves the top one device.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserOwnedDevice.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraUserOwnedDevice -UserId 'SawyerM@contoso.com' -Top 1\n```\n\n----------------------------------------\n\nTITLE: Retrieve Service Principal Key Credential (PowerShell)\nDESCRIPTION: This example demonstrates how to retrieve key credentials for a service principal using the Get-EntraBetaServicePrincipalKeyCredential cmdlet. It first connects to Entra ID and retrieves the service principal object using Get-EntraBetaServicePrincipal. Then uses the ServicePrincipalId parameter of the Get-EntraBetaServicePrincipalKeyCredential to get key credentials. Requires the Application.Read.All scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalKeyCredential.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraBetaServicePrincipalKeyCredential -ServicePrincipalId $servicePrincipal.Id\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition for -Path\nDESCRIPTION: Defines the -Path parameter for the `Test-EntraScript` command, which accepts an array of strings representing the paths to the script files to be scanned. It is a required parameter and accepts pipeline input by property name and value.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Test-EntraScript.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: String[]\nParameter Sets: (All)\nAliases: FullName, Name\n\nRequired: True\nPosition: 1\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Tags Definition (YAML)\nDESCRIPTION: Defines custom strings used for categorizing and identifying the application.  This allows for organization and searching of applications. The data type is a generic list of strings.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraApplication.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[System.String]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Remove-EntraApplication Syntax - PowerShell\nDESCRIPTION: This snippet shows the syntax for the Remove-EntraApplication cmdlet. It requires the ApplicationId parameter to specify the application to remove. It supports common parameters for debugging, error handling, and output redirection.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraApplication.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraApplication\n -ApplicationId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get All Authorization Policies - Example - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all authorization policies.  It first connects to Entra with the 'Policy.Read.All' scope and then uses the `Get-EntraBetaAuthorizationPolicy` cmdlet without any parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAuthorizationPolicy.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.All'\nGet-EntraBetaAuthorizationPolicy\n```\n\n----------------------------------------\n\nTITLE: List Applications Outside Tenant - PowerShell\nDESCRIPTION: This PowerShell snippet retrieves applications (service principals) that are registered outside the current tenant. It connects to Entra ID using Connect-Entra with the 'Application.Read.All' scope, retrieves the current tenant ID, gets all service principals, filters them to find those with a different AppOwnerOrganizationId than the current tenant ID, and then displays the relevant properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipal.md#_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$tenantId = Get-EntraContext | Select-Object -ExpandProperty TenantId\n$servicePrincipals = Get-EntraBetaServicePrincipal -All -Property AppOwnerOrganizationId, Id, DisplayName, AppId\n$externalServicePrincipals = $servicePrincipals | Where-Object { $_.AppOwnerOrganizationId -ne $tenantId }\n$externalServicePrincipals | Select-Object DisplayName, Id, AppId, AppOwnerOrganizationId | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: New Attribute Set Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the New-EntraBetaAttributeSet cmdlet. This cmdlet allows the creation of new attribute sets with specified descriptions, maximum attributes per set, and attribute set IDs. The signed-in user must be assigned the Attribute Definition Administrator role.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaAttributeSet.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-EntraBetaAttributeSet\n [-Description <String>]\n [-MaxAttributesPerSet <Int32>]\n [-AttributeSetId <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Set User Extension - Single Value - PowerShell\nDESCRIPTION: This cmdlet updates a user's extension attribute with a single value. It requires the User ID, Extension Name, and Extension Value as parameters. The Connect-Entra cmdlet needs to be executed beforehand with the appropriate scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUserExtension.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-EntraUserExtension\n -UserId <String>\n -ExtensionName <String>\n -ExtensionValue <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: List User's Directory Roles - Entra ID - PowerShell\nDESCRIPTION: This example shows how to list a user's assigned directory roles in Microsoft Entra ID. It connects to Entra ID using the User.Read.All scope, then uses the Get-EntraBetaUserMembership cmdlet to retrieve user memberships. The output is filtered to show only directory roles, and then specific properties are selected and formatted for display.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserMembership.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraBetaUserMembership -UserId 'SawyerM@contoso.com' |\nWhere-Object { $_.'@odata.type' -eq '#microsoft.graph.directoryRole' } |\nSelect-Object Id, displayName, Description, RoleTemplateId, '@odata.type' |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Connect to a specific environment\nDESCRIPTION: Connects to Microsoft Entra ID in a specified environment (e.g., Global, China, USGov). By default, the cmdlet targets the global public cloud. Get-EntraEnvironment can display available environments.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Connect-Entra.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraEnvironment\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Environment 'Global'\n```\n\n----------------------------------------\n\nTITLE: Get contact direct reports\nDESCRIPTION: Retrieves the direct reports of a specified organizational contact. It first connects to Entra ID with the 'OrgContact.Read.All' scope and then uses the contact's ID to retrieve its direct reports. The contact ID is passed using the `-OrgContactId` parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaContactDirectReport.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'OrgContact.Read.All'\n$contact = Get-EntraBetaContact -Filter \"displayName eq 'Contoso Contact'\"\nGet-EntraBetaContactDirectReport -OrgContactId $contact.Id\n```\n\n----------------------------------------\n\nTITLE: Get Top N Role Assignments - PowerShell\nDESCRIPTION: Retrieves a specified number (`-Top 2` in this example) of role assignments. It requires connecting to Entra ID and uses the `-Top` parameter to limit the number of returned results. This is useful for paginating or sampling role assignments.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirectoryRoleAssignment.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory', 'EntitlementManagement.Read.All'\nGet-EntraBetaDirectoryRoleAssignment -Top 2\n```\n\n----------------------------------------\n\nTITLE: Retrieve Thumbnail Photo by Id\nDESCRIPTION: This example demonstrates how to retrieve the thumbnail photo of a user by specifying their UserId.  It first connects to Entra using the Connect-Entra cmdlet with the necessary scopes ('User.Read','User.Read.All').  Then, it uses Get-EntraBetaUserThumbnailPhoto to retrieve the thumbnail for the user 'SawyerM@contoso.com'.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserThumbnailPhoto.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read','User.Read.All'\nGet-EntraBetaUserThumbnailPhoto -UserId 'SawyerM@contoso.com'\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId      Height Width\n--      ------ -----\ndefault 292    278\n```\n\n----------------------------------------\n\nTITLE: Setting Directory Synchronization Settings for a Tenant - PowerShell\nDESCRIPTION: This snippet shows how to set directory synchronization settings for a specific tenant using the Set-EntraBetaDirSyncConfiguration cmdlet. It first connects to Entra ID, retrieves the tenant ID, and then sets the accidental deletion threshold, specifies the tenant ID, and forces the command to run without confirmation. The Connect-Entra command requires the OnPremDirectorySynchronization.ReadWrite.All scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaDirSyncConfiguration.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'OnPremDirectorySynchronization.ReadWrite.All'\n$tenantID = (Get-EntraContext).TenantId\nSet-EntraBetaDirSyncConfiguration -AccidentalDeletionThreshold 600 -TenantId $tenantID -Force\n```\n\n----------------------------------------\n\nTITLE: Get Application Service Endpoint by ID (PowerShell)\nDESCRIPTION: This example shows how to retrieve the service endpoint of an application using its Service Principal ID.  It first connects to Entra ID and retrieves the Service Principal using a filter on the DisplayName.  Then, it calls Get-EntraApplicationServiceEndpoint using the retrieved Service Principal's ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplicationServiceEndpoint.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"DisplayName eq 'Contoso Helpdesk App'\"\nGet-EntraApplicationServiceEndpoint -ServicePrincipalId $servicePrincipal.Id\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - Types - YAML\nDESCRIPTION: This YAML snippet defines the `-Types` parameter for the `Get-EntraBetaObjectByObjectId` cmdlet. It specifies that the parameter accepts a list of strings, is optional, and does not accept pipeline input or wildcard characters. It represents the types of objects that will be returned.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaObjectByObjectId.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[System.String]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Owner of a Service Principal\nDESCRIPTION: This snippet demonstrates how to retrieve the owner(s) of a service principal. It uses `Get-EntraServicePrincipal` to find the service principal and `Get-EntraServicePrincipalOwner` to fetch its owners. It requires the `Application.ReadWrite.All` scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-apps.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraServicePrincipalOwner -ServicePrincipalId $servicePrincipal.Id -All | Select-Object Id, DisplayName, '@odata.type'\n```\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\" | Get-EntraServicePrincipalOwner | Select-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Remove Group from Lifecycle Policy - PowerShell\nDESCRIPTION: This example demonstrates how to remove a group from a lifecycle policy in Microsoft Entra ID with specified Id and groupId. It uses Connect-Entra to connect to Entra ID with the required scopes, Get-EntraGroup to retrieve the group, Get-EntraLifecyclePolicyGroup to get the lifecycle policy, and then Remove-EntraLifecyclePolicyGroup to remove the group from the policy.\n\nDependencies: Microsoft.Entra module.\n\nParameters:\n- GroupLifecyclePolicyId: Specifies the lifecycle policy object ID.\n- GroupId: Specifies the ID of the Office365 group.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraLifecyclePolicyGroup.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\n$group = Get-EntraGroup -Filter \"DisplayName eq 'Office365 group'\"\n$policy = Get-EntraLifecyclePolicyGroup -Id $group.Id\nRemove-EntraLifecyclePolicyGroup -GroupLifecyclePolicyId $policy.Id -GroupId $group.Id\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition for -Top\nDESCRIPTION: Defines the `-Top` parameter for the `Get-EntraTenantDetail` cmdlet. It specifies the maximum number of records to return, and `-Limit` can be used as an alias.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraTenantDetail.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Int32\nParameter Sets: (All)\nAliases: Limit\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get All Group Lifecycle Policies - PowerShell\nDESCRIPTION: This code snippet retrieves all group lifecycle policies in Microsoft Entra ID. It requires the 'Directory.Read.All' scope and uses the Get-EntraGroupLifecyclePolicy cmdlet without any specific parameters.\n\nDependencies: Microsoft.Entra module, Connect-Entra cmdlet.\n\nOutput: Displays a list of group lifecycle policies with their properties like ID, alternate notification emails, group lifetime, and managed group types.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraGroupLifecyclePolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\nGet-EntraGroupLifecyclePolicy\n```\n\n----------------------------------------\n\nTITLE: Filter Parameter Definition - YAML\nDESCRIPTION: Defines the '-Filter' parameter for Get-EntraContract, which allows specifying an OData v4.0 filter statement. It controls which objects are returned.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraContract.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: GetQuery\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get a Single User Authentication Method Result - PowerShell\nDESCRIPTION: This example retrieves a single user's registered authentication method detail using the `Get-EntraAuthenticationMethodUserRegistrationDetailReport` cmdlet with the `-Top` parameter. It connects to Entra ID with the necessary scopes and formats the output as a table. The Microsoft.Entra module is required.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAuthenticationMethodUserRegistrationDetailReport.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All'\nGet-EntraAuthenticationMethodUserRegistrationDetailReport -Top 1 | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Parameter definition for RoleTemplateId\nDESCRIPTION: This YAML snippet defines the RoleTemplateId parameter for the Enable-EntraDirectoryRole cmdlet. It specifies that the parameter is a string, is not required but can be used, and does not accept pipeline input or wildcard characters. The parameter takes the ID of the Role template to enable.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Enable-EntraDirectoryRole.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Authorization Policy (No ID) - PowerShell\nDESCRIPTION: This cmdlet retrieves all authorization policies. It requires the 'Policy.Read.All' scope.  It returns a list of authorization policies and their properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAuthorizationPolicy.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaAuthorizationPolicy\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get All Identity Providers - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all configured identity providers and their properties using the Get-EntraIdentityProvider cmdlet. It first establishes a connection to Entra ID with the necessary scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraIdentityProvider.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'IdentityProvider.Read.All'\nGet-EntraIdentityProvider\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n```Output\nId                   DisplayName\n--                   -----------\nAADSignup-OAUTH      Directory Sign up\nGoogle-OAUTH         Test\nEmailOtpSignup-OAUTH Email One Time Passcode\nMSASignup-OAUTH      Microsoft Account\n```\n```\n\n----------------------------------------\n\nTITLE: Get All Service Endpoints - PowerShell\nDESCRIPTION: This example demonstrates retrieving all service endpoints associated with a specified application.  It first connects to Entra ID using Connect-Entra cmdlet and the 'Application.Read.All' scope, retrieves the service principal via Get-EntraBetaServicePrincipal filtered by display name, and then calls Get-EntraBetaApplicationServiceEndpoint with the -All parameter to fetch all endpoints.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationServiceEndpoint.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"DisplayName eq 'Contoso Helpdesk App'\"\nGet-EntraBetaApplicationServiceEndpoint -ServicePrincipalId $servicePrincipal.Id -All\n```\n\n----------------------------------------\n\nTITLE: Remove Delegated Permission Classification - PowerShell\nDESCRIPTION: This PowerShell code snippet demonstrates how to remove a delegated permission classification from a service principal using the `Remove-EntraServicePrincipalDelegatedPermissionClassification` cmdlet. It first connects to Entra ID with the required scopes, retrieves the service principal and the specific permission classification to be removed, and then removes the classification. Requires the 'Policy.ReadWrite.PermissionGrant' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraServicePrincipalDelegatedPermissionClassification.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.PermissionGrant'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\n$permissionClassification = Get-EntraServicePrincipalDelegatedPermissionClassification -ServicePrincipalId $servicePrincipal.Id | Where-Object {$_.PermissionName -eq 'Sites.Read.All'}\nRemove-EntraServicePrincipalDelegatedPermissionClassification -ServicePrincipalId $servicePrincipal.Id -Id $permissionClassification.Id\n```\n\n----------------------------------------\n\nTITLE: Get a single result\nDESCRIPTION: This example shows how to retrieve a single user registration detail.  It connects using `Connect-Entra`, and then uses `Get-EntraBetaAuthenticationMethodUserRegistrationDetailReport` with the `-Top` parameter set to 1 to retrieve only the first record. The result is then formatted for display.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAuthenticationMethodUserRegistrationDetailReport.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All'\nGet-EntraBetaAuthenticationMethodUserRegistrationDetailReport -Top 1 | Format-Table -AutoSize\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                   IsAdmin IsMfaCapable IsMfaRegistered IsPasswordlessCapable IsSsprCapable \n--                                   ------- ------------ --------------- --------------------- -------------\naaaaaaaa-0000-1111-2222-bbbbbbbbbbbb True    False        False           False                 True \n```\n\n----------------------------------------\n\nTITLE: Remove Entra Directory Role Definition Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Remove-EntraDirectoryRoleDefinition cmdlet in PowerShell. It shows the required parameter -UnifiedRoleDefinitionId, which specifies the ID of the role definition to be removed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraDirectoryRoleDefinition.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraDirectoryRoleDefinition\n -UnifiedRoleDefinitionId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - Property - YAML\nDESCRIPTION: This YAML snippet defines the `-Property` parameter for the `Get-EntraBetaObjectByObjectId` cmdlet. It specifies that the parameter accepts a string array, is optional, and does not accept pipeline input or wildcard characters. It allows specifying which properties should be returned.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaObjectByObjectId.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Groups with All Parameter\nDESCRIPTION: This PowerShell script retrieves all recoverable deleted groups in the directory using the `-All` parameter. It connects to Entra ID with the necessary scopes and then uses `Get-EntraBetaDeletedGroup` with the `-All` parameter to retrieve all deleted groups.  It selects specific properties and formats the output as a table. It requires the 'Group.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedGroup.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Group.Read.All'\nGet-EntraBetaDeletedGroup -All | Select-Object Id, DisplayName, MailNickname, GroupTypes, DeletedDateTime, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get Global Secure Access Apps - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all Global Secure Access apps by filtering based on tags. It connects to Entra ID and uses `Get-EntraBetaServicePrincipal` with a filter to select service principals that have either the 'PrivateAccessNonWebApplication' or 'NetworkAccessManagedApplication' tag. The output displays the properties of the retrieved Global Secure Access apps.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipal.md#_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraBetaServicePrincipal -Filter \"tags/Any(x: x eq 'PrivateAccessNonWebApplication') or tags/Any(x: x eq 'NetworkAccessManagedApplication')\"\n```\n\n----------------------------------------\n\nTITLE: New-EntraBetaUser Syntax\nDESCRIPTION: Defines the syntax for the New-EntraBetaUser cmdlet. This shows the parameters that can be used when creating a new Microsoft Entra ID user. It lists mandatory and optional parameters for the cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaUser.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-EntraBetaUser\n -DisplayName <String>\n -AccountEnabled <Boolean>\n -PasswordProfile <PasswordProfile>\n [-PostalCode <String>]\n [-MailNickName <String>]\n [-ShowInAddressList <Boolean>]\n [-Department <String>]\n [-TelephoneNumber <String>]\n [-PreferredLanguage <String>]\n [-Mobile <String>]\n [-JobTitle <String>]\n [-ConsentProvidedForMinor <String>]\n [-PhysicalDeliveryOfficeName <String>]\n [-PasswordPolicies <String>]\n [-IsCompromised <Boolean>]\n [-SignInNames <System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.SignInName]>]\n [-OtherMails <System.Collections.Generic.List`1[System.String]>]\n [-UserState <String>]\n [-ImmutableId <String>]\n [-City <String>]\n [-AgeGroup <String>]\n [-ExtensionProperty <System.Collections.Generic.Dictionary`2[System.String,System.String]>]\n [-UsageLocation <String>]\n [-UserStateChangedOn <String>]\n [-Country <String>]\n [-UserPrincipalName <String>]\n [-GivenName <String>]\n [-UserType <String>]\n [-StreetAddress <String>]\n [-State <String>]\n [-CompanyName <String>]\n [-FacsimileTelephoneNumber <String>]\n [-Surname <String>]\n [-CreationType <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Set Entra Group Security Enabled - PowerShell\nDESCRIPTION: This example demonstrates how to update the security enabled property of a specified group in Microsoft Entra ID. It retrieves the group and pipes the output to Set-EntraBetaGroup to set the SecurityEnabled parameter to true.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaGroup.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All'\n$group = Get-EntraBetaGroup -Filter \"DisplayName eq 'HelpDesk Team Leaders'\"\nGet-EntraBetaGroup -Filter \"displayName eq 'HelpDesk Team Leaders'\" | Set-EntraBetaGroup -SecurityEnabled $true\n```\n\n----------------------------------------\n\nTITLE: List Users, Licenses, and Source\nDESCRIPTION: This PowerShell snippet retrieves a list of users, their assigned licenses, and the source of the license assignment (direct or group-based). It uses multiple cmdlets to gather user and group information. The script requires 'Organization.Read.All', 'User.Read.All', 'Group.Read.All', and 'LicenseAssignment.Read.All' scopes. It also employs hashtables to store group display names and SKU part numbers for efficient lookup.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaSubscribedSku.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All', 'User.Read.All', 'Group.Read.All', 'LicenseAssignment.Read.All'\n\n# Get all users with specified properties\n$Users = Get-EntraBetaUser -All -Property AssignedLicenses, LicenseAssignmentStates, DisplayName, UserPrincipalName, ObjectId\n\n$SelectedUsers = $Users | Select-Object ObjectId, UserPrincipalName, DisplayName, AssignedLicenses -ExpandProperty LicenseAssignmentStates\n\n# Group Name lookup\n$GroupDisplayNames = @{}\n\n# Sku Part Number lookup\n$SkuPartNumbers = @{}\n\n# Populate the hashtable with group display names and SKU part numbers\nforeach ($User in $SelectedUsers) {\n    $AssignedByGroup = $User.AssignedByGroup\n    $SkuId = $User.SkuId\n\n    try {\n        # Check if the group display name is already in the hashtable\n        if (-not $GroupDisplayNames.ContainsKey($AssignedByGroup)) {\n            $Group = Get-EntraBetaGroup -GroupId $AssignedByGroup\n            $GroupDisplayNames[$AssignedByGroup] = $Group.DisplayName\n        }\n\n        $User | Add-Member -NotePropertyName 'GroupDisplayName' -NotePropertyValue $GroupDisplayNames[$AssignedByGroup]\n    }\n    catch {\n        $User | Add-Member -NotePropertyName 'GroupDisplayName' -NotePropertyValue 'N/A (Direct Assignment)'\n    }\n\n    try {\n        # Check if the SKU part number is already in the hashtable\n        if (-not $SkuPartNumbers.ContainsKey($SkuId)) {\n            $Sku = Get-EntraBetaSubscribedSku | Where-Object { $_.SkuId -eq $SkuId } | Select-Object -ExpandProperty SkuPartNumber\n            $SkuPartNumbers[$SkuId] = $Sku\n        }\n\n        $User | Add-Member -NotePropertyName 'SkuPartNumber' -NotePropertyValue $SkuPartNumbers[$SkuId]\n    }\n    catch {\n        $User | Add-Member -NotePropertyName 'SkuPartNumber' -NotePropertyValue 'N/A'\n    }\n}\n\n$SelectedUsers | Format-Table UserPrincipalName, DisplayName, AssignedByGroup, GroupDisplayName, SkuId, SkuPartNumber, State, Error -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get All Device Registered Owners - Specific Device\nDESCRIPTION: This example retrieves all registered owners of a device. It requires connecting to Entra ID with the 'Device.Read.All' scope. The script then retrieves a specific device and uses the `Get-EntraDeviceRegisteredOwner` cmdlet with the `-All` parameter to get all registered owners, displaying selected properties in a table.\n\nDependencies: Microsoft.Entra module, Device.Read.All scope\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeviceRegisteredOwner.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\n$device = Get-EntraDevice -SearchString '<device-display-name>'\nGet-EntraDeviceRegisteredOwner -DeviceId $device.Id -All |\nSelect-Object Id, displayName, UserPrincipalName, createdDateTime, userType, accountEnabled |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Creating delegated permission grant for all users - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to create a delegated permission grant that authorizes a client service principal to impersonate all users when accessing a resource service principal. It first connects to Entra ID, retrieves the service principals for the client and resource, and then uses the New-EntraOauth2PermissionGrant cmdlet with the ConsentType set to 'AllPrincipals'. The Scope is set to 'Directory.Read.All'. The script also sets an expiry time for the grant.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraOauth2PermissionGrant.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'DelegatedPermissionGrant.ReadWrite.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"DisplayName eq 'Contoso Marketing'\"\n$graphApp = Get-EntraServicePrincipal -Filter \"AppId eq '00000003-0000-0000-c000-000000000000'\"\n$params = @{\n    ClientId = $servicePrincipal.Id\n    ConsentType = 'AllPrincipals'\n    ResourceId = $graphApp.Id\n    Scope = 'Directory.Read.All'\n    StartTime = Get-Date\n    ExpiryTime = (Get-Date).AddYears(1)\n}\nNew-EntraOauth2PermissionGrant @params\n```\n\n----------------------------------------\n\nTITLE: Removing Group Lifecycle Policy Syntax - PowerShell\nDESCRIPTION: This snippet shows the syntax for the Remove-EntraGroupLifecyclePolicy cmdlet, which is used to delete a group lifecycle policy object. It requires the GroupLifecyclePolicyId parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraGroupLifecyclePolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraGroupLifecyclePolicy\n -GroupLifecyclePolicyId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Defining -PasswordCredentials Parameter in YAML\nDESCRIPTION: This YAML snippet defines the `-PasswordCredentials` parameter, specifying its type as a list of `PasswordCredential` objects, indicating it's an optional named parameter with no default value, and doesn't accept pipeline input or wildcard characters. It specifies password credentials.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplication.md#_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.PasswordCredential]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Setting PreAuthorizedApplications Parameter\nDESCRIPTION: This parameter lists applications and requested permissions for implicit consent. If an administrator has provided consent, users don't need to consent to permissions listed here.  Additional requested permissions not listed require user consent.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplication.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.PreAuthorizedApplication]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Add AppRole to Application (Example 6)\nDESCRIPTION: This example shows how to add an AppRole to an application. It involves creating a new AppRole object with properties like AllowedMemberTypes, Description, DisplayName, Id, IsEnabled, and Value, then using Set-EntraBetaApplication to update the application with the new role. To keep existing roles, they need to be included in the request, as any roles not present will be replaced. The example also shows setting Tags.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplication.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraBetaApplication -SearchString 'Contoso Helpdesk Application'\n$appRole = New-Object Microsoft.Open.MSGraph.Model.AppRole\n$appRole.AllowedMemberTypes = @(\"User\", \"Application\")\n$appRole.Description = \"General role\"\n$appRole.DisplayName = \"General\"\n$appRole.Id = [guid]::NewGuid()\n$appRole.IsEnabled = $true\n$appRole.Value = \"General\"\n$tags = \"WindowsAzureActiveDirectoryIntegratedApp\"\nSet-EntraBetaApplication -ApplicationId $application.Id -AppRoles $appRole -Tags $tags\n```\n\n----------------------------------------\n\nTITLE: Get All Named Location Policies PowerShell\nDESCRIPTION: This example retrieves a list of all named location policies in Microsoft Entra ID. It first connects to Entra ID using the Connect-Entra cmdlet with the 'Policy.Read.All' scope and then uses Get-EntraBetaNamedLocationPolicy to fetch the policies.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaNamedLocationPolicy.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.All'\nGet-EntraBetaNamedLocationPolicy\n```\n\n----------------------------------------\n\nTITLE: List users, licenses and licensing source PowerShell\nDESCRIPTION: This PowerShell code snippet retrieves a list of users, their assigned licenses, and the source of licensing (direct or group assignment).  It involves connecting to Entra, retrieving user and group information, and then constructing a table with relevant properties like UserPrincipalName, DisplayName, and licensing details.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraSubscribedSku.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All', 'User.Read.All', 'Group.Read.All', 'LicenseAssignment.Read.All'\n\n# Get all users with specified properties\n$Users = Get-EntraUser -All -Property AssignedLicenses, LicenseAssignmentStates, DisplayName, UserPrincipalName, ObjectId\n\n$SelectedUsers = $Users | Select-Object ObjectId, UserPrincipalName, DisplayName, AssignedLicenses -ExpandProperty LicenseAssignmentStates\n\n# Group Name lookup\n$GroupDisplayNames = @{}\n\n# Sku Part Number lookup\n$SkuPartNumbers = @{}\n\n# Populate the hashtable with group display names and SKU part numbers\nforeach ($User in $SelectedUsers) {\n    $AssignedByGroup = $User.AssignedByGroup\n    $SkuId = $User.SkuId\n\n    try {\n        # Check if the group display name is already in the hashtable\n        if (-not $GroupDisplayNames.ContainsKey($AssignedByGroup)) {\n            $Group = Get-EntraGroup -GroupId $AssignedByGroup\n            $GroupDisplayNames[$AssignedByGroup] = $Group.DisplayName\n        }\n\n        $User | Add-Member -NotePropertyName 'GroupDisplayName' -NotePropertyValue $GroupDisplayNames[$AssignedByGroup]\n    }\n    catch {\n        $User | Add-Member -NotePropertyName 'GroupDisplayName' -NotePropertyValue 'N/A (Direct Assignment)'\n    }\n\n    try {\n        # Check if the SKU part number is already in the hashtable\n        if (-not $SkuPartNumbers.ContainsKey($SkuId)) {\n            $Sku = Get-EntraSubscribedSku | Where-Object { $_.SkuId -eq $SkuId } | Select-Object -ExpandProperty SkuPartNumber\n            $SkuPartNumbers[$SkuId] = $Sku\n        }\n\n        $User | Add-Member -NotePropertyName 'SkuPartNumber' -NotePropertyValue $SkuPartNumbers[$SkuId]\n    }\n    catch {\n        $User | Add-Member -NotePropertyName 'SkuPartNumber' -NotePropertyValue 'N/A'\n    }\n}\n\n$SelectedUsers | Format-Table UserPrincipalName, DisplayName, AssignedByGroup, GroupDisplayName, SkuId, SkuPartNumber, State, Error -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition -Filter - YAML\nDESCRIPTION: This YAML snippet defines the '-Filter' parameter for a PowerShell cmdlet.  It specifies that it accepts a string value, that it's part of the GetQuery parameter set, and that it can accept pipeline input by property name or value.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipal.md#_snippet_15\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: GetQuery\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Syntax of Get-EntraBetaTenantDetail (PowerShell)\nDESCRIPTION: This block shows the syntax for using the Get-EntraBetaTenantDetail cmdlet, including its optional parameters. It shows that the -Top, -All, and -Property parameters can be used.  It also indicates that it supports common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaTenantDetail.md#_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaTenantDetail\n [-Top <Int32>]\n [-All]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Id Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the '-Id' parameter for the Get-EntraCustomSecurityAttributeDefinition cmdlet. It specifies that the parameter is a System.String, is required for the GetById parameter set, accepts pipeline input by property name and value, and does not accept wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraCustomSecurityAttributeDefinition.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: GetById\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Remove a Device - PowerShell\nDESCRIPTION: Demonstrates how to remove a specific device using Remove-EntraBetaDevice. It first connects to Entra ID with necessary scopes, retrieves the device using Get-EntraBetaDevice and its display name, and then removes it using its ID. Required scopes are 'Directory.AccessAsUser.All' and 'Device.ReadWrite.All'.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaDevice.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.AccessAsUser.All', 'Device.ReadWrite.All'\n$device = Get-EntraBetaDevice -Filter \"DisplayName eq 'Woodgrove Desktop'\"\nRemove-EntraBetaDevice -DeviceId $device.Id\n```\n\n----------------------------------------\n\nTITLE: Get-EntraIdentityProvider Syntax (GetQuery) - PowerShell\nDESCRIPTION: This snippet shows the syntax for using the Get-EntraIdentityProvider cmdlet with the GetQuery parameter set. It retrieves identity providers with optional property selection.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraIdentityProvider.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraIdentityProvider\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Entra Group Owners with PowerShell\nDESCRIPTION: This PowerShell command retrieves the owners of a specified Microsoft Entra group and displays their ID, DisplayName, and @odata.type properties. It first retrieves the group using Get-EntraGroup based on its display name, and then pipes the GroupId to Get-EntraGroupOwner to retrieve the owners. The output is then formatted using Select-Object. It requires the Microsoft Entra PowerShell module and appropriate permissions to read group ownership.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-groups.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\n$group = Get-EntraGroup -Filter \"displayName eq 'Contoso marketing'\"\nGet-EntraGroup -GroupId $group.Id | Get-EntraGroupOwner | Select-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Get Service Principal Owner Syntax - PowerShell\nDESCRIPTION: Defines the syntax for using the Get-EntraServicePrincipalOwner cmdlet. It shows the required parameters, optional parameters, and common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalOwner.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraServicePrincipalOwner\n -ServicePrincipalId <String>\n [-All]\n [-Top <Int32>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Update Microsoft.Entra.Beta Module\nDESCRIPTION: This command updates the Microsoft.Entra.Beta PowerShell module to the latest version. The `-Force` parameter forces the update, even if the module is currently loaded or in use.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/includes/update-entrapowershell-module.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nUpdate-Module -Name Microsoft.Entra.Beta -Force\n```\n\n----------------------------------------\n\nTITLE: Remove User with Search Results - PowerShell\nDESCRIPTION: Demonstrates how to remove a user by first searching for the user using Get-EntraBetaUser and then piping the result to Remove-EntraBetaUser. This requires connecting to Entra ID with the appropriate scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaUser.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nGet-EntraBetaUser -UserId 'SawyerM@Contoso.com' | Remove-EntraBetaUser\n```\n\n----------------------------------------\n\nTITLE: Create Role Definition w/ TemplateId (PowerShell)\nDESCRIPTION: Creates a new role definition with a specified template ID. The example showcases how to use the `-TemplateId` parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaDirectoryRoleDefinition.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory'\n$rolePermissions = New-object Microsoft.Open.MSGraph.Model.RolePermission\n$rolePermissions.AllowedResourceActions = @(\"microsoft.directory/applications/basic/read\")\nNew-EntraBetaDirectoryRoleDefinition -RolePermissions $rolePermissions -IsEnabled $false -DisplayName 'MyRoleDefinition' -TemplateId 'f2ef992c-3afb-46b9-b7cf-a126ee74c451'\n```\n\n----------------------------------------\n\nTITLE: Update Administrative Unit Properties - Set-EntraAdministrativeUnit (PowerShell)\nDESCRIPTION: This code snippet demonstrates how to update the DisplayName and Description of a specific administrative unit using the Set-EntraAdministrativeUnit cmdlet. It first connects to Entra ID, retrieves the target administrative unit, and then updates its properties. It requires the 'AdministrativeUnit.ReadWrite.All' scope.  The MembershipType is explicitly set to 'Assigned'.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraAdministrativeUnit.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.ReadWrite.All'\n$administrativeUnit = Get-EntraAdministrativeUnit -Filter \"DisplayName eq 'Pacific Administrative Unit'\"\nSet-EntraAdministrativeUnit -AdministrativeUnitId $administrativeUnit.Id -DisplayName 'Pacific Admin Unit' -Description 'Pacific Admin Unit Description' -MembershipType 'Assigned'\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - CustomKeyIdentifier YAML\nDESCRIPTION: Defines the CustomKeyIdentifier parameter for the New-EntraApplicationKeyCredential cmdlet. This parameter is optional and accepts a string value that specifies a custom key ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplicationKeyCredential.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Defining UserPrincipalName Property in YAML\nDESCRIPTION: Defines the UserPrincipalName property which specifies the user's user principal name. It specifies the data type, parameter set, aliases, required status, position, default value, and pipeline input/wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUser.md#_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Retrieve Service Principal Password Credential - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve the password credential of a service principal using the `Get-EntraServicePrincipalPasswordCredential` cmdlet. It first connects to Entra ID with the required scopes, retrieves a service principal by its display name, and then uses the service principal's ID to get the password credentials. Requires the Microsoft.Entra module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalPasswordCredential.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraServicePrincipalPasswordCredential -ServicePrincipalId $servicePrincipal.Id\n```\n\n----------------------------------------\n\nTITLE: Get Subscribed SKUs by ID\nDESCRIPTION: This PowerShell snippet retrieves a specific subscribed SKU using its SubscribedSkuId. It requires the 'Organization.Read.All' and 'LicenseAssignment.Read.All' scopes. The `-SubscribedSkuId` parameter specifies the ID of the SKU to retrieve.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaSubscribedSku.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All', 'LicenseAssignment.Read.All'\nGet-EntraBetaSubscribedSku -SubscribedSkuId 'aaaaaaaa-0b0b-1c1c-2d2d-333333333333'\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - Visibility (YAML)\nDESCRIPTION: This YAML snippet defines the '-Visibility' parameter for the Set-EntraAdministrativeUnit cmdlet. It specifies the data type, parameter set, aliases, whether it is required, its position, default value, and whether it accepts pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraAdministrativeUnit.md#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition -All - YAML\nDESCRIPTION: This YAML snippet defines the '-All' parameter for a PowerShell cmdlet, indicating it's a switch parameter. It specifies that the parameter is not required, has a default value of false, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipal.md#_snippet_14\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Top N Deleted Administrative Units\nDESCRIPTION: This PowerShell snippet retrieves the top 2 deleted administrative units.  The `-Top` parameter limits the number of results. Requires 'AdministrativeUnit.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedAdministrativeUnit.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.Read.All'\nGet-EntraDeletedAdministrativeUnit -Top 2 | Select-Object Id, DisplayName, MembershipType, Visibility, DeletedDateTime, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get One Registered Device - Entra ID PowerShell\nDESCRIPTION: This example retrieves a limited number (one in this case) of registered devices for a specific user in Microsoft Entra ID. It uses the `Get-EntraUserRegisteredDevice` cmdlet with the `-Top` parameter to limit the number of returned devices. The example requires the 'User.Read.All' scope for the Connect-Entra command. It selects and expands the AdditionalProperties to show device details.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserRegisteredDevice.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraUserRegisteredDevice -UserId 'SawyerM@contoso.com' -Top 1 | Select-Object Id -ExpandProperty AdditionalProperties\n```\n\n----------------------------------------\n\nTITLE: Configure PowerShell Proxy - PowerShell\nDESCRIPTION: This set of commands configures the PowerShell session to use the default network credentials for a proxy server. This is used when the system is behind a proxy and PowerShell needs to access external resources like the PowerShell Gallery. `$webClient = New-Object -TypeName System.Net.WebClient` creates a new web client object. `$webClient.Proxy.Credentials = [System.Net.CredentialCache]::DefaultNetworkCredentials` sets the credentials for the proxy to the default network credentials.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/troubleshooting.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n$webClient = New-Object -TypeName System.Net.WebClient\n$webClient.Proxy.Credentials = [System.Net.CredentialCache]::DefaultNetworkCredentials\n```\n\n----------------------------------------\n\nTITLE: AppRoleAssignmentRequired Parameter Definition\nDESCRIPTION: Defines the AppRoleAssignmentRequired parameter for the New-EntraBetaServicePrincipal cmdlet. It indicates whether an application role assignment is required.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaServicePrincipal.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Boolean\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: List Duplicate Devices - EntraBetaDevice - PowerShell\nDESCRIPTION: This example demonstrates how to list duplicate devices based on their display names and operating systems. It requires the 'Device.Read.All' scope.  It retrieves all devices, groups them by display name, filters for groups with more than one device, and then formats the output to show the name, operating system, and count of duplicates.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDevice.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraBetaDevice -All -Select DisplayName, OperatingSystem |\nGroup-Object DisplayName |\nWhere-Object { $_.Count -gt 1 } |\nSelect-Object Name, @{Name = \"OperatingSystem\"; Expression = { ($_.Group | Select-Object -First 1).OperatingSystem } }, Count | Sort-Object Count -Descending |\nFormat-Table Name, OperatingSystem, Count -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get Device with GetById Syntax - PowerShell\nDESCRIPTION: Retrieves a specific device from Microsoft Entra ID using its DeviceId.\nRequires the Microsoft.Entra module and appropriate permissions (e.g., Device.Read.All scope). The cmdlet returns a single device object matching the provided DeviceId. The DeviceId is a unique identifier for the device in Entra ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDevice.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraDevice\n -DeviceId <String>\n [-All]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Retrieve Domain Name References Example - PowerShell\nDESCRIPTION: This example demonstrates how to connect to Entra ID with the 'Domain.Read.All' scope and then retrieve the domain name reference objects for 'contoso.com'.  It selects the Id, DisplayName, and '@odata.type' properties for each returned object.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDomainNameReference.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Domain.Read.All'\nGet-EntraDomainNameReference -Name contoso.com | Select-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Set-EntraConditionalAccessPolicy Syntax\nDESCRIPTION: Defines the syntax of the Set-EntraConditionalAccessPolicy cmdlet, showing the available parameters for updating a conditional access policy. The cmdlet allows updating various attributes of a conditional access policy, such as PolicyId, Conditions, GrantControls, DisplayName, State, and SessionControls.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraConditionalAccessPolicy.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-EntraConditionalAccessPolicy\n -PolicyId <String>\n [-Conditions <ConditionalAccessConditionSet>]\n [-GrantControls <ConditionalAccessGrantControls>]\n [-DisplayName <String>]\n [-Id <String>]\n [-State <String>]\n [-SessionControls <ConditionalAccessSessionControls>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Enable-EntraBetaDirectoryRole Syntax\nDESCRIPTION: Shows the syntax of the Enable-EntraBetaDirectoryRole cmdlet. It takes an optional RoleTemplateId parameter and supports common parameters. It requires the Microsoft.Entra.Beta module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Enable-EntraBetaDirectoryRole.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nEnable-EntraBetaDirectoryRole\n [-RoleTemplateId <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Configuring PublicClient Parameter\nDESCRIPTION: This parameter specifies whether the application is a public client, such as one running on a mobile device.  The default is false. It accepts a PublicClientApplication object.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplication.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nType: PublicClientApplication\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Administrative Unit Creation Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the New-EntraBetaAdministrativeUnit cmdlet, outlining the required and optional parameters for creating an administrative unit in Microsoft Entra ID. It shows the cmdlet's structure and the available parameters such as DisplayName, Description, MembershipType, MembershipRule, MembershipRuleProcessingState, and Visibility. CommonParameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaAdministrativeUnit.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-EntraBetaAdministrativeUnit\n -DisplayName <String>\n [-Description <String>]\n [-MembershipType <String>]\n [-MembershipRule <String>]\n [-MembershipRuleProcessingState <String>]\n [-Visibility <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get All Trust Framework Policies - PowerShell\nDESCRIPTION: This snippet retrieves the list of all trust framework policies in the directory. It requires the 'Policy.Read.All' and 'Policy.ReadWrite.TrustFramework' scopes to be granted. The output displays the IDs of the trust framework policies.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaTrustFrameworkPolicy.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.All', 'Policy.ReadWrite.TrustFramework'\nGet-EntraBetaTrustFrameworkPolicy\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n```Output\n                                             Id                                                                                                               ---\n                                              B2C_1A_SIGNUP_SIGNIN                                                                                             B2C_1A_TRUSTFRAMEWORKBASE\nB2C_1A_TRUSTFRAMEWORKEXTENSIONS\n```\n```\n\n----------------------------------------\n\nTITLE: Connect with Certificate Name\nDESCRIPTION: Connects to Microsoft Entra ID using the certificate name. Requires ClientId and TenantId.  The certificate needs to be installed on the machine.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Connect-Entra.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\n$params = @{\n    ClientId = '00001111-aaaa-2222-bbbb-3333cccc4444'\n    TenantId = 'aaaabbbb-0000-cccc-1111-dddd2222eeee'\n    CertificateName = 'YOUR_CERT_SUBJECT'\n}\n\nConnect-Entra @params\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n $Cert = Get-ChildItem Cert:\\LocalMachine\\My\\$CertThumbprint\n Connect-Entra -ClientId '<App-Id>' -TenantId '<Tenant-Id>' -Certificate $Cert\n```\n\n----------------------------------------\n\nTITLE: Definition of -Scopes Parameter in YAML\nDESCRIPTION: Defines the -Scopes parameter, which is an array of delegated permissions to consent to. It is a System.String array, is not required, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Connect-Entra.md#_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nType:  System.String[]\nParameter Sets: UserParameterSet\nAliases: \nRequired: False\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get-EntraDeletedDirectoryObject Syntax (PowerShell)\nDESCRIPTION: Defines the syntax for the `Get-EntraDeletedDirectoryObject` cmdlet. It requires a `DirectoryObjectId` and optionally accepts a `Property` parameter. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedDirectoryObject.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraDeletedDirectoryObject\n -DirectoryObjectId <String>\n [-Property <String[]>] \n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Connect with Certificate Object\nDESCRIPTION: Connects to Microsoft Entra ID using a certificate object retrieved from the certificate store.  Requires ClientId, TenantId, and the certificate object itself.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Connect-Entra.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\n$Cert = Get-ChildItem Cert:\\LocalMachine\\My\\$CertThumbprint\n$params = @{\n    ClientId = '00001111-aaaa-2222-bbbb-3333cccc4444'\n    TenantId = 'aaaabbbb-0000-cccc-1111-dddd2222eeee'\n    Certificate = $Cert\n}\n\nConnect-Entra @params\n```\n\n----------------------------------------\n\nTITLE: Install Microsoft Graph PowerShell v1.0 Modules\nDESCRIPTION: This PowerShell script installs the required modules for the Microsoft Graph PowerShell SDK v1.0. It first defines an array of module names, then iterates through the array, checking if each module is installed. If a module is not found, it is installed using the Install-Module cmdlet with the Scope parameter set to CurrentUser. This ensures that only the current user can access the modules.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/includes/install-entra-powershell-dependencies.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$RequiredModules = (@'\nMicrosoft.Graph.DirectoryObjects\nMicrosoft.Graph.Users\nMicrosoft.Graph.Users.Actions\nMicrosoft.Graph.Users.Functions\nMicrosoft.Graph.Groups\nMicrosoft.Graph.Identity.DirectoryManagement\nMicrosoft.Graph.Identity.Governance\nMicrosoft.Graph.Identity.SignIns\nMicrosoft.Graph.Applications\n'@).Split(\"`n\")\n\n# Check if the pre-requisite modules are installed and install them if needed\nforeach ($module in $RequiredModules) {\n    Write-Host -ForegroundColor Yellow -BackgroundColor DarkBlue \"Checking for $module\"\n    if (!(Get-Module -Name $module -ListAvailable)) {\n        Install-Module -Name $module -Scope CurrentUser\n    }\n}\n\n<# Attribution: https://github.com/SamErde and https://github.com/alexandair #>\n```\n\n----------------------------------------\n\nTITLE: Remove Entra Group App Role Assignment Syntax\nDESCRIPTION: This snippet shows the syntax for the Remove-EntraGroupAppRoleAssignment cmdlet. It requires the AppRoleAssignmentId and GroupId parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraGroupAppRoleAssignment.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraGroupAppRoleAssignment\n -AppRoleAssignmentId <String>\n -GroupId <String>\n[<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Executing Get-EntraUnsupportedCommand\nDESCRIPTION: This code snippet shows how to execute the `Get-EntraUnsupportedCommand` cmdlet in PowerShell. The cmdlet is part of the Microsoft.Entra module and likely retrieves information about unsupported commands. No specific parameters are shown in this example, indicating a basic invocation.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUnsupportedCommand.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraUnsupportedCommand\n```\n\n----------------------------------------\n\nTITLE: Listing Entra PowerShell Commands - PowerShell\nDESCRIPTION: This code snippet shows how to retrieve all available commands within the Microsoft Entra PowerShell module.  It leverages the `Get-Command` cmdlet with a wildcard to capture all modules starting with 'Microsoft.Entra'.  This can be used to discover available cmdlets.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/navigate-entraps.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-Command -Module Microsoft.Entra*\n```\n\n----------------------------------------\n\nTITLE: Update Service Principal Key Credentials - PowerShell\nDESCRIPTION: This example shows how to update the KeyCredentials of a service principal. It creates a new KeyCredential object, configures its properties (CustomKeyIdentifier, StartDate, Type, Usage, Value, EndDate), and then applies the changes to the specified service principal.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaServicePrincipal.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\n$creds = New-Object Microsoft.Open.AzureAD.Model.KeyCredential\n$creds.CustomKeyIdentifier = [System.Text.Encoding]::UTF8.GetBytes('Test')\n$startdate = Get-Date -Year 2024 -Month 10 -Day 10\n$creds.StartDate = $startdate\n$creds.Type = 'Symmetric'\n$creds.Usage = 'Sign'\n$creds.Value = [System.Text.Encoding]::UTF8.GetBytes('A')\n$creds.EndDate = Get-Date -Year 2025 -Month 12 -Day 20 \nSet-EntraBetaServicePrincipal -ServicePrincipalId $servicePrincipal.ObjectId -KeyCredentials $creds\n```\n\n----------------------------------------\n\nTITLE: Retrieve specific object setting example\nDESCRIPTION: This example shows how to retrieve a specific object setting from Microsoft Entra ID. It filters object settings by DisplayName after retrieving them based on TargetType and TargetObjectId.  It then retrieves the object setting by its ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaObjectSetting.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\n$group = Get-EntraBetaGroup -Filter \"DisplayName eq 'Sales and Marketing'\"\n$setting = Get-EntraBetaObjectSetting -TargetType 'Groups' -TargetObjectId $group.Id | Where-Object {$_.displayName -eq 'Group.Unified.Guest'}\nGet-EntraBetaObjectSetting -TargetType 'Groups' -TargetObjectId $group.Id -Id $setting.Id\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                   DisplayName         TemplateId\n--                                   -----------         ----------\naaaaaaaa-0000-1111-2222-bbbbbbbbbbbb Group.Unified.Guest 22cc22cc-dd33-ee44-ff55-66aa66aa66aa\n```\n\n----------------------------------------\n\nTITLE: Defining IsPersistentCookieEnabled Parameter\nDESCRIPTION: This YAML snippet defines the `-IsPersistentCookieEnabled` parameter. When set to true, it allows Application Proxy to set its access cookies to persist even after the web browser is closed. The cookies remain active until the access token expires or the user manually deletes them. The parameter is optional and takes a boolean value.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplicationProxyApplication.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Boolean\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Set Password SSO Credentials in Entra Beta - PowerShell\nDESCRIPTION: This PowerShell example demonstrates how to set password single-sign-on (SSO) credentials for a given ServicePrincipalId. It retrieves the service principal, creates password SSO credentials including the username and password fields, and then sets the credentials using the `Set-EntraBetaPasswordSingleSignOnCredential` cmdlet.  It requires the Microsoft.Entra.Beta module and appropriate scopes for application and directory read/write access.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaPasswordSingleSignOnCredential.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All', 'Directory.ReadWrite.All'\n$servicePrincipal = Get-EntraBetaservicePrincipal -SearchString '<service-principal-name>'\n$credentials = New-Object -TypeName Microsoft.Open.MSGraph.Model.PasswordSSOCredentials\n$credentials.Id = '<user-or-group-Id>'\n$creds1 = [Microsoft.Open.MSGraph.Model.PasswordSSOCredential]@{FieldId = \"param_emailOrUserName\"; Value = \"foobar@ms.com\"; Type = \"text\" }\n$creds2 = [Microsoft.Open.MSGraph.Model.PasswordSSOCredential]@{FieldId = \"param_password\"; Value = \"my-secret\"; Type = \"password\" }\n$credentials.Credentials = @($creds1, $creds2)\n\nSet-EntraBetaPasswordSingleSignOnCredential -ServicePrincipalId $servicePrincipal.Id -PasswordSSOCredential $credentials\n```\n\n----------------------------------------\n\nTITLE: Search Among Retrieved Devices - PowerShell\nDESCRIPTION: Connects to Entra ID and retrieves devices containing a specific string within their properties using the `-SearchString` parameter. Requires the Microsoft.Entra module and the 'Device.Read.All' scope. This example demonstrates free-text searching across device attributes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDevice.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraDevice -SearchString 'DESKTOP'\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDeletedDateTime Id                                   AccountEnabled ApproximateLastSignInDateTime ComplianceExpirationDateTime DeviceCategory DeviceId                             DeviceMetadata DeviceOwnership\n--------------- --                                   -------------- ----------------------------- ---------------------------- -------------- --------                             -------------- ---------------\n                bbbbbbbb-1111-2222-3333-cccccccccccc True                                                                                     eeeeeeee-4444-5555-6666-ffffffffffff MetaData\n```\n\n----------------------------------------\n\nTITLE: Get First N Logs - PowerShell\nDESCRIPTION: This command retrieves the first N audit logs from Microsoft Entra ID.  It connects to Entra ID using specified scopes and then uses the `Get-EntraAuditDirectoryLog` cmdlet with the `-Top` parameter set to 1.  `-Limit` can be used as an alias for `-Top`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAuditDirectoryLog.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All, Directory.Read.All'\nGet-EntraAuditDirectoryLog -Top 1\n```\n\n----------------------------------------\n\nTITLE: Set-EntraUserCBACertificateUserId Syntax - PowerShell\nDESCRIPTION: This snippet shows the syntax for the `Set-EntraUserCBACertificateUserId` cmdlet. It details the required and optional parameters including UserId, CertPath, Cert and CertificateMapping.\nIt requires a string for the UserId and a string array for CertificateMapping. CertPath and Cert are optional. If Cert is used, it must be a X509Certificate2 object.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUserCBACertificateUserId.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nSet-EntraUserCBACertificateUserId\n -UserId <string>\n [-CertPath <string>]\n [-Cert <System.Security.Cryptography.X509Certificates.X509Certificate2>]\n -CertificateMapping <string[]>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Devices - All\nDESCRIPTION: This PowerShell snippet retrieves a list of all deleted devices from Microsoft Entra ID. It uses Connect-Entra to establish a connection with the 'Device.Read.All' scope, then utilizes Get-EntraDeletedDevice with the -All parameter to retrieve all deleted devices. The results are then formatted into a table showing specific properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedDevice.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraDeletedDevice -All | Select-Object DeletedDateTime, Id, AccountEnabled, ApproximateLastSignInDateTime, DeviceId, DisplayName, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - EndDate YAML\nDESCRIPTION: Defines the EndDate parameter for the New-EntraApplicationKeyCredential cmdlet. This parameter is optional and accepts a DateTime object to specify the time when the key becomes invalid.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplicationKeyCredential.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.DateTime\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Role Settings with Filter - PowerShell\nDESCRIPTION: Retrieves role settings for a specific provider and resource using the Get-EntraBetaPrivilegedRoleSetting cmdlet with a filter. The filter targets a specific ResourceId and LastUpdatedBy.  Requires the 'PrivilegedAccess.Read.AzureAD', 'PrivilegedAccess.Read.AzureResources' and 'PrivilegedAccess.Read.AzureADGroup' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPrivilegedRoleSetting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'PrivilegedAccess.Read.AzureAD', 'PrivilegedAccess.Read.AzureResources' 'PrivilegedAccess.Read.AzureADGroup'\n$params = @{\n    ProviderId = 'aadRoles'\n    Filter = \"ResourceId eq 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb' and LastUpdatedBy  eq 'MOD Administrator'\"\n}\nGet-EntraBetaPrivilegedRoleSetting @params\n```\n\n----------------------------------------\n\nTITLE: Update Device Display Name - PowerShell\nDESCRIPTION: This snippet demonstrates how to update the display name of a specified device in Microsoft Entra ID using the Set-EntraBetaDevice cmdlet. It first connects to Entra ID, retrieves a device by its display name, and then updates the display name using Set-EntraBetaDevice. Requires 'Directory.AccessAsUser.All' and 'Device.ReadWrite.All' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaDevice.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.AccessAsUser.All', 'Device.ReadWrite.All'\n$device = Get-EntraBetaDevice -Filter \"DisplayName eq 'Woodgrove Desktop'\"\nSet-EntraBetaDevice -DeviceObjectId $device.ObjectId -DisplayName 'My OS/2 computer'\n```\n\n----------------------------------------\n\nTITLE: Get Role Templates - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all role templates in Microsoft Entra ID using the `Get-EntraBetaDirectoryRoleTemplate` cmdlet. It requires connecting to Entra ID with the `RoleManagement.Read.Directory` scope using `Connect-Entra`. The output displays the `DeletedDateTime`, `Id`, and `Description` properties of each role template.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirectoryRoleTemplate.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory'\nGet-EntraBetaDirectoryRoleTemplate\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDeletedDateTime Id                                   Description\n-------------- --                                   -----------\n                62e90394-69f5-4237-9190-012177145e10 Can manage all aspects of Microsoft Entra ID and Microsoft services that use Microsoft Entra identities.\n                10dae51f-b6af-4016-8d66-8c2a99b929b3 Default role for guest users. Can read a limited set of directory information.\n                2af84b1e-32c8-42b7-82bc-daa82404023b Default role for guest users with restricted access. Can read a limited set of directory information.\n                95e79109-95c0-4d8e-aee3-d01accf2d47b Can invite guest users independent of the 'members can invite guests' setting.\n                fe930be7-5e62-47db-91af-98c3a49a38b1 Can manage all aspects of users and groups, including resetting passwords for limited admins.\n```\n\n----------------------------------------\n\nTITLE: Update Partner Support URL using Set-EntraBetaPartnerInformation (PowerShell)\nDESCRIPTION: This snippet demonstrates how to update the support URL for a partner using the Set-EntraBetaPartnerInformation cmdlet.  It requires the 'Organization.ReadWrite.All' scope and updates the PartnerSupportUrl property.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaPartnerInformation.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.ReadWrite.All'\nSet-EntraBetaPartnerInformation -PartnerSupportUrl 'http://www.test1.com'\n```\n\n----------------------------------------\n\nTITLE: Update Trust Framework Policy from Input File (Display) - PowerShell\nDESCRIPTION: This example updates a trust framework policy by reading the policy from an input file and displays the updated policy content on the screen.  It connects to Entra with required scopes, and uses `Set-EntraBetaTrustFrameworkPolicy` with the `InputFilePath` parameter to read and update the policy. The updated content is displayed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaTrustFrameworkPolicy.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.TrustFramework'\n$params = @{\n    Id  = 'B2C_1A_signup_signin'\n    InputFilePath =  'C:\\InputPolicy.xml'\n}\nSet-EntraBetaTrustFrameworkPolicy @params\n```\n\n----------------------------------------\n\nTITLE: Get Administrative Units for a User\nDESCRIPTION: This example demonstrates how to retrieve a list of administrative units to which a specific user belongs using the Get-EntraBetaUserAdministrativeUnit cmdlet. It requires the 'AdministrativeUnit.Read.All' scope. The -UserId parameter specifies the user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserAdministrativeUnit.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.Read.All'\nGet-EntraBetaUserAdministrativeUnit -UserId 'SawyerM@contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Update Identity Provider Client ID - PowerShell\nDESCRIPTION: This PowerShell snippet updates the Client ID of a specified identity provider. It first connects to Entra ID using the necessary scopes, then uses `Set-EntraBetaIdentityProvider` to modify the `ClientId`. The `-IdentityProviderBaseId` parameter identifies the provider, and `-ClientId` specifies the new Client ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaIdentityProvider.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'IdentityProvider.ReadWrite.All'\nSet-EntraBetaIdentityProvider -IdentityProviderBaseId 'Google-OAuth' -ClientId 'NewClientID'\n```\n\n----------------------------------------\n\nTITLE: Defining PostalCode Parameter in YAML\nDESCRIPTION: This YAML snippet defines the PostalCode parameter for a PowerShell cmdlet. It specifies the data type, parameter set, aliases, required status, position, default value, pipeline input, and wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUser.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Defining ConsentProvidedForMinor Property in YAML\nDESCRIPTION: Defines the ConsentProvidedForMinor property. Sets whether consent has to obtained for minors. Allowed values: null, granted, denied, and notRequired. It specifies the data type, parameter set, aliases, required status, position, default value, and pipeline input/wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUser.md#_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Update User in Federated Domain (Hybrid)\nDESCRIPTION: Updates a user's password in a domain that was recently converted from federated to standard authentication. This is specifically for hybrid password scenarios and requires both UserPrincipalName and NewPassword parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Update-EntraBetaUserFromFederated.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-EntraBetaUserFromFederated\n -UserPrincipalName <String>\n -NewPassword <SecureString>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove Deleted Application Object - PowerShell\nDESCRIPTION: This example demonstrates how to remove a recently deleted application object using the Remove-EntraBetaDeletedApplication command. It first connects to Entra ID with the required scopes, retrieves the deleted application using Get-EntraBetaDeletedApplication, and then removes it by specifying the application ID.  The calling user needs to have at least one of the following Microsoft Entra roles: Application Administrator, Cloud Application Administrator, or Hybrid Identity Administrator.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaDeletedApplication.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All'\n$deletedApplication = Get-EntraBetaDeletedApplication -SearchString 'My PowerShell Application' \nRemove-EntraBetaDeletedApplication -ApplicationId $deletedApplication.Id\n```\n\n----------------------------------------\n\nTITLE: Get-EntraBetaGroup Syntax (GetQuery) - PowerShell\nDESCRIPTION: This code shows the syntax for using Get-EntraBetaGroup with the GetQuery parameter set.  It allows filtering and retrieving a limited number of group objects.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaGroup.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaGroup\n [-Filter <String>]\n [-All]\n [-Top <Int32>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Key Credentials Example - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve key credentials for a specific Entra application. It first connects to Entra ID using `Connect-Entra`, then retrieves the application using its display name and `Get-EntraApplication`, and finally calls `Get-EntraApplicationKeyCredential` with the application's ID to fetch the key credentials. The output displays details of the key credentials.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplicationKeyCredential.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$application = Get-EntraApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\nGet-EntraApplicationKeyCredential -ApplicationId $application.Id\n```\n\nLANGUAGE: Output\nCODE:\n```\nCustomKeyIdentifier DisplayName     EndDateTime           Key KeyId                                StartDateTime         Type               Usage\n------------------- -----------     -----------           --- -----                                -------------         ----               -----\n{116, 101, 115, 116…} MyApp Cert 6/27/2024 11:49:17 AM     bbbbbbbb-1c1c-2d2d-3e3e-444444444444 6/27/2023 11:29:17 AM AsymmetricX509Cert Verify\n```\n\n----------------------------------------\n\nTITLE: Get All Registered Users of a Device - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all registered users for a specified device. It connects to Entra ID, retrieves the device object by display name, and then uses the `Get-EntraDeviceRegisteredUser` cmdlet with the `-All` parameter to retrieve all registered users. The output is formatted as a table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeviceRegisteredUser.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\n$device = Get-EntraDevice -SearchString '<device-display-name>'\nGet-EntraDeviceRegisteredUser -DeviceId $device.Id -All |\nSelect-Object Id, displayName, UserPrincipalName, createdDateTime, userType, accountEnabled |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Grant authorization to impersonate all users - PowerShell\nDESCRIPTION: This example demonstrates how to grant authorization to a service principal to impersonate all users. It retrieves the service principal for 'Contoso Marketing' and the Microsoft Graph service principal, then creates a new OAuth2 permission grant allowing 'Contoso Marketing' to read all directory information on behalf of any user. It uses Connect-Entra to authenticate, Get-EntraBetaServicePrincipal to find the service principals, and New-EntraBetaOauth2PermissionGrant to create the grant.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaOauth2PermissionGrant.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'DelegatedPermissionGrant.ReadWrite.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"DisplayName eq 'Contoso Marketing'\"\n$graphApp = Get-EntraBetaServicePrincipal -Filter \"AppId eq '00000003-0000-0000-c000-000000000000'\"\n$params = @{\n    ClientId = $servicePrincipal.Id\n    ConsentType = 'AllPrincipals'\n    ResourceId = $graphApp.Id\n    Scope = 'Directory.Read.All'\n    StartTime = Get-Date\n    ExpiryTime = (Get-Date).AddYears(1)\n}\nNew-EntraBetaOauth2PermissionGrant @params\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                          ClientId                             ConsentType   ExpiryTime          PrincipalId ResourceId                           Scope\n--                                          --------                             -----------   ----------          ----------- ----------                           -----\nA1bC2dE3fH4iJ5kL6mN7oP8qR9sT0u a0a0a0a0-bbbb-cccc-dddd-e1e1e1e1e1e1 AllPrincipals 28/06/2025 07:44:25             aaaaaaaa-bbbb-cccc-1111-222222222222 Dele...\n```\n\n----------------------------------------\n\nTITLE: Common Parameters in PowerShell\nDESCRIPTION: Lists the common parameters supported by PowerShell cmdlets. These parameters are used for debugging, error handling, output control, and verbosity, and are automatically available to all cmdlets.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaCrossTenantAccessActivity.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\n`-Debug`, `-ErrorAction`, `-ErrorVariable`, `-InformationAction`, `-InformationVariable`, `-OutVariable`, `-OutBuffer`, `-PipelineVariable`, `-Verbose`, `-WarningAction`, and `-WarningVariable`\n```\n\n----------------------------------------\n\nTITLE: Top Parameter Definition (YAML)\nDESCRIPTION: This YAML snippet describes the `-Top` parameter for the `Get-EntraBetaAuditDirectoryLog` cmdlet. It defines the maximum number of records to return. It is an optional parameter of type Int32.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAuditDirectoryLog.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Int32\nParameter Sets: (All)\nAliases: Limit\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Service Principal Policy Example - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a specific service principal policy using the `Get-EntraBetaServicePrincipalPolicy` cmdlet. It first connects to Entra ID with the necessary scopes and then retrieves the policy based on the provided ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalPolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.All', 'Application.ReadWrite.All'\nGet-EntraBetaServicePrincipalPolicy -Id 'bbbbbbbb-1111-1111-1111-cccccccccccc'\n```\n\nLANGUAGE: Output\nCODE:\n```\nDisplayName Id                                   AppId SignInAudience ServicePrincipalType\n----------- --                                   ----- -------------- --------------------\ndemotest2   bbbbbbbb-1111-1111-1111-cccccccccccc                      ActivityBasedTimeoutPolicy\n```\n\n----------------------------------------\n\nTITLE: Set-EntraUserManager Syntax\nDESCRIPTION: Defines the syntax for the Set-EntraUserManager cmdlet. It requires the UserId and ManagerId parameters, both of which are strings. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUserManager.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-EntraUserManager\n -UserId <String>\n -ManagerId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Retrieve All Application Role Assignments - PowerShell\nDESCRIPTION: This example retrieves all application role assignments for a specified service principal. It connects to Entra ID, retrieves the service principal, and uses the `-All` parameter to fetch all role assignments.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalAppRoleAssignment.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraBetaServicePrincipalAppRoleAssignment -ServicePrincipalId $servicePrincipal.Id -All\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                          AppRoleId                            CreationTimestamp   PrincipalDisplayName PrincipalId                          PrincipalType ResourceDisplayName ResourceId\n--                                          ---------                            -----------------   -------------------- -----------                          ------------- ------------------- ----------\n1aaaaaa1-2bb2-3cc3-4dd4-5eeeeeeeeee5 00000000-0000-0000-0000-000000000000 07-07-2023 17:03:59 MOD Administrator    aaaaaaaa-bbbb-cccc-1111-222222222222 User          ProvisioningPowerBi 021510b7-e753-40…\n2bbbbbb2-3cc3-4dd4-5ee5-6ffffffffff6 00000000-0000-0000-0000-000000000000 07-07-2023 17:03:59 MOD Administrator    aaaaaaaa-bbbb-cccc-1111-222222222222 User1          ProvisioningPowerBi 021510b7-e753-40…\n3cccccc3-4dd4-5ee5-6ff6-7aaaaaaaaaa7 00000000-0000-0000-0000-000000000000 07-07-2023 17:03:59 MOD Administrator    aaaaaaaa-bbbb-cccc-1111-222222222222 User2          ProvisioningPowerBi 021510b7-e753-40…\n4dddddd4-5ee5-6ff6-7aa7-8bbbbbbbbbb8 00000000-0000-0000-0000-000000000000 07-07-2023 17:03:59 MOD Administrator    aaaaaaaa-bbbb-cccc-1111-222222222222 User3          ProvisioningPowerBi 021510b7-e753-40…\n5eeeeee5-6ff6-7aa7-8bb8-9cccccccccc9 00000000-0000-0000-0000-000000000000 07-07-2023 17:03:59 MOD Administrator    aaaaaaaa-bbbb-cccc-1111-222222222222 User4          ProvisioningPowerBi 021510b7-e753-40…\n```\n\n----------------------------------------\n\nTITLE: Get Authentication Method User Registration Detail Report - Query\nDESCRIPTION: Retrieves user registration details using query parameters like filtering, sorting, and pagination.  It allows specifying the number of records to return using the -Top parameter, filtering results using -Filter, and sorting using -Sort. This snippet represents the default method of calling the cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAuthenticationMethodUserRegistrationDetailReport.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaAuthenticationMethodUserRegistrationDetailReport\n [-Top <Int32>]\n [-All]\n [-Filter <String>]\n [-Sort <String>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: IsDeviceOnlyAuthSupported Parameter Definition\nDESCRIPTION: This YAML snippet describes the `-IsDeviceOnlyAuthSupported` parameter for the `New-EntraApplication` cmdlet. It defines that `IsDeviceOnlyAuthSupported` is of type `System.Boolean`, is not required, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplication.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Boolean\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Remove-EntraBetaConditionalAccessPolicy Syntax - PowerShell\nDESCRIPTION: This PowerShell snippet shows the syntax for the Remove-EntraBetaConditionalAccessPolicy cmdlet. It requires the -PolicyId parameter which specifies the ID of the conditional access policy to be removed. It also supports common parameters.\n\nDependencies: Microsoft.Entra.Beta PowerShell module.\n\nParameters: -PolicyId (String, Required), CommonParameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaConditionalAccessPolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraBetaConditionalAccessPolicy\n -PolicyId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Service Principal Type Parameter Configuration - YAML\nDESCRIPTION: Defines the configuration for the `-ServicePrincipalType` parameter. This parameter accepts a string representing the service principal type, is not required, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraServicePrincipal.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: New-EntraPermissionGrantPolicy Syntax (PowerShell)\nDESCRIPTION: Defines the syntax for the New-EntraPermissionGrantPolicy cmdlet, including the required Id parameter and optional DisplayName and Description parameters. It also includes CommonParameters, which are standard PowerShell parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraPermissionGrantPolicy.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-EntraPermissionGrantPolicy\n -Id <String>\n [-DisplayName <String>]\n [-Description <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Permission Grant Condition Sets (Excluded)\nDESCRIPTION: This example retrieves all permission grant condition sets that are excluded from a specified permission grant policy.  It authenticates with the required scope, fetches a permission grant policy based on its ID and uses the `Get-EntraBetaPermissionGrantConditionSet` cmdlet with the PolicyId and ConditionSetType parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPermissionGrantConditionSet.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.PermissionGrant'\n$permissionGrantPolicy = Get-EntraBetaPermissionGrantPolicy | Where-Object {$_.Id -eq 'my-custom-consent-policy'}\nGet-EntraBetaPermissionGrantConditionSet -PolicyId $permissionGrantPolicy.Id -ConditionSetType 'excludes'\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId                                   CertifiedClientApplicationsOnly ClientApplicationIds                                                         ClientApplicationPublisherIds          ClientApplicationTenantIds\n--                                   ------------------------------- --------------------                                                         -----------------------------          --------------------\nbbbbbbbb-1111-2222-3333-cccccccccccc False                           {33334444-dddd-5555-eeee-6666ffff7777} {d5aec55f-2d12-4442-8d2f-ccca95d4390e} {aaaabbbb-0000-cccc-1111-dddd2222eeee}\ncccccccc-2222-3333-4444-dddddddddddd False                           {44445555-eeee-6666-ffff-7777gggg8888} {d5aec55f-2d12-4442-8d2f-ccca95d4390e} {aaaabbbb-0000-cccc-1111-dddd2222eeee}\n```\n\n----------------------------------------\n\nTITLE: Id Parameter Definition - YAML\nDESCRIPTION: Defines the -Id parameter for the Remove-EntraBetaApplicationPolicy cmdlet. It specifies that it is a string type, required, accepts pipeline input by property name and value, and does not accept wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaApplicationPolicy.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Redirecting Debug Output to Log File - PowerShell\nDESCRIPTION: This snippet demonstrates how to redirect the debug output stream to a log file. It provides a way to capture detailed diagnostic information for later analysis. Replace `<your-log-filepath>` with the desired path to the log file.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/entra-powershell-best-practices.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraUser -Top 1 -Debug 5>> <your-log-filepath>\n```\n\n----------------------------------------\n\nTITLE: Get Permission Grant Condition Set by ID\nDESCRIPTION: This example retrieves a specific permission grant condition set by its ID. It first authenticates, retrieves a policy, and then gets the condition set ID. Finally it calls `Get-EntraBetaPermissionGrantConditionSet` to retrieve the specific condition set using the PolicyId, ConditionSetType, and Id parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPermissionGrantConditionSet.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.PermissionGrant'\n$permissionGrantPolicy = Get-EntraBetaPermissionGrantPolicy | Where-Object {$_.Id -eq 'my-custom-consent-policy'}\n$conditionSet = Get-EntraBetaPermissionGrantConditionSet -PolicyId $permissionGrantPolicy.Id -ConditionSetType 'includes' | Where-Object {$_.PermissionType -eq 'delegated'}\nGet-EntraBetaPermissionGrantConditionSet -PolicyId $permissionGrantPolicy.Id -ConditionSetType 'includes' -Id $conditionSet.Id\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId                                   CertifiedClientApplicationsOnly ClientApplicationIds                                                         ClientApplicationPublisherIds          ClientApplicationTenantIds\n--                                   ------------------------------- --------------------                                                         -----------------------------          --------------------\ndddddddd-3333-4444-5555-eeeeeeeeeeee False                           {33334444-dddd-5555-eeee-6666ffff7777} {d5aec55f-2d12-4442-8d2f-ccca95d4390e} {aaaabbbb-0000-cccc-1111-dddd2222eeee}\n```\n\n----------------------------------------\n\nTITLE: Disconnect Entra ID Session PowerShell\nDESCRIPTION: This PowerShell cmdlet disconnects the current session from a Microsoft Entra ID tenant. It terminates the connection established with Connect-Entra. No specific parameters are required. After execution, the session is no longer authenticated with the Entra ID tenant.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Disconnect-Entra.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nDisconnect-Entra\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Policy by ID - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a specific policy using its ID. It first retrieves the policy by DisplayName to get the ID, then uses the Get-EntraPolicy cmdlet with the `-Id` parameter to retrieve the policy with that specific ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraPolicy.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.All'\n$policy = Get-EntraPolicy | Where-Object { $_.DisplayName -eq 'Microsoft User Default Recommended Policy' }\nGet-EntraPolicy -Id $policy.Id\n```\n\n----------------------------------------\n\nTITLE: AlternateNotificationEmails Parameter (YAML)\nDESCRIPTION: Describes the -AlternateNotificationEmails parameter for the New-EntraBetaGroupLifecyclePolicy cmdlet. This parameter specifies the email addresses to which notification emails are sent for groups without owners. Multiple email addresses should be separated by a ';'.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaGroupLifecyclePolicy.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Set-EntraAdministrativeUnit Syntax (PowerShell)\nDESCRIPTION: This is the syntax definition for the Set-EntraAdministrativeUnit cmdlet in PowerShell. It outlines the available parameters for updating an administrative unit, including AdministrativeUnitId, Description, DisplayName, MembershipType, MembershipRule, MembershipRuleProcessingState and Visibility. It showcases how to use common parameters with the cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraAdministrativeUnit.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-EntraAdministrativeUnit\n -AdministrativeUnitId <String>\n [-Description <String>]\n [-DisplayName <String>]\n [-MembershipType <String>]\n [-MembershipRule <String>]\n [-MembershipRuleProcessingState <String>]\n [-Visibility <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get List of Public Cloud Environments - PowerShell\nDESCRIPTION: Example demonstrating how to retrieve a list of global public cloud environments using the Get-EntraEnvironment cmdlet without any parameters. The output shows various environments including Global, China, USGovDoD, USGov, Germany, and Canary, along with their respective AzureADEndpoint and GraphEndpoint URLs.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraEnvironment.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraEnvironment\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nName     AzureADEndpoint                   GraphEndpoint                           Type\n----     ---------------                   -------------                           ----\nGlobal   https://login.microsoftonline.com https://graph.microsoft.com             Built-in\nChina    https://login.chinacloudapi.cn    https://microsoftgraph.chinacloudapi.cn Built-in\nUSGovDoD https://login.microsoftonline.us  https://dod-graph.microsoft.us          Built-in\nUSGov    https://login.microsoftonline.us  https://graph.microsoft.us              Built-in\nGermany  https://login.microsoftonline.de  https://graph.microsoft.de              Built-in\nCanary   https://login.microsoftonline.com https://canary.graph.microsoft.com      User-defined\n```\n\n----------------------------------------\n\nTITLE: New-EntraApplication Syntax\nDESCRIPTION: This code snippet shows the syntax for the New-EntraApplication cmdlet, including all available parameters. It outlines the structure needed to create an application object with configurable properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplication.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-EntraApplication\n -DisplayName <String>\n [-AddIns <System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.AddIn]>] \n [-PasswordCredentials <System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.PasswordCredential]>] \n [-TokenEncryptionKeyId <String>]\n [-SignInAudience <String>]\n [-KeyCredentials <System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.KeyCredential]>] \n [-ParentalControlSettings <ParentalControlSettings>] \n [-IdentifierUris <System.Collections.Generic.List`1[System.String]>] \n [-AppRoles <System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.AppRole]>] \n [-PublicClient <PublicClientApplication>] \n [-InformationalUrl <InformationalUrl>] \n [-Tags <System.Collections.Generic.List`1[System.String]>] \n [-Api <ApiApplication>] \n [-OptionalClaims <OptionalClaims>] \n [-GroupMembershipClaims <String>] \n [-Web <WebApplication>] \n [-IsFallbackPublicClient <Boolean>] \n [-IsDeviceOnlyAuthSupported <Boolean>] \n [-RequiredResourceAccess <System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.RequiredResourceAccess]>] \n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: CertificateAuthorityInformation parameter definition (YAML)\nDESCRIPTION: This YAML code snippet defines the `-CertificateAuthorityInformation` parameter for the `Set-EntraBetaTrustedCertificateAuthority` cmdlet. It specifies the data type, parameter sets, aliases, requirement, position, default value, pipeline input, and wildcard character support.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaTrustedCertificateAuthority.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: CertificateAuthorityInformation\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - Id\nDESCRIPTION: Defines the Id parameter in YAML. Specifies that it is a String type, optional, and does not allow pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraConditionalAccessPolicy.md#_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get User Groups (Query)\nDESCRIPTION: This syntax retrieves a list of groups a user belongs to using the GetQuery parameter set. It allows for filtering using parameters like -All and -Top to control the number of results.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserGroup.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraUserGroup\n -UserId <String>\n [-All]\n [-Top <Int32>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Top N Service Endpoints - PowerShell\nDESCRIPTION: This example demonstrates retrieving a specified number of service endpoints (top 5 in this case) associated with an application. The example connects to Entra ID using Connect-Entra and scope 'Application.Read.All', retrieves the service principal via Get-EntraBetaServicePrincipal filtered by the display name, and then utilizes Get-EntraBetaApplicationServiceEndpoint with the -Top parameter to limit the returned service endpoints.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationServiceEndpoint.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"DisplayName eq 'Contoso Helpdesk App'\"\nGet-EntraBetaApplicationServiceEndpoint -ServicePrincipalId $servicePrincipal.Id -Top 5\n```\n\n----------------------------------------\n\nTITLE: Retrieving Beta Application Template with Get-EntraBetaApplicationTemplate (PowerShell)\nDESCRIPTION: This PowerShell command retrieves beta application templates using the Get-EntraBetaApplicationTemplate cmdlet from the Microsoft.Entra.Beta module. It depends on the Microsoft.Entra.Beta PowerShell module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_20\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaApplicationTemplate\n```\n\n----------------------------------------\n\nTITLE: ScopedRoleMembershipId Parameter Definition - YAML\nDESCRIPTION: Defines the ScopedRoleMembershipId parameter for the Remove-EntraBetaScopedRoleMembership cmdlet in YAML format. It specifies the parameter's type, requirement, position, default value, and pipeline input acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaScopedRoleMembership.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Update Partner Commerce URL using Set-EntraBetaPartnerInformation (PowerShell)\nDESCRIPTION: This snippet demonstrates how to update the commerce URL for a partner using the Set-EntraBetaPartnerInformation cmdlet. It requires the 'Organization.ReadWrite.All' scope and updates the PartnerCommerceUrl property.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaPartnerInformation.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.ReadWrite.All'\nSet-EntraBetaPartnerInformation -PartnerCommerceUrl 'http://www.test1.com'\n```\n\n----------------------------------------\n\nTITLE: Get Top Registered Device\nDESCRIPTION: This example demonstrates how to retrieve the top one device registered to a specific user.  It uses the `-Top` parameter to limit the number of results to one. The example first connects to Entra ID with the required scopes and then retrieves the device and displays the `Id` and `AdditionalProperties`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserRegisteredDevice.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraBetaUserRegisteredDevice -UserId 'SawyerM@contoso.com' -Top 1 | Select-Object Id -ExpandProperty AdditionalProperties\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Applications - GetQuery Syntax - PowerShell\nDESCRIPTION: Defines the syntax for retrieving deleted applications using optional filters, retrieving all, specifying the maximum number to return (Top), and selecting specific properties.  It uses the GetQuery parameter set, which is the default. It shows the parameters that can be used to filter the results.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedApplication.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraDeletedApplication\n [-Filter <String>]\n [-All]\n [-Top <Int32>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Add Service Principal Owner Syntax\nDESCRIPTION: This PowerShell syntax defines how to use the `Add-EntraBetaServicePrincipalOwner` cmdlet to add an owner (user or service principal) to a service principal. It requires specifying the `ServicePrincipalId` and the `OwnerId`.  Common parameters are supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaServicePrincipalOwner.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-EntraBetaServicePrincipalOwner\n -ServicePrincipalId <String>\n -OwnerId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Installing Beta Users Module in PowerShell\nDESCRIPTION: This PowerShell command installs the `Microsoft.Entra.Beta.Users` module from the PowerShell Gallery. The `-Force` parameter automatically confirms any prompts during installation, and `-AllowClobber` allows the installation to overwrite existing modules with the same name. This command requires the PowerShellGet module and a configured PowerShell Gallery repository.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/includes/install-specific-submodules.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module -Name Microsoft.Entra.Beta.Users -Repository PSGallery -Force -AllowClobber\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deleted Users with Get-EntraDeletedUser (PowerShell)\nDESCRIPTION: This PowerShell command retrieves deleted users using the Get-EntraDeletedUser cmdlet from the Microsoft.Entra module. It returns the `DeletionAgeInDays` response property. It depends on the Microsoft.Entra PowerShell module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_17\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraDeletedUser\n```\n\n----------------------------------------\n\nTITLE: MemberId Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the `-MemberId` parameter for the `Remove-EntraAdministrativeUnitMember` cmdlet. It specifies that this parameter is of type String, is required, accepts pipeline input by property name or value, and does not accept wildcard characters. It represents the ID of the member to be removed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraAdministrativeUnitMember.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Remove User Extension - Multiple Extensions - PowerShell\nDESCRIPTION: This snippet shows the syntax for removing multiple user extensions using the Remove-EntraUserExtension cmdlet. It requires the ObjectId of the user and a list of ExtensionNames to be removed. Common parameters are also supported. The ObjectId parameter identifies the user whose extensions will be removed, and ExtensionNames is a list of the extensions to remove from that user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraUserExtension.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraUserExtension\n -ObjectId <String>\n -ExtensionNames <System.Collections.Generic.List`1[System.String]>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: UserId Parameter Definition - YAML\nDESCRIPTION: Defines the UserId parameter for the Remove-EntraUserManager cmdlet in YAML format.  This parameter is required, accepts a User Principle Name or ObjectId, and supports pipeline input.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraUserManager.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Top N Contracts Example - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve the top two contracts in the Microsoft Entra ID. It connects to Entra ID and then uses Get-EntraContract with the `-Top` parameter to limit the number of returned contracts. The `-Limit` alias can be used for `-Top`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraContract.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\nGet-EntraContract -Top 2\n```\n\n----------------------------------------\n\nTITLE: Get Top Two Devices - PowerShell\nDESCRIPTION: Connects to Entra ID and retrieves the top two devices. Requires the Microsoft.Entra module and the 'Device.Read.All' scope. It shows the usage of the `-Top` parameter to limit the number of results returned.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDevice.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraDevice -Top 2\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDeletedDateTime Id                                   AccountEnabled ApproximateLastSignInDateTime ComplianceExpirationDateTime DeviceCategory DeviceId                             DeviceMetadata DeviceOwnership\n--------------- --                                   -------------- ----------------------------- ---------------------------- -------------- --------                             -------------- ---------------\n                bbbbbbbb-1111-2222-3333-cccccccccccc True                                                                                     eeeeeeee-4444-5555-6666-ffffffffffff MetaData\n                cccccccc-2222-3333-4444-dddddddddddd True                                                                                     eeeeeeee-4444-5555-6666-ffffffffffff MetaData\n```\n\n----------------------------------------\n\nTITLE: Get All Service Principals - PowerShell\nDESCRIPTION: This example retrieves all service principals from the directory. It first connects to Entra ID with the necessary scopes, then uses `Get-EntraBetaServicePrincipal` without any filters to fetch all service principals. The output displays properties such as DisplayName, Id, AppId, SignInAudience, and ServicePrincipalType for each service principal.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipal.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraBetaServicePrincipal\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - Value YAML\nDESCRIPTION: Defines the Value parameter for the New-EntraApplicationKeyCredential cmdlet. This parameter is optional and accepts a string value that specifies the value for the key.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplicationKeyCredential.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Documenting -Filter Parameter in YAML\nDESCRIPTION: This YAML snippet documents the `-Filter` parameter for a PowerShell cmdlet. It specifies the parameter's type, parameter set, aliases, whether it's required, its position, default value, and pipeline input properties. It defines how to use OData v4.0 filter statements to control which objects are returned.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDevice.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: GetQuery\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Restore Deleted Application Output - PowerShell\nDESCRIPTION: This example demonstrates the output after a successful restore of deleted application using the Restore-EntraBetaDeletedApplication cmdlet. It returns Id and DeletedDateTime.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Restore-EntraBetaDeletedApplication.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nId                                   DeletedDateTime\n--                                   ---------------\nffffffff-5555-6666-7777-aaaaaaaaaaaa\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Inactive Sign-in with Get-EntraUserInactiveSignIn (PowerShell)\nDESCRIPTION: This PowerShell command retrieves user inactive sign-in information using the Get-EntraUserInactiveSignIn cmdlet from the Microsoft.Entra module. It depends on the Microsoft.Entra PowerShell module. It provides data about inactive user sign-ins.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_33\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraUserInactiveSignIn\n```\n\n----------------------------------------\n\nTITLE: Get All Commercial Subscriptions - PowerShell\nDESCRIPTION: This example retrieves all commercial subscriptions for the organization. It requires connecting to Entra ID with the 'Organization.Read.All' scope and then using the Get-EntraBetaSubscription cmdlet with the -All parameter to fetch all subscriptions. The output displays the properties of each subscription, such as skuPartNumber, id, and status.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaSubscription.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All'\nGet-EntraBetaSubscription -All\n```\n\n----------------------------------------\n\nTITLE: Defining SendCertificateChain Parameter in YAML\nDESCRIPTION: This YAML snippet defines the `-SendCertificateChain` parameter as a Boolean. If specified the x5c header will be included in client claims.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Connect-Entra.md#_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nType: Boolean\nParameter Sets: AppCertificateParameterSet\nAliases:\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Retrieve Application Proxy Connectors with Search String - PowerShell\nDESCRIPTION: This PowerShell snippet connects to Entra ID and retrieves Application Proxy connectors matching a given search string using the `-SearchString` parameter. The `-SearchString` parameter allows for searching connectors based on a specified text.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationProxyConnector.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\nGet-EntraBetaApplicationProxyConnector -SearchString 'Entra PowerShell AppProxy Connector'\n```\n\n----------------------------------------\n\nTITLE: Example Output of Service Principal Password Credential Retrieval\nDESCRIPTION: This is the expected output from the previous example, showing information about the service principal's password credentials, including CustomKeyIdentifier, DisplayName, EndDateTime, Hint, KeyId, SecretText, and StartDateTime. The values shown are examples and will vary.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalPasswordCredential.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nCustomKeyIdentifier DisplayName EndDateTime         Hint KeyId                                SecretText StartDateTime\n------------------- ----------- -----------         ---- -----                                ---------- -------------\n                                17-04-2025 07:32:41 gjW  bdf6a3df-cc9b-4612-b948-e32804ee88f7            17-04-2024 07:32:41\n                                21-03-2025 08:12:08 4fl  7f4414ec-8f72-49a8-b949-70d635899656            21-03-2024 08:12:08\n                                12-12-2024 08:39:07 mjl  0fff6b21-0a20-4f7c-93ba-26ed9b648344            12-12-2023 08:39:10\n```\n\n----------------------------------------\n\nTITLE: TargetType Parameter - YAML\nDESCRIPTION: This YAML snippet documents the `-TargetType` parameter for the `New-EntraBetaObjectSetting` cmdlet. It specifies that this parameter is required, accepts pipeline input, and does not accept wildcard characters. It defines the type of directory object to which the settings are being assigned.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaObjectSetting.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Creating a role definition with Description\nDESCRIPTION: This PowerShell script creates a new role definition in Microsoft Entra ID including a description. It first connects to Entra ID with the required scopes.  Then, it defines the role permissions and uses the `New-EntraDirectoryRoleDefinition` cmdlet to create a new role with specified permissions, enabled status, display name, and a descriptive text. `Connect-Entra` needs the `Microsoft.Graph` module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraDirectoryRoleDefinition.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory'\n$rolePermissions = New-object Microsoft.Open.MSGraph.Model.RolePermission\n$rolePermissions.AllowedResourceActions = @(\"microsoft.directory/applications/basic/read\")\nNew-EntraDirectoryRoleDefinition -RolePermissions $rolePermissions -IsEnabled $false -DisplayName 'MyRoleDefinition' -Description 'Role Definition demo'\n```\n\n----------------------------------------\n\nTITLE: Remove Application Owner Syntax (Entra ID)\nDESCRIPTION: Defines the syntax for the Remove-EntraApplicationOwner cmdlet.  It shows the required parameters -OwnerId and -ApplicationId, as well as the optional CommonParameters. The cmdlet is used to remove an owner from a specified application in Microsoft Entra ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraApplicationOwner.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraApplicationOwner\n -OwnerId <String>\n -ApplicationId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Syntax of Remove-EntraOAuth2PermissionGrant - PowerShell\nDESCRIPTION: This snippet displays the syntax of the Remove-EntraOAuth2PermissionGrant cmdlet, highlighting the required OAuth2PermissionGrantId parameter. This parameter specifies the ID of the OAuth2PermissionGrant object to be removed from Microsoft Entra ID.\n\nDependencies: Microsoft.Entra module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraOAuth2PermissionGrant.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraOAuth2PermissionGrant\n -OAuth2PermissionGrantId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: SupportedServices Parameter Definition\nDESCRIPTION: Defines the SupportedServices parameter for the New-EntraDomain cmdlet, indicating it takes a list of strings representing the capabilities assigned to the domain and is an optional parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraDomain.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[System.String]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get User Administrative Units By ID\nDESCRIPTION: This snippet shows the syntax for retrieving administrative units a user belongs to using the GetById parameter set. It requires both the UserId and AdministrativeUnitId parameters to specify the user and the administrative unit. It can also optionally use the Property parameter to select specific properties to return.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserAdministrativeUnit.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraUserAdministrativeUnit\n -UserId <String>\n -AdministrativeUnitId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Select Groups a Contact is a Member Of - PowerShell\nDESCRIPTION: This PowerShell code snippet demonstrates how to retrieve the groups in which a specific contact is a member within Microsoft Entra ID. It requires the `OrgContact.Read.All` and `Group.Read.All` scopes. The script constructs a `GroupIdsForMembershipCheck` object and then uses `Select-EntraGroupIdsContactIsMemberOf` to get the relevant group IDs based on the contact ID and the `GroupIdsForMembershipCheck`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Select-EntraGroupIdsContactIsMemberOf.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'OrgContact.Read.All,Group.Read.All'\n$group = New-Object Microsoft.Open.AzureAD.Model.GroupIdsForMembershipCheck\n$group.GroupIds = (Get-EntraGroup -Filter \"displayName eq 'Sales and Marketing'\").Id\n$contact = Get-EntraContact -Filter \"displayName eq 'Contoso Admin'\"\nSelect-EntraGroupIdsContactIsMemberOf -OrgContactId $contact.Id -GroupIdsForMembershipCheck $group\n```\n\n----------------------------------------\n\nTITLE: List sign-ins failing Conditional Access policies (PowerShell)\nDESCRIPTION: This example demonstrates how to filter sign-in logs to retrieve those that failed due to Conditional Access policies. It connects to Entra ID and then uses the `Get-EntraBetaAuditSignInLog` cmdlet with the `-Filter` parameter to specify the condition `conditionalAccessStatus eq 'failure'`. The output is limited to 10 entries and selects specific properties for display.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAuditSignInLog.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All','Directory.Read.All'\nGet-EntraBetaAuditSignInLog -Filter \"conditionalAccessStatus eq 'failure'\" -Limit 10 | Select-Object id, userDisplayName, createdDateTime, appDisplayName, status\n```\n\n----------------------------------------\n\nTITLE: Get User Registered Devices (Basic)\nDESCRIPTION: This example demonstrates how to retrieve the devices registered to a specific user. It first connects to Entra ID with the required scopes and then uses the `Get-EntraBetaUserRegisteredDevice` cmdlet to get the device information. The `Select-Object` cmdlet is used to display the `Id` and `AdditionalProperties` of the device.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserRegisteredDevice.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraBetaUserRegisteredDevice -UserId 'SawyerM@contoso.com' | Select-Object Id -ExpandProperty AdditionalProperties\n```\n\n----------------------------------------\n\nTITLE: Get All App Role Assignments for Service Principal - PowerShell\nDESCRIPTION: This example retrieves all app role assignments for a given service principal, granted to users, groups, and other service principals. It uses the '-All' parameter to retrieve all assignments, irrespective of pagination. It requires the 'Application.Read.All' scope. The example shows the output format of the command.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalAppRoleAssignedTo.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraServicePrincipalAppRoleAssignedTo -ServicePrincipalId $servicePrincipal.Id -All\n```\n\nLANGUAGE: powershell\nCODE:\n```\nDeletedDateTime Id                                          AppRoleId                            CreatedDateTime     PrincipalDisplayName PrincipalId\n--------------- --                                          ---------                            ---------------     -------------------- -----------\n                1aaaaaa1-2bb2-3cc3-4dd4-5eeeeeeeeee5 00000000-0000-0000-0000-000000000000 20/10/2023 17:03:41 Entra-App-Testing    aaaaaaaa-bbbb-cccc-1111-222222222222\n                2bbbbbb2-3cc3-4dd4-5ee5-6ffffffffff6 00000000-0000-0000-0000-000000000000 20/10/2023 17:03:38 Entra-App-Testing    aaaaaaaa-bbbb-cccc-1111-222222222222\n                3cccccc3-4dd4-5ee5-6ff6-7aaaaaaaaaa7 00000000-0000-0000-0000-000000000000 20/10/2023 17:03:37 Entra-App-Testing    aaaaaaaa-bbbb-cccc-1111-222222222222\n                4dddddd4-5ee5-6ff6-7aa7-8bbbbbbbbbb8 00000000-0000-0000-0000-000000000000 20/10/2023 17:03:39 Entra-App-Testing    aaaaaaaa-bbbb-cccc-1111-222222222222\n                5eeeeee5-6ff6-7aa7-8bb8-9cccccccccc9 00000000-0000-0000-0000-000000000000 20/10/2023 17:03:39 Entra-App-Testing    aaaaaaaa-bbbb-cccc-1111-222222222222\n```\n\n----------------------------------------\n\nTITLE: Classification Parameter Definition - YAML\nDESCRIPTION: This YAML defines the -Classification parameter for the Add-EntraBetaServicePrincipalDelegatedPermissionClassification cmdlet. It specifies the data type, possible values (Low, Medium, High), whether it's required, accepted pipeline input, and whether wildcard characters are allowed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaServicePrincipalDelegatedPermissionClassification.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nType: ClassificationEnum\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: User ID Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the UserId parameter for the Add-EntraBetaDeviceRegisteredUser cmdlet. It specifies that the parameter is of type System.String, is required, accepts pipeline input by property name and value, and does not accept wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaDeviceRegisteredUser.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: RefObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Direct Reports of a Contact - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve the direct reports of a specific contact in Microsoft Entra ID using the Get-EntraContactDirectReport cmdlet.  It first connects to Entra ID with the required scope and retrieves the contact object using a filter.  The OrgContactId parameter is then used to specify the contact for which direct reports are to be retrieved.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraContactDirectReport.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'OrgContact.Read.All'\n$contact = Get-EntraContact -Filter \"displayName eq 'Contoso Contact'\"\nGet-EntraContactDirectReport -OrgContactId $contact.Id\n```\n\n----------------------------------------\n\nTITLE: Get Conditional Access Policy by Display Name - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a specific conditional access policy by its display name. It first connects to Entra ID and then filters the policies based on the 'DisplayName' property to find the desired policy using the Where-Object cmdlet. Finally it retrieves the specific policy using PolicyId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaConditionalAccessPolicy.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.All'\n$policy = Get-EntraBetaConditionalAccessPolicy | Where-Object {$_.DisplayName -eq 'Multifactor authentication for Contoso partners and vendors'}\nGet-EntraBetaConditionalAccessPolicy -PolicyId $policy.Id\n```\n\n----------------------------------------\n\nTITLE: Custom Security Attribute Definition Property Parameter\nDESCRIPTION: Defines the `-Property` parameter for the `Get-EntraBetaCustomSecurityAttributeDefinition` cmdlet, which specifies properties to be returned. It is optional and accepts an array of strings.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaCustomSecurityAttributeDefinition.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Commercial Subscriptions with Filtering - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve commercial subscriptions with filtering based on a property like 'id'.  It connects to Entra ID with 'Organization.Read.All' scope, then filters subscriptions where the 'id' property matches a specific GUID using the -Filter parameter.  The output shows the details of the subscriptions that match the filter criteria.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaSubscription.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All'\nGet-EntraBetaSubscription -Filter \"id eq 'aaaa0000-bb11-2222-33cc-444444dddddd'\"\n```\n\n----------------------------------------\n\nTITLE: List User's Groups - PowerShell\nDESCRIPTION: This example demonstrates how to list the groups a user belongs to in Microsoft Entra ID using the Get-EntraUserMembership cmdlet and filtering by the '@odata.type' property. It connects to Entra ID with the User.Read.All scope, retrieves memberships for a specified user ID, filters for group memberships, and then selects and formats the output.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserMembership.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraUserMembership -UserId 'SawyerM@contoso.com' |\nWhere-Object { $_.'@odata.type' -eq '#microsoft.graph.group' } |\nSelect-Object Id, displayName, createdDateTime, groupTypes, securityEnabled, visibility, '@odata.type' |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Create Password Credential with StartDate - PowerShell\nDESCRIPTION: This example shows how to create a password credential with a specified start date for a service principal using the `New-EntraBetaServicePrincipalPasswordCredential` cmdlet. It first connects to Entra ID using specified scopes, retrieves a service principal, and then creates the password credential using the service principal's ID and the desired start date. The cmdlet requires the `Application.ReadWrite.All` and `Application.ReadWrite.OwnedBy` scopes. The output displays the created password credential's properties, including `secretText`, `startDateTime`, and `endDateTime`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaServicePrincipalPasswordCredential.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nNew-EntraBetaServicePrincipalPasswordCredential -ServicePrincipalId $servicePrincipal.Id -DisplayName 'Helpdesk App Credential' -StartDate '2024-11-04T14:14:14Z'\n```\n\n----------------------------------------\n\nTITLE: Remove Expired Guest Users - PowerShell\nDESCRIPTION: This script iterates through a list of guest users, calculates their expiration date (90 days from creation), and removes those that have expired. It checks if the user ID is valid before attempting to delete the user, and outputs a message if the ID is null or empty. Requires the $guestUsers variable to be populated with guest user objects.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-guest-users.md#_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\nforeach ($guest in $guestUsers) {\n    # Calculate the expiration date based on the creation date\n    $guestExpirationDate = $guest.CreatedDateTime.AddDays(90)\n    \n    # Check if the account is expired\n    if ($guestExpirationDate -lt $now) {\n        # Check if the guest user ID is not null or empty\n        if (![string]::IsNullOrEmpty($guest.Id)) {\n            # Delete the expired guest account\n            Remove-EntraUser -UserId $guest.Id\n        } else {\n            Write-Output \"Guest user ID is null or empty for user: $($guest.DisplayName)\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GroupId Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the GroupId parameter for the Reset-EntraBetaLifeCycleGroup cmdlet. It specifies the type as System.String, indicates that it is required, and defines aliases and other attributes. This is the group id that will be renewed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Reset-EntraBetaLifeCycleGroup.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Filter Parameter Definition (YAML)\nDESCRIPTION: This YAML snippet describes the `-Filter` parameter for the `Get-EntraBetaAuditDirectoryLog` cmdlet. It explains that the parameter is an OData v4.0 filter statement which is used to control which objects are returned by the cmdlet. The parameter accepts string inputs and supports property name and value input.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAuditDirectoryLog.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deleted Device with Get-EntraDeletedDevice (PowerShell)\nDESCRIPTION: This PowerShell command retrieves a deleted device using the Get-EntraDeletedDevice cmdlet from the Microsoft.Entra module. It depends on the Microsoft.Entra PowerShell module. It facilitates retrieving information about deleted devices.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_31\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraDeletedDevice\n```\n\n----------------------------------------\n\nTITLE: Retrieve Top Service Principal Memberships - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve the top two memberships of a service principal using the -Top parameter. It showcases how to limit the number of results returned.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalMembership.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraServicePrincipalMembership -ServicePrincipalId $ServicePrincipal.Id -Top 2 | Select-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - GrantControls\nDESCRIPTION: This YAML snippet defines the GrantControls parameter. It accepts a ConditionalAccessGrantControls object, is optional, and does not allow pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraConditionalAccessPolicy.md#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\nType: ConditionalAccessGrantControls\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - MembershipRuleProcessingState (YAML)\nDESCRIPTION: This YAML snippet defines the '-MembershipRuleProcessingState' parameter for the Set-EntraAdministrativeUnit cmdlet. It specifies the data type, parameter set, aliases, whether it is required, its position, default value, and whether it accepts pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraAdministrativeUnit.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Restore Deleted Application - PowerShell\nDESCRIPTION: This code snippet shows the syntax for the Restore-EntraBetaDeletedApplication cmdlet. It takes an ApplicationId as a mandatory parameter and IdentifierUris as an optional parameter. It restores a previously deleted Microsoft Entra application.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Restore-EntraBetaDeletedApplication.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRestore-EntraBetaDeletedApplication\n -ApplicationId <String>\n [-IdentifierUris <System.Collections.Generic.List`1[System.String]>]\n```\n\n----------------------------------------\n\nTITLE: Property Parameter Definition - YAML\nDESCRIPTION: Defines the '-Property' parameter for Get-EntraContract, which specifies which properties to return. It can be aliased with '-Select'.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraContract.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Setting Minor Consent - Set-EntraUser (PowerShell)\nDESCRIPTION: This example illustrates how to set the `AgeGroup` and `ConsentProvidedForMinor` properties for multiple users filtered by their `DisplayName`. It iterates through a list of users matching the display name filter and sets their age group to 'minor' and consent status to 'granted'.  The `Connect-Entra` ensures that the script is authorized to make changes to user objects.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUser.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nGet-EntraUser -All | Where-Object -Property DisplayName -Match '(George|James|Education)' |\nForEach-Object { Set-EntraUser -UserId $($_.Id) -AgeGroup 'minor' -ConsentProvidedForMinor 'granted' }\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - UserId - YAML\nDESCRIPTION: This YAML snippet defines the `-UserId` parameter for the `Get-EntraBetaUserDirectReport` cmdlet. This parameter is required and specifies the ID (UserPrincipalName or UserId) of the user whose direct reports are to be retrieved.  It accepts pipeline input by property name or value.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserDirectReport.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId, UPN, Identity, UserPrincipalName\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: AppRoles Parameter Definition\nDESCRIPTION: This YAML snippet describes the `-AppRoles` parameter for the `New-EntraApplication` cmdlet. It defines that `AppRoles` is a list of `Microsoft.Open.MSGraph.Model.AppRole` objects, is not required, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplication.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.AppRole]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: PolicyId Parameter Definition (YAML)\nDESCRIPTION: This YAML snippet defines the `-PolicyId` parameter for the `Remove-EntraBetaServicePrincipalPolicy` cmdlet. It specifies the parameter type as `System.String`, indicates that it is a required parameter, and allows pipeline input by property name and value.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaServicePrincipalPolicy.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Top Role Assignments PowerShell\nDESCRIPTION: This example retrieves the top two role assignments in Microsoft Entra ID. It connects to Entra ID with necessary scopes and uses the `Get-EntraDirectoryRoleAssignment` cmdlet with the `-Top` parameter set to `2` to limit the results to the first two role assignments. The `-Limit` parameter can be used as an alias for `-Top`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDirectoryRoleAssignment.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory', 'EntitlementManagement.Read.All'\nGet-EntraDirectoryRoleAssignment -Top 2\n```\n\n----------------------------------------\n\nTITLE: CertificateAuthorityInformation Parameter Definition\nDESCRIPTION: This YAML snippet defines the `-CertificateAuthorityInformation` parameter for the `New-EntraBetaTrustedCertificateAuthority` cmdlet. It specifies the parameter's type, whether it's required, its position, and other attributes related to pipeline input and wildcard characters. This is used to define properties of the certificate authority, like AuthorityType, CrlDistributionPoint, DeltaCrlDistributionPoint and TrustedCertificate.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaTrustedCertificateAuthority.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nType: CertificateAuthorityInformation\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Create Application Segment with IP Ranges and Multiple Ports\nDESCRIPTION: This example demonstrates creating an application segment with a range of IP addresses and multiple ports using the New-EntraBetaPrivateAccessApplicationSegment cmdlet. It connects to Entra ID, retrieves an application, and configures parameters for the IP range and multiple ports for TCP and UDP protocols.  The example requires the NetworkAccessPolicy.ReadWrite.All, Application.ReadWrite.All, and NetworkAccess.ReadWrite.All scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaPrivateAccessApplicationSegment.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'NetworkAccessPolicy.ReadWrite.All', 'Application.ReadWrite.All', 'NetworkAccess.ReadWrite.All'\n$application = Get-EntraBetaApplication -Filter \"displayName eq '<GlobalSecureAccess_Application_DisplayName>'\"\n$params = @{\n    ApplicationId = $application.Id\n    DestinationHost = '192.168.1.100..192.168.1.110'\n    Ports = '22','3389'\n    Protocol = 'TCP','UDP'\n    DestinationType = 'ipRange'\n}\nNew-EntraBetaPrivateAccessApplicationSegment @params\n```\n\n----------------------------------------\n\nTITLE: Defining StreetAddress Parameter in YAML\nDESCRIPTION: This YAML snippet defines the StreetAddress parameter for a PowerShell cmdlet. It specifies the data type, parameter set, aliases, required status, position, default value, pipeline input, and wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUser.md#_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Defining -TokenEncryptionKeyId Parameter in YAML\nDESCRIPTION: This YAML snippet defines the `-TokenEncryptionKeyId` parameter, specifying its type as a string, indicating it's an optional named parameter with no default value, and doesn't accept pipeline input or wildcard characters. It specifies the key ID of a public key for token encryption.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplication.md#_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Retrieve all object settings example\nDESCRIPTION: This example shows how to retrieve all object settings from Microsoft Entra ID using the -All switch. It retrieves all object settings based on the specified TargetType and TargetObjectId without any limit.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaObjectSetting.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\n$group = Get-EntraBetaGroup -Filter \"DisplayName eq 'Sales and Marketing'\"\nGet-EntraBetaObjectSetting -TargetType 'Groups' -TargetObjectId $group.Id -All\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                   DisplayName         TemplateId\n--                                   -----------         ----------\naaaaaaaa-0000-1111-2222-bbbbbbbbbbbb Group.Unified.Guest 22cc22cc-dd33-ee44-ff55-66aa66aa66aa\n```\n\n----------------------------------------\n\nTITLE: Search Retrieved Devices - EntraBetaDevice - PowerShell\nDESCRIPTION: This example shows how to search for devices containing a specific string ('DESKTOP') within their properties. It requires the 'Device.Read.All' scope and utilizes the Get-EntraBetaDevice cmdlet with the -SearchString parameter. The output displays the devices that contain the search string in their properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDevice.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraBetaDevice -SearchString 'DESKTOP'\n```\n\n----------------------------------------\n\nTITLE: Id Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the `-Id` parameter for the `Reset-EntraLifeCycleGroup` cmdlet.  It specifies that it's a string, is required, accepts pipeline input by property name or value, and does not accept wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Reset-EntraLifeCycleGroup.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Uninstall Microsoft.Entra module (v1)\nDESCRIPTION: This PowerShell command uninstalls the Microsoft.Entra module along with all its versions. The `-Force` parameter suppresses any confirmation prompts during the uninstallation process.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/includes/uninstall-entrapowershell-module.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nUninstall-Module -Name Microsoft.Entra -AllVersions -Force\n```\n\n----------------------------------------\n\nTITLE: Defining UsageLocation Property in YAML\nDESCRIPTION: Defines the UsageLocation property. It specifies a two-letter country or region code (ISO standard 3166). Required for users that assigned licenses due to legal requirement to check for availability of services in country and regions. It specifies the data type, parameter set, aliases, required status, position, default value, and pipeline input/wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUser.md#_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Sponsor by ID - PowerShell\nDESCRIPTION: This example retrieves a specific sponsor for a user using the SponsorId. It connects to Entra ID with the 'User.Read.All' scope, then uses Get-EntraUserSponsor with both `-UserId` and `-SponsorId` parameters. The selected properties are then displayed in a table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserSponsor.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraUserSponsor -UserId 'SawyerM@contoso.com' -SponsorId 'cccccccc-2222-3333-4444-dddddddddddd' |\nSelect-Object Id, DisplayName, '@odata.type', CreatedDateTime | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get User's Direct Reports - Entra ID - PowerShell\nDESCRIPTION: This PowerShell snippet retrieves the direct reports for a specified user from Microsoft Entra ID. It uses the `Get-EntraBetaUserDirectReport` cmdlet with the `-UserId` parameter. It then selects specific properties (Id, displayName, userPrincipalName, createdDateTime, accountEnabled, userType) and formats the output as an auto-sized table.  The initial `Connect-Entra` cmdlet is used to authenticate and establish a connection with the required scopes.  The UserID is mandatory.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserDirectReport.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read', 'User.Read.All'\nGet-EntraBetaUserDirectReport -UserId 'SawyerM@contoso.com' |\nSelect-Object Id, displayName, userPrincipalName, createdDateTime, accountEnabled, userType |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Disconnect Entra Session\nDESCRIPTION: This PowerShell cmdlet disconnects the current session from a Microsoft Entra ID tenant. It has no required parameters and uses common parameters for debugging and error handling.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Disconnect-Entra.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nDisconnect-Entra\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Partner Information Syntax (by TenantId)\nDESCRIPTION: This syntax retrieves partner information using a specific Tenant ID. It uses the `Get-EntraPartnerInformation` cmdlet with the `-TenantId` parameter.  It supports common parameters for debugging and error handling.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraPartnerInformation.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraPartnerInformation\n [-TenantId <Guid>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Updating Trusted Certificate Authorities in Entra ID (PowerShell)\nDESCRIPTION: This PowerShell code snippet demonstrates how to update trusted certificate authorities in Microsoft Entra ID. It first connects to Entra ID with the required scopes, retrieves the CertificateAuthorityInformation object, modifies the CrlDistributionPoint property, and then updates the certificate authority using the `Set-EntraBetaTrustedCertificateAuthority` cmdlet.\n\nPrerequisites: Microsoft.Entra.Beta PowerShell module, appropriate Entra ID permissions.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaTrustedCertificateAuthority.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.ReadWrite.All'\n$cer = Get-EntraBetaTrustedCertificateAuthority #Get the CertificateAuthorityInformation object\n$cer[0].CrlDistributionPoint = \"https://example.crl\"\nSet-EntraBetaTrustedCertificateAuthority -CertificateAuthorityInformation $cer[0]\n```\n\n----------------------------------------\n\nTITLE: Get All Deleted Applications\nDESCRIPTION: Retrieves all deleted applications using the `-All` parameter.  Requires 'Application.Read.All' scope. The output is then formatted as a table with selected properties. This example illustrates how to fetch all available deleted applications without pagination.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedApplication.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraBetaDeletedApplication -All | Select-Object Id, DisplayName, AppId, DeletedDateTime, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Remove Application Proxy Connector Group - PowerShell\nDESCRIPTION: This example demonstrates how to remove a specific Application Proxy Connector Group using the Remove-EntraBetaApplicationProxyConnectorGroup cmdlet.  It requires the 'Directory.ReadWrite.All' scope and specifies the ID of the connector group to be deleted. The connector group must be empty (contain no connectors) for successful removal.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaApplicationProxyConnectorGroup.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\nRemove-EntraBetaApplicationProxyConnectorGroup -Id 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb'\n```\n\n----------------------------------------\n\nTITLE: Domain Name Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the `-Name` parameter for the `Get-EntraDomainNameReference` cmdlet.  It specifies the data type, whether it's required, the position, and other relevant attributes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDomainNameReference.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Synopsis of Get-EntraBetaTenantDetail (PowerShell)\nDESCRIPTION: This synopsis summarizes the core function of the Get-EntraBetaTenantDetail cmdlet: to get the details of a tenant.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaTenantDetail.md#_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\nGets the details of a tenant.\n```\n\n----------------------------------------\n\nTITLE: Remove Administrative Unit Member Example - PowerShell\nDESCRIPTION: This example demonstrates how to remove a specific member from an administrative unit using the `Remove-EntraAdministrativeUnitMember` cmdlet in PowerShell. It first connects to Entra ID, retrieves the administrative unit and the member, and then removes the member using their IDs. The calling principal needs Privileged Role Administrator role.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraAdministrativeUnitMember.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.Read.All'\n$administrativeUnit = Get-EntraAdministrativeUnit -Filter \"DisplayName eq 'Pacific Administrative Unit'\"\n$adminUnitMember = Get-EntraAdministrativeUnitMember -AdministrativeUnitId $administrativeUnit.Id | Select-Object Id, DisplayName,'@odata.type' | Where-Object {$_.DisplayName -eq 'Saywer Miller'}\nRemove-EntraAdministrativeUnitMember -AdministrativeUnitId $administrativeUnit.Id -MemberId $adminUnitMember.Id\n```\n\n----------------------------------------\n\nTITLE: Get User Groups with -All (Example 2)\nDESCRIPTION: This example retrieves all groups a user belongs to, using the `-All` parameter.  The example emphasizes connecting to Entra ID with appropriate scopes before retrieving the user's groups.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserGroup.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All', 'Group.Read.All', 'Directory.Read.All'\nGet-EntraUserGroup -UserId 'SawyerM@contoso.com' -All\n```\n\nLANGUAGE: powershell\nCODE:\n```\nDisplayName                Id                                   MailNickname        Description               GroupTypes\n-----------                --                                   ------------        -----------               ----------\nContoso Marketing          hhhhhhhh-3333-5555-3333-qqqqqqqqqqqq ContosoMarketing    Contoso Marketing         {Unified}\nMark 8 Project Team        pppppppp-4444-0000-8888-yyyyyyyyyyyy  Mark8ProjectTeam    Mark 8 Project Team       {Unified}\nLeadership                 tttttttt-0000-3333-9999-mmmmmmmmmmmm  Leadership          Leadership                {Unified}\nSales and Marketing        qqqqqqqq-5555-0000-1111-hhhhhhhhhhhh  SalesAndMarketing   Sales and Marketing       {Unified}\nRetail                     aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb  Retail              Retail                    {Unified}\n```\n\n----------------------------------------\n\nTITLE: Definition of -CertificateSubjectName Parameter in YAML\nDESCRIPTION: Defines the -CertificateSubjectName parameter, which is the subject distinguished name of a certificate retrieved from the current user's certificate store. It is a System.String, is not required, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Connect-Entra.md#_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: AppCertificateParameterSet\nAliases: CertificateSubject, CertificateName\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Defining MembershipRule Parameter in YAML\nDESCRIPTION: Defines the MembershipRule parameter for a PowerShell cmdlet using YAML. This parameter specifies the rule for dynamic group membership, linking to external documentation for advanced rule creation. It includes type, parameter set, aliases, and other common parameter properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaGroup.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Update Policy Display Name - PowerShell\nDESCRIPTION: This example updates the display name of a specified policy in Microsoft Entra ID. It first connects to Entra ID with the required scopes, retrieves the policy using Get-EntraPolicy, and then updates the display name using Set-EntraPolicy with the -Id and -DisplayName parameters.  Requires the 'Policy.ReadWrite.ApplicationConfiguration' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraPolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ApplicationConfiguration'\n$policy = Get-EntraPolicy | Where-Object { $_.DisplayName -eq 'Microsoft User Default Recommended Policy' }\nSet-EntraPolicy -Id $policy.Id -DisplayName 'NewUpdated'\n```\n\n----------------------------------------\n\nTITLE: Top Parameter Definition in YAML\nDESCRIPTION: This YAML snippet defines the -Top parameter for a PowerShell cmdlet. It specifies the parameter's type as System.Int32, indicates that it's not required, and defines aliases (Limit) and other attributes like accept pipeline input and wildcard characters. The parameter controls the maximum number of records to return.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAuditSignInLog.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Int32\nParameter Sets: (All)\nAliases: Limit\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Add-EntraScopedRoleMembership Syntax - PowerShell\nDESCRIPTION: The syntax for the `Add-EntraScopedRoleMembership` cmdlet. It requires `-AdministrativeUnitId` and accepts optional parameters `-RoleObjectId` and `-RoleMemberInfo`. Common parameters are also supported. This cmdlet is used to assign a Microsoft Entra role with an administrative unit scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Add-EntraScopedRoleMembership.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-EntraScopedRoleMembership\n -AdministrativeUnitId <String>\n [-RoleObjectId <String>]\n [-RoleMemberInfo <RoleMemberInfo>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get-EntraUserThumbnailPhoto Syntax - PowerShell\nDESCRIPTION: This snippet shows the syntax for the Get-EntraUserThumbnailPhoto command in PowerShell. It includes the required UserId parameter and the optional Property parameter, along with the common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserThumbnailPhoto.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraUserThumbnailPhoto\n -UserId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: UserId Parameter - YAML\nDESCRIPTION: This YAML snippet defines the parameters for the UserId used in the Select-EntraGroupIdsUserIsMemberOf cmdlet. It specifies the type, requirement, position, default value, aliases and input acceptance properties for the parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Select-EntraGroupIdsUserIsMemberOf.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: AddIns Parameter Definition\nDESCRIPTION: This YAML snippet describes the `-AddIns` parameter for the `New-EntraApplication` cmdlet. It defines that `AddIns` is a list of `Microsoft.Open.MSGraph.Model.AddIn` objects, is not required, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplication.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.AddIn]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Top Connector in Group\nDESCRIPTION: This example demonstrates how to retrieve only the top one connector from a specified Application Proxy connector group. It utilizes the `-Top` parameter to limit the output. It requires connecting to Entra ID with the 'Directory.ReadWrite.All' scope. The `OnPremisesPublishingProfileId` parameter specifies the connector group.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationProxyConnectorGroupMembers.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\nGet-EntraBetaApplicationProxyConnectorGroupMembers -OnPremisesPublishingProfileId 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb' -Top 1\n```\n\n----------------------------------------\n\nTITLE: Get All Predefined Values - Entra Custom Security Attributes (PowerShell)\nDESCRIPTION: This PowerShell snippet demonstrates how to retrieve all predefined values for a specific custom security attribute definition using the `Get-EntraCustomSecurityAttributeDefinitionAllowedValue` cmdlet.  It first connects to Entra, retrieves the attribute definition using its name, and then uses the definition's ID to get the allowed values.  The signed-in user must have the Attribute Definition Reader or Administrator role.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraCustomSecurityAttributeDefinitionAllowedValue.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'CustomSecAttributeDefinition.ReadWrite.All'\n$attributeDefinition = Get-EntraCustomSecurityAttributeDefinition | Where-Object {$_.Name -eq 'Engineering'}\nGet-EntraCustomSecurityAttributeDefinitionAllowedValue -CustomSecurityAttributeDefinitionId $attributeDefinition.Id\n```\n\n----------------------------------------\n\nTITLE: Defining NoWelcome Parameter in YAML\nDESCRIPTION: This YAML snippet defines the `-NoWelcome` parameter for a PowerShell cmdlet.  It is a switch parameter, so the `Type` is `System.Management.Automation.SwitchParameter`. When specified, the welcome message will be hidden.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Connect-Entra.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases: \nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get available license plans PowerShell\nDESCRIPTION: This PowerShell code snippet demonstrates how to retrieve available license plans by expanding the PrepaidUnits property of the SKUs. It connects to Entra ID and then pipes the output of `Get-EntraSubscribedSku` to `Select-Object` to display specific properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraSubscribedSku.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All', 'Organization.Read.All', 'LicenseAssignment.Read.All'\nGet-EntraSubscribedSku | Select-Object -Property Sku*, ConsumedUnits -ExpandProperty PrepaidUnits\n```\n\n----------------------------------------\n\nTITLE: Get Top N Directory Settings - PowerShell\nDESCRIPTION: Retrieves a specified number of directory settings.  Requires connecting to Entra ID with appropriate scopes. The -Top parameter specifies the number of directory settings to retrieve.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirectorySetting.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All, Group.Read.All, Group.ReadWrite.All'\nGet-EntraBetaDirectorySetting -Top 2\n```\n\n----------------------------------------\n\nTITLE: Reset Strong Authentication Method Example - PowerShell\nDESCRIPTION: Illustrates how to reset a user's strong authentication method using Reset-EntraStrongAuthenticationMethodByUpn. It first connects to Entra ID with the necessary scopes and then resets the authentication method for a specific user identified by their UPN.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Reset-EntraStrongAuthenticationMethodByUpn.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'UserAuthenticationMethod.ReadWrite.All'\nReset-EntraStrongAuthenticationMethodByUpn  -UserPrincipalName 'SawyerM@contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Listing Application Commands - PowerShell\nDESCRIPTION: This PowerShell code snippet filters available commands within the Microsoft Entra module to only show those related to applications. It uses `Get-Command` with the `-Noun` parameter to specify '*application*' as the resource type. This helps in discovering specific application-related cmdlets.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/navigate-entraps.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-Command -Module Microsoft.Entra* -Noun *application*\n```\n\n----------------------------------------\n\nTITLE: Defining UserId Property in YAML\nDESCRIPTION: Defines the UserId property which specifies the ID of a user (as a User Principle Name or UserId) in Microsoft Entra ID. It specifies the data type, parameter set, aliases, required status, position, default value, and pipeline input/wildcard character acceptance. This property is required.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUser.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId, UPN, Identity\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Creating Extension Property - String Type\nDESCRIPTION: This example demonstrates how to create an application extension property of string type using the New-EntraBetaApplicationExtensionProperty cmdlet. It first connects to Entra with specified scopes, retrieves an application, and then creates the extension property. It requires the 'Application.ReadWrite.All' and 'Application.ReadWrite.OwnedBy' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplicationExtensionProperty.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraBetaApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\nNew-EntraBetaApplicationExtensionProperty -ApplicationId $application.Id -Name 'NewAttribute'\n```\n\nLANGUAGE: powershell\nCODE:\n```\nDeletedDateTime Id                                   AppDisplayName  DataType IsSyncedFromOnPremises Name                                                    TargetObjects\n--------------- --                                   --------------  -------- ---------------------- ----                                                    -------------\n                11112222-bbbb-3333-cccc-4444dddd5555 My new test app String   False                  extension_11112222-bbbb-3333-cccc-4444dddd5555_NewAttribute {}\n```\n\n----------------------------------------\n\nTITLE: Get trusted certificate authorities by TrustedIssuerSki\nDESCRIPTION: Retrieves trusted certificate authorities based on the specified TrustedIssuerSki. The TrustedIssuerSki parameter filters the results to only include certificate authorities with a matching subject key identifier (SKI). Requires connecting to Entra with 'Organization.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraTrustedCertificateAuthority.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All'\nGet-EntraTrustedCertificateAuthority -TrustedIssuerSki 4BA2D7AC2A5DF47C70E19E61EDFB4E62B3BF67FD\n```\n\n----------------------------------------\n\nTITLE: Get Object Setting by Query - PowerShell\nDESCRIPTION: Retrieves an object setting using target type and target object ID. This snippet uses the GetQuery syntax of the Get-EntraObjectSetting cmdlet to fetch object settings from Microsoft Entra ID, optionally limiting the results with the -Top parameter or retrieving all results with the -All parameter. The -TargetType and -TargetObjectId parameters are mandatory to specify the type and ID of the target object.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraObjectSetting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraObjectSetting\n [-Top <Int32>]\n [-All]\n -TargetType <String>\n -TargetObjectId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: YAML Parameter Definitions\nDESCRIPTION: These YAML snippets define various parameters for managing user properties in the Entra Beta environment.  They specify the data type, parameter set, whether the parameter is required, position, default value, and whether pipeline input or wildcard characters are accepted. These are used by the PowerShell cmdlets to define how parameters are handled.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaUser.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\nLANGUAGE: YAML\nCODE:\n```\nType: PasswordProfile\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Boolean\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.SignInName]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Add-EntraBetaLifecyclePolicyGroup Syntax - PowerShell\nDESCRIPTION: This snippet shows the syntax for the `Add-EntraBetaLifecyclePolicyGroup` cmdlet. It includes the required parameters `-GroupLifecyclePolicyId` and `-GroupId`. The `GroupLifecyclePolicyId` is the ID of the lifecycle policy and the `GroupId` is the ID of the group to be added. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaLifecyclePolicyGroup.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-EntraBetaLifecyclePolicyGroup\n -GroupLifecyclePolicyId <String>\n -GroupId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get App Role Assignments for a Service Principal - PowerShell\nDESCRIPTION: This example retrieves the application role assignments for a specific service principal. First, it connects to Entra with required scopes. Then, it gets the service principal object by its display name and retrieves its application role assignments using the ServicePrincipalId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalAppRoleAssignment.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraServicePrincipalAppRoleAssignment -ServicePrincipalId $servicePrincipal.Id\n```\n\n----------------------------------------\n\nTITLE: Connect to Entra ID with Credentials\nDESCRIPTION: Connects a PowerShell session to a Microsoft Entra ID tenant using user credentials for delegated access. No specific scopes are requested, so the default scopes will be used.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Connect-Entra.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra\n```\n\n----------------------------------------\n\nTITLE: Get-EntraBetaApplicationProxyConnectorGroupMembers Syntax\nDESCRIPTION: This snippet displays the syntax for the `Get-EntraBetaApplicationProxyConnectorGroupMembers` cmdlet, showcasing the available parameters such as `-OnPremisesPublishingProfileId`, `-All`, `-Top`, and `-Filter`. This cmdlet retrieves all the Application Proxy connectors associated with a provided connector group.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationProxyConnectorGroupMembers.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaApplicationProxyConnectorGroupMembers\n -OnPremisesPublishingProfileId <String>\n [-All]\n [-Top <Int32>]\n [-Filter <String>]\n```\n\n----------------------------------------\n\nTITLE: Resolve Tenant IDs - PowerShell\nDESCRIPTION: This example retrieves all available sign-in events and attempts to resolve the external tenant ID GUID, displaying verbose output. It requires 'AuditLog.Read.All' and 'Directory.Read.All' scopes. The `-ResolveTenantId` parameter is used to resolve the tenant IDs.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaCrossTenantAccessActivity.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All','Directory.Read.All'\nGet-EntraBetaCrossTenantAccessActivity -ResolveTenantId -Verbose\n```\n\n----------------------------------------\n\nTITLE: Remove-EntraUserAppRoleAssignment Syntax - PowerShell\nDESCRIPTION: This snippet defines the syntax for the `Remove-EntraUserAppRoleAssignment` cmdlet in PowerShell. It shows the required parameters: `-AppRoleAssignmentId` (the ID of the application role assignment) and `-UserId` (the ID of the user). It also indicates the support for CommonParameters.  This syntax helps users understand how to properly use the cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraUserAppRoleAssignment.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraUserAppRoleAssignment\n -AppRoleAssignmentId <String>\n -UserId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Top N User Memberships - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve the top three user memberships in Microsoft Entra ID using the Get-EntraUserMembership cmdlet with the -Top parameter. It connects to Entra ID with the User.Read scope, retrieves the top 3 memberships for a specified user ID, and then selects and formats the output to display the ID, displayName, createdDateTime, and @odata.type properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserMembership.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read'\nGet-EntraUserMembership -UserId 'SawyerM@contoso.com' -Top 3 |\nSelect-Object Id, displayName, createdDateTime, '@odata.type' |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Per-User MFA Report - EntraBetaUser PowerShell\nDESCRIPTION: This example demonstrates how to generate a per-user MFA (Multi-Factor Authentication) report in Microsoft Entra ID. It retrieves all users using `Get-EntraBetaUser`, iterates through each user, and retrieves their MFA state using `Get-EntraBetaUserAuthenticationRequirement`.  The results are compiled into a report using custom PowerShell objects.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUser.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -scope 'User.Read.All', 'UserAuthenticationMethod.Read.All'\n$users = Get-EntraBetaUser -All -Select Id, UserPrincipalName, DisplayName\nWrite-Output \"Amount of requests within `\"fetchAll`\": $($users.Count)\"\n$usersReport = [System.Collections.ArrayList]::new()\n$users | ForEach-Object {\n\n    $userProperties = @{\n        Id                = $_.Id\n        DisplayName       = $_.DisplayName\n        UserPrincipalName = $_.UserPrincipalName\n        PerUserMFAState   = (Get-EntraBetaUserAuthenticationRequirement -UserId $_.Id).PerUserMFAState\n    }\n    \n    [void]$usersReport.Add([PSCustomObject]$userProperties)\n}\n\n$usersReport | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Retrieving Users Without Managers (PowerShell)\nDESCRIPTION: This snippet demonstrates how to retrieve users who do not have a manager assigned in Entra ID. It connects to Entra ID, retrieves all users, and iterates through each user to check if a manager is assigned. If no manager is found, the user's information (Id, DisplayName, UserPrincipalName) is displayed in a formatted table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUser.md#_snippet_14\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\n$allUsers = Get-EntraBetaUser -All\n$usersWithoutManagers = foreach ($user in $allUsers) {\n    $manager = Get-EntraBetaUserManager -ObjectId $user.Id -ErrorAction SilentlyContinue\n    if (-not $manager) {\n        [PSCustomObject]@{\n            Id                = $user.Id\n            DisplayName       = $user.DisplayName\n            UserPrincipalName = $user.UserPrincipalName\n        }\n    }\n}\n$usersWithoutManagers | Format-Table Id, DisplayName, UserPrincipalName -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get User Roles with GetQuery Parameters - PowerShell\nDESCRIPTION: This syntax shows how to use the Get-EntraBetaUserRole cmdlet to retrieve user roles with optional parameters like Filter, Top, Property and Sort.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserRole.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaUserRole\n -UserId <String>\n [-All]\n [-Filter <String>]\n [-Top <Int32>]\n [-Property <String[]>]\n [-Sort <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Defining -OrgRestrictions Parameter in YAML\nDESCRIPTION: This YAML snippet defines the `-OrgRestrictions` parameter, specifying its type as a list of strings, indicating it's an optional named parameter with no default value, and doesn't accept pipeline input or wildcard characters. It is reserved for future use.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplication.md#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[System.String]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Update Attribute Set with MaxAttributesPerSet - PowerShell\nDESCRIPTION: Updates the maximum number of attributes allowed in an attribute set. The code connects to Entra with appropriate scopes, then updates the 'Engineering' AttributeSetId to allow only 10 maximum custom security attributes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaAttributeSet.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'CustomSecAttributeDefinition.ReadWrite.All'\nSet-EntraBetaAttributeSet -AttributeSetId 'Engineering' -MaxAttributesPerSet 10\n```\n\n----------------------------------------\n\nTITLE: Get All Devices - EntraBetaDevice - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all devices from Microsoft Entra ID. It requires the 'Device.Read.All' scope and utilizes the Get-EntraBetaDevice cmdlet without any specific parameters. The output displays a list of devices with properties such as Id, AccountEnabled, and DeviceId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDevice.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraBetaDevice\n```\n\n----------------------------------------\n\nTITLE: Definition of -Certificate Parameter in YAML\nDESCRIPTION: Defines the -Certificate parameter, which is an X.509 certificate supplied during invocation. It is of type X509Certificate2, is not required, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Connect-Entra.md#_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nType: X509Certificate2\nParameter Sets: AppCertificateParameterSet\nAliases: \nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Password Credential Output (PowerShell)\nDESCRIPTION: Shows the expected output from the `Get-EntraApplicationPasswordCredential` cmdlet. It displays properties such as CustomKeyIdentifier, DisplayName, EndDateTime, Hint, KeyId, SecretText and StartDateTime related to the application password credential.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplicationPasswordCredential.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nCustomKeyIdentifier  DisplayName EndDateTime         Hint KeyId                                SecretText StartDateTime\n-------------------  ----------- -----------         ---- -----                                ---------- -------------\n{100, 101, 109, 111} demo        26/07/2025 10:34:40 Ap6  bbbbbbbb-1111-2222-3333-cccccccccccc             26/07/2024 10:34:40\n```\n\n----------------------------------------\n\nTITLE: Remove Permission Grant Policy Syntax - PowerShell\nDESCRIPTION: This is the syntax for the `Remove-EntraPermissionGrantPolicy` cmdlet. It requires the `-Id` parameter, which specifies the unique identifier of the permission grant policy to be removed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraPermissionGrantPolicy.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraPermissionGrantPolicy\n -Id <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Defining ConsentProvidedForMinor Parameter in YAML\nDESCRIPTION: This YAML snippet defines the ConsentProvidedForMinor parameter for a PowerShell cmdlet. It specifies the data type, parameter set, aliases, required status, position, default value, pipeline input, and wildcard character acceptance. It sets whether consent has to be obtained for minors.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUser.md#_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Applications by SearchString\nDESCRIPTION: Retrieves deleted applications based on a search string using the `-SearchString` parameter. Requires the 'Application.Read.All' scope.  The command filters results based on a specified string within application properties. The output displays matching applications and their key attributes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedApplication.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraBetaDeletedApplication -SearchString 'TestApp1'\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition for -All\nDESCRIPTION: Defines the -All parameter for Get-EntraUserOAuth2PermissionGrant cmdlet as a switch parameter, which when present returns all pages of results.  Accepts no pipeline input and does not support wildcards.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserOAuth2PermissionGrant.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Application ID Parameter Definition - YAML\nDESCRIPTION: Defines the ApplicationId parameter used in the Get-EntraBetaApplicationKeyCredential cmdlet. This parameter specifies the unique ID of an application in Microsoft Entra ID for which to retrieve key credentials. It is a required parameter that accepts pipeline input.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationKeyCredential.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get top N deleted service principals - PowerShell\nDESCRIPTION: This PowerShell script retrieves a specified number (top 2 in this example) of deleted service principals and displays their properties in a table. It uses the '-Top' parameter to limit the number of results. 'Application.Read.All' scope is necessary.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedServicePrincipal.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraBetaDeletedServicePrincipal -Top 2 | Select-Object Id, DisplayName, AppId, DeletedDateTime, DeletionAgeInDays, ServicePrincipalType | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Retrieve Domain Verification DNS Record - PowerShell\nDESCRIPTION: Demonstrates how to retrieve the domain verification DNS records for a specified domain. It first connects to Entra ID with the 'Domain.Read.All' scope and then calls `Get-EntraDomainVerificationDnsRecord` with the `-Name` parameter to specify the domain (e.g., mail.contoso.com).\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDomainVerificationDnsRecord.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Domain.Read.All'\nGet-EntraDomainVerificationDnsRecord -Name mail.contoso.com\n```\n\n----------------------------------------\n\nTITLE: Get Service Principal Password Credential Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Get-EntraBetaServicePrincipalPasswordCredential cmdlet. It requires the ServicePrincipalId parameter and supports common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalPasswordCredential.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaServicePrincipalPasswordCredential\n -ServicePrincipalId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Retrieve Owned Objects of a Service Principal - PowerShell\nDESCRIPTION: This PowerShell script retrieves the owned objects of a service principal using the Get-EntraBetaServicePrincipalOwnedObject cmdlet. It first connects to Entra ID with the Application.Read.All scope, then retrieves a service principal based on its display name, and finally gets the owned objects, selecting the Id, DisplayName, and '@odata.type' properties for output.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalOwnedObject.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraBetaServicePrincipalOwnedObject -ServicePrincipalId $ServicePrincipal.Id | Select-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: OAuth2PermissionGrant Parameters - YAML\nDESCRIPTION: Defines the parameters for Get-EntraOAuth2PermissionGrant cmdlet, including -All, -Top and -Property. Specifies type, parameter sets, aliases, whether it is required, its position, the default value, and whether it accepts pipeline input and wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraOAuth2PermissionGrant.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Int32\nParameter Sets: (All)\nAliases: Limit\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Output of New-EntraBetaApplicationProxyConnectorGroup (PowerShell)\nDESCRIPTION: This is the expected output from the `New-EntraBetaApplicationProxyConnectorGroup` command after successfully creating a new Application Proxy Connector Group.  It displays the group's ID, context, default status, name, region, and connector group type.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplicationProxyConnectorGroup.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nName                           Value\n----                           -----\nid                             aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb\n@odata.context                 https://graph.microsoft.com/beta/$metadata#onPremisesPublishingProfiles('applicationProxy')/connectorGroups/$entity\nisDefault                      False\nname                           Backup Application Servers\nregion                         eur\nconnectorGroupType             applicationProxy\n```\n\n----------------------------------------\n\nTITLE: PasswordSSOCredential Parameter Definition\nDESCRIPTION: Defines the properties of the PasswordSSOCredential parameter, including its type (PasswordSSOCredentials), requirement (True), position (Named), and whether it accepts pipeline input.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaPasswordSingleSignOnCredential.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.PasswordSSOCredentials\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Device with GetByValue Syntax - PowerShell\nDESCRIPTION: Retrieves devices from Microsoft Entra ID by searching for a string within device properties. Requires the Microsoft.Entra module and appropriate permissions (e.g., Device.Read.All scope).\nThe cmdlet returns a list of device objects matching the specified search string. Consider using the -All parameter to retrieve a large number of devices.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDevice.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraDevice\n [-SearchString <String>]\n [-All]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Domain Name Parameter Definition YAML\nDESCRIPTION: Defines the -Name parameter for the Get-EntraBetaDomainNameReference cmdlet in YAML format. This parameter specifies the domain name for which to retrieve referenced objects and is a required parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDomainNameReference.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get User Group by ID\nDESCRIPTION: This syntax retrieves a specific group a user belongs to using the GetById parameter set. It requires both the UserId and GroupId parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserGroup.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraUserGroup\n -UserId <String>\n -GroupId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Set-EntraTrustedCertificateAuthority Syntax - PowerShell\nDESCRIPTION: This shows the basic syntax for using the Set-EntraTrustedCertificateAuthority cmdlet to update a trusted certificate authority.  It requires a CertificateAuthorityInformation object as input, provided through the -CertificateAuthorityInformation parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraTrustedCertificateAuthority.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-EntraTrustedCertificateAuthority\n -CertificateAuthorityInformation <CertificateAuthorityInformation>\n```\n\n----------------------------------------\n\nTITLE: Install Microsoft Graph PowerShell Beta and v1.0 Modules\nDESCRIPTION: This PowerShell script installs the required modules for both the Microsoft Graph PowerShell SDK Beta and v1.0 versions. It defines a single array containing module names for both versions. The script then iterates through each module, checking if it's installed and installing it if necessary using Install-Module with the CurrentUser scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/includes/install-entra-powershell-dependencies.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$RequiredModules = (@'\nMicrosoft.Graph.DirectoryObjects\nMicrosoft.Graph.Users\nMicrosoft.Graph.Users.Actions\nMicrosoft.Graph.Users.Functions\nMicrosoft.Graph.Groups\nMicrosoft.Graph.Identity.DirectoryManagement\nMicrosoft.Graph.Identity.Governance\nMicrosoft.Graph.Identity.SignIns\nMicrosoft.Graph.Applications\nMicrosoft.Graph.Beta.Applications \nMicrosoft.Graph.Beta.Users\nMicrosoft.Graph.Beta.Users.Actions\nMicrosoft.Graph.Beta.Users.Functions\nMicrosoft.Graph.Beta.Groups\nMicrosoft.Graph.Beta.Identity.DirectoryManagement\nMicrosoft.Graph.Beta.Identity.Governance\nMicrosoft.Graph.Beta.Identity.SignIns\nMicrosoft.Graph.Beta.Reports\n'@).Split(\"`n\")\n# Check if the pre-requisite modules are installed and install them if needed\nforeach ($module in $RequiredModules) {\n    Write-Host -ForegroundColor Yellow -BackgroundColor DarkBlue \"Checking for $module\"\n    if (!(Get-Module -Name $module -ListAvailable)) {\n        Install-Module -Name $module -Scope CurrentUser\n    }\n}\n\n<# Attribution: https://github.com/SamErde and https://github.com/alexandair #>\n```\n\n----------------------------------------\n\nTITLE: Set User Password with Policy\nDESCRIPTION: This example sets a user's password and enforces a password change policy using the Set-EntraBetaUserPassword cmdlet. It connects to Entra ID, converts a plaintext password to a secure string, sets the password for the specified user, and enforces the password change policy. Requires the 'Directory.AccessAsUser.All' scope. The -UserId parameter specifies the user's ID, the -Password parameter specifies the secure password, and the -EnforceChangePasswordPolicy parameter, when set to $True, forces the user to change their password.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUserPassword.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.AccessAsUser.All'\n$newPassword= '<strong-password>'\n$securePassword = ConvertTo-SecureString $newPassword -AsPlainText -Force \nSet-EntraBetaUserPassword -UserId 'SawyerM@contoso.com' -Password $securePassword -EnforceChangePasswordPolicy $True\n```\n\n----------------------------------------\n\nTITLE: Get directory tenant size quota (PowerShell)\nDESCRIPTION: This example demonstrates how to retrieve the directory tenant size quota.  It first connects to Entra ID using the 'Organization.Read.All' scope, then calls Get-EntraBetaTenantDetail and accesses the directorySizeQuota property from the AdditionalProperties. The output displays the used and total quota.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaTenantDetail.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All'\n(Get-EntraBetaTenantDetail).AdditionalProperties.directorySizeQuota\n```\n\n----------------------------------------\n\nTITLE: Update Trusted Certificate Authorities - PowerShell\nDESCRIPTION: This example demonstrates how to update trusted certificate authorities in your directory. It first connects to Entra ID with the 'Organization.ReadWrite.All' scope, retrieves the CertificateAuthorityInformation object, modifies the CrlDistributionPoint property, and then uses Set-EntraTrustedCertificateAuthority to update the certificate authority.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraTrustedCertificateAuthority.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.ReadWrite.All'\n$cer = Get-EntraTrustedCertificateAuthority #Get the CertificateAuthorityInformation object\n$cer[0].CrlDistributionPoint = \"https://example.crl\"\nSet-EntraTrustedCertificateAuthority -CertificateAuthorityInformation $cer[0]\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId\n--\naaaaaaaa-0000-1111-2222-bbbbbbbbbbbb\n```\n\n----------------------------------------\n\nTITLE: Get Delegated Permission Classifications - PowerShell\nDESCRIPTION: Retrieves all delegated permission classifications from a specified service principal. It first connects to Entra ID with required scopes and then uses `Get-EntraServicePrincipal` to find the service principal by display name.  Finally, `Get-EntraServicePrincipalDelegatedPermissionClassification` retrieves the permission classifications using the service principal's ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalDelegatedPermissionClassification.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraServicePrincipalDelegatedPermissionClassification -ServicePrincipalId $servicePrincipal.Id\n```\n\n----------------------------------------\n\nTITLE: New-EntraApplicationKey Syntax\nDESCRIPTION: Defines the syntax of the New-EntraApplicationKey cmdlet, including required and optional parameters like ObjectId, KeyCredential, PasswordCredential, and Proof. It also shows how to use common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplicationKey.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-EntraApplicationKey\n -ObjectId <String>\n -KeyCredential <KeyCredential>\n -PasswordCredential <PasswordCredential>]\n -Proof <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get-EntraBetaDirSyncConfiguration Syntax - PowerShell\nDESCRIPTION: This code snippet shows the syntax for the Get-EntraBetaDirSyncConfiguration cmdlet. It includes the optional TenantId parameter and the CommonParameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirSyncConfiguration.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaDirSyncConfiguration\n [-TenantId <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition: -ApplicationId\nDESCRIPTION: Defines the `-ApplicationId` parameter for the Get-EntraApplicationOwner cmdlet.  This parameter specifies the unique identifier (ObjectId) of the application.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplicationOwner.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Specific Role Template - PowerShell\nDESCRIPTION: This example shows how to retrieve a specific role template (Helpdesk Administrator) using `Get-EntraBetaDirectoryRoleTemplate` and `Where-Object`. It filters the role templates based on the `DisplayName` property.  It also requires connecting to Entra ID with the `RoleManagement.Read.Directory` scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirectoryRoleTemplate.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory'\nGet-EntraBetaDirectoryRoleTemplate | Where-Object {$_.DisplayName -eq 'Helpdesk Administrator'}\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDeletedDateTime Id                                   Description                                                             DisplayName\n-------------- --                                   -----------                                                             -----------\n                729827e3-9c14-49f7-bb1b-9608f156bbb8 Can reset passwords for non-administrators and Helpdesk Administrators. Helpdesk Administrator\n```\n\n----------------------------------------\n\nTITLE: Get All User Owned Devices\nDESCRIPTION: Retrieves all registered devices owned by the specified user. It utilizes the -All parameter in conjunction with the -UserId parameter to fetch all devices, bypassing any default limitations on the number of results.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserOwnedDevice.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraUserOwnedDevice -UserId 'SawyerM@contoso.com' -All\n```\n\n----------------------------------------\n\nTITLE: Remove Object Setting Syntax - PowerShell\nDESCRIPTION: This snippet shows the syntax for the Remove-EntraBetaObjectSetting cmdlet. It includes the required parameters: -Id, -TargetType, and -TargetObjectId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaObjectSetting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraBetaObjectSetting\n -Id <String>\n -TargetType <String>\n -TargetObjectId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Set Entra User Extension with ExtensionNameValues - PowerShell\nDESCRIPTION: This update to `Set-EntraUserExtension` adds support for the `ExtensionNameValues` parameter. This allows users to set user extension properties using the provided parameter. The provided snippet specifies the command and parameter which is used to add support for extension name values.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n`Set-EntraUserExtension` - Add support for support `ExtensionNameValues` parameter\n```\n\n----------------------------------------\n\nTITLE: Get Specific Administrative Unit by ID - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a specific administrative unit from Microsoft Entra ID using the Get-EntraBetaAdministrativeUnit cmdlet and the `-AdministrativeUnitId` parameter. The `-AdministrativeUnitId` parameter specifies the unique identifier of the administrative unit to retrieve. This command requires that you connect to Entra ID with the appropriate scopes. The output displays the properties of the specified administrative unit.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAdministrativeUnit.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.Read.All'\nGet-EntraBetaAdministrativeUnit -AdministrativeUnitId 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb'\n```\n\n----------------------------------------\n\nTITLE: Retrieve User Password Policy - EntraBetaUser PowerShell\nDESCRIPTION: This example shows how to retrieve the password policy for a specific user in Microsoft Entra ID. The `Connect-Entra` cmdlet is used to establish a connection with the required scopes. The `Get-EntraBetaUser` is used with the `-UserId` parameter to target user and `-Property` parameter to specify the properties. A select statement is used to format the output.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUser.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraBetaUser -UserId 'SawyerM@contoso.com' `\n              -Property UserPrincipalName, PasswordPolicies |\n    Select-Object UserPrincipalName,\n                  @{\n                      Name = \"PasswordNeverExpires\"\n                      Expression = { $_.PasswordPolicies -contains \"DisablePasswordExpiration\" }\n                  }\n```\n\n----------------------------------------\n\nTITLE: Get OAuth2 Permission Grants - PowerShell\nDESCRIPTION: This command retrieves and displays the OAuth2 permission grants associated with a specific client service principal.  It filters the grants based on the `ClientId` property. The resulting grants are formatted as a list and displayed to confirm the granted delegated permissions.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/how-to-grant-revoke-api-permissions.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraOAuth2PermissionGrant |\n  Where-Object {$_.ClientId -eq $clientServicePrincipal.Id} | Format-List\n```\n\n----------------------------------------\n\nTITLE: Documenting -SearchString Parameter in YAML\nDESCRIPTION: This YAML snippet documents the `-SearchString` parameter for a PowerShell cmdlet. It specifies the parameter's type, parameter set, aliases, whether it's required, its position, default value, and pipeline input properties.  It is used to define a search string to filter the results.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDevice.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: GetValue\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: AdministrativeUnitId Parameter Definition - YAML\nDESCRIPTION: Defines the AdministrativeUnitId parameter for the Remove-EntraBetaScopedRoleMembership cmdlet in YAML format. It specifies the parameter's type, requirement, position, default value, and pipeline input acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaScopedRoleMembership.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Domain Service Configuration Records by Name - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve domain service configuration records for a specific domain name using the Get-EntraDomainServiceConfigurationRecord cmdlet. It first connects to Entra ID with the required scopes and then uses the -Name parameter to specify the domain for which the records should be retrieved. The output displays the configuration records.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDomainServiceConfigurationRecord.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Domain.Read.All'\nGet-EntraDomainServiceConfigurationRecord -Name 'test.mail.contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Remove Entra Role Assignment Syntax (PowerShell)\nDESCRIPTION: This snippet shows the syntax for the Remove-EntraBetaDirectoryRoleAssignment cmdlet. It requires the UnifiedRoleAssignmentId to identify the role assignment to be removed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaDirectoryRoleAssignment.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraBetaDirectoryRoleAssignment\n -UnifiedRoleAssignmentId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Output from updating a certificate authority\nDESCRIPTION: This is the output after successfully updating the certificate authority with Set-EntraBetaTrustedCertificateAuthority.  It returns the Id of the modified certificate authority.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaTrustedCertificateAuthority.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nId\n--\naaaaaaaa-0000-1111-2222-bbbbbbbbbbbb\n```\n\n----------------------------------------\n\nTITLE: Get All Administrative Units with -All Parameter - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all administrative units from Microsoft Entra ID using the Get-EntraBetaAdministrativeUnit cmdlet with the `-All` parameter. The `-All` parameter ensures that all administrative units are retrieved, regardless of the number of pages. It is useful when dealing with a large number of administrative units. The output displays the properties of each administrative unit.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAdministrativeUnit.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.Read.All'\nGet-EntraBetaAdministrativeUnit -All\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - Property\nDESCRIPTION: This YAML snippet defines the `-Property` parameter for the `Get-EntraDeletedDevice` cmdlet. It is a String Array, optional and Select is an alias for the same.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedDevice.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Connect to Entra ID using System-Assigned Managed Identity - PowerShell\nDESCRIPTION: This command demonstrates how to connect to Microsoft Entra ID using a system-assigned managed identity. It uses the Connect-Entra cmdlet with the -Identity parameter.  Requires the Microsoft Entra PowerShell module, and the Azure resource must have a system-assigned managed identity enabled.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/app-only-access-auth.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Identity\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition: -Id - PowerShell\nDESCRIPTION: Describes the `-Id` parameter of the Remove-EntraBetaPolicy cmdlet.  This parameter is required and specifies the unique identifier of the policy to be removed.  It accepts input from the pipeline by property name and by value.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaPolicy.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Removing User App Role Assignment - PowerShell\nDESCRIPTION: This code snippet demonstrates how to remove a user application role assignment in Microsoft Entra ID using the `Remove-EntraBetaUserAppRoleAssignment` cmdlet. It requires the `UserId` and `AppRoleAssignmentId` as parameters. The user needs appropriate Microsoft Entra roles or a custom role with the required permissions to execute the command.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaUserAppRoleAssignment.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraBetaUserAppRoleAssignment\n -UserId <String>\n -AppRoleAssignmentId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get-EntraDirectoryRole Syntax (GetQuery) - PowerShell\nDESCRIPTION: Defines the syntax for the Get-EntraDirectoryRole cmdlet using the GetQuery parameter set. It shows how to use the -Filter and -Property parameters with this set, along with the common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDirectoryRole.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraDirectoryRole\n [-Filter <String>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Defining TelephoneNumber Parameter in YAML\nDESCRIPTION: This YAML snippet defines the TelephoneNumber parameter for a PowerShell cmdlet. It specifies the data type, parameter set, aliases, required status, position, default value, pipeline input, and wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUser.md#_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling a Device - PowerShell\nDESCRIPTION: This PowerShell script enables a Microsoft Entra device using its ObjectId.  It first connects to Entra ID with the 'Device.ReadWrite.All' scope and then uses the Set-EntraDevice cmdlet to modify the device's AccountEnabled property to $true, effectively enabling the device. Requires Intune Administrator or Cloud Device Administrator role.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-devices.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.ReadWrite.All'  \nSet-EntraDevice -ObjectId 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb' -AccountEnabled $true  \n```\n\n----------------------------------------\n\nTITLE: Get-EntraDirectoryObjectOnPremisesProvisioningError Syntax\nDESCRIPTION: This code snippet shows the syntax for the Get-EntraDirectoryObjectOnPremisesProvisioningError cmdlet, including the optional TenantId parameter. The CommonParameters are also included, such as Debug, ErrorAction, etc.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDirectoryObjectOnPremisesProvisioningError.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraDirectoryObjectOnPremisesProvisioningError\n [-TenantId <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Group by GroupId - PowerShell\nDESCRIPTION: This PowerShell snippet retrieves a deleted group by its GroupId. It connects to Entra ID and uses the `-GroupId` parameter to specify the ID of the group to retrieve, then formats the output for easy reading.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedGroup.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Group.Read.All'\nGet-EntraDeletedGroup -GroupId 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb' | Select-Object Id, DisplayName, MailNickname, GroupTypes, DeletedDateTime, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get Password Policy - Default Syntax - PowerShell\nDESCRIPTION: Retrieves the current password policy for the tenant using the default syntax. It does not require any specific parameters.  This form is used to get the password policy at the tenant level. Requires appropriate Microsoft Entra role or custom role.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraPasswordPolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraPasswordPolicy\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Service Principal Membership Syntax - PowerShell\nDESCRIPTION: Defines the syntax for using the Get-EntraServicePrincipalMembership cmdlet. It shows the required parameter ServicePrincipalId and optional parameters like All, Top, and Property.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalMembership.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraServicePrincipalMembership\n -ServicePrincipalId <String>\n [-All]\n [-Top <Int32>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Defining Context Scope Parameter in YAML\nDESCRIPTION: This YAML snippet defines the `-ContextScope` parameter for a PowerShell cmdlet. It specifies that it can take either `Process` or `CurrentUser` as a value. Accepted values are `Process` and `CurrentUser` and it's applicable to multiple parameter sets.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Connect-Entra.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nType: ContextScope\nAccepted values: Process, CurrentUser\nParameter Sets: UserParameterSet, AppCertificateParameterSet, IdentityParameterSet, AppSecretCredentialParameterSet, EnvironmentVariableParameterSet\nAliases: \nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Update User in Federated Domain (Cloud-Only)\nDESCRIPTION: Updates a user in a domain that was recently converted from federated to standard authentication.  The system generates a new password. Requires the UserPrincipalName parameter to identify the user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Update-EntraBetaUserFromFederated.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-EntraBetaUserFromFederated\n -UserPrincipalName <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Adding Group to Cloud Authentication Rollout Policy (PowerShell)\nDESCRIPTION: This PowerShell code snippet adds a group to a cloud authentication roll-out policy in Microsoft Entra ID. It first connects to Entra using the required scopes, then defines parameters including the policy ID and the object ID of the group to be added, and finally executes the `Add-EntraBetaFeatureRolloutPolicyDirectoryObject` cmdlet with these parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaFeatureRolloutPolicyDirectoryObject.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-EntraBetaFeatureRolloutPolicyDirectoryObject\n -Id <String>\n -RefObjectId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - Property\nDESCRIPTION: This YAML snippet defines the `-Property` parameter, which is a string array used to specify which properties to return. It allows an alias of `-Select` and does not support pipeline input.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserSponsor.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Application Templates in CRM Category - Powershell\nDESCRIPTION: This PowerShell script retrieves application templates that belong to the 'crm' category from the Microsoft Entra gallery. It uses the `-Filter` parameter with an OData query to filter the results based on the Categories property. It also selects specific properties (`Id`, `DisplayName`, `Publisher`, `Categories`) to be returned.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationTemplate.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraBetaApplicationTemplate -Filter \"Categories/any(c:c eq 'crm')\" -Select Id, DisplayName, Publisher, Categories\n```\n\n----------------------------------------\n\nTITLE: Reset Entra Lifecycle Group Syntax - PowerShell\nDESCRIPTION: This snippet shows the syntax for the `Reset-EntraLifeCycleGroup` cmdlet. It requires the `-Id` parameter, which specifies the ID of the group to be renewed. It also supports CommonParameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Reset-EntraLifeCycleGroup.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nReset-EntraLifeCycleGroup\n -Id <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Top Two Group Members - PowerShell\nDESCRIPTION: This example retrieves the top two group members from Microsoft Entra ID. The `-Top` parameter limits the results. It requires 'GroupMember.Read.All' scope. The output displays the Id, DisplayName, and @odata.type properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaGroupMember.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All'\n$group = Get-EntraBetaGroup -Filter \"DisplayName eq 'Sales and Marketing'\"\nGet-EntraBetaGroupMember -GroupId $group.Id -Top 2 | Select-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Query Entra Groups without Members with PowerShell\nDESCRIPTION: This PowerShell script identifies Microsoft Entra groups that are empty (have no members). It fetches all groups using Get-EntraGroup, iterates through each one, and uses Get-EntraGroupMember to check for members. If a group has no members, it is added to the $groupsWithoutMembers collection. This script requires the Microsoft Entra PowerShell module and the necessary permissions to retrieve group and member information.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-groups.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\n$allGroups = Get-EntraGroup -All\n$groupsWithoutMembers = foreach ($group in $allGroups) {\n    $members = Get-EntraGroupMember -GroupId $group.Id\n    if ($members.Count -eq 0) {\n        $group\n    }\n}\n$groupsWithoutMembers | Format-Table DisplayName, Id, GroupTypes\n```\n\n----------------------------------------\n\nTITLE: Get Group Membership For User - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve the group membership of a group for a specified user in Microsoft Entra ID. It uses `Connect-Entra` to authenticate, `Get-EntraBetaGroup` to retrieve group information, creates a `GroupIdsForMembershipCheck` object, and calls `Select-EntraBetaGroupIdsUserIsMemberOf` to perform the membership check. The user is specified using `-UserId` and the group IDs are passed via the `-GroupIdsForMembershipCheck` parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Select-EntraBetaGroupIdsUserIsMemberOf.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$myGroup = Get-EntraBetaGroup -Filter \"DisplayName eq '<Group-DisplayName>'\"\n$groups = New-Object Microsoft.Open.AzureAD.Model.GroupIdsForMembershipCheck\n$groups.GroupIds = $myGroup.Id\nSelect-EntraBetaGroupIdsUserIsMemberOf -UserId 'SawyerM@contoso.com' -GroupIdsForMembershipCheck $groups\n```\n\nLANGUAGE: powershell\nCODE:\n```\naaaaaaaa-0000-1111-2222-bbbbbbbbbbbb\n```\n\n----------------------------------------\n\nTITLE: Listing ownerless groups - PowerShell\nDESCRIPTION: This PowerShell snippet retrieves a list of groups without owners in Microsoft Entra ID. It first connects to Entra ID using `Connect-Entra` with the necessary scopes, then retrieves all groups using `Get-EntraGroup -All`. It iterates through each group, checks for owners using `Get-EntraGroupOwner`, and if a group has no owners, it's added to the `$groupsWithoutOwners` array.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraGroup.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All'\n$allGroups = Get-EntraGroup -All\n$groupsWithoutOwners = foreach ($group in $allGroups) {\n    $owners = Get-EntraGroupOwner -ObjectId $group.Id\n    if ($owners.Count -eq 0) {\n        $group\n    }\n}\n$groupsWithoutOwners | Format-Table DisplayName, Id, GroupTypes\n```\n\n----------------------------------------\n\nTITLE: Get All Direct Reports - Entra ID - PowerShell\nDESCRIPTION: This PowerShell snippet retrieves all direct reports for a specified user from Microsoft Entra ID. It leverages the `Get-EntraBetaUserDirectReport` cmdlet with both the `-UserId` and `-All` parameters to ensure all reports are fetched, regardless of pagination. The output is then formatted to display selected user properties in an auto-sized table. The `Connect-Entra` cmdlet ensures a secure connection with adequate permissions.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserDirectReport.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read', 'User.Read.All'\nGet-EntraBetaUserDirectReport -UserId 'SawyerM@contoso.com' -All |\nSelect-Object Id, displayName, userPrincipalName, createdDateTime, accountEnabled, userType |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Add Device Registered Owner - PowerShell\nDESCRIPTION: This snippet demonstrates how to add a user as a registered owner for a specific device in Microsoft Entra ID. It retrieves the user and device objects using their respective IDs and then uses the `Add-EntraBetaDeviceRegisteredOwner` cmdlet to establish the ownership relationship.  Requires the 'Device.ReadWrite.All' scope and that the user has appropriate administrative privileges (Intune Administrator or Windows 365 Administrator).\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaDeviceRegisteredOwner.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Device.ReadWrite.All'\n$user = Get-EntraBetaUser -UserId 'SawyerM@contoso.com'\n$device = Get-EntraBetaDevice -SearchString '<device-display-name>'\nAdd-EntraBetaDeviceRegisteredOwner -DeviceId $device.Id -OwnerId $user.Id\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - Property - YAML\nDESCRIPTION: This YAML snippet defines the `-Property` parameter for the `Get-EntraBetaUserDirectReport` cmdlet. This parameter allows specifying which properties to be returned in the result. The alias for this parameter is `-Select`. It accepts a string array and does not accept wildcard characters or pipeline input. The default value is None.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserDirectReport.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition: -All\nDESCRIPTION: Defines the `-All` parameter, a switch parameter that, when present, instructs the cmdlet to list all policies.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPolicy.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get All Attribute Sets with Get-EntraAttributeSet (PowerShell)\nDESCRIPTION: This example demonstrates how to retrieve all attribute sets in a Microsoft Entra ID tenant. It requires the 'CustomSecAttributeDefinition.ReadWrite.All' scope. It first connects to Entra ID and then executes the Get-EntraAttributeSet cmdlet without any parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAttributeSet.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'CustomSecAttributeDefinition.ReadWrite.All'\nGet-EntraAttributeSet \n```\n\n----------------------------------------\n\nTITLE: Create a basic permission grant condition set\nDESCRIPTION: This example shows how to create a basic permission grant condition set in an existing policy using the New-EntraPermissionGrantConditionSet cmdlet. It uses the PolicyId, ConditionSetType, and PermissionType parameters.  It requires the 'Policy.ReadWrite.PermissionGrant' scope and retrieves a permission grant policy by its ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraPermissionGrantConditionSet.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.PermissionGrant'\n$permissionGrantPolicy = Get-EntraPermissionGrantPolicy | Where-Object {$_.Id -eq 'my-custom-consent-policy'}\nNew-EntraPermissionGrantConditionSet -PolicyId $permissionGrantPolicy.Id -ConditionSetType 'includes' -PermissionType 'delegated'\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId                                   ClientApplicationIds ClientApplicationPublisherIds ClientApplicationTenantIds ClientApplicationsFromVerifiedPublisherOnly PermissionClassification PermissionType Permissions\n--                                   -------------------- ----------------------------- -------------------------- ------------------------------------------- ------------------------ -------------- ---------\naaaa0000-bb11-2222-33cc-444444dddddd {all}                {all}                         {all}                      False                                       all                      delegated      {all}\n```\n\n----------------------------------------\n\nTITLE: UserId Parameter Definition - YAML\nDESCRIPTION: This YAML code defines the `-UserId` parameter for the Revoke-EntraUserAllRefreshToken cmdlet.  It specifies the data type, parameter sets, aliases (ObjectId), requirements, position (Named), default value (None), pipeline input acceptance, and wildcard character support.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Revoke-EntraUserAllRefreshToken.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Defining -RequiredResourceAccess Parameter in YAML\nDESCRIPTION: This YAML snippet defines the `-RequiredResourceAccess` parameter, specifying its type as a list of `RequiredResourceAccess` objects, indicating it's an optional named parameter with no default value, and doesn't accept pipeline input or wildcard characters. It specifies resources that the application requires access to.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplication.md#_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.RequiredResourceAccess]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Id Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the `-Id` parameter for the `Remove-EntraPermissionGrantPolicy` cmdlet. It specifies the data type, parameter sets, aliases, requirement status, position, default value, pipeline input acceptance, and wildcard character support.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraPermissionGrantPolicy.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get all permission grant policies using Get-EntraBetaPermissionGrantPolicy (PowerShell)\nDESCRIPTION: This example demonstrates how to retrieve all permission grant policies using the Get-EntraBetaPermissionGrantPolicy cmdlet. It first connects to Entra ID with the required scopes and then executes the cmdlet. The output displays the DeletedDateTime and Description of each policy.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPermissionGrantPolicy.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.PermissionGrant'\nGet-EntraBetaPermissionGrantPolicy\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n```Output\nDeletedDateTime Description\n--------------- -----------\n                Includes all application permissions (app roles), for all APIs, for any client application.\n                Includes all chat resoruce-specific application permissions, for all APIs, for any client application.\n                (Deprecated) Includes all team resource-specific application permissions, for all APIs, for any client application.\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieve User's Registered Authentication Methods Properties - PowerShell\nDESCRIPTION: This example retrieves specific properties of a user's registered authentication methods using the `Get-EntraAuthenticationMethodUserRegistrationDetailReport` cmdlet with the `-Property` parameter. It connects to Entra ID with the necessary scopes and formats the output as a table for readability. The Microsoft.Entra module is a required dependency.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAuthenticationMethodUserRegistrationDetailReport.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All'\nGet-EntraAuthenticationMethodUserRegistrationDetailReport -Property id, userDisplayName, userType, isMfaRegistered, isPasswordlessCapable | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: UserId Parameter Definition - YAML\nDESCRIPTION: Defines the UserId parameter for the Get-EntraBetaUserAuthenticationMethod cmdlet. It specifies that the parameter is a string type, is required, accepts input via property name or value, and does not accept wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserAuthenticationMethod.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: GetQuery\nAliases: ObjectId, UPN, Identity, UserPrincipalName\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Update Named Location Policy Display Name - PowerShell\nDESCRIPTION: This command updates the display name of a named location policy in Microsoft Entra ID by PolicyId. It connects to Entra, retrieves a specific named location policy by display name, and then uses Set-EntraNamedLocationPolicy to update the policy with the specified parameters, including PolicyId, OdataType, and DisplayName.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraNamedLocationPolicy.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ConditionalAccess'\n$policy = Get-EntraNamedLocationPolicy | Where-Object { \"$_.DisplayName -eq 'IP named location policy'\" }\n$type = '#microsoft.graph.ipNamedLocation'\nSet-EntraNamedLocationPolicy -PolicyId $policy.Id -OdataType $type -DisplayName 'NewName'\n```\n\n----------------------------------------\n\nTITLE: Get Directory Role Templates Syntax - PowerShell\nDESCRIPTION: This shows the syntax for the `Get-EntraBetaDirectoryRoleTemplate` cmdlet. It specifies the available parameters, including `-Property` and common parameters. This cmdlet retrieves directory role templates from Microsoft Entra ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirectoryRoleTemplate.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaDirectoryRoleTemplate\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Federation Properties for Domain - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve federation properties for a specific domain using the `Get-EntraBetaFederationProperty` cmdlet after connecting to Entra ID with appropriate scopes. It requires the `DomainName` parameter to specify the domain to query and it uses the `Connect-Entra` to establish a connection with the necessary scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaFederationProperty.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Domain.Read.All'\nGet-EntraBetaFederationProperty -DomainName 'contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Property Parameter Definition (YAML)\nDESCRIPTION: Defines the Property parameter for the Get-EntraGroupPermissionGrant cmdlet, specifying its type, requirement, position, default value, and ability to accept pipeline input.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraGroupPermissionGrant.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: GroupId Parameter Definition - YAML\nDESCRIPTION: Defines the GroupId parameter for the Remove-EntraBetaGroupMember cmdlet. This parameter specifies the object ID of the group in Microsoft Entra ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaGroupMember.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Retrieve Guest Users Without Sign-Ins - Example 2\nDESCRIPTION: This example shows how to retrieve guest users who haven't signed in within the last 10 days. The `-UserType` parameter is used to filter for guest users.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserInactiveSignIn.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All','AuditLog.Read.All'\nGet-EntraBetaUserInactiveSignIn -Ago 10 -UserType 'Guest'\n```\n\n----------------------------------------\n\nTITLE: Parameter definition for -Top (YAML)\nDESCRIPTION: Defines the `-Top` parameter for the Get-EntraBetaTenantDetail cmdlet. This parameter specifies the maximum number of records to return. The `-Limit` alias can be used as a substitute for `-Top`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaTenantDetail.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Int32\nParameter Sets: (All)\nAliases: Limit\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Defining External URL Parameter in YAML\nDESCRIPTION: This YAML snippet defines the `-ExternalUrl` parameter, specifying its type as `System.String`, its requirement status, and its ability to accept pipeline input by property name or value. It is used for configuring the external address users use to access an application.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplicationProxyApplication.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Property Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the `-Property` parameter for the `Get-EntraBetaUserExtension` cmdlet.  It specifies that the parameter is a string array type, optional, does not accept pipeline input, and does not accept wildcard characters. It is used to select specific properties to return.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserExtension.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Per-User MFA Report - Entra ID - PowerShell\nDESCRIPTION: This example creates a report on the per-user MFA state for all users in Microsoft Entra ID. It retrieves all users, then iterates through each user to get their MFA state using `Get-EntraBetaUserAuthenticationRequirement`. It requires the 'User.Read.All' and 'UserAuthenticationMethod.Read.All' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUser.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -scope 'User.Read.All', 'UserAuthenticationMethod.Read.All'\n$users = Get-EntraUser -All -Select Id, UserPrincipalName, DisplayName \nWrite-Output \"Amount of requests within \\`\"fetchAll\\`\": $($users.Count)\" \n$usersReport = [System.Collections.ArrayList]::new()\n$users | ForEach-Object { \n\n    $userProperties = @{\n        Id                = $_.Id\n        DisplayName       = $_.DisplayName\n        UserPrincipalName = $_.UserPrincipalName\n        PerUserMFAState   = (Get-EntraBetaUserAuthenticationRequirement -UserId $_.Id).PerUserMFAState\n    }\n    \n    [void]$usersReport.Add([PSCustomObject]$userProperties)\n} \n\n$usersReport | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Uninstall all Microsoft.Entra submodules (v1)\nDESCRIPTION: This PowerShell script retrieves all installed submodules of the Microsoft.Entra module (excluding Beta modules) and then iterates through them, uninstalling each one using `Uninstall-Module`.  The `-Force` parameter bypasses confirmation prompts, and `-ErrorAction Stop` ensures that the script terminates if an error occurs during uninstallation.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/includes/uninstall-entrapowershell-module.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n$InstalledSubModules = Get-InstalledModule -Name Microsoft.Entra.* |\nWhere-Object { $_.Name -notmatch \"Beta\" }\nforeach ($module in $InstalledSubModules) {\n    Write-Host \"Checking for submodule: $($module.Name)\" -ForegroundColor Yellow -BackgroundColor DarkBlue\n    Uninstall-Module -Name $module.Name -Force -ErrorAction Stop\n    Write-Host \"Successfully uninstalled submodule: $($module.Name)\" -ForegroundColor Green\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Users with a Specific License (PowerShell)\nDESCRIPTION: This snippet demonstrates how to retrieve users that have a specific license assigned to them. It first connects to Entra ID, retrieves the SkuId for a specific license (e.g., 'POWERAPPS_DEV'), and then filters the users based on that SkuId. Finally, it formats the output to display relevant user properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUser.md#_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\n$skuId = (Get-EntraBetaSubscribedSku | Where-Object { $_.SkuPartNumber -eq 'POWERAPPS_DEV' }).SkuId\nGet-EntraBetaUser -Filter \"assignedLicenses/any(l:l/skuId eq $skuId)\" -Select id, displayName, userPrincipalName, userType, accountEnabled, assignedLicenses |\nSelect-Object id, displayName, userPrincipalName, userType, accountEnabled | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get Top N Direct Reports - Entra ID - PowerShell\nDESCRIPTION: This PowerShell script retrieves a specified number (top 2 in this example) of direct reports for a user from Microsoft Entra ID. The `Get-EntraBetaUserDirectReport` cmdlet is used with the `-UserId` and `-Top` parameters. The output is formatted using `Select-Object` and `Format-Table`. The `Connect-Entra` cmdlet initializes the connection, requiring the necessary 'User.Read' and 'User.Read.All' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserDirectReport.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read', 'User.Read.All'\nGet-EntraBetaUserDirectReport -UserId 'SawyerM@contoso.com' -Top 2 |\nSelect-Object Id, displayName, userPrincipalName, createdDateTime, accountEnabled, userType |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get-EntraSubscription Syntax - GetById\nDESCRIPTION: This syntax block describes the GetById parameter set for the Get-EntraSubscription cmdlet. It retrieves a commercial subscription by its CommerceSubscriptionId and allows selecting properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraSubscription.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraSubscription\n -CommerceSubscriptionId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Add Service Principal Policy Example - PowerShell\nDESCRIPTION: This example demonstrates how to add a policy to a service principal using the `Add-EntraBetaServicePrincipalPolicy` cmdlet. It first connects to Entra ID with the necessary scopes and then uses the cmdlet with the `-Id` and `-RefObjectId` parameters to add the policy. The `$params` hashtable stores the parameter values for cleaner syntax.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaServicePrincipalPolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.All, Application.ReadWrite.All'\n$params = @{\n    Id = 'bbbbbbbb-1111-1111-1111-cccccccccccc'\n    RefObjectId = 'ffffffff-5555-6666-7777-aaaaaaaaaaaa'\n}\nAdd-EntraBetaServicePrincipalPolicy @params\n```\n\n----------------------------------------\n\nTITLE: Get OAuth2 Permission Grants for User Using -All\nDESCRIPTION: Retrieves all OAuth2 permission grants for a user using the Get-EntraUserOAuth2PermissionGrant cmdlet with the -All parameter.  It requires the Microsoft.Entra module and the Directory.Read.All scope. The -UserId parameter specifies the user's object ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserOAuth2PermissionGrant.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\nGet-EntraUserOAuth2PermissionGrant -UserId 'SawyerM@contoso.com' -All\n```\n\n----------------------------------------\n\nTITLE: Set Thumbnail Photo - File Path - PowerShell\nDESCRIPTION: This snippet demonstrates the syntax for the `Set-EntraBetaUserThumbnailPhoto` cmdlet when setting a user's thumbnail photo using a file path. It specifies the `-FilePath` parameter as a string and allows for the optional `-UserId` parameter. The cmdlet requires the `User.ReadWrite.All` permission to update any user's photo, or `User.ReadWrite` to update the signed-in user's photo. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUserThumbnailPhoto.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-EntraBetaUserThumbnailPhoto\n -FilePath <String>\n [-UserId <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Update Administrative Unit Display Name and Description - PowerShell\nDESCRIPTION: This PowerShell snippet updates the display name and description of a specific administrative unit. It first connects to Entra ID with the necessary scopes, then retrieves the administrative unit using a filter on the display name, and finally updates the administrative unit's properties using `Set-EntraBetaAdministrativeUnit`. The `-AdministrativeUnitId` parameter specifies the target administrative unit, while `-DisplayName` and `-Description` set the new values.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaAdministrativeUnit.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.ReadWrite.All'\n$administrativeUnit = Get-EntraBetaAdministrativeUnit -Filter \"DisplayName eq 'Pacific Administrative Unit'\"\nSet-EntraBetaAdministrativeUnit -AdministrativeUnitId $administrativeUnit.Id -DisplayName 'Pacific Admin Unit' -Description 'Pacific Admin Unit Description' -MembershipType 'Assigned'\n```\n\n----------------------------------------\n\nTITLE: GroupIdsForMembershipCheck Parameter - YAML\nDESCRIPTION: Defines the `-GroupIdsForMembershipCheck` parameter. It accepts a `GroupIdsForMembershipCheck` object, is required, and accepts pipeline input by property name or value.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Select-EntraBetaGroupIdsServicePrincipalIsMemberOf.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nType: GroupIdsForMembershipCheck\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Defining PreferredLanguage Property in YAML\nDESCRIPTION: Defines the PreferredLanguage property which specifies the user's preferred language. It specifies the data type, parameter set, aliases, required status, position, default value, and pipeline input/wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUser.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Permission Grant Policies (Query)\nDESCRIPTION: Retrieves a list of permission grant policies from Microsoft Entra ID. Requires the 'Policy.Read.PermissionGrant' scope. This example shows how to connect to Entra ID and retrieve all policies.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraPermissionGrantPolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraPermissionGrantPolicy\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.PermissionGrant'\nGet-EntraPermissionGrantPolicy\n```\n\n----------------------------------------\n\nTITLE: Set Application Logo with Stream - PowerShell\nDESCRIPTION: Sets the logo for an Azure AD application using a stream. Requires the ApplicationId of the application. Requires the Microsoft.Entra module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraApplicationLogo.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-EntraApplicationLogo\n -ApplicationId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Id Parameter Definition (YAML)\nDESCRIPTION: This YAML snippet defines the `-Id` parameter for the `Remove-EntraBetaServicePrincipalPolicy` cmdlet. It specifies the parameter type as `System.String`, indicates that it is a required parameter, and allows pipeline input by property name and value.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaServicePrincipalPolicy.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Defining JobTitle Property in YAML\nDESCRIPTION: Defines the JobTitle property which specifies the user's job title. It specifies the data type, parameter set, aliases, required status, position, default value, and pipeline input/wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUser.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Retrieving all sponsors of a user using Get-EntraBetaUserSponsor in PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all sponsors for a specific user using the Get-EntraBetaUserSponsor cmdlet. It connects to Entra ID with the 'User.Read' scope, retrieves all sponsors for the user 'SawyerM@contoso.com', and then selects and formats specific properties for display. The cmdlet requires the Microsoft.Entra.Beta module to be installed and the user to have appropriate permissions (e.g., Guest Inviter, Directory Readers).\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserSponsor.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read' # User.Read.All is an application-only permission, which does not require a user to be signed in interactively\nGet-EntraBetaUserSponsor -UserId 'SawyerM@contoso.com' -All |\nSelect-Object Id, DisplayName, '@odata.type', CreatedDateTime | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: New-EntraBetaPermissionGrantPolicy Syntax (PowerShell)\nDESCRIPTION: The syntax for the `New-EntraBetaPermissionGrantPolicy` cmdlet is provided here, including parameters such as Description, DisplayName, and Id, along with common parameters. These parameters are used to define the properties of the permission grant policy being created.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaPermissionGrantPolicy.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-EntraBetaPermissionGrantPolicy\n [-Description <String>]\n [-DisplayName <String>]\n [-Id <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Application Policy Example - PowerShell\nDESCRIPTION: Demonstrates how to retrieve a specific application policy using the Get-EntraBetaApplicationPolicy cmdlet. Includes connecting to Entra with appropriate scopes and specifying the policy ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationPolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All'\nGet-EntraBetaApplicationPolicy -Id 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb'\n```\n\n----------------------------------------\n\nTITLE: Delete Deleted Directory Object Example - PowerShell\nDESCRIPTION: This example demonstrates how to permanently delete a previously deleted directory object by its ID. It first connects to Entra ID with required scopes, retrieves a deleted application object, and then uses `Remove-EntraBetaDeletedDirectoryObject` to permanently delete the object.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaDeletedDirectoryObject.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Group.ReadWrite.All','Application.ReadWrite.All','User.ReadWrite.All'\n$deletedApplication = Get-EntraBetaDeletedApplication -SearchString 'My PowerShell Application'\nRemove-EntraBetaDeletedDirectoryObject -DirectoryObjectId $deletedApplication.Id\n```\n\n----------------------------------------\n\nTITLE: Remove Service Principal Owner Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Remove-EntraBetaServicePrincipalOwner cmdlet. It takes the OwnerId and ServicePrincipalId as parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaServicePrincipalOwner.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraBetaServicePrincipalOwner\n -OwnerId <String>\n -ServicePrincipalId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove Device Owner using Remove-EntraBetaDeviceRegisteredOwner PowerShell\nDESCRIPTION: This snippet demonstrates how to remove a registered owner from a device in Microsoft Entra ID using the Remove-EntraBetaDeviceRegisteredOwner cmdlet. It first retrieves the device and owner objects, and then uses the cmdlet to remove the association. It requires the 'Directory.AccessAsUser.All' scope and the Intune Administrator or Windows 365 Administrator role.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaDeviceRegisteredOwner.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.AccessAsUser.All'\n$device = Get-EntraBetaDevice -Filter \"DisplayName eq 'Woodgrove Desktop'\"\n$owner = Get-EntraBetaDeviceRegisteredOwner -DeviceId $device.Id | Where-Object {$_.userPrincipalName -eq 'parker@contoso.com'}\nRemove-EntraBetaDeviceRegisteredOwner -DeviceId $device.Id -OwnerId $owner.Id\n```\n\n----------------------------------------\n\nTITLE: Get Contact Manager Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Get-EntraContactManager cmdlet. It requires the OrgContactId and optionally accepts the Property parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraContactManager.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraContactManager\n -OrgContactId <String>\n [-Property <String[]]>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Output of New-EntraBetaApplicationPassword (PowerShell)\nDESCRIPTION: This is the expected output after successfully adding a password using the `New-EntraBetaApplicationPassword` cmdlet. It displays properties like the custom key identifier, display name, end date and time, hint, key ID, secret text (masked), and start date and time of the newly added password credential. The secret text represents the actual password that has been generated.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplicationPassword.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nCustomKeyIdentifier DisplayName EndDateTime          Hint KeyId                                SecretText                               StartDateTime\n------------------- ----------- -----------          ---- -----                                ----------                               -------------\n{97}                            2/28/2025 7:05:39 AM nnW  bbbbbbbb-1c1c-2d2d-3e3e-444444444444 <my-secret-text> 12/28/2024 7:05:39 AM\n```\n\n----------------------------------------\n\nTITLE: Remove-EntraUserSponsor Syntax (PowerShell)\nDESCRIPTION: The syntax of the Remove-EntraUserSponsor cmdlet including parameters for specifying the User ID and Sponsor ID. This cmdlet removes a sponsor from a user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraUserSponsor.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraUserSponsor\n -UserId <String>\n -SponsorId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Top Application Sign-in Summaries Last Month - PowerShell\nDESCRIPTION: This example retrieves the top two sign-in summaries for all applications over the last 30 days. It requires connecting to Entra ID with 'Reports.Read.All' scope and uses the Get-EntraBetaApplicationSignInSummary cmdlet with the -Days and -Top parameters. The output displays the top two applications based on sign-in activity.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationSignInSummary.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Reports.Read.All'\nGet-EntraBetaApplicationSignInSummary -Days 30 -Top 2\n```\n\n----------------------------------------\n\nTITLE: MemberId Parameter Definition - YAML\nDESCRIPTION: Defines the MemberId parameter for the Remove-EntraBetaGroupMember cmdlet.  This parameter specifies the ID of the member to remove and accepts input from the pipeline by property name or value.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaGroupMember.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get-EntraConditionalAccessPolicy Syntax (GetQuery)\nDESCRIPTION: This snippet shows the syntax for the Get-EntraConditionalAccessPolicy cmdlet without specifying a PolicyId. It retrieves conditional access policies using optional property filters. It utilizes common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraConditionalAccessPolicy.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraConditionalAccessPolicy\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove Application Password Syntax - PowerShell\nDESCRIPTION: This snippet shows the syntax for the Remove-EntraApplicationPassword cmdlet. It requires the ApplicationId and optionally takes a KeyId to specify which password to remove.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraApplicationPassword.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraApplicationPassword\n -ApplicationId <String>\n [-KeyId <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Update Feature Rollout Policy - Description - PowerShell\nDESCRIPTION: This example demonstrates how to update the description of a cloud authentication roll-out policy in Microsoft Entra ID. It requires the 'Directory.ReadWrite.All' scope. The Connect-Entra cmdlet establishes the connection to Entra ID, and Get-EntraFeatureRolloutPolicy retrieves the existing policy.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraFeatureRolloutPolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\n$policy = Get-EntraFeatureRolloutPolicy -Filter \"DisplayName eq 'Feature-Rollout-Policy'\"\nSet-EntraFeatureRolloutPolicy -Id $policy.Id -Description 'Feature-Rollout-Policytest'\n```\n\n----------------------------------------\n\nTITLE: Listing empty groups - PowerShell\nDESCRIPTION: This PowerShell snippet retrieves a list of groups without members in Microsoft Entra ID. It connects to Entra ID using Connect-Entra, retrieves all groups using Get-EntraGroup -All, iterates through each group, and checks for members using Get-EntraGroupMember. If a group has no members, it is added to the $groupsWithoutMembers array.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraGroup.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All'\n$allGroups = Get-EntraGroup -All\n$groupsWithoutMembers = foreach ($group in $allGroups) {\n    $members = Get-EntraGroupMember -ObjectId $group.Id\n    if ($members.Count -eq 0) {\n        $group\n    }\n}\n$groupsWithoutMembers | Format-Table DisplayName, Id, GroupTypes\n```\n\n----------------------------------------\n\nTITLE: List Disabled Users with Active Licenses - EntraBetaUser PowerShell\nDESCRIPTION: This example shows how to retrieve disabled users who still have active licenses assigned in Microsoft Entra ID. The `Connect-Entra` cmdlet is used to establish a connection with the required scopes. `Get-EntraBetaUser` with `-Filter` parameter retrieves disabled users, then `Where-Object` filters further to only include users with active licenses assigned.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUser.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\n$disabledUsersWithLicenses = Get-EntraBetaUser -Filter \"accountEnabled eq false\" -All | Where-Object {\n    $_.AssignedLicenses -ne $null -and $_.AssignedLicenses.Count -gt 0\n}\n$disabledUsersWithLicenses | Select-Object Id, DisplayName, UserPrincipalName, AccountEnabled | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Connecting to Entra ID with Connect-Entra (PowerShell)\nDESCRIPTION: This command connects to Entra ID using the Connect-Entra cmdlet from the Microsoft.Entra module.  It depends on the Microsoft.Entra PowerShell module and acts as a proxy command for `Connect-MgGraph`. It establishes a connection to Microsoft Entra ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_40\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra\n```\n\n----------------------------------------\n\nTITLE: List enabled devices with Get-EntraBetaDevice (PowerShell)\nDESCRIPTION: This PowerShell code retrieves a list of enabled devices from Microsoft Entra ID. It connects to Entra ID using Connect-Entra with the 'Device.Read.All' scope. The Get-EntraBetaDevice cmdlet is used with a filter to return devices where 'accountEnabled' is true, utilizing the '-All' parameter to retrieve all pages of results.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDevice.md#_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraBetaDevice -Filter \"accountEnabled eq true\" -All\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition: -Property\nDESCRIPTION: Defines the -Property parameter for the Get-EntraBetaServicePrincipalOwner cmdlet. This parameter specifies the properties to be returned.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalOwner.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Role Assignments by ID - PowerShell\nDESCRIPTION: Retrieves a specific role assignment using its `UnifiedRoleAssignmentId`. It first retrieves a user and a role definition, then filters all assignments to find the one matching both the user and role. Finally, it retrieves and displays that specific role assignment.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirectoryRoleAssignment.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory', 'EntitlementManagement.Read.All'\n$user = Get-EntraBetaUser -UserId 'SawyerM@contoso.com'\n$role = Get-EntraBetaDirectoryRoleDefinition -Filter \"DisplayName eq 'Helpdesk Administrator'\"\n$assignment = Get-EntraBetaDirectoryRoleAssignment -All | Where-Object { $_.principalId -eq $user.Id -AND $_.RoleDefinitionId -eq $role.Id }\nGet-EntraBetaDirectoryRoleAssignment -UnifiedRoleAssignmentId $assignment.Id\n```\n\n----------------------------------------\n\nTITLE: Get All User App Role Assignments - PowerShell\nDESCRIPTION: This example retrieves all application role assignments for a specified user. It connects to Entra ID using Connect-Entra and then uses Get-EntraUserAppRoleAssignment with both the -UserId and -All parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserAppRoleAssignment.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AppRoleAssignment.ReadWrite.All', 'Directory.Read.All'\nGet-EntraUserAppRoleAssignment -UserId 'SawyerM@contoso.com' -All\n```\n\n----------------------------------------\n\nTITLE: Update Identity Provider Client Secret - PowerShell\nDESCRIPTION: This PowerShell snippet updates the Client Secret of a specified identity provider. It uses the `Set-EntraBetaIdentityProvider` cmdlet.  The `-IdentityProviderBaseId` parameter specifies the identity provider to modify, and the `-ClientSecret` parameter sets the new client secret. Note that client secrets are write-only.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaIdentityProvider.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'IdentityProvider.ReadWrite.All'\nSet-EntraBetaIdentityProvider -IdentityProviderBaseId 'Google-OAuth' -ClientSecret 'NewClientSecret'\n```\n\n----------------------------------------\n\nTITLE: Defining State Property in YAML\nDESCRIPTION: Defines the State property which specifies the user's state. It specifies the data type, parameter set, aliases, required status, position, default value, and pipeline input/wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUser.md#_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Password Credential for Application - PowerShell\nDESCRIPTION: Demonstrates how to retrieve the password credential for a specific application using the Get-EntraBetaApplicationPasswordCredential cmdlet.  It first connects to Entra ID with necessary scopes and then retrieves the password credential using the application's ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationPasswordCredential.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$application = Get-EntraBetaApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\nGet-EntraBetaApplicationPasswordCredential -ApplicationId $application.Id\n```\n\n----------------------------------------\n\nTITLE: Remove-EntraApplicationExtensionProperty Syntax - PowerShell\nDESCRIPTION: The syntax for the `Remove-EntraApplicationExtensionProperty` cmdlet requires the `ExtensionPropertyId` and `ApplicationId` parameters to specify which extension property to remove from which application. It also accepts common parameters for debugging, error handling, and output control.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraApplicationExtensionProperty.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraApplicationExtensionProperty\n -ExtensionPropertyId <String>\n -ApplicationId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove Key Credential Example - PowerShell\nDESCRIPTION: This example demonstrates how to remove a key credential from a service principal. It first connects to Entra ID with specific scopes, retrieves the service principal and key, and then removes the key credential using its ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraServicePrincipalKeyCredential.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All', 'Application.ReadWrite.OwnedBy'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\n$key = Get-EntraServicePrincipalKeyCredential -ServicePrincipalId $servicePrincipal.Id\nRemove-EntraServicePrincipalKeyCredential -ServicePrincipalId $servicePrincipal.Id -KeyId $key.Id\n```\n\n----------------------------------------\n\nTITLE: Get Top Device Registered Owner - Specific Device\nDESCRIPTION: This example retrieves the top registered owner (limited to 1) of a specific device. It connects to Entra ID with the 'Device.Read.All' scope, retrieves a device, and then uses `Get-EntraDeviceRegisteredOwner` with the `-Top 1` parameter to retrieve only one registered owner. The results are formatted into a table with selected properties.\n\nDependencies: Microsoft.Entra module, Device.Read.All scope\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeviceRegisteredOwner.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\n$device = Get-EntraDevice -SearchString '<device-display-name>'\nGet-EntraDeviceRegisteredOwner -DeviceId $device.Id -Top 1 |\nSelect-Object Id, displayName, UserPrincipalName, createdDateTime, userType, accountEnabled |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Updating Directory Setting in Entra ID using Set-EntraBetaDirectorySetting (PowerShell)\nDESCRIPTION: This example demonstrates how to update a directory setting object in Microsoft Entra ID using the `Set-EntraBetaDirectorySetting` cmdlet. It first connects to Entra ID, retrieves a directory setting template, creates a directory setting, modifies the `EnableMIPLabels` property, and then updates the directory setting using the `Set-EntraBetaDirectorySetting` cmdlet with the specified ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaDirectorySetting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All', 'Policy.ReadWrite.Authorization'\n$TemplateId = (Get-EntraBetaDirectorySettingTemplate | where { $_.DisplayName -eq 'Group.Unified' }).Id\n$Template = Get-EntraBetaDirectorySettingTemplate | where -Property Id -Value $TemplateId -EQ\n$Setting = $Template.CreateDirectorySetting()\n$Setting[\"EnableMIPLabels\"] = 'False'\n$params = @{\n    Id = 'aaaaaaaa-1111-1111-1111-000000000000'\n    DirectorySetting = $Setting\n}\nSet-EntraBetaDirectorySetting @params\n```\n\n----------------------------------------\n\nTITLE: Create an extension property with target objects - PowerShell\nDESCRIPTION: This PowerShell code demonstrates how to create an application extension property with a specified target object. It connects to Entra ID, retrieves an application, creates a list of target objects and adds the string 'User' to it. It then uses the `New-EntraApplicationExtensionProperty` cmdlet with the `-TargetObjects` parameter to define the target for the new attribute. The values must be in PascalCase.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplicationExtensionProperty.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\n$targets = New-Object System.Collections.Generic.List[System.String]\n$targets.Add('User')\nNew-EntraApplicationExtensionProperty -ApplicationId $application.Id -Name 'NewAttribute2' -TargetObjects $targets\n```\n\n----------------------------------------\n\nTITLE: Get User Owned Devices - Basic\nDESCRIPTION: This example demonstrates how to retrieve the registered devices owned by a specified user in Microsoft Entra ID.  It first connects to Entra ID using the Connect-Entra cmdlet, specifying the 'User.Read.All' scope for necessary permissions. Then, it uses Get-EntraBetaUserOwnedDevice with the -UserId parameter to retrieve the devices associated with the provided user principal name. The output includes the ObjectId, DeviceId, and DisplayName of the devices.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserOwnedDevice.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraBetaUserOwnedDevice -UserId 'SawyerM@contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Get Top Two Group Members - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve the top two members of a specified group from Microsoft Entra ID. It connects to Entra ID with the required scopes, retrieves a group using its display name filter, then uses `Get-EntraGroupMember` with the `-Top` parameter to limit the number of returned members to two, selecting the `Id`, `DisplayName`, and `@odata.type` properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraGroupMember.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All'\n$group = Get-EntraGroup -Filter \"DisplayName eq 'Sales and Marketing'\"\nGet-EntraGroupMember -GroupId $group.Id -Top 2 | Select-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Administrative Unit - Example 6 (AdministrativeUnitId)\nDESCRIPTION: This example retrieves a deleted administrative unit by its ID, selects specific properties, and displays them in a formatted table. The `-AdministrativeUnitId 'gggggggg-8888-9999-aaaa-hhhhhhhhhhhh'` parameter specifies the ID of the administrative unit to retrieve. It connects to Entra ID using the 'AdministrativeUnit.Read.All' scope. The output shows the selected properties for the specified deleted administrative unit.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedAdministrativeUnit.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.Read.All'\nGet-EntraBetaDeletedAdministrativeUnit -AdministrativeUnitId 'gggggggg-8888-9999-aaaa-hhhhhhhhhhhh' | Select-Object Id, DisplayName, MembershipType, Visibility, DeletedDateTime, DeletionAgeInDays | Format-Table -AutoSize\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                   DisplayName                   MembershipType     Visibility         DeletedDateTime           DeletionAgeInDays\n--                                   -----------                   --------------     ----------         ---------------           -----------------\ngggggggg-8888-9999-aaaa-hhhhhhhhhhhh Americas Administrative Unit   Dynamic           HiddenMembership   2/12/2025 12:40:52 PM     10\n```\n\n----------------------------------------\n\nTITLE: Remove OAuth2 Permission Grant (Entra ID) - PowerShell\nDESCRIPTION: This example demonstrates how to remove an OAuth2PermissionGrant object in Microsoft Entra ID using PowerShell. It first connects to Entra ID, retrieves the service principal for Microsoft SharePoint, identifies the specific OAuth2 permission grant for 'AllSites.Read', and then removes it using the `Remove-EntraBetaOAuth2PermissionGrant` cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaOAuth2PermissionGrant.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'DelegatedPermissionGrant.ReadWrite.All'\n$sharePointSP = Get-EntraBetaServicePrincipal | Where-Object { $_.DisplayName -eq 'Microsoft.SharePoint' }\n$sharePointOAuth2AllSitesRead = Get-EntraBetaOAuth2PermissionGrant | Where-Object { $_.ResourceId -eq $sharePointSP.Id } | Where-Object { $_.Scope -eq 'AllSites.Read' }\nRemove-EntraBetaOAuth2PermissionGrant -OAuth2PermissionGrantId $sharePointOAuth2AllSitesRead.Id\n```\n\n----------------------------------------\n\nTITLE: ServicePrincipalId Parameter - YAML\nDESCRIPTION: Defines the `-ServicePrincipalId` parameter. It accepts a string representing the object ID of a service principal, is required, and accepts pipeline input by property name or value.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Select-EntraBetaGroupIdsServicePrincipalIsMemberOf.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Defining TelephoneNumber Property in YAML\nDESCRIPTION: Defines the TelephoneNumber property which specifies the user's telephone number. It specifies the data type, parameter set, aliases, required status, position, default value, and pipeline input/wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUser.md#_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition -All Parameter YAML\nDESCRIPTION: This YAML snippet defines the -All parameter for the Get-EntraUserDirectReport cmdlet, which is used to list all pages of results. This is a switch parameter, and is optional.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserDirectReport.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Remove-EntraAdministrativeUnit Syntax - PowerShell\nDESCRIPTION: This snippet shows the syntax for the Remove-EntraAdministrativeUnit cmdlet. It uses the AdministrativeUnitId parameter to specify the administrative unit to remove. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraAdministrativeUnit.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraAdministrativeUnit\n -AdministrativeUnitId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Create Role Definition w/ Description (PowerShell)\nDESCRIPTION: Creates a new role definition in Microsoft Entra ID including a description. This snippet demonstrates how to use the `-Description` parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaDirectoryRoleDefinition.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory'\n$rolePermissions = New-object Microsoft.Open.MSGraph.Model.RolePermission\n$rolePermissions.AllowedResourceActions = @(\"microsoft.directory/applications/basic/read\")\nNew-EntraBetaDirectoryRoleDefinition -RolePermissions $rolePermissions -IsEnabled $false -DisplayName 'MyRoleDefinition' -Description 'Role Definition demo'\n```\n\n----------------------------------------\n\nTITLE: Connect and Get Entra User (v1.0) PowerShell\nDESCRIPTION: Connects to Entra ID with User.Read.All scope and retrieves a user with a specific userPrincipalName using the Get-EntraUser cmdlet. Requires the Entra PowerShell module to be installed.  The filter parameter is used to specify the userPrincipalName to search for.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/includes/sign-in.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraUser -Filter \"userPrincipalName eq 'SawyerM@contoso.com'\"\n```\n\n----------------------------------------\n\nTITLE: Get all user-created objects using Get-EntraUserCreatedObject in PowerShell\nDESCRIPTION: This example retrieves all objects created by the specified user using the Get-EntraUserCreatedObject cmdlet with the -All parameter. It requires the 'User.Read' and 'User.Read.All' scopes and selects the Id, DisplayName, and '@odata.type' properties. The -UserId parameter specifies the user's object ID (UPN or UserId).\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserCreatedObject.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read','User.Read.All'\nGet-EntraUserCreatedObject -UserId 'SawyerM@contoso.com' -All | Select-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Property Parameter Definition - YAML\nDESCRIPTION: This YAML block defines the 'Property' parameter, which specifies properties to be returned, for the Get-EntraServicePrincipalMembership cmdlet. It also defines 'Select' as an alias.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalMembership.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Directory Role Filter by DisplayName - Example\nDESCRIPTION: This example retrieves a directory role by its display name using the `-Filter` parameter. It connects to Entra ID and then uses `Get-EntraBetaDirectoryRole` to find the role with a display name of 'Helpdesk Administrator'.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirectoryRole.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory'\nGet-EntraBetaDirectoryRole -Filter \"displayName eq 'Helpdesk Administrator'\"\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDeletedDateTime Id                                   Description\n---------------\n aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb Perform all migration functionality to migrate content to Microsoft 365 usin...\n```\n\n----------------------------------------\n\nTITLE: Using Debug Option - PowerShell\nDESCRIPTION: This snippet illustrates how to use the `-Debug` option to obtain detailed diagnostic information when running a Microsoft Entra PowerShell cmdlet. This can be helpful in troubleshooting scripts and identifying issues. Requires the Microsoft Entra PowerShell module to be installed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/entra-powershell-best-practices.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraUser -Top 1 -Debug\n```\n\n----------------------------------------\n\nTITLE: Property Parameter Definition - YAML\nDESCRIPTION: Defines the `-Property` parameter for the `Get-EntraBetaLifecyclePolicyGroup` cmdlet in YAML format. This parameter allows specifying which properties to return in the output.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaLifecyclePolicyGroup.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: UserId Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the -UserId parameter for the Get-EntraUserThumbnailPhoto command. It specifies the data type, parameter sets, aliases, requirement, position, default value, pipeline input, and wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserThumbnailPhoto.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId, UPN, Identity, UserPrincipalName\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Add User to Administrative Unit (PowerShell)\nDESCRIPTION: This example demonstrates how to add a user as a member of an administrative unit. It uses Connect-Entra to connect, Get-EntraBetaAdministrativeUnit to find the administrative unit by display name, Get-EntraBetaUser to find the user by user ID, and then Add-EntraBetaAdministrativeUnitMember to add the user to the administrative unit.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaAdministrativeUnitMember.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.ReadWrite.All'\n$administrativeUnit = Get-EntraBetaAdministrativeUnit -Filter \"DisplayName eq '<administrativeunit-display-name>'\"\n$user = Get-EntraBetaUser -UserId 'SawyerM@contoso.com'\nAdd-EntraBetaAdministrativeUnitMember -AdministrativeUnitId $administrativeUnit.Id -MemberId $user.Id\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition: -Top\nDESCRIPTION: Defines the -Top parameter for the Get-EntraBetaServicePrincipalOwner cmdlet. This parameter specifies the maximum number of records to return.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalOwner.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Int32\nParameter Sets: (All)\nAliases: Limit\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: AppId Parameter Definition\nDESCRIPTION: Defines the AppId parameter for the New-EntraBetaServicePrincipal cmdlet. It specifies the unique identifier for the associated application.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaServicePrincipal.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition -DeviceId\nDESCRIPTION: This YAML snippet defines the `-DeviceId` parameter. It specifies the object ID of a device as a string. It is a required parameter, accepts pipeline input by property name or value, and does not accept wildcard characters. It is used to specify which device's registered users should be retrieved.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeviceRegisteredUser.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: List users with revoked sessions in last 30 Days - PowerShell\nDESCRIPTION: This script retrieves a list of users whose sessions have been revoked in the last 30 days. It connects to Entra with User.Read.All scope. It calculates a date 30 days in the past, retrieves all users, filters for those whose 'signInSessionsValidFromDateTime' is greater than or equal to the calculated past date, and displays specific user properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUser.md#_snippet_18\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\n$pastDate = (Get-Date).AddDays(-30).ToUniversalTime()\nGet-EntraUser | Where-Object { $_.signInSessionsValidFromDateTime -ge $pastDate } |\nSelect-Object DisplayName, UserPrincipalName, signInSessionsValidFromDateTime\n```\n\n----------------------------------------\n\nTITLE: Get all role definitions using Get-EntraDirectoryRoleDefinition (PowerShell)\nDESCRIPTION: This example demonstrates how to retrieve all role definitions present in Microsoft Entra ID using the `Get-EntraDirectoryRoleDefinition` cmdlet. It first establishes a connection to Entra ID with the necessary scopes for role management and entitlement management. No specific parameters are used to filter or limit the results, so all role definitions are returned. The output displays the `DisplayName`, `Id`, `TemplateId`, and `Description` for each role definition.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDirectoryRoleDefinition.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory', 'EntitlementManagement.Read.All'\nGet-EntraDirectoryRoleDefinition\n```\n\n----------------------------------------\n\nTITLE: Filter Audit Logs by Group Creation in PowerShell\nDESCRIPTION: This snippet shows how to filter audit logs to find those related to group creation using the `Get-EntraBetaAuditDirectoryLog` cmdlet. It first retrieves the group ID using `Get-EntraBetaGroup` and then uses the `Filter` parameter to specify the `activityDisplayName` and `targetResources` based on the retrieved group ID.  Dependencies include the Entra PowerShell module and the availability of a group to search for.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAuditDirectoryLog.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All, Directory.Read.All'\n$groupId = (Get-EntraBetaGroup -SearchString 'Woodgrove DevOps').Id\nGet-EntraBetaAuditDirectoryLog -Filter \"\n    activityDisplayName eq 'Add group' \n    and targetResources/any(r:r/id eq '$groupId')\"\n```\n\n----------------------------------------\n\nTITLE: Update Role Assignment Request - PowerShell\nDESCRIPTION: This example demonstrates how to update a role assignment request by setting it to 'AdminDenied' and providing a reason.  It uses the Set-EntraBetaPrivilegedRoleAssignmentRequest cmdlet with the -ProviderId, -Id, -Reason, and -Decision parameters. The ProviderId specifies the Azure Resources provider, the Id is the unique identifier of the request, the Reason provides admin's remarks and the Decision is set to AdminDenied.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaPrivilegedRoleAssignmentRequest.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> Set-EntraBetaPrivilegedRoleAssignmentRequest -ProviderId AzureResources -Id 8d28fcb3-1373-4810-8e84-75adea9a18be -Reason \"{'RequestorReason':'test','AdminReason':'gg'}\" -Decision \"AdminDenied\"\n```\n\n----------------------------------------\n\nTITLE: Finding User Accounts Without Usage Location (PowerShell)\nDESCRIPTION: This PowerShell snippet retrieves user accounts that are missing a `UsageLocation` attribute and are of type 'Member'. It uses the `Get-EntraUser` cmdlet to fetch all users, filters them based on the specified criteria, and then displays selected properties (Id, DisplayName, UserPrincipalName, UsageLocation) for the filtered users.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/how-to-manage-user-licenses.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\n$users = Get-EntraUser | Where-Object { $_.UsageLocation -eq $null -and $_.UserType -eq 'Member' }\n$users | Select-Object Id, DisplayName, UserPrincipalName, UsageLocation\n```\n\n----------------------------------------\n\nTITLE: Get Group Permission Grants Syntax - PowerShell\nDESCRIPTION: This snippet shows the syntax for the `Get-EntraBetaGroupPermissionGrant` cmdlet.  It takes a `GroupId` as input and optionally a `Property` parameter to specify which properties to return. It uses common PowerShell parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaGroupPermissionGrant.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaGroupPermissionGrant\n -GroupId <String>\n [-Property <String[]>] \n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Trust Framework Policy by ID to File - PowerShell\nDESCRIPTION: This snippet retrieves the contents of a specified trust framework policy using its ID and saves it to a specified output file path. It requires the 'Policy.Read.All' and 'Policy.ReadWrite.TrustFramework' scopes to be granted. The `-Id` parameter specifies the ID of the policy, and the `-OutputFilePath` parameter specifies the file path where the contents will be saved.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaTrustFrameworkPolicy.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.All', 'Policy.ReadWrite.TrustFramework'\n$params = @{\n    Id = 'B2C_1A_SIGNUP_SIGNIN'\n    OutputFilePath = 'C:\\RetrivedPolicy.xml'\n}\nGet-EntraBetaTrustFrameworkPolicy @params\n```\n\n----------------------------------------\n\nTITLE: Remove Service Principal Owner Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Remove-EntraServicePrincipalOwner cmdlet. This cmdlet removes an owner from a specified service principal. It requires the OwnerId and ServicePrincipalId parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraServicePrincipalOwner.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraServicePrincipalOwner\n -OwnerId <String>\n -ServicePrincipalId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - Conditions\nDESCRIPTION: This YAML snippet defines the Conditions parameter for the Set-EntraConditionalAccessPolicy cmdlet. It specifies that it accepts a ConditionalAccessConditionSet object, is optional, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraConditionalAccessPolicy.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nType: ConditionalAccessConditionSet\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Cmdlet Syntax - PowerShell\nDESCRIPTION: This is the syntax for the Add-EntraBetaServicePrincipalDelegatedPermissionClassification cmdlet using the ByServicePrincipalAndPermissionInfo parameter set. It shows the required parameters: -PermissionId, -Classification, -PermissionName, and -ServicePrincipalId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaServicePrincipalDelegatedPermissionClassification.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-EntraBetaServicePrincipalDelegatedPermissionClassification\n -PermissionId <String>\n -Classification <ClassificationEnum>\n -PermissionName <String>\n -ServicePrincipalId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: List User Count per Department - EntraBetaUser PowerShell\nDESCRIPTION: This example shows how to retrieve the number of users in each department from Microsoft Entra ID.  The `Connect-Entra` cmdlet is used to establish a connection with the required scopes.  `Get-EntraBetaUser` retrieves all users, and `Group-Object` is used to group users by department.  A custom object is then constructed to display the department name and member count.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUser.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\n$departmentCounts = Get-EntraBetaUser -All | Group-Object -Property Department | Select-Object Name, @{Name=\"MemberCount\"; Expression={$_.Count}}\n$departmentCounts | Format-Table Name, MemberCount -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Add Application Policy using Add-EntraBetaApplicationPolicy (PowerShell)\nDESCRIPTION: This snippet demonstrates how to add an application policy using the Add-EntraBetaApplicationPolicy cmdlet. It first connects to Entra ID with specified scopes and then uses the cmdlet with the Id and RefObjectId parameters to add the policy to the application. It requires the Microsoft.Entra.Beta module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaApplicationPolicy.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All, Policy.ReadWrite.ApplicationConfiguration'\n$params = @{\n    Id = 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb'\n    RefObjectId = 'bbbbbbbb-1111-2222-3333-cccccccccccc'\n}\nAdd-EntraBetaApplicationPolicy @params\n```\n\n----------------------------------------\n\nTITLE: Get Privileged Roles with Optional Filter (GetQuery Syntax) - PowerShell\nDESCRIPTION: This snippet shows the default syntax for the Get-EntraBetaPrivilegedRole command. It allows filtering results using the -Filter parameter and selecting specific properties using the -Property parameter. This approach retrieves privileged roles based on specified criteria or returns all roles if no filter is provided. It leverages the Microsoft.Entra.Beta module in PowerShell.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPrivilegedRole.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaPrivilegedRole\n [-Filter <String>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Property Parameter - YAML\nDESCRIPTION: This YAML snippet describes the `-Property` parameter for the `Get-EntraBetaGroupLifecyclePolicy` cmdlet.  It specifies that the parameter is of type `System.String[]`, is optional for all parameter sets, and does not accept wildcard characters. This parameter is used to specify which properties should be returned in the output.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaGroupLifecyclePolicy.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get All Entra Environments - PowerShell\nDESCRIPTION: Retrieves a list of all available global public Entra environments. This command does not require any specific parameters and returns a table containing environment details such as Name, AzureADEndpoint, GraphEndpoint, and Type.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraEnvironment.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraEnvironment\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Delete Permission Grant Condition Set Example - PowerShell\nDESCRIPTION: This example demonstrates how to delete a specific permission grant condition set from a permission grant policy in Microsoft Entra ID using PowerShell. It connects to Entra ID, retrieves the target policy and condition set, and then removes the condition set based on its ID and associated policy information.  The script assumes that the policy 'my-custom-consent-policy' and a delegated permission grant condition set exist.\n\nRequires the 'Policy.ReadWrite.PermissionGrant' scope and the Microsoft.Entra.Beta module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaPermissionGrantConditionSet.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.PermissionGrant'\n$permissionGrantPolicy = Get-EntraBetaPermissionGrantPolicy | Where-Object { $_.Id -eq 'my-custom-consent-policy' }\n$conditionSet = Get-EntraBetaPermissionGrantConditionSet -PolicyId $permissionGrantPolicy.Id -ConditionSetType 'includes' | Where-Object { $_.PermissionType -eq 'delegated' }\nRemove-EntraBetaPermissionGrantConditionSet -PolicyId $permissionGrantPolicy.Id -ConditionSetType 'includes' -Id $conditionSet.Id\n```\n\n----------------------------------------\n\nTITLE: Add a Custom Security Attribute (PowerShell)\nDESCRIPTION: This example demonstrates how to add a custom security attribute using the New-EntraBetaCustomSecurityAttributeDefinition cmdlet. It includes connecting to Entra ID, retrieving an attribute set, defining parameters for the new attribute, and creating the attribute definition. Requires the 'CustomSecAttributeDefinition.Read.All' and 'CustomSecAttributeDefinition.ReadWrite.All' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaCustomSecurityAttributeDefinition.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'CustomSecAttributeDefinition.Read.All', 'CustomSecAttributeDefinition.ReadWrite.All'\n$attributeSet = Get-EntraAttributeSet -Id 'ContosoSet'\n$params = @{\n    Name                    = 'ProjectTest' \n    Description             = 'Target completion'\n    Type                    = 'String'\n    Status                  = 'Available'\n    AttributeSet            = $attributeSet.Id \n    IsCollection            = $False\n    IsSearchable            = $True \n    UsePreDefinedValuesOnly = $True\n}\nNew-EntraBetaCustomSecurityAttributeDefinition @params\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId               AttributeSet Description       IsCollection IsSearchable Name        Status    Type   UsePreDefinedValuesOnly\n--               ------------ -----------       ------------ ------------ ----        ------    ----   -----------------------\nTest_ProjectTest Test         Target completion False        True         ProjectTest Available String False\n```\n\n----------------------------------------\n\nTITLE: GroupIdsForMembershipCheck Parameter (YAML)\nDESCRIPTION: Defines the `-GroupIdsForMembershipCheck` parameter for the `Select-EntraGroupIdsGroupIsMemberOf` cmdlet in YAML format. It specifies the data type (`GroupIdsForMembershipCheck`), requirement (Required: True), and other properties. It accepts pipeline input by property name and by value.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Select-EntraGroupIdsGroupIsMemberOf.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: GroupIdsForMembershipCheck\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get All Entra Domains\nDESCRIPTION: Retrieves a list of all domains in the Microsoft Entra ID after establishing a connection with appropriate scopes. Requires the 'Domain.Read.All' scope. Returns a list of domain objects with properties such as Id, AuthenticationType, and IsVerified.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDomain.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Domain.Read.All'\nGet-EntraDomain\n```\n\n----------------------------------------\n\nTITLE: Remove User Sponsor via Pipelining (PowerShell)\nDESCRIPTION: This example demonstrates how to remove a user sponsor by using pipelining. It first retrieves the sponsor using Get-EntraUserSponsor, filters the result based on the display name, and then removes the sponsor using Remove-EntraUserSponsor. Requires the 'User.ReadWrite.All' scope. The UserID parameter specifies the UserId or User Principal Name of the User.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraUserSponsor.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nGet-EntraUserSponsor -UserId 'SawyerM@contoso.com' | Where-Object { $_.displayName -eq 'Adele Vance (Fabrikam)' } | Remove-EntraUserSponsor\n```\n\n----------------------------------------\n\nTITLE: Get Top N Group App Role Assignments\nDESCRIPTION: This example retrieves a specified number of application role assignments for a group.  The -Top parameter limits the number of returned assignments. The script connects to Entra ID, retrieves the group, and then retrieves the top 2 role assignments.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaGroupAppRoleAssignment.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\n$group = Get-EntraBetaGroup -SearchString 'Contoso marketing'\nGet-EntraBetaGroupAppRoleAssignment -GroupId $group.Id -Top 2\n```\n\n----------------------------------------\n\nTITLE: Defining State Parameter in YAML\nDESCRIPTION: This YAML snippet defines the State parameter for a PowerShell cmdlet. It specifies the data type, parameter set, aliases, required status, position, default value, pipeline input, and wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUser.md#_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Top N Group Owners - EntraBeta PowerShell\nDESCRIPTION: This example retrieves a specified number of group owners (in this case, the top 2). It connects to Entra ID, retrieves the group object by filtering based on the display name, and then utilizes the Get-EntraBetaGroupOwner cmdlet with the `-Top` parameter to limit the result set. The Id, DisplayName, and @odata.type properties are then selected from the retrieved owner objects.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaGroupOwner.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All'\n$group = Get-EntraBetaGroup -Filter \"DisplayName eq 'Sales and Marketing'\"\nGet-EntraBetaGroupOwner -GroupId $group.Id -Top 2 | Select-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Example Output - PowerShell\nDESCRIPTION: Shows the example output from running the `Get-EntraDomainVerificationDnsRecord` cmdlet. The output lists the properties of the domain verification DNS records, including Id, IsOptional, Label, RecordType, SupportedService, and Ttl.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDomainVerificationDnsRecord.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nId                                   IsOptional Label                              RecordType SupportedService Ttl\n--                                   ---------- -----                              ---------- ---------------- ---\naaaa0000-bb11-2222-33cc-444444dddddd False      mail.contoso.com Txt        Email            3600\nbbbb1111-cc22-3333-44dd-555555eeeeee False      mail.contoso.com Mx         Email            3600\n```\n\n----------------------------------------\n\nTITLE: Create Service Principal with Homepage, LogoutUrl, and ReplyUrls\nDESCRIPTION: This example shows how to create a new service principal using the Homepage, LogoutUrl, and ReplyUrls parameters.  It retrieves an application by its display name using Get-EntraBetaApplication and then creates the service principal with the specified parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaServicePrincipal.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraBetaApplication -Filter \"DisplayName eq 'Helpdesk Application'\"\n$params = @{\n    AppId = $application.AppId \n    Homepage = 'https://localhost/home' \n    LogoutUrl = 'htpp://localhost/logout' \n    ReplyUrls = 'https://localhost/redirect'\n}\nNew-EntraBetaServicePrincipal @params\n```\n\nLANGUAGE: powershell\nCODE:\n```\nDisplayName Id                                   AppId                                SignInAudience ServicePrincipalType\n----------- --                                   -----                                -------------- --------------------\nHelpdesk Application    bbbbbbbb-1111-2222-3333-cccccccccccc 00001111-aaaa-2222-bbbb-3333cccc4444 AzureADMyOrg   Application\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - Filter - YAML\nDESCRIPTION: Defines the '-Filter' parameter, which is a string used to filter deleted applications. This parameter is part of the GetQuery parameter set.  It's an optional parameter that accepts pipeline input by property name or value, but does not accept wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedApplication.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: GetQuery\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Set Thumbnail Photo - Byte Array - PowerShell\nDESCRIPTION: This snippet shows the syntax for setting a user's thumbnail photo using an image byte array via the `Set-EntraBetaUserThumbnailPhoto` cmdlet.  It takes the `-ImageByteArray` parameter as a Byte array and the optional `-UserId` parameter. Requires the `User.ReadWrite.All` permission for updating any user's photo and `User.ReadWrite` for updating the signed-in user's photo. Common parameters are supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUserThumbnailPhoto.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-EntraBetaUserThumbnailPhoto\n -ImageByteArray <Byte[]>\n [-UserId <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Enable assignment required feature - PowerShell\nDESCRIPTION: Sets the AppRoleAssignmentRequired property on the service principal. When enabled, users and groups must be explicitly assigned to the application to gain access.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/create-custom-application.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Set service principal parameters\nSet-EntraServicePrincipal -ServicePrincipalId $servicePrincipal.Id -AppRoleAssignmentRequired $True\n```\n\n----------------------------------------\n\nTITLE: Restore User by Display Name - PowerShell\nDESCRIPTION: This snippet restores a soft-deleted user in Microsoft Entra ID using their display name and pipelining. It connects to Entra ID with the 'User.ReadWrite.All' scope. It then uses 'Get-EntraDeletedUser' to find the deleted user by their display name and pipes the result to 'Restore-EntraDeletedDirectoryObject' to restore the user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/recover-deleted-data.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nGet-EntraDeletedUser -Filter \"displayName eq 'Avery Smith'\" | Restore-EntraDeletedDirectoryObject\n```\n\n----------------------------------------\n\nTITLE: Tags Configuration - YAML\nDESCRIPTION: Defines the structure and properties for the `-Tags` parameter in an Entra (Azure AD) PowerShell cmdlet. This parameter is used to specify tags linked to the service principal. It's defined as a list of strings, is optional, and does not accept pipeline input or wildcard characters.  Setting this to `{WindowsAzureActiveDirectoryIntegratedApp}` will make the service principal appear in the 'All Applications' list in the admin portal.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaServicePrincipal.md#_snippet_17\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Collections.Generic.List`1[System.String]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get All Role Assignments - PowerShell\nDESCRIPTION: Retrieves all role assignments using the `-All` parameter. It requires connecting to Entra ID with 'RoleManagement.Read.Directory' and 'EntitlementManagement.Read.All' scopes. It fetches and displays all role assignments available.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirectoryRoleAssignment.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory','EntitlementManagement.Read.All'\nGet-EntraBetaDirectoryRoleAssignment -All\n```\n\n----------------------------------------\n\nTITLE: Remove Application Extension Property Example - PowerShell\nDESCRIPTION: This example demonstrates how to remove an application extension property using the Remove-EntraBetaApplicationExtensionProperty cmdlet. It retrieves an application and extension property, and then removes the extension property by specifying the ApplicationId and ExtensionPropertyId parameters. It requires the 'Application.ReadWrite.All' and 'Application.ReadWrite.OwnedBy' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaApplicationExtensionProperty.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraBetaApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\n$extension = Get-EntraApplicationExtensionProperty -ApplicationId $application.Id | Where-Object {$_.Name -eq 'extension_3ed1a24748dd4e4cb91fc0ab09576ff0_NewAttribute'}\nRemove-EntraBetaApplicationExtensionProperty -ApplicationId $application.Id -ExtensionPropertyId $extension.Id\n```\n\n----------------------------------------\n\nTITLE: Defining IsSecureCookieEnabled Parameter\nDESCRIPTION: This YAML snippet defines the `-IsSecureCookieEnabled` parameter. Setting it to true allows Application Proxy to include the Secure flag in HTTP response headers, enhancing security by transmitting cookies over a TLS secured channel like HTTPS. This prevents cookie transmission in clear text. The parameter is optional and accepts a boolean value.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplicationProxyApplication.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Boolean\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Removing User License (Entra Beta)\nDESCRIPTION: This PowerShell snippet demonstrates how to remove an assigned license from a user. It retrieves the SkuId of the user's assigned licenses using `Get-EntraBetaUserLicenseDetail` and then uses `Set-EntraBetaUserLicense` to remove the specified license. The script requires a connection to Entra with the necessary scopes ('User.ReadWrite.All').\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUserLicense.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\n$userPrincipalName = 'SawyerM@contoso.com'\n$user = Get-EntraBetaUser -UserId $userPrincipalName\n$skuId = (Get-EntraBetaUserLicenseDetail -UserId $userPrincipalName).SkuId\n$licenses = New-Object -TypeName Microsoft.Open.AzureAD.Model.AssignedLicenses \n$licenses.RemoveLicenses = $skuId \nSet-EntraBetaUserLicense -UserId $user.Id -AssignedLicenses $licenses\n```\n\n----------------------------------------\n\nTITLE: Create an excluded permission grant condition set\nDESCRIPTION: This example showcases creating a permission grant condition set that is excluded, using several parameters including PermissionClassification, ClientApplicationsFromVerifiedPublisherOnly, ClientApplicationIds, ClientApplicationTenantIds, and ClientApplicationPublisherIds. It requires the 'Policy.ReadWrite.PermissionGrant' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraPermissionGrantConditionSet.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.PermissionGrant'\n$permissionGrantPolicy = Get-EntraPermissionGrantPolicy | Where-Object { $_.Id -eq 'my-custom-consent-policy' }\n$params = @{\n    PolicyId                                    = $permissionGrantPolicy.Id\n    ConditionSetType                            = 'excludes'\n    PermissionType                              = 'delegated'\n    Permissions                                 = @('All')\n    ResourceApplication                         = 'a0a0a0a0-bbbb-cccc-dddd-e1e1e1e1e1e1'\n    PermissionClassification                    = 'low'\n    ClientApplicationsFromVerifiedPublisherOnly = $true\n    ClientApplicationIds                        = @('All')\n    ClientApplicationTenantIds                  = @('All')\n    ClientApplicationPublisherIds               = @('All')\n}\nNew-EntraPermissionGrantConditionSet @params\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId                                   CertifiedClientApplicationsOnly ClientApplicationIds ClientApplicationPublisherIds ClientApplicationTenantIds ClientApplicationsFromVerifiedPublisherOnly PermissionClassification\n--                                   ------------------------------- -------------------- ----------------------------- -------------------------- ------------------------------------------- -------------------\ndddd3333-ee44-5555-66ff-777777aaaaaa False                           {all}                {all}                         {all}                      True                                        low\n```\n\n----------------------------------------\n\nTITLE: Create IP Named Location Policy - PowerShell\nDESCRIPTION: This example demonstrates how to create a new IP named location policy in Microsoft Entra ID using the New-EntraBetaNamedLocationPolicy cmdlet. It first connects to Entra ID with the necessary scopes, creates an IpRange object, and then uses the cmdlet to define the IP named location policy.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaNamedLocationPolicy.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ConditionalAccess'\n$ipRanges = New-Object -TypeName Microsoft.Open.MSGraph.Model.IpRange\n$ipRanges.cidrAddress = '6.5.4.3/32'\n$type = '#microsoft.graph.ipNamedLocation'\nNew-EntraBetaNamedLocationPolicy -OdataType $type -DisplayName 'IP named location policy' -IsTrusted $false -IpRanges $ipRanges\n```\n\n----------------------------------------\n\nTITLE: Get Device with GetQuery Syntax - PowerShell\nDESCRIPTION: Retrieves devices from Microsoft Entra ID using optional filters, top count, and property selection.\nRequires the Microsoft.Entra module and appropriate permissions (e.g., Device.Read.All scope). The cmdlet can be used without any parameters to retrieve all devices or with parameters like -Top and -Filter to narrow down the results. It returns a list of device objects with properties like Id, DisplayName, and OperatingSystem.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDevice.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraDevice\n [-Top <Int32>]\n [-All]\n [-Filter <String>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Add User as Application Owner - PowerShell\nDESCRIPTION: This example demonstrates how to add a user as an owner to an application. It first connects to Entra ID, retrieves the application and user objects, and then uses the Add-EntraBetaApplicationOwner cmdlet to assign the user as an owner.  Requires 'Application.ReadWrite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaApplicationOwner.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All'\n$application = Get-EntraBetaApplication -Filter \"DisplayName eq 'Helpdesk Application'\"\n$user = Get-EntraBetaUser -UserId 'SawyerM@contoso.com'\nAdd-EntraBetaApplicationOwner -ApplicationId $application.Id -OwnerId $user.Id\n```\n\n----------------------------------------\n\nTITLE: Update Object Settings - PowerShell\nDESCRIPTION: This PowerShell code snippet updates the settings for a specified object in Microsoft Entra ID. It connects to Entra ID, retrieves a directory setting template, modifies a setting, and then applies the updated settings to the target object using the Set-EntraBetaObjectSetting cmdlet. The required scopes is 'Directory.ReadWrite.All'.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaObjectSetting.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\n$template= Get-EntraBetaDirectorySettingTemplate | ? {$_.displayname -eq \"Group.Unified.Guest\"}\n$settingsCopy = $template.CreateDirectorySetting()\n$settingsCopy[\"AllowToAddGuests\"]=$True\n$params = @{\n    TargetType = 'groups'\n    TargetObjectId = '22cc22cc-dd33-ee44-ff55-66aa66aa66aa'\n    DirectorySetting = $settingsCopy\n    Id = 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb' \n}\nSet-EntraBetaObjectSetting @params\n```\n\n----------------------------------------\n\nTITLE: Add Member to Group - PowerShell\nDESCRIPTION: This example demonstrates how to add a specific user to a Microsoft Entra group using the `Add-EntraBetaGroupMember` cmdlet. It first retrieves the group and user objects using their display names and User ID, respectively, and then adds the user to the group. The `Connect-Entra` cmdlet is used to establish a connection to Microsoft Entra ID with the necessary scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaGroupMember.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.ReadWrite.All'\n$group = Get-EntraBetaGroup -Filter \"DisplayName eq 'Contoso Marketing Group'\"\n$user = Get-EntraBetaUser -UserId 'SawyerM@contoso.com'\nAdd-EntraBetaGroupMember -GroupId $group.Id -MemberId $user.Id\n```\n\n----------------------------------------\n\nTITLE: Get all objects owned by user - Get-EntraBetaUserOwnedObject (PowerShell)\nDESCRIPTION: This example demonstrates retrieving all objects owned by a specific user, identified by their UPN. It first connects to Entra ID using the 'User.Read' scope. The `Get-EntraBetaUserOwnedObject` cmdlet is used with the `-All` parameter to retrieve all objects owned by the user 'SawyerM@contoso.com'. The results are then filtered and formatted to display specific properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserOwnedObject.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read'\nGet-EntraBetaUserOwnedObject -UserId 'SawyerM@contoso.com' -All |\nSelect-Object Id, displayName, createdDateTime, '@odata.type' |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get Directory Role Members by ID - PowerShell\nDESCRIPTION: This PowerShell code snippet demonstrates how to retrieve members of a specific directory role using its ID. It first connects to Entra ID with the required scope, then retrieves the directory role based on its display name and finally fetches the members of that role, selecting specific properties for output. Requires the Microsoft.Entra.Beta module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirectoryRoleMember.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory'\n$directoryRole = Get-EntraBetaDirectoryRole -Filter \"displayName eq 'Helpdesk Administrator'\"\nGet-EntraBetaDirectoryRoleMember -DirectoryRoleId $directoryRole.Id | Select Id, DisplayName, '@odata.type', CreatedDateTime\n```\n\n----------------------------------------\n\nTITLE: Creating a Password Credential with an End Date\nDESCRIPTION: This example demonstrates how to create a password credential specifying an end date for password validity. It connects to Entra ID, retrieves an application, calculates the end date, and then uses the `-EndDate` parameter to set when the password expires. Note: '<displayName>' and '<userfriendlyDisplayName>' should be replaced with actual values.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplicationPasswordCredential.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraBetaApplication -Filter \"displayName eq '<displayName>'\"\n$endDate = (Get-Date).AddYears(2)\nNew-EntraBetaApplicationPasswordCredential -ApplicationId $application.Id -CustomKeyIdentifier '<userfriendlyDisplayName>' -EndDate $endDate\n```\n\n----------------------------------------\n\nTITLE: Checking for DirSync Errors in Entra ID (No Tenant ID) - PowerShell\nDESCRIPTION: This example demonstrates how to check if Microsoft Entra ID has objects with DirSync provisioning errors without specifying a TenantId. It first connects to Entra ID using the Connect-Entra cmdlet with the necessary scopes, then uses the Get-EntraBetaHasObjectsWithDirSyncProvisioningError cmdlet to determine if any DirSync errors exist. It relies on the Connect-Entra cmdlet to establish a connection.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaHasObjectsWithDirSyncProvisioningError.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All', 'Directory.Read.All', 'Group.Read.All', 'Contacts.Read'\n\nGet-EntraBetaHasObjectsWithDirSyncProvisioningError \n```\n\nLANGUAGE: powershell\nCODE:\n```\nFalse\n```\n\n----------------------------------------\n\nTITLE: Definition of -NoWelcome Parameter in YAML\nDESCRIPTION: Defines the -NoWelcome parameter, which hides the welcome message. It is a System.Management.Automation.SwitchParameter, is not required, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Connect-Entra.md#_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases: \nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Property Parameter Definition YAML\nDESCRIPTION: Defines the -Property parameter for the Get-EntraBetaDomainNameReference cmdlet in YAML format. This optional parameter allows the specification of properties to be returned.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDomainNameReference.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Enable Azure AD Aliases with Enable-EntraAzureADAlias (PowerShell)\nDESCRIPTION: This command enables aliases for Azure AD commands within the current PowerShell session.  It does not require any input parameters. The command enables all Azure AD prefixes for the current PowerShell session.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Enable-EntraAzureADAlias.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nEnable-EntraAzureADAlias\n```\n\n----------------------------------------\n\nTITLE: Get Permission Grant Condition Sets - Excludes - PowerShell\nDESCRIPTION: This PowerShell code retrieves all permission grant condition sets that are excluded from a specified permission grant policy. Similar to the 'includes' example, it connects to Entra ID, retrieves the permission grant policy, and uses Get-EntraPermissionGrantConditionSet.  The -ConditionSetType parameter is set to 'excludes' to retrieve the excluded condition sets.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraPermissionGrantConditionSet.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.PermissionGrant'\n$permissionGrantPolicy = Get-EntraPermissionGrantPolicy | Where-Object { $_.Id -eq 'my-custom-consent-policy' }\nGet-EntraPermissionGrantConditionSet -PolicyId $permissionGrantPolicy.Id -ConditionSetType 'excludes'\n```\n\n----------------------------------------\n\nTITLE: Property Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the -Property parameter for the Get-EntraUserThumbnailPhoto command.  It shows the parameter's type, aliases and other attributes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserThumbnailPhoto.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: PolicyId Parameter Definition - YAML\nDESCRIPTION: Defines the -PolicyId parameter for the Remove-EntraBetaApplicationPolicy cmdlet.  It specifies that it is a string type, required, accepts pipeline input by property name and value, and does not accept wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaApplicationPolicy.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Retrieve Application Proxy Connectors with Filter - PowerShell\nDESCRIPTION: This PowerShell snippet connects to Entra ID and retrieves Application Proxy connectors based on a filter using the `-Filter` parameter, demonstrating how to use OData filters to specify criteria. In this case, it filters by the `machineName` property.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationProxyConnector.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\nGet-EntraBetaApplicationProxyConnector -Filter \"machineName eq 'AppProxy Machine'\"\n```\n\n----------------------------------------\n\nTITLE: Get Privileged Role by ID (GetById Syntax) - PowerShell\nDESCRIPTION: This snippet demonstrates how to retrieve a specific privileged role using its ID with the Get-EntraBetaPrivilegedRole command. The -Id parameter is mandatory for this syntax. The -Property parameter allows specifying which properties of the role to retrieve. This requires the Microsoft.Entra.Beta PowerShell module to be installed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPrivilegedRole.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaPrivilegedRole\n -Id <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Syntax for Remove-EntraBetaApplicationVerifiedPublisher in PowerShell\nDESCRIPTION: This code snippet displays the syntax for the Remove-EntraBetaApplicationVerifiedPublisher cmdlet, which is used to remove the verified publisher from an application.\n\nParameters: -AppObjectId (String, required). CommonParameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaApplicationVerifiedPublisher.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraBetaApplicationVerifiedPublisher\n -AppObjectId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Specific Connector Group by ID - PowerShell\nDESCRIPTION: This example retrieves a specific Azure AD Application Proxy connector group using its ID.  The `Id` parameter specifies the unique identifier of the connector group to be retrieved. The cmdlet requires a connection to Entra ID with the 'Directory.ReadWrite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationProxyConnectorGroup.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\nGet-EntraBetaApplicationProxyConnectorGroup -Id 'bbbbbbbb-1111-2222-3333-cccccccccccc'\n```\n\n----------------------------------------\n\nTITLE: Install Microsoft Entra Module - PowerShell\nDESCRIPTION: This command installs the Microsoft.Entra PowerShell module from the PSGallery repository. It is used to install the module if it is not already present or to reinstall it if there are issues. The `-Force` parameter ensures that the installation proceeds without prompting for confirmation. The `-Repository` parameter specifies the source repository for the module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/troubleshooting.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module -Name Microsoft.Entra -Repository PSGallery -Force\n```\n\n----------------------------------------\n\nTITLE: Restore Deleted Application Syntax - PowerShell\nDESCRIPTION: This code snippet shows the syntax of the Restore-EntraDeletedApplication cmdlet, including the parameters it accepts, such as ApplicationId and IdentifierUris.  It highlights the ApplicationId parameter as mandatory for identifying the deleted application to restore. CommonParameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Restore-EntraDeletedApplication.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRestore-EntraDeletedApplication\n [-IdentifierUris <System.Collections.Generic.List`1[System.String]>] \n -ApplicationId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove-EntraBetaNamedLocationPolicy Syntax - PowerShell\nDESCRIPTION: This snippet shows the syntax for the Remove-EntraBetaNamedLocationPolicy cmdlet. It takes a PolicyId as input and supports common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaNamedLocationPolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraBetaNamedLocationPolicy\n -PolicyId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get User by userPrincipalName - EntraBetaUser PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a specific user from Microsoft Entra ID using the `-Filter` parameter with a userPrincipalName. The `Connect-Entra` cmdlet is used to establish a connection with the required scopes, and `Get-EntraBetaUser` is used with the `-Filter` parameter to specify the userPrincipalName to be matched.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUser.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraBetaUser -Filter \"userPrincipalName eq 'SawyerM@contoso.com'\"\n```\n\n----------------------------------------\n\nTITLE: Get Administrative Unit Member by ID - PowerShell\nDESCRIPTION: This example retrieves members of an administrative unit given its ID. It first connects to Entra ID, retrieves the administrative unit using its display name, and then gets the members using the AdministrativeUnitId. The output is then filtered to show specific properties using Select-Object. Requires 'AdministrativeUnit.ReadWrite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAdministrativeUnitMember.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.ReadWrite.All'\n$administrativeUnit = Get-EntraAdministrativeUnit -Filter \"DisplayName eq '<administrativeunit-display-name>'\"\nGet-EntraAdministrativeUnitMember -AdministrativeUnitId $administrativeUnit.Id |\nSelect-Object Id, DisplayName, '@odata.type', createdDateTime\n```\n\n----------------------------------------\n\nTITLE: LogoutUrl Parameter Definition\nDESCRIPTION: Defines the LogoutUrl parameter for the New-EntraBetaServicePrincipal cmdlet. It specifies the logout URL.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaServicePrincipal.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Contact Membership Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Get-EntraContactMembership cmdlet.  It shows the required OrgContactId parameter and optional parameters like All, Top, and Property. CommonParameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraContactMembership.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraContactMembership\n -OrgContactId <String>\n [-All]\n [-Top <Int32>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: ServicePrincipalId Parameter Definition (YAML)\nDESCRIPTION: Defines the ServicePrincipalId parameter for the Get-EntraBetaPasswordSingleSignOnCredential cmdlet in YAML format.  It specifies that the parameter is a string, required, and accepts pipeline input.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPasswordSingleSignOnCredential.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get all commercial subscriptions\nDESCRIPTION: This example shows how to retrieve all commercial subscriptions in the organization. It first connects to Entra with the 'Organization.Read.All' scope and then uses the Get-EntraSubscription cmdlet with the -All parameter to list all subscriptions. The output displays subscription details such as SKU, ID, and status.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraSubscription.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All'\nGet-EntraSubscription -All\n```\n\n----------------------------------------\n\nTITLE: Update Feature Rollout Policy - DisplayName, IsEnabled - PowerShell\nDESCRIPTION: This example demonstrates how to update the display name and enabled status of a cloud authentication roll-out policy in Microsoft Entra ID. It requires the 'Directory.ReadWrite.All' scope and utilizes the Get-EntraFeatureRolloutPolicy cmdlet to retrieve the policy before updating it with Set-EntraFeatureRolloutPolicy. The Connect-Entra cmdlet establishes the connection to Entra ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraFeatureRolloutPolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\n$policy = Get-EntraFeatureRolloutPolicy -Filter \"DisplayName eq 'Feature-Rollout-Policy'\"\nSet-EntraFeatureRolloutPolicy -Id $policy.Id -DisplayName 'Feature-Rollout-Policytest' -IsEnabled $false\n```\n\n----------------------------------------\n\nTITLE: Output of Get all tenant details (PowerShell)\nDESCRIPTION: This is the expected output from the Get-EntraBetaTenantDetail -All command. It displays the DisplayName, Id, CountryLetterCode and VerifiedDomains properties of the tenant. VerifiedDomains contains an array of domain objects including Capabilities, IsDefault, IsInitial, Name, and Type.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaTenantDetail.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nDisplayName Id                                   CountryLetterCode VerifiedDomains\n----------- --                                   ----------------- ---------------\nContoso     aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb NL                {@{Capabilities=Email, OfficeCommunicationsOnline; IsDefault=False; IsInitial=True; Name=contoso.onmicrosoft.com; Type=Managed; Addition…}}\nContoso1    bbbbbbbb-1111-2222-3333-cccccccccccc NL                {@{Capabilities=Email, OfficeCommunicationsOnline; IsDefault=False; IsInitial=True; Name=contoso.onmicrosoft.com; Type=Managed; Addition…}}\n```\n\n----------------------------------------\n\nTITLE: Create a Service Principal for an Entra Application\nDESCRIPTION: Creates a service principal for an existing Entra application using its AppId. It first retrieves the application object using `Get-EntraApplication` based on its display name ('My application'). Then, it uses the `New-EntraServicePrincipal` cmdlet with the application's `AppId` to create the service principal, displaying its `Id`, `DisplayName`, `AppId`, and `SignInAudience`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/how-to-grant-revoke-api-permissions.md#_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\n$application = Get-EntraApplication -Filter \"DisplayName eq 'My application'\"\nNew-EntraServicePrincipal -AppId $application.AppId | \n  Format-List Id, DisplayName, AppId, SignInAudience\n```\n\n----------------------------------------\n\nTITLE: Get Specific Group Lifecycle Policy - PowerShell\nDESCRIPTION: This example retrieves a specific Microsoft Group Lifecycle Policy using its AlternateNotificationEmails property to first identify the policy, then retrieves it by its GroupLifecyclePolicyId.  The example relies on connecting to Entra ID with appropriate scopes using Connect-Entra. The output displays the Id, AlternateNotificationEmails, GroupLifetimeInDays, and ManagedGroupTypes properties for the identified policy.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaGroupLifecyclePolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\n$policy = Get-EntraBetaGroupLifecyclePolicy | Where-Object {$_.AlternateNotificationEmails -eq 'example@contoso.com'}\nGet-EntraBetaGroupLifecyclePolicy -GroupLifecyclePolicyId $policy.Id\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId                                   AlternateNotificationEmails GroupLifetimeInDays ManagedGroupTypes\n--                                   --------------------------- ------------------- -----------------\nffffffff-5555-6666-7777-aaaaaaaaaaaa example@contoso.com                     200                 Selected\n```\n\n----------------------------------------\n\nTITLE: Create Group with Visibility - New-EntraBetaGroup PowerShell\nDESCRIPTION: This snippet demonstrates how to create a new Microsoft Entra ID group with a specified visibility (Private) using the New-EntraBetaGroup cmdlet. It requires the 'Group.ReadWrite.All' and 'Group.Create' scopes and specifies parameters such as DisplayName, Description, MailEnabled, MailNickname, SecurityEnabled and Visibility. The output shows the created group's properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaGroup.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All','Group.Create'\n$params = @{\n    DisplayName = 'HelpDesk admin group2'\n    Description = 'Group assignable to role'\n    MailEnabled = $False\n    MailNickname = 'helpDeskAdminGroup'\n    SecurityEnabled = $True\n    Visibility = 'Private'\n}\n\nNew-EntraBetaGroup @params\n```\n\nLANGUAGE: powershell\nCODE:\n```\nDisplayName           Id                                   MailNickname       Description              GroupTypes\n-----------           --                                   ------------       -----------              ----------\nHelpDesk admin group2 gggggggg-0000-4444-3333-llllllllllll helpDeskAdminGroup Group assignable to role {}\n```\n\n----------------------------------------\n\nTITLE: Get User Direct Reports - Get-EntraUserDirectReport PowerShell\nDESCRIPTION: This snippet demonstrates how to retrieve the direct reports of a specific user in Microsoft Entra ID using the Get-EntraUserDirectReport cmdlet. It requires the 'User.Read' and 'User.Read.All' scopes.  The output is then filtered to show specific properties such as Id, displayName, userPrincipalName, createdDateTime, accountEnabled, and userType, formatted into a table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserDirectReport.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read', 'User.Read.All'\nGet-EntraUserDirectReport -UserId 'SawyerM@contoso.com' |\nSelect-Object Id, displayName, userPrincipalName, createdDateTime, accountEnabled, userType |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Create New Entra ID Role Assignment - PowerShell\nDESCRIPTION: This example demonstrates how to create a new role assignment in Microsoft Entra ID using the New-EntraBetaDirectoryRoleAssignment cmdlet.  It first connects to Entra ID, retrieves a user and a role definition, then creates the role assignment with a specified role, user, and scope. It requires the 'RoleManagement.ReadWrite.Directory' and 'EntitlementManagement.ReadWrite.All' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaDirectoryRoleAssignment.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory', 'EntitlementManagement.ReadWrite.All'\n$user = Get-EntraBetaUser -UserId 'SawyerM@contoso.com'\n$role = Get-EntraBetaDirectoryRoleDefinition -Filter \"DisplayName eq 'Helpdesk Administrator'\"\nNew-EntraBetaDirectoryRoleAssignment -RoleDefinitionId $role.Id -PrincipalId $user.Id -DirectoryScopeId '/'\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                            PrincipalId                          RoleDefinitionId                     DirectoryScopeId AppScopeId\n--                                            -----------                          ----------------                     ---------------- ----------\nA1bC2dE3fH4iJ5kL6mN7oP8qR9sT0u aaaaaaaa-bbbb-cccc-1111-222222222222 a0a0a0a0-bbbb-cccc-dddd-e1e1e1e1e1e1 /\n```\n\n----------------------------------------\n\nTITLE: Get a specific Application Segment for an Application in PowerShell\nDESCRIPTION: This PowerShell code retrieves a specific application segment associated with a given Private Access application based on its destination type.  It connects to Entra ID, retrieves the application and then retrieves application segment. It filters application segment by 'fqdn' destination type and then retrieves a specific application segment by ID. Dependencies: Microsoft.Entra.Beta module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPrivateAccessApplicationSegment.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'NetworkAccessPolicy.ReadWrite.All', 'Application.ReadWrite.All', 'NetworkAccess.ReadWrite.All'\n$application = Get-EntraBetaApplication -Filter \"displayName eq '<GlobalSecureAccess_Application_DisplayName>'\"\n$applicationSegment = Get-EntraBetaPrivateAccessApplicationSegment -ApplicationId $application.Id | Where-Object {$_.destinationType -eq 'fqdn'}\nGet-EntraBetaPrivateAccessApplicationSegment -ApplicationId $application.Id -ApplicationSegmentId $applicationSegment.Id\n```\n\n----------------------------------------\n\nTITLE: Parameters\nDESCRIPTION: Defines the parameters for the Get-EntraBetaContact cmdlet. The parameters are -All, -Filter, -OrgContactId, -Top, and -Property. The -All parameter lists all pages. The -Filter parameter specifies an OData v4.0 filter statement. The -OrgContactId parameter specifies the ID of a contact in Microsoft Entra ID. The -Top parameter specifies the maximum number of records to return. The -Property parameter specifies properties to be returned.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaContact.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: GetQuery\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: GetById\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Int32\nParameter Sets: GetQuery\nAliases: Limit\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Export Expired Guest Users to CSV - PowerShell\nDESCRIPTION: Exports the report of expired guest user accounts to a CSV file. Requires the '$report' variable to be populated by a prior script block. The '-NoTypeInformation' parameter prevents the inclusion of type information in the CSV output.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-guest-users.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\n$report | Export-Csv -Path \"ExpiredGuestAccounts.csv\" -NoTypeInformation\n```\n\n----------------------------------------\n\nTITLE: Get Top N User Owned Objects\nDESCRIPTION: This PowerShell code demonstrates how to retrieve a limited number of objects owned by a user. The `-Top` parameter is used to specify the maximum number of objects to retrieve. This can be useful when dealing with users who own a large number of objects and only a subset is needed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserOwnedObject.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read'\nGet-EntraUserOwnedObject -UserId 'SawyerM@contoso.com' -Top 3 |\nSelect-Object Id, displayName, createdDateTime, '@odata.type' |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: New-EntraApplicationFromApplicationTemplate Syntax\nDESCRIPTION: Defines the syntax for the `New-EntraApplicationFromApplicationTemplate` cmdlet. It requires `ApplicationTemplateId` and `DisplayName` parameters.  Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplicationFromApplicationTemplate.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-EntraApplicationFromApplicationTemplate\n -ApplicationTemplateId <String>\n -DisplayName <ApplicationTemplateDisplayName>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get User-Created Object - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve an object created by a specific user using the Get-EntraBetaUserCreatedObject cmdlet. It connects to Entra with the required scopes and then retrieves the object, selecting the Id, DisplayName, and @odata.type properties. The -UserId parameter specifies the user's object ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserCreatedObject.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read','User.Read.All'\nGet-EntraBetaUserCreatedObject -UserId 'SawyerM@contoso.com' | Select-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Get Directory Roles Using All Parameter\nDESCRIPTION: This example demonstrates retrieving all directory roles for a specific user. It uses the `-All` parameter to ensure all roles are retrieved, even if the user has a large number of assigned roles.  Requires connection to Entra ID with appropriate scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserRole.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\nGet-EntraUserRole -UserId 'SawyerM@contoso.com' -All\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDeletedDateTime         Id                                   DisplayName               RoleTemplateId\n---------------         --                                   -----------               --------------\n                       bbbbbbbb-1111-2222-3333-ccccccccccc  Helpdesk Administrator    729827e3-9c14-49f7-bb1b-9608f156bbb8\n                       dddddddd-3333-4444-5555-eeeeeeeeeeee Directory Readers         88d8e3e3-8f55-4a1e-953a-9b9898b8876b\n                       cccccccc-2222-3333-4444-dddddddddddd Application Administrator 9b895d92-2cd3-44c7-9d02-a6ac2d5ea5c3\n                       aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb Guest Inviter             95e79109-95c0-4d8e-aee3-d01accf2d47b\n```\n\n----------------------------------------\n\nTITLE: Get All Connector Groups - PowerShell\nDESCRIPTION: This example retrieves all Azure AD Application Proxy connector groups. It first connects to Entra ID with the necessary scopes and then uses `Get-EntraBetaApplicationProxyConnectorGroup` without any specific parameters to retrieve all groups.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationProxyConnectorGroup.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\nGet-EntraBetaApplicationProxyConnectorGroup\n```\n\n----------------------------------------\n\nTITLE: YAML Parameter Definition: -Property\nDESCRIPTION: This YAML snippet defines the -Property parameter for the Get-EntraBetaApplicationOwner cmdlet. It specifies the parameter's type, whether it is required, its position, default value, aliases, and other properties related to parameter behavior.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationOwner.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Entra Environments\nDESCRIPTION: Retrieves the available Entra environments. This command is used to determine the valid options for the `-Environment` parameter of the `Connect-Entra` command.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Connect-Entra.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraEnvironment\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n```Output\nName     AzureADEndpoint                   GraphEndpoint                           Type\n----     ---------------                   -------------                           ----\nChina    https://login.chinacloudapi.cn    https://microsoftgraph.chinacloudapi.cn Built-in\nGlobal   https://login.microsoftonline.com https://graph.microsoft.com             Built-in\nUSGov    https://login.microsoftonline.us  https://graph.microsoft.us              Built-in\nUSGovDoD https://login.microsoftonline.us  https://dod-graph.microsoft.us          Built-in\n```\n```\n\n----------------------------------------\n\nTITLE: Update-EntraBetaUserAuthenticationRequirement Syntax - PowerShell\nDESCRIPTION: This code snippet defines the syntax for the `Update-EntraBetaUserAuthenticationRequirement` cmdlet. It shows the required parameters, `-UserId` and `-PerUserMfaState`, along with the optional `CommonParameters`. The `-UserId` parameter specifies the user's ID, and the `-PerUserMfaState` parameter specifies the desired MFA status (enabled, disabled, or enforced).\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Update-EntraBetaUserAuthenticationRequirement.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nUpdate-EntraBetaUserAuthenticationRequirement\n -UserId <String>\n -PerUserMfaState <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Application by Application ID\nDESCRIPTION: Retrieves a specific deleted application using its Application ID with the `-ApplicationId` parameter. Requires the 'Application.Read.All' scope. The command fetches details for a single, targeted application.  The selected properties are displayed in a formatted table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedApplication.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraBetaDeletedApplication -ApplicationId aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb | Select-Object Id, AppId, DisplayName, DeletedDateTime, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Remove User Sponsor via Pipelining - PowerShell\nDESCRIPTION: This example demonstrates how to remove a user sponsor by first retrieving the sponsor using Get-EntraBetaUserSponsor, filtering the results, and then piping the filtered object to Remove-EntraBetaUserSponsor.  It requires the 'User.ReadWrite.All' scope and uses pipelining to pass the sponsor object.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaUserSponsor.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nGet-EntraBetaUserSponsor -UserId 'SawyerM@contoso.com' | Where-Object { $_.displayName -eq 'Adele Vance (Fabrikam)' } | Remove-EntraBetaUserSponsor\n```\n\n----------------------------------------\n\nTITLE: Set Security Compliance Notification Phones - PowerShell\nDESCRIPTION: This example demonstrates how to set the security compliance notification phone numbers for a tenant using the `Set-EntraBetaTenantDetail` cmdlet. It connects to Entra ID with the 'Organization.ReadWrite.All' scope. Requires the Microsoft.Entra.Beta module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaTenantDetail.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.ReadWrite.All'\nSet-EntraBetaTenantDetail -SecurityComplianceNotificationPhones @('1-555-625-9999', '1-555-233-5544')\n```\n\n----------------------------------------\n\nTITLE: Filter Administrative Units by Display Name - PowerShell\nDESCRIPTION: This example demonstrates how to filter administrative units based on their display name using the Get-EntraBetaAdministrativeUnit cmdlet and the `-Filter` parameter. The `-Filter` parameter allows you to specify an OData v4.0 filter statement to narrow down the results. This is useful when you need to find administrative units that match a specific naming convention. It requires connecting to Entra ID with the necessary permissions.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAdministrativeUnit.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.Read.All'\nGet-EntraBetaAdministrativeUnit -Filter \"DisplayName eq 'Updated DisplayName'\"\n```\n\n----------------------------------------\n\nTITLE: Connect to Microsoft Entra for User Management\nDESCRIPTION: Connects to Microsoft Entra with the 'User.ReadWrite.All' scope to manage user accounts.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-guest-users.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes \"User.ReadWrite.All\"\n```\n\n----------------------------------------\n\nTITLE: Password Credentials Configuration - YAML\nDESCRIPTION: Defines the structure and properties for the `-PasswordCredentials` parameter in an Entra (Azure AD) PowerShell cmdlet. This parameter is used to specify the password credentials associated with an application. It's defined as a list of `PasswordCredential` objects, is optional, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaServicePrincipal.md#_snippet_13\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.PasswordCredential]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: TargetObjectId Parameter - YAML\nDESCRIPTION: This YAML snippet documents the `-TargetObjectId` parameter for the `New-EntraBetaObjectSetting` cmdlet. It specifies that this parameter is required, accepts pipeline input, and does not accept wildcard characters. It identifies the directory object to which the settings will be assigned.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaObjectSetting.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Installing GA/v1.0 Users Module in PowerShell\nDESCRIPTION: This PowerShell command installs the `Microsoft.Entra.Users` module from the PowerShell Gallery. The `-Force` parameter automatically confirms any prompts during installation, and `-AllowClobber` allows the installation to overwrite existing modules with the same name. This command requires the PowerShellGet module and a configured PowerShell Gallery repository.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/includes/install-specific-submodules.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module -Name Microsoft.Entra.Users -Repository PSGallery -Force -AllowClobber\n```\n\n----------------------------------------\n\nTITLE: Enable AzureAD Command Aliases Example - PowerShell\nDESCRIPTION: This example demonstrates how to enable all Azure AD prefixes for the current PowerShell session using the Enable-EntraAzureADAlias command.  No parameters are required. This enhances command-line usability for Azure AD administration.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Enable-EntraAzureADAlias.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nEnable-EntraAzureADAlias\n```\n\n----------------------------------------\n\nTITLE: Connect and Get Entra Beta User (PowerShell)\nDESCRIPTION: Connects to Entra ID with User.Read.All scope and retrieves a user with a specific userPrincipalName using the Get-EntraBetaUser cmdlet. This cmdlet is part of the Beta version of the Entra PowerShell module. The filter parameter is used to specify the userPrincipalName for the search.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/includes/sign-in.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraBetaUser -Filter \"userPrincipalName eq 'SawyerM@contoso.com'\"\n```\n\n----------------------------------------\n\nTITLE: Connect to Entra ID to a Specific Environment\nDESCRIPTION: Connects to Entra ID to a specific environment. This example connects to the global public cloud, but other environments such as China, USGov, and USGovDoD can be specified.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Connect-Entra.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Environment 'Global'\n```\n\n----------------------------------------\n\nTITLE: Property Parameter Definition in YAML\nDESCRIPTION: This YAML snippet defines the `-Property` parameter for a PowerShell cmdlet. It specifies the data type as `System.String[]`, applies to all parameter sets, and marks the parameter as optional with no pipeline input. The `Select` alias is also defined.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplication.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get User Administrative Units Example 1\nDESCRIPTION: This example demonstrates how to retrieve a list of administrative units to which a specific user belongs. It first connects to Entra with the 'AdministrativeUnit.Read.All' scope and then uses the Get-EntraUserAdministrativeUnit cmdlet with the UserId parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserAdministrativeUnit.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.Read.All'\nGet-EntraUserAdministrativeUnit -UserId 'SawyerM@contoso.com'\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDeletedDateTime Id                                   Description                            DisplayName             Visibility\n--------------- --                                   -----------                            -----------             ----------\n                dddddddd-3333-4444-5555-eeeeeeeeeeee Pacific Administrative Unit            Pacific Admin Unit\n                aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb Engineering Administrative Unit        Engineering Admin Unit\n```\n\n----------------------------------------\n\nTITLE: Connect with Access Token - PowerShell\nDESCRIPTION: Connects to Microsoft Entra PowerShell using an existing access token.  The access token is converted to a secure string before being passed to the Connect-Entra cmdlet.  The `$accessToken` variable should be replaced with the securely acquired token.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/delegated-access-auth.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n$accessToken = '{my-securely-acquired-token}'\n$secureString = ConvertTo-SecureString -String $accessToken -AsPlainText -Force\nConnect-Entra -AccessToken $secureString\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Devices - Top N\nDESCRIPTION: This PowerShell snippet retrieves the top 'N' deleted devices. It connects to Entra using Connect-Entra with appropriate scopes, then retrieves the specified number of devices using Get-EntraDeletedDevice with the `-Top` parameter. Results are then selected and formatted for display.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedDevice.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraDeletedDevice -Top 2 | Select-Object DeletedDateTime, Id, AccountEnabled, ApproximateLastSignInDateTime, DeviceId, DisplayName, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get top N objects owned by user - Get-EntraBetaUserOwnedObject (PowerShell)\nDESCRIPTION: This example showcases how to retrieve a limited number of objects owned by a user, using the `-Top` parameter. The example connects to Entra ID with User.Read scope. It retrieves the top 3 objects owned by the user 'SawyerM@contoso.com'. The output displays Id, displayName, createdDateTime, and @odata.type properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserOwnedObject.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read'\nGet-EntraBetaUserOwnedObject -UserId 'SawyerM@contoso.com' -Top 3 |\nSelect-Object Id, displayName, createdDateTime, '@odata.type' |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: AlternativeNames Parameter Definition\nDESCRIPTION: Defines the AlternativeNames parameter for the New-EntraBetaServicePrincipal cmdlet. It specifies the alternative names for this service principal.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaServicePrincipal.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[System.String]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Reset LifeCycle Group Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Reset-EntraBetaLifeCycleGroup cmdlet. It requires the -GroupId parameter, which specifies the ID of the group to be renewed. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Reset-EntraBetaLifeCycleGroup.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nReset-EntraBetaLifeCycleGroup\n -GroupId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Checking for DirSync Provisioning Errors - With TenantId - PowerShell\nDESCRIPTION: This example demonstrates how to check for DirSync provisioning errors in Microsoft Entra ID, specifying the TenantId. It connects to Entra ID and then utilizes the Get-EntraHasObjectsWithDirSyncProvisioningError cmdlet, passing the specific TenantId.  The cmdlet returns a boolean value indicating whether DirSync provisioning errors exist within the specified tenant. Requires the Microsoft.Entra module and relevant permissions.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraHasObjectsWithDirSyncProvisioningError.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All', 'Directory.Read.All', 'Group.Read.All', 'Contacts.Read'\n\nGet-EntraHasObjectsWithDirSyncProvisioningError -TenantId '0000aaaa-11bb-cccc-dd22-eeeeee333333'\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nFalse\n```\n\n----------------------------------------\n\nTITLE: Remove Application Password Example - PowerShell\nDESCRIPTION: Demonstrates how to remove a specific password from an application using the Remove-EntraBetaApplicationPassword cmdlet. It first connects to Entra ID, retrieves the application and password details, and then removes the password using the ApplicationId and KeyId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaApplicationPassword.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All', 'Application.ReadWrite.OwnedBy'\n$application = Get-EntraBetaApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\n$applicationPassword = Get-EntraBetaApplicationPasswordCredential -ApplicationId $application.Id | Where-Object { $_.DisplayName -eq 'ERP App Password' }\nRemove-EntraBetaApplicationPassword -ApplicationId $application.Id -KeyId $applicationPassword.KeyId\n```\n\n----------------------------------------\n\nTITLE: Remove-EntraBetaUserSponsor Syntax\nDESCRIPTION: This code snippet displays the syntax for the Remove-EntraBetaUserSponsor cmdlet. It details the required parameters -UserId and -SponsorId- needed to execute the command. It also indicates the existence of CommonParameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaUserSponsor.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraBetaUserSponsor\n -UserId <String>\n -SponsorId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Update Permission Grant Condition Set - PowerShell\nDESCRIPTION: This example showcases updating a permission grant condition set with various parameters such as PermissionType, PermissionClassification, ResourceApplication, Permissions, ClientApplicationIds, ClientApplicationTenantIds, ClientApplicationPublisherIds, and ClientApplicationsFromVerifiedPublisherOnly. It utilizes a hashtable to pass the parameters to the Set-EntraPermissionGrantConditionSet cmdlet.  Requires the Policy.ReadWrite.PermissionGrant scope to connect to Entra.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraPermissionGrantConditionSet.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.PermissionGrant'\n$permissionGrantPolicy = Get-EntraPermissionGrantPolicy | Where-Object { $_.Id -eq 'my-custom-consent-policy' }\n$conditionSet = Get-EntraPermissionGrantConditionSet -PolicyId $permissionGrantPolicy.Id -ConditionSetType 'includes' | Where-Object { $_.PermissionType -eq 'delegated' }\n$params = @{\n    PolicyId                                    = $permissionGrantPolicy.Id\n    ConditionSetType                            = 'includes'\n    Id                                          = $conditionSet.Id\n    PermissionType                              = 'delegated'\n    PermissionClassification                    = 'low'\n    ResourceApplication                         = 'a0a0a0a0-bbbb-cccc-dddd-e1e1e1e1e1e1'\n    Permissions                                 = @('All')\n    ClientApplicationIds                        = @('All')\n    ClientApplicationTenantIds                  = @('All')\n    ClientApplicationPublisherIds               = @('All')\n    ClientApplicationsFromVerifiedPublisherOnly = $true\n}\n\nSet-EntraPermissionGrantConditionSet @params\n```\n\n----------------------------------------\n\nTITLE: Example: Add Registered User to Device - PowerShell\nDESCRIPTION: This PowerShell example demonstrates how to add a user as a registered user to a device using `Add-EntraDeviceRegisteredUser`.  It first connects to Microsoft Entra ID using `Connect-Entra`, then retrieves a user and a device using `Get-EntraUser` and `Get-EntraDevice` respectively. Finally, it adds the user as a registered user for the device by passing the device and user IDs to `Add-EntraDeviceRegisteredUser`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Add-EntraDeviceRegisteredUser.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.ReadWrite.All'\n$user = Get-EntraUser -UserId 'SawyerM@contoso.com'\n$device = Get-EntraDevice -SearchString '<device-display-name>'\nAdd-EntraDeviceRegisteredUser -DeviceId $device.Id -UserId $user.Id\n```\n\n----------------------------------------\n\nTITLE: Get Active Commercial Subscriptions - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a list of active commercial subscriptions by filtering based on the Status and NextLifecycleDateTime properties. It uses a combination of Where-Object, Sort-Object, and Select-Object cmdlets to filter out suspended or locked-out subscriptions and sort the results by NextLifecycleDateTime, then displays all properties of the active subscriptions.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaSubscription.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All'\nGet-EntraBetaSubscription |\n    Where-Object {\n        ($_.Status -ne \"Suspended\" -and $_.Status -ne \"LockedOut\") -and\n        ($_.NextLifecycleDateTime -ne $null)\n    } |\n    Sort-Object NextLifecycleDateTime |\n    Select-Object *\n```\n\n----------------------------------------\n\nTITLE: List Duplicate Devices - PowerShell\nDESCRIPTION: Connects to Entra ID and lists duplicate devices based on their display name, operating system, and count. Requires the Microsoft.Entra module and the 'Device.Read.All' scope. It uses `Group-Object`, `Where-Object`, `Select-Object`, `Sort-Object`, and `Format-Table` cmdlets to aggregate and display the duplicate device information.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDevice.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraDevice -All -Select DisplayName, OperatingSystem |\nGroup-Object DisplayName |\nWhere-Object { $_.Count -gt 1 } |\nSelect-Object Name, @{Name = \"OperatingSystem\"; Expression = { ($_.Group | Select-Object -First 1).OperatingSystem } }, Count | Sort-Object Count -Descending |\nFormat-Table Name, OperatingSystem, Count -AutoSize\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nName                       OperatingSystem Count\n----                       --------------- -----\niPhone                     iOS               175\nsamsungSM-S928B            Android            15\nwoodgrove-win11-client     Windows             2\n```\n\n----------------------------------------\n\nTITLE: Remove a contact through pipelining - Remove-EntraContact - PowerShell\nDESCRIPTION: This example demonstrates how to remove a contact from Microsoft Entra ID using pipelining.  It connects to Entra ID with the required 'OrgContact.Read.All' scope, retrieves the target contact using Get-EntraContact and a filter, and then pipes the resulting contact object to Remove-EntraContact. This eliminates the need to explicitly specify the OrgContactId parameter. Pipelining passes the contact object directly to Remove-EntraContact.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraContact.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'OrgContact.Read.All'\nGet-EntraContact -Filter \"displayName eq 'Contoso Contact'\" | Remove-EntraContact\n```\n\n----------------------------------------\n\nTITLE: Defining Tags Parameter in PowerShell YAML\nDESCRIPTION: This YAML snippet defines the `-Tags` parameter for a PowerShell cmdlet. It specifies the type as a list of strings and indicates that it is optional, named, and does not accept pipeline input or wildcard characters.  Setting this value to {WindowsAzureActiveDirectoryIntegratedApp} ensures the service principal shows up in the All Applications list in the admin portal.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraServicePrincipal.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[System.String]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Update Cookie Settings - PowerShell\nDESCRIPTION: This PowerShell snippet shows how to modify the IsHttpOnlyCookieEnabled, IsSecureCookieEnabled, and IsPersistentCookieEnabled parameters of an application proxy configuration.  It uses the Set-EntraBetaApplicationProxyApplication cmdlet with a hashtable to specify the desired settings. The ApplicationId is required to identify the application.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplicationProxyApplication.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\n$params = @{\n    ApplicationId                = 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb'\n    ExternalUrl                  = 'https://finance-awcycles.msappproxy.net/' \n    InternalUrl                  = 'http://finance/'\n    ExternalAuthenticationType   = 'AadPreAuthentication' \n    IsTranslateHostHeaderEnabled = $false\n    IsHttpOnlyCookieEnabled      = $false \n    IsSecureCookieEnabled        = $false \n    IsPersistentCookieEnabled    = $false\n}\nSet-EntraBetaApplicationProxyApplication @params\n```\n\n----------------------------------------\n\nTITLE: Retrieve Top One Owned Object of a Service Principal - PowerShell\nDESCRIPTION: This PowerShell script retrieves the top one owned object of a specified service principal.  It uses the `-Top 1` parameter with `Get-EntraBetaServicePrincipalOwnedObject`. The script connects to Entra ID, finds a service principal by its display name, and then retrieves only the first owned object, selecting its Id, DisplayName, and '@odata.type' for display.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalOwnedObject.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraBetaServicePrincipalOwnedObject -ServicePrincipalId $ServicePrincipal.Id -Top 1 | Select-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Create Group with Description - New-EntraBetaGroup PowerShell\nDESCRIPTION: This snippet demonstrates how to create a new Microsoft Entra ID group with a description using the New-EntraBetaGroup cmdlet. It requires the 'Group.ReadWrite.All' and 'Group.Create' scopes and specifies parameters such as DisplayName, MailEnabled, MailNickname, SecurityEnabled and Description. The output shows the created group's properties including the Description field.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaGroup.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All','Group.Create'\n$params = @{\n    DisplayName = 'HelpDesk admin group'\n    MailEnabled = $false\n    MailNickname = 'helpDeskAdminGroup'\n    SecurityEnabled = $true\n    Description = 'Group assignable to role'\n}\n\nNew-EntraBetaGroup @params\n```\n\nLANGUAGE: powershell\nCODE:\n```\nDisplayName          Id                                   MailNickname       Description              GroupTypes\n-----------          --                                   ------------       -----------              ----------\nHelpDesk admin group zzzzzzzz-6666-8888-9999-pppppppppppp helpDeskAdminGroup Group assignable to role {}\n```\n\n----------------------------------------\n\nTITLE: Update Policy Definition - PowerShell\nDESCRIPTION: This example updates the definition of a specified policy in Microsoft Entra ID. It connects to Entra ID, retrieves the policy, and then updates the definition using Set-EntraBetaPolicy with a stringified JSON array. The definition specifies the rules of the policy, such as activity-based timeout policies.  It requires the Policy.ReadWrite.ApplicationConfiguration scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaPolicy.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ApplicationConfiguration'\n$policy = Get-EntraBetaPolicy | Where-Object { $_.DisplayName -eq 'Microsoft User Default Recommended Policy' }\n$definition = @('{\"activityBasedTimeoutPolicies\":{\"AlternateLoginIDLookup\":true, \"IncludedUserIds\":[\"UserID\"]}}')\nSet-EntraBetaPolicy -Id $policy.Id -Definition $definition\n```\n\n----------------------------------------\n\nTITLE: Create User with City\nDESCRIPTION: This example demonstrates creating a new user and specifying the City parameter. The script connects to Entra, defines a PasswordProfile object, and invokes New-EntraBetaUser with parameters including DisplayName, PasswordProfile, UserPrincipalName, AccountEnabled, MailNickName and City. Requires the User.ReadWrite.All scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaUser.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\n$passwordProfile = New-Object -TypeName Microsoft.Open.AzureAD.Model.PasswordProfile\n$passwordProfile.Password = '<Password>'\n$params = @{\n    DisplayName = 'New User'\n    PasswordProfile = $passwordProfile\n    UserPrincipalName = 'NewUser@contoso.com'\n    AccountEnabled = $true\n    MailNickName = 'Newuser'\n    City = 'New York'\n}\n\nNew-EntraBetaUser @params\n```\n\nLANGUAGE: powershell\nCODE:\n```\nDisplayName Id                                   Mail UserPrincipalName\n----------- --                                   ---- -----------------\nNew User 00aa00aa-bb11-cc22-dd33-44ee44ee44ee      NewUser@contoso.com\n```\n\n----------------------------------------\n\nTITLE: Getting Help for Entra Cmdlets - PowerShell\nDESCRIPTION: This code snippet demonstrates how to access detailed help documentation for a specific Microsoft Entra PowerShell cmdlet. It uses the `Get-Help` cmdlet with the `-Detailed` parameter to provide comprehensive information, including syntax, parameters, and examples. Useful for understanding cmdlet usage.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/navigate-entraps.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nGet-Help Get-EntraUser -Detailed\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Devices with SearchString Parameter\nDESCRIPTION: Retrieves deleted devices matching a specific search string using the Get-EntraBetaDeletedDevice cmdlet with the -SearchString parameter.  The output is then filtered to display specific properties and formatted into a table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedDevice.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraBetaDeletedDevice -SearchString 'Contoso Desktop' | Select-Object DeletedDateTime, Id, AccountEnabled, ApproximateLastSignInDateTime, DeviceId, DisplayName, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Set Thumbnail Photo - Stream - PowerShell\nDESCRIPTION: This snippet outlines the syntax for setting a user's thumbnail photo using a file stream with the `Set-EntraBetaUserThumbnailPhoto` cmdlet. It uses the `-FileStream` parameter and the optional `-UserId` parameter.  Requires the `User.ReadWrite.All` permission to update any user's photo, and `User.ReadWrite` permission to update the signed-in user's photo. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUserThumbnailPhoto.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nSet-EntraBetaUserThumbnailPhoto\n -FileStream <Stream>\n [-UserId <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Removing Service Principal App Role Assignment - PowerShell\nDESCRIPTION: This example demonstrates how to remove a service principal application role assignment. It retrieves a service principal and a group, then finds a specific app role assignment and removes it using `Remove-EntraBetaServicePrincipalAppRoleAssignment`.\nRequires connecting to Entra ID with the 'AppRoleAssignment.ReadWrite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaServicePrincipalAppRoleAssignment.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AppRoleAssignment.ReadWrite.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\n$group = Get-EntraBetaGroup -Filter \"displayName eq 'Contoso marketing'\"\n$assignment = Get-EntraBetaServicePrincipalAppRoleAssignment -ServicePrincipalId $servicePrincipal.Id | Where-Object {$_.PrincipalId -eq $group.Id} \nRemove-EntraBetaServicePrincipalAppRoleAssignment -ServicePrincipalId $servicePrincipal.Id  -AppRoleAssignmentId $assignment.Id\n```\n\n----------------------------------------\n\nTITLE: Get app role assignments - PowerShell\nDESCRIPTION: Retrieves all user and group assignments for a specific service principal. The script filters and formats output for easier review. It makes use of `Get-EntraServicePrincipalAppRoleAssignedTo`, `Select-Object` and `Format-Table` cmdlets.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-user-group-assignment.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraServicePrincipalAppRoleAssignedTo -ServicePrincipalId \"aaaaaaaa-1111-2222-3333-bbbbbbbbbbbb\" -All |Select-Object Id, AppRoleId, PrincipalDisplayName, PrincipalId, PrincipalType, ResourceDisplayName | Format-Table\n```\n\n----------------------------------------\n\nTITLE: New-EntraDomain Syntax\nDESCRIPTION: Defines the syntax for the New-EntraDomain cmdlet. It specifies the required and optional parameters including Name, IsDefault, and SupportedServices.  CommonParameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraDomain.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-EntraDomain\n -Name <String>\n [-IsDefault <Boolean>]\n [-SupportedServices <System.Collections.Generic.List`1[System.String]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Defining ServicePrincipalType Parameter in YAML\nDESCRIPTION: Defines the `-ServicePrincipalType` parameter, used to specify the type of service principal. This parameter is optional and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaServicePrincipal.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Assign application users to app roles and export to a specified location (Example 4)\nDESCRIPTION: This example demonstrates assigning users to app roles and exporting the results to a specific location using the `-Export` and `-ExportFilePath` parameters. It connects to Entra ID with necessary scopes, specifies the data source, file path, application name, enables export, specifies the export file path, and enables verbose output.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaAppRoleToApplicationUser.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All', 'Application.ReadWrite.All', 'AppRoleAssignment.ReadWrite.All', 'EntitlementManagement.ReadWrite.All'\nSet-EntraBetaAppRoleToApplicationUser -DataSource \"Generic\" -FilePath \"C:\\temp\\users.csv\" -ApplicationName \"TestApp\" -Export -ExportFilePath \"C:\\temp\\EntraAppRoleAssignments_yyyyMMdd.csv\" -Verbose\n```\n\n----------------------------------------\n\nTITLE: Creating a Trusted Certificate Authority using New-EntraTrustedCertificateAuthority\nDESCRIPTION: This PowerShell code creates a trusted certificate authority in your Microsoft Entra directory. It first connects to Entra ID with the necessary scopes, then creates a `CertificateAuthorityInformation` object, sets its properties (AuthorityType, CrlDistributionPoint, DeltaCrlDistributionPoint, and TrustedCertificate), and finally uses `New-EntraTrustedCertificateAuthority` to create the certificate authority. The `CertificateAuthorityInformation` parameter specifies the details of the certificate authority, including the paths to the CRL distribution points and the trusted certificate file (.cer).\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraTrustedCertificateAuthority.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.ReadWrite.All'\n\n$new_ca = New-Object -TypeName Microsoft.Open.AzureAD.Model.CertificateAuthorityInformation #Create CertificateAuthorityInformation object\n$new_ca.AuthorityType = \"RootAuthority\"\n$new_ca.CrlDistributionPoint = \"https://example.crl\"\n$new_ca.DeltaCrlDistributionPoint = \"https://deltaexample.crl\"\n$new_ca.TrustedCertificate = \"Path to .cer file(including cer file name)\"\nNew-EntraTrustedCertificateAuthority -CertificateAuthorityInformation $new_ca\n```\n\n----------------------------------------\n\nTITLE: Retrieve Authentication Method Registration Report - PowerShell\nDESCRIPTION: This PowerShell command retrieves the authentication method registration report from Microsoft Entra. It is a new command introduced in the March 2025 release (Version 1.0.5) of the Microsoft Entra PowerShell module. No specific dependencies are mentioned beyond having the updated module installed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraAuthenticationMethodUserRegistrationDetailReport\n```\n\n----------------------------------------\n\nTITLE: New-EntraBetaPermissionGrantConditionSet Syntax\nDESCRIPTION: This snippet shows the syntax for the New-EntraBetaPermissionGrantConditionSet command. It details the parameters PolicyId, ConditionSetType, and optional parameters like Permissions, ClientApplicationTenantIds, ClientApplicationsFromVerifiedPublisherOnly, ClientApplicationIds, ResourceApplication, ClientApplicationPublisherIds, PermissionClassification, and PermissionType. This command requires the Microsoft.Entra.Beta module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaPermissionGrantConditionSet.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-EntraBetaPermissionGrantConditionSet\n -PolicyId <String>\n -ConditionSetType <String>\n [-Permissions <System.Collections.Generic.List`1[System.String]>]\n [-ClientApplicationTenantIds <System.Collections.Generic.List`1[System.String]>]\n [-ClientApplicationsFromVerifiedPublisherOnly <Boolean>]\n [-ClientApplicationIds <System.Collections.Generic.List`1[System.String]>]\n [-ResourceApplication <String>]\n [-ClientApplicationPublisherIds <System.Collections.Generic.List`1[System.String]>]\n [-PermissionClassification <String>]\n [-PermissionType <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Select-EntraGroupIdsGroupIsMemberOf Syntax (PowerShell)\nDESCRIPTION: Displays the syntax for the `Select-EntraGroupIdsGroupIsMemberOf` cmdlet. It specifies the required parameters `-GroupId` (String) and `-GroupIdsForMembershipCheck` (GroupIdsForMembershipCheck), as well as the availability of common parameters. This syntax is essential for understanding how to properly call the cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Select-EntraGroupIdsGroupIsMemberOf.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSelect-EntraGroupIdsGroupIsMemberOf\n -GroupId <String>\n -GroupIdsForMembershipCheck <GroupIdsForMembershipCheck>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Update Support Emails using Set-EntraPartnerInformation (PowerShell)\nDESCRIPTION: This code snippet demonstrates how to update the support email addresses for a partner using the Set-EntraPartnerInformation cmdlet.  It utilizes the PartnerSupportEmails parameter to update the support contact information.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraPartnerInformation.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.ReadWrite.All'\nSet-EntraPartnerInformation -PartnerSupportEmails 'contoso@example.com'\n```\n\n----------------------------------------\n\nTITLE: Configuring OrgRestrictions Parameter\nDESCRIPTION: This parameter is reserved for future use. It likely will be used for setting restrictions related to the organization in the application configuration.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplication.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[System.String]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Trusted Certificate Authorities by TrustedIssuer\nDESCRIPTION: This example retrieves trusted certificate authorities based on a specific TrustedIssuer value. The Connect-Entra cmdlet establishes a connection, and Get-EntraBetaTrustedCertificateAuthority with the -TrustedIssuer parameter filters the results.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaTrustedCertificateAuthority.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All'\nGet-EntraBetaTrustedCertificateAuthority -TrustedIssuer 'CN=mscmdlet'\n```\n\n----------------------------------------\n\nTITLE: Remove-EntraBetaDeletedApplication Syntax - PowerShell\nDESCRIPTION: This section displays the syntax for the Remove-EntraBetaDeletedApplication cmdlet. It requires the ApplicationId parameter, which is the unique identifier of the deleted application. It also supports common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaDeletedApplication.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraBetaDeletedApplication\n [-ApplicationId] <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Role Assignments Filter by RoleDefinitionId PowerShell\nDESCRIPTION: This example shows how to get role assignments based on a specified role definition ID. It connects to Entra ID, retrieves the ID of a role definition using a filter, and then uses `Get-EntraDirectoryRoleAssignment` with the `-Filter` parameter to find assignments that match the role definition ID. The filter uses the OData syntax `roleDefinitionId eq '$roleId'`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDirectoryRoleAssignment.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory', 'EntitlementManagement.Read.All'\n$roleId = (Get-EntraDirectoryRoleDefinition -Filter \"DisplayName eq 'Helpdesk Administrator'\").Id\nGet-EntraDirectoryRoleAssignment -Filter \"roleDefinitionId eq '$roleId'\"\n```\n\n----------------------------------------\n\nTITLE: Setting Domain Capabilities - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to set the domain capabilities for new user accounts in Microsoft Entra ID. It first connects to Entra ID using Connect-Entra and scopes, and then uses Set-EntraBetaDomain to set the specified supported services. Domain.ReadWrite.All scope is required.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaDomain.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Domain.ReadWrite.All'\nSet-EntraBetaDomain -Name Contoso.com -SupportedServices @('Email', 'OfficeCommunicationsOnline')\n```\n\n----------------------------------------\n\nTITLE: Listing empty groups - PowerShell\nDESCRIPTION: This example retrieves groups without members from Microsoft Entra ID. It requires connecting to Entra ID with the GroupMember.Read.All scope. It iterates through all groups, and checks if each group has members via Get-EntraBetaGroupMember. If no members are found, the group is outputted.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaGroup.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All'\n$allGroups = Get-EntraBetaGroup -All\n$groupsWithoutMembers = foreach ($group in $allGroups) {\n    $members = Get-EntraBetaGroupMember -ObjectId $group.Id\n    if ($members.Count -eq 0) {\n        $group\n    }\n}\n$groupsWithoutMembers | Format-Table DisplayName, Id, GroupTypes\n```\n\n----------------------------------------\n\nTITLE: Retrieve Deleted Directory Object with Details - PowerShell\nDESCRIPTION: Demonstrates how to retrieve a deleted directory object and display its details using Format-Table. The Connect-Entra cmdlet is used to establish a connection with the necessary scopes before retrieving the deleted object. The output includes properties like Id, displayName, @odata.type, DeletedDateTime, and DeletionAgeInDays.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedDirectoryObject.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.Read.All', 'Application.Read.All','Group.Read.All','User.Read.All'\nGet-EntraBetaDeletedDirectoryObject -DirectoryObjectId 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb' | Format-Table -Property Id, displayName, '@odata.type', DeletedDateTime, DeletionAgeInDays -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get Top Two Deleted Groups\nDESCRIPTION: This PowerShell script retrieves the top two deleted groups from the Microsoft Entra ID. It connects to Entra ID with the necessary scopes and uses `Get-EntraBetaDeletedGroup` with the `-Top 2` parameter to limit the results to the first two deleted groups.  It selects specific properties and formats the output as a table. It requires the 'Group.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedGroup.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Group.Read.All'\nGet-EntraBetaDeletedGroup -Top 2 | Select-Object Id, DisplayName, MailNickname, GroupTypes, DeletedDateTime, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Invite User: Display Name - PowerShell\nDESCRIPTION: This example showcases inviting a new external user to your directory, additionally setting the display name of the invited user. It utilizes the `New-EntraInvitation` cmdlet with the `-InvitedUserEmailAddress`, `-SendInvitationMessage`, `-InviteRedirectUrl`, and `-InvitedUserDisplayName` parameters. Authentication is handled by `Connect-Entra`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraInvitation.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Invite.All'\n$emailAddress = 'someexternaluser@externaldomain.com'\n$sendInvitationMessage = $True\n$redirectUrl = 'https://myapps.onmicrosoft.com'\n$displayName = 'microsoftuser'\nNew-EntraInvitation -InvitedUserEmailAddress $emailAddress -SendInvitationMessage $sendInvitationMessage -InviteRedirectUrl $redirectUrl -InvitedUserDisplayName $displayName\n```\n\n----------------------------------------\n\nTITLE: Create a permission grant condition set with specific permissions\nDESCRIPTION: This example demonstrates how to create a permission grant condition set that includes specific permissions for a resource application. It retrieves a service principal (Box) to get its AppRoles.Id for use as a permission. It requires the 'Policy.ReadWrite.PermissionGrant' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraPermissionGrantConditionSet.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.PermissionGrant'\n$permission = (Get-EntraServicePrincipal -Filter \"DisplayName eq 'Box'\").AppRoles.Id\n$permissionGrantPolicy = Get-EntraPermissionGrantPolicy | Where-Object { $_.Id -eq 'my-custom-consent-policy' }\nNew-EntraPermissionGrantConditionSet -PolicyId $permissionGrantPolicy.Id -ConditionSetType 'includes' -PermissionType 'delegated' -Permissions @($permission) -ResourceApplication 'resource-application-id'\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId                                   ClientApplicationIds ClientApplicationPublisherIds ClientApplicationTenantIds ClientApplicationsFromVerifiedPublisherOnly PermissionClassification PermissionType Permissions\n--                                   -------------------- ----------------------------- -------------------------- ------------------------------------------- ------------------------ -------------- ---------\naaaa0000-bb11-2222-33cc-444444dddddd {all}                {all}                         {all}                      False                                       all                      delegated      {8b590...\n```\n\n----------------------------------------\n\nTITLE: Remove Group App Role Assignment Example (PowerShell)\nDESCRIPTION: This example demonstrates how to remove a group application role assignment. It first connects to Entra ID, retrieves the group and the specific app role assignment, and then removes the assignment using the Remove-EntraBetaGroupAppRoleAssignment cmdlet. The example utilizes Connect-Entra, Get-EntraBetaGroup and Get-EntraBetaGroupAppRoleAssignment cmdlets.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaGroupAppRoleAssignment.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\n$group = Get-EntraBetaGroup -Filter \"displayName eq 'Contoso Marketing'\"\n$appRoleAssignment = Get-EntraBetaGroupAppRoleAssignment -GroupId $group.Id | Where-Object {$_.ResourceDisplayName -eq 'Box'}\nRemove-EntraBetaGroupAppRoleAssignment -GroupId $group.Id -AppRoleAssignmentId $appRoleAssignment.Id\n```\n\n----------------------------------------\n\nTITLE: Update Entra Signed-In User Password - PowerShell\nDESCRIPTION: This snippet demonstrates how a user can update their own password in Microsoft Entra ID using the `Update-EntraSignedInUserPassword` cmdlet. It requires the current and new passwords to be converted to secure strings and requires the `Directory.AccessAsUser.All` scope. It allows self-service password updates without admin privileges.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-user.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.AccessAsUser.All'\n$currentPassword = ConvertTo-SecureString '<strong-password>' -AsPlainText -Force\n$newPassword = ConvertTo-SecureString '<strong-password>' -AsPlainText -Force\nUpdate-EntraSignedInUserPassword -CurrentPassword $currentPassword -NewPassword $newPassword\n```\n\n----------------------------------------\n\nTITLE: Remove Application Owner - PowerShell\nDESCRIPTION: This PowerShell code snippet removes an owner from an application in Microsoft Entra ID. It retrieves the application and owner objects using their respective cmdlets and then uses Remove-EntraBetaApplicationOwner to remove the owner.  It requires the 'Application.ReadWrite.All' scope. The ApplicationId and OwnerId parameters are mandatory.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaApplicationOwner.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All'\n$application = Get-EntraBetaApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\n$owner = Get-EntraBetaApplicationOwner -ApplicationId $application.Id | Where-Object {$_.userPrincipalName -eq 'SawyerM@contoso.com'}\nRemove-EntraBetaApplicationOwner -ApplicationId $application.Id -OwnerId $owner.Id\n```\n\n----------------------------------------\n\nTITLE: Get All Group Lifecycle Policies - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all groupLifecyclePolicies in Microsoft Entra ID.  It first connects to Entra ID using the Connect-Entra cmdlet, specifying the required scopes, and then calls Get-EntraBetaGroupLifecyclePolicy to list all policies. The output displays the Id, AlternateNotificationEmails, GroupLifetimeInDays, and ManagedGroupTypes properties for each policy.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaGroupLifecyclePolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\nGet-EntraBetaGroupLifecyclePolicy\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId                                   AlternateNotificationEmails GroupLifetimeInDays ManagedGroupTypes\n--                                   --------------------------- ------------------- -----------------\neeeeeeee-4444-5555-6666-ffffffffffff example@contoso.com                     200                 Selected\n```\n\n----------------------------------------\n\nTITLE: Retrieve All Registered Owners of a Device\nDESCRIPTION: This example demonstrates how to retrieve all registered owners of a device.  It connects to Entra ID with 'Device.Read.All' scope, gets a device by its display name, and uses Get-EntraBetaDeviceRegisteredOwner with the `-All` parameter to fetch all registered owners, selecting and formatting specific properties. It requires the 'Device.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeviceRegisteredOwner.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\n$device = Get-EntraBetaDevice -SearchString '<device-display-name>'\nGet-EntraBetaDeviceRegisteredOwner -DeviceId $device.Id -All |\nSelect-Object Id, displayName, UserPrincipalName, createdDateTime, userType, accountEnabled |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Updating Authorization Policy properties - PowerShell\nDESCRIPTION: This PowerShell script demonstrates how to update an existing authorization policy in Microsoft Entra ID. It connects to Entra ID with the required scopes and then uses the Set-EntraBetaAuthorizationPolicy cmdlet to modify the display name, description, GuestUserRoleId and EnabledPreviewFeatures of a specified policy.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaAuthorizationPolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.Authorization'\n$Params = @{\n    Id = 'authorizationPolicy' \n    DisplayName = 'updated displayname' \n    Description = 'updated description' \n    GuestUserRoleId = '10dae51f-b6af-4016-8d66-8c2a99b929b3' \n    EnabledPreviewFeatures = @('EnableGranularConsent') \n}\nSet-EntraBetaAuthorizationPolicy @Params\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Device by DeviceId - PowerShell\nDESCRIPTION: This PowerShell script retrieves a specific device from Microsoft Entra ID using its DeviceId. It first connects to Entra ID with the 'Device.Read.All' scope, then uses the Get-EntraDevice cmdlet with a filter to find the device. Finally, it selects and displays the Id, AccountEnabled, DeviceId, and DisplayName properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-devices.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'  \nGet-EntraDevice -Filter \"DeviceId eq 'dddddddd-5555-6666-7777-eeeeeeeeeeee'\" | Select-Object Id, AccountEnabled,DeviceId, DisplayName\n```\n\n----------------------------------------\n\nTITLE: Get List of SKUs by TenantId - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve SKUs for a specific tenant using its ID. It first connects to Entra ID with the required scopes. Then, it retrieves the current tenant ID using `Get-EntraContext` and passes it to `Get-EntraAccountSku` using the `-TenantId` parameter. The output shows the list of SKUs associated with the specified tenant.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAccountSku.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All','LicenseAssignment.Read.All'\n$tenantId = (Get-EntraContext).TenantId\nGet-EntraAccountSku -TenantId $tenantId\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId                                                                        AccountId                            AccountName   AppliesTo CapabilityStatus ConsumedUnits SkuId                                SkuPartNumber\n--                                                                        ---------                            -----------   --------- ---------------- ------------- -----                                -------\neeeeeeee-4444-5555-6666-ffffffffffff aaaabbbb-0000-cccc-1111-dddd2222eeee Contoso-User  User      Suspended        20            aaaaaaaa-0b0b-1c1c-2d2d-333333333333 EMSPRE…\nffffffff-5555-6666-7777-aaaaaaaaaaaa aaaabbbb-0000-cccc-1111-dddd2222eeee Contoso-User  User      Suspended        20            bbbbbbbb-1c1c-2d2d-3e3e-444444444444 ENTERP…\ndddddddd-3333-4444-5555-eeeeeeeeeeee aaaabbbb-0000-cccc-1111-dddd2222eeee Contoso-User  User      Suspended        2             cccccccc-2d2d-3e3e-4f4f-555555555555 ENTERP…\n```\n\n----------------------------------------\n\nTITLE: Connect to Entra ID with Scopes - PowerShell\nDESCRIPTION: This command connects to Microsoft Entra ID using the specified scopes. It requires the Microsoft Entra PowerShell module to be installed. The scopes provided grant the necessary permissions to read and write application and delegated permission grant information. The `Application.ReadWrite.All` scope allows the user to manage applications, while `DelegatedPermissionGrant.ReadWrite.All` allows for managing delegated permissions.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/how-to-grant-revoke-api-permissions.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes \"Application.ReadWrite.All\", \"DelegatedPermissionGrant.ReadWrite.All\"\n```\n\n----------------------------------------\n\nTITLE: Get All Policies (GetQuery)\nDESCRIPTION: This snippet demonstrates how to retrieve all policies from Microsoft Entra ID using the Get-EntraBetaPolicy cmdlet. It utilizes the GetQuery parameter set, which is the default.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaPolicy\n [-Top <Int32>]\n [-All]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Retrieve Contact Thumbnail Photo - PowerShell\nDESCRIPTION: Demonstrates how to retrieve the thumbnail photo of a contact using the Get-EntraBetaContactThumbnailPhoto command.  It first connects to Entra ID with the required 'Contacts.Read' scope and then uses the ObjectId to retrieve the contact's thumbnail.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaContactThumbnailPhoto.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Contacts.Read'\nGet-EntraBetaContactThumbnailPhoto -ObjectId 'bbbbbbbb-1111-2222-3333-cccccccccccc'\n```\n\n----------------------------------------\n\nTITLE: Get Specific Resource Example - PowerShell\nDESCRIPTION: This example retrieves a specific resource for the 'aadRoles' provider using its ID. It first connects to Entra ID with the required scopes and then calls the Get-EntraBetaPrivilegedResource cmdlet, passing the ProviderId and Id as parameters using a hashtable. It depends on the connection to Entra ID and requires the ProviderId and resource Id.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPrivilegedResource.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'PrivilegedAccess.Read.AzureAD', 'PrivilegedAccess.Read.AzureResources' 'PrivilegedAccess.Read.AzureADGroup'\n$params = @{\n    ProviderId = 'aadRoles'\n    Id = 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb'\n}\nGet-EntraBetaPrivilegedResource @params\n```\n\n----------------------------------------\n\nTITLE: New-EntraApplicationPassword Syntax\nDESCRIPTION: Defines the syntax for the New-EntraApplicationPassword cmdlet. It requires an ApplicationId and a PasswordCredential object as input. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplicationPassword.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-EntraApplicationPassword\n -ApplicationId <String>\n -PasswordCredential <PasswordCredential>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Service Principal Memberships Example - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve the memberships of a service principal using the Get-EntraBetaServicePrincipalMembership cmdlet. It first connects to Entra, retrieves a service principal based on its display name, and then retrieves the memberships for that service principal, selecting the Id, DisplayName, and '@odata.type' properties. Requires the 'Application.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalMembership.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraBetaServicePrincipalMembership -ServicePrincipalId $servicePrincipal.Id | Select-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Get deleted service principals using SearchString - PowerShell\nDESCRIPTION: This PowerShell script searches for deleted service principals matching a given string in their display name or other searchable properties. It uses the '-SearchString' parameter to specify the search term. The script needs the 'Application.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedServicePrincipal.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraBetaDeletedServicePrincipal -SearchString 'Contoso Marketing' | Select-Object Id, DisplayName, AppId, DeletedDateTime, DeletionAgeInDays, ServicePrincipalType | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Remove User Extension - Single Extension - PowerShell\nDESCRIPTION: This snippet shows the syntax for removing a single user extension using the Remove-EntraUserExtension cmdlet.  It requires the ObjectId of the user and the ExtensionName to be removed. Common parameters are also supported. The ObjectId specifies the user whose extension will be removed, and ExtensionName is the specific name of the extension to remove from that user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraUserExtension.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraUserExtension\n -ObjectId <String>\n -ExtensionName <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: List Scoped Administrators by AdministrativeUnitId - PowerShell\nDESCRIPTION: This PowerShell snippet lists scoped administrators for a specified administrative unit. It connects to Entra with the 'RoleManagement.Read.Directory' scope and retrieves the administrative unit using a filter. Then, it retrieves all scoped role memberships associated with the administrative unit's ID using `Get-EntraBetaScopedRoleMembership`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaScopedRoleMembership.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory'\n$administrativeUnit = Get-EntraBetaAdministrativeUnit -Filter \"DisplayName eq 'Pacific Administrative Unit'\"\nGet-EntraBetaScopedRoleMembership -AdministrativeUnitId $administrativeUnit.Id\n```\n\n----------------------------------------\n\nTITLE: Update Policy Type - PowerShell\nDESCRIPTION: This example demonstrates how to update the `type` property of a specified policy in Microsoft Entra ID. It involves connecting to Entra ID with the appropriate scopes, retrieving a specific policy, and then using the `Set-EntraBetaPolicy` cmdlet to modify its type to `ActivityBasedTimeoutPolicy`.  It requires the Policy.ReadWrite.ApplicationConfiguration scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaPolicy.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ApplicationConfiguration'\n$policy = Get-EntraBetaPolicy | Where-Object { $_.DisplayName -eq 'Microsoft User Default Recommended Policy' }\nSet-EntraBetaPolicy -Id $policy.Id -Type 'ActivityBasedTimeoutPolicy'\n```\n\n----------------------------------------\n\nTITLE: Get User Administrative Units Example 4\nDESCRIPTION: This example demonstrates retrieving a specific administrative unit for a user using the AdministrativeUnitId parameter. It first retrieves an administrative unit by its display name and then uses its ID in the Get-EntraUserAdministrativeUnit cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserAdministrativeUnit.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.Read.All'\n$administrativeUnit = Get-EntraAdministrativeUnit -Filter \"DisplayName eq 'Pacific Admin Unit'\"\nGet-EntraUserAdministrativeUnit -UserId 'SawyerM@contoso.com' -AdministrativeUnitId $administrativeUnit.Id\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDeletedDateTime Id                                   Description                            DisplayName             Visibility\n--------------- --                                   -----------                            -----------             ----------\n                dddddddd-3333-4444-5555-eeeeeeeeeeee Pacific Administrative Unit            Pacific Admin Unit\n```\n\n----------------------------------------\n\nTITLE: Updating DefaultUserRolePermissions - PowerShell\nDESCRIPTION: This PowerShell script demonstrates how to update the DefaultUserRolePermissions of an authorization policy in Microsoft Entra ID. It connects to Entra ID with necessary scopes, creates a DefaultUserRolePermissions object, sets the allowed permissions, and then uses Set-EntraBetaAuthorizationPolicy to apply these changes to the specified policy.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaAuthorizationPolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.Authorization'\n$defaultUserRolePermissions = New-Object -TypeName Microsoft.Open.MSGraph.Model.DefaultUserRolePermissions\n$defaultUserRolePermissions.AllowedToCreateApps = $false\n$defaultUserRolePermissions.AllowedToCreateSecurityGroups = $false\n$defaultUserRolePermissions.AllowedToReadOtherUsers = $false\nSet-EntraBetaAuthorizationPolicy -Id 'authorizationPolicy' -DefaultUserRolePermissions $defaultUserRolePermissions\n```\n\n----------------------------------------\n\nTITLE: Delete Permission Grant Condition Set - PowerShell\nDESCRIPTION: This example demonstrates how to delete a permission grant condition set from a policy. It first connects to Entra ID, retrieves the permission grant policy and the specific condition set, and then removes the condition set using its ID, Policy ID, and Condition Set Type.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraPermissionGrantConditionSet.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.PermissionGrant'\n$permissionGrantPolicy = Get-EntraPermissionGrantPolicy | Where-Object { $_.Id -eq 'my-custom-consent-policy' }\n$conditionSet = Get-EntraPermissionGrantConditionSet -PolicyId $permissionGrantPolicy.Id -ConditionSetType 'includes' | Where-Object { $_.PermissionType -eq 'delegated' }\nRemove-EntraPermissionGrantConditionSet -PolicyId $permissionGrantPolicy.Id -ConditionSetType 'includes' -Id $conditionSet.Id\n```\n\n----------------------------------------\n\nTITLE: Get All User Owned Devices\nDESCRIPTION: This example retrieves all registered devices owned by a specified user in Microsoft Entra ID without pagination. It utilizes the -All switch to ensure all devices are returned. Similar to the first example, it first connects to Entra ID with required scopes. The Get-EntraBetaUserOwnedDevice cmdlet is then invoked with the -UserId and -All parameters, displaying all owned devices.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserOwnedDevice.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraBetaUserOwnedDevice -UserId 'SawyerM@contoso.com' -All\n```\n\n----------------------------------------\n\nTITLE: Add Entra Environment Syntax (Add Entra Environment Name)\nDESCRIPTION: This syntax block shows how to use the Add-EntraEnvironment cmdlet with mandatory parameters -Name, -AzureADEndpoint and -GraphEndpoint.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Add-EntraEnvironment.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-EntraEnvironment\n [-Name] <String>\n [-AzureADEndpoint] <String>\n [-GraphEndpoint] <String>\n [-ProgressAction <ActionPreference>]\n [-WhatIf]\n [-Confirm]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Federation Settings for Domain - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve federation settings for a specified domain using the Get-EntraBetaDomainFederationSettings cmdlet. It requires the Domain.Read.All scope and specifies the domain name to retrieve settings for.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDomainFederationSettings.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Domain.Read.All'\nGet-EntraBetaDomainFederationSettings -DomainName 'contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Assign Multiple User Sponsors - PowerShell\nDESCRIPTION: This example shows how to assign multiple users as sponsors to a target user account using the Set-EntraBetaUserSponsor cmdlet. It connects to Entra with 'User.ReadWrite.All' scope and calls Set-EntraBetaUserSponsor, specifying the target user's ID, sponsor type as User, and an array of sponsor IDs.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUserSponsor.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nSet-EntraBetaUserSponsor -UserId 'JohnstoneH@fabrikam.com' -Type User -SponsorIds @(\"db0c6l50-93ee-4b22-9bb9-c8454875d990\",\"c9db38b9-e5b8-4b5e-ak78-9812230af58d\")\n```\n\n----------------------------------------\n\nTITLE: AppObjectId Parameter Definition - YAML\nDESCRIPTION: This YAML code snippet defines the `-AppObjectId` parameter for the `Remove-EntraApplicationVerifiedPublisher` cmdlet. It specifies that it's a string type, is required, accepts pipeline input by property name and value, and does not accept wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraApplicationVerifiedPublisher.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Filter Role Definitions by Search String - PowerShell\nDESCRIPTION: This example demonstrates how to find role definitions containing a specific string in their display name using the `-SearchString` parameter.  It returns all role definitions whose display name contains 'Global'. Requires 'RoleManagement.Read.Directory' and 'EntitlementManagement.Read.All' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirectoryRoleDefinition.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory', 'EntitlementManagement.Read.All'\nGet-EntraBetaDirectoryRoleDefinition -SearchString 'Global'\n```\n\n----------------------------------------\n\nTITLE: Remove Service Principal Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Remove-EntraBetaServicePrincipal cmdlet. It requires the ServicePrincipalId parameter, which is a string representing the ID of the service principal to be removed. It also supports CommonParameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaServicePrincipal.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraBetaServicePrincipal\n -ServicePrincipalId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Lifecycle Policy Group Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the `Get-EntraBetaLifecyclePolicyGroup` cmdlet. It shows the required `-GroupId` parameter and the optional `-Property` parameter, along with the use of common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaLifecyclePolicyGroup.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaLifecyclePolicyGroup\n -GroupId <String>\n [-Property <String[]>] \n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Setting ParentalControlSettings Parameter\nDESCRIPTION: This parameter is used to specify parental control settings for an application.  These settings control aspects of the application that are relevant to parental controls.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplication.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nType: ParentalControlSettings\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get and Format Certificate User IDs - PowerShell\nDESCRIPTION: This example retrieves authorization information for a user, then extracts and formats the CertificateUserIds to display the Type, TypeName, and Value properties. It uses `Connect-Entra` to connect with 'User.Read.All' scope, then retrieves the information and pipes it to `Format-Table`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserCBAAuthorizationInfo.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\n$userInfo = Get-EntraUserCBAAuthorizationInfo -UserId 'SawyerM@contoso.com'\n$userInfo.AuthorizationInfo.CertificateUserIds | Format-Table Type, TypeName, Value\n```\n\n----------------------------------------\n\nTITLE: Resolve Tenant by GUID - Entra PowerShell\nDESCRIPTION: This example shows how to resolve an Entra tenant by specifying its Tenant ID (GUID) using the Resolve-EntraTenant cmdlet.  It first retrieves the current TenantId using Get-EntraContext and then uses that value. It requires the 'CrossTenantInformation.ReadBasic.All' scope. The output shows details of the resolved tenant including TenantId, DisplayName and DefaultDomainName.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Resolve-EntraTenant.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'CrossTenantInformation.ReadBasic.All'\n$tenantId=(Get-EntraContext).TenantId\nResolve-EntraTenant -TenantId $tenantId\n```\n\nLANGUAGE: powershell\nCODE:\n```\nEnvironment                   : Global\nValueFormat                   : TenantId\nResult                        : Resolved\nResultMessage                 : Tenant resolved successfully.\nTenantId                      : aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb\nDisplayName                   : Contoso, Ltd\nDefaultDomainName             : CONTOSO18839.onmicrosoft.com\nFederationBrandName           :\nOidcMetadataResult            : Not Found\nOidcMetadataTenantId          :\nOidcMetadataTenantRegionScope :\n```\n\n----------------------------------------\n\nTITLE: Defining Web Parameter\nDESCRIPTION: Specifies settings for a web application. It accepts a WebApplication object as input. The default value is None and it is not a required parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplication.md#_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nType: WebApplication\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Top Int32 Parameter Definition\nDESCRIPTION: YAML definition for the -Top Int32 parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedAdministrativeUnit.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Int32\nParameter Sets: GetQuery\nAliases: Limit\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Test-EntraScript Syntax\nDESCRIPTION: Defines the syntax for the `Test-EntraScript` command. It accepts a path to a script, content to scan, and a quiet switch.  It checks if the provided script uses Azure AD commands compatible with the Microsoft Entra PowerShell module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Test-EntraScript.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nTest-EntraScript\n -Path <String[]>\n [-Content <String>]\n [-Quiet]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: List existing permission grants for the group (PowerShell)\nDESCRIPTION: This example demonstrates how to retrieve the existing permission grants for a specified group. It first connects to Entra with the required scope, then uses the Get-EntraGroupPermissionGrant cmdlet with the GroupId to retrieve the permission grants.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraGroupPermissionGrant.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All'\nGet-EntraGroupPermissionGrant -GroupId 'CcDdEeFfGgHhIiJjKkLlMmNnOoPpQq3'\n```\n\n----------------------------------------\n\nTITLE: Get Connectors in Group\nDESCRIPTION: This example shows how to retrieve all connectors within a specified Application Proxy connector group using the `Get-EntraBetaApplicationProxyConnectorGroupMembers` cmdlet. It requires connecting to Entra ID with the 'Directory.ReadWrite.All' scope. The `OnPremisesPublishingProfileId` parameter identifies the target connector group.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationProxyConnectorGroupMembers.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\nGet-EntraBetaApplicationProxyConnectorGroupMembers -OnPremisesPublishingProfileId 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb'\n```\n\n----------------------------------------\n\nTITLE: Defining ReplyUrls Parameter in YAML\nDESCRIPTION: Defines the `-ReplyUrls` parameter, a list of URLs where user tokens are sent for sign-in or redirect URIs for OAuth 2.0 authorization codes and access tokens. This parameter is optional and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaServicePrincipal.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[System.String]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get PowerShell Version on Windows\nDESCRIPTION: This command retrieves the PowerShell version on a Windows system by accessing the `$PSVersionTable.PSVersion` property. It is used to verify if the installed PowerShell version meets the minimum requirements for the Microsoft Entra PowerShell module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/installation.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$PSVersionTable.PSVersion\n```\n\n----------------------------------------\n\nTITLE: Update Microsoft.Entra Module (v1)\nDESCRIPTION: This command updates the Microsoft.Entra PowerShell module to the latest version. The `-Force` parameter ensures that the module is updated even if it is currently in use.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/includes/update-entrapowershell-module.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nUpdate-Module -Name Microsoft.Entra -Force\n```\n\n----------------------------------------\n\nTITLE: Get Audit Logs by App Display Name - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve sign-in logs by `AppDisplayName` using the `Get-EntraBetaAuditSignInLog` cmdlet. It requires connecting to Entra ID with appropriate scopes. The `-Filter` parameter is used to specify the `AppDisplayName` to search for.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAuditSignInLog.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All','Directory.Read.All'\nGet-EntraBetaAuditSignInLog -Filter \"AppDisplayName eq 'Graph Explorer'\" -Top 1\n```\n\n----------------------------------------\n\nTITLE: Add a predefined value for a Microsoft Entra ID custom security attribute definition - PowerShell\nDESCRIPTION: This example demonstrates adding a predefined value to a custom security attribute definition in Microsoft Entra ID. It first connects to Entra with the necessary scopes, retrieves the attribute definition, and then adds a new allowed value ('Alpine') to it.  Requires the 'CustomSecAttributeDefinition.ReadWrite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaCustomSecurityAttributeDefinitionAllowedValue.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'CustomSecAttributeDefinition.ReadWrite.All'\n$attributeDefinition = Get-EntraBetaCustomSecurityAttributeDefinition | Where-Object { $_.Name -eq 'Engineering' }\nAdd-EntraBetaCustomSecurityAttributeDefinitionAllowedValue -CustomSecurityAttributeDefinitionId $attributeDefinition.Id -Id 'Alpine' -IsActive $true\n```\n\nLANGUAGE: powershell\nCODE:\n```\n```Output\nId   IsActive\n--   --------\nAlpine True\n```\n```\n\n----------------------------------------\n\nTITLE: Get All User Memberships - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all user memberships in Microsoft Entra ID using the Get-EntraUserMembership cmdlet with the -All parameter.  It connects to Entra ID with the User.Read scope, retrieves all memberships for a specified user ID, and then selects and formats the output to display the ID, displayName, createdDateTime, and @odata.type properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserMembership.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read'\nGet-EntraUserMembership -UserId 'SawyerM@contoso.com' -All |\nSelect-Object Id, displayName, createdDateTime, '@odata.type' |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Remove Trusted Certificate Authority - Entra ID - PowerShell\nDESCRIPTION: This PowerShell code snippet demonstrates how to remove a trusted certificate authority from Microsoft Entra ID. It first connects to Entra ID with the required scopes, retrieves the CertificateAuthorityInformation object using Get-EntraBetaTrustedCertificateAuthority, and then removes the certificate authority using Remove-EntraBetaTrustedCertificateAuthority, specifying the CertificateAuthorityInformation object as a parameter. Requires the Microsoft.Entra.Beta module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaTrustedCertificateAuthority.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.ReadWrite.All'\n$cer = Get-EntraBetaTrustedCertificateAuthority #Get the CertificateAuthorityInformation object\nRemove-EntraBetaTrustedCertificateAuthority -CertificateAuthorityInformation $cer[0]\n```\n\n----------------------------------------\n\nTITLE: Get OAuth2 Grants for User in Service Principal\nDESCRIPTION: This example retrieves OAuth2 permission grants specifically for a user within a given service principal. It first retrieves the user and service principal objects, then filters the permission grants based on the ClientId and PrincipalId. This requires 'Directory.Read.All' scope. The output is formatted as a list.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaOAuth2PermissionGrant.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\n$user = Get-EntraBetaUser -UserId 'SawyerM@contoso.com'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"DisplayName eq 'Helpdesk Application'\"\nGet-EntraBetaOAuth2PermissionGrant | Where-Object {$_.ClientId -eq $servicePrincipal.Id -and $_.PrincipalId -eq $user.Id} | Format-List\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nObjectId             : E3fH4iJ5kL6mN7oP8qR9sT0uV1wX2\nClientId             : 22223333-cccc-4444-dddd-5555eeee6666\nConsentType          : Principal\nId                   : E3fH4iJ5kL6mN7oP8qR9sT0uV1wX2\nPrincipalId          : aaaaaaaa-bbbb-cccc-1111-222222222222\nResourceId           : c2c2c2c2-dddd-eeee-ffff-a3a3a3a3a3a3\nScope                :  User.Read.All openid profile offline_access Organization.Read.All User.ReadWrite.All Device.Read.All Device.ReadWrite.All Directory.Read.All User.Read RoleManagement.ReadWrite.Directory Group.ReadWrite.All\nAdditionalProperties : {}\n```\n\n----------------------------------------\n\nTITLE: Creating Application Proxy App - Basic Configuration - PowerShell\nDESCRIPTION: This example demonstrates how to create a new application with basic required settings using the `New-EntraBetaApplicationProxyApplication` cmdlet. It specifies the display name, external URL, and internal URL for the application. It also connects to Entra with the necessary scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplicationProxyApplication.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\n$params = @{\n    DisplayName = 'Finance Tracker' \n    ExternalUrl = 'https://finance-awcycles.msappproxy.net/' \n    InternalUrl = 'http://finance/'\n}\nNew-EntraBetaApplicationProxyApplication @params\n```\n\n----------------------------------------\n\nTITLE: Update LogoutUrl and ReplyUrls - PowerShell\nDESCRIPTION: This example demonstrates updating the LogoutUrl and ReplyUrls properties of a service principal in Microsoft Entra ID.  It connects to Entra ID, retrieves the service principal, and then sets the new values for LogoutUrl and ReplyUrls. It requires Application.ReadWrite.All and Application.ReadWrite.OwnedBy scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraServicePrincipal.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\n$logoutUrl = 'https://securescore.office.com/SignOut'\n$replyUrls = 'https://admin.contoso.com'\nSet-EntraServicePrincipal -ServicePrincipalId $servicePrincipal.Id -LogoutUrl $logoutUrl -ReplyUrls $replyUrls\n```\n\n----------------------------------------\n\nTITLE: Example Output - PowerShell\nDESCRIPTION: This snippet shows the expected output from the `Get-EntraBetaGroupPermissionGrant` cmdlet, which includes the `Id`, `ClientId`, `ClientAppId`, `ResourceAppId`, `PermissionType`, and `Permission` properties.  These details represent the permissions granted to the specified group.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaGroupPermissionGrant.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nId             : CcDdEeFfGgHhIiJjKkLlMmNnOoPpQq3\nClientId       : 00001111-aaaa-2222-bbbb-3333cccc4444\nClientAppId    : 44445555-eeee-6666-ffff-7777aaaa8888\nResourceAppId  : bbbb1111-cc22-3333-44dd-555555eeeeee\nPermissionType : Application\nPermission     : Member.Read.Group\n```\n\n----------------------------------------\n\nTITLE: Update Role Definition - Description - PowerShell\nDESCRIPTION: This example demonstrates how to update the description of an existing role definition using the Set-EntraBetaDirectoryRoleDefinition cmdlet. It first retrieves the role definition based on its display name and then updates the description using the cmdlet with the UnifiedRoleDefinitionId and Description parameters. It requires the RoleManagement.ReadWrite.Directory scope and a Microsoft Entra ID P1 or P2 license.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaDirectoryRoleDefinition.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory'\n$roleDefinition = Get-EntraBetaDirectoryRoleDefinition -Filter \"DisplayName eq '<Role-Definition-Name>'\"\nSet-EntraBetaDirectoryRoleDefinition -UnifiedRoleDefinitionId $roleDefinition.Id -Description 'MYROLEUPDATE1S'\n```\n\n----------------------------------------\n\nTITLE: Add-EntraGroupMember Syntax\nDESCRIPTION: The syntax for the Add-EntraGroupMember cmdlet, outlining the required parameters GroupId and MemberId, as well as optional parameters WhatIf and Confirm.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Add-EntraGroupMember.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-EntraGroupMember\n -GroupId <String>\n -MemberId <String>\n [-WhatIf]\n [-Confirm]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Connect with Certificate Thumbprint\nDESCRIPTION: Connects to Microsoft Entra ID using a certificate thumbprint for application authentication.  The TenantId and ApplicationId parameters must also be specified. This method is suitable for non-interactive authentication.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Connect-Entra.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n$connectParams = @{\n    TenantId = 'aaaabbbb-0000-cccc-1111-dddd2222eeee'\n    ApplicationId = '00001111-aaaa-2222-bbbb-3333cccc4444'\n    CertificateThumbprint = 'AA11BB22CC33DD44EE55FF66AA77BB88CC99DD00'\n}\n\nConnect-Entra @connectParams\n```\n\n----------------------------------------\n\nTITLE: Defining IsTranslateLinksInBodyEnabled Parameter\nDESCRIPTION: This YAML snippet defines the `-IsTranslateLinksInBodyEnabled` parameter, a boolean value for translating URLs in the body of the response. It's recommended to keep this parameter set to `No` unless hardcoded HTML links to other on-premises applications exist and custom domains are not used.  The parameter is optional.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplicationProxyApplication.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Boolean\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get DirSync errors command syntax - PowerShell\nDESCRIPTION: This snippet shows the basic syntax for the Get-EntraBetaDirectoryObjectOnPremisesProvisioningError cmdlet. It takes an optional TenantId parameter and supports common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirectoryObjectOnPremisesProvisioningError.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaDirectoryObjectOnPremisesProvisioningError\n [-TenantId <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Defining UsageLocation Parameter in YAML\nDESCRIPTION: This YAML snippet defines the UsageLocation parameter for a PowerShell cmdlet. It specifies the data type, parameter set, aliases, required status, position, default value, pipeline input, and wildcard character acceptance. It is a two-letter country or region code (ISO standard 3166).\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUser.md#_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Retrieve App Role Assignments of a Group - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve the application role assignments for a specific group using the `Get-EntraGroupAppRoleAssignment` cmdlet. It first connects to Entra with the required scope and then retrieves the group object before calling the cmdlet with the group's ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraGroupAppRoleAssignment.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\n$group = Get-EntraGroup -SearchString 'Contoso marketing'\nGet-EntraGroupAppRoleAssignment -GroupId $group.Id\n```\n\nLANGUAGE: powershell\nCODE:\n```\nObjectId                                    ResourceDisplayName                 PrincipalDisplayName\n--------                                    -------------------                 --------------------\nMSVrBV4APk--eAGnHqMKBLflsQG3rU1EmDFKvgra41I Microsoft Device Management Checkin Ask HR\nMSVrBV4APk--eAGnHqMKBExhQK4StEFHidLvUymzo4I ProvisioningPowerBi                 Ask HR\nMSVrBV4APk--eAGnHqMKBDtEqPRvu8xLqWHDSXUhoTE M365 License Manager                Ask HR\n```\n\n----------------------------------------\n\nTITLE: Top Parameter Definition in YAML\nDESCRIPTION: This YAML snippet defines the `-Top` parameter for a PowerShell cmdlet. It sets the data type to `System.Int32`, designates it as optional, and allows pipeline input by property name or value. The `Limit` alias is also specified.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplication.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Int32\nParameter Sets: GetQuery\nAliases: Limit\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Confirm Entra Domain Syntax (PowerShell)\nDESCRIPTION: Defines the syntax for the Confirm-EntraDomain cmdlet, specifying the required Name parameter and optional CrossCloudVerificationCode parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Confirm-EntraDomain.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConfirm-EntraDomain\n -Name <String>\n [-CrossCloudVerificationCode <CrossCloudVerificationCodeBody>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Update Identity Provider Client ID - PowerShell\nDESCRIPTION: This example demonstrates updating the client ID of an existing identity provider using the Set-EntraIdentityProvider cmdlet. It requires connecting to Entra ID with the IdentityProvider.ReadWrite.All scope. The -IdentityProviderBaseId specifies the identity provider to update, and the -ClientId parameter provides the new client ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraIdentityProvider.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'IdentityProvider.ReadWrite.All'\nSet-EntraIdentityProvider -IdentityProviderBaseId 'Google-OAuth' -ClientId 'NewClientID'\n```\n\n----------------------------------------\n\nTITLE: Get Application Proxy Application Syntax (PowerShell)\nDESCRIPTION: Defines the syntax for the Get-EntraBetaApplicationProxyApplication cmdlet. It requires the ApplicationId parameter and optionally accepts the Property parameter. It also supports CommonParameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationProxyApplication.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaApplicationProxyApplication\n -ApplicationId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - Top\nDESCRIPTION: This YAML snippet defines the `-Top` parameter for the `Get-EntraDeletedDevice` cmdlet. It is an Int32, optional and can be provided by PropertyName or Value. Limit is an alias for the same\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedDevice.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Int32\nParameter Sets: GetQuery\nAliases: Limit\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Retrieve Inactive Users - PowerShell\nDESCRIPTION: This example retrieves users who haven’t signed in within the past 10 days. It first connects to Entra with required scopes, then uses Get-EntraUserInactiveSignIn with the -Ago parameter set to 10 to find users without interactive sign-ins within that period.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserInactiveSignIn.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All','AuditLog.Read.All'\nGet-EntraUserInactiveSignIn -Ago 10\n```\n\n----------------------------------------\n\nTITLE: Assigning an Owner to a Service Principal\nDESCRIPTION: This example shows how to add an owner to a service principal using the `Add-EntraServicePrincipalOwner` cmdlet. It first retrieves the service principal and the user who will be the owner and then adds the user as an owner. It requires 'Application.ReadWrite.All' and 'Application.ReadWrite.OwnedBy' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-apps.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All', 'Application.ReadWrite.OwnedBy'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\n$owner = Get-EntraUser -UserId 'SawyerM@contoso.com'\nAdd-EntraServicePrincipalOwner -ServicePrincipalId $servicePrincipal.Id -OwnerId $owner.Id\n```\n\n----------------------------------------\n\nTITLE: Remove-EntraScopedRoleMembership Syntax - PowerShell\nDESCRIPTION: This code snippet displays the syntax for the `Remove-EntraScopedRoleMembership` cmdlet in PowerShell. It shows the required parameters `-AdministrativeUnitId` and `-ScopedRoleMembershipId` for removing a scoped role membership. This cmdlet removes the specified scoped role membership from the given administrative unit in Microsoft Entra ID. It also mentions the availability of common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraScopedRoleMembership.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraScopedRoleMembership\n -AdministrativeUnitId <String>\n -ScopedRoleMembershipId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Registered User of a Device - PowerShell\nDESCRIPTION: This example retrieves the registered user of a specific Microsoft Entra ID device using the `Get-EntraDeviceRegisteredUser` cmdlet. It first connects to Entra ID with the necessary scopes, retrieves the device object using `Get-EntraDevice`, and then uses the device ID to get the registered user. The output is formatted as a table showing specific properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeviceRegisteredUser.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\n$device = Get-EntraDevice -SearchString '<device-display-name>'\nGet-EntraDeviceRegisteredUser -DeviceId $device.Id |\nSelect-Object Id, displayName, UserPrincipalName, createdDateTime, userType, accountEnabled |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Defining External Authentication Type Parameter\nDESCRIPTION: This YAML snippet defines the `-ExternalAuthenticationType` parameter for a PowerShell cmdlet related to Microsoft Entra Application Proxy. It specifies the authentication method used before granting access to an application, with options for Microsoft Entra ID pre-authentication or pass-through.  The parameter is optional and accepts values of the `ExternalAuthenticationTypeEnum` type.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplicationProxyApplication.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: ExternalAuthenticationTypeEnum\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get First N Logs using Top Parameter in PowerShell\nDESCRIPTION: This example retrieves the first N audit logs from Microsoft Entra ID using the `Get-EntraBetaAuditDirectoryLog` cmdlet with the `-Top` parameter. The `-Limit` parameter can be used as an alias for `-Top`. This is useful for quickly inspecting the most recent audit events. Connect-Entra with the necessary scopes is a prerequisite.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAuditDirectoryLog.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All, Directory.Read.All'\nGet-EntraBetaAuditDirectoryLog -Top 1\n```\n\n----------------------------------------\n\nTITLE: Get User's Manager - PowerShell\nDESCRIPTION: This script retrieves and displays the manager of a specified user in Entra ID. It utilizes the `Get-EntraUserManager` cmdlet to fetch the manager's information and formats the output to show the manager's ID, display name, user principal name, creation date, account status, and user type.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-user.md#_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraUserManager -UserId 'SawyerM@contoso.com' |\n    Select-Object Id, displayName, userPrincipalName, createdDateTime, accountEnabled, userType |\n    Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get Audit Logs Between Dates - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve sign-in logs within a specific date range using the `Get-EntraBetaAuditSignInLog` cmdlet. It requires connecting to Entra ID with appropriate scopes. The `-Filter` parameter is used to specify the date range using OData filter syntax.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAuditSignInLog.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All','Directory.Read.All'\nGet-EntraBetaAuditSignInLog -Filter \"createdDateTime ge 2024-07-01T00:00:00Z and createdDateTime le 2024-07-14T23:59:59Z\"\n```\n\n----------------------------------------\n\nTITLE: Get Privileged Resources with GetQuery - PowerShell\nDESCRIPTION: Retrieves Microsoft Entra ID privileged resources using query parameters.  This syntax allows for filtering and limiting the results using parameters like ProviderId, Top, Filter, and Property. Common parameters are also supported. It requires a ProviderId and can optionally use Top, Filter and Property.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPrivilegedResource.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaPrivilegedResource\n -ProviderId <String>\n [-Top <Int32>]\n [-Filter <String>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get All User Memberships - Entra ID - PowerShell\nDESCRIPTION: This example shows how to retrieve all user memberships in Microsoft Entra ID for a specific user.  It connects to Entra ID with the User.Read scope, then utilizes the Get-EntraBetaUserMembership cmdlet with the -All switch to retrieve all memberships of the user identified by the UserId parameter. The resulting data is formatted for improved readability.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserMembership.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read'\nGet-EntraBetaUserMembership -UserId 'SawyerM@contoso.com' -All |\nSelect-Object Id, displayName, createdDateTime, '@odata.type' |\nFormat-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Create a new policy - New-EntraPolicy (PowerShell)\nDESCRIPTION: This example demonstrates how to create a new policy in Microsoft Entra ID using the `New-EntraPolicy` cmdlet.  It requires the `Policy.ReadWrite.ApplicationConfiguration` scope.  The policy is created with a specified definition, display name, and type.  The definition parameter takes an array of JSON strings.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraPolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ApplicationConfiguration'\n$definition = @('{\"HomeRealmDiscoveryPolicy\":{\"AlternateLoginIDLookup\":true, \"IncludedUserIds\":[\"UserID\"]}}')\nNew-EntraPolicy -Definition $definition -DisplayName 'NewPolicy' -Type 'HomeRealmDiscoveryPolicy'\n```\n\n----------------------------------------\n\nTITLE: Add User as Entra Group Owner with PowerShell\nDESCRIPTION: This PowerShell code adds a user as an owner to a Microsoft Entra group. It retrieves the group and user objects based on display name and User ID, respectively. Then, it uses the Add-EntraGroupOwner cmdlet to add the specified user as an owner of the group. It requires the Microsoft Entra PowerShell module and appropriate permissions to manage group ownership.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-groups.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\n$group = Get-EntraGroup -Filter \"displayName eq 'Contoso marketing'\"\n$owner = Get-EntraUser -UserId 'AdeleV@contoso.com'\nAdd-EntraGroupOwner -GroupId $group.Id -OwnerId $owner.Id\n```\n\n----------------------------------------\n\nTITLE: Retrieving certificate mapping from a certificate object - PowerShell\nDESCRIPTION: This PowerShell code retrieves a specific certificate mapping from a certificate object. It first defines a certificate as a string, converts it to a byte array, and then creates an X509Certificate2 object. The `Get-EntraUserCertificateUserIdsFromCertificate` cmdlet retrieves certificateUserIDs from the certificate object, specifying 'Subject' for CertificateMapping.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserCertificateUserIdsFromCertificate.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$text = \"-----BEGIN CERTIFICATE-----\\nMIIDiz...=\\n-----END CERTIFICATE-----\"\n$bytes = [System.Text.Encoding]::UTF8.GetBytes($text)\n$certificate = [System.Security.Cryptography.X509Certificates.X509Certificate2]::new($bytes)\nGet-EntraUserCertificateUserIdsFromCertificate -Certificate $certificate -CertificateMapping 'Subject'\n```\n\n----------------------------------------\n\nTITLE: Update Trust Framework Policy from Input File - PowerShell\nDESCRIPTION: This example updates a trust framework policy by reading the policy from an input file. It connects to Entra, and uses `Set-EntraBetaTrustFrameworkPolicy` with the `InputFilePath` parameter to read the policy and the `OutputFilePath` to write the results. The updated trust framework policy content is written to the specified output file.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaTrustFrameworkPolicy.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.TrustFramework'\n$params = @{\n    Id  = 'B2C_1A_signup_signin'\n    InputFilePath =  'C:\\InputPolicy.xml'\n    OutputFilePath = 'C:\\UpdatedPolicy.xml'\n}\nSet-EntraBetaTrustFrameworkPolicy @params\n```\n\n----------------------------------------\n\nTITLE: Create an Administrative Unit with Description - PowerShell\nDESCRIPTION: Demonstrates how to create a new administrative unit with both a display name and a description. It connects to Entra ID with the required scopes. The `New-EntraBetaAdministrativeUnit` cmdlet is used with the `-DisplayName` and `-Description` parameters to create the administrative unit. Requires the 'AdministrativeUnit.ReadWrite.All' scope. The output reflects the defined properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaAdministrativeUnit.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.ReadWrite.All'\nNew-EntraBetaAdministrativeUnit -DisplayName 'Pacific Administrative Unit' -Description 'Administrative Unit for Pacific region'\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nid                            : bbbbbbbb-1111-2222-3333-cccccccccccc\ndisplayName                   : Pacific Administrative Unit\ndescription                   : Administrative Unit for Pacific region\nisMemberManagementRestricted  :\nmembershipRule                :\nmembershipRuleProcessingState :\nmembershipType                :\nvisibility                    :\n```\n\n----------------------------------------\n\nTITLE: Service Principal Names Configuration - YAML\nDESCRIPTION: Defines the structure and properties for the `-ServicePrincipalNames` parameter in an Entra (Azure AD) PowerShell cmdlet. This parameter is used to specify an array of service principal names. This parameter is optional, accepts a list of strings, and does not support pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaServicePrincipal.md#_snippet_15\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Collections.Generic.List`1[System.String]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Assigning a Group to an Application Role - Output\nDESCRIPTION: This output shows the expected result when assigning a group of users to an application role in Microsoft Entra ID using `New-EntraBetaGroupAppRoleAssignment`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaGroupAppRoleAssignment.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nDeletedDateTime        Id                                          AppRoleId                            CreatedDateTime      PrincipalDisplayName PrincipalId\n---------------        --                                          ---------                            ---------------      -------------------- -----------\n                      AaBbCcDdEeFfGgHhIiJjKkLlMmNnOo1 00000000-0000-0000-0000-000000000000 3/13/2024 4:41:43 AM Contoso Team         aaaaaaaa-bbbb-cccc-1111-222222222222\n3/13/2024 4:45:00 AM  BbCcDdEeFfGgHhIiJjKkLlMmNnOoPp2 00000000-0000-0000-0000-000000000000 3/13/2024 4:45:00 AM Finance Group        bbbbbbbb-cccc-dddd-2222-333333333333\n```\n\n----------------------------------------\n\nTITLE: Get Top Users - EntraBetaUser PowerShell\nDESCRIPTION: This example demonstrates how to retrieve the top three users from Microsoft Entra ID. The `Connect-Entra` cmdlet is used to establish a connection with the required scopes, and `Get-EntraBetaUser` is used with the `-Top` parameter to limit the number of retrieved users. `-Limit` can also be used as an alias.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUser.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraBetaUser -Top 3\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Administrative Units (Search)\nDESCRIPTION: Retrieves deleted administrative units based on a search string.  Uses the SearchString parameter to perform a substring search on administrative unit properties.  Requires the Microsoft.Entra.Beta module. Returns a collection of administrative unit objects matching the search criteria.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedAdministrativeUnit.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaDeletedAdministrativeUnit\n [-SearchString <String>]\n [-All]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Connect to Microsoft Entra for User Management\nDESCRIPTION: Connects to Microsoft Entra with the 'User.ReadWrite.All' scope to manage user accounts.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-guest-users.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\n```\n\n----------------------------------------\n\nTITLE: Find All Entra Permissions - PowerShell\nDESCRIPTION: This snippet presents the syntax for using `Find-EntraPermission` to retrieve all permissions, optionally filtered by the `PermissionType`. The `-All` parameter indicates that all permissions should be returned. This can be used along with the `-Online` parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Find-EntraPermission.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nFind-EntraPermission\n [-PermissionType <String>]\n [-Online]\n [-All]\n [-ProgressAction <ActionPreference>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Retrieve Lifecycle Policy Object - PowerShell\nDESCRIPTION: Demonstrates how to retrieve a lifecycle policy object by its ID.  First, it connects to Entra ID using `Connect-Entra` with the 'Directory.Read.All' scope, then calls `Get-EntraBetaLifecyclePolicyGroup` with a specific GroupId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaLifecyclePolicyGroup.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\nGet-EntraBetaLifecyclePolicyGroup -GroupId 'bbbbbbbb-1111-2222-3333-cccccccccccc'\n```\n\n----------------------------------------\n\nTITLE: Update Commerce URL using Set-EntraPartnerInformation (PowerShell)\nDESCRIPTION: This code snippet demonstrates how to update the commerce URL for a partner using the Set-EntraPartnerInformation cmdlet. It requires connecting to Entra ID with appropriate permissions and setting the PartnerCommerceUrl.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraPartnerInformation.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.ReadWrite.All'\nSet-EntraPartnerInformation -PartnerCommerceUrl 'http://www.test1.com'\n```\n\n----------------------------------------\n\nTITLE: Get Attribute Set by ID with Get-EntraAttributeSet (PowerShell)\nDESCRIPTION: This example demonstrates how to retrieve a specific attribute set by its ID. It first connects to Entra ID using the 'CustomSecAttributeDefinition.ReadWrite.All' scope. It then uses the Get-EntraAttributeSet cmdlet with the -AttributeSetId parameter to specify the unique identifier of the attribute set to retrieve.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAttributeSet.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'CustomSecAttributeDefinition.ReadWrite.All'\nGet-EntraAttributeSet -AttributeSetId 'Testing'\n```\n\n----------------------------------------\n\nTITLE: Get top two deleted applications - PowerShell\nDESCRIPTION: Retrieves the top two deleted applications and displays specific properties (Id, DisplayName, AppId, DeletedDateTime, DeletionAgeInDays) in a formatted table. It requires the 'Application.Read.All' scope and uses the Connect-Entra cmdlet for authentication.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedApplication.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraDeletedApplication -Top 2 | Select-Object Id, DisplayName, AppId, DeletedDateTime, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get Role Settings with Top Limit - PowerShell\nDESCRIPTION: Retrieves a limited number of role settings (top 1 in this example) for a specific provider and resource using the Get-EntraBetaPrivilegedRoleSetting cmdlet with a filter and the -Top parameter. Requires the 'PrivilegedAccess.Read.AzureAD', 'PrivilegedAccess.Read.AzureResources' and 'PrivilegedAccess.Read.AzureADGroup' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPrivilegedRoleSetting.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'PrivilegedAccess.Read.AzureAD', 'PrivilegedAccess.Read.AzureResources' 'PrivilegedAccess.Read.AzureADGroup'\n$params = @{\n    ProviderId = 'aadRoles'\n    Filter = \"ResourceId eq 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb'\"\n}\nGet-EntraBetaPrivilegedRoleSetting @params -Top 1\n```\n\n----------------------------------------\n\nTITLE: Get User Groups (Example 1)\nDESCRIPTION: This example demonstrates how to retrieve a list of groups a specific user belongs to. It first connects to Entra ID with the required scopes and then calls Get-EntraUserGroup with the user's email address.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserGroup.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All', 'Group.Read.All', 'Directory.Read.All'\nGet-EntraUserGroup -UserId 'SawyerM@contoso.com'\n```\n\nLANGUAGE: powershell\nCODE:\n```\nDisplayName                Id                                   MailNickname        Description               GroupTypes\n-----------                --                                   ------------        -----------               ----------\nContoso Marketing          hhhhhhhh-3333-5555-3333-qqqqqqqqqqqq ContosoMarketing    Contoso Marketing         {Unified}\nMark 8 Project Team        pppppppp-4444-0000-8888-yyyyyyyyyyyy  Mark8ProjectTeam    Mark 8 Project Team       {Unified}\nLeadership                 tttttttt-0000-3333-9999-mmmmmmmmmmmm  Leadership          Leadership                {Unified}\nSales and Marketing        qqqqqqqq-5555-0000-1111-hhhhhhhhhhhh  SalesAndMarketing   Sales and Marketing       {Unified}\nRetail                     aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb  Retail              Retail                    {Unified}\n```\n\n----------------------------------------\n\nTITLE: Get all audit logs using Get-EntraBetaAuditDirectoryLog in PowerShell\nDESCRIPTION: This code snippet demonstrates how to retrieve all audit logs from Microsoft Entra ID using the `Get-EntraBetaAuditDirectoryLog` cmdlet with the `-All` parameter. Before running the cmdlet, it's necessary to connect to Entra ID using `Connect-Entra` and specifying the required scopes: `AuditLog.Read.All` and `Directory.Read.All`. This command returns a comprehensive list of audit log entries.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAuditDirectoryLog.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All, Directory.Read.All'\nGet-EntraBetaAuditDirectoryLog -All\n```\n\n----------------------------------------\n\nTITLE: Example Output (PowerShell)\nDESCRIPTION: Shows the expected output from the Get-EntraBetaPasswordSingleSignOnCredential cmdlet. Only the Id is returned.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPasswordSingleSignOnCredential.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nId\n--\ncccccccc-2222-3333-4444-dddddddddddd\n```\n\n----------------------------------------\n\nTITLE: ClientId Parameter (YAML)\nDESCRIPTION: YAML definition for the `-ClientId` parameter of the `Connect-Entra` cmdlet. Specifies the application ID of the service principal.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Connect-Entra.md#_snippet_17\n\nLANGUAGE: YAML\nCODE:\n```\nType:  System.String\nParameter Sets: UserParameterSet, IdentityParameterSet, AppCertificateParameterSet\nAliases: AppId, ApplicationId\n\nRequired: False\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Viewing Available License Plans (PowerShell)\nDESCRIPTION: This PowerShell snippet retrieves and displays summary information about available license plans and available licenses for each plan in the tenant.  It connects to Entra using required scopes and utilizes the `Get-EntraSubscribedSku` cmdlet. The output is formatted to show `SkuPartNumber` and `ConsumedUnits` properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/how-to-manage-user-licenses.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All','Organization.Read.All'\nGet-EntraSubscribedSku | Select-Object -Property Sku*, ConsumedUnits -ExpandProperty PrepaidUnits\n```\n\n----------------------------------------\n\nTITLE: Select-EntraGroupIdsServicePrincipalIsMemberOf Syntax - PowerShell\nDESCRIPTION: This defines the syntax for the `Select-EntraGroupIdsServicePrincipalIsMemberOf` cmdlet. It takes a ServicePrincipalId of type String and a GroupIdsForMembershipCheck object as input. The cmdlet selects the groups from GroupIdsForMembershipCheck in which the specified service principal is a member.\n\nDependencies: Microsoft.Entra module\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Select-EntraGroupIdsServicePrincipalIsMemberOf.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSelect-EntraGroupIdsServicePrincipalIsMemberOf\n -ServicePrincipalId <String>\n -GroupIdsForMembershipCheck <GroupIdsForMembershipCheck>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Delegated Permission Classification By Id - PowerShell\nDESCRIPTION: This example retrieves a specific delegated permission classification by its ID. It connects to Entra ID, retrieves a service principal, filters for a specific permission classification by PermissionName, and then retrieves the classification object using its ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalDelegatedPermissionClassification.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\n$permissionClassification = Get-EntraBetaServicePrincipalDelegatedPermissionClassification -ServicePrincipalId $servicePrincipal.Id -Filter \"PermissionName eq 'Sites.Read.All'\"\nGet-EntraBetaServicePrincipalDelegatedPermissionClassification -ServicePrincipalId $servicePrincipal.Id -Id $permissionClassification.Id\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                      Classification PermissionId                         PermissionName\n--                      -------------- ------------                         --------------\nbbbbbbbb-7777-8888-9999-cccccccccccc low            eeeeeeee-4444-5555-6666-ffffffffffff Sites.Read.All\n```\n\n----------------------------------------\n\nTITLE: Set User Password Example\nDESCRIPTION: This example sets a user's password using the Set-EntraBetaUserPassword cmdlet. It connects to Entra ID, converts a plaintext password to a secure string, and then sets the password for the specified user.  Requires the 'Directory.AccessAsUser.All' scope. The -UserId parameter specifies the user's ID, and the -Password parameter specifies the secure password.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUserPassword.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.AccessAsUser.All'\n$newPassword = '<strong-password>'\n$securePassword = ConvertTo-SecureString $newPassword -AsPlainText -Force\nSet-EntraBetaUserPassword -UserId 'SawyerM@contoso.com' -Password $securePassword\n```\n\n----------------------------------------\n\nTITLE: GroupId Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the `-GroupId` parameter for the `Get-EntraBetaGroupPermissionGrant` cmdlet.  It specifies the parameter's type as `System.String`, indicates that it's a required parameter, and allows input via property name or value.  It also notes that wildcard characters are not accepted.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaGroupPermissionGrant.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: Id\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Top N Service Principal Owners\nDESCRIPTION: This example demonstrates how to retrieve the top N owners (in this case, two) of a service principal using the Get-EntraBetaServicePrincipalOwner cmdlet with the -Top parameter. It connects to Entra ID, retrieves a service principal by display name, and then retrieves the specified number of owners, selecting specific properties for the output.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalOwner.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraBetaServicePrincipalOwner -ServicePrincipalId $servicePrincipal.Id -Top 2 | Select-Object Id, userPrincipalName, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Create a Basic Administrative Unit - PowerShell\nDESCRIPTION: Demonstrates how to create a new administrative unit with a specified display name. The code first connects to Entra ID with the necessary scopes and then utilizes the `New-EntraBetaAdministrativeUnit` cmdlet to create the unit. Requires the 'AdministrativeUnit.ReadWrite.All' scope. The output shows the properties of the created unit.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaAdministrativeUnit.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.ReadWrite.All'\nNew-EntraBetaAdministrativeUnit -DisplayName 'TestAU'\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nid                            : bbbbbbbb-1111-2222-3333-cccccccccccc\ndisplayName                   : TestAU\ndescription                   :\nisMemberManagementRestricted  :\nmembershipRule                :\nmembershipRuleProcessingState :\nmembershipType                :\nvisibility                    :\n```\n\n----------------------------------------\n\nTITLE: Tags Parameter Configuration - YAML\nDESCRIPTION: Defines the configuration for the `-Tags` parameter. This parameter accepts a list of strings representing tags, is not required, and does not accept pipeline input or wildcard characters. Specific tag values may influence the visibility of the service principal in the Azure admin portal.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraServicePrincipal.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[System.String]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Set Application Proxy Connector Group - PowerShell\nDESCRIPTION: This example demonstrates how to reassign an application proxy connector to a different connector group using the Set-EntraBetaApplicationProxyConnector cmdlet.  It first connects to Entra using Connect-Entra with the necessary scopes. The OnPremisesPublishingProfileId parameter specifies the connector ID and the ConnectorGroupId parameter specifies the application proxy connector group ID. The cmdlet takes the parameters from the $params hashtable.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplicationProxyConnector.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\n$params = @{\n    OnPremisesPublishingProfileId = 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb' \n    ConnectorGroupId = 'bbbbbbbb-1111-2222-3333-cccccccccccc'\n}\nSet-EntraBetaApplicationProxyConnector @params\n```\n\n----------------------------------------\n\nTITLE: Get Resource by Filter Example - PowerShell\nDESCRIPTION: This example retrieves a resource for the 'aadRoles' provider using a filter. It connects to Entra ID with necessary scopes and then uses the Get-EntraBetaPrivilegedResource cmdlet with the ProviderId and Filter parameters specified in a hashtable. It relies on Entra ID connection and takes ProviderId and Filter as input.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPrivilegedResource.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'PrivilegedAccess.Read.AzureAD', 'PrivilegedAccess.Read.AzureResources' 'PrivilegedAccess.Read.AzureADGroup'\n$params = @{\n    ProviderId = 'aadRoles'\n    Filter = \"DisplayName eq 'AdminUnitName'\"\n}\nGet-EntraBetaPrivilegedResource @params\n```\n\n----------------------------------------\n\nTITLE: Remove Application Key Example - PowerShell\nDESCRIPTION: Shows how to remove a key credential from an application using the Remove-EntraApplicationKey cmdlet. It assumes a connection to Entra ID has been established using Connect-Entra with appropriate scopes.  It uses Get-EntraApplication to retrieve the application and then removes the specified key.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraApplicationKey.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Directory.ReadWrite.All'\n$application = Get-EntraApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\nRemove-EntraApplicationKey -ApplicationId $application.Id -KeyId 'aaaaaaaa-0b0b-1c1c-2d2d-333333333333' -Proof '{token}'\n```\n\n----------------------------------------\n\nTITLE: Get All User-Created Objects - PowerShell\nDESCRIPTION: This example retrieves all objects created by the specified user, making use of the -All parameter. It connects to Entra with the necessary scopes, retrieves the objects, and selects the Id, DisplayName, and @odata.type properties. The -UserId parameter specifies the object Id of a user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserCreatedObject.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read','User.Read.All'\nGet-EntraBetaUserCreatedObject -UserId 'SawyerM@contoso.com' -All | Select-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Remove Lifecycle Policy Group - Example (PowerShell)\nDESCRIPTION: This example demonstrates how to remove a group from a lifecycle policy in Microsoft Entra ID. It first connects to Entra ID, retrieves a group and its associated lifecycle policy, and then removes the group from the policy using its IDs.  Requires the 'Directory.ReadWrite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaLifecyclePolicyGroup.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\n$group = Get-EntraBetaGroup -Filter \"DisplayName eq 'Office365 group'\"\n$policy = Get-EntraBetaLifecyclePolicyGroup -Id $group.Id\nRemove-EntraBetaLifecyclePolicyGroup -GroupLifecyclePolicyId $policy.Id -GroupId $group.Id\n```\n\nLANGUAGE: powershell\nCODE:\n```\nValue\n-----\nTrue\n```\n\n----------------------------------------\n\nTITLE: GroupLifecyclePolicyId Parameter - YAML\nDESCRIPTION: This YAML snippet describes the `-GroupLifecyclePolicyId` parameter for the `Get-EntraBetaGroupLifecyclePolicy` cmdlet. It specifies that the parameter is of type `System.String`, is required for the `GetById` parameter set, and accepts pipeline input by property name or value. This parameter is used to specify the ID of a groupLifecyclePolicies object in Microsoft Entra ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaGroupLifecyclePolicy.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: GetById\nAliases: Id\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Connect to Entra ID with Certificate Chain - PowerShell\nDESCRIPTION: This update adds the `-Add SendCertificateChain` parameter to the `Connect-Entra` command in PowerShell.  This allows users to connect to Microsoft Entra ID using a certificate chain. The code snippet represents only the parameter, implying its usage within the Connect-Entra command.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n-Add SendCertificateChain to `Connect-Entra`\n```\n\n----------------------------------------\n\nTITLE: Get-EntraDeletedDevice Syntax - GetQuery\nDESCRIPTION: This defines the syntax for the Get-EntraDeletedDevice cmdlet when using the GetQuery parameter set.  It shows the available parameters, including Filter, All, Top, and Property.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedDevice.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraDeletedDevice\n [-Filter <String>]\n [-All]\n [-Top <Int32>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Top N Audit Sign-in Logs - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve the first 'N' audit logs of sign-ins using the `Get-EntraBetaAuditSignInLog` cmdlet. It requires connecting to Entra ID with appropriate scopes. The `-Top` parameter specifies the maximum number of records to return.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAuditSignInLog.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All','Directory.Read.All'\nGet-EntraBetaAuditSignInLog -Top 2\n```\n\n----------------------------------------\n\nTITLE: Filter Role Assignments by Principal ID - PowerShell\nDESCRIPTION: Retrieves role assignments filtered by a specific principal ID (user ID). It first retrieves a user's ID and then uses it to filter the role assignments. It connects to Entra ID using the specified scopes and uses the `-Filter` parameter to narrow down the results to only those associated with the principal ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirectoryRoleAssignment.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory', 'EntitlementManagement.Read.All'\n$userId = (Get-EntraBetaUser -UserId 'SawyerM@contoso.com').Id\nGet-EntraBetaDirectoryRoleAssignment -Filter \"principalId eq '$userId'\"\n```\n\n----------------------------------------\n\nTITLE: Get All Group App Role Assignments\nDESCRIPTION: This example retrieves all application role assignments for a given group. The -All parameter ensures that all assignments are returned, regardless of the default limit. The script connects to Entra ID, retrieves the group, and then fetches all role assignments associated with it.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaGroupAppRoleAssignment.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\n$group = Get-EntraBetaGroup -SearchString 'Contoso marketing'\nGet-EntraBetaGroupAppRoleAssignment -GroupId $group.Id -All\n```\n\n----------------------------------------\n\nTITLE: Get Top Memberships of a Contact - PowerShell\nDESCRIPTION: This example demonstrates retrieving the top two memberships of a contact using the -Top parameter with the Get-EntraContactMembership cmdlet. It connects to Entra, retrieves the contact, and specifies -Top 2 to limit the results to the first two memberships.  -Limit can also be used as an alias.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraContactMembership.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'OrgContact.Read.All'\n$contact = Get-EntraContact -Filter \"displayName eq 'Contoso Contact'\"\nGet-EntraContactMembership -OrgContactId $contact.Id -Top 2 |\nSelect-Object Id, DisplayName, '@odata.type', SecurityEnabled | Format-Table -AutoSize\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                   displayName   @odata.type            securityEnabled\n--                                   -----------   -----------            ---------------\nffffffff-5555-6666-7777-aaaaaaaaaaaa All Employees #microsoft.graph.group           False\n```\n\n----------------------------------------\n\nTITLE: Get Permission Grant Condition Sets (Included)\nDESCRIPTION: This example retrieves all permission grant condition sets that are included in a specified permission grant policy. It first connects to Entra ID with the required scope, retrieves the permission grant policy by its ID, and then uses Get-EntraBetaPermissionGrantConditionSet to filter and get the condition sets.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPermissionGrantConditionSet.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.PermissionGrant'\n$permissionGrantPolicy = Get-EntraBetaPermissionGrantPolicy | Where-Object {$_.Id -eq 'my-custom-consent-policy'}\nGet-EntraBetaPermissionGrantConditionSet -PolicyId $permissionGrantPolicy.Id -ConditionSetType 'includes'\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId                                   CertifiedClientApplicationsOnly ClientApplicationIds                                                         ClientApplicationPublisherIds          ClientApplicationTenantIds\n--                                   ------------------------------- --------------------                                                         -----------------------------          --------------------\naaaaaaaa-0000-1111-2222-bbbbbbbbbbbb False                           {33334444-dddd-5555-eeee-6666ffff7777} {d5aec55f-2d12-4442-8d2f-ccca95d4390e} {aaaabbbb-0000-cccc-1111-dddd2222eeee}\n```\n\n----------------------------------------\n\nTITLE: Retrieve all contact objects in the directory - PowerShell\nDESCRIPTION: This example retrieves all contact objects from the Microsoft Entra directory.  It first connects to Entra ID with the 'OrgContact.Read.All' scope. Then, it uses the `Get-EntraContact` cmdlet without any parameters to retrieve all contacts. The output shows the DisplayName, Id, Mail, and MailNickname of each contact.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraContact.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'OrgContact.Read.All'\nGet-EntraContact\n```\n\n----------------------------------------\n\nTITLE: Get App Proxy Apps - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all app proxy apps by filtering based on tags. It connects to Entra ID and uses `Get-EntraBetaServicePrincipal` with a filter to select service principals that have the 'WindowsAzureActiveDirectoryOnPremApp' tag. The output displays the properties of the retrieved app proxy apps.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipal.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraBetaServicePrincipal -Filter \"tags/Any(x: x eq 'WindowsAzureActiveDirectoryOnPremApp')\"\n```\n\n----------------------------------------\n\nTITLE: Get Group Owner by ID - EntraBeta PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a specific group's owner by providing the group's ID. It connects to Entra ID, retrieves the group object, and then uses Get-EntraBetaGroupOwner to fetch the owner. Finally, it selects and displays the ID, DisplayName, and @odata.type properties of the owner.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaGroupOwner.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All'\n$group = Get-EntraBetaGroup -Filter \"DisplayName eq 'Sales and Marketing'\"\nGet-EntraBetaGroup -GroupId $group.Id | Get-EntraBetaGroupOwner | Select-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Creating a basic permission grant condition set\nDESCRIPTION: This example creates a basic permission grant condition set in an existing policy using New-EntraBetaPermissionGrantConditionSet. It requires connecting to Entra ID with the 'Policy.ReadWrite.PermissionGrant' scope and retrieves a permission grant policy before creating the condition set. The output shows the properties of the created condition set.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaPermissionGrantConditionSet.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.PermissionGrant'\n$permissionGrantPolicy = Get-EntraBetaPermissionGrantPolicy | Where-Object {$_.Id -eq 'my-custom-consent-policy'}\nNew-EntraBetaPermissionGrantConditionSet -PolicyId $permissionGrantPolicy.Id -ConditionSetType 'includes' -PermissionType 'delegated'\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId                                   CertifiedClientApplicationsOnly ClientApplicationIds ClientApplicationPublisherIds ClientApplicationTenantIds ClientApplicationsFromVerifiedPublisherOnly PermissionClassification\n--                                   ------------------------------- -------------------- ----------------------------- -------------------------- ------------------------------------------- -------------------\naaaa0000-bb11-2222-33cc-444444dddddd False                           {all}                {all}                         {all}                      False                                       all                                  all                      delegated      {all}\n```\n\n----------------------------------------\n\nTITLE: Update Device Alternative Security ID - PowerShell\nDESCRIPTION: This example demonstrates how to update the alternative security ID of a device using the Set-EntraDevice cmdlet.  It creates a new AlternativeSecurityId object, populates its properties, retrieves the device, and then updates the device's AlternativeSecurityIds property.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraDevice.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.AccessAsUser.All', 'Device.ReadWrite.All'\n$newId = New-Object Microsoft.Open.AzureAD.Model.AlternativeSecurityId\n$newId.Key = [System.Text.Encoding]::UTF8.GetBytes('test')\n$newId.type = 2\n$device = Get-EntraDevice -Filter \"DisplayName eq 'Woodgrove Desktop'\"\nSet-EntraDevice -DeviceObjectId $device.ObjectId -AlternativeSecurityIds $newId\n```\n\n----------------------------------------\n\nTITLE: Get-EntraBetaGroupLifecyclePolicy Syntax - PowerShell\nDESCRIPTION: These code snippets show the syntax for the Get-EntraBetaGroupLifecyclePolicy cmdlet.  There are two ways to invoke the cmdlet: retrieving all policies, or retrieving a specific policy by its ID. Both syntax variations optionally allow specifying properties to return via the `-Property` parameter. The cmdlet supports common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaGroupLifecyclePolicy.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaGroupLifecyclePolicy\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaGroupLifecyclePolicy\n -GroupLifecyclePolicyId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get All Service Principal Owners\nDESCRIPTION: This example demonstrates how to retrieve all owners of a service principal using the Get-EntraBetaServicePrincipalOwner cmdlet with the -All parameter. It connects to Entra ID, retrieves a service principal by display name, and then retrieves all owners, selecting specific properties for the output.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalOwner.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraBetaServicePrincipalOwner -ServicePrincipalId $servicePrincipal.Id -All | Select-Object Id, userPrincipalName, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Enabling compatibility mode with aliases\nDESCRIPTION: This snippet shows how to import the Applications module, connect to Entra ID using specified scopes (replacing Connect-AzureAD), enable AzureAD cmdlet aliasing, and then retrieve a limited set of applications.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/migration-guide.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-Module -Name Microsoft.Entra.Applications\nConnect-Entra -Scopes 'Application.Read.All' #Replaces Connect-AzureAD for auth\nEnable-EntraAzureADAlias #enable aliasing\nGet-AzureADApplication -Top 2\n```\n\n----------------------------------------\n\nTITLE: Update Role Definition Description - PowerShell\nDESCRIPTION: This snippet updates the description of an existing Microsoft Entra role definition.  It begins by connecting to Entra ID with the necessary scopes. Then, it retrieves the target role definition using its display name and updates its description with `Set-EntraDirectoryRoleDefinition`.  It also requires the 'RoleManagement.ReadWrite.Directory' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraDirectoryRoleDefinition.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory'\n$roleDefinition = Get-EntraDirectoryRoleDefinition -Filter \"DisplayName eq '<Role-Definition-Name>'\"\nSet-EntraDirectoryRoleDefinition -UnifiedRoleDefinitionId $roleDefinition.Id -Description 'MYROLEUPDATE1S'\n```\n\n----------------------------------------\n\nTITLE: Get Specific DirSync Feature Status - PowerShell\nDESCRIPTION: This example retrieves the status of a specific directory synchronization feature, 'PasswordSync'.  It first connects to Entra ID using the required scope and then executes the `Get-EntraBetaDirSyncFeature` cmdlet with the `-Feature` parameter set to 'PasswordSync'. The output shows the boolean status of the PasswordSync feature.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirSyncfeature.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'OnPremDirectorySynchronization.Read.All'\nGet-EntraBetaDirSyncFeature -Feature 'PasswordSync'\n```\n\n----------------------------------------\n\nTITLE: Get All Administrative Units Using -All Parameter - PowerShell\nDESCRIPTION: This example shows how to retrieve all administrative units using the `-All` parameter, which ensures all pages are listed. It requires the 'AdministrativeUnit.Read.All' scope. The output presents properties like Id, Description, DisplayName, and Visibility for each unit.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAdministrativeUnit.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.Read.All'\nGet-EntraAdministrativeUnit -All\n```\n\n----------------------------------------\n\nTITLE: Find All Deleted Administrative Units - PowerShell\nDESCRIPTION: This snippet retrieves all soft-deleted administrative units in Microsoft Entra ID. It connects to Entra ID with the 'AdministrativeUnit.Read.All' scope and uses the 'Get-EntraDeletedAdministrativeUnit' cmdlet with the '-All' parameter to retrieve all deleted administrative units. The results are then formatted into a list using 'Format-List'.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/recover-deleted-data.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.Read.All'\nGet-EntraDeletedAdministrativeUnit -All | Format-List\n```\n\n----------------------------------------\n\nTITLE: Update Authorization Policy - PowerShell\nDESCRIPTION: This example demonstrates how to update a Microsoft Entra ID authorization policy using the Set-EntraAuthorizationPolicy cmdlet. It sets various parameters such as DisplayName, Description, BlockMsolPowerShell, AllowedToUseSSPR, AllowEmailVerifiedUsersToJoinOrganization, and AllowedToSignUpEmailBasedSubscriptions. Requires 'Policy.ReadWrite.Authorization' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraAuthorizationPolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.Authorization'\n$params = @{\n    DisplayName                               = 'Updated displayName'\n    Description                               = 'Updated Description'\n    BlockMsolPowerShell                       = $true\n    AllowedToUseSSPR                          = $false\n    AllowEmailVerifiedUsersToJoinOrganization = $true\n    AllowedToSignUpEmailBasedSubscriptions    = $true\n}\n\nSet-EntraAuthorizationPolicy @params\n```\n\n----------------------------------------\n\nTITLE: Connect to Entra ID with AppRole Scopes - PowerShell\nDESCRIPTION: This command connects to Microsoft Entra ID using specific scopes for managing application roles. `Application.ReadWrite.All` enables reading and writing of application properties and `AppRoleAssignment.ReadWrite.All` enables management of app role assignments. This connection must be established before granting or revoking application permissions.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/how-to-grant-revoke-api-permissions.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes \"Application.ReadWrite.All\", \"AppRoleAssignment.ReadWrite.All\"\n```\n\n----------------------------------------\n\nTITLE: Remove Group Member Syntax - PowerShell\nDESCRIPTION: This section displays the syntax for using the Remove-EntraGroupMember cmdlet in PowerShell. It requires the -GroupId and -MemberId parameters to identify the group and member to be removed, respectively. It also supports common PowerShell parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraGroupMember.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraGroupMember\n -GroupId <String>\n -MemberId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Retrieve Subscription SKU and Status - PowerShell\nDESCRIPTION: This example shows how to retrieve specific properties (skuPartNumber and Status) of subscriptions. It connects to Entra ID using the 'Organization.Read.All' scope and uses the Get-EntraBetaSubscription cmdlet with the -Property parameter to specify the properties to retrieve. The output is then piped to Select-Object to display only the selected properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaSubscription.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All'\nGet-EntraBetaSubscription -Property skuPartNumber, Status | Select-Object skuPartNumber, Status\n```\n\n----------------------------------------\n\nTITLE: Get OAuth2 Permission Grants Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Get-EntraOAuth2PermissionGrant cmdlet. It includes parameters for retrieving all grants, specifying the number of records to return, and selecting specific properties. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraOAuth2PermissionGrant.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraOAuth2PermissionGrant\n [-All]\n [-Top <Int32>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Property Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the `-Property` parameter for the `Get-EntraBetaGroupPermissionGrant` cmdlet. It specifies the parameter's type as `System.String[]`, indicates that it is an optional parameter, and that wildcard characters are not accepted.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaGroupPermissionGrant.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get All Custom Security Attribute Definitions Example\nDESCRIPTION: This example demonstrates how to retrieve all custom security attribute definitions using the `Get-EntraBetaCustomSecurityAttributeDefinition` cmdlet after connecting to Entra ID with the required scopes. It returns a list of attribute definitions with their properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaCustomSecurityAttributeDefinition.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'CustomSecAttributeDefinition.Read.All, CustomSecAttributeDefinition.ReadWrite.All'\nGet-EntraBetaCustomSecurityAttributeDefinition\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId                                      AttributeSet          Description                         IsCollection IsSearchable Name                             Status     Type    UsePreDefinedValuesOnly\n--                                      ------------          -----------                         ------------ ------------ ----                             ------     ----    -----------------------\nEngineering_newvalue                    Engineering           New Eng Value          True         True         NewValue                         Available  String  False\nEngineering_ProjectDate                 Engineering           Target completion date              False        True         ProjectDate                      Available  String  False\n```\n\n----------------------------------------\n\nTITLE: Retrieve all contact objects PowerShell\nDESCRIPTION: This example retrieves all contact objects in the directory. It uses the `Get-EntraBetaContact` cmdlet without any filters to retrieve all contact objects from Microsoft Entra ID.  It connects to Entra ID using `Connect-Entra` with the 'OrgContact.Read.All' scope and retrieves all contact object details.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaContact.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'OrgContact.Read.All'\nGet-EntraBetaContact\n```\n\n----------------------------------------\n\nTITLE: Retrieving Private Access Application by Object ID in PowerShell\nDESCRIPTION: This example shows how to retrieve a specific Private Access application by its object ID. It first connects to Entra ID with required scopes, finds an application with a specific display name, and then uses its ID to retrieve the application details using the Get-EntraBetaPrivateAccessApplication cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPrivateAccessApplication.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'NetworkAccessPolicy.ReadWrite.All', 'Application.ReadWrite.All', 'NetworkAccess.ReadWrite.All'\n$application = Get-EntraBetaPrivateAccessApplication | Where-Object {$_.displayName -eq 'Finance team file share'}\nGet-EntraBetaPrivateAccessApplication -ApplicationId $application.Id\n```\n\n----------------------------------------\n\nTITLE: Get User Sponsors - PowerShell\nDESCRIPTION: This example retrieves all sponsors for a specific user. It connects to Entra ID with the 'User.Read.All' scope, then uses Get-EntraUserSponsor to fetch the sponsors, selects specific properties, and formats the output as a table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserSponsor.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraUserSponsor -UserId 'SawyerM@contoso.com' -All |\nSelect-Object Id, DisplayName, '@odata.type', CreatedDateTime | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Search Deleted Service Principals by String - PowerShell\nDESCRIPTION: This PowerShell script retrieves deleted service principals based on a search string using the `-SearchString` parameter. It connects to Entra ID with necessary scopes. The `SearchString` will search against the DisplayName property.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedServicePrincipal.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraDeletedServicePrincipal -SearchString 'Contoso Marketing' | Select-Object Id, DisplayName, AppId, DeletedDateTime, DeletionAgeInDays, ServicePrincipalType | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get Delegated Permission Classifications List - PowerShell\nDESCRIPTION: This example retrieves all delegated permission classifications for a specific service principal.  It first connects to Entra ID with required scopes, retrieves the service principal by its display name, and then uses Get-EntraBetaServicePrincipalDelegatedPermissionClassification to get the classifications using the service principal's ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalDelegatedPermissionClassification.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraBetaServicePrincipalDelegatedPermissionClassification -ServicePrincipalId $servicePrincipal.Id\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                      Classification PermissionId                         PermissionName\n--                      -------------- ------------                         --------------\nbbbbbbbb-7777-8888-9999-cccccccccccc low            eeeeeeee-4444-5555-6666-ffffffffffff Sites.Read.All\ncccccccc-8888-9999-0000-dddddddddddd low            dddd3333-ee44-5555-66ff-777777aaaaaa profile\n```\n\n----------------------------------------\n\nTITLE: Get Top Users - Entra ID - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve the top three users from Microsoft Entra ID. It requires connecting to Entra ID with the 'User.Read.All' scope. The output displays the DisplayName, Id, Mail, and UserPrincipalName of the retrieved users.  The `-Top` parameter specifies the number of users to retrieve.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUser.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraUser -Top 3\n```\n\n----------------------------------------\n\nTITLE: Retrieve Microsoft 365 (Unified) groups - PowerShell\nDESCRIPTION: This PowerShell snippet retrieves Microsoft 365 (Unified) groups from Microsoft Entra ID. It connects to Entra ID with the 'GroupMember.Read.All' scope and uses Get-EntraGroup with a filter to retrieve groups where the groupTypes property includes 'Unified'. The `-Top` parameter limits the number of returned groups.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraGroup.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All'\nGet-EntraGroup -Filter \"groupTypes/any(g:g eq 'Unified')\" -Top 4\n```\n\n----------------------------------------\n\nTITLE: Defining AgeGroup Parameter in YAML\nDESCRIPTION: This YAML snippet defines the AgeGroup parameter for a PowerShell cmdlet. It specifies the data type, parameter set, aliases, required status, position, default value, pipeline input, and wildcard character acceptance. It's used to determine the legal age group of the user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUser.md#_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Create Country Named Location Policy - PowerShell\nDESCRIPTION: This example shows how to create a new country named location policy in Microsoft Entra ID using the New-EntraBetaNamedLocationPolicy cmdlet.  It connects to Entra ID, and then uses the cmdlet to define the country named location policy specifying the country and whether to include unknown countries and regions.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaNamedLocationPolicy.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ConditionalAccess'\n$type = '#microsoft.graph.countryNamedLocation'\nNew-EntraBetaNamedLocationPolicy -OdataType $type -DisplayName 'Country named location policy' -CountriesAndRegions 'IN' -IncludeUnknownCountriesAndRegions $false\n```\n\n----------------------------------------\n\nTITLE: Remove Owner from Service Principal Example - PowerShell\nDESCRIPTION: This example demonstrates how to remove a specific owner from a service principal. It connects to Entra ID, retrieves the service principal and owner IDs, and then removes the owner using Remove-EntraBetaServicePrincipalOwner.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaServicePrincipalOwner.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\n$ownership = Get-EntraBetaServicePrincipalOwner -ServicePrincipalId $servicePrincipal.Id | Select-Object Id, userPrincipalName, DisplayName, '@odata.type'\n$owner = $ownership | Where-Object {$_.userPrincipalName -eq 'SawyerM@Contoso.com' }\nRemove-EntraBetaServicePrincipalOwner -ServicePrincipalId $servicePrincipal.Id -OwnerId $owner.Id\n```\n\n----------------------------------------\n\nTITLE: Get Service Principal Owners\nDESCRIPTION: This example demonstrates how to retrieve the owners of a service principal using the Get-EntraBetaServicePrincipalOwner cmdlet. It first connects to Entra ID, retrieves a service principal by display name, and then gets the owners of the service principal using its ID, selecting specific properties for the output.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalOwner.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraBetaServicePrincipalOwner -ServicePrincipalId $servicePrincipal.Id | Select-Object Id, userPrincipalName, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Remove Administrative Unit by ID - PowerShell\nDESCRIPTION: Demonstrates removing an administrative unit by specifying its ID. It first connects to Entra with the necessary scopes, retrieves the administrative unit by display name, and then removes it using the AdministrativeUnitId parameter. Replace '<administrative-unit-display-name>' with the actual display name.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaAdministrativeUnit.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.ReadWrite.All'\n$administrativeUnit = Get-EntraBetaAdministrativeUnit -Filter \"DisplayName eq '<administrative-unit-display-name>'\"\nRemove-EntraBetaAdministrativeUnit -AdministrativeUnitId $administrativeUnit.Id\n```\n\n----------------------------------------\n\nTITLE: Get user's registered authentication methods with filtering\nDESCRIPTION: Demonstrates retrieving user registration details with filtering based on the `userType` property. It connects to Entra, then uses `Get-EntraBetaAuthenticationMethodUserRegistrationDetailReport` with the `-Filter` parameter to specify the filter condition. The results are displayed in a table format.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAuthenticationMethodUserRegistrationDetailReport.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All'\nGet-EntraBetaAuthenticationMethodUserRegistrationDetailReport -Filter \"userType eq 'member'\" | Format-Table -AutoSize\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                   IsAdmin IsMfaCapable IsMfaRegistered IsPasswordlessCapable IsSsprCapable \n--                                   ------- ------------ --------------- --------------------- -------------\naaaaaaaa-0000-1111-2222-bbbbbbbbbbbb True    False        False           False                 True      \nbbbbbbbb-1111-2222-3333-cccccccccccc False   False        False           False                 False     \ncccccccc-2222-3333-4444-dddddddddddd False   False        False           False                 False     \ndddddddd-3333-4444-5555-eeeeeeeeeeee False   False        False           False                 False \n```\n\n----------------------------------------\n\nTITLE: Remove Application Proxy Connector Group - PowerShell\nDESCRIPTION: This cmdlet removes the association of a connector group from an application, effectively setting the application's group to 'Default'. It requires the application to be configured for Application Proxy in Microsoft Entra ID. An error will occur if the application is already in the 'Default' group unless it is being added to another group.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaApplicationProxyApplicationConnectorGroup.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraBetaApplicationProxyApplicationConnectorGroup\n -OnPremisesPublishingProfileId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cross-Tenant Access Activity with Get-EntraBetaCrossTenantAccessActivity (PowerShell)\nDESCRIPTION: This PowerShell command retrieves user sign-in activity associated with external tenants, using the Get-EntraBetaCrossTenantAccessActivity cmdlet from the Microsoft.Entra.Beta module. It depends on the Microsoft.Entra.Beta PowerShell module.  The command returns activity records representing user sign-ins from external tenants.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaCrossTenantAccessActivity\n```\n\n----------------------------------------\n\nTITLE: Get Role Settings for Resource - PowerShell\nDESCRIPTION: Retrieves role settings for a specific provider and resource using the Get-EntraBetaPrivilegedRoleSetting cmdlet with a filter. Requires the 'PrivilegedAccess.Read.AzureAD', 'PrivilegedAccess.Read.AzureResources' and 'PrivilegedAccess.Read.AzureADGroup' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPrivilegedRoleSetting.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'PrivilegedAccess.Read.AzureAD', 'PrivilegedAccess.Read.AzureResources' 'PrivilegedAccess.Read.AzureADGroup'\n$params = @{\n    ProviderId = 'aadRoles'\n    Filter = \"ResourceId eq 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb'\"\n}\nGet-EntraBetaPrivilegedRoleSetting @params\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Microsoft Entra Beta Modules - PowerShell\nDESCRIPTION: This PowerShell command retrieves all installed modules with names starting with 'Microsoft.Entra.Beta'. The command uses `Get-InstalledModule` to list the modules. The output shows the installed beta modules, their version and installation path. Requires PowerShellGet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/includes/verify-installed-modules.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-InstalledModule -Name Microsoft.Entra.Beta*\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - Top - YAML\nDESCRIPTION: This YAML snippet defines the `-Top` parameter for the `Get-EntraBetaUserDirectReport` cmdlet. This parameter specifies the maximum number of records to return. The alias for the parameter is `-Limit`. It accepts pipeline input by property name or by value. The default value is None.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserDirectReport.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Int32\nParameter Sets: (All)\nAliases: Limit\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get User Roles Example - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a list of directory roles assigned to a specific user using the Get-EntraBetaUserRole cmdlet. It first connects to Entra ID with the required scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserRole.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\nGet-EntraBetaUserRole -UserId 'SawyerM@contoso.com'\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDeletedDateTime         Id                                   DisplayName               RoleTemplateId\n---------------         --                                   -----------               --------------\n                       bbbbbbbb-1111-2222-3333-ccccccccccc  Helpdesk Administrator    729827e3-9c14-49f7-bb1b-9608f156bbb8\n                       dddddddd-3333-4444-5555-eeeeeeeeeeee Directory Readers         88d8e3e3-8f55-4a1e-953a-9b9898b8876b\n                       cccccccc-2222-3333-4444-dddddddddddd Application Administrator 9b895d92-2cd3-44c7-9d02-a6ac2d5ea5c3\n                       aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb Guest Inviter             95e79109-95c0-4d8e-aee3-d01accf2d47b\n```\n\n----------------------------------------\n\nTITLE: Get User App Role Assignment - PowerShell\nDESCRIPTION: This example retrieves a user application role assignment for a specified user. It requires connecting to Entra ID with the appropriate scopes and specifies the user using their UserPrincipalName.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserAppRoleAssignment.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AppRoleAssignment.ReadWrite.All', 'Directory.Read.All'\nGet-EntraBetaUserAppRoleAssignment -UserId 'SawyerM@contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Assign App Role to Another Service Principal - PowerShell\nDESCRIPTION: This example demonstrates how to assign an app role to another service principal in Microsoft Entra ID. It retrieves the service principals and assigns the role using New-EntraBetaServicePrincipalAppRoleAssignment.  It requires the 'AppRoleAssignment.ReadWrite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaServicePrincipalAppRoleAssignment.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AppRoleAssignment.ReadWrite.All'\n$clientServicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\n$servicePrincipalObject = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Box'\"\nNew-EntraBetaServicePrincipalAppRoleAssignment -ServicePrincipalId $clientServicePrincipal.Id -PrincipalId $clientServicePrincipal.Id -ResourceId $servicePrincipalObject.Id -AppRoleId $servicePrincipalObject.Approles[1].Id\n```\n\n----------------------------------------\n\nTITLE: Verify Entra Context - PowerShell\nDESCRIPTION: This command is used to verify that the authentication was successful and the connection is using the app-only method after using other Connect-Entra examples. The output shows the ClientId, TenantId, AuthType, and other context information. The Microsoft Entra PowerShell module is required.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/app-only-access-auth.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraContext\n```\n\n----------------------------------------\n\nTITLE: Get Named Location Policy Syntax (Default) PowerShell\nDESCRIPTION: This syntax shows how to retrieve named location policies. It takes an optional 'Property' parameter to select specific properties to return and accepts common parameters for controlling the command execution.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaNamedLocationPolicy.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaNamedLocationPolicy\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Connect to Microsoft Entra as Different Identity - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to connect to Microsoft Entra ID using a different identity than the CurrentUser.  The `-ContextScope` parameter is set to `Process`, which isolates the session to the current PowerShell process.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/authentication-scenarios.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -ContextScope 'Process'\n```\n\n----------------------------------------\n\nTITLE: Filter Deleted Service Principals by Display Name - PowerShell\nDESCRIPTION: This PowerShell script retrieves deleted service principals filtered by display name using the `-Filter` parameter and OData syntax. It requires 'Application.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedServicePrincipal.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraDeletedServicePrincipal -Filter \"DisplayName eq 'Contoso Marketing'\" | Select-Object Id, DisplayName, AppId, DeletedDateTime, DeletionAgeInDays, ServicePrincipalType | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: New Password Single-Sign-On Credentials Example\nDESCRIPTION: Demonstrates how to create password SSO credentials for a given ServicePrincipalId and PasswordSSOObjectId. It connects to Entra, creates a PasswordSSOCredentials object, retrieves a service principal, defines credential fields, and then calls New-EntraBetaPasswordSingleSignOnCredential.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaPasswordSingleSignOnCredential.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All', 'Directory.ReadWrite.All'\n$credentials = New-Object -TypeName Microsoft.Open.MSGraph.Model.PasswordSSOCredentials\n$credentials.Id = '<user-or-group-Id>'\n$servicePrincipal = Get-EntraBetaservicePrincipal -SearchString '<service-principal-name>'\n$creds1 = [Microsoft.Open.MSGraph.Model.PasswordSSOCredential]@{FieldId = \"param_emailOrUserName\"; Value = \"foobar@ms.com\"; Type = \"text\" }\n$creds2 = [Microsoft.Open.MSGraph.Model.PasswordSSOCredential]@{FieldId = \"param_password\"; Value = \"my-secret\"; Type = \"password\" }\n$credentials.Credentials = @($creds1, $creds2)\nNew-EntraBetaPasswordSingleSignOnCredential -ServicePrincipalId $servicePrincipal.Id -PasswordSSOCredential $credentials\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId\n--\ncccccccc-2222-3333-4444-dddddddddddd\n```\n\n----------------------------------------\n\nTITLE: Defining Certificate Parameter in YAML\nDESCRIPTION: This YAML snippet defines the `-Certificate` parameter of type `X509Certificate2`.  It belongs to the `AppCertificateParameterSet`. This certificate is used for authentication.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Connect-Entra.md#_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nType: X509Certificate2\nParameter Sets: AppCertificateParameterSet\nAliases: \nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Application Templates Filtered by Display Name - Powershell\nDESCRIPTION: This PowerShell script retrieves application templates filtered by their display name. It uses the `-Filter` parameter to specify the filter condition. It connects to Entra ID using `Connect-Entra` and filters the application templates based on the `DisplayName` property.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationTemplate.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraBetaApplicationTemplate -Filter \"DisplayName eq 'Dynamics CRM Online'\"\n```\n\n----------------------------------------\n\nTITLE: Remove Permission Grant Condition Set Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Remove-EntraPermissionGrantConditionSet cmdlet. It requires specifying the ConditionSetType, Id, and PolicyId to identify the condition set to be removed. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraPermissionGrantConditionSet.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraPermissionGrantConditionSet\n -ConditionSetType <String>\n -Id <String>\n -PolicyId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Set-EntraCustomSecurityAttributeDefinition Syntax - PowerShell\nDESCRIPTION: This snippet shows the syntax for the `Set-EntraCustomSecurityAttributeDefinition` cmdlet. It takes an `-Id` parameter (String, required) to identify the attribute to update, and optional parameters like `-Description` (String), `-Status` (String), and `-UsePreDefinedValuesOnly` (Boolean) to modify the attribute's properties.\n\nDependencies: Requires the Microsoft.Entra module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraCustomSecurityAttributeDefinition.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-EntraCustomSecurityAttributeDefinition\n -Id <String>\n [-Description <String>]\n [-Status <String>]\n [-UsePreDefinedValuesOnly <Boolean>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get All Domains with Get-EntraBetaDomain (PowerShell)\nDESCRIPTION: This code snippet demonstrates how to retrieve a list of all domains in a Microsoft Entra ID tenant using the `Get-EntraBetaDomain` cmdlet. It first connects to Entra ID with the required 'Domain.Read.All' scope and then executes the cmdlet without any parameters to retrieve all domains. The output displays various properties of each domain, such as Id, AuthenticationType, and IsVerified.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDomain.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Domain.Read.All'\nGet-EntraBetaDomain\n```\n\n----------------------------------------\n\nTITLE: YAML Definition of ResolveTenantId Parameter\nDESCRIPTION: Defines the `-ResolveTenantId` parameter for a PowerShell cmdlet using YAML. Specifies the parameter's type, the parameter sets it belongs to, its aliases, whether it's required, its position, default value, and whether it accepts pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaCrossTenantAccessActivity.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases: None\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get top direct reports\nDESCRIPTION: Retrieves a specified number of direct reports for an organizational contact. This example connects to Entra ID with 'OrgContact.Read.All' scope. It uses `-Top` parameter to limit the number of direct reports returned.  The contact ID is passed using the `-OrgContactId` parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaContactDirectReport.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'OrgContact.Read.All'\n$contact = Get-EntraBetaContact -Filter \"displayName eq 'Contoso Contact'\"\nGet-EntraBetaContactDirectReport -OrgContactId $contact.Id -Top 2\n```\n\n----------------------------------------\n\nTITLE: Update permission grant policy display name - PowerShell\nDESCRIPTION: Updates the display name of a specified permission grant policy using Set-EntraBetaPermissionGrantPolicy. It connects to Entra with the necessary scopes, retrieves the policy using its display name, and updates the display name.  The `-Id` parameter identifies the policy and `-DisplayName` parameter sets the new name.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaPermissionGrantPolicy.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.PermissionGrant'\n$policy = Get-EntraBetaPermissionGrantPolicy | Where-Object { $_.DisplayName -eq 'Microsoft User Default Recommended Policy' }\nSet-EntraBetaPermissionGrantPolicy -Id $policy.Id -DisplayName 'Updated DisplayName'\n```\n\n----------------------------------------\n\nTITLE: Updating PowerShellGet in Windows PowerShell 5.1\nDESCRIPTION: This snippet updates the PowerShellGet module to the latest version in Windows PowerShell 5.1. It's crucial for ensuring compatibility and access to the newest features. The command must be run from an elevated (administrator) PowerShell session.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/includes/powershell-prerequisites.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Module -Name PowerShellGet -Force -AllowClobber\n```\n\n----------------------------------------\n\nTITLE: Get Application Extension Properties Syntax (ByApplicationId)\nDESCRIPTION: This snippet shows the syntax for retrieving application extension properties using the `Get-EntraApplicationExtensionProperty` cmdlet with the `ApplicationId` parameter. It allows specifying properties to be returned using the `Property` parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplicationExtensionProperty.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraApplicationExtensionProperty\n -ApplicationId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Confirm Domain Ownership\nDESCRIPTION: This example demonstrates how to confirm ownership of a domain using the Confirm-EntraBetaDomain cmdlet. It requires the 'Domain.ReadWrite.All' scope and updates the domain's status to 'verified'.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Confirm-EntraBetaDomain.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Domain.ReadWrite.All'\nConfirm-EntraBetaDomain -DomainName Contoso.com\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Users Filtered by Display Name - PowerShell\nDESCRIPTION: This example retrieves deleted users with a specific display name ('Avery Smith'). It displays selected properties (Id, UserPrincipalName, DisplayName, AccountEnabled, DeletedDateTime, DeletionAgeInDays, UserType) in a formatted table. Connection is established with Connect-Entra requiring the 'User.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedUser.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraDeletedUser -Filter \"displayName eq 'Avery Smith'\" | Select-Object Id, UserPrincipalName, DisplayName, AccountEnabled, DeletedDateTime, DeletionAgeInDays, UserType | Format-Table -AutoSize\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                   UserPrincipalName                                              DisplayName   AccountEnabled DeletedDateTime       DeletionAgeInDays UserType\n--                                   -----------------                                              -----------   -------------- ---------------       ----------------- --------\ndddddddd-3333-4444-5555-eeeeeeeeeeee dddddddd-3333-4444-5555-eeeeeeeeeeeeAveryS@contoso.com        Avery Smith   False          2/12/2025 1:15:34 PM  3                 Member\n```\n\n----------------------------------------\n\nTITLE: AppRoles Parameter Definition\nDESCRIPTION: This YAML snippet provides the parameter definition for the AppRoles parameter of the Set-EntraBetaApplication cmdlet. It details the type of the parameter, which parameter sets it belongs to, any aliases it has, and whether it is required. The AppRoles parameter represents the collection of application roles that an application might declare.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplication.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.AppRole]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Set Connector Group Name - PowerShell\nDESCRIPTION: This cmdlet changes the name of an existing Application Proxy connector group. It requires the connector group's ID and the new name as parameters. Ensure you have the 'Directory.ReadWrite.All' scope. The `Connect-Entra` command establishes a connection to Entra ID before executing the `Set-EntraBetaApplicationProxyConnectorGroup` command.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplicationProxyConnectorGroup.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-EntraBetaApplicationProxyConnectorGroup\n -Id <String>\n -Name <Name>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get deleted service principal by ServicePrincipalId - PowerShell\nDESCRIPTION: This PowerShell script retrieves a specific deleted service principal by its unique ServicePrincipalId. It requires the 'Application.Read.All' scope and uses the '-ServicePrincipalId' parameter. The result is then displayed in a formatted table with selected properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedServicePrincipal.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraBetaDeletedServicePrincipal -ServicePrincipalId 'bbbbbbbb-1111-2222-3333-cccccccccccc' | Select-Object Id, DisplayName, AppId, DeletedDateTime, DeletionAgeInDays, ServicePrincipalType | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Set Application Verified Publisher - PowerShell\nDESCRIPTION: This example demonstrates how to set the verified publisher of an application in Microsoft Entra ID using the Set-EntraBetaApplicationVerifiedPublisher cmdlet. It retrieves an application, sets the Microsoft Partner Network ID (MPNID) and then sets the verified publisher. Requires the Application.ReadWrite.All scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplicationVerifiedPublisher.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All'\n$application = Get-EntraBetaApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\n$mpnId =  '0433167'\n$req =  @{verifiedPublisherId = $mpnId}\nSet-EntraBetaApplicationVerifiedPublisher -AppObjectId $application.Id -SetVerifiedPublisherRequest $req\n```\n\n----------------------------------------\n\nTITLE: Get groups with specific properties - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve groups with specific properties, such as Id, DisplayName, SecurityEnabled, Visibility and GroupTypes.  It uses the `-Property` parameter to specify the properties to retrieve. The output is then formatted as a table using Format-Table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaGroup.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All'\nGet-EntraBetaGroup -Property Id,DisplayName, SecurityEnabled,Visibility,GroupTypes | Select-Object Id,DisplayName, SecurityEnabled,Visibility,GroupTypes | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get User Roles by DirectoryRoleId Example - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve assigned directory roles for a specific user by DirectoryRoleId parameter using the Get-EntraBetaUserRole cmdlet.  It first connects to Entra ID with the required scopes, then retrieves the directory role and then queries user roles by directory role id.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserRole.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\n$role = Get-EntraBetaDirectoryRole -Filter \"displayName eq 'Helpdesk Administrator'\"\nGet-EntraBetaUserRole -UserId 'SawyerM@contoso.com' -DirectoryRoleId $role.Id\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDeletedDateTime         Id                                   DisplayName               RoleTemplateId\n---------------         --                                   -----------               --------------\n                       bbbbbbbb-1111-2222-3333-ccccccccccc  Helpdesk Administrator    729827e3-9c14-49f7-bb1b-9608f156bbb8\n```\n\n----------------------------------------\n\nTITLE: Application Creation with Optional Claims\nDESCRIPTION: This snippet demonstrates how to create a new application and configure optional claims using the `-OptionalClaims` parameter. It requires the `Application.ReadWrite.All` scope. Optional claims are additional claims that can be included in tokens issued for the application.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplication.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All'\n$optionalClaims = @{ IdToken = [PSCustomObject]@{ Name = \"claimName\"; Source = \"claimSource\" } }\nNew-EntraBetaApplication -DisplayName 'My new application' -OptionalClaims $optionalClaims\n```\n\n----------------------------------------\n\nTITLE: Restore Administrative Unit by Display Name - PowerShell\nDESCRIPTION: This snippet restores a soft-deleted administrative unit in Microsoft Entra ID using its display name and pipelining. It connects to Entra ID with the 'AdministrativeUnit.ReadWrite.All' scope, retrieves the deleted administrative unit by 'displayName' using 'Get-EntraDeletedAdministrativeUnit', and pipes it to 'Restore-EntraDeletedDirectoryObject' for restoration.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/recover-deleted-data.md#_snippet_14\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.ReadWrite.All'\nGet-EntraDeletedAdministrativeUnit -Filter \"displayName eq 'Pacific Administrative Unit'\" | Restore-EntraDeletedDirectoryObject\n```\n\n----------------------------------------\n\nTITLE: Get Service Principal Created Objects\nDESCRIPTION: Retrieves the objects created by a service principal using the Get-EntraServicePrincipalCreatedObject cmdlet. Requires connecting to Entra ID with the 'Application.Read.All' scope and retrieving the service principal by display name to obtain its ID. The ServicePrincipalId parameter specifies the ID of the service principal whose created objects are being retrieved.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalCreatedObject.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraServicePrincipalCreatedObject -ServicePrincipalId $servicePrincipal.Id\n```\n\n----------------------------------------\n\nTITLE: Block Cloud Object Takeover via Hard Match - PowerShell\nDESCRIPTION: This example demonstrates how to block cloud object takeover through hard matching by enabling the 'BlockCloudObjectTakeoverThroughHardMatch' feature using the Set-EntraBetaDirSyncFeature cmdlet. It retrieves the tenant ID using Get-EntraContext and requires the 'OnPremDirectorySynchronization.ReadWrite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaDirSyncFeature.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'OnPremDirectorySynchronization.ReadWrite.All'\n$tenantID = (Get-EntraContext).TenantId\nSet-EntraBetaDirSyncFeature -Feature 'BlockCloudObjectTakeoverThroughHardMatch' -Enable $true -TenantId $tenantID -Force\n```\n\n----------------------------------------\n\nTITLE: Retrieve User for Role Assignment - PowerShell\nDESCRIPTION: This code snippet retrieves a specific user from Microsoft Entra ID using the Get-EntraUser command. It requires the User.Read.All scope and the user's ID or UPN.  The output displays user properties such as DisplayName, Id, Mail, and UserPrincipalName.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-roles.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\n$user = Get-EntraUser -UserId 'markus@contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Remove User Extension Example - PowerShell\nDESCRIPTION: This snippet demonstrates how to remove a user extension from Microsoft Entra ID using the Remove-EntraBetaUserExtension cmdlet. It first connects to Entra ID with the necessary scopes and then removes a user extension specified by the ObjectId and ExtensionName parameters. The ObjectId specifies the user, and the ExtensionName specifies the extension to remove.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaUserExtension.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nRemove-EntraBetaUserExtension -ObjectId 'SawyerM@Contoso.com' -ExtensionName 'Test Extension'\n```\n\n----------------------------------------\n\nTITLE: List Applications Without User Assignment - PowerShell\nDESCRIPTION: This PowerShell snippet retrieves all Entra ID applications that do not require user assignment. It connects to Entra ID using Connect-Entra with the 'Application.Read.All' scope and filters the service principals using Where-Object to find those where appRoleAssignmentRequired is not true.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipal.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraBetaServicePrincipal -All | Where-Object {$_.appRoleAssignmentRequired -ne 'true'}\n```\n\n----------------------------------------\n\nTITLE: Remove Connector Group and Set to Default - PowerShell Example\nDESCRIPTION: This example demonstrates how to remove the connector group associated with an application, setting it to 'Default'. It first connects to Entra with the required scopes and then executes the `Remove-EntraBetaApplicationProxyApplicationConnectorGroup` cmdlet with the application's object ID specified by `OnPremisesPublishingProfileId`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaApplicationProxyApplicationConnectorGroup.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\nRemove-EntraBetaApplicationProxyApplicationConnectorGroup -OnPremisesPublishingProfileId 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb'\n```\n\n----------------------------------------\n\nTITLE: Token Encryption Key ID Definition (YAML)\nDESCRIPTION: Specifies the keyId of a public key from the keyCredentials collection used for token encryption.  When configured, Microsoft Entra ID encrypts emitted tokens using this key.  The application receiving the token must decrypt it using the corresponding private key.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraApplication.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Retrieve ConnectorGroup by Connector ID - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a ConnectorGroup using a specified Connector ID. It first connects to Entra ID with the 'Directory.ReadWrite.All' scope, then calls the `Get-EntraBetaApplicationProxyConnectorMemberOf` cmdlet to fetch the ConnectorGroup associated with the given connector ID.  The connector ID is passed using the `-OnPremisesPublishingProfileId` parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationProxyConnectorMemberOf.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\nGet-EntraBetaApplicationProxyConnectorMemberOf -OnPremisesPublishingProfileId 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb'\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                   ConnectorGroupType IsDefault Name                       Region\n--                                   ------------------ --------- ----                       ------\nbbbbbbbb-1111-2222-3333-cccccccccccc applicationProxy   False     Backup Application Servers\n```\n\n----------------------------------------\n\nTITLE: Defining -ResetRedemption Parameter Properties in YAML\nDESCRIPTION: This YAML snippet defines the properties of the -ResetRedemption parameter for a PowerShell cmdlet. It specifies the parameter's data type as System.Boolean, its optional nature (Required: False), its default value (None), and its behavior regarding pipeline input and wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaInvitation.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Boolean\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Filter Role Assignments by Role Definition ID - PowerShell\nDESCRIPTION: Retrieves role assignments filtered by a specific role definition ID. It retrieves the role definition ID based on the display name, then uses the `-Filter` parameter with the `roleDefinitionId` property to retrieve matching role assignments.  Requires connecting to Entra ID with the specified scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirectoryRoleAssignment.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory', 'EntitlementManagement.Read.All'\n$roleId = (Get-EntraBetaDirectoryRoleDefinition -Filter \"DisplayName eq 'Helpdesk Administrator'\").Id\nGet-EntraBetaDirectoryRoleAssignment -Filter \"roleDefinitionId eq '$roleId'\"\n```\n\n----------------------------------------\n\nTITLE: Get Disabled Apps - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all disabled apps by filtering based on the `accountEnabled` property. It connects to Entra ID and uses `Get-EntraBetaServicePrincipal` with a filter to select service principals where `accountEnabled` is false. The output displays the properties of the retrieved disabled apps.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipal.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraBetaServicePrincipal -Filter \"accountEnabled eq false\"\n```\n\n----------------------------------------\n\nTITLE: Set User Thumbnail Photo Example - PowerShell\nDESCRIPTION: This example demonstrates how to use the `Set-EntraBetaUserThumbnailPhoto` cmdlet to set a user's thumbnail photo by specifying the `UserId` and the `FilePath` to the image file.  It first connects to Entra ID with the required scopes and then executes the cmdlet to update the photo.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUserThumbnailPhoto.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite', 'User.ReadWrite.All'\nSet-EntraBetaUserThumbnailPhoto -UserId -FilePath 'D:\\UserThumbnailPhoto.jpg'\n```\n\n----------------------------------------\n\nTITLE: List Service Principal App Roles - PowerShell\nDESCRIPTION: This PowerShell snippet retrieves the app roles for a specific service principal. It connects to Entra ID using Connect-Entra with the 'Application.Read.All' scope, searches for the service principal by name using Get-EntraBetaServicePrincipal with the SearchString parameter, and then displays the app roles in a formatted table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipal.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -SearchString 'Contoso Helpdesk Application'\n$servicePrincipal.AppRoles | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Set-EntraBetaPolicy Syntax\nDESCRIPTION: This snippet shows the syntax for the Set-EntraBetaPolicy cmdlet, which is used to update a policy in Microsoft Entra ID. The -Id parameter is required, and other parameters such as -Definition, -DisplayName, -Type, and -IsOrganizationDefault are optional.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaPolicy.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-EntraBetaPolicy\n -Id <String>\n [-Definition <System.Collections.Generic.List`1[System.String]>] \n [-DisplayName <String>]\n [-Type <String>]\n [-IsOrganizationDefault <Boolean>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: GroupIdsForMembershipCheck Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the `-GroupIdsForMembershipCheck` parameter for the `Select-EntraBetaGroupIdsUserIsMemberOf` cmdlet. It specifies the type, whether it is required, its position, default value, and whether it accepts pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Select-EntraBetaGroupIdsUserIsMemberOf.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: GroupIdsForMembershipCheck\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get-EntraCustomSecurityAttributeDefinition Syntax with Id - PowerShell\nDESCRIPTION: This PowerShell syntax shows how to retrieve a specific custom security attribute definition using its unique identifier (Id). It includes the optional Property parameter for specifying which properties to return.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraCustomSecurityAttributeDefinition.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraCustomSecurityAttributeDefinition\n -Id <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Add-EntraBetaGroupMember Syntax - PowerShell\nDESCRIPTION: This snippet represents the syntax of the `Add-EntraBetaGroupMember` cmdlet in PowerShell. It shows the required parameters: `-GroupId` and `-MemberId`, as well as optional common parameters like `-WhatIf` and `-Confirm`. The parameters specify the ID of the group and the ID of the member to be added, respectively.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaGroupMember.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-EntraBetaGroupMember\n -GroupId <String>\n -MemberId <String>\n [-WhatIf]\n [-Confirm]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Revoke Refresh Tokens for a User - PowerShell\nDESCRIPTION: This example shows how to revoke refresh tokens for a specific user. It connects to Entra ID with the `User.RevokeSessions.All` scope, then executes the `Revoke-EntraBetaUserAllRefreshToken` cmdlet using the specified `-UserId` parameter. The cmdlet invalidates all refresh tokens issued to applications for the specified user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Revoke-EntraBetaUserAllRefreshToken.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.RevokeSessions.All'\nRevoke-EntraBetaUserAllRefreshToken -UserId 'SawyerM@contoso.com'\n```\n\nLANGUAGE: powershell\nCODE:\n```\nValue\n-----\nTrue\n```\n\n----------------------------------------\n\nTITLE: Get Partner Information (Default)\nDESCRIPTION: Retrieves company-level information for partners using the default query. It assumes the user is already connected to Entra ID with the appropriate scopes. The cmdlet returns partner-specific information such as company name, support contacts, and URLs.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPartnerInformation.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaPartnerInformation\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Retrieve Service Principal Password Credential Output - PowerShell\nDESCRIPTION: Illustrates the output format of the Get-EntraBetaServicePrincipalPasswordCredential cmdlet, displaying credential properties such as CustomKeyIdentifier, DisplayName, EndDateTime, Hint, KeyId, SecretText, and StartDateTime.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalPasswordCredential.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nCustomKeyIdentifier DisplayName EndDateTime         Hint KeyId                                SecretText StartDateTime\n------------------- ----------- -----------         ---- -----                                ---------- -------------\n                                17-04-2025 07:32:41 gjW  bdf6a3df-cc9b-4612-b948-e32804ee88f7            17-04-2024 07:32:41\n                                21-03-2025 08:12:08 4fl  7f4414ec-8f72-49a8-b949-70d635899656            21-03-2024 08:12:08\n                                12-12-2024 08:39:07 mjl  0fff6b21-0a20-4f7c-93ba-26ed9b648344            12-12-2023 08:39:10\n```\n\n----------------------------------------\n\nTITLE: Restore Service Principal by ID - PowerShell\nDESCRIPTION: This snippet restores a soft-deleted service principal in Microsoft Entra ID by its ID. It first connects to Entra ID with the 'Application.ReadWrite.All' scope, then uses the 'Restore-EntraDeletedDirectoryObject' cmdlet to restore the service principal with the specified ID. The ID parameter specifies the unique identifier of the deleted service principal.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/recover-deleted-data.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All' \nRestore-EntraDeletedDirectoryObject -Id 'aaaaaaaa-bbbb-cccc-1111-222222222222'\n```\n\n----------------------------------------\n\nTITLE: Retrieve Partner Information with TenantId\nDESCRIPTION: This example demonstrates how to retrieve partner information using a specific Tenant ID. It connects to Entra ID, retrieves the tenant ID using `Get-EntraContext`, and then calls `Get-EntraPartnerInformation` with the `-TenantId` parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraPartnerInformation.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All'\n$tenantId = (Get-EntraContext).TenantId\nGet-EntraPartnerInformation -TenantId $tenantId\n```\n\n----------------------------------------\n\nTITLE: Get Top Contact Memberships - PowerShell\nDESCRIPTION: This PowerShell code snippet retrieves the top two memberships of a specified contact in Microsoft Entra ID. It connects to Entra ID, retrieves the contact object, and then uses the Get-EntraBetaContactMembership cmdlet with the -Top parameter to limit the results to the top 2 memberships.  The output is formatted into a table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaContactMembership.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'OrgContact.Read.All'\n$contact = Get-EntraBetaContact -Filter \"displayName eq 'Contoso Contact'\"\nGet-EntraBetaContactMembership -OrgContactId $contact.Id -Top 2 |\nSelect-Object Id, DisplayName, '@odata.type', SecurityEnabled | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: List Permission Grants - PowerShell\nDESCRIPTION: This example demonstrates how to list existing permission grants for a specific group in Microsoft Entra ID. It first connects to Entra ID with the required scopes (`GroupMember.Read.All`) and then uses `Get-EntraBetaGroupPermissionGrant` with a specific GroupId to retrieve the permission grants.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaGroupPermissionGrant.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All'\nGet-EntraBetaGroupPermissionGrant -GroupId 'CcDdEeFfGgHhIiJjKkLlMmNnOoPpQq3'\n```\n\n----------------------------------------\n\nTITLE: Get All Role Assignments - PowerShell\nDESCRIPTION: This code snippet retrieves all role assignments in Microsoft Entra ID using the Get-EntraDirectoryRoleAssignment command. It requires the Directory Readers role and the RoleManagement.Read.Directory scope. The output displays the Id, PrincipalId, RoleDefinitionId, DirectoryScopeId and AppScopeId for each role assignment.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-roles.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory'\nGet-EntraDirectoryRoleAssignment -All \n```\n\n----------------------------------------\n\nTITLE: Application Creation with Identifier URI\nDESCRIPTION: This snippet demonstrates how to create a new application and specify a custom Identifier URI using the `-IdentifierUris` parameter.  It requires the `Application.ReadWrite.All` and `Application.ReadWrite.OwnedBy` scopes. The Identifier URI uniquely identifies the web application within the Entra ID tenant.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplication.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\nNew-EntraBetaApplication -DisplayName 'My new application' -IdentifierUris 'https://mynewapp.contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Retrieving cloud authentication roll-out policy by Filter - PowerShell\nDESCRIPTION: This example shows how to retrieve a cloud authentication roll-out policy using a filter. It connects to Entra and then utilizes the `Get-EntraBetaFeatureRolloutPolicy` cmdlet along with the `-Filter` parameter to retrieve policies that match the specified filter criteria.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaFeatureRolloutPolicy.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\nGet-EntraBetaFeatureRolloutPolicy -Filter \"DisplayName eq 'Feature-Rollout-Policytest'\"\n```\n\n----------------------------------------\n\nTITLE: DirectorySetting Parameter - YAML\nDESCRIPTION: This YAML snippet documents the `-DirectorySetting` parameter for the `New-EntraBetaObjectSetting` cmdlet. It specifies that this parameter is required, accepts pipeline input, and does not accept wildcard characters. It defines the new settings to be applied to the target object.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaObjectSetting.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: DirectorySetting\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get deleted service principals filter by display name - PowerShell\nDESCRIPTION: This PowerShell script filters the list of deleted service principals based on the display name using the '-Filter' parameter. It uses an OData filter expression to match the exact display name. The 'Application.Read.All' scope is required for this script to function.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedServicePrincipal.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraBetaDeletedServicePrincipal -Filter \"DisplayName eq 'Contoso Marketing'\" | Select-Object Id, DisplayName, AppId, DeletedDateTime, DeletionAgeInDays, ServicePrincipalType | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Remove Application by ID - PowerShell\nDESCRIPTION: This example shows how to remove an application object using its ApplicationId. It first connects to Entra ID, retrieves the application using its display name, and then removes it using Remove-EntraApplication. This snippet requires the 'Application.ReadWrite.All' scope and the application's display name to be known.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraApplication.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All'\n$application = Get-EntraApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\nRemove-EntraApplication -ApplicationId $application.Id\n```\n\n----------------------------------------\n\nTITLE: Get All Members Within a Group - PowerShell\nDESCRIPTION: This snippet retrieves all members within a group specified by its GroupId. The `-All` parameter ensures that all members are returned.  It also selects and displays the Id, DisplayName and '@odata.type' for each member.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaGroupMember.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All'\n$group = Get-EntraBetaGroup -Filter \"DisplayName eq 'Sales and Marketing'\"\nGet-EntraBetaGroupMember -GroupId $group.Id -All | Select-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Removing a GroupLifecyclePolicies Object (PowerShell)\nDESCRIPTION: This example demonstrates how to remove a groupLifecyclePolicies object. It first connects to Entra with required scopes, retrieves the target GroupLifecyclePolicy based on a filter (AlternateNotificationEmails), and then pipes the result to Remove-EntraBetaGroupLifecyclePolicy for deletion.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaGroupLifecyclePolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\nGet-EntraBetaGroupLifecyclePolicy | Where-Object {$_.AlternateNotificationEmails -eq 'example@contoso.com'} | Remove-EntraBetaGroupLifecyclePolicy\n```\n\n----------------------------------------\n\nTITLE: Remove Application Policy Example - PowerShell\nDESCRIPTION: Demonstrates how to remove an application policy using the Remove-EntraBetaApplicationPolicy cmdlet.  It connects to Entra ID with the 'Application.ReadWrite.All' scope, defines the necessary parameters (Id and PolicyId), and then executes the cmdlet with those parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaApplicationPolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All'\n$params = @{\n    Id = 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb'\n    PolicyId = 'bbbbbbbb-1111-2222-3333-cccccccccccc'\n}\nRemove-EntraBetaApplicationPolicy @params\n```\n\n----------------------------------------\n\nTITLE: List managed devices with Get-EntraBetaDevice (PowerShell)\nDESCRIPTION: This PowerShell snippet demonstrates how to retrieve a list of managed devices from Microsoft Entra ID. It first connects to Entra ID using the Connect-Entra cmdlet with the 'Device.Read.All' scope. Then, it uses the Get-EntraBetaDevice cmdlet with a filter to only return devices where 'isManaged' is true.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDevice.md#_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraBetaDevice -Filter \"isManaged eq true\"\n```\n\n----------------------------------------\n\nTITLE: Update Identity Provider Client Secret - PowerShell\nDESCRIPTION: This example demonstrates updating the client secret of an existing identity provider using the Set-EntraIdentityProvider cmdlet.  It requires connecting to Entra ID with the IdentityProvider.ReadWrite.All scope. The -IdentityProviderBaseId specifies the identity provider to update, and the -ClientSecret parameter provides the new client secret.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraIdentityProvider.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'IdentityProvider.ReadWrite.All'\nSet-EntraIdentityProvider -IdentityProviderBaseId 'Google-OAuth' -ClientSecret 'NewClientSecret'\n```\n\n----------------------------------------\n\nTITLE: Get Application by Display Name - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve an application by its display name using the -Filter parameter with an OData query.  It requires the 'Application.Read.All' scope and connects to Entra ID before executing the Get-EntraApplication cmdlet. The output displays the application's properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplication.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraApplication -Filter \"DisplayName eq 'ToGraph_443DEMO'\"\n```\n\n----------------------------------------\n\nTITLE: Get Conditional Access Policy by ID - PowerShell\nDESCRIPTION: This example shows how to retrieve a specific conditional access policy in Microsoft Entra ID using its ID.  It connects to Entra ID using 'Policy.Read.All' scope, retrieves the policy object by DisplayName, and then uses its ID to fetch the full policy details.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraConditionalAccessPolicy.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.All'\n$policy = Get-EntraConditionalAccessPolicy | Where-Object { $_.DisplayName -eq 'Multifactor authentication for Contoso partners and vendors' }\nGet-EntraConditionalAccessPolicy -PolicyId $policy.Id\n```\n\n----------------------------------------\n\nTITLE: Defining ServicePrincipalType Parameter in PowerShell YAML\nDESCRIPTION: This YAML snippet defines the `-ServicePrincipalType` parameter for a PowerShell cmdlet. It specifies the type as a string and indicates that it is optional, named, and does not accept pipeline input or wildcard characters. This parameter represents the service principal type.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraServicePrincipal.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Sign-in Events for a Specific Tenant - PowerShell\nDESCRIPTION: This example retrieves all sign-in events related to a specified external tenant, listing results by tenant ID. It requires 'AuditLog.Read.All' and 'Directory.Read.All' scopes. The `-ExternalTenantId` parameter filters results based on the specified tenant ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaCrossTenantAccessActivity.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All', 'Directory.Read.All'\nGet-EntraBetaCrossTenantAccessActivity -ExternalTenantId 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb'\n```\n\n----------------------------------------\n\nTITLE: Update Display Name - PowerShell\nDESCRIPTION: Updates the display name of a named location policy in Microsoft Entra ID using Set-EntraBetaNamedLocationPolicy. It sets the OdataType and DisplayName, requires 'Policy.ReadWrite.ConditionalAccess' scope, and depends on fetching the existing policy using Get-EntraBetaNamedLocationPolicy.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaNamedLocationPolicy.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ConditionalAccess'\n$policy = Get-EntraBetaNamedLocationPolicy | Where-Object { \"$_.DisplayName -eq 'IP named location policy'\" }\n$type = '#microsoft.graph.ipNamedLocation'\nSet-EntraBetaNamedLocationPolicy -PolicyId $policy.Id -OdataType $type -DisplayName 'NewName'\n```\n\n----------------------------------------\n\nTITLE: Connector Parameter Definition - YAML\nDESCRIPTION: These YAML snippets defines parameter details within the Get-EntraBetaApplicationProxyConnector cmdlet documentation. This includes datatypes, parameter sets, aliases, if they are required, their position, default values, if they accept pipeline input and wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationProxyConnector.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: GetQuery\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: GetById\nAliases: Id\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: GetVague\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Int32\nParameter Sets: GetQuery\nAliases: Limit\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Applications\nDESCRIPTION: Retrieves a list of deleted applications from Entra ID.  It requires the 'Application.Read.All' scope. The retrieved properties are then selected and formatted for display. The `Connect-Entra` cmdlet is used to establish a connection to Entra ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedApplication.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraBetaDeletedApplication -Property Id, AppId, DisplayName, DeletedDateTime, DeletionAgeInDays | Select-Object Id, AppId, DisplayName, DeletedDateTime, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - AdministrativeUnitId (YAML)\nDESCRIPTION: This YAML snippet defines the '-AdministrativeUnitId' parameter for the Set-EntraAdministrativeUnit cmdlet. It specifies the data type, parameter set, aliases, whether it is required, its position, default value, and whether it accepts pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraAdministrativeUnit.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Application Template List - All Parameter PowerShell\nDESCRIPTION: This example shows how to retrieve all application templates using the `-All` parameter.  It requires the 'Application.Read.All' scope. The command retrieves and displays properties (Id, DisplayName, Publisher, Categories) for all available application templates.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplicationTemplate.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraApplicationTemplate -Select Id, DisplayName, Publisher, Categories -All\n```\n\n----------------------------------------\n\nTITLE: Get Subscribed SKUs (Query)\nDESCRIPTION: This PowerShell snippet retrieves a list of subscribed SKUs for Microsoft services. It requires the 'Organization.Read.All' and 'LicenseAssignment.Read.All' scopes. The output displays information like Id, AccountId, AccountName, AppliesTo, CapabilityStatus, ConsumedUnits, SkuId, and SkuPartNumber.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaSubscribedSku.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All', 'LicenseAssignment.Read.All'\nGet-EntraBetaSubscribedSku\n```\n\n----------------------------------------\n\nTITLE: Get Trust Framework Policy by ID - PowerShell\nDESCRIPTION: This snippet retrieves the contents of a specified trust framework policy using its ID. It requires the 'Policy.Read.All' and 'Policy.ReadWrite.TrustFramework' scopes to be granted. The `-Id` parameter specifies the ID of the policy to retrieve, and the contents of the policy are displayed on the screen.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaTrustFrameworkPolicy.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.All', 'Policy.ReadWrite.TrustFramework'\n$params = @{\n    Id = 'B2C_1A_SIGNUP_SIGNIN'\n}\nGet-EntraBetaTrustFrameworkPolicy @params\n```\n\n----------------------------------------\n\nTITLE: Update ServicePrincipalType and AppRoleAssignmentRequired - PowerShell\nDESCRIPTION: This example shows how to update the ServicePrincipalType and AppRoleAssignmentRequired properties of a service principal in Microsoft Entra ID. It connects to Entra ID with the appropriate scopes, retrieves the target service principal using a filter, and updates the properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraServicePrincipal.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nSet-EntraServicePrincipal -ServicePrincipalId $servicePrincipal.Id -ServicePrincipalType 'Application' -AppRoleAssignmentRequired $True\n```\n\n----------------------------------------\n\nTITLE: Get All Named Location Policies - PowerShell\nDESCRIPTION: This snippet demonstrates how to retrieve a list of all named location policies in Microsoft Entra ID using the Get-EntraNamedLocationPolicy cmdlet.  It first connects to Entra ID using Connect-Entra with the 'Policy.Read.All' scope, then retrieves the policies.  An active Entra ID connection is required.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraNamedLocationPolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.All'\nGet-EntraNamedLocationPolicy\n```\n\n----------------------------------------\n\nTITLE: Suppress Welcome Message\nDESCRIPTION: Suppresses the welcome message when connecting to Microsoft Entra ID. This can be useful when running the cmdlet in scripts or automated environments.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Connect-Entra.md#_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -NoWelcome\n```\n\n----------------------------------------\n\nTITLE: Defining ClientSecretCredential Parameter in YAML\nDESCRIPTION: This YAML snippet defines the `-ClientSecretCredential` parameter of type `PSCredential`.  It belongs to the `AppSecretCredentialParameterSet`. The object provides the application ID and client secret.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Connect-Entra.md#_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nType: PSCredential\nParameter Sets: AppSecretCredentialParameterSet\nAliases: SecretCredential, Credential\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Administrative Units for a User by Administrative Unit ID\nDESCRIPTION: This example demonstrates how to retrieve administrative units for a specific user using the Administrative Unit ID. It first retrieves the administrative unit using Get-EntraBetaAdministrativeUnit and then uses its ID to filter the results. It requires the 'AdministrativeUnit.Read.All' scope. The -UserId specifies the user to get the administrative units from and the -AdministrativeUnitId specifies the administrative unit ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserAdministrativeUnit.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.Read.All'\n$administrativeUnit = Get-EntraBetaAdministrativeUnit -Filter \"DisplayName eq 'Pacific Admin Unit'\"\nGet-EntraBetaUserAdministrativeUnit -UserId 'SawyerM@contoso.com' -AdministrativeUnitId $administrativeUnit.Id\n```\n\n----------------------------------------\n\nTITLE: Set-EntraAttributeSet Syntax\nDESCRIPTION: Defines the syntax for the Set-EntraAttributeSet cmdlet. It shows the required parameters, such as AttributeSetId, and optional parameters, such as Description and MaxAttributesPerSet. CommonParameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraAttributeSet.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-EntraAttributeSet\n -AttributeSetId <String>\n [-Description <String>]\n [-MaxAttributesPerSet <Int32>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - View - YAML\nDESCRIPTION: Defines the View parameter for Get-EntraBetaApplicationLogo cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationLogo.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Boolean\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get All Application Permissions - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a list of all Application permissions using the `Find-EntraPermission` cmdlet with the `application` search string. The output shows the PermissionType, Id, Consent Name, and Description of each permission.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Find-EntraPermission.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nFind-EntraPermission application\n```\n\n----------------------------------------\n\nTITLE: Install Specific Version of Module - PowerShell\nDESCRIPTION: This command installs a specific version of a PowerShell module. `<Module-Name>` should be replaced with the actual module name, and `x.x` with the desired version number. This is useful for resolving version conflicts or installing a specific version for compatibility reasons. The `-RequiredVersion` parameter specifies the exact version to install.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/troubleshooting.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module <Module-Name> -Required Version x.x\n```\n\n----------------------------------------\n\nTITLE: Get All Application Service Endpoints (PowerShell)\nDESCRIPTION: This example demonstrates how to retrieve all service endpoints for a given application, identified by its Service Principal ID. It connects to Entra ID, retrieves the Service Principal using a filter on DisplayName, then uses the `-All` parameter of `Get-EntraApplicationServiceEndpoint` to retrieve all endpoints.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplicationServiceEndpoint.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"DisplayName eq 'Contoso Helpdesk App'\"\nGet-EntraApplicationServiceEndpoint -ServicePrincipalId $servicePrincipal.Id -All\n```\n\n----------------------------------------\n\nTITLE: Get Role Assignments Filter by PrincipalId PowerShell\nDESCRIPTION: This example demonstrates how to retrieve role assignments filtered by a specific principal ID. It connects to Entra ID, retrieves a user's ID, and then uses the `Get-EntraDirectoryRoleAssignment` cmdlet with the `-Filter` parameter to find role assignments associated with that principal ID.  The filter uses the OData syntax `principalId eq '$userId'` to match the principal ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDirectoryRoleAssignment.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory', 'EntitlementManagement.Read.All'\n$userId = (Get-EntraUser -UserId 'SawyerM@contoso.com').Id\nGet-EntraDirectoryRoleAssignment -Filter \"principalId eq '$userId'\"\n```\n\n----------------------------------------\n\nTITLE: Remove-EntraNamedLocationPolicy Syntax - PowerShell\nDESCRIPTION: This code snippet shows the syntax for the Remove-EntraNamedLocationPolicy cmdlet, highlighting the required PolicyId parameter. The PolicyId parameter specifies the ID of the named location policy that will be removed. The cmdlet also supports CommonParameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraNamedLocationPolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraNamedLocationPolicy\n -PolicyId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: New-EntraGroupAppRoleAssignment Syntax\nDESCRIPTION: Defines the syntax for the `New-EntraGroupAppRoleAssignment` cmdlet. This cmdlet requires parameters such as `GroupId`, `PrincipalId`, `AppRoleId`, and `ResourceId` to specify the group, principal, application role, and resource for the assignment. It also supports common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraGroupAppRoleAssignment.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-EntraGroupAppRoleAssignment\n -GroupId <String>\n -PrincipalId <String>\n -AppRoleId <String>\n -ResourceId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Set-EntraBetaPasswordSingleSignOnCredential Syntax - PowerShell\nDESCRIPTION: This snippet shows the syntax for the `Set-EntraBetaPasswordSingleSignOnCredential` cmdlet in PowerShell. It highlights the required parameters, `-ServicePrincipalId` which specifies the object ID of a service principal, and `-PasswordSSOCredential` which specifies the User or group ID. The cmdlet also supports common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaPasswordSingleSignOnCredential.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-EntraBetaPasswordSingleSignOnCredential\n -ServicePrincipalId <String>\n -PasswordSSOCredential <PasswordSSOCredentials>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Specific Domain by Name (PowerShell)\nDESCRIPTION: This example shows how to retrieve a specific domain by its name using the `Get-EntraBetaDomain` cmdlet. It begins by connecting to Entra ID using the 'Domain.Read.All' scope. Then, it uses the `-Name` parameter to specify the domain to retrieve. The output shows the properties of the requested domain.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDomain.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Domain.Read.All'\nGet-EntraBetaDomain -Name TEST22.com\n```\n\n----------------------------------------\n\nTITLE: Get OAuth2 permission grants for a user - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve OAuth2 permission grants for a specific user in Microsoft Entra ID using the `Get-EntraBetaUserOAuth2PermissionGrant` cmdlet.  It requires connecting to Entra ID with appropriate scopes. The `-UserId` parameter is used to specify the target user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserOAuth2PermissionGrant.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\nGet-EntraBetaUserOAuth2PermissionGrant -UserId 'SawyerM@contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Create Trust Framework Policy from Input File Only - PowerShell\nDESCRIPTION: This example demonstrates how to create a trust framework policy by reading the policy content from an input file.  It connects to Entra ID and utilizes a hashtable to provide the -InputFilePath parameter to the New-EntraBetaTrustFrameworkPolicy cmdlet. The created policy is displayed on the screen.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaTrustFrameworkPolicy.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.TrustFramework'\n$params = @{\n    InputFilePath = 'C:\\InputPolicy.xml'\n}\nNew-EntraBetaTrustFrameworkPolicy @params\n```\n\n----------------------------------------\n\nTITLE: New Identity Provider Syntax - PowerShell\nDESCRIPTION: This snippet displays the syntax for the New-EntraBetaIdentityProvider cmdlet. It outlines the required and optional parameters used to create a new identity provider. The parameters include ClientId, Type, ClientSecret, and Name.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaIdentityProvider.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-EntraBetaIdentityProvider\n -ClientId <String>\n -Type <String>\n -ClientSecret <String>\n [-Name <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Retrieve User License Details Output - PowerShell\nDESCRIPTION: This shows the example output of the Get-EntraBetaUserLicenseDetail command. The output contains the Id, SkuId, and SkuPartNumber of the licenses assigned to the user. The example output provides sample values for each of these properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserLicenseDetail.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nId                                          SkuId                                SkuPartNumber\n--                                          -----                                -------------\nX8Wu1RItQkSNL8zKldQ5DiH6ThjDmF1OlavQcFOpbmc aaaaaaaa-0b0b-1c1c-2d2d-333333333333 INFORMATION_PROTECTION_COMPLIANCE\nX8Wu1RItQkSNL8zKldQ5Dk8SXrDMx6BFpqqM94yUaWg bbbbbbbb-1c1c-2d2d-3e3e-444444444444 EMSPREMIUM\nX8Wu1RItQkSNL8zKldQ5DmAn38eBLPdOtXhbU5K1cd8 cccccccc-2d2d-3e3e-4f4f-555555555555 ENTERPRISEPREMIUM\n```\n\n----------------------------------------\n\nTITLE: Set Thumbnail Photo Example - PowerShell\nDESCRIPTION: This example demonstrates how to set a user's thumbnail photo using the Set-EntraUserThumbnailPhoto cmdlet with a file path. It first connects to Entra ID using Connect-Entra with the required scopes and then sets the thumbnail photo.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUserThumbnailPhoto.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite', 'User.ReadWrite.All'\nSet-EntraUserThumbnailPhoto -UserId -FilePath 'D:\\UserThumbnailPhoto.jpg'\n```\n\n----------------------------------------\n\nTITLE: Get Top One Tenant Details - PowerShell\nDESCRIPTION: Retrieves details for the top one tenant in Microsoft Entra ID using `Get-EntraTenantDetail` with the `-Top` parameter.  `-Limit` can be used as an alias for `-Top`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraTenantDetail.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All'\nGet-EntraTenantDetail -Top 1\n```\n\nLANGUAGE: powershell\nCODE:\n```\nDisplayName Id                                   CountryLetterCode VerifiedDomains\n----------- --                                   ----------------- ---------------\nContoso     aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb NL                {@{Capabilities=Email, OfficeCommunicationsOnline; IsDefault=False; IsInitial=True; Name=contoso.onmicrosoft.com; Type=Managed; Addition…}}\n```\n\n----------------------------------------\n\nTITLE: Get Current Session Details in PowerShell\nDESCRIPTION: Demonstrates how to retrieve the details of the current Entra session using the `Get-EntraContext` cmdlet.  The output displays key information such as the module name, version, client ID, tenant ID, scopes, and authentication type.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraContext.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraContext\n```\n\n----------------------------------------\n\nTITLE: Update Role Definition - Multiple Properties - PowerShell\nDESCRIPTION: This example demonstrates how to update multiple properties (RolePermissions, TemplateId, ResourceScopes, IsEnabled, Description, DisplayName, Version) of an existing role definition using the Set-EntraBetaDirectoryRoleDefinition cmdlet. It retrieves the role definition based on its display name, creates a RolePermission object, then updates multiple properties using a hashtable. It requires the RoleManagement.ReadWrite.Directory scope and a Microsoft Entra ID P1 or P2 license.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaDirectoryRoleDefinition.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory'\n$roleDefinition = Get-EntraBetaDirectoryRoleDefinition -Filter \"DisplayName eq '<Role-Definition-Name>'\"\n$rolePermissions = New-object Microsoft.Open.MSGraph.Model.RolePermission\n$rolePermissions.AllowedResourceActions = @(\"microsoft.directory/applications/standard/read\")\n$params = @{\n    UnifiedRoleDefinitionId = $roleDefinition.Id\n    Description             = 'Update'\n    DisplayName             = 'Update'\n    ResourceScopes          = '/'\n    IsEnabled               = $false\n    RolePermissions         = $rolePermissions\n    TemplateId              = 'f2ef992c-3afb-46b9-b7cf-a126ee74c451'\n    Version                 = 2\n}\nSet-EntraBetaDirectoryRoleDefinition @params\n```\n\n----------------------------------------\n\nTITLE: Restore Deleted Application Output - PowerShell\nDESCRIPTION: This code represents the output returned after successfully restoring a deleted application. It shows the Id of the restored application and the original deletion time.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Restore-EntraDeletedApplication.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nId                                   DeletedDateTime\n--                                   ---------------\nffffffff-5555-6666-7777-aaaaaaaaaaaa\n```\n\n----------------------------------------\n\nTITLE: Update Custom Security Attribute Definition Allowed Value - PowerShell\nDESCRIPTION: This example demonstrates how to update an existing custom security attribute definition's allowed value using the `Set-EntraBetaCustomSecurityAttributeDefinitionAllowedValue` cmdlet. It first connects to Entra ID with the required scopes, then retrieves the desired attribute definition, and finally updates the allowed value 'Alpine' to be active.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaCustomSecurityAttributeDefinitionAllowedValue.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'CustomSecAttributeDefinition.ReadWrite.All'\n$attributeDefinition = Get-EntraBetaCustomSecurityAttributeDefinition | Where-Object {$_.Name -eq 'Engineering'}\nSet-EntraBetaCustomSecurityAttributeDefinitionAllowedValue -CustomSecurityAttributeDefinitionId $attributeDefinition.Id -Id 'Alpine' -IsActive $true\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for UserPrincipalName Parameter\nDESCRIPTION: This YAML configuration describes the `-UserPrincipalName` parameter used in the `Reset-EntraBetaStrongAuthenticationMethodByUpn` cmdlet. It specifies the type, parameter sets, aliases, requirement, position, default value, pipeline input acceptance, and wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Reset-EntraBetaStrongAuthenticationMethodByUpn.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: UserId, Identity, UPN, ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Remove Entra Trusted Certificate Authority Example - PowerShell\nDESCRIPTION: This example demonstrates how to remove trusted certificate authorities from your directory. It first connects to Entra ID with the necessary scopes, then retrieves the CertificateAuthorityInformation object, and finally removes the certificate authority using the Remove-EntraTrustedCertificateAuthority cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraTrustedCertificateAuthority.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.ReadWrite.All'\n$cer = Get-EntraTrustedCertificateAuthority #Get the CertificateAuthorityInformation object\nRemove-EntraTrustedCertificateAuthority -CertificateAuthorityInformation $cer[0]\n```\n\n----------------------------------------\n\nTITLE: Connect with Device Code Flow\nDESCRIPTION: Connects to Microsoft Entra ID using the device code flow.  The user will be prompted to open a URL in a web browser and enter a code to authenticate. This is useful when the user's device does not have a web browser or when the user is logging in to a remote device.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Connect-Entra.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -UseDeviceCode\n```\n\n----------------------------------------\n\nTITLE: TenantId Parameter Definition YAML\nDESCRIPTION: Definition of the TenantId parameter for the Get-EntraDomainFederationSettings cmdlet. It specifies that the parameter is a string, is optional, accepts pipeline input by property name, and does not accept wildcard characters.  It is used to specify the tenant ID to perform the operation on.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDomainFederationSettings.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 2\nDefault value: None\nAccept pipeline input: True (ByPropertyName)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Directory Role Filter by ID - Example\nDESCRIPTION: This example demonstrates how to retrieve a specific directory role by its ID, using the `-Filter` parameter.  It connects to Entra ID and then uses `Get-EntraBetaDirectoryRole` with a filter to find the role matching the provided ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirectoryRole.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory'\nGet-EntraBetaDirectoryRole -Filter \"Id eq 'c0e36062-8c80-4d72-9bc3-cbb4efe03c21'\"\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDeletedDateTime Id                                   Description\n---------------\n aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb Perform all migration functionality to migrate content to Microsoft 365 usin...\n```\n\n----------------------------------------\n\nTITLE: List Application App Roles - PowerShell\nDESCRIPTION: This example shows how to retrieve and display the app roles for a specific application. It first retrieves the application using Get-EntraApplication and then accesses the AppRoles property to display the app roles information in a formatted table. The example requires the 'Application.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplication.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$application = Get-EntraApplication -SearchString 'Contoso Helpdesk Application'\n$application.AppRoles | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get All Role Definitions - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all role definitions present in Microsoft Entra ID using the `Get-EntraBetaDirectoryRoleDefinition` cmdlet. It requires the 'RoleManagement.Read.Directory' and 'EntitlementManagement.Read.All' scopes. The output displays the DisplayName, Id, TemplateId, and Description of each role definition.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirectoryRoleDefinition.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory', 'EntitlementManagement.Read.All'\nGet-EntraBetaDirectoryRoleDefinition\n```\n\n----------------------------------------\n\nTITLE: ServicePrincipalId Parameter (YAML)\nDESCRIPTION: This YAML snippet describes the -ServicePrincipalId parameter used by the Get-EntraBetaServicePrincipalKeyCredential cmdlet. It specifies that the parameter is of type string, is required, can accept pipeline input by property name or value, and does not accept wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalKeyCredential.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Checking Specific Beta Submodule Installation - PowerShell\nDESCRIPTION: This PowerShell command checks if a specific Microsoft Entra Beta submodule, for example 'Microsoft.Entra.Beta.Users' is installed. It uses `Get-InstalledModule` to find the specified module. The output includes the Version, Name, Repository, and Description of the beta submodule if installed. Requires the PowerShellGet module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/includes/verify-installed-modules.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nGet-InstalledModule -Name Microsoft.Entra.Beta.Users\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Administrative Units (GetQuery)\nDESCRIPTION: Retrieves a list of previously deleted administrative units.  It allows filtering and pagination through parameters like -Filter and -Top. Requires the Microsoft.Entra.Beta module and appropriate scopes. Returns a collection of administrative unit objects.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedAdministrativeUnit.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaDeletedAdministrativeUnit\n [-Filter <String>]\n [-All]\n [-Top <Int32>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Inactive Sign-Ins -Ago Parameter\nDESCRIPTION: Retrieves users without interactive sign-ins in the last N days using the `-Ago` parameter.  Requires connection to Entra ID with specific scopes. Returns user properties including sign-in details and creation date.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserInactiveSignIn.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaUserInactiveSignIn\n -Ago <Int32>\n [-UserType <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Set Entra Group Mail Nickname - PowerShell\nDESCRIPTION: This example demonstrates how to update the mail nickname of a specified group in Microsoft Entra ID. It connects to Entra ID, retrieves the group using Get-EntraBetaGroup, and then updates the MailNickName property using Set-EntraBetaGroup.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaGroup.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All'\n$group = Get-EntraBetaGroup -Filter \"DisplayName eq 'HelpDesk Team Leaders'\"\nSet-EntraBetaGroup -GroupId $group.Id -MailNickName 'newnickname'\n```\n\n----------------------------------------\n\nTITLE: Filter Deleted Groups by Display Name - PowerShell\nDESCRIPTION: This PowerShell snippet retrieves deleted groups based on a specified display name filter. It connects to Entra ID and uses the `-Filter` parameter with an OData query to match the display name, formatting the result for display.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedGroup.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Group.Read.All'\nGet-EntraDeletedGroup -Filter \"displayName eq 'Contoso Group'\" | Select-Object Id, DisplayName, MailNickname, GroupTypes, DeletedDateTime, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Retrieve top one object setting example\nDESCRIPTION: This example demonstrates how to retrieve the top one object setting from Microsoft Entra ID using the -Top parameter. It filters object settings retrieved based on TargetType and TargetObjectId and limits the result to the top one entry.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaObjectSetting.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\n$group = Get-EntraBetaGroup -Filter \"DisplayName eq 'Sales and Marketing'\"\nGet-EntraBetaObjectSetting -TargetType 'Groups' -TargetObjectId $group.Id -Top 1\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                   DisplayName         TemplateId\n--                                   -----------         ----------\naaaaaaaa-0000-1111-2222-bbbbbbbbbbbb Group.Unified.Guest 22cc22cc-dd33-ee44-ff55-66aa66aa66aa\n```\n\n----------------------------------------\n\nTITLE: Get Delegated Permission Classification with Filter - PowerShell\nDESCRIPTION: This example retrieves a delegated permission classification using a filter. It connects to Entra ID, retrieves a service principal, and then filters the delegated permission classifications based on the PermissionName. This retrieves classification with the name 'Sites.Read.All'.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalDelegatedPermissionClassification.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraBetaServicePrincipalDelegatedPermissionClassification -ServicePrincipalId $servicePrincipal.Id -Filter \"PermissionName eq 'Sites.Read.All'\"\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                      Classification PermissionId                         PermissionName\n--                      -------------- ------------                         --------------\nbbbbbbbb-7777-8888-9999-cccccccccccc low            eeeeeeee-4444-5555-6666-ffffffffffff Sites.Read.All\n```\n\n----------------------------------------\n\nTITLE: PasswordCredentials Parameter Definition\nDESCRIPTION: This YAML snippet describes the `-PasswordCredentials` parameter for the `New-EntraApplication` cmdlet. It defines that `PasswordCredentials` is a list of `Microsoft.Open.MSGraph.Model.PasswordCredential` objects, is not required, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplication.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.PasswordCredential]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: User ID Parameter Definition - YAML\nDESCRIPTION: This YAML code defines the parameters for the -UserId parameter of the Get-EntraUserExtension cmdlet. It specifies the type, parameter sets, aliases, whether it's required, the position, default value, whether it accepts pipeline input and wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserExtension.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId, UPN, Identity, UserPrincipalName\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Disable All Guest Users - PowerShell\nDESCRIPTION: Disables all guest user accounts in Microsoft Entra ID. The script retrieves all guest users, then iterates through each one to disable their account. Requires a connection to Microsoft Entra with the 'User.ReadWrite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-guest-users.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Retrieve all guest user accounts.\n$guestUsers = Get-EntraUser | Where-Object { $_.UserType -eq 'Guest' }\n\nforeach ($guest in $guestUsers) {\n    # Disable the guest user account\n    Set-EntraUser -UserId $guest.Id -AccountEnabled $false\n}\n```\n\n----------------------------------------\n\nTITLE: Get Top N Service Principals - PowerShell\nDESCRIPTION: This example retrieves the top two service principals from the directory using the `-Top` parameter. It connects to Entra ID and uses `Get-EntraBetaServicePrincipal` with the `-Top 2` parameter to limit the results. The output displays the properties of the retrieved service principals.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipal.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraBetaServicePrincipal -Top 2\n```\n\n----------------------------------------\n\nTITLE: Get Connector Groups with Search String - PowerShell\nDESCRIPTION: This example retrieves Azure AD Application Proxy connector groups using a search string. The `-SearchString` parameter allows searching for connector groups whose properties contain the specified string.  Requires connection to Entra ID with 'Directory.ReadWrite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationProxyConnectorGroup.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\nGet-EntraBetaApplicationProxyConnectorGroup -SearchString 'Test'\n```\n\n----------------------------------------\n\nTITLE: Filter Role Definitions by Display Name - PowerShell\nDESCRIPTION: This example demonstrates how to filter role definitions based on their display name using the `-Filter` parameter with the `startsWith` function.  It returns all role definitions whose display name starts with 'Restricted'.  Requires 'RoleManagement.Read.Directory' and 'EntitlementManagement.Read.All' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirectoryRoleDefinition.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory', 'EntitlementManagement.Read.All'\nGet-EntraBetaDirectoryRoleDefinition -Filter \"startsWith(displayName, 'Restricted')\"\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Administrative Units with -All\nDESCRIPTION: This PowerShell snippet retrieves all deleted administrative units, displaying their properties in a formatted table.  The `-All` parameter ensures all pages of results are returned. Requires 'AdministrativeUnit.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedAdministrativeUnit.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.Read.All'\nGet-EntraDeletedAdministrativeUnit -All | Select-Object Id, DisplayName, MembershipType, Visibility, DeletedDateTime, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get Service Principal by ID - PowerShell\nDESCRIPTION: This example retrieves a specific service principal using its ID. It connects to Entra ID, retrieves a service principal using a filter, and then uses the `ServicePrincipalId` parameter to fetch the specific service principal. The output displays the properties of the retrieved service principal.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipal.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraBetaServicePrincipal -ServicePrincipalId $servicePrincipal.Id\n```\n\n----------------------------------------\n\nTITLE: Get Trusted Certificate Authorities by TrustedIssuerSki\nDESCRIPTION: This example retrieves trusted certificate authorities based on a specific TrustedIssuerSki value. A connection to Entra ID is established using Connect-Entra, and Get-EntraBetaTrustedCertificateAuthority with the -TrustedIssuerSki parameter filters the authorities retrieved.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaTrustedCertificateAuthority.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All'\nGet-EntraBetaTrustedCertificateAuthority -TrustedIssuerSki '4BA2D7AC2A5DF47C70E19E61EDFB4E62B3BF67FD'\n```\n\n----------------------------------------\n\nTITLE: All Parameter Definition in YAML\nDESCRIPTION: This YAML snippet defines the -All parameter (a switch parameter) for a PowerShell cmdlet. Switch parameters are boolean flags. This one indicates if all pages should be listed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAuditSignInLog.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Cloud Authentication Roll-out Policy by ID - PowerShell\nDESCRIPTION: This example retrieves a specific cloud authentication roll-out policy in Microsoft Entra ID using its ID. It retrieves the policy ID using `-Filter` and then uses that ID in the `Get-EntraFeatureRolloutPolicy` cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraFeatureRolloutPolicy.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\n$policy = Get-EntraFeatureRolloutPolicy -Filter \"DisplayName eq 'FeatureRolloutPolicy'\"\nGet-EntraFeatureRolloutPolicy -Id $policy.Id\n```\n\n----------------------------------------\n\nTITLE: Update Identity Provider Display Name - PowerShell\nDESCRIPTION: This PowerShell snippet updates the display name of a specified identity provider. It utilizes the `Set-EntraBetaIdentityProvider` cmdlet. The `-IdentityProviderBaseId` parameter is used to identify the specific identity provider and the `-Name` parameter sets the new display name.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaIdentityProvider.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'IdentityProvider.ReadWrite.All'\nSet-EntraBetaIdentityProvider -IdentityProviderBaseId 'Google-OAuth' -Name 'NewGoogleName'\n```\n\n----------------------------------------\n\nTITLE: Creating Administrative Unit with New-EntraAdministrativeUnit (PowerShell)\nDESCRIPTION: This PowerShell command creates a new administrative unit using the New-EntraAdministrativeUnit cmdlet from the Microsoft.Entra module. It supports parameters like `membershipRule`, `membershipRuleProcessingState`, and `membershipType` based on Microsoft Graph API updates. It depends on the Microsoft.Entra PowerShell module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-EntraAdministrativeUnit\n```\n\n----------------------------------------\n\nTITLE: Get-EntraBetaTrustFrameworkPolicy Syntax - GetById\nDESCRIPTION: This section shows the syntax for the `Get-EntraBetaTrustFrameworkPolicy` cmdlet using the `GetById` parameter set. It requires the `-Id` parameter, and allows specifying an `-OutputFilePath` and `-Property`. It supports common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaTrustFrameworkPolicy.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaTrustFrameworkPolicy\n -Id <String>\n [-OutputFilePath <String>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Extension Properties Output - PowerShell\nDESCRIPTION: This is example output from the command `Get-EntraBetaApplicationExtensionProperty`. It displays the properties for a specified application in Microsoft Entra ID, including the deleted date/time, ID, display name, data type, multi-valued status, whether it's synced from on-premises, the name of the property, and the target objects.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationExtensionProperty.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nDeletedDateTime Id                                   AppDisplayName DataType IsMultiValued IsSyncedFromOnPremises Name                                                    TargetObjects\n--------------- --                                   -------------- -------- ------------- ---------------------- ----                                                    -------------\n                aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb                Boolean  False         False                  extension_c371a443f6734a3e8982a26357fb7d59_NewAttribute {User}\n```\n\n----------------------------------------\n\nTITLE: Get Application Template by Display Name - PowerShell\nDESCRIPTION: This example retrieves application templates filtered by the display name 'Dynamics CRM Online' using the `-Filter` parameter.  It requires the 'Application.Read.All' scope. The command returns application templates that exactly match the specified display name.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplicationTemplate.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraApplicationTemplate -Filter \"DisplayName eq 'Dynamics CRM Online'\"\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Device by DeviceObjectId\nDESCRIPTION: Retrieves a specific deleted device using its DeviceObjectId with the Get-EntraBetaDeletedDevice cmdlet. The output is then filtered to display specific properties and formatted into a table. The DeviceObjectId is a unique identifier for the deleted device.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedDevice.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraBetaDeletedDevice -DeviceObjectId 'cccccccc-2222-3333-4444-dddddddddddd' | Select-Object DeletedDateTime, Id, AccountEnabled, ApproximateLastSignInDateTime, DeviceId, DisplayName, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: ApplicationId Parameter Definition\nDESCRIPTION: This YAML snippet defines the ApplicationId parameter for the Set-EntraBetaApplication cmdlet, specifying its type as String, that it is required, and other attributes related to parameter handling in PowerShell. The ApplicationId specifies the ID of an application in Microsoft Entra ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplication.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Application by ApplicationId - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a specific application by providing its ApplicationId. It first connects to Entra ID using the Connect-Entra cmdlet with the 'Application.Read.All' scope, then uses Get-EntraBetaApplication to retrieve the application based on the provided ApplicationId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplication.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraBetaApplication -ApplicationId 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb'\n```\n\n----------------------------------------\n\nTITLE: Property Parameter - YAML\nDESCRIPTION: YAML definition for the Property parameter, specifying its type, parameter sets, aliases, requirement, position, default value, input acceptance, and wildcard character acceptance properties.  Used to select specific properties to return.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaIdentityProvider.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get list of deleted applications - PowerShell\nDESCRIPTION: Retrieves the list of deleted applications and displays specific properties (Id, AppId, DisplayName, DeletedDateTime, DeletionAgeInDays) in a formatted table. It requires the 'Application.Read.All' scope and uses the Connect-Entra cmdlet for authentication.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedApplication.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraDeletedApplication -Property Id, AppId, DisplayName, DeletedDateTime, DeletionAgeInDays | Select-Object Id, AppId, DisplayName, DeletedDateTime, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: IsActive Parameter - YAML\nDESCRIPTION: This YAML snippet describes the `-IsActive` parameter used in the `Add-EntraBetaCustomSecurityAttributeDefinitionAllowedValue` cmdlet. It indicates whether the predefined value is active or deactivated. If set to false, this predefined value can't be assigned to any other supported directory objects. The parameter is required.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaCustomSecurityAttributeDefinitionAllowedValue.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Boolean\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Default Domain Creation - PowerShell\nDESCRIPTION: This example showcases how to create a new domain and designate it as the default domain for new user creation in Microsoft Entra ID. It leverages the New-EntraBetaDomain cmdlet with the -IsDefault parameter set to $true. The 'Domain.ReadWrite.All' scope is needed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaDomain.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Domain.ReadWrite.All'\nNew-EntraBetaDomain -Name test22.com -IsDefault $true\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId          AuthenticationType AvailabilityStatus IsAdminManaged IsDefault IsInitial IsRoot IsVerified PasswordNotificationWindowInDays\n--          ------------------ ------------------ -------------- --------- --------- ------ ---------- --------------------------------\ntest22.com  Managed                               True           False     False     False  False      13\n```\n\n----------------------------------------\n\nTITLE: Create a TokenLifetimePolicy\nDESCRIPTION: Shows how to create a TokenLifetimePolicy to configure the access token lifetime. The example connects to Entra ID, defines a policy with a specified AccessTokenLifetime, and creates the policy using the New-EntraBetaPolicy cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaPolicy.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ApplicationConfiguration'\n$definition = @('{\"TokenLifetimePolicy\":{\"Version\":1,\"AccessTokenLifetime\":\"8:00:00\"}}')\nNew-EntraBetaPolicy -Definition $definition -DisplayName 'TokenLifetimePolicy' -Type 'TokenLifetimePolicy' -IsOrganizationDefault $false\n```\n\nLANGUAGE: powershell\nCODE:\n```\nDefinition                                                              DeletedDateTime Description DisplayName          Id                                   IsOrganizatio\n                                                                                                                                                              nDefault\n----------                                                              --------------- ----------- -----------          --                                   -------------\n{{\"TokenLifetimePolicy\":{\"Version\":1,\"AccessTokenLifetime\":\"8:00:00\"}}}                             TokenLifetimePolicy aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb False\n```\n\n----------------------------------------\n\nTITLE: Connect to Entra ID with PowerShell\nDESCRIPTION: This command establishes a connection to Microsoft Entra ID using the Microsoft Entra PowerShell module, requesting the 'Group.ReadWrite.All' scope to allow read and write access to group resources. It requires the Microsoft Entra PowerShell module to be installed and the user to have appropriate permissions to connect.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-groups.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All' \n```\n\n----------------------------------------\n\nTITLE: Set-EntraBetaUserSponsor Syntax\nDESCRIPTION: This code snippet shows the syntax for the Set-EntraBetaUserSponsor cmdlet. It includes the parameters -UserId, -Type, and -SponsorIds. The cmdlet is used to set a user's sponsors, which can be users or groups. It requires the Microsoft.Entra.Beta module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUserSponsor.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-EntraBetaUserSponsor\n -UserId <String>\n -Type <String>\n -SponsorIds <String[]>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Invite New External User with User Type\nDESCRIPTION: This example demonstrates setting the user type of the invited user to 'Guest' using the -InvitedUserType parameter of the New-EntraBetaInvitation cmdlet. Requires the 'User.Invite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaInvitation.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Invite.All'\n$emailAddress = 'someexternaluser@externaldomain.com'\n$sendInvitationMessage = $True\n$redirectUrl = 'https://myapps.contoso.com'\n$userType = 'Guest'\nNew-EntraBetaInvitation -InvitedUserEmailAddress $emailAddress -SendInvitationMessage $sendInvitationMessage -InviteRedirectUrl $redirectUrl -InvitedUserType $userType\n```\n\n----------------------------------------\n\nTITLE: Search String Parameter Definition in YAML\nDESCRIPTION: This YAML snippet defines the `-SearchString` parameter for a PowerShell cmdlet. It specifies the data type as `System.String`, indicates that it's optional, and allows pipeline input by property name or value.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplication.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: GetVague\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: List Non-Compliant Devices - EntraBetaDevice - PowerShell\nDESCRIPTION: This example shows how to retrieve a list of devices that are marked as non-compliant. It requires the 'Device.Read.All' scope and uses the Get-EntraBetaDevice cmdlet with the -Filter parameter to filter devices where `isCompliant` is equal to `false`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDevice.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraBetaDevice -Filter \"isCompliant eq false\"\n```\n\n----------------------------------------\n\nTITLE: Registering an Application in Microsoft Entra ID\nDESCRIPTION: This code snippet demonstrates how to register a new application in Microsoft Entra ID using the `New-EntraApplication` cmdlet. It requires the `Application.ReadWrite.All` scope. The application is created with the specified display name and is assigned a unique ID and AppId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-apps.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All'\nNew-EntraApplication -DisplayName 'My new application'\n```\n\n----------------------------------------\n\nTITLE: Retrieving cloud authentication roll-out policy by Search String - PowerShell\nDESCRIPTION: This example demonstrates retrieving a cloud authentication roll-out policy using a search string. It connects to Entra and then uses `Get-EntraBetaFeatureRolloutPolicy` with the `-SearchString` parameter to find policies matching the provided search term.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaFeatureRolloutPolicy.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\nGet-EntraBetaFeatureRolloutPolicy -SearchString 'Feature-Rollout-Policytest'\n```\n\n----------------------------------------\n\nTITLE: Connect to Microsoft Entra in a National Cloud - PowerShell\nDESCRIPTION: This PowerShell snippet shows how to connect to Microsoft Entra ID in a national cloud environment, specifically Azure China 21Vianet.  The `-Environment` parameter specifies the target environment.  This is necessary for accounts in sovereign clouds to ensure data residency and compliance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/authentication-scenarios.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Environment China\n```\n\n----------------------------------------\n\nTITLE: Get Service Principal by Display Name - PowerShell\nDESCRIPTION: This example retrieves a service principal by its display name using the `-Filter` parameter. It connects to Entra ID and uses `Get-EntraBetaServicePrincipal` with a filter on the DisplayName property. The output displays the properties of the retrieved service principal.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipal.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraBetaServicePrincipal -Filter \"DisplayName eq 'Helpdesk Application'\"\n```\n\n----------------------------------------\n\nTITLE: Custom Security Attribute Definition ID Parameter\nDESCRIPTION: Defines the `-Id` parameter for the `Get-EntraBetaCustomSecurityAttributeDefinition` cmdlet, which specifies the unique identifier of a Microsoft Entra ID custom security attribute definition object. It's required for the `GetById` parameter set and accepts pipeline input.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaCustomSecurityAttributeDefinition.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: GetById\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Filter Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the -Filter parameter for the Get-EntraDirectoryRole cmdlet. It specifies the parameter's type, parameter set, aliases, requirement status, position, default value, input acceptance, and wildcard character support.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDirectoryRole.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: GetQuery\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: ManagedGroupTypes Parameter (YAML)\nDESCRIPTION: Describes the -ManagedGroupTypes parameter for the New-EntraBetaGroupLifecyclePolicy cmdlet. This parameter allows the admin to select which Office 365 groups the policy applies to. Possible values include 'None', 'All', and 'Selected'.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaGroupLifecyclePolicy.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Defining SignInNames Parameter in YAML\nDESCRIPTION: This YAML snippet defines the SignInNames parameter for a PowerShell cmdlet. It specifies the data type, parameter set, aliases, required status, position, default value, pipeline input, and wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUser.md#_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.SignInName]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Remove-EntraContact Syntax - PowerShell\nDESCRIPTION: This code snippet shows the syntax for the Remove-EntraContact cmdlet. It highlights the required -OrgContactId parameter, which specifies the object ID of the contact to be removed.  It also shows the inclusion of CommonParameters which are supported by all cmdlets. The OrgContactId parameter is a String.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraContact.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraContact\n -OrgContactId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Set-EntraUser Syntax\nDESCRIPTION: This code snippet displays the syntax for the `Set-EntraUser` cmdlet, including all available parameters. It lists the required and optional parameters, their types, and aliases. Understanding the syntax is crucial for using the cmdlet correctly and updating user properties effectively.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUser.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-EntraUser\n -UserId <String>\n [-PostalCode <String>]\n [-CompanyName <String>]\n [-GivenName <String>]\n [-Mobile <String>]\n [-PreferredLanguage <String>]\n [-CreationType <String>]\n [-UsageLocation <String>]\n [-UserType <String>]\n [-AgeGroup <String>]\n [-MailNickName <String>]\n [-ExtensionProperty <System.Collections.Generic.Dictionary`2[System.String,System.String]>] \n [-ConsentProvidedForMinor <String>]\n [-ImmutableId <String>]\n [-Country <String>]\n [-SignInNames <System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.SignInName]>] \n [-Department <String>]\n [-StreetAddress <String>]\n [-PasswordPolicies <String>]\n [-JobTitle <String>]\n [-City <String>]\n [-OtherMails <System.Collections.Generic.List`1[System.String]>] \n [-UserPrincipalName <String>]\n [-DisplayName <String>]\n [-AccountEnabled <Boolean>]\n [-PasswordProfile <PasswordProfile>]\n [-State <String>]\n [-TelephoneNumber <String>]\n [-Surname <String>]\n [-ShowInAddressList <Boolean>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Filter Parameter Definition - YAML\nDESCRIPTION: This YAML defines the `-Filter` parameter for a PowerShell cmdlet. It accepts an OData v4.0 filter statement as a string, is not required, and supports pipeline input via property name or value, but does not accept wildcard characters.  This parameter controls which objects are returned.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAuditDirectoryLog.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Remove Trust Framework Policy - PowerShell\nDESCRIPTION: This snippet demonstrates how to delete a specified trust framework policy using the `Remove-EntraBetaTrustFrameworkPolicy` cmdlet. It requires connecting to Entra ID with the appropriate scopes and specifying the policy's ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaTrustFrameworkPolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraBetaTrustFrameworkPolicy\n -Id <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get-EntraBetaDirectorySettingTemplate Syntax (GetQuery)\nDESCRIPTION: This shows the syntax for the GetQuery parameter set of the Get-EntraBetaDirectorySettingTemplate cmdlet. It allows retrieving directory setting templates. The `-Property` parameter specifies properties to return.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirectorySettingTemplate.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaDirectorySettingTemplate\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: PermissionName Parameter Definition - YAML\nDESCRIPTION: This YAML defines the -PermissionName parameter for the Add-EntraBetaServicePrincipalDelegatedPermissionClassification cmdlet. It specifies the data type, whether it's required, accepted pipeline input, and whether wildcard characters are allowed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaServicePrincipalDelegatedPermissionClassification.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Feature Rollout Policy (GetQuery Syntax) - PowerShell\nDESCRIPTION: This syntax retrieves all cloud authentication rollout policies. It uses the default GetQuery parameter set, optionally allowing filtering and property selection. The cmdlet returns a list of FeatureRolloutPolicy objects.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraFeatureRolloutPolicy.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraFeatureRolloutPolicy\n [-Filter <String>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Revoke User Refresh Tokens - Output\nDESCRIPTION: This shows the expected output when the Revoke-EntraUserAllRefreshToken cmdlet executes successfully in PowerShell. It confirms that the refresh tokens have been revoked for the specified user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Revoke-EntraUserAllRefreshToken.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nValue\n-----\nTrue\n```\n\n----------------------------------------\n\nTITLE: Enable-EntraBetaGlobalSecureAccessTenant Output\nDESCRIPTION: This snippet shows the expected output after successfully enabling Global Secure Access for a tenant.  It displays the @odata.context, the onboardingStatus which will be 'onboarded', and an empty onboardingErrorMessage if the operation was successful.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Enable-EntraBetaGlobalSecureAccessTenant.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n@odata.context         : https://graph.microsoft.com/beta/$metadata#networkAccess/tenantStatus/$entity\nonboardingStatus       : onboarded\nonboardingErrorMessage :\n```\n\n----------------------------------------\n\nTITLE: Example Output - PowerShell\nDESCRIPTION: This example showcases the output of the `Get-EntraBetaPolicyAppliedObject` cmdlet. It returns a list of IDs and DeletedDateTime values. The example shows two IDs, indicating successful retrieval of policy-applied object information.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPolicyAppliedObject.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nId                                   DeletedDateTime\n--                                   ---------------\naaaaaaaa-1111-1111-1111-000000000000\nbbbbcccc-1111-dddd-2222-eeee3333ffff\n```\n\n----------------------------------------\n\nTITLE: Get Directory Objects by Type - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve directory objects of a specific type using the `Get-EntraBetaDirectoryObject` cmdlet. It uses a list of object IDs and the `-ObjectTypes` parameter to filter the results. It selects and displays the Id, DisplayName and '@odata.type' properties. Requires the 'Directory.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirectoryObject.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\nGet-EntraBetaDirectoryObject -DirectoryObjectIds 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb', 'bbbbbbbb-1111-2222-3333-cccccccccccc' -ObjectTypes 'User' |\nSelect-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Configuring TokenEncryptionKeyId Parameter\nDESCRIPTION: This parameter specifies the keyId of a public key from the keyCredentials collection. When configured, Microsoft Entra ID encrypts all tokens using this key. The application code must use the matching private key to decrypt the token.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplication.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Set User Usage Location PowerShell\nDESCRIPTION: This example sets the usage location for a user, which is crucial for license assignment. It requires 'User.ReadWrite.All' scope. The -UsageLocation parameter takes a two-letter ISO 3166 country code, e.g., US, JP, GB.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUser.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nSet-EntraBetaUser -UserId 'SawyerM@contoso.com' -UsageLocation 'US'\n```\n\n----------------------------------------\n\nTITLE: Get Partner Information by Tenant ID\nDESCRIPTION: Retrieves partner-specific information for a given TenantId. Requires the user to be connected to Entra ID with appropriate permissions. `-TenantId` Parameter specifies unique ID of the tenant to perform the operation on.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPartnerInformation.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaPartnerInformation\n [-TenantId <Guid>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Assign delegated permissions - PowerShell\nDESCRIPTION: Assigns delegated permissions to the application by creating an OAuth2 permission grant. This enables the application to act on behalf of a user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/create-custom-application.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\n$delegatedPermission = 'User.Read.All'\n$graphApiId = '00000003-0000-0000-c000-000000000000'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"DisplayName eq '$appName'\"\n$graphServicePrincipal = Get-EntraServicePrincipal -Filter \"AppId eq '$graphApiId'\"\n\n# Grant OAuth2 permission\nNew-EntraOauth2PermissionGrant -ClientId $servicePrincipal.Id -ConsentType 'AllPrincipals' -ResourceId $graphServicePrincipal.Id -Scope $delegatedPermission\n```\n\n----------------------------------------\n\nTITLE: Get Contracts with GetQuery - PowerShell\nDESCRIPTION: Retrieves contract information using the GetQuery syntax. Allows filtering and specifying the maximum number of records to return. Requires the 'Directory Readers' role in delegated scenarios.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraContract.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraContract\n [-Top <Int32>]\n [-All]\n [-Filter <String>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove Verified Publisher from Application - PowerShell\nDESCRIPTION: This PowerShell code snippet demonstrates how to remove the verified publisher from a Microsoft Entra application. It requires the 'Application.ReadWrite.All' scope.  It first connects to Entra ID, retrieves the application object by its display name, and then removes the verified publisher using the `Remove-EntraApplicationVerifiedPublisher` cmdlet. The `-AppObjectId` parameter specifies the application's unique identifier.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraApplicationVerifiedPublisher.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All'\n$application = Get-EntraApplication -Filter \"displayName eq 'Contoso Helpdesk Application'\"\nRemove-EntraApplicationVerifiedPublisher -AppObjectId $application.Id\n```\n\n----------------------------------------\n\nTITLE: Reset Redemption for External User\nDESCRIPTION: This example shows how to reset the redemption status for an external user using the -ResetRedemption parameter set to $True. This forces the user to re-redeem the invitation to access resources. It also utilizes the -InvitedUserEmailAddress, -SendInvitationMessage, -InviteRedirectUrl and -InvitedUserDisplayName parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaInvitation.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Invite.All'\n$emailAddress = 'someexternaluser@externaldomain.com'\n$sendInvitationMessage = $True\n$redirectUrl = 'https://myapps.constoso.com'\n$displayName = 'microsoftuser'\n$resetRedemption = $True\nNew-EntraBetaInvitation -InvitedUserEmailAddress $emailAddress -SendInvitationMessage $sendInvitationMessage -InviteRedirectUrl $redirectUrl -InvitedUserDisplayName $displayName -ResetRedemption $resetRedemption\n```\n\n----------------------------------------\n\nTITLE: Retrieve top two contacts objects in the directory - PowerShell\nDESCRIPTION: This example retrieves the top two contact objects from the Microsoft Entra directory using the `-Top` parameter. It connects to Entra ID with the 'OrgContact.Read.All' scope.  The `Get-EntraContact -Top 2` cmdlet retrieves the first two contacts found in the directory.  The `-Limit` parameter can be used as an alias for `-Top`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraContact.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'OrgContact.Read.All'\nGet-EntraContact -Top 2\n```\n\n----------------------------------------\n\nTITLE: New-EntraApplicationKeyCredential Syntax PowerShell\nDESCRIPTION: This snippet shows the syntax for the `New-EntraApplicationKeyCredential` cmdlet. It takes parameters such as ApplicationId, CustomKeyIdentifier, Type, Usage, Value, EndDate, and StartDate to create a new key credential for an application.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplicationKeyCredential.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-EntraApplicationKeyCredential\n -ApplicationId <String>\n [-CustomKeyIdentifier <String>]\n [-Type <KeyType>]\n [-Usage <KeyUsage>]\n [-Value <String>]\n [-EndDate <DateTime>]\n [-StartDate <DateTime>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get All Service Principal Created Objects\nDESCRIPTION: Retrieves all objects created by a service principal using the Get-EntraServicePrincipalCreatedObject cmdlet with the -All parameter. Requires connecting to Entra ID with the 'Application.Read.All' scope and retrieving the service principal by display name to obtain its ID. The ServicePrincipalId parameter specifies the ID of the service principal.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalCreatedObject.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraServicePrincipalCreatedObject -ServicePrincipalId $servicePrincipal.Id -All\n```\n\n----------------------------------------\n\nTITLE: Retrieve a Policy-Applied Object - PowerShell\nDESCRIPTION: This PowerShell example demonstrates how to retrieve a policy-applied object from Microsoft Entra ID. It first connects to Entra ID with specific scopes, then uses the `Get-EntraBetaPolicyAppliedObject` cmdlet with the `-Id` parameter to specify the policy ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPolicyAppliedObject.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All', 'Policy.ReadWrite.ApplicationConfiguration'\nGet-EntraBetaPolicyAppliedObject -Id 'bbbbbbbb-1111-2222-3333-cccccccccccc'\n```\n\n----------------------------------------\n\nTITLE: Set-EntraBetaDomain Syntax - PowerShell\nDESCRIPTION: The syntax for the Set-EntraBetaDomain cmdlet, showing the parameters it accepts, including Name, IsDefault, and SupportedServices. It updates a verified domain in Microsoft Entra ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaDomain.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-EntraBetaDomain\n -Name <String>\n [-IsDefault <Boolean>]\n [-SupportedServices <System.Collections.Generic.List`1[System.String]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Object Setting (Query)\nDESCRIPTION: Retrieves object settings from Microsoft Entra ID based on TargetType and TargetObjectId. It supports pagination using the -Top parameter and property selection using the -Property parameter. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaObjectSetting.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaObjectSetting\n -TargetType <String>\n -TargetObjectId <String>\n [-Top <Int32>]\n [-All]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Update IP Named Location Policy - PowerShell\nDESCRIPTION: This example updates an IP named location policy in Microsoft Entra ID by PolicyId. It connects to Entra, retrieves a specific named location policy by display name, creates an IP range object, and then uses Set-EntraNamedLocationPolicy to update the policy with the specified parameters, including PolicyId, OdataType, IsTrusted, IncludeUnknownCountriesAndRegions, and IpRanges.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraNamedLocationPolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ConditionalAccess'\n$policy = Get-EntraNamedLocationPolicy | Where-Object { \"$_.DisplayName -eq 'IP named location policy'\" }\n$ipRanges = New-Object -TypeName Microsoft.Open.MSGraph.Model.IpRange\n$ipRanges.cidrAddress = '6.5.4.3/32'\n$type = '#microsoft.graph.ipNamedLocation'\nSet-EntraNamedLocationPolicy -PolicyId $policy.Id -OdataType $type -IsTrusted $false -IncludeUnknownCountriesAndRegions $false -IpRanges $ipRanges\n```\n\n----------------------------------------\n\nTITLE: Defining MembershipRuleProcessingState Parameter in YAML\nDESCRIPTION: Defines the MembershipRuleProcessingState parameter in YAML, used to control the rule processing state of a dynamic group. It allows pausing or resuming rule processing without changing the group's membership.  Valid values are \"On\" and \"Paused\".\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaGroup.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Definition of -ClientTimeout Parameter in YAML\nDESCRIPTION: Defines the -ClientTimeout parameter, which sets the HTTP client timeout in seconds. It specifies the type as System.Double, indicates that it is not required, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Connect-Entra.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Double\nParameter Sets: (All)\nAliases: \nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: List Application App Roles - PowerShell\nDESCRIPTION: This example retrieves the app roles associated with a specific application. It first gets the application by searching for its name, then accesses the AppRoles property and formats the output into a table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplication.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$application = Get-EntraBetaApplication -SearchString 'Contoso Helpdesk Application'\n$application.AppRoles | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Property Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the -Property parameter for the Get-EntraDirectoryRole cmdlet. It specifies the parameter's type, parameter sets, aliases, requirement status, position, default value, input acceptance, and wildcard character support.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDirectoryRole.md#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Devices with All Parameters\nDESCRIPTION: Retrieves a list of all deleted devices using the Get-EntraBetaDeletedDevice cmdlet with the -All parameter. The output is then filtered to display specific properties using Select-Object and formatted into a table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedDevice.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraBetaDeletedDevice -All | Select-Object DeletedDateTime, Id, AccountEnabled, ApproximateLastSignInDateTime, DeviceId, DisplayName, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Add Service Principal Policy Syntax - PowerShell\nDESCRIPTION: This code block shows the syntax for the `Add-EntraBetaServicePrincipalPolicy` cmdlet. It requires the `-Id` (Service Principal ID) and `-RefObjectId` (Policy ID) parameters to specify the service principal and the policy to be added. It also supports common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaServicePrincipalPolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-EntraBetaServicePrincipalPolicy\n -Id <String>\n -RefObjectId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Defining Persistent Cookie Parameter in YAML\nDESCRIPTION: This YAML snippet defines the `-IsPersistentCookieEnabled` parameter as a boolean, enabling persistent cookies that don't expire when the browser is closed. Persistence lasts until token expires or user deletes the cookie.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplicationProxyApplication.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Boolean\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Named Location Policy Syntax by ID PowerShell\nDESCRIPTION: This syntax shows how to retrieve a named location policy by its ID. It requires the 'PolicyId' parameter and takes an optional 'Property' parameter to select specific properties to return. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaNamedLocationPolicy.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaNamedLocationPolicy\n -PolicyId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Inbound Sign-in Events - PowerShell\nDESCRIPTION: This example retrieves sign-in events where external users accessed the local tenant.  It requires 'AuditLog.Read.All' and 'Directory.Read.All' scopes.  The `-AccessDirection` parameter is set to `Inbound` to filter results.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaCrossTenantAccessActivity.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All', 'Directory.Read.All'\nGet-EntraBetaCrossTenantAccessActivity -AccessDirection Inbound\n```\n\n----------------------------------------\n\nTITLE: Get deleted users by display name using -Filter\nDESCRIPTION: This PowerShell snippet retrieves deleted users based on a specific display name using the `-Filter` parameter with an OData v4.0 filter statement.  It displays the result in a formatted table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedUser.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraBetaDeletedUser -Filter \"displayName eq 'Avery Smith'\" | Select-Object Id, UserPrincipalName, DisplayName, AccountEnabled, DeletedDateTime, DeletionAgeInDays, UserType | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Retrieve Top N Application Role Assignments - PowerShell\nDESCRIPTION: This example retrieves the top three application role assignments for a service principal.  It connects to Entra ID, gets the service principal, and then uses the `-Top 3` parameter to limit the results.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalAppRoleAssignment.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraBetaServicePrincipalAppRoleAssignment -ServicePrincipalId $servicePrincipal.Id -Top 3\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                          AppRoleId                            CreationTimestamp   PrincipalDisplayName PrincipalId                          PrincipalType ResourceDisplayName ResourceId\n--                                          ---------                            -----------------   -------------------- -----------                          ------------- ------------------- ----------\n1aaaaaa1-2bb2-3cc3-4dd4-5eeeeeeeeee5 00000000-0000-0000-0000-000000000000 07-07-2023 17:03:59 MOD Administrator    aaaaaaaa-bbbb-cccc-1111-222222222222 User          ProvisioningPowerBi 021510b7-e753-40…\n2bbbbbb2-3cc3-4dd4-5ee5-6ffffffffff6 00000000-0000-0000-0000-000000000000 07-07-2023 17:03:59 MOD Administrator    aaaaaaaa-bbbb-cccc-1111-222222222222 User1          ProvisioningPowerBi 021510b7-e753-40…\n3cccccc3-4dd4-5ee5-6ff6-7aaaaaaaaaa7 00000000-0000-0000-0000-000000000000 07-07-2023 17:03:59 MOD Administrator    aaaaaaaa-bbbb-cccc-1111-222222222222 User2          ProvisioningPowerBi 021510b7-e753-40…\n```\n\n----------------------------------------\n\nTITLE: Get Object Setting by ID\nDESCRIPTION: Retrieves a specific object setting from Microsoft Entra ID based on its ID, TargetType, and TargetObjectId. It supports property selection using the -Property parameter. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaObjectSetting.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaObjectSetting\n -Id <String>\n -TargetType <String>\n -TargetObjectId <String>\n [-All]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Directory Role with Filter (displayName) - PowerShell\nDESCRIPTION: This snippet demonstrates how to retrieve a specific directory role by its display name using the Get-EntraDirectoryRole cmdlet with the -Filter parameter. It connects to Entra ID and then retrieves the role with the specified displayName.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDirectoryRole.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory'\nGet-EntraDirectoryRole -Filter \"displayName eq 'Helpdesk Administrator'\"\n```\n\n----------------------------------------\n\nTITLE: Get Trusted Certificate Authorities\nDESCRIPTION: This example retrieves all trusted certificate authorities defined in the Microsoft Entra ID directory. It first connects to Entra ID using the Connect-Entra cmdlet with the 'Organization.Read.All' scope and then uses Get-EntraBetaTrustedCertificateAuthority to fetch the authorities.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaTrustedCertificateAuthority.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All'\nGet-EntraBetaTrustedCertificateAuthority\n```\n\n----------------------------------------\n\nTITLE: Update Application IdentifierUris (Example 2)\nDESCRIPTION: This example shows how to update an application's IdentifierUris property. It connects to Entra, retrieves the application, and then uses Set-EntraBetaApplication with the -IdentifierUris parameter to update the URI.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplication.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraBetaApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\nSet-EntraBetaApplication -ApplicationId $application.Id -IdentifierUris 'https://mynewapp.contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Parameter in YAML\nDESCRIPTION: This YAML snippet defines the `-Environment` parameter for a PowerShell cmdlet. The `Type` is `System.String` and is used to select the national cloud environment. Aliases `EnvironmentName` and `NationalCloud` are defined.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Connect-Entra.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nType:  System.String\nParameter Sets: (All)\nAliases: EnvironmentName, NationalCloud\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: YAML Parameter Definition for -Filter\nDESCRIPTION: Defines the YAML structure and properties for the `-Filter` parameter within the Get-EntraBetaDeletedAdministrativeUnit cmdlet. This parameter is used to retrieve only those deleted administrative units that satisfy the specified filter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedAdministrativeUnit.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: GetQuery\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get-EntraScopedRoleMembership Syntax - PowerShell\nDESCRIPTION: This displays the syntax for the `Get-EntraScopedRoleMembership` cmdlet in PowerShell. It shows the parameters that can be used with the cmdlet: `-AdministrativeUnitId`, `-ScopedRoleMembershipId`, and `-Property`. It also indicates the availability of common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraScopedRoleMembership.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraScopedRoleMembership\n -AdministrativeUnitId <String>\n [-ScopedRoleMembershipId <String>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: List five recently created users - PowerShell\nDESCRIPTION: This script retrieves the five most recently created users. It retrieves all users, sorts them by 'createdDateTime' in descending order, and selects the first five.  The selected properties are then displayed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUser.md#_snippet_16\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraUser -All | Sort-Object -Property createdDateTime -Descending | Select-Object -First 5\n```\n\n----------------------------------------\n\nTITLE: Create Role Definition (PowerShell)\nDESCRIPTION: Creates a new role definition in Microsoft Entra ID. It first connects to Entra with necessary scopes, then creates a RolePermission object, and finally creates the role definition using `New-EntraBetaDirectoryRoleDefinition`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaDirectoryRoleDefinition.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory'\n$rolePermissions = New-object Microsoft.Open.MSGraph.Model.RolePermission\n$rolePermissions.AllowedResourceActions = @(\"microsoft.directory/applications/basic/read\")\nNew-EntraBetaDirectoryRoleDefinition -RolePermissions $rolePermissions -IsEnabled $false -DisplayName 'MyRoleDefinition'\n```\n\n----------------------------------------\n\nTITLE: Set-EntraBetaAppRoleToApplicationUser Syntax (ExportResults)\nDESCRIPTION: Shows the syntax for the Set-EntraBetaAppRoleToApplicationUser command when exporting results. It includes the required parameters DataSource, FilePath, and ApplicationName, as well as optional parameters SignInAudience, Export, ExportFilePath, and CommonParameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaAppRoleToApplicationUser.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-EntraBetaAppRoleToApplicationUser\n -DataSource <String>\n -FilePath <System.IO.FileInfo>\n -ApplicationName <String>\n [-SignInAudience <String>]\n [-Export]\n [-ExportFilePath <System.IO.FileInfo>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Summary Statistics - PowerShell\nDESCRIPTION: This example displays summary statistics for external tenants in a table format. It requires 'AuditLog.Read.All' and 'Directory.Read.All' scopes. The `-SummaryStats` parameter provides aggregated information about sign-in events.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaCrossTenantAccessActivity.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All', 'Directory.Read.All'\nGet-EntraBetaCrossTenantAccessActivity -SummaryStats | Format-Table\n```\n\n----------------------------------------\n\nTITLE: Get Role Settings by ID - PowerShell\nDESCRIPTION: Retrieves a specific role setting using the Get-EntraBetaPrivilegedRoleSetting cmdlet with a specified ProviderId and Id. Requires the 'PrivilegedAccess.Read.AzureAD', 'PrivilegedAccess.Read.AzureResources' and 'PrivilegedAccess.Read.AzureADGroup' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPrivilegedRoleSetting.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'PrivilegedAccess.Read.AzureAD', 'PrivilegedAccess.Read.AzureResources' 'PrivilegedAccess.Read.AzureADGroup'\n$params = @{\n    ProviderId = 'aadRoles'\n    Id = 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb'\n}\nGet-EntraBetaPrivilegedRoleSetting @params\n```\n\n----------------------------------------\n\nTITLE: Get List of Deleted Devices\nDESCRIPTION: Retrieves a list of deleted devices. Connects to Entra with the specified scopes, then uses the Get-EntraBetaDeletedDevice cmdlet to retrieve all deleted devices. It selects specified properties and formats the output in a table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedDevice.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraBetaDeletedDevice -All | Select-Object DeletedDateTime, Id, AccountEnabled, ApproximateLastSignInDateTime, DeviceId, DisplayName, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Set Application Logo with FilePath - PowerShell\nDESCRIPTION: Sets the logo for an Azure AD application using the `-FilePath` parameter, which specifies the file path to the image. Requires the ApplicationId of the application. File uploads must be smaller than 500KB. Requires the Microsoft.Entra module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraApplicationLogo.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-EntraApplicationLogo\n -ApplicationId <String>\n -FilePath <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Defining PasswordProfile Property in YAML\nDESCRIPTION: Defines the PasswordProfile property which specifies the user's password profile. It specifies the data type, parameter set, aliases, required status, position, default value, and pipeline input/wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUser.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nType: PasswordProfile\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Defining JobTitle Parameter in YAML\nDESCRIPTION: This YAML snippet defines the JobTitle parameter for a PowerShell cmdlet. It specifies the data type, parameter set, aliases, required status, position, default value, pipeline input, and wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUser.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Defining Surname Parameter in YAML\nDESCRIPTION: This YAML snippet defines the Surname parameter for a PowerShell cmdlet. It specifies the data type, parameter set, aliases, required status, position, default value, pipeline input, and wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUser.md#_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Finding Deleted Service Principals using Get-EntraDeletedServicePrincipal in PowerShell\nDESCRIPTION: This snippet details how to find deleted service principals using the `Get-EntraDeletedServicePrincipal` cmdlet. It requires the `Application.Read.All` scope. The snippet retrieves soft-deleted service principals, allowing for filtering by display name.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/recover-deleted-data.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraDeletedServicePrincipal -All\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraDeletedServicePrincipal -Filter \"displayName eq 'Contoso Fieldglass'\"\n```\n\n----------------------------------------\n\nTITLE: Defining PostalCode Property in YAML\nDESCRIPTION: Defines the PostalCode property which specifies the user's postal code. It specifies the data type, parameter set, aliases, required status, position, default value, and pipeline input/wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUser.md#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Defining UserPrincipalName Parameter in YAML\nDESCRIPTION: This YAML snippet defines the UserPrincipalName parameter for a PowerShell cmdlet. It specifies the data type, parameter set, aliases, required status, position, default value, pipeline input, and wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUser.md#_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Authorization Policy by ID - Example - PowerShell\nDESCRIPTION: This example shows how to retrieve a specific authorization policy by its ID and format the output as a list. It connects to Entra with the 'Policy.Read.All' scope and uses the `Get-EntraBetaAuthorizationPolicy` cmdlet with the `-Id` parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAuthorizationPolicy.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.All'\nGet-EntraBetaAuthorizationPolicy -Id 'authorizationPolicy' | Format-List\n```\n\n----------------------------------------\n\nTITLE: Defining UserType Parameter in YAML\nDESCRIPTION: This YAML snippet defines the UserType parameter for a PowerShell cmdlet. It specifies the data type, parameter set, aliases, required status, position, default value, pipeline input, and wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUser.md#_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Retrieve All Service Principal Memberships - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all memberships of a service principal using the -All parameter. It requires connecting to Entra ID with the appropriate scopes and retrieving the ServicePrincipal ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalMembership.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraServicePrincipalMembership -ServicePrincipalId $ServicePrincipal.Id -All | Select-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: UserId Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the `-UserId` parameter for the `Get-EntraBetaUserExtension` cmdlet.  It specifies that the parameter is a string type, required, accepts pipeline input by property name or value, and does not accept wildcard characters. It is used to identify the user to get extension attributes from.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserExtension.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId, UPN, Identity, UserPrincipalName\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get-EntraPermissionGrantConditionSet Syntax - PowerShell\nDESCRIPTION: This shows the syntax for the Get-EntraPermissionGrantConditionSet cmdlet with two parameter sets: GetQuery (Default) and GetById. It details the required parameters (-ConditionSetType, -PolicyId, and -Id for GetById) and optional parameters (-Property) and CommonParameters. The cmdlet is used to retrieve permission grant condition sets from Microsoft Entra ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraPermissionGrantConditionSet.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraPermissionGrantConditionSet\n -ConditionSetType <String>\n -PolicyId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraPermissionGrantConditionSet\n -ConditionSetType <String>\n -Id <String>\n -PolicyId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Property Parameter Definition - YAML\nDESCRIPTION: Details the Property parameter for the Get-EntraContactManager cmdlet.  It specifies which properties to be returned.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraContactManager.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Password Policy Syntax - GetById\nDESCRIPTION: Defines the syntax for retrieving the password policy for a specific domain.  It utilizes the Get-EntraBetaPasswordPolicy cmdlet with the mandatory -DomainName parameter, accepting a string representing the fully qualified domain name, along with optional CommonParameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPasswordPolicy.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaPasswordPolicy\n -DomainName <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Authorization Policy by ID - PowerShell\nDESCRIPTION: This cmdlet retrieves a specific authorization policy based on its ID. It requires the 'Policy.Read.All' scope.  The `-Id` parameter specifies the unique identifier of the authorization policy.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAuthorizationPolicy.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaAuthorizationPolicy\n -Id <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove User Manager Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Remove-EntraUserManager cmdlet. The cmdlet requires the UserId parameter to specify the user whose manager should be removed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraUserManager.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraUserManager\n -UserId <String>\n```\n\n----------------------------------------\n\nTITLE: Get Top Sponsor - PowerShell\nDESCRIPTION: This example retrieves the top (first) sponsor for a specific user. It connects to Entra ID with the 'User.Read.All' scope, then uses Get-EntraUserSponsor with the `-Top` parameter to limit the results to one, selects specific properties, and formats the output as a table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserSponsor.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraUserSponsor -UserId 'SawyerM@contoso.com' -Top 1 |\nSelect-Object Id, DisplayName, '@odata.type', CreatedDateTime | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get Identity Provider by ID - PowerShell\nDESCRIPTION: This PowerShell snippet retrieves the properties for a specified identity provider using its unique identifier. It connects to Entra ID with the required scopes and then uses the Get-EntraBetaIdentityProvider cmdlet with the -IdentityProviderBaseId parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaIdentityProvider.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'IdentityProvider.Read.All'\nGet-EntraBetaIdentityProvider -IdentityProviderBaseId 'Google-OAUTH'\n```\n\n----------------------------------------\n\nTITLE: Create Entra Group with Description\nDESCRIPTION: This example demonstrates how to create a new Microsoft Entra ID group with a description using the New-EntraGroup cmdlet. It connects to Entra ID and defines parameters, including a description for the group.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraGroup.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All','Group.Create'\n$params = @{\n    DisplayName = 'HelpDesk admin group'\n    MailEnabled = $false\n    MailNickname = 'helpDeskAdminGroup'\n    SecurityEnabled = $true\n    Description = 'Group assignable to role'\n}\n\nNew-EntraGroup @params\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDisplayName          Id                                   MailNickname       Description              GroupTypes\n-----------          --                                   ------------       -----------              ----------\nHelpDesk admin group zzzzzzzz-6666-8888-9999-pppppppppppp helpDeskAdminGroup Group assignable to role {}\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Devices with Top Parameter\nDESCRIPTION: Retrieves the top two deleted devices using the Get-EntraBetaDeletedDevice cmdlet with the -Top parameter. The output is then filtered to display specific properties and formatted into a table.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedDevice.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraBetaDeletedDevice -Top 2 | Select-Object DeletedDateTime, Id, AccountEnabled, ApproximateLastSignInDateTime, DeviceId, DisplayName, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get Privileged Role Assignment Request by ID - PowerShell\nDESCRIPTION: This snippet demonstrates how to retrieve a specific privileged role assignment request using the GetById parameter set. It requires both the ProviderId and the Id of the request. It returns the role assignment request matching the specified ProviderId and Id.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPrivilegedRoleAssignmentRequest.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaPrivilegedRoleAssignmentRequest\n -Id <String>\n -ProviderId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Filtering Entra Users - PowerShell\nDESCRIPTION: This snippet demonstrates how to filter users in Microsoft Entra ID based on the display name. Filtering is done on the server side for performance optimization. Replace `'Ada'` with the desired starting characters of the display name. Requires the Microsoft Entra PowerShell module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/entra-powershell-best-practices.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraUser -Filter \"startsWith(DisplayName,'Ada')\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Authentication Method with Get-EntraUserAuthenticationMethod (PowerShell)\nDESCRIPTION: This PowerShell command retrieves a user's authentication method using the Get-EntraUserAuthenticationMethod cmdlet from the Microsoft.Entra module. It depends on the Microsoft.Entra PowerShell module. It is used to check authentication methods associated with a specific user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_32\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraUserAuthenticationMethod\n```\n\n----------------------------------------\n\nTITLE: Get User Extension Syntax - PowerShell\nDESCRIPTION: This snippet shows the syntax for the `Get-EntraBetaUserExtension` cmdlet.  It requires the `-UserId` parameter and optionally accepts the `-Property` parameter.  It uses common PowerShell parameters for debugging and error handling.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserExtension.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaUserExtension\n -UserId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Application Logo by ID - PowerShell\nDESCRIPTION: This example retrieves the application logo for a specified application ID. It first connects to Entra ID, retrieves an application, and then uses Get-EntraBetaApplicationLogo to save the logo to a file path.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationLogo.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$application = Get-EntraBetaApplication -Filter \"DisplayName eq 'Helpdesk Application'\"\nGet-EntraBetaApplicationLogo -ApplicationId $application.Id -FilePath 'D:\\outfile1.jpg'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Beta User Authentication Requirement with Get-EntraBetaUserAuthenticationRequirement (PowerShell)\nDESCRIPTION: This PowerShell command retrieves the beta user authentication requirement using the Get-EntraBetaUserAuthenticationRequirement cmdlet from the Microsoft.Entra.Beta module. It depends on the Microsoft.Entra.Beta PowerShell module. It is used for checking authentication requirements in the beta environment.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_27\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaUserAuthenticationRequirement\n```\n\n----------------------------------------\n\nTITLE: Retrieving Beta User Authentication Method with Get-EntraBetaUserAuthenticationMethod (PowerShell)\nDESCRIPTION: This PowerShell command retrieves the beta user authentication method using the Get-EntraBetaUserAuthenticationMethod cmdlet from the Microsoft.Entra.Beta module.  It depends on the Microsoft.Entra.Beta PowerShell module. It is used for accessing beta features related to user authentication.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_25\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaUserAuthenticationMethod\n```\n\n----------------------------------------\n\nTITLE: Get Password Credential Output - PowerShell\nDESCRIPTION: Shows the output format of Get-EntraBetaApplicationPasswordCredential. The output includes properties like CustomKeyIdentifier, DisplayName, EndDateTime, Hint, KeyId, SecretText, and StartDateTime.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationPasswordCredential.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nCustomKeyIdentifier  DisplayName EndDateTime         Hint KeyId                                SecretText StartDateTime\n-------------------  ----------- -----------         ---- -----                                ---------- -------------\n{100, 101, 109, 111} demo        26/07/2025 10:34:40 Ap6  bbbbbbbb-1111-2222-3333-cccccccccccc             26/07/2024 10:34:40\n```\n\n----------------------------------------\n\nTITLE: New Domain Creation - PowerShell\nDESCRIPTION: This example demonstrates the creation of a new domain in Microsoft Entra ID using the New-EntraBetaDomain cmdlet. It requires the 'Domain.ReadWrite.All' scope and specifies the domain name to be created. The output displays various properties of the newly created domain.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaDomain.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Domain.ReadWrite.All'\nNew-EntraBetaDomain -Name test22.com\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId          AuthenticationType AvailabilityStatus IsAdminManaged IsDefault IsInitial IsRoot IsVerified PasswordNotificationWindowInDays\n--          ------------------ ------------------ -------------- --------- --------- ------ ---------- --------------------------------\ntest22.com  Managed                               True           False     False     False  False      13\n```\n\n----------------------------------------\n\nTITLE: Get Delegated Permission Classification with Filter - PowerShell\nDESCRIPTION: Retrieves delegated permission classifications from a service principal based on a filter. The example demonstrates filtering by `PermissionName`. Requires connecting to Entra ID with 'Application.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalDelegatedPermissionClassification.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraServicePrincipalDelegatedPermissionClassification -ServicePrincipalId $servicePrincipal.Id -Filter \"PermissionName eq 'Sites.Read.All'\"\n```\n\n----------------------------------------\n\nTITLE: Creating Beta Private Access Application Segment with New-EntraBetaPrivateAccessApplicationSegment (PowerShell)\nDESCRIPTION: This PowerShell command creates a new beta private access application segment using the New-EntraBetaPrivateAccessApplicationSegment cmdlet from the Microsoft.Entra.Beta module. It depends on the Microsoft.Entra.Beta PowerShell module. This is related to Global Secure Access commands.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_29\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-EntraBetaPrivateAccessApplicationSegment\n```\n\n----------------------------------------\n\nTITLE: Get specific group by ID - PowerShell\nDESCRIPTION: This example retrieves a specific group from Microsoft Entra ID using its GroupId.  It requires connecting to Entra ID with the GroupMember.Read.All scope.  The GroupId parameter specifies the unique identifier of the group to retrieve.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaGroup.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All'\nGet-EntraBetaGroup -GroupId 'eeeeeeee-4444-5555-6666-ffffffffffff'\n```\n\n----------------------------------------\n\nTITLE: Setting OptionalClaims Parameter\nDESCRIPTION: This parameter is used to configure optional claims in Microsoft Entra ID apps, specifying which claims should be included in tokens sent to the application. These claims provide additional information about the user or application.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplication.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nType: OptionalClaims\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Connecting to Entra ID with Required Scopes (PowerShell)\nDESCRIPTION: This PowerShell snippet establishes a connection to Microsoft Entra ID, requesting specific permissions (`User.ReadWrite.All` and `Organization.Read.All`) required for managing user licenses. The `Connect-Entra` cmdlet initiates the connection.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/how-to-manage-user-licenses.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All','Organization.Read.All'\n```\n\n----------------------------------------\n\nTITLE: Retrieve Domain Name Reference Objects PowerShell\nDESCRIPTION: Demonstrates how to retrieve the domain name reference objects for a specified domain using the Get-EntraBetaDomainNameReference cmdlet. It pipes the output to Select-Object to display the Id, DisplayName, and @odata.type properties of the retrieved objects.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDomainNameReference.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Domain.Read.All'\nGet-EntraBetaDomainNameReference -Name contoso.com | Select-Object Id, DisplayName, '@odata.type'\n```\n\n----------------------------------------\n\nTITLE: Retrieve Top Application Proxy Connectors - PowerShell\nDESCRIPTION: This PowerShell snippet connects to Entra ID and retrieves a specified number of top Application Proxy connectors using the `-Top` parameter. The `-Top` parameter limits the number of connectors returned.  The `-Limit` alias can also be used.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationProxyConnector.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\nGet-EntraBetaApplicationProxyConnector -Top 1\n```\n\n----------------------------------------\n\nTITLE: Get All Directory Roles - Example\nDESCRIPTION: This example demonstrates how to retrieve all directory roles in the Entra ID tenant.  It connects to Entra ID with the necessary scopes using `Connect-Entra`, and then it retrieves all the directory roles using `Get-EntraBetaDirectoryRole` without any filtering.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirectoryRole.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory'\nGet-EntraBetaDirectoryRole\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDeletedDateTime Id                                   Description\n---------------\n aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb Perform all migration functionality to migrate content to Microsoft 365 usin...\n aaaaaaaa-6666-7777-8888-bbbbbbbbbbbb Can manage all aspects of users and groups, including resetting passwords fo...\n bbbbbbbb-7777-8888-9999-cccccccccccc Can read basic directory information. Commonly used to grant directory read ...\n cccccccc-8888-9999-0000-dddddddddddd Can read and write basic directory information. For granting access to appli...\n```\n\n----------------------------------------\n\nTITLE: Create Entra Group with Group Types\nDESCRIPTION: This example demonstrates how to create a new Microsoft Entra ID group with specified group types using the New-EntraGroup cmdlet. It includes setting the GroupTypes parameter to 'Unified'.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraGroup.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All','Group.Create'\n$params = @{\n    DisplayName = 'HelpDesk admin group3'\n    Description = 'group des'\n    MailEnabled = $False\n    MailNickname = 'helpDeskAdminGroup1'\n    SecurityEnabled = $True\n    GroupTypes = 'Unified'\n}\n\nNew-EntraGroup @params\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDisplayName           Id                                   MailNickname        Description GroupTypes\n-----------           --                                   ------------        ----------- ----------\nHelpDesk admin group3 xxxxxxxx-8888-5555-9999-bbbbbbbbbbbb helpDeskAdminGroup1 group des   {Unified}\n```\n\n----------------------------------------\n\nTITLE: Connect with Device Code Flow - PowerShell\nDESCRIPTION: Connects to Microsoft Entra PowerShell using device code flow, which requires the user to open a browser at microsoft.com/devicelogin and enter the provided code. The scopes parameter specifies the required permissions.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/delegated-access-auth.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All', 'Group.ReadWrite.All' -UseDeviceCode\n```\n\n----------------------------------------\n\nTITLE: Get Top N Deleted Service Principals - PowerShell\nDESCRIPTION: This PowerShell script retrieves the top two deleted service principals using the `-Top` parameter. It requires the 'Application.Read.All' scope. `-Limit` can be used as alias for `-Top`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedServicePrincipal.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraDeletedServicePrincipal -Top 2 | Select-Object Id, DisplayName, AppId, DeletedDateTime, DeletionAgeInDays, ServicePrincipalType | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Set-EntraBetaAppRoleToApplicationUser Syntax (Default)\nDESCRIPTION: Shows the default syntax for the Set-EntraBetaAppRoleToApplicationUser command. It includes the required parameters DataSource, FilePath, and ApplicationName, as well as optional parameters SignInAudience and CommonParameters. It does not support exporting results.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaAppRoleToApplicationUser.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-EntraBetaAppRoleToApplicationUser\n -DataSource <String>\n -FilePath <System.IO.FileInfo>\n -ApplicationName <String>\n [-SignInAudience <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - DisplayName (YAML)\nDESCRIPTION: This YAML snippet defines the '-DisplayName' parameter for the Set-EntraAdministrativeUnit cmdlet. It specifies the data type, parameter set, whether it is required, its position, default value, and whether it accepts pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraAdministrativeUnit.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get-EntraUserCBAAuthorizationInfo Syntax - PowerShell\nDESCRIPTION: This code snippet presents the syntax of the `Get-EntraUserCBAAuthorizationInfo` cmdlet. It shows the available parameters, including `-UserId` and `-Raw`, along with the common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserCBAAuthorizationInfo.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraUserCBAAuthorizationInfo\n [-UserId] <String>\n [-Raw]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Retrieve Current Entra Session Information - PowerShell\nDESCRIPTION: This code snippet demonstrates how to retrieve the details of the current Entra PowerShell session using the `Get-EntraContext` cmdlet. It returns information such as ClientID, TenantID, Scopes, Authentication Type, and other session-related details.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraContext.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraContext\n```\n\n----------------------------------------\n\nTITLE: GroupId Parameter Definition - YAML\nDESCRIPTION: Defines the `-GroupId` parameter for the `Get-EntraBetaLifecyclePolicyGroup` cmdlet within a YAML structure. It specifies the data type, required status, position, default value, and pipeline input properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaLifecyclePolicyGroup.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: Id\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: New-EntraBetaGroupAppRoleAssignment Syntax - PowerShell\nDESCRIPTION: This syntax block shows the parameters for the `New-EntraBetaGroupAppRoleAssignment` cmdlet. It requires the `ResourceId`, `AppRoleId`, `GroupId`, and `PrincipalId` parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaGroupAppRoleAssignment.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-EntraBetaGroupAppRoleAssignment\n -ResourceId <String>\n -AppRoleId <String>\n -GroupId <String>\n -PrincipalId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get-EntraExtensionProperty Syntax (PowerShell)\nDESCRIPTION: This is the syntax for the `Get-EntraExtensionProperty` cmdlet. It allows filtering by whether the extension properties are synced from on-premises using the `-IsSyncedFromOnPremises` parameter. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraExtensionProperty.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraExtensionProperty\n [-IsSyncedFromOnPremises <Boolean>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove-EntraConditionalAccessPolicy Syntax\nDESCRIPTION: Shows the syntax of the Remove-EntraConditionalAccessPolicy cmdlet, highlighting the PolicyId parameter which specifies the ID of the conditional access policy to be removed. The command supports common parameters for debugging and error handling.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraConditionalAccessPolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraConditionalAccessPolicy\n -PolicyId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Policy With Specific ID Example\nDESCRIPTION: This example retrieves a specific policy using its ID. First, the example retrieves the policy using its DisplayName and stores it in a variable.  Then, Get-EntraBetaPolicy is called with the -Id parameter to retrieve the policy.  The ID is passed via the variable `$policy.Id`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPolicy.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.All'\n$policy = Get-EntraBetaPolicy | Where-Object {$_.DisplayName -eq 'Microsoft User Default Recommended Policy'}\nGet-EntraBetaPolicy -Id $policy.Id\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId                                   Description                     DisplayName                     Feature          IsAppliedToOrganization IsEnabled\n--                                   -----------                     -----------                     -------          ----------------------- ---------\nbbbbbbbb-1111-2222-3333-cccccccccccc passwordHashSync rollout policy passwordHashSync rollout policy passwordHashSync False                   True\n```\n\n----------------------------------------\n\nTITLE: Set Marketing Notification Emails - PowerShell\nDESCRIPTION: This example demonstrates how to set the marketing notification emails for a tenant using the `Set-EntraBetaTenantDetail` cmdlet. It connects to Entra ID with the 'Organization.ReadWrite.All' scope. Requires the Microsoft.Entra.Beta module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaTenantDetail.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.ReadWrite.All'\nSet-EntraBetaTenantDetail -MarketingNotificationEmails @('amy@contoso.com','henry@contoso.com')\n```\n\n----------------------------------------\n\nTITLE: Remove Directory Role Member - PowerShell\nDESCRIPTION: This snippet demonstrates how to remove a member from a Microsoft Entra directory role using the Remove-EntraDirectoryRoleMember cmdlet. It first retrieves the directory role and the member to be removed, then uses the cmdlet to remove the member from the role. It requires the RoleManagement.ReadWrite.Directory scope and Privileged Role Administrator role.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraDirectoryRoleMember.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory'\n$directoryRole = Get-EntraDirectoryRole -Filter \"displayName eq 'Helpdesk Administrator'\"\n$member = Get-EntraDirectoryRoleMember -DirectoryRoleId $directoryRole.Id | Select Id, DisplayName, '@odata.type' | Where-Object {$_.DisplayName -eq 'Sawyer Miller'}\nRemove-EntraDirectoryRoleMember -DirectoryRoleId $directoryRole.Id -MemberId $member.Id\n```\n\n----------------------------------------\n\nTITLE: Retrieving the top sponsor of a user using Get-EntraBetaUserSponsor in PowerShell\nDESCRIPTION: This example demonstrates how to retrieve the top sponsor (i.e., the first sponsor found) for a specific user using the Get-EntraBetaUserSponsor cmdlet with the `-Top` parameter.  It connects to Entra ID with the 'User.Read' scope, retrieves the top sponsor for the user 'SawyerM@contoso.com', and then selects and formats specific properties for display. The cmdlet requires the Microsoft.Entra.Beta module and appropriate permissions.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserSponsor.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read' # User.Read.All is an application-only permission, which does not require a user to be signed in interactively\nGet-EntraBetaUserSponsor -UserId 'SawyerM@contoso.com' -Top 1 |\nSelect-Object Id, DisplayName, '@odata.type', CreatedDateTime | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Defining UserType Property in YAML\nDESCRIPTION: Defines the UserType property, a string value that can be used to classify user types in your directory, such as \"Member\" and \"Guest.\" It specifies the data type, parameter set, aliases, required status, position, default value, and pipeline input/wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUser.md#_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Set-EntraDomain Syntax - PowerShell\nDESCRIPTION: This is the syntax for the `Set-EntraDomain` cmdlet in PowerShell. It shows the available parameters: `-Name`, `-IsDefault`, and `-SupportedServices`.  It also shows that it supports common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraDomain.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-EntraDomain\n -Name <String>\n [-IsDefault <Boolean>]\n [-SupportedServices <System.Collections.Generic.List`1[System.String]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: List Managed Devices - PowerShell\nDESCRIPTION: Connects to Entra ID and retrieves a list of managed devices. Requires the Microsoft.Entra module and the 'Device.Read.All' scope. The `-Filter` parameter is used with the `isManaged` property to find managed devices.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDevice.md#_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraDevice -Filter \"isManaged eq true\"\n```\n\n----------------------------------------\n\nTITLE: Get User Authentication Requirement Syntax - PowerShell\nDESCRIPTION: This code snippet shows the syntax for using the `Get-EntraBetaUserAuthenticationRequirement` cmdlet to retrieve the authentication method status of a user in Microsoft Entra ID. It requires the `UserId` parameter, which specifies the ID of the user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserAuthenticationRequirement.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaUserAuthenticationRequirement\n -UserId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Create a new Domain with Supported Services\nDESCRIPTION: This example demonstrates creating a new domain 'testingDemo1.com' and specifying supported services like 'Email' and 'OfficeCommunicationsOnline'.  The Connect-Entra cmdlet is used to establish a connection to Entra ID with the necessary permissions. It showcases using the -SupportedServices parameter to define the domain's capabilities.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraDomain.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Domain.ReadWrite.All'\nNew-EntraDomain -Name testingDemo1.com -SupportedServices @('Email', 'OfficeCommunicationsOnline')\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId               AuthenticationType AvailabilityStatus IsAdminManaged IsDefault IsInitial IsRoot IsVerified Manufacturer Model PasswordNotificationWindowInDays PasswordValidityPeriodInDays SupportedServices\n--               ------------------ ------------------ -------------- --------- --------- ------ ---------- ------------ ----- -------------------------------- ---------------------------- -----------------\ntestingDemo1.com Managed                               True           False     False     False  False                                                                                       {}\n```\n\n----------------------------------------\n\nTITLE: Remove-EntraBetaDeviceRegisteredOwner Syntax\nDESCRIPTION: Defines the syntax for the Remove-EntraBetaDeviceRegisteredOwner cmdlet. It shows the required parameters: -OwnerId and -DeviceId, and also indicates the availability of CommonParameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaDeviceRegisteredOwner.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraBetaDeviceRegisteredOwner\n -OwnerId <String>\n -DeviceId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Cloud Authentication Roll-out Policy by Search String - PowerShell\nDESCRIPTION: This example retrieves a specific cloud authentication roll-out policy in Microsoft Entra ID using a search string. It connects to Entra ID with the required scopes and then uses the `Get-EntraFeatureRolloutPolicy` cmdlet with the `-SearchString` parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraFeatureRolloutPolicy.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\nGet-EntraFeatureRolloutPolicy -SearchString 'Feature-Rollout-Policy'\n```\n\n----------------------------------------\n\nTITLE: Test-EntraScript Example 1\nDESCRIPTION: Demonstrates how to use `Test-EntraScript` to check if the `usercreation.ps1` script is compatible with the Microsoft.Entra module, returning a boolean value indicating compatibility.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Test-EntraScript.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nTest-EntraScript -Path .\\usercreation.ps1 -Quiet\n```\n\n----------------------------------------\n\nTITLE: Defining -Top Parameter in PowerShell YAML\nDESCRIPTION: This YAML snippet defines the `-Top` parameter for a PowerShell cmdlet, allowing users to limit the number of records returned. The type is `System.Int32`, and it's an optional parameter that accepts pipeline input by property name or value.  `Limit` is an alias for this parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplication.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Int32\nParameter Sets: GetQuery\nAliases: Limit\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Add Application Owner Syntax - PowerShell\nDESCRIPTION: This code snippet shows the syntax for using the Add-EntraApplicationOwner cmdlet with the ByApplicationIdAndOwnerId parameter set.  It requires an ApplicationId and OwnerId.  Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Add-EntraApplicationOwner.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-EntraApplicationOwner\n -ApplicationId <String>\n -OwnerId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Domain Federation Settings PowerShell\nDESCRIPTION: Retrieves federation settings for a specified domain in Microsoft Entra ID. It requires the DomainName parameter to specify the fully qualified domain name.  The Connect-Entra cmdlet is used to establish a connection to Entra ID with the necessary 'Domain.Read.All' scope. For delegated scenarios, specific Microsoft Entra roles are required.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDomainFederationSettings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraDomainFederationSettings\n -DomainName <String>\n [-TenantId <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove-EntraDeletedDirectoryObject Syntax - PowerShell\nDESCRIPTION: This shows the syntax for the Remove-EntraDeletedDirectoryObject cmdlet.  The cmdlet requires a DirectoryObjectId to identify the object for deletion and supports common parameters for error handling and output control.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraDeletedDirectoryObject.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraDeletedDirectoryObject\n -DirectoryObjectId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Retrieve all contacts objects with -All PowerShell\nDESCRIPTION: This example retrieves all contact objects in the directory using the `-All` parameter. It connects to Entra ID using `Connect-Entra` with the 'OrgContact.Read.All' scope, and then uses `Get-EntraBetaContact` with the `-All` parameter to retrieve all contact objects from Microsoft Entra ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaContact.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'OrgContact.Read.All'\nGet-EntraBetaContact -All\n```\n\n----------------------------------------\n\nTITLE: Remove a Permission Grant Policy - PowerShell\nDESCRIPTION: This example demonstrates how to remove a specific permission grant policy using the Remove-EntraBetaPermissionGrantPolicy cmdlet. It first connects to Entra ID using Connect-Entra with the required scope, then removes the policy using its ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaPermissionGrantPolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.PermissionGrant'\nRemove-EntraBetaPermissionGrantPolicy -Id 'my_permission_grant_policy_id'\n```\n\n----------------------------------------\n\nTITLE: Resetting Strong Authentication Method with Reset-EntraStrongAuthenticationMethodByUpn (PowerShell)\nDESCRIPTION: This PowerShell command resets a user's strong authentication method by UPN using the Reset-EntraStrongAuthenticationMethodByUpn cmdlet from the Microsoft.Entra module. It depends on the Microsoft.Entra PowerShell module. It expands the available methods.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_23\n\nLANGUAGE: PowerShell\nCODE:\n```\nReset-EntraStrongAuthenticationMethodByUpn\n```\n\n----------------------------------------\n\nTITLE: Set Entra Group Properties - PowerShell\nDESCRIPTION: This example demonstrates how to update multiple properties of an existing Microsoft Entra ID group. It sets the Visibility, GroupTypes, and IsAssignableToRole properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaGroup.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All'\n$group = Get-EntraBetaGroup -Filter \"DisplayName eq 'HelpDesk Team Leaders'\"\nSet-EntraBetaGroup -GroupId $group.Id -Visibility 'Private' -GroupTypes 'DynamicMembership' -IsAssignableToRole $True\n```\n\n----------------------------------------\n\nTITLE: Search Applications by String - PowerShell\nDESCRIPTION: This example shows how to retrieve applications by searching for a specific string in their properties using the '-SearchString' parameter. It connects to Entra ID using the Connect-Entra cmdlet with the 'Application.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplication.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraBetaApplication -SearchString 'My new application 2'\n```\n\n----------------------------------------\n\nTITLE: ServicePrincipalId Parameter Definition - YAML\nDESCRIPTION: Defines the ServicePrincipalId parameter for the Remove-EntraBetaPasswordSingleSignOnCredential cmdlet. It specifies the unique identifier of the Microsoft Entra ID object (service principal) whose password SSO credential should be removed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaPasswordSingleSignOnCredential.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Confirm Entra Domain With Verification Code (PowerShell)\nDESCRIPTION: This example demonstrates how to confirm a domain in dual federation scenarios by providing a cross-cloud verification code using the Confirm-EntraDomain cmdlet. It also requires connecting to Entra ID with the 'Domain.ReadWrite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Confirm-EntraDomain.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Domain.ReadWrite.All'\nConfirm-EntraDomain -Name Contoso.com -CrossCloudVerificationCode ms84324896\n```\n\n----------------------------------------\n\nTITLE: List All Cloud Authentication Roll-out Policies - PowerShell\nDESCRIPTION: This example retrieves all cloud authentication roll-out policies in Microsoft Entra ID.  It first connects to Entra ID with the required scopes, then uses the Get-EntraFeatureRolloutPolicy cmdlet without any parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraFeatureRolloutPolicy.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\nGet-EntraFeatureRolloutPolicy\n```\n\n----------------------------------------\n\nTITLE: Get-EntraBetaFederationProperty Syntax - PowerShell\nDESCRIPTION: This displays the syntax for the `Get-EntraBetaFederationProperty` cmdlet, showing the required `-DomainName` parameter and the availability of common parameters. The `-DomainName` parameter is of type String. Common parameters are automatically included in all PowerShell cmdlets.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaFederationProperty.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaFederationProperty\n -DomainName <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get All Identity Providers - PowerShell\nDESCRIPTION: This PowerShell snippet retrieves a list of all configured identity providers and their properties. It first connects to Entra ID with the necessary scopes and then uses the Get-EntraBetaIdentityProvider cmdlet to fetch the identity providers.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaIdentityProvider.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'IdentityProvider.Read.All'\nGet-EntraBetaIdentityProvider\n```\n\n----------------------------------------\n\nTITLE: Get All Contracts Example - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all contracts in the Microsoft Entra ID. It first connects to Entra ID using the Connect-Entra cmdlet with the 'Directory.Read.All' scope, then uses Get-EntraContract to fetch all contracts.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraContract.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\nGet-EntraContract\n```\n\n----------------------------------------\n\nTITLE: Get trusted certificate authorities by TrustedIssuer\nDESCRIPTION: Retrieves trusted certificate authorities based on the specified TrustedIssuer. The TrustedIssuer parameter filters the results to only include certificate authorities with a matching issuer name. Requires connecting to Entra with 'Organization.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraTrustedCertificateAuthority.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All'\nGet-EntraTrustedCertificateAuthority -TrustedIssuer 'CN=mscmdlet'\n```\n\n----------------------------------------\n\nTITLE: DomainName Parameter Definition YAML\nDESCRIPTION: Definition of the DomainName parameter for the Get-EntraDomainFederationSettings cmdlet. It specifies that the parameter is a string, is required, accepts pipeline input by property name, and does not accept wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDomainFederationSettings.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 1\nDefault value: None\nAccept pipeline input: True (ByPropertyName)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get App Roles Assigned to a Service Principal\nDESCRIPTION: Retrieves the app roles that have been assigned to a specific service principal. It uses the `Get-EntraServicePrincipalAppRoleAssignedTo` cmdlet with the service principal's ID to get the list of assigned app roles.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/how-to-grant-revoke-api-permissions.md#_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraServicePrincipalAppRoleAssignedTo -ServicePrincipalId $clientServicePrincipal.Id\n```\n\n----------------------------------------\n\nTITLE: Get Privileged Resources by ID - PowerShell\nDESCRIPTION: Retrieves a specific Microsoft Entra ID privileged resource by its unique identifier.  This syntax requires both the ProviderId and the Id of the resource. It can also optionally use Property to specify which properties to return. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPrivilegedResource.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaPrivilegedResource\n -ProviderId <String>\n -Id <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: OnPremisesPublishingProfileId Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the `-OnPremisesPublishingProfileId` parameter for the `Remove-EntraBetaApplicationProxyApplicationConnectorGroup` cmdlet. It specifies the application's unique ID, which can be found using `Get-EntraBetaApplication` or in the Microsoft Entra Admin Center. The parameter is of type string, is required, and accepts pipeline input by property name or value.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaApplicationProxyApplicationConnectorGroup.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Remove Service Principal App Role Assignment Syntax - PowerShell\nDESCRIPTION: This snippet shows the syntax for the `Remove-EntraBetaServicePrincipalAppRoleAssignment` cmdlet. It requires the `ServicePrincipalId` and `AppRoleAssignmentId` parameters to identify the role assignment to remove. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaServicePrincipalAppRoleAssignment.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraBetaServicePrincipalAppRoleAssignment\n -ServicePrincipalId <String>\n -AppRoleAssignmentId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove-EntraBetaDirectoryRoleDefinition Syntax PowerShell\nDESCRIPTION: This syntax block shows the structure for using the Remove-EntraBetaDirectoryRoleDefinition cmdlet in PowerShell. It requires the -UnifiedRoleDefinitionId parameter, which specifies the unique identifier of the role definition to be removed.  It also supports common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaDirectoryRoleDefinition.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraBetaDirectoryRoleDefinition\n -UnifiedRoleDefinitionId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get-EntraDirSyncConfiguration Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Get-EntraDirSyncConfiguration PowerShell cmdlet. It shows that the cmdlet accepts an optional TenantId parameter and supports common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDirSyncConfiguration.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraDirSyncConfiguration\n [-TenantId <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove Administrative Unit Member Syntax - PowerShell\nDESCRIPTION: This section shows the syntax of the `Remove-EntraAdministrativeUnitMember` cmdlet in PowerShell. It requires the `AdministrativeUnitId` and `MemberId` parameters to identify the administrative unit and the member to be removed, respectively. It also supports common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraAdministrativeUnitMember.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraAdministrativeUnitMember\n -AdministrativeUnitId <String>\n -MemberId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Top N Contracts in Directory - PowerShell\nDESCRIPTION: This example retrieves the top two contracts in the Microsoft Entra ID.  It uses the `-Top` parameter to limit the number of returned contracts.  The alias `-Limit` can be used for `-Top`. It requires the Microsoft.Entra.Beta module and the 'Directory.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaContract.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\nGet-EntraBetaContract -Top 2\n```\n\n----------------------------------------\n\nTITLE: Get Top Administrative Units - PowerShell\nDESCRIPTION: This example shows how to retrieve a specified number of administrative units using the `-Top` parameter. It requires the 'AdministrativeUnit.Read.All' scope. The output includes the properties of the top administrative units.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAdministrativeUnit.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.Read.All'\nGet-EntraAdministrativeUnit -Top 1\n```\n\n----------------------------------------\n\nTITLE: Get Policy Using Display Name Example\nDESCRIPTION: This example retrieves a policy based on its display name. It uses Connect-Entra to authenticate, then pipes the results of Get-EntraBetaPolicy to Where-Object to filter by the 'DisplayName' property.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPolicy.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.All'\nGet-EntraBetaPolicy | Where-Object {$_.DisplayName -eq 'Microsoft User Default Recommended Policy'}\n```\n\nLANGUAGE: powershell\nCODE:\n```\nDeletedDateTime Description                                                           DisplayName                               Id\n--------------- -----------                                                           -----------                               --\n                Permissions consentable based on Microsoft's current recommendations. Microsoft User Default Recommended Policy microsoft-user-default-recommended\n```\n\n----------------------------------------\n\nTITLE: Top Parameter Definition - YAML\nDESCRIPTION: This YAML block defines the 'Top' parameter, which specifies the maximum number of records to return, for the Get-EntraServicePrincipalMembership cmdlet. It also shows the alias 'Limit'.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalMembership.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Int32\nParameter Sets: (All)\nAliases: Limit\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: GroupLifetimeInDays Parameter (YAML)\nDESCRIPTION: Describes the -GroupLifetimeInDays parameter for the New-EntraBetaGroupLifecyclePolicy cmdlet. This parameter specifies the number of days a group can exist before it needs to be renewed. The value must be an integer.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaGroupLifecyclePolicy.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Int32\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Remove Device Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Remove-EntraBetaDevice cmdlet.  It shows the required DeviceId parameter and the optional CommonParameters.  This snippet specifies how to structure the command when deleting a device.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaDevice.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraBetaDevice\n -DeviceId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Set Entra Group Description - PowerShell\nDESCRIPTION: This example demonstrates how to update the description of a specified group. It retrieves the group using Get-EntraBetaGroup and pipes the output to Set-EntraBetaGroup to update the Description parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaGroup.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Group.ReadWrite.All'\nGet-EntraBetaGroup -Filter \"displayName eq 'HelpDesk Team Leaders'\" | Set-EntraBetaGroup -Description 'HelpDesk Team Leaders Global'\n```\n\n----------------------------------------\n\nTITLE: Get All Directory Roles - PowerShell\nDESCRIPTION: This snippet demonstrates how to retrieve all directory roles using the Get-EntraDirectoryRole cmdlet without any filters.  It requires an active connection to Entra ID with appropriate permissions to read directory roles.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDirectoryRole.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory'\nGet-EntraDirectoryRole\n```\n\n----------------------------------------\n\nTITLE: Set-EntraBetaUserExtension Syntax - SetMultiple\nDESCRIPTION: This syntax block defines the usage of `Set-EntraBetaUserExtension` with multiple extension values using a dictionary. It showcases the `-UserId` and `-ExtensionNameValues` parameters along with common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUserExtension.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-EntraBetaUserExtension\n -UserId <String>\n -ExtensionNameValues <System.Collections.Generic.Dictionary`2[System.String,System.String]>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Uninstall specific Microsoft.Entra.Beta submodule\nDESCRIPTION: This PowerShell command uninstalls a specific submodule of the Microsoft.Entra.Beta module, such as `Users`. The `-AllVersions` parameter removes all installed versions, and `-Force` suppresses confirmation prompts.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/includes/uninstall-entrapowershell-module.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nUninstall-Module -Name Microsoft.Entra.Beta.Users -AllVersions -Force\n```\n\n----------------------------------------\n\nTITLE: Get Contact Manager Example - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve the manager of a contact using the Get-EntraContactManager cmdlet. It first connects to Entra ID with the required scopes and then retrieves the contact ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraContactManager.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'OrgContact.Read.All'\n$contact = Get-EntraContact -Filter \"displayName eq 'Contoso Contact'\"\nGet-EntraContactManager -OrgContactId $contact.Id\n```\n\n----------------------------------------\n\nTITLE: YAML Parameter Definition for -Top\nDESCRIPTION: Defines the YAML structure and properties for the `-Top` parameter within the Get-EntraBetaDeletedAdministrativeUnit cmdlet.  This parameter specifies the maximum number of administrative units to retrieve.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedAdministrativeUnit.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Int32\nParameter Sets: GetQuery\nAliases: Limit\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Set Application Logo with FilePath (PowerShell)\nDESCRIPTION: Sets the logo for an application using a file path. Requires the ApplicationId and FilePath parameters. The file must be smaller than 500KB. This uses the File parameter set.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplicationLogo.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-EntraBetaApplicationLogo\n -ApplicationId <String>\n -FilePath <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Application Key Credential Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the `Get-EntraApplicationKeyCredential` cmdlet.  It requires the `ApplicationId` parameter, which specifies the unique ID of the application.  It also supports common parameters for controlling the cmdlet's behavior.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplicationKeyCredential.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraApplicationKeyCredential\n -ApplicationId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Property Parameter Definition (YAML)\nDESCRIPTION: YAML definition for the Property parameter of the Get-EntraDeletedDirectoryObject cmdlet. It specifies the type as a string array, indicates it is optional, its position, and whether wildcard characters are accepted.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedDirectoryObject.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Remove Group from Rollout Policy Syntax - PowerShell\nDESCRIPTION: This syntax block shows the basic structure of the Remove-EntraBetaFeatureRolloutPolicyDirectoryObject cmdlet. It requires the DirectoryObjectId (group ID) and FeatureRolloutPolicyId (policy ID) as parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaFeatureRolloutPolicyDirectoryObject.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraBetaFeatureRolloutPolicyDirectoryObject\n -DirectoryObjectId <String>\n -FeatureRolloutPolicyId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Add Service Principal Owner Syntax\nDESCRIPTION: This syntax block shows how to use the Add-EntraServicePrincipalOwner cmdlet with the ServicePrincipalId and OwnerId parameters. It outlines the required parameters for adding an owner to a service principal.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Add-EntraServicePrincipalOwner.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-EntraServicePrincipalOwner\n -ServicePrincipalId <String>\n -OwnerId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Updating OAuth2 Permission Grant with Update-EntraOauth2PermissionGrant (PowerShell)\nDESCRIPTION: This PowerShell command updates an existing OAuth2 permission grant using the Update-EntraOauth2PermissionGrant cmdlet from the Microsoft.Entra module. It depends on the Microsoft.Entra PowerShell module. It enables modifying existing OAuth2 permission grants.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_35\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-EntraOauth2PermissionGrant\n```\n\n----------------------------------------\n\nTITLE: Remove Feature Rollout Policy Syntax - PowerShell\nDESCRIPTION: This snippet shows the syntax for the Remove-EntraBetaFeatureRolloutPolicy cmdlet. It requires the -Id parameter, which specifies the unique identifier of the policy to remove. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaFeatureRolloutPolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraBetaFeatureRolloutPolicy\n -Id <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get User Groups - Example 4\nDESCRIPTION: Retrieves a list of groups to which a specific user belongs using the group ID parameter.  First retrieves the group ID and then uses it in Get-EntraBetaUserGroup.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserGroup.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All', 'Group.Read.All', 'Directory.Read.All'\n$group = Get-EntraBetaGroup -Filter \"DisplayName eq 'Contoso Marketing'\"\nGet-EntraBetaUserGroup -UserId 'SawyerM@contoso.com' -GroupId $group.Id\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDisplayName                Id                                   MailNickname        Description               GroupTypes\n-----------                --                                   ------------        -----------               ----------\nContoso Marketing          hhhhhhhh-3333-5555-3333-qqqqqqqqqqqq ContosoMarketing    Contoso Marketing         {Unified}\n```\n\n----------------------------------------\n\nTITLE: Set HTTP Client Timeout - PowerShell\nDESCRIPTION: This PowerShell code shows how to set the HTTP client timeout in seconds for Microsoft Entra PowerShell connections.  The `-ClientTimeout` parameter controls the maximum time to wait for HTTP requests to complete, preventing indefinite hangs.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/authentication-scenarios.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -ClientTimeout 60\n```\n\n----------------------------------------\n\nTITLE: Get-EntraFederationProperty Syntax - PowerShell\nDESCRIPTION: This defines the syntax for the Get-EntraFederationProperty cmdlet. It requires the DomainName parameter, which specifies the domain to retrieve federation properties for. It also supports CommonParameters for error handling and output control.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraFederationProperty.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraFederationProperty\n -DomainName <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Update Partner Help URL using Set-EntraBetaPartnerInformation (PowerShell)\nDESCRIPTION: This snippet demonstrates how to update the help URL for a partner using the Set-EntraBetaPartnerInformation cmdlet. It requires the 'Organization.ReadWrite.All' scope and updates the PartnerHelpUrl property.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaPartnerInformation.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.ReadWrite.All'\nSet-EntraBetaPartnerInformation -PartnerHelpUrl 'http://www.help.contoso.com'\n```\n\n----------------------------------------\n\nTITLE: New-EntraBetaPolicy Syntax\nDESCRIPTION: Defines the syntax for the New-EntraBetaPolicy cmdlet. It shows the required and optional parameters, including Definition, DisplayName, Type, and IsOrganizationDefault. CommonParameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaPolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-EntraBetaPolicy\n -Definition <System.Collections.Generic.List`1[System.String]>\n -DisplayName <String>\n -Type <String>\n [-IsOrganizationDefault <Boolean>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition: -Property\nDESCRIPTION: Defines the `-Property` parameter for the Get-EntraApplicationOwner cmdlet. This parameter allows you to specify which properties of the owner object to retrieve.  `Select` is an alias for this parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplicationOwner.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Uninstall all Microsoft.Entra.Beta submodules\nDESCRIPTION: This PowerShell script retrieves all installed submodules of the Microsoft.Entra.Beta module and then iterates through them, uninstalling each one using `Uninstall-Module`. The `-Force` parameter bypasses confirmation prompts, and `-ErrorAction Stop` ensures that the script terminates if an error occurs during uninstallation.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/includes/uninstall-entrapowershell-module.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\n$InstalledSubModules = Get-InstalledModule -Name Microsoft.Entra.Beta.*\nforeach ($module in $InstalledSubModules) {\n    Write-Host \"Checking for submodule: $($module.Name)\" -ForegroundColor Yellow -BackgroundColor DarkBlue\n    Uninstall-Module -Name $module.Name -Force -ErrorAction Stop\n    Write-Host \"Successfully uninstalled submodule: $($module.Name)\" -ForegroundColor Green\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SignInAudience Parameter\nDESCRIPTION: Specifies the Microsoft accounts supported by the current application. It takes a string value indicating the supported audience for sign-in. The default value is None and it is not a required parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplication.md#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get User Role by ID - PowerShell\nDESCRIPTION: This syntax shows how to use the Get-EntraBetaUserRole cmdlet to retrieve a specific user role using the DirectoryRoleId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserRole.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraUserRole\n -UserId <String>\n -DirectoryRoleId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Example Usage (Placeholder) - PowerShell\nDESCRIPTION: This snippet represents a placeholder for a practical example demonstrating the usage of the Get-EntraBetaPrivilegedRole command. The actual code would be placed inside the curly braces. An accompanying description explains the purpose of the specific example.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPrivilegedRole.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> {{ Add example code here }}\n```\n\n----------------------------------------\n\nTITLE: Output of New-EntraBetaGroupLifecyclePolicy (PowerShell)\nDESCRIPTION: This is an example of the output that is returned after successfully creating a new group lifecycle policy with the `New-EntraBetaGroupLifecyclePolicy` cmdlet. The output shows the Id, AlternateNotificationEmails, GroupLifetimeInDays and ManagedGroupTypes for the created policy.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaGroupLifecyclePolicy.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nId                                   AlternateNotificationEmails GroupLifetimeInDays ManagedGroupTypes\n--                                   --------------------------- ------------------- -----------------\naaaaaaaa-0000-1111-2222-bbbbbbbbbbbb example@contoso.com                     99                  Selected\n```\n\n----------------------------------------\n\nTITLE: GetQuery Syntax for Get-EntraBetaPermissionGrantPolicy (PowerShell)\nDESCRIPTION: This syntax shows the usage of `Get-EntraBetaPermissionGrantPolicy` without the `-Id` parameter, which retrieves all permission grant policies. The `-Property` parameter can be used to specify which properties to return.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPermissionGrantPolicy.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaPermissionGrantPolicy\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove User Sponsor by SponsorId - PowerShell\nDESCRIPTION: This example demonstrates how to remove a user sponsor by explicitly specifying the SponsorId.  It first retrieves the sponsor's ID using Get-EntraBetaUserSponsor and then passes it to Remove-EntraBetaUserSponsor along with the UserId. It requires the 'User.ReadWrite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaUserSponsor.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\n$sponsor = Get-EntraBetaUserSponsor -UserId 'SawyerM@contoso.com' -Top 1\nRemove-EntraBetaUserSponsor -UserId 'SawyerM@Contoso.com' -SponsorId $sponsor.Id\n```\n\n----------------------------------------\n\nTITLE: New-EntraBetaDevice Syntax\nDESCRIPTION: Shows the general syntax of the New-EntraBetaDevice cmdlet, including required and optional parameters. It specifies the data types for each parameter and their availability.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaDevice.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-EntraBetaDevice\n -DisplayName <String>\n -DeviceOSType <String>\n -AccountEnabled <Boolean>\n -DeviceId <String>\n -DeviceOSVersion <String>\n -AlternativeSecurityIds <System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.AlternativeSecurityId]>\n [-DevicePhysicalIds <System.Collections.Generic.List`1[System.String]]]\n [-DeviceTrustType <String>]\n [-DeviceMetadata <String>]\n [-ApproximateLastLogonTimeStamp <DateTime>]\n [-IsManaged <Boolean>]\n [-DeviceObjectVersion <Int32>]\n [-IsCompliant <Boolean>]\n [-ProfileType <String>]\n [-SystemLabels <System.Collections.Generic.List`1[System.String]]]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Update Entra User from Federated (Cloud-Only)\nDESCRIPTION: This snippet shows the syntax for updating a user in a cloud-only environment after converting the domain from single sign-on to standard authentication. The `-UserPrincipalName` parameter is mandatory.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Update-EntraUserFromFederated.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nUpdate-EntraUserFromFederated\n -UserPrincipalName <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Administrative Units - Example 4 (SearchString)\nDESCRIPTION: This example retrieves deleted administrative units using a search string, selects specific properties, and displays them in a formatted table. The `-SearchString 'Americas Administrative Unit'` parameter filters the results to administrative units that contain the specified string in their properties. It connects to Entra ID using the 'AdministrativeUnit.Read.All' scope. The output shows the selected properties for the matching deleted administrative units.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedAdministrativeUnit.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.Read.All'\nGet-EntraBetaDeletedAdministrativeUnit -SearchString 'Americas Administrative Unit' | Select-Object Id, DisplayName, MembershipType, Visibility, DeletedDateTime, DeletionAgeInDays | Format-Table -AutoSize\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                   DisplayName                   MembershipType     Visibility         DeletedDateTime           DeletionAgeInDays\n--                                   -----------                   --------------     ----------         ---------------           -----------------\ngggggggg-8888-9999-aaaa-hhhhhhhhhhhh Americas Administrative Unit   Dynamic           HiddenMembership   2/12/2025 12:40:52 PM     10\n```\n\n----------------------------------------\n\nTITLE: Get Top User Roles Example - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve the top two directory roles assigned to a specific user using the -Top parameter (or its alias -Limit) with the Get-EntraBetaUserRole cmdlet. It first connects to Entra ID with the required scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserRole.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\nGet-EntraBetaUserRole -UserId 'SawyerM@contoso.com' -Top 2\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDeletedDateTime         Id                                   DisplayName               RoleTemplateId\n---------------         --                                   -----------               --------------\n                       bbbbbbbb-1111-2222-3333-ccccccccccc  Helpdesk Administrator    729827e3-9c14-49f7-bb1b-9608f156bbb8\n                       dddddddd-3333-4444-5555-eeeeeeeeeeee Directory Readers         88d8e3e3-8f55-4a1e-953a-9b9898b8876b\n```\n\n----------------------------------------\n\nTITLE: Remove User Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Remove-EntraBetaUser cmdlet, including the UserId parameter and common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaUser.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraBetaUser\n -UserId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Inactive Sign-ins Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Get-EntraUserInactiveSignIn cmdlet. It includes the -Ago parameter, which specifies the number of days to check for inactive sign-ins, and the optional -UserType parameter to filter users by type (All, Member, or Guest).\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserInactiveSignIn.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraUserInactiveSignIn\n -Ago <Int32>\n [-UserType <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: New-EntraBetaDirectorySetting Syntax\nDESCRIPTION: This snippet shows the syntax for the New-EntraBetaDirectorySetting cmdlet. It specifies the DirectorySetting parameter, which accepts a DirectorySetting object. CommonParameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaDirectorySetting.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-EntraBetaDirectorySetting\n -DirectorySetting <DirectorySetting>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition for -Property\nDESCRIPTION: Defines the -Property parameter for Get-EntraUserOAuth2PermissionGrant cmdlet as a string array, which specifies properties to be returned. Does not accept pipeline input and does not support wildcards.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserOAuth2PermissionGrant.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Assigned Directory Roles by ID\nDESCRIPTION: This example retrieves directory roles for a specific user based on the `DirectoryRoleId`. It first retrieves the directory role's ID using `Get-EntraDirectoryRole` and then passes it to `Get-EntraUserRole` with the `-DirectoryRoleId` parameter. Requires connection to Entra ID with the 'Directory.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserRole.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\n$role = Get-EntraDirectoryRole -Filter \"displayName eq 'Helpdesk Administrator'\"\nGet-EntraUserRole -UserId 'SawyerM@contoso.com' -DirectoryRoleId $role.Id\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDeletedDateTime         Id                                   DisplayName               RoleTemplateId\n---------------         --                                   -----------               --------------\n                       bbbbbbbb-1111-2222-3333-ccccccccccc  Helpdesk Administrator    729827e3-9c14-49f7-bb1b-9608f156bbb8\n```\n\n----------------------------------------\n\nTITLE: Remove User Manager - PowerShell\nDESCRIPTION: This example demonstrates how to remove a user's manager using the Remove-EntraBetaUserManager cmdlet. It first connects to Entra ID with the necessary scopes and then removes the manager for the specified user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaUserManager.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nRemove-EntraBetaUserManager -UserId 'SawyerM@Contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deleted Devices with Get-EntraDeletedDevice (PowerShell)\nDESCRIPTION: This PowerShell command retrieves deleted devices using the Get-EntraDeletedDevice cmdlet from the Microsoft.Entra module. It returns the `DeletionAgeInDays` response property. It depends on the Microsoft.Entra PowerShell module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_15\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraDeletedDevice\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition for -All\nDESCRIPTION: Defines the `-All` parameter for the `Get-EntraTenantDetail` cmdlet. When specified, it lists all pages of results.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraTenantDetail.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Set User Extension - Multiple Values - PowerShell\nDESCRIPTION: This snippet shows how to update multiple extension attributes for a user using the Set-EntraBetaUserExtension cmdlet with the ExtensionNameValues parameter. It requires the User.ReadWrite.All scope and creates a dictionary to store the extension name and value pairs. The extension names can be retrieved using Get-EntraBetaApplicationExtensionProperty.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUserExtension.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\n$userExtensionValues = New-Object 'System.Collections.Generic.Dictionary[String,String]'\n$userExtensionValues.Add(\"extension_d2ba83696c3f45429fbabb363ae391a0_Benefits\", \"Pension\")\n$userExtensionValues.Add(\"extension_d2ba83696c3f45429fbabb363ae391a0_JobGroup\", \"D\")\nSet-EntraBetaUserExtension -UserId 'SawyerM@contoso.com' -ExtensionNameValues $userExtensionValues\n```\n\n----------------------------------------\n\nTITLE: Update Password Policy PowerShell\nDESCRIPTION: This example shows how to update the password policy for a specific user.  Requires the 'User.ReadWrite.All' scope.  Possible values are DisableStrongPassword and DisablePasswordExpiration.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUser.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nGet-EntraBetaUser -UserId 'SawyerM@contoso.com' | Set-EntraBetaUser -PasswordPolicies DisablePasswordExpiration\n```\n\n----------------------------------------\n\nTITLE: Retrieving Beta Directory Sync Features with Get-EntraBetaDirSyncFeature (PowerShell)\nDESCRIPTION: This PowerShell command retrieves beta directory sync features using the Get-EntraBetaDirSyncFeature cmdlet from the Microsoft.Entra.Beta module. It depends on the Microsoft.Entra.Beta PowerShell module. `Format-Table` is removed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_24\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaDirSyncFeature\n```\n\n----------------------------------------\n\nTITLE: Get-EntraIdentityProvider Syntax (GetById) - PowerShell\nDESCRIPTION: This snippet shows the syntax for using the Get-EntraIdentityProvider cmdlet with the GetById parameter set. It retrieves a specific identity provider using its IdentityProviderBaseId with optional property selection.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraIdentityProvider.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraIdentityProvider\n -IdentityProviderBaseId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: ServicePrincipalId Parameter Definition\nDESCRIPTION: Defines the properties of the ServicePrincipalId parameter, including its type (String), requirement (True), position (Named), and whether it accepts pipeline input.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaPasswordSingleSignOnCredential.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get App Proxy Apps - PowerShell\nDESCRIPTION: This example retrieves all App Proxy applications by filtering on the `tags` property.  It looks for service principals that have the `WindowsAzureActiveDirectoryOnPremApp` tag.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipal.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraServicePrincipal -Filter \"tags/Any(x: x eq 'WindowsAzureActiveDirectoryOnPremApp')\"\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - SessionControls\nDESCRIPTION: This YAML snippet defines the SessionControls parameter for the Set-EntraConditionalAccessPolicy cmdlet. It's of type ConditionalAccessSessionControls, optional, and doesn't accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraConditionalAccessPolicy.md#_snippet_10\n\nLANGUAGE: YAML\nCODE:\n```\nType: ConditionalAccessSessionControls\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get User License Details Syntax - PowerShell\nDESCRIPTION: This snippet displays the syntax for the Get-EntraBetaUserLicenseDetail cmdlet. It takes a UserId as input and optionally a Property parameter to specify which properties to return.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserLicenseDetail.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaUserLicenseDetail\n -UserId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: PasswordSSOObjectId Parameter Definition - YAML\nDESCRIPTION: Defines the PasswordSSOObjectId parameter for the Remove-EntraBetaPasswordSingleSignOnCredential cmdlet. It's used to specify the User or Group ID for whom the password SSO credential should be removed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaPasswordSingleSignOnCredential.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.PasswordSSOObjectId\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Set-EntraBetaUserExtension Syntax - SetSingle\nDESCRIPTION: This syntax block defines the usage of `Set-EntraBetaUserExtension` with single extension values. It showcases the `-UserId`, `-ExtensionName`, and `-ExtensionValue` parameters along with common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUserExtension.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-EntraBetaUserExtension\n -UserId <String>\n -ExtensionName <String>\n -ExtensionValue <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Application by Display Name - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve an application by its display name using the '-Filter' parameter with an OData filter.  It connects to Entra ID with the 'Application.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplication.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraBetaApplication -Filter \"DisplayName eq 'ToGraph_443DEMO'\"\n```\n\n----------------------------------------\n\nTITLE: IdentityProviderBaseId Parameter - YAML\nDESCRIPTION: YAML definition for the IdentityProviderBaseId parameter, specifying its type, parameter set, aliases, requirement, position, default value, and input acceptance properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaIdentityProvider.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: GetById\nAliases: Id\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Connect to Microsoft Entra ID - PowerShell (App Scope)\nDESCRIPTION: Connects to Microsoft Entra ID with the 'Application.Read.All' scope. This is a prerequisite for managing service principals and their assignments. Requires the Microsoft Entra PowerShell module installed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-user-group-assignment.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n```\n\n----------------------------------------\n\nTITLE: Get Service Principal by Display Name - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a service principal by its display name using the `-Filter` parameter with an `eq` (equals) operator to find an exact match.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipal.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\n```\n\n----------------------------------------\n\nTITLE: Connect with Delegated Access using a Custom Application - PowerShell\nDESCRIPTION: Connects to Microsoft Entra PowerShell using delegated access with a custom application. It requires at least a Cloud Application Administrator role. Replace `<your-custom-app-id>` with the actual client ID of your custom application.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/delegated-access-auth.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All', 'Group.ReadWrite.All' -ClientId <your-custom-app-id>\n```\n\n----------------------------------------\n\nTITLE: Get All Contracts in Directory - PowerShell\nDESCRIPTION: This example retrieves all contracts in the Microsoft Entra ID. It requires connecting to Entra ID using `Connect-Entra` with the 'Directory.Read.All' scope. The `Get-EntraBetaContract` cmdlet retrieves all contracts available in the directory.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaContract.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\nGet-EntraBetaContract\n```\n\n----------------------------------------\n\nTITLE: Get Service Principal App Role Assignment Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the `Get-EntraBetaServicePrincipalAppRoleAssignment` cmdlet in PowerShell. It shows the required and optional parameters for retrieving service principal application role assignments.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalAppRoleAssignment.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaServicePrincipalAppRoleAssignment\n -ServicePrincipalId <String>\n [-All]\n [-Top <Int32>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Retrieve Partner Information - Example 1\nDESCRIPTION: This example demonstrates how to retrieve partner information using the Get-EntraBetaPartnerInformation cmdlet. It first connects to Entra ID using Connect-Entra with the 'Organization.Read.All' scope, then retrieves the partner information.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPartnerInformation.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All'\nGet-EntraBetaPartnerInformation\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nPartnerCompanyName       : Contoso\ncompanyType              :\nPartnerSupportTelephones : {12123, +1911}\nPartnerSupportEmails     : {}\nPartnerHelpUrl           : http://www.help.contoso.com\nPartnerCommerceUrl       :\nObjectID                 : bbbbbbbb-1111-2222-3333-cccccccccccc\nPartnerSupportUrl        :\n```\n\n----------------------------------------\n\nTITLE: Select-EntraBetaGroupIdsContactIsMemberOf Syntax (PowerShell)\nDESCRIPTION: Defines the syntax for the Select-EntraBetaGroupIdsContactIsMemberOf cmdlet.  It requires an OrgContactId (string) and GroupIdsForMembershipCheck object as input.  It also supports common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Select-EntraBetaGroupIdsContactIsMemberOf.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSelect-EntraBetaGroupIdsContactIsMemberOf\n -OrgContactId <String>\n -GroupIdsForMembershipCheck <GroupIdsForMembershipCheck>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get-EntraBetaApplication Syntax - PowerShell\nDESCRIPTION: These snippets display the different syntax options available for using the Get-EntraBetaApplication cmdlet. It shows the parameters available for each of the GetQuery, GetByValue and GetById parameter sets.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplication.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaApplication\n [-Top <Int32>]\n [-All]\n [-Filter <String>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaApplication\n [-SearchString <String>]\n [-All]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaApplication\n -ApplicationId <String>\n [-All]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove-EntraBetaApplicationOwner Syntax\nDESCRIPTION: Shows the syntax of the Remove-EntraBetaApplicationOwner cmdlet. This includes the mandatory parameters -OwnerId and -ApplicationId, as well as the optional CommonParameters. This cmdlet removes an owner from a specified application.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaApplicationOwner.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraBetaApplicationOwner\n -OwnerId <String>\n -ApplicationId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove User Example - PowerShell\nDESCRIPTION: Demonstrates how to remove a user from Microsoft Entra ID using the Remove-EntraBetaUser cmdlet. It requires connecting to Entra ID with the appropriate scopes and specifying the user's ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaUser.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nRemove-EntraBetaUser -UserId 'SawyerM@Contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Remove Application Password Credential Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Remove-EntraBetaApplicationPasswordCredential cmdlet. It requires the ApplicationId and KeyId parameters. The ApplicationId specifies the ID of the application in Microsoft Entra ID, and KeyId specifies the ID of the password credential to remove.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaApplicationPasswordCredential.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraBetaApplicationPasswordCredential\n -ApplicationId <String>\n -KeyId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Defining -PreAuthorizedApplications Parameter in YAML\nDESCRIPTION: This YAML snippet defines the `-PreAuthorizedApplications` parameter, specifying its type as a list of `PreAuthorizedApplication` objects, indicating it's an optional named parameter with no default value, and doesn't accept pipeline input or wildcard characters. It lists applications and requested permissions for implicit consent.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplication.md#_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.PreAuthorizedApplication]\nType: System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.PreAuthorizedApplication]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get-EntraDirSyncFeature Syntax - PowerShell\nDESCRIPTION: This shows the syntax for the Get-EntraDirSyncFeature cmdlet. The cmdlet accepts optional parameters such as -TenantId to specify the tenant and -Feature to specify a particular directory sync feature to check. It also supports common parameters available in PowerShell. The TenantId and Feature parameters accept string values and can be passed via property name or value through the pipeline.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDirSyncfeature.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraDirSyncFeature\n [-TenantId <String>]\n [-Feature <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition for -Content\nDESCRIPTION: Defines the -Content parameter for the `Test-EntraScript` command, which accepts a string containing code content to scan.  This is useful when the code does not have a file representation. It is an optional parameter and accepts pipeline input by property name.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Test-EntraScript.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 2\nDefault value: None\nAccept pipeline input: True (ByPropertyName)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Connect with Authorization Code Flow - PowerShell\nDESCRIPTION: Connects to Microsoft Entra PowerShell using the default authorization code flow, which opens an interactive browser-based sign-in prompt. It requires no specific parameters for basic authentication.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/delegated-access-auth.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra\n```\n\n----------------------------------------\n\nTITLE: GroupId Parameter (YAML)\nDESCRIPTION: Defines the `-GroupId` parameter for the `Select-EntraGroupIdsGroupIsMemberOf` cmdlet in YAML format.  It specifies that the parameter accepts a string representing the group's ObjectId. It is a required, named parameter that accepts pipeline input.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Select-EntraGroupIdsGroupIsMemberOf.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: New-EntraBetaOauth2PermissionGrant Syntax\nDESCRIPTION: Defines the syntax for the New-EntraBetaOauth2PermissionGrant cmdlet, outlining the required and optional parameters.  It is crucial for understanding how to correctly format and execute the command. Includes parameters like ClientId, ConsentType, ResourceId, StartTime, and ExpiryTime.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaOauth2PermissionGrant.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-EntraBetaOauth2PermissionGrant\n -ClientId <string>\n -ConsentType <string>\n -ResourceId <string>\n -StartTime <datetime>\n -ExpiryTime <datetime>\n [-PrincipalId <string>]\n [-Scope <string>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Disabling a User Account - PowerShell\nDESCRIPTION: This snippet connects to Entra ID with the 'User.ReadWrite.All' scope and disables a user account specified by UserID. Disabling the account blocks the user from accessing company resources. Requires the Entra PowerShell module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-user.md#_snippet_21\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nSet-EntraUser -UserId 'SawyerM@contoso.com' -AccountEnabled $false\n```\n\n----------------------------------------\n\nTITLE: Get-EntraBetaDomain Syntax - GetQuery (PowerShell)\nDESCRIPTION: This code block shows the syntax for using `Get-EntraBetaDomain` with the `GetQuery` parameter set. It allows specifying properties to return using the `-Property` parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDomain.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaDomain\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Update User Display Name PowerShell\nDESCRIPTION: This example updates the display name of a specified user in Microsoft Entra ID. It requires the 'User.ReadWrite.All' scope and uses the Set-EntraBetaUser cmdlet with the -UserId and -DisplayName parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUser.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nSet-EntraBetaUser -UserId 'SawyerM@contoso.com' -DisplayName 'Updated user Name'\n```\n\n----------------------------------------\n\nTITLE: Get All Attribute Sets - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all attribute sets using the Get-EntraBetaAttributeSet cmdlet. It requires connecting to Entra ID with the 'CustomSecAttributeDefinition.ReadWrite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAttributeSet.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'CustomSecAttributeDefinition.ReadWrite.All'\nGet-EntraBetaAttributeSet \n```\n\n----------------------------------------\n\nTITLE: ServicePrincipalId Parameter Definition - YAML\nDESCRIPTION: Defines the YAML type and parameter set information for the `-ServicePrincipalId` parameter used in the `Get-EntraBetaServicePrincipalAppRoleAssignment` cmdlet. This parameter specifies the ID of the service principal.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalAppRoleAssignment.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Property Parameter Definition - YAML\nDESCRIPTION: Defines the YAML type and parameter set information for the `-Property` parameter used in the `Get-EntraBetaServicePrincipalAppRoleAssignment` cmdlet.  This parameter specifies which properties to return.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalAppRoleAssignment.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - Filter\nDESCRIPTION: This YAML snippet defines the `-Filter` parameter for the `Get-EntraDeletedDevice` cmdlet. It is a String, optional and can be provided by PropertyName or Value.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedDevice.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: GetQuery\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - State\nDESCRIPTION: This YAML snippet defines the State parameter for the Set-EntraConditionalAccessPolicy cmdlet. It is a String, optional, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraConditionalAccessPolicy.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Password Policy Syntax - GetQuery\nDESCRIPTION: Defines the syntax for retrieving the password policy without specifying a domain.  It uses the Get-EntraBetaPasswordPolicy cmdlet with optional CommonParameters. No specific parameters are required for this usage.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPasswordPolicy.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaPasswordPolicy\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition: -Top\nDESCRIPTION: Defines the `-Top` parameter for the Get-EntraApplicationOwner cmdlet. This parameter sets the maximum number of records to retrieve.  `Limit` is an alias for this parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplicationOwner.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Int32\nParameter Sets: (All)\nAliases: Limit\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Enable AzureAD Command Aliases - PowerShell\nDESCRIPTION: Enables Azure AD command aliases for the current PowerShell session. This allows users to use shorter, more convenient aliases for Azure AD commands, improving efficiency and ease of use.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Enable-EntraAzureADAlias.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nEnable-EntraAzureADAlias\n```\n\n----------------------------------------\n\nTITLE: Connect using Environment Variables\nDESCRIPTION: Connects to Microsoft Entra ID using environment variables for authentication. This allows for configuring credentials through environment variables, which is useful for automated deployments and CI/CD pipelines.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Connect-Entra.md#_snippet_14\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -EnvironmentVariable\n```\n\n----------------------------------------\n\nTITLE: Remove Password SSO Credential Syntax - PowerShell\nDESCRIPTION: This snippet shows the syntax for the Remove-EntraBetaPasswordSingleSignOnCredential cmdlet. It requires the ServicePrincipalId and PasswordSSOObjectId parameters to identify the credential to remove.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaPasswordSingleSignOnCredential.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraBetaPasswordSingleSignOnCredential\n -ServicePrincipalId <String>\n -PasswordSSOObjectId <PasswordSSOObjectId>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Configuring SignInAudience Parameter\nDESCRIPTION: This parameter specifies what Microsoft accounts are supported for the current application. This controls which users are able to sign into the application.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplication.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Application Proxy Connector Group Syntax - PowerShell\nDESCRIPTION: This syntax shows how to use the `Get-EntraBetaApplicationProxyApplicationConnectorGroup` cmdlet with the required `ObjectId` parameter to retrieve the connector group for a specific application.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationProxyApplicationConnectorGroup.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaApplicationProxyApplicationConnectorGroup\n -ObjectId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Output of Get top one tenant detail (PowerShell)\nDESCRIPTION: This is the expected output of Get-EntraBetaTenantDetail -Top 1.  It lists the DisplayName, Id, CountryLetterCode, and VerifiedDomains properties for the top tenant. VerifiedDomains is an array of domain objects including Capabilities, IsDefault, IsInitial, Name, and Type.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaTenantDetail.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nDisplayName Id                                   CountryLetterCode VerifiedDomains\n----------- --                                   ----------------- ---------------\nContoso     aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb NL                {@{Capabilities=Email, OfficeCommunicationsOnline; IsDefault=False; IsInitial=True; Name=contoso.onmicrosoft.com; Type=Managed; Addition…}}\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - MembershipType (YAML)\nDESCRIPTION: This YAML snippet defines the '-MembershipType' parameter for the Set-EntraAdministrativeUnit cmdlet. It specifies the data type, parameter set, aliases, whether it is required, its position, default value, and whether it accepts pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraAdministrativeUnit.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: New-EntraBetaPrivateAccessApplication Syntax\nDESCRIPTION: Displays the syntax for the New-EntraBetaPrivateAccessApplication cmdlet.  It shows the required parameter ApplicationName and the optional ConnectorGroupId parameter. CommonParameters are supported.  Requires the Microsoft.Entra.Beta module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaPrivateAccessApplication.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-EntraBetaPrivateAccessApplication\n -ApplicationName <String>\n [-ConnectorGroupId <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - PolicyId\nDESCRIPTION: This YAML snippet defines the PolicyId parameter for the Set-EntraConditionalAccessPolicy cmdlet. It specifies that the parameter is a String, is required, and accepts pipeline input by property name or value.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraConditionalAccessPolicy.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: All Switch Parameter Definition\nDESCRIPTION: YAML definition for the -All switch parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedAdministrativeUnit.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Retrieve Application Role Assignments - PowerShell\nDESCRIPTION: This example retrieves application role assignments for a specific service principal using `Get-EntraBetaServicePrincipalAppRoleAssignment`. It first connects to Entra ID with necessary scopes and fetches the service principal by its display name before retrieving the role assignments.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalAppRoleAssignment.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraBetaServicePrincipalAppRoleAssignment -ServicePrincipalId $servicePrincipal.Id\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                          AppRoleId                            CreationTimestamp   PrincipalDisplayName PrincipalId                          PrincipalType ResourceDisplayName ResourceId\n--                                          ---------                            -----------------   -------------------- -----------                          ------------- ------------------- ----------\n1aaaaaa1-2bb2-3cc3-4dd4-5eeeeeeeeee5 00000000-0000-0000-0000-000000000000 07-07-2023 17:03:59 MOD Administrator    aaaaaaaa-bbbb-cccc-1111-222222222222 User          ProvisioningPowerBi 021510b7-e753-40…\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - SearchString\nDESCRIPTION: This YAML snippet defines the `-SearchString` parameter for the `Get-EntraDeletedDevice` cmdlet. It is a String, optional and can be provided by PropertyName or Value.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedDevice.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: GetVague\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get All User Roles Example - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all directory roles assigned to a specific user using the -All parameter with the Get-EntraBetaUserRole cmdlet. It first connects to Entra ID with the required scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserRole.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\nGet-EntraBetaUserRole -UserId 'SawyerM@contoso.com' -All\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDeletedDateTime         Id                                   DisplayName               RoleTemplateId\n---------------         --                                   -----------               --------------\n                       bbbbbbbb-1111-2222-3333-ccccccccccc  Helpdesk Administrator    729827e3-9c14-49f7-bb1b-9608f156bbb8\n                       dddddddd-3333-4444-5555-eeeeeeeeeeee Directory Readers         88d8e3e3-8f55-4a1e-953a-9b9898b8876b\n                       cccccccc-2222-3333-4444-dddddddddddd Application Administrator 9b895d92-2cd3-44c7-9d02-a6ac2d5ea5c3\n                       aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb Guest Inviter             95e79109-95c0-4d8e-aee3-d01accf2d47b\n```\n\n----------------------------------------\n\nTITLE: Defining ApplicationServerTimeout Parameter\nDESCRIPTION: This YAML snippet defines the `-ApplicationServerTimeout` parameter. It specifies the backend server timeout type.  Setting this value to `Long` is only advised if the application is slow to authenticate and connect. The parameter is optional and accepts values of the `ApplicationServerTimeoutEnum` type.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplicationProxyApplication.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nType: ApplicationServerTimeoutEnum\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: All Parameter Definition - YAML\nDESCRIPTION: Defines the '-All' parameter for Get-EntraContract, which is a switch parameter. When present, it indicates to list all pages of results.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraContract.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - Type YAML\nDESCRIPTION: Defines the Type parameter for the New-EntraApplicationKeyCredential cmdlet. This parameter is optional and accepts a KeyType value to specify the type of the key.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplicationKeyCredential.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nType: KeyType\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get PowerShell Execution Policy\nDESCRIPTION: This command retrieves the current PowerShell execution policy. It is used to ensure that the execution policy is set to `RemoteSigned` or less restrictive, which is required to run scripts and modules from the internet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/installation.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-ExecutionPolicy -List\n```\n\n----------------------------------------\n\nTITLE: Remove Application Password Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Remove-EntraBetaApplicationPassword cmdlet, specifying the required ApplicationId and optional KeyId parameters for removing a password from an application in Microsoft Entra ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaApplicationPassword.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraBetaApplicationPassword\n -ApplicationId <String>\n [-KeyId <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get User Groups - Example 1\nDESCRIPTION: Retrieves a list of groups to which a specific user belongs. It shows the use of Connect-Entra to establish a connection with the required scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserGroup.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All', 'Group.Read.All', 'Directory.Read.All'\nGet-EntraBetaUserGroup -UserId 'SawyerM@contoso.com'\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDisplayName                Id                                   MailNickname        Description               GroupTypes\n-----------                --                                   ------------        -----------               ----------\nContoso Marketing          hhhhhhhh-3333-5555-3333-qqqqqqqqqqqq ContosoMarketing    Contoso Marketing         {Unified}\nMark 8 Project Team        pppppppp-4444-0000-8888-yyyyyyyyyyyy  Mark8ProjectTeam    Mark 8 Project Team       {Unified}\nLeadership                 tttttttt-0000-3333-9999-mmmmmmmmmmmm  Leadership          Leadership                {Unified}\nSales and Marketing        qqqqqqqq-5555-0000-1111-hhhhhhhhhhhh  SalesAndMarketing   Sales and Marketing       {Unified}\nRetail                     aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb  Retail              Retail                    {Unified}\n```\n\n----------------------------------------\n\nTITLE: Connect to Entra ID with Process Context Scope\nDESCRIPTION: Connects to an environment using the `Process` context scope.  This allows the connection to be made as a different identity than the current user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Connect-Entra.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -ContextScope 'Process'\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n```Output\nWelcome to Microsoft Graph!\n```\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition -Property Parameter YAML\nDESCRIPTION: This YAML snippet defines the -Property parameter for the Get-EntraUserDirectReport cmdlet, which specifies the properties to be returned. This is a string array parameter, and it is optional.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserDirectReport.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: ParentalControlSettings Parameter Definition\nDESCRIPTION: This YAML snippet describes the `-ParentalControlSettings` parameter for the `New-EntraApplication` cmdlet. It defines that `ParentalControlSettings` is of type `ParentalControlSettings`, is not required, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplication.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nType: ParentalControlSettings\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: MaxAttributesPerSet Parameter - YAML\nDESCRIPTION: This YAML snippet documents the `-MaxAttributesPerSet` parameter for the `Set-EntraAttributeSet` cmdlet. It specifies the parameter type as `System.Int32`, indicates that it's optional, and describes its purpose: to set the maximum number of custom security attributes (defaulting to null, allowing up to 500 active attributes per tenant).\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraAttributeSet.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Int32\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Authentication Method User Registration Detail Report - GetQuery Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the `Get-EntraAuthenticationMethodUserRegistrationDetailReport` cmdlet using the GetQuery parameter set. This allows for retrieving user registration details with optional filtering, sorting, and property selection.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAuthenticationMethodUserRegistrationDetailReport.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraAuthenticationMethodUserRegistrationDetailReport\n [-Top <Int32>]\n [-All]\n [-Filter <String>]\n [-Sort <String>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove Identity Provider - PowerShell\nDESCRIPTION: This example demonstrates how to remove a specific identity provider using its unique identifier. The user needs to connect to Entra ID with the necessary scopes before executing the command. The IdentityProviderBaseId parameter specifies the unique identifier of the identity provider to be removed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraIdentityProvider.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'IdentityProvider.ReadWrite.All'\nRemove-EntraIdentityProvider -IdentityProviderBaseId 'LinkedIn-OAUTH'\n```\n\n----------------------------------------\n\nTITLE: Update Microsoft.Entra.Users Module (v1)\nDESCRIPTION: This command updates the Microsoft.Entra.Users submodule to the latest version. The `-Force` parameter ensures the update occurs even if the module is in use. This is a specific example for updating the `Users` submodule.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/includes/update-entrapowershell-module.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nUpdate-Module -Name Microsoft.Entra.Users -Force\n```\n\n----------------------------------------\n\nTITLE: Revoke-EntraSignedInUserAllRefreshToken Syntax - PowerShell\nDESCRIPTION: This snippet shows the syntax for the `Revoke-EntraSignedInUserAllRefreshToken` cmdlet. It demonstrates that the cmdlet can be used without any specific parameters, but supports CommonParameters. When executed, it invalidates all refresh tokens for the signed-in user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Revoke-EntraSignedInUserAllRefreshToken.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nRevoke-EntraSignedInUserAllRefreshToken\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Specific Application Template by ID - Powershell\nDESCRIPTION: This PowerShell code retrieves a specific application template by its ID. It first retrieves an application template object using its display name, and then retrieves the template by its ID using the `$applicationTemplate.Id`. A connection to Entra ID is required with the `Application.Read.All` scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationTemplate.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$applicationTemplate = Get-EntraBetaApplicationTemplate -Filter \"DisplayName eq 'Dynamics CRM Online'\"\nGet-EntraBetaApplicationTemplate -Id $applicationTemplate.Id\n```\n\n----------------------------------------\n\nTITLE: Get Directory Role by ID (GetById)\nDESCRIPTION: This syntax retrieves a specific directory role by its ID. The `-DirectoryRoleId` parameter is mandatory. The `-Property` parameter allows specifying which properties to return.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirectoryRole.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaDirectoryRole\n -DirectoryRoleId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove Application Segment Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Remove-EntraBetaPrivateAccessApplicationSegment cmdlet. It requires the ApplicationId and optionally takes ApplicationSegmentId as parameters to specify the application segment to remove.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaPrivateAccessApplicationSegment.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraBetaPrivateAccessApplicationSegment\n -ApplicationId <String>\n [-ApplicationSegmentId <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get-EntraBetaUserAdministrativeUnit Syntax - GetQuery\nDESCRIPTION: This shows the syntax for the Get-EntraBetaUserAdministrativeUnit cmdlet using the GetQuery parameter set. It includes the UserId, All, Top, and Property parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserAdministrativeUnit.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaUserAdministrativeUnit\n -UserId <String>\n [-All]\n [-Top <Int32>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove Scoped Role Membership Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Remove-EntraBetaScopedRoleMembership cmdlet. It specifies the required parameters AdministrativeUnitId and ScopedRoleMembershipId for identifying the role membership to be removed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaScopedRoleMembership.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraBetaScopedRoleMembership\n -AdministrativeUnitId <String>\n -ScopedRoleMembershipId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Set Client Timeout\nDESCRIPTION: Sets the HTTP client timeout in seconds for the connection to Entra ID. This parameter specifies the duration the client will wait for a response before timing out.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Connect-Entra.md#_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -ClientTimeout 60\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n```Output\nWelcome to Microsoft Graph!\n```\n```\n\n----------------------------------------\n\nTITLE: Get User Groups - Example 2\nDESCRIPTION: Retrieves a list of groups to which a specific user belongs using the All parameter. This ensures all pages are retrieved.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserGroup.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All', 'Group.Read.All', 'Directory.Read.All'\nGet-EntraBetaUserGroup -UserId 'SawyerM@contoso.com' -All\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDisplayName                Id                                   MailNickname        Description               GroupTypes\n-----------                --                                   ------------        -----------               ----------\nContoso Marketing          hhhhhhhh-3333-5555-3333-qqqqqqqqqqqq ContosoMarketing    Contoso Marketing         {Unified}\nMark 8 Project Team        pppppppp-4444-0000-8888-yyyyyyyyyyyy  Mark8ProjectTeam    Mark 8 Project Team       {Unified}\nLeadership                 tttttttt-0000-3333-9999-mmmmmmmmmmmm  Leadership          Leadership                {Unified}\nSales and Marketing        qqqqqqqq-5555-0000-1111-hhhhhhhhhhhh  SalesAndMarketing   Sales and Marketing       {Unified}\nRetail                     aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb  Retail              Retail                    {Unified}\n```\n\n----------------------------------------\n\nTITLE: Get-EntraAttributeSet Syntax - GetQuery (PowerShell)\nDESCRIPTION: Shows the syntax for retrieving all attribute sets without filtering. Requires appropriate Microsoft Entra role or custom role with necessary permissions.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAttributeSet.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraAttributeSet\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove Service Principal Password Credential Syntax (PowerShell)\nDESCRIPTION: Defines the syntax for the Remove-EntraBetaServicePrincipalPasswordCredential cmdlet. It requires the ServicePrincipalId and KeyId parameters to identify the credential to be removed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaServicePrincipalPasswordCredential.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraBetaServicePrincipalPasswordCredential\n -ServicePrincipalId <String>\n -KeyId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Revoke User Refresh Tokens Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the `Revoke-EntraBetaUserAllRefreshToken` cmdlet. This cmdlet invalidates refresh tokens issued to applications for a specified user by using the `-UserId` parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Revoke-EntraBetaUserAllRefreshToken.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRevoke-EntraBetaUserAllRefreshToken\n -UserId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating Application from Template with New-EntraApplicationFromApplicationTemplate (PowerShell)\nDESCRIPTION: This PowerShell command creates a new application from an application template using the New-EntraApplicationFromApplicationTemplate cmdlet from the Microsoft.Entra module. It depends on the Microsoft.Entra PowerShell module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_19\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-EntraApplicationFromApplicationTemplate\n```\n\n----------------------------------------\n\nTITLE: Get-EntraBetaUserAdministrativeUnit Syntax - GetById\nDESCRIPTION: This shows the syntax for the Get-EntraBetaUserAdministrativeUnit cmdlet using the GetById parameter set.  It includes the UserId, AdministrativeUnitId, and Property parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserAdministrativeUnit.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaUserAdministrativeUnit\n -UserId <String>\n -AdministrativeUnitId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Syntax for Get-EntraTrustedCertificateAuthority\nDESCRIPTION: Defines the syntax of the Get-EntraTrustedCertificateAuthority PowerShell cmdlet, showing the available parameters such as TrustedIssuer, TrustedIssuerSki and Property.  It also indicates the availability of CommonParameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraTrustedCertificateAuthority.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraTrustedCertificateAuthority\n [-TrustedIssuerSki <String>]\n [-TrustedIssuer <String>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: New-EntraBetaApplicationExtensionProperty Syntax\nDESCRIPTION: Defines the syntax for the New-EntraBetaApplicationExtensionProperty cmdlet. It shows the required and optional parameters for creating a new application extension property in Microsoft Entra ID.  The ApplicationId is a required parameter, while DataType and TargetObjects are optional.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplicationExtensionProperty.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-EntraBetaApplicationExtensionProperty\n -ApplicationId <String>\n [-DataType <String>]\n -Name <String>\n [-TargetObjects <System.Collections.Generic.List`1[System.String]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Defining Internal URL Parameter in YAML\nDESCRIPTION: This YAML snippet defines the `-InternalUrl` parameter, specifying its type as `System.String`, its requirement status, and its ability to accept pipeline input by property name or value. It configures the internal URL used to access the application within the private network.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplicationProxyApplication.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get-EntraGroupPermissionGrant Syntax (PowerShell)\nDESCRIPTION: Defines the syntax of the Get-EntraGroupPermissionGrant cmdlet. It takes a GroupId (string) as a required parameter and an optional Property (string array) parameter. It also supports CommonParameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraGroupPermissionGrant.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraGroupPermissionGrant\n -GroupId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Assign Single User Sponsor - PowerShell\nDESCRIPTION: Assigns a single user as a sponsor to a target user account using the Set-EntraUserSponsor cmdlet. It connects to Entra ID with User.ReadWrite.All scope, retrieves the sponsor user ID, and then sets the user as the sponsor.  It requires the Microsoft.Entra.Beta module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUserSponsor.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\n$sponsor = Get-EntraUser -UserId 'SponsorEmail@contoso.com'\nSet-EntraUserSponsor -UserId 'JohnstoneH@fabrikam.com' -Type User -SponsorIds $sponsor.Id\n```\n\n----------------------------------------\n\nTITLE: Get Custom Security Attribute Definitions\nDESCRIPTION: Retrieves a list of custom security attribute definitions. Requires the CustomSecAttributeDefinition.Read.All or CustomSecAttributeDefinition.ReadWrite.All scope and appropriate Microsoft Entra role or custom role permissions.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaCustomSecurityAttributeDefinition.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaCustomSecurityAttributeDefinition\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Application Owner Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Get-EntraBetaApplicationOwner cmdlet. It shows the available parameters such as -ApplicationId, -Top, -All, and -Property, which are used to filter and retrieve application owners in Microsoft Entra ID. CommonParameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationOwner.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaApplicationOwner\n -ApplicationId <String>\n [-Top <Int32>]\n [-All]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Permissions of Specified Type - PowerShell\nDESCRIPTION: This example shows how to get all permissions of a specific type, such as 'Delegated', using the `-PermissionType` parameter in `Find-EntraPermission`. The output provides the Id, Consent Name, and Description for the delegated permissions found.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Find-EntraPermission.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nFind-EntraPermission -PermissionType 'Delegated'\n```\n\n----------------------------------------\n\nTITLE: ProgressAction Parameter in YAML\nDESCRIPTION: Defines the ProgressAction parameter for the Get-EntraContext cmdlet in YAML format. This parameter determines how PowerShell handles progress updates from the cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraContext.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get User Groups - Example 3\nDESCRIPTION: Retrieves a group to which a specific user belongs, limiting the result to the top 1. Demonstrates using the Top parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserGroup.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'GroupMember.Read.All', 'Group.Read.All', 'Directory.Read.All'\nGet-EntraBetaUserGroup -UserId 'SawyerM@contoso.com' -Top 1\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nDisplayName                Id                                   MailNickname        Description               GroupTypes\n-----------                --                                   ------------        -----------               ----------\nContoso Marketing          hhhhhhhh-3333-5555-3333-qqqqqqqqqqqq ContosoMarketing    Contoso Marketing         {Unified}\n```\n\n----------------------------------------\n\nTITLE: ContractId Parameter Definition - YAML\nDESCRIPTION: Defines the '-ContractId' parameter for Get-EntraContract, which specifies the ID of a contract. It is a required parameter for the GetById parameter set.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraContract.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: GetById\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: TenantId Parameter (YAML)\nDESCRIPTION: YAML definition for the `-TenantId` parameter of the `Connect-Entra` cmdlet. Specifies the ID of a tenant to connect to.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Connect-Entra.md#_snippet_18\n\nLANGUAGE: YAML\nCODE:\n```\nType:  System.String\nParameter Sets: UserParameterSet, AppCertificateParameterSet, AppSecretCredentialParameterSet\nAliases: Audience, Tenant\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get-EntraBetaDomainFederationSettings Syntax - PowerShell\nDESCRIPTION: This shows the syntax of the `Get-EntraBetaDomainFederationSettings` cmdlet, including the `-DomainName` and optional `-TenantId` parameters. It also indicates the availability of common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDomainFederationSettings.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaDomainFederationSettings\n -DomainName <String>\n [-TenantId <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get User Groups (GetQuery)\nDESCRIPTION: Retrieves the groups to which a user belongs. Requires the UserID. Supports filtering with Top parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserGroup.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaUserGroup\n -UserId <String>\n [-All]\n [-Top <Int32>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Enabling Azure AD Alias with Enable-EntraAzureADAlias (PowerShell)\nDESCRIPTION: This PowerShell command enables Azure AD Alias using the Enable-EntraAzureADAlias cmdlet from the Microsoft.Entra module.  It requires the Groups submodule of the Microsoft.Entra PowerShell module. The command activates the Azure AD Alias functionality.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nEnable-EntraAzureADAlias\n```\n\n----------------------------------------\n\nTITLE: Remove Entra Domain Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Remove-EntraDomain cmdlet. It requires the -Name parameter to specify the domain to be removed and supports CommonParameters for controlling the cmdlet's behavior.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraDomain.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraDomain\n -Name <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Add-EntraBetaScopedRoleMembership Syntax - PowerShell\nDESCRIPTION: The following syntax block shows how to use the Add-EntraBetaScopedRoleMembership cmdlet with its parameters. It requires the AdministrativeUnitId parameter, and optionally accepts RoleMemberInfo and RoleObjectId. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaScopedRoleMembership.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-EntraBetaScopedRoleMembership\n -AdministrativeUnitId <String>\n [-RoleMemberInfo <RoleMemberInfo>]\n [-RoleObjectId <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Set-EntraDirSyncEnabled Syntax - PowerShell\nDESCRIPTION: This snippet shows the syntax for the `Set-EntraDirSyncEnabled` cmdlet, including the `-EnableDirSync`, `-Force`, and `-TenantId` parameters.  It also indicates the availability of common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraDirSyncEnabled.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-EntraDirSyncEnabled\n -EnableDirSync <Boolean> \n [-Force] \n [-TenantId <String>] \n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition -UserId Parameter YAML\nDESCRIPTION: This YAML snippet defines the -UserId parameter for the Get-EntraUserDirectReport cmdlet, which is used to specify the user's ID (UserPrincipalName or UserId) in Microsoft Entra ID. This is a string parameter, and it is required.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserDirectReport.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId, UPN, Identity, UserPrincipalName\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: New-EntraBetaApplicationKey Syntax - PowerShell\nDESCRIPTION: This snippet shows the syntax for the New-EntraBetaApplicationKey cmdlet. It defines the parameters ApplicationId, KeyCredential, Proof, and PasswordCredential that can be used with the cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplicationKey.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-EntraBetaApplicationKey\n -ApplicationId <String>\n -KeyCredential <KeyCredential>\n -Proof <String>\n [-PasswordCredential <PasswordCredential>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: New-EntraApplicationPassword Output Example\nDESCRIPTION: Shows the expected output when adding a password to an Entra application. It displays details such as CustomKeyIdentifier, DisplayName, EndDateTime, Hint, KeyId, SecretText (masked), and StartDateTime of the password credential.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplicationPassword.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nCustomKeyIdentifier DisplayName EndDateTime          Hint KeyId                                SecretText                               StartDateTime\n------------------- ----------- -----------          ---- -----                                ----------                               -------------\n{97}                            2/28/2025 7:05:39 AM nnW  bbbbbbbb-1c1c-2d2d-3e3e-444444444444 <my-secret-text> 12/28/2024 7:05:39 AM\n```\n\n----------------------------------------\n\nTITLE: CertificateThumbprint Parameter (YAML)\nDESCRIPTION: YAML definition for the `-CertificateThumbprint` parameter of the `Connect-Entra` cmdlet. Specifies the certificate thumbprint for authentication.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Connect-Entra.md#_snippet_16\n\nLANGUAGE: YAML\nCODE:\n```\nType:  System.String\nParameter Sets: AppCertificateParameterSet\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get-EntraBetaIdentityProvider Syntax - GetById\nDESCRIPTION: Syntax for the Get-EntraBetaIdentityProvider cmdlet using the GetById parameter set. It retrieves a specific identity provider using its ID and allows optional property selection.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaIdentityProvider.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaIdentityProvider\n -IdentityProviderBaseId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove Entra Trusted Certificate Authority Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Remove-EntraTrustedCertificateAuthority cmdlet, specifying the required -CertificateAuthorityInformation parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraTrustedCertificateAuthority.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraTrustedCertificateAuthority\n -CertificateAuthorityInformation <CertificateAuthorityInformation>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Administrative Units - Example 3 (Top)\nDESCRIPTION: This example retrieves the top two deleted administrative units, selects specific properties, and displays them in a formatted table. The `-Top 2` parameter limits the results to the first two entries.  It connects to Entra ID using the 'AdministrativeUnit.Read.All' scope. The output shows the selected properties for the top two deleted administrative units.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedAdministrativeUnit.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.Read.All'\nGet-EntraBetaDeletedAdministrativeUnit -Top 2 | Select-Object Id, DisplayName, MembershipType, Visibility, DeletedDateTime, DeletionAgeInDays | Format-Table -AutoSize\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                   DisplayName                   MembershipType     Visibility         DeletedDateTime           DeletionAgeInDays\n--                                   -----------                   --------------     ----------         ---------------           -----------------\ngggggggg-8888-9999-aaaa-hhhhhhhhhhhh Americas Administrative Unit   Dynamic           HiddenMembership   2/12/2025 12:40:52 PM     10\n```\n\n----------------------------------------\n\nTITLE: ServicePrincipalId Parameter - YAML\nDESCRIPTION: Defines the properties of the -ServicePrincipalId parameter for the Remove-EntraServicePrincipal cmdlet. This parameter is a string that represents the object ID of the service principal to be removed.  It is a required named parameter that accepts pipeline input.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraServicePrincipal.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Sign-in ID Parameter Definition in YAML\nDESCRIPTION: This YAML snippet defines the -SignInId parameter for a PowerShell cmdlet. It specifies the parameter's type as System.String, indicates that it's not required, and defines aliases and other attributes like accept pipeline input and wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAuditSignInLog.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: Id\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Add Group to Lifecycle Policy Syntax - PowerShell\nDESCRIPTION: This section shows the syntax for using the `Add-EntraLifecyclePolicyGroup` cmdlet in PowerShell. It details the required parameters: `-GroupId` and `-GroupLifecyclePolicyId`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Add-EntraLifecyclePolicyGroup.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-EntraLifecyclePolicyGroup\n -GroupId <String>\n -GroupLifecyclePolicyId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Property Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the '-Property' parameter for the Get-EntraCustomSecurityAttributeDefinition cmdlet. It specifies that the parameter is a System.String array, is optional for all parameter sets, does not accept pipeline input or wildcard characters, and allows specifying which properties to return.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraCustomSecurityAttributeDefinition.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Privileged Role Assignment Request by Query - PowerShell\nDESCRIPTION: This snippet demonstrates how to retrieve privileged role assignment requests using the GetQuery parameter set. It requires a ProviderId and allows filtering with an OData query. It returns a list of role assignment requests that match the specified criteria.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPrivilegedRoleAssignmentRequest.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaPrivilegedRoleAssignmentRequest\n -ProviderId <String>\n [-Filter <String>]\n [-Top <Int32>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Syntax for Remove-EntraBetaDeviceRegisteredUser (PowerShell)\nDESCRIPTION: This snippet shows the syntax for using the `Remove-EntraBetaDeviceRegisteredUser` cmdlet in PowerShell. It requires the `-DeviceId` and `-UserId` parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaDeviceRegisteredUser.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraBetaDeviceRegisteredUser\n -DeviceId <String>\n -UserId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating an excluded permission grant condition set\nDESCRIPTION: This example creates a permission grant condition set that is excluded from the policy. It sets various parameters, including PermissionClassification, ClientApplicationsFromVerifiedPublisherOnly, ClientApplicationIds, ClientApplicationTenantIds, and ClientApplicationPublisherIds. It showcases how to use splatting to pass parameters to the command.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaPermissionGrantConditionSet.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.PermissionGrant'\n$permissionGrantPolicy = Get-EntraBetaPermissionGrantPolicy | Where-Object { $_.Id -eq 'my-custom-consent-policy' }\n$params = @{\n    PolicyId                                    = $permissionGrantPolicy.Id\n    ConditionSetType                            = 'excludes'\n    PermissionType                              = 'delegated'\n    Permissions                                 = @('All')\n    ResourceApplication                         = 'a0a0a0a0-bbbb-cccc-dddd-e1e1e1e1e1e1'\n    PermissionClassification                    = 'low'\n    ClientApplicationsFromVerifiedPublisherOnly = $true\n    ClientApplicationIds                        = @('All')\n    ClientApplicationTenantIds                  = @('All')\n    ClientApplicationPublisherIds               = @('All')\n}\nNew-EntraBetaPermissionGrantConditionSet @params\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId                                   CertifiedClientApplicationsOnly ClientApplicationIds ClientApplicationPublisherIds ClientApplicationTenantIds ClientApplicationsFromVerifiedPublisherOnly PermissionClassification\n--                                   ------------------------------- -------------------- ----------------------------- -------------------------- ------------------------------------------- -------------------\ndddd3333-ee44-5555-66ff-777777aaaaaa False                           {all}                {all}                         {all}                      True                                        low\n```\n\n----------------------------------------\n\nTITLE: Get-EntraBetaApplicationLogo Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Get-EntraBetaApplicationLogo cmdlet. It shows the available parameters such as ApplicationId, FileName, FilePath and View.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationLogo.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaApplicationLogo\n -ApplicationId <String>\n [-FileName <String>]\n [-FilePath <String>]\n [-View <Boolean>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Connect to Entra ID using Device Code Flow\nDESCRIPTION: Authenticates to Microsoft Entra ID using device code flow, which is commonly used for devices that lack a browser or interactive interface. The command prompts the user to authenticate via a web browser on another device.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Connect-Entra.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -UseDeviceCode\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n```Output\nTo sign in, use a web browser to open the page https://microsoft.com/devicelogin and enter the code A1B2CDEFGH to authenticate.\n```\n```\n\n----------------------------------------\n\nTITLE: Select-EntraBetaGroupIdsGroupIsMemberOf Syntax - PowerShell\nDESCRIPTION: This snippet shows the syntax for using the Select-EntraBetaGroupIdsGroupIsMemberOf cmdlet. It requires specifying a GroupId and a GroupIdsForMembershipCheck object.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Select-EntraBetaGroupIdsGroupIsMemberOf.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSelect-EntraBetaGroupIdsGroupIsMemberOf\n -GroupId <String>\n -GroupIdsForMembershipCheck <GroupIdsForMembershipCheck>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Confirm-EntraBetaDomain Syntax\nDESCRIPTION: Defines the syntax for the Confirm-EntraBetaDomain cmdlet, including the DomainName and ForceTakeover parameters. It specifies the required and optional parameters for the cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Confirm-EntraBetaDomain.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConfirm-EntraBetaDomain\n -DomainName <String>\n -ForceTakeover <Boolean>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Setting Web Parameter\nDESCRIPTION: This parameter is used to specify settings for a web application. It accepts a WebApplication object allowing configuration of web-specific settings.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplication.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nType: WebApplication\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get-EntraUserAuthenticationMethod Syntax (PowerShell)\nDESCRIPTION: Defines the syntax for the `Get-EntraUserAuthenticationMethod` cmdlet. It takes a `-UserId` parameter as input to specify the target user and supports common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserAuthenticationMethod.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraUserAuthenticationMethod\n -UserId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove Registered User Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Remove-EntraDeviceRegisteredUser cmdlet. It requires the DeviceId and UserId parameters to identify the device and user to remove.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraDeviceRegisteredUser.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraDeviceRegisteredUser\n -DeviceId <String>\n -UserId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition: -All\nDESCRIPTION: Defines the -All parameter for the Get-EntraBetaServicePrincipalOwner cmdlet. This parameter specifies whether to list all pages of results.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalOwner.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Connect to Entra ID without Welcome Message\nDESCRIPTION: Connects to Entra ID and suppresses the welcome message. This is useful for scripting environments where the welcome message is not desired.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Connect-Entra.md#_snippet_14\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -NoWelcome\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application Template with Get-EntraApplicationTemplate (PowerShell)\nDESCRIPTION: This PowerShell command retrieves application templates using the Get-EntraApplicationTemplate cmdlet from the Microsoft.Entra module. It depends on the Microsoft.Entra PowerShell module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_21\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraApplicationTemplate\n```\n\n----------------------------------------\n\nTITLE: GroupId Parameter Definition - YAML\nDESCRIPTION: This YAML snippet describes the `-GroupId` parameter for the `Add-EntraLifecyclePolicyGroup` cmdlet. It specifies the type, requirement, position, default value, and accepted pipeline input.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Add-EntraLifecyclePolicyGroup.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: KeyCredentials Parameter Definition\nDESCRIPTION: This YAML snippet defines the KeyCredentials parameter for the Set-EntraBetaApplication cmdlet, providing its type and other specifications. This parameter specifies key credentials for the application.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplication.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.KeyCredential]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: AccessToken Parameter (YAML)\nDESCRIPTION: YAML definition for the `-AccessToken` parameter of the `Connect-Entra` cmdlet. Specifies a bearer token used for Microsoft Entra service authentication.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Connect-Entra.md#_snippet_19\n\nLANGUAGE: YAML\nCODE:\n```\nType: SecureString\nParameter Sets: AccessTokenParameterSet\nAliases: \nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Remove User Extension with Multiple Names - PowerShell\nDESCRIPTION: This snippet shows the syntax for the Remove-EntraBetaUserExtension cmdlet when removing a user extension using a list of extension names. It requires specifying the ObjectId of the user and a list of ExtensionNames to remove. The cmdlet removes the specified user extensions from Microsoft Entra ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaUserExtension.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraBetaUserExtension\n -ObjectId <String>\n -ExtensionNames <System.Collections.Generic.List`1[System.String]>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: YAML Parameter Definition for -All\nDESCRIPTION: Defines the YAML structure and properties for the `-All` parameter within the Get-EntraBetaDeletedAdministrativeUnit cmdlet.  This parameter specifies whether to list all pages of results.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedAdministrativeUnit.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get-EntraBetaIdentityProvider Syntax - GetQuery\nDESCRIPTION: Syntax for the Get-EntraBetaIdentityProvider cmdlet using the GetQuery parameter set.  It allows retrieving identity providers with optional property selection.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaIdentityProvider.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaIdentityProvider\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Attribute Set by ID - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve a specific attribute set by its ID using the Get-EntraBetaAttributeSet cmdlet with the -AttributeSetId parameter.  It also requires connecting to Entra ID with appropriate permissions.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAttributeSet.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'CustomSecAttributeDefinition.ReadWrite.All'\nGet-EntraBetaAttributeSet -AttributeSetId 'Testing'\n```\n\n----------------------------------------\n\nTITLE: Remove Administrative Unit Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Remove-EntraBetaAdministrativeUnit cmdlet, specifying the required AdministrativeUnitId parameter for identifying the administrative unit to remove.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaAdministrativeUnit.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraBetaAdministrativeUnit\n -AdministrativeUnitId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get trusted certificate authorities\nDESCRIPTION: Retrieves all trusted certificate authorities defined in the Azure Active Directory. Requires connecting to Entra with 'Organization.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraTrustedCertificateAuthority.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All'\nGet-EntraTrustedCertificateAuthority\n```\n\n----------------------------------------\n\nTITLE: Get-EntraBetaDirectoryRoleMember Syntax - PowerShell\nDESCRIPTION: Shows the syntax for the Get-EntraBetaDirectoryRoleMember cmdlet. It takes the DirectoryRoleId as a mandatory parameter and Property as an optional parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirectoryRoleMember.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaDirectoryRoleMember\n -DirectoryRoleId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove Permission Grant Policy Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Remove-EntraBetaPermissionGrantPolicy cmdlet. The -Id parameter specifies the unique identifier of the permission grant policy to be removed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaPermissionGrantPolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraBetaPermissionGrantPolicy\n -Id <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get-EntraUnsupportedCommand Example Usage\nDESCRIPTION: Shows a placeholder example of how to use the Get-EntraUnsupportedCommand cmdlet within a PowerShell session. The actual code and description need to be added.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraUnsupportedCommand.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> {{ Add example code here }}\n```\n\n----------------------------------------\n\nTITLE: New-EntraBetaApplicationFromApplicationTemplate Syntax\nDESCRIPTION: This code snippet shows the syntax for the `New-EntraBetaApplicationFromApplicationTemplate` cmdlet. It accepts the ApplicationTemplateId and DisplayName as parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplicationFromApplicationTemplate.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-EntraBetaApplicationFromApplicationTemplate\n -ApplicationTemplateId <String>\n -DisplayName <ApplicationTemplateDisplayName>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Defining -SearchString Parameter in PowerShell YAML\nDESCRIPTION: This YAML snippet defines the `-SearchString` parameter for a PowerShell cmdlet.  It specifies the data type as `System.String`, marks the parameter as optional (`Required: False`), and indicates it can accept pipeline input by property name or value. Wildcard characters are not supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplication.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: GetVague\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Property Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the `-Property` parameter for the `Get-EntraDomainNameReference` cmdlet. It specifies the data type, aliases, whether it's required, and other relevant attributes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDomainNameReference.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Remove Service Principal Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Remove-EntraServicePrincipal cmdlet. It specifies the -ServicePrincipalId parameter, which is required to identify the service principal to remove, along with the common parameters available for all cmdlets.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraServicePrincipal.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraServicePrincipal\n -ServicePrincipalId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: MemberId Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the MemberId parameter for the Remove-EntraBetaAdministrativeUnitMember cmdlet.  It specifies the data type, whether it's required, its position, and other attributes relevant to parameter handling in PowerShell.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaAdministrativeUnitMember.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Domain Service Configuration Records by Name - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve domain service configuration records for a specific domain name using the Get-EntraBetaDomainServiceConfigurationRecord cmdlet. It first establishes a connection to Entra ID with the required 'Domain.Read.All' scope, then uses the cmdlet to retrieve the records.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDomainServiceConfigurationRecord.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Domain.Read.All'\nGet-EntraBetaDomainServiceConfigurationRecord -Name 'test.mail.contoso.com'\n```\n\n----------------------------------------\n\nTITLE: Remove-EntraLifecyclePolicyGroup Syntax - PowerShell\nDESCRIPTION: This syntax block defines the structure of the Remove-EntraLifecyclePolicyGroup cmdlet, including required parameters -GroupId and -GroupLifecyclePolicyId.  It uses CommonParameters for optional parameters such as -Debug, -Verbose, etc.\n\nDependencies: Microsoft.Entra module.\n\nParameters:\n- GroupId: Specifies the ID of the group to remove.\n- GroupLifecyclePolicyId: Specifies the ID of the lifecycle policy to remove the group from.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraLifecyclePolicyGroup.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraLifecyclePolicyGroup\n -GroupId <String>\n -GroupLifecyclePolicyId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove Proxy Application - PowerShell\nDESCRIPTION: This example demonstrates how to remove a Proxy Application using the Remove-EntraBetaApplicationProxyApplication cmdlet. It connects to Entra ID and then removes the proxy configuration from the specified application using its ApplicationId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaApplicationProxyApplication.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\nRemove-EntraBetaApplicationProxyApplication -ApplicationId 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb'\n```\n\n----------------------------------------\n\nTITLE: Resolve Tenant by GUID - PowerShell\nDESCRIPTION: This example shows how to resolve a Microsoft Entra tenant by its Tenant ID (GUID). First, it connects to Entra ID using `Connect-Entra` with the required scope. Then, it retrieves the current tenant ID using `Get-EntraContext` and stores it in the `$tenantId` variable. Finally, it uses `Resolve-EntraBetaTenant` with the `-TenantId` parameter to resolve the tenant.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Resolve-EntraBetaTenant.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'CrossTenantInformation.ReadBasic.All'\n$tenantId=(Get-EntraContext).TenantId\nResolve-EntraBetaTenant -TenantId $tenantId\n```\n\n----------------------------------------\n\nTITLE: DeviceId Parameter Definition - YAML\nDESCRIPTION: Defines the DeviceId parameter for the Remove-EntraDeviceRegisteredUser cmdlet. It specifies that the DeviceId is a required string parameter, can accept pipeline input, and does not accept wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraDeviceRegisteredUser.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Remove Application Key Credential Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the `Remove-EntraBetaApplicationKeyCredential` cmdlet.  It requires the `ApplicationId` and `KeyId` parameters. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaApplicationKeyCredential.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraBetaApplicationKeyCredential\n -ApplicationId <String>\n -KeyId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Add Directory Role Member Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the `Add-EntraBetaDirectoryRoleMember` cmdlet.  It requires the `DirectoryRoleId` and `MemberId` parameters. These parameters specify the directory role and the member to be added, respectively. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaDirectoryRoleMember.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-EntraBetaDirectoryRoleMember\n -DirectoryRoleId <String>\n -MemberId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Set Application Logo with Stream (PowerShell)\nDESCRIPTION: Sets the logo for an application using a stream. Requires the ApplicationId parameter. This uses the Stream parameter set. The exact method for providing the stream data is not detailed in this document.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplicationLogo.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-EntraBetaApplicationLogo\n -ApplicationId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: IdentityProviderBaseId Parameter Definition - YAML\nDESCRIPTION: This YAML code defines the IdentityProviderBaseId parameter for the Remove-EntraIdentityProvider cmdlet. It specifies that it is a required parameter of type System.String and can accept pipeline input.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraIdentityProvider.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: Id\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition: -ServicePrincipalId\nDESCRIPTION: Defines the -ServicePrincipalId parameter for the Get-EntraBetaServicePrincipalOwner cmdlet. This parameter specifies the ID of the service principal.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalOwner.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get-EntraContactThumbnailPhoto Syntax\nDESCRIPTION: Displays the syntax for the Get-EntraContactThumbnailPhoto cmdlet.  This cmdlet retrieves the thumbnail photo of a contact object.  It requires the ObjectId of the contact and accepts optional parameters for specifying the file path, file name, and whether to view the photo.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraContactThumbnailPhoto.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraContactThumbnailPhoto\n -ObjectId <String>\n [-FilePath <String>]\n [-FileName <String>]\n [-View <Boolean>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Add-EntraBetaDeviceRegisteredOwner Syntax - PowerShell\nDESCRIPTION: This snippet shows the syntax for the `Add-EntraBetaDeviceRegisteredOwner` cmdlet.  It takes the DeviceId and OwnerId as parameters, both of which are strings and are required.  It also supports common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaDeviceRegisteredOwner.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-EntraBetaDeviceRegisteredOwner\n -DeviceId <String>\n -OwnerId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Set-EntraDevice Syntax\nDESCRIPTION: This code snippet shows the syntax for the Set-EntraDevice cmdlet. It includes all available parameters and their data types, showing how to use the cmdlet with different options to update device properties. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraDevice.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-EntraDevice\n -DeviceObjectId <String>\n [-DevicePhysicalIds <System.Collections.Generic.List`1[String]>]\n [-DeviceOSType <String>]\n [-DeviceTrustType <String>]\n [-DisplayName <String>]\n [-DeviceMetadata <String>]\n [-ApproximateLastLogonTimeStamp <DateTime>]\n [-AccountEnabled <Boolean>]\n [-IsManaged <Boolean >]\n [-DeviceId <String>]\n [-DeviceObjectVersion <Int32>]\n [-IsCompliant <Boolean>]\n [-DeviceOSVersion <String>]\n [-AlternativeSecurityIds <System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.AlternativeSecurityId]>]\n [-ProfileType <String>]\n [-SystemLabels <System.Collections.Generic.List`1[String]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Defining ImmutableId Parameter in YAML\nDESCRIPTION: This YAML snippet defines the ImmutableId parameter for a PowerShell cmdlet. ImmutableId links an on-premises Active Directory user account to its Microsoft Entra ID user object. It specifies the data type, parameter set, aliases, required status, position, default value, pipeline input, and wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUser.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Current Entra Context in PowerShell\nDESCRIPTION: Retrieves details about the current Entra session, including ClientID, TenantID, Scopes, and AuthType. This information is useful for understanding the current authentication context and permissions.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraContext.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraContext\n [-ProgressAction <ActionPreference>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Update Nuget Package and PowerShellGet Module - PowerShell\nDESCRIPTION: This set of commands updates the NuGet package provider and the PowerShellGet module. This is a prerequisite for installing or updating modules. These commands are typically needed when encountering errors related to parameter recognition during module installation. The `-Force` parameter ensures the installation proceeds without prompting for confirmation, and `-AllowClobber` allows overwriting existing files.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/troubleshooting.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n## Update Nuget Package and PowerShellGet Module \n\nInstall-PackageProvider NuGet -Scope CurrentUser -Force \n\nInstall-Module PowerShellGet -Scope CurrentUser -Force -AllowClobber \n\n## Remove old modules from existing session \n\nRemove-Module PowerShellGet,PackageManagement -Force -ErrorAction Ignore \n\n## Import updated module \n\nImport-Module PowerShellGet -MinimumVersion 2.0 -Force \n\nImport-PackageProvider PowerShellGet -MinimumVersion 2.0 -Force \n```\n\n----------------------------------------\n\nTITLE: Remove Licenses Assigned to a User - PowerShell\nDESCRIPTION: This snippet removes a specific license assigned to a user in Entra ID. It requires the `User.ReadWrite.All` scope. The script retrieves the user, identifies the `SkuId` of the license to remove, and then uses `Set-EntraUserLicense` to remove the license. Replace 'AljosaH@Contoso.com' with the actual user's UserPrincipalName.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/how-to-manage-user-licenses.md#_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\n# Get user details\n$user = Get-EntraUser -UserId 'AljosaH@Contoso.com'\n\n# Get the license assigned to the user\n$skuId = (Get-EntraUserLicenseDetail -UserId $user.Id).SkuId\n\n# Define the license object\n$licensesToRemove = New-Object -TypeName Microsoft.Open.AzureAD.Model.AssignedLicenses\n$licensesToRemove.RemoveLicenses = $skuId\n\n# Remove the assigned license\nSet-EntraUserLicense -UserId $user.Id -AssignedLicenses $licensesToRemove\n```\n\n----------------------------------------\n\nTITLE: Get-EntraBetaGroup Syntax (GetByValue) - PowerShell\nDESCRIPTION: This code snippet shows the syntax for using the Get-EntraBetaGroup cmdlet with the GetByValue parameter set, allowing you to search for groups using a search string.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaGroup.md#_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaGroup\n [-SearchString <String>]\n [-All]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get User Groups by ID\nDESCRIPTION: Retrieves a specific group a user belongs to, identified by GroupId. Requires both UserID and GroupId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserGroup.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaUserGroup\n -UserId <String>\n -GroupId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deleted Administrative Units with Get-EntraDeletedAdministrativeUnit (PowerShell)\nDESCRIPTION: This PowerShell command retrieves deleted administrative units using the Get-EntraDeletedAdministrativeUnit cmdlet from the Microsoft.Entra module. It returns the `DeletionAgeInDays` response property. It depends on the Microsoft.Entra PowerShell module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_14\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraDeletedAdministrativeUnit\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition for -Id\nDESCRIPTION: Defines the `-Id` parameter used to specify the unique identifier of the permission grant policy. It is a required parameter for the `GetById` parameter set and accepts a string value.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraPermissionGrantPolicy.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: GetById\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Retrieve Users Without Sign-Ins Using Filter - Example 3\nDESCRIPTION: This example shows how to retrieve users who haven't signed in within the last 10 days and uses a filter to select a specific user by UserPrincipalName. It utilizes the `Where-Object` cmdlet for filtering.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserInactiveSignIn.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All','AuditLog.Read.All'\nGet-EntraBetaUserInactiveSignIn -Ago 10 | Where-Object {$_.UserPrincipalName -eq 'SawyerM@contoso.com'}\n```\n\n----------------------------------------\n\nTITLE: Add Delegated Permission Classification - PowerShell Output\nDESCRIPTION: This is the expected output from the Add-EntraBetaServicePrincipalDelegatedPermissionClassification cmdlet. It displays the ID, Classification, PermissionId, and PermissionName of the created delegated permission classification.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaServicePrincipalDelegatedPermissionClassification.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nId                      Classification PermissionId                         PermissionName\n--                      -------------- ------------                         --------------\nT2qU_E28O0GgkLLIYRPsTwE low            fc946a4f-bc4d-413b-a090-b2c86113ec4f LicenseManager.AccessAsUser\n```\n\n----------------------------------------\n\nTITLE: Syntax for Add-EntraBetaApplicationPolicy (PowerShell)\nDESCRIPTION: This snippet shows the syntax for using the Add-EntraBetaApplicationPolicy cmdlet with the ByApplicationIdAndPolicyId parameter set. It shows the required parameters Id and RefObjectId. It implicitly relies on the Microsoft.Entra.Beta module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaApplicationPolicy.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-EntraBetaApplicationPolicy\n -Id <String>\n -RefObjectId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Documenting -DeviceId Parameter in YAML\nDESCRIPTION: This YAML snippet documents the `-DeviceId` parameter for a PowerShell cmdlet. It specifies the parameter's type, parameter set, aliases, whether it's required, its position, default value, and pipeline input properties. It defines how to specify the ID of a device in Microsoft Entra ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDevice.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: GetById\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Update User's Sponsor - PowerShell\nDESCRIPTION: This PowerShell command updates the sponsor of a user in Microsoft Entra. It is a new command introduced in the March 2025 release (Version 1.0.5) of the Microsoft Entra PowerShell module. No specific dependencies are mentioned beyond having the updated module installed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-EntraUserSponsor\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - YAML\nDESCRIPTION: These YAML snippets defines the properties of each parameter used by the PowerShell cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPrivilegedRoleAssignmentRequest.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nType: String\nParameter Sets: GetById\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\nLANGUAGE: YAML\nCODE:\n```\nType: String\nParameter Sets: GetQuery\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\nLANGUAGE: YAML\nCODE:\n```\nType: String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\nLANGUAGE: YAML\nCODE:\n```\nType: Int32\nParameter Sets: GetQuery\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get-EntraUnsupportedCommand Syntax\nDESCRIPTION: Defines the syntax of the Get-EntraUnsupportedCommand cmdlet. This snippet shows how the cmdlet can be called without any parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraUnsupportedCommand.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraUnsupportedCommand\n```\n\n----------------------------------------\n\nTITLE: Show User's Updated Authentication Method Details in PowerShell\nDESCRIPTION: This example retrieves audit logs related to a user's updated authentication methods. It first retrieves the user ID using `Get-EntraBetaUser` and then uses the `Filter` parameter of `Get-EntraBetaAuditDirectoryLog` to filter the logs based on `category`, `LoggedByService`, and `targetResources`. This allows you to find specific authentication method-related events for a given user. Dependencies include the Entra PowerShell module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAuditDirectoryLog.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AuditLog.Read.All, Directory.Read.All'\n$userId = (Get-EntraBetaUser -UserId 'sawyerM@contoso.com').Id\nGet-EntraBetaAuditDirectoryLog -Filter \"category eq 'UserManagement' and LoggedByService eq 'Authentication Methods' and targetResources/any(r:r/id eq '$userId')\"\n```\n\n----------------------------------------\n\nTITLE: Defining -Tags Parameter in YAML\nDESCRIPTION: This YAML snippet defines the `-Tags` parameter, specifying its type as a list of strings, indicating it's an optional named parameter with no default value, and doesn't accept pipeline input or wildcard characters. These are custom strings to categorize the application.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplication.md#_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[System.String]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Application by ID - PowerShell\nDESCRIPTION: Defines the syntax for retrieving a specific deleted application using its Application ID. It uses the GetById parameter set. Requires the ApplicationId parameter which is a string representing the ID of the application.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedApplication.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraDeletedApplication\n -ApplicationId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Definition of -ProgressAction Parameter in YAML\nDESCRIPTION: Defines the -ProgressAction parameter, which takes one of the ActionPreference enumeration values. It is of type ActionPreference, is not required, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Connect-Entra.md#_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nType: ActionPreference\nParameter Sets: (All)\nAliases: proga\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Getting Help for Entra Cmdlets - PowerShell\nDESCRIPTION: This snippet demonstrates how to use `Get-Help` to obtain detailed information about a specific Microsoft Entra PowerShell cmdlet. It provides examples, parameter descriptions, and output details. Requires the Microsoft Entra PowerShell module to be installed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/entra-powershell-best-practices.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-Help Get-EntraUser -Detailed\n```\n\n----------------------------------------\n\nTITLE: Get-EntraAttributeSet Syntax - GetById (PowerShell)\nDESCRIPTION: Shows the syntax for retrieving a specific attribute set by its ID.  The `-AttributeSetId` parameter is required. Requires appropriate Microsoft Entra role or custom role with necessary permissions.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAttributeSet.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraAttributeSet\n -AttributeSetId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Add Group Owner Syntax - PowerShell\nDESCRIPTION: This code snippet shows the syntax for the `Add-EntraBetaGroupOwner` cmdlet. It requires the GroupId and OwnerId parameters to specify the group and the user/service principal to add as an owner.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaGroupOwner.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nAdd-EntraBetaGroupOwner\n -GroupId <String>\n -OwnerId <String>\n [-WhatIf]\n [-Confirm]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get a Limited Number of Administrative Units for a User\nDESCRIPTION: This example demonstrates how to retrieve a limited number of administrative units to which a specific user belongs, using the -Top parameter. It also points out that '-Limit' can be used as an alias for '-Top'. It requires the 'AdministrativeUnit.Read.All' scope, and the -UserId specifies the user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserAdministrativeUnit.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.Read.All'\nGet-EntraBetaUserAdministrativeUnit -UserId 'SawyerM@contoso.com' -Top 1\n```\n\n----------------------------------------\n\nTITLE: GroupMembershipClaims Parameter Definition\nDESCRIPTION: This YAML snippet defines the GroupMembershipClaims parameter for the Set-EntraBetaApplication cmdlet, specifying its type and other characteristics. The parameter configures the groups claim issued in a user or OAuth 2.0 access token.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplication.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: PasswordSSOCredential Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the `-PasswordSSOCredential` parameter for the `Set-EntraBetaPasswordSingleSignOnCredential` cmdlet.  It specifies the type as `System.PasswordSSOCredentials`, indicates that it is a required parameter. It also describes pipeline input acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaPasswordSingleSignOnCredential.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.PasswordSSOCredentials\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - DeviceObjectId\nDESCRIPTION: This YAML snippet defines the `-DeviceObjectId` parameter for the `Get-EntraDeletedDevice` cmdlet. It is a String, required and Id is an alias for the same.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedDevice.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: GetById\nAliases: Id\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Authentication Method User Registration Detail Report - GetById Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the `Get-EntraAuthenticationMethodUserRegistrationDetailReport` cmdlet using the GetById parameter set. This allows for retrieving a specific user's registration details using the UserRegistrationDetailsId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAuthenticationMethodUserRegistrationDetailReport.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraAuthenticationMethodUserRegistrationDetailReport\n -UserRegistrationDetailsId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Sign-In Audience Definition (YAML)\nDESCRIPTION: Specifies the Microsoft accounts supported by the application. The value is a string. It controls who can sign in to the application, for example, 'AzureADMyOrg' for single-tenant applications or 'AzureADandPersonalMicrosoftAccount' for multi-tenant applications.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraApplication.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: IsFallbackPublicClient Parameter Definition\nDESCRIPTION: This YAML snippet describes the `-IsFallbackPublicClient` parameter for the `New-EntraApplication` cmdlet. It defines that `IsFallbackPublicClient` is of type `System.Boolean`, is not required, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplication.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Boolean\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Remove-EntraDeletedApplication Syntax - PowerShell\nDESCRIPTION: This snippet shows the syntax for the `Remove-EntraDeletedApplication` cmdlet.  It requires the `-ApplicationId` parameter, which is the unique identifier of the deleted application.  It also supports common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraDeletedApplication.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraDeletedApplication\n [-ApplicationId] <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: GroupId Parameter Definition\nDESCRIPTION: Defines the `-GroupId` parameter for `Get-EntraUserGroup`, used to specify the unique ID of a group. `DirectoryObjectId` is an alias for `GroupId`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserGroup.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: GetQuery\nAliases: DirectoryObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Create Trust Framework Policy with Output File - PowerShell\nDESCRIPTION: This example shows how to create a trust framework policy from a string content and specify an output file path to save the policy. It connects to Entra ID and uses a hashtable to pass the -Content and -OutputFilePath parameters to the New-EntraBetaTrustFrameworkPolicy cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaTrustFrameworkPolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.TrustFramework'\n$policyContent = Get-Content 'C:\\temp\\CreatedPolicy.xml' | out-string\n$params = @{\n    Content =  $policyContent\n    OutputFilePath = 'C:\\CreatedPolicy.xml'\n}\nNew-EntraBetaTrustFrameworkPolicy @params\n```\n\n----------------------------------------\n\nTITLE: GroupLifecyclePolicyId Parameter Definition - YAML\nDESCRIPTION: This YAML snippet describes the `-GroupLifecyclePolicyId` parameter for the `Add-EntraLifecyclePolicyGroup` cmdlet. It defines the parameter's type, aliases, requirement, position, default value, and accepted pipeline input methods.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Add-EntraLifecyclePolicyGroup.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: Id\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: New Custom Security Attribute Definition Syntax (PowerShell)\nDESCRIPTION: This snippet shows the syntax for the New-EntraBetaCustomSecurityAttributeDefinition cmdlet. It highlights the mandatory and optional parameters required to create a new custom security attribute definition in Entra ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaCustomSecurityAttributeDefinition.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-EntraBetaCustomSecurityAttributeDefinition\n -IsSearchable <Boolean>\n -IsCollection <Boolean>\n -AttributeSet <String>\n -Type <String>\n -Name <String>\n -Status <String>\n -UsePreDefinedValuesOnly <Boolean>\n [-Description <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Entra.Beta Module for All Users\nDESCRIPTION: This PowerShell command installs the Microsoft.Entra.Beta module from the PSGallery repository for all users on the system. It uses the AllUsers scope, requiring administrator privileges to install. The -Force and -AllowClobber parameters are used to overwrite any existing versions and prevent installation prompts.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/includes/installation-entrapowershell-all.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module -Name Microsoft.Entra.Beta -Repository PSGallery -Scope AllUsers -Force -AllowClobber\n```\n\n----------------------------------------\n\nTITLE: Add Administrative Unit Member Syntax (PowerShell)\nDESCRIPTION: This shows the syntax of the Add-EntraBetaAdministrativeUnitMember cmdlet, highlighting the required parameters. The cmdlet adds a member to a specified administrative unit.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaAdministrativeUnitMember.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nAdd-EntraBetaAdministrativeUnitMember\n -MemberId <String>\n -AdministrativeUnitId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove Identity Provider Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Remove-EntraBetaIdentityProvider cmdlet. It requires the IdentityProviderBaseId parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaIdentityProvider.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraBetaIdentityProvider\n -IdentityProviderBaseId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Listing GA/v1.0 Microsoft Entra Modules in PowerShell\nDESCRIPTION: This PowerShell command lists all General Availability (GA/v1.0) Microsoft Entra modules available in the PowerShell Gallery. It uses `Find-Module` to search for modules with names starting with \"Microsoft.Entra*\" and then filters out any modules with \"beta\" in their name using `Where-Object`. The result is a list of stable, production-ready Microsoft Entra PowerShell modules.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/includes/install-specific-submodules.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nFind-Module -Name \"Microsoft.Entra*\" -Repository PSGallery |\nWhere-Object { $_.Name -notmatch \"beta\" }\n```\n\n----------------------------------------\n\nTITLE: Set-EntraIdentityProvider Syntax - PowerShell\nDESCRIPTION: This code defines the syntax for the Set-EntraIdentityProvider cmdlet, including the required and optional parameters. It shows how to use the cmdlet to modify an existing identity provider's settings, such as ClientId, ClientSecret, and Name. The IdentityProviderBaseId is required to identify the provider to modify.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraIdentityProvider.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-EntraIdentityProvider\n -IdentityProviderBaseId <String>\n [-Type <String>]\n [-ClientSecret <String>]\n [-ClientId <String>]\n [-Name <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: AdministrativeUnitId Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the AdministrativeUnitId parameter for the Remove-EntraBetaAdministrativeUnitMember cmdlet.  It specifies that the parameter expects a string representing the ID of the administrative unit in Microsoft Entra ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaAdministrativeUnitMember.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Disconnect Entra ID Example PowerShell\nDESCRIPTION: This is an example demonstrating how to use the `Disconnect-Entra` cmdlet. This command will disconnect your current PowerShell session from the Microsoft Entra tenant. It shows the basic usage of the command without any additional parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Disconnect-Entra.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n Disconnect-Entra\n```\n\n----------------------------------------\n\nTITLE: Get App Roles for Resource Service Principal (Microsoft Graph)\nDESCRIPTION: Retrieves the app roles defined for the 'Microsoft Graph' service principal in the tenant.  It uses the `Get-EntraServicePrincipal` cmdlet to filter for the 'Microsoft Graph' service principal, then expands the `appRoles` property and formats the output as a list. The output shows the properties of each app role, including allowed member types, description, display name, ID, and value.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/how-to-grant-revoke-api-permissions.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraServicePrincipal -Filter \"displayName eq 'Microsoft Graph'\" -Property AppRoles |\n  Select-Object -ExpandProperty appRoles |Format-List\n```\n\n----------------------------------------\n\nTITLE: Set Attribute Set Syntax - PowerShell\nDESCRIPTION: Defines the syntax of the `Set-EntraBetaAttributeSet` cmdlet. The cmdlet is used to update an existing attribute set and allows modifications to the description and maximum number of attributes per set.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaAttributeSet.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-EntraBetaAttributeSet\n -AttributeSetId <String>\n [-Description <String>]\n [-MaxAttributesPerSet <Int32>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Entra Module for All Users\nDESCRIPTION: This PowerShell command installs the Microsoft.Entra module from the PSGallery repository for all users on the system. It uses the AllUsers scope, which requires admin permissions. The -Force and -AllowClobber parameters are used to overwrite any existing versions and prevent installation prompts.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/includes/installation-entrapowershell-all.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module -Name Microsoft.Entra -Repository PSGallery -Scope AllUsers -Force -AllowClobber\n```\n\n----------------------------------------\n\nTITLE: AddIns Parameter Definition\nDESCRIPTION: This YAML snippet describes the AddIns parameter for the Set-EntraBetaApplication cmdlet. It specifies the type, parameter sets, aliases, required status, position, default value, and whether it accepts pipeline input or wildcard characters. AddIns defines custom behavior that a consuming service can use to call an app in specific contexts.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplication.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.AddIn]\nType: System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.AddIn]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Output Example Filter - PowerShell\nDESCRIPTION: Shows the output when filtering the delegated permission classifications. It will show only the classifications that match the filter criteria, with properties such as Id, Classification, PermissionId and PermissionName.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalDelegatedPermissionClassification.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                      Classification PermissionId                         PermissionName\n--                      -------------- ------------                         --------------\nbbbbbbbb-7777-8888-9999-cccccccccccc low            eeeeeeee-4444-5555-6666-ffffffffffff Sites.Read.All\n```\n\n----------------------------------------\n\nTITLE: Remove Entra Policy Syntax - PowerShell\nDESCRIPTION: This snippet shows the syntax for the Remove-EntraPolicy cmdlet. It requires the -Id parameter, which specifies the ID of the policy to be removed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraPolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraPolicy\n -Id <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: DisplayName Parameter Definition\nDESCRIPTION: This YAML snippet defines the DisplayName parameter for the Set-EntraBetaApplication cmdlet, detailing its type, parameter sets, and other attributes. The DisplayName specifies the display name of the application.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplication.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: CertificateAuthorityInformation Parameter - YAML\nDESCRIPTION: Defines the CertificateAuthorityInformation parameter for the Set-EntraTrustedCertificateAuthority cmdlet. This parameter is required, accepts pipeline input (ByPropertyName, ByValue), and does not accept wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraTrustedCertificateAuthority.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: CertificateAuthorityInformation\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get-EntraBetaDirSyncFeature Syntax - PowerShell\nDESCRIPTION: This code snippet shows the syntax for the `Get-EntraBetaDirSyncFeature` cmdlet. It includes the optional parameters `TenantId` (to specify a specific tenant) and `Feature` (to check the status of a particular feature), as well as the common parameters available to all cmdlets.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirSyncfeature.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaDirSyncFeature\n [-TenantId <String>]\n [-Feature <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Retrieve Application Proxy Connector Group - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve the connector group assigned to a specified application. It first connects to Entra ID with the necessary scopes, retrieves an application by its display name, and then uses `Get-EntraBetaApplicationProxyApplicationConnectorGroup` to fetch the connector group, using the application's ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationProxyApplicationConnectorGroup.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All'\n$application = Get-EntraBetaApplication -Filter \"DisplayName eq 'Contoso App Proxy'\"\nGet-EntraBetaApplicationProxyApplicationConnectorGroup -ObjectId $application.Id\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId                                   Name       ConnectorGroupType IsDefault\n--                                   ----       ------------------ ---------\nbbbbbbbb-1111-2222-3333-cccccccccccc test-group applicationProxy       False\n```\n\n----------------------------------------\n\nTITLE: Get predefined value with ID parameter\nDESCRIPTION: This example retrieves a specific predefined value for a custom security attribute definition using its ID. It first connects to Entra, gets the attribute definition and retrieves the predefined value using the `-Id` parameter. It requires 'CustomSecAttributeDefinition.ReadWrite.All' scopes to execute.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaCustomSecurityAttributeDefinitionAllowedValue.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'CustomSecAttributeDefinition.ReadWrite.All'\n$attributeDefinition = Get-EntraBetaCustomSecurityAttributeDefinition | Where-Object {$_.Name -eq 'Engineering'}\nGet-EntraBetaCustomSecurityAttributeDefinitionAllowedValue -CustomSecurityAttributeDefinitionId $attributeDefinition.Id -Id 'Alpine'\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n```Output\nId        IsActive\n--        --------\nApline    True\n```\n```\n\n----------------------------------------\n\nTITLE: Set-EntraBetaIdentityProvider Syntax\nDESCRIPTION: This is the syntax block for the Set-EntraBetaIdentityProvider cmdlet. It shows the parameters that can be used when calling the cmdlet including IdentityProviderBaseId, Type, Name, ClientId and ClientSecret.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaIdentityProvider.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nSet-EntraBetaIdentityProvider\n -IdentityProviderBaseId <String>\n [-Type <String>]\n [-Name <String>]\n [-ClientId <String>]\n [-ClientSecret <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Property Parameter Definition - YAML\nDESCRIPTION: This YAML defines the `-Property` parameter, which is an array of strings, allowing the user to specify which properties to return in the output. `Select` is defined as an alias for the `Property` parameter.  The parameter is optional, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAuditDirectoryLog.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get-EntraApplicationLogo Syntax\nDESCRIPTION: This code snippet displays the syntax for using the `Get-EntraApplicationLogo` cmdlet in PowerShell. It shows the available parameters such as `ApplicationId`, `FileName`, `View`, and `FilePath`, along with the common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplicationLogo.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraApplicationLogo\n -ApplicationId <String>\n [-FileName <String>]\n [-View <Boolean>]\n [-FilePath <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: All Parameter Definition (YAML)\nDESCRIPTION: This YAML snippet describes the `-All` parameter for the `Get-EntraBetaAuditDirectoryLog` cmdlet. It is a switch parameter which causes the cmdlet to list all pages of results. It is not required and defaults to false.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAuditDirectoryLog.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for TenantId Parameter\nDESCRIPTION: This YAML configuration describes the `-TenantId` parameter used in the `Reset-EntraBetaStrongAuthenticationMethodByUpn` cmdlet. It specifies the type, parameter sets, aliases, requirement, position, default value, pipeline input acceptance, and wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Reset-EntraBetaStrongAuthenticationMethodByUpn.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: \nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Password Credentials Parameter Configuration - YAML\nDESCRIPTION: Defines the configuration for the `-PasswordCredentials` parameter. This parameter accepts a list of `PasswordCredential` objects, is not required, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraServicePrincipal.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.PasswordCredential]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get top two deleted users\nDESCRIPTION: This PowerShell snippet retrieves the top two recoverable deleted users. It uses the `-Top` parameter to limit the number of results returned. The output is a table containing details of the deleted users.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedUser.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\nGet-EntraBetaDeletedUser -Top 2 | Select-Object Id, UserPrincipalName, DisplayName, AccountEnabled, DeletedDateTime, DeletionAgeInDays, UserType | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: New-EntraAttributeSet Syntax\nDESCRIPTION: Defines the syntax for the New-EntraAttributeSet command, including parameters for AttributeSetId, Description, and MaxAttributesPerSet. The command also supports common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraAttributeSet.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-EntraAttributeSet\n [-AttributeSetId <String>]\n [-Description <String>]\n [-MaxAttributesPerSet <Int32>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: IdentifierUris Parameter Definition\nDESCRIPTION: This YAML snippet describes the `-IdentifierUris` parameter for the `New-EntraApplication` cmdlet. It defines that `IdentifierUris` is a list of `System.String` objects, is not required, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplication.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[System.String]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Syntax for New-EntraBetaApplicationProxyConnectorGroup (PowerShell)\nDESCRIPTION: This shows the syntax for the `New-EntraBetaApplicationProxyConnectorGroup` cmdlet. The cmdlet requires the `-Name` parameter to specify the name of the new connector group. It also supports common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplicationProxyConnectorGroup.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-EntraBetaApplicationProxyConnectorGroup\n -Name <Name>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Defining Visibility Parameter in YAML\nDESCRIPTION: Defines the Visibility parameter, which controls the visibility of the group's content and member list. Possible values are \"Public\", \"Private\", and \"HiddenMembership\". This parameter only applies to Unified groups, and setting it to \"HiddenMembership\" is irreversible.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaGroup.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: DirectoryRoleId Parameter Definition - YAML\nDESCRIPTION: Defines the YAML configuration for the `DirectoryRoleId` parameter of the `Add-EntraBetaDirectoryRoleMember` cmdlet. Specifies that it is a string type, required, accepts pipeline input by property name and value, and does not accept wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaDirectoryRoleMember.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Checking Specific Submodule Installation (v1.0) - PowerShell\nDESCRIPTION: This PowerShell command verifies if a specific Microsoft Entra submodule, such as 'Microsoft.Entra.Users', is installed. It uses `Get-InstalledModule` to retrieve information about the specified module. The output displays the Version, Name, Repository, and Description of the installed submodule. This command depends on the PowerShellGet module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/includes/verify-installed-modules.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-InstalledModule -Name Microsoft.Entra.Users\n```\n\n----------------------------------------\n\nTITLE: Defining MailNickName Property in YAML\nDESCRIPTION: Defines the MailNickName property which specifies a nickname for the user's mail address. It specifies the data type, parameter set, aliases, required status, position, default value, and pipeline input/wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUser.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - Description (YAML)\nDESCRIPTION: This YAML snippet defines the '-Description' parameter for the Set-EntraAdministrativeUnit cmdlet. It specifies the data type, parameter set, whether it is required, its position, default value, and whether it accepts pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraAdministrativeUnit.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Definition of -Environment Parameter in YAML\nDESCRIPTION: Defines the -Environment parameter, which specifies the name of the national cloud environment to connect to. It is a System.String, is not required, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Connect-Entra.md#_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nType:  System.String\nParameter Sets: (All)\nAliases: EnvironmentName, NationalCloud\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - UserId\nDESCRIPTION: This YAML snippet defines the `-UserId` parameter for the `Get-EntraUserSponsor` cmdlet. It specifies that it's a string, is required, and accepts pipeline input by property name and value. It's used to identify the user whose sponsors are being retrieved.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserSponsor.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId, UPN, Identity, UserPrincipalName\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Remove Device Registered Owner Syntax - PowerShell\nDESCRIPTION: This code snippet shows the syntax for the Remove-EntraDeviceRegisteredOwner cmdlet. It requires DeviceId and OwnerId parameters to identify the device and the owner to be removed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraDeviceRegisteredOwner.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraDeviceRegisteredOwner\n -OwnerId <String>\n -DeviceId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Update Microsoft.Entra.Beta.Users Module\nDESCRIPTION: This command updates the Microsoft.Entra.Beta.Users PowerShell submodule to the latest version. The `-Force` parameter bypasses prompts and ensures the update proceeds without interruption, even if the module is in use.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/includes/update-entrapowershell-module.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nUpdate-Module -Name Microsoft.Entra.Beta.Users -Force\n```\n\n----------------------------------------\n\nTITLE: Name Parameter Definition\nDESCRIPTION: Defines the Name parameter for the New-EntraDomain cmdlet, indicating that it is a string representing the fully qualified name of the domain and is a required parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraDomain.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Defining UserId Parameter in YAML\nDESCRIPTION: This YAML snippet defines the UserId parameter for a PowerShell cmdlet. It specifies the data type, parameter set, aliases (ObjectId, UPN, Identity), required status, position, default value, pipeline input, and wildcard character acceptance. It is a required parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUser.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId, UPN, Identity\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Remove Administrative Unit Member Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Remove-EntraBetaAdministrativeUnitMember cmdlet. It requires the AdministrativeUnitId and MemberId parameters to identify the administrative unit and the member to be removed, respectively.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaAdministrativeUnitMember.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraBetaAdministrativeUnitMember\n -AdministrativeUnitId <String>\n -MemberId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Defining ServicePrincipalNames Parameter in PowerShell YAML\nDESCRIPTION: This YAML snippet defines the `-ServicePrincipalNames` parameter for a PowerShell cmdlet. It specifies the type as a list of strings and indicates that it is optional, named, and does not accept pipeline input or wildcard characters. This parameter represents service principal names.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraServicePrincipal.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[System.String]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get-EntraBetaDirectorySettingTemplate Syntax (GetById)\nDESCRIPTION: This shows the syntax for the GetById parameter set of the Get-EntraBetaDirectorySettingTemplate cmdlet. It allows retrieving a specific directory setting template by its ID. The `-Id` parameter specifies the ID of the template to retrieve, and the `-Property` parameter specifies the properties to return.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirectorySettingTemplate.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaDirectorySettingTemplate\n -Id <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: YAML Parameter Definition\nDESCRIPTION: These YAML snippets define the parameters for the `Get-EntraUserOwnedObject` cmdlet. Each snippet describes a specific parameter, including its type, whether it's required, its position, default value, and whether it accepts pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserOwnedObject.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId, UPN, Identity, UserPrincipalName\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Int32\nParameter Sets: (All)\nAliases: Limit\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Administrative Unit by ID\nDESCRIPTION: Retrieves a specific deleted administrative unit using its unique ID.  Requires the Microsoft.Entra.Beta module and the AdministrativeUnitId parameter. Returns a single administrative unit object if found.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedAdministrativeUnit.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaDeletedAdministrativeUnit\n -AdministrativeUnitId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove-EntraFeatureRolloutPolicyDirectoryObject Syntax (PowerShell)\nDESCRIPTION: This snippet shows the syntax for the `Remove-EntraFeatureRolloutPolicyDirectoryObject` cmdlet. It takes `-DirectoryObjectId` and `-FeatureRolloutPolicyId` as mandatory parameters and also supports common parameters.  The `DirectoryObjectId` specifies the ID of the directory object to remove, while the `FeatureRolloutPolicyId` specifies the ID of the feature rollout policy.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraFeatureRolloutPolicyDirectoryObject.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraFeatureRolloutPolicyDirectoryObject\n -DirectoryObjectId <String>\n -FeatureRolloutPolicyId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Api Parameter Definition\nDESCRIPTION: This YAML snippet describes the `-Api` parameter for the `New-EntraApplication` cmdlet. It defines that `Api` is of type `ApiApplication`, is not required, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplication.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nType: ApiApplication\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get-EntraBetaAttributeSet Syntax - GetById\nDESCRIPTION: Syntax for the Get-EntraBetaAttributeSet cmdlet using the GetById parameter set.  Requires the AttributeSetId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAttributeSet.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaAttributeSet\n -AttributeSetId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Defining PreferredSingleSignOnMode Parameter in YAML\nDESCRIPTION: Defines the `-PreferredSingleSignOnMode` parameter, specifying the single sign-on mode for the application. Supported values include password, saml, notSupported, and oidc.  This parameter is optional and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaServicePrincipal.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Set User Sponsor Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Set-EntraUserSponsor cmdlet using the SetUserSponsor parameter set. It includes parameters for UserId, Type, and SponsorIds. This syntax shows the required parameters for assigning sponsors to a user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUserSponsor.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-EntraUserSponsor\n -UserId <String>\n -Type <String>\n -SponsorIds <String[]>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Homepage Parameter Definition\nDESCRIPTION: Defines the Homepage parameter for the New-EntraBetaServicePrincipal cmdlet. It represents the home page or landing page of the application.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaServicePrincipal.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: InformationalUrl Parameter Definition\nDESCRIPTION: This YAML snippet defines the InformationalUrl parameter for the Set-EntraBetaApplication cmdlet, providing its type and other details. This parameter is used to define basic profile information of the application, such as the app's marketing, support, terms of service, and privacy statement URLs.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplication.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nType: InformationalUrl\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: New-EntraBetaGroupLifecyclePolicy Syntax (PowerShell)\nDESCRIPTION: Defines the syntax for the New-EntraBetaGroupLifecyclePolicy cmdlet. It shows the required parameters for creating a new group lifecycle policy, including AlternateNotificationEmails, ManagedGroupTypes, and GroupLifetimeInDays.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaGroupLifecyclePolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-EntraBetaGroupLifecyclePolicy\n -AlternateNotificationEmails <String>\n -ManagedGroupTypes <String>\n -GroupLifetimeInDays <Int32>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Top Parameter Definition\nDESCRIPTION: Defines the `-Top` parameter for the `Get-EntraUserGroup` cmdlet. It specifies the maximum number of groups to return, and `-Limit` can be used as an alias.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserGroup.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Int32\nParameter Sets: GetQuery\nAliases: Limit\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Contract by ID - PowerShell\nDESCRIPTION: This code snippet demonstrates how to retrieve a specific contract by its ID using the `GetById` syntax.  The `-ContractId` parameter specifies the ID of the contract to retrieve. It requires the Microsoft.Entra.Beta module to be installed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaContract.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaContract\n -ContractId <String>\n [-All]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: AdministrativeUnitId Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the `-AdministrativeUnitId` parameter for the `Remove-EntraAdministrativeUnitMember` cmdlet. It specifies that this parameter is of type String, is required, accepts pipeline input by property name or value, and does not accept wildcard characters. It represents the ID of the administrative unit.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraAdministrativeUnitMember.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Service Principal Key Credential Syntax PowerShell\nDESCRIPTION: Defines the syntax for the `Get-EntraServicePrincipalKeyCredential` cmdlet. It requires the `ServicePrincipalId` parameter to specify the target service principal.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalKeyCredential.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraServicePrincipalKeyCredential\n -ServicePrincipalId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: MemberId Parameter Definition - YAML\nDESCRIPTION: Defines the YAML configuration for the `MemberId` parameter of the `Add-EntraBetaDirectoryRoleMember` cmdlet. Specifies that it is a string type, required, accepts pipeline input by property name and value, and does not accept wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaDirectoryRoleMember.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: RefObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Retrieving Users with Get-EntraUser (PowerShell)\nDESCRIPTION: This PowerShell command retrieves users using the Get-EntraUser cmdlet from the Microsoft.Entra module. It depends on the Microsoft.Entra PowerShell module. Examples should be used with command context.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_22\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraUser\n```\n\n----------------------------------------\n\nTITLE: Documenting -Property Parameter in YAML\nDESCRIPTION: This YAML snippet documents the `-Property` parameter for a PowerShell cmdlet. It specifies the parameter's type, parameter sets, aliases, whether it's required, its position, default value, and pipeline input properties. It allows specifying properties to be returned.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDevice.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Remove Application Extension Property Syntax - PowerShell\nDESCRIPTION: This syntax shows the structure of the Remove-EntraBetaApplicationExtensionProperty cmdlet, highlighting the required ApplicationId and ExtensionPropertyId parameters. The cmdlet removes an application extension property from Microsoft Entra ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaApplicationExtensionProperty.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraBetaApplicationExtensionProperty\n -ApplicationId <String>\n -ExtensionPropertyId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition for -UserId\nDESCRIPTION: Defines the -UserId parameter for Get-EntraUserOAuth2PermissionGrant cmdlet as a string, which specifies the ID (as a User Principal Name or ObjectId) of a user. Accepts pipeline input by property name and value but does not support wildcards.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserOAuth2PermissionGrant.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId, UPN, Identity, UserPrincipalName\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Revoke-EntraBetaSignedInUserAllRefreshToken Syntax - PowerShell\nDESCRIPTION: This code snippet shows the syntax for the Revoke-EntraBetaSignedInUserAllRefreshToken cmdlet. It takes no specific parameters but supports CommonParameters. It invalidates all refresh tokens issued to applications for the currently signed-in user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Revoke-EntraBetaSignedInUserAllRefreshToken.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nRevoke-EntraBetaSignedInUserAllRefreshToken\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove-EntraBetaApplicationKey - Syntax\nDESCRIPTION: This code snippet shows the syntax of the Remove-EntraBetaApplicationKey cmdlet, including the parameters ApplicationId, KeyId and Proof.  The ApplicationId is required, while KeyId and Proof are optional.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaApplicationKey.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraBetaApplicationKey\n -ApplicationId <String>\n [-KeyId <String>]\n [-Proof <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Contact Manager Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Get-EntraBetaContactManager cmdlet, outlining the required and optional parameters such as OrgContactId and Property.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaContactManager.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaContactManager\n -OrgContactId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Defining -ParentalControlSettings Parameter in YAML\nDESCRIPTION: This YAML snippet defines the `-ParentalControlSettings` parameter, specifying its type as `ParentalControlSettings`, indicating it's an optional named parameter with no default value, and doesn't accept pipeline input or wildcard characters.  It specifies the parental control settings for an application.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplication.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nType: ParentalControlSettings\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Password Single-Sign-On Credentials Syntax (PowerShell)\nDESCRIPTION: Defines the syntax for the Get-EntraBetaPasswordSingleSignOnCredential cmdlet.  It requires ServicePrincipalId and PasswordSSOObjectId parameters. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPasswordSingleSignOnCredential.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaPasswordSingleSignOnCredential\n -ServicePrincipalId <String>\n -PasswordSSOObjectId <PasswordSSOObjectId>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - Usage YAML\nDESCRIPTION: Defines the Usage parameter for the New-EntraApplicationKeyCredential cmdlet. This parameter is optional and accepts a KeyUsage value to specify the key usage, with specific requirements for different key types (AsymmetricX509Cert must be Verify, X509CertAndPassword must be Sign).\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplicationKeyCredential.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nType: KeyUsage\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Administrative Units - Example 1\nDESCRIPTION: This example retrieves a list of deleted administrative units, selects specific properties (Id, DisplayName, MembershipType, Visibility, DeletedDateTime, DeletionAgeInDays), and displays them in a formatted table. It connects to Entra ID using the 'AdministrativeUnit.Read.All' scope. The output shows the selected properties for each deleted administrative unit.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedAdministrativeUnit.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.Read.All'\nGet-EntraBetaDeletedAdministrativeUnit | Select-Object Id, DisplayName, MembershipType, Visibility, DeletedDateTime, DeletionAgeInDays | Format-Table -AutoSize\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                   DisplayName                   MembershipType     Visibility         DeletedDateTime           DeletionAgeInDays\n--                                   -----------                   --------------     ----------         ---------------           -----------------\ngggggggg-8888-9999-aaaa-hhhhhhhhhhhh Americas Administrative Unit   Dynamic           HiddenMembership   2/12/2025 12:40:52 PM     10\n```\n\n----------------------------------------\n\nTITLE: Definition of -ContextScope Parameter in YAML\nDESCRIPTION: Defines the -ContextScope parameter, which determines the scope of the authentication context. The accepted values are Process and CurrentUser. It is not required and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Connect-Entra.md#_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nType: ContextScope\nAccepted values: Process, CurrentUser\nParameter Sets: UserParameterSet, AppCertificateParameterSet, IdentityParameterSet, AppSecretCredentialParameterSet, EnvironmentVariableParameterSet\nAliases: \nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - StartDate YAML\nDESCRIPTION: Defines the StartDate parameter for the New-EntraApplicationKeyCredential cmdlet. This parameter is optional and accepts a DateTime object to specify the time when the key becomes valid.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplicationKeyCredential.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.DateTime\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get App Role Assignments by ID - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve app role assignments for a service principal using its ID. It first connects to Entra with the required scope, then retrieves the service principal by display name, and finally uses the Get-EntraBetaServicePrincipalAppRoleAssignedTo cmdlet to get the app role assignments for the specified service principal ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalAppRoleAssignedTo.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraBetaServicePrincipalAppRoleAssignedTo -ServicePrincipalId $servicePrincipal.Id\n```\n\n----------------------------------------\n\nTITLE: Set-EntraBetaDirSyncEnabled Syntax\nDESCRIPTION: Defines the syntax for the Set-EntraBetaDirSyncEnabled cmdlet. It includes parameters to enable/disable directory synchronization, force execution, and specify the Tenant ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaDirSyncEnabled.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-EntraBetaDirSyncEnabled\n -EnableDirSync <Boolean>\n [-Force]\n [-TenantId <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition -Top Parameter YAML\nDESCRIPTION: This YAML snippet defines the -Top parameter for the Get-EntraUserDirectReport cmdlet, which specifies the maximum number of records to return. This is an integer parameter, and it is optional.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserDirectReport.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Int32\nParameter Sets: (All)\nAliases: Limit\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: ManagerId Parameter Definition (YAML)\nDESCRIPTION: This YAML snippet defines the ManagerId parameter for the Set-EntraBetaUserManager cmdlet. It specifies that the parameter is a string, required, accepts pipeline input by property name and value, and does not accept wildcard characters. It is the ID of the object to assign as manager.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUserManager.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: RefObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: All Parameter Definition - YAML\nDESCRIPTION: This YAML block defines the 'All' parameter, a switch parameter used to list all pages of results, for the Get-EntraServicePrincipalMembership cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalMembership.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Cmdlet Syntax - Get-EntraBetaObjectByObjectId - PowerShell\nDESCRIPTION: This code snippet shows the syntax for the `Get-EntraBetaObjectByObjectId` cmdlet.  It outlines the required and optional parameters, including `-ObjectIds`, `-Types`, and `-Property`.  This cmdlet is part of the Microsoft.Entra.Beta module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaObjectByObjectId.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaObjectByObjectId\n [-Types <System.Collections.Generic.List`1[System.String]>] \n -ObjectIds <System.Collections.Generic.List`1[System.String]>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: KeyId Parameter Definition - YAML\nDESCRIPTION: Describes the `-KeyId` parameter for the `Remove-EntraBetaApplicationKeyCredential` cmdlet. It specifies the unique identifier for the password and can accept pipeline input by property name or value.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaApplicationKeyCredential.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Defining ShowInAddressList Parameter in YAML\nDESCRIPTION: This YAML snippet defines the ShowInAddressList parameter for a PowerShell cmdlet. It specifies the data type, parameter set, aliases, required status, position, default value, pipeline input, and wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUser.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Boolean\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get All DirSync Features Status - PowerShell\nDESCRIPTION: This example retrieves a list of all directory synchronization features and their enabled/disabled status for the current tenant. It first connects to Entra ID using the required scope and then executes the `Get-EntraBetaDirSyncFeature` cmdlet without any specific feature specified. The output shows a table of features and their boolean status.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirSyncfeature.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'OnPremDirectorySynchronization.Read.All'\nGet-EntraBetaDirSyncFeature\n```\n\n----------------------------------------\n\nTITLE: Property Parameter Definition\nDESCRIPTION: This YAML snippet describes the `-Property` parameter used in the `Get-EntraApplicationExtensionProperty` cmdlet. It specifies that the parameter is of type `System.String[]`, is optional, and accepts an array of properties to be returned.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplicationExtensionProperty.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Remove Entra Domain Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Remove-EntraBetaDomain cmdlet. It requires the -Name parameter and supports CommonParameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaDomain.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraBetaDomain\n -Name <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Property Parameter Definition - YAML\nDESCRIPTION: Defines the `-Property` parameter for the `Get-EntraDomainVerificationDnsRecord` cmdlet using YAML. This parameter is optional, of type String array, does not accept pipeline input, and allows specifying which properties to return.  It is aliased as Select.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDomainVerificationDnsRecord.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get-EntraSubscription Syntax - GetQuery\nDESCRIPTION: This syntax block describes the GetQuery parameter set for the Get-EntraSubscription cmdlet. It allows filtering, specifying the number of top records, listing all pages, and selecting properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraSubscription.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraSubscription\n [-Top <Int32>]\n [-All]\n [-Filter <String>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: GroupMembershipClaims Parameter Definition\nDESCRIPTION: This YAML snippet describes the `-GroupMembershipClaims` parameter for the `New-EntraApplication` cmdlet. It defines that `GroupMembershipClaims` is of type `System.String`, is not required, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplication.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Defining SignInNames Property in YAML\nDESCRIPTION: Defines the SignInNames property which represents the list of sign in names for this user. It specifies the data type, parameter set, aliases, required status, position, default value, and pipeline input/wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUser.md#_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.SignInName]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Retrieve Users with Specific License\nDESCRIPTION: This PowerShell snippet retrieves all users assigned a specific license, identified by its SkuPartNumber (e.g., 'DEVELOPERPACK_E5').  It first retrieves the SkuId for the given SkuPartNumber and then finds users with that SkuId in their AssignedLicenses. Requires 'Organization.Read.All' and 'LicenseAssignment.Read.All' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaSubscribedSku.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All', 'LicenseAssignment.Read.All'\n$sku = Get-EntraBetaSubscribedSku | Where-Object { $_.SkuPartNumber -eq 'DEVELOPERPACK_E5' }\n$skuId = $sku.SkuId\n$usersWithDeveloperPackE5 = Get-EntraBetaUser -All | Where-Object {\n    $_.AssignedLicenses -and ($_.AssignedLicenses.SkuId -contains $skuId)\n}\n$usersWithDeveloperPackE5 | Select-Object Id, DisplayName, UserPrincipalName, AccountEnabled, UserType | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get Delegated Permission Classifications - GetQuery Syntax - PowerShell\nDESCRIPTION: Defines the syntax for retrieving delegated permission classifications from a service principal using the GetQuery parameter set.  It requires the ServicePrincipalId and accepts optional Filter and Property parameters. This is the default parameter set.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalDelegatedPermissionClassification.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaServicePrincipalDelegatedPermissionClassification\n -ServicePrincipalId <String>\n [-Filter <String>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Listing Enabled Devices - PowerShell\nDESCRIPTION: This PowerShell script lists enabled devices in Microsoft Entra ID. It connects to Entra ID using 'Connect-Entra' with the 'Device.Read.All' scope, and then retrieves all devices using the 'Get-EntraDevice' cmdlet. The results are filtered by the 'accountEnabled' property set to 'true'. Finally, it selects and displays the Id, AccountEnabled, DeviceId, and DisplayName properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-devices.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraDevice -Filter \"accountEnabled eq true\" -All | Select-Object Id, AccountEnabled,DeviceId, DisplayName\n```\n\n----------------------------------------\n\nTITLE: Set-EntraBetaPermissionGrantPolicy Syntax\nDESCRIPTION: Defines the syntax for the Set-EntraBetaPermissionGrantPolicy cmdlet.  It requires an `-Id` parameter and accepts `-Description` and `-DisplayName` parameters. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaPermissionGrantPolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-EntraBetaPermissionGrantPolicy\n -Id <String>\n [-Description <String>]\n [-DisplayName <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Defining -Property Parameter in PowerShell YAML\nDESCRIPTION: This YAML snippet defines the `-Property` parameter, which allows users to specify which properties should be returned by the PowerShell cmdlet. The data type is `System.String[]`, making it an array of strings. This is an optional parameter that applies to all parameter sets and does not support wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplication.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Set-EntraBetaGroupLifecyclePolicy Syntax\nDESCRIPTION: Defines the syntax for the Set-EntraBetaGroupLifecyclePolicy cmdlet. It includes parameters like GroupLifecyclePolicyId, AlternateNotificationEmails, ManagedGroupTypes, and GroupLifetimeInDays. This cmdlet updates a specific group Lifecycle Policy in Microsoft Entra ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaGroupLifecyclePolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-EntraBetaGroupLifecyclePolicy\n -GroupLifecyclePolicyId <String>\n [-AlternateNotificationEmails <String>]\n [-ManagedGroupTypes <String>]\n [-GroupLifetimeInDays <Int32>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Policy Applied Object Syntax - PowerShell\nDESCRIPTION: This PowerShell syntax defines the structure of the `Get-EntraBetaPolicyAppliedObject` cmdlet. It specifies the `-Id` parameter, which accepts a string, and indicates that the cmdlet also supports common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPolicyAppliedObject.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaPolicyAppliedObject\n -Id <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: KeyCredentials Parameter Definition\nDESCRIPTION: Defines the KeyCredentials parameter for the New-EntraBetaServicePrincipal cmdlet. It specifies the collection of key credentials associated with the service principal.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaServicePrincipal.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.KeyCredential]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Defining Surname Property in YAML\nDESCRIPTION: Defines the Surname property which specifies the user's surname. It specifies the data type, parameter set, aliases, required status, position, default value, and pipeline input/wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUser.md#_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - Property - YAML\nDESCRIPTION: Defines the '-Property' parameter, which is a string array that specifies the properties to be returned.  This parameter is available in all parameter sets. It is an optional parameter that does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedApplication.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Remove Application Key Credential Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the `Remove-EntraApplicationKeyCredential` cmdlet. It requires the `ApplicationId` and `KeyId` parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraApplicationKeyCredential.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraApplicationKeyCredential\n -ApplicationId <String>\n -KeyId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Set PowerShell Execution Policy to RemoteSigned\nDESCRIPTION: This command sets the PowerShell execution policy to `RemoteSigned` for the current user. It allows running scripts signed by a trusted publisher, ensuring the security of the system while enabling the use of PowerShell modules.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/installation.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\n```\n\n----------------------------------------\n\nTITLE: Set-EntraBetaPermissionGrantConditionSet Syntax\nDESCRIPTION: This code snippet shows the syntax for the Set-EntraBetaPermissionGrantConditionSet cmdlet.  It includes mandatory parameters like Id, PolicyId, and ConditionSetType, as well as optional parameters for filtering based on permissions, client applications, and resource applications.  The cmdlet updates an existing Microsoft Entra ID permission grant condition set.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaPermissionGrantConditionSet.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-EntraBetaPermissionGrantConditionSet\n -Id <String>\n -PolicyId <String>\n -ConditionSetType <String>\n [-Permissions <System.Collections.Generic.List`1[System.String]>]\n [-ClientApplicationTenantIds <System.Collections.Generic.List`1[System.String]>]\n [-ClientApplicationsFromVerifiedPublisherOnly <Boolean>]\n [-ClientApplicationIds <System.Collections.Generic.List`1[System.String]>]\n [-ResourceApplication <String>]\n [-ClientApplicationPublisherIds <System.Collections.Generic.List`1[System.String]>]\n [-PermissionClassification <String>]\n [-PermissionType <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Top Role Definition - PowerShell\nDESCRIPTION: This example retrieves the top role definition using the Top parameter. The example also requires a connection to Entra ID with specified scopes. The ProviderId and ResourceId parameters are mandatory.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPrivilegedRoleDefinition.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'PrivilegedAccess.Read.AzureAD', 'PrivilegedAccess.Read.AzureResources' 'PrivilegedAccess.Read.AzureADGroup'\n$params = @{\n    ProviderId = 'aadRoles'\n    ResourceId = 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb'\n}\nGet-EntraBetaPrivilegedRoleDefinition @params -Top 1\n```\n\n----------------------------------------\n\nTITLE: Defining Client Timeout Parameter in YAML\nDESCRIPTION: This YAML snippet defines the `-ClientTimeout` parameter for a PowerShell cmdlet. It specifies the parameter's type as `System.Double`, indicates that it is optional, and sets the default value to `None`. The parameter sets to which it belongs are set to `(All)`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Connect-Entra.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Double\nParameter Sets: (All)\nAliases: \nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Configuring KeyCredentials Parameter\nDESCRIPTION: This parameter allows setting the collection of key credentials associated with the application. These credentials are used for authentication and authorization purposes. It accepts a list of KeyCredential objects.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplication.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.KeyCredential]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Set-EntraBetaUserManager Syntax\nDESCRIPTION: This snippet shows the syntax for the Set-EntraBetaUserManager cmdlet. It includes the required parameters UserId and ManagerId. CommonParameters are also supported, allowing for debugging and error handling.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUserManager.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-EntraBetaUserManager\n -UserId <String>\n -ManagerId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Definition of -EnvironmentVariable Parameter in YAML\nDESCRIPTION: Defines the -EnvironmentVariable parameter, which allows for authentication using environment variables configured on the host machine. It is a System.Management.Automation.SwitchParameter, is not required, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Connect-Entra.md#_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: EnvironmentVariableParameterSet\nAliases: \nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Defining Identity Parameter in YAML\nDESCRIPTION: This YAML snippet defines the `-Identity` parameter as a switch parameter. When specified, sign-in using a managed identity will happen.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Connect-Entra.md#_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: IdentityParameterSet\nAliases: ManagedIdentity, ManagedServiceIdentity, MSI\nRequired: False\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Lifecycle Policy Group Syntax - PowerShell\nDESCRIPTION: This defines the syntax for the Get-EntraLifecyclePolicyGroup cmdlet. It requires a GroupId parameter, accepts an optional Property parameter to specify properties to be returned, and supports CommonParameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraLifecyclePolicyGroup.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraLifecyclePolicyGroup\n -GroupId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: YAML Parameter Definition: -ApplicationId\nDESCRIPTION: This YAML snippet defines the -ApplicationId parameter for the Get-EntraBetaApplicationOwner cmdlet. It specifies the parameter's type, whether it is required, its position, default value, aliases, and other properties related to parameter behavior.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationOwner.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition -OrgContactId - YAML\nDESCRIPTION: Defines the YAML configuration for the -OrgContactId parameter. Specifies the type as String, that it is required, and that it accepts pipeline input by property name or value.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraContactMembership.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition: -Top\nDESCRIPTION: Defines the `-Top` parameter which specifies the maximum number of records to return. `-Limit` can be used as an alias.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPolicy.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Int32\nParameter Sets: GetQuery\nAliases: Limit\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Definition of -ClientSecretCredential Parameter in YAML\nDESCRIPTION: Defines the -ClientSecretCredential parameter, which provides the application ID and client secret for service principal credentials using a PSCredential object. It is of type PSCredential, is not required, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Connect-Entra.md#_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nType: PSCredential\nParameter Sets: AppSecretCredentialParameterSet\nAliases: SecretCredential, Credential\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: ServicePrincipalId Parameter Definition - YAML\nDESCRIPTION: This YAML defines the -ServicePrincipalId parameter for the Add-EntraBetaServicePrincipalDelegatedPermissionClassification cmdlet. It specifies the data type, whether it's required, accepted pipeline input, and whether wildcard characters are allowed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaServicePrincipalDelegatedPermissionClassification.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Remove User Manager Syntax - PowerShell\nDESCRIPTION: This code snippet shows the syntax for the Remove-EntraBetaUserManager cmdlet. The -UserId parameter is required to specify the user whose manager needs to be removed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaUserManager.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraBetaUserManager\n -UserId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: IdentityProviderBaseId Parameter - YAML\nDESCRIPTION: Defines the IdentityProviderBaseId parameter in YAML format, specifying its type, requirement, position, and other properties. It indicates that the IdentityProviderBaseId is a string and is required for the cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaIdentityProvider.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: Id\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Set-EntraBetaPrivilegedRoleAssignmentRequest Syntax\nDESCRIPTION: This snippet shows the syntax for the Set-EntraBetaPrivilegedRoleAssignmentRequest cmdlet. It shows the required parameters such as -Id and -ProviderId, and optional parameters such as -Schedule, -AssignmentState, -Decision, and -Reason. This cmdlet updates a role assignment request based on the given parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaPrivilegedRoleAssignmentRequest.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-EntraBetaPrivilegedRoleAssignmentRequest -Id <String> [-Schedule <AzureADMSPrivilegedSchedule>]\n [-AssignmentState <String>] [-Decision <String>] [-Reason <String>] -ProviderId <String> [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Select Groups User Is Member Of Syntax - PowerShell\nDESCRIPTION: This section shows the syntax for using the `Select-EntraBetaGroupIdsUserIsMemberOf` cmdlet in PowerShell. It highlights the required parameters `-UserId` and `-GroupIdsForMembershipCheck`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Select-EntraBetaGroupIdsUserIsMemberOf.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSelect-EntraBetaGroupIdsUserIsMemberOf\n -UserId <String>\n -GroupIdsForMembershipCheck <GroupIdsForMembershipCheck>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get-EntraBetaAttributeSet Syntax - GetQuery\nDESCRIPTION: Syntax for the Get-EntraBetaAttributeSet cmdlet using the GetQuery parameter set.  Allows for specifying properties to return.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAttributeSet.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaAttributeSet\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Defining ImmutableId Property in YAML\nDESCRIPTION: Defines the ImmutableId property used for linking an on-premises Active Directory user account to a Microsoft Entra ID user object.  It specifies the data type, parameter set, aliases, required status, position, default value, and pipeline input/wildcard character acceptance.  Important: the $ and \\_ characters are disallowed when specifying this property.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUser.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Application Policy Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Get-EntraBetaApplicationPolicy cmdlet, including the required -Id parameter for specifying the application policy ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationPolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaApplicationPolicy\n -Id <String> \n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove delegated permission classification syntax - PowerShell\nDESCRIPTION: Defines the syntax for the `Remove-EntraBetaServicePrincipalDelegatedPermissionClassification` cmdlet. It requires `-ServicePrincipalId` and `-Id` parameters. `ServicePrincipalId` is the unique identifier of the service principal, and `Id` is the unique identifier of the delegated permission classification object. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaServicePrincipalDelegatedPermissionClassification.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraBetaServicePrincipalDelegatedPermissionClassification\n -ServicePrincipalId <String>\n -Id <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Defining PasswordPolicies Property in YAML\nDESCRIPTION: Defines the PasswordPolicies property which specifies password policies for the user. It specifies the data type, parameter set, aliases, required status, position, default value, and pipeline input/wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUser.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: DisplayName Parameter Definition\nDESCRIPTION: Defines the `DisplayName` parameter, which is an application template display name. It is a required parameter that accepts pipeline input by property name and value.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplicationFromApplicationTemplate.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.ApplicationTemplateDisplayName\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Remove a Service Principal Policy (PowerShell)\nDESCRIPTION: This example demonstrates how to remove a specific service principal policy using the `Remove-EntraBetaServicePrincipalPolicy` cmdlet. It first connects to Entra ID with specified scopes and then calls the cmdlet with the `Id` and `PolicyId` parameters, which are assigned as hashtable.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaServicePrincipalPolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes Policy.Read.All, Application.ReadWrite.All\n$params = @{\n    Id = 'bbbbbbbb-1111-1111-1111-cccccccccccc'\n    PolicyId = 'ffffffff-5555-6666-7777-aaaaaaaaaaaa'\n}\nRemove-EntraBetaServicePrincipalPolicy @params\n```\n\n----------------------------------------\n\nTITLE: Get Application Policy Output Example - PowerShell\nDESCRIPTION: Illustrates the expected output format when retrieving an application policy using the Get-EntraBetaApplicationPolicy cmdlet. The output shows the policy's Definition, DeletedDateTime, Description, DisplayName, and Id.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationPolicy.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nDefinition                                                                                       DeletedDateTime Description DisplayName Id\n----------                                                                                       --------------- ----------- ----------- --\n{{\"activityBasedTimeoutPolicies\":{\"AlternateLoginIDLookup\":true, \"IncludedUserIds\":[\"UserID\"]}}}                             NewUpdated  aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb\n```\n\n----------------------------------------\n\nTITLE: Remove Directory Role Member Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Remove-EntraBetaDirectoryRoleMember cmdlet.  It requires the DirectoryRoleId and MemberId parameters. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaDirectoryRoleMember.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraBetaDirectoryRoleMember\n -DirectoryRoleId <String>\n -MemberId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - All\nDESCRIPTION: This YAML snippet defines the `-All` parameter for the `Get-EntraDeletedDevice` cmdlet. It specifies that this is a SwitchParameter, is optional, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedDevice.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Defining Mobile Property in YAML\nDESCRIPTION: Defines the Mobile property which specifies the user's mobile phone number. It specifies the data type, parameter set, aliases, required status, position, default value, and pipeline input/wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUser.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition for -Quiet\nDESCRIPTION: Defines the -Quiet parameter for the `Test-EntraScript` command, which is a switch parameter. When specified, the command returns only $true or $false, indicating whether the script is compatible with Microsoft.Entra or not, respectively. It does not accept pipeline input.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Test-EntraScript.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: New Entra Role Assignment Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the New-EntraBetaDirectoryRoleAssignment cmdlet. It shows the required parameters: RoleDefinitionId, DirectoryScopeId, and PrincipalId, along with the optional CommonParameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaDirectoryRoleAssignment.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-EntraBetaDirectoryRoleAssignment\n -RoleDefinitionId <String>\n -DirectoryScopeId <String>\n -PrincipalId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Top Parameter Definition - YAML\nDESCRIPTION: Defines the '-Top' parameter for Get-EntraContract, which specifies the maximum number of records to return. It can be aliased with '-Limit'.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraContract.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Int32\nParameter Sets: GetQuery\nAliases: Limit\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Defining Scopes Parameter in YAML\nDESCRIPTION: This YAML snippet defines the `-Scopes` parameter for a PowerShell cmdlet.  The `Type` is `System.String[]`, so it should be an array of strings. This parameter defines delegated permissions.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Connect-Entra.md#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nType:  System.String[]\nParameter Sets: UserParameterSet\nAliases: \nRequired: False\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Defining CompanyName Property in YAML\nDESCRIPTION: Defines the CompanyName property, which the user is associated. This property can be useful for describing the company that an external user comes from. The maximum length of the company name is 64 characters. It specifies the data type, parameter set, aliases, required status, position, default value, and pipeline input/wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUser.md#_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get-EntraDeletedDevice Syntax - GetVague\nDESCRIPTION: This defines the syntax for the Get-EntraDeletedDevice cmdlet when using the GetVague parameter set. It shows the available parameters, including SearchString, All, and Property.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedDevice.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraDeletedDevice\n [-SearchString <String>]\n [-All]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove Group App Role Assignment Syntax (PowerShell)\nDESCRIPTION: This shows the syntax for the Remove-EntraBetaGroupAppRoleAssignment cmdlet. It requires the GroupId and AppRoleAssignmentId parameters to identify the specific assignment to remove.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaGroupAppRoleAssignment.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraBetaGroupAppRoleAssignment\n -GroupId <String>\n -AppRoleAssignmentId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Defining ConnectorGroupId Parameter\nDESCRIPTION: This YAML snippet defines the `-ConnectorGroupId` parameter. It specifies the ID of the Connector group that will be assigned to the application. This ID can be retrieved using the `Get-EntraBetaApplicationProxyConnectorGroup` command. The parameter is optional and accepts a string value.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplicationProxyApplication.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition: -Id\nDESCRIPTION: Defines the `-Id` parameter for the Get-EntraBetaPolicy cmdlet. It specifies the unique identifier of the policy to retrieve.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPolicy.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: GetById\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Update Partner Support Emails using Set-EntraBetaPartnerInformation (PowerShell)\nDESCRIPTION: This snippet demonstrates how to update the support email addresses for a partner using the Set-EntraBetaPartnerInformation cmdlet. It requires the 'Organization.ReadWrite.All' scope and updates the PartnerSupportEmails property.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaPartnerInformation.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.ReadWrite.All'\nSet-EntraBetaPartnerInformation -PartnerSupportEmails 'contoso@example.com'\n```\n\n----------------------------------------\n\nTITLE: Service Principal Names Parameter Configuration - YAML\nDESCRIPTION: Defines the configuration for the `-ServicePrincipalNames` parameter. This parameter accepts a list of strings representing service principal names, is not required, and does not accept pipeline input or wildcard characters. These names are based on `identifierURIs` and the application's `appId`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraServicePrincipal.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[System.String]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Syntax for Enable-EntraDirectoryRole cmdlet\nDESCRIPTION: This PowerShell code snippet shows the syntax for using the Enable-EntraDirectoryRole cmdlet.  It highlights the `-RoleTemplateId` parameter for specifying the role to enable. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Enable-EntraDirectoryRole.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nEnable-EntraDirectoryRole\n [-RoleTemplateId <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPOnly Cookie Parameter in YAML\nDESCRIPTION: This YAML snippet defines the `-IsHttpOnlyCookieEnabled` parameter as a boolean, enabling the HTTPOnly flag in HTTP response headers for enhanced security. It prevents client-side scripting from accessing the cookies.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplicationProxyApplication.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Boolean\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Output Example - PowerShell\nDESCRIPTION: Illustrates the output format when retrieving delegated permission classifications.  The output includes the Id, Classification, PermissionId, and PermissionName for each delegated permission.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalDelegatedPermissionClassification.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                      Classification PermissionId                         PermissionName\n--                      -------------- ------------                         --------------\nbbbbbbbb-7777-8888-9999-cccccccccccc low            eeeeeeee-4444-5555-6666-ffffffffffff Sites.Read.All\ncccccccc-8888-9999-0000-dddddddddddd low            dddd3333-ee44-5555-66ff-777777aaaaaa profile\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deleted Service Principals with Get-EntraDeletedServicePrincipal (PowerShell)\nDESCRIPTION: This PowerShell command retrieves deleted service principals using the Get-EntraDeletedServicePrincipal cmdlet from the Microsoft.Entra module. It returns the `DeletionAgeInDays` response property. It depends on the Microsoft.Entra PowerShell module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraDeletedServicePrincipal\n```\n\n----------------------------------------\n\nTITLE: Defining CompanyName Parameter in YAML\nDESCRIPTION: This YAML snippet defines the CompanyName parameter for a PowerShell cmdlet. It specifies the data type, parameter set, aliases, required status, position, default value, pipeline input, and wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUser.md#_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Feature Rollout Policy by ID (GetById Syntax) - PowerShell\nDESCRIPTION: This syntax retrieves a specific cloud authentication rollout policy by its unique ID. It uses the GetById parameter set and requires the -Id parameter. The cmdlet returns a single FeatureRolloutPolicy object matching the specified ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraFeatureRolloutPolicy.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraFeatureRolloutPolicy\n -Id <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Create Role Definition w/ ResourceScopes (PowerShell)\nDESCRIPTION: Creates a new role definition in Microsoft Entra ID specifying resource scopes. Demonstrates the usage of the `-ResourceScopes` parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaDirectoryRoleDefinition.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory'\n$rolePermissions = New-object Microsoft.Open.MSGraph.Model.RolePermission\n$rolePermissions.AllowedResourceActions = @(\"microsoft.directory/applications/basic/read\")\nNew-EntraBetaDirectoryRoleDefinition -RolePermissions $rolePermissions -IsEnabled $false -DisplayName 'MyRoleDefinition' -ResourceScopes '/'\n```\n\n----------------------------------------\n\nTITLE: Documenting -Top Parameter in YAML\nDESCRIPTION: This YAML snippet documents the `-Top` parameter for a PowerShell cmdlet. It specifies the parameter's type, parameter set, aliases, whether it's required, its position, default value, and pipeline input properties. It defines how to specify the maximum number of records to return.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDevice.md#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Int32\nParameter Sets: GetQuery\nAliases: Limit\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Domain name parameter definition - YAML\nDESCRIPTION: Defines the -Name parameter for the Get-CrossCloudVerificationCode cmdlet in YAML format. This parameter is required and specifies the domain name.  It accepts pipeline input by property name and value, but does not accept wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-CrossCloudVerificationCode.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - All - YAML\nDESCRIPTION: This YAML snippet defines the `-All` parameter for the `Get-EntraBetaUserDirectReport` cmdlet. It is a switch parameter that, when present, instructs the cmdlet to list all pages of results. It does not accept pipeline input or wildcard characters. The default value is `False`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserDirectReport.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Definition of -Identity Parameter in YAML\nDESCRIPTION: Defines the -Identity parameter, which allows sign-in using a managed identity. It is a System.Management.Automation.SwitchParameter, is not required, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Connect-Entra.md#_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: IdentityParameterSet\nAliases: ManagedIdentity, ManagedServiceIdentity, MSI\nRequired: False\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Application Key Credentials Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Get-EntraBetaApplicationKeyCredential cmdlet, which is used to retrieve key credentials for an application in Microsoft Entra ID. It requires the ApplicationId parameter and supports CommonParameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationKeyCredential.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaApplicationKeyCredential\n -ApplicationId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Checking for DirSync Errors in Entra ID (Specific Tenant ID) - PowerShell\nDESCRIPTION: This example demonstrates how to check if Microsoft Entra ID has objects with DirSync provisioning errors for a specific TenantId. It first connects to Entra ID using the Connect-Entra cmdlet with necessary scopes, then it calls Get-EntraBetaHasObjectsWithDirSyncProvisioningError specifying the TenantId. Replace '0000aaaa-11bb-cccc-dd22-eeeeee333333' with the actual Tenant ID. It relies on the Connect-Entra cmdlet to establish a connection.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaHasObjectsWithDirSyncProvisioningError.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All', 'Directory.Read.All', 'Group.Read.All', 'Contacts.Read'\n\nGet-EntraBetaHasObjectsWithDirSyncProvisioningError -TenantId '0000aaaa-11bb-cccc-dd22-eeeeee333333'\n```\n\nLANGUAGE: powershell\nCODE:\n```\nFalse\n```\n\n----------------------------------------\n\nTITLE: Get Top N Policies - PowerShell\nDESCRIPTION: This example shows how to retrieve the top N policies from Microsoft Entra ID.  It connects to Entra ID with the necessary scope, and uses the `Get-EntraPolicy` cmdlet with the `-Top` parameter to limit the number of returned policies.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraPolicy.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.All'\nGet-EntraPolicy -Top 1\n```\n\n----------------------------------------\n\nTITLE: Contact Thumbnail Photo Output - PowerShell\nDESCRIPTION: Shows the expected output format when retrieving a contact thumbnail photo. The output displays various properties of the image, such as dimensions, resolution, and pixel format. The output is a System.Drawing.Image object.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaContactThumbnailPhoto.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nTag                  :\nPhysicalDimension    : {Width=279, Height=390}\nSize                 : {Width=279, Height=390}\nWidth                : 279\nHeight               : 390\nHorizontalResolution : 96\nVerticalResolution   : 96\nFlags                : 77840\nRawFormat            : [ImageFormat: aaaa0000-bb11-2222-33cc-444444dddddd]\nPixelFormat          : Format24bppRgb\nPalette              : System.Drawing.Imaging.ColorPalette\nFrameDimensionsList  : {eeee4444-ff55-6666-77aa-888888bbbbbb}\nPropertyIdList       : {274, 305, 306, 36867...}\nPropertyItems        : {274, 305, 306, 36867...}\n```\n\n----------------------------------------\n\nTITLE: Remove Contact via Pipeline - Entra ID - PowerShell\nDESCRIPTION: This example demonstrates how to remove a contact from Microsoft Entra ID using pipelining. The `Get-EntraBetaContact` cmdlet retrieves the contact, and its output is piped directly to the `Remove-EntraBetaContact` cmdlet. It requires 'OrgContact.Read.All' scope. The contact object is implicitly passed to `Remove-EntraBetaContact`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaContact.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'OrgContact.Read.All'\nGet-EntraBetaContact -Filter \"displayName eq 'Contoso Contact'\" | Remove-EntraBetaContact\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - ApplicationId YAML\nDESCRIPTION: Defines the ApplicationId parameter for the New-EntraApplicationKeyCredential cmdlet. This parameter is required and accepts a string value representing the unique ID of an application in Microsoft Entra ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplicationKeyCredential.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Service Principal Type Configuration - YAML\nDESCRIPTION: Defines the structure and properties for the `-ServicePrincipalType` parameter in an Entra (Azure AD) PowerShell cmdlet. This parameter is used to specify the type of the service principal. It's defined as a string, is optional, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaServicePrincipal.md#_snippet_16\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: GroupIdsForMembershipCheck Parameter - YAML\nDESCRIPTION: This YAML snippet defines the parameters for the GroupIdsForMembershipCheck used in the Select-EntraGroupIdsUserIsMemberOf cmdlet. It specifies the type, requirement, position, default value, and input acceptance properties for the parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Select-EntraGroupIdsUserIsMemberOf.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nType: GroupIdsForMembershipCheck\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Defining IsHttpOnlyCookieEnabled Parameter\nDESCRIPTION: This YAML snippet defines the `-IsHttpOnlyCookieEnabled` parameter.  When set to true, it enables the inclusion of the HTTPOnly flag in HTTP response headers by Application Proxy. This parameter is optional and accepts a boolean value.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplicationProxyApplication.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Boolean\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: AdministrativeUnitId Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the `-AdministrativeUnitId` parameter for the Get-EntraBetaAdministrativeUnit cmdlet.  It specifies that the parameter accepts a string value, is required in the GetById parameter set, and allows input by property name or value. It is used to identify a specific administrative unit to retrieve.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAdministrativeUnit.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: GetById\nAliases: Id\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get-EntraContact Syntax (GetById) - PowerShell\nDESCRIPTION: Shows the syntax for the GetById parameter set of the Get-EntraContact cmdlet. This parameter set is used to retrieve a contact object by its unique identifier (OrgContactId).\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraContact.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraContact\n -OrgContactId <String>\n [-All]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Defining EnvironmentVariable Parameter in YAML\nDESCRIPTION: This YAML snippet defines the `-EnvironmentVariable` parameter as a switch. It allows for authentication via environment variables.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Connect-Entra.md#_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: EnvironmentVariableParameterSet\nAliases: \nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - All\nDESCRIPTION: This YAML snippet defines the `-All` parameter for the `Get-EntraUserSponsor` cmdlet.  It specifies that this is a switch parameter, it is optional, and the default value is False. When specified, the cmdlet retrieves all pages of results.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserSponsor.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Output of Delegated Permission Classification - PowerShell\nDESCRIPTION: This example shows the expected output after running the `Add-EntraServicePrincipalDelegatedPermissionClassification` cmdlet. It displays the ID, Classification, PermissionId, and PermissionName of the newly created delegated permission classification.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Add-EntraServicePrincipalDelegatedPermissionClassification.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nId                      Classification PermissionId                         PermissionName\n--                      -------------- ------------                         --------------\nT2qU_E28O0GgkLLIYRPsTwE low            fc946a4f-bc4d-413b-a090-b2c86113ec4f LicenseManager.AccessAsUser\n```\n\n----------------------------------------\n\nTITLE: UserId Parameter Definition\nDESCRIPTION: Defines the `-UserId` parameter for the `Get-EntraUserGroup` cmdlet. It accepts a UserPrincipalName or UserId as input.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserGroup.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId, UPN, Identity, UserPrincipalName\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: New-EntraBetaPasswordSingleSignOnCredential Syntax\nDESCRIPTION: Defines the syntax for the New-EntraBetaPasswordSingleSignOnCredential cmdlet. It requires ServicePrincipalId and PasswordSSOCredential parameters. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaPasswordSingleSignOnCredential.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-EntraBetaPasswordSingleSignOnCredential\n -ServicePrincipalId <String>\n -PasswordSSOCredential <PasswordSSOCredentials>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get-EntraBetaDomain Syntax - GetById (PowerShell)\nDESCRIPTION: This code block displays the syntax for using `Get-EntraBetaDomain` with the `GetById` parameter set. This requires the `-Name` parameter to specify the domain to retrieve. You can also specify properties to return using the `-Property` parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDomain.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaDomain\n -Name <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: SwitchParameter Type Definition - YAML\nDESCRIPTION: Defines the YAML type and parameter set information for the `-All` switch parameter used in the Get-EntraBetaServicePrincipalAppRoleAssignment cmdlet. This parameter retrieves all pages of results.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalAppRoleAssignment.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Updating Beta User Authentication Requirement with Update-EntraBetaUserAuthenticationRequirement (PowerShell)\nDESCRIPTION: This PowerShell command updates the beta user authentication requirement using the Update-EntraBetaUserAuthenticationRequirement cmdlet from the Microsoft.Entra.Beta module. It depends on the Microsoft.Entra.Beta PowerShell module.  It allows modifying authentication requirements in the beta environment.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_26\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-EntraBetaUserAuthenticationRequirement\n```\n\n----------------------------------------\n\nTITLE: Defining ReplyUrls Parameter in PowerShell YAML\nDESCRIPTION: This YAML snippet defines the `-ReplyUrls` parameter for a PowerShell cmdlet. It specifies the type as a list of strings and indicates that it is optional, named, and does not accept pipeline input or wildcard characters. This parameter represents the URLs that user tokens are sent to.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraServicePrincipal.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[System.String]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: View Expired Guest Users - PowerShell\nDESCRIPTION: Identifies and lists expired guest user accounts based on a 90-day expiration period after creation. This expands on the previous example that retrieved the users and checks each account for expiration. Requires the '$guestUsers' variable to be populated by a prior script block.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-guest-users.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nforeach ($guest in $guestUsers) {\n    # Calculate the expiration date based on the creation date\n    $guestExpirationDate = $guest.CreatedDateTime.AddDays(90)\n        \n    # Check if the account is expired\n    if ($guestExpirationDate -lt $now) {\n        # Add expired guest account details to the report\n        $report += [PSCustomObject]@{\n            Id          = $guest.Id\n            Name        = $guest.DisplayName\n            Mail        = $guest.Mail\n            Expiration  = $guestExpirationDate\n            CreatedDate = $guest.CreatedDateTime\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get-EntraDeletedAdministrativeUnit Syntax - GetById\nDESCRIPTION: Syntax definition for the Get-EntraDeletedAdministrativeUnit cmdlet using the GetById parameter set. Shows available parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedAdministrativeUnit.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraDeletedAdministrativeUnit\n -AdministrativeUnitId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: AttributeSetId Parameter Definition - YAML\nDESCRIPTION: YAML definition for the -AttributeSetId parameter used with the Get-EntraBetaAttributeSet cmdlet.  Specifies the unique identifier for the attribute set.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAttributeSet.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: GetById\nAliases: Id\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: PasswordSSOObjectId Parameter Definition (YAML)\nDESCRIPTION: Defines the PasswordSSOObjectId parameter for the Get-EntraBetaPasswordSingleSignOnCredential cmdlet in YAML format. It specifies that the parameter is of type System.PasswordSSOObjectId, is required and accepts pipeline input.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPasswordSingleSignOnCredential.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.PasswordSSOObjectId\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: DirectoryRoleId Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the -DirectoryRoleId parameter for the Get-EntraDirectoryRole cmdlet. It specifies the parameter's type, parameter set, aliases, requirement status, position, default value, input acceptance, and wildcard character support.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDirectoryRole.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: GetById\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Application Password Credential Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Get-EntraBetaApplicationPasswordCredential cmdlet.  It requires the ApplicationId and allows specifying properties to be returned. It utilizes common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationPasswordCredential.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaApplicationPasswordCredential\n -ApplicationId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: PublicClient Parameter Definition\nDESCRIPTION: This YAML snippet describes the `-PublicClient` parameter for the `New-EntraApplication` cmdlet. It defines that `PublicClient` is of type `PublicClientApplication`, is not required, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplication.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nType: PublicClientApplication\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Remove app role assignment - PowerShell\nDESCRIPTION: This code snippet removes a specific app role assignment from a service principal. It uses the Remove-EntraServicePrincipalAppRoleAssignment cmdlet. It assumes the service principal and assignment IDs are known. Requires the 'AppRoleAssignment.ReadWrite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-user-group-assignment.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AppRoleAssignment.ReadWrite.All'\n$servicePrincipal = Get-EntraServicePrincipal -ServicePrincipalId 'aaaaaaaa-1111-2222-3333-bbbbbbbbbbbb'\nRemove-EntraServicePrincipalAppRoleAssignment -ServicePrincipalId $servicePrincipal.Id  -AppRoleAssignmentId 'B2cD3eF4gH5iJ6kL7mN8oP9qR0sT1uV2wX3yZ4c5v6'\n```\n\n----------------------------------------\n\nTITLE: Reply URLs Configuration - YAML\nDESCRIPTION: Defines the structure and properties for the `-ReplyUrls` parameter in an Entra (Azure AD) PowerShell cmdlet. This parameter is used to specify the reply URLs (redirect URIs) for the associated application. It's defined as a list of strings, is optional, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaServicePrincipal.md#_snippet_14\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Collections.Generic.List`1[System.String]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Defining ServicePrincipalNames Parameter in YAML\nDESCRIPTION: Defines the `-ServicePrincipalNames` parameter, a list of service principal names. This parameter is optional and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaServicePrincipal.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[System.String]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter definition for -All (YAML)\nDESCRIPTION: Defines the `-All` parameter for the Get-EntraBetaTenantDetail cmdlet.  When specified, this parameter instructs the cmdlet to retrieve all pages of results.  It's a switch parameter, meaning it doesn't require a value.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaTenantDetail.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get-EntraBetaDirectoryObject Syntax - PowerShell\nDESCRIPTION: This syntax block shows the structure for calling `Get-EntraBetaDirectoryObject` cmdlet. It highlights the required `-DirectoryObjectIds` parameter and optional parameters like `-ObjectTypes` and `-Property`, as well as `CommonParameters`.  It retrieves directory objects by IDs and allows specifying object types and properties to be returned.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirectoryObject.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaDirectoryObject \n -DirectoryObjectIds <System.Collections.Generic.List`1[String]>\n [-ObjectTypes <System.Collections.Generic.List`1[String]>]\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - All - YAML\nDESCRIPTION: Defines the '-All' parameter, which is a switch parameter. When specified, it will list all pages of results.  It's an optional parameter that accepts no pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedApplication.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Remove Application Key - PowerShell\nDESCRIPTION: This example demonstrates how to remove a specific key credential from a specified application in Microsoft Entra ID. It requires connecting to Entra ID with appropriate scopes and retrieving the application object before removing the key.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaApplicationKey.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All', 'Directory.ReadWrite.All'\n$application = Get-EntraBetaApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\nRemove-EntraBetaApplicationKey -ApplicationId $application.Id -KeyId 'aaaaaaaa-0b0b-1c1c-2d2d-333333333333' -Proof '{token}'\n```\n\n----------------------------------------\n\nTITLE: GroupId Parameter Definition (YAML)\nDESCRIPTION: This YAML snippet defines the GroupId parameter for the Remove-EntraBetaGroupAppRoleAssignment cmdlet. It specifies that it is a string, required, accepts pipeline input, and does not accept wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaGroupAppRoleAssignment.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Defining PreferredLanguage Parameter in YAML\nDESCRIPTION: This YAML snippet defines the PreferredLanguage parameter for a PowerShell cmdlet. It specifies the data type, parameter set, aliases, required status, position, default value, pipeline input, and wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUser.md#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Set-EntraBetaCustomSecurityAttributeDefinitionAllowedValue Syntax\nDESCRIPTION: This code block represents the syntax for the `Set-EntraBetaCustomSecurityAttributeDefinitionAllowedValue` cmdlet. It shows the required parameters `-CustomSecurityAttributeDefinitionId` and `-Id`, and the optional parameter `-IsActive`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaCustomSecurityAttributeDefinitionAllowedValue.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-EntraBetaCustomSecurityAttributeDefinitionAllowedValue\n -CustomSecurityAttributeDefinitionId <String>\n -Id <String>\n [-IsActive <Boolean>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: IsFallbackPublicClient Parameter Definition\nDESCRIPTION: This YAML snippet defines the IsFallbackPublicClient parameter for the Set-EntraBetaApplication cmdlet, specifying its type and attributes. This parameter determines the fallback application type (public client or confidential client) when Microsoft Entra ID can't determine it directly.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplication.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Boolean\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: New-EntraBetaPrivilegedRoleAssignment Syntax\nDESCRIPTION: Defines the syntax of the New-EntraBetaPrivilegedRoleAssignment cmdlet. It specifies the parameters that can be used with the cmdlet, including IsElevated, Id, ResultMessage, ExpirationDateTime, RoleId, and UserId. CommonParameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaPrivilegedRoleAssignment.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-EntraBetaPrivilegedRoleAssignment [-IsElevated <Boolean>] [-Id <String>] [-ResultMessage <String>]\n [-ExpirationDateTime <DateTime>] -RoleId <String> -UserId <String> [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - ObjectIds - YAML\nDESCRIPTION: This YAML snippet defines the `-ObjectIds` parameter for the `Get-EntraBetaObjectByObjectId` cmdlet. It specifies that the parameter accepts a list of strings representing GUIDs, is required, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaObjectByObjectId.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[System.String]\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition: -All\nDESCRIPTION: Defines the `-All` parameter for the Get-EntraApplicationOwner cmdlet. When used, this switch parameter retrieves all pages of results.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplicationOwner.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Policy by ID\nDESCRIPTION: This snippet shows how to retrieve a specific policy using its unique ID.  The -Id parameter is required and accepts a string representing the policy's ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaPolicy\n -Id <String>\n [-All]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Reply URLs Parameter Configuration - YAML\nDESCRIPTION: Defines the configuration for the `-ReplyUrls` parameter. This parameter accepts a list of strings representing URLs, is not required, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraServicePrincipal.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[System.String]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: UserId Parameter Definition - YAML\nDESCRIPTION: Defines the UserId parameter for the Remove-EntraDeviceRegisteredUser cmdlet. It specifies that the UserId is a required string parameter, can accept pipeline input, and does not accept wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraDeviceRegisteredUser.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: UserId Parameter Definition (YAML)\nDESCRIPTION: This YAML snippet defines the UserId parameter for the Set-EntraBetaUserManager cmdlet. It specifies that the parameter is a string, required, accepts pipeline input by property name and value, and does not accept wildcard characters. It represents the User Principal Name or ObjectId of the user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUserManager.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get-EntraNamedLocationPolicy Syntax - Default\nDESCRIPTION: This shows the syntax for the Get-EntraNamedLocationPolicy cmdlet when retrieving all named location policies.  It allows specifying properties to be returned using the -Property parameter. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraNamedLocationPolicy.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraNamedLocationPolicy\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Assign Multiple User Sponsors - PowerShell\nDESCRIPTION: Assigns multiple users as sponsors to a target user account using the Set-EntraUserSponsor cmdlet. It connects to Entra ID with User.ReadWrite.All scope and uses an array of user IDs as SponsorIds.  It requires the Microsoft.Entra.Beta module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUserSponsor.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nSet-EntraUserSponsor -UserId 'JohnstoneH@fabrikam.com' -Type User -SponsorIds @(\"db0c6l50-93ee-4b22-9bb9-c8454875d990\",\"c9db38b9-e5b8-4b5e-ak78-9812230af58d\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deleted Administrative Unit with Get-EntraDeletedAdministrativeUnit (PowerShell)\nDESCRIPTION: This PowerShell command retrieves a deleted administrative unit using the Get-EntraDeletedAdministrativeUnit cmdlet from the Microsoft.Entra module. It depends on the Microsoft.Entra PowerShell module. It allows retrieving deleted administrative units.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_30\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraDeletedAdministrativeUnit\n```\n\n----------------------------------------\n\nTITLE: Connect to Microsoft Entra for User Reading\nDESCRIPTION: Connects to Microsoft Entra with the 'User.Read.All' scope to retrieve user information.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-guest-users.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.Read.All'\n```\n\n----------------------------------------\n\nTITLE: Syntax for Reset-EntraBetaStrongAuthenticationMethodByUpn PowerShell Cmdlet\nDESCRIPTION: This snippet shows the syntax for using the `Reset-EntraBetaStrongAuthenticationMethodByUpn` cmdlet. It includes the required parameter `-UserPrincipalName` and the optional parameter `-TenantId`. The cmdlet also supports common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Reset-EntraBetaStrongAuthenticationMethodByUpn.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nReset-EntraBetaStrongAuthenticationMethodByUpn\n -UserPrincipalName <String>\n [-TenantId <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Id Parameter - YAML\nDESCRIPTION: This YAML snippet describes the `-Id` parameter used in the `Add-EntraBetaCustomSecurityAttributeDefinitionAllowedValue` cmdlet. It specifies the unique identifier for the predefined value, which can be up to 64 characters long and include Unicode characters. Spaces are allowed, but some special characters aren't. This identifier is case sensitive, can't be changed later, and is required.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaCustomSecurityAttributeDefinitionAllowedValue.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Defining -PublicClient Parameter in YAML\nDESCRIPTION: This YAML snippet defines the `-PublicClient` parameter, specifying its type as `PublicClientApplication`, indicating it's an optional named parameter with no default value, and doesn't accept pipeline input or wildcard characters. It specifies whether the application is a public client.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplication.md#_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nType: PublicClientApplication\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Common Parameters in PowerShell Cmdlets\nDESCRIPTION: This section documents the common parameters supported by the PowerShell cmdlet. These parameters include -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable, providing standard functionalities for debugging, error handling, and output control.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaInvitation.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nThis cmdlet supports the common parameters: `-Debug`, `-ErrorAction`, `-ErrorVariable`, `-InformationAction`, `-InformationVariable`, `-OutVariable`, `-OutBuffer`, `-PipelineVariable`, `-Verbose`, `-WarningAction`, and `-WarningVariable`. For more information, see [about_CommonParameters](https://go.microsoft.com/fwlink/?LinkID=113216).\n```\n\n----------------------------------------\n\nTITLE: Name Parameter Definition - YAML\nDESCRIPTION: Defines the `-Name` parameter for the `Get-EntraDomainVerificationDnsRecord` cmdlet using YAML. This parameter is required, of type String, accepts pipeline input (by property name and by value), and specifies the domain name for which the DNS records are retrieved.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDomainVerificationDnsRecord.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: New-EntraBetaPrivilegedRoleAssignment Example\nDESCRIPTION: Placeholder example code for New-EntraBetaPrivilegedRoleAssignment.  This will contain a specific example on how to call the cmdlet with relevant parameters.  A descriptive example is also missing from the source documentation.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaPrivilegedRoleAssignment.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\> {{ Add example code here }}\n```\n\n----------------------------------------\n\nTITLE: Remove Lifecycle Policy Group - Syntax (PowerShell)\nDESCRIPTION: This snippet shows the syntax for using the Remove-EntraBetaLifecyclePolicyGroup cmdlet. It requires the GroupLifecyclePolicyId and GroupId parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaLifecyclePolicyGroup.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraBetaLifecyclePolicyGroup\n -GroupLifecyclePolicyId <String>\n -GroupId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: OrgContactId Parameter Definition - YAML\nDESCRIPTION: Details the OrgContactId parameter for the Get-EntraContactManager cmdlet. It specifies the ID of the contact in Microsoft Entra ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraContactManager.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: OrgContactId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Remove Deleted Directory Object Syntax - PowerShell\nDESCRIPTION: This code snippet shows the syntax for the `Remove-EntraBetaDeletedDirectoryObject` cmdlet. It requires the `-Id` parameter to specify the ID of the directory object to be permanently deleted.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaDeletedDirectoryObject.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraBetaDeletedDirectoryObject\n -Id <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Removing GroupLifecyclePolicy using Remove-EntraBetaGroupLifecyclePolicy (PowerShell)\nDESCRIPTION: This code snippet shows the syntax for the Remove-EntraBetaGroupLifecyclePolicy cmdlet in PowerShell, used to delete a group lifecycle policy object. It requires the GroupLifecyclePolicyId as a parameter to identify the policy to be removed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaGroupLifecyclePolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraBetaGroupLifecyclePolicy\n -GroupLifecyclePolicyId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Update Attribute Set Description - PowerShell\nDESCRIPTION: This example demonstrates how to update the description of an attribute set using the Set-EntraAttributeSet cmdlet. It first connects to Entra ID with the required scopes, then updates the attribute set's description using the specified AttributeSetId.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraAttributeSet.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'CustomSecAttributeDefinition.ReadWrite.All'\nSet-EntraAttributeSet -AttributeSetId 'Engineering' -Description 'Attributes for cloud engineering team'\n```\n\n----------------------------------------\n\nTITLE: Defining Translate Links In Body Parameter in YAML\nDESCRIPTION: This YAML snippet defines the `-IsTranslateLinksInBodyEnabled` parameter as a boolean, specifying whether URLs in the body should be translated. It's relevant when there are hardcoded HTML links to other on-premises applications.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplicationProxyApplication.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Boolean\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deleted User with Get-EntraDeletedUser (PowerShell)\nDESCRIPTION: This PowerShell command retrieves a deleted user using the Get-EntraDeletedUser cmdlet from the Microsoft.Entra module. It depends on the Microsoft.Entra PowerShell module. It retrieves information about deleted user accounts.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_34\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraDeletedUser\n```\n\n----------------------------------------\n\nTITLE: Defining -Web Parameter in YAML\nDESCRIPTION: This YAML snippet defines the `-Web` parameter, specifying its type as `WebApplication`, indicating it's an optional named parameter with no default value, and doesn't accept pipeline input or wildcard characters. It specifies settings for a web application.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplication.md#_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nType: WebApplication\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Defining PasswordProfile Parameter in YAML\nDESCRIPTION: This YAML snippet defines the PasswordProfile parameter for a PowerShell cmdlet. It specifies the data type, parameter set, aliases, required status, position, default value, pipeline input, and wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUser.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nType: PasswordProfile\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Remove-EntraApplicationVerifiedPublisher Syntax - PowerShell\nDESCRIPTION: This PowerShell code snippet shows the syntax for the `Remove-EntraApplicationVerifiedPublisher` cmdlet. It defines the required `-AppObjectId` parameter, which is a string representing the application's object ID. It also indicates the support for common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraApplicationVerifiedPublisher.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraApplicationVerifiedPublisher\n -AppObjectId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get-EntraBetaUserThumbnailPhoto Syntax\nDESCRIPTION: This snippet shows the syntax for the Get-EntraBetaUserThumbnailPhoto cmdlet. It requires the UserId parameter and optionally accepts the Property parameter. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserThumbnailPhoto.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaUserThumbnailPhoto\n -UserId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Output of Get directory tenant size quota (PowerShell)\nDESCRIPTION: This is the expected output of getting directory tenant size quota. It shows the \"used\" and \"total\" values for the directory size quota. This quota represents the maximum number of objects allowed in a tenant.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaTenantDetail.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nKey   Value\n---   -----\nused    339\ntotal 50000\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition -Top - YAML\nDESCRIPTION: Defines the YAML configuration for the -Top parameter. Specifies its type as Int32, that it's optional, and that it accepts pipeline input via property name or value.  It also indicates that -Limit is an alias.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraContactMembership.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Int32\nParameter Sets: (All)\nAliases: Limit\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Domain Verification DNS Record Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the `Get-EntraDomainVerificationDnsRecord` cmdlet. This cmdlet retrieves domain verification DNS records. It requires the `-Name` parameter (the domain name) and accepts the optional `-Property` parameter to specify properties to be returned. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDomainVerificationDnsRecord.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraDomainVerificationDnsRecord\n -Name <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: ServicePrincipalId Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the `-ServicePrincipalId` parameter for the `Set-EntraBetaPasswordSingleSignOnCredential` cmdlet.  It specifies the type as `System.String`, indicates that it is a required parameter, and defines aliases such as `ObjectId`. It also describes pipeline input acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaPasswordSingleSignOnCredential.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Increase Function Limit in PowerShell 5.1 - PowerShell\nDESCRIPTION: This command increases the maximum function count allowed in a PowerShell 5.1 session. This is used to resolve the \"Function capacity 4096 has been exceeded\" error. The command sets the `$MaximumFunctionCount` variable to 32768, effectively increasing the limit. After running this command, retry importing the module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/troubleshooting.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$MaximumFunctionCount = 32768\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Role with Get-EntraUserRole (PowerShell)\nDESCRIPTION: This PowerShell command retrieves a user's role using the Get-EntraUserRole cmdlet from the Microsoft.Entra module. It depends on the Microsoft.Entra PowerShell module. It returns the role assigned to a specific user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_37\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraUserRole\n```\n\n----------------------------------------\n\nTITLE: YAML Parameter Definition for -SearchString\nDESCRIPTION: Defines the YAML structure and properties for the `-SearchString` parameter within the Get-EntraBetaDeletedAdministrativeUnit cmdlet. This parameter retrieves administrative units that satisfy the provided search string value.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedAdministrativeUnit.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: GetVague\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get All Administrative Units - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all administrative units from Microsoft Entra ID using the Get-EntraBetaAdministrativeUnit cmdlet. It first connects to Entra ID with the required scopes and then executes the cmdlet without any specific parameters to retrieve all units. The output displays the properties of each administrative unit, such as ID, display name, and description.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAdministrativeUnit.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.Read.All'\nGet-EntraBetaAdministrativeUnit\n```\n\n----------------------------------------\n\nTITLE: Defining OtherMails Property in YAML\nDESCRIPTION: Defines the OtherMails property which specifies other email addresses for the user. It specifies the data type, parameter set, aliases, required status, position, default value, and pipeline input/wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUser.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[System.String]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Set-EntraBetaApplication Syntax\nDESCRIPTION: This snippet defines the syntax for the Set-EntraBetaApplication cmdlet, including all available parameters, their types, and whether they are required. It specifies the parameters for updating an application object, such as ApplicationId, DisplayName, IdentifierUris, and more. The syntax is essential for understanding how to properly use the cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplication.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-EntraBetaApplication\n -ApplicationId <String>\n [-Api <ApiApplication>]\n [-OptionalClaims <OptionalClaims>]\n [-DisplayName <String>]\n [-PreAuthorizedApplications <System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.PreAuthorizedApplication]>]\n [-Web <WebApplication>]\n [-IsFallbackPublicClient <Boolean>]\n [-RequiredResourceAccess <System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.RequiredResourceAccess]>]\n [-PublicClient <PublicClientApplication>]\n [-IsDeviceOnlyAuthSupported <Boolean>]\n [-OrgRestrictions <System.Collections.Generic.List`1[System.String]>]\n [-KeyCredentials <System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.KeyCredential]>]\n [-TokenEncryptionKeyId <String>]\n [-IdentifierUris <System.Collections.Generic.List`1[System.String]>]\n [-ParentalControlSettings <ParentalControlSettings>]\n [-GroupMembershipClaims <String>]\n [-AddIns <System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.AddIn]>]\n [-Tags <System.Collections.Generic.List`1[System.String]>]\n [-AppRoles <System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.AppRole]>]\n [-PasswordCredentials <System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.PasswordCredential]>]\n [-SignInAudience <String>]\n [-InformationalUrl <InformationalUrl>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: CertificateAuthorityInformation Parameter Definition - YAML\nDESCRIPTION: Defines the CertificateAuthorityInformation parameter for the Remove-EntraTrustedCertificateAuthority cmdlet in YAML format, specifying its type, requirement, position, default value, pipeline input, and wildcard character support.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraTrustedCertificateAuthority.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: CertificateAuthorityInformation\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: All Parameter Definition\nDESCRIPTION: Defines the `-All` parameter for the `Get-EntraUserGroup` cmdlet. This parameter is a switch that, when present, lists all pages.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserGroup.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Property Parameter Definition\nDESCRIPTION: Defines the `-Property` parameter, which specifies the properties to be returned by the cmdlet. `-Select` is an alias for `-Property`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserGroup.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: GetById Syntax for Get-EntraBetaPermissionGrantPolicy (PowerShell)\nDESCRIPTION: This syntax shows the usage of `Get-EntraBetaPermissionGrantPolicy` with the `-Id` parameter, which retrieves a specific permission grant policy by its ID. The `-Property` parameter can be used to specify which properties to return.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPermissionGrantPolicy.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaPermissionGrantPolicy\n -Id <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove User Extension with Single Name - PowerShell\nDESCRIPTION: This snippet shows the syntax for the Remove-EntraBetaUserExtension cmdlet when removing a user extension using a single extension name. It requires specifying the ObjectId of the user and the ExtensionName to remove. The cmdlet removes the specified user extension from Microsoft Entra ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaUserExtension.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraBetaUserExtension\n -ObjectId <String>\n -ExtensionName <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Set-EntraBetaApplicationProxyConnector Syntax - PowerShell\nDESCRIPTION: Shows the syntax for the Set-EntraBetaApplicationProxyConnector cmdlet, including the required parameters OnPremisesPublishingProfileId (connector ID) and ConnectorGroupId (application proxy connector group ID). This cmdlet allows reassignment of the connector to another connector group.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplicationProxyConnector.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-EntraBetaApplicationProxyConnector\n -OnPremisesPublishingProfileId <String>\n -ConnectorGroupId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition for -Top\nDESCRIPTION: Defines the -Top parameter for Get-EntraUserOAuth2PermissionGrant cmdlet as an integer, which specifies the maximum number of records to return. Accepts pipeline input by property name and value but does not support wildcards.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserOAuth2PermissionGrant.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Int32\nParameter Sets: (All)\nAliases: Limit\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Filter String Parameter Definition\nDESCRIPTION: YAML definition for the -Filter string parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedAdministrativeUnit.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: GetQuery\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Partner Information Syntax (Default)\nDESCRIPTION: This syntax retrieves partner information using the default `GetQuery` parameter set.  It uses `Get-EntraPartnerInformation` without any specific parameters. It supports common parameters for debugging and error handling.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraPartnerInformation.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraPartnerInformation\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Defining IsTranslateHostHeaderEnabled Parameter\nDESCRIPTION: This YAML snippet defines the `-IsTranslateHostHeaderEnabled` parameter, a boolean value indicating whether URLs in headers should be translated. Keeping it set to true is recommended unless the application requires the original host header in the authentication request. The parameter is optional.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplicationProxyApplication.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Boolean\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Example: Set Application Logo with FilePath (PowerShell)\nDESCRIPTION: This example demonstrates how to set the application logo for a specified application using the ApplicationId and FilePath parameters. It first connects to Entra with the necessary scopes and retrieves the application object.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplicationLogo.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All'\n$application = Get-EntraBetaApplication -Filter \"DisplayName eq 'Contoso Helpdesk Application'\"\nSet-EntraBetaApplicationLogo -ApplicationId $application.Id -FilePath 'D:\\applogo.jpg'\n```\n\n----------------------------------------\n\nTITLE: Get Application Extension Properties Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the `Get-EntraBetaApplicationExtensionProperty` cmdlet using the `ByApplicationId` parameter set. It includes parameters for specifying the Application ID and properties to retrieve.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationExtensionProperty.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaApplicationExtensionProperty\n -ApplicationId <String>\n [-Property <String[]>] \n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove Group Member Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Remove-EntraBetaGroupMember cmdlet, including the GroupId and MemberId parameters required for removing a member from a specified group.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaGroupMember.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraBetaGroupMember\n -GroupId <String>\n -MemberId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Defining CertificateSubjectName Parameter in YAML\nDESCRIPTION: This YAML snippet defines the `-CertificateSubjectName` parameter of type `System.String`. The certificate is then retrieved from the current user's certificate store.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Connect-Entra.md#_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: AppCertificateParameterSet\nAliases: CertificateSubject, CertificateName\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Uninstall Microsoft.Entra.Beta module\nDESCRIPTION: This PowerShell command uninstalls the Microsoft.Entra.Beta module along with all its versions. The `-Force` parameter suppresses any confirmation prompts during the uninstallation process.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/includes/uninstall-entrapowershell-module.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nUninstall-Module -Name Microsoft.Entra.Beta -AllVersions -Force\n```\n\n----------------------------------------\n\nTITLE: UserId Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the `-UserId` parameter for the `Select-EntraBetaGroupIdsUserIsMemberOf` cmdlet. It specifies the type, whether it is required, its position, default value, accepted pipeline input types and whether it accepts wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Select-EntraBetaGroupIdsUserIsMemberOf.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: New-EntraBetaDomain Syntax - PowerShell\nDESCRIPTION: This code snippet shows the syntax for the New-EntraBetaDomain cmdlet, highlighting the parameters that can be used. It includes the mandatory -Name parameter, as well as optional parameters like -IsDefault and -SupportedServices. It also indicates the presence of CommonParameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaDomain.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-EntraBetaDomain\n -Name <String>\n [-IsDefault <Boolean>]\n [-SupportedServices <System.Collections.Generic.List`1[System.String]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Defining ProgressAction Parameter in YAML\nDESCRIPTION: This YAML snippet defines the `-ProgressAction` parameter, taking one of the ActionPreference enumeration values.  The type is `ActionPreference`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Connect-Entra.md#_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nType: ActionPreference\nParameter Sets: (All)\nAliases: proga\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get All Application Owners Example - PowerShell\nDESCRIPTION: Illustrates how to retrieve all owners of a specified application in Microsoft Entra ID. It utilizes the -All parameter to ensure all owners are returned, and formats the output to display relevant properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationOwner.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraBetaApplication -Filter \"DisplayName eq 'Helpdesk Application'\"\nGet-EntraBetaApplicationOwner -ApplicationId $application.Id -All |\nSelect-Object Id, displayName, UserPrincipalName, createdDateTime, userType, accountEnabled |\nFormat-Table -AutoSize\n```\n\nLANGUAGE: powershell\nCODE:\n```\nid                                   DisplayName   UserPrincipalName                CreatedDateTime       UserType AccountEnabled\n--                                   -----------   -----------------                ---------------       -------- --------------\nbbbbbbbb-1111-2222-3333-cccccccccccc Adele Vance   AdeleV@contoso.com               10/7/2024 12:33:36 AM Member   True\ndddddddd-3333-4444-5555-eeeeeeeeeeee Cameron White CameronW@contoso.com            10/7/2024 12:34:47 AM Member   True\n```\n\n----------------------------------------\n\nTITLE: Test-EntraScript Example 2\nDESCRIPTION: Demonstrates how to use `Test-EntraScript` with `Get-ChildItem` to recursively check all PowerShell scripts in a directory for compatibility with the Microsoft.Entra module, reporting any issues found.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Test-EntraScript.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-ChildItem -Path \\\\contoso.com\\it\\code -Recurse -Filter *.ps1 | Test-EntraScript\n```\n\n----------------------------------------\n\nTITLE: Retrieving Entra Context with Get-EntraContext (PowerShell)\nDESCRIPTION: This PowerShell command retrieves the Microsoft Entra context using the Get-EntraContext cmdlet from the Microsoft.Entra module. It depends on the Microsoft.Entra PowerShell module.  The response includes the Microsoft Entra PowerShell version.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_28\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraContext\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - FilePath - YAML\nDESCRIPTION: Defines the FilePath parameter for Get-EntraBetaApplicationLogo cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationLogo.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: DeviceId Parameter Definition - YAML\nDESCRIPTION: Defines the DeviceId parameter for the Remove-EntraBetaDevice cmdlet.  Specifies that it is a string type, is required, accepts pipeline input by property name and value, and does not accept wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaDevice.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition for -Property\nDESCRIPTION: Defines the `-Property` parameter used to specify which properties to be returned in the output. It is an optional parameter and accepts an array of strings.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraPermissionGrantPolicy.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Defining MailNickName Parameter in YAML\nDESCRIPTION: This YAML snippet defines the MailNickName parameter for a PowerShell cmdlet. It specifies the data type, parameter set, aliases, required status, position, default value, pipeline input, and wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUser.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - Top - YAML\nDESCRIPTION: Defines the '-Top' parameter, which is an integer that specifies the maximum number of applications returned.  The default value is 100. This parameter is part of the GetQuery parameter set. It is an optional parameter that accepts pipeline input by property name or value, but does not accept wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedApplication.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Int32\nParameter Sets: GetQuery\nAliases: Limit\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Contact Thumbnail Photo Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Get-EntraBetaContactThumbnailPhoto PowerShell command. It shows the required ObjectId parameter and optional parameters like FilePath, FileName, and View.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaContactThumbnailPhoto.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaContactThumbnailPhoto \n -ObjectId <String> \n [-FilePath <String>] \n [-FileName <String>] \n [-View <Boolean>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Select Entra Group Ids Service Principal Is Member Of Syntax - PowerShell\nDESCRIPTION: This is the syntax for the `Select-EntraBetaGroupIdsServicePrincipalIsMemberOf` cmdlet. It shows the required parameters `-ServicePrincipalId` and `-GroupIdsForMembershipCheck` as well as the optional `CommonParameters`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Select-EntraBetaGroupIdsServicePrincipalIsMemberOf.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSelect-EntraBetaGroupIdsServicePrincipalIsMemberOf\n -ServicePrincipalId <String>\n -GroupIdsForMembershipCheck <GroupIdsForMembershipCheck>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove Group Owner Syntax - PowerShell\nDESCRIPTION: This is the syntax for the Remove-EntraBetaGroupOwner cmdlet. It shows the required parameters: GroupId and OwnerId, and indicates the availability of common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaGroupOwner.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraBetaGroupOwner\n -OwnerId <String>\n -GroupId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Top Parameter Definition - YAML\nDESCRIPTION: Defines the YAML type and parameter set information for the `-Top` parameter used in the `Get-EntraBetaServicePrincipalAppRoleAssignment` cmdlet. This parameter limits the number of records returned.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalAppRoleAssignment.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Int32\nParameter Sets: (All)\nAliases: Limit\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Top Parameter Definition - YAML\nDESCRIPTION: This YAML defines the `-Top` parameter for a PowerShell cmdlet, which specifies the maximum number of records to return. It is an integer, not required, can be provided via property name or value through the pipeline, and does not support wildcard characters. `Limit` is an alias for the `Top` parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAuditDirectoryLog.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Int32\nParameter Sets: (All)\nAliases: Limit\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: UnifiedRoleDefinitionId Parameter - YAML\nDESCRIPTION: Defines the YAML configuration for the -UnifiedRoleDefinitionId parameter of the Remove-EntraDirectoryRoleDefinition cmdlet. It specifies the data type, whether it's required, its position, default value, and pipeline input behavior.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraDirectoryRoleDefinition.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: Id\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deleted Service Principal with Get-EntraDeletedServicePrincipal (PowerShell)\nDESCRIPTION: This PowerShell command retrieves a deleted service principal using the Get-EntraDeletedServicePrincipal cmdlet from the Microsoft.Entra module. It depends on the Microsoft.Entra PowerShell module. It retrieves details of deleted service principal objects.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_39\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraDeletedServicePrincipal\n```\n\n----------------------------------------\n\nTITLE: Setting onPremisesExtensionAttributes - Set-EntraUser (PowerShell)\nDESCRIPTION: This example demonstrates how to update the `onPremisesExtensionAttributes` properties for a user. It sets extension attributes using the `-AdditionalProperties` parameter, providing a hashtable with the attributes to update. The `Connect-Entra` cmdlet must be used to connect to Microsoft Entra ID with the proper scopes before executing this code.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUser.md#_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nSet-EntraUser -UserId 'SawyerM@contoso.com' -AdditionalProperties @{\n    onPremisesExtensionAttributes = @{\n        extensionAttribute1 = \"Job Group D\"\n        extensionAttribute2 = \"Audit Role\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining -SignInAudience Parameter in YAML\nDESCRIPTION: This YAML snippet defines the `-SignInAudience` parameter, specifying its type as a string, indicating it's an optional named parameter with no default value, and doesn't accept pipeline input or wildcard characters. It specifies which Microsoft accounts are supported for the application.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplication.md#_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: New-EntraBetaServicePrincipal Syntax\nDESCRIPTION: This section defines the syntax for the New-EntraBetaServicePrincipal cmdlet, including all parameters and their types. It shows the different options available for creating a service principal.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaServicePrincipal.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-EntraBetaServicePrincipal\n [-AccountEnabled <String>]\n [-Tags <System.Collections.Generic.List`1[System.String]>]\n [-DisplayName <String>]\n [-AlternativeNames <System.Collections.Generic.List`1[System.String]>]\n -AppId <String>\n [-KeyCredentials <System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.KeyCredential]>]\n [-ReplyUrls <System.Collections.Generic.List`1[System.String]>]\n [-LogoutUrl <String>]\n [-ServicePrincipalType <String>]\n [-Homepage <String>]\n [-AppRoleAssignmentRequired <Boolean>]\n [-PasswordCredentials <System.Collections.Generic.List`1[Microsoft.Open.AzureAD.Model.PasswordCredential]>]\n [-ServicePrincipalNames <System.Collections.Generic.List`1[System.String]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Entra User Extension Syntax - PowerShell\nDESCRIPTION: This snippet displays the syntax for the `Get-EntraUserExtension` cmdlet. It takes a `UserId` as a required parameter and an optional `Property` parameter. It supports common parameters as well. This syntax defines how the cmdlet is used.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserExtension.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraUserExtension\n -UserId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Set Application Logo with ByteArray (PowerShell)\nDESCRIPTION: Sets the logo for an application using a byte array. Requires the ApplicationId parameter. This uses the ByteArray parameter set. The exact method for providing the byte array is not detailed in this document.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplicationLogo.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nSet-EntraBetaApplicationLogo\n -ApplicationId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get-EntraContext Syntax\nDESCRIPTION: Shows the syntax for the `Get-EntraContext` cmdlet. It accepts the common parameters and the `-ProgressAction` parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraContext.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraContext\n [-ProgressAction <ActionPreference>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Defining OtherMails Parameter in YAML\nDESCRIPTION: This YAML snippet defines the OtherMails parameter for a PowerShell cmdlet. It specifies the data type, parameter set, aliases, required status, position, default value, pipeline input, and wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUser.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[System.String]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Defining AgeGroup Property in YAML\nDESCRIPTION: Defines the AgeGroup property. Used by enterprise applications to determine the legal age group of the user. This property is read-only and calculated based on ageGroup and consentProvidedForMinor properties. It specifies the data type, parameter set, aliases, required status, position, default value, and pipeline input/wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUser.md#_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: DirectoryObjectId Parameter Definition (YAML)\nDESCRIPTION: YAML definition for the DirectoryObjectId parameter of the Get-EntraDeletedDirectoryObject cmdlet.  It specifies the type, whether it is required, its position, and acceptable input types.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedDirectoryObject.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: Id\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Test Entra Script Syntax PowerShell\nDESCRIPTION: This snippet presents the syntax for the Test-EntraScript command, showcasing the available parameters such as -Path, -Content, and -Quiet. The -Path parameter accepts an array of strings representing file paths to scan, while -Content takes a string representing the script content to be analyzed. The -Quiet parameter controls the verbosity of the output.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Test-EntraScript.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nTest-EntraScript [-Path] <String[]> [[-Content] <String>] [-Quiet] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Setting Tags Parameter\nDESCRIPTION: This parameter sets custom strings that can be used to categorize and identify the application.  These tags facilitate organization and searching.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplication.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[System.String]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Property String[] Parameter Definition\nDESCRIPTION: YAML definition for the -Property string array parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedAdministrativeUnit.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition -Property\nDESCRIPTION: This YAML snippet defines the `-Property` parameter, which specifies which properties should be returned. It's an optional parameter of type string array, doesn't accept pipeline input, and uses `Select` as an alias.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeviceRegisteredUser.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Check Global Secure Access Status\nDESCRIPTION: This PowerShell example demonstrates how to check the Global Secure Access status for a tenant. First, it connects to Entra with necessary scopes. Then, it executes the `Get-EntraBetaGlobalSecureAccessTenantStatus` cmdlet to retrieve the status.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaGlobalSecureAccessTenantStatus.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'NetworkAccessPolicy.ReadWrite.All', 'Application.ReadWrite.All', 'NetworkAccess.ReadWrite.All'\nGet-EntraBetaGlobalSecureAccessTenantStatus\n```\n\nLANGUAGE: powershell\nCODE:\n```\n@odata.context                                                                onboardingStatus onboardingErrorMessage\n--------------                                                                ---------------- ----------------------\nhttps://graph.microsoft.com/beta/$metadata#networkAccess/tenantStatus/$entity offboarded\n```\n\n----------------------------------------\n\nTITLE: Defining StreetAddress Property in YAML\nDESCRIPTION: Defines the StreetAddress property which specifies the user's street address. It specifies the data type, parameter set, aliases, required status, position, default value, and pipeline input/wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraUser.md#_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: CustomSecurityAttributeDefinitionId Parameter - YAML\nDESCRIPTION: This YAML snippet describes the `-CustomSecurityAttributeDefinitionId` parameter used in the `Add-EntraBetaCustomSecurityAttributeDefinitionAllowedValue` cmdlet. It specifies the unique identifier for the custom security attribute definition in Microsoft Entra ID. The parameter is required, accepts pipeline input, and does not support wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaCustomSecurityAttributeDefinitionAllowedValue.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - MembershipRule (YAML)\nDESCRIPTION: This YAML snippet defines the '-MembershipRule' parameter for the Set-EntraAdministrativeUnit cmdlet. It specifies the data type, parameter set, aliases, whether it is required, its position, default value, and whether it accepts pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraAdministrativeUnit.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get User Manager PowerShell Syntax\nDESCRIPTION: Defines the syntax for the Get-EntraBetaUserManager cmdlet. It requires the UserId parameter and optionally accepts the Property parameter. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserManager.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaUserManager\n -UserId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Top N Role Definitions - PowerShell\nDESCRIPTION: This example retrieves the top two role definitions in Microsoft Entra ID using the `-Top` parameter. The `-Limit` parameter can also be used as an alias for `-Top`. Requires 'RoleManagement.Read.Directory' and 'EntitlementManagement.Read.All' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirectoryRoleDefinition.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory', 'EntitlementManagement.Read.All'\nGet-EntraBetaDirectoryRoleDefinition -Top 2\n```\n\n----------------------------------------\n\nTITLE: Update Policy Display Name - PowerShell\nDESCRIPTION: This example updates the display name of a specified policy in Microsoft Entra ID. It first connects to Entra ID with the necessary scopes, retrieves the policy using Get-EntraBetaPolicy, and then updates the display name using Set-EntraBetaPolicy.  It requires the Policy.ReadWrite.ApplicationConfiguration scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaPolicy.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ApplicationConfiguration'\n$policy = Get-EntraBetaPolicy | Where-Object { $_.DisplayName -eq 'Microsoft User Default Recommended Policy' }\nSet-EntraBetaPolicy -Id $policy.Id -DisplayName 'NewUpdated'\n```\n\n----------------------------------------\n\nTITLE: Remove Entra Policy Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Remove-EntraBetaPolicy cmdlet, highlighting the required `-Id` parameter and the availability of common parameters. The `-Id` parameter specifies the policy to be removed. Common parameters provide debugging and error handling options.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaPolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraBetaPolicy\n -Id <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Definition of -SendCertificateChain Parameter in YAML\nDESCRIPTION: Defines the -SendCertificateChain parameter, which includes the x5c header in client claims when acquiring a token, enabling subject name / issuer based authentication using the given certificate. It is a Boolean, is not required, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Connect-Entra.md#_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nType: Boolean\nParameter Sets: AppCertificateParameterSet\nAliases:\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Microsoft Entra Modules (v1.0) - PowerShell\nDESCRIPTION: This PowerShell command retrieves all installed modules with names starting with 'Microsoft.Entra' (excluding those containing 'Beta'), and then formats the output to display the Name, Version, and InstalledLocation properties in a table with autosized columns.  It uses `Get-InstalledModule` to retrieve module information, `Where-Object` to filter out beta modules, and `Format-Table` for presentation.  The output shows the installed modules and their paths.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/includes/verify-installed-modules.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-InstalledModule -Name Microsoft.Entra* |\nWhere-Object { $_.Name -notmatch \"Beta\" } | Format-Table Name, Version, InstalledLocation -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get Conditional Access Policy by ID (GetById Syntax) - PowerShell\nDESCRIPTION: Shows the basic syntax for retrieving a specific Conditional Access policy by its ID. Requires the PolicyId parameter. Takes optional Property parameter to select properties to be returned.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaConditionalAccessPolicy.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaConditionalAccessPolicy\n -PolicyId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - SponsorId\nDESCRIPTION: This YAML snippet defines the `-SponsorId` parameter. This parameter is a string used to specify the ID of a sponsor (user or group). It is a required parameter and supports pipeline input.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserSponsor.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get-EntraDeletedDevice Syntax - GetById\nDESCRIPTION: This defines the syntax for the Get-EntraDeletedDevice cmdlet when using the GetById parameter set. It shows the available parameters, including DeviceObjectId and Property.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedDevice.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraDeletedDevice\n -DeviceObjectId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Resolving Tenant with Resolve-EntraTenant (PowerShell)\nDESCRIPTION: This PowerShell command resolves a Tenant ID or Domain Name to a Microsoft Entra ID Tenant using the Resolve-EntraTenant cmdlet from the Microsoft.Entra module. It depends on the Microsoft.Entra PowerShell module. It accepts either a Tenant ID or Domain Name as input.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_18\n\nLANGUAGE: PowerShell\nCODE:\n```\nResolve-EntraTenant\n```\n\n----------------------------------------\n\nTITLE: All Parameter Definition - YAML\nDESCRIPTION: This YAML defines the `-All` parameter for a PowerShell cmdlet.  It indicates that this is a switch parameter, is not required, defaults to `False`, does not accept pipeline input, and does not accept wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAuditDirectoryLog.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Service Principal Policy Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the `Get-EntraBetaServicePrincipalPolicy` cmdlet. It requires the `-Id` parameter to specify the service principal ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipalPolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaServicePrincipalPolicy\n -Id <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Property Parameter Definition - YAML\nDESCRIPTION: This YAML code defines the parameters for the -Property parameter of the Get-EntraUserExtension cmdlet. It specifies the type, parameter sets, aliases, whether it's required, the position, default value, whether it accepts pipeline input and wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserExtension.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Updating User from Federated with Update-EntraUserFromFederated (PowerShell)\nDESCRIPTION: This PowerShell command updates a user from federated identity using the Update-EntraUserFromFederated cmdlet. It depends on the Microsoft.Entra PowerShell module. It utilizes a `SecureString` to handle sensitive information during the update process.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-EntraUserFromFederated\n```\n\n----------------------------------------\n\nTITLE: New Role Definition Syntax (PowerShell)\nDESCRIPTION: Defines the syntax for the `New-EntraBetaDirectoryRoleDefinition` cmdlet, outlining the parameters required and optional for creating a new Microsoft Entra ID role definition.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaDirectoryRoleDefinition.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-EntraBetaDirectoryRoleDefinition\n -IsEnabled <Boolean>\n -DisplayName <String>\n -RolePermissions <System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.RolePermission]>\n [-Description <String>]\n [-InheritsPermissionsFrom <System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.DirectoryRoleDefinition]>]\n [-Version <String>]\n [-ResourceScopes <System.Collections.Generic.List`1[System.String]>]\n [-TemplateId <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Disconnect Session Example\nDESCRIPTION: This example demonstrates how to disconnect a PowerShell session from a Microsoft Entra ID tenant using the `Disconnect-Entra` cmdlet. It shows the command and the resulting output, which includes details about the disconnected session.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Disconnect-Entra.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n Disconnect-Entra\n```\n\nLANGUAGE: powershell\nCODE:\n```\nClientId               : 00001111-aaaa-2222-bbbb-3333cccc4444\nTenantId               : bbbbcccc-1111-dddd-2222-eeee3333ffff\nScopes                 : {Agreement.ReadWrite.All, CustomSecAttributeDefinition.ReadWrite.All, TeamMember.Read.All...}\nAuthType               : AppOnly\nTokenCredentialType    : ClientCertificate\nCertificateThumbprint  : AA11BB22CC33DD44EE55FF66AA77BB88CC99DD00\nCertificateSubjectName :\nAccount                :\nAppName                : MG_graph_auth\nContextScope           : Process\nCertificate            :\nPSHostVersion          : 5.1.22621.2506\nManagedIdentityId      :\nClientSecret           :\nEnvironment            : Global\n```\n\n----------------------------------------\n\nTITLE: Retrieve Current Session Scopes - PowerShell\nDESCRIPTION: This code snippet retrieves the scopes associated with the current Entra PowerShell session using `Get-EntraContext` and `Select-Object`. It expands the Scopes property to display each scope individually.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraContext.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraContext | Select -ExpandProperty Scopes\n```\n\n----------------------------------------\n\nTITLE: Property Parameter Definition in YAML\nDESCRIPTION: This YAML snippet defines the -Property parameter for a PowerShell cmdlet. It specifies the parameter's type as an array of System.String objects (string array), indicates that it's not required, and defines an alias 'Select'.  It allows users to select which properties to return.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraAuditSignInLog.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Property Parameter Definition - YAML\nDESCRIPTION: YAML definition for the -Property parameter used with the Get-EntraBetaAttributeSet cmdlet.  Specifies properties to be returned.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAttributeSet.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Global Secure Access Apps - PowerShell\nDESCRIPTION: This example shows how to retrieve all Global Secure Access apps by filtering on specific tags within the `tags` property. It checks for either `PrivateAccessNonWebApplication` or `NetworkAccessManagedApplication` tags.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipal.md#_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\nGet-EntraServicePrincipal -Filter \"tags/Any(x: x eq 'PrivateAccessNonWebApplication') or tags/Any(x: x eq 'NetworkAccessManagedApplication')\"\n```\n\n----------------------------------------\n\nTITLE: Defining PasswordPolicies Parameter in YAML\nDESCRIPTION: This YAML snippet defines the PasswordPolicies parameter for a PowerShell cmdlet. It specifies the data type, parameter set, aliases, required status, position, default value, pipeline input, and wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUser.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition -ServicePrincipalId - YAML\nDESCRIPTION: This YAML snippet defines the '-ServicePrincipalId' parameter, indicating its type, parameter set, alias, and whether it's required. It also specifies that it accepts pipeline input by property name or value.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipal.md#_snippet_16\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: GetById\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: IsDeviceOnlyAuthSupported Parameter Definition\nDESCRIPTION: This YAML snippet defines the IsDeviceOnlyAuthSupported parameter for the Set-EntraBetaApplication cmdlet, outlining its type, parameter sets, and other attributes. This parameter specifies if the application supports authentication using a device token.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplication.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Boolean\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition -Property - YAML\nDESCRIPTION: Defines the YAML configuration for the -Property parameter, specifying its type as String array, that it is optional, and that it does not accept pipeline input or wildcard characters. It also shows that -Select is an alias.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraContactMembership.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Entra Module for Current User\nDESCRIPTION: This PowerShell command installs the Microsoft.Entra module from the PSGallery repository. It uses the CurrentUser scope, installing the module only for the current user. The -Force and -AllowClobber parameters are used to overwrite any existing versions and prevent installation prompts. This command does not require admin privileges, but only makes the module available to the installing user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/includes/installation-entrapowershell-all.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module -Name Microsoft.Entra -Repository PSGallery -Scope CurrentUser -Force -AllowClobber\n```\n\n----------------------------------------\n\nTITLE: Get All Directory Settings - PowerShell\nDESCRIPTION: Retrieves all directory settings.  Requires connecting to Entra ID with appropriate scopes. The -All parameter specifies to retrieve all directory settings.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDirectorySetting.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.ReadWrite.All, Group.Read.All, Group.ReadWrite.All'\nGet-EntraBetaDirectorySetting -All\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deleted Groups with Get-EntraDeletedGroup (PowerShell)\nDESCRIPTION: This PowerShell command retrieves deleted groups using the Get-EntraDeletedGroup cmdlet from the Microsoft.Entra module. It returns the `DeletionAgeInDays` response property. It depends on the Microsoft.Entra PowerShell module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_16\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraDeletedGroup\n```\n\n----------------------------------------\n\nTITLE: Device ID Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the DeviceId parameter for the Add-EntraBetaDeviceRegisteredUser cmdlet. It specifies that the parameter is of type System.String, is required, accepts pipeline input by property name and value, and does not accept wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaDeviceRegisteredUser.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Defining UseDeviceCode Parameter in YAML\nDESCRIPTION: This YAML snippet defines the `-UseDeviceCode` parameter. It's a switch parameter (`Type: System.Management.Automation.SwitchParameter`). When specified, device code authentication is used.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Connect-Entra.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: UserParameterSet\nAliases: UseDeviceAuthentication, DeviceCode, DeviceAuth, Device\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Remove Service Principal Policy Syntax (PowerShell)\nDESCRIPTION: This syntax block defines the structure of the `Remove-EntraBetaServicePrincipalPolicy` cmdlet, specifying the required parameters `-Id` and `-PolicyId`, as well as the optional `CommonParameters`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaServicePrincipalPolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRemove-EntraBetaServicePrincipalPolicy\n -Id <String>\n -PolicyId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: New-EntraBetaObjectSetting Syntax - PowerShell\nDESCRIPTION: This snippet shows the syntax for the `New-EntraBetaObjectSetting` cmdlet. It requires the `DirectorySetting`, `TargetType`, and `TargetObjectId` parameters. It is used to create a settings object in Microsoft Entra ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaObjectSetting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-EntraBetaObjectSetting\n -DirectorySetting <DirectorySetting>\n -TargetType <String>\n -TargetObjectId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Domain Name Parameter - YAML\nDESCRIPTION: This YAML code block defines the -Name parameter for the Remove-EntraBetaDomain cmdlet. It specifies the parameter's type, whether it's required, its position, and other properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaDomain.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Sponsors with Get-EntraUserSponsor (PowerShell)\nDESCRIPTION: This PowerShell command retrieves a user's sponsors (users or groups) using the Get-EntraUserSponsor cmdlet from the Microsoft.Entra module.  It depends on the Microsoft.Entra PowerShell module.  The command provides a list of users or groups designated as sponsors for a specific user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraUserSponsor\n```\n\n----------------------------------------\n\nTITLE: Reset Beta Strong Authentication Method by UPN - PowerShell\nDESCRIPTION: This fix to the `Reset-EntraBetaStrongAuthenticationMethodByUpn` command adds a missing authentication method. This implies the original command was incomplete and has now been corrected to support a broader range of authentication methods.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n`Reset-EntraBetaStrongAuthenticationMethodByUpn` - added missing authentication method\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition -All\nDESCRIPTION: This YAML snippet defines the `-All` parameter for the `Get-EntraDeviceRegisteredUser` cmdlet.  It specifies that the parameter is a switch parameter, is optional, and does not accept pipeline input or wildcard characters. When present, it instructs the cmdlet to list all pages of results.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeviceRegisteredUser.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Check Available Microsoft Entra Module - PowerShell\nDESCRIPTION: This command lists the available Microsoft.Entra PowerShell modules on the system. It is used to verify if the module is installed and accessible. No specific inputs are required. The output displays a list of available modules and their details.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/troubleshooting.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nGet-Module -Name Microsoft.Entra -ListAvailable\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - FileName - YAML\nDESCRIPTION: Defines the FileName parameter for Get-EntraBetaApplicationLogo cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationLogo.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Lifecycle Policy Output - PowerShell\nDESCRIPTION: This shows the expected output from Get-EntraLifecyclePolicyGroup which displays properties like Id, AlternateNotificationEmails, GroupLifetimeInDays, and ManagedGroupTypes. These properties describe the configuration of the lifecycle policy.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraLifecyclePolicyGroup.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nId                                   AlternateNotificationEmails GroupLifetimeInDays ManagedGroupTypes\n--                                   --------------------------- ------------------- -----------------\nbbbbbbbb-1111-2222-3333-cccccccccccc admingroup@contoso.com      200                 All\n```\n\n----------------------------------------\n\nTITLE: Certificate Authority Information Parameter - Entra ID - YAML\nDESCRIPTION: This YAML snippet defines the CertificateAuthorityInformation parameter for the Remove-EntraBetaTrustedCertificateAuthority cmdlet. It specifies the type as CertificateAuthorityInformation, indicates that it is a required, named parameter, accepts pipeline input by property name and value, and does not accept wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaTrustedCertificateAuthority.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nType: CertificateAuthorityInformation\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter definition for -Property (YAML)\nDESCRIPTION: Defines the `-Property` parameter for the Get-EntraBetaTenantDetail cmdlet. This parameter specifies the properties to be returned in the output. The `-Select` alias can be used as a substitute for `-Property`.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaTenantDetail.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Defining Mobile Parameter in YAML\nDESCRIPTION: This YAML snippet defines the Mobile parameter for a PowerShell cmdlet. It specifies the data type, parameter set, aliases, required status, position, default value, pipeline input, and wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUser.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Application Sign-In Detailed Summary Syntax - PowerShell\nDESCRIPTION: This section displays the syntax for using the Get-EntraBetaApplicationSignInDetailedSummary cmdlet in PowerShell. It outlines the parameters such as -Top and -Filter that can be used to customize the output. Common parameters are also supported for debugging and error handling.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationSignInDetailedSummary.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraBetaApplicationSignInDetailedSummary\n [-Top <Int32>]\n [-Filter <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get User Authentication Methods Output - PowerShell\nDESCRIPTION: This is the expected output from the Get-EntraBetaUserAuthenticationMethod example. It shows the ID, DisplayName, and AuthenticationMethodType of the registered authentication methods for the user.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserAuthenticationMethod.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                   DisplayName   AuthenticationMethodType  \n--                                   -----------   ------------------------  \n00001111-aaaa-2222-bbbb-3333cccc4444               #microsoft.graph.passwordAuthenticationMethod  \n11112222-bbbb-3333-cccc-4444dddd5555 iPhone 16     #microsoft.graph.microsoftAuthenticatorAuthenticationMethod\n```\n\n----------------------------------------\n\nTITLE: SearchString String Parameter Definition\nDESCRIPTION: YAML definition for the -SearchString string parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraDeletedAdministrativeUnit.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: GetVague\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: PermissionId Parameter Definition - YAML\nDESCRIPTION: This YAML defines the -PermissionId parameter for the Add-EntraBetaServicePrincipalDelegatedPermissionClassification cmdlet. It specifies the data type, whether it's required, accepted pipeline input, and whether wildcard characters are allowed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Add-EntraBetaServicePrincipalDelegatedPermissionClassification.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: OptionalClaims Parameter Definition\nDESCRIPTION: This YAML snippet provides the definition for the OptionalClaims parameter in the Set-EntraBetaApplication cmdlet. It shows the type, parameter sets, aliases, and input characteristics. Optional claims allow developers to specify which claims they want in tokens sent to their application.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplication.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nType: OptionalClaims\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Property Parameter Definition (YAML)\nDESCRIPTION: This YAML snippet describes the `-Property` parameter for the `Get-EntraBetaAuditDirectoryLog` cmdlet. It specifies which properties to be returned in the output. It is optional and accepts an array of strings.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAuditDirectoryLog.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get cross-cloud verification code syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Get-CrossCloudVerificationCode cmdlet.  It shows the required -Name parameter of type String, and also indicates the presence of CommonParameters. The cmdlet is used to retrieve a verification code for domain ownership in another cloud.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-CrossCloudVerificationCode.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CrossCloudVerificationCode\n -Name <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove Contact by ID - Entra ID - PowerShell\nDESCRIPTION: This example shows how to remove a contact from Microsoft Entra ID by first retrieving the contact using `Get-EntraBetaContact` and then using its ID with the `Remove-EntraBetaContact` cmdlet. It requires the 'OrgContact.Read.All' scope.  The `$contact.Id` is passed to the `-OrgContactId` parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaContact.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'OrgContact.Read.All'\n$contact = Get-EntraBetaContact -Filter \"displayName eq 'Contoso Contact'\"\nRemove-EntraBetaContact -OrgContactId $contact.Id\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - Top\nDESCRIPTION: This YAML snippet defines the `-Top` parameter, which is an integer used to specify the maximum number of records to return. It allows an alias of `-Limit` and supports pipeline input.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserSponsor.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Int32\nParameter Sets: (All)\nAliases: Limit\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: AccountEnabled Parameter Definition\nDESCRIPTION: Defines the AccountEnabled parameter for the New-EntraBetaServicePrincipal cmdlet.  It specifies whether the service principal is enabled.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaServicePrincipal.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Definition of -UseDeviceCode Parameter in YAML\nDESCRIPTION: Defines the -UseDeviceCode parameter, which uses device code authentication instead of a browser control. It is a System.Management.Automation.SwitchParameter, is not required, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Connect-Entra.md#_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: UserParameterSet\nAliases: UseDeviceAuthentication, DeviceCode, DeviceAuth, Device\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: YAML Parameter Definition for -Property\nDESCRIPTION: Defines the YAML structure and properties for the `-Property` parameter within the Get-EntraBetaDeletedAdministrativeUnit cmdlet. This parameter allows you to specify which properties should be returned in the output.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedAdministrativeUnit.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: IdentifierUris Parameter Definition\nDESCRIPTION: This YAML snippet defines the IdentifierUris parameter for the Set-EntraBetaApplication cmdlet, including its type, parameter sets, and other characteristics. It specifies identifier Uniform Resource Identifiers (URIs) for the application.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaApplication.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[System.String]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Retrieve All Service Principal Owners - PowerShell\nDESCRIPTION: This example retrieves all owners of a specified service principal using the -All parameter of the Get-EntraServicePrincipalOwner cmdlet. Requires 'Application.Read.All' scope.  It shows how to pipe the results to Select-Object to display specific properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalOwner.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.Read.All'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nGet-EntraServicePrincipalOwner -ServicePrincipalId $servicePrincipal.Id -All | Select-Object Id, userPrincipalName, DisplayName, '@odata.type'\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                   userPrincipalName                       displayName    @odata.type\n--                                   -----------------                       -----------    -----------\naaaaaaaa-0000-1111-2222-bbbbbbbbbbbb AlexW@Contoso.com     Alex Wilber    #microsoft.graph.user\nbbbbbbbb-1111-2222-3333-cccccccccccc ChristieC@Contoso.com Christie Cline #microsoft.graph.user\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - ApplicationId - YAML\nDESCRIPTION: Defines the ApplicationId parameter for Get-EntraBetaApplicationLogo cmdlet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationLogo.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition -All - YAML\nDESCRIPTION: Defines the YAML configuration for the -All parameter. It indicates that it's a SwitchParameter, is optional, and doesn't accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraContactMembership.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: PowerShell Example Placeholder\nDESCRIPTION: This code snippet serves as a placeholder for an example of how to use a PowerShell command, specifically within the context of the Microsoft.Entra module. The actual command and its description are currently missing and need to be added. This represents a template to be filled with functional PowerShell code.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUnsupportedCommand.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\> {{ Add example code here }}\n```\n\n----------------------------------------\n\nTITLE: Get commercial subscriptions by Id\nDESCRIPTION: This example shows how to retrieve a specific commercial subscription by its CommerceSubscriptionId. It connects to Entra with the necessary scope and then uses the Get-EntraSubscription cmdlet with the -CommerceSubscriptionId parameter to find the subscription. The output displays the details of the matching subscription.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraSubscription.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Organization.Read.All'\nGet-EntraSubscription -CommerceSubscriptionId 'eeeeeeee-4444-5555-6666-ffffffffffff'\n```\n\n----------------------------------------\n\nTITLE: DisplayName Parameter Definition\nDESCRIPTION: Defines the DisplayName parameter for the New-EntraBetaServicePrincipal cmdlet. It specifies the service principal display name.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaServicePrincipal.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Removing User Sponsors with Remove-EntraUserSponsor (PowerShell)\nDESCRIPTION: This PowerShell command removes a sponsor (users or groups) from a user using the Remove-EntraUserSponsor cmdlet from the Microsoft.Entra module. It requires the Microsoft.Entra PowerShell module to be installed.  The command takes parameters to identify the user and the sponsor to be removed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraUserSponsor\n```\n\n----------------------------------------\n\nTITLE: Assign App Role to Service Principal - PowerShell\nDESCRIPTION: This example demonstrates how to assign an app role to a service principal in Microsoft Entra ID. It retrieves the service principals and app role using Get-EntraBetaServicePrincipal and then assigns the role using New-EntraBetaServicePrincipalAppRoleAssignment. It requires the 'AppRoleAssignment.ReadWrite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaServicePrincipalAppRoleAssignment.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AppRoleAssignment.ReadWrite.All'\n$clientServicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\" \n$resourceServicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Microsoft Graph'\"\n$appRole = $resourceServicePrincipal.AppRoles | Where-Object { $_.Value -eq \"User.ReadBasic.All\" }\n\nNew-EntraBetaServicePrincipalAppRoleAssignment -ServicePrincipalId $clientServicePrincipal.Id -PrincipalId $clientServicePrincipal.Id -AppRoleId $appRole.Id -ResourceId $resourceServicePrincipal.Id\n```\n\n----------------------------------------\n\nTITLE: Get Authentication Method User Registration Detail Report - By Id\nDESCRIPTION: Retrieves user registration details by specifying the unique UserRegistrationDetailsId.  It uses the -UserRegistrationDetailsId parameter to target a specific user's registration details. The -Property parameter can also be specified to select which properties to return.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAuthenticationMethodUserRegistrationDetailReport.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaAuthenticationMethodUserRegistrationDetailReport\n -UserRegistrationDetailsId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Grant authorization to impersonate specific user - PowerShell\nDESCRIPTION: This example shows how to grant authorization to a service principal to impersonate a specific user. It retrieves the service principal, the Microsoft Graph service principal, and a specific user, then creates a new OAuth2 permission grant allowing the service principal to read all directory information on behalf of that specific user. It relies on Connect-Entra, Get-EntraBetaServicePrincipal, Get-EntraBetaUser, and New-EntraBetaOauth2PermissionGrant.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaOauth2PermissionGrant.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'DelegatedPermissionGrant.ReadWrite.All'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"DisplayName eq 'Contoso Marketing'\"\n$graphApp = Get-EntraBetaServicePrincipal -Filter \"AppId eq '00000003-0000-0000-c000-000000000000'\"\n$user = Get-EntraBetaUser -UserId 'SawyerM@contoso.com'\n$params = @{\n    ClientId = $servicePrincipal.Id\n    ConsentType = 'Principal'\n    PrincipalId = $user.Id\n    ResourceId = $graphApp.Id\n    Scope = 'Directory.Read.All'\n    StartTime = Get-Date\n    ExpiryTime = (Get-Date).AddYears(1)\n}\nNew-EntraBetaOauth2PermissionGrant @params\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                          ClientId                             ConsentType   ExpiryTime          PrincipalId ResourceId                           Scope\n--                                          --------                             -----------   ----------          ----------- ----------                           -----\nA1bC2dE3fH4iJ5kL6mN7oP8qR9sT0u a0a0a0a0-bbbb-cccc-dddd-e1e1e1e1e1e1 AllPrincipals 28/06/2025 07:44:25             aaaaaaaa-bbbb-cccc-1111-222222222222 Dele...\n```\n\n----------------------------------------\n\nTITLE: Get User Authentication Method Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Get-EntraBetaUserAuthenticationMethod cmdlet. It requires a UserId parameter and supports common parameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaUserAuthenticationMethod.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraBetaUserAuthenticationMethod\n -UserId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Application Password Credential Syntax (PowerShell)\nDESCRIPTION: Displays the syntax for the `Get-EntraApplicationPasswordCredential` cmdlet. It requires the `-ApplicationId` parameter and accepts the optional `-Property` parameter. It utilizes common PowerShell parameters for debugging and error handling.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplicationPasswordCredential.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraApplicationPasswordCredential\n -ApplicationId <String>\n [-Property <String[]>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Groups\nDESCRIPTION: This PowerShell script retrieves all recoverable deleted groups from the Microsoft Entra ID.  It connects to Entra ID with the necessary scopes and then uses `Get-EntraBetaDeletedGroup` to get the deleted groups, selecting specific properties and formatting the output as a table. It requires the 'Group.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedGroup.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Group.Read.All'\nGet-EntraBetaDeletedGroup | Select-Object Id, DisplayName, MailNickname, GroupTypes, DeletedDateTime, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get Role Definition by Filter - PowerShell\nDESCRIPTION: This example demonstrates retrieving a specific role definition using the Filter parameter.  The filter uses OData syntax. It requires a connection to Entra ID with the necessary scopes.  The ProviderId and ResourceId parameters are also required.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPrivilegedRoleDefinition.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'PrivilegedAccess.Read.AzureAD', 'PrivilegedAccess.Read.AzureResources' 'PrivilegedAccess.Read.AzureADGroup'\n$params = @{\n    ProviderId = 'aadRoles'\n    ResourceId = 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb'\n    Filter = \"DisplayName eq 'custom proxy'\"\n}\nGet-EntraBetaPrivilegedRoleDefinition @params\n```\n\n----------------------------------------\n\nTITLE: Delete External Domain Federation Setting - PowerShell\nDESCRIPTION: This example demonstrates how to delete an external domain federation setting using the Remove-EntraExternalDomainFederation cmdlet after connecting to Entra ID with necessary scopes. The ExternalDomainName parameter specifies the unique identifier of the externalDomainFederation to be deleted.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraExternalDomainFederation.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Domain.ReadWrite.All'\nRemove-EntraExternalDomainFederation -ExternalDomainName 'test.com'\n```\n\n----------------------------------------\n\nTITLE: Get Objects by ID - Get-EntraBetaObjectByObjectId - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve Microsoft Entra objects based on their Object IDs using the `Get-EntraBetaObjectByObjectId` cmdlet. It requires the 'Directory.Read.All' scope to be authorized and specifies the object IDs to retrieve.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaObjectByObjectId.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.Read.All'\nGet-EntraBetaObjectByObjectId -ObjectIds 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb', 'bbbbbbbb-1111-2222-3333-cccccccccccc'\n```\n\n----------------------------------------\n\nTITLE: Create ClaimsMappingPolicy - New-EntraPolicy (PowerShell)\nDESCRIPTION: This example creates a ClaimsMappingPolicy using the `New-EntraPolicy` cmdlet and the `IsOrganizationDefault` parameter. It demonstrates how to define custom claims issuance policies within Microsoft Entra ID.  The definition parameter takes an array of JSON strings.  Requires the `Policy.ReadWrite.ApplicationConfiguration` scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraPolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ApplicationConfiguration'\n$definition = @('{ \"definition\": [ \"{\\\"ClaimsMappingPolicy\\\":{\\\"Version\\\":1,\\\"IncludeBasicClaimSet\\\":\\\"true\\\",\\\"ClaimsSchema\\\":[{\\\"Source\\\":\\\"user\\\",\\\"ID\\\":\\\"userPrincipalName\\\",\\\"SAMLClaimType\\\":\\\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\\\",\\\"JwtClaimType\\\":\\\"upn\\\"},{\\\"Source\\\":\\\"user\\\",\\\"ID\\\":\\\"displayName\\\",\\\"SAMLClaimType\\\":\\\"http://schemas.microsoft.com/identity/claims/displayname\\\",\\\"JwtClaimType\\\":\\\"name\\\"}]}}\" ], \"displayName\": \"Custom Claims Issuance Policy\", \"isOrganizationDefault\": false }')\nNew-EntraPolicy -Definition $definition -DisplayName 'ClaimstestPolicy' -Type 'claimsMappingPolicies' -IsOrganizationDefault $false\n```\n\n----------------------------------------\n\nTITLE: Remove Directory Setting - PowerShell\nDESCRIPTION: This example demonstrates how to remove a directory setting from Microsoft Entra ID using the Remove-EntraBetaDirectorySetting cmdlet.  It requires the 'RoleManagement.ReadWrite.Directory' scope and a valid settings object ID.  The Connect-Entra cmdlet establishes a connection before removing the setting.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaDirectorySetting.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.ReadWrite.Directory'\nRemove-EntraBetaDirectorySetting -Id 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb'\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Group by GroupId\nDESCRIPTION: This PowerShell script retrieves a specific deleted group by its GroupId.  It connects to Entra ID with the necessary scopes and uses `Get-EntraBetaDeletedGroup` with the `-GroupId` parameter to retrieve the group with the specified ID ('aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb'). It selects specific properties and formats the output as a table. It requires the 'Group.Read.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedGroup.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Group.Read.All'\nGet-EntraBetaDeletedGroup -GroupId 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb' | Select-Object Id, DisplayName, MailNickname, GroupTypes, DeletedDateTime, DeletionAgeInDays | Format-Table -AutoSize\n```\n\n----------------------------------------\n\nTITLE: Get Object Setting by ID - PowerShell\nDESCRIPTION: Retrieves a specific object setting using its ID, target type, and target object ID. This snippet employs the GetById syntax of the Get-EntraObjectSetting cmdlet to retrieve a specific object setting from Microsoft Entra ID based on its unique identifier. The -Id, -TargetType, and -TargetObjectId parameters are required to specify the ID of the settings object, the type of the target object, and the ID of the target object, respectively.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraObjectSetting.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-EntraObjectSetting\n -Id <String> [-All]\n -TargetType <String>\n -TargetObjectId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Set-EntraCustomSecurityAttributeDefinitionAllowedValue Syntax - PowerShell\nDESCRIPTION: This PowerShell syntax defines the structure of the `Set-EntraCustomSecurityAttributeDefinitionAllowedValue` cmdlet.  It shows the required and optional parameters, including `CustomSecurityAttributeDefinitionId` (the ID of the attribute definition), `Id` (the ID of the allowed value), and `IsActive` (a boolean indicating whether the allowed value is active). The snippet also highlights the use of CommonParameters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraCustomSecurityAttributeDefinitionAllowedValue.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-EntraCustomSecurityAttributeDefinitionAllowedValue\n [-IsActive <Boolean>]\n -CustomSecurityAttributeDefinitionId <String>\n -Id <String> [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Remove Group Owner Syntax - PowerShell\nDESCRIPTION: This snippet shows the syntax for the Remove-EntraGroupOwner cmdlet. It takes the GroupId and OwnerId as parameters to remove an owner from a specified group.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraGroupOwner.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-EntraGroupOwner\n -OwnerId <String>\n -GroupId <String>\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: List devices by OS and version with Get-EntraBetaDevice (PowerShell)\nDESCRIPTION: This snippet demonstrates how to retrieve a list of devices with a specific operating system and version from Microsoft Entra ID. It connects to Entra ID using Connect-Entra with the 'Device.Read.All' scope.  Get-EntraBetaDevice is then called with a filter specifying the 'operatingSystem' and 'operatingSystemVersion'.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDevice.md#_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Device.Read.All'\nGet-EntraBetaDevice -Filter \"operatingSystem eq 'Windows Server' and operatingSystemVersion eq '10.0.20348.3091'\"\n```\n\n----------------------------------------\n\nTITLE: Remove a Domain Example - PowerShell\nDESCRIPTION: This example demonstrates how to remove a domain from Microsoft Entra ID using the Remove-EntraDomain cmdlet. It first connects to Entra ID with the required scopes and then executes the Remove-EntraDomain command, specifying the domain name to remove.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraDomain.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Domain.ReadWrite.All'\nRemove-EntraDomain -Name Contoso.com\n```\n\n----------------------------------------\n\nTITLE: AttributeSetId Parameter - YAML\nDESCRIPTION: This YAML snippet documents the `-AttributeSetId` parameter for the `Set-EntraAttributeSet` cmdlet.  It specifies the parameter type as `System.String`, indicates that it's required, and describes its purpose: to identify the unique attribute set within a tenant (up to 32 Unicode characters, case-insensitive).\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Set-EntraAttributeSet.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: Id\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Creating Password Profile Object in PowerShell\nDESCRIPTION: This code snippet demonstrates how to create a PasswordProfile object in PowerShell, set the password, and then pass it to the New-EntraBetaUser cmdlet. It allows you to define password policies and force a password change on the next login. It requires the Microsoft.Open.AzureAD.Model module to be installed.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaUser.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\n$passwordProfile = New-Object -TypeName Microsoft.Open.AzureAD.Model.PasswordProfile\n\n$passwordProfile.Password = \"<Password>\"\n\nNew-EntraBetaUser -PasswordProfile $passwordProfile ...\n\n$passwordProfile.EnforceChangePasswordPolicy #a boolean indicating that the change password policy is `enabled` or `disabled` for this user $passwordProfile.\n\n$passwordProfile.ForceChangePasswordNextLogin #a boolean indicating that the user must change the password at the next sign in.\n```\n\n----------------------------------------\n\nTITLE: Set User Password with Next Login Change\nDESCRIPTION: This example sets a user's password and forces a password change on the next login using the Set-EntraBetaUserPassword cmdlet. It connects to Entra ID, converts a plaintext password to a secure string, sets the password for the specified user, and configures the account to require a password reset upon the next login. Requires the 'Directory.AccessAsUser.All' scope. The -UserId parameter specifies the user's ID, the -Password parameter specifies the secure password, and the -ForceChangePasswordNextLogin parameter, when set to $True, forces a password change during the user's next login.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaUserPassword.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nconnect-Entra -Scopes 'Directory.AccessAsUser.All'\n$newPassword= '<strong-password>'\n$securePassword = ConvertTo-SecureString $newPassword -AsPlainText -Force\nSet-EntraBetaUserPassword -UserId 'SawyerM@contoso.com' -Password $securePassword -ForceChangePasswordNextLogin $True\n```\n\n----------------------------------------\n\nTITLE: Get all contact direct reports\nDESCRIPTION: Retrieves all direct reports of a specified organizational contact. This example connects to Entra ID with 'OrgContact.Read.All' scope. It uses `-All` parameter to retrieve all direct reports. The contact ID is passed using the `-OrgContactId` parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaContactDirectReport.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'OrgContact.Read.All'\n$contact = Get-EntraBetaContact -Filter \"displayName eq 'Contoso Contact'\"\nGet-EntraBetaContactDirectReport -OrgContactId $contact.Id -All\n```\n\n----------------------------------------\n\nTITLE: InformationalUrl Parameter Definition\nDESCRIPTION: This YAML snippet describes the `-InformationalUrl` parameter for the `New-EntraApplication` cmdlet. It defines that `InformationalUrl` is of type `InformationalUrl`, is not required, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraApplication.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nType: InformationalUrl\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Check if Microsoft.Entra Module is Installed\nDESCRIPTION: This command checks if the `Microsoft.Entra` module is already installed on the system by listing available modules with the specified name. It helps determine whether a new installation or update is required.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/installation.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-Module -Name Microsoft.Entra -ListAvailable\n```\n\n----------------------------------------\n\nTITLE: Remove Application Password Credential Example - PowerShell\nDESCRIPTION: Demonstrates how to remove an application password credential using the Remove-EntraApplicationPasswordCredential cmdlet. It includes steps to connect to Entra ID, retrieve the application and password credential information, and then remove the credential.  Requires the 'Application.ReadWrite.All' and 'Application.ReadWrite.OwnedBy' scopes.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Remove-EntraApplicationPasswordCredential.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$application = Get-EntraApplication -Filter \"displayName eq 'Contoso Helpdesk Application'\"\n$applicationPassword = Get-EntraApplicationPasswordCredential -ApplicationId $application.Id | Where-Object {$_.DisplayName -eq 'ERP App Password'}\nRemove-EntraApplicationPasswordCredential -ApplicationId $application.Id -KeyId $applicationPassword.KeyId\n```\n\n----------------------------------------\n\nTITLE: Defining Secure Cookie Parameter in YAML\nDESCRIPTION: This YAML snippet defines the `-IsSecureCookieEnabled` parameter as a boolean, enabling the Secure flag in HTTP response headers, ensuring cookies are transmitted over TLS. It enhances security by preventing cookie transmission in clear text.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplicationProxyApplication.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Boolean\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition for -Property\nDESCRIPTION: Defines the `-Property` parameter for the `Get-EntraTenantDetail` cmdlet. It specifies which properties to be returned in the output, and `-Select` can be used as an alias.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraTenantDetail.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Deleted Administrative Units - Example 2 (All)\nDESCRIPTION: This example retrieves all deleted administrative units, selects specific properties, and displays them in a formatted table. The `-All` parameter ensures that all pages of results are retrieved. It connects to Entra ID using the 'AdministrativeUnit.Read.All' scope. The output is similar to Example 1 but retrieves all deleted administrative units.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaDeletedAdministrativeUnit.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.Read.All'\nGet-EntraBetaDeletedAdministrativeUnit -All | Select-Object Id, DisplayName, MembershipType, Visibility, DeletedDateTime, DeletionAgeInDays | Format-Table -AutoSize\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId                                   DisplayName                   MembershipType     Visibility         DeletedDateTime           DeletionAgeInDays\n--                                   -----------                   --------------     ----------         ---------------           -----------------\ngggggggg-8888-9999-aaaa-hhhhhhhhhhhh Americas Administrative Unit   Dynamic           HiddenMembership   2/12/2025 12:40:52 PM     10\n```\n\n----------------------------------------\n\nTITLE: Remove User Manager via Pipelining - PowerShell\nDESCRIPTION: This example shows how to remove a user's manager by first retrieving the user object using Get-EntraBetaUser and then piping it to Remove-EntraBetaUserManager. It requires connecting to Entra ID with the 'User.ReadWrite.All' scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaUserManager.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\nGet-EntraBetaUser -UserId 'SawyerM@Contoso.com' | Remove-EntraBetaUserManager\n```\n\n----------------------------------------\n\nTITLE: Adding an Attribute Set - PowerShell\nDESCRIPTION: Demonstrates how to add a single attribute set using the New-EntraBetaAttributeSet cmdlet. It requires connecting to Entra with appropriate scopes (CustomSecAttributeDefinition.ReadWrite.All). Key parameters include AttributeSetId (name of the set), Description, and MaxAttributesPerSet.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaAttributeSet.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'CustomSecAttributeDefinition.ReadWrite.All'\nNew-EntraBetaAttributeSet -AttributeSetId 'ContosoSet' -Description 'Contoso Set' -MaxAttributesPerSet 15\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nId      Description                     MaxAttributesPerSet\n--      -----------                     -------------------\nTesting Attributes for engineering team 10\n```\n\n----------------------------------------\n\nTITLE: Removing Trust Framework Policy Example - PowerShell\nDESCRIPTION: This example demonstrates how to remove a specific trust framework policy with a given ID. It first connects to Entra ID using the `Connect-Entra` cmdlet with the `Policy.ReadWrite.TrustFramework` scope, and then uses `Remove-EntraBetaTrustFrameworkPolicy` to remove the policy specified by its unique identifier.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaTrustFrameworkPolicy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.TrustFramework'\nRemove-EntraBetaTrustFrameworkPolicy -Id 'B2C_1A_signup_signin'\n```\n\n----------------------------------------\n\nTITLE: ServicePrincipalId Parameter Definition - YAML\nDESCRIPTION: This YAML block defines the ServicePrincipalId parameter for the Get-EntraServicePrincipalMembership cmdlet, specifying its type, requirement, and input properties.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraServicePrincipalMembership.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get All Administrative Unit Members by ID - PowerShell\nDESCRIPTION: This PowerShell script retrieves all members of an administrative unit by specifying the AdministrativeUnitId and using the -All parameter. It first connects to Entra with required scopes and retrieves the administrative unit.  It requires the Microsoft.Entra.Beta module and AdministrativeUnit.ReadWrite.All scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaAdministrativeUnitMember.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'AdministrativeUnit.ReadWrite.All'\n$administrativeUnit = Get-EntraBetaAdministrativeUnit -Filter \"DisplayName eq '<administrativeunit-display-name>'\"\nGet-EntraBetaAdministrativeUnitMember -AdministrativeUnitId $administrativeUnit.Id -All |\nSelect-Object Id, DisplayName, '@odata.type', createdDateTime\n```\n\n----------------------------------------\n\nTITLE: Get Top N Policies\nDESCRIPTION: This example shows how to retrieve only the top `n` policies using the `-Top` parameter (or its alias, `-Limit`). The example connects to Entra ID and then retrieves the top policy.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPolicy.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.Read.All'\nGet-EntraBetaPolicy -Top 1\n```\n\nLANGUAGE: powershell\nCODE:\n```\nId                                   Description                     DisplayName                     Feature          IsAppliedToOrganization IsEnabled\n--                                   -----------                     -----------                     -------          ----------------------- ---------\nbbbbbbbb-1111-2222-3333-cccccccccccc passwordHashSync rollout policy passwordHashSync rollout policy passwordHashSync False                   True\n```\n\n----------------------------------------\n\nTITLE: ApplicationId Parameter Definition\nDESCRIPTION: This YAML snippet describes the `-ApplicationId` parameter used in the `Get-EntraApplicationExtensionProperty` cmdlet. It specifies that the parameter is of type `System.String`, is required, and accepts pipeline input by property name or value.  It represents the unique ID of an application in Microsoft Entra ID.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraApplicationExtensionProperty.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases: ObjectId\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Update Preferred Single Sign-On Mode - PowerShell\nDESCRIPTION: This example demonstrates how to update the PreferredSingleSignOnMode of a service principal using the Set-EntraBetaServicePrincipal cmdlet. It connects to Entra ID, retrieves a service principal by its display name, and sets the preferred SSO mode to 'saml'.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaServicePrincipal.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All','Application.ReadWrite.OwnedBy'\n$servicePrincipal = Get-EntraBetaServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\nSet-EntraBetaServicePrincipal -ServicePrincipalId $servicePrincipal.Id -PreferredSingleSignOnMode 'saml'\n```\n\n----------------------------------------\n\nTITLE: YAML Parameter Definition: -Top\nDESCRIPTION: This YAML snippet defines the -Top parameter for the Get-EntraBetaApplicationOwner cmdlet. It specifies the parameter's type, whether it is required, its position, default value, aliases and other properties related to parameter behavior.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaApplicationOwner.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Int32\nParameter Sets: (All)\nAliases: Limit\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Remove a registered user from a device (PowerShell)\nDESCRIPTION: This example demonstrates how to remove a registered user from a device using the `Remove-EntraBetaDeviceRegisteredUser` cmdlet. It retrieves the device and user objects before removing the association. Requires the `Directory.AccessAsUser.All` scope.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaDeviceRegisteredUser.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Directory.AccessAsUser.All'\n$device = Get-EntraBetaDevice -Filter \"DisplayName eq 'Woodgrove Desktop'\"\n$user = Get-EntraBetaDeviceRegisteredUser -DeviceId $device.ObjectId\nRemove-EntraBetaDeviceRegisteredUser -DeviceId $device.ObjectId -UserId $user.Id\n```\n\n----------------------------------------\n\nTITLE: Add Service Principal as Owner - PowerShell\nDESCRIPTION: This example illustrates how to add another service principal as an owner to a given service principal. It begins by connecting to Entra ID, then retrieves both the target service principal and the service principal to be assigned as the owner. Finally, it utilizes the Add-EntraServicePrincipalOwner cmdlet to establish the ownership.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Add-EntraServicePrincipalOwner.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Application.ReadWrite.All', 'Application.ReadWrite.OwnedBy'\n$servicePrincipal = Get-EntraServicePrincipal -Filter \"displayName eq 'Helpdesk Application'\"\n$owner = Get-EntraServicePrincipal -Filter \"displayName eq 'IT Department'\"\nAdd-EntraServicePrincipalOwner -ServicePrincipalId $servicePrincipal.Id -OwnerId $owner.Id\n```\n\n----------------------------------------\n\nTITLE: Creating User with AgeGroup - New-EntraUser (PowerShell)\nDESCRIPTION: This example demonstrates how to create a user using the AgeGroup parameter with the New-EntraUser cmdlet.  It begins by connecting to Entra ID with the necessary scope and creating a PasswordProfile object.  It then defines the user parameters, including AgeGroup set to 'adult', and passes them to New-EntraUser.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/New-EntraUser.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'User.ReadWrite.All'\n$passwordProfile = New-Object -TypeName Microsoft.Open.AzureAD.Model.PasswordProfile\n$passwordProfile.Password = '<Password>'\n\n$userParams = @{\n    DisplayName       = 'Peyton Davis'\n    PasswordProfile   = $passwordProfile\n    UserPrincipalName = 'PeytonD@contoso.com'\n    AccountEnabled    = $true\n    MailNickName      = 'PeytonD'\n    AgeGroup          = 'adult'\n}\n\nNew-EntraUser @userParams\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nObjectId                             DisplayName UserPrincipalName               UserType\n--------                             ----------- -----------------               --------\nbbbbbbbb-1111-2222-3333-cccccccccccc Peyton Davis    PeytonD@contoso.com             Member\n```\n\n----------------------------------------\n\nTITLE: Remove Named Location Policy - Entra ID - PowerShell\nDESCRIPTION: This example demonstrates how to delete a named location policy in Microsoft Entra ID using its ID. It first connects to Entra ID with the necessary scopes, retrieves the policy using its display name, and then removes it using the Remove-EntraBetaNamedLocationPolicy cmdlet with the PolicyId parameter.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Remove-EntraBetaNamedLocationPolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ConditionalAccess','Policy.Read.All'\n$policy = Get-EntraBetaNamedLocationPolicy | Where-Object {\"$_.DisplayName -eq 'IP named location policy'\"}\nRemove-EntraBetaNamedLocationPolicy -PolicyId $policy.Id\n```\n\n----------------------------------------\n\nTITLE: Configuring PasswordCredentials Parameter\nDESCRIPTION: This parameter allows setting the collection of password credentials associated with the application.  These credentials are used for authentication purposes. It accepts a list of PasswordCredential objects.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/New-EntraBetaApplication.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Generic.List`1[Microsoft.Open.MSGraph.Model.PasswordCredential]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition -Property - YAML\nDESCRIPTION: This YAML snippet defines the '-Property' parameter, specifying that it's a string array and not required. This parameter allows specifying which properties of the object to be returned.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaServicePrincipal.md#_snippet_19\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases: Select\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get Role Definition by Display Name - PowerShell\nDESCRIPTION: This code snippet retrieves a specific role definition by its display name using the Get-EntraDirectoryRoleDefinition command.  It requires the RoleManagement.Read.Directory and EntitlementManagement.Read.All scopes. The Filter parameter is used to specify the role's display name.  The output contains role definition properties like Id, DisplayName, and Description.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/manage-roles.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nConnect-Entra -Scopes 'RoleManagement.Read.Directory', 'EntitlementManagement.Read.All'\n$directoryRole = Get-EntraDirectoryRoleDefinition -Filter \"DisplayName eq 'Helpdesk Administrator'\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deleted Applications with Get-EntraDeletedApplication (PowerShell)\nDESCRIPTION: This PowerShell command retrieves deleted applications using the Get-EntraDeletedApplication cmdlet from the Microsoft.Entra module. It returns the `DeletionAgeInDays` response property. It depends on the Microsoft.Entra PowerShell module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/conceptual/whats-new-docs.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraDeletedApplication\n```\n\n----------------------------------------\n\nTITLE: Update Conditional Access Policy - Entra Beta (PowerShell)\nDESCRIPTION: This example demonstrates how to update a conditional access policy in Microsoft Entra ID using the Set-EntraBetaConditionalAccessPolicy cmdlet.  It connects to Entra ID, retrieves a specific policy by display name, and then updates its display name, state, conditions, grant controls, and session controls. It requires the 'Policy.ReadWrite.ConditionalAccess' and 'Policy.Read.All' scopes and the Microsoft.Open.MSGraph.Model module.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Set-EntraBetaConditionalAccessPolicy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nConnect-Entra -Scopes 'Policy.ReadWrite.ConditionalAccess','Policy.Read.All'\n$policy = Get-EntraBetaConditionalAccessPolicy | Where-Object {$_.DisplayName -eq 'MFA policy'}\n$cond = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessConditionSet\n$control = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessGrantControls\n$session = New-Object -TypeName Microsoft.Open.MSGraph.Model.ConditionalAccessSessionControls\nSet-EntraBetaConditionalAccessPolicy -PolicyId $policy.Id -DisplayName 'MFA policy updated' -State 'Enabled' -Conditions $cond -GrantControls $control -SessionControls $session\n```\n\n----------------------------------------\n\nTITLE: Example 1: Get all role assigment requests - PowerShell\nDESCRIPTION: This example shows how to retrieve all role assignment requests for a specific provider and resource using the Filter parameter. It filters the requests based on the ResourceId.  The expected output is a list of role assignment requests matching the provider and resource.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/beta/Microsoft.Entra.Beta/Get-EntraBetaPrivilegedRoleAssignmentRequest.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> Get-EntraBetaPrivilegedRoleAssignmentRequest -ProviderId AzureResources -Filter \"ResourceId eq 'e5e7d29d-5465-45ac-885f-4716a5ee74b5'\"\n```\n\n----------------------------------------\n\nTITLE: Get User Roles (GetQuery)\nDESCRIPTION: This syntax block defines the GetQuery parameter set for the `Get-EntraUserRole` cmdlet. It retrieves directory roles assigned to a user, allowing filtering, sorting, and pagination through parameters such as `-UserId`, `-All`, `-Filter`, `-Top`, `-Property`, and `-Sort`. The `CommonParameters` are also supported.\nSOURCE: https://github.com/microsoftdocs/entra-powershell-docs/blob/main/docs/reference/v1.0/Microsoft.Entra/Get-EntraUserRole.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-EntraUserRole\n -UserId <String>\n [-All]\n [-Filter <String>]\n [-Top <Int32>]\n [-Property <String[]>]\n [-Sort <String[]>]\n [<CommonParameters>]\n```"
  }
]