[
  {
    "owner": "jetbrains",
    "repo": "qodana",
    "content": "TITLE: Comprehensive Qodana YAML Configuration Example - YAML\nDESCRIPTION: Example combining multiple configuration options: versioning, fail thresholds, inspection profiles, and inclusive or exclusive paths and inspections. This snippet illustrates a complete practical setup demonstrating explicit inspection enabling and disabling over multiple paths.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-yaml.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1.0\nfailThreshold: 0\nprofile:\n  name: qodana.recommended\ninclude:\n  - name: SomeInspectionId\nexclude:\n  - name: Annotator\n  - name: AnotherInspectionId\n    paths:\n      - relative/path\n      - another/relative/path\n  - name: All\n    paths:\n      - asm-test/src/main/java/org\n      - benchmarks\n      - tools\n```\n\n----------------------------------------\n\nTITLE: Adding fail-threshold in YAML\nDESCRIPTION: This YAML snippet is used for setting up the `fail-threshold` option in the `code_quality.yml` to enforce the quality gate.  It is used in conjuction with the baseline for managing the technical debt.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/github.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nfail-threshold: <number-of-accepted-problems>\n```\n\n----------------------------------------\n\nTITLE: Configuring Qodana Scan Job in GitLab CI/CD YAML\nDESCRIPTION: Defines a GitLab CI/CD job (`YAML`) named `qodana` to run Qodana analysis on the `main` branch and merge requests. It utilizes a specific `jetbrains/qodana-<linter>` Docker image, executes the `qodana` command to generate reports, enforces a quality gate via `--fail-threshold <number>`, and stores results as artifacts. Requires replacing `<linter>` and `<number>` placeholders and setting the `QODANA_TOKEN` CI/CD variable with a Qodana Cloud project token.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/cloud-configure-for-os-projects.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  - qodana\n\nqodana:\n  stage: qodana\n  only:\n    - main\n    - merge_requests\n  image:\n    name: jetbrains/qodana-<linter>\n    entrypoint: [\"\"]\n  script:\n    - qodana --save-report --results-dir=$CI_PROJECT_DIR/qodana \n     --report-dir=$CI_PROJECT_DIR/qodana/report\n     --fail-threshold <number>\n  artifacts:\n    paths:\n      - qodana\n```\n\n----------------------------------------\n\nTITLE: Excluding Files or Paths from Qodana Analysis Scope - YAML\nDESCRIPTION: Shows how to exclude specific inspections or all inspections on specified project paths in the qodana.yaml configuration. The 'exclude' section can disable inspections globally or on particular paths, helping to narrow analysis scope and omit irrelevant code segments. Paths are relative to the project root. This feature supports fine-grained control over inspection coverage.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-yaml.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nexclude:\n  - name: All\n    paths:\n      - asm-test/src/main/java/org\n      - asm/Visitor.java\n      - benchmarks\n```\n\nLANGUAGE: yaml\nCODE:\n```\nexclude:\n  - name: Annotator\n  - name: AnotherInspectionId\n    paths:\n      - relative/path\n      - another/relative/path\n  - name: All\n    paths:\n      - asm-test/src/main/java/org\n      - asm\n      - benchmarks\n      - tools\n```\n\n----------------------------------------\n\nTITLE: Configuring Qodana Scan Task in Azure Pipelines YAML - YAML\nDESCRIPTION: This YAML snippet provides a basic setup for integrating the Qodana Scan task into an Azure Pipelines workflow. It specifies the pipeline trigger, build agent image, and a series of build steps including optional caching and execution of QodanaScan. Dependencies include the Qodana Azure Pipelines extension, Docker installed on the agent, and an appropriate repository and branch. The trigger parameter indicates the tracked branch, while 'pool' and 'steps' sections define build and inspection operations. Required inputs include repository details; outputs are generated scan reports. Limitations: Docker must be compatible with Linux containers to use most Qodana images.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-azure-pipelines.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Start with a minimal pipeline that you can customize to build and deploy your code.\n# Add steps that build, run tests, deploy, and more:\n# https://aka.ms/yaml\n\ntrigger:\n  - main\n\npool:\n  vmImage: ubuntu-latest\n\nsteps:\n  - task: Cache@2  # Not required, but Qodana will open projects with cache faster.\n    inputs:\n      key: '\"$(Build.Repository.Name)\" | \"$(Build.SourceBranchName)\" | \"$(Build.SourceVersion)\"'\n      path: '$(Agent.TempDirectory)/qodana/cache'\n      restoreKeys: |\n        \"$(Build.Repository.Name)\" | \"$(Build.SourceBranchName)\"\n        \"$(Build.Repository.Name)\"\n  - task: QodanaScan@2023\n```\n\n----------------------------------------\n\nTITLE: Running Qodana Docker Image with Project Token - Shell\nDESCRIPTION: This snippet shows how to run a Qodana linter Docker container with the QODANA_TOKEN environment variable set to provide a project token. The command mounts the current directory into the container and passes the token to enable connection and license verification with Qodana Cloud. This setup ensures that results can be uploaded and associated with the correct cloud project.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/project-token.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run \\\n   -v $(pwd):/data/project/ \\\n   -e QODANA_TOKEN=\"<qodana-cloud-token>\" \\\n    jetbrains/qodana-<linter>\n```\n\n----------------------------------------\n\nTITLE: Qodana Scan with Baseline and Quality Gate in YAML\nDESCRIPTION: This YAML code sample configures the Qodana Scan action to utilize a baseline and a quality gate.  It uses the `--baseline` argument to specify the baseline file and the `fail-threshold` to define the acceptable number of problems, enforcing quality checks within the workflow.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/github.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Qodana Scan\n  uses: JetBrains/qodana-action@main\n  with:\n    args: --baseline,qodana.sarif.json\n```\n\n----------------------------------------\n\nTITLE: Run the linter with custom build\nDESCRIPTION: This shell command runs the Qodana linter with the `--no-build` option.  It assumes that the project build will be handled externally, for example in a CI/CD pipeline. The command utilizes Docker to execute the Qodana image and specifies project directory, Qodana token and the docker image.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-dotnet-community.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker run \\\n   -v <source-directory>/:/data/project/ \\\n   -e QODANA_TOKEN=\"<cloud-project-token>\" \\\n   %docker-image% \\\n   --no-build\n```\n\n----------------------------------------\n\nTITLE: Configuring Quality Gates and Failure Thresholds in Qodana YAML - YAML\nDESCRIPTION: Describes how to set quality gate rules in qodana.yaml to control build failure based on inspection results. You can specify total problem thresholds using 'failThreshold' or detailed failure conditions by problem severity and test coverage levels. These configurations help enforce code quality standards during analysis and build pipelines.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-yaml.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nfailThreshold: <number>\n```\n\nLANGUAGE: yaml\nCODE:\n```\nfailureConditions:\n  severityThresholds:\n    any: <number> # Total problems\n    critical: <number> # Critical and other severities\n    high: <number>\n    moderate: <number>\n    low: <number>\n    info: <number>\n  testCoverageThresholds:\n    fresh: <number> # Fresh code coverage\n    total: <number> # Total code coverage\n```\n\n----------------------------------------\n\nTITLE: Installing Python Project Dependencies with pip\nDESCRIPTION: This code snippet demonstrates how to use the `bootstrap` field in the `qodana.yaml` file to install project dependencies using pip. It specifies that the `requirements.txt` file should be used to install the dependencies before the Qodana analysis runs.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-python-community.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nbootstrap: pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Implementing Quality Gate and Baseline in GitLab CI/CD\nDESCRIPTION: Configuration that uses quality gate and baseline features by adding fail-threshold and baseline parameters to the Qodana command. This helps ensure code quality standards.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/gitlab.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nqodana:\n   image:\n      name: jetbrains/qodana-<linter>\n      entrypoint: [\"\"]\n   cache:\n      - key: qodana-2023.3-$CI_DEFAULT_BRANCH-$CI_COMMIT_REF_SLUG\n        fallback_keys:\n           - qodana-2023.3-$CI_DEFAULT_BRANCH-\n           - qodana-2023.3-\n        paths:\n           - .qodana/cache\n   variables:\n      QODANA_TOKEN: $qodana_token           - \n   script:\n      - qodana --fail-threshold <number> --baseline <path/to/qodana.sarif.json> --results-dir=$CI_PROJECT_DIR/.qodana/results\n         --cache-dir=$CI_PROJECT_DIR/.qodana/cache\n   artifacts:\n      paths:\n         - qodana/report/\n      expose_as: 'Qodana report'\n```\n\n----------------------------------------\n\nTITLE: Running Qodana with Baseline Enabled via Shell Command\nDESCRIPTION: Demonstrates how to run a Qodana scan from the command line with the baseline feature enabled. The `--baseline` option requires the path to a previously generated `qodana.sarif.json` report file, which serves as the baseline for comparing subsequent analysis results.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/cloud-configure-for-os-projects.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n--baseline <path-to-qodana.sarif.json>\n```\n\n----------------------------------------\n\nTITLE: Configuring Qodana - Kotlin DSL Example\nDESCRIPTION: This Kotlin DSL snippet provides an example configuration within a `build.gradle.kts` file to configure Qodana. It demonstrates setting the `resultsPath` and providing command line arguments via the `arguments` property within the `qodanaScan` task. The plugin is also applied here. This configuration includes setting the `resultsPath` and setting the `--fail-threshold` argument. The code snippet requires the Qodana plugin to be applied and configured correctly.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana_gradle_plugin.md#_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    // applies Gradle Qodana plugin to use it in project\n    id(\"org.jetbrains.qodana\") version \"...\"\n}\n\nqodana {\n    // by default result path is $projectPath/build/results\n    resultsPath.set(\"some/output/path\")\n}\n\nqodanaScan {\n    resultsPath.set(\"some/output/path\")\n    arguments.set(listOf(\"--fail-threshold\", \"0\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Qodana - Groovy Example\nDESCRIPTION: This Groovy snippet demonstrates a sample configuration within a `build.gradle` file for the Qodana plugin.  It configures the results path, and it sets arguments using the `arguments` property within the `qodanaScan` task configuration. It also includes plugin application. This example sets the `resultsPath` and the `--fail-threshold` parameter.  Ensure the correct Qodana plugin version is specified.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana_gradle_plugin.md#_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    // applies Gradle Qodana plugin to use it in project\n    id \"org.jetbrains.qodana\" version \"...\"\n}\n\nqodana {\n    // by default result path is $projectPath/build/results\n    resultsPath = \"some/output/path\"\n}\n\nqodanaScan {\n    arguments = [\"--fail-threshold\", \"0\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Qodana Quality Gate in Bitbucket Pipelines Using YAML\nDESCRIPTION: This snippet demonstrates how to set up a Bitbucket pipeline step that runs Qodana with the --fail-threshold option to enforce a limit on problems detected during code analysis. It specifies the use of a specific Qodana Docker image and outlines environment variable and report directory configurations.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/bitbucket.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nimage: atlassian/default-image:4\n\npipelines:\n  branches:\n    main:\n      - step:\n          name: Qodana\n          caches:\n            - qodana\n          image: jetbrains/qodana-<linter> # Specify a Qodana linter here. For example, jetbrains/qodana-jvm:latest\n          script:\n            - export QODANA_TOKEN=$QODANA_TOKEN  # Export the environment variable\n            - qodana --fail-threshold <number-of-problems> --results-dir=$BITBUCKET_CLONE_DIR/.qodana --report-dir=$BITBUCKET_CLONE_DIR/.qodana/report --cache-dir=$BITBUCKET_CLONE_DIR/.qodana/cache\n          artifacts:\n            - .qodana/report\n\ndefinitions:\n  caches:\n    qodana: .qodana/cache\n```\n\n----------------------------------------\n\nTITLE: Configuring solution file path in qodana.yaml\nDESCRIPTION: This snippet configures the relative path to a solution file within the `qodana.yaml` file. This is necessary if your project contains multiple solution files, allowing the linter to target a specific solution for analysis. It ensures the correct solution file is selected for analysis.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-dotnet-community.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndotnet:\n  solution: <relative-path-to-solution-file>\n```\n\n----------------------------------------\n\nTITLE: Configuring Pull Request Trigger in YAML\nDESCRIPTION: This YAML configuration sets up a GitHub Actions workflow to trigger on pull request events targeting the `main` branch. It's a foundational step for incorporating Qodana checks within a branch protection rule, and enables merge blocking based on quality gate results.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/github.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  pull_request:\n    branches:\n      - main\n```\n\n----------------------------------------\n\nTITLE: Integrating Qodana Scan into GitHub Actions Workflow\nDESCRIPTION: Example GitHub Actions workflow configuration (YAML) that runs Qodana scans on pull requests targeting `main` and pushes to `main` or `releases/*` branches. It checks out code, uses the `JetBrains/qodana-action` to execute the scan, and forwards reports to Qodana Cloud using the `QODANA_TOKEN` environment variable, which must be configured as a repository secret.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/cloud-configure-for-os-projects.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: Qodana\non:\n  workflow_dispatch:\n  pull_request:\n    branches:\n      - main\n  push:\n    branches:\n      - main\n      - 'releases/*'\n\njobs:\n  qodana:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: 'Qodana Scan'\n        uses: JetBrains/qodana-action@v2022.2.3\n        env:\n          QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Applying Qodana Plugin - Kotlin DSL\nDESCRIPTION: This Kotlin DSL code snippet shows how to apply the Qodana Gradle plugin in the `build.gradle.kts` configuration file. It includes the `id` function to declare the plugin, along with a version to specify. Replace `<plugin-version>` with the version of the Qodana plugin you want to use.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana_gradle_plugin.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n    id(\"org.jetbrains.qodana\") version \"<plugin-version>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Qodana Analysis Locally using Qodana CLI - Shell\nDESCRIPTION: Executes Qodana analysis locally using the `qodana scan` command. It passes the `QODANA_TOKEN` as an environment variable and specifies the Docker linter image to use for the scan. This is the recommended method for local analysis.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/inspect-python-code.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nqodana scan \\\n   -e QODANA_TOKEN=\"<cloud-project-token>\" \\\n   -l %docker-image%\n```\n\n----------------------------------------\n\nTITLE: Basic Qodana Scan Configuration in YAML\nDESCRIPTION: This YAML configuration demonstrates the basic setup for the Qodana Scan action within a GitHub Actions workflow. It specifies the action to use, along with example parameters. It also showcases the usage of the GitHub token to provide authentication during the process.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/github.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Qodana Scan\n  uses: JetBrains/qodana-action@v2023.3\n  with:\n    pr-mode: false\n    args: --apply-fixes\n    push-fixes: pull-request\n  env:\n    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Docker Usage for Applying Quick-Fixes\nDESCRIPTION: Shows how to run Qodana with Docker to apply quick-fix strategies by using the --fixes-strategy parameter. The command includes setting the project token environment variable and specifying the desired fix strategy (cleanup or apply).\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/quick-fix.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run \\\n   -v <source-directory>/:/data/project/  \\\n   -e QODANA_TOKEN=\"<cloud-project-token>\" \\\n   jetbrains/qodana-<linter> \\\n   --fixes-strategy <cleanup/apply>\n```\n\n----------------------------------------\n\nTITLE: Install Project Dependencies with Yarn - YAML\nDESCRIPTION: This YAML snippet configures Qodana to install project dependencies using `yarn install` before analysis. It assumes a `yarn.lock` file is present in the project root.  This ensures that all necessary dependencies are available for the analysis to run correctly.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-js.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nbootstrap: yarn install\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Qodana Run Scenario with Custom Script - YAML\nDESCRIPTION: Shows how to override the default Qodana run scenario by specifying a custom script name and parameters in qodana.yaml under the 'script' section. This allows running alternative analysis scenarios like PHP migration checks, improving flexibility for different inspection contexts.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-yaml.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nscript:\n  name: <script-name>\n  parameters:\n      <parameter>: <value>\n```\n\n----------------------------------------\n\nTITLE: Configuring Qodana Dependency Installation via YAML\nDESCRIPTION: This YAML snippet demonstrates how to use the `bootstrap` field in the `qodana.yaml` configuration file to automatically install project dependencies. It specifies running the `pip install -r requirements.txt` command, which is executed before the Qodana analysis begins. This ensures that all necessary libraries are available for the linter.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-python.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbootstrap: pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Jenkins Pipeline with Qodana Quality Gate and Baseline (Groovy)\nDESCRIPTION: This code snippet demonstrates how to integrate the Qodana quality gate and baseline features into a Jenkins Pipeline. It adds the `--fail-threshold` and `--baseline` options to the `qodana` command within the `steps` block, allowing for enforcing code quality standards and comparing analysis results against a baseline.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/jenkins.md#_snippet_2\n\nLANGUAGE: Groovy\nCODE:\n```\npipeline {\n    environment {\n        QODANA_TOKEN=credentials('qodana-token')\n    }\n    agent {\n        docker {\n            args '''\n              -v \"${WORKSPACE}\":/data/project\n              --entrypoint=\"\"\n              '''\n            image 'jetbrains/qodana-<linter>'\n        }\n    }\n    stages {\n        stage('Qodana') {\n            steps {\n                sh '''\n                qodana \\\n                --fail-threshold <number> \\\n                --baseline <path/to/qodana.sarif.json>\n                '''\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Qodana Configuration for GitLab CI/CD\nDESCRIPTION: Basic pipeline configuration for running Qodana in GitLab CI/CD. Includes cache configuration for faster subsequent runs and token setup for paid linters.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/gitlab.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nqodana:\n   image:\n      name: jetbrains/qodana-<linter>\n      entrypoint: [\"\"]\n   cache:\n      - key: qodana-2023.3-$CI_DEFAULT_BRANCH-$CI_COMMIT_REF_SLUG\n        fallback_keys:\n           - qodana-2023.3-$CI_DEFAULT_BRANCH-\n           - qodana-2023.3-\n        paths:\n           - .qodana/cache\n   variables:\n      QODANA_TOKEN: $qodana_token\n   script:\n      - qodana --cache-dir=$CI_PROJECT_DIR/.qodana/cache\n```\n\n----------------------------------------\n\nTITLE: Run the Qodana linter\nDESCRIPTION: This is the standard command to run the Qodana linter using Docker. It mounts the source directory, provides the QODANA_TOKEN environment variable with a cloud project token, and specifies the Docker image to use. The command executes the static analysis of the .NET project within the Docker container.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-dotnet-community.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker run \\\n   -v <source-directory>/:/data/project/ \\\n   -e QODANA_TOKEN=\"<cloud-project-token>\" \\\n   %docker-image%\n```\n\n----------------------------------------\n\nTITLE: Specifying Platform with --platform option\nDESCRIPTION: This command uses the `--platform` option to set the solution platform for the analysis. This affects the build process and determines the target architecture.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-dotnet-community.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n--platform=x86\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform using qodana.yaml\nDESCRIPTION: This yaml snippet sets the solution platform for the .NET project within the `qodana.yaml` configuration file. It overrides the default platform (Any CPU) and allows you to specify platform like x86 or x64. This is important for projects that have platform-specific dependencies.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-dotnet-community.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndotnet:\n  platform: x86\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom qodana.yaml Configuration Script in TeamCity\nDESCRIPTION: Shell script that generates a custom qodana.yaml file in the working directory to configure inspection exclusions. This script creates a configuration that excludes specific inspections and paths from Qodana analysis.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/teamcity.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\n\nFILE=\"./qodana.yaml\"\n\n/bin/cat <<EOM >$FILE\nexclude:\n- name: Annotator\n- name: AnotherInspectionId\n  paths:\n    - relative/path\n    - another/relative/path\n- name: ProhibitedDependencyLicense\n\nEOM\n```\n\n----------------------------------------\n\nTITLE: Configuring Qodana Recommended Profile in YAML\nDESCRIPTION: Specifies the `qodana.recommended` inspection profile within the `qodana.yaml` file located in the project root. This enables a more comprehensive set of code inspections provided by Qodana, compared to the default `qodana.starter` profile.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/cloud-configure-for-os-projects.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nprofile:\n    name: qodana.recommended\n```\n\n----------------------------------------\n\nTITLE: Specifying Qodana Linter Image in YAML Configuration - YAML\nDESCRIPTION: Shows how to specify a particular Qodana linter Docker image version using the 'linter' key in the YAML configuration. This controls which linter environment is used for code inspection.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-yaml.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nlinter: jetbrains/qodana-jvm-android:2023.3\n```\n\n----------------------------------------\n\nTITLE: Enabling License Audit in Qodana YAML Configuration\nDESCRIPTION: Enables the license audit feature in Qodana by including the `CheckDependencyLicenses` inspection using the `include` directive in the `qodana.yaml` file. This feature helps track the compatibility of dependency licenses with the project's own license.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/cloud-configure-for-os-projects.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ninclude:\n  - name: CheckDependencyLicenses\n```\n\n----------------------------------------\n\nTITLE: Configuring quick-fixes strategy in Qodana YAML configuration\nDESCRIPTION: Sets the quick-fix strategy to either cleanup or apply patches automatically during code inspection. Useful for automating code corrections according to predefined strategies within Qodana's analysis process.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-yaml.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nfixesStrategy: cleanup/apply\n```\n\n----------------------------------------\n\nTITLE: Configuring Quick-Fix Strategy in qodana.yaml\nDESCRIPTION: Provides an example of setting the fixesStrategy option in the qodana.yaml configuration file to specify the desired quick-fix approach, either 'cleanup' or 'apply'.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/quick-fix.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfixesStrategy: cleanup/apply\n```\n\n----------------------------------------\n\nTITLE: GitHub Code Scanning integration in YAML\nDESCRIPTION: This YAML code snippet demonstrates how to integrate Qodana's SARIF report with GitHub code scanning. It uses the `github/codeql-action/upload-sarif` action to upload the generated SARIF file, enabling code scanning capabilities within GitHub.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/github.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n      - uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: ${{ runner.temp }}/qodana/results/qodana.sarif.json\n```\n\n----------------------------------------\n\nTITLE: Basic Jenkins Pipeline Configuration with Qodana (Groovy)\nDESCRIPTION: This code snippet demonstrates the basic configuration of a Jenkins Pipeline to run Qodana within a Docker container. It defines the environment variable `QODANA_TOKEN` using Jenkins credentials, specifies the Docker image to use, mounts the workspace directory, and executes the `qodana` command within a stage.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/jenkins.md#_snippet_0\n\nLANGUAGE: Groovy\nCODE:\n```\npipeline {\n    environment {\n        QODANA_TOKEN=credentials('qodana-token')\n    }\n    agent {\n        docker {\n            args '''\n              -v \"${WORKSPACE}\":/data/project\n              --entrypoint=\"\"\n              '''\n            image 'jetbrains/qodana-<linter>'\n        }\n    }\n    stages {\n        stage('Qodana') {\n            steps {\n                sh '''qodana'''\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Qodana Configuration with Quality Gate and Baseline\nDESCRIPTION: Extended Qodana configuration that includes quality gate and baseline features. Uses command-line options to set a failure threshold and reference a baseline file for comparison.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/space-automation.md#_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\njob(\"Qodana\") {\n    container(\"jetbrains/qodana-<linter>\") {\n        env[\"QODANA_TOKEN\"] = Secrets(\"qodana-token\")\n        shellScript {\n            content = \"\"\"\n               qodana \\\n               --fail-threshold <number> \\ \n               --baseline <path/to/qodana.sarif.json>\n               \"\"\".trimIndent()\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Qodana Scan Action with Arguments - YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the Qodana Scan action using the `with` keyword to specify action parameters. The example sets the `args` parameter to pass custom arguments to the Qodana CLI and enables caching for the default branch only.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/github.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nwith:\n  args: --baseline,qodana.sarif.json\n  cache-default-branch-only: true\n```\n\n----------------------------------------\n\nTITLE: Running Qodana Code Coverage with Qodana CLI (Shell)\nDESCRIPTION: Executes a Qodana scan using the Qodana CLI tool. It maps a local directory containing code coverage reports to the expected `/data/coverage` path for Qodana and requires setting the Qodana Cloud project token via the `QODANA_TOKEN` environment variable for uploading results.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/code-coverage.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nqodana scan \\\n   -v /directory/with/coverage/report/:/data/coverage \\\n   -e QODANA_TOKEN=\"<qodana-cloud-token>\"\n```\n\n----------------------------------------\n\nTITLE: Qodana CLI Usage for Applying Quick-Fixes\nDESCRIPTION: Details how to execute Qodana via CLI to enable quick-fixes by using command-line options like --apply-fixes or --cleanup, along with setting the project token for authenticated access.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/quick-fix.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nqodana scan \\\n   -e QODANA_TOKEN=\"<cloud-project-token>\" \\\n   <--apply-fixes/--cleanup>\n```\n\n----------------------------------------\n\nTITLE: Running Qodana Scan with CLI for Frontend\nDESCRIPTION: This shell script demonstrates how to run Qodana CLI on the `frontend` project within a monorepo.  It uses the `qodana scan` command and sets the `QODANA_TOKEN` environment variable to provide the cloud project token for the frontend project, which is used for authentication. The `--source-directory` option is then used to specify that the analysis should focus on the 'frontend' directory within the monorepo, initiating the code inspection process.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/monorepo-project.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nqodana scan \\\n&nbsp;&nbsp;-e QODANA_TOKEN=\"<cloud-project-token-for-frontend-project>\" \\\n&nbsp;&nbsp;--source-directory frontend\n```\n\n----------------------------------------\n\nTITLE: Qodana GitHub Action Workflow\nDESCRIPTION: This YAML file defines a GitHub Actions workflow to run Qodana on a monorepo project. It uses the `JetBrains/qodana-action@v2023.3` action.  The workflow checks out the code, copies the project-specific `qodana.yaml` to root and then invokes the qodana action.  It uses the `--source-directory` argument and the `QODANA_TOKEN` secret to analyze backend and frontend separately and also specifies an artifact name for storing reports.  This runs whenever there is a push or pull request.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/monorepo-project.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nname: Qodana\non:\n  workflow_dispatch:\n  pull_request:\n  push:\njobs:\n  qodana-backend:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: 'Use qodana-backend config'\n        run: cp ./qodana-backend.yaml ./qodana.yaml\n      - name: 'Qodana Backend'\n        uses: JetBrains/qodana-action@v2023.3\n        with:\n          args: |\n            --source-directory,backend,\n          artifact-name: qodana-backend\n        env:\n            QODANA_TOKEN: ${{ secrets.QODANA_TOKEN_BACKEND }}\n  qodana-frontend:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: 'Use qodana-frontend config'\n        run: cp ./qodana-frontend.yaml ./qodana.yaml\n      - name: 'Qodana Frontend'\n        uses: JetBrains/qodana-action@v2023.3\n        with:\n          args: |\n            --source-directory,frontend,\n          artifact-name: qodana-frontend\n        env:\n            QODANA_TOKEN: ${{ secrets.QODANA_TOKEN_FRONTEND }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jenkins Pipeline for Qodana Analysis with Docker - Groovy\nDESCRIPTION: Defines a Jenkins Pipeline that runs Qodana using a Docker agent. It configures the Docker image and volume mapping, sets the `QODANA_TOKEN` environment variable from Jenkins credentials for paid linters, and executes the `qodana` command to perform the analysis.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/inspect-python-code.md#_snippet_1\n\nLANGUAGE: Groovy\nCODE:\n```\npipeline {\n    environment {\n        QODANA_TOKEN=credentials('qodana-token')\n    }\n    agent {\n        docker {\n            args '''\n              -v \"${WORKSPACE}\":/data/project\n              --entrypoint=\"\"\n              '''\n            image '%docker-image%'\n        }\n    }\n    stages {\n        stage('Qodana') {\n            steps {\n                sh '''qodana'''\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions for Fresh Code Coverage Analysis (YAML)\nDESCRIPTION: Defines a GitHub Actions workflow focused on analyzing 'fresh code' (code within a pull request) for a JavaScript project. It's similar to the standard JS/Jest workflow but crucially enables the pull request mode in the Qodana action by setting `pr-mode: true`. This allows Qodana to calculate and report coverage specifically for the changes introduced in the PR.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/code-coverage.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nname: Code coverage fresh code\n\non:\n  workflow_dispatch:\n  pull_request:\n  push:\n    branches:\n      - main\n      - 'releases/*'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout Code\n        uses: actions/checkout@v3\n        with:\n          ref: ${{ github.event.pull_request.head.sha }}\n          fetch-depth: 0\n\n      - name: Use Node.js 18.x\n        uses: actions/setup-node@v2\n        with:\n          node-version: 18.x\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Run tests\n        run: npm test\n      \n      - name: Archive coverage data\n        uses: actions/upload-artifact@v2\n        with:\n          name: jest-coverage-data\n          path: .qodana/code-coverage\n      \n      - name: Qodana Scan\n        uses: JetBrains/qodana-action@main\n        env:\n          QODANA_TOKEN: ${{ secrets.QODANA_TOKEN_JS }}\n        with:\n          pr-mode: true # Enable the pull-request mode\n```\n\n----------------------------------------\n\nTITLE: Specifying Solution with --solution option\nDESCRIPTION: This shell command uses the `--solution` option to specify the exact solution file for the linter to analyze. This is useful when a project contains multiple solution files.  The relative path to the solution file from the repository root must be provided.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-dotnet-community.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n--solution=<relative-path-to-solution-file>\n```\n\n----------------------------------------\n\nTITLE: Detailing a Plugin Extension in Qodana SARIF `extensions` Array (JSON)\nDESCRIPTION: This JSON snippet exemplifies an element within the `extensions` array of a Qodana SARIF report's `tool` object. It describes an IntelliJ IDEA plugin (`org.editorconfig.editorconfigjetbrains`), including its version and the inspection rules (`rules`) it provides, such as `EditorConfigCharClassRedundancy`. Each rule details its ID, descriptions, default configuration (enabled status, severity), and relationships to categories (`taxa`).\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-sarif-output.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extensions\": [\n    {\n      \"name\": \"org.editorconfig.editorconfigjetbrains\",\n      \"version\": \"222.4190\",\n      \"rules\": [\n        {\n          \"id\": \"EditorConfigCharClassRedundancy\",\n          \"shortDescription\": {\n            \"text\": \"Unnecessary character class\"\n          },\n          \"fullDescription\": {\n            \"text\": \"Reports character classes that consist of a single character. Such classes can be simplified to a character, for example '[a]'→'a'.\",\n            \"markdown\": \"Reports character classes that consist of a single character. Such classes can be simplified to a character, for example `[a]`→`a`.\"\n          },\n          \"defaultConfiguration\": {\n            \"enabled\": true,\n            \"level\": \"warning\",\n            \"parameters\": {\n              \"ideaSeverity\": \"WARNING\",\n              \"tags\": [\n                \"ideaSeverity\"\n              ]\n            }\n          },\n          \"relationships\": [\n            {\n              \"target\": {\n                \"id\": \"EditorConfig\",\n                \"index\": 0,\n                \"toolComponent\": {\n                  \"name\": \"QDPHP\"\n                }\n              },\n              \"kinds\": [\n                \"superset\"\n              ]\n            }\n          ]\n        }\n      ],\n      \"language\": \"en-US\",\n      \"contents\": [\n        \"localizedData\",\n        \"nonLocalizedData\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Git Repository Metadata (Shell)\nDESCRIPTION: Clones a Git repository, fetching only metadata (no file content) for commits made within the last 90 days. This is used by Qodana Cloud to prepare for contributor analysis after the SSH key is set up.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/contributors.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone -n --filter=blob:none --shallow-since='90 days ago' <repo>\n```\n\n----------------------------------------\n\nTITLE: Copying YAML File in YAML\nDESCRIPTION: This snippet configures Qodana to copy a project-specific configuration file (`qodana-backend.yaml` or `qodana-frontend.yaml`) to the root folder (`qodana.yaml`) before running the inspection. This is achieved using the `bootstrap` option within a `qodana.yaml` file to enable the copying operation using the `cp` command. This approach ensures the correct configuration is applied to each project within the monorepo.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/monorepo-project.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbootstrap: cp qodana-frontend.yaml qodana.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring taint analysis in Qodana documentation\nDESCRIPTION: Provides guidance on how to enable and configure taint analysis, an advanced security feature that tracks data flow and detects vulnerabilities. The specific settings are detailed in an external markdown include.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-yaml.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Configuring a Custom Qodana Profile with Groups and Inspection Overrides in YAML\nDESCRIPTION: This YAML file defines a custom Qodana inspection profile, starting from the 'empty' profile and including additional profiles by path. It demonstrates how to group related inspections by categories and group IDs, include or override specific inspections, set severity levels, and adjust configuration options for individual inspections. The key parameters include 'baseProfile' to inherit from existing profiles, 'include' to merge other profiles, 'groups' for user-defined logical grouping, and 'inspections' to enable or configure both groups and specific inspections. The expected input is a properly structured YAML profile; output is a Qodana inspection configuration recognized by Qodana tools. This setup requires Qodana tooling version 2023.2 or higher and access to referenced profiles; limitations include only supporting options and structures recognized by Qodana.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/custom-profiles.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nname: \"My custom profile\" # Profile name\n\nbaseProfile: empty # Use the 'empty' profile as initial configuration of this profile\n\ninclude:\n  - \".qodana/profiles/other-profile.yaml\" # The included file becomes part of this profile\n\ngroups: # List of configured groups\n  - groupId: InspectionsToInclude\n    groups:\n      - \"category:PHP/General\" # Inspection category from the linter\n      - \"JSCategories\" # Include the JSCategories group from below\n      - \"PHPInspections\" # Include the PHPInspections group from below\n  - groupId: JSCategories\n    groups:\n      - \"category:JavaScript and TypeScript/ES2015 migration aids\"\n  - groupId: PHPInspections \n    inspections: #  Inspection IDs\n      - PhpDeprecationInspection \n      - PhpReturnDocTypeMismatchInspection\n      \ninspections: # Group invocation\n  - group: InspectionsToInclude\n    enabled: true # Enable the InspectionsToInclude group\n  - inspection: PhpNonCompoundUseInspection\n    severity: WARNING # Overriding the severity level for PhpNonCompoundUseInspection\n  - inspection: MissortedModifiers\n    options:\n      m_requireAnnotationsFirst: false # Overriding the configuration option\n```\n\n----------------------------------------\n\nTITLE: Overriding Inspection Severity in Qodana Profiles Using YAML\nDESCRIPTION: This snippet illustrates configuring a specific inspection's severity level individually within a Qodana YAML profile. It sets the severity of the inspection \"JavadocReference\" to \"WARNING\" overriding any default or group-based severity. Prerequisites include knowledge of inspection IDs and Qodana YAML syntax. Input includes the inspection identifier and desired severity, while output is a profile that overrides severity for a targeted inspection.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/custom-profiles.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"My custom profile\"\n            \ninspections:  \n  - inspection: JavadocReference\n    severity: WARNING\n```\n\n----------------------------------------\n\nTITLE: Referencing a Custom Profile in qodana.yaml\nDESCRIPTION: Specifies the relative path to the custom profile YAML configuration file within the main `qodana.yaml`. The `profile.path` property tells Qodana where to find the custom profile definitions created in the separate YAML file.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/override-a-profile.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nprofile:\n   path: <relative-path-to-yaml-config-file>\n```\n\n----------------------------------------\n\nTITLE: Include PhpVulnerablePathsInspection in qodana.yaml\nDESCRIPTION: This YAML code snippet demonstrates how to include the `PhpVulnerablePathsInspection` in the `qodana.yaml` file to enable taint analysis. This configuration tells Qodana to run the specified inspection during code analysis to identify potential vulnerabilities related to tainted data.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/taint-analysis.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\ninclude:\n    - name: PhpVulnerablePathsInspection\n```\n\n----------------------------------------\n\nTITLE: Run Qodana CLI Native Mode with IDE Specify (Shell)\nDESCRIPTION: This shell command executes the Qodana CLI `scan` command in native mode. The `--ide QDNET` option explicitly tells the CLI to use the JetBrains IDE binary for Qodana for .NET (QDNET) for the analysis, ensuring the correct linter is utilized.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-dotnet.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nqodana scan \\\n   --ide QDNET\n```\n\n----------------------------------------\n\nTITLE: Run Qodana Analysis via Docker Private NuGet (Shell)\nDESCRIPTION: This shell command runs the Qodana for .NET linter via Docker, including configuration for accessing private NuGet feeds. It mounts the project, sets the cloud token, and provides environment variables for the NuGet feed URL, username, password, and name, allowing the container to authenticate and resolve dependencies.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-dotnet.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run \\\n   -v <source-directory>/:/data/project/ \\\n   -e QODANA_TOKEN=\"<cloud-project-token>\" \\\n   -e QODANA_NUGET_URL=<private-NuGet-feed-URL> \\\n   -e QODANA_NUGET_USER=<login> \\\n   -e QODANA_NUGET_PASSWORD=<plaintext-password> \\\n   -e QODANA_NUGET_NAME=<name-of-private-NuGet-feed> \\\n   %docker-image% \\\n   --show-report\n```\n\n----------------------------------------\n\nTITLE: Enable ESLint in Qodana - YAML\nDESCRIPTION: This YAML snippet enables ESLint in Qodana by including the `Eslint` inspection profile.  This integrates ESLint's rules and checks into Qodana's static analysis process.  ESLint is a widely used linter for JavaScript projects.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-js.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\ninclude:\n    - name: Eslint\n```\n\n----------------------------------------\n\nTITLE: Setting PHP Version for Qodana PHP Linter - YAML\nDESCRIPTION: Demonstrates configuring the PHP version for Qodana's PHP linter by specifying the version number under the 'php' key. This influences the analysis environment to match the specified PHP language level.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-yaml.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nphp:\n  version: \"X.x\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions for JavaScript/Jest Code Coverage (YAML)\nDESCRIPTION: Defines a GitHub Actions workflow for a JavaScript project using Jest. The workflow checks out code, sets up Node.js, installs dependencies, runs tests (which generate coverage data), archives the coverage data to `.qodana/code-coverage`, and finally runs the Qodana scan using the JetBrains/qodana-action, providing the Qodana token via secrets. The Qodana action automatically picks up coverage data from the standard path.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/code-coverage.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: JavaScript - Jest Test\n\non:\n  workflow_dispatch:\n  pull_request:\n  push:\n    branches:\n      - main\n      - 'releases/*'\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout Code\n      uses: actions/checkout@v3\n      with:\n        ref: ${{ github.event.pull_request.head.sha }}\n        fetch-depth: 0\n\n    - name: Use Node.js 18.x\n      uses: actions/setup-node@v2\n      with:\n        node-version: 18.x\n\n    - name: Install dependencies\n      run: npm ci\n      working-directory: JS/jest\n\n    - name: Run tests\n      run: npm test\n      working-directory: JS/jest\n      \n    - name: Archive coverage data # Archive data for using by Qodana\n      uses: actions/upload-artifact@v2\n      with:\n        name: jest-coverage-data\n        path: JS/jest/.qodana/code-coverage\n\n    - name: Qodana Scan # Run Qodana\n      uses: JetBrains/qodana-action@main\n      env:\n        QODANA_TOKEN: ${{ secrets.QODANA_TOKEN_JS }}\n      with:\n        args: \"-i,JS/jest,--linter,jetbrains/qodana-js:2023.3\"\n        pr-mode: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Qodana for .NET Code Coverage (qodana.yaml)\nDESCRIPTION: Provides a `qodana.yaml` configuration example specifically for .NET projects analyzed by Qodana for .NET. It specifies the solution file under the `dotnet` key. The `bootstrap` script defines commands to run before the analysis: it builds the solution, navigates to the test project directory, adds the `coverlet.msbuild` package for code coverage, and runs `dotnet test` configured to collect coverage (`/p:CollectCoverage=true`), outputting the results in LCOV format (`/p:CoverletOutputFormat=lcov`) to the standard Qodana coverage directory (`<your-project-folder>/.qodana/code-coverage`).\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/code-coverage.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndotnet:\n  solution: <your-solution-file>\n\nbootstrap: dotnet build, cd <path-to-dir-with-test-project-file> && \\\n  dotnet add package coverlet.msbuild && \\\n  ((dotnet test /p:CollectCoverage=true /p:CoverletOutput=<your-project-folder>/.qodana/code-coverage /p:CoverletOutputFormat=lcov))\n```\n\n----------------------------------------\n\nTITLE: Using Qodana CLI with Project Token - Shell\nDESCRIPTION: This snippet demonstrates how to run a Qodana scan command using the QODANA_TOKEN environment variable to pass the project token for identification and verification on Qodana Cloud. The 'qodana scan' command requires the token to authenticate, ensuring that the user has valid licenses for paid linters. The token enables secure communication between the local instance and the cloud platform.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/project-token.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqodana scan \\\n   -e QODANA_TOKEN=\"<qodana-cloud-token>\"\n```\n\n----------------------------------------\n\nTITLE: Running Qodana with Custom Profile File using CLI\nDESCRIPTION: CLI command for running Qodana with a custom profile file. Mounts the custom profile file and specifies which profile name to use from the file.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/inspection-profiles.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nqodana scan \\\n   -v <path-to-profile-file>/<file-name>:/data/project/.idea/inspectionProfiles/<file-name> \\\n   -e QODANA_TOKEN=\"<cloud-project-token>\" \\\n   --profile-name <profile-name-from-file>\n```\n\n----------------------------------------\n\nTITLE: Configuring project file path in qodana.yaml\nDESCRIPTION: This snippet configures the relative path to a project file within the `qodana.yaml` file. If the project does not have any solution file but it has several project files, this configuration lets the linter know which project file should be used to perform the analysis.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-dotnet-community.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndotnet:\n  project: MyProject.csproj\n```\n\n----------------------------------------\n\nTITLE: Properties Object with Sanity Results in SARIF Format\nDESCRIPTION: Representation of the properties object containing extra inspection results for sanity-checking project configuration. Contains the same format as regular result objects but in the qodana.sanity.results property.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-sarif-output.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"properties\": {\n    \"qodana.sanity.results\": [\n      {\n        \"ruleId\": \"JavaAnnotator\",\n        \"kind\": \"fail\",\n        \"level\": \"error\",\n        \"message\": {\n          \"text\": \"Variable 'points' might not have been initialized\",\n          \"markdown\": \"Variable 'points' might not have been initialized\"\n        },\n        \"locations\": [\n          {\n            \"physicalLocation\": {\n              \"artifactLocation\": {\n                \"uri\": \"core/src/main/java/com/google/zxing/datamatrix/detector/Detector.java\",\n                \"uriBaseId\": \"SRCROOT\"\n              },\n              \"region\": {\n                \"startLine\": 52,\n                \"startColumn\": 41,\n                \"charOffset\": 1772,\n                \"charLength\": 6,\n                \"snippet\": {\n                  \"text\": \"points\"\n                },\n                \"sourceLanguage\": \"JAVA\"\n              },\n              \"contextRegion\": {\n                \"startLine\": 50,\n                \"startColumn\": 1,\n                \"charOffset\": 1670,\n                \"charLength\": 180,\n                \"snippet\": {\n                  \"text\": \"    ResultPoint[] cornerPoints = rectangleDetector.detect();\\n\\n    ResultPoint[] points = detectSolid2(points);\\n    points[3] = correctTopRight(points);\\n    if (points[3] == null) {\"\n                }\n              }\n            },\n            \"logicalLocations\": [\n              {\n                \"fullyQualifiedName\": \"core\",\n                \"kind\": \"module\"\n              }\n            ]\n          }\n        ],\n        \"partialFingerprints\": {\n          \"equalIndicator/v1\": \"2bf8eae4ff0d22f23008fe342fb1cfc67aa4f6db9b276e16ba621c77e3fda618\"\n        },\n        \"properties\": {\n          \"ideaSeverity\": \"ERROR\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Qodana Code Coverage with Docker (Shell)\nDESCRIPTION: Executes a Qodana linter within a Docker container, mounting the current project directory and a directory containing code coverage reports. It requires mapping the coverage report directory to `/data/coverage` inside the container and setting the Qodana Cloud project token via the `QODANA_TOKEN` environment variable.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/code-coverage.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run \\\n    -v $(pwd):/data/project/ \\\n    -v /directory/with/coverage/report/:/data/coverage \\\n    -e QODANA_TOKEN=\"<qodana-cloud-token>\" \\\n    jetbrains/qodana-<linter>\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab CI/CD for Qodana Code Coverage (YAML)\nDESCRIPTION: Defines a GitLab CI/CD job named 'qodana' that runs a specified Qodana linter using its Docker image. It configures caching for Qodana, sets the Qodana token from a GitLab CI/CD variable (`$qodana_token`), and executes the `qodana` command. The script explicitly specifies the results directory (`--results-dir`) and the coverage directory (`--coverage-dir`) where test reports are expected, and defines artifacts to expose the Qodana report.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/code-coverage.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nqodana:\n   image:\n      name: jetbrains/qodana-<linter>\n      entrypoint: [\"\"]\n   cache:\n      - key: qodana-2023.3-$CI_DEFAULT_BRANCH-$CI_COMMIT_REF_SLUG\n        fallback_keys:\n           - qodana-2023.3-$CI_DEFAULT_BRANCH-\n           - qodana-2023.3-\n        paths:\n           - .qodana/cache\n   variables:\n      QODANA_TOKEN: $qodana_token           -\n   script:\n      - qodana --save-report \n      --results-dir=$CI_PROJECT_DIR/.qodana/results \n      --coverage-dir=$CI_PROJECT_DIR/coverage\n   artifacts:\n      paths:\n         - .qodana/results/report\n      expose_as: 'Qodana report'\n```\n\n----------------------------------------\n\nTITLE: Enable Vulnerable Libraries Inspection Qodana YAML\nDESCRIPTION: This YAML snippet shows how to enable the `VulnerableLibrariesGlobal` inspection within the `qodana.yaml` configuration file. Including this entry in the `include` list tells Qodana to run this specific check during code analysis, identifying known vulnerabilities in project dependencies. This feature requires the Qodana linter and the Ultimate Plus license.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/vulnerability-checker.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ninclude:\n  - name: VulnerableLibrariesGlobal\n\n```\n\n----------------------------------------\n\nTITLE: Configure Solution Configuration using qodana.yaml\nDESCRIPTION: This configuration within the `qodana.yaml` file specifies which build configuration should be used when the linter builds the solution.  It allows the user to select between existing solution configurations such as `Debug` or `Release`.  This ensures the correct build is used for the static analysis.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-dotnet-community.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndotnet:\n  configuration: Release\n```\n\n----------------------------------------\n\nTITLE: Running Qodana with Custom Profile Path using CLI\nDESCRIPTION: CLI command that specifies a custom path for the profile file. Mounts the profile file to a custom location and tells Qodana where to find it using the profile-path parameter.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/inspection-profiles.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nqodana scan \\\n   -v <path-to-profile-file>/<file-name>:/data/project/myprofiles/<file-name> \\\n   -e QODANA_TOKEN=\"<cloud-project-token>\" \\\n   --profile-path /data/project/myprofiles/<file-name>\n```\n\n----------------------------------------\n\nTITLE: Disabling Sanity Checks in Qodana Configuration - YAML\nDESCRIPTION: Explains how to disable the default sanity inspections in Qodana by setting 'disableSanityInspections' to true in the YAML configuration. This can be used to bypass built-in sanity validations if necessary.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-yaml.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndisableSanityInspections: true\n```\n\n----------------------------------------\n\nTITLE: Enable PhpVulnerablePathsInspection in qodana.yaml\nDESCRIPTION: This YAML code snippet provides an alternative way to enable the `PhpVulnerablePathsInspection` in the `qodana.yaml` file. It explicitly enables the inspection within the `inspections` section of the file, achieving the same result as including it in the `include` section.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/taint-analysis.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\ninspections:\n    - inspection: PhpVulnerablePathsInspection\n      enabled: true\n```\n\n----------------------------------------\n\nTITLE: Running Qodana Analysis Locally using Docker Image - Shell\nDESCRIPTION: Performs Qodana analysis by running the specified Docker linter image directly. It mounts the project directory as a volume inside the container and passes the `QODANA_TOKEN` as an environment variable, allowing the linter to access the codebase and connect to Qodana Cloud if required.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/inspect-python-code.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run \\\n   -v <source-directory>/:/data/project/ \\\n   -e QODANA_TOKEN=\"<cloud-project-token>\" \\\n   %docker-image%\n```\n\n----------------------------------------\n\nTITLE: Configure Bootstrap for .NET SDK Installation (YAML)\nDESCRIPTION: This YAML snippet shows how to use the `bootstrap` field in `qodana.yaml` to install a specific .NET SDK version required by the project. It downloads the `dotnet-install.sh` script and executes it using the project's `global.json` to determine the SDK version and the specified installation directory.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-dotnet.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nbootstrap: curl -fsSL https://dot.net/v1/dotnet-install.sh |\n  bash -s -- --jsonfile /data/project/global.json -i /usr/share/dotnet\n```\n\n----------------------------------------\n\nTITLE: Running Qodana with Recommended Profile using CLI\nDESCRIPTION: Command for running Qodana using the CLI tool with the qodana.recommended profile instead of the default starter profile. Sets the cloud project token for analysis.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/inspection-profiles.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nqodana scan \\\n   -e QODANA_TOKEN=\"<cloud-project-token>\" \\\n   -profile-name qodana.recommended\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Pip using Qodana Bootstrap - YAML\nDESCRIPTION: Configures Qodana's `bootstrap` option to execute `pip install -r requirements.txt`. This ensures that project dependencies specified in `requirements.txt` are installed within the analysis environment before the linter runs, which is necessary for accurate dependency-aware analysis.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/inspect-python-code.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nbootstrap: |\n  pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Qodana Baseline in Bitbucket Pipelines Using YAML\nDESCRIPTION: This snippet illustrates how to configure a pipeline step to specify a baseline SARIF file for Qodana analysis using the --baseline option. It requires setting the Qodana Docker image and environment variables, as well as defining paths for analysis results and reports.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/bitbucket.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nimage: atlassian/default-image:4\n\npipelines:\n  branches:\n    main:\n      - step:\n          name: Qodana\n          caches:\n            - qodana\n          image: jetbrains/qodana-<linter> # Specify a Qodana linter here. For example, jetbrains/qodana-jvm:latest\n          script:\n            - export QODANA_TOKEN=$QODANA_TOKEN  # Export the environment variable\n            - qodana --baseline <path/to/qodana.sarif.json> --results-dir=$BITBUCKET_CLONE_DIR/.qodana --report-dir=$BITBUCKET_CLONE_DIR/.qodana/report --cache-dir=$BITBUCKET_CLONE_DIR/.qodana/cache\n          artifacts:\n            - .qodana/report\n\ndefinitions:\n  caches:\n    qodana: .qodana/cache\n```\n\n----------------------------------------\n\nTITLE: Running the bootstrap shell script within a Docker container\nDESCRIPTION: This code snippet shows how to execute the previously created `prepare-qodana.sh` script in a Docker container using the `bootstrap` option. It ensures that the environment setup commands run in an isolated container session to prepare the project for static analysis.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/before-running-qodana.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nbootstrap: sh ./prepare-qodana.sh\n```\n\n----------------------------------------\n\nTITLE: Creating a shell script for project environment setup\nDESCRIPTION: This shell script template demonstrates how to automate project setup steps, such as installing dependencies for PHP and JavaScript projects. Save this script as `prepare-qodana.sh` in your project root and execute it during bootstrap, facilitating a consistent environment for static analysis.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/before-running-qodana.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n#! /bin/sh\n# Example bootstrap steps, see https://jetbrains.com/help/qodana/before-running-qodana.html\nset -eu\n\n# For PHP projects that use Laravel:\n#composer require --dev barryvdh/laravel-ide-helper\n\n# For JavaScript projects that use Node.js:\n#npm install\n```\n\n----------------------------------------\n\nTITLE: Calculating Code Coverage for Functions with Qodana (JavaScript)\nDESCRIPTION: This JavaScript function demonstrates how Qodana's code coverage calculation analyzes only the executable logic (i.e., statement and return lines) rather than function declarations. Lines with essential logic, such as calculations or exports, are counted in code coverage metrics, while boilerplate elements like function headers are ignored. This sample does not require dependencies but should be placed in a project configured for code coverage reporting (e.g., with Jest, and in Qodana JS linters). The function takes two parameters and returns their quotient, which is exportable via module.exports for testing and coverage purposes.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/code-coverage.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction divide(a, b) { // Not analyzed by the code coverage\n  return a / b; // Analyzed by the code coverage\n}\nmodule.exports = divide; // Analyzed by the code coverage\n```\n\n----------------------------------------\n\nTITLE: Configuring a Code Quality Job Using JetBrains Qodana Orb in CircleCI YAML\nDESCRIPTION: Defines a job named 'code-quality' that runs on an Ubuntu 20.04 machine executor. It checks out the project repository then invokes the 'qodana/scan' orb command to perform static code analysis using Qodana's default parameters. This job can be integrated in workflows to enable automated code inspection as part of the CI/CD pipeline.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/circleci.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nversion: '2.1'\norbs:\n  qodana: jetbrains/qodana@2023.3\njobs:\n  code-quality:\n    machine:\n      image: 'ubuntu-2004:current'\n    steps:\n      - checkout\n      - qodana/scan\nworkflows:\n  main:\n    jobs:\n      - code-quality:\n          context: qodana\n```\n\n----------------------------------------\n\nTITLE: Basic Qodana Configuration for Space Automation\nDESCRIPTION: A basic configuration script for running Qodana in JetBrains Space Automation jobs. Uses a Docker container and requires a project token for paid linters stored as a secret.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/space-automation.md#_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\njob(\"Qodana\") {\n    container(\"jetbrains/qodana-<linter>\") {\n        env[\"QODANA_TOKEN\"] = Secrets(\"qodana-token\")\n        shellScript {\n            content = \"\"\"\n               qodana\n               \"\"\".trimIndent()\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Qodana Inspection Options Using XML\nDESCRIPTION: This XML snippet shows how to configure detailed inspection options for the MissingOverrideAnnotation inspection in Qodana. It enables the inspection at INFORMATION level and sets specific options such as ignoring object methods and anonymous class methods with boolean values. The snippet requires knowledge of Qodana inspection tool XML syntax. Inputs are option names and values; output is an inspection tool configuration enabling customized behavior.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/custom-profiles.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<inspection_tool class=\"MissingOverrideAnnotation\" enabled=\"true\" level=\"INFORMATION\" enabled_by_default=\"true\">\n    <option name=\"ignoreObjectMethods\" value=\"true\" />\n    <option name=\"ignoreAnonymousClassMethods\" value=\"false\" />\n</inspection_tool>\n```\n\n----------------------------------------\n\nTITLE: Including custom dependencies in Qodana YAML configuration\nDESCRIPTION: Specifies dependencies that cannot be detected automatically from project sources, allowing inclusion in license reports. This is useful for special configurations or external schemas, with details like name, version description, and licenses.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-yaml.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ncustomDependencies:\n  - name: \".babelrc JSON Schema (.babelrc-schema.json)\"\n    version: \"JSON schema for Babel 6+ configuration files\"\n    licenses:\n      - key: \"Apache-2.0\"\n        url: \"https://github.com/SchemaStore/schemastore/blob/master/LICENSE\"\n```\n\n----------------------------------------\n\nTITLE: Region Object in SARIF Format\nDESCRIPTION: Representation of the region object that pinpoints a specific area of code. It contains line and column numbers, character measurements, the actual code snippet, and source language for highlighting.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-sarif-output.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"region\": {\n    \"startLine\": 72,\n    \"startColumn\": 23,\n    \"charOffset\": 1852,\n    \"charLength\": 11,\n    \"snippet\": {\n      \"text\": \"options.php\"\n    },\n    \"sourceLanguage\": \"HTML\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring vulnerability checker inspection in Qodana\nDESCRIPTION: Involves enabling the `VulnerableLibrariesGlobal` inspection to activate vulnerability checking in project analysis. This setup enhances security scans by focusing on known vulnerable libraries, with detailed configuration in associated markdown documentation.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-yaml.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: AutomationDetails Object in SARIF Format\nDESCRIPTION: Representation of the automationDetails object that contains identification information for the analysis run, including unique IDs and additional properties like CI/CD build URL.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-sarif-output.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"automationDetails\": {\n    \"id\": \"project/qodana/2022-09-12\",\n    \"guid\": \"bc9770e3-0cf4-4e46-a8fd-455e5bf116a2\",\n    \"properties\": {\n      \"jobUrl\": \"https://build.example.org/job/12345678\",\n      \"tags\": [\n        \"jobUrl\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Specific Branches and Merge Requests in GitLab CI/CD\nDESCRIPTION: Configuration for running Qodana only on the main branch and merge requests. Uses the 'only' keyword to specify which branches to inspect.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/gitlab.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nqodana:\n   only:\n      - main\n      - merge_requests\n   image:\n      name: jetbrains/qodana-<linter>\n      entrypoint: [\"\"]\n   cache:\n      - key: qodana-2023.3-$CI_DEFAULT_BRANCH-$CI_COMMIT_REF_SLUG\n        fallback_keys:\n           - qodana-2023.3-$CI_DEFAULT_BRANCH-\n           - qodana-2023.3-\n        paths:\n           - .qodana/cache\n   variables:\n      QODANA_TOKEN: $qodana_token\n   script:\n      - qodana --results-dir=$CI_PROJECT_DIR/.qodana/results --cache-dir=$CI_PROJECT_DIR/.qodana/cache\n```\n\n----------------------------------------\n\nTITLE: Data Validation Example in PHP\nDESCRIPTION: This PHP code snippet demonstrates data validation using the `filter_var()` function with the `FILTER_VALIDATE_EMAIL` filter. It takes user input from the `$_GET` array, assigns it to the `$email` variable, and then checks if the input is a valid email address. If the input is a valid email address, it is echoed to the output.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/taint-analysis.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n    $email = $_GET['email'];\n    if (filter_var($email, FILTER_VALIDATE_EMAIL)) {\n      echo $email;\n    }\n    \n```\n\n----------------------------------------\n\nTITLE: Configuring Profile Name in YAML\nDESCRIPTION: Sets the inspection profile name in the qodana.yaml configuration file. This lets you specify which profile Qodana should use for analysis.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/inspection-profiles.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nprofile:\n    name: <name>\n```\n\n----------------------------------------\n\nTITLE: Running Qodana with Custom Profile File using Docker\nDESCRIPTION: Docker command for running Qodana with a custom profile file. Mounts both the project directory and the custom profile file, then specifies which profile name to use from the file.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/inspection-profiles.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker run \\\n   -v $(pwd):/data/project/ \\\n   -v <path-to-profile-file>/<file-name>:/data/project/.idea/inspectionProfiles/<file-name> \\\n   -e QODANA_TOKEN=\"<cloud-project-token>\" \\\n   jetbrains/qodana-<linter> \\\n   --profile-name <profile-name-from-file>\n```\n\n----------------------------------------\n\nTITLE: Importing JetBrains Qodana Orb in CircleCI YAML Configuration\nDESCRIPTION: Imports the JetBrains Qodana orb into the CircleCI pipeline configuration under the 'orbs' stanza. The orb version specified ('2023.3') controls which version of Qodana and its associated commands are used. This orb provides pre-defined jobs and commands necessary to perform code quality scanning through Qodana within CircleCI.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/circleci.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\norbs: \n    qodana: jetbrains/qodana@2023.3\n```\n\n----------------------------------------\n\nTITLE: Run Qodana Analysis via Docker Basic (Shell)\nDESCRIPTION: This shell command runs the Qodana for .NET linter within a Docker container. It mounts the project source directory, sets the `QODANA_TOKEN` environment variable for Qodana Cloud integration, and executes the analysis command within the container, displaying the report upon completion.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-dotnet.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run \\\n   -v <source-directory>/:/data/project/ \\\n   -e QODANA_TOKEN=\"<cloud-project-token>\" \\\n   %docker-image% \\\n   --show-report\n```\n\n----------------------------------------\n\nTITLE: Branch-Specific Qodana Inspection with Code Review Integration\nDESCRIPTION: Configuration that triggers Qodana analysis on specific branch pushes and code review events. Uses the startOn block with gitPush and codeReviewOpened triggers to control when the job runs.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/space-automation.md#_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\njob(\"Qodana\") {\n   startOn {\n      gitPush {\n         branchFilter {\n            +\"refs/heads/feature\"\n         }\n      }\n      codeReviewOpened{}\n   }\n   container(\"jetbrains/qodana-<linter>\") {\n       env[\"QODANA_TOKEN\"] = Secrets(\"qodana-token\")\n       shellScript {\n           content = \"\"\"\n               qodana\n               \"\"\".trimIndent()\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Qodana Cloud Upload in Azure Pipelines - YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the QodanaScan task in Azure Pipelines to upload scan results to Qodana Cloud. It requires defining the QODANA_TOKEN as a secret variable in the Azure Pipelines UI and including it in the env section of the QodanaScan task for secure authentication. Inputs: a valid project token set as QODANA_TOKEN; outputs: job results uploaded to the linked Qodana Cloud project. Prerequisites include a configured Qodana Azure Pipelines extension, secret variables setup, and Docker-installed agents. Limitations: Only QodanaScan tasks with the QODANA_TOKEN will report to Qodana Cloud.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-azure-pipelines.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n  - task: QodanaScan@2023\n    env:\n      QODANA_TOKEN: $(QODANA_TOKEN)\n```\n\n----------------------------------------\n\nTITLE: Exposing Qodana Reports in GitLab Merge Requests\nDESCRIPTION: Configuration that makes Qodana reports available in merge requests without using Qodana Cloud. Uses artifacts and expose_as keywords to display the report in the GitLab interface.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/gitlab.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nqodana:\n   image:\n      name: jetbrains/qodana-<linter>\n      entrypoint: [\"\"]\n   cache:\n      - key: qodana-2023.3-$CI_DEFAULT_BRANCH-$CI_COMMIT_REF_SLUG\n        fallback_keys:\n           - qodana-2023.3-$CI_DEFAULT_BRANCH-\n           - qodana-2023.3-\n        paths:\n           - .qodana/cache\n   variables:\n      QODANA_TOKEN: $qodana_token           - \n   script:\n      - qodana --save-report --results-dir=$CI_PROJECT_DIR/.qodana/results\n         --cache-dir=$CI_PROJECT_DIR/.qodana/cache\n   artifacts:\n      paths:\n         - qodana/results/\n      expose_as: 'Qodana report'\n```\n\n----------------------------------------\n\nTITLE: Disable Roslyn Analyzers via Custom Profile (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to create a custom inspection profile in `qodana.yaml` to disable a specific group of inspections, such as 'C#/Roslyn Analyzers'. It defines a group targeting the desired category and then explicitly disables that group in the `inspections` section.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-dotnet.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nname: \"Custom profile\"\n\nbaseProfile: qodana.starter\n\ngroups: # List of configured groups\n  - groupId: InspectionsToExclude\n    groups:\n      - \"category:C#/Roslyn Analyzers\"\n\ninspections: # Group invocation\n  - group: InspectionsToExclude\n    enabled: false # Disable the InspectionsToExclude group\n```\n\n----------------------------------------\n\nTITLE: Serving Qodana HTML Report Using Dockerized Nginx\nDESCRIPTION: This command runs a Dockerized version of nginx to serve the Qodana HTML report. It mounts the current directory to the nginx html directory and maps port 8000 to nginx's default port 80.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/html-report.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm -p 8000:80 \\\n  -v $(pwd):/usr/share/nginx/html nginx\n```\n\n----------------------------------------\n\nTITLE: Including Additional Inspections in Qodana Analysis Scope - YAML\nDESCRIPTION: Illustrates how to specify inspections to be included in the analysis that are not present in the selected profile. The 'include' section lets you explicitly add inspections for certain paths, even when the profile itself has no active inspections. This enables targeted checking within directories for specific inspection IDs.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-yaml.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nprofile:\n  name: empty\ninclude:\n  - name: SomeInspectionId\n    paths:\n    - tools\n```\n\n----------------------------------------\n\nTITLE: Running Bootstrap Commands in Qodana YAML Configuration - YAML\nDESCRIPTION: Demonstrates usage of the 'bootstrap' option in the qodana.yaml configuration to run custom commands before inspections. It supports running shell commands such as installing packages with apt or executing scripts from the project directory. This allows pre-inspection environment preparation within the Qodana container.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-yaml.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbootstrap: apt install <package_name>\n```\n\nLANGUAGE: yaml\nCODE:\n```\nbootstrap: sh ./prepare-qodana.sh\n```\n\n----------------------------------------\n\nTITLE: Specifying configuration option\nDESCRIPTION: This shell command utilizes the `--configuration` option to specify the solution configuration for the linter to use when building and analyzing the project.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-dotnet-community.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n--configuration=Release\n```\n\n----------------------------------------\n\nTITLE: Copying YAML File in YAML\nDESCRIPTION: This snippet configures Qodana to copy a project-specific configuration file (`qodana-backend.yaml` or `qodana-frontend.yaml`) to the root folder (`qodana.yaml`) before running the inspection. This is achieved using the `bootstrap` option within a `qodana.yaml` file to enable the copying operation using the `cp` command.  This approach ensures the correct configuration is applied to each project within the monorepo.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/monorepo-project.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbootstrap: cp qodana-backend.yaml qodana.yaml\n```\n\n----------------------------------------\n\nTITLE: Ignoring Specific Paths During Qodana Analysis (YAML)\nDESCRIPTION: Updates the custom Qodana profile YAML to exclude the `vendor` directory from analysis within the 'JavaScript and TypeScript' inspection group. The `ignore` block takes a list of glob patterns; here, `vendor/**` excludes the vendor directory and all its contents.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/override-a-profile.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"Configuring Qodana\"\nbaseProfile: qodana.recommended\n\ninspections:\n   - group: \"category:JavaScript and TypeScript\"\n     enabled: true\n     ignore:\n       - \"vendor/**\" # Ignore the vendor directory\n   - inspection: PhpDeprecationInspection\n     enabled: false\n```\n\n----------------------------------------\n\nTITLE: Specifying CircleCI Version in YAML Configuration\nDESCRIPTION: Defines the CircleCI version for the pipeline configuration. This snippet is a prerequisite to ensure compatibility with the CircleCI features used in the Qodana orb integration. The version parameter must be declared as '2.1' or higher to support orbs and advanced pipeline definitions.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/circleci.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nversion: 2.1\n```\n\n----------------------------------------\n\nTITLE: Overriding Qodana Inspection Options in YAML Profiles\nDESCRIPTION: This YAML snippet demonstrates how to override inspection options for the MissingOverrideAnnotation inspection within a Qodana profile. It sets two boolean configuration options: ignoreObjectMethods and ignoreAnonymousClassMethods, changing their values from the XML defaults. It requires the base profile and inspection options awareness. Inputs include option keys and new values, and output is a customized YAML profile that adjusts inspection behaviors based on provided options.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/custom-profiles.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"My custom profile\" # Profile name\n\nbaseProfile: qodana.recommended\n\ninspections:\n  - inspection: MissingOverrideAnnotation\n    options:\n      ignoreObjectMethods: false\n      ignoreAnonymousClassMethods: true\n```\n\n----------------------------------------\n\nTITLE: Configuring bootstrap commands in qodana.yaml for project setup\nDESCRIPTION: This YAML code snippet shows how to specify bootstrap commands within the qodana.yaml configuration file to prepare the project environment before inspections. It includes shell commands for installing dependencies in PHP and JavaScript projects and demonstrates how to embed multiple commands using the multiline syntax.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/before-running-qodana.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nbootstrap: |+\n  set -eu\n  # For PHP projects that use Laravel:\n  #composer require --dev barryvdh/laravel-ide-helper\n\n  # For JavaScript projects that use Node.js:\n  #npm install\n```\n\n----------------------------------------\n\nTITLE: Assigning a Unique Group Identifier in Qodana YAML Groups\nDESCRIPTION: This snippet illustrates how to assign a 'groupId' to a group in the 'groups' section of a Qodana YAML profile. The 'groupId' must be unique within the profile and serves as a reference for enabling, including, or overriding groups elsewhere. There are no dependencies other than proper YAML formatting; the key parameter is 'groupId', which should be a distinguishable string. The input is the group declaration in YAML; the output is a logical grouping reference point within the profile. Limitation: redefining an existing 'groupId' will replace the previous group's settings.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/custom-profiles.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\n  - groupId: IncludedInspections\n```\n\n----------------------------------------\n\nTITLE: Listing Included Inspections in a Qodana YAML Group\nDESCRIPTION: This YAML fragment shows how to list inspection IDs inside a group's 'inspections' key in a Qodana profile. Each entry defines an inspection to be part of the group for selective enabling, disabling, or option adjustment. There are no external dependencies, but the listed IDs must match available inspection IDs recognized by Qodana. Input is an array of inspection names; output is group composition for further configuration. Constraint: only recognized inspections are effective; unrecognized IDs are ignored.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/custom-profiles.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\ninspections:\n    - RedundantIf\n    - UnnecessaryLocalVariable\n```\n\n----------------------------------------\n\nTITLE: Excluding a Specific Inspection in Qodana Profile (YAML)\nDESCRIPTION: Modifies the custom Qodana profile YAML file to disable a specific inspection, `PhpDeprecationInspection`. This is achieved by adding an entry under the `inspections` block that targets the specific inspection by name (`inspection: PhpDeprecationInspection`) and sets its `enabled` status to `false`.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/override-a-profile.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"Configuring Qodana\"\nbaseProfile: qodana.recommended\n\ninspections:\n   - group: \"category:JavaScript and TypeScript\"\n     enabled: true\n   - inspection: PhpDeprecationInspection # Specify an inspection\n     enabled: false # Disable the inspection\n```\n\n----------------------------------------\n\nTITLE: Specifying the Profile Name in Qodana YAML Profile\nDESCRIPTION: This simple snippet assigns an arbitrary, user-visible name to a Qodana inspection profile via the 'name' key. The name value is a string that identifies the profile in Qodana or JetBrains IDE interfaces. No dependencies are required other than a valid YAML context; expected input is any user-provided string, and the output is the profile being recognized with the given name in UI elements. The constraint is that 'name' should be a string and unique among other profiles for ease of identification.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/custom-profiles.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nname: \"Name of your profile\"\n```\n\n----------------------------------------\n\nTITLE: Serving Qodana HTML Report Using Python 3 Built-in Server\nDESCRIPTION: This command uses Python 3's http.server module to create a local web server in the current directory, making the HTML report accessible via http://localhost:8000.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/html-report.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m http.server\n```\n\n----------------------------------------\n\nTITLE: Docker Image References for Qodana Linters\nDESCRIPTION: A collection of Docker image references for various Qodana linters. These images can be used to run code analysis for different programming languages like Java, Kotlin, PHP, JavaScript, Python, and others. Each reference includes the base image name and version tag.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/linters.md#_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\njetbrains/qodana-jvm:2023.3\n```\n\nLANGUAGE: docker\nCODE:\n```\njetbrains/qodana-jvm-community:2023.3\n```\n\nLANGUAGE: docker\nCODE:\n```\njetbrains/qodana-jvm-android:2023.3\n```\n\nLANGUAGE: docker\nCODE:\n```\njetbrains/qodana-php:2023.3\n```\n\nLANGUAGE: docker\nCODE:\n```\njetbrains/qodana-js:2023.3\n```\n\nLANGUAGE: docker\nCODE:\n```\njetbrains/qodana-dotnet:2023.3\n```\n\nLANGUAGE: docker\nCODE:\n```\njetbrains/qodana-cdnet:2023.3\n```\n\nLANGUAGE: docker\nCODE:\n```\njetbrains/qodana-python:2023.3\n```\n\nLANGUAGE: docker\nCODE:\n```\njetbrains/qodana-python-community:2023.3\n```\n\nLANGUAGE: docker\nCODE:\n```\njetbrains/qodana-go:2023.3\n```\n\n----------------------------------------\n\nTITLE: Running Qodana with Recommended Profile using Docker\nDESCRIPTION: Command for running Qodana using Docker with the qodana.recommended profile instead of the default starter profile. Mounts the current directory and sets the cloud project token.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/inspection-profiles.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker run \\\n   -v $(pwd):/data/project/ \\\n   -e QODANA_TOKEN=\"<cloud-project-token>\" \\\n   jetbrains/qodana-<linter> \\\n   --profile-name qodana.recommended\n```\n\n----------------------------------------\n\nTITLE: Pull Qodana for .NET Docker Image (Shell)\nDESCRIPTION: This shell command uses the standard `docker pull` command to download the latest version of the official JetBrains Qodana for .NET Docker image from Docker Hub. Pulling the image ensures you have the necessary environment to run the Dockerized analysis.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-dotnet.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ndocker pull %docker-image%\n```\n\n----------------------------------------\n\nTITLE: Illustrating the `driver` Object for QDPHP Linter in Qodana SARIF JSON\nDESCRIPTION: This JSON example demonstrates the `driver` object within the `tool` section of a Qodana SARIF report, specifically for the Qodana for PHP (QDPHP) linter. It includes the linter's name, full name, version, and `taxa` (categories) like 'PHP' and 'EditorConfig', defining the scope and hierarchy of inspections. The `rules` array is empty in this specific example but typically lists inspection descriptors.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-sarif-output.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"driver\": {\n    \"name\": \"QDPHP\",\n    \"fullName\": \"Qodana for PHP\",\n    \"version\": \"222.4190.104\",\n    \"rules\": [],\n    \"taxa\": [\n      {\n        \"id\": \"EditorConfig\",\n        \"name\": \"EditorConfig\"\n      },\n      {\n        \"id\": \"PHP\",\n        \"name\": \"PHP\"\n      },\n      {\n        \"id\": \"PHP/Php Inspections (EA Extended)\",\n        \"name\": \"Php Inspections (EA Extended)\",\n        \"relationships\": [\n          {\n            \"target\": {\n              \"id\": \"PHP\",\n              \"index\": 1,\n              \"toolComponent\": {\n                \"name\": \"QDPHP\"\n              }\n            },\n            \"kinds\": [\n              \"superset\"\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Qodana Invocations Object in JSON\nDESCRIPTION: A JSON example of the invocations array containing execution status information including exit code, notifications, and execution success status. This structure reports whether Qodana ran successfully and any execution notifications.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-sarif-output.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"invocations\": [\n    {\n      \"exitCode\": 0,\n      \"toolExecutionNotifications\": [\n        {\n          \"message\": {\n            \"text\": \"Reporting from [\\\"Java annotator\\\"] 'sanity' inspections was suspended due to high problems count.\"\n          },\n          \"level\": \"error\"\n        }\n      ],\n      \"executionSuccessful\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Qodana Linter Docker Image - Shell\nDESCRIPTION: Pulls the latest version of the specified Qodana Docker linter image from Docker Hub. This ensures that the local machine has the necessary container image available for running the analysis.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/inspect-python-code.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ndocker pull %docker-image%\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Key Pair for Qodana Cloud (Shell)\nDESCRIPTION: Generates a 4096-bit RSA SSH key pair without a passphrase, specifically for Qodana Cloud contributor counting during the onboarding process. The public key is intended to be added to the VCS.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/contributors.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nssh-keygen -t rsa -b 4096 -N \"\" -f id_rsa -C \"qodana.cloud\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Contributors with Qodana CLI (Shell)\nDESCRIPTION: Uses the Qodana CLI tool to calculate the number of unique contributors based on Git history within the specified number of days (90 in this example). This allows users to manually verify the count.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/contributors.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nqodana contributors -d 90\n```\n\n----------------------------------------\n\nTITLE: Managing plugins in Qodana YAML configuration\nDESCRIPTION: Specifies plugins to be downloaded and used during code inspection by their Plugin ID. Includes instructions for plugin installation, cache location, and optional third-party software setup required for plugin functionality.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-yaml.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  - id: <plugin.id>\n```\n\n----------------------------------------\n\nTITLE: Running Qodana Scan with CLI for Backend\nDESCRIPTION: This shell script demonstrates how to run Qodana CLI on the `backend` project within a monorepo. It uses the `qodana scan` command, specifying the `QODANA_TOKEN` environment variable (representing the project token from Qodana Cloud) and the `--source-directory` option to target the `backend` folder. This command triggers the static analysis process, producing inspection reports based on the project's code quality.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/monorepo-project.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nqodana scan \\\n&nbsp;&nbsp;-e QODANA_TOKEN=\"<cloud-project-token-for-backend-project>\" \\\n&nbsp;&nbsp;--source-directory backend\n```\n\n----------------------------------------\n\nTITLE: Configuring Qodana Native Mode Using qodana.yaml in YAML\nDESCRIPTION: This YAML snippet sets up the Qodana native mode by specifying the 'ide: QDNET' property within the 'qodana.yaml' configuration file. This configuration directs Qodana to use the native .NET inspection environment instead of Docker. Once configured, the scan can be initiated by running 'qodana scan' in the shell. Prerequisites include ensuring a proper .NET SDK installation and having Qodana CLI available on the system.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/native-mode.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nide: QDNET\n```\n\n----------------------------------------\n\nTITLE: Running Qodana with Docker for Backend\nDESCRIPTION: This shell script shows how to run Qodana within a Docker container on the `backend` project of a monorepo.  It uses the `docker run` command with the `-v` flag to mount the current working directory to `/data/project/` inside the container, enabling access to the project files.  The `-e` flag sets the `QODANA_TOKEN` environment variable, providing the cloud project token.  The image `jetbrains/qodana-jvm:latest` is specified to run the analysis on the backend project, and the `--source-directory` option is used to specify the project folder.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/monorepo-project.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker run \\\n&nbsp;&nbsp;-v \"$PWD\":/data/project/ \\\n&nbsp;&nbsp;-e QODANA_TOKEN=\"<cloud-project-token-for-backend-project>\" \\\n&nbsp;&nbsp;jetbrains/qodana-jvm:latest \\\n&nbsp;&nbsp;--source-directory backend\n```\n\n----------------------------------------\n\nTITLE: Running Qodana with Docker for Frontend\nDESCRIPTION: This shell script provides an example of running Qodana within a Docker container on the `frontend` project within a monorepo. It utilizes the `docker run` command to mount the current directory to `/data/project/`, making the project files accessible inside the container. The `QODANA_TOKEN` environment variable is set to authenticate with Qodana Cloud. The `jetbrains/qodana-js:latest` image is specified for JavaScript-based analysis, and `--source-directory frontend` points to the project folder.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/monorepo-project.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker run \\\n&nbsp;&nbsp;-v \"$PWD\":/data/project/ \\\n&nbsp;&nbsp;-e QODANA_TOKEN=\"<cloud-project-token-for-frontend-project>\" \\\n&nbsp;&nbsp;jetbrains/qodana-js:latest \\\n&nbsp;&nbsp;--source-directory frontend\n```\n\n----------------------------------------\n\nTITLE: Run Qodana CLI Native Mode via Config (Shell)\nDESCRIPTION: This shell command executes the Qodana CLI `scan` command in native mode without explicitly specifying the IDE on the command line. It relies on the `ide: QDNET` configuration being present in the project's `qodana.yaml` file to determine which linter to use.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-dotnet.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nqodana scan\n```\n\n----------------------------------------\n\nTITLE: Executing Qodana in Shell script (Shell)\nDESCRIPTION: This snippet shows the shell script command to execute Qodana. It can include options for fail threshold and baseline.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/jenkins.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nqodana \\\n--fail-threshold <number> \\\n--baseline <path/to/qodana.sarif.json>\n```\n\n----------------------------------------\n\nTITLE: Running Qodana with Custom Profile Path using Docker\nDESCRIPTION: Docker command that specifies a custom path for the profile file. Mounts both the project directory and the profile file to a custom location, then tells Qodana where to find it.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/inspection-profiles.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndocker run \\\n   -v $(pwd):/data/project/ \\\n   -v <path-to-profile-file>/<file-name>:/data/project/myprofiles/<file-name> \\\n   -e QODANA_TOKEN=\"<cloud-project-token>\" \\\n   jetbrains/qodana-<linter> \\\n   --profile-path /data/project/myprofiles/<file-name>\n```\n\n----------------------------------------\n\nTITLE: Running Qodana Scan with Specific Linter Using args Parameter in CircleCI YAML\nDESCRIPTION: Demonstrates how to pass additional CLI arguments to the Qodana scan command to customize the scan behavior, specifically specifying a particular linter such as 'jetbrains/qodana-jvm'. The 'args' parameter supports multiple arguments separated by spaces. This allows tailoring the static analysis to specific technologies or project requirements.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/circleci.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nversion: 2.1\norbs:\n  qodana: jetbrains/qodana@2023.3\njobs:\n  code-quality:\n    machine:\n      image: 'ubuntu-2004:current'\n    steps:\n      - checkout\n      - qodana/scan:\n          args: -l jetbrains/qodana-jvm # use space to separate arguments\nworkflows:\n  main:\n    jobs:\n      - code-quality:\n          context: qodana\n```\n\n----------------------------------------\n\nTITLE: Inspecting Specific Branches in Jenkins Pipeline with Qodana (Groovy)\nDESCRIPTION: This code snippet extends the basic Jenkins Pipeline configuration to inspect only specific branches, such as the `feature` branch, using the `when` block. It allows for conditional execution of the Qodana analysis based on the current branch.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/jenkins.md#_snippet_1\n\nLANGUAGE: Groovy\nCODE:\n```\npipeline {\n    environment {\n        QODANA_TOKEN=credentials('qodana-token')\n    }\n   agent {\n      docker {\n         args '''\n              -v \"${WORKSPACE}\":/data/project\n              --entrypoint=\"\"\n              '''\n         image 'jetbrains/qodana-<linter>'\n      }\n   }\n   stages {\n      stage('Qodana') {\n         when {\n            branch 'feature'\n         }\n         steps {\n            sh '''qodana'''\n         }\n      }\n   }    \n}\n```\n\n----------------------------------------\n\nTITLE: Serving Qodana HTML Report Using PHP Built-in Server\nDESCRIPTION: This command starts PHP's built-in web server to serve the current directory on localhost:8000, allowing the HTML report to be viewed in a browser.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/html-report.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nphp -S localhost:8000\n```\n\n----------------------------------------\n\nTITLE: Enabling JavaScript/TypeScript Inspections in Qodana Profile (YAML)\nDESCRIPTION: Updates the custom Qodana profile YAML file to enable the 'JavaScript and TypeScript' inspection category. The `inspections` block is used to target the specific category group and set its `enabled` status to `true`.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/override-a-profile.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"Configuring Qodana\" \nbaseProfile: qodana.recommended\n\ninspections:\n   - group: \"category:JavaScript and TypeScript\" # Specify the inspection category\n     enabled: true # Enable the JavaScript and TypeScript category\n```\n\n----------------------------------------\n\nTITLE: Defining Inspection Groups in Qodana YAML Profile\nDESCRIPTION: This YAML snippet demonstrates how to declare a user-defined group under the 'groups' section of a Qodana profile, combining inspection categories and specific inspections. The group is assigned a unique 'groupId', can include inspection categories by name, and lists individual inspections to be included in the group. No special dependencies are required; the main parameters are 'groupId', 'groups' for category/group inclusion, and 'inspections' for individual inspection IDs. Input is a structured 'groups' YAML node; output is custom inspection grouping for flexible enabling/disabling in the profile.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/custom-profiles.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\ngroups:\n  - groupId: EnabledInspections\n    groups:\n      - \"category:Java/Probable bugs\"\n    inspections:\n      - RedundantIf\n```\n\n----------------------------------------\n\nTITLE: Filtering Qodana Inspections by Severity Level Using YAML\nDESCRIPTION: This YAML snippet demonstrates how to create a custom inspection profile that includes all inspections filtered by a severity level, specifically \"WEAK WARNING\". It defines a group of inspections under Java category that match the severity filter and enables them in the profile. Dependencies include Qodana inspection infrastructure and support for YAML profile definitions. The input is severity level filters and inspection categories, while the output is an enabled profile that only includes inspections matching those filters.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/custom-profiles.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"My custom profile\"  \ngroups:\n  - groupId: IncludedInspections\n    groups:\n      - \"category:Java\"\n      - \"severity:WEAK WARNING\"\n            \ninspections:  \n  - group: IncludedInspections\n    enabled: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Profile Path in YAML\nDESCRIPTION: Specifies the relative path to a custom profile file in the qodana.yaml configuration. This is used when working with custom profiles stored in your project.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/inspection-profiles.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nprofile:\n    path: relative/path/in/your/project.xml\n```\n\n----------------------------------------\n\nTITLE: Opening Local Qodana Report\nDESCRIPTION: This snippet describes the procedure for opening a local SARIF-formatted Qodana report in a JetBrains IDE.  It involves navigating to the 'Tools | Qodana | Open Local Report' menu, selecting the report file, and viewing the results in the Server-Side Analysis tool window. No specific code is involved, only UI navigation steps.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-ide-plugin.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Specifying Project with --project option\nDESCRIPTION: This shell command utilizes the `--project` option to specify the exact project file for analysis when a project file is used without a solution file. The relative path to the project file from the repository root must be provided.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-dotnet-community.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n--project=MyProject.csproj\n```\n\n----------------------------------------\n\nTITLE: Initializing a Custom Qodana Profile in YAML\nDESCRIPTION: Creates a basic YAML configuration file for a custom Qodana profile. It sets the profile name to 'Configuring Qodana' and specifies that it inherits settings from the default `qodana.recommended` profile. This file is intended to be referenced later in the main `qodana.yaml`.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/override-a-profile.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"Configuring Qodana\" # Paste the name of your profile\nbaseProfile: qodana.recommended # Override qodana.recommended\n```\n\n----------------------------------------\n\nTITLE: Applying Qodana Plugin - Groovy\nDESCRIPTION: This Groovy code snippet demonstrates how to apply the Qodana Gradle plugin within the `build.gradle` configuration file. It adds the necessary plugin declaration to enable Qodana functionality for the project. The `version` attribute specifies the plugin version.  Ensure you replace `<plugin-version>` with an actual version number.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana_gradle_plugin.md#_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n    id \"org.jetbrains.qodana\" version \"<plugin-version>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Qodana Native Mode Scan Using Qodana CLI in Shell\nDESCRIPTION: This shell snippet runs Qodana in native mode for .NET by invoking the Qodana CLI with the '--ide QDNET' option. It triggers the download of the required JetBrains IDE binary and starts the scan in the local environment, bypassing Docker. If the 'ide: QDNET' setting is already specified in the qodana.yaml file, the simpler 'qodana scan' command can be used instead. Dependencies include having Qodana CLI installed and a suitable .NET SDK environment configured.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/native-mode.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqodana scan \\\n   --ide QDNET\n```\n\nLANGUAGE: shell\nCODE:\n```\nqodana scan\n```\n\n----------------------------------------\n\nTITLE: Configuring Qodana Sanity Profile in YAML\nDESCRIPTION: Sets the Qodana inspection profile to `qodana.sanity` in the `qodana.yaml` configuration file. This profile is intended for basic checks on the overall project structure and configuration health.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/cloud-configure-for-os-projects.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nprofile:\n    name: qodana.sanity\n```\n\n----------------------------------------\n\nTITLE: Enabling License Audit Inspection in Qodana YAML - YAML\nDESCRIPTION: Shows enabling the license audit feature in Qodana by including the 'CheckDependencyLicenses' inspection explicitly. This activates checks related to dependency licenses during analysis.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-yaml.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ninclude:\n  - name: CheckDependencyLicenses\n```\n\n----------------------------------------\n\nTITLE: Mounting JDK to Qodana Docker Image\nDESCRIPTION: This shell command demonstrates how to mount a JDK from the local filesystem into the Qodana Docker image.  The command uses the `docker run` command with the `-v` flag to create a volume mount. The source path `/path/to/jdk` should be replaced with the actual path to your JDK installation, while `/root/.jdks/jdk` is the destination path within the Docker container where the JDK will be accessible.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/configure-jdk.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ docker run -v /path/to/jdk:/root/.jdks/jdk \\\njetbrains/qodana-<linter>\n```\n\n----------------------------------------\n\nTITLE: PhysicalLocation Object in SARIF Format\nDESCRIPTION: Representation of the physicalLocation object in SARIF format that contains information about the artifact location, region of code, and context surrounding the issue. Used for precise issue identification.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-sarif-output.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"physicalLocation\": {\n    \"artifactLocation\": {\n      \"uri\": \"asm-util/src/main/java/org/objectweb/asm/util/CheckSignatureAdapter.java\",\n      \"uriBaseId\": \"SRCROOT\"\n    },\n    \"region\": {\n      \"startLine\": 259,\n      \"startColumn\": 14,\n      \"charLength\": 17,\n      \"snippet\": {\n        \"text\": \"visitTypeVariable\"\n      },\n      \"sourceLanguage\": \"JAVA\"\n    },\n    \"contextRegion\": {\n      \"startLine\": 257,\n      \"startColumn\": 1,\n      \"charOffset\": 9764,\n      \"charLength\": 152,\n      \"snippet\": {\n        \"text\": \"\\n  @Override\\n  public void visitTypeVariable(final String name) {\\n    visitTypeVariable(name);\\n    if (type != TYPE_SIGNATURE || state != State.EMPTY) {\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Qodana HTML Report Using Python 2 Built-in Server\nDESCRIPTION: This command utilizes Python 2's SimpleHTTPServer module to create a local web server in the current directory, making the HTML report accessible via http://localhost:8000.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/html-report.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython2 -m SimpleHTTPServer\n```\n\n----------------------------------------\n\nTITLE: Overriding a dependency license in Qodana YAML configuration\nDESCRIPTION: Customizes the license identifiers for a specific dependency, specifying its name, version, URL, and redefined licenses. Useful when dependencies are dual-licensed or detection is unreliable, ensuring accurate license recognition for compliance.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-yaml.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ndependencyOverrides:\n  - name: \"jaxb-runtime\"\n    version: \"2.3.1\"\n    url: \"https://github.com/javaee/jaxb-v2\"\n    licenses:\n      - key: \"CDDL-1.1\"\n        url: \"https://github.com/javaee/jaxb-v2/blob/master/LICENSE\"\n      - key: \"GPL-2.0-with-classpath-exception\"\n        url: \"https://github.com/javaee/jaxb-v2/blob/master/LICENSE\"\n```\n\n----------------------------------------\n\nTITLE: Running Qodana Gradle Task\nDESCRIPTION: This shell command is used to execute the `qodanaScan` Gradle task after applying the plugin and configuring it in your Gradle project. The command will trigger Qodana code analysis, utilizing the configured settings. Ensure that Gradle is installed and the project is set up correctly. It presents two ways to run the task: using `gradle` or `./gradlew`\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana_gradle_plugin.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngradle qodanaScan \n// or\n./gradlew qodanaScan\n```\n\n----------------------------------------\n\nTITLE: Overriding License Compatibility Matrix in Qodana YAML configuration\nDESCRIPTION: Defines license rules to allow or prohibit certain licenses for project and dependency licenses within Qodana. This snippet specifies which licenses are permitted or disallowed, influencing license compliance checks during analysis. Dependencies include license keys and restrictions, generally used in project license validation.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-yaml.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nlicenseRules:\n  - keys:\n      - \"PROPRIETARY-LICENSE\"\n      - \"MIT\"\n    prohibited:\n      - \"BSD-3-CLAUSE-NO-CHANGE\"\n    allowed:\n      - \"ISC\"\n\n  - keys: [ \"Apache-2.0\" ]\n    prohibited:\n      - \"MIT\"\n```\n\n----------------------------------------\n\nTITLE: NewlineSequences Array in SARIF Format\nDESCRIPTION: Representation of the newlineSequences array that specifies the character sequences treated as line breaks during a run, which may be platform-dependent.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-sarif-output.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"newlineSequences\": [\n    \"\\r\\n\",\n    \"\\n\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Specific Dependency in License Audit Report - YAML\nDESCRIPTION: Demonstrates how to exclude a specific dependency from Qodana license audits using the 'dependencyIgnores' section. Dependencies listed here will have their license issues hidden and will not appear in reports, useful for internal or trusted libraries.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-yaml.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndependencyIgnores:\n  - name: \"enry\"\n```\n\n----------------------------------------\n\nTITLE: Extracting Git Commit History (Shell)\nDESCRIPTION: Retrieves contributor information (email, name, commit hash, date) from all branches for commits made within the last 90 days. Qodana Cloud uses this data to identify unique contributors.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/contributors.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit log --all --since '90 days ago' --pretty=format:%ae||%an||%H||%ai\n```\n\n----------------------------------------\n\nTITLE: Examining Qodana Results Object in JSON\nDESCRIPTION: This JSON snippet demonstrates the structure of the results array that contains detected problems. Each result includes the rule ID, problem severity, description message, location, fingerprints for baseline comparison, and additional properties with IDE severity level.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-sarif-output.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    {\n      \"ruleId\": \"InfiniteRecursion\",\n      \"kind\": \"fail\",\n      \"level\": \"warning\",\n      \"message\": {\n        \"text\": \"Method <code>visitTypeVariable()</code> recurses infinitely, and can only end by throwing an exception\"\n      },\n      \"locations\": [\n        \"...\"\n      ],\n      \"partialFingerprints\": {\n        \"equalIndicator/v1\": \"ac5714b0b15b7e8c4311899afd1c2b44069865039f2a9d309dcab04eddd4681d\"\n      },\n      \"baselineState\": \"unchanged\",\n      \"properties\": {\n        \"ideaSeverity\": \"WARNING\",\n        \"tags\": [\n          \"ideaSeverity\"\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Top-Level Structure of a Qodana SARIF Report in JSON\nDESCRIPTION: This JSON snippet illustrates the basic layout of a Qodana SARIF v2.1.0 report file. It highlights the root object containing `version` and a `runs` array, which holds the detailed analysis results, tool information, invocation details, and custom properties for a single Qodana execution.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-sarif-output.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"2.1.0\",\n  \"runs\": [\n    {\n      \"tool\": {...},\n      \"invocations\": [...],\n      \"language\": \"en-US\",\n      \"versionControlProvenance\": [...],\n      \"results\": [...],\n      \"automationDetails\": {...},\n      \"newlineSequences\": [...],\n      \"properties\": {...}\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring the `tool` Object in Qodana SARIF Reports using JSON\nDESCRIPTION: This JSON snippet outlines the structure of the `tool` object within a Qodana SARIF report. It contains the `driver` object (detailing the specific Qodana linter used) and the `extensions` array (listing loaded plugins and their associated inspection rules).\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-sarif-output.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tool\": {\n    \"driver\": {...},\n    \"extensions\": [...]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Location Object Structure in SARIF Format\nDESCRIPTION: Full representation of a location object in SARIF format that describes a concrete physical location in a file with a logical location. Contains both physicalLocation and logicalLocations components.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-sarif-output.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"physicalLocation\": {\n    \"artifactLocation\": {\n      \"uri\": \"asm-util/src/main/java/org/objectweb/asm/util/CheckSignatureAdapter.java\",\n      \"uriBaseId\": \"SRCROOT\"\n    },\n    \"region\": {\n      \"startLine\": 259,\n      \"startColumn\": 14,\n      \"charLength\": 17,\n      \"snippet\": {\n        \"text\": \"visitTypeVariable\"\n      },\n      \"sourceLanguage\": \"JAVA\"\n    },\n    \"contextRegion\": {\n      \"startLine\": 257,\n      \"startColumn\": 1,\n      \"charOffset\": 9764,\n      \"charLength\": 152,\n      \"snippet\": {\n        \"text\": \"\\n  @Override\\n  public void visitTypeVariable(final String name) {\\n    visitTypeVariable(name);\\n    if (type != TYPE_SIGNATURE || state != State.EMPTY) {\"\n      }\n    }\n  },\n  \"logicalLocations\": [\n    {\n      \"fullyQualifiedName\": \"root.asm-util.main\",\n      \"kind\": \"module\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: LogicalLocations Object in SARIF Format\nDESCRIPTION: Representation of the logicalLocations object that provides module information about where the issue was found, using the module name from the project build system.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-sarif-output.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"logicalLocations\": [\n    {\n      \"fullyQualifiedName\": \"root.asm-util.main\",\n      \"kind\": \"module\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Understanding Qodana versionControlProvenance Structure in JSON\nDESCRIPTION: This JSON snippet shows the versionControlProvenance array which contains details about the project's version control system. It includes repository URI, revision ID, branch information, and additional properties about the repository and last commit author.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/qodana-sarif-output.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"versionControlProvenance\": [\n    {\n      \"repositoryUri\": \"https://github.com/example/example.git\",\n      \"revisionId\": \"6c034f977505b058c7cf764b3d9b1abd068a725e\",\n      \"branch\": \"master\",\n      \"properties\": {\n        \"repoUrl\": \"https://github.com/example/example.git\",\n        \"lastAuthorName\": \"Jane Doe\",\n        \"vcsType\": \"Git\",\n        \"lastAuthorEmail\": \"mail@example.com\",\n        \"tags\": [\n          \"repoUrl\",\n          \"lastAuthorEmail\",\n          \"lastAuthorName\",\n          \"vcsType\"\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Data Sanitization Example in PHP\nDESCRIPTION: This PHP code snippet demonstrates data sanitization using the `strip_tags()` function. It takes user input from the `$_GET` array, assigns it to the `$taint` variable, and then removes HTML tags from the input to prevent cross-site scripting (XSS) vulnerabilities. The sanitized input is then stored back in the `$taint` variable.\nSOURCE: https://github.com/jetbrains/qodana/blob/2023.3/topics/taint-analysis.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n    $taint = $_GET['some_key'];\n    $taint = strip_tags($taint);\n   \n```"
  }
]