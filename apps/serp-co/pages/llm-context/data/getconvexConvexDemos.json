[
  {
    "owner": "get-convex",
    "repo": "convex-demos",
    "content": "TITLE: Using a Convex mutation function in a React component\nDESCRIPTION: This snippet demonstrates how to use the mutation function in a React component with the useMutation hook. It shows both fire-and-forget usage and handling the returned result with a promise.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/typescript/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Relational Schema in Convex using TypeScript\nDESCRIPTION: This code snippet defines a schema for a multi-channel message app using Convex. It creates two tables: 'channels' with a name field, and 'messages' with author, body, and a reference to the channel. The schema demonstrates how to create associations between tables in Convex.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/relational-data-modeling/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineSchema, defineTable } from \"convex/server\";\nimport { v } from \"convex/values\";\n\nexport default defineSchema({\n  channels: defineTable({\n    name: v.string(),\n  }),\n  messages: defineTable({\n    author: v.string(),\n    body: v.string(),\n    channel: v.id(\"channels\"),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Convex Mutation Function in TypeScript\nDESCRIPTION: This snippet illustrates the creation of a Convex mutation function. It includes argument validation, database insertion, and optional return value. The function demonstrates how to modify the database within a mutation.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/search/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Mutation Function in Convex\nDESCRIPTION: This snippet shows how to define a mutation function that can insert or modify database documents. It demonstrates argument validation, database operations, and returning the result of the mutation.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/dall-e-storage-action/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query Function in Convex with TypeScript\nDESCRIPTION: Demonstrates how to create a query function in Convex that accepts number and string arguments. The function shows how to read data from the database using ctx.db.query and return documents after processing.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/sessions/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Mutation Function\nDESCRIPTION: Example of a Convex mutation function that accepts string arguments and performs database write operations. Demonstrates argument validation and database insertion.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/zod-validation-ts/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mutation Function in Convex with TypeScript\nDESCRIPTION: A sample implementation of a Convex mutation function that accepts two string arguments. The function demonstrates how to insert data into the database and return the newly created document. It includes proper type validation using Convex's validation system.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/html/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing usePresence Hook for User Presence Tracking in Convex\nDESCRIPTION: Code snippet demonstrating how to initialize the usePresence hook with a room identifier, user name, and initial presence data containing the user's name and emoji. This hook is the core functionality for tracking user presence in the application.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/presence-facepile/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst [myPresence, othersPresence, updateMyPresence] = usePresence(\n  \"chat-room\",\n  name,\n  {\n    name,\n    emoji: initialEmoji,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Using Mutation Function in React Component (TypeScript)\nDESCRIPTION: This snippet illustrates how to use a Convex mutation function within a React component using the useMutation hook. It shows both fire-and-forget and promise-based approaches.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/react-query/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mutation Function in Convex\nDESCRIPTION: This example shows how to create a mutation function in Convex for modifying database data. It demonstrates parameter validation, inserting a document into a collection, and returning the newly created document.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/args-validation/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex\nDESCRIPTION: Demonstrates how to create a mutation function that accepts string arguments and modifies the database. Includes argument validation and database insertion capabilities.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/vector-search/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex\nDESCRIPTION: Illustrates the creation of a mutation function in Convex that takes two string arguments, inserts data into the database, and optionally returns the inserted data. It includes argument validation and database operations.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/users-and-clerk-webhooks/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Mutation Function in Convex (TypeScript)\nDESCRIPTION: Illustrates the creation of a mutation function in Convex. It includes argument validation, database insertion, and optional return value handling.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/react-native/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Mutation Function in Convex\nDESCRIPTION: This snippet demonstrates how to create a mutation function in Convex. It includes argument validation and database insertion. The function takes two string arguments and inserts a new message into the database.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/users-and-clerk/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex\nDESCRIPTION: Example of a Convex mutation function that handles data modifications, showing how to insert documents into the database and return the inserted data. Includes argument validation for string parameters.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/scheduling/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  handler: async (ctx, args) => {\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Mutation Function\nDESCRIPTION: Shows how to create a mutation function that accepts string arguments and modifies the database. Includes argument validation and demonstrates database insertion operations.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/tutorial/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Mutation Function in Convex\nDESCRIPTION: This example demonstrates creating a mutation function in Convex that modifies the database. It shows how to validate string arguments, insert data into a collection, and optionally return the created document.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/system-tables/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: This snippet shows how to consume a Convex query function in a React component using the useQuery hook. It demonstrates passing arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/relational-data-modeling/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Mutation Function in Convex with TypeScript\nDESCRIPTION: Example of creating a mutation function that accepts string arguments, writes data to the database, and returns the created record. Shows argument validation, database writing operations, and retrieving the inserted data.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/custom-errors/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mutation Function in Convex with TypeScript\nDESCRIPTION: This example demonstrates creating a mutation function that writes data to the Convex database. It includes argument validation, inserting a document, and returning the inserted data.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/relational-data-modeling/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex (TypeScript)\nDESCRIPTION: This snippet illustrates how to create a mutation function in Convex. It includes argument validation, database insertion, and optional result retrieval. The function inserts a message into the database and returns the inserted document.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/pagination/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mutation Function in Convex (TypeScript)\nDESCRIPTION: This snippet illustrates the creation of a mutation function in Convex. It includes argument validation, database insertion, and optional return value. The function inserts a message into the database and returns the inserted document.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/users-and-auth/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a mutation function in Convex that takes two arguments. It includes argument validation, database insertion, and optional return value.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/react-query/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: This snippet shows how to use the useMutation hook in a React component to call a Convex mutation function. It demonstrates both the fire-and-forget pattern and handling the result with a promise.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/system-tables/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex\nDESCRIPTION: Example of a Convex query function that accepts numeric and string arguments, demonstrating database querying and argument validation. The function shows how to read from the database and process the results.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/scheduling/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  handler: async (ctx, args) => {\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    console.log(args.first, args.second);\n\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Mutation Function in TypeScript\nDESCRIPTION: Demonstrates how to create a Convex mutation function that modifies the database. Shows argument validation and database insertion patterns.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/nextjs-app-router/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation Function in React\nDESCRIPTION: Demonstrates how to use a mutation function in a React component with the useMutation hook, including both fire-and-forget and promise-based approaches.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/http/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Mutation Function in TypeScript\nDESCRIPTION: Shows how to create a mutation function that writes data to the database. The example demonstrates argument validation and database operations with return values.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/http/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ConvexProvider with SessionProvider in React\nDESCRIPTION: Setup code showing how to wrap a React application with both ConvexProvider and SessionProvider components for session management\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/sessions/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ConvexProvider client={convex}>\n  <SessionProvider>\n    <App />\n  </SessionProvider>\n</ConvexProvider>\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation in React Component\nDESCRIPTION: Example demonstrating how to use a Convex mutation function in a React component using the useMutation hook. Shows both fire-and-forget and promise-based approaches.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/scheduling/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: This snippet demonstrates how to use the defined mutation function in a React component using the useMutation hook. It shows both fire-and-forget usage and handling the result with a Promise.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/dall-e-storage-action/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation in React Component\nDESCRIPTION: Example demonstrating how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/node/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation in React\nDESCRIPTION: Example of how to use a Convex mutation function within a React component using the useMutation hook, showing both fire-and-forget and promise-based patterns.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/zod-validation-ts/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Mutation Function in Convex\nDESCRIPTION: An example of creating a mutation function in Convex that takes two string arguments and inserts a document into the database. The function performs data validation, creates a new record, and returns the inserted data.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/nextjs-pages-router/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Convex query function in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a query function that accepts number and string arguments. It shows how to validate inputs, read from the database, and process the returned data. The function retrieves all documents from a specified table.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/typescript/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook. The example passes required arguments of number and string types to the query.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/sessions/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Mutation Function in React\nDESCRIPTION: Shows how to use a Convex mutation function within a React component using the useMutation hook, including both fire-and-forget and promise-based patterns.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/vector-search/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation Function in React\nDESCRIPTION: Demonstrates how to use a Convex mutation function within a React component using the useMutation hook. It shows both fire-and-forget usage and handling the mutation result with a promise.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/users-and-clerk-webhooks/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Mutation Function in React\nDESCRIPTION: Demonstrates how to use a Convex mutation function in a React component using the useMutation hook. Shows both fire-and-forget and promise-based usage patterns.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/file-storage/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query Function in Convex (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a query function in Convex. It includes argument validation, database querying, and data processing. The function takes two arguments and returns documents from a database table.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/users-and-auth/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation Function in React\nDESCRIPTION: Demonstrates how to use a Convex mutation function within a React component using the useMutation hook. It shows both fire-and-forget and promise-based usage patterns.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/presence-facepile/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Query Function in React (TypeScript)\nDESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook. It demonstrates passing arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/react-native/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use a Convex mutation function within a React component. It shows two patterns: fire-and-forget and handling the result with a promise.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/users-and-auth/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: This snippet shows how to use a Convex mutation function in a React component. It demonstrates two ways to call the mutation: fire-and-forget and handling the result with a promise.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/users-and-clerk/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation Functions in React\nDESCRIPTION: Example showing how to use a Convex mutation function in a React component with the useMutation hook. Demonstrates both fire-and-forget pattern and handling mutation results with promises.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/presence-typing-indicator/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex\nDESCRIPTION: Example of a Convex query function that takes numeric and string arguments. Shows how to validate arguments, query the database, and process results. Includes type validation and async database operations.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/file-storage/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React with TypeScript\nDESCRIPTION: Demonstrates how to use a Convex mutation function in a React component using the useMutation hook. Shows both fire-and-forget pattern and using the result with a promise chain.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/custom-errors/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query Function in Convex\nDESCRIPTION: This snippet demonstrates how to create a query function in Convex that takes two arguments (a number and a string), reads from the database, and returns documents. It shows the structure with argument validation and the handler implementation.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/python-quickstart/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: This snippet shows how to use a Convex mutation function in a React component using the useMutation hook. It demonstrates both fire-and-forget usage and handling the result with a promise.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/python-quickstart/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex\nDESCRIPTION: Demonstrates how to create a query function that accepts numeric and string arguments. The function includes argument validation and database querying capabilities.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/vector-search/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a query function in Convex. It includes argument validation, database querying, and result processing. The function takes two arguments and returns documents from a database table.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/pagination/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Convex mutation function in TypeScript\nDESCRIPTION: This snippet shows how to create a mutation function that modifies the database. It demonstrates validating string inputs, inserting data into a collection, and returning the created document.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/typescript/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query Functions in React\nDESCRIPTION: Example showing how to use a Convex query function in a React component using the useQuery hook. This snippet demonstrates how to pass arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/presence-typing-indicator/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex\nDESCRIPTION: Demonstrates how to create a query function in Convex that takes two arguments, reads from the database, and returns documents. It includes argument validation and logging.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/presence-facepile/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Query Function in TypeScript\nDESCRIPTION: Demonstrates how to create a query function that accepts number and string arguments. The function shows database querying and handling of client-provided arguments with proper validation.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/cron-jobs/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex\nDESCRIPTION: Demonstrates how to create a query function in Convex that takes two arguments, reads from the database, and returns documents. It includes argument validation and shows how to use the database context.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/users-and-clerk-webhooks/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex\nDESCRIPTION: Demonstrates creating a mutation function that modifies the database. Includes argument validation and shows how to insert data and return the modified record.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/clerk/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  handler: async (ctx, args) => {\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query in React Component\nDESCRIPTION: Shows how to use the query function within a React component using the useQuery hook with proper argument passing.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/clerk/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Query Function in TypeScript\nDESCRIPTION: Demonstrates how to create a query function that accepts number and string arguments. The function shows database querying capabilities and argument validation using Convex's built-in validators.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/http/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Query Function\nDESCRIPTION: Example of a query function that accepts numeric and string arguments. Shows how to define argument validators and implement a database query handler that returns documents.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/node/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Query Function in TypeScript\nDESCRIPTION: Demonstrates how to create a Convex query function that accepts numeric and string arguments. The function shows database querying patterns and argument validation using Convex's type system.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/nextjs-app-router/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query Function in Convex with TypeScript\nDESCRIPTION: A sample implementation of a Convex query function that accepts numeric and string arguments. The function demonstrates how to validate arguments, query the database, and process returned documents. It includes proper type validation using Convex's validation system.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/html/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: This snippet demonstrates how to use the defined query function in a React component using the useQuery hook. It shows how to pass arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/dall-e-storage-action/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: Example of how to consume a Convex query function within a React component using the useQuery hook. This snippet shows how to pass arguments to the query and access the returned data.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/html/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation in React\nDESCRIPTION: Demonstrates how to use a Convex mutation function in a React component using the useMutation hook. Shows both fire-and-forget and promise-based usage patterns.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/tutorial/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex\nDESCRIPTION: Example of a mutation function that writes data to the database. Shows proper argument validation and database operations with return value handling.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/file-storage-with-http/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  handler: async (ctx, args) => {\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Mutation Function in TypeScript\nDESCRIPTION: Example of a Convex mutation function that handles data modifications. Shows argument validation, database insertion, and return value handling.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/giphy-action/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: This snippet demonstrates how to use the useQuery hook to call a Convex query function from a React component. It shows how to pass the required arguments to the query function defined in the API.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/system-tables/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query in React Component\nDESCRIPTION: Example showing how to use a Convex query function within a React component using the useQuery hook.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/node/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex query function in a React component\nDESCRIPTION: This snippet shows how to use the previously defined query function in a React component with the useQuery hook. It demonstrates passing the required arguments to the function.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/typescript/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: Example of how to use a Convex mutation function within a React component using the useMutation hook. This snippet demonstrates both fire-and-forget and promise-based approaches to handling the mutation result.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/html/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query Function in Convex\nDESCRIPTION: This code demonstrates how to create a query function in Convex that takes two arguments, reads from the database, and returns documents. It includes parameter validation and database retrieval using ctx.db.query.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/args-validation/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Query Function in Convex with TypeScript\nDESCRIPTION: Example of creating a query function that accepts number and string arguments, reads data from the database, and returns documents. It demonstrates argument validation, database reading, and implementing the handler function.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/custom-errors/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query in React Component\nDESCRIPTION: Example showing how to use a Convex query function within a React component using the useQuery hook.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/giphy-action/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query in React Component\nDESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook with typed arguments.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/nextjs-app-router/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation in React Component\nDESCRIPTION: Example demonstrating how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/giphy-action/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Query Function in Convex\nDESCRIPTION: This example shows how to create a query function in Convex that accepts numeric and string arguments. The function connects to the database to retrieve documents from a table, and demonstrates argument validation using Convex's value validation system.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/system-tables/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Convex Query Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Convex query function with argument validation and database interaction. It shows the structure for defining args, handling the query, and returning results.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/search/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React (TypeScript)\nDESCRIPTION: This snippet shows how to use a Convex query function within a React component. It demonstrates the usage of the useQuery hook to fetch data from the server.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/users-and-auth/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: Shows how to use a Convex mutation function within a React component using the useMutation hook. The example demonstrates both fire-and-forget usage and handling the returned promise.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/sessions/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Functions in Convex\nDESCRIPTION: Example of a query function that takes two arguments, reads from the database, and returns documents. The function includes argument validation using Convex's validation system and demonstrates how to read data from the database.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/presence-typing-indicator/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: This snippet shows how to use a Convex query function within a React component using the useQuery hook. It demonstrates passing arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/search/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex with TypeScript\nDESCRIPTION: Example of a query function implementation that takes numeric and string arguments. Shows how to query the database and process the results with proper type validation.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/file-storage-with-http/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  handler: async (ctx, args) => {\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    console.log(args.first, args.second);\n\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Mutation Function\nDESCRIPTION: Example of a mutation function that accepts two string arguments and demonstrates how to insert data into the database and return the inserted record.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/node/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: This snippet shows how to use a Convex query function in a React component. It uses the useQuery hook to fetch data, passing the required arguments to the function.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/users-and-clerk/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Query Function in TypeScript\nDESCRIPTION: Example of a Convex query function that accepts numeric and string arguments. The function demonstrates argument validation, database querying, and data processing capabilities.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/giphy-action/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query in React Component\nDESCRIPTION: Example showing how to use a Convex query function within a React component using the useQuery hook. Demonstrates passing arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/scheduling/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React with TypeScript\nDESCRIPTION: Demonstrates how to use a Convex query function in a React component using the useQuery hook. Shows passing arguments to the query function in the expected format.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/custom-errors/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Query Function in Convex\nDESCRIPTION: An example of creating a query function in Convex that takes two arguments (a number and a string), queries the database for documents, and returns them. This includes argument validation and database access patterns.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/nextjs-pages-router/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Mutation Function in React (TypeScript)\nDESCRIPTION: Demonstrates how to use a Convex mutation function in a React component using the useMutation hook. It shows both fire-and-forget and promise-based usage patterns.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/react-native/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query in React\nDESCRIPTION: Example of how to use a Convex query function within a React component using the useQuery hook.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/zod-validation-ts/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Query Function in Convex\nDESCRIPTION: This snippet shows how to define a query function that accepts number and string arguments. It demonstrates argument validation, accessing the database through the context, and returning data to the client.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/dall-e-storage-action/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation in React Component\nDESCRIPTION: Shows how to use a Convex mutation function within a React component using the useMutation hook, including both fire-and-forget and promise-based patterns.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/nextjs-app-router/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Query Function in React\nDESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook. Demonstrates passing arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/file-storage/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Query Function\nDESCRIPTION: Example of a Convex query function that accepts numeric and string arguments and performs database operations. Shows argument validation and database querying patterns.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/zod-validation-ts/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: This snippet demonstrates how to use a Convex mutation function within a React component. It shows two approaches: fire-and-forget and handling the result with a promise. The useMutation hook is used to access the mutation function.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/search/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Processing User Presence Data to Determine Active Status\nDESCRIPTION: JavaScript code that maps through the othersPresence array to add an 'old' flag to each user based on their last update time. This determines which users are displayed as active or inactive in the FacePile component.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/presence-facepile/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nothersPresence.map((presence) => ({\n  ...presence,\n  old: presence.updated < now - OLD_MS,\n}));\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: Example of how to use a Convex query function in a React component using the useQuery hook. The query is called with two arguments corresponding to the function definition.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/nextjs-pages-router/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query Function in React\nDESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook. It demonstrates passing arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/users-and-clerk-webhooks/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query Function in React\nDESCRIPTION: Shows how to integrate a Convex query function within a React component using the useQuery hook with typed arguments.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/http/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing usePresence Hook for Typing Indicators in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the usePresence hook for tracking typing status in a chat room. It returns the user's presence, others' presence data, and a function to update presence status.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/presence-typing-indicator/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst [myPresence, othersPresence, updateMyPresence] = usePresence(\n  \"chat-room\",\n  name,\n  { typing: false },\n);\n```\n\n----------------------------------------\n\nTITLE: Using Query Function in React\nDESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/vector-search/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query Function in React\nDESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook. It demonstrates passing arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/presence-facepile/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: This snippet shows how to use a Convex query function in a React component using the useQuery hook. It demonstrates passing arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/python-quickstart/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Query Function in React Component\nDESCRIPTION: Example of how to consume a Convex query function within a React component using the useQuery hook.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/file-storage-with-http/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: This snippet demonstrates how to use a Convex mutation function in a React component with the useMutation hook. It shows both fire-and-forget usage and handling the returned result with promises.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/relational-data-modeling/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: Example of how to use a Convex query function within a React component using the useQuery hook. It shows passing arguments to the query function to fetch data from the database.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/args-validation/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation in React Component\nDESCRIPTION: Shows how to use the mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based approaches.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/clerk/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query Function in React\nDESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook with typed arguments.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/cron-jobs/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Mutation Function in React Component (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use a Convex mutation function in a React component. It shows two ways to call the mutation: fire-and-forget and handling the result with a promise.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/pagination/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Query Function in React Component (TypeScript)\nDESCRIPTION: This snippet shows how to use a Convex query function within a React component using the useQuery hook.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/react-query/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: Demonstrates how to use a Convex mutation function in a React component using the useMutation hook. Includes examples of both fire-and-forget invocation and handling the returned promise for result processing.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/nextjs-pages-router/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Query Function in React Component (TypeScript)\nDESCRIPTION: This snippet shows how to use a Convex query function in a React component. It demonstrates passing arguments to the query function using the useQuery hook.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/pagination/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query Function in Convex with TypeScript\nDESCRIPTION: This code snippet demonstrates how to define a query function in Convex that takes two arguments and reads from the database. It shows the structure with argument validation and async handler implementation.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/relational-data-modeling/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Convex HTTP Client with ESM\nDESCRIPTION: Example of setting up a Convex HTTP client using ES modules syntax to query messages.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/node/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ConvexHttpClient } from \"convex/browser\";\nimport { api } from \"./convex/_generated/api.js\";\n\nconst client = new ConvexHttpClient(CONVEX_URL_GOES_HERE);\nclient.query(api.messages.list).then(console.log);\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: Demonstrates how to use a Convex mutation function in a React component with the useMutation hook. Shows both fire-and-forget usage and handling the result with promises.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/args-validation/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 Environment Variables\nDESCRIPTION: Example environment variable configuration for Auth0 authentication in a .env file, specifying the domain and client ID needed for Auth0 integration.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/nextjs-pages-router/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_AUTH0_DOMAIN = \"<your domain>.us.auth0.com\"\nNEXT_PUBLIC_AUTH0_CLIENT_ID = \"<your client id>\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mutation Function in Convex with TypeScript\nDESCRIPTION: Demonstrates how to create a mutation function in Convex that accepts string arguments. The function shows how to insert data into the database using ctx.db.insert and return the newly created document.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/sessions/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create a query function in Convex that takes two arguments. It includes argument validation, database querying, and data processing.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/react-query/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Convex Site URL\nDESCRIPTION: Example of how to set up the VITE_CONVEX_SITE_URL environment variable in the .env.local file by modifying the domain from cloud to site.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/file-storage-with-http/README.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nVITE_CONVEX_URL=\"https://happy-animal-123.convex.cloud\"\nVITE_CONVEX_SITE_URL=\"https://happy-animal-123.convex.site\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Functions in Convex\nDESCRIPTION: Example of a mutation function that modifies data in the database. This function takes two string arguments, inserts a document into the 'messages' table, and returns the newly created document.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/presence-typing-indicator/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex\nDESCRIPTION: Illustrates the creation of a mutation function in Convex that takes two arguments, inserts data into the database, and optionally returns the inserted data. It includes argument validation.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/presence-facepile/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mutation Function in Convex\nDESCRIPTION: This snippet demonstrates how to create a mutation function in Convex that takes two string arguments, writes to the database by inserting a document, and returns the newly created document. It shows the structure with argument validation and the handler implementation.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/python-quickstart/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Mutation Function in React Component\nDESCRIPTION: Demonstrates how to use a Convex mutation function in a React component, including both fire-and-forget and promise-based result handling approaches.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/file-storage-with-http/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Convex HTTP Client with CommonJS\nDESCRIPTION: Example of setting up a Convex HTTP client using CommonJS require syntax.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/node/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ConvexHttpClient, ConvexClient } = require(\"convex/browser\");\nconst { api } = require(\"./convex/_generated/api_cjs.cjs\");\nconst httpClient = new ConvexHttpClient(CONVEX_URL_GOES_HERE);\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Mutation Function in TypeScript\nDESCRIPTION: Shows how to create a mutation function that accepts string arguments and performs database operations. Includes validation and optional return value handling.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/cron-jobs/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Typing Status with useEffect in React\nDESCRIPTION: This effect hook updates the user's typing status based on message text changes. It sets typing to true when text is entered and false after 1 second of inactivity or when the text is empty.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/presence-typing-indicator/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nuseEffect(() => {\n  if (newMessageText.length === 0) {\n    updateMyPresence({ typing: false });\n    return;\n  }\n  updateMyPresence({ typing: true });\n  const timer = setTimeout(() => updateMyPresence({ typing: false }), 1000);\n  return () => clearTimeout(timer);\n}, [updateMyPresence, newMessageText]);\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting Development Server for Convex Vector Search App\nDESCRIPTION: These commands install the necessary dependencies and start the development server for the Convex vector search example app. It uses npm for package management and running scripts.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/vector-search/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running Auth0 Authentication Setup for Convex Chat App\nDESCRIPTION: Instructions for setting up Auth0 authentication with Convex for the chat application. Users need to follow the provided link to configure Auth0 and update the client and server configurations.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/users-and-auth/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Running the App\n\nBecause this app uses authentication, it requires a bit of an additional setup.\n\nFollow these instructions https://docs.convex.dev/auth/auth0 to set up Auth0\nwith Convex. You will have to update the client in `main.tsx` and the server in\n`auth.config.js`.\n```\n\n----------------------------------------\n\nTITLE: Running the Development Environment\nDESCRIPTION: Commands for installing dependencies and starting the development server\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/sessions/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Dall-E Chat Application\nDESCRIPTION: Commands to install dependencies and start the development server for the Dall-E storage and action example app. After running these commands, you'll need to set up an OpenAI API key in the Convex dashboard before accessing the app at localhost:3000.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/dall-e-storage-action/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Defining a Query Function in Convex (TypeScript)\nDESCRIPTION: Demonstrates how to create a query function in Convex that takes two arguments. It shows the structure of a query function, including argument validation and database querying.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/react-native/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Session Query Hook in React Component\nDESCRIPTION: Implementation of useSessionQuery hook in a React component to execute queries with session context\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/sessions/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst messages = useSessionQuery(api.myModule.myQuery);\n...\n```\n\n----------------------------------------\n\nTITLE: Creating a Next.js TypeScript Project\nDESCRIPTION: Command to bootstrap a new Next.js project with TypeScript support using create-next-app.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/nextjs-pages-router/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest --ts\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation Function in React\nDESCRIPTION: Demonstrates how to use a Convex mutation function in a React component, including both fire-and-forget and promise-based result handling patterns.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/cron-jobs/convex/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Session Data in Convex Database\nDESCRIPTION: Example of updating session data in the Convex database using db.patch operation\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/sessions/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndb.patch(session._id, { userId });\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the TypeScript Convex Example App\nDESCRIPTION: Commands to install dependencies and start the development server for the TypeScript and Schemas Example App.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/typescript/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running the Users and Authentication Example App in Shell\nDESCRIPTION: Command to start the development server for the Users and Authentication example app. This runs the application in development mode, allowing you to test the Clerk authentication implementation.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/users-and-clerk/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Referencing Convex Functions as Strings in HTML\nDESCRIPTION: Shows the string pattern format for referencing different types of Convex functions when not using a bundler in HTML applications.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/html/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `\"filename:myQuery\"`\n- `\"directory/filename:myMutation\"`\n- `\"directory/action:default\"`\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Zod Schema Example App\nDESCRIPTION: Commands to install dependencies and start the development server for the Zod schema validation example application.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/zod-validation-ts/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Convex Next.js Demo\nDESCRIPTION: Commands to install dependencies and start the development server for the Convex and Next.js integration demo. This setup allows for testing server-side rendering and data management features.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/nextjs-app-router/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Convex Scheduling Demo\nDESCRIPTION: Commands to install dependencies and start the development server for the Convex scheduling example application.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/scheduling/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Custom Errors Example App\nDESCRIPTION: Commands to install dependencies and start the development server for the Custom Errors Example App. This will set up the necessary environment to run the application locally.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/custom-errors/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Convex File Storage Example App\nDESCRIPTION: Commands for setting up and running the Convex File Storage demo application locally. This installs all dependencies and starts the development server.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/file-storage/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running the Authentication Example App with NPM\nDESCRIPTION: Command to start the development server for the authentication example app which demonstrates Clerk integration for user management.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/clerk/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Convex App\nDESCRIPTION: These commands install the necessary dependencies and start the development server for the Convex app example.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/args-validation/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Convex HTTP Action Example App\nDESCRIPTION: Commands to install dependencies and start the development server for the Convex HTTP action example application.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/http/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Convex Search Example App\nDESCRIPTION: Commands to install dependencies and start the development server for the Convex search example application. This allows running the app locally to test the full text search functionality.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/search/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Convex GIPHY Action Example App\nDESCRIPTION: Commands to install dependencies and start the development server for the GIPHY Action Example App. This setup is required before running the application locally.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/giphy-action/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running the Next.js Application with Convex\nDESCRIPTION: Commands to install dependencies and start the development server for the Next.js application with Convex integration.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/nextjs-pages-router/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting the Development Environment\nDESCRIPTION: Commands to install dependencies and start the development server for the Convex chat application with file storage capabilities.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/file-storage-with-http/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Convex Crons Example App\nDESCRIPTION: Commands to install dependencies and start the development server for the Convex crons example app. This snippet demonstrates the setup process for running the application locally.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/cron-jobs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Convex System Tables Example App\nDESCRIPTION: Commands to install dependencies and start the development server for the Convex system tables example application.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/system-tables/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running the App with npm\nDESCRIPTION: Commands to install dependencies and start the development server for the presence typing indicator demo application.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/presence-typing-indicator/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Updating User Presence Data with Emoji Selection in React\nDESCRIPTION: JSX code for a select element that updates the user's emoji presence. When the user selects a new emoji, it calls updateMyPresence to merge the new emoji with existing presence data.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/presence-facepile/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<select\n    defaultValue={myPresence.emoji}\n    onChange={e => updateMyPresence({ emoji: e.target.value })}\n>\n```\n\n----------------------------------------\n\nTITLE: Running the Convex Example App using npm\nDESCRIPTION: These bash commands are used to set up and run the Convex example app. First, it installs the necessary dependencies using 'npm install', then starts the development server with 'npm run dev'.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/relational-data-modeling/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Rendering FacePile Component with Others' Presence Data\nDESCRIPTION: JSX code that passes othersPresence data to the FacePile component. It uses the nullish coalescing operator to handle the initial undefined state before data is received from Convex.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/presence-facepile/README.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<FacePile othersPresence={othersPresence ?? []} />\n```\n\n----------------------------------------\n\nTITLE: Installing and Running React Native Convex Example App\nDESCRIPTION: Commands to install dependencies and start the React Native application that uses Convex. This will set up all required packages and launch the Expo development server.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/react-native/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Implementing Time-based Updates in FacePile Component with React Hooks\nDESCRIPTION: JavaScript code using useState and useEffect hooks to periodically update the component's time reference. This enables the FacePile to determine which users are considered active or inactive based on their last update time.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/presence-facepile/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst [now, setNow] = useState(Date.now());\nuseEffect(() => {\n  const intervalId = setInterval(() => setNow(Date.now()), UPDATE_MS);\n  return () => clearInterval(intervalId);\n}, [setNow]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Convex for CommonJS Support\nDESCRIPTION: JSON configuration to enable CommonJS module generation for Convex API.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/node/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"generateCommonJSApi\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Requests to Convex Endpoints\nDESCRIPTION: Commands to call the Convex HTTP action endpoints using curl. Shows how to make both GET and POST requests to retrieve messages by author and post new messages.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/http/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport DEPLOYMENT_NAME=\"tall-sheep-123\"\ncurl \"https://$DEPLOYMENT_NAME.convex.site/getMessagesByAuthor?authorNumber=123\"\ncurl -d '{ \"author\": \"User 123\", \"body\": \"Hello world\" }' \\\n    -H 'content-type: application/json' \"https://$DEPLOYMENT_NAME.convex.site/postMessage\"\n```\n\n----------------------------------------\n\nTITLE: Running the Convex Presence Demo Application\nDESCRIPTION: Command-line instructions for installing dependencies and starting the development server to run the Convex Presence demo application locally.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/presence-facepile/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Function in Convex\nDESCRIPTION: Demonstrates how to create a query function that accepts numeric and string arguments. The function includes argument validation and shows how to query the database and process results.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/clerk/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  handler: async (ctx, args) => {\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    console.log(args.first, args.second);\n\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Active Typing Indicators in JSX\nDESCRIPTION: This JSX snippet filters and displays which users are currently typing. It excludes stale presence data and shows typing indicators only for recently active users who have their typing flag set to true.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/presence-typing-indicator/README.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n(othersPresence ?? [])\n  .filter(({ data, updated }) => data.typing && Date.now() - updated < OLD_MS)\n  .map(({ user }) => (\n    <li key={user}>\n      <span>{user}</span>\n      <span>\n        <i>typing...</i>\n      </span>\n    </li>\n  ));\n```\n\n----------------------------------------\n\nTITLE: Installing Convex Backend Package\nDESCRIPTION: Command to install the Convex package for integrating backend functionality into the Next.js application.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/nextjs-pages-router/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install convex\n```\n\n----------------------------------------\n\nTITLE: Running the Convex Development Server\nDESCRIPTION: Command to start the development server for the chat application. This initializes both the Convex backend and the frontend application.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/users-and-clerk-webhooks/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Query Function\nDESCRIPTION: Demonstrates how to create a query function that accepts numeric and string arguments, validates them, and queries a database table. Shows the basic structure of a Convex query including argument validation and database access.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/tutorial/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query in React\nDESCRIPTION: Shows how to use a Convex query function within a React component using the useQuery hook. Demonstrates passing arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/tutorial/convex/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Query Function in Convex\nDESCRIPTION: This snippet demonstrates how to create a query function in Convex. It includes argument validation, database querying, and data processing. The function takes two arguments: a number and a string.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/users-and-clerk/convex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Pagination Example App\nDESCRIPTION: Commands to install dependencies and start the development server for the Convex pagination demo application.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/pagination/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutation Function in Convex\nDESCRIPTION: Example of a Convex mutation function that handles data modifications. Shows argument validation, database insertion, and optional return values.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/file-storage/convex/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Query with Session Context in Convex\nDESCRIPTION: Example of defining a Convex query function with session context using queryWithSession wrapper, demonstrating access to session ID\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/sessions/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const myQuery = queryWithSession({\n  args: {},\n  handler: async (ctx, args) => {\n   console.log(ctx.session._id);\n    ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Convex TypeScript App\nDESCRIPTION: Commands to install dependencies and start the development server for the Convex TypeScript example application.\nSOURCE: https://github.com/get-convex/convex-demos/blob/main/react-query/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```"
  }
]