[
  {
    "owner": "mkdocs",
    "repo": "mkdocs",
    "content": "TITLE: Installing MkDocs via pip in Bash\nDESCRIPTION: This command installs the MkDocs package, a static site generator for project documentation, using the pip package manager. It requires a working Python and pip environment. This installation makes the \"mkdocs\" command available on the system.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/installation.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install mkdocs\n```\n\n----------------------------------------\n\nTITLE: Creating a New MkDocs Project\nDESCRIPTION: Creates a new MkDocs project directory named 'my-project' using the `mkdocs new` command and then changes the current directory into the newly created project folder using `cd`. Requires MkDocs to be installed.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/getting-started.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdocs new my-project\ncd my-project\n```\n\n----------------------------------------\n\nTITLE: Executing Basic MkDocs Commands (Shell)\nDESCRIPTION: Demonstrates common MkDocs command-line operations: creating a new project (`mkdocs new`), starting a live-reloading development server (`mkdocs serve`), building the static documentation site (`mkdocs build`), and displaying help information (`mkdocs help`). These commands are executed in a shell environment.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/mkdocs/tests/integration/minimal/docs/testing.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdocs new [dir-name]\nmkdocs serve\nmkdocs build\nmkdocs help\n```\n\n----------------------------------------\n\nTITLE: Ignoring Site Directory in Git\nDESCRIPTION: This snippet demonstrates how to prevent the `site/` directory, which contains the generated HTML output, from being committed to a Git repository. Adding `site/` to the `.gitignore` file ensures that only source files are tracked under version control.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_25\n\nLANGUAGE: text\nCODE:\n```\nsite/\n```\n\n----------------------------------------\n\nTITLE: MkDocs Basic Commands Reference\nDESCRIPTION: A list of essential MkDocs CLI commands for managing documentation projects. These commands allow users to create new projects, preview documentation with live-reloading, build static sites, and access help information.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/mkdocs/tests/integration/unicode/docs/♪.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdocs new [dir-name]\n```\n\nLANGUAGE: shell\nCODE:\n```\nmkdocs serve\n```\n\nLANGUAGE: shell\nCODE:\n```\nmkdocs build\n```\n\nLANGUAGE: shell\nCODE:\n```\nmkdocs help\n```\n\n----------------------------------------\n\nTITLE: Deploying MkDocs Documentation to GitHub Pages via Shell Commands\nDESCRIPTION: This snippet demonstrates the fundamental shell command 'mkdocs gh-deploy' used to build MkDocs documentation and deploy it to the 'gh-pages' branch of a GitHub repository automatically. It relies on the ghp-import tool to handle committing and pushing the built site. Additionally, it shows the commands for deploying User/Organization Pages by switching directories to the dedicated GitHub Pages repository and specifying the configuration file and remote branch explicitly.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/deploying-your-docs.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdocs gh-deploy\n```\n\nLANGUAGE: sh\nCODE:\n```\ncd ../orgname.github.io/\nmkdocs gh-deploy --config-file ../my-project/mkdocs.yml --remote-branch master\n```\n\n----------------------------------------\n\nTITLE: Installing MkDocs via pip\nDESCRIPTION: Installs the MkDocs package using pip, the Python package installer. This command needs to be run in a terminal or command prompt with Python and pip available.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/getting-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install mkdocs\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Extensions with Options\nDESCRIPTION: This YAML snippet demonstrates how to configure Markdown extensions in MkDocs using the `markdown_extensions` option. It shows how to define options for an extension, such as enabling permalinks and setting the separator for the table of contents extension.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nmarkdown_extensions:\n  - toc:\n      permalink: true\n      separator: \"_\"\n```\n\n----------------------------------------\n\nTITLE: Defining MkDocs Site Configuration\nDESCRIPTION: This example demonstrates how to inherit and extend a parent configuration file in a MkDocs project. It sets the INHERIT key to specify the path of the parent configuration file, then defines project specific settings.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\nINHERIT: ../base.yml\nsite_name: Foo Project\nsite_url: https://example.com/foo\n```\n\n----------------------------------------\n\nTITLE: Building the Static MkDocs Site\nDESCRIPTION: Builds the static HTML version of the documentation site using the `mkdocs build` command. The output is placed in the directory specified by the 'site_dir' configuration setting (defaults to 'site').\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/getting-started.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmkdocs build\n```\n\n----------------------------------------\n\nTITLE: Minimal MkDocs Navigation Configuration Using YAML\nDESCRIPTION: Provides an example YAML configuration snippet for specifying a basic navigation menu in mkdocs.yml. It lists Markdown files relative to the docs directory, which MkDocs uses to build site navigation with inferred page titles.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/writing-your-docs.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nnav:\n  - index.md\n  - about.md\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Extensions\nDESCRIPTION: This YAML snippet shows how to configure Markdown extensions in MkDocs using the `markdown_extensions` option. It demonstrates how to enable extensions and configure their options, such as enabling permalinks in the table of contents extension.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nmarkdown_extensions:\n  - smarty\n```\n\n----------------------------------------\n\nTITLE: Multi-Page MkDocs File Layout Example Using Text\nDESCRIPTION: Demonstrates a project structure with multiple Markdown files at the top level of the 'docs' directory to create several site pages. This layout allows MkDocs to generate URLs for each page such as '/', '/about/', and '/license/'.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/writing-your-docs.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmkdocs.yml\ndocs/\n    index.md\n    about.md\n    license.md\n```\n\n----------------------------------------\n\nTITLE: Running the MkDocs Development Server\nDESCRIPTION: Starts the built-in MkDocs development server using the `mkdocs serve` command from within the project directory. The server watches for file changes, rebuilds the site automatically, and serves it locally (default: http://127.0.0.1:8000/). The output shows build and serving status.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/getting-started.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ mkdocs serve\nINFO    -  Building documentation...\nINFO    -  Cleaning site directory\nINFO    -  Documentation built in 0.22 seconds\nINFO    -  [15:50:43] Watching paths for changes: 'docs', 'mkdocs.yml'\nINFO    -  [15:50:43] Serving on http://127.0.0.1:8000/\n```\n\n----------------------------------------\n\nTITLE: GitHub Wiki Configuration in MkDocs using edit_uri_template - YAML\nDESCRIPTION: This snippet demonstrates how to integrate a GitHub Wiki as the repository for MkDocs documentation. Set 'repo_url' to the wiki URL and use 'edit_uri_template' to specify the format for wiki page editing. '{path_noext}/_edit' templating is used for filename transformation. This is useful for collaborative wiki-style documentation.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nrepo_url: 'https://github.com/project/repo/wiki'\nedit_uri_template: '{path_noext}/_edit'\n\n```\n\n----------------------------------------\n\nTITLE: Understanding MkDocs Project Structure (Text)\nDESCRIPTION: Illustrates the standard directory and file structure for an MkDocs project. It includes the main configuration file (`mkdocs.yml`) and the `docs` directory containing Markdown source files (like `index.md`) and other assets.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/mkdocs/tests/integration/minimal/docs/testing.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n```\n\n----------------------------------------\n\nTITLE: Nested Directory Layout for MkDocs Using Text\nDESCRIPTION: Illustrates how to organize Markdown source files in nested directories under 'docs' to reflect hierarchical URLs in the generated site, e.g., '/user-guide/getting-started/'. This structure supports multi-level documentation navigation.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/writing-your-docs.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ndocs/\n    index.md\n    user-guide/getting-started.md\n    user-guide/configuration-options.md\n    license.md\n```\n\n----------------------------------------\n\nTITLE: Overriding Site Name with stdin in Bash\nDESCRIPTION: This bash command demonstrates how to override a configuration parameter on the command line using standard input. It uses `echo` to provide a configuration file, containing an `INHERIT` key, and then uses `mkdocs build` with the `-f -` flag to read from stdin.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\necho '{INHERIT: mkdocs.yml, site_name: \"Renamed site\"}' | mkdocs build -f -\n```\n\n----------------------------------------\n\nTITLE: MkDocs Project Layout Structure\nDESCRIPTION: The standard directory structure for an MkDocs project, showing the configuration file location and the documentation folder organization. This layout shows where to place configuration and content files.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/mkdocs/tests/integration/unicode/docs/♪.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nmkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n```\n\n----------------------------------------\n\nTITLE: Configuring nav with Internal and External Links in MkDocs - YAML\nDESCRIPTION: This example illustrates the use of internal and external links in the navigation configuration. Titles may be given for local files and must be specified for external URLs. The expected input is a YAML list mixing internal Markdown file paths and full or relative URLs. The result is a navigation menu that includes pages and offsite resources.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nnav:\n  - Introduction: 'index.md'\n  - 'about.md'\n  - 'Issue Tracker': 'https://example.com/'\n\n```\n\n----------------------------------------\n\nTITLE: Configuring nav for Single-Level Navigation in MkDocs - YAML\nDESCRIPTION: This YAML example shows a minimal navigation structure with a flat list of Markdown files. Paths must be relative to the documentation directory specified by 'docs_dir'. No special dependencies are required. The output will be rendered as a top-level navigation menu in the site.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nnav:\n  - 'index.md'\n  - 'about.md'\n\n```\n\n----------------------------------------\n\nTITLE: Defining Typed Plugin Config Schema (MkDocs 1.4+) (Python)\nDESCRIPTION: Introduces the MkDocs 1.4+ method for defining a type-safe plugin configuration schema by subclassing `mkdocs.config.base.Config`. This approach provides better type checking and autocompletion compared to the older `config_scheme` tuple method.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/plugins.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass MyPluginConfig(mkdocs.config.base.Config):\n    foo = mkdocs.config.config_options.Type(str, default='a default value')\n    bar = mkdocs.config.config_options.Type(int, default=0)\n    baz = mkdocs.config.config_options.Type(bool, default=True)\n\nclass MyPlugin(mkdocs.plugins.BasePlugin[MyPluginConfig]):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Including Theme Files with MANIFEST.in in Text Format\nDESCRIPTION: This snippet shows the contents of a MANIFEST.in file used for including theme assets recursively in the package distribution. It includes files with extensions such as .ico, .js, .css, .png, .html, and web font files, while excluding Python bytecode cache and compiled Python files. The user should replace 'theme_name' with their actual theme directory name and can add additional patterns if needed.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/themes.md#_snippet_21\n\nLANGUAGE: text\nCODE:\n```\nrecursive-include theme_name *.ico *.js *.css *.png *.html *.eot *.svg *.ttf *.woff\nrecursive-exclude * __pycache__\nrecursive-exclude * *.py[co]\n```\n\n----------------------------------------\n\nTITLE: Including Extra JavaScript Files in MkDocs\nDESCRIPTION: This YAML snippet demonstrates how to include JavaScript files in your MkDocs site. It showcases various ways to specify JavaScript files, including plain strings for simple inclusion and mappings for advanced configurations like specifying the `type`, `async`, and `defer` attributes.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nextra_javascript:\n  - some_plain_javascript.js       # <script src=\"some_plain_javascript.js\"></script>\n        # New behavior in MkDocs 1.5:\n  - implicitly_as_module.mjs       # <script src=\"implicitly_as_module.mjs\" type=\"module\"></script>\n        # Config keys only supported since MkDocs 1.5:\n  - path: explicitly_as_module.mjs # <script src=\"explicitly_as_module.mjs\" type=\"module\"></script>\n    type: module\n  - path: deferred_plain.js        # <script src=\"deferred_plain.js\" defer></script>\n    defer: true\n  - path: scripts/async_module.mjs # <script src=\"scripts/async_module.mjs\" type=\"module\" async></script>\n    type: module\n    async: true\n```\n\n----------------------------------------\n\nTITLE: Configuring MkDocs exclude_docs Patterns (YAML)\nDESCRIPTION: Demonstrates how to use the `exclude_docs` configuration option in `mkdocs.yml` to specify file patterns (following .gitignore format) that should not be included in the built site. Shows examples for excluding specific files, directories, and file types, and negating patterns to re-include files.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nexclude_docs: |\n  # A file with this name anywhere.\n  api-config.json\n\n  # Top-level \"docs/requirements.txt\".\n  /requirements.txt\n\n  # Any file with this extension anywhere.\n  *.py\n\n  # But keep this particular file.\n  !/foo/example.py\n```\n\n----------------------------------------\n\nTITLE: nav with Relative and Absolute External Links in a Subdirectory - YAML\nDESCRIPTION: This YAML snippet demonstrates a navigation configuration for a site hosted within a subdirectory, using both relative ('../') and absolute ('/bugs/') external links. 'site_url' is set to indicate subdirectory context. This setup is helpful for integrating MkDocs navigation with the broader project website.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nsite_url: https://example.com/foo/\n\nnav:\n  - Home: '../'\n  - 'User Guide': 'user-guide.md'\n  - 'Bug Tracker': '/bugs/'\n\n```\n\n----------------------------------------\n\nTITLE: Checking MkDocs Version\nDESCRIPTION: This snippet shows how to determine the currently installed version of MkDocs using the command-line interface (CLI). The output includes the version number and the Python environment used.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/about/release-notes.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ mkdocs --version\nmkdocs, version 1.5.0 from /path/to/mkdocs (Python 3.10)\n```\n\n----------------------------------------\n\nTITLE: Setting edit_uri with Relative Path in MkDocs Configuration - YAML\nDESCRIPTION: This YAML snippet sets the 'edit_uri' to a relative path to the documentation directory in the repository. It works alongside 'repo_url' to generate valid edit links within supported themes. The value for 'edit_uri' should be the path from the repository root to the docs directory and supports direct editing of documentation pages.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Query string example\nedit_uri: root/path/docs/\n\n```\n\n----------------------------------------\n\nTITLE: Nested Navigation Sections in MkDocs Using YAML\nDESCRIPTION: Demonstrates how to create hierarchical navigation menus with sections and nested pages in mkdocs.yml. This organizes related pages under section headings, improving site navigation structure while separating container sections from direct page links.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/writing-your-docs.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nnav:\n  - Home: index.md\n  - User Guide:\n    - Writing your docs: writing-your-docs.md\n    - Styling your docs: styling-your-docs.md\n  - About:\n    - License: license.md\n    - Release Notes: release-notes.md\n```\n\n----------------------------------------\n\nTITLE: Defining Site Name in MkDocs Configuration - YAML\nDESCRIPTION: This YAML snippet demonstrates how to set the required 'site_name' parameter which serves as the main title for the MkDocs documentation site. No external dependencies are required for this field, but it must be a string. The expected input is the name of the project, outputting its value as the title in the rendered theme. If missing, MkDocs will fail to run.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsite_name: Marshmallow Generator\n\n```\n\n----------------------------------------\n\nTITLE: Linking to Files in Subdirectories - Markdown\nDESCRIPTION: Shows how to link to Markdown files located in parent directories using relative paths in Markdown. This ensures that the links will work correctly after MkDocs builds the documentation site.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/writing-your-docs.md#_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\nPlease see the [project license](../about/license.md) for further details.\n```\n\n----------------------------------------\n\nTITLE: Installing pip with get-pip.py Script in Bash\nDESCRIPTION: This snippet shows the use of a Python command to install pip by running the \"get-pip.py\" installation script. It is intended for environments where pip is not installed initially and requires manual setup. The user must download the script from a trusted source before execution.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/installation.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython get-pip.py\n```\n\n----------------------------------------\n\nTITLE: Enabling Google Analytics v4 Tracking for MkDocs Theme in YAML\nDESCRIPTION: Configures Google Analytics v4 tracking by providing a GA4 tracking ID under the `analytics.gtag` key in the `mkdocs.yml` file. This enables Google Analytics usage for a site using the `mkdocs` theme. Requires a valid GA4 `G-` tracking identifier. Input is the tracking ID string, output is the injected Google Analytics tracking script in the rendered site. Setting to null disables analytics.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/choosing-your-theme.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntheme:\n  name: mkdocs\n  analytics:\n    gtag: G-ABC123\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Virtual Environment (Bash)\nDESCRIPTION: Guides the user to create a dedicated Python virtual environment for project dependencies and activate it. Includes commands for both macOS/Linux (`source`) and Windows (`.venv\\Scripts\\activate`) to isolate the project's Python environment from the system.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/about/contributing.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv .venv\nsource .venv/bin/activate # On macOS and Linux\n# .venv\\Scripts\\activate # On Windows\n```\n\n----------------------------------------\n\nTITLE: Linking to Pages in MkDocs - Markdown\nDESCRIPTION: Demonstrates how to create internal links to other pages within the MkDocs documentation using relative paths in Markdown syntax.  The path is relative to the current markdown file.  MkDocs automatically transforms these links into HTML hyperlinks during the build process.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/writing-your-docs.md#_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nPlease see the [project license](license.md) for further details.\n```\n\n----------------------------------------\n\nTITLE: Configuring a Theme with MkDocs YAML\nDESCRIPTION: This is a basic configuration for a MkDocs theme, specifying the theme name, locale and highlightjs setting in a YAML file. It represents the base configuration for a site and shows an example of what a parent configuration file might look like.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\ntheme:\n  name: mkdocs\n  locale: en\n  highlightjs: true\n\nmarkdown_extensions:\n  toc:\n    permalink: true\n  admonition: {}\n```\n\n----------------------------------------\n\nTITLE: Building MkDocs Documentation Site (MkDocs)\nDESCRIPTION: Generates the static HTML documentation site from the Markdown source files. This command produces the output files typically located in a `site` directory, which can then be deployed to a web server.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/about/contributing.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmkdocs build\n```\n\n----------------------------------------\n\nTITLE: Passing Extra Variables to Templates\nDESCRIPTION: This YAML snippet shows how to pass custom variables to Jinja2 templates in MkDocs using the `extra` configuration option. This is useful for customizing themes and dynamically injecting data into your documentation.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nextra:\n  version: 1.0\n```\n\n----------------------------------------\n\nTITLE: New Style Extra JavaScript Inclusion - Django\nDESCRIPTION: This Django template demonstrates the recommended way to include extra JavaScript files from `config.extra_javascript`. It iterates through the `config.extra_javascript` list and uses the `script_tag` filter to generate the `<script>` tag for each file. This method supports the new `type`, `async`, and `defer` attributes introduced in MkDocs 1.5.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/themes.md#_snippet_4\n\nLANGUAGE: django\nCODE:\n```\n{%- for script in config.extra_javascript %}\n  {{ script | script_tag }}\n{%- endfor %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Markdown Extensions\nDESCRIPTION: This YAML snippet demonstrates how to enable multiple Markdown extensions in MkDocs, including extensions with and without configuration options. It showcases a mixed configuration where some extensions have options defined, while others are enabled without any specific settings.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nmarkdown_extensions:\n  - smarty\n  - toc:\n      permalink: true\n  - sane_lists\n```\n\n----------------------------------------\n\nTITLE: Example of YAML configuration for plugin settings\nDESCRIPTION: This is a demonstration of the `validation` setting, which provides examples of warnings. It specifically demonstrates configuring validation to check for missing anchors within Markdown files.  The warning level is set to 'warn'.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/about/release-notes.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nvalidation:\n  anchors: warn\n```\n\n----------------------------------------\n\nTITLE: Linking to Sections Within Documents - Markdown\nDESCRIPTION: Illustrates how to create anchor links to specific sections within a Markdown document. This is achieved by appending the target element's ID, prefixed with `#`, to the URL. MkDocs correctly transforms the path portion of the link, leaving the anchor portion intact.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/writing-your-docs.md#_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\nPlease see the [project license](about.md#license) for further details.\n```\n\n----------------------------------------\n\nTITLE: Linking Repository URL in MkDocs Configuration - YAML\nDESCRIPTION: This snippet shows how to set the 'repo_url' field in the YAML configuration, adding a repository link (e.g., GitHub, GitLab) to each documentation page. No additional dependencies are required. 'repo_url' must be a valid URL and can be set to null if not needed. This enhances navigation and editing capabilities in collaboration workflows.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrepo_url: https://github.com/example/repository/\n\n```\n\n----------------------------------------\n\nTITLE: Embedding Images in Documentation - Markdown\nDESCRIPTION: Explains how to include images in documentation source files using standard Markdown image syntax.  MkDocs copies these images to the generated site.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/writing-your-docs.md#_snippet_14\n\nLANGUAGE: Markdown\nCODE:\n```\nCupcake indexer is a snazzy new project for indexing small cakes.\n\n![Screenshot](img/screenshot.png)\n\n*Above: Cupcake indexer in progress*\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Configuration Schema (Python)\nDESCRIPTION: Defines a basic configuration schema for a custom MkDocs plugin using the `config_scheme` attribute within a `BasePlugin` subclass. This schema defines 'foo' (string), 'bar' (integer), and 'baz' (boolean) options with default values. MkDocs uses this schema to validate user-provided configuration.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/plugins.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass MyPlugin(mkdocs.plugins.BasePlugin):\n    config_scheme = (\n        ('foo', mkdocs.config.config_options.Type(str, default='a default value')),\n        ('bar', mkdocs.config.config_options.Type(int, default=0)),\n        ('baz', mkdocs.config.config_options.Type(bool, default=True))\n    )\n```\n\n----------------------------------------\n\nTITLE: Bitbucket Editor Integration with edit_uri_template - YAML\nDESCRIPTION: This YAML example integrates Bitbucket with MkDocs for direct editing using query parameters on file paths. 'repo_url' is set to the Bitbucket repository, and 'edit_uri_template' uses 'src/master/docs/{path}?mode=edit' for edit link generation. This setup supports collaborative editing for documentation within Bitbucket-sourced projects.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nrepo_url: 'https://bitbucket.org/project/repo/'\nedit_uri_template: 'src/master/docs/{path}?mode=edit'\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme Name and Custom Directory in MkDocs (YAML)\nDESCRIPTION: Configures MkDocs to use the 'mkdocs' theme as the base (`name`) and specifies `custom_theme/` as the directory (`custom_dir`) containing files that will override the base theme's files. This allows for targeted theme customization.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/customizing-your-theme.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntheme:\n  name: mkdocs\n  custom_dir: custom_theme/\n```\n\n----------------------------------------\n\nTITLE: Setting 'permalink' for Table of Contents - YAML\nDESCRIPTION: Defines the 'permalink' configuration setting for the toc extension in the `mkdocs.yml` file.  This setting generates permanent links at the end of each header. The example sets the link text to the hash symbol (#). Requires the 'markdown_extensions' configuration option.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/writing-your-docs.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nmarkdown_extensions:\n  - toc:\n      permalink: \"#\"\n```\n\n----------------------------------------\n\nTITLE: Example: Plugin Config Schema with ListOfItems and SubConfig (Python)\nDESCRIPTION: Illustrates defining a configuration schema where an option ('add_rectangles') is a list of complex objects ('_Rectangle'). This is achieved by passing a `SubConfig` instance defining the object structure to `ListOfItems`. Each item in the list must conform to the '_Rectangle' schema.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/plugins.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport numbers\nfrom mkdocs.config import base, config_options as c\n\nclass _Rectangle(base.Config):\n    width = c.Type(numbers.Real)  # required\n    height = c.Type(numbers.Real)  # required\n\nclass MyPluginConfig(base.Config):\n    add_rectangles = c.ListOfItems(c.SubConfig(_Rectangle))  # required\n```\n\n----------------------------------------\n\nTITLE: Setting edit_uri with Hash Fragment in MkDocs Configuration - YAML\nDESCRIPTION: This YAML snippet configures the 'edit_uri' option using a hash fragment, suitable for repository hosts that identify files using fragments. The field accepts a string and should generally work together with a valid 'repo_url'. The output is an edit link per page that incorporates the fragment.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Hash fragment example\nedit_uri: '#root/path/docs/'\n\n```\n\n----------------------------------------\n\nTITLE: Setting MkDocs Theme in YAML Configuration\nDESCRIPTION: Sets the active MkDocs theme by specifying the theme name within the `mkdocs.yml` configuration file. This snippet shows how to enable the `readthedocs` theme. Requires MkDocs  to read the configuration file during site building. The input is the YAML key `theme` with a nested `name` property. No outputs besides affecting the generated site theme.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/choosing-your-theme.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntheme:\n  name: readthedocs\n```\n\n----------------------------------------\n\nTITLE: Normalizing URLs with the 'url' Filter (Django/Jinja2)\nDESCRIPTION: Illustrates the use of the custom MkDocs `url` filter within a template. This filter normalizes a given URL, making it relative to the current page context or prepending the site's `base_url` if necessary.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/themes.md#_snippet_14\n\nLANGUAGE: django\nCODE:\n```\n<a href=\"{{ page.url|url }}\">{{ page.title }}</a>\n```\n\n----------------------------------------\n\nTITLE: Getting Help for a Specific MkDocs Command\nDESCRIPTION: Displays the help message specifically for the `mkdocs build` command by adding the `--help` flag after the command name. This lists options and arguments relevant only to the 'build' command.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/getting-started.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmkdocs build --help\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in MkDocs Plugin Methods - Python\nDESCRIPTION: This snippet demonstrates how to implement error handling in MkDocs plugins by subclassing BasePlugin and overriding event hook methods, such as on_post_page and on_build_error. Dependencies include mkdocs.exceptions.PluginError and mkdocs.plugins.BasePlugin. The on_post_page method catches a KeyError and raises a PluginError with a descriptive message, while on_build_error provides a hook for cleanup after errors. Inputs are contextual arguments for each event; output is either normal plugin processing or an interrupted build with a user-friendly error message. Exception handling is required for robust plugin integration.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/plugins.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom mkdocs.exceptions import PluginError\nfrom mkdocs.plugins import BasePlugin\n\n\nclass MyPlugin(BasePlugin):\n    def on_post_page(self, output, page, config, **kwargs):\n        try:\n            # some code that could throw a KeyError\n            ...\n        except KeyError as error:\n            raise PluginError(f\"Failed to find the item by key: '{error}'\")\n\n    def on_build_error(self, error, **kwargs):\n        # some code to clean things up\n        ...\n```\n\n----------------------------------------\n\nTITLE: Including Custom CSS Files in MkDocs Configuration (YAML)\nDESCRIPTION: Configures MkDocs to include the specified CSS file (`style.css`) in the generated HTML pages. The `extra_css` option within `mkdocs.yml` lists custom stylesheets to be applied after theme styles, located in the `docs_dir`.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/customizing-your-theme.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nextra_css:\n  - style.css\n```\n\n----------------------------------------\n\nTITLE: Example Project Structure with Custom Theme Directory (Text)\nDESCRIPTION: Depicts an example project layout including the documentation source (`docs/`), the custom theme override directory (`custom_theme/` with example overrides), and the MkDocs configuration file (`config.yml`). This illustrates how custom theme files are organized relative to the documentation source.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/customizing-your-theme.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n- docs/\n  - index.html\n- custom_theme/\n  - img/\n    - favicon.ico\n  - js/\n    - somelib.js\n  - 404.html\n- config.yml\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for MkDocs Plugins - Python\nDESCRIPTION: This example sets up structured logging for MkDocs plugins using Python's logging module, ensuring compatibility with MkDocs' verbosity options. It configures a logger under the mkdocs.plugins. namespace and issues log statements at various levels, such as warning, info, and debug. This is recommended for plugin developers so that messages are integrated with MkDocs' CLI flags like --verbose and --debug. Key parameters include the logger name and standard logging arguments. This approach avoids interfering with MkDocs' error reporting and is suitable for routine diagnostics and user guidance.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/plugins.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nlog = logging.getLogger(f\"mkdocs.plugins.{__name__}\")\n\nlog.warning(\"File '%s' not found. Breaks the build if --strict is passed\", my_file_name)\nlog.info(\"Shown normally\")\nlog.debug(\"Shown only with `--verbose`\")\n\nif log.getEffectiveLevel() <= logging.DEBUG:\n    log.debug(\"Very expensive calculation only for debugging: %s\", get_my_diagnostics())\n```\n\n----------------------------------------\n\nTITLE: Building MkDocs Site with Clean Output Directory (Shell)\nDESCRIPTION: Builds the static documentation site using `mkdocs build`. The `--clean` flag, added in v0.10.0, ensures that the `site_dir` is emptied of stale files before the new build artifacts are generated.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/about/release-notes.md#_snippet_28\n\nLANGUAGE: Shell\nCODE:\n```\nmkdocs build --clean\n```\n\n----------------------------------------\n\nTITLE: Example MkDocs Theme Directory Structure (Text)\nDESCRIPTION: Illustrates a partial directory structure for the default 'mkdocs' theme, including folders for CSS, fonts, images (img), JavaScript (js), and various HTML template files. This structure serves as a reference when overriding theme files using the `custom_dir`.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/customizing-your-theme.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n- css\\\n- fonts\\\n- img\\\n  - favicon.ico\n  - grid.png\n- js\\\n- 404.html\n- base.html\n- content.html\n- nav-sub.html\n- nav.html\n- toc.html\n```\n\n----------------------------------------\n\nTITLE: Project File Layout Example - Text\nDESCRIPTION: Illustrates an example project file layout, showing the structure of the `mkdocs.yml` file, documentation files (`.md`), and an `img` directory containing images. This structure is used to organize the documentation and related assets.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/writing-your-docs.md#_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nmkdocs.yml\ndocs/\n    CNAME\n    index.md\n    about.md\n    license.md\n    img/\n        screenshot.png\n```\n\n----------------------------------------\n\nTITLE: Setting the Theme in mkdocs.yml\nDESCRIPTION: Specifies the visual theme for the documentation site using the 'theme' key in `mkdocs.yml`. This example sets the theme to 'readthedocs', which is one of the built-in themes.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/getting-started.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsite_name: MkLorum\nnav:\n  - Home: index.md\n  - About: about.md\ntheme: readthedocs\n```\n\n----------------------------------------\n\nTITLE: GitLab Static Site Editor Integration in MkDocs - YAML\nDESCRIPTION: Demonstrates configuring MkDocs with GitLab's Static Site Editor by setting 'repo_url' and a format-string-based 'edit_uri_template'. Path components are percent-encoded using '{path!q}' as required by the GitLab SSE URL scheme. This template ensures the edit URL integrates properly with the GitLab Static Site Editor workflow.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nrepo_url: 'https://gitlab.com/project/repo'\nedit_uri_template: '-/sse/master/docs%2F{path!q}'\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Relative Paths for Markdown Extensions in MkDocs\nDESCRIPTION: YAML configuration showing how to configure Markdown extensions to use paths relative to the current document. Uses the !relative YAML tag with the pymdownx.snippets extension.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/about/release-notes.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nmarkdown_extensions:\n  - pymdownx.snippets:\n      base_path: !relative\n```\n\n----------------------------------------\n\nTITLE: Combining Table of Contents Settings - YAML\nDESCRIPTION: Demonstrates how to define multiple settings for the toc extension in a single `mkdocs.yml` entry.  This allows customizing the permalink character, base header level and separator character used to generate ID's for the Table of Contents extension.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/writing-your-docs.md#_snippet_12\n\nLANGUAGE: yml\nCODE:\n```\nmarkdown_extensions:\n  - toc:\n      permalink: \"#\"\n      baselevel: 2\n      separator: \"_\"\n```\n\n----------------------------------------\n\nTITLE: Using python -m Prefix for pip and MkDocs Commands on Windows in Bash\nDESCRIPTION: This example demonstrates a workaround for Windows users where commands like pip and mkdocs may not work directly. Prefixing commands with \"python -m\" ensures Python runs the module correctly, which may help resolve PATH issues on Windows systems.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/installation.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install mkdocs\npython -m mkdocs\n```\n\n----------------------------------------\n\nTITLE: Recommended Strict MkDocs Validation Settings (YAML)\nDESCRIPTION: Provides recommended configuration settings for the `validation` option in `mkdocs.yml` to maximize validation strictness. Shows setting `omitted_files`, `absolute_links` (can be `warn` or `relative_to_docs`), `unrecognized_links`, and `anchors` to `warn` to elevate potential issues to errors under `--strict` build.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nvalidation:\n  omitted_files: warn\n  absolute_links: warn  # Or 'relative_to_docs' - new in MkDocs 1.6\n  unrecognized_links: warn\n  anchors: warn  # New in MkDocs 1.6\n```\n\n----------------------------------------\n\nTITLE: YAML Style Meta-Data Example - Text\nDESCRIPTION: Provides an example of YAML style meta-data in a Markdown document. The meta-data is wrapped in `---` delimiters and includes key-value pairs defining document properties such as title, summary, authors, date, and a URL. The YAML keys must be lowercase.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/writing-your-docs.md#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n---\ntitle: My Document\nsummary: A brief description of my document.\nauthors:\n    - Waylan Limberg\n    - Tom Christie\ndate: 2018-07-10\nsome_url: https://example.com\n---\nThis is the first paragraph of the document.\n```\n\n----------------------------------------\n\nTITLE: New-style Plugin Config Definition\nDESCRIPTION: Illustrates the recommended, new method of defining plugin configuration using a subclass of `base.Config`.  This approach provides better type safety and allows for attribute-based access to configuration values.  The example demonstrates how to define `foo` as an optional integer and `bar` as a string with a default value, and highlights potential type errors caught by static type checkers.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/about/release-notes.md#_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nfrom mkdocs import plugins\nfrom mkdocs.config import base, config_options as c\n\nclass MyPluginConfig(base.Config):\n    foo = c.Optional(c.Type(int))\n    bar = c.Type(str, default='')\n\nclass MyPlugin(plugins.BasePlugin[MyPluginConfig]):\n    def on_page_markdown(self, markdown: str, *, config: defaults.MkDocsConfig, **kwargs):\n        if self.config.foo < 5:  # Error, `foo` might be `None`, need to check first.\n            if config.site_url.startswith('http:'):  # Error, MkDocs' `site_url` also might be `None`.\n                return markdown + self.config.baz  # Error, no such attribute `baz`!\n```\n\n----------------------------------------\n\nTITLE: Advanced Hook Example with Logging and Regular Expressions\nDESCRIPTION: Shows an advanced hook that logs warnings for non-HTTPS links found in Markdown content. Uses 'import logging, re' and the 'mkdocs.plugins' module. The function 'on_page_markdown' is priority-adjusted and inspects page URLs for insecure links.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nimport logging, re\nimport mkdocs.plugins\n\nlog = logging.getLogger('mkdocs')\n\n@mkdocs.plugins.event_priority(-50)\ndef on_page_markdown(markdown, page, **kwargs):\n    path = page.file.src_uri\n    for m in re.finditer(r'\\bhttp://[^) ]+', markdown):\n        log.warning(f\"Documentation file '{path}' contains a non-HTTPS link: {m[0]}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring MkDocs Plugin Options (YAML)\nDESCRIPTION: Illustrates how to provide configuration options to an MkDocs plugin within the `mkdocs.yml` file. This example configures the 'search' plugin with 'lang' and hypothetical 'foo' options. Plugin options are nested under the plugin name using key-value pairs.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/plugins.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  - search:\n      lang: en\n      foo: bar\n```\n\n----------------------------------------\n\nTITLE: Deploying MkDocs Site to GitHub Pages (Shell)\nDESCRIPTION: Uses the `mkdocs gh-deploy` command to build the documentation and push it to GitHub Pages. Enhancements include checking for a CNAME file (v0.12.0), specifying a remote branch (v0.12.0), allowing custom commit messages (v0.13.0), and using the `--clean` flag (v0.10.0) to remove stale files before deployment.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/about/release-notes.md#_snippet_27\n\nLANGUAGE: Shell\nCODE:\n```\nmkdocs gh-deploy\n```\n\n----------------------------------------\n\nTITLE: Specifying Column Alignment in Markdown Table\nDESCRIPTION: This snippet shows how to control the alignment of text within table columns using the Markdown tables extension. Adding a colon (`:`) to the separator line before, after, or on both sides of the hyphens specifies left, right, or center alignment, respectively.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/writing-your-docs.md#_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\nFirst Header | Second Header | Third Header\n:----------- |:-------------:| -----------:\nLeft         | Center        | Right\nLeft         | Center        | Right\n```\n\n----------------------------------------\n\nTITLE: Accessing Plugin Configuration via Dictionary (Python)\nDESCRIPTION: Demonstrates accessing plugin configuration options within an event handler method (e.g., `on_pre_build`) using dictionary-style access on the `self.config` attribute. This is the traditional way to access validated configuration values provided by the user.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/plugins.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef on_pre_build(self, config, **kwargs):\n    if self.config['baz']:\n        # implement \"baz\" functionality here...\n```\n\n----------------------------------------\n\nTITLE: Watching Additional Directories for Changes\nDESCRIPTION: This YAML snippet demonstrates how to configure MkDocs to watch additional directories for changes during development using the `mkdocs serve` command. This ensures that the development server automatically reloads when files in these directories are modified.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nwatch:\n  - directory_a\n  - directory_b\n```\n\n----------------------------------------\n\nTITLE: Checking Python and pip Versions in Console\nDESCRIPTION: This snippet illustrates how to verify that Python and pip are already installed on a system by using command-line instructions that output their current versions. It helps users confirm prerequisites before proceeding with MkDocs installation.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/installation.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ python --version\nPython 3.8.2\n$ pip --version\npip 20.0.2 from /usr/local/lib/python3.8/site-packages/pip (python 3.8)\n```\n\n----------------------------------------\n\nTITLE: Referencing an Image in /sub1/ with Relative Path in Markdown\nDESCRIPTION: Shows how to use a relative path to reference an image in the /sub1/ directory using Markdown syntax. The path goes up one directory level using '../'.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/mkdocs/tests/integration/subpages/docs/sub1/sub1a/index.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![Image](../image.png)\n```\n\n----------------------------------------\n\nTITLE: Automated Python code style fixing with Hatch\nDESCRIPTION: This command uses Hatch to automatically reformat MkDocs's Python code according to Black and Isort standards, assisting developers in maintaining consistent code style.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhatch run style:fix\n```\n\n----------------------------------------\n\nTITLE: Type-checking MkDocs code with Hatch\nDESCRIPTION: This command runs mypy to perform static type checking on MkDocs source code, ensuring type correctness and catching potential bugs early.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhatch run types:check\n```\n\n----------------------------------------\n\nTITLE: Configuring Navigation in mkdocs.yml\nDESCRIPTION: Defines the site navigation structure using the 'nav' key in the `mkdocs.yml` file. This example maps the titles 'Home' and 'About' to the corresponding source Markdown files ('index.md' and 'about.md').\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/getting-started.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nsite_name: MkLorum\nnav:\n  - Home: index.md\n  - About: about.md\n```\n\n----------------------------------------\n\nTITLE: Installing MkDocs using pip\nDESCRIPTION: This snippet demonstrates how to install the latest version of MkDocs using pip. It updates the existing installation by using the `-U` flag.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/about/release-notes.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -U mkdocs\n```\n\n----------------------------------------\n\nTITLE: Registering a MkDocs Theme in setup.py Using Python\nDESCRIPTION: This Python snippet provides a template for the setup.py script necessary to register a custom MkDocs theme package. It shows the use of setuptools for packaging, including metadata placeholders such as name, version, URL, license, author, and author_email to be filled. The 'entry_points' dictionary specifies the theme discovery mechanism for MkDocs, where the left-hand side is the theme name users specify in mkdocs.yml and the right-hand side is the directory containing the theme files. The setup uses find_packages(), includes package data, and disables zip safety.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/themes.md#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom setuptools import setup, find_packages\n\nVERSION = '0.0.1'\n\nsetup(\n    name=\"mkdocs-themename\",\n    version=VERSION,\n    url='',\n    license='',\n    description='',\n    author='',\n    author_email='',\n    packages=find_packages(),\n    include_package_data=True,\n    entry_points={\n        'mkdocs.themes': [\n            'themename = theme_name',\n        ]\n    },\n    zip_safe=False\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring MkDocs Theme Locale - YAML\nDESCRIPTION: This YAML snippet shows how to specify the theme and locale in the mkdocs.yml configuration file. It sets the theme name to 'mkdocs' and the locale to 'fr' (French), which tells MkDocs to build the site's theme text elements in French. The snippet requires a theme that supports localization and the i18n plugin to be installed.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/localizing-your-theme.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntheme:\n  name: mkdocs\n  locale: fr\n```\n\n----------------------------------------\n\nTITLE: Running comprehensive style checks with Hatch\nDESCRIPTION: This command performs broader code quality checks such as spelling and JavaScript styles using Hatch, helping maintain overall project quality and consistency.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhatch run lint:check\n```\n\n----------------------------------------\n\nTITLE: Embedding image with absolute path\nDESCRIPTION: Embeds an image using an absolute path starting from the root of the MkDocs site within a sub-page directory. This assumes the image is located at /sub1/image.png.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/mkdocs/tests/integration/subpages/docs/sub1/index.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n![Image](/sub1/image.png)\n```\n\n----------------------------------------\n\nTITLE: Configuring Highlight.js Additional Languages for MkDocs Theme in YAML\nDESCRIPTION: Adds extra syntax highlighting support by specifying additional languages for highlight.js beyond the default 23 common languages. This example shows how to enable YAML and Rust language highlighting when using the `mkdocs` theme. Requires the `highlightjs` option enabled and the highlight.js library. The list under `hljs_languages` accepts language identifiers. Inputs are language names, outputs are enhanced code block rendering with correct syntax coloring.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/choosing-your-theme.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntheme:\n  name: mkdocs\n  highlightjs: true\n  hljs_languages:\n    - yaml\n    - rust\n```\n\n----------------------------------------\n\nTITLE: Modifying MkDocs Configuration in 'on_config' Event (Python)\nDESCRIPTION: Illustrates how a plugin can modify the global MkDocs configuration during the `on_config` event. This example adds a custom static template ('my_template.html') to the theme's configuration. The modified config object must be returned.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/plugins.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass MyPlugin(BasePlugin):\n    def on_config(self, config, **kwargs):\n        config['theme'].static_templates.add('my_template.html')\n        return config\n```\n\n----------------------------------------\n\nTITLE: Installing MkDocs Plugins using pip (Bash)\nDESCRIPTION: Demonstrates how to install a third-party MkDocs plugin using the pip package manager. Replace 'mkdocs-foo-plugin' with the actual package name of the plugin to be installed. Requires Python and pip to be installed on the system.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/plugins.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install mkdocs-foo-plugin\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Markdown Table\nDESCRIPTION: This snippet illustrates the fundamental syntax for creating a table using the Markdown tables extension. It defines columns with headers separated by pipes and uses a separator line (`---`) below the header. Each subsequent line represents a table row.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/writing-your-docs.md#_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\nFirst Header | Second Header | Third Header\n------------ | ------------- | ------------\nContent Cell | Content Cell  | Content Cell\nContent Cell | Content Cell  | Content Cell\n```\n\n----------------------------------------\n\nTITLE: Configuring pymdownx.snippets with !relative\nDESCRIPTION: This code snippet shows how to configure the pymdownx.snippets extension in a MkDocs configuration file using the !relative tag. It sets the base_path for the extension relative to the current Markdown file or the config directory.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\nmarkdown_extensions:\n  - pymdownx.snippets:\n      base_path: !relative  # Relative to the current Markdown file\n```\n\n----------------------------------------\n\nTITLE: Enabling MkDocs Absolute Link Validation (YAML)\nDESCRIPTION: Shows how to configure the `validation.links.absolute_links` option in `mkdocs.yml` to the new `relative_to_docs` value (MkDocs 1.6+). This setting enables MkDocs to recognize and validate absolute paths in Markdown links (starting with `/`) as being relative to the `docs_dir` root, making them work correctly in the built site.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nvalidation:\n  links:\n    absolute_links: relative_to_docs\n    anchors: warn\n    unrecognized_links: warn\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Output with Clean Directory (Shell)\nDESCRIPTION: Introduced in v0.10.0, the `mkdocs json` command outputs the rendered documentation as JSON files instead of HTML. It can be used with the `--clean` flag to remove stale files from the output directory before generation.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/about/release-notes.md#_snippet_29\n\nLANGUAGE: Shell\nCODE:\n```\nmkdocs json --clean\n```\n\n----------------------------------------\n\nTITLE: Python Style Dependencies File Generated by hatch-pip-compile\nDESCRIPTION: This file specifies exact versions of Python packages needed for code style checking and formatting. The primary tools include black (code formatter), isort (import sorter), and ruff (linter), along with their transitive dependencies.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/requirements/requirements-style.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n#\n# This file is autogenerated by hatch-pip-compile with Python 3.11\n#\n# - black\n# - isort\n# - ruff\n#\n\nblack==23.12.1\n    # via hatch.envs.style\nclick==8.1.7\n    # via black\nisort==5.13.2\n    # via hatch.envs.style\nmypy-extensions==1.0.0\n    # via black\npackaging==23.2\n    # via black\npathspec==0.12.1\n    # via black\nplatformdirs==4.1.0\n    # via black\nruff==0.1.14\n    # via hatch.envs.style\n```\n\n----------------------------------------\n\nTITLE: Referencing Image in Subdirectory using Absolute Path (Markdown)\nDESCRIPTION: This Markdown snippet shows how to include an image located in a specific subdirectory (`/sub1/`) using an absolute path relative to the MkDocs site root. This path format ensures the image is found regardless of the Markdown file's location within the project structure.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/mkdocs/tests/integration/subpages/docs/sub2/non-index.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n![Image](/sub1/image.png)\n```\n\n----------------------------------------\n\nTITLE: Excluding Files with exclude_docs in MkDocs YAML Configuration\nDESCRIPTION: YAML configuration demonstrating how to exclude specific files from being processed and copied to the built site. Uses gitignore-style pattern format to specify Python files and a requirements.txt file.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/about/release-notes.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nexclude_docs: |\n  *.py               # Excludes e.g. docs/hooks/foo.py\n  /requirements.txt  # Excludes docs/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring MkDocs draft_docs Patterns (YAML)\nDESCRIPTION: Demonstrates how to use the `draft_docs` configuration option in `mkdocs.yml` to specify file patterns (following .gitignore format) that should be treated as drafts. Draft files are available during `mkdocs serve` but automatically excluded during `mkdocs build`. Shows examples for directories, file name patterns, and negation.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\ndraft_docs: |\n  # A \"drafts\" directory anywhere.\n  drafts/\n\n  # A Markdown file ending in _unpublished.md anywhere.\n  *_unpublished.md\n\n  # But keep this particular file.\n  !/foo_unpublished.md\n```\n\n----------------------------------------\n\nTITLE: Accessing Plugin Configuration via Attributes (MkDocs 1.4+) (Python)\nDESCRIPTION: Shows the modern (MkDocs 1.4+) way to access plugin configuration options within an event handler using attribute access (e.g., `self.config.baz`). This method provides type safety benefits when used with a `Config` subclass for the schema definition.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/plugins.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef on_pre_build(self, config, **kwargs):\n    if self.config.baz:\n        print(self.config.bar ** 2)  # OK, `int ** 2` is valid.\n```\n\n----------------------------------------\n\nTITLE: Ignoring the Build Directory in Git\nDESCRIPTION: Appends the line 'site/' to the `.gitignore` file using the `echo` command and shell redirection (`>>`). This configures Git to ignore the build output directory ('site'), preventing generated files from being committed to the repository.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/getting-started.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\necho \"site/\" >> .gitignore\n```\n\n----------------------------------------\n\nTITLE: Referencing Image with Relative Path in MkDocs (Markdown)\nDESCRIPTION: This Markdown snippet embeds an image using a relative path. The path 'image.png' is relative to the current document. This assumes an image file named 'image.png' is in the same directory as the Markdown file. The output renders the image in the document.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/mkdocs/tests/integration/subpages/docs/non-index.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n![Image](image.png)\n```\n\n----------------------------------------\n\nTITLE: Referencing Image with Absolute Path in MkDocs (Markdown)\nDESCRIPTION: This Markdown snippet embeds an image using an absolute path. The path '/image.png' is relative to the site's root directory in the MkDocs configuration.  The output renders the image in the document, provided the image exists at the specified location accessible by the MkDocs build process.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/mkdocs/tests/integration/subpages/docs/non-index.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n![Image](/image.png)\n```\n\n----------------------------------------\n\nTITLE: Referencing Images with Relative Paths - Markdown\nDESCRIPTION: This snippet shows how to embed an image in Markdown using a relative path, which is helpful when the document and the image are in different subdirectories. No external dependencies are required, but the file structure must align with the specified paths. The image will be displayed if it exists at the given relative location, and the syntax should be used within Markdown-compatible editors or platforms.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/mkdocs/tests/integration/subpages/docs/sub2/index.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n![Image](../sub1/image.png)\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n![Image](../image.png)\n```\n\n----------------------------------------\n\nTITLE: Referencing Image in Parent Directory using Relative Path (Markdown)\nDESCRIPTION: This Markdown snippet illustrates referencing an image located in the parent directory (`../`) relative to the current Markdown file. This is useful when the image resides one level up in the directory hierarchy.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/mkdocs/tests/integration/subpages/docs/sub2/non-index.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n![Image](../image.png)\n```\n\n----------------------------------------\n\nTITLE: Referencing Image in Root Directory using Absolute Path (Markdown)\nDESCRIPTION: This Markdown snippet demonstrates referencing an image located in the root directory (`/`) using an absolute path relative to the MkDocs site root. This approach provides a consistent way to link to root-level images from any file.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/mkdocs/tests/integration/subpages/docs/sub2/non-index.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n![Image](/image.png)\n```\n\n----------------------------------------\n\nTITLE: Configuring repo_url and edit_uri Together in MkDocs - YAML\nDESCRIPTION: This snippet shows a combined example of setting both 'repo_url' and 'edit_uri' in MkDocs configuration. 'repo_url' specifies the repository's base URL, and 'edit_uri' defines the path segment for direct editing. Both values must be valid strings. These two fields work together to create per-page edit links for contributors.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nrepo_url: https://example.com/project/repo\nedit_uri: blob/main/docs/\n\n```\n\n----------------------------------------\n\nTITLE: Styling H1 Headers with Custom CSS in MkDocs\nDESCRIPTION: Defines a CSS rule to set the color of all `<h1>` elements to red. This file (e.g., `style.css`) should be placed in the documentation directory and referenced in `mkdocs.yml` via the `extra_css` option for simple theme customizations.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/customizing-your-theme.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nh1 {\n  color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding image with relative path from root\nDESCRIPTION: Embeds an image using a relative path from the root directory. The '../' navigates one level up, assuming the image is located in the parent directory of the current page.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/mkdocs/tests/integration/subpages/docs/sub1/index.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n![Image](../image.png)\n```\n\n----------------------------------------\n\nTITLE: Referencing an Image in /sub1/ with Absolute Path in Markdown\nDESCRIPTION: Shows how to use an absolute path to reference an image in the /sub1/ directory using Markdown syntax. The path starts from the root with '/'.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/mkdocs/tests/integration/subpages/docs/sub1/sub1a/index.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n![Image](/sub1/image.png)\n```\n\n----------------------------------------\n\nTITLE: Enabling Basic MkDocs Plugins (YAML)\nDESCRIPTION: Shows the basic configuration structure in `mkdocs.yml` to enable an installed plugin. This example enables the built-in 'search' plugin. Plugins are listed under the 'plugins' key.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/plugins.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  - search\n```\n\n----------------------------------------\n\nTITLE: Setting edit_uri_template in MkDocs Configuration - YAML\nDESCRIPTION: This YAML snippet illustrates the use of 'edit_uri_template' for format-string-based templating of edit URLs. 'edit_uri_template' takes Python format strings, using fields like '{path}' or '{path_noext}'. This method provides more precise control over edit URL formatting, and must not be used together with conventional 'edit_uri'.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nedit_uri: 'blob/main/docs/'\nedit_uri_template: 'blob/main/docs/{path}'\n\n```\n\n----------------------------------------\n\nTITLE: Configuring pymdownx.snippets with !relative, using config dir\nDESCRIPTION: This snippet demonstrates configuring the pymdownx.snippets extension with a base path relative to the root directory containing mkdocs.yml, using the !relative $config_dir syntax. This allows files to be included relative to the project's root.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\nmarkdown_extensions:\n  - pymdownx.snippets:\n      base_path: !relative $config_dir  # Relative to the root directory with mkdocs.yml\n```\n\n----------------------------------------\n\nTITLE: Specifying Language for Markdown Fenced Code Block (Python)\nDESCRIPTION: This snippet shows how to specify the language of a fenced code block by including the language name immediately after the opening fence (` ``` `). This allows syntax highlighters to correctly format the code within the block, as demonstrated here with Python.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/writing-your-docs.md#_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n```python\ndef fn():\n    pass\n```\n```\n\n----------------------------------------\n\nTITLE: Defining MkDocs Theme Package Layout in Text Format\nDESCRIPTION: This snippet illustrates the recommended directory structure for a MkDocs theme package. It includes the presence of MANIFEST.in and setup.py at the top level, alongside a theme directory containing an empty __init__.py file, a theme configuration file mkdocs_theme.yml, main.html template, and styles.css. This layout ensures that Python recognizes the theme directory as a package and that MkDocs can locate theme assets.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/themes.md#_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n.\n|-- MANIFEST.in\n|-- theme_name\n|   |-- __init__.py\n|   |-- mkdocs_theme.yml\n|   |-- main.html\n|   |-- styles.css\n`-- setup.py\n```\n\n----------------------------------------\n\nTITLE: Referencing Images with Absolute Paths - Markdown\nDESCRIPTION: This snippet demonstrates how to display images in Markdown using absolute paths, referring to the root of the documentation or site. This method requires that the referenced images are available at the root-level path during site generation or deployment. It is essential in environments where document locations may vary, but the site root remains consistent.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/mkdocs/tests/integration/subpages/docs/sub2/index.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n![Image](/sub1/image.png)\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n![Image](/image.png)\n```\n\n----------------------------------------\n\nTITLE: Using !relative in MkDocs YAML\nDESCRIPTION: This YAML snippet demonstrates the use of the !relative tag in a MkDocs configuration file. The tag is used to specify paths relative to the current Markdown file, the docs directory, or the configuration directory.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\n- !relative  # Relative to the directory of the current Markdown file\n- !relative $docs_dir  # Path of the docs_dir\n- !relative $config_dir  # Path of the directory that contains the main mkdocs.yml\n- !relative $config_dir/some/child/dir  # Some subdirectory of the root config directory\n```\n\n----------------------------------------\n\nTITLE: Overriding the HTML Title Block in MkDocs Theme (Jinja/Django)\nDESCRIPTION: Shows how to override the `htmltitle` block in an MkDocs theme using Jinja templating. A custom `main.html` file placed in the `custom_dir` extends `base.html` and redefines the `htmltitle` block to set a custom page title. Requires the base theme to define this block.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/customizing-your-theme.md#_snippet_6\n\nLANGUAGE: django\nCODE:\n```\n{% extends \"base.html\" %}\n\n{% block htmltitle %}\n<title>Custom title goes here</title>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Creating Generated Files in MkDocs (Python)\nDESCRIPTION: This snippet demonstrates how to create a virtual file using the `File.generated()` constructor within an MkDocs plugin or hook. It allows plugins to generate content dynamically.  The example shows a usage within the `on_files` hook to append generated files to the build process.  It requires the `MkDocsConfig`, `Files`, and `File` objects from the MkDocs framework.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/about/release-notes.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nf = File.generated(config: MkDocsConfig, src_uri: str, content: str | bytes)\nf = File.generated(config: MkDocsConfig, src_uri: str, abs_src_path: str)\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Table with Border Pipes\nDESCRIPTION: This snippet demonstrates an alternative syntax for Markdown tables, including optional leading and trailing pipe characters (`|`) on each line. This syntax functions identically to the basic version but can sometimes improve readability or alignment in the raw markdown text.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/writing-your-docs.md#_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n| First Header | Second Header | Third Header |\n| ------------ | ------------- | ------------ |\n| Content Cell | Content Cell  | Content Cell |\n| Content Cell | Content Cell  | Content Cell |\n```\n\n----------------------------------------\n\nTITLE: Configuring MkDocs for Local File Viewing Using YAML\nDESCRIPTION: This YAML snippet configures MkDocs settings for successfully viewing documentation locally via the 'file://' URL scheme. It sets 'site_url' to an empty string to avoid broken links, disables directory URLs by setting 'use_directory_urls' to false to ensure proper linking, and disables all plugins to prevent search plugin malfunctions. These settings are crucial to avoid issues caused by browser security restrictions and offline limitations.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/deploying-your-docs.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsite_url: \"\"\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\nuse_directory_urls: false\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\nplugins: []\n```\n\n----------------------------------------\n\nTITLE: Extending the Libraries Block in MkDocs Theme (Jinja/Django)\nDESCRIPTION: Illustrates how to add a custom JavaScript library (`somelib.js`) link within the `libs` template block while retaining the parent theme's libraries. It uses Jinja's `{{ super() }}` function within a custom `main.html` (in `custom_dir`) to include the original block content before adding the new script tag. The `base_url` variable ensures correct path resolution.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/customizing-your-theme.md#_snippet_8\n\nLANGUAGE: django\nCODE:\n```\n{% extends \"base.html\" %}\n\n{% block libs %}\n    {{ super() }}\n    <script src=\"{{ base_url }}/js/somelib.js\"></script>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Setting 'separator' for Table of Contents - YAML\nDESCRIPTION: Configures the 'separator' setting for the toc extension. This setting replaces whitespace in generated IDs with the specified character. In this example, it uses underscores instead of dashes.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/writing-your-docs.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nmarkdown_extensions:\n  - toc:\n      separator: \"_\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MkDocs Theme Options (YAML)\nDESCRIPTION: Provides an example of how to configure the `theme` option in `mkdocs.yml` using a key/value pair structure. Demonstrates setting the theme name, locale, specifying a custom directory for overrides, listing static templates to render, and configuring theme-specific options like `include_sidebar`.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\ntheme:\n  name: mkdocs\n  locale: en\n  custom_dir: my_theme_customizations/\n  static_templates:\n    - sitemap.html\n  include_sidebar: false\n```\n\n----------------------------------------\n\nTITLE: Embedding Image using Absolute Path in MkDocs Markdown\nDESCRIPTION: This snippet demonstrates embedding an image using an absolute path. The path '/image.png' specifies that the image is located at the root of the MkDocs site. This requires the image to be placed in the 'docs' directory root.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/mkdocs/tests/integration/subpages/docs/index.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n![Image](/image.png)\n```\n\n----------------------------------------\n\nTITLE: Markdown Anchor Example\nDESCRIPTION: This shows different ways to define anchors within markdown files, including using headings, attributes list syntax and the `a` HTML tag. Used by the validation feature.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/about/release-notes.md#_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## Heading producing an anchor\n\n## Another heading {#custom-anchor-for-heading-using-attr-list}\n\n<a id=\"raw-anchor\"></a>\n\n[](){#markdown-anchor-using-attr-list}\n```\n\n----------------------------------------\n\nTITLE: Example: Complex Plugin Config Schema with SubConfig (Python)\nDESCRIPTION: Demonstrates a more complex plugin configuration schema using `mkdocs.config.config_options`. It includes required and optional file paths (`File`), nested configuration (`SubConfig`), and lists of specific types (`ListOfItems`, `Choice`). This allows for structured and validated user configuration.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/plugins.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom mkdocs.config import base, config_options as c\n\nclass _ValidationOptions(base.Config):\n    enabled = c.Type(bool, default=True)\n    verbose = c.Type(bool, default=False)\n    skip_checks = c.ListOfItems(c.Choice(('foo', 'bar', 'baz')), default=[])\n\nclass MyPluginConfig(base.Config):\n    definition_file = c.File(exists=True)  # required\n    checksum_file = c.Optional(c.File(exists=True))  # can be None but must exist if specified\n    validation = c.SubConfig(_ValidationOptions)\n```\n\n----------------------------------------\n\nTITLE: Generating Manpages for MkDocs with click-man in Bash\nDESCRIPTION: This snippet shows how to install the \"click-man\" tool and use it to generate and install manpages for the MkDocs command-line tool. This is an optional step because manpages are not automatically included with the MkDocs pip package. The commands need to be run from a bash shell.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/installation.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install click-man\nclick-man --target path/to/man/pages mkdocs\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme Locale (YAML)\nDESCRIPTION: Shows how to modify the `mkdocs.yml` configuration file to specify the theme and the desired locale to use for testing translations. This tells MkDocs which translated files to load when serving the documentation.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/translations.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ntheme:\n  name: mkdocs\n  locale: es\n```\n\n----------------------------------------\n\nTITLE: Overriding Base Template in MkDocs with Jinja (Django Syntax)\nDESCRIPTION: Demonstrates how to create a new 'main.html' file in a custom or third-party MkDocs theme to override the primary entry point for page templates. By using Jinja template syntax, this file extends the built-in 'base.html', enabling modular customization via blocks. No external dependencies are required other than Jinja2-compatible templates; this override enables compatibility with MkDocs 0.16+. No input parameters. Outputs the merged template structure. Ensure that this file exists in your theme directory to avoid deprecation warnings or build errors; only works in environments using Jinja or Django-like templating.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/about/release-notes.md#_snippet_23\n\nLANGUAGE: django\nCODE:\n```\n{% extends \"base.html\" %}\n```\n\n----------------------------------------\n\nTITLE: Defining Hooks in mkdocs.yml as Python Scripts\nDESCRIPTION: Specifies how to include custom Python scripts as hooks in mkdocs.yml for handling plugin events. These scripts can contain event handler functions like 'on_page_markdown' to modify page content during build.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nhooks:\n  - my_hooks.py\n```\n\n----------------------------------------\n\nTITLE: Using the standardized plugin logger in Python\nDESCRIPTION: A new function get_plugin_logger() was added for plugins to log messages in a standardized way. This snippet shows how to properly implement logging in a MkDocs plugin.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/about/release-notes.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nlog = mkdocs.plugins.get_plugin_logger(__name__)\n...\nlog.info(\"Hello, world\")\n```\n\n----------------------------------------\n\nTITLE: Conditionally Including Search Markup (Django/Jinja2)\nDESCRIPTION: Demonstrates checking if the 'search' plugin is enabled in the MkDocs configuration (`config.plugins`). This allows theme templates to conditionally render search-related HTML elements only when the plugin is active.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/themes.md#_snippet_16\n\nLANGUAGE: django\nCODE:\n```\n{% if 'search' in config.plugins %}\n    search stuff here...\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Example Validation Info Message in MkDocs\nDESCRIPTION: Sample output message from MkDocs showing how link validation information is displayed. Shows an INFO message for an absolute link that was left unmodified.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/about/release-notes.md#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nINFO - Doc file 'example.md' contains an absolute link '/foo/bar/', it was left as is. Did you mean 'foo/bar.md'?\n```\n\n----------------------------------------\n\nTITLE: Reducing MkDocs Validation Strictness (YAML)\nDESCRIPTION: Demonstrates how to configure the `validation` option in `mkdocs.yml` to reduce the strictness of link validation warnings, mimicking the default behavior of MkDocs 1.4 and below. Shows setting `absolute_links`, `unrecognized_links`, and `anchors` to `ignore` to suppress corresponding diagnostic messages.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nvalidation:\n  absolute_links: ignore\n  unrecognized_links: ignore\n  anchors: ignore\n```\n\n----------------------------------------\n\nTITLE: Enabling Google Analytics v4 and Anonymizing IP in ReadTheDocs Theme YAML\nDESCRIPTION: Configures Google Analytics v4 tracking for the `readthedocs` theme and optionally anonymizes IP addresses to enhance privacy. Setting the `analytics.gtag` key activates GA4 tracking with a valid `G-` prefixed ID. The `anonymize_ip` boolean, when true, enables IP anonymization. Inputs include the tracking ID string and an optional anonymization flag. Outputs include injected analytics scripts respecting these settings.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/choosing-your-theme.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ntheme:\n  name: readthedocs\n  analytics:\n    gtag: G-ABC123\n    anonymize_ip: true\n```\n\n----------------------------------------\n\nTITLE: Installing Localization Dependencies (bash)\nDESCRIPTION: Installs the necessary extra dependencies for internationalization (i18n) required for theme localization tooling within the current Python environment. This uses pip and specifies the 'i18n' extra for the mkdocs package.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/translations.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install 'mkdocs[i18n]'\n```\n\n----------------------------------------\n\nTITLE: Overriding and Extending Configuration\nDESCRIPTION: This configuration file overrides and extends the parent configuration by adding a new extension and changing values.  It utilizes inheritance, and then merges the configuration.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\nINHERIT: ../base.yml\nsite_name: Bar Project\nsite_url: https://example.com/bar\n\nmarkdown_extensions:\n  def_list: {}\n  toc:\n    permalink: \n    separator: \"_\"\n```\n\n----------------------------------------\n\nTITLE: Updating Localization Catalogs (pybabel, bash)\nDESCRIPTION: Updates an existing localization catalog (`messages.po`) for a specific language with new or modified translatable strings from the template file (`messages.pot`). The `--ignore-obsolete` flag is used to keep existing translations for strings that might have been removed.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/translations.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npybabel update --ignore-obsolete --input-file mkdocs/themes/mkdocs/messages.pot --output-dir mkdocs/themes/mkdocs/locales -l fr\n```\n\nLANGUAGE: bash\nCODE:\n```\npybabel update --ignore-obsolete --input-file mkdocs/themes/readthedocs/messages.pot --output-dir mkdocs/themes/readthedocs/locales -l fr\n```\n\n----------------------------------------\n\nTITLE: Including Extra CSS Files in MkDocs\nDESCRIPTION: This YAML snippet shows how to configure MkDocs to include additional CSS files in the generated HTML. The `extra_css` option allows you to specify a list of CSS files, relative to the `docs_dir`, which will be linked in the HTML output.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nextra_css:\n  - css/extra.css\n  - css/second_extra.css\n```\n\n----------------------------------------\n\nTITLE: Using the script_tag Filter in MkDocs Theme Templates\nDESCRIPTION: Django/Jinja2 template code showing how to properly include JavaScript files in MkDocs themes. Uses the new script_tag filter to allow for script attribute customization.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/about/release-notes.md#_snippet_13\n\nLANGUAGE: django\nCODE:\n```\n{%- for script in config.extra_javascript %}\n  {{ script | script_tag }}\n{%- endfor %}\n```\n\n----------------------------------------\n\nTITLE: Linking to Current Page with URL Filter in Django Template\nDESCRIPTION: This simple snippet shows the recommended way to generate a link to the current page using the `page.url` variable combined with the `|url` template filter. The filter ensures the generated URL is relative to the current page, handling different site URL configurations correctly. Requires the `page.url` template variable.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/themes.md#_snippet_10\n\nLANGUAGE: django\nCODE:\n```\n<a href=\"{{ page.url|url }}\">{{ page.title }}</a>\n```\n\n----------------------------------------\n\nTITLE: Specifying Default Theme Options in mkdocs_theme.yml Using YAML\nDESCRIPTION: This YAML snippet illustrates how to set default configuration options for a MkDocs theme by defining the mkdocs_theme.yml file. The example shows a boolean option 'show_sidebar' enabled by default. This configuration file must be included in a packaged theme and exposes options to control theme behavior which can be accessed in templates or overridden by the user in their mkdocs.yml file.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/themes.md#_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nshow_sidebar: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Site Name in mkdocs.yml\nDESCRIPTION: Sets the 'site_name' configuration option within the `mkdocs.yml` file. This value is used as the title of the documentation site and is the only required setting in the configuration file.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/getting-started.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsite_name: MkLorum\n```\n\n----------------------------------------\n\nTITLE: Running MkDocs Dev Server Without LiveReload (Shell)\nDESCRIPTION: Starts the MkDocs development server using `mkdocs serve` with the `--no-livereload` flag added in v0.13.0. This disables the automatic browser refreshing feature, providing a simpler development server instance.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/about/release-notes.md#_snippet_26\n\nLANGUAGE: Shell\nCODE:\n```\nmkdocs serve --no-livereload\n```\n\n----------------------------------------\n\nTITLE: Old-style Plugin Config Definition\nDESCRIPTION: Demonstrates the old, now soft-deprecated, method of defining plugin configuration schemas in MkDocs using the `config_scheme` variable.  This approach is less type-safe and can lead to runtime errors that static type checkers won't catch. The example defines `foo` as an integer and `bar` as a string with a default value.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/about/release-notes.md#_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nfrom mkdocs import plugins\nfrom mkdocs.config import base, config_options\n\nclass MyPlugin(plugins.BasePlugin):\n    config_scheme = (\n        ('foo', config_options.Type(int)),\n        ('bar', config_options.Type(str, default=''))\n    )\n\n    def on_page_markdown(self, markdown: str, *, config: base.Config, **kwargs):\n        if self.config['foo'] < 5:\n            if config['site_url'].startswith('http:'):\n                return markdown + self.config['baz']\n```\n\n----------------------------------------\n\nTITLE: Example: User Configuration for Complex Schema (YAML)\nDESCRIPTION: Provides an example `mkdocs.yml` configuration corresponding to the complex Python schema defined previously. It shows how to specify file paths, nested options under 'validation', environment variable usage (`!ENV`), and a list for 'skip_checks'.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/plugins.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nmy_plugin:\n  definition_file: configs/test.ini  # relative to mkdocs.yml\n  validation:\n    enabled: !ENV [CI, false]\n    verbose: true\n    skip_checks:\n      - foo\n      - baz\n```\n\n----------------------------------------\n\nTITLE: Building MkDocs Site with Dirty Build Option (Command Line Invocation)\nDESCRIPTION: This command line instruction executes a MkDocs build using the '--dirty' flag, enabling a partial build that updates only pages whose source Markdown has changed. MkDocs version 0.16 or newer is required, along with a valid configuration file and documentation folder setup. No additional input beyond project setup is required. Outputs a site directory with incrementally updated HTML files. Use only for local development, as global navigation or cross-linking is not refreshed on pages not rebuilt.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/about/release-notes.md#_snippet_25\n\nLANGUAGE: text\nCODE:\n```\nmkdocs build --dirty\n```\n\n----------------------------------------\n\nTITLE: Serving MkDocs Documentation Locally (MkDocs)\nDESCRIPTION: Starts a local development server that serves the documentation site from the project directory. This allows contributors to preview changes to the documentation live in a web browser before building the final site or submitting changes.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/about/contributing.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmkdocs serve\n```\n\n----------------------------------------\n\nTITLE: Example of text output\nDESCRIPTION: This is an example of a warning produced by the anchor validation setting. It indicates a missing anchor in a linked document.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/about/release-notes.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nWARNING -  Doc file 'foo/example.md' contains a link '../bar.md#some-heading', but the doc 'foo/bar.md' does not contain an anchor '#some-heading'.\n```\n\n----------------------------------------\n\nTITLE: Migrating MkDocs Theme Configuration (YAML)\nDESCRIPTION: Demonstrates the proper way to migrate from the deprecated 'theme_dir' configuration to using the nested 'custom_dir' under the 'theme' object in YAML configuration files for MkDocs. The first block shows the old configuration, and the second reflects the recommended new format as of version 0.17+. This migration is necessary to avoid errors, as 'theme_dir' is no longer supported.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/about/release-notes.md#_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\ntheme: mkdocs\ntheme_dir: custom\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntheme:\n  name: mkdocs\n  custom_dir: custom\n```\n\n----------------------------------------\n\nTITLE: Installing MkDocs i18n Plugin - Bash\nDESCRIPTION: This Bash snippet demonstrates installing the MkDocs internationalization plugin which is required to enable theme localization. The command uses pip to install MkDocs with the optional 'i18n' extra, providing necessary dependencies for theme translation support.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/localizing-your-theme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install 'mkdocs[i18n]'\n```\n\n----------------------------------------\n\nTITLE: Verifying MkDocs Installation in Console\nDESCRIPTION: This snippet demonstrates how to check the installed version of MkDocs via the command line to verify that the installation succeeded and confirm the version number of both MkDocs and its Python environment.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/installation.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ mkdocs --version\nmkdocs, version 1.2.0 from /usr/local/lib/python3.8/site-packages/mkdocs (Python 3.8)\n```\n\n----------------------------------------\n\nTITLE: Overriding Default MkDocs exclude_docs Patterns (YAML)\nDESCRIPTION: Illustrates how to override or selectively include files that would otherwise be excluded by the default `exclude_docs` patterns in `mkdocs.yml`. Shows how to use a negated pattern (`!.assets`) to explicitly include a specific dot-directory despite the general `.*` exclusion.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nexclude_docs: |\n  # Don't exclude '.assets' although all other '.*' are excluded\n  !.assets\n```\n\n----------------------------------------\n\nTITLE: Rendering Page Table of Contents in Django Template\nDESCRIPTION: This code iterates through the `page.toc` variable to generate an unordered list representing the page's table of contents. It accesses `toc_item.url` for the link href and `toc_item.title` for the link text. The example shows displaying the top two levels of the ToC. Requires the `page.toc` template variable.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/themes.md#_snippet_8\n\nLANGUAGE: django\nCODE:\n```\n<ul>\n{% for toc_item in page.toc %}\n    <li><a href=\"{{ toc_item.url }}\">{{ toc_item.title }}</a></li>\n    {% for toc_item in toc_item.children %}\n        <li><a href=\"{{ toc_item.url }}\">{{ toc_item.title }}</a></li>\n    {% endfor %}\n{% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: GitLab Web IDE Direct Edit Links in MkDocs - YAML\nDESCRIPTION: This YAML snippet customizes the edit link to open directly in the GitLab Web IDE using an absolute edit_uri_template. The edit link includes all necessary segments for editing Markdown files within the documentation folder. No special dependencies are required, but 'edit_uri_template' should not be used in conjunction with 'edit_uri'.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nedit_uri_template: 'https://gitlab.com/-/ide/project/repo/edit/master/-/docs/{path}'\n\n```\n\n----------------------------------------\n\nTITLE: MkDocs Navigation Configuration with Custom Titles Using YAML\nDESCRIPTION: Shows how to override default navigation item titles by specifying custom titles in the mkdocs.yml nav setting. This allows developers to define user-friendly menu labels independent of file names or document titles.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/writing-your-docs.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nnav:\n  - Home: index.md\n  - About: about.md\n```\n\n----------------------------------------\n\nTITLE: Example Hook Function in Python\nDESCRIPTION: Provides a simple example of a hook function 'on_page_markdown' in Python, which replaces all instances of 'a' with 'z' in the markdown content. It demonstrates the structure of plugin event handlers without 'self'.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_35\n\nLANGUAGE: python\nCODE:\n```\ndef on_page_markdown(markdown, **kwargs):\n    return markdown.replace('a', 'z')\n```\n\n----------------------------------------\n\nTITLE: Registering a Python Package with PyPI Using Bash\nDESCRIPTION: This bash command snippet shows how to register the theme package on PyPI using the python setup.py register command. It assumes the user has a PyPI account or will be prompted to create one. This command is essential for publishing the theme to be installable via pip from PyPI.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/themes.md#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\npython setup.py register\n```\n\n----------------------------------------\n\nTITLE: MultiMarkdown Style Meta-Data Example - Text\nDESCRIPTION: Demonstrates the use of MultiMarkdown style meta-data in a Markdown document.  This style defines key-value pairs at the beginning of the document, separated by colons. The meta-data ends with the first blank line. Keywords are case-insensitive.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/writing-your-docs.md#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nTitle:   My Document\nSummary: A brief description of my document.\nAuthors: Waylan Limberg\n         Tom Christie\nDate:    January 23, 2018\nblank-value:\nsome_url: https://example.com\n\nThis is the first paragraph of the document.\n```\n\n----------------------------------------\n\nTITLE: Example Directory Structure for GitHub User/Organization Pages Deployment\nDESCRIPTION: This textual snippet illustrates a typical local directory structure setup where one directory contains the MkDocs project with source documentation and configuration, while another directory corresponds to the dedicated GitHub Pages repository for User or Organization Pages. This structure supports the workflow where deployment commands are run from the GitHub Pages repository directory and configurations are explicitly referenced.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/deploying-your-docs.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nmy-project/\n    mkdocs.yml\n    docs/\norgname.github.io/\n```\n\n----------------------------------------\n\nTITLE: Embedding Image using Relative Path in MkDocs Markdown\nDESCRIPTION: This snippet demonstrates embedding an image using a relative path. The path 'image.png' specifies that the image is located in the same directory as the Markdown file. This approach is suitable when the image and Markdown file are in the same location.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/mkdocs/tests/integration/subpages/docs/index.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n![Image](image.png)\n```\n\n----------------------------------------\n\nTITLE: Accessing Extra Context in Templates (Django/Jinja2)\nDESCRIPTION: Demonstrates how to access data defined in the `extra` configuration section within a MkDocs theme template (using Django/Jinja2 syntax). It accesses a version variable and iterates over a list of links.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/themes.md#_snippet_13\n\nLANGUAGE: django\nCODE:\n```\n{{ config.extra.version }}\n\n{% if config.extra.links %}\n  <ul>\n  {% for link in config.extra.links %}\n      <li>{{ link }}</li>\n  {% endfor %}\n  </ul>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Defining MkDocs Project File Layout Example Using Text\nDESCRIPTION: Shows a minimal MkDocs documentation project structure where the 'mkdocs.yml' configuration file sits alongside a 'docs' directory containing the main homepage Markdown file 'index.md'. This layout defines which files MkDocs processes and how URLs correspond to files.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/writing-your-docs.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmkdocs.yml\ndocs/\n    index.md\n```\n\n----------------------------------------\n\nTITLE: Embedding image with absolute path from root\nDESCRIPTION: Embeds an image using an absolute path starting from the root of the MkDocs site. This assumes the image is located at /image.png.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/mkdocs/tests/integration/subpages/docs/sub1/index.md#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n![Image](/image.png)\n```\n\n----------------------------------------\n\nTITLE: Setting Theme Locale Attribute in HTML Template Using Jinja2 Syntax\nDESCRIPTION: This snippet shows how to insert the language or locale setting from the theme configuration into the HTML <html> element's 'lang' attribute by referencing 'config.theme.locale' or specifically 'config.theme.locale.language'. The locale value comes from the theme's mkdocs_theme.yml or the user's mkdocs.yml and is often a BCP 47 language tag. The example highlights that the locale is converted to a Locale object, which can be referenced dynamically in templates.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/themes.md#_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n<html lang=\"{ config.theme.locale }\">\n```\n\n----------------------------------------\n\nTITLE: Referencing Image with Relative Path 2 in MkDocs (Markdown)\nDESCRIPTION: This Markdown snippet embeds an image using a relative path. The path './image.png' is also relative to the current document, essentially equivalent to 'image.png' if the image is in the same directory. The output renders the image in the document.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/mkdocs/tests/integration/subpages/docs/non-index.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n![Image](./image.png)\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for MkDocs Search Integration\nDESCRIPTION: Provides the required HTML markup for integrating the client-side search functionality provided by the MkDocs search plugin. The plugin's JavaScript targets the specific IDs `mkdocs-search-query` (for the input field) and `mkdocs-search-results` (for displaying results).\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/themes.md#_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<h1 id=\"search\">Search Results</h1>\n\n<form action=\"search.html\">\n  <input name=\"q\" id=\"mkdocs-search-query\" type=\"text\" >\n</form>\n\n<div id=\"mkdocs-search-results\">\n  Sorry, page not found.\n</div>\n```\n\n----------------------------------------\n\nTITLE: Cloning MkDocs Repository (Bash)\nDESCRIPTION: Provides the command-line instructions to clone the official MkDocs repository from GitHub and navigate into the created project directory using Git and standard shell commands. This is the initial step for anyone wanting to work on the MkDocs source code.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/about/contributing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/mkdocs/mkdocs.git\ncd mkdocs\n```\n\n----------------------------------------\n\nTITLE: Conditionally Displaying Homepage Title in Django Template\nDESCRIPTION: This snippet demonstrates using the `page.is_homepage` boolean attribute to alter the display of the page title. It shows how to omit the page title (or display a different one) specifically for the site's homepage, typically appending the site name for non-homepage pages. Requires the `page` template variable.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/themes.md#_snippet_11\n\nLANGUAGE: django\nCODE:\n```\n{% if not page.is_homepage %}{{ page.title }} - {% endif %}{{ site_name }}\n```\n\n----------------------------------------\n\nTITLE: Embedding image with relative path\nDESCRIPTION: Embeds an image using a relative path within a sub-page directory. The image is located in the same directory as the Markdown file.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/mkdocs/tests/integration/subpages/docs/sub1/index.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n![Image](image.png)\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in MkDocs Configuration (YAML)\nDESCRIPTION: Demonstrates how to reference environment variables within an MkDocs configuration file (e.g., `mkdocs.yml`) using the custom `!ENV` YAML tag. The first example assigns the value of `VAR_NAME` to `somekey`. The second example assigns the value of `VAR_NAME` to `otherkey`, falling back to `FALLBACK_VAR` and then to the literal string 'default value' if the preceding variables are not set.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/about/release-notes.md#_snippet_20\n\nLANGUAGE: YAML\nCODE:\n```\nsomekey: !ENV VAR_NAME\notherkey: !ENV [VAR_NAME, FALLBACK_VAR, 'default value']\n```\n\n----------------------------------------\n\nTITLE: Building and Uploading MkDocs Site to a Hosting Server Using SCP\nDESCRIPTION: This command snippet shows how to build the MkDocs static site with 'mkdocs build' and upload the generated files in the site directory to a remote server using SCP. This method applies to any hosting provider that serves static files and requires users to replace placeholders with their actual username, hostname, and server path. It assumes SCP or similar tools are configured and accessible on the user's system.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/deploying-your-docs.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmkdocs build\nscp -r ./site user@host:/path/to/server/root\n```\n\n----------------------------------------\n\nTITLE: Embedding image with relative path using ./\nDESCRIPTION: Embeds an image using a relative path with './' within a sub-page directory.  This explicitly specifies the current directory.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/mkdocs/tests/integration/subpages/docs/sub1/index.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n![Image](./image.png)\n```\n\n----------------------------------------\n\nTITLE: Showing Initial Catalog Structure (text)\nDESCRIPTION: Illustrates the directory structure created after initializing a new localization catalog for a specific language (e.g., 'es'). It shows the locale code directory containing the `LC_MESSAGES` subdirectory and the generated `messages.po` file.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/translations.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nmkdocs/themes/mkdocs/locales\n├── es\n│   └── LC_MESSAGES\n│       └── messages.po\n```\n\n----------------------------------------\n\nTITLE: Defining Extra Context in MkDocs Configuration (YAML)\nDESCRIPTION: Defines custom key-value pairs in the `mkdocs.yml` file under the `extra` key. This data is passed to the theme templates and can be used for site-wide variables like version numbers or external links.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/themes.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nextra:\n  version: 0.13.0\n  links:\n    - https://github.com/mkdocs\n    - https://docs.readthedocs.org/en/latest/builds.html#mkdocs\n    - https://www.mkdocs.org/\n```\n\n----------------------------------------\n\nTITLE: Referencing Images with Absolute Paths in Markdown\nDESCRIPTION: This snippet shows how to use an absolute path in Markdown to reference an image located in a specific subdirectory or at the project root. It requires that the documentation generator (e.g., MkDocs) serves static assets using these absolute URL paths. Use this method if image assets are intended to be shared across multiple pages from a fixed location. Inputs: none; Output: embedded image.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/mkdocs/tests/integration/subpages/docs/sub1/non-index.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n![Image](/sub1/image.png)\n![Image](/image.png)\n```\n\n----------------------------------------\n\nTITLE: Referencing Images in Parent Directories in Markdown\nDESCRIPTION: This snippet illustrates embedding an image using a relative path that traverses up one directory, suitable when the image is located outside the current page's folder (e.g., in a parent directory). Ensure that referencing files in parent directories is allowed by your documentation generator, as some tools restrict access for security reasons. Inputs: none; Output: embedded image.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/mkdocs/tests/integration/subpages/docs/sub1/non-index.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n![Image](../image.png)\n```\n\n----------------------------------------\n\nTITLE: Backwards-Compatible Extra JavaScript Inclusion - Django\nDESCRIPTION: This Django template demonstrates a backwards-compatible way to include extra JavaScript files from `config.extra_javascript`. It checks if the `script.path` attribute exists (indicating MkDocs 1.5 or later) and uses the `script_tag` filter if it does. Otherwise, it falls back to the older method of including the script directly, examining the filename extension to assign the `type` attribute. This ensures compatibility with older MkDocs versions.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/themes.md#_snippet_5\n\nLANGUAGE: django\nCODE:\n```\n{%- for script in config.extra_javascript %}\n  {%- if script.path %}  {# Detected MkDocs 1.5+ which has `script.path` and `script_tag` #}\n    {{ script | script_tag }}\n  {%- else %}  {# Fallback - examine the file name directly #}\n    <script src=\"{{ script | url }}\"{% if script.endswith(\".mjs\") %} type=\"module\"{% endif %}></script>\n  {%- endif %}\n{%- endfor %}\n```\n\n----------------------------------------\n\nTITLE: Referencing Images with Relative Paths in Markdown\nDESCRIPTION: This snippet demonstrates how to embed an image using a relative path, referencing a file (image.png) located in the current directory or a subfolder. No external dependencies are required; the only prerequisite is that the referenced image exists at the specified location. The Markdown image syntax is used here, and the image is expected to render inline if the documentation generator supports Markdown parsing. Adjust the path as required for your project's directory structure. Inputs: none; Output: embedded image.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/mkdocs/tests/integration/subpages/docs/sub1/non-index.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n![Image](image.png)\n![Image](./image.png)\n```\n\n----------------------------------------\n\nTITLE: Defining edit_uri as Absolute URL in MkDocs - YAML\nDESCRIPTION: This YAML example demonstrates that 'edit_uri' may be set to an absolute URL, not only a path relative to repo_url. When using this configuration, edit links point directly to the provided absolute path, allowing greater flexibility with external repositories or custom URLs. Ensure 'edit_uri' is a valid URL if used in this mode.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nedit_uri: https://example.com/project/repo/blob/main/docs/\n\n```\n\n----------------------------------------\n\nTITLE: Referencing Image in Sibling Subdirectory using Relative Path (Markdown)\nDESCRIPTION: This Markdown snippet demonstrates how to include an image located in a sibling subdirectory (`../sub1/`) using a relative path. This syntax is used when the Markdown file is in one subdirectory and the image is in another subdirectory under the same parent.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/mkdocs/tests/integration/subpages/docs/sub2/non-index.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![Image](../sub1/image.png)\n```\n\n----------------------------------------\n\nTITLE: Example of Adding Translation Blocks in Jinja2 Templates Using Django Syntax\nDESCRIPTION: This diff example illustrates how to wrap textual content within a template with 'trans' and 'endtrans' tags to mark strings for translation. The example modifies an existing base.html template by replacing a static heading string with a translatable block. This is required to enable translation extraction tools to identify strings for localization purposes in a MkDocs theme.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/themes.md#_snippet_27\n\nLANGUAGE: diff\nCODE:\n```\n--- a/basic_theme/base.html\n+++ b/basic_theme/base.html\n@@ -88,7 +88,7 @@\n\n <body>\n\n-  <h1>This is an example theme for MkDocs.</h1>\n+  <h1>{% trans %}This is an example theme for MkDocs.{% endtrans %}</h1>\n\n   <p>\n     It is designed to be read by looking at the theme HTML which is heavily\n```\n\n----------------------------------------\n\nTITLE: Configuring Nav Validation in MkDocs YAML Configuration\nDESCRIPTION: YAML configuration to enable warnings for files not included in navigation and absolute links in the navigation. This makes MkDocs warn about files omitted from the navigation structure.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/about/release-notes.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nvalidation:\n  nav:\n    omitted_files: warn\n    absolute_links: warn\n```\n\n----------------------------------------\n\nTITLE: Setting edit_uri with Query String in MkDocs Configuration - YAML\nDESCRIPTION: This YAML snippet demonstrates assigning the 'edit_uri' field with a query string for repository hosts that use query parameters to access files in the documentation. It requires a valid repo_url and is used for enabling direct page editing links in supported themes. 'edit_uri' expects a string value, and this method supports hosts with query-based navigation.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Query string example\nedit_uri: '?query=root/path/docs/'\n\n```\n\n----------------------------------------\n\nTITLE: Slightly More Modern, But Obsolete JavaScript Inclusion - Django\nDESCRIPTION: This Django template shows a slightly more modern, but still obsolete, way to include extra JavaScript files from `config.extra_javascript`. It uses the `url` filter, but it still ignores the extra attributes of each JavaScript entry (e.g., `type`, `async`, `defer`).\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/themes.md#_snippet_3\n\nLANGUAGE: django\nCODE:\n```\n{%- for path in config.extra_javascript %}\n  <script src=\"{{ path | url }}\"></script>\n{%- endfor %}\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for MkDocs Landing Page\nDESCRIPTION: HTML markup that structures the landing page for MkDocs documentation. It includes navigation buttons, feature cards, and descriptive content about MkDocs capabilities organized in a responsive grid layout.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/index.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"text-center\">\n<a href=\"getting-started/\" class=\"btn btn-primary\" role=\"button\">Getting Started</a>\n<a href=\"user-guide/\" class=\"btn btn-primary\" role=\"button\">User Guide</a>\n</div>\n\n<div class=\"pt-2 pb-4 px-4 my-4 bg-body-tertiary rounded-3\">\n<h2 class=\"display-4 text-center\">Features</h2>\n\n<div class=\"row\">\n  <div class=\"col-sm-6\">\n    <div class=\"card mb-4\">\n      <div class=\"card-body\">\n        <h3 class=\"card-title\">Great themes available</h3>\n        <p class=\"card-text\">\n            There's a stack of good looking <a href=\"user-guide/choosing-your-theme\">themes</a> available for MkDocs.\n            Choose between the built in themes:\n            <a href=\"user-guide/choosing-your-theme/#mkdocs\">mkdocs</a> and\n            <a href=\"user-guide/choosing-your-theme/#readthedocs\">readthedocs</a>,\n            select one of the third-party themes\n            (on the <a href=\"https://github.com/mkdocs/mkdocs/wiki/MkDocs-Themes\">MkDocs Themes</a> wiki page\n            as well as the <a href=\"https://github.com/mkdocs/catalog#-theming\">MkDocs Catalog</a>),\n            or <a href=\"dev-guide/themes/\">build your own</a>.\n        </p>\n      </div>\n    </div>\n  </div>\n  <div class=\"col-sm-6\">\n    <div class=\"card mb-4\">\n      <div class=\"card-body\">\n        <h3 class=\"card-title\">Easy to customize</h3>\n        <p class=\"card-text\">\n            Get your project documentation looking just the way you want it by\n            <a href=\"user-guide/customizing-your-theme/\">customizing your\n            theme</a> and/or installing some <a\n            href=\"user-guide/configuration/#plugins\">plugins</a>. Modify\n            Markdown's behavior with <a\n            href=\"user-guide/configuration/#markdown_extensions\">Markdown\n            extensions</a>. Many <a\n            href=\"user-guide/configuration/\">configuration options</a> are\n            available.\n        </p>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-sm-6\">\n    <div class=\"card\">\n      <div class=\"card-body\">\n        <h3 class=\"card-title\">Preview your site as you work</h3>\n        <p class=\"card-text\">\n            The built-in dev-server allows you to preview your documentation\n            as you're writing it. It will even auto-reload and refresh your\n            browser whenever you save your changes.\n        </p>\n      </div>\n    </div>\n  </div>\n  <div class=\"col-sm-6\">\n    <div class=\"card\">\n      <div class=\"card-body\">\n        <h3 class=\"card-title\">Host anywhere</h3>\n        <p class=\"card-text\">\n            MkDocs builds completely static HTML sites that you can host on\n            GitHub Pages, Amazon S3, or <a\n            href=\"user-guide/deploying-your-docs/\">anywhere</a> else you\n            choose.\n        </p>\n      </div>\n    </div>\n  </div>\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Theme Directory - YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the `mkdocs.yml` file to use a custom theme directory. It sets the `theme.name` to `null` and specifies the relative path to the custom theme directory using `theme.custom_dir`.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/themes.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntheme:\n  name: null\n  custom_dir: 'custom_theme/'\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Extensions (Alternative Syntax)\nDESCRIPTION: This YAML snippet presents an alternative syntax for configuring Markdown extensions in MkDocs, using key-value pairs instead of list items. This syntax is required when overriding options via inheritance and involves providing an empty value (`{}`) for extensions without specific options.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nmarkdown_extensions:\n  smarty: {}\n  toc:\n    permalink: true\n  sane_lists: {}\n```\n\n----------------------------------------\n\nTITLE: Showing PO File Entry Structure (text)\nDESCRIPTION: Provides an example of a single translation entry within a Portable Object (`.po`) file. It shows the original English string (`msgid`) and where the corresponding translation string (`msgstr`) should be added.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/translations.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nmsgid \"Next\"\nmsgstr \"Siguiente\"\n```\n\n----------------------------------------\n\nTITLE: Running MkDocs in Dirty Reload Mode (Command Line Invocation)\nDESCRIPTION: Provides the command line syntax for starting an MkDocs development server with the 'dirty reload' option. This mode rebuilds only changed Markdown files based on modification times, enabling faster development cycles. Requires MkDocs 0.16+ installed and a valid 'mkdocs.yml' configuration. No arguments beyond those shown are required, but additional flags may be appended as needed. The command triggers a live-reload server with partial builds. Should not be used for production deployment as navigation and linking do not update on unchanged pages.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/about/release-notes.md#_snippet_24\n\nLANGUAGE: text\nCODE:\n```\nmkdocs serve --dirtyreload\n```\n\n----------------------------------------\n\nTITLE: Creating a New MkDocs Project (Shell)\nDESCRIPTION: The `mkdocs new` command scaffolds a new MkDocs project structure. As of v0.12.0, it includes a fix to prevent overwriting existing `index.md` files in the target directory.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/about/release-notes.md#_snippet_30\n\nLANGUAGE: Shell\nCODE:\n```\nmkdocs new\n```\n\n----------------------------------------\n\nTITLE: Configuring Highlight.js Additional Languages for ReadTheDocs Theme in YAML\nDESCRIPTION: Enables additional syntax highlighting languages for the `readthedocs` MkDocs theme using the `hljs_languages` list. Requires `highlightjs` enabled and highlight.js library support. This enhances code block rendering for languages beyond the default set. Inputs are language identifiers, outputs are enhanced visual code syntax highlighting.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/choosing-your-theme.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntheme:\n  name: readthedocs\n  highlightjs: true\n  hljs_languages:\n    - yaml\n    - rust\n```\n\n----------------------------------------\n\nTITLE: Downloading Content for a New Page using curl\nDESCRIPTION: Uses the `curl` command-line tool to download Markdown content from a specified URL and save it into a new file named 'about.md' within the 'docs' directory. This adds a new source page to the project.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/getting-started.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://jaspervdj.be/lorem-markdownum/markdown.txt' > docs/about.md\n```\n\n----------------------------------------\n\nTITLE: Obsolete Extra JavaScript Inclusion - Django\nDESCRIPTION: This Django template shows an obsolete way to include extra JavaScript files defined in the top-level `extra_javascript` list (instead of `config.extra_javascript`). It iterates through the `extra_javascript` list and includes each file using a `<script>` tag. This method is not recommended and it is important to use `config.extra_javascript` instead.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/themes.md#_snippet_2\n\nLANGUAGE: django\nCODE:\n```\n{%- for path in extra_javascript %}\n  <script src=\"{{ path }}\"></script>\n{%- endfor %}\n```\n\n----------------------------------------\n\nTITLE: Basic Main HTML Template - Django\nDESCRIPTION: This Django template provides a basic `main.html` file for an MkDocs theme. It includes placeholders for the page title, site name, CSS files specified in `config.extra_css`, the page content (`page.content`), and JavaScript files specified in `config.extra_javascript`.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/themes.md#_snippet_1\n\nLANGUAGE: django\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>{% if page.title %}{{ page.title }} - {% endif %}{{ config.site_name }}</title>\n    {%- for path in config.extra_css %}\n      <link href=\"{{ path | url }}\" rel=\"stylesheet\">\n    {%- endfor %}\n  </head>\n  <body>\n    {{ page.content }}\n\n    {%- for script in config.extra_javascript %}\n      {{ script | script_tag }}\n    {%- endfor %}\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Generating MkDocs CLI Documentation with mkdocs-click\nDESCRIPTION: This directive configures the `mkdocs-click` extension to automatically generate documentation for the MkDocs CLI. It targets the 'cli' command within the 'mkdocs.__main__' Python module, sets the program name displayed as 'mkdocs', renders the output in a table format, and includes a list of available subcommands.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/cli.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n::: mkdocs-click\n    :module: mkdocs.__main__\n    :command: cli\n    :prog_name: mkdocs\n    :style: table\n    :list_subcommands: true\n```\n\n----------------------------------------\n\nTITLE: Example of YAML configuration\nDESCRIPTION: This snippet is an example of configuring jQuery in mkdocs.yml to include an external script for theme integration. It is used for adding a script to the theme for functionalities like dark mode.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/about/release-notes.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nextra_javascript:\n  - https://code.jquery.com/jquery-3.7.1.min.js\n```\n\n----------------------------------------\n\nTITLE: Configuring MkDocs not_in_nav Exclusion (YAML)\nDESCRIPTION: Shows how to use the `not_in_nav` configuration option in `mkdocs.yml` to prevent MkDocs from issuing warnings about documentation files that are included in the site build but intentionally not listed in the main navigation (`nav`). Demonstrates adding a specific file pattern relative to `docs_dir` to the exclusion list.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nnav:\n  - Foo: foo.md\n  - Bar: bar.md\n\nnot_in_nav: |\n  /private.md\n```\n\n----------------------------------------\n\nTITLE: Installing MkDocs with Internationalization Support (Bash)\nDESCRIPTION: Installs the MkDocs package along with its optional internationalization (i18n) dependencies using pip. This command is necessary to enable theme localization features introduced in version 1.2.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/about/release-notes.md#_snippet_19\n\nLANGUAGE: Bash\nCODE:\n```\npip install 'mkdocs[i18n]'\n```\n\n----------------------------------------\n\nTITLE: Configuring Link Validation in MkDocs YAML Configuration\nDESCRIPTION: YAML configuration to disable link validation features. Shows how to configure MkDocs to ignore absolute links and unrecognized links when building documentation sites.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/about/release-notes.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nvalidation:\n  absolute_links: ignore\n  unrecognized_links: ignore\n```\n\n----------------------------------------\n\nTITLE: Viewing the Built Site Directory Contents\nDESCRIPTION: Shows the typical contents of the 'site' directory after running `mkdocs build`, using the `ls` command (output may vary slightly based on theme and content). This includes HTML files, theme assets (CSS, JS, fonts), search index, and sitemap.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/getting-started.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ ls site\nabout  fonts  index.html  license  search.html\ncss    img    js          mkdocs   sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Default MkDocs exclude_docs Patterns (YAML)\nDESCRIPTION: Provides the default patterns implicitly applied to the `exclude_docs` configuration in `mkdocs.yml`. These patterns ensure that dot-files and directories (`.*`) and the top-level `templates` directory (`/templates/`) are excluded from the built site by default.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nexclude_docs: |\n  .*\n  /templates/\n```\n\n----------------------------------------\n\nTITLE: Converting Python Objects to JSON for JavaScript (Django/Jinja2)\nDESCRIPTION: Shows how to use the `tojson` filter to safely convert a Python variable (like `page.title`) into a JSON string suitable for embedding within a JavaScript `<script>` tag. The `safe` filter is often used to prevent double-escaping of the resulting JSON string.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/themes.md#_snippet_15\n\nLANGUAGE: django\nCODE:\n```\n<script>\n    var mkdocs_page_name = {{ page.title|tojson|safe }};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Referencing Images with Relative Paths from Root (MkDocs)\nDESCRIPTION: This snippet shows how to include an image using relative pathing when referencing it from the root directory of the MkDocs project. The syntax `![Image](../../image.png)` describes the image location. The only prerequisite is an active MkDocs project with the image correctly located. The output will be a rendered image on the page.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/mkdocs/tests/integration/subpages/docs/sub1/sub1a/non-index.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n![Image](../../image.png)\n```\n\n----------------------------------------\n\nTITLE: Example: User Configuration for ListOfItems/SubConfig (YAML)\nDESCRIPTION: Shows the corresponding user configuration in `mkdocs.yml` for the schema defined with `ListOfItems(SubConfig)`. It demonstrates how to define a list of objects under 'add_rectangles', where each object has 'width' and 'height' properties.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/plugins.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nmy_plugin:\n  add_rectangles:\n    - width: 5\n      height: 7\n    - width: 12\n      height: 2\n```\n\n----------------------------------------\n\nTITLE: Previewing MkDocs documentation locally\nDESCRIPTION: This command starts a local server to preview documentation stored in the 'docs/' directory, assisting contributors in verifying documentation updates before publishing.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhatch run docs:serve\n```\n\n----------------------------------------\n\nTITLE: Configuring Inheritance in MkDocs (YAML)\nDESCRIPTION: Shows how to use the `INHERIT` key within an MkDocs configuration file (e.g., `mkdocs.yml`) to inherit settings from a parent configuration file. The value should be the relative path to the parent YAML file. The settings from the parent and child files are deep merged.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/about/release-notes.md#_snippet_21\n\nLANGUAGE: YAML\nCODE:\n```\nINHERIT: path/to/base.yml\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Theme Directory with Bash\nDESCRIPTION: A simple Bash command to create a new directory named `custom_theme`. This directory is intended to hold files that will override the parent theme's files when specified in the `theme.custom_dir` setting in `mkdocs.yml`.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/customizing-your-theme.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir custom_theme\n```\n\n----------------------------------------\n\nTITLE: Referencing Images with Absolute Path from Root (MkDocs)\nDESCRIPTION: This snippet shows how to embed an image by using absolute pathing, starting from the root. The Markdown syntax is `![Image](/image.png)`. The only prerequisite is the configured MkDocs project and correct image location. The rendered output is the image on the page.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/mkdocs/tests/integration/subpages/docs/sub1/sub1a/non-index.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n![Image](/image.png)\n```\n\n----------------------------------------\n\nTITLE: Using Generated Files in MkDocs (Python)\nDESCRIPTION: This code shows an example of how a generated file can be added using the  `on_files` hook.  It highlights how to use the `File.generated()` constructor. This example demonstrates how to insert a file with content. The `File.generated` constructor simplifies the process of adding virtual files compared to creating them manually.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/about/release-notes.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef on_files(files: Files, config: MkDocsConfig):\n    files.append(File.generated(config, 'fake/path.md', content=\"Hello, world!\"))\n```\n\n----------------------------------------\n\nTITLE: Setting 'baselevel' for Table of Contents - YAML\nDESCRIPTION: Configures the 'baselevel' setting for the toc extension in `mkdocs.yml`. This setting adjusts header levels automatically to fit within the HTML template hierarchy.  In this case, it will increase all Markdown headers by one level.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/writing-your-docs.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nmarkdown_extensions:\n  - toc:\n      baselevel: 2\n```\n\n----------------------------------------\n\nTITLE: Compiling Localization Catalogs (pybabel, bash)\nDESCRIPTION: Compiles the human-readable Portable Object (`messages.po`) file into a machine-readable binary file (`messages.mo`). This compiled file is used by the theme to display translated strings at runtime. The `--statistics` flag provides compilation details.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/translations.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npybabel compile --statistics --directory mkdocs/themes/mkdocs/locales -l es\n```\n\nLANGUAGE: bash\nCODE:\n```\npybabel compile --statistics --directory mkdocs/themes/readthedocs/locales -l es\n```\n\n----------------------------------------\n\nTITLE: Overriding Locale to Language-Only in HTML Template with Jinja2 Syntax\nDESCRIPTION: This snippet demonstrates overriding the locale attribute to output only the language code portion by accessing the 'language' property of the Locale object in the theme config. This is useful when the territory part of the locale is not desired in the lang attribute. The example renders the lang attribute as just the language (e.g., 'fr') instead of language plus territory (e.g., 'fr_CA').\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/themes.md#_snippet_26\n\nLANGUAGE: html\nCODE:\n```\n<html lang=\"{ config.theme.locale.language }\">\n```\n\n----------------------------------------\n\nTITLE: Defining Keyboard Shortcuts for MkDocs Theme in YAML\nDESCRIPTION: Specifies numeric key codes to customize keyboard shortcuts for navigation and UI interactions in the MkDocs `mkdocs` theme. Keys include `help` (show help modal), `next` (next page), `previous` (previous page), and `search` (search modal). This provides better accessibility by mapping to desired keyboard inputs. Numeric values correspond to key codes (e.g., 191 for `?`). Inputs are key codes per shortcut, outputs are overridden shortcut mappings. Requires client browser to support respective key events.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/choosing-your-theme.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntheme:\n  name: mkdocs\n  shortcuts:\n    help: 191    # ?\n    next: 78     # n\n    previous: 80 # p\n    search: 83   # s\n```\n\n----------------------------------------\n\nTITLE: Running MkDocs Test Suite (Pytest)\nDESCRIPTION: Executes the project's automated test suite using the pytest framework. Running this command is essential to verify that any code changes made do not break existing functionality and that the project's core features remain stable.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/about/contributing.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Creating reserved word-compatible Config options in Python\nDESCRIPTION: Shows how to create Config members that avoid clashing with Python's reserved words by stripping a trailing underscore from the member's name, allowing configuration keys like 'async'.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/about/release-notes.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass ExampleConfig(Config):\n    async_ = Type(bool, default=False)\n```\n\n----------------------------------------\n\nTITLE: Extracting translation messages from MkDocs themes\nDESCRIPTION: Commands to update the POT files for MkDocs themes to facilitate localization, by extracting translatable strings from theme templates using Babel, supporting multilingual documentation.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npybabel extract --project=MkDocs --copyright-holder=MkDocs --msgid-bugs-address='https://github.com/mkdocs/mkdocs/issues' --no-wrap --version=\"$(hatch version)\" --mapping-file mkdocs/themes/babel.cfg --output-file mkdocs/themes/mkdocs/messages.pot mkdocs/themes/mkdocs\npybabel extract --project=MkDocs --copyright-holder=MkDocs --msgid-bugs-address='https://github.com/mkdocs/mkdocs/issues' --no-wrap --version=\"$(hatch version)\" --mapping-file mkdocs/themes/babel.cfg --output-file mkdocs/themes/readthedocs/messages.pot mkdocs/themes/readthedocs\n```\n\n----------------------------------------\n\nTITLE: Upgrading pip Using Bash\nDESCRIPTION: This command upgrades the pip package manager to the latest version using a bash shell environment. It assumes that pip is already installed and accessible. Keeping pip updated ensures compatibility with newer Python packages and features.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/installation.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pip\n```\n\n----------------------------------------\n\nTITLE: Default MkDocs Validation Settings (YAML)\nDESCRIPTION: Provides the default configuration structure and values for the `validation` option in `mkdocs.yml` as of version 1.6. This nested configuration allows setting strictness levels (`warn`, `info`, `ignore`) for various navigation and link validation diagnostics, serving as a baseline for custom configurations.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/configuration.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nvalidation:\n  nav:\n    omitted_files: info\n    not_found: warn\n    absolute_links: info\n  links:\n    not_found: warn\n    anchors: info\n    absolute_links: info\n    unrecognized_links: info\n```\n\n----------------------------------------\n\nTITLE: Fixed Plugin Config Definition\nDESCRIPTION: Shows the corrected version of the new-style plugin configuration definition, addressing the type errors identified in the previous example. This version includes checks for `None` values and uses the `or ''` idiom to handle potentially `None` `site_url` values, making the code type-safe and robust.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/about/release-notes.md#_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nclass MyPlugin(plugins.BasePlugin[MyPluginConfig]):\n    def on_page_markdown(self, markdown: str, *, config: defaults.MkDocsConfig, **kwargs):\n        if self.config.foo is not None and self.config.foo < 5:  # OK, `int < int` is valid.\n            if (config.site_url or '').startswith('http:'):  # OK, `str.startswith(str)` is valid.\n                return markdown + self.config.bar  # OK, `str + str` is valid.\n```\n\n----------------------------------------\n\nTITLE: Running MkDocs test suite with Hatch\nDESCRIPTION: These commands run the test suites (unit and integration tests) for MkDocs across supported Python versions, helping verify code correctness and compatibility in various environments.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhatch run test:test\nhatch run integration:test\n```\n\n----------------------------------------\n\nTITLE: Using Theme Configuration Options in Jinja2 Template for MkDocs in Django Template Syntax\nDESCRIPTION: This snippet demonstrates how to conditionally display HTML (e.g., a sidebar) based on a theme configuration option accessed via the 'config.theme' context variable inside a Jinja2-compatible Django template. It shows the use of an 'if' conditional to check if 'show_sidebar' is true before rendering the sidebar div. This connects theme configuration YAML options with template rendering behavior.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/themes.md#_snippet_24\n\nLANGUAGE: django\nCODE:\n```\n{% if config.theme.show_sidebar %}\n<div id=\"sidebar\">...</div>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple MkDocs Plugins in setuptools - Python\nDESCRIPTION: This example extends the setup.py configuration to register multiple MkDocs plugin classes in one package. Each entry in the 'mkdocs.plugins' list maps a unique plugin name to its corresponding Python class, allowing distribution of several plugins within the same module. This pattern is suitable for plugin suites or when providing related functionality under distinct plugin names. Dependencies and constraints mirror the single-plugin example; users must still enable plugins in the MkDocs config for activation.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/plugins.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nentry_points={\n    'mkdocs.plugins': [\n        'featureA = path.to.my_plugins:PluginA',\n        'featureB = path.to.my_plugins:PluginB'\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Getting General MkDocs Help\nDESCRIPTION: Displays the main help message for the MkDocs command-line tool using the `--help` flag. This lists available commands (like new, build, serve) and global options.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/getting-started.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmkdocs --help\n```\n\n----------------------------------------\n\nTITLE: Referencing Images with Absolute Paths (MkDocs)\nDESCRIPTION: This Markdown snippet illustrates referencing an image using an absolute path within an MkDocs project. The syntax `![Image](/sub1/image.png)` specifies the image's path relative to the site's root directory. Requires an MkDocs project setup with an image at the specified absolute location. The output is an embedded image within the rendered page.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/mkdocs/tests/integration/subpages/docs/sub1/sub1a/non-index.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n![Image](/sub1/image.png)\n```\n\n----------------------------------------\n\nTITLE: Accessing Page Metadata in Django Template\nDESCRIPTION: This snippet demonstrates how to access custom variables defined in the page's metadata block (e.g., YAML or key: value syntax at the top of the Markdown file). It iterates through a list specified under the `source` key in `page.meta` and creates links for each item. Requires the `page.meta` template variable and metadata defined in the source file.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/themes.md#_snippet_9\n\nLANGUAGE: django\nCODE:\n```\n{% for filename in page.meta.source %}\n  <a class=\"github\" href=\"https://github.com/.../{{ filename }}\">\n    <span class=\"label label-info\">{{ filename }}</span>\n  </a>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Referencing Images with Relative Paths (MkDocs)\nDESCRIPTION: This Markdown snippet demonstrates referencing an image using a relative path. It assumes the image is located in a directory outside of the current page's directory. The syntax `![Image](../image.png)` specifies the image's name and path relative to the current file. No specific dependencies are required other than a correctly configured MkDocs project with an image file at the specified location. The output is an embedded image within the rendered page.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/mkdocs/tests/integration/subpages/docs/sub1/sub1a/non-index.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n![Image](../image.png)\n```\n\n----------------------------------------\n\nTITLE: Referencing an Image in Root Directory with Absolute Path in Markdown\nDESCRIPTION: Shows how to use an absolute path to reference an image in the root directory using Markdown syntax. The path starts from the root with '/'.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/mkdocs/tests/integration/subpages/docs/sub1/sub1a/index.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n![Image](/image.png)\n```\n\n----------------------------------------\n\nTITLE: Referencing an Image in Root Directory with Relative Path in Markdown\nDESCRIPTION: Shows how to use a relative path to reference an image in the root directory using Markdown syntax. The path goes up two directory levels using '../../'.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/mkdocs/tests/integration/subpages/docs/sub1/sub1a/index.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n![Image](../../image.png)\n```\n\n----------------------------------------\n\nTITLE: Project Structure for Adding Custom JavaScript (Text)\nDESCRIPTION: Shows a simplified project structure focusing on the placement of a custom JavaScript library (`somelib.js`) within the `custom_theme/js/` directory. This structure is preparatory to linking the script in the HTML templates.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/customizing-your-theme.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n- docs/\n- custom_theme/\n  - js/\n    - somelib.js\n- config.yml\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Fenced Code Block in Markdown\nDESCRIPTION: This snippet demonstrates the fundamental syntax for creating a fenced code block using the Markdown fenced code blocks extension. It is defined by enclosing content within matching start and end fence lines, each containing three or more backtick characters.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/user-guide/writing-your-docs.md#_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n```\nFenced code blocks are like Standard\nMarkdown’s regular code blocks, except that\nthey’re not indented and instead rely on\nstart and end fence lines to delimit the\ncode block.\n```\n```\n\n----------------------------------------\n\nTITLE: Providing base_url to JavaScript for Search (HTML/Django/Jinja2)\nDESCRIPTION: Embeds the MkDocs site's `base_url` into a JavaScript variable within the theme's HTML. This is essential for the search plugin's JavaScript to correctly construct URLs to search results. The `tojson` filter ensures the URL is safely encoded for JavaScript.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/themes.md#_snippet_17\n\nLANGUAGE: django\nCODE:\n```\n<script>var base_url = {{ base_url|tojson }};</script>\n```\n\n----------------------------------------\n\nTITLE: Embedding Image using Relative Path (with './') in MkDocs Markdown\nDESCRIPTION: This snippet demonstrates embedding an image using a relative path with the './' prefix. The path './image.png' explicitly specifies that the image is located in the same directory as the Markdown file. This notation is equivalent to 'image.png'.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/mkdocs/tests/integration/subpages/docs/index.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n![Image](./image.png)\n```\n\n----------------------------------------\n\nTITLE: Initializing Localization Catalogs (pybabel, bash)\nDESCRIPTION: Creates a new localization catalog (`messages.po`) for a specified language locale from a template file (`messages.pot`) within the theme's `locales` directory. This command is run for each built-in theme (`mkdocs` and `readthedocs`) you wish to translate.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/translations.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npybabel init --input-file mkdocs/themes/mkdocs/messages.pot --output-dir mkdocs/themes/mkdocs/locales -l es\n```\n\nLANGUAGE: bash\nCODE:\n```\npybabel init --input-file mkdocs/themes/readthedocs/messages.pot --output-dir mkdocs/themes/readthedocs/locales -l es\n```\n\n----------------------------------------\n\nTITLE: Registering a MkDocs Plugin Using setuptools Entry Points - Python\nDESCRIPTION: This snippet shows how to declare a MkDocs plugin using the entry_points argument in a setup.py script for packaging and distribution. The configuration registers a plugin or multiple plugins under the 'mkdocs.plugins' group, mapping user-facing plugin names to the Python import path of the plugin class. Dependencies include setuptools and a correctly implemented plugin class (such as one subclassed from BasePlugin). The input is a dictionary to setup() specifying entry_points; the output is a distributable package recognized by MkDocs. Each plugin must be separately registered and does not activate until enabled in the user's MkDocs config.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/plugins.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nentry_points={\n    'mkdocs.plugins': [\n        'pluginname = path.to.some_plugin:SomePluginClass',\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Typed MkDocs Configuration in 'on_config' (MkDocs 1.4+) (Python)\nDESCRIPTION: Shows the MkDocs 1.4+ type-safe way to modify the global configuration in the `on_config` event. It uses type hinting (`config: MkDocsConfig`) and attribute access (`config.theme.static_templates`) for better code clarity and safety. The modified config object must be returned.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/plugins.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef on_config(self, config: MkDocsConfig):\n    config.theme.static_templates.add('my_template.html')\n    return config\n```\n\n----------------------------------------\n\nTITLE: Installing MkDocs Development Version via pip\nDESCRIPTION: This shell command installs the latest development version of MkDocs directly from its GitHub repository using pip. It is useful for testing new features or bug fixes that are not yet released.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install git+https://github.com/mkdocs/mkdocs.git\n```\n\n----------------------------------------\n\nTITLE: Installing MkDocs Development Dependencies (Pip)\nDESCRIPTION: Installs the MkDocs package in editable mode along with all its development dependencies specified in the `dev` extra requirements. The `--editable` flag allows local code changes to be reflected without needing to reinstall.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/about/contributing.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install --editable .[dev]\n```\n\n----------------------------------------\n\nTITLE: Running all checks with Hatch for MkDocs development\nDESCRIPTION: This command executes all necessary code quality and testing checks for MkDocs using Hatch, a dependency and command management tool, ensuring code adheres to style guides and passes tests before contribution.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhatch run all\n```\n\n----------------------------------------\n\nTITLE: Iterating Navigation Objects in Django Template\nDESCRIPTION: This snippet demonstrates how to loop through the `nav` variable to render the site's primary navigation. It checks for nested children (`nav_item.children`) to create multi-level lists and applies a 'current' class based on the `active` attribute. It uses the `url` filter to ensure correct link paths. Requires the `nav` template variable.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/themes.md#_snippet_7\n\nLANGUAGE: django\nCODE:\n```\n{% if nav|length > 1 %}\n    <ul>\n    {% for nav_item in nav %}\n        {% if nav_item.children %}\n            <li>{{ nav_item.title }}\n                <ul>\n                {% for nav_item in nav_item.children %}\n                    <li class=\"{% if nav_item.active %}current{% endif %}\">\n                        <a href=\"{{ nav_item.url|url }}\">{{ nav_item.title }}</a>\n                    </li>\n                {% endfor %}\n                </ul>\n            </li>\n        {% else %}\n            <li class=\"{% if nav_item.active %}current{% endif %}\">\n                <a href=\"{{ nav_item.url|url }}\">{{ nav_item.title }}</a>\n            </li>\n        {% endif %}\n    {% endfor %}\n    </ul>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Ignored Theme Files Example - Text\nDESCRIPTION: This text snippet demonstrates examples of file and directory names that will be ignored by MkDocs when building the site from the theme. All files or directories beginning with a dot are ignored.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/themes.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n.ignored.txt\n.ignored/file.txt\nfoo/.ignored.txt\nfoo/.ignored/file.txt\n```\n\n----------------------------------------\n\nTITLE: Example Structure of search_index.json (JSON)\nDESCRIPTION: Illustrates the JSON structure of the `search_index.json` file generated by the MkDocs search plugin when the `search_index_only` option is true. Themes can use this file to implement custom client-side search. It contains plugin configuration (`config`), document data (`docs`), and potentially a pre-built index (`index`).\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/themes.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n    config: {...},\n    docs: [...],\n    index: {...}\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Compiled Catalog Structure (text)\nDESCRIPTION: Illustrates the directory structure after compiling the localization catalog. It shows that the compilation process adds the `messages.mo` file alongside the source `messages.po` file within the `LC_MESSAGES` directory for the specified locale.\nSOURCE: https://github.com/mkdocs/mkdocs/blob/master/docs/dev-guide/translations.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nmkdocs/themes/mkdocs/locales\n├── es\n│   └── LC_MESSAGES\n│       ├── messages.mo\n│       └── messages.po\n```"
  }
]