[
  {
    "owner": "sinatra",
    "repo": "sinatra",
    "content": "TITLE: Running a Sinatra Application\nDESCRIPTION: Shell command to start a Sinatra application server by executing the Ruby file that contains the application code.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nruby myapp.rb\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Sinatra Application in Ruby\nDESCRIPTION: A minimal Sinatra application that defines a single route for the root path and returns 'Hello world!'. This demonstrates the core simplicity of Sinatra's DSL for web applications.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# myapp.rb\nrequire 'sinatra'\n\nget '/' do\n  'Hello world!'\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Sinatra Configuration Options\nDESCRIPTION: Shows how to configure Sinatra application settings at startup. This example demonstrates multiple ways to set options including individual settings, hash-based settings, and toggling boolean options.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_80\n\nLANGUAGE: ruby\nCODE:\n```\nconfigure do\n  # setting one option\n  set :option, 'value'\n\n  # setting multiple options\n  set :a => 1, :b => 2\n\n  # same as `set :option, true`\n  enable :option\n\n  # same as `set :option, false`\n  disable :option\n\n  # you can also have dynamic settings with blocks\n  set(:css_dir) { File.join(views, 'css') }\nend\n```\n\n----------------------------------------\n\nTITLE: Using Rack::Protection with Default Security Settings\nDESCRIPTION: This snippet demonstrates how to implement Rack::Protection with all default protections in a config.ru file. This provides comprehensive protection against common web attacks for a Rack application.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/rack-protection/README.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config.ru\nrequire 'rack/protection'\nuse Rack::Protection\nrun MyApp\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Information in Sinatra\nDESCRIPTION: Demonstrates how to access various properties of the incoming request object in Sinatra. This example shows multiple request methods for examining headers, parameters, and client information.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_70\n\nLANGUAGE: ruby\nCODE:\n```\n# app running on http://example.com/example\nget '/foo' do\n  t = %w[text/css text/html application/javascript]\n  request.accept              # ['text/html', '*/*']\n  request.accept? 'text/xml'  # true\n  request.preferred_type(t)   # 'text/html'\n  request.body                # request body sent by the client (see below)\n  request.scheme              # \"http\"\n  request.script_name         # \"/example\"\n  request.path_info           # \"/foo\"\n  request.port                # 80\n  request.request_method      # \"GET\"\n  request.query_string        # \"\"\n  request.content_length      # length of request.body\n  request.media_type          # media type of request.body\n  request.host                # \"example.com\"\n  request.get?                # true (similar methods for other verbs)\n  request.form_data?          # false\n  request[\"some_param\"]       # value of some_param parameter. [] is a shortcut to the params hash.\n  request.referrer            # the referrer of the client or '/'\n  request.user_agent          # user agent (used by :agent condition)\n  request.cookies             # hash of browser cookies\n  request.xhr?                # is this an ajax request?\n  request.url                 # \"http://example.com/example/foo\"\n  request.path                # \"/example/foo\"\n  request.ip                  # client IP address\n  request.secure?             # false (would be true over ssl)\n  request.forwarded?          # true (if running behind a reverse proxy)\n  request.env                 # raw env hash handed in by Rack\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Required Gems for Sinatra\nDESCRIPTION: Shell command to install the necessary Ruby gems for running a Sinatra application, including sinatra itself, rackup for server configuration, and puma as the web server.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngem install sinatra rackup puma\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Handling in Sinatra (Ruby)\nDESCRIPTION: Sets up error handling in Sinatra by defining custom error handlers for specific error types or status codes. It demonstrates how to access error messages and create catch-all error handlers.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_92\n\nLANGUAGE: ruby\nCODE:\n```\nset :show_exceptions, :after_handler\n```\n\nLANGUAGE: ruby\nCODE:\n```\nerror do\n  'Sorry there was a nasty error'\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nerror do\n  'Sorry there was a nasty error - ' + env['sinatra.error'].message\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nerror MyCustomError do\n  'So what happened was...' + env['sinatra.error'].message\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nget '/' do\n  raise MyCustomError, 'something bad'\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nerror 403 do\n  'Access forbidden'\nend\n\nget '/secret' do\n  403\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nerror 400..510 do\n  'Boom'\nend\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Method Routes in Sinatra\nDESCRIPTION: Examples of defining routes for different HTTP methods in Sinatra, including GET, POST, PUT, PATCH, DELETE, OPTIONS, LINK, and UNLINK. Each route is associated with a block that handles the request.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nget '/' do\n  .. show something ..\nend\n\npost '/' do\n  .. create something ..\nend\n\nput '/' do\n  .. replace something ..\nend\n\npatch '/' do\n  .. modify something ..\nend\n\ndelete '/' do\n  .. annihilate something ..\nend\n\noptions '/' do\n  .. appease something ..\nend\n\nlink '/' do\n  .. affiliate something ..\nend\n\nunlink '/' do\n  .. separate something ..\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering a Template in Sinatra\nDESCRIPTION: Demonstrates basic template rendering using the erb method to render the index template file from the views directory.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nget '/' do\n  erb :index\nend\n```\n\n----------------------------------------\n\nTITLE: Route Halting Examples in Sinatra\nDESCRIPTION: Various examples of halting request execution with different status codes and responses\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_50\n\nLANGUAGE: ruby\nCODE:\n```\nhalt\n```\n\nLANGUAGE: ruby\nCODE:\n```\nhalt 410\n```\n\nLANGUAGE: ruby\nCODE:\n```\nhalt 'this will be the body'\n```\n\nLANGUAGE: ruby\nCODE:\n```\nhalt 401, 'go away!'\n```\n\nLANGUAGE: ruby\nCODE:\n```\nhalt 402, {'Content-Type' => 'text/plain'}, 'revenge'\n```\n\nLANGUAGE: ruby\nCODE:\n```\nhalt erb(:error)\n```\n\n----------------------------------------\n\nTITLE: Handling 404 Not Found Errors in Sinatra\nDESCRIPTION: Shows how to define a custom not_found handler that will be invoked when a Sinatra::NotFound exception is raised or when the response status code is 404.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_91\n\nLANGUAGE: ruby\nCODE:\n```\nnot_found do\n  'This is nowhere to be found.'\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Sinatra Application Example\nDESCRIPTION: Demonstrates the simplest possible Sinatra application with a single route that returns 'Hello World!' when accessed.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/sinatra-contrib/spec/config_file/config.txt#2025-04-22_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'sinatra'\n\nget '/' do\n  'Hello World!'\nend\n```\n\n----------------------------------------\n\nTITLE: Browser Redirect Examples\nDESCRIPTION: Various examples of implementing browser redirects with different options\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_59\n\nLANGUAGE: ruby\nCODE:\n```\nget '/foo' do\n  redirect to('/bar')\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nredirect to('/bar'), 303\nredirect 'http://www.google.com/', 'wrong place, buddy'\n```\n\nLANGUAGE: ruby\nCODE:\n```\nget '/foo' do\n  \"<a href='/bar'>do something</a>\"\nend\n\nget '/bar' do\n  do_something\n  redirect back\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nredirect to('/bar?sum=42')\n```\n\nLANGUAGE: ruby\nCODE:\n```\nenable :sessions\n\nget '/foo' do\n  session[:secret] = 'foo'\n  redirect to('/bar')\nend\n\nget '/bar' do\n  session[:secret]\nend\n```\n\n----------------------------------------\n\nTITLE: Reading Request Body Data in Sinatra\nDESCRIPTION: Demonstrates how to properly read and process the request body in a Sinatra route. This example parses JSON data from the request body and uses it in the response.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_72\n\nLANGUAGE: ruby\nCODE:\n```\npost \"/api\" do\n  request.body.rewind  # in case someone already read it\n  data = JSON.parse request.body.read\n  \"Hello #{data['name']}!\"\nend\n```\n\n----------------------------------------\n\nTITLE: Using Before Filters in Sinatra\nDESCRIPTION: Shows how to use before filters to modify requests and set instance variables accessible by routes and templates.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_42\n\nLANGUAGE: ruby\nCODE:\n```\nbefore do\n  @note = 'Hi!'\n  request.path_info = '/foo/bar/baz'\nend\n\nget '/foo/*' do\n  @note #=> 'Hi!'\n  params['splat'] #=> 'bar/baz'\nend\n```\n\n----------------------------------------\n\nTITLE: Environment-Specific Configuration in Sinatra\nDESCRIPTION: Shows how to create environment-specific configuration in Sinatra. This example defines settings that will only apply when running in the production environment.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_81\n\nLANGUAGE: ruby\nCODE:\n```\nconfigure :production do\n  ...\nend\n```\n\n----------------------------------------\n\nTITLE: Using Named Parameters in Sinatra Routes\nDESCRIPTION: Example of defining a route with a named parameter (prefixed with colon) and accessing it via the params hash. This allows capturing variable parts of the URL.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nget '/hello/:name' do\n  # matches \"GET /hello/foo\" and \"GET /hello/bar\"\n  # params['name'] is 'foo' or 'bar'\n  \"Hello #{params['name']}!\"\nend\n```\n\n----------------------------------------\n\nTITLE: Using Sessions in Sinatra\nDESCRIPTION: Shows how to enable and use sessions to maintain state across requests in Sinatra applications.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_44\n\nLANGUAGE: ruby\nCODE:\n```\nenable :sessions\n\nget '/' do\n  \"value = \" << session[:value].inspect\nend\n\nget '/:value' do\n  session['value'] = params['value']\nend\n```\n\n----------------------------------------\n\nTITLE: Logging Configuration in Sinatra\nDESCRIPTION: Examples of configuring and using logging in Sinatra applications\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_56\n\nLANGUAGE: ruby\nCODE:\n```\nget '/' do\n  logger.info \"loading data\"\n  # ...\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyApp < Sinatra::Base\n  configure :production, :development do\n    enable :logging\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Query Parameters in Sinatra Routes\nDESCRIPTION: Example of accessing query parameters in a Sinatra route using the params hash. This allows processing URL parameters that appear after the question mark in a URL.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nget '/posts' do\n  # matches \"GET /posts?title=foo&author=bar\"\n  title = params['title']\n  author = params['author']\n  # uses title and author variables; query is optional to the /posts route\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Helper Methods in Sinatra\nDESCRIPTION: Demonstrates how to define helper methods for use in route handlers and templates using the helpers method.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_43\n\nLANGUAGE: ruby\nCODE:\n```\nhelpers do\n  def bar(name)\n    \"#{name}bar\"\n  end\nend\n\nget '/:name' do\n  bar(params['name'])\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Domain Settings\nDESCRIPTION: Examples of configuring session domain settings for single domain and subdomain sharing\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_48\n\nLANGUAGE: ruby\nCODE:\n```\nset :sessions, :domain => 'foo.com'\n```\n\nLANGUAGE: ruby\nCODE:\n```\nset :sessions, :domain => '.foo.com'\n```\n\n----------------------------------------\n\nTITLE: Using Splat Parameters in Sinatra Routes\nDESCRIPTION: Examples of using splat (wildcard) parameters in Sinatra routes. Splat parameters capture multiple segments of a URL path and are accessible via the params['splat'] array.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nget '/say/*/to/*' do\n  # matches /say/hello/to/world\n  params['splat'] # => [\"hello\", \"world\"]\nend\n\nget '/download/*.*' do\n  # matches /download/path/to/file.xml\n  params['splat'] # => [\"path/to/file\", \"xml\"]\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Static File Directory in Sinatra\nDESCRIPTION: Sets the public folder for static files to a custom directory relative to the current file's location using the __dir__ special variable.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nset :public_folder, __dir__ + '/static'\n```\n\n----------------------------------------\n\nTITLE: Generating Secure Session Secret in Ruby\nDESCRIPTION: Demonstrates how to generate a cryptographically secure 64-byte session secret using Ruby's SecureRandom library\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_45\n\nLANGUAGE: text\nCODE:\n```\n$ ruby -e \"require 'securerandom'; puts SecureRandom.hex(64)\"\n99ae8af...snip...ec0f262ac\n```\n\n----------------------------------------\n\nTITLE: Running Sinatra Applications from Command Line\nDESCRIPTION: Shows the command line options available when running Sinatra applications directly. Includes options for port, host, environment, server handler, quiet mode, and mutex lock settings.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_105\n\nLANGUAGE: shell\nCODE:\n```\nruby myapp.rb [-h] [-x] [-q] [-e ENVIRONMENT] [-p PORT] [-o HOST] [-s HANDLER]\n```\n\n----------------------------------------\n\nTITLE: Accessing Instance Variables in Sinatra Templates\nDESCRIPTION: Shows how instance variables set in route handlers can be directly accessed within templates.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_36\n\nLANGUAGE: ruby\nCODE:\n```\nget '/:id' do\n  @foo = Foo.find(params['id'])\n  haml '%h1= @foo.name'\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Cache Control Headers in Sinatra\nDESCRIPTION: Demonstrates how to set Cache-Control headers for proper HTTP caching in a Sinatra route handler. This simple example sets the cache visibility to public.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_60\n\nLANGUAGE: ruby\nCODE:\n```\nget '/' do\n  cache_control :public\n  \"cache it!\"\nend\n```\n\n----------------------------------------\n\nTITLE: Using Host Name and Content Type Conditions in Sinatra Routes\nDESCRIPTION: Examples of using conditions based on host name and content type (via the 'provides' condition) to match routes in Sinatra. This allows serving different content based on domain or Accept headers.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nget '/', :host_name => /^admin\\./ do\n  \"Admin Area, Access denied!\"\nend\n\nget '/', :provides => 'html' do\n  haml :index\nend\n\nget '/', :provides => ['rss', 'atom', 'xml'] do\n  builder :feed\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Modular Sinatra Applications with Sinatra::Base (Ruby)\nDESCRIPTION: Demonstrates how to create modular Sinatra applications by subclassing Sinatra::Base. It shows the basic structure of a modular app and how it differs from the classic style.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_96\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'sinatra/base'\n\nclass MyApp < Sinatra::Base\n  set :sessions, true\n  set :foo, 'bar'\n\n  get '/' do\n    'Hello world!'\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'sinatra/base'\n\nclass MyApp < Sinatra::Application\n  get '/' do\n    'Hello world!'\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using the Expires Helper for Cache Control\nDESCRIPTION: Demonstrates using the expires helper method which automatically sets appropriate Cache-Control headers. The example sets expiration time to 500 seconds with public visibility and must-revalidate directives.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_62\n\nLANGUAGE: ruby\nCODE:\n```\nbefore do\n  expires 500, :public, :must_revalidate\nend\n```\n\n----------------------------------------\n\nTITLE: Using User Agent Conditions for Route Matching in Sinatra\nDESCRIPTION: Example of adding a condition based on the user agent to a Sinatra route. This allows serving different content based on the browser or client making the request.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nget '/foo', :agent => /Songbird (\\d\\.\\d)[\\d\\/]*?/ do\n  \"You're using Songbird version #{params['agent'][0]}\"\nend\n\nget '/foo' do\n  # Matches non-songbird browsers\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Response Headers and Status\nDESCRIPTION: Demonstrates setting custom status code and headers in a response\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_54\n\nLANGUAGE: ruby\nCODE:\n```\nget '/foo' do\n  status 418\n  headers \\\n    \"Allow\"   => \"BREW, POST, GET, PROPFIND, WHEN\",\n    \"Refresh\" => \"Refresh: 20; https://ietf.org/rfc/rfc2324.txt\"\n  body \"I'm a teapot!\"\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Named Templates in Sinatra\nDESCRIPTION: Shows how to define named templates using the top-level template method, which can be later used in route handlers.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_40\n\nLANGUAGE: ruby\nCODE:\n```\ntemplate :layout do\n  \"%html\\n  =yield\\n\"\nend\n\ntemplate :index do\n  '%div.title Hello World!'\nend\n\nget '/' do\n  haml :index\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Conditions with Multiple Values in Sinatra\nDESCRIPTION: Example of defining a custom condition that accepts multiple values using a splat parameter. This creates an 'auth' condition that checks user roles for authorization.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nset(:auth) do |*roles|   # <- notice the splat here\n  condition do\n    unless logged_in? && roles.any? {|role| current_user.in_role? role }\n      redirect \"/login/\", 303\n    end\n  end\nend\n\nget \"/my/account/\", :auth => [:user, :admin] do\n  \"Your Account Details\"\nend\n\nget \"/only/admin/\", :auth => :admin do\n  \"Only admins are allowed here!\"\nend\n```\n\n----------------------------------------\n\nTITLE: Integrating Rack Middleware in Sinatra (Ruby)\nDESCRIPTION: Shows how to use Rack middleware in a Sinatra application. It demonstrates adding middleware using the 'use' method and provides examples of custom authentication middleware.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_94\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'sinatra'\nrequire 'my_custom_middleware'\n\nuse Rack::Lint\nuse MyCustomMiddleware\n\nget '/hello' do\n  'Hello World'\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nuse Rack::Auth::Basic do |username, password|\n  username == 'admin' && password == 'secret'\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Layouts in Sinatra\nDESCRIPTION: Shows how to create nested layouts using blocks with rendering methods like erb.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_38\n\nLANGUAGE: ruby\nCODE:\n```\nerb :main_layout, :layout => false do\n  erb :admin_layout do\n    erb :user\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Rack::Protection with Instrumentation\nDESCRIPTION: This snippet shows how to enable instrumentation with Rack::Protection using ActiveSupport::Notifications. This allows for monitoring and logging protection activities in the application.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/rack-protection/README.md#2025-04-22_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nuse Rack::Protection, instrumenter: ActiveSupport::Notifications\n```\n\n----------------------------------------\n\nTITLE: Testing Sinatra Applications with Rack::Test (Ruby)\nDESCRIPTION: Illustrates how to write tests for Sinatra applications using the Rack::Test library. It includes examples of testing routes with different parameters and headers.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_95\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'my_sinatra_app'\nrequire 'minitest/autorun'\nrequire 'rack/test'\n\nclass MyAppTest < Minitest::Test\n  include Rack::Test::Methods\n\n  def app\n    Sinatra::Application\n  end\n\n  def test_my_default\n    get '/'\n    assert_equal 'Hello World!', last_response.body\n  end\n\n  def test_with_params\n    get '/meet', :name => 'Frank'\n    assert_equal 'Hello Frank!', last_response.body\n  end\n\n  def test_with_user_agent\n    get '/', {}, 'HTTP_USER_AGENT' => 'Songbird'\n    assert_equal \"You're using Songbird!\", last_response.body\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Local Variables in Sinatra Templates\nDESCRIPTION: Demonstrates how to pass local variables to templates, which is useful for rendering partials.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_37\n\nLANGUAGE: ruby\nCODE:\n```\nget '/:id' do\n  foo = Foo.find(params['id'])\n  haml '%h1= bar.name', :locals => { :bar => foo }\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Named Parameters via Block Parameters in Sinatra\nDESCRIPTION: Example of defining a route with a named parameter and accessing it directly as a block parameter, which provides a more concise syntax compared to using the params hash.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nget '/hello/:name' do |n|\n  # matches \"GET /hello/foo\" and \"GET /hello/bar\"\n  # params['name'] is 'foo' or 'bar'\n  # n stores params['name']\n  \"Hello #{n}!\"\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing ETag and Last-Modified Headers for Caching\nDESCRIPTION: Shows how to use etag and last_modified helpers to implement efficient HTTP caching. These headers allow the server to return a 304 Not Modified response when the client already has the current version.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_63\n\nLANGUAGE: ruby\nCODE:\n```\nget \"/article/:id\" do\n  @article = Article.find params['id']\n  last_modified @article.updated_at\n  etag @article.sha1\n  erb :article\nend\n```\n\n----------------------------------------\n\nTITLE: Template Rendering with Layout Option in Sinatra\nDESCRIPTION: Renders the index template inside a custom layout template called post instead of the default layout.erb, showing how to specify template options.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\nget '/' do\n  erb :index, :layout => :post\nend\n```\n\n----------------------------------------\n\nTITLE: Supporting Per-Form CSRF Tokens in Ruby\nDESCRIPTION: Adds support for per-form CSRF tokens in Sinatra to allow multiple forms on a single page.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\npost '/form' do\n  csrf_token = env['rack.session'][:csrf]\n  halt 403 unless csrf_token && csrf_token == params['csrf_token']\n  # Process form\nend\n```\n\n----------------------------------------\n\nTITLE: Route Triggering Example in Sinatra\nDESCRIPTION: Shows how to trigger and manipulate responses from other routes\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_52\n\nLANGUAGE: ruby\nCODE:\n```\nget '/foo' do\n  status, headers, body = call env.merge(\"PATH_INFO\" => '/bar')\n  [status, headers, body.map(&:upcase)]\nend\n\nget '/bar' do\n  \"bar\"\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Views Directory in Sinatra\nDESCRIPTION: Sets a custom directory for templates instead of the default ./views directory, using the settings.root to make the path relative to the application root.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nset :views, settings.root + '/templates'\n```\n\n----------------------------------------\n\nTITLE: Implementing a Streaming Response in Sinatra\nDESCRIPTION: Creates a Stream class that implements the #each method to yield 100 lines of output. The route returns a new instance of this class to provide streaming response functionality.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nclass Stream\n  def each\n    100.times { |i| yield \"#{i}\\n\" }\n  end\nend\n\nget('/') { Stream.new }\n```\n\n----------------------------------------\n\nTITLE: Integrating Rack-Cache with Sinatra\nDESCRIPTION: Shows how to use rack-cache middleware with Sinatra for built-in HTTP caching. This example demonstrates setting up the middleware and defining cache control parameters for a specific route.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_65\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"rack/cache\"\nrequire \"sinatra\"\n\nuse Rack::Cache\n\nget '/' do\n  cache_control :public, :max_age => 36000\n  sleep 5\n  \"hello\"\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration Settings in Routes\nDESCRIPTION: Shows how to access configuration settings from within Sinatra routes. This demonstrates checking if an option is set (using the ? syntax) and retrieving the actual value.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_83\n\nLANGUAGE: ruby\nCODE:\n```\nconfigure do\n  set :foo, 'bar'\nend\n\nget '/' do\n  settings.foo? # => true\n  settings.foo  # => 'bar'\n  ...\nend\n```\n\n----------------------------------------\n\nTITLE: Supporting Multiple View Directories in Sinatra\nDESCRIPTION: Shows how to override the find_template helper to support multiple view directories. This allows templates to be found in any of the configured directories.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_78\n\nLANGUAGE: ruby\nCODE:\n```\nset :views, ['views', 'templates']\n\nhelpers do\n  def find_template(views, name, engine, &block)\n    Array(views).each { |v| super(v, name, engine, &block) }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Secret in Sinatra\nDESCRIPTION: Sets up fail-safe session secret configuration using environment variable with secure random fallback\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_47\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'securerandom'\nset :session_secret, ENV.fetch('SESSION_SECRET') { SecureRandom.hex(64) }\n```\n\n----------------------------------------\n\nTITLE: Defining Lifecycle Events in Sinatra\nDESCRIPTION: Demonstrates how to register callbacks for Sinatra server startup and shutdown events. These callbacks only work when using Sinatra to start the web server.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_88\n\nLANGUAGE: ruby\nCODE:\n```\non_start do\n  puts \"===== Booting up =====\"\nend\n\non_stop do\n  puts \"===== Shutting down =====\"\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Routes with Trailing Slashes in Sinatra\nDESCRIPTION: Example showing how routes with and without trailing slashes are treated differently in Sinatra. The route '/foo' does not match requests to '/foo/'.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nget '/foo' do\n  # Does not match \"GET /foo/\"\nend\n```\n\n----------------------------------------\n\nTITLE: Using Classic Style Sinatra Application with config.ru (Ruby)\nDESCRIPTION: Demonstrates how to use a classic style Sinatra application with a config.ru file, allowing it to be run with various Rack handlers.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_98\n\nLANGUAGE: ruby\nCODE:\n```\n# app.rb\nrequire 'sinatra'\n\nget '/' do\n  'Hello world!'\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire './app'\nrun Sinatra::Application\n```\n\n----------------------------------------\n\nTITLE: Using Sinatra as Rack Middleware with Authentication Example in Ruby\nDESCRIPTION: Demonstrates how to use a Sinatra application as middleware in front of another Sinatra application. The example shows a login screen that manages user authentication before allowing access to the main application.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_99\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'sinatra/base'\n\nclass LoginScreen < Sinatra::Base\n  enable :sessions\n\n  get('/login') { haml :login }\n\n  post('/login') do\n    if params['name'] == 'admin' && params['password'] == 'admin'\n      session['user_name'] = params['name']\n    else\n      redirect '/login'\n    end\n  end\nend\n\nclass MyApp < Sinatra::Base\n  # middleware will run before filters\n  use LoginScreen\n\n  before do\n    unless session['user_name']\n      halt \"Access denied, please <a href='/login'>login</a>.\"\n    end\n  end\n\n  get('/') { \"Hello #{session['user_name']}.\" }\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Gemfile for Sinatra with GitHub Source\nDESCRIPTION: Example Gemfile for a Sinatra project that uses the latest code directly from GitHub's main branch rather than a released gem version. Also shows how to include additional dependencies.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_108\n\nLANGUAGE: ruby\nCODE:\n```\nsource 'https://rubygems.org'\ngem 'sinatra', :github => 'sinatra/sinatra'\n\n# other dependencies\ngem 'haml'                    # for instance, if you use haml\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Control in Before Filters\nDESCRIPTION: Shows how to set up caching headers globally using a before filter in Sinatra. This applies cache control settings to all routes with specific options for public visibility, revalidation requirements, and maximum age.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_61\n\nLANGUAGE: ruby\nCODE:\n```\nbefore do\n  cache_control :public, :must_revalidate, :max_age => 60\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Sinatra Applications at Runtime in Ruby\nDESCRIPTION: Shows how to create Sinatra applications dynamically at runtime without assigning them to constants using Sinatra.new. This pattern is useful for testing Sinatra extensions or using Sinatra in libraries.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_100\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'sinatra/base'\nmy_app = Sinatra.new { get('/') { \"hi\" } }\nmy_app.run!\n```\n\n----------------------------------------\n\nTITLE: Installing Bundler for Sinatra Project Management\nDESCRIPTION: Shows how to install Bundler, which is the recommended way to manage dependencies for Sinatra applications, especially when using the latest bleeding-edge code.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_107\n\nLANGUAGE: shell\nCODE:\n```\ngem install bundler\n```\n\n----------------------------------------\n\nTITLE: Rendering an Inline Template in Sinatra\nDESCRIPTION: Shows how to render a template from a string instead of a file, useful for small templates or dynamically generated template content.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\nget '/' do\n  code = \"<%= Time.now %>\"\n  erb code\nend\n```\n\n----------------------------------------\n\nTITLE: Using Sinatra as Middleware for a Rails Application\nDESCRIPTION: Shows how to use a dynamically created Sinatra application as middleware in front of a Rails application. This pattern allows adding Sinatra routes to an existing Rails project.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_102\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'sinatra/base'\n\nuse Sinatra do\n  get('/') { ... }\nend\n\nrun RailsProject::Application\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching in Before Filters in Ruby\nDESCRIPTION: Demonstrates the new pattern matching feature in before filters that supports capturing URL parameters. This enables direct parameter extraction without manual path checking.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/CHANGELOG.md#2025-04-22_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nbefore('/user/:name') { |name| ... }\n```\n\n----------------------------------------\n\nTITLE: Basic File Sending in Sinatra\nDESCRIPTION: Shows how to use the send_file helper to return a file as the HTTP response. This simple example sends a PNG file with automatically detected content type.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_68\n\nLANGUAGE: ruby\nCODE:\n```\nget '/' do\n  send_file 'foo.png'\nend\n```\n\n----------------------------------------\n\nTITLE: Inheriting from a Controller Template in Sinatra with Path Mapping\nDESCRIPTION: Demonstrates how to create multiple Sinatra applications that inherit from a common controller template. Uses Rack's map method to mount these applications at different URL paths.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_101\n\nLANGUAGE: ruby\nCODE:\n```\n# config.ru (run with rackup)\nrequire 'sinatra/base'\n\ncontroller = Sinatra.new do\n  enable :logging\n  helpers MyHelpers\nend\n\nmap('/a') do\n  run Sinatra.new(controller) { get('/') { 'a' } }\nend\n\nmap('/b') do\n  run Sinatra.new(controller) { get('/') { 'b' } }\nend\n```\n\n----------------------------------------\n\nTITLE: Cache Control Helper Example in Ruby\nDESCRIPTION: Example showing usage of the new cache_control helper method for setting Cache-Control response headers with various directives.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/CHANGELOG.md#2025-04-22_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\ncache_control :public, :must_revalidate, :max_age => 60\n```\n\n----------------------------------------\n\nTITLE: Response Body Manipulation in Sinatra\nDESCRIPTION: Example of setting and accessing response body in different execution contexts\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_53\n\nLANGUAGE: ruby\nCODE:\n```\nget '/foo' do\n  body \"bar\"\nend\n\nafter do\n  puts body\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Application Scope from Request Scope in Sinatra\nDESCRIPTION: Shows how to access the application scope from within the request scope using the 'settings' helper. This example demonstrates defining a new route dynamically from within another route handler.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_104\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyApp < Sinatra::Base\n  # Hey, I'm in the application scope!\n  get '/define_route/:name' do\n    # Request scope for '/define_route/:name'\n    @value = 42\n\n    settings.get(\"/#{params['name']}\") do\n      # Request scope for \"/#{params['name']}\"\n      @value # => nil (not the same request)\n    end\n\n    \"Route defined!\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Splat Parameters via Block Parameters in Sinatra\nDESCRIPTION: Example of using splat parameters in a route pattern and accessing them directly via block parameters, providing a more concise way to work with captured values.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nget '/download/*.*' do |path, ext|\n  [path, ext] # => [\"path/to/file\", \"xml\"]\nend\n```\n\n----------------------------------------\n\nTITLE: Route Passing Example in Sinatra\nDESCRIPTION: Demonstrates how to pass control to the next matching route using the pass method\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_51\n\nLANGUAGE: ruby\nCODE:\n```\nget '/guess/:who' do\n  pass unless params['who'] == 'Frank'\n  'You got me!'\nend\n\nget '/guess/*' do\n  'You missed!'\nend\n```\n\n----------------------------------------\n\nTITLE: Running Bundled Sinatra Application\nDESCRIPTION: Command for running a Sinatra application with dependencies managed by Bundler, ensuring that the correct gem versions specified in the Gemfile are used.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_109\n\nLANGUAGE: shell\nCODE:\n```\nbundle exec ruby myapp.rb\n```\n\n----------------------------------------\n\nTITLE: Routes with Optional Parameters in Sinatra\nDESCRIPTION: Example of defining a route with an optional parameter (indicated by a question mark). The route will match both with and without the optional part.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nget '/posts/:format?' do\n  # matches \"GET /posts/\" and any extension \"GET /posts/json\", \"GET /posts/xml\" etc\nend\n```\n\n----------------------------------------\n\nTITLE: Serving Modular Sinatra Applications (Ruby)\nDESCRIPTION: Shows different ways to serve modular Sinatra applications, including running the app directly and using a config.ru file for Rack-based servers.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_97\n\nLANGUAGE: ruby\nCODE:\n```\n# my_app.rb\nrequire 'sinatra/base'\n\nclass MyApp < Sinatra::Base\n  # ... app code here ...\n\n  # start the server if ruby file executed directly\n  run! if app_file == $0\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# config.ru (run with rackup)\nrequire './my_app'\nrun MyApp\n```\n\n----------------------------------------\n\nTITLE: Using Weak ETags for HTTP Caching\nDESCRIPTION: Demonstrates how to implement weak ETags in Sinatra for more flexible cache validation. Weak ETags indicate that resources are semantically equivalent but not byte-for-byte identical.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_64\n\nLANGUAGE: ruby\nCODE:\n```\netag @article.sha1, :weak\n```\n\n----------------------------------------\n\nTITLE: Route Matching with Regular Expressions and Block Parameters in Sinatra\nDESCRIPTION: Example of defining a route with a regular expression pattern and accessing captured groups directly via block parameters, providing a more concise syntax.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nget %r{/hello/([\\w]+)} do |c|\n  # Matches \"GET /meta/hello/world\", \"GET /hello/world/1234\" etc.\n  \"Hello, #{c}!\"\nend\n```\n\n----------------------------------------\n\nTITLE: Streaming Response Example\nDESCRIPTION: Shows how to implement streaming responses with time delays\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_55\n\nLANGUAGE: ruby\nCODE:\n```\nget '/' do\n  stream do |out|\n    out << \"It's gonna be legen -\\n\"\n    sleep 0.5\n    out << \" (wait for it) \\n\"\n    sleep 1\n    out << \"- dary!\\n\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring ETags for New Resources\nDESCRIPTION: Shows how to properly handle ETags with the :new_resource option for resources that are created by the request. This affects how Sinatra behaves with If-Match and If-None-Match headers.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_66\n\nLANGUAGE: ruby\nCODE:\n```\nget '/create' do\n  etag '', :new_resource => true\n  Article.create\n  erb :new_article\nend\n```\n\n----------------------------------------\n\nTITLE: Route Matching with Regular Expressions in Sinatra\nDESCRIPTION: Example of defining a route using a regular expression pattern instead of a string pattern. Captured groups from the regex are available via params['captures'].\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nget /\\/hello\\/(\\w+)/ do\n  \"Hello, #{params['captures'].first}!\"\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Global Template Engine Options in Sinatra\nDESCRIPTION: Shows how to set default options for a specific template engine (Haml) that will be applied to all templates rendered with that engine, unless overridden.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\nset :haml, :format => :html5\n\nget '/' do\n  haml :index\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing File Response Options in Sinatra\nDESCRIPTION: Shows how to use send_file with custom options to control the response. This example overrides the detected mime type to serve a PNG file as a JPG.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_69\n\nLANGUAGE: ruby\nCODE:\n```\nsend_file 'foo.png', :type => :jpg\n```\n\n----------------------------------------\n\nTITLE: Using Different Directories for Different Template Engines\nDESCRIPTION: Demonstrates customizing the template lookup based on the template engine. This allows organizing templates by engine type, with Haml templates in one directory and others in a default directory.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_79\n\nLANGUAGE: ruby\nCODE:\n```\nset :views, :haml => 'templates', :default => 'views'\n\nhelpers do\n  def find_template(views, name, engine, &block)\n    _, folder = views.detect { |k,v| engine == Tilt[k] }\n    folder ||= views[:default]\n    super(folder, name, engine, &block)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Session Middleware Configuration\nDESCRIPTION: Examples of setting up custom session middleware with various configurations\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_49\n\nLANGUAGE: ruby\nCODE:\n```\nenable :sessions\nset :session_store, Rack::Session::Pool\n```\n\nLANGUAGE: ruby\nCODE:\n```\nset :sessions, :expire_after => 2592000\nset :session_store, Rack::Session::Pool\n```\n\nLANGUAGE: ruby\nCODE:\n```\nuse Rack::Session::Pool, :expire_after => 2592000\nuse Rack::Protection::RemoteToken\nuse Rack::Protection::SessionHijacking\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Filename for Attachments\nDESCRIPTION: Demonstrates specifying a custom filename for downloadable content using the attachment helper. This example sets the filename to \"info.txt\" regardless of the actual content.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_74\n\nLANGUAGE: ruby\nCODE:\n```\nget '/' do\n  attachment \"info.txt\"\n  \"store it!\"\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Sinatra Gem Pre-release Versions\nDESCRIPTION: Command for installing pre-release versions of the Sinatra gem to get access to the latest features before they are officially released.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_106\n\nLANGUAGE: shell\nCODE:\n```\ngem install sinatra --pre\n```\n\n----------------------------------------\n\nTITLE: Accessing Application Settings in Sinatra Class Scope\nDESCRIPTION: Demonstrates how to set and access application-level settings within the Sinatra application class scope. Shows that settings defined with 'set' are available as methods at the class level.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_103\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyApp < Sinatra::Base\n  # Hey, I'm in the application scope!\n  set :foo, 42\n  foo # => 42\n\n  get '/foo' do\n    # Hey, I'm no longer in the application scope!\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using the time_for Helper for Date Handling\nDESCRIPTION: Shows how to use the time_for helper to convert various date/time formats into Time objects for comparison. This example checks if the current time is greater than a specific date.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_75\n\nLANGUAGE: ruby\nCODE:\n```\nget '/' do\n  pass if Time.now > time_for('Dec 23, 2016')\n  \"still time\"\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Route Matcher in Sinatra\nDESCRIPTION: Implements a custom route matcher that matches all routes except a specific pattern. The AllButPattern class provides the necessary interface for Sinatra's routing system to use it as a matcher.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nclass AllButPattern\n  def initialize(except)\n    @except = except\n  end\n\n  def to_pattern(options)\n    return self\n  end\n\n  def params(route)\n    return {} unless @except === route\n  end\nend\n\ndef all_but(pattern)\n  AllButPattern.new(pattern)\nend\n\nget all_but(\"/index\") do\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering a Literal Template String in Sinatra\nDESCRIPTION: Demonstrates rendering a Haml template directly from a string without using a template file, useful for simple templates or testing.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\nget '/' do\n  haml '%div.title Hello World'\nend\n```\n\n----------------------------------------\n\nTITLE: Multi-Environment Configuration in Sinatra\nDESCRIPTION: Demonstrates configuring settings for multiple environments simultaneously. This example applies the same configuration to both production and test environments.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_82\n\nLANGUAGE: ruby\nCODE:\n```\nconfigure :production, :test do\n  ...\nend\n```\n\n----------------------------------------\n\nTITLE: Passing Engine-Specific Options to Templates in Sinatra\nDESCRIPTION: Demonstrates passing options specific to the template engine (in this case Haml) to control how the template is rendered, setting the HTML format to HTML5.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\nget '/' do\n  haml :index, :format => :html5\nend\n```\n\n----------------------------------------\n\nTITLE: Alternative Route Matching with Regular Expressions\nDESCRIPTION: Demonstrates how to match all routes except for a specific path using a regular expression and the 'pass' method, which provides similar functionality to the custom matcher but with less code.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nget /.*/ do\n  pass if request.path_info == \"/index\"\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling Rack::Protection in Sinatra\nDESCRIPTION: Shows how to disable the built-in protection against common attacks. This is not recommended for production applications as it removes security features.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_84\n\nLANGUAGE: ruby\nCODE:\n```\ndisable :protection\n```\n\n----------------------------------------\n\nTITLE: Handling EOFError from Rack in Ruby\nDESCRIPTION: Catches EOFError raised by Rack and returns a Bad Request 400 status.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\nbegin\n  # Rack request processing\nrescue EOFError\n  halt 400, 'Bad Request'\nend\n```\n\n----------------------------------------\n\nTITLE: Modifying Request Properties in Sinatra\nDESCRIPTION: Shows how to modify request properties like path_info to manipulate request routing. This can be used to internally redirect requests to different handlers.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_71\n\nLANGUAGE: ruby\nCODE:\n```\nbefore { request.path_info = \"/\" }\n\nget \"/\" do\n  \"all requests end up here\"\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Protection Exceptions in Sinatra\nDESCRIPTION: Shows how to disable specific security protections while keeping others enabled. This example disables only the path traversal protection mechanism.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_85\n\nLANGUAGE: ruby\nCODE:\n```\nset :protection, :except => :path_traversal\n```\n\n----------------------------------------\n\nTITLE: Defining Route with Empty Pattern in Sinatra (Ruby)\nDESCRIPTION: Example of defining a route with an empty pattern in Sinatra. With this pattern, requests with an empty path info will match this route instead of the root '/' route.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nget(\"\") { ... }\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Template Lookup in Sinatra\nDESCRIPTION: Demonstrates how to implement a custom template lookup mechanism by overriding the find_template method.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_41\n\nLANGUAGE: ruby\nCODE:\n```\nconfigure do\n  set :views, [ './views/a', './views/b' ]\nend\n\ndef find_template(views, name, engine, &block)\n  Array(views).each do |v|\n    super(v, name, engine, &block)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Session-Based Protection with External Sessions\nDESCRIPTION: Shows how to configure session-based protection when sessions are set up outside of the Sinatra application. This is useful when using config.ru or a separate Rack::Builder instance.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_87\n\nLANGUAGE: ruby\nCODE:\n```\nset :protection, :session => true\n```\n\n----------------------------------------\n\nTITLE: Configuration Block Example in Ruby\nDESCRIPTION: Shows the new configuration block syntax that passes the app instance as a parameter for setting options.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/CHANGELOG.md#2025-04-22_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nconfigure { |app| set :foo, app.root + '/foo' }\n```\n\n----------------------------------------\n\nTITLE: Defining Inline Templates in Sinatra\nDESCRIPTION: Demonstrates how to define inline templates at the end of the source file using the __END__ keyword.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'sinatra'\n\nget '/' do\n  haml :index\nend\n\n__END__\n\n@@ layout\n%html\n  != yield\n\n@@ index\n%div.title Hello world.\n```\n\n----------------------------------------\n\nTITLE: Setting Sinatra Environment Variables from Shell\nDESCRIPTION: Shows how to set the environment for a Sinatra application using the APP_ENV environment variable from the command line.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_89\n\nLANGUAGE: shell\nCODE:\n```\nAPP_ENV=production ruby my_app.rb\n```\n\n----------------------------------------\n\nTITLE: Using Named Captures in Sinatra Route Patterns (Ruby 1.9+)\nDESCRIPTION: Example showing how to use Ruby 1.9's named captures feature in Sinatra route patterns. This allows capturing parts of the URL and accessing them through the params hash by name.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/CHANGELOG.md#2025-04-22_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nget(%r{/hi/(?<name>[^/?#]+)}) { \"Hi #{params['name']}\" }\n```\n\n----------------------------------------\n\nTITLE: MIME Type Configuration\nDESCRIPTION: Examples of registering and using custom MIME types\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_57\n\nLANGUAGE: ruby\nCODE:\n```\nconfigure do\n  mime_type :foo, 'text/foo'\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nget '/' do\n  content_type :foo\n  \"foo foo foo\"\nend\n```\n\n----------------------------------------\n\nTITLE: Checking Environment in Sinatra Routes\nDESCRIPTION: Demonstrates how to use the predefined environment check methods in route handlers to conditionally execute code based on the current environment.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_90\n\nLANGUAGE: ruby\nCODE:\n```\nget '/' do\n  if settings.development?\n    \"development!\"\n  else\n    \"not development!\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Running Sinatra with a Custom Rack Handler in Ruby\nDESCRIPTION: Shows how to run a Sinatra application with a custom Rack handler like Mongrel2 using the command line interface.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nruby app.rb -s Mongrel2\n```\n\n----------------------------------------\n\nTITLE: Disabling Multiple Protection Mechanisms in Sinatra\nDESCRIPTION: Demonstrates how to disable multiple specific protection features using an array. This example disables both path_traversal and remote_token protections while keeping others enabled.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_86\n\nLANGUAGE: ruby\nCODE:\n```\nset :protection, :except => [:path_traversal, :remote_token]\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Handlers with raise_errors Option in Sinatra (Ruby)\nDESCRIPTION: Demonstrates how the raise_errors option affects error handling behavior in Sinatra applications. It shows different scenarios for custom and catch-all error handlers based on the option's value.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_93\n\nLANGUAGE: ruby\nCODE:\n```\n# First handler\nerror MyCustomError do\n  'A custom message'\nend\n\n# Second handler\nerror do\n  'A catch-all message'\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Methods to Sinatra::IndifferentHash in Ruby\nDESCRIPTION: Adds #select, #reject and #compact methods to Sinatra::IndifferentHash. This is a breaking change - if hash keys need to be converted to symbols, call #to_h first to get a Hash instance.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\nSinatra::IndifferentHash.new.select { |k, v| ... }\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nSinatra::IndifferentHash.new.reject { |k, v| ... }\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nSinatra::IndifferentHash.new.compact\n```\n\n----------------------------------------\n\nTITLE: Using Attachment Helper for File Downloads\nDESCRIPTION: Shows how to use the attachment helper to indicate a response should be downloaded rather than displayed in the browser. This basic example doesn't specify a filename.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_73\n\nLANGUAGE: ruby\nCODE:\n```\nget '/' do\n  attachment\n  \"store it!\"\nend\n```\n\n----------------------------------------\n\nTITLE: Loading Single Extension in Classic Sinatra Style\nDESCRIPTION: Demonstrates how to require and use a single Sinatra extension in classic style applications\nSOURCE: https://github.com/sinatra/sinatra/blob/main/sinatra-contrib/README.md#2025-04-22_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'sinatra'\nrequire 'sinatra/content_for'\n```\n\n----------------------------------------\n\nTITLE: Loading All Extensions in Modular Sinatra Style\nDESCRIPTION: Shows how to load all available extensions in modular style Sinatra applications\nSOURCE: https://github.com/sinatra/sinatra/blob/main/sinatra-contrib/README.md#2025-04-22_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'sinatra/base'\nrequire 'sinatra/contrib/all'\n\nclass MyApp < Sinatra::Base\n  register Sinatra::Contrib\nend\n```\n\n----------------------------------------\n\nTITLE: Using a Single Rack::Protection Middleware\nDESCRIPTION: This snippet demonstrates how to implement a single specific protection middleware instead of the full suite. Here, only the AuthenticityToken protection is used to prevent CSRF attacks.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/rack-protection/README.md#2025-04-22_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config.ru\nrequire 'rack/protection'\nuse Rack::Protection::AuthenticityToken\nrun MyApp\n```\n\n----------------------------------------\n\nTITLE: Loading Common Extensions in Classic Sinatra Style\nDESCRIPTION: Shows how to load common Sinatra extensions in classic style applications\nSOURCE: https://github.com/sinatra/sinatra/blob/main/sinatra-contrib/README.md#2025-04-22_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'sinatra'\nrequire 'sinatra/contrib'\n```\n\n----------------------------------------\n\nTITLE: Changing Sinatra Settings with Hash Merging in Ruby\nDESCRIPTION: Demonstrates how changing a Sinatra setting with a hash will merge values rather than replace them. The example shows setting a hash value and then adding to it in a subsequent call.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nset(:x, :a => 1); set(:x :b => 2)\n```\n\n----------------------------------------\n\nTITLE: URL Generation in Templates\nDESCRIPTION: Example of generating URLs in Haml templates\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_58\n\nLANGUAGE: ruby\nCODE:\n```\n%a{:href => url('/foo')} foo\n```\n\n----------------------------------------\n\nTITLE: Loading All Extensions in Classic Sinatra Style\nDESCRIPTION: Demonstrates loading all available Sinatra extensions in classic style applications\nSOURCE: https://github.com/sinatra/sinatra/blob/main/sinatra-contrib/README.md#2025-04-22_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'sinatra'\nrequire 'sinatra/contrib/all'\n```\n\n----------------------------------------\n\nTITLE: Setting a Sinatra Value Without Hash Merging in Ruby\nDESCRIPTION: Shows how to set a value in Sinatra without using the default hash merging behavior by passing true as a third parameter.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nset(:x, {:a => 1}, true)\n```\n\n----------------------------------------\n\nTITLE: Using the find_template Helper for Template Lookup\nDESCRIPTION: Shows the basic usage of the find_template helper which is used to locate template files for rendering. This low-level helper allows custom template resolution logic.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_77\n\nLANGUAGE: ruby\nCODE:\n```\nfind_template settings.views, 'foo', Tilt[:haml] do |file|\n  puts \"could be #{file}\"\nend\n```\n\n----------------------------------------\n\nTITLE: Loading Single Extension in Modular Sinatra Style\nDESCRIPTION: Shows how to require and use individual extensions in modular style Sinatra applications\nSOURCE: https://github.com/sinatra/sinatra/blob/main/sinatra-contrib/README.md#2025-04-22_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'sinatra/base'\nrequire 'sinatra/content_for'\nrequire 'sinatra/namespace'\n\nclass MyApp < Sinatra::Base\n  # Note: Some modules are extensions, some helpers, see the specific\n  # documentation or the source\n  helpers Sinatra::ContentFor\n  register Sinatra::Namespace\nend\n```\n\n----------------------------------------\n\nTITLE: Validating Expanded Path for Static Files in Ruby\nDESCRIPTION: Validates that the expanded path of static files matches the public_dir setting for security.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\nget '/file/:name' do\n  file = File.expand_path(params[:name], settings.public_folder)\n  halt 403 unless file.start_with?(File.expand_path(settings.public_folder))\n  send_file file\nend\n```\n\n----------------------------------------\n\nTITLE: Using Markdown with Other Template Engines in Sinatra\nDESCRIPTION: Shows how to combine Markdown with ERB by rendering a Markdown template and passing it as a local variable to an ERB template for embedding.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_31\n\nLANGUAGE: ruby\nCODE:\n```\nerb :overview, :locals => { :text => markdown(:introduction) }\n```\n\n----------------------------------------\n\nTITLE: Loading Common Extensions in Modular Sinatra Style\nDESCRIPTION: Demonstrates loading common extensions in modular style Sinatra applications\nSOURCE: https://github.com/sinatra/sinatra/blob/main/sinatra-contrib/README.md#2025-04-22_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'sinatra/base'\nrequire 'sinatra/contrib'\n\nclass MyApp < Sinatra::Base\n  register Sinatra::Contrib\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Sinatra Delegator Target in Ruby\nDESCRIPTION: Shows how to change the target class for the Sinatra top-level DSL from the default Sinatra::Application. This feature was introduced to ease testing.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nDelegator.target\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Middleware in Sinatra (Ruby)\nDESCRIPTION: This snippet demonstrates how to conditionally use Rack middleware based on Sinatra settings. It checks if memcached is enabled and, if so, adds Rack::Cache and Rack::Session::Memcached to the middleware stack.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/sinatra-contrib/ideas.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ndef build(*)\n  if settings.memcached?\n    use Rack::Cache, :backend => :memcached\n    use Rack::Session::Memcached\n    # ...\n  end\n  super\nend\n```\n\n----------------------------------------\n\nTITLE: Building Sinatra Package Commands\nDESCRIPTION: Shell commands for building individual and all Sinatra-related gem packages, generating .gem and .tar.gz files for each component.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/RELEASING.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Build sinatra-contrib package\n$ bundle exec rake package:sinatra-contrib\n\n# Build rack-protection package\n$ bundle exec rake package:rack-protection\n\n# Build sinatra package\n$ bundle exec rake package:sinatra\n\n# Build all packages\n$ bundle exec rake package:all\n```\n\n----------------------------------------\n\nTITLE: Adding Escaping to Static 404 Page in Ruby\nDESCRIPTION: Adds HTML escaping to the static 404 page to prevent XSS vulnerabilities.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\nnot_found do\n  erb :'404', :escape_html => true\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Session Secret Environment Variable\nDESCRIPTION: Shows how to persist the session secret as an environment variable\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\n# echo \"export SESSION_SECRET=99ae8af...snip...ec0f262ac\" >> ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Installing Sinatra in a Ruby project\nDESCRIPTION: Shows how to install Sinatra gem using either RubyGems installation command or by adding it to a Gemfile for Bundler.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/sinatra-contrib/spec/config_file/config.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngem install sinatra\n```\n\n----------------------------------------\n\nTITLE: Using Kernel#caller_locations in Ruby\nDESCRIPTION: Example of using Kernel#caller_locations to get caller information.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: Ruby\nCODE:\n```\nKernel.caller_locations\n```\n\n----------------------------------------\n\nTITLE: Using Rack::Protection with Excluded Middleware\nDESCRIPTION: This snippet shows how to use Rack::Protection while excluding specific protection middleware. In this example, path_traversal protection is excluded while keeping all other default protections.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/rack-protection/README.md#2025-04-22_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config.ru\nrequire 'rack/protection'\nuse Rack::Protection, :except => :path_traversal\nrun MyApp\n```\n\n----------------------------------------\n\nTITLE: Using RDoc within Haml Templates in Sinatra\nDESCRIPTION: Shows how to call the rdoc method from within a Haml template to render RDoc content.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_34\n\nLANGUAGE: ruby\nCODE:\n```\n%h1 Hello From Haml!\n%p= rdoc(:greetings)\n```\n\n----------------------------------------\n\nTITLE: Adding Sinatra::HamlHelpers in Ruby\nDESCRIPTION: Example of adding the Sinatra::HamlHelpers module to sinatra-contrib.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire 'sinatra/haml_helpers'\n```\n\n----------------------------------------\n\nTITLE: Literal Template with Source Path Information in Sinatra\nDESCRIPTION: Renders a template from a string while providing path and line information for better error messages and debugging in case of template errors.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_29\n\nLANGUAGE: ruby\nCODE:\n```\nget '/' do\n  haml '%div.title Hello World', :path => 'examples/file.haml', :line => 3\nend\n```\n\n----------------------------------------\n\nTITLE: Using Exception#detailed_message in Ruby\nDESCRIPTION: Example of using the Exception#detailed_message method to show a backtrace.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nexception.detailed_message\n```\n\n----------------------------------------\n\nTITLE: Calling Markdown from within Haml Templates in Sinatra\nDESCRIPTION: Demonstrates how to render a Markdown template from within a Haml template by calling the markdown helper method directly in the Haml code.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_32\n\nLANGUAGE: ruby\nCODE:\n```\n%h1 Hello From Haml!\n%p= markdown(:greetings)\n```\n\n----------------------------------------\n\nTITLE: Accessing IndifferentHash in Ruby\nDESCRIPTION: Example of calling the #except method on an instance of Sinatra::IndifferentHash.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nSinatra::IndifferentHash.new.except(...)\n```\n\n----------------------------------------\n\nTITLE: Creating JSON with Yajl Templates in Sinatra\nDESCRIPTION: Demonstrates how to use Yajl templates to generate JSON. The template is evaluated as a Ruby string and converted to JSON.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\njson = { :foo => 'bar' }\njson[:baz] = key\n```\n\n----------------------------------------\n\nTITLE: Customizing Mustermann Options for Route Patterns in Sinatra\nDESCRIPTION: Example of customizing the Mustermann pattern matching options for a specific route using the :mustermann_opts parameter. This allows fine-tuning how routes are matched.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nget '\\A/posts\\z', :mustermann_opts => { :type => :regexp, :check_anchors => false } do\n  # matches /posts exactly, with explicit anchoring\n  \"If you match an anchored pattern clap your hands!\"\nend\n```\n\n----------------------------------------\n\nTITLE: Specifying Template Implementation in Sinatra\nDESCRIPTION: Demonstrates how to ensure a specific implementation of a template language is used by requiring it before rendering a template, shown with RDiscount for Markdown.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'rdiscount'\nget('/') { markdown :index }\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Conditions for Routes in Sinatra\nDESCRIPTION: Example of defining a custom condition for route matching in Sinatra. This creates a 'probability' condition that randomly determines whether a route matches based on a given value.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nset(:probability) { |value| condition { rand <= value } }\n\nget '/win_a_car', :probability => 0.1 do\n  \"You won!\"\nend\n\nget '/win_a_car' do\n  \"Sorry, you lost.\"\nend\n```\n\n----------------------------------------\n\nTITLE: Extending the time_for Helper with Custom Date Handling\nDESCRIPTION: Demonstrates how to override the time_for helper to add custom date handling capabilities. This example adds support for symbolic time references like :yesterday and :tomorrow.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_76\n\nLANGUAGE: ruby\nCODE:\n```\nhelpers do\n  def time_for(value)\n    case value\n    when :yesterday then Time.now - 24*60*60\n    when :tomorrow  then Time.now + 24*60*60\n    else super\n    end\n  end\nend\n\nget '/' do\n  last_modified :yesterday\n  expires :tomorrow\n  \"hello\"\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Weak ETags for New Resources\nDESCRIPTION: Demonstrates how to configure both the resource type and ETag strength in a single call. This example creates a weak ETag for a new resource.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_67\n\nLANGUAGE: ruby\nCODE:\n```\netag '', :new_resource => true, :kind => :weak\n```\n\n----------------------------------------\n\nTITLE: Installing Sinatra Contrib via Bundler Git Source\nDESCRIPTION: Shows how to include sinatra-contrib gem directly from GitHub repository in a Gemfile\nSOURCE: https://github.com/sinatra/sinatra/blob/main/sinatra-contrib/README.md#2025-04-22_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngithub 'sinatra/sinatra' do\n  gem 'sinatra-contrib'\nend\n```\n\n----------------------------------------\n\nTITLE: Combining RDoc with ERB in Sinatra\nDESCRIPTION: Demonstrates how to use RDoc in combination with ERB for rendering templates. This is necessary because RDoc cannot call Ruby methods directly.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/README.md#2025-04-22_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\nerb :overview, :locals => { :text => rdoc(:introduction) }\n```\n\n----------------------------------------\n\nTITLE: Installing Sinatra Packages Locally\nDESCRIPTION: Shell commands for building and installing Sinatra gems locally, including individual component installation and bulk installation options.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/RELEASING.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Build and install sinatra-contrib gem locally\n$ bundle exec rake install:sinatra-contrib\n\n# Build and install rack-protection gem locally\n$ bundle exec rake install:rack-protection\n\n# Build and install sinatra gem locally\n$ bundle exec rake install:sinatra\n\n# Build and install all gems locally\n$ bundle exec rake install:all\n```\n\n----------------------------------------\n\nTITLE: Expires Helper Example in Ruby\nDESCRIPTION: Example demonstrating the new expires helper method for setting cache expiration with a time value and directives.\nSOURCE: https://github.com/sinatra/sinatra/blob/main/CHANGELOG.md#2025-04-22_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nexpires 300, :public, :must_revalidate\n```"
  }
]