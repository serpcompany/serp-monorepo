[
  {
    "owner": "wordpress",
    "repo": "wordpress.org",
    "content": "TITLE: Basic Stripe API Usage in PHP\nDESCRIPTION: This code demonstrates basic usage of the Stripe API, including setting the API key and creating a charge.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpressfoundation.org/public_html/content/plugins/wpf-stripe/stripe-php/README.md#2025-04-18_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\\Stripe\\Stripe::setApiKey('sk_test_BQokikJOvBiI2HlWgH4olfQ2');\n$charge = \\Stripe\\Charge::create(['amount' => 2000, 'currency' => 'usd', 'source' => 'tok_189fqt2eZvKYlo2CTGBeg6Uq']);\necho $charge;\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Google Cloud Vision V1 ImageAnnotatorClient in PHP\nDESCRIPTION: This snippet demonstrates how to initialize the ImageAnnotatorClient from the Google Cloud Vision V1 library, perform a batch image annotation request, and properly close the client. It requires the Google Cloud Vision V1 library to be installed via Composer.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/cloud-vision/src/V1/README.md#2025-04-18_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nrequire 'vendor/autoload.php';\n\nuse Google\\Cloud\\Vision\\V1\\ImageAnnotatorClient;\n\n$imageAnnotatorClient = new ImageAnnotatorClient();\ntry {\n    $requests = [];\n    $response = $imageAnnotatorClient->batchAnnotateImages($requests);\n} finally {\n    $imageAnnotatorClient->close();\n}\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP Requests with Guzzle in PHP\nDESCRIPTION: Demonstrates how to use Guzzle to send synchronous and asynchronous HTTP requests. It shows creating a client, making a GET request, accessing response data, and sending an asynchronous request with a promise.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/README.md#2025-04-18_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$client = new \\GuzzleHttp\\Client();\n$response = $client->request('GET', 'https://api.github.com/repos/guzzle/guzzle');\n\necho $response->getStatusCode(); // 200\necho $response->getHeaderLine('content-type'); // 'application/json; charset=utf8'\necho $response->getBody(); // '{\"id\": 1420053, \"name\": \"guzzle\", ...}'\n\n// Send an asynchronous request.\n$request = new \\GuzzleHttp\\Psr7\\Request('GET', 'http://httpbin.org');\n$promise = $client->sendAsync($request)->then(function ($response) {\n    echo 'I completed! ' . $response->getBody();\n});\n\n$promise->wait();\n```\n\n----------------------------------------\n\nTITLE: Google Drive API Authentication Example\nDESCRIPTION: Complete example showing how to authenticate and make requests to Google Drive API using application default credentials.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/auth/README.md#2025-04-18_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Google\\Auth\\ApplicationDefaultCredentials;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\HandlerStack;\n\n// specify the path to your application credentials\nputenv('GOOGLE_APPLICATION_CREDENTIALS=/path/to/my/credentials.json');\n\n// define the scopes for your API call\n$scopes = ['https://www.googleapis.com/auth/drive.readonly'];\n\n// create middleware\n$middleware = ApplicationDefaultCredentials::getMiddleware($scopes);\n$stack = HandlerStack::create();\n$stack->push($middleware);\n\n// create the HTTP client\n$client = new Client([\n  'handler' => $stack,\n  'base_uri' => 'https://www.googleapis.com',\n  'auth' => 'google_auth'  // authorize all requests\n]);\n\n// make the request\n$response = $client->get('drive/v2/files');\n\n// show the result!\nprint_r((string) $response->getBody());\n```\n\n----------------------------------------\n\nTITLE: Basic Google Cloud Storage Operations in PHP\nDESCRIPTION: Demonstrates core storage operations including bucket access, file upload with optional public read access, and file download. Shows how to initialize the StorageClient and perform basic bucket operations.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/cloud-storage/README.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nrequire 'vendor/autoload.php';\n\nuse Google\\Cloud\\Storage\\StorageClient;\n\n$storage = new StorageClient();\n\n$bucket = $storage->bucket('my_bucket');\n\n// Upload a file to the bucket.\n$bucket->upload(\n    fopen('/data/file.txt', 'r')\n);\n\n// Using Predefined ACLs to manage object permissions, you may\n// upload a file and give read access to anyone with the URL.\n$bucket->upload(\n    fopen('/data/file.txt', 'r'),\n    [\n        'predefinedAcl' => 'publicRead'\n    ]\n);\n\n// Download and store an object from the bucket locally.\n$object = $bucket->object('file_backup.txt');\n$object->downloadToFile('/data/file_backup.txt');\n```\n\n----------------------------------------\n\nTITLE: Promise Resolution and Chaining in PHP\nDESCRIPTION: Shows how to resolve promises and chain multiple then() callbacks. Demonstrates value passing between promise chains and callback execution order.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/promises/README.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Promise\\Promise;\n\n$promise = new Promise();\n$promise\n    ->then(function ($value) {\n        // Return a value and don't break the chain\n        return \"Hello, \" . $value;\n    })\n    // This then is executed after the first then and receives the value\n    // returned from the first then.\n    ->then(function ($value) {\n        echo $value;\n    });\n\n// Resolving the promise triggers the $onFulfilled callbacks and outputs\n// \"Hello, reader.\"\n$promise->resolve('reader.');\n```\n\n----------------------------------------\n\nTITLE: Promise Forwarding Implementation in PHP\nDESCRIPTION: Illustrates promise forwarding between multiple promises, showing how resolution of one promise triggers the next in the chain.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/promises/README.md#2025-04-18_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Promise\\Promise;\n\n$promise = new Promise();\n$nextPromise = new Promise();\n\n$promise\n    ->then(function ($value) use ($nextPromise) {\n        echo $value;\n        return $nextPromise;\n    })\n    ->then(function ($value) {\n        echo $value;\n    });\n\n// Triggers the first callback and outputs \"A\"\n$promise->resolve('A');\n// Triggers the second callback and outputs \"B\"\n$nextPromise->resolve('B');\n```\n\n----------------------------------------\n\nTITLE: Encoding and Decoding JWT with HS256 Algorithm in PHP\nDESCRIPTION: This example demonstrates how to use the PHP-JWT library to encode and decode a JWT using the HS256 algorithm. It includes setting a payload, encoding with a secret key, and decoding the token.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/firebase/php-jwt/README.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Firebase\\JWT\\JWT;\nuse Firebase\\JWT\\Key;\n\n$key = \"example_key\";\n$payload = array(\n    \"iss\" => \"http://example.org\",\n    \"aud\" => \"http://example.com\",\n    \"iat\" => 1356999524,\n    \"nbf\" => 1357000000\n);\n\n$jwt = JWT::encode($payload, $key, 'HS256');\n$decoded = JWT::decode($jwt, new Key($key, 'HS256'));\n\nprint_r($decoded);\n\n$decoded_array = (array) $decoded;\n\nJWT::$leeway = 60; // $leeway in seconds\n$decoded = JWT::decode($jwt, new Key($key, 'HS256'));\n```\n\n----------------------------------------\n\nTITLE: Encoding and Decoding JWT with RS256 Algorithm in PHP\nDESCRIPTION: This example shows how to use the PHP-JWT library with the RS256 algorithm, which uses RSA keys. It demonstrates generating a JWT with a private key and decoding it with the corresponding public key.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/firebase/php-jwt/README.md#2025-04-18_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Firebase\\JWT\\JWT;\nuse Firebase\\JWT\\Key;\n\n$privateKey = <<<EOD\n-----BEGIN RSA PRIVATE KEY-----\nMIICXAIBAAKBgQC8kGa1pSjbSYZVebtTRBLxBz5H4i2p/llLCrEeQhta5kaQu/Rn\nvuER4W8oDH3+3iuIYW4VQAzyqFpwuzjkDI+17t5t0tyazyZ8JXw+KgXTxldMPEL9\n5+qVhgXvwtihXC1c5oGbRlEDvDF6Sa53rcFVsYJ4ehde/zUxo6UvS7UrBQIDAQAB\nAoGAb/MXV46XxCFRxNuB8LyAtmLDgi/xRnTAlMHjSACddwkyKem8//8eZtw9fzxz\nbWZ/1/doQOuHBGYZU8aDzzj59FZ78dyzNFoF91hbvZKkg+6wGyd/LrGVEB+Xre0J\nNil0GReM2AHDNZUYRv+HYJPIOrB0CRczLQsgFJ8K6aAD6F0CQQDzbpjYdx10qgK1\ncP59UHiHjPZYC0loEsk7s+hUmT3QHerAQJMZWC11Qrn2N+ybwwNblDKv+s5qgMQ5\n5tNoQ9IfAkEAxkyffU6ythpg/H0Ixe1I2rd0GbF05biIzO/i77Det3n4YsJVlDck\nZkcvY3SK2iRIL4c9yY6hlIhs+K9wXTtGWwJBAO9Dskl48mO7woPR9uD22jDpNSwe\nk90OMepTjzSvlhjbfuPN1IdhqvSJTDychRwn1kIJ7LQZgQ8fVz9OCFZ/6qMCQGOb\nqaGwHmUK6xzpUbbacnYrIM6nLSkXgOAwv7XXCojvY614ILTK3iXiLBOxPu5Eu13k\neUz9sHyD6vkgZzjtxXECQAkp4Xerf5TGfQXGXhxIX52yH+N2LtujCdkQZjXAsGdm\nB2zNzvrlgRmgBrklMTrMYgm1NPcW+bRLGcwgW2PTvNM=\n-----END RSA PRIVATE KEY-----\nEOD;\n\n$publicKey = <<<EOD\n-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC8kGa1pSjbSYZVebtTRBLxBz5H\n4i2p/llLCrEeQhta5kaQu/RnvuER4W8oDH3+3iuIYW4VQAzyqFpwuzjkDI+17t5t\n0tyazyZ8JXw+KgXTxldMPEL95+qVhgXvwtihXC1c5oGbRlEDvDF6Sa53rcFVsYJ4\nehde/zUxo6UvS7UrBQIDAQAB\n-----END PUBLIC KEY-----\nEOD;\n\n$payload = array(\n    \"iss\" => \"example.org\",\n    \"aud\" => \"example.com\",\n    \"iat\" => 1356999524,\n    \"nbf\" => 1357000000\n);\n\n$jwt = JWT::encode($payload, $privateKey, 'RS256');\necho \"Encode:\\n\" . print_r($jwt, true) . \"\\n\";\n\n$decoded = JWT::decode($jwt, new Key($publicKey, 'RS256'));\n\n$decoded_array = (array) $decoded;\necho \"Decode:\\n\" . print_r($decoded_array, true) . \"\\n\";\n```\n\n----------------------------------------\n\nTITLE: Using Google Cloud Vision PHP Client for Face Detection\nDESCRIPTION: This PHP code snippet demonstrates how to use the Google Cloud Vision PHP client to perform face detection on an image. It initializes the client, annotates an image file, and checks for the likelihood of headwear on detected faces.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/cloud-vision/README.md#2025-04-18_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nrequire 'vendor/autoload.php';\n\nuse Google\\Cloud\\Vision\\V1\\Feature\\Type;\nuse Google\\Cloud\\Vision\\V1\\ImageAnnotatorClient;\nuse Google\\Cloud\\Vision\\V1\\Likelihood;\n\n$client = new ImageAnnotatorClient();\n\n// Annotate an image, detecting faces.\n$annotation = $client->annotateImage(\n    fopen('/data/photos/family_photo.jpg', 'r'),\n    [Type::FACE_DETECTION]\n);\n\n// Determine if the detected faces have headwear.\nforeach ($annotation->getFaceAnnotations() as $faceAnnotation) {\n\t$likelihood = Likelihood::name($faceAnnotation->getHeadwearLikelihood());\n    echo \"Likelihood of headwear: $likelihood\" . PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Verification Examples\nDESCRIPTION: Code examples for verifying Google ID tokens and IAP tokens using the AccessToken class.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/auth/README.md#2025-04-18_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Google\\Auth\\AccessToken;\n\n$auth = new AccessToken();\n$auth->verify($idToken);\n\n$auth = new AccessToken();\n$auth->verify($idToken, [\n  'certsLocation' => AccessToken::IAP_CERT_URL\n]);\n```\n\n----------------------------------------\n\nTITLE: Authentication with Specific JSON Key\nDESCRIPTION: Example demonstrating authentication using a specific JSON key instead of environment variables.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/auth/README.md#2025-04-18_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Google\\Auth\\CredentialsLoader;\nuse Google\\Auth\\Middleware\\AuthTokenMiddleware;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\HandlerStack;\n\n// Define the Google Application Credentials array\n$jsonKey = ['key' => 'value'];\n\n// define the scopes for your API call\n$scopes = ['https://www.googleapis.com/auth/drive.readonly'];\n\n// Load credentials\n$creds = CredentialsLoader::makeCredentials($scopes, $jsonKey);\n\n// optional caching\n// $creds = new FetchAuthTokenCache($creds, $cacheConfig, $cache);\n\n// create middleware\n$middleware = new AuthTokenMiddleware($creds);\n$stack = HandlerStack::create();\n$stack->push($middleware);\n\n// create the HTTP client\n$client = new Client([\n  'handler' => $stack,\n  'base_uri' => 'https://www.googleapis.com',\n  'auth' => 'google_auth'  // authorize all requests\n]);\n\n// make the request\n$response = $client->get('drive/v2/files');\n\n// show the result!\nprint_r((string) $response->getBody());\n```\n\n----------------------------------------\n\nTITLE: Implementing CachingStream for Seeking Over Non-Seekable Streams in PHP\nDESCRIPTION: This code demonstrates using GuzzleHttp\\Psr7\\CachingStream to enable seeking on a non-seekable stream by caching previously read data. This is useful when transferring non-seekable entity bodies that may need to be rewound.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/psr7/README.md#2025-04-18_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Psr7;\n\n$original = Psr7\\Utils::streamFor(fopen('http://www.google.com', 'r'));\n$stream = new Psr7\\CachingStream($original);\n\n$stream->read(1024);\necho $stream->tell();\n// 1024\n\n$stream->seek(0);\necho $stream->tell();\n// 0\n```\n\n----------------------------------------\n\nTITLE: Decoding JWT using JWKs in PHP\nDESCRIPTION: This example demonstrates how to use JSON Web Key Sets (JWKs) with the PHP-JWT library. It shows how to parse a JWK set and use it to decode a JWT.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/firebase/php-jwt/README.md#2025-04-18_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Firebase\\JWT\\JWK;\nuse Firebase\\JWT\\JWT;\n\n$jwks = ['keys' => []];\n\nJWT::decode($payload, JWK::parseKeySet($jwks), $supportedAlgorithm);\n```\n\n----------------------------------------\n\nTITLE: Encoding and Decoding JWT with EdDSA Algorithm in PHP\nDESCRIPTION: This example shows how to use the PHP-JWT library with the EdDSA algorithm, which uses Ed25519 signatures. It demonstrates generating key pairs, encoding a JWT with the private key, and decoding it with the public key.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/firebase/php-jwt/README.md#2025-04-18_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Firebase\\JWT\\JWT;\nuse Firebase\\JWT\\Key;\n\n$keyPair = sodium_crypto_sign_keypair();\n\n$privateKey = base64_encode(sodium_crypto_sign_secretkey($keyPair));\n\n$publicKey = base64_encode(sodium_crypto_sign_publickey($keyPair));\n\n$payload = array(\n    \"iss\" => \"example.org\",\n    \"aud\" => \"example.com\",\n    \"iat\" => 1356999524,\n    \"nbf\" => 1357000000\n);\n\n$jwt = JWT::encode($payload, $privateKey, 'EdDSA');\necho \"Encode:\\n\" . print_r($jwt, true) . \"\\n\";\n\n$decoded = JWT::decode($jwt, new Key($publicKey, 'EdDSA'));\necho \"Decode:\\n\" . print_r((array) $decoded, true) . \"\\n\";\n```\n\n----------------------------------------\n\nTITLE: Basic Monolog Logger Implementation in PHP\nDESCRIPTION: Basic usage example showing how to create a log channel, add a stream handler, and write warning and error messages to a log file.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/monolog/monolog/README.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Monolog\\Logger;\nuse Monolog\\Handler\\StreamHandler;\n\n// create a log channel\n$log = new Logger('name');\n$log->pushHandler(new StreamHandler('path/to/your.log', Logger::WARNING));\n\n// add records to the log\n$log->warning('Foo');\n$log->error('Bar');\n```\n\n----------------------------------------\n\nTITLE: Registering Promise Callbacks in PHP\nDESCRIPTION: Demonstrates how to register fulfillment and rejection callbacks on a Promise object using the then() method. Shows basic promise initialization and callback registration.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/promises/README.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Promise\\Promise;\n\n$promise = new Promise();\n$promise->then(\n    // $onFulfilled\n    function ($value) {\n        echo 'The promise was fulfilled.';\n    },\n    // $onRejected\n    function ($reason) {\n        echo 'The promise was rejected.';\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Stripe PHP Library via Composer\nDESCRIPTION: This snippet shows how to install the Stripe PHP library using Composer, a dependency management tool for PHP.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpressfoundation.org/public_html/content/plugins/wpf-stripe/stripe-php/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require stripe/stripe-php\n```\n\n----------------------------------------\n\nTITLE: Guzzle v6 Middleware Implementation\nDESCRIPTION: Example of using the middleware system in Guzzle v6, which replaced the event system. This pattern uses handler stacks and PSR-7 immutable requests, requiring the return of modified request objects rather than mutating them.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-18_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Middleware;\n// Create a handler stack that has all of the default middlewares attached\n$handler = GuzzleHttp\\HandlerStack::create();\n// Push the handler onto the handler stack\n$handler->push(Middleware::mapRequest(function (RequestInterface $request) {\n    // Notice that we have to return a request object\n    return $request->withHeader('X-Foo', 'Bar');\n}));\n// Inject the handler into the client\n$client = new GuzzleHttp\\Client(['handler' => $handler]);\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Storage PHP Client\nDESCRIPTION: Commands for installing the Google Cloud Storage PHP client library using Composer package manager. Shows both component-specific and full suite installation options.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/cloud-storage/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ composer require google/cloud-storage\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ composer require google/cloud\n```\n\n----------------------------------------\n\nTITLE: Using a Promise as a Deferred in PHP\nDESCRIPTION: This example shows how in Guzzle, a promise acts as its own deferred object. This means you can directly call resolve() on a promise to fulfill it, rather than having separate promise and deferred objects.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/promises/README.md#2025-04-18_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$promise = new Promise();\n$promise->then(function ($value) { echo $value; });\n// The promise is the deferred value, so you can deliver a value to it.\n$promise->resolve('foo');\n// prints \"foo\"\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown Usage in PHP\nDESCRIPTION: Basic example of using PHP Markdown to convert text to HTML using the default transformer. Requires PSR-0-compatible autoloader and PHP 5.3 or later.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/plugin-directory/libs/michelf-php-markdown-1.6.0/Readme.md#2025-04-18_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse \\Michelf\\Markdown;\n$my_html = Markdown::defaultTransform($my_text);\n```\n\n----------------------------------------\n\nTITLE: Interoperating Between Guzzle and React Promises in PHP\nDESCRIPTION: This example demonstrates promise interoperability between Guzzle and React promises. A Guzzle promise is created and returns a React promise in its fulfillment callback, showing how cross-library promise chaining works.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/promises/README.md#2025-04-18_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// Create a React promise\n$deferred = new React\\Promise\\Deferred();\n$reactPromise = $deferred->promise();\n\n// Create a Guzzle promise that is fulfilled with a React promise.\n$guzzlePromise = new GuzzleHttp\\Promise\\Promise();\n$guzzlePromise->then(function ($value) use ($reactPromise) {\n    // Do something something with the value...\n    // Return the React promise\n    return $reactPromise;\n});\n```\n\n----------------------------------------\n\nTITLE: Google Cloud Storage Stream Wrapper Usage in PHP\nDESCRIPTION: Shows how to use the Google Cloud Storage stream wrapper functionality to handle cloud storage files like local files using standard PHP file operations.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/cloud-storage/README.md#2025-04-18_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nrequire 'vendor/autoload.php';\n\nuse Google\\Cloud\\Storage\\StorageClient;\n\n$storage = new StorageClient();\n$storage->registerStreamWrapper();\n\n$contents = file_get_contents('gs://my_bucket/file_backup.txt');\n```\n\n----------------------------------------\n\nTITLE: Recovery from Rejection in Promise Chain\nDESCRIPTION: Shows how rejections can be recovered in a promise chain by returning a non-rejected value.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/promises/README.md#2025-04-18_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Promise\\Promise;\n\n$promise = new Promise();\n$promise\n    ->then(null, function ($reason) {\n        return \"It's ok\";\n    })\n    ->then(function ($value) {\n        assert($value === \"It's ok\");\n    });\n\n$promise->reject('Error!');\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Promise with Wait and Cancel Functions in PHP\nDESCRIPTION: This example demonstrates how to create a basic Promise object with wait and cancel functions. The wait function resolves the promise with a value, while the cancel function would handle cancellation logic.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/promises/README.md#2025-04-18_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Promise\\Promise;\n\n$promise = new Promise(\n    function () use (&$promise) {\n        $promise->resolve('waited');\n    },\n    function () {\n        // do something that will cancel the promise computation (e.g., close\n        // a socket, cancel a database query, etc...)\n    }\n);\n\nassert('waited' === $promise->wait());\n```\n\n----------------------------------------\n\nTITLE: Reading a Subset of a Stream with LimitStream in PHP\nDESCRIPTION: This example demonstrates using GuzzleHttp\\Psr7\\LimitStream to read a specific slice of an existing stream. This is useful for processing large files in chunks, such as when using Amazon S3's multipart upload API.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/psr7/README.md#2025-04-18_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Psr7;\n\n$original = Psr7\\Utils::streamFor(fopen('/tmp/test.txt', 'r+'));\necho $original->getSize();\n// >>> 1048576\n\n// Limit the size of the body to 1024 bytes and start reading from byte 2048\n$stream = new Psr7\\LimitStream($original, 1024, 2048);\necho $stream->getSize();\n// >>> 1024\necho $stream->tell();\n// >>> 0\n```\n\n----------------------------------------\n\nTITLE: Installing Guzzle via Composer\nDESCRIPTION: Shows the recommended method for installing Guzzle using Composer, the PHP dependency management tool.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/README.md#2025-04-18_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require guzzlehttp/guzzle\n```\n\n----------------------------------------\n\nTITLE: Proxy-Authorization Header Authentication\nDESCRIPTION: Implementation for authentication using Proxy-Authorization header with Google Cloud IAP.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/auth/README.md#2025-04-18_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Google\\Auth\\ApplicationDefaultCredentials;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\HandlerStack;\n\n// specify the path to your application credentials\nputenv('GOOGLE_APPLICATION_CREDENTIALS=/path/to/my/credentials.json');\n\n// Provide the ID token audience. This can be a Client ID associated with an IAP application\n//    $targetAudience = 'IAP_CLIENT_ID.apps.googleusercontent.com';\n$targetAudience = 'YOUR_ID_TOKEN_AUDIENCE';\n\n// create middleware\n$middleware = ApplicationDefaultCredentials::getProxyIdTokenMiddleware($targetAudience);\n$stack = HandlerStack::create();\n$stack->push($middleware);\n\n// create the HTTP client\n$client = new Client([\n  'handler' => $stack,\n  'auth' => ['username', 'pass'], // auth option handled by your application\n  'proxy_auth' => 'google_auth',\n]);\n\n// make the request\n$response = $client->get('/');\n\n// show the result!\nprint_r((string) $response->getBody());\n```\n\n----------------------------------------\n\nTITLE: Creating Streams with GuzzleHttp\\Psr7\\Utils::streamFor in PHP\nDESCRIPTION: Creates a new stream object based on different input types. The method accepts StreamInterface objects, strings, PHP resources, iterators, objects with __toString() methods, and callables to generate various types of stream implementations.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/psr7/README.md#2025-04-18_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$stream = GuzzleHttp\\Psr7\\Utils::streamFor('foo');\n$stream = GuzzleHttp\\Psr7\\Utils::streamFor(fopen('/path/to/file', 'r'));\n\n$generator = function ($bytes) {\n    for ($i = 0; $i < $bytes; $i++) {\n        yield ' ';\n    }\n}\n\n$stream = GuzzleHttp\\Psr7\\Utils::streamFor($generator(100));\n```\n\n----------------------------------------\n\nTITLE: Integrating Guzzle Promises with React Event Loop in PHP\nDESCRIPTION: This example demonstrates how to integrate Guzzle promises with a React event loop by adding a periodic timer that runs the promise task queue on each tick of the loop.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/promises/README.md#2025-04-18_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$loop = React\\EventLoop\\Factory::create();\n$loop->addPeriodicTimer(0, [$queue, 'run']);\n```\n\n----------------------------------------\n\nTITLE: Encoding and Decoding JWT with RS256 and Passphrase in PHP\nDESCRIPTION: This example demonstrates how to use the PHP-JWT library with the RS256 algorithm and a passphrase-protected private key. It shows how to read the private key from a file and use it for encoding, then decode using the public key.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/firebase/php-jwt/README.md#2025-04-18_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Firebase\\JWT\\JWT;\nuse Firebase\\JWT\\Key;\n\n$passphrase = '[YOUR_PASSPHRASE]';\n$privateKeyFile = '/path/to/key-with-passphrase.pem';\n\n$privateKey = openssl_pkey_get_private(\n    file_get_contents($privateKeyFile),\n    $passphrase\n);\n\n$payload = array(\n    \"iss\" => \"example.org\",\n    \"aud\" => \"example.com\",\n    \"iat\" => 1356999524,\n    \"nbf\" => 1357000000\n);\n\n$jwt = JWT::encode($payload, $privateKey, 'RS256');\necho \"Encode:\\n\" . print_r($jwt, true) . \"\\n\";\n\n$publicKey = openssl_pkey_get_details($privateKey)['key'];\n\n$decoded = JWT::decode($jwt, new Key($publicKey, 'RS256'));\necho \"Decode:\\n\" . print_r((array) $decoded, true) . \"\\n\";\n```\n\n----------------------------------------\n\nTITLE: ID Token Authentication for Cloud Run/IAP\nDESCRIPTION: Example showing how to use ID tokens for authentication with Cloud Run or Cloud Identity-Aware Proxy.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/auth/README.md#2025-04-18_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Google\\Auth\\ApplicationDefaultCredentials;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\HandlerStack;\n\n// specify the path to your application credentials\nputenv('GOOGLE_APPLICATION_CREDENTIALS=/path/to/my/credentials.json');\n\n// Provide the ID token audience. This can be a Client ID associated with an IAP application,\n// Or the URL associated with a CloudRun App\n//    $targetAudience = 'IAP_CLIENT_ID.apps.googleusercontent.com';\n//    $targetAudience = 'https://service-1234-uc.a.run.app';\n$targetAudience = 'YOUR_ID_TOKEN_AUDIENCE';\n\n// create middleware\n$middleware = ApplicationDefaultCredentials::getIdTokenMiddleware($targetAudience);\n$stack = HandlerStack::create();\n$stack->push($middleware);\n\n// create the HTTP client\n$client = new Client([\n  'handler' => $stack,\n  'auth' => 'google_auth',\n  // Cloud Run, IAP, or custom resource URL\n  'base_uri' => 'https://YOUR_PROTECTED_RESOURCE',\n]);\n\n// make the request\n$response = $client->get('/');\n\n// show the result!\nprint_r((string) $response->getBody());\n```\n\n----------------------------------------\n\nTITLE: CSS Component Class Naming Pattern\nDESCRIPTION: Demonstrates the naming convention for CSS components using pattern-{component} for top-level and pattern-{component}__{element} for child elements. Includes conditional state classes with is- and has- prefixes.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/themes/pub/wporg-patterns/css/README.md#2025-04-18_snippet_0\n\nLANGUAGE: css\nCODE:\n```\npattern-{kebab-case-component}\\npattern-{kebab-case-component}__{child-element}\\nis-{state}\\nhas-{state}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a FulfilledPromise in PHP\nDESCRIPTION: This snippet shows how to create a pre-fulfilled promise with a value. Callbacks attached to a FulfilledPromise are immediately invoked since the promise is already in the fulfilled state.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/promises/README.md#2025-04-18_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Promise\\FulfilledPromise;\n\n$promise = new FulfilledPromise('value');\n\n// Fulfilled callbacks are immediately invoked.\n$promise->then(function ($value) {\n    echo $value;\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Stripe API Response Data in PHP\nDESCRIPTION: This snippet shows how to access data from the last API response on a Stripe object using the getLastResponse() method.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpressfoundation.org/public_html/content/plugins/wpf-stripe/stripe-php/README.md#2025-04-18_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$charge = \\Stripe\\Charge::create(['amount' => 2000, 'currency' => 'usd', 'source' => 'tok_visa']);\necho $charge->getLastResponse()->headers['Request-Id'];\n```\n\n----------------------------------------\n\nTITLE: Promise Rejection Handling in PHP\nDESCRIPTION: Demonstrates basic promise rejection handling using onRejected callbacks.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/promises/README.md#2025-04-18_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Promise\\Promise;\n\n$promise = new Promise();\n$promise->then(null, function ($reason) {\n    echo $reason;\n});\n\n$promise->reject('Error!');\n// Outputs \"Error!\"\n```\n\n----------------------------------------\n\nTITLE: Running the Guzzle Promises Task Queue in PHP\nDESCRIPTION: This code shows how to access and run the global task queue for Guzzle promises. Running the task queue is necessary for asynchronous promise resolution in event loops.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/promises/README.md#2025-04-18_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// Get the global task queue\n$queue = GuzzleHttp\\Promise\\Utils::queue();\n$queue->run();\n```\n\n----------------------------------------\n\nTITLE: Implementing Logger Interface in PHP Class\nDESCRIPTION: Example of implementing the PSR LoggerInterface in a PHP class. Shows how to inject a logger dependency and use it for logging information and error messages with exception handling.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/psr/log/README.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Psr\\Log\\LoggerInterface;\n\nclass Foo\n{\n    private $logger;\n\n    public function __construct(LoggerInterface $logger = null)\n    {\n        $this->logger = $logger;\n    }\n\n    public function doSomething()\n    {\n        if ($this->logger) {\n            $this->logger->info('Doing work');\n        }\n           \n        try {\n            $this->doSomethingElse();\n        } catch (Exception $exception) {\n            $this->logger->error('Oh no!', array('exception' => $exception));\n        }\n\n        // do something useful\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronous Promise Resolution with Wait\nDESCRIPTION: Demonstrates using the wait() method to synchronously resolve promises and handle their results.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/promises/README.md#2025-04-18_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$promise = new Promise(function () use (&$promise) {\n    $promise->resolve('foo');\n});\n\n// Calling wait will return the value of the promise.\necho $promise->wait(); // outputs \"foo\"\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Vision PHP Client with Composer\nDESCRIPTION: This snippet demonstrates how to install the Google Cloud Vision PHP client library using Composer. It shows two options: installing just the Vision component or the entire Google Cloud PHP suite.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/cloud-vision/README.md#2025-04-18_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ composer require google/cloud-vision\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ composer require google/cloud\n```\n\n----------------------------------------\n\nTITLE: Creating Firestore gRPC Client Instance\nDESCRIPTION: PHP code that instantiates a FirestoreClient object with the specified host and authentication options.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/grpc-gcp/doc/gRPC-client-user-guide.md#2025-04-18_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$firestoreClient = new FirestoreClient($host, $opts);\n```\n\n----------------------------------------\n\nTITLE: Using CRC32 Library in PHP\nDESCRIPTION: Demonstrates how to use the CRC32 library to create a CRC32 instance, update it with data, and get the hash. It uses the Castagnoli polynomial and autoloads the library via Composer.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/crc32/README.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nrequire 'vendor/autoload.php';\n\nuse Google\\CRC32\\CRC32;\n\n$crc = CRC32::create(CRC32::CASTAGNOLI);\n$crc->update('hello');\necho $crc->hash();\n```\n\n----------------------------------------\n\nTITLE: Creating a Buffered Stream with Size Limit in PHP\nDESCRIPTION: This example shows how to create a GuzzleHttp\\Psr7\\BufferStream with a high water mark of 1024 bytes. The stream will indicate when writers should slow down by returning false when the buffer exceeds this limit.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/psr7/README.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Psr7;\n\n// When more than 1024 bytes are in the buffer, it will begin returning\n// false to writes. This is an indication that writers should slow down.\n$buffer = new Psr7\\BufferStream(1024);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Request Timeouts for Stripe API in PHP\nDESCRIPTION: This code demonstrates how to set custom request timeouts for the Stripe API client using a custom CurlClient instance.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpressfoundation.org/public_html/content/plugins/wpf-stripe/stripe-php/README.md#2025-04-18_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$curl = new \\Stripe\\HttpClient\\CurlClient();\n$curl->setTimeout(10);\n$curl->setConnectTimeout(5);\n\necho $curl->getTimeout();\necho $curl->getConnectTimeout();\n\n\\Stripe\\ApiRequestor::setHttpClient($curl);\n```\n\n----------------------------------------\n\nTITLE: Using DroppingStream to Limit Stream Size in PHP\nDESCRIPTION: This snippet illustrates the GuzzleHttp\\Psr7\\DroppingStream decorator that stops writing data once the underlying stream reaches a specified size limit. It creates a stream that drops data after 10 bytes.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/psr7/README.md#2025-04-18_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Psr7;\n\n// Create an empty stream\n$stream = Psr7\\Utils::streamFor();\n\n// Start dropping data when the stream has more than 10 bytes\n$dropping = new Psr7\\DroppingStream($stream, 10);\n\n$dropping->write('01234567890123456789');\necho $stream; // 0123456789\n```\n\n----------------------------------------\n\nTITLE: Custom Markdown Parser Configuration in PHP\nDESCRIPTION: Example demonstrating how to instantiate and customize a Markdown parser with specific configuration options.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/plugin-directory/libs/michelf-php-markdown-1.6.0/Readme.md#2025-04-18_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse \\Michelf\\MarkdownExtra;\n$parser = new MarkdownExtra;\n$parser->fn_id_prefix = \"post22-\";\n$my_html = $parser->transform($my_text);\n```\n\n----------------------------------------\n\nTITLE: Using AppendStream to Read from Multiple Streams in PHP\nDESCRIPTION: This snippet demonstrates how to use GuzzleHttp\\Psr7\\AppendStream to read from multiple streams sequentially, combining their contents. It creates two streams, composes them, and adds another stream to the composition.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/psr7/README.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Psr7;\n\n$a = Psr7\\Utils::streamFor('abc, ');\n$b = Psr7\\Utils::streamFor('123.');\n$composed = new Psr7\\AppendStream([$a, $b]);\n\n$composed->addStream(Psr7\\Utils::streamFor(' Above all listen to me'));\n\necho $composed; // abc, 123. Above all listen to me.\n```\n\n----------------------------------------\n\nTITLE: Setting Custom cURL Options for Stripe API in PHP\nDESCRIPTION: This snippet shows how to set custom cURL options, such as a proxy, for the Stripe API client using a custom CurlClient instance.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpressfoundation.org/public_html/content/plugins/wpf-stripe/stripe-php/README.md#2025-04-18_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$curl = new \\Stripe\\HttpClient\\CurlClient([CURLOPT_PROXY => 'proxy.local:80']);\n\\Stripe\\ApiRequestor::setHttpClient($curl);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Iterative Promise Chaining in PHP\nDESCRIPTION: This code illustrates how Guzzle implements promise resolution iteratively rather than recursively. It shows how you can chain 1000 promises without increasing the stack size, maintaining a constant stack depth.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/promises/README.md#2025-04-18_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire 'vendor/autoload.php';\n\nuse GuzzleHttp\\Promise\\Promise;\n\n$parent = new Promise();\n$p = $parent;\n\nfor ($i = 0; $i < 1000; $i++) {\n    $p = $p->then(function ($v) {\n        // The stack size remains constant (a good thing)\n        echo xdebug_get_stack_depth() . ', ';\n        return $v + 1;\n    });\n}\n\n$parent->resolve(0);\nvar_dump($p->wait()); // int(1000)\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Logger for Stripe PHP Library\nDESCRIPTION: This code demonstrates how to configure a PSR-3 compatible logger for the Stripe PHP library to handle log messages.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpressfoundation.org/public_html/content/plugins/wpf-stripe/stripe-php/README.md#2025-04-18_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n\\Stripe\\Stripe::setLogger($logger);\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Options for Guzzle HTTP Client\nDESCRIPTION: Methods for getting and setting default options on a Guzzle client interface. These methods replaced the previous getConfig() and setConfig() methods in version 4.0.0-rc.2.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/CHANGELOG.md#2025-04-18_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\ngetDefaultOption()\nsetDefaultOption()\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Stream Decorator with EOF Callback in PHP\nDESCRIPTION: This example demonstrates how to create a custom stream decorator using StreamDecoratorTrait that calls a specific function when the end of the stream is reached. It extends the read method to detect EOF and invoke a callback.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/psr7/README.md#2025-04-18_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\StreamInterface;\nuse GuzzleHttp\\Psr7\\StreamDecoratorTrait;\n\nclass EofCallbackStream implements StreamInterface\n{\n    use StreamDecoratorTrait;\n\n    private $callback;\n\n    public function __construct(StreamInterface $stream, callable $cb)\n    {\n        $this->stream = $stream;\n        $this->callback = $cb;\n    }\n\n    public function read($length)\n    {\n        $result = $this->stream->read($length);\n\n        // Invoke the callback when EOF is hit.\n        if ($this->eof()) {\n            call_user_func($this->callback);\n        }\n\n        return $result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting PSR-7 Streams to PHP Stream Resources with StreamWrapper\nDESCRIPTION: This example demonstrates how to use GuzzleHttp\\Psr7\\StreamWrapper to convert a PSR-7 stream into a PHP stream resource. This allows PSR-7 streams to be used with native PHP stream functions.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/psr7/README.md#2025-04-18_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Psr7\\StreamWrapper;\n\n$stream = GuzzleHttp\\Psr7\\Utils::streamFor('hello!');\n$resource = StreamWrapper::getResource($stream);\necho fread($resource, 6); // outputs hello!\n```\n\n----------------------------------------\n\nTITLE: Using trigger_deprecation() Function in PHP with Symfony Deprecation Contracts\nDESCRIPTION: Example usage of the trigger_deprecation() function from Symfony Deprecation Contracts. The function requires the package name, version introducing the deprecation, and a message with optional printf-formatted parameters.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/symfony/deprecation-contracts/README.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ntrigger_deprecation('symfony/blockchain', '8.9', 'Using \"%s\" is deprecated, use \"%s\" instead.', 'bitcoin', 'fabcoin');\n```\n\n----------------------------------------\n\nTITLE: JSON Manifest Structure for WPORG Markdown Importer\nDESCRIPTION: Example JSON manifest that defines the structure for importing markdown files. The manifest maps desired permalinks to objects containing slug, markdown source URL, parent relationship, and temporary title information for WordPress pages.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/wporg-markdown/README.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"foo\": {\n\t\t\"title\": \"Temporary Foo Title\",\n\t\t\"slug\": \"foo\",\n\t\t\"markdown_source\": \"https://raw.githubusercontent.com/WordPress/doc-repo/master/foo.md\",\n\t\t\"parent\": null\n\t},\n\t\"foo/bar\": {\n\t\t\"title\": \"Temporary Bar Title\",\n\t\t\"slug\": \"bar\",\n\t\t\"markdown_source\": \"https://raw.githubusercontent.com/WordPress/doc-repo/master/foo/bar.md\",\n\t\t\"parent\": \"foo\"\n\t},\n\t\"foo/bar/quux\": {\n\t\t\"title\": \"Temporary Quux Title\",\n\t\t\"slug\": \"quux\",\n\t\t\"markdown_source\": \"https://raw.githubusercontent.com/WordPress/doc-repo/master/foo/bar/quux.md\",\n\t\t\"parent\": \"foo/bar\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a RejectedPromise in PHP\nDESCRIPTION: This example shows how to create a pre-rejected promise with an error reason. Rejection callbacks attached to a RejectedPromise are immediately invoked since the promise is already in the rejected state.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/promises/README.md#2025-04-18_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Promise\\RejectedPromise;\n\n$promise = new RejectedPromise('Error');\n\n// Rejected callbacks are immediately invoked.\n$promise->then(null, function ($reason) {\n    echo $reason;\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Google Application Credentials\nDESCRIPTION: PHP code to set the environment variable for Google application credentials JSON file path.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/auth/README.md#2025-04-18_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nputenv('GOOGLE_APPLICATION_CREDENTIALS=/path/to/my/credentials.json');\n```\n\n----------------------------------------\n\nTITLE: Using Batch Function for Parallel Requests in Guzzle 4.0\nDESCRIPTION: The GuzzleHttp\\batch() function provides a convenient way to send multiple HTTP requests in parallel without writing asynchronous code. This was introduced in Guzzle 4.0.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/CHANGELOG.md#2025-04-18_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nGuzzleHttp\\batch()\n```\n\n----------------------------------------\n\nTITLE: Making a ListDocuments RPC Call to Firestore\nDESCRIPTION: PHP code showing how to prepare a ListDocumentsRequest and make a synchronous RPC call to the Firestore service.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/grpc-gcp/doc/gRPC-client-user-guide.md#2025-04-18_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$argument = new ListDocumentsRequest();\n$project_id = xxxxxxx;\n$argument->setParent(\"projects/$project_id/databases/(default)/documents\");\nlist($Response, $error) = $firestoreClient->ListDocuments($argument)->wait();\n```\n\n----------------------------------------\n\nTITLE: Displaying Read Time in WordPress Loop\nDESCRIPTION: Function to display the estimated read time when used within the WordPress loop context\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/support-helphub/inc/helphub-read-time/readme.txt#2025-04-18_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php hh_the_read_time(); ?>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Stream Behavior with FnStream in PHP\nDESCRIPTION: This code demonstrates how to use GuzzleHttp\\Psr7\\FnStream to decorate a stream with custom behavior by providing callable functions. This example customizes the rewind method to add logging behavior.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/psr7/README.md#2025-04-18_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Psr7;\n\n$stream = Psr7\\Utils::streamFor('hi');\n$fnStream = Psr7\\FnStream::decorate($stream, [\n    'rewind' => function () use ($stream) {\n        echo 'About to rewind - ';\n        $stream->rewind();\n        echo 'rewound!';\n    }\n]);\n\n$fnStream->rewind();\n// Outputs: About to rewind - rewound!\n```\n\n----------------------------------------\n\nTITLE: Client Request Handling Migration in Guzzle\nDESCRIPTION: Example showing the changes in how HTTP requests are created and sent between Guzzle 3.0 and 4.0 versions.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-18_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// 3.0\n$request = $client->get('/');\n$response = $request->send();\n\n// 4.0\n$response = $client->get('/');\n\n// or, to mirror the previous behavior\n$request = $client->createRequest('GET', '/');\n$response = $client->send($request);\n```\n\n----------------------------------------\n\nTITLE: Displaying Read Time Outside WordPress Loop\nDESCRIPTION: Function to display the estimated read time for a specific post when used outside the WordPress loop, requires post ID parameter\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/support-helphub/inc/helphub-read-time/readme.txt#2025-04-18_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php hh_the_read_time( $post->ID ); ?>\n```\n\n----------------------------------------\n\nTITLE: Creating a Non-Seekable Stream Wrapper in PHP\nDESCRIPTION: This code shows how to use GuzzleHttp\\Psr7\\NoSeekStream to wrap an existing stream and prevent seeking operations. Any attempt to seek on the resulting stream will fail, returning NULL when reading after a seek operation.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/psr7/README.md#2025-04-18_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Psr7;\n\n$original = Psr7\\Utils::streamFor('foo');\n$noSeek = new Psr7\\NoSeekStream($original);\n\necho $noSeek->read(3);\n// foo\nvar_export($noSeek->isSeekable());\n// false\n$noSeek->seek(0);\nvar_export($noSeek->read(3));\n// NULL\n```\n\n----------------------------------------\n\nTITLE: Comparing Native Function Call Changes in Guzzle v7\nDESCRIPTION: Example showing how native function calls in Guzzle 7.0 are now prefixed with a slash to prevent method overloading by other libraries or applications.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Before:\ncurl_version();\n\n// After:\n\\curl_version();\n```\n\n----------------------------------------\n\nTITLE: Setting App Info for Stripe PHP Library\nDESCRIPTION: This code demonstrates how plugin developers should set app information to identify their plugin when using the Stripe PHP library.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpressfoundation.org/public_html/content/plugins/wpf-stripe/stripe-php/README.md#2025-04-18_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n\\Stripe\\Stripe::setAppInfo(\"MyAwesomePlugin\", \"1.2.34\", \"https://myawesomeplugin.info\");\n```\n\n----------------------------------------\n\nTITLE: URI Extraction Using Standard Mode\nDESCRIPTION: Shows how to extract variables from a URI using the standard (non-strict) mode. In this mode, the extraction will proceed even if some variables in the template don't match values in the URI.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/rize/uri-template/README.md#2025-04-18_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Rize\\UriTemplate;\n\n$uri = new UriTemplate();\n$params = $uri->extract('/{?a,b}', '/?a=1')\n\n>> print_r($params);\n(\n    [a] => 1\n    [b] => null\n)\n```\n\n----------------------------------------\n\nTITLE: Installing PHP-JWT using Composer\nDESCRIPTION: This snippet shows how to install the PHP-JWT library using Composer, the PHP dependency manager. It also includes an optional step to install sodium_compat for PHP versions < 7.2 or without libsodium.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/firebase/php-jwt/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require firebase/php-jwt\n```\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require paragonie/sodium_compat\n```\n\n----------------------------------------\n\nTITLE: Setting Up WordPress.org Plugins Development Environment\nDESCRIPTION: Commands for installing npm dependencies and running Grunt watch to enable development features like linters, Sass compilation, and JS client building.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/themes/pub/wporg-plugins-2024/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\ngrunt watch # Run linters, build Sass, JS client, etc.\n```\n\n----------------------------------------\n\nTITLE: URI Extraction Using Strict Mode\nDESCRIPTION: Demonstrates the strict mode for URI extraction which requires all variables in the template to have corresponding values in the URI. Returns null when variables are missing and succeeds only with complete matches.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/rize/uri-template/README.md#2025-04-18_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Rize\\UriTemplate;\n\n$uri = new UriTemplate();\n\n// Note that variable `b` is absent in uri\n$params = $uri->extract('/{?a,b}', '/?a=1', true);\n\n>>> null\n\n// Now we give `b` some value\n$params = $uri->extract('/{?a,b}', '/?a=1&b=2', true);\n\n>>> print_r($params)\n(\n  [a] => 1\n  [b] => 2\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy File Operations with LazyOpenStream in PHP\nDESCRIPTION: This snippet shows how to use GuzzleHttp\\Psr7\\LazyOpenStream to defer opening a file until an I/O operation is performed. This optimizes resource usage by only opening the file when needed.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/psr7/README.md#2025-04-18_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Psr7;\n\n$stream = new Psr7\\LazyOpenStream('/path/to/file', 'r');\n// The file has not yet been opened...\n\necho $stream->read(10);\n// The file is opened and read from only when needed.\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Stream Decorator with EOF Callback in PHP\nDESCRIPTION: This snippet shows how to use the custom EofCallbackStream decorator to detect when the end of a stream is reached. It creates a stream with a callback function that echoes a message when EOF is encountered.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/psr7/README.md#2025-04-18_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Psr7;\n\n$original = Psr7\\Utils::streamFor('foo');\n\n$eofStream = new EofCallbackStream($original, function () {\n    echo 'EOF!';\n});\n\n$eofStream->read(2);\n$eofStream->read(1);\n// echoes \"EOF!\"\n$eofStream->seek(0);\n$eofStream->read(3);\n// echoes \"EOF!\"\n```\n\n----------------------------------------\n\nTITLE: Installing gRPC-PHP and Protobuf Extensions\nDESCRIPTION: Commands to install the PHP extensions for gRPC and Protocol Buffers using PECL, which are necessary for the client to communicate with Google Cloud services.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/grpc-gcp/doc/gRPC-client-user-guide.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ [sudo] pecl install protobuf\n$ [sudo] pecl install grpc\n```\n\n----------------------------------------\n\nTITLE: Markdown Change Log Document\nDESCRIPTION: A detailed changelog document showing version history, changes, bug fixes and feature additions for the Guzzle HTTP client library. The document covers versions from 6.3.2 to 7.4.1.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Change Log\n\nPlease refer to [UPGRADING](UPGRADING.md) guide for upgrading to a major version.\n\n## 7.4.1 - 2021-12-06\n\n### Changed\n\n- Replaced implicit URI to string coercion [#2946](https://github.com/guzzle/guzzle/pull/2946)\n- Allow `symfony/deprecation-contracts` version 3 [#2961](https://github.com/guzzle/guzzle/pull/2961)\n\n### Fixed\n\n- Only close curl handle if it's done [#2950](https://github.com/guzzle/guzzle/pull/2950)\n\n[...additional version history...]\n```\n\n----------------------------------------\n\nTITLE: Building and Committing WordPress.org Theme Changes\nDESCRIPTION: These commands create a build version to minimize file size before committing changes to the SVN repository. This helps keep the theme lightweight for production use.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/themes/pub/wporg-main/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngrunt build\nsvn ci\n```\n\n----------------------------------------\n\nTITLE: Working with API Endpoints Using Base URI and Default Parameters\nDESCRIPTION: Demonstrates how to use a base URI and default parameters with the UriTemplate class. This approach is useful when working with API endpoints that share a common base URL and version.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/rize/uri-template/README.md#2025-04-18_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Rize\\UriTemplate;\n\n$uri = new UriTemplate('https://api.twitter.com/{version}', ['version' => 1.1]);\n$uri->extract('/search/{term:1}/{term}/{?q*,limit}', '/search/j/john/?q=a&q=b&limit=10');\n\n>> print_r($params);\n(\n    [term:1] => j\n    [term] => john\n    [q] => Array\n        (\n            [0] => a\n            [1] => b\n        )\n\n    [limit] => 10\n)\n```\n\n----------------------------------------\n\nTITLE: Running the PHP gRPC Client Script\nDESCRIPTION: Command to execute the PHP script with the required gRPC and protobuf extensions enabled.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/grpc-gcp/doc/gRPC-client-user-guide.md#2025-04-18_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\n$ php -d extension=grpc.so -d extension=protobuf.so ListDocumentClient.php\n```\n\n----------------------------------------\n\nTITLE: Adding Common Protos Dependency in Composer JSON\nDESCRIPTION: Shows how to add the Google Common Protos package as a dependency in a composer.json file. This snippet demonstrates the specific JSON syntax required in the requires section.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/common-protos/README.md#2025-04-18_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n  \"google/common-protos\": \"^1.0\"\n```\n\n----------------------------------------\n\nTITLE: Event Listener Callback Migration in Guzzle\nDESCRIPTION: Example demonstrating the migration of event listener callback registration from Guzzle 3.x to 4.x format.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-18_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// 3.x\n$request->getEventDispatcher()->addListener('foo', function (Event $event) { /* ... */ } );\n// 4.x\n$request->getEmitter()->on('foo', function (Event $event, $name) { /* ... */ } );\n```\n\n----------------------------------------\n\nTITLE: Relativizing URIs in PHP using GuzzleHttp\\Psr7\\UriResolver\nDESCRIPTION: Demonstrates how to use the UriResolver::relativize method to generate relative links from a base URI. This is useful for reducing document size or creating self-contained downloadable archives.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/psr7/README.md#2025-04-18_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n$base = new Uri('http://example.com/a/b/');\necho UriResolver::relativize($base, new Uri('http://example.com/a/b/c'));  // prints 'c'.\necho UriResolver::relativize($base, new Uri('http://example.com/a/x/y'));  // prints '../x/y'.\necho UriResolver::relativize($base, new Uri('http://example.com/a/b/?q')); // prints '?q'.\necho UriResolver::relativize($base, new Uri('http://example.org/a/b/'));   // prints '//example.org/a/b/'.\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Authentication in Guzzle\nDESCRIPTION: Example showing the new way to configure HTTP Basic or Digest Authentication in Guzzle after deprecation of CurlAuthPlugin. This approach uses the client's configuration to set authentication credentials through request options.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/CHANGELOG.md#2025-04-18_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$client->getConfig()->setPath('request.options/auth', array('user', 'pass', 'Basic|Digest');\n```\n\n----------------------------------------\n\nTITLE: Setting Authentication Options in Guzzle 3.7\nDESCRIPTION: Example showing the new way to configure authentication options in Guzzle 3.7, replacing the deprecated CurlAuthPlugin. The code demonstrates how to set authentication credentials using either client configuration or default options.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-18_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$client->getConfig()->setPath('request.options/auth', array('user', 'pass', 'Basic|Digest|NTLM|Any'));\n```\n\nLANGUAGE: php\nCODE:\n```\n$client->setDefaultOption('auth', array('user', 'pass', 'Basic|Digest|NTLM|Any'));\n```\n\n----------------------------------------\n\nTITLE: Enabling Theme Usage in Route (PHP)\nDESCRIPTION: This code snippet demonstrates how to enable the new theme behavior for a specific page by adding a call to $this->use_theme() in the Route. This causes the theme to be 'faked' as the currently-active theme for the ongoing request.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/wporg-gp-translation-events/themes/wporg-translate-events-2024/README.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$this->use_theme()\n```\n\n----------------------------------------\n\nTITLE: Creating composer.json for Client Dependencies\nDESCRIPTION: Example composer.json file configuration that specifies the required Google Cloud libraries and sets up autoloading for the generated client code.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/grpc-gcp/doc/gRPC-client-user-guide.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"require\": {\n        \"google/cloud\": \"^0.52.1\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"FireStore\\\\\": \"src/\",\n            \"Google\\\\Cloud\\\\Firestore\\\\V1beta1\\\\\": \"Google/Cloud/Firestore/V1beta1/\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Per-request Configuration for Stripe API in PHP\nDESCRIPTION: This snippet shows how to set per-request API key and Stripe account for applications that need to use multiple keys, such as those using Stripe Connect.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpressfoundation.org/public_html/content/plugins/wpf-stripe/stripe-php/README.md#2025-04-18_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n\\Stripe\\Charge::all([], [\n    'api_key' => 'sk_test_...',\n    'stripe_account' => 'acct_...'\n]);\n\n\\Stripe\\Charge::retrieve(\"ch_18atAXCdGbJFKhCuBAa4532Z\", [\n    'api_key' => 'sk_test_...',\n    'stripe_account' => 'acct_...'\n]);\n```\n\n----------------------------------------\n\nTITLE: Command Configuration in Guzzle 3.7 (Recommended Approach)\nDESCRIPTION: Example showing the recommended way of configuring command headers and response body handling in Guzzle 3.7. This approach uses the new request_options parameter structure.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-18_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$command = $client->getCommand('foo', array(\n    'command.request_options' => array(\n        'headers' => array('Test' => '123'),\n        'save_as' => '/path/to/file'\n    )\n));\n```\n\n----------------------------------------\n\nTITLE: Configuring CA Bundle Path for Stripe PHP Library\nDESCRIPTION: This code demonstrates how to set a custom CA bundle path for the Stripe PHP library instead of using the default internal bundle.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpressfoundation.org/public_html/content/plugins/wpf-stripe/stripe-php/README.md#2025-04-18_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n\\Stripe\\Stripe::setCABundlePath(\"path/to/ca/bundle\");\n```\n\n----------------------------------------\n\nTITLE: Configuring ngrok for Slack #props Handler testing\nDESCRIPTION: This YAML configuration for ngrok creates a secure tunnel to redirect Slack webhook requests to a local development environment. It includes authentication to prevent unauthorized access and configures TLS binding for secure connections.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/common/includes/slack/props/readme.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# See https://ngrok.com/docs/ngrok-agent/config\nauthtoken: {your ngrok account auth token}\n\ntunnels:\n  api:\n    # Use basic auth to prevent hackers from accessing sandbox. HelpScout doesn't support this, but Slack does.\n    # To use, include it in the webhook URL, like: https://{random username}:{random password}@rand-ip-hostname.ngrok.io/\n    auth: \"{random username}:{random password}\"\n    proto: http\n    addr: 443\n    # hostname - leave this disabled so it'll generate random one each time, for security.\n    host_header: api.wordpress.org\n    bind_tls: true\n```\n\n----------------------------------------\n\nTITLE: Installing Composer for Google Auth Library\nDESCRIPTION: Command to install Composer package manager, which is required to install the Google Auth library.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/auth/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install Composer\ncurl -sS https://getcomposer.org/installer | php\n```\n\n----------------------------------------\n\nTITLE: Installing Monolog via Composer in PHP\nDESCRIPTION: Command to install the latest version of Monolog using Composer package manager.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/monolog/monolog/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require monolog/monolog\n```\n\n----------------------------------------\n\nTITLE: Accessing Path in URL with Guzzle Helper Functions\nDESCRIPTION: Helper functions added to functions.php for getting and setting the path portion of URLs in Guzzle 4.0.0-rc.2.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/CHANGELOG.md#2025-04-18_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nget_path()\nset_path()\n```\n\n----------------------------------------\n\nTITLE: Updating Guzzle\\Service\\Description\\ServiceDescription Usage\nDESCRIPTION: This snippet demonstrates the changes in the ServiceDescription class usage. Commands are now called Operations, and method names have been updated accordingly.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-18_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Service\\Description\\ServiceDescription;\n\n$sd = new ServiceDescription();\n$sd->getCommands();     // @returns ApiCommandInterface[]\n$sd->hasCommand($name);\n$sd->getCommand($name); // @returns ApiCommandInterface|null\n$sd->addCommand($command); // @param ApiCommandInterface $command\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Service\\Description\\ServiceDescription;\n\n$sd = new ServiceDescription();\n$sd->getOperations();           // @returns OperationInterface[]\n$sd->hasOperation($name);\n$sd->getOperation($name);       // @returns OperationInterface|null\n$sd->addOperation($operation);  // @param OperationInterface $operation\n```\n\n----------------------------------------\n\nTITLE: Installing Common Protos with Composer CLI\nDESCRIPTION: Demonstrates how to install the Google Common Protos package using the Composer command line interface. This command will download and install the package and its dependencies.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/common-protos/README.md#2025-04-18_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require google/common-protos\n```\n\n----------------------------------------\n\nTITLE: Installing Google Auth Library via Composer\nDESCRIPTION: Command to install the latest stable version of Google Auth library using Composer.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/auth/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer.phar require google/auth\n```\n\n----------------------------------------\n\nTITLE: Installing HelpHub Contributors WordPress Plugin\nDESCRIPTION: These steps outline the process for installing the HelpHub Contributors plugin on a WordPress site. It involves uploading the plugin ZIP file, activating it, and configuring the Contributors field on the post edit screen.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/support-helphub/inc/helphub-contributors/README.txt#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Upload the ZIP file through the \"Plugins > Add New > Upload\" screen in your WordPress dashboard.\n2. Activate the plugin through the 'Plugins' menu in WordPress\n3. Go to edit-post screen and add wp.org usernames to \"Contributors\" field in \"Publish\" meta-box.\n```\n\n----------------------------------------\n\nTITLE: Importing Required PHP Libraries for Firestore Client\nDESCRIPTION: PHP code snippet showing how to import the necessary classes and libraries for using the generated Firestore client API.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/grpc-gcp/doc/gRPC-client-user-guide.md#2025-04-18_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nrequire_once __DIR__ . '/vendor/autoload.php';\nuse Google\\Cloud\\Firestore\\V1beta1\\FirestoreClient;\nuse Google\\Cloud\\Firestore\\V1beta1\\ListDocumentsRequest;\nuse Google\\Auth\\ApplicationDefaultCredentials;\n```\n\n----------------------------------------\n\nTITLE: Installing HelpHub Post Types Plugin via ZIP Upload\nDESCRIPTION: Step-by-step installation instructions for uploading and activating the HelpHub Post Types plugin through the WordPress dashboard.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/support-helphub/inc/helphub-post-types/readme.txt#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Upload the ZIP file through the \"Plugins > Add New > Upload\" screen in your WordPress dashboard.\n2. Activate the plugin through the 'Plugins' menu in WordPress\n3. Visit the settings screen and configure, as desired.\n```\n\n----------------------------------------\n\nTITLE: Using Helphub Codex Languages Shortcode in WordPress\nDESCRIPTION: Demonstrates how to use the 'codex_languages' shortcode provided by the plugin to create links to translated Codex articles. The example shows linking to English and Japanese versions of a specific article.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/support-helphub/inc/helphub-codex-languages/readme.txt#2025-04-18_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n[codex_languages en=\"Version 4.6\" codex_ja=\"version 4.6\"]\n```\n\n----------------------------------------\n\nTITLE: Accessing Monolog API Version in PHP\nDESCRIPTION: The constant Monolog\\Logger::API can be used to determine the installed Monolog version (1 or 2) when writing integration code.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/monolog/monolog/UPGRADE.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`Monolog\\Logger::API`\n```\n\n----------------------------------------\n\nTITLE: Installing the WordPress.org Parent Theme via SVN\nDESCRIPTION: This command uses SVN to check out the wporg parent theme directly from the WordPress.org meta repository. It's an alternative to using Composer for installing the parent theme dependency.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/themes/pub/wporg-patterns/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsvn co https://meta.svn.wordpress.org/sites/trunk/wordpress.org/public_html/wp-content/themes/pub/wporg path/to/wp-content/themes/wporg\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Headers from Guzzle Client Configuration\nDESCRIPTION: Example showing how to access default headers from a Guzzle HTTP client after the deprecation of getDefaultHeaders(). This uses the client's configuration object to retrieve header values from the request.options path.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/CHANGELOG.md#2025-04-18_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$client->getConfig()->getPath('request.options/headers')\n```\n\n----------------------------------------\n\nTITLE: Setting Google Cloud Credentials Environment\nDESCRIPTION: Commands for setting up the Google Cloud credentials required for authenticating API requests to Google Cloud services.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/grpc-gcp/doc/gRPC-client-user-guide.md#2025-04-18_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n$ vim $HOME/key.json\n## Paste you credential file downloaded from your cloud project\n## which you can find in APIs&Services => credentials => create credentials\n## => Service account key => your credentials\n$ export GOOGLE_APPLICATION_CREDENTIALS=$HOME/key.json\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP to Use CRC32C Extension\nDESCRIPTION: Shows the PHP configuration needed to enable the CRC32C extension after compilation.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/crc32/README.md#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# php.ini\nextension=crc32c.so\n```\n\n----------------------------------------\n\nTITLE: Installing Node Dependencies for Parent Theme\nDESCRIPTION: Commands for installing npm packages in the parent WordPress.org theme, including a workaround for Sass installation issues.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/themes/pub/wporg-openverse/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n$ npm install node-sass@npm:sass\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Injecting CurlMulti Object into Guzzle Clients\nDESCRIPTION: Example of how to reuse the same CurlMulti object with each client by adding a listener to the ServiceBuilder's create_client event. This change is related to the update in Guzzle 3.2 where CurlMulti is no longer reused globally.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-18_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n$multi = new Guzzle\\Http\\Curl\\CurlMulti();\n$builder = Guzzle\\Service\\Builder\\ServiceBuilder::factory('/path/to/config.json');\n$builder->addListener('service_builder.create_client', function ($event) use ($multi) {\n    $event['client']->setCurlMulti($multi);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing CRC32 Library via Composer\nDESCRIPTION: Shows the command to install the CRC32 library using Composer package manager.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/crc32/README.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ composer require google/crc32\n```\n\n----------------------------------------\n\nTITLE: MU Plugins Loader Configuration\nDESCRIPTION: PHP code for loading required MU plugins in WordPress, including locales and global header-footer blocks.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/themes/pub/wporg-openverse/README.md#2025-04-18_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once WPMU_PLUGIN_DIR . '/pub/locales.php';\nrequire_once WPMU_PLUGIN_DIR . '/wporg-mu-plugins/mu-plugins/blocks/global-header-footer/blocks.php';\nrequire_once WPMU_PLUGIN_DIR . '/wporg-mu-plugins/mu-plugins/skip-to/skip-to.php';\n```\n\n----------------------------------------\n\nTITLE: Setting Timezone in Monolog Logger Constructor or via Method in PHP\nDESCRIPTION: Shows two approaches to set timezone in Monolog 2.0.0: passing it in the constructor or using the setTimezone method.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/monolog/monolog/UPGRADE.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n->setTimezone\n```\n\n----------------------------------------\n\nTITLE: Installing PSR Logger via Composer\nDESCRIPTION: Command to install the PSR logger interface package using Composer package manager.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/psr/log/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require psr/log\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Environment Tool\nDESCRIPTION: Command to install the WordPress environment management tool globally using npm.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/themes/pub/wporg-openverse/README.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g @wordpress/env@latest\n```\n\n----------------------------------------\n\nTITLE: Installing getallheaders Polyfill for PHP >= 5.6\nDESCRIPTION: Composer command to install the latest version of the getallheaders polyfill package for PHP versions 5.6 and above.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/ralouphie/getallheaders/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require ralouphie/getallheaders\n```\n\n----------------------------------------\n\nTITLE: Building Parent Theme Assets\nDESCRIPTION: Command to build the WordPress.org parent theme assets.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/themes/pub/wporg-openverse/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Displaying PHP Code in WordPress Plugin Readme\nDESCRIPTION: Demonstrates how to include PHP code snippets in the readme file using backticks for inline code formatting.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/plugin-directory/readme/readme.txt#2025-04-18_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php code(); ?>\n```\n\n----------------------------------------\n\nTITLE: Building and Committing Changes in WordPress.org Theme\nDESCRIPTION: These commands create a build version of the theme to reduce file size before committing changes. The 'grunt build' command generates the optimized build, and 'svn ci' commits the changes to the SVN repository.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/themes/pub/wporg/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngrunt build\nsvn ci\n```\n\n----------------------------------------\n\nTITLE: Installing getallheaders Polyfill for PHP < 5.6\nDESCRIPTION: Composer command to install version 2.x of the getallheaders polyfill package for PHP versions below 5.6.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/ralouphie/getallheaders/README.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require ralouphie/getallheaders \"^2\"\n```\n\n----------------------------------------\n\nTITLE: Event Listener Migration in Guzzle 4.x\nDESCRIPTION: Example showing how to migrate event listener subscription from Guzzle 3.x to 4.x syntax using the new Emitter interface.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-18_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$mock = new Mock();\n// 3.x\n$request->getEventDispatcher()->addSubscriber($mock);\n$request->getEventDispatcher()->removeSubscriber($mock);\n// 4.x\n$request->getEmitter()->attach($mock);\n$request->getEmitter()->detach($mock);\n```\n\n----------------------------------------\n\nTITLE: Building and Committing WordPress.org Plugins Changes\nDESCRIPTION: Commands to create a build version of the JS client files before committing to SVN, which helps reduce file size in the repository.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/themes/pub/wporg-plugins-2024/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngrunt build\nsvn ci\n```\n\n----------------------------------------\n\nTITLE: Setting Values in Collections with Nested Keys in PHP\nDESCRIPTION: Code example showing how to use the setPath method to set a value in a nested array structure of a Guzzle Collection object. The method allows accessing and modifying deeply nested values using path notation with forward slashes.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/CHANGELOG.md#2025-04-18_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$collection->setPath('foo/baz/bar', 'test'); echo $collection['foo']['bar']['bar'];\n```\n\n----------------------------------------\n\nTITLE: Custom Theme Name Find & Replace Instructions in WordPress Theme Development\nDESCRIPTION: A set of find and replace commands to rename the _s starter theme to a custom theme name (using 'megatherium' as an example). These commands help customize the theme's function names, text domain, DocBlocks, and prefixed handles.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/themes/pub/wporg-apps/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Search for: `'_s'` and replace with: `'megatherium'`\n* Search for: `_s_` and replace with: `megatherium_`\n* Search for: `Text Domain: _s` and replace with: `Text Domain: megatherium` in style.css.\n* Search for: <code>&nbsp;_s</code> and replace with: <code>&nbsp;Megatherium</code>\n* Search for: `_s-` and replace with: `megatherium-`\n```\n\n----------------------------------------\n\nTITLE: Guzzle v5 Event System Implementation\nDESCRIPTION: Example of using the event system in Guzzle v5, which relied on mutability of HTTP messages. The code demonstrates how to listen to the 'before' event and modify a request by setting a header.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Event\\BeforeEvent;\n$client = new GuzzleHttp\\Client();\n// Get the emitter and listen to the before event.\n$client->getEmitter()->on('before', function (BeforeEvent $e) {\n    // Guzzle v5 events relied on mutation\n    $e->getRequest()->setHeader('X-Foo', 'Bar');\n});\n```\n\n----------------------------------------\n\nTITLE: Formatting Filename in RotatingFileHandler in PHP\nDESCRIPTION: The setFilenameFormat method is used to configure filename format for log rotation, requiring {date} placeholder and a predefined date format constant.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/monolog/monolog/UPGRADE.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`setFilenameFormat`\n```\n\n----------------------------------------\n\nTITLE: PHP Code Example in WordPress Plugin Documentation\nDESCRIPTION: A simple PHP code example demonstrating how to include PHP code in WordPress plugin documentation using backticks. This example shows the basic syntax for calling a function in PHP.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/themes/pub/wporg-plugins-2024/readme.txt#2025-04-18_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php code(); // goes in backticks ?>\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies for Google API Core for PHP on Linux\nDESCRIPTION: Commands to install the required PHP dependencies, Composer, and Protobuf for development setup on a Linux system.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/gax/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> cd ~/\n> sudo apt-get install php php-dev libcurl3-openssl-dev php-pear php-bcmath php-xml\n> curl -sS https://getcomposer.org/installer | php\n> sudo pecl install protobuf\n```\n\n----------------------------------------\n\nTITLE: Formatting PHP Source Code\nDESCRIPTION: Commands to format PHP source code using PHP Code Beautifier and Fixer (phpcbf) and check coding standards with PHP CodeSniffer (phpcs).\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/gax/README.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n> vendor/bin/phpcbf -s --standard=./ruleset.xml\n> vendor/bin/phpcs -s --standard=./ruleset.xml\n```\n\n----------------------------------------\n\nTITLE: Exception Handling in Promise Rejection\nDESCRIPTION: Shows how exceptions in rejection callbacks are propagated through the promise chain.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/promises/README.md#2025-04-18_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Promise\\Promise;\n\n$promise = new Promise();\n$promise->then(null, function ($reason) {\n    throw new Exception($reason);\n})->then(null, function ($reason) {\n    assert($reason->getMessage() === 'Error!');\n});\n\n$promise->reject('Error!');\n```\n\n----------------------------------------\n\nTITLE: Renaming Cache Request Parameters in Guzzle 2.5.0\nDESCRIPTION: Indicates a change in naming convention for cache-related request parameters. Parameters previously prefixed with 'cache.*' should now be renamed to 'params.cache.*'.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/CHANGELOG.md#2025-04-18_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n* cache.* request parameters should be renamed to params.cache.*\n```\n\n----------------------------------------\n\nTITLE: Creating Streaming Responses in Guzzle 4.x\nDESCRIPTION: Shows how to create a streaming response in Guzzle 4.x using the 'stream' option. This replaces the previous PhpStreamRequestFactory approach used in Guzzle 3.x.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-18_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n$response = $client->get('/', ['stream' => true]);\n// Read some data off of the stream in the response body\n$data = $response->getBody()->read(1024);\n```\n\n----------------------------------------\n\nTITLE: Rejection Forwarding with RejectedPromise\nDESCRIPTION: Demonstrates how to forward rejections using RejectedPromise objects in callback chains.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/promises/README.md#2025-04-18_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Promise\\Promise;\nuse GuzzleHttp\\Promise\\RejectedPromise;\n\n$promise = new Promise();\n$promise->then(null, function ($reason) {\n    return new RejectedPromise($reason);\n})->then(null, function ($reason) {\n    assert($reason === 'Error!');\n});\n\n$promise->reject('Error!');\n```\n\n----------------------------------------\n\nTITLE: Suppressing Deprecation Notices in PHP Applications\nDESCRIPTION: Optional method to completely ignore deprecation notices by declaring an empty trigger_deprecation() function in your application, though this approach is not necessarily recommended.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/symfony/deprecation-contracts/README.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction trigger_deprecation() {}\n```\n\n----------------------------------------\n\nTITLE: Using Googleapis Makefile to Generate Client API\nDESCRIPTION: Commands for cloning the googleapis repository and using its Makefile to simplify the generation of PHP client API, which handles finding dependencies automatically.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/grpc-gcp/doc/gRPC-client-user-guide.md#2025-04-18_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ cd $HOME\n$ mkdir project\n$ git clone https://github.com/googleapis/googleapis.git\n$ cd googleapis\n$ make LANGUAGE=php OUTPUT=$HOME/project\n# (It's okay if you see error like Please add 'syntax = \"proto3\";' \n# to the top of your .proto file.)\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin Dependencies with Composer\nDESCRIPTION: Installs required Composer dependencies for the plugin.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/wporg-gp-translation-events/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer install\n```\n\n----------------------------------------\n\nTITLE: Guzzle 5 Authentication Implementation\nDESCRIPTION: Alternative implementation for Guzzle 5 HTTP client compatibility.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/auth/README.md#2025-04-18_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// create the HTTP client\n$client = new Client([\n  'base_url' => 'https://www.googleapis.com',\n  'auth' => 'google_auth'  // authorize all requests\n]);\n\n// create subscriber\n$subscriber = ApplicationDefaultCredentials::getSubscriber($scopes);\n$client->getEmitter()->attach($subscriber);\n```\n\n----------------------------------------\n\nTITLE: Manual Database Schema Installation\nDESCRIPTION: Creates plugin database tables in a local WordPress environment without wp-env.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/wporg-gp-translation-events/README.md#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nwp db query < schema.sql\n```\n\n----------------------------------------\n\nTITLE: Updating Batch Processing in GuzzleHttp for PHP\nDESCRIPTION: Illustrates the change in how batch processing is handled in Guzzle, moving from a global function to a static method in the Pool class. This change returns an objectStorage instead of the previous return type.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/CHANGELOG.md#2025-04-18_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nGuzzleHttp\\batch should now be GuzzleHttp\\Pool::batch, which returns an objectStorage\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin Database Schema\nDESCRIPTION: Sets up the required database tables for the plugin in the wp-env environment.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/wporg-gp-translation-events/README.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncomposer dev:db:schema\n```\n\n----------------------------------------\n\nTITLE: Including Stripe PHP Library with Composer Autoload\nDESCRIPTION: This code demonstrates how to include the Stripe PHP library in your project using Composer's autoload feature.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpressfoundation.org/public_html/content/plugins/wpf-stripe/stripe-php/README.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('vendor/autoload.php');\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirects in Guzzle 4.x\nDESCRIPTION: Illustrates how to configure redirects in Guzzle 4.x using the 'allow_redirects' request option. This replaces the previous configureRedirects() method.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-18_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n// Standard redirects with a default of a max of 5 redirects\n$request = $client->createRequest('GET', '/', ['allow_redirects' => true]);\n\n// Strict redirects with a custom number of redirects\n$request = $client->createRequest('GET', '/', [\n    'allow_redirects' => ['max' => 5, 'strict' => true]\n]);\n```\n\n----------------------------------------\n\nTITLE: Including Stripe PHP Library Manually\nDESCRIPTION: This snippet shows how to include the Stripe PHP library manually if you're not using Composer.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpressfoundation.org/public_html/content/plugins/wpf-stripe/stripe-php/README.md#2025-04-18_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('/path/to/stripe-php/init.php');\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Core Library via Composer\nDESCRIPTION: Command to install the Google Cloud Core package using Composer. Note that this package is not intended for direct use, but provides common infrastructure to other Google Cloud PHP components.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/cloud-core/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ composer require google/cloud-core\n```\n\n----------------------------------------\n\nTITLE: Copyright Disclaimer for GNU GPL v2 Licensed Software\nDESCRIPTION: This code snippet provides a sample copyright disclaimer that can be used by employers or organizations to disclaim copyright interest in a program licensed under GNU GPL v2. It's particularly useful for programs written by employees or contractors.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/support-helphub/inc/helphub-contributors/LICENSE.txt#2025-04-18_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nYoyodyne, Inc., hereby disclaims all copyright interest in the program\n`Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n<signature of Ty Coon>, 1 April 1989\nTy Coon, President of Vice\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Version for Stripe API in PHP\nDESCRIPTION: This code demonstrates how to set a specific TLS version for Stripe API requests using a custom CurlClient instance.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpressfoundation.org/public_html/content/plugins/wpf-stripe/stripe-php/README.md#2025-04-18_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$curl = new \\Stripe\\HttpClient\\CurlClient([CURLOPT_SSLVERSION => CURL_SSLVERSION_TLSv1]);\n\\Stripe\\ApiRequestor::setHttpClient($curl);\n```\n\n----------------------------------------\n\nTITLE: Updating GuzzleHttp\\Utils JSON Decoding in PHP\nDESCRIPTION: Demonstrates the change in how JSON decoding is performed in Guzzle, moving from a global function to a method in the Utils class. This change was made to improve PSR-4 compliance.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/CHANGELOG.md#2025-04-18_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nGuzzleHttp\\json_decode moved to GuzzleHttp\\Utils::jsonDecode\n```\n\n----------------------------------------\n\nTITLE: Setting Up Google Authentication for gRPC Client\nDESCRIPTION: PHP code snippet for configuring SSL credentials and Google authentication for the gRPC client, using application default credentials.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/grpc-gcp/doc/gRPC-client-user-guide.md#2025-04-18_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$host = \"firestore.googleapis.com\";\n$credentials = \\Grpc\\ChannelCredentials::createSsl();\n// WARNING: the environment variable \"GOOGLE_APPLICATION_CREDENTIALS\" needs to be set\n$auth = ApplicationDefaultCredentials::getCredentials();\n$opts = [\n    'credentials' => $credentials,\n    'update_metadata' => $auth->getUpdateMetadataFunc(),\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Retries for Stripe API in PHP\nDESCRIPTION: This snippet shows how to configure automatic retries for Stripe API requests that fail due to intermittent network problems.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpressfoundation.org/public_html/content/plugins/wpf-stripe/stripe-php/README.md#2025-04-18_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n\\Stripe\\Stripe::setMaxNetworkRetries(2);\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit Tests for JWT PHP Library\nDESCRIPTION: Command sequence for installing PHPUnit via PEAR and running the test suite for the JWT PHP library. The output shows 5 successful tests with 5 assertions.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/firebase/php-jwt/README.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ pear install PHPUnit\n$ phpunit --configuration phpunit.xml.dist\nPHPUnit 3.7.10 by Sebastian Bergmann.\n.....\nTime: 0 seconds, Memory: 2.50Mb\nOK (5 tests, 5 assertions)\n```\n\n----------------------------------------\n\nTITLE: Installing Protobuf and gRPC from Source\nDESCRIPTION: Script for cloning and building protobuf and gRPC from source. This installs the grpc_php_plugin that is required for generating client APIs from proto files.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/grpc-gcp/doc/gRPC-client-user-guide.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ git clone -b $(curl -L https://grpc.io/release) https://github.com/grpc/grpc\n$ cd grpc\n$ git submodule update --init\n# install protobuf\n$ cd third_party/protobuf\n$ ./autogen.sh && ./configure && make -j8\n$ [sudo] make install\n$ [sudo] ldconfig\n# install gRPC\n$ cd ../..\n$ make -j8\n$ [sudo] make install\n```\n\n----------------------------------------\n\nTITLE: Starting WordPress Development Environment\nDESCRIPTION: Launches a local WordPress instance with the plugin installed using wp-env.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/wporg-gp-translation-events/README.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncomposer dev:start\n```\n\n----------------------------------------\n\nTITLE: Enabling Deprecation Warnings in Guzzle 3.7\nDESCRIPTION: Code to enable E_USER_DEPRECATED warnings when using deprecated methods in Guzzle 3.7. This allows developers to identify parts of their code that use functionality marked for removal in future versions.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-18_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n\\Guzzle\\Common\\Version::$emitWarnings = true;\n```\n\n----------------------------------------\n\nTITLE: Setting POST Fields and Files in Guzzle 4.x\nDESCRIPTION: Demonstrates how to set POST fields and add files to a request body using the new Guzzle 4.x API. This replaces the previous methods on the request object with operations on the request body.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-18_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$request = $client->createRequest('POST', '/');\n$request->getBody()->setField('foo', 'bar');\n$request->getBody()->addFile(new PostFile('file_key', fopen('/path/to/content', 'r')));\n```\n\n----------------------------------------\n\nTITLE: Generating Client API with Direct protoc Command\nDESCRIPTION: Example command showing how to use protoc with the grpc_php_plugin to generate client API code from proto files when all files are in a single directory.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/grpc-gcp/doc/gRPC-client-user-guide.md#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ mkdir $HOME/project\n$ protoc --proto_path=./ --php_out=$HOME/project \\\n--grpc_out=$HOME/project \\\n--plugin=protoc-gen-grpc=./bins/opt/grpc_php_plugin \\\npath/to/your/proto_dependency_directory1/*.proto \\\npath/to/your/proto_dependency_directory2/*.proto \\\npath/to/your/proto_directory/*.proto\n```\n\n----------------------------------------\n\nTITLE: Setting Up the gax-php Repository\nDESCRIPTION: Commands to set up the local repository by copying Composer and installing project dependencies.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/gax/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> cd /path/to/gax-php\n> cp ~/composer.phar ./\n> php composer.phar install\n```\n\n----------------------------------------\n\nTITLE: Running Grunt Watch for Development in WordPress.org Theme\nDESCRIPTION: This command watches JavaScript and Sass files for changes, running linters and building Sass files automatically. It's used during development to automatically process file changes.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/themes/pub/wporg-main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngrunt watch\n```\n\n----------------------------------------\n\nTITLE: Updating Composer Dependencies\nDESCRIPTION: Command to update project dependencies after making changes to composer.json.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/gax/README.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n> php composer.phar update\n`\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Headers in Guzzle Client Configuration\nDESCRIPTION: Example showing the new recommended way to set default headers in Guzzle HTTP client after the deprecation of setDefaultHeaders(). This approach uses the client's configuration object to set header values through the request.options path.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/CHANGELOG.md#2025-04-18_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$client->getConfig()->setPath('request.options/headers/{header_name}', 'value');\n```\n\nLANGUAGE: php\nCODE:\n```\n$client->getConfig()->setPath('request.options/headers', array('header_name' => 'value'));\n```\n\n----------------------------------------\n\nTITLE: Running PHP Unit Tests for gax-php\nDESCRIPTION: Command to run PHPUnit tests with the proper bootstrap file.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/gax/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> vendor/bin/phpunit --bootstrap tests/bootstrap.php tests\n```\n\n----------------------------------------\n\nTITLE: Command Configuration in Guzzle 3.7 (Deprecated Approach)\nDESCRIPTION: Example showing the deprecated way of configuring command headers and response body handling in Guzzle 3.7. This method will continue to work until Guzzle 4.0 but is no longer recommended.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-18_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$command = $client->getCommand('foo', array(\n    'command.headers' => array('Test' => '123'),\n    'command.response_body' => '/path/to/file'\n));\n```\n\n----------------------------------------\n\nTITLE: Running Grunt Watch for Development in WordPress.org Theme\nDESCRIPTION: This command starts the Grunt watch task, which monitors JavaScript and Sass files for changes. It automatically runs linters and builds Sass files when changes are detected.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/themes/pub/wporg/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngrunt watch\n```\n\n----------------------------------------\n\nTITLE: Compiling CRC32C Extension (Linux/Mac)\nDESCRIPTION: Provides commands to compile the CRC32C extension from source, including installing dependencies, configuring the build environment, and running tests.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/crc32/README.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd ext\n\n# Install the google/crc32c library\n./install_crc32c.sh # From source (recommended)\n\n# or use your favorite package manager, e.g.\n# brew install crc32c\n\n# Prepare the build environment\nphpize\n./configure\n\n# or if using a custom crc32c\n# ./configure --with-crc32c=$(brew --prefix crc32c)\n\n## Build and test\nmake test\n```\n\n----------------------------------------\n\nTITLE: Demonstrating New Injection Syntax in Guzzle 2.5.0\nDESCRIPTION: Shows the change in syntax for injecting variables into command or UriTemplates. The old '{{ }}' syntax is no longer supported, and '{}' should be used instead.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/CHANGELOG.md#2025-04-18_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n* [BC] No longer supporting \"{{ }}\" for injecting into command or UriTemplates.  Use \"{}\"\n```\n\n----------------------------------------\n\nTITLE: Request Option Configuration\nDESCRIPTION: Form field and file upload request configuration options.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nform_fields, form_files\n```\n\n----------------------------------------\n\nTITLE: Updating Guzzle\\Http\\Plugin\\LogPlugin Usage\nDESCRIPTION: This snippet shows the changes in using the LogPlugin. The namespace has changed, and the constructor now takes a MessageFormatter instead of a verbosity level.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-18_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Common\\Log\\ClosureLogAdapter;\nuse Guzzle\\Http\\Plugin\\LogPlugin;\n\n/** @var \\Guzzle\\Http\\Client */\n$client;\n\n// $verbosity is an integer indicating desired message verbosity level\n$client->addSubscriber(new LogPlugin(new ClosureLogAdapter(function($m) { echo $m; }, $verbosity = LogPlugin::LOG_VERBOSE);\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Log\\ClosureLogAdapter;\nuse Guzzle\\Log\\MessageFormatter;\nuse Guzzle\\Plugin\\Log\\LogPlugin;\n\n/** @var \\Guzzle\\Http\\Client */\n$client;\n\n// $format is a string indicating desired message format -- @see MessageFormatter\n$client->addSubscriber(new LogPlugin(new ClosureLogAdapter(function($m) { echo $m; }, $format = MessageFormatter::DEBUG_FORMAT);\n```\n\n----------------------------------------\n\nTITLE: Updating Path Manipulation Functions in GuzzleHttp\\Utils for PHP\nDESCRIPTION: Shows the relocation of path manipulation functions from global scope to the Utils class in Guzzle. This change improves PSR-4 compliance and organization of utility functions.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/CHANGELOG.md#2025-04-18_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nGuzzleHttp\\get_path moved to GuzzleHttp\\Utils::getPath\nGuzzleHttp\\set_path moved to GuzzleHttp\\Utils::setPath\n```\n\n----------------------------------------\n\nTITLE: Updating Guzzle\\Http\\Plugin\\ExponentialBackoffPlugin Usage\nDESCRIPTION: This snippet demonstrates the changes in using the ExponentialBackoffPlugin, which is now called BackoffPlugin. The instantiation method has changed to use a factory method.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-18_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Http\\Plugin\\ExponentialBackoffPlugin;\n\n$backoffPlugin = new ExponentialBackoffPlugin($maxRetries, array_merge(\n        ExponentialBackoffPlugin::getDefaultFailureCodes(), array(429)\n    ));\n\n$client->addSubscriber($backoffPlugin);\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Plugin\\Backoff\\BackoffPlugin;\nuse Guzzle\\Plugin\\Backoff\\HttpBackoffStrategy;\n\n// Use convenient factory method instead -- see implementation for ideas of what\n// you can do with chaining backoff strategies\n$backoffPlugin = BackoffPlugin::getExponentialBackoff($maxRetries, array_merge(\n        HttpBackoffStrategy::getDefaultFailureCodes(), array(429)\n    ));\n$client->addSubscriber($backoffPlugin);\n```\n\n----------------------------------------\n\nTITLE: Generating Firestore Client API with protoc Command\nDESCRIPTION: Specific protoc command for generating the Firestore client API, listing all required proto files and their dependencies from the googleapis repository.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/grpc-gcp/doc/gRPC-client-user-guide.md#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ protoc --proto_path=googleapis --plugin=protoc-gen-grpc=`which grpc_php_plugin` \\\n--php_out=./ --grpc_out=./ google/api/annotations.proto google/api/http.proto \\\ngoogle/api/httpbody.proto google/longrunning/operations.proto google/rpc/code.proto \\\ngoogle/rpc/error_details.proto google/rpc/status.proto google/type/latlng.proto \\\ngoogle/firestore/v1beta1/firestore.proto google/firestore/v1beta1/common.proto \\\ngoogle/firestore/v1beta1/query.proto google/firestore/v1beta1/write.proto \\\ngoogle/firestore/v1beta1/document.proto\n```\n\n----------------------------------------\n\nTITLE: HTTP Client Method Signatures\nDESCRIPTION: Magic method names for making asynchronous HTTP requests.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ngetAsync(), postAsync()\n```\n\n----------------------------------------\n\nTITLE: Installing Linux Environment Prerequisites\nDESCRIPTION: Command to install the necessary build tools and dependencies required for gRPC client development on Linux.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/grpc-gcp/doc/gRPC-client-user-guide.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ [sudo] apt-get install build-essential autoconf libtool pkg-config zip unzip zlib1g-dev\n```\n\n----------------------------------------\n\nTITLE: Starting WordPress Environment\nDESCRIPTION: Command to scaffold and start the WordPress development environment.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/themes/pub/wporg-openverse/README.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ wp-env start\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache .htaccess\nDESCRIPTION: Commands to set up Apache .htaccess file to prevent 404 errors in the development environment.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/themes/pub/wporg-openverse/README.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ wp-env run cli bash\nbash-5.1$ printf \"RewriteEngine on\\nFallbackResource /index.php\\n\" > .htaccess\nbash-5.1$ exit\n```\n\n----------------------------------------\n\nTITLE: PHP Version Constraint\nDESCRIPTION: Sets minimum required PHP version for the package.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* Requires PHP >= 5.5\n```\n\n----------------------------------------\n\nTITLE: Running Specific Plugin Test\nDESCRIPTION: Executes a single specified test method in the wp-env environment.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/wporg-gp-translation-events/README.md#2025-04-18_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncomposer dev:test -- --filter methods_name\n```\n\n----------------------------------------\n\nTITLE: Importing Locale Database\nDESCRIPTION: Commands to download and import the WordPress locale database SQL file.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/themes/pub/wporg-openverse/README.md#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -O https://raw.githubusercontent.com/WordPress/pattern-directory/trunk/.wp-env/data/wporg_locales.sql\n$ wp-env run cli \"wp db import wp-content/themes/wporg-openverse/wporg_locales.sql\"\n```\n\n----------------------------------------\n\nTITLE: Converting XML Service Description to JSON for Zendesk REST API\nDESCRIPTION: This snippet shows the conversion of an XML service description for Zendesk REST API v2 to a JSON format. It includes operations for managing groups, with details on HTTP methods, URIs, and parameters.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-18_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<client>\n    <commands>\n        <!-- Groups -->\n        <command name=\"list_groups\" method=\"GET\" uri=\"groups.json\">\n            <doc>Get a list of groups</doc>\n        </command>\n        <command name=\"search_groups\" method=\"GET\" uri='search.json?query=\"{{query}} type:group\"'>\n            <doc>Uses a search query to get a list of groups</doc>\n            <param name=\"query\" type=\"string\" required=\"true\" />\n        </command>\n        <command name=\"create_group\" method=\"POST\" uri=\"groups.json\">\n            <doc>Create a group</doc>\n            <param name=\"data\" type=\"array\" location=\"body\" filters=\"json_encode\" doc=\"Group JSON\"/>\n            <param name=\"Content-Type\" location=\"header\" static=\"application/json\"/>\n        </command>\n        <command name=\"delete_group\" method=\"DELETE\" uri=\"groups/{{id}}.json\">\n            <doc>Delete a group by ID</doc>\n            <param name=\"id\" type=\"integer\" required=\"true\"/>\n        </command>\n        <command name=\"get_group\" method=\"GET\" uri=\"groups/{{id}}.json\">\n            <param name=\"id\" type=\"integer\" required=\"true\"/>\n        </command>\n        <command name=\"update_group\" method=\"PUT\" uri=\"groups/{{id}}.json\">\n            <doc>Update a group</doc>\n            <param name=\"id\" type=\"integer\" required=\"true\"/>\n            <param name=\"data\" type=\"array\" location=\"body\" filters=\"json_encode\" doc=\"Group JSON\"/>\n            <param name=\"Content-Type\" location=\"header\" static=\"application/json\"/>\n        </command>\n    </commands>\n</client>\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\":       \"Zendesk REST API v2\",\n    \"apiVersion\": \"2012-12-31\",\n    \"description\":\"Provides access to Zendesk views, groups, tickets, ticket fields, and users\",\n    \"operations\": {\n        \"list_groups\":  {\n            \"httpMethod\":\"GET\",\n            \"uri\":       \"groups.json\",\n            \"summary\":   \"Get a list of groups\"\n        },\n        \"search_groups\":{\n            \"httpMethod\":\"GET\",\n            \"uri\":       \"search.json?query=\\\"{query} type:group\\\"\",\n            \"summary\":   \"Uses a search query to get a list of groups\",\n            \"parameters\":{\n                \"query\":{\n                    \"location\":   \"uri\",\n                    \"description\":\"Zendesk Search Query\",\n                    \"type\":       \"string\",\n                    \"required\":   true\n                }\n            }\n        },\n        \"create_group\": {\n            \"httpMethod\":\"POST\",\n            \"uri\":       \"groups.json\",\n            \"summary\":   \"Create a group\",\n            \"parameters\":{\n                \"data\":        {\n                    \"type\":       \"array\",\n                    \"location\":   \"body\",\n                    \"description\":\"Group JSON\",\n                    \"filters\":    \"json_encode\",\n                    \"required\":   true\n                },\n                \"Content-Type\":{\n                    \"type\":    \"string\",\n                    \"location\":\"header\",\n                    \"static\":  \"application/json\"\n                }\n            }\n        },\n        \"delete_group\": {\n            \"httpMethod\":\"DELETE\",\n            \"uri\":       \"groups/{id}.json\",\n            \"summary\":   \"Delete a group\",\n            \"parameters\":{\n                \"id\":{\n                    \"location\":   \"uri\",\n                    \"description\":\"Group to delete by ID\",\n                    \"type\":       \"integer\",\n                    \"required\":   true\n                }\n            }\n        },\n        \"get_group\":    {\n            \"httpMethod\":\"GET\",\n            \"uri\":       \"groups/{id}.json\",\n            \"summary\":   \"Get a ticket\",\n            \"parameters\":{\n                \"id\":{\n                    \"location\":   \"uri\",\n                    \"description\":\"Group to get by ID\",\n                    \"type\":       \"integer\",\n                    \"required\":   true\n                }\n            }\n        },\n        \"update_group\": {\n            \"httpMethod\":\"PUT\",\n            \"uri\":       \"groups/{id}.json\",\n            \"summary\":   \"Update a group\",\n            \"parameters\":{\n                \"id\":          {\n                    \"location\":   \"uri\",\n                    \"description\":\"Group to update by ID\",\n                    \"type\":       \"integer\",\n                    \"required\":   true\n                },\n                \"data\":        {\n                    \"type\":       \"array\",\n                    \"location\":   \"body\",\n                    \"description\":\"Group JSON\",\n                    \"filters\":    \"json_encode\",\n                    \"required\":   true\n                },\n                \"Content-Type\":{\n                    \"type\":    \"string\",\n                    \"location\":\"header\",\n                    \"static\":  \"application/json\"\n                }\n            }\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Composer Dependencies\nDESCRIPTION: Command to install MU plugins using Composer package manager.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/themes/pub/wporg-openverse/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ composer install\n```\n\n----------------------------------------\n\nTITLE: Running Plugin Tests\nDESCRIPTION: Executes all plugin tests in the wp-env environment.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/wporg-gp-translation-events/README.md#2025-04-18_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncomposer dev:test\n```\n\n----------------------------------------\n\nTITLE: Promise Library Changelog in Markdown\nDESCRIPTION: Comprehensive changelog detailing version updates, bug fixes, and feature additions for a PHP Promise implementation from version 1.0.0 to 1.5.1. Includes changes related to PHP 8 support, memory leak fixes, and promise handling improvements.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/promises/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CHANGELOG\n\n## 1.5.1 - 2021-10-22\n\n### Fixed\n\n- Revert \"Call handler when waiting on fulfilled/rejected Promise\"\n- Fix pool memory leak when empty array of promises provided\n\n## 1.5.0 - 2021-10-07\n\n### Changed\n\n- Call handler when waiting on fulfilled/rejected Promise\n\n### Fixed\n\n- Fix manually settle promises generated with Utils::task\n\n## 1.4.1 - 2021-02-18\n\n### Fixed\n\n- Fixed `each_limit` skipping promises and failing\n\n## 1.4.0 - 2020-09-30\n\n### Added\n\n- Support for PHP 8\n- Optional `$recursive` flag to `all`\n- Replaced functions by static methods\n\n### Fixed\n\n- Fix empty `each` processing\n- Fix promise handling for Iterators of non-unique keys\n- Fixed `method_exists` crashes on PHP 8\n- Memory leak on exceptions\n\n\n## 1.3.1 - 2016-12-20\n\n### Fixed\n\n- `wait()` foreign promise compatibility\n\n\n## 1.3.0 - 2016-11-18\n\n### Added\n\n- Adds support for custom task queues.\n\n### Fixed\n\n- Fixed coroutine promise memory leak.\n\n\n## 1.2.0 - 2016-05-18\n\n### Changed\n\n- Update to now catch `\\Throwable` on PHP 7+\n\n\n## 1.1.0 - 2016-03-07\n\n### Changed\n\n- Update EachPromise to prevent recurring on a iterator when advancing, as this\n  could trigger fatal generator errors.\n- Update Promise to allow recursive waiting without unwrapping exceptions.\n\n\n## 1.0.3 - 2015-10-15\n\n### Changed\n\n- Update EachPromise to immediately resolve when the underlying promise iterator\n  is empty. Previously, such a promise would throw an exception when its `wait`\n  function was called.\n\n\n## 1.0.2 - 2015-05-15\n\n### Changed\n\n- Conditionally require functions.php.\n\n\n## 1.0.1 - 2015-06-24\n\n### Changed\n\n- Updating EachPromise to call next on the underlying promise iterator as late\n  as possible to ensure that generators that generate new requests based on\n  callbacks are not iterated until after callbacks are invoked.\n\n\n## 1.0.0 - 2015-05-12\n\n- Initial release\n```\n\n----------------------------------------\n\nTITLE: URI Path Access Example\nDESCRIPTION: Code reference showing allowed URI path value format.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* `\"0\"` is now an allowed URI path\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie Parameters in PHP\nDESCRIPTION: Example demonstrating cookie parameter configuration allowing values set to \"0\" for name, domain or value properties\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/CHANGELOG.md#2025-04-18_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n// Example from 3.0.4 release\n$request->addCookie([\n  'name' => '0',    // Cookie name can be '0'\n  'domain' => '0',  // Domain can be '0'\n  'value' => '0'    // Value can be '0'\n]);\n```\n\n----------------------------------------\n\nTITLE: Markdown Extra Usage in PHP\nDESCRIPTION: Example of using PHP Markdown Extra for enhanced markdown features with additional syntax support.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/plugin-directory/libs/michelf-php-markdown-1.6.0/Readme.md#2025-04-18_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse \\Michelf\\MarkdownExtra;\n$my_html = MarkdownExtra::defaultTransform($my_text);\n```\n\n----------------------------------------\n\nTITLE: Using the Custom Array Modifier for Query Parameters\nDESCRIPTION: Shows how to use the custom % modifier which allows handling of array-style query parameters like list[] and associative arrays. This extends beyond the RFC 6570 specification to support common web formats.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/rize/uri-template/README.md#2025-04-18_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$uri->expand('{?list%,keys%}', [\n    'list' => [\n        'a', 'b',\n    ),\n    'keys' => [\n        'a' => 1,\n        'b' => 2,\n    ),\n]);\n\n// '?list[]=a&list[]=b&keys[a]=1&keys[b]=2'\n>> '?list%5B%5D=a&list%5B%5D=b&keys%5Ba%5D=1&keys%5Bb%5D=2'\n\n// [] get encoded to %5B%5D i.e. '?list[]=a&list[]=b&keys[a]=1&keys[b]=2'\n$params = $uri->extract('{?list%,keys%}', '?list%5B%5D=a&list%5B%5D=b&keys%5Ba%5D=1&keys%5Bb%5D=2', )\n\n>> print_r($params);\n(\n    [list] => Array\n        (\n            [0] => a\n            [1] => b\n        )\n\n    [keys] => Array\n        (\n            [a] => 1\n            [b] => 2\n        )\n)\n```\n\n----------------------------------------\n\nTITLE: Loading Markdown Parser in PHP without Autoloader\nDESCRIPTION: Demonstrates how to load the Markdown parser classes without using an autoloader. It shows loading both the basic Markdown parser and the MarkdownExtra parser using require_once statements.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/plugin-directory/libs/michelf-php-markdown-1.6.0/Readme.md#2025-04-18_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once 'Michelf/Markdown.inc.php';\n```\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once 'Michelf/MarkdownExtra.inc.php';\n```\n\n----------------------------------------\n\nTITLE: Legacy Stripe API Usage in PHP 5.2\nDESCRIPTION: This snippet shows how to use the legacy version of the Stripe PHP library for PHP 5.2, including setting the API key and creating a charge.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpressfoundation.org/public_html/content/plugins/wpf-stripe/stripe-php/README.md#2025-04-18_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nStripe::setApiKey('d8e8fca2dc0f896fd7cb4cb0031ba249');\n$charge = Stripe_Charge::create(array('source' => 'tok_XXXXXXXX', 'amount' => 2000, 'currency' => 'usd'));\necho $charge;\n```\n\n----------------------------------------\n\nTITLE: Updating Client Factory Method in PHP\nDESCRIPTION: Example of updating a client factory method to use Guzzle\\Common\\Collection instead of Guzzle\\Service\\Inspector for configuration handling. This change is part of the migration from Guzzle 2.8 to 3.x.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-18_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\nuse Guzzle\\Common\\Collection;\n\nclass YourClient extends \\Guzzle\\Service\\Client\n{\n    public static function factory($config = array())\n    {\n        $default = array();\n        $required = array('base_url', 'username', 'api_key');\n        $config = Collection::fromConfig($config, $default, $required);\n\n        $client = new self(\n            $config->get('base_url'),\n            $config->get('username'),\n            $config->get('api_key')\n        );\n        $client->setConfig($config);\n\n        $client->setDescription(ServiceDescription::factory(__DIR__ . DIRECTORY_SEPARATOR . 'client.json'));\n\n        return $client;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Copyright Notice for GNU GPL v2 Licensed Software\nDESCRIPTION: This code snippet demonstrates how to apply the GNU GPL v2 license to a new program. It includes a template for the copyright notice and license information that should be attached to the start of each source file.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/support-helphub/inc/helphub-contributors/LICENSE.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 2 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along\nwith this program; if not, write to the Free Software Foundation, Inc.,\n51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n```\n\n----------------------------------------\n\nTITLE: Interactive Program Notice for GNU GPL v2 Licensed Software\nDESCRIPTION: This code snippet shows an example of a short notice that should be displayed when an interactive program licensed under GNU GPL v2 starts. It informs users about the program's copyright, warranty disclaimer, and redistribution conditions.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/support-helphub/inc/helphub-contributors/LICENSE.txt#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nGnomovision version 69, Copyright (C) year name of author\nGnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n```\n\n----------------------------------------\n\nTITLE: URI Path Segment Expansion with Multiple Variables\nDESCRIPTION: Shows how to expand path segments and file extensions using the explode modifier. This example constructs a full URL with multiple segments in the path and multiple extensions for the file.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/rize/uri-template/README.md#2025-04-18_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Rize\\UriTemplate;\n\n$uri = new UriTemplate();\n$uri->expand('http://{host}{/segments*}/{file}{.extensions*}', [\n    'host'       => 'www.host.com',\n    'segments'   => ['path', 'to', 'a'],\n    'file'       => 'file',\n    'extensions' => ['x', 'y'],\n]);\n\n>> 'http://www.host.com/path/to/a/file.x.y'\n```\n\n----------------------------------------\n\nTITLE: Processing and Displaying Firestore Document Response\nDESCRIPTION: PHP code that processes the response from a ListDocuments RPC call, iterating through returned documents and displaying their fields.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/grpc-gcp/doc/gRPC-client-user-guide.md#2025-04-18_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$documents = $Response->getDocuments();\n$index = 0;\nforeach($documents as $document) {\n        $index++;\n        $name = $document->getName();\n        echo \"=> Document $index: $name\\n\";\n        $fields = $document->getFields();\n        foreach ($fields as $name => $value) {\n                echo \"$name => \".$value->getStringValue().\"\\n\";\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced URI Template Expansion with Multiple Expression Types\nDESCRIPTION: Demonstrates the use of multiple expression types and modifiers in a single URI template. Shows prefix modifiers, variable expansion, and query parameter expansion with the explode modifier.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/rize/uri-template/README.md#2025-04-18_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Rize\\UriTemplate;\n\n$uri = new UriTemplate();\n$uri->expand('/search/{term:1}/{term}/{?q*,limit}', [\n    'term'  => 'john',\n    'q'     => ['a', 'b'],\n    'limit' => 10,\n])\n\n>> '/search/j/john/?q=a&q=b&limit=10'\n```\n\n----------------------------------------\n\nTITLE: Installing PHP and Composer\nDESCRIPTION: Commands to install PHP, PHP development libraries, and Composer package manager which are required for the gRPC client implementation.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/google/grpc-gcp/doc/gRPC-client-user-guide.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ [sudo] apt-get install php php-dev\n$ curl -sS https://getcomposer.org/installer | php\n$ [sudo] mv composer.phar /usr/local/bin/composer\n```\n\n----------------------------------------\n\nTITLE: Basic URI String Expansion in PHP\nDESCRIPTION: A simple example of expanding a URI template with a single variable. This demonstrates the basic functionality of the UriTemplate class to replace template variables with actual values.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/photo-directory/vendor/rize/uri-template/README.md#2025-04-18_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Rize\\UriTemplate;\n\n$uri = new UriTemplate();\n$uri->expand('/{username}/profile', ['username' => 'john']);\n\n>> '/john/profile'\n```\n\n----------------------------------------\n\nTITLE: Combined Markdown and SmartyPants Usage in PHP\nDESCRIPTION: Example showing how to combine PHP Markdown with SmartyPants text filter for enhanced typography formatting.\nSOURCE: https://github.com/WordPress/wordpress.org/blob/trunk/wordpress.org/public_html/wp-content/plugins/plugin-directory/libs/michelf-php-markdown-1.6.0/Readme.md#2025-04-18_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse \\Michelf\\Markdown, \\Michelf\\SmartyPants;\n$my_html = Markdown::defaultTransform($my_text);\n$my_html = SmartyPants::defaultTransform($my_html);\n```"
  }
]