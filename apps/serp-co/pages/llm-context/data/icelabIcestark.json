[
  {
    "owner": "ice-lab",
    "repo": "icestark",
    "content": "TITLE: Configuring Main Application with API Approach\nDESCRIPTION: Example of setting up a main application using the registerMicroApps API from @ice/stark version 2.0.0+ to register and manage sub-applications.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/README.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerMicroApps } from '@ice/stark';\n\nregsiterMicroApps([\n  {\n    name: 'app1',\n    activePath: ['/', '/message', '/about'],\n    exact: true,\n    title: '通用页面',\n    container: document.getElementById('icestarkNode'),\n    url: ['//unpkg.com/icestark-child-common/build/js/index.js'],\n  },\n  {\n    name: 'app2',\n    activePath: '/seller',\n    title: '商家平台',\n    container: document.getElementById('icestarkNode'),\n    url: [\n      '//unpkg.com/icestark-child-seller/build/js/index.js',\n      '//unpkg.com/icestark-child-seller/build/css/index.css',\n    ],\n  },\n]);\n\nstart();\n\n```\n\n----------------------------------------\n\nTITLE: Setting up React Main Application with AppRouter\nDESCRIPTION: Example of configuring the main application using React with AppRouter and AppRoute components to manage sub-applications.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/packages/icestark/README.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// src/App.jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { AppRouter, AppRoute } from '@ice/stark';\n\nclass App extends React.Component {\n  onRouteChange = (pathname, query) => {\n    console.log(pathname, query);\n  };\n\n  render() {\n    return (\n      <div>\n        <div>this is common header</div>\n        <AppRouter\n          onRouteChange={this.onRouteChange}\n          ErrorComponent={<div>js bundle loaded error</div>}\n          NotFoundComponent={<div>NotFound</div>}\n        >\n          <AppRoute\n            path={['/', '/message', '/about']}\n            exact\n            title=\"通用页面\"\n            url={['//unpkg.com/icestark-child-common/build/js/index.js']}\n          />\n          <AppRoute\n            path=\"/seller\"\n            url={[\n              '//unpkg.com/icestark-child-seller/build/js/index.js',\n              '//unpkg.com/icestark-child-seller/build/css/index.css',\n            ]}\n          />\n        </AppRouter>\n        <div>this is common footer</div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('ice-container'));\n```\n\n----------------------------------------\n\nTITLE: Setting up Main Application with React Components\nDESCRIPTION: Code example showing how to configure a React-based main application using AppRouter and AppRoute components from @ice/stark to load and render sub-applications based on routes.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/README.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// src/App.jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { AppRouter, AppRoute } from '@ice/stark';\n\nclass App extends React.Component {\n  onRouteChange = (pathname, query) => {\n    console.log(pathname, query);\n  };\n\n  render() {\n    return (\n      <div>\n        <div>this is common header</div>\n        <AppRouter\n          onRouteChange={this.onRouteChange}\n          ErrorComponent={<div>js bundle loaded error</div>}\n          NotFoundComponent={<div>NotFound</div>}\n        >\n          <AppRoute\n            path={['/', '/message', '/about']}\n            exact\n            title=\"通用页面\"\n            url={['//unpkg.com/icestark-child-common/build/js/index.js']}\n          />\n          <AppRoute\n            path=\"/seller\"\n            url={[\n              '//unpkg.com/icestark-child-seller/build/js/index.js',\n              '//unpkg.com/icestark-child-seller/build/css/index.css',\n            ]}\n          />\n        </AppRouter>\n        <div>this is common footer</div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('ice-container'));\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Sub-Application with Lifecycle Registration\nDESCRIPTION: Code example showing how to implement a sub-application using lifecycle registration methods from @ice/stark-app, with conditional rendering for both standalone and integrated modes.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/README.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// src/index.js\nimport ReactDOM from 'react-dom';\nimport { isInIcestark, getMountNode, registerAppEnter, registerAppLeave } from '@ice/stark-app';\nimport router from './router';\n\nif (isInIcestark()) {\n  const mountNode = getMountNode();\n\n  registerAppEnter(() => {\n    ReactDOM.render(router(), mountNode);\n  });\n\n  // make sure the unmount event is triggered\n  registerAppLeave(() => {\n    ReactDOM.unmountComponentAtNode(mountNode);\n  });\n} else {\n  ReactDOM.render(router(), document.getElementById('ice-container'));\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Creating and Unmounting a Micro-application\nDESCRIPTION: Demonstrates how to manually create and unmount a micro-application using createMicroApp and unmountMicroApp.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/api/ice-stark.md#2025-04-08_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst App = () => {\n  const container = useRef(null);\n\n  useEffect(() => {\n    createMicroApp({\n      name: 'microApp',\n      url: ['//unpkg.com/icestark-child-common/build/js/index.js'],\n      container: container.current,\n    })\n    return () => {\n      unmountMicroApp('microApp')\n    }\n  }, [])\n\n  return (\n    <div ref>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring React Main Application with AppRouter\nDESCRIPTION: Example of setting up the main React application component with AppRouter and AppRoute to register and manage micro-applications.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/use-layout/react.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// src/App.jsx\nimport React from 'react';\nimport { AppRouter, AppRoute } from '@ice/stark';\nimport BasicLayout from '@/layouts/BasicLayout';\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <BasicLayout>\n        <AppRouter>\n          <AppRoute\n            activePath=\"/seller\"\n            title=\"商家平台\"\n            url={[\n              '//unpkg.com/icestark-child-seller/build/js/index.js',\n              '//unpkg.com/icestark-child-seller/build/css/index.css',\n            ]}\n          />\n          <AppRoute\n            activePath=\"/user\"\n            //...\n          />\n        </AppRouter>\n      </BasicLayout>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering and Starting Micro-applications\nDESCRIPTION: Shows how to register micro-applications using registerMicroApps and start the icestark runtime.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/api/ice-stark.md#2025-04-08_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nregisterMicroApps([\n  {\n    name: 'app1',\n    activePath: ['/', '/message', '/about'],\n    container: appContainer,\n    url: ['//unpkg.com/icestark-child-common/build/js/index.js'],\n  }\n])\n\nstart({\n  onAppEnter: (appConfig) => {\n    console.log(`${appConfig.name} entered.`)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Sub-application Entry Point\nDESCRIPTION: Implementation of sub-application entry point with lifecycle registration and routing setup.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/packages/icestark/README.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// src/index.js\nimport ReactDOM from 'react-dom';\nimport { isInIcestark, getMountNode, registerAppEnter, registerAppLeave } from '@ice/stark-app';\nimport router from './router';\n\nif (isInIcestark()) {\n  const mountNode = getMountNode();\n\n  registerAppEnter(() => {\n    ReactDOM.render(router(), mountNode);\n  });\n\n  // make sure the unmount event is triggered\n  registerAppLeave(() => {\n    ReactDOM.unmountComponentAtNode(mountNode);\n  });\n} else {\n  ReactDOM.render(router(), document.getElementById('ice-container'));\n}\n```\n\n----------------------------------------\n\nTITLE: Using AppRoute to Render a Micro-application\nDESCRIPTION: Demonstrates how to use the AppRoute component to render a micro-application in React.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/api/ice-stark.md#2025-04-08_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<AppRoute\n  name=\"seller\"\n  activePath=\"/seller\"\n  url={[\n    '/js/index.js',\n    '/css/index.js'\n  ]}\n>\n```\n\n----------------------------------------\n\nTITLE: Implementing Sub-Application with UMD Export Pattern\nDESCRIPTION: Code showing how to implement a sub-application using the UMD export pattern, exposing mount and unmount lifecycle methods for integration with icestark.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/README.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport ReactDOM from 'react-dom';\nimport App from './app';\n\nexport function mount(props) {\n  ReactDOM.render(<App />, document.getElementById('icestarkNode'));\n}\n\nexport function unmount() {\n  ReactDOM.unmountComponentAtNode(document.getElementById('icestarkNode'));\n}\n```\n\n----------------------------------------\n\nTITLE: AppConfig TypeScript Interface Definition\nDESCRIPTION: Defines the TypeScript interface for AppConfig, specifying all possible configuration options for a micro-application.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/api/ice-stark.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AppConfig {\n  name: string;\n  url?: string | string[];\n  activePath?: ActivePath;\n  container?: HTMLElement;\n  status?: string;\n  sandbox?: boolean | SandboxProps | SandboxConstructor;\n  entry?: string;\n  entryContent?: string;\n  basename?: string;\n  umd?: boolean;\n  loadScriptMode?: 'fetch' | 'script' | 'import';\n  appAssets?: Assets;\n  props?: object;\n  cached?: boolean;\n  title?: string;\n  scriptAttributes?: ScriptAttributes;\n  exact?: boolean;\n  strict?: boolean;\n  sensitive?: boolean;\n  hashType?: boolean | HashType;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing UMD Sub-application Lifecycles\nDESCRIPTION: Example of exporting sub-application lifecycles as UMD module with webpack configuration.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/packages/icestark/README.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport ReactDOM from 'react-dom';\nimport App from './app';\n\nexport function mount(props) {\n  ReactDOM.render(<App />, document.getElementById('icestarkNode'));\n}\n\nexport function unmount() {\n  ReactDOM.unmountComponentAtNode(document.getElementById('icestarkNode'));\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  output: {\n    library: 'sub-app-name',\n    libraryTarget: 'umd',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Sub-Application Router with Basename Support\nDESCRIPTION: Example of how to set up routing in a sub-application using react-router-dom with icestark integration, including basename configuration and NotFound handling.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/README.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// src/router.js\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport { renderNotFound, getBasename } from '@ice/stark-app';\n\nfunction List() {\n  return <div>List</div>;\n}\n\nfunction Detail() {\n  return <div>Detail</div>;\n}\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <Router basename={getBasename()}>\n        <Switch>\n          <Route path=\"/list\" component={List} />\n          <Route path=\"/detail\" component={Detail} />\n          <Redirect exact from=\"/\" to=\"list\" />\n          <Route\n            component={() => {\n              return renderNotFound();\n            }}\n          />\n        </Switch>\n      </Router>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adapting React Application Entry Point for icestark\nDESCRIPTION: This code snippet shows how to modify a React application's entry point to export the necessary lifecycle methods for icestark integration. It includes mounting and unmounting functions, and handles both icestark and standalone rendering.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/use-child/react.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ReactDOM from 'react-dom';\nimport { isInIcestark, setLibraryName } from '@ice/stark-app';\nimport App from './App';\n\nexport function mount(props) {\n  ReactDOM.render(<App {...customProps} />, props.container);\n}\n\nexport function unmount(props) {\n  ReactDOM.unmountComponentAtNode(props.container);\n}\n\n// 注意：`setLibraryName` 的入参需要与 webpack 工程配置的 output.library 保持一致\nsetLibraryName('microApp');\n\nif (!isInIcestark()) {\n  ReactDOM.render(<App />, document.getElementById('ice-container'));\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting mount/unmount Lifecycle Methods for icestark Micro-Application\nDESCRIPTION: This code shows how to implement the mount and unmount lifecycle methods for an icestark micro-application using the newer format (v1.6.0+). These methods handle rendering and cleanup of a React component within the container provided by the main application.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/concept/child.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nexport function mount(props) {\n  ReactDOM.render(<App />, props.container);\n}\n\nexport function unmount(props) {\n  ReactDOM.unmountComponentAtNode(props.container);\n}\n```\n\n----------------------------------------\n\nTITLE: Adapting Vue 3.x Application Entry for icestark\nDESCRIPTION: Code for adapting a Vue 3.x application entry file to export the required lifecycle methods for icestark integration, using Vue 3's createApp API pattern.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/use-child/vue.md#2025-04-08_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { createApp } from 'vue'\nimport App from './App.vue'\nimport isInIcestark from '@ice/stark-app/lib/isInIcestark';\nimport setLibraryName from '@ice/stark-app/lib/setLibraryName';\n\nlet vue = null;\n\n// 注意：`setLibraryName` 的入参需要与 webpack 工程配置的 output.library 保持一致\nsetLibraryName('microApp')\n\nexport function mount({ container }) {\n  vue = createApp(App);\n  vue.mount(container);\n}\n\nexport function unmount() {\n  vue.unmount();\n}\n\nif (!isInIcestark()) {\n  createApp(App).mount('#app');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Micro-Application with HTML Entry in icestark\nDESCRIPTION: This snippet shows the recommended approach for configuring a micro-application in icestark using an HTML entry point. This method is useful when the application has dynamic resource dependencies or requires specific DOM structures, supporting frameworks like jQuery, Kissy, or Angular.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/concept/child.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst apps = [{\n  entry: 'https://example.com/a.html',\n  activePath: '/foo'\n  // ...\n}]\n```\n\n----------------------------------------\n\nTITLE: Configuring Micro-applications Registration\nDESCRIPTION: Example of registering multiple micro-applications with their respective configurations including routing, container, and resource URLs\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/use-layout/vue.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerMicroApps, start } from '@ice/stark';\n\nconst appContainer = document.getElementById('icestarkNode');\n\nregisterMicroApps([\n  {\n    name: 'app1',\n    activePath: ['/', '/message', '/about'],\n    exact: true,\n    title: '通用页面',\n    container: appContainer,\n    url: ['//unpkg.com/icestark-child-common/build/js/index.js'],\n  },\n  {\n    name: 'app2',\n    activePath: '/seller',\n    title: '商家平台',\n    container: appContainer,\n    url: [\n      '//unpkg.com/icestark-child-seller/build/js/index.js',\n      '//unpkg.com/icestark-child-seller/build/css/index.css',\n    ],\n  },\n]);\n\nstart();\n```\n\n----------------------------------------\n\nTITLE: App Lifecycle Management\nDESCRIPTION: Shows how to register app entry and exit callbacks with proper React mounting/unmounting.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/api/ice-stark-app.md#2025-04-08_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// src/index.js\nimport ReactDOM from 'react-dom';\nimport { isInIcestark, getMountNode, registerAppEnter, registerAppLeave } from '@ice/stark-app';\nimport router from './router';\n\nif (isInIcestark()) {\n  const mountNode = getMountNode();\n  registerAppEnter(() => {\n    ReactDOM.render(router(), getMountNode());\n  });\n  // make sure the unmount event is triggered\n  registerAppLeave(() => {\n    ReactDOM.unmountComponentAtNode(getMountNode());\n  });\n} else {\n  ReactDOM.render(router(), document.getElementById('ice-container'));\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Props from Main Application to Micro Applications in icestark\nDESCRIPTION: Example of configuring props in AppRoute to pass data from the main application to micro applications. The code shows how to inject user information to a micro application named 'waiter'.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/advanced/communication.md#2025-04-08_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// src/App.jsx\nimport { AppRouter, AppRoute } from '@ice/stark';\n\nconst App = () => {\n  return (\n    <AppRouter>\n      <AppRoute\n        name=\"waiter\"\n        activePath=\"/waiter\"\n        title=\"商家平台\",\n        props={{\n          userId: 'xxxxx'\n        }}\n        url={[\n          'https://iceworks.oss-cn-hangzhou.aliyuncs.com/icestark/child-waiter-vue/dist/js/app.js',\n          'https://iceworks.oss-cn-hangzhou.aliyuncs.com/icestark/child-waiter-vue/dist/css/app.css',\n        ]}\n      />\n      ...\n    </AppRouter>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Base Route for React Router in icestark\nDESCRIPTION: This code demonstrates how to set up the base route for a React application using react-router when integrated with icestark. It uses the getBasename() function from @ice/stark-app to dynamically set the router's basename.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/use-child/react.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport { getBasename } from '@ice/stark-app';\n\nexport default () => {\n  return (\n   <Router basename={getBasename()}>\n      <Switch>\n        // ...\n      </Switch>\n    </Router>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Props in Micro Application Lifecycle Methods\nDESCRIPTION: Example of receiving props data in a micro application through the mount lifecycle function. This demonstrates how to access custom props passed from the main application.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/advanced/communication.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport function mount({ container, customProps }) {\n  ReactDOM.render(<App { ...customProps } />, props.container);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting and Updating Store Values in Main Application with @ice/stark-data\nDESCRIPTION: Example of using store.set() to initialize and update values in the main application for language settings and user information. This demonstrates how to share data that can be accessed by micro applications.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/advanced/communication.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// 主应用\nimport { store } from '@ice/stark-data';\n\nconst userInfo = { name: 'Tom', age: 18 };\nstore.set('language', 'CH'); // 设置语言\nstore.set('user', userInfo); // 设置登录后当前用户信息\n\nsetTimeout(() => {\n  store.set('language', 'EN');\n}, 3000);\n```\n\n----------------------------------------\n\nTITLE: Using API Approach to Load Micro-Modules in React\nDESCRIPTION: JavaScript code demonstrating how to use the mountModule and unmountModule APIs from @ice/stark-module to manually control micro-module lifecycle in a React component with useRef and useEffect.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/micro-module.md#2025-04-08_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mountModule, unmoutModule } from '@ice/stark-module';\nimport { useRef } from 'useRef';\n\nconst moduleInfo = {\n  name: 'moduleName',\n  url: 'https://localhost/module.js',\n};\n\nconst ModuleComponent = () => {\n  const renderNode = useRef(null);\n  useEffect(() => {\n    const dom = renderNode.current;\n    mountModule(moduleInfo, dom, {});\n    return () => {\n      unmoutModule(moduleInfo, dom);\n    }\n  }, []);\n  return (<div ref={renderNode}></div>);\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Sandbox Isolation for icestark AppRoute\nDESCRIPTION: This code snippet shows how to enable sandbox isolation for a micro-application using the sandbox property in the AppRoute component. It uses @ice/sandbox for creating a sandboxed environment.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/advanced/sandbox.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<AppRoute\n  sandbox\n  activePath=\"/seller\"\n  title=\"商家平台\"\n  url={[\n    '//unpkg.com/icestark-child-seller/build/js/index.js',\n    '//unpkg.com/icestark-child-seller/build/css/index.css',\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing icestark Core Modules\nDESCRIPTION: Modern way to import core icestark functionality for micro-application registration\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/use-layout/vue.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// 新版本引用方式\nimport start from '@ice/stark/lib/start'\nimport { registerMicroApps } from '@ice/stark/lib/apps'\n```\n\n----------------------------------------\n\nTITLE: Mounting and Unmounting Modules with Custom Components\nDESCRIPTION: Demonstrates how to use mountModule and unmountModule functions to create a custom React component that mounts a module on component mount and unmounts it on component unmount.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/api/stark-module.md#2025-04-08_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mountModule, unmoutModule } from '@ice/stark-module';\n\nconst moduleInfo = {\n  name: 'moduleName',\n  url: 'https://localhost/module.js',\n};\n\nconst ModuleComponent = () => {\n  const renderNode = useRef(null);\n  useEffect(() => {\n    mountModule(moduleInfo, renderNode, {});\n    return () => {\n      unmoutModule(moduleInfo, renderNode);\n    }\n  }, []);\n  return (<div ref={renderNode}></div>);\n};\n```\n\n----------------------------------------\n\nTITLE: Using IceStark Store API\nDESCRIPTION: Example demonstrating the usage of Store API for global state management between framework and sub-applications. Shows how to set, get, subscribe to, and unsubscribe from store values.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/packages/icestark-data/README.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Framework\nimport { store } from '@ice/stark-data';\n\nconst userInfo = { name: 'Tom', age: 18 };\nstore.set('user', userInfo); // set UserInfo\nstore.set('language', 'CH');\n\n// Sub-application A\nimport { store } from '@ice/stark-data';\n\nconst userInfo = store.get('user'); // get UserInfo\n\nfunction showLang(lang) {\n  console.log(`current language is ${lang}`);\n}\n\nstore.on('language', showLang, true); // add callback for 'language', callback will be called whenever 'language' is changed\n\nstore.off('language', showLang); // remove callback for 'language'\n```\n\n----------------------------------------\n\nTITLE: Registering Micro-Application Lifecycle with registerAppEnter/registerAppLeave in icestark\nDESCRIPTION: This code demonstrates how to register micro-application lifecycle hooks using the registerAppEnter and registerAppLeave methods from @ice/stark-app. It shows how to render and unmount a React component when the micro-application enters and leaves the main application.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/concept/child.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ReactDOM from 'react-dom';\nimport { registerAppEnter, registerAppLeave } from '@ice/stark-app';\nimport App from './App';\n\nregisterAppEnter((props) => {\n  ReactDOM.render(<App />, props.container);\n});\n\nregisterAppLeave((props) => {\n  ReactDOM.unmountComponentAtNode(props.container);\n});\n```\n\n----------------------------------------\n\nTITLE: Using IceStark Event API\nDESCRIPTION: Example showing the usage of Event API for global event handling between framework and sub-applications. Demonstrates event emission, subscription, and handling.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/packages/icestark-data/README.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Framework\nimport { event } from '@ice/stark-data';\n\nfunction fresh(needFresh) {\n  if (!needFresh) return;\n\n  fetch('/api/fresh/message').then(res => {\n    // ...\n  });\n}\n\nevent.on('freshMessage', fresh);\n\n// Sub-application A\nimport { event } from '@ice/stark-data';\n\nevent.emit('freshMessage', false);\n// ...\nevent.emit('freshMessage', true);\n```\n\n----------------------------------------\n\nTITLE: Configuring AppConfig in React and API Usage\nDESCRIPTION: Shows how to configure AppConfig for a micro-application using both React components and API methods.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/api/ice-stark.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// 1. 传递给 AppRoute 的 props\n<AppRouter>\n  <AppRoute\n    name=\"seller\"\n    activePath=\"/seller\"\n    url={[\n      '/js/index.js',\n      '/css/index.js'\n    ]}\n  />\n</AppRouter>\n\n// 2. Api 方式通过 `registerMicroApps` 注册\nregisterMicroApps([{\n  name=\"seller\"\n  activePath=\"/seller\"\n  url={[\n    '/js/index.js',\n    '/css/index.js'\n  ]}\n}])\n```\n\n----------------------------------------\n\nTITLE: ModuleInfo Interface Definition in TypeScript\nDESCRIPTION: Defines the ModuleInfo interface in TypeScript, which describes the structure of a micro-module including name, URL, render function, runtime, mount, and unmount methods.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/api/stark-module.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nname: string;\nurl: string | string[];\nrender?: (props: StarkModule) => any;\nruntime?: Runtime;\nmount?: (Component: any, targetNode: HTMLElement, props?: any) => void;\nunmount?: (targetNode: HTMLElement) => void;\n```\n\n----------------------------------------\n\nTITLE: Custom Mounting of Modules in React\nDESCRIPTION: Demonstrates how to use mountModule and unmountModule functions to manually control the lifecycle of a micro module within a React component using useEffect.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/packages/icestark-module/README.md#2025-04-08_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { mountModule, unmoutModule } from '@ice/stark-module';\n\nconst moduleInfo = {\n  name: 'moduleName',\n  url: 'https://localhost/module.js',\n};\n\nconst ModuleComponent = () => {\n  const renderNode = useRef(null);\n  useEffect(() => {\n    mountModule(moduleInfo, renderNode, {});\n    return () => {\n      unmoutModule(moduleInfo, renderNode);\n    }\n  }, []);\n  return (<div ref={renderNode}></div>);\n};\n```\n\n----------------------------------------\n\nTITLE: Centralized Registration of Micro-Modules\nDESCRIPTION: JavaScript code showing how to centrally register micro-modules using registerModules API and then reference them by name in React components with MicroModule from @ice/stark-module.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/micro-module.md#2025-04-08_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MicroModule, registerModules, getModules } from '@ice/stark-module';\n\nregisterModules([\n  {\n    url: 'https://localhost/module-a.js',\n    name: 'module-a',\n  },\n  {\n    url: 'https://localhost/module-b.js',\n    name: 'module-b',\n  },\n]);\n\nconst App = () => {\n  // 中心化注册过，可以通过模块名直接指定要加载的微模块\n  return (\n    <div>\n      <MicroModule moduleName=\"module-a\" />\n      <MicroModule moduleName=\"module-b\" />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Module Lifecycle in JavaScript\nDESCRIPTION: Example of how to specify a module's lifecycle functions (mount and unmount) when packaging code as a micro module. This is essential for proper integration with the @ice/stark-module system.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/packages/icestark-module/README.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst SampleComponent = () => {\n  return <div>Sample</div>;\n}\n\n// mount function will be trigger when mount micro module\nexport function mount(ModuleComponent, targetNode, props) {\n  ReactDOM.render(<ModuleComponent {...props} />, targetNode);\n}\n\n// unmount function will be trigger when unmount micro module\nexport function unmount(targetNode) {\n  ReactDOM.unmountComponentAtNode(targetNode);\n}\n\nexport default SampleComponent;\n```\n\n----------------------------------------\n\nTITLE: Framework Layout with Routing\nDESCRIPTION: Example of framework layout structure with nested routing configuration.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/use-layout/react.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<FrameworkLayout>\n  <AppRouter>\n    <AppRoute activePath=\"/seller\" url={[]} />\n    <AppRoute activePath=\"*\" component={() => {\n      return <ReactRouter></ReactRouter>\n    }} />\n  </AppRouter>\n<FrameworkLayout>\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Application to Load Vite App in icestark\nDESCRIPTION: This React component snippet demonstrates how to configure the main application to load a Vite-based micro-application using icestark. It specifies the loadScriptMode as 'import' for ES modules and uses the entry approach for consistency between development and production.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/use-child/others.md#2025-04-08_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\nexport default class App extends React.Component {\n  render() {\n    return (\n      <BasicLayout>\n        <AppRouter>\n          <AppRoute\n            activePath=\"/seller\"\n            title=\"商家平台\"\n+           loadScriptMode=\"import\" // 指定加载 ES modules 类型微应用\n+           entry=\"https://icestark-child-seller\"\n          />\n          <AppRoute\n            activePath=\"/user\"\n            //...\n          />\n        </AppRouter>\n      </BasicLayout>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of MicroModule Component in React\nDESCRIPTION: Demonstrates the basic usage of the MicroModule component from @ice/stark-module. It shows how to render a micro module by providing module information.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/packages/icestark-module/README.md#2025-04-08_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { MicroModule } from '@ice/stark-module';\n\nconst App = () => {\n  const moduleInfo = {\n    name: 'moduleName',\n    url: 'https://localhost/module.js',\n  }\n  return <MicroModule moduleInfo={moduleInfo} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ES Modules Support in AppRouter\nDESCRIPTION: Shows how to configure the AppRouter component to support ES modules type micro-applications by setting the loadScriptMode property to 'import'.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/blog/02-icestark-2-6-0.md#2025-04-08_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<AppRouter>\n  <AppRoute\n    title=\"商家平台\"\n+   loadScriptMode=\"import\"\n    url={[\n      '//unpkg.com/icestark-child-seller/build/js/index.js', // 资源 ES modules 入口\n      '//unpkg.com/icestark-child-seller/build/css/index.css',\n    ]}\n  />\n  <AppRoute\n    path=\"/user\"\n    //...\n  />\n</AppRouter>\n```\n\n----------------------------------------\n\nTITLE: Registering and Using Multiple Modules in React\nDESCRIPTION: Shows how to register multiple modules using the registerModule and registerModules functions, and then use them in a React component. It also demonstrates how to retrieve registered module information.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/packages/icestark-module/README.md#2025-04-08_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { MicroModule, registerModule, registerModules, getModules } from '@ice/stark-module';\n\n// register single module\nregisterModule({\n  url: 'https://localhost/module-a.js',\n  name: 'module-a',\n});\n\n// register multiple modules at once\nregisterModules([\n  {\n    url: 'https://localhost/module-b.js',\n    name: 'module-b',\n  },\n  {\n    url: 'https://localhost/module-c.js',\n    name: 'module-c',\n  },\n]);\n\n// get module info registered by API registerModules\nconst moduleInfo = getModules();\n\nconst App = () => {\n  // after registerMdoules, use micro module by specify module name\n  return (\n    <div>\n      <MicroModule moduleName=\"module-a\" />\n      <MicroModule moduleName=\"module-b\" />\n      <MicroModule moduleName=\"module-c\" />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Vue Applications to Micro-Modules\nDESCRIPTION: JavaScript code showing how to export lifecycle functions (mount and unmount) to convert a Vue 2.x application into a micro-module. Includes handling component creation and destruction.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/micro-module.md#2025-04-08_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport Vue from 'vue';\nimport SampleModule from './SampleModule';\n\nlet vue = null;\n\n// 声明 mount 生命周期\nexport function mount(ModuleComponent, targetNode, props) {\n  vue = new Vue({\n    components: { ModuleComponent }\n  }).$mount();\n\n  // for vue don't replace mountNode\n  container.innerHTML = '';\n  container.appendChild(vue.$el);\n}\n\n// 声明 unmount 生命周期\nexport function unmount(targetNode) {\n  vue && vue.$destroy();\n}\n\nexport default SampleModule;\n```\n\n----------------------------------------\n\nTITLE: Creating a React Micro-Module Entry File\nDESCRIPTION: Example of a basic React micro-module entry file that exports a functional component. This file serves as the entry point for the module at src/index.js.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/micro-module.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\n\nexport default function ExampleComponent(props) {\n  const { type, ...others } = props;\n\n  return (\n    <div className=\"ExampleComponent\" {...others}>Hello ExampleComponent</div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Converting React Applications to Micro-Modules\nDESCRIPTION: JavaScript code showing how to export lifecycle functions (mount and unmount) to convert a React application into a micro-module. This includes handling component mounting and unmounting.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/micro-module.md#2025-04-08_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as ReactDOM from 'react-dom';\n\nconst SampleModule = () => {\n  return <div>Sample</div>;\n}\n\n// 声明 mount 生命周期\nexport function mount(ModuleComponent, targetNode, props) {\n  ReactDOM.render(<ModuleComponent {...props} />, targetNode);\n}\n\n// 声明 unmount 生命周期\nexport function unmount(targetNode) {\n  ReactDOM.unmountComponentAtNode(targetNode);\n}\n\nexport default SampleModule;\n```\n\n----------------------------------------\n\nTITLE: Listening for Events in Main Application with @ice/stark-data\nDESCRIPTION: Example of using event.on() to register event listeners in the main application. The code demonstrates how to listen for a 'freshMessage' event that could be triggered by micro applications.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/advanced/communication.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// 主应用\nimport { event } from '@ice/stark-data';\n\nevent.on('freshMessage', () => {\n  // 重新获取消息数\n});\n```\n\n----------------------------------------\n\nTITLE: AppLink Basic Usage\nDESCRIPTION: Shows basic usage of AppLink component for inter-application navigation with query parameters.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/api/ice-stark-app.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { AppLink } from '@ice/stark';\n\nexport default class SelfLink extends React.Component {\n  render() {\n    return (\n      <div>\n        // 应用间路由跳转，并携带 query 查询参数\n        <AppLink to=\\\"/waiter/list?name=ice\\\">使用 AppLink 跳转到小二平台的列表页</AppLink>\n        <Link to=\\\"/detail\\\">跳转到商家平台详情页</Link>\n      </div>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for UMD Module Export in Sub-Applications\nDESCRIPTION: Webpack configuration example for sub-applications to ensure they are bundled as UMD modules, which is required for the export lifecycle pattern in icestark.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/README.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  output: {\n    library: 'sub-app-name',\n    libraryTarget: 'umd',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: AppHistory State Navigation\nDESCRIPTION: Shows how to use appHistory.push with state parameter.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/api/ice-stark-app.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nappHistory.push('/home?name=ice', { framework: 'icestark' });\n```\n\n----------------------------------------\n\nTITLE: Framework Layout Implementation for HashRouter Support\nDESCRIPTION: Custom FrameworkLayout component that handles both hash-based and path-based routing in a micro-frontend application, including lifecycle hooks for app transitions.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/faq.md#2025-04-08_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\nimport * as React from 'react';\nimport BasicLayout from '../BasicLayout';\nimport UserLayout from '../UserLayout';\n\ninterface RouteInfo {\n  hash: string;\n  pathname: string;\n  query: object;\n  routeType: 'pushState' | 'replaceState',\n}\n\nconst { useEffect } = React;\nexport default function FrameworkLayout(props: {\n  children: React.ReactNode;\n  appLeave: { path: string };\n  appEnter: { path: string };\n  routeInfo: RouteInfo;\n}) {\n  const { children, appLeave, appEnter, routeInfo } = props;\n  // 如果是 HashRouter 模式\n  const isHashRouter = true;\n  const { hash = '', pathname } = routeInfo;\n  const path = isHashRouter ? hash.replace('#', '') : pathname;\n  const Layout = hash === '/login' ? UserLayout : BasicLayout;\n\n  useEffect(() => {\n    console.log('== app leave ==', appLeave);\n    if (appLeave.path === '/angular' && window.webpackJsonp) {\n      // remove webpackJsonp added by Angular app\n      delete window.webpackJsonp;\n    }\n  }, [appLeave]);\n\n  useEffect(() => {\n    console.log('== app enter ==', appEnter);\n  }, [appEnter]);\n\n  return (\n    <Layout pathname={path}>{children}</Layout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: AppHistory Hash Navigation\nDESCRIPTION: Demonstrates hash-based routing with appHistory.push.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/api/ice-stark-app.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nappHistory.push('/home?name=ice', {}, true);\n```\n\n----------------------------------------\n\nTITLE: Custom Lifecycle for MicroModule in React\nDESCRIPTION: Shows how to provide a custom mount lifecycle function when using the MicroModule component. This allows for custom behavior during the module mounting process.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/packages/icestark-module/README.md#2025-04-08_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { MicroModule } from '@ice/stark-module';\n\nconst App = () => {\n  const moduleInfo = {\n    name: 'moduleName',\n    url: 'https://localhost/module.js',\n    mount: (ModuleComponent, mountNode) => {\n      console.log('custom mount');\n      ReactDOM.render(<ModuleComponent />, mountNode);\n    },\n  }\n  return <MicroModule moduleInfo={moduleInfo} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Store Values in Micro Application with @ice/stark-data\nDESCRIPTION: Example of using store.on() to listen for data changes and store.get() to retrieve data in micro applications. The code shows how to respond to language changes and access user information.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/advanced/communication.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// 微应用\nimport { store } from '@ice/stark-data';\n\n// 监听语言变化\nstore.on('language', (lang) => {\n  console.log(`current language is ${lang}`);\n}, true);\n\n// 获取当前用户\nconst userInfo = store.get('user');\n```\n\n----------------------------------------\n\nTITLE: Registering Local Modules in React\nDESCRIPTION: Shows how to register and use local modules (built-in components) with @ice/stark-module. This is useful for scenarios where you need to support components that are part of your main application.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/packages/icestark-module/README.md#2025-04-08_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport LocalComponent from './localComponent';\n\nregisterModules([{\n  name: 'moduleName',\n  render: () => LocalComponent,\n}]);\n\nconst App = () => {\n  return (\n    <div>\n      <MicroModule moduleName=\"moduleName\" />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using appHistory with State in icestark\nDESCRIPTION: This code snippet illustrates how to use the appHistory.push method with state parameters in icestark. It demonstrates passing both path and state information for navigation.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/blog/03-icestark-2-7-0.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nappHistory.push('/home?name=ice', { framework: 'icestark' });\n```\n\n----------------------------------------\n\nTITLE: Adapting Vue 2.x Application Entry for icestark\nDESCRIPTION: Code for adapting a Vue 2.x application entry file to export the required lifecycle methods (mount and unmount) for icestark integration, while maintaining standalone functionality.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/use-child/vue.md#2025-04-08_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// 应用入口文件 src/main.js\nimport Vue from 'vue';\nimport isInIcestark from '@ice/stark-app/lib/isInIcestark';\nimport setLibraryName from '@ice/stark-app/lib/setLibraryName';\n\nlet vue;\n\n// 注意：`setLibraryName` 的入参需要与 webpack 工程配置的 output.library 保持一致\nsetLibraryName('microApp');\n\nexport function mount(props) {\n  const { container } = props;\n  vue = new Vue(...).$mount();\n  // for vue don't replace mountNode\n  container.innerHTML = '';\n  container.appendChild(vue.$el);\n}\n\nexport function unmount() {\n  vue && vue.$destroy();\n}\n\nif (!isInIcestark()) {\n  new Vue(...);\n}\n```\n\n----------------------------------------\n\nTITLE: Using AppLink Component with State in icestark\nDESCRIPTION: This snippet shows how to use the AppLink component in icestark, including the ability to pass state information along with the navigation path. It demonstrates setting pathname, search parameters, and state.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/blog/03-icestark-2-7-0.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<AppLink\n  to={{\n    pathname: '/waiter/list',\n    search: '?name=ice',\n    state: {\n      framework: 'icestark'\n    }\n  }}\n  >\n  使用 AppLink 进行页面跳转\n</AppLink>\n```\n\n----------------------------------------\n\nTITLE: Custom Lifecycle Functions for Micro-Modules\nDESCRIPTION: JavaScript code showing how to implement custom mount lifecycle functions for micro-modules that don't export them. This enables custom rendering behavior for specific modules.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/micro-module.md#2025-04-08_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MicroModule } from '@ice/stark-module';\nimport ReactDOM from 'react-dom';\n\nconst App = () => {\n  const moduleInfo = {\n    name: 'moduleName',\n    url: 'https://localhost/module.js',\n    mount: (ModuleComponent, mountNode, props) => {\n      console.log('custom mount');\n      ReactDOM.render(<ModuleComponent />, mountNode, props);\n    },\n  }\n  return <MicroModule moduleInfo={moduleInfo} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Router for icestark Micro-Applications\nDESCRIPTION: Configuration for vue-router in a micro-application, using getBasename from icestark to ensure proper base path handling when loaded within the icestark framework.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/use-child/vue.md#2025-04-08_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport Vue from 'vue';\nimport Router from 'vue-router';\nimport getBasename from '@ice/stark-app/lib/getBasename';\nimport routes from '@/config/routes';\n\nVue.use(Router);\n\nexport default new Router({\n  routes,\n  mode: 'history',\n  base: getBasename(),\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Local Modules without Remote Loading\nDESCRIPTION: JavaScript code showing how to register and use local modules (components from the same application) as micro-modules without loading them from remote URLs.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/micro-module.md#2025-04-08_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport LocalComponent from './localComponent';\n\nregisterModules([{\n  name: 'moduleName',\n  render: () => LocalComponent,\n}]);\n\nconst App = () => {\n  return (\n    <div>\n      <MicroModule moduleName=\"moduleName\" />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for UMD Output in icestark\nDESCRIPTION: This webpack configuration snippet shows how to set up the output settings to build the micro-application as a UMD module, which is required for icestark integration. It sets the libraryTarget to 'umd' and optionally exposes the module on the window object.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/use-child/react.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  output: {\n    // 设置模块导出规范为 umd\n    libraryTarget: 'umd',\n    // 可选，设置模块在 window 上暴露的名称\n    library: 'microApp',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing 404 Fallback for Microapp Routing\nDESCRIPTION: Implementation of a default 404 route in a microapp to handle cases when routes don't match, preventing blank pages and providing better debugging information.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/faq.md#2025-04-08_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { renderNotFound, isInIcestark, getBasename } from '@ice/stark-app';\n\nconst Routes = () => {\n  return (\n    <Router basename={isInIcestark() ? getBasename(): '/'}>\n      <Route component={Detail} activePath=\"/detail\" exact>\n      <Route component={isInIcestark() ? () => renderNotFound() : NotFound}>\n    </Route>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using MicroModule Component in React Applications\nDESCRIPTION: JavaScript code showing how to use the MicroModule component from @ice/stark-module to load and render a micro-module in a React application.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/micro-module.md#2025-04-08_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MicroModule } from '@ice/stark-module';\n\nconst App = () => {\n  const moduleInfo = {\n    name: 'moduleName',\n    url: 'https://localhost/module.js',\n  }\n  return <MicroModule moduleInfo={moduleInfo} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Registered Modules with clearModules\nDESCRIPTION: Shows how to use the clearModules function to remove all previously registered modules after registering multiple modules with registerModules.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/api/stark-module.md#2025-04-08_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerModules, clearModules } from '@ice/stark-module';\n\nregisterModules([\n  {\n    url: 'https://localhost/module-a.js',\n    name: 'module-a',\n  },\n  {\n    url: 'https://localhost/module-b.js',\n    name: 'module-b',\n  },\n]);\n\nclearModules();\n```\n\n----------------------------------------\n\nTITLE: Using MicroModule Component in React\nDESCRIPTION: Demonstrates how to use the MicroModule React component to quickly integrate a module in a React application, specifying the module name and URL.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/api/stark-module.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MicroModule } from '@ice/stark-module';\n\nconst App = () => {\n  const moduleInfo = {\n    name: 'moduleName',\n    url: 'https://localhost/module.js',\n  }\n  return <MicroModule moduleInfo={moduleInfo} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Asset Removal for Main Application Resources\nDESCRIPTION: Configuration to prevent icestark from incorrectly removing main application assets when using webpack Dynamic Imports, by implementing a shouldAssetsRemove handler.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/faq.md#2025-04-08_snippet_10\n\nLANGUAGE: JSX\nCODE:\n```\n// src/App.jsx\nimport { AppRouter, AppRoute } from '@ice/stark';\n\nconst App = () => {\n  render() {\n    return (\n      <AppRouter\n        shouldAssetsRemove={(url, element) => {\n          // 如果请求主应用静态资源，返回 false\n          if (url.includes('www.framework.com')) {\n            return false;\n          }\n          return true;\n        }}\n        >\n        ...\n      </AppRouter>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Route Navigation in Main Application\nDESCRIPTION: Example of implementing route navigation using appHistory and AppLink in the main application.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/use-layout/react.md#2025-04-08_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { appHistory, AppLink } from '@ice/stark-app';\n\nexport default function FrameworkLayout() {\n  return (\n    <>\n      <span\n        onClick={() => {\n          appHistory.push('/seller/list');\n        }}\n      >\n        seller\n      </span>\n      <AppLink to=\"/waiter/list\">waiter</AppLink>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Library Mode in icestark Integration\nDESCRIPTION: This configuration snippet demonstrates how to modify the Vite config file to use Library Mode, enabling icestark to correctly access lifecycle functions. It specifies the entry point and output format for the application.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/use-child/others.md#2025-04-08_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport vue from '@vitejs/plugin-vue';\n\nexport default defineConfig({\n  plugins: [vue()],\n+  build: {\n+    lib: {\n+      entry: './src/main.ts',\n+      formats: ['es'],\n+      fileName: 'index'\n+    },\n+    rollupOptions: {\n+      preserveEntrySignatures: 'exports-only',\n+    }\n+  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Lifecycle Functions for Vue Application in icestark\nDESCRIPTION: This snippet shows how to modify a Vue application's entry file to define mount and unmount lifecycle functions for icestark integration. It includes checks for running inside icestark context and preserves standalone functionality.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/use-child/others.md#2025-04-08_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nimport { createApp } from 'vue'\n+ import type { App as Root} from 'vue';\nimport App from './App.vue'\n+ import isInIcestark from '@ice/stark-app/lib/isInIcestark';\n\n\n- createApp(App).mount('#app');\n\n+ let vue: Root<Element> | null = null;\n\n// 不在 icestark context，保持独立运行\n+ if (!isInIcestark()) {\n+  createApp(App).mount('#app');\n+ }\n\n\n// 导出 mount 生命周期函数\n+ export function mount({ container }: { container: Element}) {\n+  vue = createApp(App);\n+  vue.mount(container);\n+ }\n\n\n// 导出 unmout 生命周期函数\n+ export function unmount() {\n+  if (vue) {\n+    vue.unmount();\n+  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring framework application to pass props to micro-applications in icestark\nDESCRIPTION: Shows how to configure a framework application to pass custom parameters to micro-applications via the props field in icestark 2.x.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/blog/00-icestark-2-4-0.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// 框架应用\nconst appConfig = {\n  ...\n  icestark: {\n    type: 'framework',\n    Layout: BasicLayout,\n    getApps: async () => {\n      const apps = [{\n        path: '/seller',\n        title: '商家平台',\n        url: [\n          '//ice.alicdn.com/icestark/child-seller-react/index.js',\n          '//ice.alicdn.com/icestark/child-seller-react/index.css',\n        ],\n+       props: {\n+         name: 'micro-child'\n+       }\n      }];\n      return apps;\n    },\n   ...\n  },\n};\nrunApp(appConfig);\n```\n\n----------------------------------------\n\nTITLE: Setting baseURL for Microapp API Requests\nDESCRIPTION: This code shows how to configure Axios to use a specific baseURL for microapp API requests, allowing the microapp to access its own mock API endpoints even when embedded in a main application.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/faq.md#2025-04-08_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// src/utils/request.js\nimport axios from 'axios';\n\naxios.defaults.baseURL = '//127.0.0.1:4444';\n```\n\n----------------------------------------\n\nTITLE: Using Symbol for event communication with @ice/stark-data\nDESCRIPTION: Demonstrates how to use Symbol.for() to create unique identifiers for event communication between the main application and micro-applications using @ice/stark-data.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/blog/00-icestark-2-4-0.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// (1）在主应用中监听事件\nimport { event } from '@ice/stark-data';\n\nconst sym = Symbol.for('freshMessage');\n\nevent.on('sym', () => {\n  // 重新获取消息数\n})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// (2）在微应用触发事件\nimport { event } from '@ice/stark-data';\n\nconst sym = Symbol.for('freshMessage');\n\nevent.emit('sym');\n```\n\n----------------------------------------\n\nTITLE: Setting up Sub-application Router\nDESCRIPTION: Configuration of sub-application routing using React Router with basename and NotFound handling.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/packages/icestark/README.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// src/router.js\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport { renderNotFound, getBasename } from '@ice/stark-app';\n\nfunction List() {\n  return <div>List</div>;\n}\n\nfunction Detail() {\n  return <div>Detail</div>;\n}\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <Router basename={getBasename()}>\n        <Switch>\n          <Route path=\"/list\" component={List} />\n          <Route path=\"/detail\" component={Detail} />\n          <Redirect exact from=\"/\" to=\"list\" />\n          <Route\n            component={() => {\n              return renderNotFound();\n            }}\n          />\n        </Switch>\n      </Router>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Micro-Module External Dependencies with Build Plugin\nDESCRIPTION: JSON configuration for build-plugin-stark-module that specifies external dependencies and their CDN URLs. This generates a runtime.json file with dependency information for consumption by the main application.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/micro-module.md#2025-04-08_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"plugins\": [\n    ...\n    [\"build-plugin-stark-module\", {\n      \"moduleExternals\": {\n        \"react\": {\n          \"root\": \"React\",\n          \"url\": \"https://g.alicdn.com/code/lib/react/16.14.0/umd/react.production.min.js\",\n        },\n        \"react-dom\": {\n          \"root\": \"ReactDOM\",\n          \"url\": \"https://g.alicdn.com/code/lib/react-dom/16.14.0/umd/react-dom.production.min.js\"\n        }\n      }\n    }],\n\t...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Micro Apps using API Approach\nDESCRIPTION: Alternative approach to register micro applications using the registerMicroApps API introduced in @ice/stark@2.0.0.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/packages/icestark/README.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerMicroApps } from '@ice/stark';\n\nregsiterMicroApps([\n  {\n    name: 'app1',\n    activePath: ['/', '/message', '/about'],\n    exact: true,\n    title: '通用页面',\n    container: document.getElementById('icestarkNode'),\n    url: ['//unpkg.com/icestark-child-common/build/js/index.js'],\n  },\n  {\n    name: 'app2',\n    activePath: '/seller',\n    title: '商家平台',\n    container: document.getElementById('icestarkNode'),\n    url: [\n      '//unpkg.com/icestark-child-seller/build/js/index.js',\n      '//unpkg.com/icestark-child-seller/build/css/index.css',\n    ],\n  },\n]);\n\nstart();\n```\n\n----------------------------------------\n\nTITLE: Using Runtime.json for Dependency Management\nDESCRIPTION: JavaScript React code showing how to reference a runtime.json file for micro-module dependency declarations. This approach leverages the automatically generated dependency information file.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/micro-module.md#2025-04-08_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MicroModule } from '@ice/stark-module';\nimport ReactDOM from 'react-dom';\n\nconst App = () => {\n  const moduleInfo = {\n    name: 'moduleName',\n    url: 'https://localhost/module.js',\n    // 声明模块 moduleName 需要的依赖文件地址\n    runtime: 'https://xxx.com/moduleName.runtime.json'\n  }\n  return <MicroModule moduleInfo={moduleInfo} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Render Component Configuration\nDESCRIPTION: Example of using render prop or component prop to configure custom micro-application entry points.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/use-layout/react.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<AppRoute\n  activePath=\"/foo\"\n  render={() => {\n    return <iframe src=\"\" />;\n  }}\n  // 或者直接传入 component\n  // component={CustomComponent}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring scriptAttributes for microfrontend applications in icestark\nDESCRIPTION: Demonstrates how to use scriptAttributes to add crossorigin attributes to JavaScript resources in a microfrontend application, either for all scripts or conditionally based on URL patterns.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/blog/00-icestark-2-4-0.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// 微应用配置\n{\n  name: 'app1',\n  activePath: '/seller',\n  url: [\n    '//unpkg.com/app1/js/chunk.js',\n    '//unpkg.com/app1/js/index.js',\n    '//unpkg.com/app1/css/index.css',\n  ],\n  ...\n  // 为微应用 app1 的所有 js 资源添加 crossorigin=\"anonymous\"\n  scriptAttributes: [\"crossorigin=anonymous\"],\n  // or\n  // 为 `//unpkg.com/app1/js/chunk.js` 资源添加 crossorigin=\"anonymous\"\n  scriptAttributes: (url) => url.includes('chunk') ? [\"crossorigin=anonymous\"] : [],\n}\n```\n\n----------------------------------------\n\nTITLE: Recording and Restoring Global State in icestark AppRouter\nDESCRIPTION: This snippet demonstrates how to use the onAppEnter and onAppLeave hooks in the AppRouter component to record and restore global state when switching between micro-applications.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/advanced/sandbox.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<AppRouter\n  onAppEnter={(appConfig) => {\n    // 按需记录全局状态\n  }}\n  onAppLeave={(appConfig) => {\n    // 按需恢复全局状态\n  }}\n>\n  // {...}\n</AppRouter>\n```\n\n----------------------------------------\n\nTITLE: Using scriptAttributes to mark resource types in icestark\nDESCRIPTION: Shows how to use scriptAttributes to add custom attributes to JavaScript files for special marking, such as identifying chunk resources.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/blog/00-icestark-2-4-0.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n...\n// 为微应用的 chunk 资源标记类型\nscriptAttributes: (url) => url.includes('chunk') ? [\"resourceType=chunk\"] : [],\n...\n```\n\n----------------------------------------\n\nTITLE: Using Basename Field with createMicroApp\nDESCRIPTION: Example of using the new basename field directly in the createMicroApp configuration, which simplifies the process of setting the basename for micro-applications.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/blog/01-icestark-2-5-0.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMicroApp } from '@ice/stark';\n\ncreateMicroApp({\n  name: 'app',\n  activePath: '/seller',\n  basename: '/seller',\n  url: ['/js/index.js'],\n  container: ref.current;\n});\n```\n\n----------------------------------------\n\nTITLE: Adding crossorigin attribute to script tags in microfrontend applications\nDESCRIPTION: Shows how to configure scriptAttributes in icestark to add crossorigin=\"anonymous\" attribute to JavaScript files, which helps solve Script Error issues when capturing errors from cross-domain scripts.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/blog/00-icestark-2-4-0.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script src=\"http://another-domain.com/app.js\" crossorigin=\"anonymous\"></script>\n```\n\n----------------------------------------\n\nTITLE: StartConfiguration TypeScript Interface\nDESCRIPTION: Defines the TypeScript interface for StartConfiguration, specifying optional runtime parameters and hooks for icestark.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/api/ice-stark.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nonAppEnter?: (appConfig: AppConfig) => void;\nonAppLeave?: (appConfig: AppConfig) => void;\nonLoadingApp?: (appConfig: AppConfig) => void;\nonFinishLoading?: (appConfig: AppConfig) => void;\nonError?: (err: Error) => void;\nonActiveApps?: (appConfigs: AppConfig[]) => void;\nfetch?: Fetch;\nshouldAssetsRemove?: (\n  assetUrl?: string,\n  element?: HTMLElement | HTMLLinkElement | HTMLStyleElement | HTMLScriptElement,\n) => boolean;\nonRouteChange?: (\n  url: string,\n  pathname: string,\n  query: object,\n  hash?: string,\n  type?: RouteType | 'init' | 'popstate' | 'hashchange',\n) => void;\nprefetch?: Prefetch;\nbasename?: string;\n```\n\n----------------------------------------\n\nTITLE: Clearing WebpackJsonp on App Leave to Prevent Conflicts\nDESCRIPTION: Handler function for onAppLeave event that clears the webpackJsonp array to prevent runtime conflicts between microapplications that use lazy loading.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/faq.md#2025-04-08_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst onAppLeave = (appConfig) => {\n  window.webpackJsonp = [];\n};\n```\n\n----------------------------------------\n\nTITLE: Using Micro-Modules in Vue Applications\nDESCRIPTION: Vue component template and script showing how to integrate micro-modules in a Vue application using mountModule and unmountModule APIs from @ice/stark-module in the component lifecycle hooks.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/micro-module.md#2025-04-08_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <div ref=\"mountNode\"></div>\n</template>\n\n<script>\nimport { mountModule, unmoutModule } from '@ice/stark-module';\n\nconst moduleInfo = {\n  name: 'moduleName',\n  url: 'https://localhost/module.js',\n};\n\nexport default {\n  const mountNode = this.$refs.mountNode.$el;\n\tmounted () {\n  \tmountModule(moduleInfo, mountNode);\n  },\n  destroyed () {\n  \tunmoutModule(moduleInfo, mountNode)\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding CORS Headers in Webpack DevServer\nDESCRIPTION: Configuration for enabling CORS in webpack devServer to solve cross-origin issues when developing microapps that need to communicate with the main application.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/faq.md#2025-04-08_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  devServer: {\n    before(app) {\n      app.use((req, res, next) => {\n        // set cors for all served files\n        res.set('Access-Control-Allow-Origin', '*');\n        next();\n      });\n    },\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: AppRoute Props TypeScript Interface\nDESCRIPTION: Defines the TypeScript interface for AppRoute props, extending AppConfig with additional React-specific properties.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/api/ice-stark.md#2025-04-08_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AppRouteProps extends AppConfig {\n  component?: React.ReactElement;\n  render?: (componentProps: AppRouteComponentProps) => React.ReactElement;\n  path?: string | string[] | PathData[];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating icestark Child Application with Official Scaffold\nDESCRIPTION: This command initializes a new icestark child application using the official scaffold based on the icejs framework.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/use-child/react.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init ice icestark-child @icedesign/stark-child-scaffold\n```\n\n----------------------------------------\n\nTITLE: AppRouter Props TypeScript Interface\nDESCRIPTION: Defines the TypeScript interface for AppRouter props, extending StartConfiguration with additional React-specific properties.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/api/ice-stark.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AppRouterProps extends StartConfiguration {\n  ErrorComponent?: React.ComponentType | React.ReactElement;\n  LoadingComponent?: React.ComponentType | React.ReactElement;\n  NotFoundComponent?: React.ComponentType | React.ReactElement;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Vue Micro-Application with Ice Scaffold\nDESCRIPTION: Command to initialize a new Vue 3.0 micro-application using the Ice scaffold with Vite.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/use-child/vue.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init ice icestark-child @vue-materials/icestark-child-app\n```\n\n----------------------------------------\n\nTITLE: AppLink Advanced Usage\nDESCRIPTION: Demonstrates advanced AppLink usage with state and query parameters using object notation.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/api/ice-stark-app.md#2025-04-08_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { AppLink } from '@ice/stark';\n\nexport default class SelfLink extends React.Component {\n  render() {\n    return (\n      <div>\n        // 应用间路由跳转，并传递 state、query\n        <AppLink\n          to={{\n            pathname: '/waiter/list',\n            search: '?name=ice',\n            state: {\n              framework: 'icestark'\n            }\n          }}\n          >使用 AppLink 跳转到小二平台的列表页</AppLink>\n        <Link to=\\\"/detail\\\">跳转到商家平台详情页</Link>\n      </div>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing icestark Layout Template with NPM\nDESCRIPTION: Commands to create and initialize a new icestark layout project using the official ice scaffold.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/use-layout/react.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init ice icestark-layout @icedesign/stark-layout-scaffold\n$ cd icestark-layout\n$ npm install\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: AppHistory Navigation Example\nDESCRIPTION: Demonstrates using appHistory.push for navigation between applications with React component.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/api/ice-stark-app.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { appHistory } from '@ice/stark-app';\n\nexport default class SelfLink extends React.Component {\n  render() {\n    return (\n      <span\n        onClick={() => {\n          appHistory.push('/home?name=ice');\n        }}\n      >\n        selfLink\n      </span>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Micro-Module Development Environment\nDESCRIPTION: Shell commands for navigating into a component directory and starting the development environment for a micro-module.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/micro-module.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cd my-component\n$ npm install\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Route Path Matching Configuration\nDESCRIPTION: Examples of different route path matching configurations using activePath and exact properties in AppRoute.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/use-layout/react.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// 匹配符合 /seller/* 的所有路由\n<AppRoute\n  activePath=\"/seller\"\n/>\n\n// 仅完全匹配 /seller 这一个路由\n<AppRoute\n  activePath=\"/seller\"\n  exact\n/>\n\n// 匹配符合 /seller/* 以及 /user/* 的所有路由\n<AppRoute\n  activePath={['/seller', '/user']}\n/>\n\n// 匹配 /seller 这一个路由以及符合 /user/* 的所有路由\n<AppRoute\n  activePath={[\n    { path: '/seller', exact: true },\n    { path: '/user', exact: false },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing @ice/stark-module via npm\nDESCRIPTION: Command to install the @ice/stark-module package using npm. This is a prerequisite for using the package in your project.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/packages/icestark-module/README.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @ice/stark-module --save\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Modules with registerModules\nDESCRIPTION: Demonstrates how to use the registerModules function to register multiple modules simultaneously by providing an array of module configurations.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/api/stark-module.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nregisterModules([\n  {\n    url: 'https://localhost/module-b.js',\n    name: 'module-b',\n  },\n  {\n    url: 'https://localhost/module-c.js',\n    name: 'module-c',\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Installing @ice/stark-app Package via npm\nDESCRIPTION: This command installs the @ice/stark-app package as a dependency in your project. It provides the necessary APIs for sub-applications in the icestark micro-frontends solution.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/packages/icestark-app/README.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @ice/stark-app --save\n```\n\n----------------------------------------\n\nTITLE: Registering a Single Module with registerModule\nDESCRIPTION: Shows how to use the registerModule function to register a single module by providing its URL and name.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/api/stark-module.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nregisterModule({\n  url: 'https://localhost/module-a.js',\n  name: 'module-a',\n});\n```\n\n----------------------------------------\n\nTITLE: Upgrading build-plugin-icestark to the latest version\nDESCRIPTION: Command for upgrading build-plugin-icestark to the latest version to access new features like props passing from framework to micro-applications.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/blog/00-icestark-2-4-0.md#2025-04-08_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$npm i build-plugin-icestark@latest -D\n```\n\n----------------------------------------\n\nTITLE: Configuring Micro-Application with URL Entry in icestark\nDESCRIPTION: This snippet demonstrates how to configure a micro-application in icestark using the URL entry method, where specific JavaScript and CSS resource URLs are provided directly in an array. This approach works well when the entry resources are fixed and known.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/concept/child.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst apps = [{\n  url: ['https://example.com/a.js', 'https://example.com/a.css'],\n  activePath: '/foo'\n  // ...\n}]\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributors Table in HTML\nDESCRIPTION: This HTML snippet creates a table to showcase the contributors of the icestark project. It includes GitHub avatars, usernames, and links to their profiles.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/README.md#2025-04-08_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<table>\n<tr>\n    <td align=\"center\" style=\"word-wrap: break-word; width: 90.0; height: 90.0\">\n        <a href=https://github.com/maoxiaoke>\n            <img src=https://avatars.githubusercontent.com/u/13417006?v=4 width=\"60;\"  style=\"border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px\" alt=那吒/>\n            <br />\n            <sub style=\"font-size:14px\"><b>那吒</b></sub>\n        </a>\n    </td>\n    <td align=\"center\" style=\"word-wrap: break-word; width: 90.0; height: 90.0\">\n        <a href=https://github.com/ClarkXia>\n            <img src=https://avatars.githubusercontent.com/u/4219965?v=4 width=\"60;\"  style=\"border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px\" alt=ClarkXia/>\n            <br />\n            <sub style=\"font-size:14px\"><b>ClarkXia</b></sub>\n        </a>\n    </td>\n    <td align=\"center\" style=\"word-wrap: break-word; width: 90.0; height: 90.0\">\n        <a href=https://github.com/daysai>\n            <img src=https://avatars.githubusercontent.com/u/18555391?v=4 width=\"60;\"  style=\"border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px\" alt=daysai/>\n            <br />\n            <sub style=\"font-size:14px\"><b>daysai</b></sub>\n        </a>\n    </td>\n    <td align=\"center\" style=\"word-wrap: break-word; width: 90.0; height: 90.0\">\n        <a href=https://github.com/imsobear>\n            <img src=https://avatars.githubusercontent.com/u/2505411?v=4 width=\"60;\"  style=\"border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px\" alt=大果/>\n            <br />\n            <sub style=\"font-size:14px\"><b>大果</b></sub>\n        </a>\n    </td>\n    <td align=\"center\" style=\"word-wrap: break-word; width: 90.0; height: 90.0\">\n        <a href=https://github.com/temper357>\n            <img src=https://avatars.githubusercontent.com/u/5419233?v=4 width=\"60;\"  style=\"border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px\" alt=站稳/>\n            <br />\n            <sub style=\"font-size:14px\"><b>站稳</b></sub>\n        </a>\n    </td>\n    <td align=\"center\" style=\"word-wrap: break-word; width: 90.0; height: 90.0\">\n        <a href=https://github.com/alvinhui>\n            <img src=https://avatars.githubusercontent.com/u/4392234?v=4 width=\"60;\"  style=\"border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px\" alt=许文涛/>\n            <br />\n            <sub style=\"font-size:14px\"><b>许文涛</b></sub>\n        </a>\n    </td>\n    <td align=\"center\" style=\"word-wrap: break-word; width: 90.0; height: 90.0\">\n        <a href=https://github.com/skyFi>\n            <img src=https://avatars.githubusercontent.com/u/12740180?v=4 width=\"60;\"  style=\"border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px\" alt=Skylor.Min/>\n            <br />\n            <sub style=\"font-size:14px\"><b>Skylor.Min</b></sub>\n        </a>\n    </td>\n    <td align=\"center\" style=\"word-wrap: break-word; width: 90.0; height: 90.0\">\n        <a href=https://github.com/liqupan>\n            <img src=https://avatars.githubusercontent.com/u/21078925?v=4 width=\"60;\"  style=\"border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px\" alt=liqupan/>\n            <br />\n            <sub style=\"font-size:14px\"><b>liqupan</b></sub>\n        </a>\n    </td>\n</tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Configuring Micro-Application with HTML Content in icestark\nDESCRIPTION: This code demonstrates how to configure a micro-application in icestark by directly providing the HTML content string. This approach is useful when the HTML entry URL cannot be accessed via cross-origin requests, allowing you to manually fetch and provide the content.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/concept/child.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst apps = [{\n  entryContent: '<!DOCTYPE html><html><body><script src=\"\"></body></html>',\n  activePath: '/foo'\n  // ...\n}]\n```\n\n----------------------------------------\n\nTITLE: Dynamic Bundle URL Configuration for Local Development\nDESCRIPTION: Implementation of dynamic bundle URL configuration to facilitate local debugging of microapps within a production main application by detecting environment query parameters.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/faq.md#2025-04-08_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n// src/app.jsx\nimport React from 'react';\nimport { AppRouter, AppRoute } from '@ice/stark';\nimport urlParse from 'url-parse';\nimport BasicLayout from '@/layouts/BasicLayout';\n\nconst urlQuery = urlParse(location.href, true).query || {};\n\nfunction getBundleUrl(name, version) {\n  let jsUrl = `//g.alicdn.com/${name}/${version}/index.min.js`;\n  let cssUrl = `//g.alicdn.com/${name}/${version}/index.min.css`;\n\n  if (urlQuery.env === 'local') {\n    jsUrl = `//127.0.0.1:${urlQuery.port}/build/js/index.js`;\n    cssUrl = `//127.0.0.1:${urlQuery.port}/build/css/index.css`;\n  }\n  return [cssUrl, jsUrl];\n}\n\nconst apps = [{\n  title: '通用页面',\n  url: getBundleUrl('seller', '0.1.0'),\n  // ...\n}]\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for UMD Module Output\nDESCRIPTION: JavaScript webpack configuration to set up UMD module output for micro-modules. This ensures the module can be loaded in various environments including browser globals and module systems.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/micro-module.md#2025-04-08_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  output: {\n    // 设置模块导出规范为 umd\n    libraryTarget: 'umd',\n    // 可选，设置模块在 window 上暴露的名称\n    library: 'microApp',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for UMD Output in icestark Micro-Applications\nDESCRIPTION: Webpack configuration for exporting the micro-application as a UMD module, which is required for icestark integration. The library name must match the one set with setLibraryName.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/use-child/vue.md#2025-04-08_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  output: {\n    // 设置模块导出规范为 umd\n    libraryTarget: 'umd',\n    // 可选，设置模块在 window 上暴露的名称\n    library: 'microApp',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Runtime Dependencies for Micro-Modules\nDESCRIPTION: JavaScript React code showing how to declare runtime dependencies for micro-modules by specifying the required third-party libraries with their CDN URLs. This ensures dependencies are loaded before the module.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/micro-module.md#2025-04-08_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MicroModule } from '@ice/stark-module';\nimport ReactDOM from 'react-dom';\n\nconst App = () => {\n  const moduleInfo = {\n    name: 'moduleName',\n    url: 'https://localhost/module.js',\n    // 声明模块 moduleName 所需的三方依赖\n    runtime: [\n      {\n        id: \"react@16\",\n        url: [\n          \"https://g.alicdn.com/code/lib/react/16.14.0/umd/react.production.min.js\"\n        ]\n      },\n      {\n        id: \"react-dom@16\",\n        url: [\n          \"https://g.alicdn.com/code/lib/react-dom/16.14.0/umd/react-dom.production.min.js\"\n        ]\n      },\n    ]\n  }\n  return <MicroModule moduleInfo={moduleInfo} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Externalizing Dependencies in Webpack Configuration\nDESCRIPTION: JavaScript webpack configuration for externalizing React and ReactDOM dependencies from micro-module bundles to reduce size. This configuration specifies how to reference the externalized libraries in various module systems.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/micro-module.md#2025-04-08_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\nexport default {\n  ...\n  externals: {\n   react: {\n      root: 'React',\n      commonjs2: 'react',\n      commonjs: 'react',\n      amd: 'react',\n    },\n    'react-dom': {\n      root: 'ReactDOM',\n      commonjs2: 'react-dom',\n      commonjs: 'react-dom',\n      amd: 'react-dom',\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Module Registration Merging in JavaScript\nDESCRIPTION: Illustrates how module registration behaves when multiple modules are registered with the same name. The last registered module with a given name takes precedence.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/packages/icestark-module/README.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerModule, registerModules, getModules } from '@ice/stark-module';\n\nregisterModules([\n  {\n    url: 'https://localhost/module-a.js',\n    name: 'module-a',\n  },\n  {\n    url: 'https://localhost/module-b.js',\n    name: 'module-a',\n  },\n]);\n\nconst modules = getModules();\n/** the modules will be:\n[{\n  url: 'https://localhost/module-b.js',\n  name: 'module-a',\n}]\n*/\n\nregisterModule({\n  url: 'https://localhost/module-c.js',\n  name: 'module-a',\n});\n\nconst modules = getModules();\n/** the modules will be:\n[{\n  url: 'https://localhost/module-c.js',\n  name: 'module-a',\n}]\n*/\n```\n\n----------------------------------------\n\nTITLE: Configuring baseURL in icejs Application\nDESCRIPTION: Configuration for setting the baseURL in an icejs application to enable microapps to access their own API endpoints during development within a main application.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/faq.md#2025-04-08_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { runApp } from 'ice';\n\nconst appConfig = {\n  ...\n  request: {\n    baseURL: '//127.0.0.1:4444',\n  }\n};\n\nrunApp(appConfig);\n```\n\n----------------------------------------\n\nTITLE: Emitting Events from Micro Application with @ice/stark-data\nDESCRIPTION: Example of using event.emit() to trigger events from a micro application. The code shows how to notify the main application to refresh message display information.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/advanced/communication.md#2025-04-08_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// 微应用\nimport { event } from '@ice/stark-data';\n\nevent.emit('freshMessage');\n```\n\n----------------------------------------\n\nTITLE: Importing Functions from @ice/stark-module/lib for Non-React Users\nDESCRIPTION: Shows how to import mountModule and unmountModule functions directly from the lib directory for non-React users, such as those using Vue or Angular.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/api/stark-module.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mountModule, unmountModule } from '@ice/stark-module/lib/modules';\n```\n\n----------------------------------------\n\nTITLE: Configuring ActivePath Examples\nDESCRIPTION: Demonstrates various ways to configure the activePath property for micro-applications.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/api/ice-stark.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// 1. 匹配单路由\n{\n  activePath: '/seller', // 路由匹配 /seller 时激活微应用\n}\n\n// 2. 匹配多路由\n{\n  activePath: ['/user', '/admin'], // 路由匹配 /user 或者 /admin 时激活\n}\n\n// 3. 添加匹配限制条件\n{\n  // 路由匹配精准配 /user 或者 匹配到 /admin 时激活\n  activePath: [{ path: '/user', exact: true }, {'/admin', exact: false }],\n}\n\n// 4. 自定义匹配逻辑\n{\n  activePath: (url) => {\n    return url.includes('/user');\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ActivePath Types in TypeScript\nDESCRIPTION: Specifies the TypeScript types for ActivePath, which is used to define activation rules for micro-applications.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/api/ice-stark.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PathData {\n  value: string;\n  exact?: boolean;\n  strict?: boolean;\n  sensitive?: boolean;\n  hashType?: boolean | HashType;\n}\n\ntype MixedPathData = Array<string | PathData>;\n\ntype ActivePath = string | PathData | string[] | PathData[] | MixedPathData | (url: string) => boolean;\n```\n\n----------------------------------------\n\nTITLE: Importing @ice/stark Functions in JavaScript\nDESCRIPTION: Shows how to import core functions from @ice/stark in a JavaScript application.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/api/ice-stark.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { start, registerMicroApps } from '@ice/stark';\n\n// or\nimport * as icestark from '@ice/stark';\n```\n\n----------------------------------------\n\nTITLE: Importing @ice/stark Functions for Non-React Frameworks\nDESCRIPTION: Demonstrates how to import specific functions from @ice/stark for use in non-React frameworks like Vue or Angular.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/api/ice-stark.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// 对于使用 Vue、Angular 的用户\nimport { start } from '@ice/stark/lib/start';\nimport {\n  registerMicroApps,\n  removeMicroApps,\n  createMicroApp,\n  unmountMicroApp,\n  unloadMicroApp,\n} from '@ice/stark/lib/apps';\n```\n\n----------------------------------------\n\nTITLE: Library Name Configuration\nDESCRIPTION: Demonstrates how to configure the UMD global variable name for micro-applications.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/api/ice-stark-app.md#2025-04-08_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport ReactDOM from 'react-dom';\nimport { isInIcestark, setLibraryName } from '@ice/stark-app';\nimport App from './App';\n\nsetLibraryName('microApp');\n\nexport function mount(props) {\n  const { container, customProps } = props;\n  ReactDOM.render(<App {...customProps} />, container);\n}\n\nexport function unmount(props) {\n  const { container } = props;\n  ReactDOM.unmountComponentAtNode(container);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an icestark Micro-Module with Shell Commands\nDESCRIPTION: Shell commands to create a new micro-module project structure using iceworks CLI. This includes creating a directory, initializing with an icestark module template, and installing dependencies.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/micro-module.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# 创建文件夹\n$ mkdir micro-module & cd micro-module\n\n# 初始化\n$ iceworks init component @icedesign/template-icestark-module\n\n# 安装依赖\n$ npm install\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Configuring External Dependencies for Micro-Modules\nDESCRIPTION: JSON configuration for externalizing third-party dependencies like React to optimize bundle size. This specifies global variable names and CDN URLs for external libraries.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/micro-module.md#2025-04-08_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    ...\n    [\"build-plugin-stark-module\", {\n      \"moduleExternals\": {\n        \"react\": {\n          \"root\": \"React\",\n          \"url\": \"https://g.alicdn.com/code/lib/react/16.14.0/umd/react.production.min.js\",\n        },\n        \"react-dom\": {\n          \"root\": \"ReactDOM\",\n          \"url\": \"https://g.alicdn.com/code/lib/react-dom/16.14.0/umd/react-dom.production.min.js\"\n        }\n      }\n    }],\n  ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Micro-Module Entries\nDESCRIPTION: JSON configuration for specifying multiple micro-module entry points in a single project. This allows building multiple micro-modules from different source files into separate bundles.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/micro-module.md#2025-04-08_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n// build.json\n{\n  \"plugins\": [\n    [\"build-plugin-stark-module\", {\n      \"modules\": {\n        \"branch-detail\": \"./src/branch-detail/index.tsx\",\n        \"edit-info\": \"./src/edit-info/index.tsx\"\n      }\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Filename Strategy for Micro-Module Builds\nDESCRIPTION: JSON configuration for customizing the output file structure of micro-module builds. This allows organizing output files into specific directory structures with custom naming patterns.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/micro-module.md#2025-04-08_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    ...\n    [\"build-plugin-stark-module\", {\n      \"outputDir\": \"build\",\n      \"filenameStrategy\": \"modules/[name]\"\n    }],\n  ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite Plugin for icestark Integration\nDESCRIPTION: This snippet demonstrates how to configure the vite-plugin-index-html plugin in a Vite project to enable easier integration with icestark. It specifies the entry file and ensures the export of lifecycle functions.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/blog/03-icestark-2-7-0.md#2025-04-08_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport vue from '@vitejs/plugin-vue';\n+ import htmlPlugin from 'vite-plugin-index-html';\nexport default defineConfig({\n  plugins: [\n    vue(),\n+   htmlPlugin({\n+     input: './src/main.ts', // 指定确定的入口文件\n+     preserveEntrySignatures: \"exports-only\", // 确保入口文件导出生命周期函数\n+   })\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Using AppLink with HashRouter for Inter-Application Navigation\nDESCRIPTION: Example of using AppLink and appHistory for navigation between applications in a hash-based routing system within an icestark micro-frontend.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/faq.md#2025-04-08_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { AppLink, appHistory } from '@ice/stark-app';\n\n// 示例1\nconst navItem = <AppLink to=\"/seller\" hashType>{item.name}</AppLink>);\n\n// 示例2\nappHistory.push('/seller', true);\n```\n\n----------------------------------------\n\nTITLE: Using vite-plugin-index-html for icestark Integration\nDESCRIPTION: This configuration snippet shows how to use the vite-plugin-index-html plugin to generate an HTML file for the Vite application, allowing it to run independently while still integrating with icestark. It specifies the entry point and ensures lifecycle function exports.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/use-child/others.md#2025-04-08_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport vue from '@vitejs/plugin-vue';\n+ import htmlPlugin from 'vite-plugin-index-html';\n\nexport default defineConfig({\n  plugins: [\n    vue(),\n+   htmlPlugin({\n+     input: './src/main.ts', // 指定确定的入口文件\n+     preserveEntrySignatures: \"exports-only\", // 确保入口文件导出生命周期函数\n+   })\n  ],\n\n})\n```\n\n----------------------------------------\n\nTITLE: React Main Application Entry Point\nDESCRIPTION: Example of rendering the main React application using ReactDOM.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/use-layout/react.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// src/index.jsx\nimport ReactDOM from 'react-dom';\nimport React from 'react';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n```\n\n----------------------------------------\n\nTITLE: Using activePath Function in AppConfig\nDESCRIPTION: Example of using the activePath function in AppConfig to define custom route matching logic. This shows how to activate an application when the URL includes a specific path.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/blog/01-icestark-2-5-0.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: 'app',\n  activePath: (url) => {\n    return url.includes('/seller');  // 当路由匹配上 /seller，则激活应用\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Directory for Micro-Module Build\nDESCRIPTION: JSON configuration that specifies an output directory for the UMD build artifacts. This allows customizing where the bundled micro-module files will be generated.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/micro-module.md#2025-04-08_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n// build.json\n{\n  \"plugins\": [\n    [\"build-plugin-stark-module\", {\n      \"outputDir\": 'build' // umd 构建结果打包至项目 build 目录\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Basename Manually with createMicroApp and setBasename\nDESCRIPTION: Example of manually setting the basename for a micro-application using createMicroApp and setBasename in the older icestark version.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/blog/01-icestark-2-5-0.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMicroApp } from '@ice/stark';\nimport { setBasename } from '@ice/stark-app';\n\nsetBasename('/seller');\n\ncreateMicroApp({\n  name: 'app',\n  activePath: '/seller',\n  url: ['/js/index.js'],\n  container: ref.current;\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Functions from @ice/stark-module in JavaScript\nDESCRIPTION: Demonstrates how to import MicroModule and registerModule functions from the @ice/stark-module package in a JavaScript environment.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/api/stark-module.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MicroModule, registerModule } from '@ice/stark-module';\n```\n\n----------------------------------------\n\nTITLE: Implementing Lifecycle Methods for Angular Micro-applications\nDESCRIPTION: Demonstrates how to define mount and unmount lifecycle methods for Angular 5.x and above micro-applications using bootstrapModule.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/blog/02-icestark-2-6-0.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NgModuleRef } from '@angular/core';\n\nlet app: void | NgModuleRef<AppModule>;\n\nif (!isInIcestark()) {\n  platformBrowserDynamic().bootstrapModule(AppModule)\n    .catch(err => console.error(err));\n}\n\nexport async function mount () {\n  app = await platformBrowserDynamic().bootstrapModule(AppModule)\n    .catch(err => console.error(err));\n}\n\nexport function unmount () {\n  // @ts-ignore\n  app.destroy();\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing framework props in ice.js micro-applications\nDESCRIPTION: Shows how ice.js users can access props passed from the framework application through the page component's props in a micro-application.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/blog/00-icestark-2-4-0.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst Detail = ({ props }) => {\n  const { frameworkProps: { name } } = props;\n  return <div>{name}</div>;\n}\n\nexport default Detail;\n```\n\n----------------------------------------\n\nTITLE: Clearing Registered Modules in JavaScript\nDESCRIPTION: Demonstrates how to clear all registered modules and their content cache using the clearModules function from @ice/stark-module.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/packages/icestark-module/README.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerModules, clearModules } from '@ice/stark-module';\n\nregisterModules([\n  {\n    url: 'https://localhost/module-a.js',\n    name: 'module-a',\n  },\n  {\n    url: 'https://localhost/module-b.js',\n    name: 'module-b',\n  },\n]);\n\n// clear all modules information and content cache.\nclearModules();\n```\n\n----------------------------------------\n\nTITLE: Micro-Module Directory Structure\nDESCRIPTION: A detailed representation of the micro-module project directory structure, showing key folders and configuration files including source code, build artifacts, and project configuration files.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/micro-module.md#2025-04-08_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n.\n├── demo                  # 模块 demo\n│   └── usage.md\n├── src                   # 模块源码\n│   ├── index.scss\n│   └── index.tsx\n├── lib/                  # 构建产物，编译为 ES5 的代码\n├── es/                   # 构建产物，编译为 es module 规范的代码\n├── dist/                 # 构建产物，编译为 umd 规范的代码\n├── jest.config.js\n├── build.json            # 构建配置\n├── README.md\n├── abc.json\n├── package.json\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Micro-Module Build with Plugins\nDESCRIPTION: JSON configuration for build.json that includes plugins for component building and micro-module functionality. This is the basic configuration needed for a micro-module project.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/micro-module.md#2025-04-08_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n// build.json\n{\n  \"plugins\": [\n    \"build-plugin-component\",\n    [\"build-plugin-stark-module\", {\n      // ...options\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration for IE Browser Compatibility\nDESCRIPTION: Babel configuration for ensuring compatibility with Internet Explorer 11 by adding polyfills for modern JavaScript features like Symbol and Promise.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/faq.md#2025-04-08_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// .babelrc 或 babel-loader 配置\n{\n  \"presets\": [\n    [\n      \"@babel/preset-env\",\n      {\n        \"useBuiltIns\": \"entry\",\n        \"targets\": {\n          \"ie\": \"11\"\n        },\n        \"modules\": false,\n        \"corejs\": 3\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing IceStark Applications using NPM\nDESCRIPTION: Commands for initializing both main and sub-applications using Ice scaffolding tools.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/packages/icestark/README.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Based on React\n$ npm init ice icestark-layout @icedesign/stark-layout-scaffold\n# Based on Vue\n$ npm init ice icestark-layout @vue-materials/icestark-layout-app\n\n$ cd icestark-layout\n$ npm install\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Installing icestark Dependencies\nDESCRIPTION: Command to install the core icestark package as a dependency\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/use-layout/vue.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i --save @ice/stark\n```\n\n----------------------------------------\n\nTITLE: Installing @ice/stark-app Dependency for Micro-applications\nDESCRIPTION: Command for installing the @ice/stark-app dependency, which is required when upgrading micro-applications from icestark 0.x to 1.x.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/upgrade.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @ice/stark-app --save\n```\n\n----------------------------------------\n\nTITLE: Removing @ice/stark Dependency for Micro-applications\nDESCRIPTION: Command for removing the @ice/stark dependency when upgrading micro-applications from icestark 0.x to 1.x, as micro-application APIs were moved to the separate @ice/stark-app package.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/upgrade.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm rm @ice/stark --save\n```\n\n----------------------------------------\n\nTITLE: Basic IceStark Import Example\nDESCRIPTION: Demonstrates how to import functions from @ice/stark-app package.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/api/ice-stark-app.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { isInIcestark } from '@ice/stark-app';\n```\n\n----------------------------------------\n\nTITLE: Alternative Import Pattern\nDESCRIPTION: Shows how to import individual functions directly from lib directory for non-React users.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/api/ice-stark-app.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport isInIcestark from '@ice/stark-app/lib/isInIcestark';\n```\n\n----------------------------------------\n\nTITLE: Updating tsconfig.json for ES Modules Support\nDESCRIPTION: Shows the necessary changes in the tsconfig.json file to support ES modules and dynamic imports in the icestark project.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/blog/02-icestark-2-6-0.md#2025-04-08_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n      \"target\": \"es5\",\n-      \"module\": \"commonjs\",\n+      \"module\": \"esnext\",\n+      \"moduleResolution\": \"Node\",\n+      \"allowSyntheticDefaultImports\": true,\n+      \"esModuleInterop\": true\n      ...\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ice.js Plugin for ES Modules Support\nDESCRIPTION: Illustrates how to update the build.json configuration in ice.js applications to enable Vite mode and ES modules support using the build-plugin-icestark.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/blog/02-icestark-2-6-0.md#2025-04-08_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n+ \"vite\": true,\n\"plugins\": [\n  [\"build-plugin-icestark\", {\n+    \"type\": \"child\"\n-    \"umd\": true\n  }],\n]\n```\n\n----------------------------------------\n\nTITLE: Installing IceStark Data Package\nDESCRIPTION: Command to install the @ice/stark-data package using npm package manager.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/packages/icestark-data/README.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @ice/stark-data --save\n```\n\n----------------------------------------\n\nTITLE: Adding Fetch Polyfill for IE Support\nDESCRIPTION: Example of adding whatwg-fetch polyfill to support the fetch API in Internet Explorer, which is required when using icestark with loadScriptMode set to 'fetch'.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/faq.md#2025-04-08_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n// 入口文件\nimport \"whatwg-fetch\"; // 确保在 icestark 之前引入\n\nimport { AppRouter, AppRoute } from '@ice/stark';\n\nconsole.log(window.fetch);\n```\n\n----------------------------------------\n\nTITLE: Multiple Micro-Module Output Structure\nDESCRIPTION: Text representation of the output directory structure generated when building multiple micro-modules. Shows how each module gets its own directory with JavaScript and CSS files.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/micro-module.md#2025-04-08_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n.\n├── branch-detail\n│   ├── index.css\n│   └── index.js\n├── edit-info\n\t  ├── index.css\n\t  └── index.js\n```\n\n----------------------------------------\n\nTITLE: Demonstrating the eval function binding issue in JavaScript\nDESCRIPTION: Illustrates the issue with eval function when bound to a different context, which was fixed in the latest version of icestark's sandbox implementation.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/blog/00-icestark-2-4-0.md#2025-04-08_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction foo (obj) {\n  eval.bind(window)('console.log(obj)');\n}\n\nboo({a: 1});\n// Uncaught ReferenceError: obj is not defined\n```\n\n----------------------------------------\n\nTITLE: Falsy value capture in icestark sandbox\nDESCRIPTION: Shows how falsy values were not properly captured in previous versions of icestark's sandbox, which has been fixed in the latest release.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/blog/00-icestark-2-4-0.md#2025-04-08_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// 在沙箱中执行\nwindow.a = false;\n\nconsole.log(a);\n// undefined\n```\n\n----------------------------------------\n\nTITLE: Using ICE Sandbox for Script Execution\nDESCRIPTION: Example showing how to create a sandbox instance, execute scripts within it, and clean up side effects. Demonstrates core sandbox functionality including script execution and cleanup.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/packages/sandbox/README.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Sandbox from '@ice/sandbox';\n\nconst sandbox = new Sandbox();\n\n// execute scripts in sandbox\nsandbox.execScriptInSandbox('window.a = 1;console.log(window.a);');\n\n// clear side effects added by sandbox, such as addEventListener, setInterval\nsandbox.clear();\n```\n\n----------------------------------------\n\nTITLE: Installing Vue icestark Layout Application\nDESCRIPTION: Commands to create and initialize a new icestark layout application using the official Vue template\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/docs/guide/use-layout/vue.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init ice icestark-layout @vue-materials/icestark-layout-app\n\n$ cd icestark-layout\n$ npm install\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Installing icestark Website Dependencies\nDESCRIPTION: Command to install all required dependencies for the icestark website project using Yarn package manager.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/README.md#2025-04-08_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Starting icestark Website Development Server\nDESCRIPTION: Command to start the local development server for the icestark website. Opens a browser window and supports live reloading of changes.\nSOURCE: https://github.com/ice-lab/icestark/blob/master/website/README.md#2025-04-08_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Installing ICE Sandbox Package\nDESCRIPTION: Command to install @ice/sandbox package using npm package manager\nSOURCE: https://github.com/ice-lab/icestark/blob/master/packages/sandbox/README.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @ice/sandbox --save\n```"
  }
]