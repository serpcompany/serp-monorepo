[
  {
    "owner": "benoitc",
    "repo": "gunicorn",
    "content": "TITLE: Installing Gunicorn via pip (Python)\nDESCRIPTION: Command to install the latest released version of Gunicorn using pip. Requires Python 3.x >= 3.7.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/install.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install gunicorn\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx as a Proxy for Gunicorn in nginx.conf\nDESCRIPTION: This snippet shows how to configure Nginx to proxy requests to a Gunicorn socket. It sets up a server block listening on port 8000 and forwards requests to a Unix socket.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/deploy.rst#2025-04-22_snippet_15\n\nLANGUAGE: nginx\nCODE:\n```\nuser www-data;\n...\nhttp {\n    server {\n        listen          8000;\n        server_name     127.0.0.1;\n        location / {\n            proxy_pass http://unix:/run/gunicorn.sock;\n        }\n    }\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Running Gunicorn with trusted IP forwarding\nDESCRIPTION: Command to run Gunicorn with specific trusted IPs for X-Forwarded headers. This is necessary when Gunicorn runs behind a proxy on a different host to properly handle client IP addresses.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/deploy.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ gunicorn -w 3 --forwarded-allow-ips=\"10.170.3.217,10.170.3.220\" test:app\n```\n\n----------------------------------------\n\nTITLE: Supervisor configuration for Gunicorn\nDESCRIPTION: Supervisor configuration file for monitoring and controlling Gunicorn processes. Supervisor will automatically start Gunicorn at boot and restart it if it crashes.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/deploy.rst#2025-04-22_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\n[program:gunicorn]\ncommand=/path/to/gunicorn main:application -c /path/to/gunicorn.conf.py\ndirectory=/path/to/project\nuser=nobody\nautostart=true\nautorestart=true\nredirect_stderr=true\n```\n\n----------------------------------------\n\nTITLE: Checking Resolved Gunicorn Configuration via Command Line\nDESCRIPTION: Commands to print and check the resolved configuration for a Gunicorn application. The --print-config flag displays the final configuration and --check-config validates the configuration before launching.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/configure.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gunicorn --print-config APP_MODULE\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ gunicorn --check-config APP_MODULE\n```\n\n----------------------------------------\n\nTITLE: Gunicorn Configuration File Example in Python\nDESCRIPTION: Example of a Python-based Gunicorn configuration file that sets the binding address and calculates the optimal number of workers based on CPU count. Configuration files must have a Python extension and be valid Python code.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/configure.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport multiprocessing\n\nbind = \"127.0.0.1:8000\"\nworkers = multiprocessing.cpu_count() * 2 + 1\n```\n\n----------------------------------------\n\nTITLE: Setting up a Python virtualenv for Gunicorn\nDESCRIPTION: Commands to create and configure a Python virtual environment for a Gunicorn application. This isolates the application dependencies and provides dedicated Gunicorn scripts.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/deploy.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir ~/venvs/\n$ virtualenv ~/venvs/webapp\n$ source ~/venvs/webapp/bin/activate\n$ pip install gunicorn\n$ deactivate\n```\n\n----------------------------------------\n\nTITLE: Runit service definition for Gunicorn\nDESCRIPTION: Runit service script for monitoring and automatically restarting Gunicorn. This script defines how Runit should start and manage the Gunicorn process.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/deploy.rst#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\n\nGUNICORN=/usr/local/bin/gunicorn\nROOT=/path/to/project\nPID=/var/run/gunicorn.pid\n\nAPP=main:application\n\nif [ -f $PID ]; then rm $PID; fi\n\ncd $ROOT\nexec $GUNICORN -c $ROOT/gunicorn.conf.py --pid=$PID $APP\n```\n\n----------------------------------------\n\nTITLE: Running Gunicorn with a WSGI Application\nDESCRIPTION: Command to run Gunicorn with a specified number of workers for a WSGI application. This example shows how to start the server with the 'test:app' application using two worker processes.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/run.rst#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ gunicorn --workers=2 test:app\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Log Format in Gunicorn\nDESCRIPTION: Example of a custom access log format for Gunicorn that includes the x-forwarded-for header. This format is used in the access_log_format setting to customize log output.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/settings.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n%({x-forwarded-for}i)s\n```\n\n----------------------------------------\n\nTITLE: Configuring Gunicorn with StatsD Instrumentation\nDESCRIPTION: Command line example showing how to configure Gunicorn to send metrics to a StatsD server. It specifies the StatsD host location and a prefix for service identification.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/instrumentation.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gunicorn --statsd-host=localhost:8125 --statsd-prefix=service.app ...\n```\n\n----------------------------------------\n\nTITLE: Setting Gunicorn Parameters Using Environment Variables\nDESCRIPTION: Example showing how to specify Gunicorn command line arguments using the GUNICORN_CMD_ARGS environment variable to set bind address and number of workers.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/settings.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ GUNICORN_CMD_ARGS=\"--bind=127.0.0.1 --workers=3\" gunicorn app:app\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration in Gunicorn\nDESCRIPTION: New environment variable GUNICORN_CMD_ARGS added for passing settings, particularly useful in containerized environments.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/2017-news.rst#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nGUNICORN_CMD_ARGS\n```\n\n----------------------------------------\n\nTITLE: Running a test app with Gunicorn in Python\nDESCRIPTION: This example shows how to run a test app using Gunicorn. It changes to the examples directory and runs Gunicorn with 2 workers, using the 'test:app' module.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/README.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd examples\n$ gunicorn --workers=2 test:app\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple WSGI Application in Python\nDESCRIPTION: A minimal WSGI application that returns 'Hello, World!' with proper HTTP headers. This example demonstrates the basic structure of a WSGI callable that can be used with Gunicorn.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/run.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef app(environ, start_response):\n    \"\"\"Simplest possible application object\"\"\"\n    data = b'Hello, World!\\n'\n    status = '200 OK'\n    response_headers = [\n        ('Content-type', 'text/plain'),\n        ('Content-Length', str(len(data)))\n    ]\n    start_response(status, response_headers)\n    return iter([data])\n```\n\n----------------------------------------\n\nTITLE: Running Gunicorn with an Existing WSGI App from Command Line\nDESCRIPTION: Command examples for running a WSGI-compatible app using gunicorn.app.wsgiapp with custom parameters. This allows direct usage of Gunicorn from Python, specifying a WSGI application at runtime.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/custom.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Custom parameters\n$ python gunicorn.app.wsgiapp exampleapi:app --bind=0.0.0.0:8081 --workers=4\n# Using a config file\n$ python gunicorn.app.wsgiapp exampleapi:app -c config.py\n```\n\n----------------------------------------\n\nTITLE: Systemd socket unit for Gunicorn\nDESCRIPTION: Systemd socket unit file that creates a Unix socket for Gunicorn. This configuration allows systemd to listen on a socket and automatically start Gunicorn when traffic arrives.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/deploy.rst#2025-04-22_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\n[Unit]\nDescription=gunicorn socket\n\n[Socket]\nListenStream=/run/gunicorn.sock\n# Our service won't need permissions for the socket, since it\n# inherits the file descriptor by socket activation.\n# Only the nginx daemon will need access to the socket:\nSocketUser=www-data\nSocketGroup=www-data\n# Once the user/group is correct, restrict the permissions:\nSocketMode=0660\n\n[Install]\nWantedBy=sockets.target\n```\n\n----------------------------------------\n\nTITLE: Implementing an Application Factory Pattern in Python\nDESCRIPTION: Example of the application factory pattern where a function is called to create the WSGI application. This pattern allows for application configuration during initialization.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/run.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef create_app():\n    app = FrameworkApp()\n    ...\n    return app\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx to ignore client aborts for health checks\nDESCRIPTION: Nginx configuration to ignore aborted client connections, which is useful for handling health checks from load balancers that may close connections without waiting for responses.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/deploy.rst#2025-04-22_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nproxy_ignore_client_abort on;\n```\n\n----------------------------------------\n\nTITLE: Enabling and starting Systemd socket for Gunicorn\nDESCRIPTION: Command to enable and start the Systemd socket for Gunicorn. This activates the socket and configures it to start automatically at boot time.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/deploy.rst#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl enable --now gunicorn.socket\n```\n\n----------------------------------------\n\nTITLE: Basic usage of Gunicorn in Python\nDESCRIPTION: This command demonstrates the basic usage of Gunicorn. It runs Gunicorn with specified options and an application module. APP_MODULE should be in the format $(MODULE_NAME):$(VARIABLE_NAME).\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/README.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gunicorn [OPTIONS] APP_MODULE\n```\n\n----------------------------------------\n\nTITLE: Testing Gunicorn Systemd socket connection\nDESCRIPTION: Command to test if the Nginx daemon can connect to the Gunicorn Unix socket. This uses curl to send an HTTP request to the socket, which should automatically start the Gunicorn service.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/deploy.rst#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u www-data curl --unix-socket /run/gunicorn.sock http\n```\n\n----------------------------------------\n\nTITLE: Logging Output for Gunicorn Configuration Reload\nDESCRIPTION: Example log output showing the process of reloading Gunicorn configuration using HUP signal, demonstrating worker process cycling and PID assignments.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/signals.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n2013-06-29 06:26:55 [20682] [INFO] Handling signal: hup\n2013-06-29 06:26:55 [20682] [INFO] Hang up: Master\n2013-06-29 06:26:55 [20703] [INFO] Booting worker with pid: 20703\n2013-06-29 06:26:55 [20702] [INFO] Booting worker with pid: 20702\n2013-06-29 06:26:55 [20688] [INFO] Worker exiting (pid: 20688)\n2013-06-29 06:26:55 [20687] [INFO] Worker exiting (pid: 20687)\n2013-06-29 06:26:55 [20689] [INFO] Worker exiting (pid: 20689)\n2013-06-29 06:26:55 [20704] [INFO] Booting worker with pid: 20704\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Bind Addresses in Gunicorn\nDESCRIPTION: Example demonstrating how to bind a Gunicorn application to multiple addresses simultaneously, including both IPv4 and IPv6 interfaces on localhost.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/settings.rst#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n$ gunicorn -b 127.0.0.1:8000 -b [::1]:8000 test:app\n```\n\n----------------------------------------\n\nTITLE: Decreasing Worker Count with TTOU Signal\nDESCRIPTION: Dynamically decreases the number of Gunicorn worker processes by one by sending the TTOU signal to the master process.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/faq.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ kill -TTOU $masterpid\n```\n\n----------------------------------------\n\nTITLE: Increasing Worker Count with TTIN Signal\nDESCRIPTION: Dynamically increases the number of Gunicorn worker processes by one by sending the TTIN signal to the master process.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/faq.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ kill -TTIN $masterpid\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Gunicorn Configuration File\nDESCRIPTION: Example showing how to set environment variables in the Gunicorn configuration file using the raw_env parameter. This allows you to specify environment variables that will be available to your application.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/settings.rst#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nraw_env = [\"FOO=1\"]\n```\n\n----------------------------------------\n\nTITLE: Rotating Gunicorn Logs with USR1 Signal\nDESCRIPTION: This command sends the USR1 signal to the Gunicorn process to rotate logs when using the logrotate utility.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/deploy.rst#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nkill -USR1 $(cat /var/run/gunicorn.pid)\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL in Gunicorn\nDESCRIPTION: This code shows how to configure SSL options in Gunicorn for secure connections.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/2014-news.rst#2025-04-22_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\ngunicorn --certfile=/path/to/cert.pem --keyfile=/path/to/key.pem myapp:app\n```\n\n----------------------------------------\n\nTITLE: Customizing SSL Context in Gunicorn\nDESCRIPTION: Example function that customizes the SSL context for Gunicorn by setting the minimum TLS version to 1.3. This function accepts the configuration and a factory function to create the default context, then modifies and returns the context.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/settings.rst#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndef ssl_context(conf, default_ssl_context_factory):\n    import ssl\n    context = default_ssl_context_factory()\n    context.minimum_version = ssl.TLSVersion.TLSv1_3\n    return context\n```\n\n----------------------------------------\n\nTITLE: Installing Async Worker Dependencies (Python)\nDESCRIPTION: Commands to install Eventlet, Gevent, and their dependencies for use with Gunicorn's async workers. Includes installation of greenlet and options for using extras.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/install.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install greenlet            # Required for both\n$ pip install eventlet            # For eventlet workers\n$ pip install gunicorn[eventlet]  # Or, using extra\n$ pip install gevent              # For gevent workers\n$ pip install gunicorn[gevent]    # Or, using extra\n```\n\n----------------------------------------\n\nTITLE: Starting Nginx Service with Systemd\nDESCRIPTION: This command starts the Nginx service using systemd.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/deploy.rst#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl start nginx\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Hooks in Custom Gunicorn Application\nDESCRIPTION: Example of how to implement a pre_fork server hook in a custom Gunicorn application. The pre_fork function is passed as a configuration option when initializing the application, allowing for custom logic to be executed before a worker process is forked.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/custom.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef pre_fork(server, worker):\n    print(f\"pre-fork server {server} worker {worker}\", file=sys.stderr)\n\n# ...\nif __name__ == '__main__':\n    options = {\n        'bind': '%s:%s' % ('127.0.0.1', '8080'),\n        'workers': number_of_workers(),\n        'pre_fork': pre_fork,\n    }\n```\n\n----------------------------------------\n\nTITLE: Running Gunicorn with Environment Variables from Command Line\nDESCRIPTION: Command line example showing how to start Gunicorn with a specific environment variable. This uses the -e or --env flag to set FOO=1 in the application environment.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/settings.rst#2025-04-22_snippet_20\n\nLANGUAGE: console\nCODE:\n```\n$ gunicorn -b 127.0.0.1:8000 --env FOO=1 test:app\n```\n\n----------------------------------------\n\nTITLE: Configuring Gunicorn in Paster Application INI File\nDESCRIPTION: Example of configuring a Paster application to use Gunicorn as the server through an INI file. Specifies host, port, number of workers, and process name settings.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/configure.rst#2025-04-22_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[server:main]\nuse = egg:gunicorn#main\nhost = 192.168.0.1\nport = 80\nworkers = 2\nproc_name = brim\n```\n\n----------------------------------------\n\nTITLE: Adding X-Forwarded-Proto header in Nginx for HTTPS detection\nDESCRIPTION: Nginx configuration to pass protocol information to Gunicorn, which helps web frameworks generate proper URLs. This prevents mixed content warnings when an application mistakenly generates HTTP URLs in HTTPS responses.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/deploy.rst#2025-04-22_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\nproxy_set_header X-Forwarded-Proto $scheme;\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Listener Threads in Gunicorn\nDESCRIPTION: This code demonstrates how to configure multiple threads to listen on connections using the new gthread worker.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/2014-news.rst#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ngunicorn --worker-class gthread --threads 4 myapp:app\n```\n\n----------------------------------------\n\nTITLE: Setting SSL Version in Gunicorn Configuration\nDESCRIPTION: Change in default SSL version from PROTOCOL_TLSv1 to PROTOCOL_SSLv23 for improved security and compatibility.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/2017-news.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nssl.PROTOCOL_TLSv1 -> ssl.PROTOCOL_SSLv23\n```\n\n----------------------------------------\n\nTITLE: Configuring Paste Deployment for Gunicorn\nDESCRIPTION: INI configuration for using Gunicorn with Paste Deployment frameworks like Pyramid or TurboGears. This setup defines Gunicorn as the WSGI server with host, port, and worker settings.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/run.rst#2025-04-22_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[server:main]\nuse = egg:gunicorn#main\nhost = 127.0.0.1\nport = 8080\nworkers = 3\n```\n\n----------------------------------------\n\nTITLE: Installing Gunicorn on Ubuntu (Bash)\nDESCRIPTION: Commands to install Gunicorn on Ubuntu 20.04 LTS (Focal Fossa) or later using apt-get.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/install.rst#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt-get update\n$ sudo apt-get install gunicorn\n```\n\n----------------------------------------\n\nTITLE: Configuring Gaffer process monitor for Gunicorn\nDESCRIPTION: Gaffer configuration for monitoring a Gunicorn process. Gaffer is a process management tool that can be used to supervise Gunicorn instances.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/deploy.rst#2025-04-22_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n[process:gunicorn]\ncmd = gunicorn -w 3 test:app\ncwd = /path/to/project\n```\n\n----------------------------------------\n\nTITLE: Running Gunicorn with an Application Factory\nDESCRIPTION: Command to run Gunicorn with an application factory function that creates the WSGI application. This approach allows for dynamic application creation at startup time.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/run.rst#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ gunicorn --workers=2 'test:create_app()'\n```\n\n----------------------------------------\n\nTITLE: Configuring StatSD Logging in Gunicorn\nDESCRIPTION: This code snippet shows how to configure StatSD logging in Gunicorn to send timing metrics in milliseconds.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/2014-news.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nstatsd_logger.send_statsd_timing_metrics(milliseconds=True)\n```\n\n----------------------------------------\n\nTITLE: Initializing WSGI Application in Gunicorn\nDESCRIPTION: This code shows the initialization of a WSGI application in Gunicorn, including argument validation.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/2014-news.rst#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nclass WSGIApplication(BaseApplication):\n    def init(self, parser, opts, args):\n        # Argument validation\n        if len(args) != 1:\n            parser.error(\"No application module specified.\")\n```\n\n----------------------------------------\n\nTITLE: Systemd service unit for Gunicorn\nDESCRIPTION: Systemd service unit file for managing Gunicorn. This configuration defines how systemd should start, stop, and monitor the Gunicorn process, including user permissions and resource controls.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/deploy.rst#2025-04-22_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\n[Unit]\nDescription=gunicorn daemon\nRequires=gunicorn.socket\nAfter=network.target\n\n[Service]\n# gunicorn can let systemd know when it is ready\nType=notify\nNotifyAccess=main\n# the specific user that our service will run as\nUser=someuser\nGroup=someuser\n# this user can be transiently created by systemd\n# DynamicUser=true\nRuntimeDirectory=gunicorn\nWorkingDirectory=/home/someuser/applicationroot\nExecStart=/usr/bin/gunicorn applicationname.wsgi\nExecReload=/bin/kill -s HUP $MAINPID\nKillMode=mixed\nTimeoutStopSec=5\nPrivateTmp=true\n# if your app does not need administrative capabilities, let systemd know\n# ProtectSystem=strict\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx to disable proxy buffering for WebSockets and streaming\nDESCRIPTION: Nginx configuration to disable proxy buffering, which is necessary for streaming responses, Comet, Long polling, or WebSockets. This must be used with one of Gunicorn's async worker classes.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/deploy.rst#2025-04-22_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nlocation @proxy_to_app {\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header Host $http_host;\n    proxy_redirect off;\n    proxy_buffering off;\n\n    proxy_pass http://app_server;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for tmpfs RAM-backed Filesystem\nDESCRIPTION: Checks for the existence of a tmpfs mount at /dev/shm which can be used for temporary worker files to avoid disk I/O blocking.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/faq.rst#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ df /dev/shm\nFilesystem     1K-blocks     Used Available Use% Mounted on\ntmpfs                 ...     ...       ...  ... /dev/shm\n```\n\n----------------------------------------\n\nTITLE: Upstart configuration for Gunicorn\nDESCRIPTION: Upstart job configuration file for running Gunicorn as a service. This configuration manages the Gunicorn process lifecycle and redirects errors to the system log.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/deploy.rst#2025-04-22_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\ndescription \"myapp\"\n\nstart on (filesystem)\nstop on runlevel [016]\n\nrespawn\nsetuid nobody\nsetgid nogroup\nchdir /path/to/app/directory\n\nexec /path/to/virtualenv/bin/gunicorn myapp:app\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Documentation for Gunicorn using Make\nDESCRIPTION: This command uses Make to generate HTML documentation for the Gunicorn project. The resulting HTML files are created in the 'build/html' directory.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/README.rst#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ make html\n```\n\n----------------------------------------\n\nTITLE: Process List After Successful Gunicorn Upgrade\nDESCRIPTION: Process list output showing the final state after a successful binary upgrade, with only the new Gunicorn instance running.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/signals.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n  PID USER      PR  NI  VIRT  RES  SHR S  %CPU %MEM    TIME+  COMMAND\n20854 benoitc   20   0 55748  12m 3348 S   0.0  0.2   0:00.45 gunicorn: master [test:app]\n20859 benoitc   20   0 55748  11m 1500 S   0.0  0.1   0:00.02 gunicorn: worker [test:app]\n20860 benoitc   20   0 55748  11m 1500 S   0.0  0.1   0:00.02 gunicorn: worker [test:app]\n20861 benoitc   20   0 55748  11m 1500 S   0.0  0.1   0:00.01 gunicorn: worker [test:app]\n```\n\n----------------------------------------\n\nTITLE: Defining pre_fork Server Hook in Python\nDESCRIPTION: Default implementation of the pre_fork server hook called just before a worker is forked. The callable needs to accept two instance variables for the Arbiter and new Worker.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/settings.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef pre_fork(server, worker):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Setting Web Concurrency in Gunicorn via Environment Variable\nDESCRIPTION: This code shows how to set the number of worker processes in Gunicorn using the WEB_CONCURRENCY environment variable.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/2014-news.rst#2025-04-22_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nexport WEB_CONCURRENCY=4\ngunicorn myapp:app\n```\n\n----------------------------------------\n\nTITLE: Creating a New tmpfs Mount for Gunicorn Worker Files\nDESCRIPTION: Creates a RAM-backed filesystem mounted at /mem to be used with Gunicorn's worker-tmp-dir option to avoid disk I/O blocking.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/faq.rst#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo cp /etc/fstab /etc/fstab.orig\nsudo mkdir /mem\necho 'tmpfs       /mem tmpfs defaults,size=64m,mode=1777,noatime,comment=for-gunicorn 0 0' | sudo tee -a /etc/fstab\nsudo mount /mem\n```\n\n----------------------------------------\n\nTITLE: Defining post_fork Server Hook in Python\nDESCRIPTION: Default implementation of the post_fork server hook called just after a worker has been forked. The callable needs to accept two instance variables for the Arbiter and new Worker.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/settings.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef post_fork(server, worker):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining when_ready Server Hook in Python\nDESCRIPTION: Default implementation of the when_ready server hook called just after the server is started. The callable needs to accept a single instance variable for the Arbiter.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/settings.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef when_ready(server):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining nworkers_changed Server Hook in Python\nDESCRIPTION: Default implementation of the nworkers_changed server hook called just after num_workers has been changed. The callable needs to accept an instance variable of the Arbiter and two integers indicating the number of workers after and before the change.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/settings.rst#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef nworkers_changed(server, new_value, old_value):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining post_worker_init Server Hook in Python\nDESCRIPTION: Default implementation of the post_worker_init server hook called just after a worker has initialized the application. The callable needs to accept one instance variable for the initialized Worker.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/settings.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef post_worker_init(worker):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining worker_abort Server Hook in Python\nDESCRIPTION: Default implementation of the worker_abort server hook called when a worker received the SIGABRT signal, generally on timeout. The callable needs to accept one instance variable for the initialized Worker.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/settings.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef worker_abort(worker):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Version 23.0.0 Changelog Entry\nDESCRIPTION: Changelog entry detailing updates, fixes and breaking changes for Gunicorn 23.0.0 release from August 10, 2024. Includes security improvements, bug fixes, and changes to request handling.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/2024-news.rst#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n23.0.0 - 2024-08-10\n===================\n\n- minor docs fixes (:pr:`3217`, :pr:`3089`, :pr:`3167`)\n- worker_class parameter accepts a class (:pr:`3079`)\n- fix deadlock if request terminated during chunked parsing (:pr:`2688`)\n- permit receiving Transfer-Encodings: compress, deflate, gzip (:pr:`3261`)\n- permit Transfer-Encoding headers specifying multiple encodings. note: no parameters, still (:pr:`3261`)\n- sdist generation now explicitly excludes sphinx build folder (:pr:`3257`)\n- decode bytes-typed status (as can be passed by gevent) as utf-8 instead of raising `TypeError` (:pr:`2336`)\n- raise correct Exception when encounting invalid chunked requests (:pr:`3258`)\n- the SCRIPT_NAME and PATH_INFO headers, when received from allowed forwarders, are no longer restricted for containing an underscore (:pr:`3192`)\n- include IPv6 loopback address ``[::1]`` in default for :ref:`forwarded-allow-ips` and :ref:`proxy-allow-ips` (:pr:`3192`)\n```\n\n----------------------------------------\n\nTITLE: Defining pre_exec Server Hook in Python\nDESCRIPTION: Default implementation of the pre_exec server hook called just before a new master process is forked. The callable needs to accept a single instance variable for the Arbiter.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/settings.rst#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef pre_exec(server):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining child_exit Server Hook in Python\nDESCRIPTION: Default implementation of the child_exit server hook called just after a worker has been exited, in the master process. The callable needs to accept two instance variables for the Arbiter and the just-exited Worker.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/settings.rst#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef child_exit(server, worker):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Installing Gunicorn on Debian Oldstable (Bash)\nDESCRIPTION: Commands to install Gunicorn on Debian Oldstable (\"stretch\") using apt-get. Includes instructions for installing from backports to get a more recent version.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/install.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt-get install gunicorn3\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt-get update\n$ sudo apt-get -t stretch-backports install gunicorn3\n```\n\n----------------------------------------\n\nTITLE: Defining pre_request Server Hook in Python\nDESCRIPTION: Default implementation of the pre_request server hook called just before a worker processes the request. The callable logs the request method and path. It accepts two instance variables for the Worker and the Request.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/settings.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef pre_request(worker, req):\n    worker.log.debug(\"%s %s\", req.method, req.path)\n```\n\n----------------------------------------\n\nTITLE: Defining on_starting Server Hook in Python\nDESCRIPTION: Default implementation of the on_starting server hook called just before the master process is initialized. The callable needs to accept a single instance variable for the Arbiter.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/settings.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef on_starting(server):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining worker_int Server Hook in Python\nDESCRIPTION: Default implementation of the worker_int server hook called just after a worker exited on SIGINT or SIGQUIT. The callable needs to accept one instance variable for the initialized Worker.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/settings.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef worker_int(worker):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining post_request Server Hook in Python\nDESCRIPTION: Default implementation of the post_request server hook called after a worker processes the request. The callable needs to accept two instance variables for the Worker and the Request.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/settings.rst#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef post_request(worker, req, environ, resp):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Markdown Security Policy Table for Gunicorn Versions\nDESCRIPTION: A markdown table showing the security support status for different versions of Gunicorn, indicating which versions receive security updates.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/SECURITY.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | Status          |\n| ------- | ------------------ |\n| 23.0.0  | :white_check_mark: |\n| 22.0.0  | :x: |\n| 21.2.0  | :x: |\n| 20.0.0  | :x: |\n| < 20.0  | :x: |\n```\n\n----------------------------------------\n\nTITLE: Defining ssl_context Server Hook in Python\nDESCRIPTION: Default implementation of the ssl_context server hook used to configure SSL context for Gunicorn. This function accepts the configuration and a default SSL context factory.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/settings.rst#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef ssl_context(config, default_ssl_context_factory):\n\n```\n\n----------------------------------------\n\nTITLE: Defining worker_exit Server Hook in Python\nDESCRIPTION: Default implementation of the worker_exit server hook called just after a worker has been exited, in the worker process. The callable needs to accept two instance variables for the Arbiter and the just-exited Worker.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/settings.rst#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef worker_exit(server, worker):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Specifying Development Dependencies for Gunicorn\nDESCRIPTION: This requirements file includes test dependencies, setuptools with a minimum version of 68.0, and documentation generation tools. It includes a reference to another requirements file for test dependencies and specifies setuptools with a version comment explaining the minimum version constraint.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/requirements_dev.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-r requirements_test.txt\n\n# setuptools v68.0 fails hard on invalid pyproject.toml\n# which a developer would want to know\n# otherwise, oldest known-working version is 61.2\nsetuptools>=68.0\n\nsphinx\nsphinx_rtd_theme\n```\n\n----------------------------------------\n\nTITLE: Defining on_exit Server Hook in Python\nDESCRIPTION: Default implementation of the on_exit server hook called just before exiting Gunicorn. The callable needs to accept a single instance variable for the Arbiter.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/settings.rst#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef on_exit(server):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining on_reload Server Hook in Python\nDESCRIPTION: Default implementation of the on_reload server hook called to recycle workers during a reload via SIGHUP. The callable needs to accept a single instance variable for the Arbiter.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/settings.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef on_reload(server):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Creating a Procfile for Gaffer monitoring\nDESCRIPTION: Example Procfile configuration for using Gaffer to manage Gunicorn. This allows Gaffer to supervise multiple applications defined in the Procfile.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/deploy.rst#2025-04-22_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\ngunicorn = gunicorn -w 3 test:app\n```\n\n----------------------------------------\n\nTITLE: Building and Running a PEX-packaged Gunicorn Application\nDESCRIPTION: Commands for building a Python executable (PEX) with Gunicorn as the entry point and running it with a WSGI app. This approach allows bundling both the application and Gunicorn in the same PEX file for deployment.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/custom.rst#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Generic pex build command via bash from root of exampleapi project\n$ pex . -v -c gunicorn -o compiledapp.pex\n# Running it\n./compiledapp.pex exampleapi:app -c gunicorn_config.py\n```\n\n----------------------------------------\n\nTITLE: Configuring PasteDeploy Global Variables in Gunicorn\nDESCRIPTION: Example showing how to set PasteDeploy global configuration variables using command line arguments. The variables FOO and BAR are passed to the PasteDeploy entrypoint.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/settings.rst#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n$ gunicorn -b 127.0.0.1:8000 --paste development.ini --paste-global FOO=1 --paste-global BAR=2\n```\n\n----------------------------------------\n\nTITLE: Reloading Gunicorn Application with HUP Signal\nDESCRIPTION: Sends the HUP signal to the Gunicorn master process to gracefully reload the application without downtime.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/faq.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ kill -HUP masterpid\n```\n\n----------------------------------------\n\nTITLE: Increasing Maximum Socket Backlog with sysctl\nDESCRIPTION: Increases the maximum length of the queue for incoming connections using sysctl to modify kernel parameters.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/faq.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo sysctl -w net.core.somaxconn=\"2048\"\n```\n\n----------------------------------------\n\nTITLE: Testing Proxy Configuration with Hey Benchmarking Tool\nDESCRIPTION: Uses the Hey benchmarking tool to test proxy buffering with 10,000 requests and 100 concurrent connections.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/faq.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ hey -n 10000 -c 100 http://127.0.0.1:5000/\n```\n\n----------------------------------------\n\nTITLE: Checking Filesystem Type for Temporary Directories\nDESCRIPTION: Checks whether /tmp is disk-backed or RAM-backed to help diagnose potential blocking issues with os.fchmod.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/faq.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ df /tmp\nFilesystem     1K-blocks    Used Available Use% Mounted on\n/dev/xvda1           ...     ...       ...  ... /\n```\n\n----------------------------------------\n\nTITLE: Verifying tmpfs Mount for Gunicorn Worker Files\nDESCRIPTION: Checks that the tmpfs mount was successfully created at /mem and shows its available space.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/faq.rst#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ df /mem\nFilesystem     1K-blocks  Used Available Use% Mounted on\ntmpfs              65536     0     65536   0% /mem\n```\n\n----------------------------------------\n\nTITLE: Checking for OOM Killer Activity with dmesg\nDESCRIPTION: Uses dmesg to check if Gunicorn worker processes are being killed by the Linux OOM (Out of Memory) killer, which can cause silent worker termination.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/faq.rst#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndmesg | grep gunicorn\nMemory cgroup out of memory: Kill process 24534 (gunicorn) score 1506 or sacrifice child\nKilled process 24534 (gunicorn) total-vm:1016648kB, anon-rss:550160kB, file-rss:25824kB, shmem-rss:0kB\n```\n\n----------------------------------------\n\nTITLE: Process List During Gunicorn Binary Upgrade\nDESCRIPTION: Process list output showing both old and new Gunicorn instances running simultaneously during a zero-downtime upgrade process.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/signals.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  PID USER      PR  NI  VIRT  RES  SHR S  %CPU %MEM    TIME+  COMMAND\n20844 benoitc   20   0 54808  11m 3352 S   0.0  0.1   0:00.36 gunicorn: master [test:app]\n20849 benoitc   20   0 54808 9.9m 1500 S   0.0  0.1   0:00.02 gunicorn: worker [test:app]\n20850 benoitc   20   0 54808 9.9m 1500 S   0.0  0.1   0:00.01 gunicorn: worker [test:app]\n20851 benoitc   20   0 54808 9.9m 1500 S   0.0  0.1   0:00.01 gunicorn: worker [test:app]\n20854 benoitc   20   0 55748  12m 3348 S   0.0  0.2   0:00.35 gunicorn: master [test:app]\n20859 benoitc   20   0 55748  11m 1500 S   0.0  0.1   0:00.01 gunicorn: worker [test:app]\n20860 benoitc   20   0 55748  11m 1500 S   0.0  0.1   0:00.00 gunicorn: worker [test:app]\n20861 benoitc   20   0 55748  11m 1500 S   0.0  0.1   0:00.01 gunicorn: worker [test:app]\n```\n\n----------------------------------------\n\nTITLE: Installing Gunicorn using pip in Python\nDESCRIPTION: This command installs Gunicorn from PyPI using pip. Gunicorn requires Python 3.x >= 3.7.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/README.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install gunicorn\n```\n\n----------------------------------------\n\nTITLE: Installing Gunicorn from GitHub source (Python)\nDESCRIPTION: Commands to install Gunicorn directly from the GitHub repository, allowing users to stay up-to-date with development versions.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/install.rst#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install git+https://github.com/benoitc/gunicorn.git\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install -U git+https://github.com/benoitc/gunicorn.git\n```\n\n----------------------------------------\n\nTITLE: Installing Gunicorn on Debian Stable (Bash)\nDESCRIPTION: Commands to install Gunicorn on Debian Stable (\"buster\") using apt-get. Includes instructions for installing from backports to get a more recent version.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/install.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt-get install gunicorn3\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt-get update\n$ sudo apt-get -t buster-backports install gunicorn\n```\n\n----------------------------------------\n\nTITLE: Installing Gunicorn on Debian Testing/Unstable (Bash)\nDESCRIPTION: Command to install the latest version of Gunicorn on Debian Testing (\"bullseye\") or Unstable (\"sid\") using apt-get.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/install.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt-get install gunicorn\n```\n\n----------------------------------------\n\nTITLE: Forcing Gunicorn installation in a virtualenv\nDESCRIPTION: Commands to force the installation of Gunicorn in a Python virtual environment using the -I or --ignore-installed flag with pip.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/deploy.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ source ~/venvs/webapp/bin/activate\n$ pip install -I gunicorn\n```\n\n----------------------------------------\n\nTITLE: Enabling Nginx Service with Systemd\nDESCRIPTION: This command enables the Nginx service to start automatically at boot using systemd.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/deploy.rst#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl enable nginx.service\n```\n\n----------------------------------------\n\nTITLE: Loading Gunicorn Config from Python Module\nDESCRIPTION: This code demonstrates how to load Gunicorn configuration from a Python module instead of a config file.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/2014-news.rst#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ngunicorn --config python:my_config_module my_app:app\n```\n\n----------------------------------------\n\nTITLE: Enabling Code Reloading in Gunicorn\nDESCRIPTION: This code demonstrates how to enable automatic code reloading in Gunicorn using the --reload option.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/2014-news.rst#2025-04-22_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ngunicorn --reload myapp:app\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies\nDESCRIPTION: Lists required Python packages for Gunicorn development and testing. Includes async worker dependencies (gevent, eventlet) and testing tools (pytest with version constraint, pytest-cov, and coverage).\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/requirements_test.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngevent\neventlet\ncoverage\npytest>=7.2.0\npytest-cov\n```\n\n----------------------------------------\n\nTITLE: Defining Tornado Package Version Constraint\nDESCRIPTION: Specifies that the tornado package version must be less than 6.0. This is likely used to maintain compatibility with specific features or avoid breaking changes in newer tornado versions.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/examples/frameworks/requirements_tornadoapp.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntornado<6\n```\n\n----------------------------------------\n\nTITLE: Importing Gunicorn Web Framework Dependencies\nDESCRIPTION: This code snippet lists the requirements files for various web frameworks that are compatible with Gunicorn. It includes Flask, Cherry, Pyramid, Tornado, and Web.py applications.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/examples/frameworks/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-r requirements_flaskapp.txt\n-r requirements_cherryapp.txt\n-r requirements_pyramidapp.txt\n-r requirements_tornadoapp.txt\n-r requirements_webpyapp.txt\n```\n\n----------------------------------------\n\nTITLE: Version 22.0.0 Changelog Entry\nDESCRIPTION: Changelog entry detailing updates, fixes and breaking changes for Gunicorn 22.0.0 release from April 17, 2024. Includes security improvements, Python version requirements, and HTTP parsing changes.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/2024-news.rst#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n22.0.0 - 2024-04-17\n===================\n\n- use `utime` to notify workers liveness \n- migrate setup to pyproject.toml\n- fix numerous security vulnerabilities in HTTP parser (closing some request smuggling vectors)\n- parsing additional requests is no longer attempted past unsupported request framing\n- on HTTP versions < 1.1 support for chunked transfer is refused (only used in exploits)\n- requests conflicting configured or passed SCRIPT_NAME now produce a verbose error\n- Trailer fields are no longer inspected for headers indicating secure scheme\n- support Python 3.12\n```\n\n----------------------------------------\n\nTITLE: Documenting Gunicorn Changelog Entry for Version 21.1.0\nDESCRIPTION: This snippet outlines the changes in Gunicorn version 21.1.0, released on July 18, 2023. It addresses a fix for the thread worker, specifically resolving socket removal from the queue.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/2023-news.rst#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n21.1.0 - 2023-07-18\n===================\n\n- fix thread worker: fix socket removal from the queue\n```\n\n----------------------------------------\n\nTITLE: Documenting Gunicorn Changelog Entry for Version 21.0.1\nDESCRIPTION: This snippet documents the changes in Gunicorn version 21.0.1, released on July 17, 2023. The primary focus of this release was to fix the documentation build process.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/2023-news.rst#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n21.0.1 - 2023-07-17\n===================\n\n- fix documentation build\n```\n\n----------------------------------------\n\nTITLE: Documenting Gunicorn Changelog Entry for Version 21.0.0\nDESCRIPTION: This snippet details the major release of Gunicorn version 21.0.0 on July 17, 2023. It includes support for Python 3.11, fixes for various workers, improvements to thread support, SSL updates, and numerous other enhancements and fixes.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/2023-news.rst#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n21.0.0 - 2023-07-17\n===================\n\n- support python 3.11\n- fix gevent and eventlet workers\n- fix threads support (gththread): improve performance and unblock requests\n- SSL: now use SSLContext object\n- HTTP parser: miscellaneous fixes\n- remove unnecessary setuid calls\n- fix testing\n- improve logging\n- miscellaneous fixes to core engine\n\n*** RELEASE NOTE ***\n\nWe made this release major to start our new release cycle. More info will be provided on our discussion forum.\n```\n\n----------------------------------------\n\nTITLE: Documenting Gunicorn Changelog Entry for Version 21.2.0\nDESCRIPTION: This snippet details the changes made in Gunicorn version 21.2.0, released on July 19, 2023. It fixes an issue with the thread worker by reverting a change that considered connections as idle.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/2023-news.rst#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n21.2.0 - 2023-07-19\n===================\n\n- fix thread worker: revert change considering connection as idle . \n\n*** NOTE ***\n\nThis is fixing the bad file description error.\n```\n\n----------------------------------------\n\nTITLE: Including Reference to News Document in reStructuredText\nDESCRIPTION: A directive in reStructuredText that creates a note block with a reference to the 'news' document for the latest changes to Gunicorn.\nSOURCE: https://github.com/benoitc/gunicorn/blob/master/docs/source/2020-news.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. note::\n\n   Please see :doc:`news` for the latest changes\n```"
  }
]