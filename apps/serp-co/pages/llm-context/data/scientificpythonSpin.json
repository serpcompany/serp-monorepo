[
  {
    "owner": "scientific-python",
    "repo": "spin",
    "content": "TITLE: Installing spin with pip (Shell)\nDESCRIPTION: This command installs the 'spin' package using the pip package installer. It makes the 'spin' command-line interface available in the system's PATH.\nSOURCE: https://github.com/scientific-python/spin/blob/main/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npip install spin\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic spin Commands in pyproject.toml (TOML)\nDESCRIPTION: This TOML snippet shows the basic configuration structure for 'spin' within a project's `pyproject.toml` file under the `[tool.spin]` section. It specifies the package name and lists the built-in 'spin' commands to enable.\nSOURCE: https://github.com/scientific-python/spin/blob/main/README.md#_snippet_1\n\nLANGUAGE: TOML\nCODE:\n```\npackage = \"pkg_importname\"  # name of your package\ncommands = [\n  \"spin.cmds.meson.build\",\n  \"spin.cmds.meson.test\"\n]\n```\n\n----------------------------------------\n\nTITLE: Running the spin CLI Tool (Shell)\nDESCRIPTION: These shell commands show the standard ways to invoke the 'spin' command-line interface from the project's root directory. The first method is the typical direct execution, while the second uses the Python module runner.\nSOURCE: https://github.com/scientific-python/spin/blob/main/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nspin\n```\n\nLANGUAGE: Shell\nCODE:\n```\npython -m spin\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Nox (Shell)\nDESCRIPTION: This shell command executes the test suite for the project using Nox. It runs the default 'test' session defined in the project's Nox configuration.\nSOURCE: https://github.com/scientific-python/spin/blob/main/README.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\nnox -s test\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Nox Verbose Output (Shell)\nDESCRIPTION: This shell command runs the test suite using Nox, passing the `-v` flag to the underlying test runner (commonly pytest) to enable verbose output, showing details of individual tests.\nSOURCE: https://github.com/scientific-python/spin/blob/main/README.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\nnox -s test -- -v\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Custom spin Command (Python)\nDESCRIPTION: This Python snippet illustrates how to define a simple custom 'spin' command using the `@click.command()` decorator. The example command accesses and prints the `[tool.spin]` section of the project's `pyproject.toml` configuration using `spin.util.get_config()`. Requires 'click' library.\nSOURCE: https://github.com/scientific-python/spin/blob/main/README.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom spin import util\n\n\n@click.command()\ndef example():\n    \"\"\"Command that accesses `pyproject.toml` configuration\"\"\"\n    config = util.get_config()\n    print(config[\"tool.spin\"])\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Command Function Signature (Python)\nDESCRIPTION: This Python snippet shows the signature of a custom 'spin' command function, demonstrating how command-line options (`-f`, `-t`) are defined using `click.option` decorators and how regular Python keyword arguments are handled.\nSOURCE: https://github.com/scientific-python/spin/blob/main/README.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n@click.command()\n@click.option(\"-f\", \"--flag\")\n@click.option(\"-t\", \"--test\", default=\"not set\")\ndef example(flag, test, default_kwd=None):\n    \"\"\"ðŸ§ª Example custom command.\n    ...\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Generating Release Notes with changelist\nDESCRIPTION: Uses the changelist tool to automatically generate release notes by comparing changes between the previous version and main branch.\nSOURCE: https://github.com/scientific-python/spin/blob/main/RELEASE.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchangelist ${ORG}/${REPO} v${PREVIOUS} main --version ${VERSION} --out ${VERSION}.md\n```\n\n----------------------------------------\n\nTITLE: Generating spin Shell Auto-completion Script (Shell)\nDESCRIPTION: This shell command generates a script containing the necessary auto-completion logic for the 'spin' CLI tool for bash and redirects the output to a file in the user's home directory. The generated file will be sourced by the shell configuration.\nSOURCE: https://github.com/scientific-python/spin/blob/main/README.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\n_SPIN_COMPLETE=bash_source spin > ~/.spin-complete.bash\n```\n\n----------------------------------------\n\nTITLE: Sourcing spin Shell Auto-completion Script (Shell)\nDESCRIPTION: This shell command sources the previously generated 'spin' auto-completion script (`~/.spin-complete.bash`) within the current shell session. To make this persistent, it should typically be added to the user's shell configuration file (e.g., `~/.bashrc`).\nSOURCE: https://github.com/scientific-python/spin/blob/main/README.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\nsource ~/.spin-complete.bash\n```\n\n----------------------------------------\n\nTITLE: Extending a Built-in spin Command (Python)\nDESCRIPTION: This Python snippet shows how to extend an existing built-in 'spin' command (here, `spin.cmds.meson.build`) using the `spin.util.extend_command` decorator. It adds a new command-line option (`--extra`) and provides custom pre- and post-processing logic around the original command's execution (`parent_callback`).\nSOURCE: https://github.com/scientific-python/spin/blob/main/README.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nimport spin\n\n\n@click.option(\"-e\", \"--extra\", help=\"Extra test flag\")\n@spin.util.extend_command(spin.cmds.meson.build)\ndef build_extend(*, parent_callback, extra=None, **kwargs):\n    \"\"\"\n    This version of build also provides the EXTRA flag, that can be used\n    to specify an extra integer argument.\n    \"\"\"\n    print(f\"Preparing for build with {extra=}\")\n    parent_callback(**kwargs)\n    print(\"Finalizing build...\")\n```\n\n----------------------------------------\n\nTITLE: Organizing spin Commands into Sections in pyproject.toml (TOML)\nDESCRIPTION: This TOML configuration snippet demonstrates how to group 'spin' commands into logical sections (e.g., \"Build\", \"Environments\") within the `[tool.spin.commands]` table in `pyproject.toml`. This improves the readability of the `spin --help` output.\nSOURCE: https://github.com/scientific-python/spin/blob/main/README.md#_snippet_2\n\nLANGUAGE: TOML\nCODE:\n```\n[tool.spin.commands]\n\"Build\" = [\n  \"spin.cmds.meson.build\",\n  \"spin.cmds.meson.test\"\n]\n\"Environments\" = [\n  \"spin.cmds.meson.ipython\",\n  \"spin.cmds.meson.run\"\n]\n```\n\n----------------------------------------\n\nTITLE: Overriding Custom Command Arguments in pyproject.toml (TOML)\nDESCRIPTION: This TOML configuration snippet demonstrates how to use the `[tool.spin.kwargs]` section in `pyproject.toml` to override default values for arguments (both click options and function keywords) of a specific custom command.\nSOURCE: https://github.com/scientific-python/spin/blob/main/README.md#_snippet_6\n\nLANGUAGE: TOML\nCODE:\n```\n[tool.spin.kwargs]\n\".spin/cmds.py:example\" = {\"test\" = \"default override\", \"default_kwd\" = 3}\n```\n\n----------------------------------------\n\nTITLE: Configuring pyproject.toml to Use Extended Command (TOML)\nDESCRIPTION: This TOML snippet demonstrates how to configure the `[tool.spin.commands]` section in `pyproject.toml` to enable and use the custom extended command (`build_extend` defined in `.spin/cmds.py`) instead of the original built-in command.\nSOURCE: https://github.com/scientific-python/spin/blob/main/README.md#_snippet_8\n\nLANGUAGE: TOML\nCODE:\n```\n\"Build\" = [\".spin/cmds.py:build_extend\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Release Variables in Bash\nDESCRIPTION: Defines environment variables needed for the release process including version numbers, organization and repository names, and changelog file location.\nSOURCE: https://github.com/scientific-python/spin/blob/main/RELEASE.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport VERSION=<version number>\nexport PREVIOUS=<previous version number>\nexport ORG=\"scientific-python\"\nexport REPO=\"spin\"\nexport LOG=\"CHANGELOG.md\"\n```\n\n----------------------------------------\n\nTITLE: Committing Version Changes\nDESCRIPTION: Commits the updated version information and changelog to the repository with a descriptive commit message.\nSOURCE: https://github.com/scientific-python/spin/blob/main/RELEASE.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit add spin/__init__.py CHANGELOG.md\ngit commit -m \"Designate ${VERSION} release\"\n```\n\n----------------------------------------\n\nTITLE: Prepending New Release Notes to Changelog\nDESCRIPTION: Adds the newly generated release notes to the top of the existing changelog file to maintain a comprehensive history of changes.\nSOURCE: https://github.com/scientific-python/spin/blob/main/RELEASE.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncat ${VERSION}.md | cat - ${LOG} > temp && mv temp ${LOG}\n```\n\n----------------------------------------\n\nTITLE: Tagging the Release in Git\nDESCRIPTION: Creates a signed Git tag for the new version, which is important for proper version tracking and especially for Debian packaging.\nSOURCE: https://github.com/scientific-python/spin/blob/main/RELEASE.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -s v${VERSION} -m \"signed ${VERSION} tag\"\n```\n\n----------------------------------------\n\nTITLE: Pushing Tags and Changes to GitHub\nDESCRIPTION: Pushes the new tag and commits to the remote GitHub repository, making the release official and publicly available.\nSOURCE: https://github.com/scientific-python/spin/blob/main/RELEASE.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit push --tags origin main\n```\n\n----------------------------------------\n\nTITLE: Committing Post-Release Version Bump\nDESCRIPTION: Updates the version number for the next development cycle and pushes the changes to the main branch.\nSOURCE: https://github.com/scientific-python/spin/blob/main/RELEASE.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit add spin/__init__.py\ngit commit -m 'Bump version'\ngit push origin main\n```\n\n----------------------------------------\n\nTITLE: Overriding Meson CLI Path in pyproject.toml (TOML)\nDESCRIPTION: This TOML configuration snippet demonstrates how to specify a custom path for the Meson command-line interface used by 'spin' within the `[tool.spin.meson]` section of `pyproject.toml`.\nSOURCE: https://github.com/scientific-python/spin/blob/main/README.md#_snippet_9\n\nLANGUAGE: TOML\nCODE:\n```\n[tool.spin.meson]\ncli = 'path/to/custom/meson'\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test File with Nox Verbose (Shell)\nDESCRIPTION: This shell command executes the test suite using Nox, specifically targeting tests within the `spin/tests/test_meson.py` file. It also passes the `-v` flag for verbose output from the test runner.\nSOURCE: https://github.com/scientific-python/spin/blob/main/README.md#_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\nnox -s test -- -v spin/tests/test_meson.py\n```\n\n----------------------------------------\n\nTITLE: Installing Emoji Fonts for Terminal (Shell)\nDESCRIPTION: These shell commands are specific to Arch Linux using the `pacman` package manager. They install emoji fonts required for displaying emojis in the terminal output of 'spin' and update the font cache.\nSOURCE: https://github.com/scientific-python/spin/blob/main/README.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\nsudo pacman -S noto-fonts-emoji\nfc-cache -f -v\n```"
  }
]