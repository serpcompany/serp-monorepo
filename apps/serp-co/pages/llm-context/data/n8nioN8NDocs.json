[
  {
    "owner": "n8n-io",
    "repo": "n8n-docs",
    "content": "TITLE: Installing Docker and Docker Compose on Ubuntu\nDESCRIPTION: This snippet shows how to install Docker and Docker Compose on an Ubuntu system. It removes any existing incompatible versions, installs prerequisites, sets up the Docker repository, and installs the latest versions of Docker and Docker Compose.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/docker-compose.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Remove incompatible or out of date Docker implementations if they exist\nfor pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done\n# Install prereq packages\nsudo apt-get update\nsudo apt-get install ca-certificates curl\n# Download the repo signing key\nsudo install -m 0755 -d /etc/apt/keyrings\nsudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\nsudo chmod a+r /etc/apt/keyrings/docker.asc\n# Configure the repository\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo \"${UBUNTU_CODENAME:-$VERSION_CODENAME}\") stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n\n# Update and install Docker and Docker Compose\nsudo apt-get update\nsudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n```\n\n----------------------------------------\n\nTITLE: Calculating Order Totals with n8n Code Node in JavaScript\nDESCRIPTION: This JavaScript snippet is designed for the n8n Code node configured in 'Run Once for All Items' mode. It retrieves all input items using `$input.all()`, calculates the total number of items (orders), and sums the 'orderPrice' property found within the 'json' object of each item. The final results are returned in the required n8n data structure.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/courses/level-one/chapter-5/chapter-5.5.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet items = $input.all();\nlet totalBooked = items.length;\nlet bookedSum = 0;\n\nfor (let i=0; i < items.length; i++) {\n  bookedSum = bookedSum + items[i].json.orderPrice;\n}\n\nreturn [{ json: {totalBooked, bookedSum} }];\n```\n\n----------------------------------------\n\nTITLE: Accessing Node Output in n8n Workflows - JavaScript\nDESCRIPTION: These code snippets demonstrate how to access the output data of other nodes in an n8n workflow using JavaScript, specifically within the Code node. The provided methods include retrieving all, first, or last output items, accessing node query parameters and context, and tracing linked items. These methods work natively in the Code node unless otherwise noted, and require specifying the relevant node name as a string argument. Limitations include some methods (such as .item) not being available within the Code node context.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/output-other-nodes.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Returns all items from a given node\n$(\"<node-name>\").all(branchIndex?, runIndex?)\n\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// The first item output by the given node\n$(\"<node-name>\").first(branchIndex?, runIndex?)\n\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// The last item output by the given node\n$(\"<node-name>\").last(branchIndex?, runIndex?)\n\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// The linked item (not available in Code node)\n$(\"<node-name>\").item\n\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Object containing the query settings of the given node\n$(\"<node-name>\").params\n\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Boolean. Node execution context (only\n// available in Loop Over Items node)\n$(\"<node-name>\").context\n\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Item tracing for linked input (use instead of .item in Code node)\n$(\"<node-name>\").itemMatching(currentNodeInputIndex)\n\n```\n\n----------------------------------------\n\nTITLE: Restoring Email Using itemMatching in n8n Code Node (JavaScript)\nDESCRIPTION: This JavaScript code runs within an n8n Code node. It iterates through all input items (`$input.all()`). For each item at index `i`, it uses `$('Customer Datastore (n8n training)').itemMatching(i)` to access the corresponding item from the 'Customer Datastore (n8n training)' node and retrieves its `email` property. This email is then assigned to the `restoreEmail` property of the current item's JSON data. Finally, it returns the modified array of items.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/builtin/itemmatching.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nfor(let i=0; i<$input.all().length; i++) {\n  \t\t$input.all()[i].json.restoreEmail = $('Customer Datastore (n8n training)').itemMatching(i).json.email;\n\t}\n\treturn $input.all();\n```\n\n----------------------------------------\n\nTITLE: Defining an Array of Objects in JavaScript\nDESCRIPTION: This JavaScript snippet defines a variable `turtles` as an array containing four objects, each representing a turtle with 'name' and 'color' properties. It demonstrates the structure of an array holding multiple object elements, a common pattern in n8n data.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/courses/level-two/chapter-1.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nvar turtles = [\n\t{\n\t\tname: 'Michelangelo',\n\t\tcolor: 'orange',\n\t},\n\t{\n\t\tname: 'Donatello',\n\t\tcolor: 'purple',\n\t},\n\t{\n\t\tname: 'Raphael',\n\t\tcolor: 'red',\n\t},\n\t{\n\t\tname: 'Leonardo',\n\t\tcolor: 'blue',\n\t}\n];\n```\n```\n\n----------------------------------------\n\nTITLE: Splitting Specific Array Field within Item via n8n Code Node in JavaScript\nDESCRIPTION: This JavaScript snippet illustrates how to transform data within a specific field of an incoming item using the n8n Code node. It accesses all input items, targets the `workEmail` field of the first item (assuming it's an array), and uses `.map()` to create a new output item for each element in that array, wrapping it in the standard `{ json: item }` structure.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/courses/level-two/chapter-1.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nlet items = $input.all();\nreturn items[0].json.workEmail.map(item => {\n\treturn {\n\t\tjson: item\n\t}\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Node Class Structure in TypeScript\nDESCRIPTION: This TypeScript snippet defines the main class `NasaPics` which implements the `INodeType` interface. It includes the required `description` property of type `INodeTypeDescription`, where the node's configuration, properties, and operations will be defined.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/declarative-style-node.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class NasaPics implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\t// Basic node details will go here\n\t\tproperties: [\n\t\t// Resources and operations will go here\n\t\t]\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Message Expression in n8n\nDESCRIPTION: Expression used in Customer Messenger node to create a personalized message using customer name and description variables from the workflow data.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/try-it-out/quickstart.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nHi {{ $json.customer_name }}. Your description is: {{ $json.customer_description }}\n```\n\n----------------------------------------\n\nTITLE: Extracting Properties from Current Node's Input in n8n\nDESCRIPTION: This expression extracts the name property from the current node's input item. While drag-and-drop data mapping is typically used for this purpose, this expression provides an alternative method.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/data/data-mapping/data-mapping-expressions.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n{{$input.item.json.name}}\n```\n\n----------------------------------------\n\nTITLE: Logging a Variable to Console using console.log in JavaScript (n8n Code Node)\nDESCRIPTION: Demonstrates the basic usage of `console.log()` within an n8n Code node (set to JavaScript) to print the value of a variable (`a`) to the browser's developer console. This is useful for inspecting variable values during workflow execution for debugging.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/code-node/console-log.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nlet a = \"apple\";\nconsole.log(a);\n```\n\n----------------------------------------\n\nTITLE: Updating n8n via Docker Compose\nDESCRIPTION: Shell commands for updating n8n when running in Docker Compose. The process involves pulling the latest image version, stopping the current containers, and starting them again with the updated version.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/self-hosting/installation/docker-compose-updating.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Pull latest version\ndocker compose pull\n\n# Stop and remove older version\ndocker compose down\n\n# Start the container\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Accessing Webhook Body Data with an n8n Expression (JavaScript)\nDESCRIPTION: Demonstrates a basic n8n expression using the built-in `$json` variable and JMESPath dot notation to extract the `city` value from the `body` object of the incoming JSON data shown previously. It notes that bracket notation (`$json['body']['city']`) is also a valid alternative.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/expressions.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n{{$json.body.city}}\n```\n\n----------------------------------------\n\nTITLE: Defining n8n Data Structure in JSON\nDESCRIPTION: This snippet demonstrates the standard structure for data passed between nodes in n8n. It shows how regular data is wrapped in a 'json' key and binary data in a 'binary' key, both within an array of objects. The example includes details for handling file metadata in binary data.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/data/data-structure.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\n\t\t// For most data:\n\t\t// Wrap each item in another object, with the key 'json'\n\t\t\"json\": {\n\t\t\t// Example data\n\t\t\t\"apple\": \"beets\",\n\t\t\t\"carrot\": {\n\t\t\t\t\"dill\": 1\n\t\t\t}\n\t\t},\n\t\t// For binary data:\n\t\t// Wrap each item in another object, with the key 'binary'\n\t\t\"binary\": {\n\t\t\t// Example data\n\t\t\t\"apple-picture\": {\n\t\t\t\t\"data\": \"....\", // Base64 encoded binary data (required)\n\t\t\t\t\"mimeType\": \"image/png\", // Best practice to set if possible (optional)\n\t\t\t\t\"fileExtension\": \"png\", // Best practice to set if possible (optional)\n\t\t\t\t\"fileName\": \"example.png\", // Best practice to set if possible (optional)\n\t\t\t}\n\t\t}\n\t},\n]\n```\n\n----------------------------------------\n\nTITLE: Using HTTP Request Helper Methods in n8n Node Builder - TypeScript\nDESCRIPTION: Demonstrates how to use n8n's HTTP request helpers within the execute function of a custom node when making API calls, including both unauthenticated and authenticated scenarios. Requires that the node is defined in the programmatic style and n8n's helper methods are available via the this context. The 'options' object contains request details and supports various HTTP parameters for robust integration. Input is the 'options' object (with at least 'url'), and output is the API response object (either body or full response depending on flags).\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/http-helpers.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// If no auth needed\nconst response = await this.helpers.httpRequest(options);\n\n// If auth needed\nconst response = await this.helpers.httpRequestWithAuthentication.call(\n\tthis, \n\t'credentialTypeName', // For example: pipedriveApi\n\toptions,\n);\n```\n\n----------------------------------------\n\nTITLE: Returning Data Structure from n8n Code Node in JavaScript\nDESCRIPTION: This snippet illustrates the fundamental structure required when returning data from an n8n Code node. It shows an array containing a single item, where the actual data (`{ apple: 'beets' }`) is nested within a `json` key, conforming to n8n's expected item format.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/courses/level-two/chapter-1.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nreturn [\n\t{\n\t\tjson: {\n\t\t\tapple: 'beets',\n\t\t}\n\t}\n];\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Full or Single Custom Data - n8n Code Node (JavaScript)\nDESCRIPTION: Demonstrates two approaches: retrieving the complete custom data dictionary or accessing the value for a specific key during workflow execution in JavaScript. Uses $execution.customData.getAll() to fetch all key-value pairs or $execution.customData.get(key) for a specific item. These calls are available within the Code node context, and returned values will match prior set values (strings), or null/undefined if nonexistent.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/workflows/executions/custom-executions-data.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Access the current state of the object during the execution\nconst customData = $execution.customData.getAll();\n\n// Access a specific value set during this execution\nconst customData = $execution.customData.get(\"key\");\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for n8n Community Node\nDESCRIPTION: Example of how to structure the package.json file for an n8n community node, including the required 'n8n' attribute for specifying nodes and credentials.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/integrations/submit-community-node.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"n8n-nodes-example\",\n  \"version\": \"1.0.0\",\n  \"description\": \"An example n8n community node\",\n  \"keywords\": [\"n8n-community-node-package\"],\n  \"n8n\": {\n    \"nodes\": [\"nodes/ExampleNode.node.ts\"],\n    \"credentials\": [\"credentials/ExampleCredentials.credentials.ts\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Variables in n8n Expressions/Code\nDESCRIPTION: Demonstrates the syntax for accessing a pre-defined custom variable within n8n expressions or the Code node. Use the global `$vars` object followed by a dot and the specific variable key (name) you defined in the UI. All variable values are treated as strings during workflow execution. If a variable key doesn't exist or has no value, it resolves to `undefined`.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/variables.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Access a variable\n$vars.<variable-name>\n```\n\n----------------------------------------\n\nTITLE: Security Environment Variables Table in Markdown\nDESCRIPTION: Markdown table defining security-related environment variables for n8n, including their types, default values, and descriptions. Covers file access restrictions, workflow monitoring, and cookie security configurations.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/environment-variables/security.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable | Type  | Default  | Description |\n| :------- | :---- | :------- | :---------- |\n| `N8N_BLOCK_ENV_ACCESS_IN_NODE` | Boolean | `false` | Whether to allow users to access environment variables in expressions and the Code node (false) or not (true). |\n| `N8N_RESTRICT_FILE_ACCESS_TO` | String |  | Limits access to files in these directories. Provide multiple files as a colon-separated list (\":`\"). |\n| `N8N_BLOCK_FILE_ACCESS_TO_N8N_FILES` | Boolean | `true` | Set to `true` to block access to all files in the `.n8n` directory and user defined configuration files. |\n| `N8N_SECURITY_AUDIT_DAYS_ABANDONED_WORKFLOW` | Number | 90 | Number of days to consider a workflow abandoned if it's not executed. |\n| `N8N_SECURE_COOKIE` | Boolean | `true` | Ensures that cookies are only sent over HTTPS, enhancing security.|\n| `N8N_SAMESITE_COOKIE` | Enum string: `strict`, `lax`, `none` | `lax` | Controls cross-site cookie behavior ([learn more](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite)):<ul><li>`strict`: Sent only for first-party requests.</li><li>`lax` (default): Sent with top-level navigation requests.</li><li>`none`: Sent in all contexts (requires HTTPS).</li></ul> |\n```\n\n----------------------------------------\n\nTITLE: Incrementing Page Number Body Parameter in n8n HTTP Request (JavaScript)\nDESCRIPTION: This JavaScript expression illustrates setting a body parameter (e.g., 'page') for pagination in n8n HTTP Request POST requests. Similar to query parameter pagination, it increments the page number using the built-in `$pageCount` variable (starting at 0) plus 1. This configuration is applied in the 'Value' field (with Expression toggled on) when 'Pagination Mode' is 'Update a Parameter in Each Request', 'Type' is 'Body', and the request method is typically POST. The specific body parameter name ('page' in this example) depends on the target API.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/http-node/pagination.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{{ $pageCount + 1 }}\n```\n\n----------------------------------------\n\nTITLE: Constructing Dynamic Message for Discord Node using n8n Expressions\nDESCRIPTION: This n8n expression defines the content of a message to be sent via the Discord node. It dynamically incorporates the total number of booked orders (`$json[\"totalBooked\"]`), the total value (`$json[\"bookedSum\"]`) from the preceding node's JSON output, and a unique ID extracted from the header parameters of an 'HTTP Request' node (`$('HTTP Request').params[\"headerParameters\"][\"parameters\"][0][\"value\"]`). This expression should be entered into the 'Message' field's Expression tab within the Discord node configuration.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/courses/level-one/chapter-5/chapter-5.6.md#2025-04-22_snippet_0\n\nLANGUAGE: n8n expression\nCODE:\n```\nThis week we've {{$json[\"totalBooked\"]}} booked orders with a total value of {{$json[\"bookedSum\"]}}. My Unique ID: {{ $('HTTP Request').params[\"headerParameters\"][\"parameters\"][0][\"value\"] }}\n```\n\n----------------------------------------\n\nTITLE: Managing Custom Execution Data in n8n JavaScript\nDESCRIPTION: Allows setting and getting custom data associated with the current execution. Refer to [Custom executions data](/workflows/executions/custom-executions-data.md) for details. This metadata property is available for use within the Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/n8n-metadata.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n$execution.customData\n```\n\n----------------------------------------\n\nTITLE: Returning Array of Items in Code Node (JavaScript)\nDESCRIPTION: This snippet demonstrates the correct structure required when returning data from an n8n Code node. Data must be returned as an array of objects, each with a 'json' property containing an object. This format is necessary for downstream nodes to process the data correctly. There are no external dependencies, but the shape of the 'json' object should match your workflow requirements.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.code/common-issues.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    \"json\": {\n\t  // your data goes here\n\t}\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Running n8n with npx in Bash\nDESCRIPTION: This command uses npx to run n8n without installing it, downloading all necessary components to start n8n.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/npm.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx n8n\n```\n\n----------------------------------------\n\nTITLE: Accessing Data from Items Retrieved with .all() in TypeScript (n8n)\nDESCRIPTION: Shows how to iterate through the array of items returned by `$('<node-name>').all()` in n8n TypeScript/JavaScript expressions. It accesses the JSON data payload of each item using the `.json` property and logs it to the console. This pattern is common for processing results from previous nodes.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/builtin/all.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\npreviousNodeData = $(\"<node-name>\").all();\nfor(let i=0; i<previousNodeData.length; i++) {\n\tconsole.log(previousNodeData[i].json);\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Environment Variables\nDESCRIPTION: Example of setting environment variables in docker-compose.yaml file\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/configuration-methods.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nn8n:\n    environment:\n      - N8N_TEMPLATES_ENABLED=false\n```\n\n----------------------------------------\n\nTITLE: Setting Authentication in Header with Bearer Token - n8n - TypeScript\nDESCRIPTION: This snippet shows how to inject authentication data (such as a bearer token) into request headers within a credentials file for n8n. The 'Authorization' header is dynamically populated from the credentials input. Prerequisite: the credentials object must provide 'authToken'. This is intended for APIs requiring Bearer or similar header-based authentication.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/credentials-files.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nauthenticate: IAuthenticateGeneric = {\n\ttype: 'generic',\n\tproperties: {\n\t\theader: {\n\t\t\tAuthorization: '=Bearer {{$credentials.authToken}}',\n\t\t},\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing SendGrid API Key Authentication in n8n - TypeScript\nDESCRIPTION: This TypeScript snippet defines the FriendGridApi class used in n8n to enable API key authentication for SendGrid. It exports an ICredentialType-compliant class with node properties for the API key, authentication logic configuring headers, and a test request to validate credentials. Dependencies include 'n8n-workflow' interfaces, and the credentials are structured for use by n8n integration nodes to pass a bearer token. The main input is the user's API key; outputs are authenticated requests to SendGrid's API with limitations like supporting only token-based authentication.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/programmatic-style-node.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n\tIAuthenticateGeneric,\n\tICredentialTestRequest,\n\tICredentialType,\n\tINodeProperties,\n} from 'n8n-workflow';\n\nexport class FriendGridApi implements ICredentialType {\n\tname = 'friendGridApi';\n\tdisplayName = 'FriendGrid API';\n\tproperties: INodeProperties[] = [\n\t\t{\n\t\t\tdisplayName: 'API Key',\n\t\t\tname: 'apiKey',\n\t\t\ttype: 'string',\n\t\t\tdefault: '',\n\t\t},\n\t];\n\n\tauthenticate: IAuthenticateGeneric = {\n\t\ttype: 'generic',\n\t\tproperties: {\n\t\t\theaders: {\n\t\t\t\tAuthorization: '=Bearer {{$credentials.apiKey}}',\n\t\t\t},\n\t\t},\n\t};\n\n\ttest: ICredentialTestRequest = {\n\t\trequest: {\n\t\t\tbaseURL: 'https://api.sendgrid.com/v3',\n\t\t\turl: '/marketing/contacts',\n\t\t},\n\t};\n}\n\n```\n\n----------------------------------------\n\nTITLE: Example Input Data for Multi-Item Processing (JSON)\nDESCRIPTION: This JSON snippet represents an array of two items, each with a `name-input-value` property. It illustrates the typical input format for n8n nodes when processing multiple items, demonstrating how a node configured to use item data would iterate over this structure to perform an action for each item.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/flow-logic/data-flow-nodes.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n[\n\t{\n\t\tname-input-value: \"test1\"\n\t},\n\t{\n\t\tname-input-value: \"test2\"\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Exposing Local n8n Instance via ngrok - Shell\nDESCRIPTION: This snippet demonstrates the use of the ngrok CLI tool to tunnel HTTP traffic from the internet to a local server running on port 5678. Ngrok is required because Twist does not accept localhost redirect URLs in its OAuth2 configuration. By running this command, a publicly accessible HTTPS endpoint is generated, which can be used as the OAuth2 redirect URL for testing local n8n instances. No additional dependencies are required besides ngrok, which must be installed.\n\nInputs: None. \nOutputs: URL provided by ngrok. \nLimitations: Requires ngrok and internet access.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/twist.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nngrok http 5678\n```\n\n----------------------------------------\n\nTITLE: Defining an n8n Error Workflow with Slack Notification (JSON)\nDESCRIPTION: This JSON snippet defines an n8n workflow intended to act as an 'Error Workflow'. It uses an 'Error Trigger' node as its starting point, which activates when a linked workflow fails. It then sends a notification message via a 'Slack' node, dynamically including the name of the failed workflow and a link to its execution details using n8n expressions. This requires pre-configured Slack credentials within n8n.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/courses/level-two/chapter-4.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"nodes\": [\n\t\t{\n\t\t\t\"parameters\": {},\n\t\t\t\"name\": \"Error Trigger\",\n\t\t\t\"type\": \"n8n-nodes-base.errorTrigger\",\n\t\t\t\"typeVersion\": 1,\n\t\t\t\"position\": [\n\t\t\t\t720,\n\t\t\t\t-380\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"parameters\": {\n\t\t\t\t\"channel\": \"channelname\",\n\t\t\t\t\"text\": \"=This workflow {{$node[\\\"Error Trigger\\\"].json[\\\"workflow\\\"][\\\"name\\\"]}}failed.\\nHave a look at it here: {{$node[\\\"Error Trigger\\\"].json[\\\"execution\\\"][\\\"url\\\"]}}\",\n\t\t\t\t\"attachments\": [],\n\t\t\t\t\"otherOptions\": {}\n\t\t\t},\n\t\t\t\"name\": \"Slack\",\n\t\t\t\"type\": \"n8n-nodes-base.slack\",\n\t\t\t\"position\": [\n\t\t\t\t900,\n\t\t\t\t-380\n\t\t\t],\n\t\t\t\"typeVersion\": 1,\n\t\t\t\"credentials\": {\n\t\t\t\t\"slackApi\": {\n\t\t\t\t\t\"id\": \"17\",\n\t\t\t\t\t\"name\": \"slack_credentials\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t],\n\t\"connections\": {\n\t\t\"Error Trigger\": {\n\t\t\t\"main\": [\n\t\t\t\t[\n\t\t\t\t\t{\n\t\t\t\t\t\t\"node\": \"Slack\",\n\t\t\t\t\t\t\"type\": \"main\",\n\t\t\t\t\t\t\"index\": 0\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t]\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Expressions in n8n Edit Fields Node (JSON Output Mode)\nDESCRIPTION: This JSON structure is entered into the 'JSON Output' field of the Edit Fields (Set) node when using JSON Output mode. It demonstrates how to define new keys (`newKey`, `array`, `object`) and embed values from the input data using n8n expressions like `{{ $json.id }}` and `{{ $json.name }}`. This template is applied to each item in the input array.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.set.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"newKey\": \"new value\",\n  \"array\": [{{ $json.id }},\"{{ $json.name }}\"],\n  \"object\": {\n    \"innerKey1\": \"new value\",\n    \"innerKey2\": \"{{ $json.id }}\",\n    \"innerKey3\": \"{{ $json.name }}\",\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in n8n JavaScript\nDESCRIPTION: Contains n8n instance configuration environment variables (refer to `/hosting/configuration/environment-variables/index.md`). This metadata property is available for use within the Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/n8n-metadata.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n$env\n```\n\n----------------------------------------\n\nTITLE: Enabling S3 Storage Mode for Binary Data in n8n\nDESCRIPTION: Shell commands to configure n8n to use S3 as the default storage mode for binary data while keeping filesystem as a fallback option.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/scaling/external-storage.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nexport N8N_AVAILABLE_BINARY_DATA_MODES=filesystem,s3\nexport N8N_DEFAULT_BINARY_DATA_MODE=s3\n```\n\n----------------------------------------\n\nTITLE: Aggregating Multiple Items into Single Item via n8n Code Node in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to use the n8n Code node to aggregate multiple incoming items into a single output item. It retrieves all input items using `$input.all()`, extracts the `json` property from each using `.map()`, and combines them into a single array assigned to the `data_object` key within the new single output item's `json` structure.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/courses/level-two/chapter-1.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\n    return [\n    \t{\n        \tjson: {\n        \t\tdata_object: $input.all().map(item => item.json)\n        \t}\n        }\n      ];\n```\n```\n\n----------------------------------------\n\nTITLE: Splitting Single Item into Multiple Items via n8n Code Node in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the n8n Code node to transform a single input item containing an array (under the `json.data` key) into multiple output items. It uses the `.map()` function to iterate over the nested array and create a new item structure `{ json: item }` for each element, effectively splitting the data. It assumes the node runs once for all items and targets the first input item (`$input.first()`).\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/courses/level-two/chapter-1.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nreturn $input.first().json.data.map(item => {\n        return {\n            json: item\n        }\n    });\n```\n```\n\n----------------------------------------\n\nTITLE: Increasing Old Memory Space in Node.js for n8n\nDESCRIPTION: Command to increase the old memory space in Node.js to avoid 'JavaScript heap out of memory' errors when self-hosting n8n. This sets the V8 option for maximum old space size.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/scaling/memory-errors.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--max-old-space-size=SIZE\n```\n\n----------------------------------------\n\nTITLE: Specifying Kubernetes Pod Resources in YAML\nDESCRIPTION: YAML configuration for defining resource requests and limits for Kubernetes pods, setting memory constraints for containers.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/google-cloud.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  requests:\n    memory: \"250Mi\"\n  limits:\n    memory: \"500Mi\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Step n8n Workflow with External Integrations - JSON\nDESCRIPTION: This JSON snippet describes a full n8n workflow containing nodes for HTTP requests, Airtable lookups, Gmail interactions, Discord messaging, file transformations, and date formatting. It outlines the structure, parameters, processing order, credential references, and connection logic between nodes. Dependencies include a working n8n instance with relevant node credentials (such as Discord webhook and Gmail setup). Inputs and outputs are determined by each node's parameters, orchestrating multi-service automations as specified. Workflow complexity is managed through conditional branching, data merges, and looping constructs, requiring users to configure each node to match their own service accounts and requirements.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/courses/level-two/chapter-5/chapter-5.2.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"parameters\": {\n        \"operation\": \"formatDate\",\n        \"date\": \"={{ $json.customerSince }}\",\n        \"options\": {\n            \"includeInputFields\": true\n        }\n    },\n    \"id\": \"c96fae90-e080-48dd-9bff-3e4506aafb86\",\n    \"name\": \"Date & Time\",\n    \"type\": \"n8n-nodes-base.dateTime\",\n    \"typeVersion\": 2,\n    \"position\": [\n        2100,\n        700\n    ]\n},\n{\n    \"parameters\": {\n        \"options\": {\n            \"fileName\": \"={{$runIndex > 0 ? 'file_low_orders':'file_high_orders'}}\"\n        }\n    },\n    \"id\": \"43dc8634-2f16-442b-a754-89f47c51c591\",\n    \"name\": \"Convert to File1\",\n    \"type\": \"n8n-nodes-base.convertToFile\",\n    \"typeVersion\": 1.1,\n    \"position\": [\n        2320,\n        700\n    ]\n},\n{\n    \"parameters\": {\n        \"authentication\": \"webhook\",\n        \"content\": \"I created the spreadsheet {file name}. My ID: 123\",\n        \"options\": {}\n    },\n    \"id\": \"05da1c22-d1f6-4ea6-9102-f74f9ae2e9d3\",\n    \"name\": \"Discord1\",\n    \"type\": \"n8n-nodes-base.discord\",\n    \"typeVersion\": 2,\n    \"position\": [\n        2540,\n        700\n    ],\n    \"credentials\": {\n        \"discordWebhookApi\": {\n            \"id\": \"WEBrtPdoLrhlDYKr\",\n            \"name\": \"L2 Course Discord Webhook account\"\n        }\n    }\n},\n\"connections\": {\n    \"Gmail\": {\n        \"main\": [\n            [\n                {\n                    \"node\": \"Discord\",\n                    \"type\": \"main\",\n                    \"index\": 0\n                }\n            ]\n        ]\n    },\n    \"When clicking \\\"Test workflow\\\"\": {\n        \"main\": [\n            [\n                {\n                    \"node\": \"HTTP Request\",\n                    \"type\": \"main\",\n                    \"index\": 0\n                },\n                {\n                    \"node\": \"Airtable\",\n                    \"type\": \"main\",\n                    \"index\": 0\n                }\n            ]\n        ]\n    },\n    \"HTTP Request\": {\n        \"main\": [\n            [\n                {\n                    \"node\": \"Merge\",\n                    \"type\": \"main\",\n                    \"index\": 0\n                }\n            ]\n        ]\n    },\n    \"Airtable\": {\n        \"main\": [\n            [\n                {\n                    \"node\": \"Merge\",\n                    \"type\": \"main\",\n                    \"index\": 1\n                }\n            ]\n        ]\n    },\n    \"Merge\": {\n        \"main\": [\n            [\n                {\n                    \"node\": \"Sort\",\n                    \"type\": \"main\",\n                    \"index\": 0\n                }\n            ]\n        ]\n    },\n    \"Sort\": {\n        \"main\": [\n            [\n                {\n                    \"node\": \"Loop Over Items\",\n                    \"type\": \"main\",\n                    \"index\": 0\n                },\n                {\n                    \"node\": \"If\",\n                    \"type\": \"main\",\n                    \"index\": 0\n                }\n            ]\n        ]\n    },\n    \"If\": {\n        \"main\": [\n            [\n                {\n                    \"node\": \"Convert to File\",\n                    \"type\": \"main\",\n                    \"index\": 0\n                }\n            ]\n        ]\n    },\n    \"Convert to File\": {\n        \"main\": [\n            [\n                {\n                    \"node\": \"Gmail\",\n                    \"type\": \"main\",\n                    \"index\": 0\n                }\n            ]\n        ]\n    },\n    \"Loop Over Items\": {\n        \"main\": [\n            null,\n            [\n                {\n                    \"node\": \"Edit Fields\",\n                    \"type\": \"main\",\n                    \"index\": 0\n                }\n            ]\n        ]\n    },\n    \"Edit Fields\": {\n        \"main\": [\n            [\n                {\n                    \"node\": \"Date & Time\",\n                    \"type\": \"main\",\n                    \"index\": 0\n                }\n            ]\n        ]\n    },\n    \"Date & Time\": {\n        \"main\": [\n            [\n                {\n                    \"node\": \"Convert to File1\",\n                    \"type\": \"main\",\n                    \"index\": 0\n                }\n            ]\n        ]\n    },\n    \"Convert to File1\": {\n        \"main\": [\n            [\n                {\n                    \"node\": \"Discord1\",\n                    \"type\": \"main\",\n                    \"index\": 0\n                }\n            ]\n        ]\n    },\n    \"Discord1\": {\n        \"main\": [\n            [\n                {\n                    \"node\": \"Loop Over Items\",\n                    \"type\": \"main\",\n                    \"index\": 0\n                }\n            ]\n        ]\n    }\n},\n\"pinData\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Rows with Parameterized Queries in MySQL - SQL\nDESCRIPTION: This SQL snippet demonstrates a parameterized SELECT statement that retrieves all columns from a specified table where the email matches a parameter value. The use of dollar-prefixed placeholders (e.g., $1:name and $2) allows dynamic substitution using n8n's query parameterization, helping prevent SQL injection. '$1:name' is typically replaced with a table name, while '$2' stands for a user-supplied value such as an email address. Requires MySQL database and that the n8n node supports this parameter syntax.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.mysql/index.md#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM $1:name WHERE email = $2;\n```\n\n----------------------------------------\n\nTITLE: Defining the Main FriendGrid Node Class Skeleton (TypeScript)\nDESCRIPTION: This code outlines the skeleton of the FriendGrid node, which implements the INodeType interface, providing n8n-specific configuration details such as description and parameters. The class must export an execute method that contains the main logic for API calls. File and class names should match, with the example here being FriendGrid and FriendGrid.node.ts. Initially, property and logic definitions are placeholders.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/programmatic-style-node.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class FriendGrid implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\t// Basic node details will go here\n\t\tproperties: [\n\t\t\t// Resources and operations will go here\n\t\t],\n\t};\n\t// The execute method will go here\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Workflow Configuration for Processing Sales Data in n8n\nDESCRIPTION: Complete workflow configuration in JSON format that processes customer order data, sorts it by price, formats dates, creates CSV files, and sends notifications to Discord. The workflow includes manual trigger, HTTP requests, item processing, and file conversion nodes.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/courses/level-two/chapter-5/chapter-5.2.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"meta\": {\n        \"templateCredsSetupCompleted\": true,\n        \"instanceId\": \"cb484ba7b742928a2048bf8829668bed5b5ad9787579adea888f05980292a4a7\"\n    },\n    \"nodes\": [\n        {\n        \"parameters\": {\n            \"sendTo\": \"bart@n8n.io\",\n            \"subject\": \"Your TPS Reports\",\n            \"emailType\": \"text\",\n            \"message\": \"Please find your TPS report attached.\",\n            \"options\": {\n            \"attachmentsUi\": {\n                \"attachmentsBinary\": [\n                {}\n                ]\n            }\n            }\n        },\n        \"id\": \"d889eb42-8b34-4718-b961-38c8e7839ea6\",\n        \"name\": \"Gmail\",\n        \"type\": \"n8n-nodes-base.gmail\",\n        \"typeVersion\": 2.1,\n        \"position\": [\n            2100,\n            500\n        ],\n        \"credentials\": {\n            \"gmailOAuth2\": {\n            \"id\": \"HFesCcFcn1NW81yu\",\n            \"name\": \"Gmail account 7\"\n            }\n        }\n        },\n        {\n        \"parameters\": {},\n        \"id\": \"c0236456-40be-4f8f-a730-e56cb62b7b5c\",\n        \"name\": \"When clicking \\\"Test workflow\\\"\",\n        \"type\": \"n8n-nodes-base.manualTrigger\",\n        \"typeVersion\": 1,\n        \"position\": [\n            780,\n            600\n        ]\n        },\n        {\n        \"parameters\": {\n            \"url\": \"https://internal.users.n8n.cloud/webhook/level2-erp\",\n            \"authentication\": \"genericCredentialType\",\n            \"genericAuthType\": \"httpHeaderAuth\",\n            \"sendHeaders\": true,\n            \"headerParameters\": {\n            \"parameters\": [\n                {\n                \"name\": \"unique_id\",\n                \"value\": \"recFIcD6UlSyxaVMQ\"\n                }\n            ]\n            },\n            \"options\": {}\n        },\n        \"id\": \"cc106fa0-6630-4c84-aea4-a4c7a3c149e9\",\n        \"name\": \"HTTP Request\",\n        \"type\": \"n8n-nodes-base.httpRequest\",\n        \"typeVersion\": 4.1,\n        \"position\": [\n            1000,\n            500\n        ],\n        \"credentials\": {\n            \"httpHeaderAuth\": {\n            \"id\": \"qeHdJdqqqaTC69cm\",\n            \"name\": \"Course L2 Credentials\"\n            }\n        }\n        },\n        {\n        \"parameters\": {\n            \"operation\": \"search\",\n            \"base\": {\n            \"__rl\": true,\n            \"value\": \"apprtKkVasbQDbFa1\",\n            \"mode\": \"list\",\n            \"cachedResultName\": \"All your base\",\n            \"cachedResultUrl\": \"https://airtable.com/apprtKkVasbQDbFa1\"\n            },\n            \"table\": {\n            \"__rl\": true,\n            \"value\": \"tblInZ7jeNdlUOvxZ\",\n            \"mode\": \"list\",\n            \"cachedResultName\": \"Course L2, Workflow 1\",\n            \"cachedResultUrl\": \"https://airtable.com/apprtKkVasbQDbFa1/tblInZ7jeNdlUOvxZ\"\n            },\n            \"options\": {}\n        },\n        \"id\": \"e5ae1927-b531-401c-9cb2-ecf1f2836ba6\",\n        \"name\": \"Airtable\",\n        \"type\": \"n8n-nodes-base.airtable\",\n        \"typeVersion\": 2,\n        \"position\": [\n            1000,\n            700\n        ],\n        \"credentials\": {\n            \"airtableTokenApi\": {\n            \"id\": \"MIplo6lY3AEsdf7L\",\n            \"name\": \"Airtable Personal Access Token account 4\"\n            }\n        }\n        },\n        {\n        \"parameters\": {\n            \"mode\": \"combine\",\n            \"mergeByFields\": {\n            \"values\": [\n                {\n                \"field1\": \"customerID\",\n                \"field2\": \"customerID\"\n                }\n            ]\n            },\n            \"options\": {}\n        },\n        \"id\": \"1cddc984-7fca-45e0-83b8-0c502cb4c78c\",\n        \"name\": \"Merge\",\n        \"type\": \"n8n-nodes-base.merge\",\n        \"typeVersion\": 2.1,\n        \"position\": [\n            1220,\n            600\n        ]\n        },\n        {\n        \"parameters\": {\n            \"sortFieldsUi\": {\n            \"sortField\": [\n                {\n                \"fieldName\": \"orderPrice\",\n                \"order\": \"descending\"\n                }\n            ]\n            },\n            \"options\": {}\n        },\n        \"id\": \"2f55af2e-f69b-4f61-a9e5-c7eefaad93ba\",\n        \"name\": \"Sort\",\n        \"type\": \"n8n-nodes-base.sort\",\n        \"typeVersion\": 1,\n        \"position\": [\n            1440,\n            600\n        ]\n        },\n        {\n        \"parameters\": {\n            \"conditions\": {\n            \"options\": {\n                \"caseSensitive\": true,\n                \"leftValue\": \"\",\n                \"typeValidation\": \"strict\"\n            },\n            \"conditions\": [\n                {\n                \"id\": \"d3afe65c-7c80-4caa-9d1c-33c62fbc2197\",\n                \"leftValue\": \"={{ $json.region }}\",\n                \"rightValue\": \"Americas\",\n                \"operator\": {\n                    \"type\": \"string\",\n                    \"operation\": \"equals\",\n                    \"name\": \"filter.operator.equals\"\n                }\n                }\n            ],\n            \"combinator\": \"and\"\n            },\n            \"options\": {}\n        },\n        \"id\": \"2ed874a9-5bcf-4cc9-9b52-ea503a562892\",\n        \"name\": \"If\",\n        \"type\": \"n8n-nodes-base.if\",\n        \"typeVersion\": 2,\n        \"position\": [\n            1660,\n            500\n        ]\n        },\n        {\n        \"parameters\": {\n            \"operation\": \"toJson\",\n            \"mode\": \"each\",\n            \"options\": {\n            \"fileName\": \"=report_orderID_{{ $('If').item.json.orderID }}.json\"\n            }\n        },\n        \"id\": \"d93b4429-2200-4a84-8505-16266fedfccd\",\n        \"name\": \"Convert to File\",\n        \"type\": \"n8n-nodes-base.convertToFile\",\n        \"typeVersion\": 1.1,\n        \"position\": [\n            1880,\n            500\n        ]\n        },\n        {\n        \"parameters\": {\n            \"authentication\": \"webhook\",\n            \"content\": \"I sent the file using email with the label ID  and wrote the binary file {file name}. My ID: 123\",\n            \"options\": {}\n        },\n        \"id\": \"26f43f2c-1422-40de-9f40-dd2d80926b1c\",\n        \"name\": \"Discord\",\n        \"type\": \"n8n-nodes-base.discord\",\n        \"typeVersion\": 2,\n        \"position\": [\n            2320,\n            500\n        ],\n        \"credentials\": {\n            \"discordWebhookApi\": {\n            \"id\": \"WEBrtPdoLrhlDYKr\",\n            \"name\": \"L2 Course Discord Webhook account\"\n            }\n        }\n        },\n        {\n        \"parameters\": {\n            \"batchSize\": 5,\n            \"options\": {}\n        },\n        \"id\": \"0fa1fbf6-fe77-4044-a445-c49a1db37dec\",\n        \"name\": \"Loop Over Items\",\n        \"type\": \"n8n-nodes-base.splitInBatches\",\n        \"typeVersion\": 3,\n        \"position\": [\n            1660,\n            700\n        ]\n        },\n        {\n        \"parameters\": {\n            \"assignments\": {\n            \"assignments\": [\n                {\n                \"id\": \"ce839b80-c50d-48f5-9a24-bb2df6fdd2ff\",\n                \"name\": \"customerEmail\",\n                \"value\": \"={{ $json.customerEmail }}\",\n                \"type\": \"string\"\n                },\n                {\n                \"id\": \"0c613366-3808-45a2-89cc-b34c7b9f3fb7\",\n                \"name\": \"region\",\n                \"value\": \"={{ $json.region }}\",\n                \"type\": \"string\"\n                },\n                {\n                \"id\": \"0f19a88c-deb0-4119-8965-06ed62a840b2\",\n                \"name\": \"customerSince\",\n                \"value\": \"={{ $json.customerSince }}\",\n                \"type\": \"string\"\n                },\n                {\n                \"id\": \"a7e890d6-86af-4839-b5df-d2a4efe923f7\",\n                \"name\": \"orderPrice\",\n                \"value\": \"={{ $json.orderPrice }}\",\n                \"type\": \"number\"\n                }\n            ]\n            },\n            \"options\": {}\n        },\n        \"id\": \"09b8584c-4ead-4007-a6cd-edaa4669a757\",\n        \"name\": \"Edit Fields\",\n        \"type\": \"n8n-nodes-base.set\",\n        \"typeVersion\": 3.3,\n        \"position\": [\n            1880,\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in n8n Python\nDESCRIPTION: Contains n8n instance configuration environment variables (refer to `/hosting/configuration/environment-variables/index.md`). This metadata property is available for use within the Python Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/n8n-metadata.md#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n_env\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Output from Previous Node in n8n\nDESCRIPTION: Example JSON data representing an array of user records with ID and name properties. This illustrates the structure of data that might be output from a previous node in an n8n workflow.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/data/data-mapping/data-mapping-expressions.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": \"23423532\",\n    \"name\": \"Jay Gatsby\",\n  },\n  {\n    \"id\": \"23423533\",\n    \"name\": \"José Arcadio Buendía\",\n  },\n  {\n    \"id\": \"23423534\",\n    \"name\": \"Max Sendak\",\n  },\n  {\n    \"id\": \"23423535\",\n    \"name\": \"Zaphod Beeblebrox\",\n  },\n  {\n    \"id\": \"23423536\",\n    \"name\": \"Edmund Pevensie\",\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Preparing a Parameterized 'IN' Query with Empty Placeholder - Postgres - SQL\nDESCRIPTION: This SQL snippet prepares a query to select color and shirt_size from shirts where the shirt_size matches any of a parameterized set of values (to be supplied at execution). The IN clause is intentionally left empty, as it will be dynamically populated in n8n workflows via expressions. This approach is used in conjunction with n8n's query parameterization for improved security and input sanitization. Expected usage involves replacing the parentheses contents with dynamic placeholders.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.postgres/common-issues.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT color, shirt_size FROM shirts WHERE shirt_size IN ();\n```\n\n----------------------------------------\n\nTITLE: Implementing the Execute Method to Create Contacts (TypeScript)\nDESCRIPTION: This block defines the core execute logic for the FriendGrid node: iterating over input items, extracting email and additional fields, constructing the payload, and sending authenticated HTTP requests to the SendGrid /v3/marketing/contacts endpoint. It utilizes requestWithAuthentication to handle OAuth or API key-based authentication with the specified credentials. The snippet includes data normalization to match SendGrid's API structure and aggregates responses to the n8n output. Limitations: designed for batch input, handles only the 'create contact' operation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/programmatic-style-node.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Handle data coming from previous nodes\nconst items = this.getInputData();\nlet responseData;\nconst returnData = [];\nconst resource = this.getNodeParameter('resource', 0) as string;\nconst operation = this.getNodeParameter('operation', 0) as string;\n\n// For each item, make an API call to create a contact\nfor (let i = 0; i < items.length; i++) {\n\tif (resource === 'contact') {\n\t\tif (operation === 'create') {\n\t\t\t// Get email input\n\t\t\tconst email = this.getNodeParameter('email', i) as string;\n\t\t\t// Get additional fields input\n\t\t\tconst additionalFields = this.getNodeParameter('additionalFields', i) as IDataObject;\n\t\t\tconst data: IDataObject = {\n\t\t\t\temail,\n\t\t\t};\n\n\t\t\tObject.assign(data, additionalFields);\n\n\t\t\t// Make HTTP request according to https://sendgrid.com/docs/api-reference/\n\t\t\tconst options: OptionsWithUri = {\n\t\t\t\theaders: {\n\t\t\t\t\t'Accept': 'application/json',\n\t\t\t\t},\n\t\t\t\tmethod: 'PUT',\n\t\t\t\tbody: {\n\t\t\t\t\tcontacts: [\n\t\t\t\t\t\tdata,\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\turi: `https://api.sendgrid.com/v3/marketing/contacts`,\n\t\t\t\tjson: true,\n\t\t\t};\n\t\t\tresponseData = await this.helpers.requestWithAuthentication.call(this, 'friendGridApi', options);\n\t\t\treturnData.push(responseData);\n\t\t}\n\t}\n}\n// Map data to n8n data structure\nreturn [this.helpers.returnJsonArray(returnData)];\n```\n\n----------------------------------------\n\nTITLE: Getting Item Index in n8n JavaScript Expressions\nDESCRIPTION: Represents the index of the current item within a list of items being processed by a node. This variable is available in expressions but *not* within the Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/n8n-metadata.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n$itemIndex\n```\n\n----------------------------------------\n\nTITLE: Accessing Order Status with n8n Expression\nDESCRIPTION: This n8n expression is used within the 'value1' field of an If node. It dynamically retrieves the value of the 'orderStatus' property from the JSON data output by the preceding node in the workflow. This allows the If node to perform conditional checks based on the status of each incoming order.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/courses/level-one/chapter-5/chapter-5.3.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{{ $json.orderStatus }}\n```\n\n----------------------------------------\n\nTITLE: Running n8n with PostgreSQL in Docker\nDESCRIPTION: This command runs n8n with PostgreSQL as the database, using environment variables to configure the connection. Replace placeholders with actual database credentials.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/docker.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker volume create n8n_data\n\ndocker run -it --rm \\\n --name n8n \\\n -p 5678:5678 \\\n -e DB_TYPE=postgresdb \\\n -e DB_POSTGRESDB_DATABASE=<POSTGRES_DATABASE> \\\n -e DB_POSTGRESDB_HOST=<POSTGRES_HOST> \\\n -e DB_POSTGRESDB_PORT=<POSTGRES_PORT> \\\n -e DB_POSTGRESDB_USER=<POSTGRES_USER> \\\n -e DB_POSTGRESDB_SCHEMA=<POSTGRES_SCHEMA> \\\n -e DB_POSTGRESDB_PASSWORD=<POSTGRES_PASSWORD> \\\n -v n8n_data:/home/node/.n8n \\\n docker.n8n.io/n8nio/n8n\n```\n\n----------------------------------------\n\nTITLE: Accessing and Managing Global Workflow Static Data - JavaScript\nDESCRIPTION: This snippet demonstrates retrieving, reading, updating, and deleting a 'lastExecution' property from global workflow static data in n8n using JavaScript. It utilizes the $getWorkflowStaticData function to persist data across workflow executions. Requires n8n workflow execution with global static data support enabled; not available when testing. Accepts a string ('global') indicating the data scope and returns an object whose properties may be read, written, or deleted. The data is saved if changed upon workflow success.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/builtin/get-workflow-static-data.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Get the global workflow static data\\nconst workflowStaticData = $getWorkflowStaticData('global');\\n\\n// Access its data\\nconst lastExecution = workflowStaticData.lastExecution;\\n\\n// Update its data\\nworkflowStaticData.lastExecution = new Date().getTime();\\n\\n// Delete data\\ndelete workflowStaticData.lastExecution;\n```\n\n----------------------------------------\n\nTITLE: Starting Redis Container using Docker Command\nDESCRIPTION: Runs a Docker command to start a Redis container named `some-redis`. It maps the container's port 6379 to the host's port 6379 and runs the container in detached mode (`-d`). Redis serves as the required message broker for n8n's queue mode.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/scaling/queue-mode.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name some-redis -p 6379:6379  -d redis\n```\n\n----------------------------------------\n\nTITLE: Performing Authenticated and Unauthenticated HTTP Requests in n8n (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to use n8n's built-in HTTP helpers for performing requests within a node. It shows both unauthenticated and credential-based authentication calls, using the 'this.helpers.httpRequest' and 'this.helpers.httpRequestWithAuthentication.call' methods, respectively. The snippet emphasizes the preferred practice of using n8n's modular request utilities instead of third-party libraries, ensuring better security and maintainability. The key parameter is the 'options' object describing the HTTP request; for authenticated calls, a credential type name must also be specified.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/code-standards.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// If no auth needed\nconst response = await this.helpers.httpRequest(options);\n\n// If auth needed\nconst response = await this.helpers.httpRequestWithAuthentication.call(\n\tthis, \n\t'credentialTypeName', // For example: pipedriveApi\n\toptions,\n);\n```\n\n----------------------------------------\n\nTITLE: Defining an n8n Workflow for JSON to File Conversion and Disk I/O\nDESCRIPTION: This JSON object defines an n8n workflow. It starts with a manual trigger, fetches JSON data from the Poetry DB API (`https://poetrydb.org/random/1`) using an `HTTP Request` node, converts this JSON data into a binary file format using the `Convert to File` node (operation 'toJson'), writes the binary data to a file (`/tmp/poetrydb.json`) on the disk using a `Read/Write Files from Disk` node (operation 'write'), and finally reads the same file back using another `Read/Write Files from Disk` node (operation 'read'). The `connections` object defines the sequential execution flow between these nodes.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/courses/level-two/chapter-2.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"JSON to file and Read-Write\",\n\t\"nodes\": [\n\t\t{\n\t\t\"parameters\": {},\n\t\t\"id\": \"78639a25-b69a-4b9c-84e0-69e045bed1a3\",\n\t\t\"name\": \"When clicking \\\"Execute Workflow\\\"\",\n\t\t\"type\": \"n8n-nodes-base.manualTrigger\",\n\t\t\"typeVersion\": 1,\n\t\t\"position\": [\n\t\t\t480,\n\t\t\t520\n\t\t]\n\t\t},\n\t\t{\n\t\t\"parameters\": {\n\t\t\t\"url\": \"https://poetrydb.org/random/1\",\n\t\t\t\"options\": {}\n\t\t},\n\t\t\"id\": \"a11310df-1287-4e9a-b993-baa6bd4265a6\",\n\t\t\"name\": \"HTTP Request\",\n\t\t\"type\": \"n8n-nodes-base.httpRequest\",\n\t\t\"typeVersion\": 4.1,\n\t\t\"position\": [\n\t\t\t680,\n\t\t\t520\n\t\t]\n\t\t},\n\t\t{\n\t\t\"parameters\": {\n\t\t\t\"operation\": \"toJson\",\n\t\t\t\"options\": {}\n\t\t},\n\t\t\"id\": \"06be18f6-f193-48e2-a8d9-35f4779d8324\",\n\t\t\"name\": \"Convert to File\",\n\t\t\"type\": \"n8n-nodes-base.convertToFile\",\n\t\t\"typeVersion\": 1,\n\t\t\"position\": [\n\t\t\t880,\n\t\t\t520\n\t\t]\n\t\t},\n\t\t{\n\t\t\"parameters\": {\n\t\t\t\"operation\": \"write\",\n\t\t\t\"fileName\": \"/tmp/poetrydb.json\",\n\t\t\t\"options\": {}\n\t\t},\n\t\t\"id\": \"f2048e5d-fa8f-4708-b15a-d07de359f2e5\",\n\t\t\"name\": \"Read/Write Files from Disk\",\n\t\t\"type\": \"n8n-nodes-base.readWriteFile\",\n\t\t\"typeVersion\": 1,\n\t\t\"position\": [\n\t\t\t1080,\n\t\t\t520\n\t\t]\n\t\t},\n\t\t{\n\t\t\"parameters\": {\n\t\t\t\"fileSelector\": \"={{ $json.fileName }}\",\n\t\t\t\"options\": {}\n\t\t},\n\t\t\"id\": \"d630906c-09d4-49f4-ba14-416c0f4de1c8\",\n\t\t\"name\": \"Read/Write Files from Disk1\",\n\t\t\"type\": \"n8n-nodes-base.readWriteFile\",\n\t\t\"typeVersion\": 1,\n\t\t\"position\": [\n\t\t\t1280,\n\t\t\t520\n\t\t]\n\t\t}\n\t],\n\t\"pinData\": {},\n\t\"connections\": {\n\t\t\"When clicking \\\"Execute Workflow\\\"\": {\n\t\t\"main\": [\n\t\t\t[\n\t\t\t{\n\t\t\t\t\"node\": \"HTTP Request\",\n\t\t\t\t\"type\": \"main\",\n\t\t\t\t\"index\": 0\n\t\t\t}\n\t\t\t]\n\t\t]\n\t\t},\n\t\t\"HTTP Request\": {\n\t\t\"main\": [\n\t\t\t[\n\t\t\t{\n\t\t\t\t\"node\": \"Convert to File\",\n\t\t\t\t\"type\": \"main\",\n\t\t\t\t\"index\": 0\n\t\t\t}\n\t\t\t]\n\t\t]\n\t\t},\n\t\t\"Convert to File\": {\n\t\t\"main\": [\n\t\t\t[\n\t\t\t{\n\t\t\t\t\"node\": \"Read/Write Files from Disk\",\n\t\t\t\t\"type\": \"main\",\n\t\t\t\t\"index\": 0\n\t\t\t}\n\t\t\t]\n\t\t]\n\t\t},\n\t\t\"Read/Write Files from Disk\": {\n\t\t\"main\": [\n\t\t\t[\n\t\t\t{\n\t\t\t\t\"node\": \"Read/Write Files from Disk1\",\n\t\t\t\t\"type\": \"main\",\n\t\t\t\t\"index\": 0\n\t\t\t}\n\t\t\t]\n\t\t]\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing and linking a custom node locally\nDESCRIPTION: These commands build the custom node, publish it locally, and create a symlink for npm.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/integrations/creating-nodes/testing.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# In your node directory\nnpm run build\nnpm link\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgresDB Connection Settings for n8n via Bash Environment Variables (Bash)\nDESCRIPTION: This Bash snippet demonstrates how to export the necessary environment variables to configure n8n to use a PostgresDB backend. It covers core settings such as database host, schema, and user credentials, as well as optional TLS-related variables like CA certificate and SSL rejection policy. Running 'n8n start' will launch n8n with these settings applied. Dependencies: n8n must be installed, and the target PostgreSQL instance must be accessible. Parameters include host details, schema name, and optional certificate paths; output is the initialized n8n instance using PostgresDB. Ensure variables match your PostgreSQL deployment.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/supported-databases-settings.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport DB_TYPE=postgresdb\\nexport DB_POSTGRESDB_DATABASE=n8n\\nexport DB_POSTGRESDB_HOST=postgresdb\\nexport DB_POSTGRESDB_PORT=5432\\nexport DB_POSTGRESDB_USER=n8n\\nexport DB_POSTGRESDB_PASSWORD=n8n\\nexport DB_POSTGRESDB_SCHEMA=n8n\\n\\n# optional:\\nexport DB_POSTGRESDB_SSL_CA=$(pwd)/ca.crt\\nexport DB_POSTGRESDB_SSL_REJECT_UNAUTHORIZED=false\\n\\nn8n start\n```\n\n----------------------------------------\n\nTITLE: Referencing Input Parameters in JSON Expression\nDESCRIPTION: This JSON snippet shows how to reference input parameters within an n8n node using the expression `{{ $input.params }}`. It exemplifies a common scenario that could lead to a 'Can't get data for expression' error if the node is tested or run without preceding input data that defines these parameters.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/expressions/common-issues.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"my_field_1\": {{ $input.params }}\n}\n```\n\n----------------------------------------\n\nTITLE: Generating RSS Feed URLs in n8n Code Node (JavaScript)\nDESCRIPTION: This JavaScript code snippet is used within an n8n Code node configured to run once. It creates an array of objects, where each object contains a 'json' property holding a 'url' for a different RSS feed. The array is returned as the output, providing input items for the subsequent nodes in the workflow, specifically a loop node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/courses/level-two/chapter-3.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet urls = [\n\t{\n\t\tjson: {\n\t\turl: 'https://medium.com/feed/n8n-io'\n\t\t}\n\t},\n\t{\n\tjson: {\n\t\turl: 'https://dev.to/feed/n8n'\n\t\t}\n\t}\n]\nreturn urls;\n```\n\n----------------------------------------\n\nTITLE: Defining a Declarative n8n Node for FriendGrid Integration - JavaScript\nDESCRIPTION: This snippet demonstrates a declarative n8n node implementation for FriendGrid, relying on JSON-based configuration and omitting explicit execute methods. Key dependencies include n8n-workflow, and the class exposes an INodeTypeDescription that configures requestDefaults for base URL, node properties, and REST request routing. The routing object within operation options declaratively specifies request method, endpoint, body parameters, and an output transformation step. Parameters like operation and email are defined structurally. This pattern delegates more work to the n8n framework, reducing boilerplate and minimizing the risk of code errors.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/plan/choose-node-method.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { INodeType, INodeTypeDescription } from 'n8n-workflow';\n\n// Create the FriendGrid class\nexport class FriendGrid implements INodeType {\n  description: INodeTypeDescription = {\n    displayName: 'FriendGrid',\n    name: 'friendGrid',\n    . . .\n    // Set up the basic request configuration\n    requestDefaults: {\n      baseURL: 'https://api.sendgrid.com/v3/marketing'\n    },\n    properties: [\n      {\n        displayName: 'Resource',\n        . . .\n      },\n      {\n        displayName: 'Operation',\n        name: 'operation',\n        type: 'options',\n        displayOptions: {\n          show: {\n            resource: [\n              'contact',\n            ],\n          },\n        },\n        options: [\n          {\n            name: 'Create',\n            value: 'create',\n            description: 'Create a contact',\n            // Add the routing object\n            routing: {\n              request: {\n                method: 'POST',\n                url: '=/contacts',\n                send: {\n                  type: 'body',\n                  properties: {\n                    email: {{$parameter[\"email\"]}}\n                  }\n                }\n              }\n            },\n            // Handle the response to contact creation\n            output: {\n              postReceive: [\n                {\n                  type: 'set',\n                  properties: {\n                    value: '={{ { \"success\": $response } }}'\n                  }\n                }\n              ]\n            }\n          },\n        ],\n        default: 'create',\n        description: 'The operation to perform.',\n      },\n      {\n        displayName: 'Email',\n        . . .\n      },\n      {\n        displayName: 'Additional Fields',\n        // Sets up optional fields\n      },\n    ],\n  }\n  // No execute method needed\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Invalid Syntax Error in JSX Expression\nDESCRIPTION: This JSX-like snippet demonstrates a common cause for the 'Invalid syntax' error in n8n expressions. The expression `{{ $('If').item.json. }}` contains a trailing period, which is syntactically incorrect. This example highlights the need to carefully check expression syntax according to n8n documentation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/expressions/common-issues.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  \"my_field_1\": \"value\",\n  \"my_field_2\": {{ $('If').item.json. }}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Data Pruning with Docker in n8n\nDESCRIPTION: This snippet demonstrates how to enable automatic data pruning and set the maximum age of data using environment variables when running n8n in a Docker container.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/scaling/execution-data.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -it --rm \\\n --name n8n \\\n -p 5678:5678 \\\n -e EXECUTIONS_DATA_PRUNE=true \\\n -e EXECUTIONS_DATA_MAX_AGE=168 \\\n docker.n8n.io/n8nio/n8n\n```\n\n----------------------------------------\n\nTITLE: Accessing Static Workflow Data in n8n Python\nDESCRIPTION: Retrieves static workflow data of a specified `type`. Static data doesn't persist during workflow testing; the workflow must be active and triggered to save it. See an [example](/code/cookbook/builtin/get-workflow-static-data.md). This method is available for use within the Python Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/n8n-metadata.md#2025-04-22_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n_getWorkflowStaticData(type)\n```\n\n----------------------------------------\n\nTITLE: Setting Webhook URL via Environment Variable in Bash\nDESCRIPTION: Sets the `WEBHOOK_URL` environment variable on the main n8n instance. This variable defines the public-facing URL that n8n uses for constructing webhook URLs, which is crucial when webhook traffic is handled by separate processors possibly behind a load balancer.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/scaling/queue-mode.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport WEBHOOK_URL=https://your-webhook-url.com\n```\n\n----------------------------------------\n\nTITLE: Setting Execution Mode to Queue via Environment Variable in Bash\nDESCRIPTION: Sets the `EXECUTIONS_MODE` environment variable to `queue`. This configuration is required for both the main n8n instance and all worker nodes when running n8n in queue mode for distributed workflow execution. Alternatively, this can be set via the configuration file.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/scaling/queue-mode.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport EXECUTIONS_MODE=queue\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Node Items with .all() in Python (n8n)\nDESCRIPTION: Demonstrates using the `_('<node-name>').all()` method in n8n Python expressions to retrieve all output items from a specified node. Optional `branchIndex` (output index) and `runIndex` parameters can filter the results. If no parameters are provided, it retrieves all items from the specified node's most recent run. Using `_runIndex` targets the same run as the current node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/builtin/all.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Returns all the items of the given node and current run\nallItems = _(\"<node-name>\").all();\n\n# Returns all items the node \"IF\" outputs (index: 0 which is Output \"true\" of its most recent run)\nallItems = _(\"IF\").all();\n\n# Returns all items the node \"IF\" outputs (index: 0 which is Output \"true\" of the same run as current node)\nallItems = _(\"IF\").all(0, _runIndex);\n\n# Returns all items the node \"IF\" outputs (index: 1 which is Output \"false\" of run 0 which is the first run)\nallItems = _(\"IF\").all(1, 0);\n```\n\n----------------------------------------\n\nTITLE: Accessing and Managing Global Workflow Static Data - Python\nDESCRIPTION: This snippet shows how to retrieve, read, update, and delete a 'lastExecution' property from the global workflow static data in n8n using Python. The _getWorkflowStaticData function is used to obtain an object holding persistent state across executions. This works only in active workflows and is intended for small data. Dependencies include n8n's workflow context and a Python interpreter.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/builtin/get-workflow-static-data.md#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# Get the global workflow static data\\nworkflowStaticData = _getWorkflowStaticData('global')\\n\\n# Access its data\\nlastExecution = workflowStaticData.lastExecution\\n\\n# Update its data\\nworkflowStaticData.lastExecution = new Date().getTime()\\n\\n# Delete data\\ndelete workflowStaticData.lastExecution\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Compose Configuration for n8n\nDESCRIPTION: This YAML file defines the Docker Compose configuration for running n8n with Traefik as a reverse proxy. It sets up two services: traefik for handling SSL/TLS and routing, and n8n for the main application. It also configures volumes for persistent data storage.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/docker-compose.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  traefik:\n    image: \"traefik\"\n    restart: always\n    command:\n      - \"--api=true\"\n      - \"--api.insecure=true\"\n      - \"--providers.docker=true\"\n      - \"--providers.docker.exposedbydefault=false\"\n      - \"--entrypoints.web.address=:80\"\n      - \"--entrypoints.web.http.redirections.entryPoint.to=websecure\"\n      - \"--entrypoints.web.http.redirections.entrypoint.scheme=https\"\n      - \"--entrypoints.websecure.address=:443\"\n      - \"--certificatesresolvers.mytlschallenge.acme.tlschallenge=true\"\n      - \"--certificatesresolvers.mytlschallenge.acme.email=${SSL_EMAIL}\"\n      - \"--certificatesresolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json\"\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - traefik_data:/letsencrypt\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n\n  n8n:\n    image: docker.n8n.io/n8nio/n8n\n    restart: always\n    ports:\n      - \"127.0.0.1:5678:5678\"\n    labels:\n      - traefik.enable=true\n      - traefik.http.routers.n8n.rule=Host(`${SUBDOMAIN}.${DOMAIN_NAME}`)\n      - traefik.http.routers.n8n.tls=true\n      - traefik.http.routers.n8n.entrypoints=web,websecure\n      - traefik.http.routers.n8n.tls.certresolver=mytlschallenge\n      - traefik.http.middlewares.n8n.headers.SSLRedirect=true\n      - traefik.http.middlewares.n8n.headers.STSSeconds=315360000\n      - traefik.http.middlewares.n8n.headers.browserXSSFilter=true\n      - traefik.http.middlewares.n8n.headers.contentTypeNosniff=true\n      - traefik.http.middlewares.n8n.headers.forceSTSHeader=true\n      - traefik.http.middlewares.n8n.headers.SSLHost=${DOMAIN_NAME}\n      - traefik.http.middlewares.n8n.headers.STSIncludeSubdomains=true\n      - traefik.http.middlewares.n8n.headers.STSPreload=true\n      - traefik.http.routers.n8n.middlewares=n8n@docker\n    environment:\n      - N8N_HOST=${SUBDOMAIN}.${DOMAIN_NAME}\n      - N8N_PORT=5678\n      - N8N_PROTOCOL=https\n      - NODE_ENV=production\n      - WEBHOOK_URL=https://${SUBDOMAIN}.${DOMAIN_NAME}/\n      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}\n    volumes:\n      - n8n_data:/home/node/.n8n\n      - ./local-files:/files\n\nvolumes:\n  n8n_data:\n  traefik_data:\n```\n\n----------------------------------------\n\nTITLE: Correct: Setting 'json' to an Object (JavaScript)\nDESCRIPTION: This example demonstrates the correct structure where the 'json' property is set to an object. This aligns with the requirements of n8n's expected data model for Code node outputs. The format ensures compatibility with further nodes and built-in data processing functionality.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.code/common-issues.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    \"json\": {\n\t  // Setting `json` to an object as expected\n\t}\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Rate Limit Handling Workflow Template for OpenAI in n8n\nDESCRIPTION: A workflow template that demonstrates how to handle OpenAI rate limits by implementing batch processing with Loop Over Items node and adding delay with Wait node. The workflow splits data into smaller chunks and adds wait time between API calls to prevent rate limit errors.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/integrations/openai-api-issues.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"nodes\": [\n    {\n        \"parameters\": {},\n        \"id\": \"35d05920-ad75-402a-be3c-3277bff7cc67\",\n        \"name\": \"When clicking 'Test workflow'\",\n        \"type\": \"n8n-nodes-base.manualTrigger\",\n        \"typeVersion\": 1,\n        \"position\": [\n        880,\n        400\n        ]\n    },\n    {\n        \"parameters\": {\n        \"batchSize\": 500,\n        \"options\": {}\n        },\n        \"id\": \"ae9baa80-4cf9-4848-8953-22e1b7187bf6\",\n        \"name\": \"Loop Over Items\",\n        \"type\": \"n8n-nodes-base.splitInBatches\",\n        \"typeVersion\": 3,\n        \"position\": [\n        1120,\n        420\n        ]\n    },\n    {\n        \"parameters\": {\n        \"resource\": \"chat\",\n        \"options\": {},\n        \"requestOptions\": {}\n        },\n        \"id\": \"a519f271-82dc-4f60-8cfd-533dec580acc\",\n        \"name\": \"OpenAI\",\n        \"type\": \"n8n-nodes-base.openAi\",\n        \"typeVersion\": 1,\n        \"position\": [\n        1380,\n        440\n        ]\n    },\n    {\n        \"parameters\": {\n        \"unit\": \"minutes\"\n        },\n        \"id\": \"562d9da3-2142-49bc-9b8f-71b0af42b449\",\n        \"name\": \"Wait\",\n        \"type\": \"n8n-nodes-base.wait\",\n        \"typeVersion\": 1,\n        \"position\": [\n        1620,\n        440\n        ],\n        \"webhookId\": \"714ab157-96d1-448f-b7f5-677882b92b13\"\n    }\n    ],\n    \"connections\": {\n    \"When clicking 'Test workflow'\": {\n        \"main\": [\n        [\n            {\n            \"node\": \"Loop Over Items\",\n            \"type\": \"main\",\n            \"index\": 0\n            }\n        ]\n        ]\n    },\n    \"Loop Over Items\": {\n        \"main\": [\n        null,\n        [\n            {\n            \"node\": \"OpenAI\",\n            \"type\": \"main\",\n            \"index\": 0\n            }\n        ]\n        ]\n    },\n    \"OpenAI\": {\n        \"main\": [\n        [\n            {\n            \"node\": \"Wait\",\n            \"type\": \"main\",\n            \"index\": 0\n            }\n        ]\n        ]\n    },\n    \"Wait\": {\n        \"main\": [\n        [\n            {\n            \"node\": \"Loop Over Items\",\n            \"type\": \"main\",\n            \"index\": 0\n            }\n        ]\n        ]\n    }\n    },\n    \"pinData\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Module Access in n8n Code Node\nDESCRIPTION: This snippet demonstrates how to set environment variables to enable the use of built-in and external modules in the n8n Code node. It shows examples for allowing all built-in modules, specific built-in modules, and external npm modules.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/configuration-examples/modules-in-code-node.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Allows usage of all builtin modules\nexport NODE_FUNCTION_ALLOW_BUILTIN=*\n\n# Allows usage of only crypto\nexport NODE_FUNCTION_ALLOW_BUILTIN=crypto\n\n# Allows usage of only crypto and fs\nexport NODE_FUNCTION_ALLOW_BUILTIN=crypto,fs\n\n# Allow usage of external npm modules.\nexport NODE_FUNCTION_ALLOW_EXTERNAL=moment,lodash\n```\n\n----------------------------------------\n\nTITLE: Defining a Programmatic n8n Node for FriendGrid Integration - JavaScript\nDESCRIPTION: This snippet defines a programmatic n8n node called FriendGrid using a TypeScript-like JavaScript class. It includes required dependencies (such as 'n8n-workflow'), class structure, and the 'execute' method, which handles retrieving node parameters, authenticating with credentials, assembling request payloads, and making an HTTP request to create a contact via SendGrid's API. The method also maps the API response back into the n8n expected output format. Key parameters include resource, operation, email, and additionalFields. This approach requires greater manual setup and offers full flexibility suitable for dynamic or complex integration needs.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/plan/choose-node-method.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n\tIRequestOptions,\n} from 'n8n-workflow';\n\n// Create the FriendGrid class\nexport class FriendGrid implements INodeType {\n  description: INodeTypeDescription = {\n    displayName: 'FriendGrid',\n    name: 'friendGrid',\n    . . .\n    properties: [\n      {\n        displayName: 'Resource',\n        . . .\n      },\n      {\n        displayName: 'Operation',\n        name: 'operation',\n        type: 'options',\n        displayOptions: {\n          show: {\n              resource: [\n              'contact',\n              ],\n          },\n        },\n        options: [\n          {\n            name: 'Create',\n            value: 'create',\n            description: 'Create a contact',\n          },\n        ],\n        default: 'create',\n        description: 'The operation to perform.',\n      },\n      {\n        displayName: 'Email',\n        name: 'email',\n        . . .\n      },\n      {\n        displayName: 'Additional Fields',\n        // Sets up optional fields\n      },\n    ],\n};\n\n  async execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n    let responseData;\n    const resource = this.getNodeParameter('resource', 0) as string;\n    const operation = this.getNodeParameter('operation', 0) as string;\n    //Get credentials the user provided for this node\n    const credentials = await this.getCredentials('friendGridApi') as IDataObject;\n\n    if (resource === 'contact') {\n      if (operation === 'create') {\n      // Get email input\n      const email = this.getNodeParameter('email', 0) as string;\n      // Get additional fields input\n      const additionalFields = this.getNodeParameter('additionalFields', 0) as IDataObject;\n      const data: IDataObject = {\n          email,\n      };\n\n      Object.assign(data, additionalFields);\n\n      // Make HTTP request as defined in https://sendgrid.com/docs/api-reference/\n      const options: IRequestOptions = {\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': `Bearer ${credentials.apiKey}`,\n        },\n        method: 'PUT',\n        body: {\n            contacts: [\n            data,\n            ],\n        },\n        url: `https://api.sendgrid.com/v3/marketing/contacts`,\n        json: true,\n      };\n      responseData = await this.helpers.httpRequest(options);\n      }\n    }\n    // Map data to n8n data\n    return [this.helpers.returnJsonArray(responseData)];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating n8n Data Structure in JSON\nDESCRIPTION: This JSON snippet shows the standard structure of data items passed between nodes in n8n. Each item is an object within an array, containing a mandatory 'json' key for primary data and an optional 'binary' key for file data with associated metadata like MIME type and filename.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/courses/level-one/chapter-5/chapter-5.5.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n   \t \"json\": { // (1)!\n   \t\t \"apple\": \"beets\",\n   \t\t \"carrot\": {\n   \t\t\t \"dill\": 1\n   \t\t }\n   \t },\n   \t \"binary\": { // (2)!\n   \t\t \"apple-picture\": { // (3)!\n   \t\t\t \"data\": \"....\", // (4)!\n   \t\t\t \"mimeType\": \"image/png\", // (5)!\n   \t\t\t \"fileExtension\": \"png\", // (6)!\n   \t\t\t \"fileName\": \"example.png\", // (7)!\n   \t\t }\n   \t }\n    },\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring External Task Runner Container\nDESCRIPTION: Environment variables and settings for configuring a task runner container in external mode. This includes authentication, concurrency settings, broker URI, auto-shutdown timeout, memory limits, and timezone configuration.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/task-runners.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nN8N_RUNNERS_AUTH_TOKEN=<random secure shared secret>\nN8N_RUNNERS_MAX_CONCURRENCY=5\nN8N_RUNNERS_TASK_BROKER_URI=localhost:5679\nN8N_RUNNERS_AUTO_SHUTDOWN_TIMEOUT=15\nNODE_OPTIONS=--max-old-space-size=<limit>\nGENERIC_TIMEZONE=<timezone>\n```\n\n----------------------------------------\n\nTITLE: Enabling Data Pruning with Docker Compose in n8n\nDESCRIPTION: This snippet shows how to enable automatic data pruning and set related parameters in a Docker Compose file for n8n. It includes options for activating pruning, setting the maximum age of data, and limiting the number of stored executions.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/scaling/execution-data.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nn8n:\n    environment:\n      - EXECUTIONS_DATA_PRUNE=true\n      - EXECUTIONS_DATA_MAX_AGE=168\n\t\t- EXECUTIONS_DATA_PRUNE_MAX_COUNT=50000\n```\n\n----------------------------------------\n\nTITLE: Python Input Methods for n8n Nodes\nDESCRIPTION: Python methods and variables available for working with node input data in the Code node. Includes item manipulation, data access, and context information for workflow control.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/current-node-input.md#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n_input.item\n_input.all()\n_input.first()\n_input.last()\n_input.params\n_json\n_input.context.noItemsLeft\n```\n\n----------------------------------------\n\nTITLE: Returning Expected Object Structure in Code Node (JavaScript)\nDESCRIPTION: This snippet reiterates the required output for every Code node execution. Return an array of objects, each containing a 'json' key with an object value to ensure n8n handles data correctly. This example highlights consistency in data structure to avoid runtime errors and improper workflow execution.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.code/common-issues.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    \"json\": {\n\t  // your data goes here\n\t}\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping n8n with Docker Compose\nDESCRIPTION: These commands show how to start and stop the n8n instance using Docker Compose. The '-d' flag runs the containers in detached mode.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/docker-compose.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker compose up -d\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker compose stop\n```\n\n----------------------------------------\n\nTITLE: Accessing Linked Items from Previous Nodes in n8n Expressions\nDESCRIPTION: This expression returns the linked item from a specified previous node in the workflow. It navigates up the item linking chain to find the parent item in the given node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/data/data-mapping/data-mapping-expressions.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n{{$(\"<node-name>\").item}}\n```\n\n----------------------------------------\n\nTITLE: Setting Encryption Key via Environment Variable in Bash\nDESCRIPTION: Sets the `N8N_ENCRYPTION_KEY` environment variable for an n8n worker node. This key must match the main n8n instance's key to allow the worker to decrypt credentials stored in the database. Sharing this key is essential for workers operating in queue mode.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/scaling/queue-mode.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport N8N_ENCRYPTION_KEY=<main_instance_encryption_key>\n```\n\n----------------------------------------\n\nTITLE: Starting n8n with Docker\nDESCRIPTION: This command creates a Docker volume for persistent data storage and runs the n8n container, exposing it on port 5678.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/docker.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker volume create n8n_data\n\ndocker run -it --rm --name n8n -p 5678:5678 -v n8n_data:/home/node/.n8n docker.n8n.io/n8nio/n8n\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Bucket Policy for n8n External Storage\nDESCRIPTION: JSON policy to grant full S3 access to a specific bucket for n8n external storage. Replace '<bucket-name>' with your actual S3 bucket name.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/scaling/external-storage.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n  {\n   \"Sid\": \"VisualEditor0\",\n   \"Effect\": \"Allow\",\n   \"Action\": [\"s3:*\"],\n   \"Resource\": [\"arn:aws:s3:::<bucket-name>\", \"arn:aws:s3:::<bucket-name>/*\"]\n  }\n ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching First Page of n8n Workflows via API (Shell)\nDESCRIPTION: Demonstrates how to use `curl` to make a GET request to the n8n REST API to fetch the first page of active workflows. It specifies the `limit` parameter to control the page size (150 in this example) and includes placeholders for the instance details (host/port/path or cloud URL) and the necessary API key header. Examples are provided for both self-hosted and n8n Cloud setups.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/api/pagination.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# For a self-hosted n8n instance\ncurl -X 'GET' \\\n  '<N8N_HOST>:<N8N_PORT>/<N8N_PATH>/api/v<version-number>/workflows?active=true&limit=150' \\\n  -H 'accept: application/json' \\\n  -H 'X-N8N-API-KEY: <your-api-key>'\n\n# For n8n Cloud\ncurl -X 'GET' \\\n  '<your-cloud-instance>/api/v<version-number>/workflows?active=true&limit=150' \\\n  -H 'accept: application/json' \\\n  -H 'X-N8N-API-KEY: <your-api-key>'\n```\n\n----------------------------------------\n\nTITLE: Calculating Dates Relative to Today (Subtract n Days with Luxon, JavaScript, Expressions and Code Node)\nDESCRIPTION: Calculates a date a specified number of days before today using the minus method on n8n's custom $today variable. Useful for setting relative dates. Requires $today, which is a Luxon DateTime rounded to midnight. Outputs a DateTime object. Used in both expressions and JavaScript code nodes.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/luxon.md#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n{{$today.minus({days: 7})}}\n```\n\nLANGUAGE: js\nCODE:\n```\nlet sevenDaysAgo = $today.minus({days: 7})\n```\n\n----------------------------------------\n\nTITLE: Accessing Date Variables in Code Node (Luxon, JavaScript)\nDESCRIPTION: Shows how to use the $now custom variable within n8n's JavaScript Code node to get the current time and format it into a string. $now is a Luxon DateTime object. The snippet demonstrates direct usage and string concatenation to output Unix timestamps. Depends on n8n providing the variable; outputs either ISO timestamp or concatenated strings.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/luxon.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n$now\n// n8n displays <ISO formatted timestamp>\n// For example 2022-03-09T14:00:25.058+00:00\nlet rightNow = \"Today's date is \" + $now\n// n8n displays \"Today's date is <unix timestamp>\"\n// For example \"Today's date is 1646834498755\"\n```\n\n----------------------------------------\n\nTITLE: Setting pairedItem for Item Linking in n8n Code Node (JavaScript)\nDESCRIPTION: This snippet demonstrates how to set the 'pairedItem' property when returning data from a Code node to maintain item linking. It links the output item to the input item at index 0.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/data/data-mapping/item-linking-code-node.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[\n\t{\n\t\t\"json\": {\n\t\t\t. . . \n\t\t},\n\t\t// The index of the input item that generated this output item\n\t\t\"pairedItem\": 0\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Triggering n8n Webhook with Basic Curl GET Request (Shell)\nDESCRIPTION: This command uses curl to send a simple HTTP GET request to the specified n8n Webhook URL without any additional parameters or data. Replace `<https://your-n8n.url/webhook/path>` with the actual Webhook URL.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.webhook/common-issues.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl --request GET <https://your-n8n.url/webhook/path>\n```\n\n----------------------------------------\n\nTITLE: External Storage Environment Variables Configuration Table\nDESCRIPTION: Table defining the environment variables required for configuring S3-compatible external storage in n8n. Includes variables for host configuration, bucket settings, and authentication credentials.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/environment-variables/external-data-storage.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable | Type  | Default  | Description |\n| :------- | :---- | :------- | :---------- |\n| `N8N_EXTERNAL_STORAGE_S3_HOST` | String | - | Host of the n8n bucket in S3-compatible external storage. For example, `s3.us-east-1.amazonaws.com` |\n| `N8N_EXTERNAL_STORAGE_S3_BUCKET_NAME` | String | - | Name of the n8n bucket in S3-compatible external storage. |\n| `N8N_EXTERNAL_STORAGE_S3_BUCKET_REGION` | String | - | Region of the n8n bucket in S3-compatible external storage. For example, `us-east-1`|\n| `N8N_EXTERNAL_STORAGE_S3_ACCESS_KEY` | String | - | Access key in S3-compatible external storage |\n| `N8N_EXTERNAL_STORAGE_S3_ACCESS_SECRET` | String | - | Access secret in S3-compatible external storage. |\n```\n\n----------------------------------------\n\nTITLE: Accessing and Managing Node Static Data - Python\nDESCRIPTION: This snippet demonstrates reading from and modifying an individual node's persistent static data using Python in the n8n workflow environment. The _getWorkflowStaticData('node') function returns a node-specific persistent object, from which entries like 'lastExecution' can be read, updated, or deleted. Node static data can only be shared among actions within the same node, and is not visible outside. Some constraints apply depending on execution mode and workflow testing.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/builtin/get-workflow-static-data.md#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n# Get the static data of the node\\nnodeStaticData = _getWorkflowStaticData('node')\\n\\n# Access its data\\nlastExecution = nodeStaticData.lastExecution\\n\\n# Update its data\\nnodeStaticData.lastExecution = new Date().getTime()\\n\\n# Delete data\\ndelete nodeStaticData.lastExecution\n```\n\n----------------------------------------\n\nTITLE: Configuring npm package.json for FriendGrid Community Node - JSON\nDESCRIPTION: This JSON snippet provides a sample package.json for distributing the FriendGrid n8n community node. It includes required fields like name, version, keywords, license, author info, repository URL, build files, and n8n-specific keys for linking credential and node files. Inputs are npm metadata and n8n configuration; the output is a publishable package consumed by n8n and the npm ecosystem. The file must be updated with project-specific values, and script/dependency sections should be managed as indicated in the comments for a valid community node package.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/programmatic-style-node.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n\t// All node names must start with \"n8n-nodes-\"\n\t\"name\": \"n8n-nodes-friendgrid\",\n\t\"version\": \"0.1.0\",\n\t\"description\": \"n8n node to create contacts in SendGrid\",\n\t\"keywords\": [\n\t\t// This keyword is required for community nodes\n\t\t\"n8n-community-node-package\"\n\t],\n\t\"license\": \"MIT\",\n\t\"homepage\": \"https://n8n.io\",\n\t\"author\": {\n\t\t\"name\": \"Test\",\n\t\t\"email\": \"test@example.com\"\n\t},\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t// Change the git remote to your own repository\n\t\t// Add the new URL here\n\t\t\"url\": \"git+<your-repo-url>\"\n\t},\n\t\"main\": \"index.js\",\n\t\"scripts\": {\n\t\t// don't change\n\t},\n\t\"files\": [\n\t\t\"dist\"\n\t],\n\t// Link the credentials and node\n\t\"n8n\": {\n\t\t\"n8nNodesApiVersion\": 1,\n\t\t\"credentials\": [\n\t\t\t\"dist/credentials/FriendGridApi.credentials.js\"\n\t\t],\n\t\t\"nodes\": [\n\t\t\t\"dist/nodes/FriendGrid/FriendGrid.node.js\"\n\t\t]\n\t},\n\t\"devDependencies\": {\n\t\t// don't change\n\t},\n\t\"peerDependencies\": {\n\t\t// don't change\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Webhook URL for n8n with Reverse Proxy in Bash\nDESCRIPTION: This snippet demonstrates how to set the WEBHOOK_URL environment variable for n8n when using a reverse proxy. This is necessary when n8n runs internally on a different port than what's exposed by the reverse proxy.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/configuration-examples/webhook-url.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport WEBHOOK_URL=https://n8n.example.com/\n```\n\n----------------------------------------\n\nTITLE: Joining Usernames into Quoted String in JavaScript\nDESCRIPTION: This code snippet transforms a list of usernames into a single line of text where each username is quoted and separated by commas. It uses n8n's $input to access all items and returns the result in the required format.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/ai-code.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst items = $input.all();\nconst usernames = items.map((item) => `\"${item.json.username}\"`);\nconst result = usernames.join(\", \");\nreturn [{ json: { usernames: result } }];\n```\n\n----------------------------------------\n\nTITLE: Defining a Boolean Toggle Switch in n8n Node UI (TypeScript)\nDESCRIPTION: This configuration defines a boolean input field using `type: 'boolean'`, rendered as a toggle switch in the UI. The `default` property sets the initial state (true or false). Includes standard properties like `displayName`, `name`, `description`, and `displayOptions`.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/ui-elements.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\tdisplayName: 'Wait for Image',\n\tname: 'waitForImage',\n\ttype: 'boolean',\n\tdefault: true, // Initial state of the toggle\n\tdescription: 'Whether to wait for the image or not',\n\tdisplayOptions: { // the resources and operations to display this element with\n\t\tshow: {\n\t\t\tresource: [\n\t\t\t\t// comma-separated list of resource names\n\t\t\t],\n\t\t\toperation: [\n\t\t\t\t// comma-separated list of operation names\n\t\t\t]\n\t\t}\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Prepared Statement Placeholders for SQL 'IN' Clause - n8n Expressions - JavaScript\nDESCRIPTION: This code (used in n8n's expression syntax) dynamically creates a comma-separated list of prepared statement placeholders ($1, $2, ...) for use inside an SQL IN clause. The array 'input_shirt_sizes' is mapped so that each index generates a 1-indexed placeholder, as required by Postgres parameterized queries. This expression should be placed within the parentheses of the SQL IN clause in n8n and expects an array as input; output is a string like \"$1, $2, $3\".\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.postgres/common-issues.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n$json.input_shirt_sizes.map((i, pos) => \"$\" + (pos+1)).join(', ')\n```\n\n----------------------------------------\n\nTITLE: Supplying Query String Parameters for Custom Authentication - JSON\nDESCRIPTION: This JSON example shows how to send custom authentication information using query string parameters, specifically with 'appid' and 'apikey' keys. Designed for services that require API keys or tokens in the URL, this snippet is provided for use in n8n's custom authentication credential. Expected inputs are the application ID and API key, which become part of the HTTP request's query parameters.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/httprequest.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n\\t\\\"qs\\\": { \\n\\t\\t\\\"appid\\\": \\\"123456\\\",\\n\\t\\t\\\"apikey\\\": \\\"my-api-key\\\"\\n\\t}\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging Environment Variables in Bash\nDESCRIPTION: This snippet demonstrates how to set environment variables for configuring n8n logging, including log level, output destination, file location, and file size limits.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/logging-monitoring/logging.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Set the logging level to 'debug'\nexport N8N_LOG_LEVEL=debug\n\n# Set log output to both console and a log file\nexport N8N_LOG_OUTPUT=console,file\n\n# Set a save location for the log file\nexport N8N_LOG_FILE_LOCATION=/home/jim/n8n/logs/n8n.log\n\n# Set a 50 MB maximum size for each log file\nexport N8N_LOG_FILE_MAXSIZE=50\n\n# Set 60 as the maximum number of log files to be kept\nexport N8N_LOG_FILE_MAXCOUNT=60\n```\n\n----------------------------------------\n\nTITLE: Incrementing Page Number Query Parameter in n8n HTTP Request (JavaScript)\nDESCRIPTION: This JavaScript expression shows how to set the value for a query parameter (e.g., 'page') to handle numbered pagination in the n8n HTTP Request node. It uses the built-in `$pageCount` variable (which starts at 0) and adds 1 to match typical API page numbering (starting from 1). This is used in the 'Value' field (with Expression toggled on) when 'Pagination Mode' is 'Update a Parameter in Each Request' and 'Type' is 'Query'. The specific query parameter name ('page' in this example) depends on the target API.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/http-node/pagination.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{{ $pageCount + 1 }}\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Data Structure in n8n Code Node (Exercise Solution)\nDESCRIPTION: This JavaScript code demonstrates how to create a structured array of objects within an n8n Code node, as required by the first exercise. It defines a `myContacts` array with two contact objects, each having 'name' and nested 'email' properties (personal and work), correctly wrapped in the `json` key and returned for use in an n8n workflow.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/courses/level-two/chapter-1.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nvar myContacts = [\n\t{\n\t\tjson: {\n\t\t\tname: 'Alice',\n\t\t\temail: {\n\t\t\t\tpersonal: 'alice@home.com',\n\t\t\t\twork: 'alice@wonderland.org'\n\t\t\t},\n\t\t}\n\t},\n\t{\n\t\tjson: {\n\t\t\tname: 'Bob',\n\t\t\temail: {\n\t\t\t\tpersonal: 'bob@mail.com',\n\t\t\t\twork: 'contact@thebuilder.com'\n\t\t\t\t},\n\t\t}\n\t},\n];\n\nreturn myContacts;\n```\n```\n\n----------------------------------------\n\nTITLE: Converting Custom-Formatted Date String to Luxon DateTime (JavaScript, Expressions and Code Node)\nDESCRIPTION: Shows how to parse a date string with a custom format using Luxon's fromFormat function in both expressions and JavaScript code nodes. The date string ('23-06-2019') and its format ('dd-MM-yyyy') are provided as arguments. Outputs a Luxon DateTime object. Prerequisite: built-in Luxon support in n8n. Useful for non-standard date strings.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/luxon.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n{{DateTime.fromFormat(\"23-06-2019\", \"dd-MM-yyyy\")}}\n```\n\nLANGUAGE: js\nCODE:\n```\nlet newFormat = DateTime.fromFormat(\"23-06-2019\", \"dd-MM-yyyy\")\n```\n\n----------------------------------------\n\nTITLE: Checking Variable Existence with Ternary Operator in n8n JavaScript Expressions\nDESCRIPTION: This n8n expression uses the JavaScript ternary operator (`? :`) to check if a specific variable (`variable_name`) within the incoming JSON data (`$json`) exists and has a truthy value. If it does, the variable's value is returned; otherwise, the default string \"not found\" is returned. This requires the incoming data to be structured as JSON.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/expressions/check-incoming-data.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{{$json[\"variable_name\"]? $json[\"variable_name\"] :\"not found\"}}\n```\n\n----------------------------------------\n\nTITLE: Starting n8n Webhook Processor Container using Docker Command\nDESCRIPTION: Runs a Docker command to start an n8n webhook processor container named `n8n-queue`. It maps container port 5678 to host port 5679, sets the required `EXECUTIONS_MODE=queue` environment variable, and uses the official n8n Docker image with the `webhook` command. This allows scaling the handling of incoming webhook requests independently.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/scaling/queue-mode.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name n8n-queue -p 5679:5678 -e \"EXECUTIONS_MODE=queue\" docker.n8n.io/n8nio/n8n webhook\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Table for n8n Workflow Execution Configuration\nDESCRIPTION: Markdown table defining environment variables for n8n workflow execution settings, including variable names, types, default values, and descriptions.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/environment-variables/executions.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable | Type  | Default  | Description |\n| :------- | :---- | :------- | :---------- |\n| `EXECUTIONS_MODE` | Enum string: `regular`, `queue` | `regular` | Whether executions should run directly or using queue.<br><br>Refer to [Queue mode](/hosting/scaling/queue-mode.md) for more details. |\n| `EXECUTIONS_TIMEOUT` | Number | `-1` | Sets a default timeout (in seconds) to all workflows after which n8n stops their execution. Users can override this for individual workflows up to the duration set in `EXECUTIONS_TIMEOUT_MAX`. Set `EXECUTIONS_TIMEOUT` to `-1` to disable. |\n| `EXECUTIONS_TIMEOUT_MAX` | Number | `3600` | The maximum execution time (in seconds) that users can set for an individual workflow. |\n| `EXECUTIONS_DATA_SAVE_ON_ERROR` | Enum string: `all`, `none` | `all` | Whether n8n saves execution data on error. |\n| `EXECUTIONS_DATA_SAVE_ON_SUCCESS` | Enum string: `all`, `none` | `all` | Whether n8n saves execution data on success. |\n| `EXECUTIONS_DATA_SAVE_ON_PROGRESS` | Boolean | `false` | Whether to save progress for each node executed (true) or not (false). |\n| `EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS` | Boolean | `true` | Whether to save data of executions when started manually. |\n| `EXECUTIONS_DATA_PRUNE` | Boolean | `true` | Whether to delete data of past executions on a rolling basis. |\n| `EXECUTIONS_DATA_MAX_AGE` | Number | `336` | The execution age (in hours) before it's deleted. |\n| `EXECUTIONS_DATA_PRUNE_MAX_COUNT` | Number | `10000` | Maximum number of executions to keep in the database. 0 = no limit |\n| `EXECUTIONS_DATA_HARD_DELETE_BUFFER` | Number | `1` | How old (hours) the finished execution data has to be to get hard-deleted. By default, this buffer excludes recent executions as the user may need them while building a workflow. |\n| `EXECUTIONS_DATA_PRUNE_HARD_DELETE_INTERVAL` | Number | `15` | How often (minutes) execution data should be hard-deleted. |\n| `EXECUTIONS_DATA_PRUNE_SOFT_DELETE_INTERVAL` | Number | `60` | How often (minutes) execution data should be soft-deleted. |\n| `N8N_CONCURRENCY_PRODUCTION_LIMIT` | Number | `-1` | Max production executions allowed to run concurrently, in both regular and scaling modes. `-1` to disable in regular mode. |\n```\n\n----------------------------------------\n\nTITLE: Valid Single-line JavaScript Expression using Luxon (JavaScript)\nDESCRIPTION: Shows a valid n8n expression performing a date calculation using the Luxon library (assumed available via `DateTime`). It calculates the difference in months between two ISO-formatted dates by chaining method calls (`fromISO`, `diff`, `toObject`) into a single expression line, which is the correct way to perform complex operations within n8n expressions.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/expressions.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n{{DateTime.fromISO('2017-03-13').diff(DateTime.fromISO('2017-02-13'), 'months').toObject()}}\n```\n\n----------------------------------------\n\nTITLE: Advanced $fromAI() Function Usage with All Parameters\nDESCRIPTION: Shows how to use the $fromAI() function with all available parameters to dynamically populate a field with a name, including description, type, and default value.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/advanced-ai/examples/using-the-fromai-function.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n$fromAI(\"name\", \"The commenter's name\", \"string\", \"Jane Doe\")\n```\n\n----------------------------------------\n\nTITLE: Applying Slice Projection with JMESPath in n8n Code Node (Python)\nDESCRIPTION: Retrieves the first two elements' first names from a people array via JMESPath slice projection in a Python Code node. Uses _jmespath helper on _json.body.people. Returns a dictionary with 'firstTwoNames' mapping to resultant array.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/jmespath.md#2025-04-22_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nfirstTwoNames = _jmespath(_json.body.people, \"[:2].first\" )\nreturn {\"firstTwoNames\":firstTwoNames}\n\"\"\"\nReturns:\n[\n  \t{\n\t\t\"firstTwoNames\": [\n\t\t\t\"James\",\n\t\t\t\"Jacob\"\n\t\t]\n\t}\n]\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Resource Locator in TypeScript for n8n Node\nDESCRIPTION: This code snippet demonstrates how to implement a resource locator UI element in an n8n node. It includes options for ID, URL, and List selection modes, with validation and value extraction capabilities.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/ui-elements.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\tdisplayName: 'Card',\n\tname: 'cardID',\n\ttype: 'resourceLocator',\n\tdefault: '',\n\tdescription: 'Get a card',\n\tmodes: [\n\t\t{\n\t\t\tdisplayName: 'ID',\n\t\t\tname: 'id',\n\t\t\ttype: 'string',\n\t\t\thint: 'Enter an ID',\n\t\t\tvalidation: [\n\t\t\t\t{\n\t\t\t\t\ttype: 'regex',\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\tregex: '^[0-9]',\n\t\t\t\t\t\terrorMessage: 'The ID must start with a number',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\tplaceholder: '12example',\n\t\t\t// How to use the ID in API call\n\t\t\turl: '=http://api-base-url.com/?id={{$value}}',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'URL',\n\t\t\tname: 'url',\n\t\t\ttype: 'string',\n\t\t\thint: 'Enter a URL',\n\t\t\tvalidation: [\n\t\t\t\t{\n\t\t\t\t\ttype: 'regex',\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\tregex: '^http',\n\t\t\t\t\t\terrorMessage: 'Invalid URL',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t\tplaceholder: 'https://example.com/card/12example/',\n\t\t\t// How to get the ID from the URL\n\t\t\textractValue: {\n\t\t\t\ttype: 'regex',\n\t\t\t\tregex: 'example.com/card/([0-9]*.*)/',\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'List',\n\t\t\tname: 'list',\n\t\t\ttype: 'list',\n\t\t\ttypeOptions: {\n\t\t\t\t// You must always provide a search method\n\t\t\t\t// Write this method within the methods object in your base file\n\t\t\t\t// The method must populate the list, and handle searching if searchable: true\n\t\t\t\tsearchListMethod: 'searchMethod',\n\t\t\t\t// If you want users to be able to search the list\n\t\t\t\tsearchable: true,\n\t\t\t\t// Set to true if you want to force users to search\n\t\t\t\t// When true, users can't browse the list\n\t\t\t\t// Or false if users can browse a list\n\t\t\t\tsearchFilterRequired: true,\n\t\t\t},\n\t\t},\n\t],\n\tdisplayOptions: {\n\t\t// the resources and operations to display this element with\n\t\tshow: {\n\t\t\tresource: [\n\t\t\t\t// comma-separated list of resource names\n\t\t\t],\n\t\t\toperation: [\n\t\t\t\t// comma-separated list of operation names\n\t\t\t],\n\t\t},\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Introducing n8n Data Transformation Functions - JavaScript\nDESCRIPTION: This section lists new built-in data transformation functions available in n8n as of version 1.34.0, categorized by the data type they operate on (String, Number, Object, Array, Date & DateTime, Boolean). These functions facilitate data manipulation within n8n workflows, providing capabilities like parsing JSON, encoding/decoding base64, converting types, and extracting URL components. 'toDate()' is retained for backwards compatibility while 'toDateTime()' is the preferred function.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/release-notes.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntoDateTime() //replaces toDate(). toDate() is retained for backwards compatability.\nparseJson()\nextractUrlPath()\ntoBoolean()\nbase64Encode()\nbase64Decode()\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntoDateTime()\ntoBoolean()\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntoJsonString()\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntoJsonString()\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntoDateTime()\ntoint()\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntoInt()\n```\n\n----------------------------------------\n\nTITLE: Requiring Modules Instead of Import/Export in Code Node (JavaScript)\nDESCRIPTION: This snippet advises on loading modules within the Code node using CommonJS syntax. While ES module 'import' and 'export' declarations are not supported in n8n's JavaScript sandbox, the 'require' function can be used to load dependencies during local, self-hosted operation. The code assumes the module has previously been installed in the execution environment.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.code/common-issues.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Original code:\n// import express from \"express\";\n// New code:\nconst express = require(\"express\");\n```\n\n----------------------------------------\n\nTITLE: Running Ollama in Docker with Published Ports (Shell)\nDESCRIPTION: This shell command demonstrates how to run the Ollama service inside a Docker container, publishing the default Ollama port and binding it to all interfaces for accessibility from outside the container. No additional dependencies are required beyond Docker, and the command mounts a persistent volume for Ollama data. The core parameter is the -p flag, mapping host port 11434 to the same port inside the container. Output is a running Ollama service accessible via localhost:11434 from the host.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.lmollama/common-issues.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d -v ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama\n```\n\n----------------------------------------\n\nTITLE: Actor Reference Expression Example in n8n\nDESCRIPTION: Demonstrates how to reference movie actor data from a previous node in the workflow.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/data/data-mapping/data-item-linking/item-linking-errors.md#2025-04-22_snippet_1\n\nLANGUAGE: expression\nCODE:\n```\n$('Get famous movie actors').item\n```\n\n----------------------------------------\n\nTITLE: Accessing Instance Variables in n8n JavaScript\nDESCRIPTION: Contains the [Variables](/code/variables.md) defined and available in the active n8n environment. This metadata property is available for use within the Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/n8n-metadata.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n$vars\n```\n\n----------------------------------------\n\nTITLE: Providing HTTP Request Body for Custom Authentication - JSON\nDESCRIPTION: This JSON snippet demonstrates how to include authentication parameters in the HTTP request body using a 'user' and 'pass' structure. Intended for custom authentication scenarios in n8n, this configuration allows users to set arbitrary body fields needed for service authentication. The snippet should be inserted into the credential setup, with 'user' and 'pass' values updated as required; the result is an HTTP request with the specified JSON body.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/httprequest.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n\\t \\\"body\\\" : {\\n\\t\\t\\\"user\\\": \\\"username\\\",\\n\\t\\t\\\"pass\\\": \\\"password\\\"\\n\\t}\\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming API Results Array into Items via n8n Code Node (Exercise Solution)\nDESCRIPTION: This JavaScript code snippet, part of the third exercise solution, demonstrates transforming data fetched from an API using the n8n Code node. It retrieves all input items (expected to be one item from the HTTP Request node), accesses the `results` array within the `json` property of the first item, and uses `.map()` to create a new n8n item for each element in the `results` array, wrapping each in `{ json: item }`. This effectively splits the array into individual items, mimicking the functionality of the Split Out node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/courses/level-two/chapter-1.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nlet items = $input.all();\nreturn items[0].json.results.map(item => {\n\treturn {\n\t\tjson: item\n\t}\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Input Data in n8n Code Node (Exercise Solution)\nDESCRIPTION: This JavaScript snippet shows how to access all incoming items from the previous node using `$input.all()` within an n8n Code node. It then modifies the first item by extracting the 'work' email from the nested 'email' object and assigning it to a new top-level `workEmail` property before returning the modified items array. This addresses the second exercise requirement.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/courses/level-two/chapter-1.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nlet items = $input.all();\nitems[0].json.workEmail = items[0].json.email['work'];\nreturn items;\n```\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic in JavaScript Expressions\nDESCRIPTION: The $if function implements conditional logic in expressions. It takes three parameters: a condition, a value to return if true, and a value to return if false. This function is not available in the Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/convenience.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n$if()\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Fields for Node in TypeScript\nDESCRIPTION: This TypeScript code defines an 'Additional Fields' section using the 'collection' type within the node's `properties`. This allows users to add optional parameters. It includes a 'Date' field (`apodDate`) specifically for the 'Astronomy Picture of the Day' resource. The `routing.request.qs` configuration appends the selected date as a query parameter (`date=YYYY-MM-DD`) to the API request for the APOD endpoint.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/declarative-style-node.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\tdisplayName: 'Additional Fields',\n\tname: 'additionalFields',\n\ttype: 'collection',\n\tdefault: {},\n\tplaceholder: 'Add Field',\n\tdisplayOptions: {\n\t\tshow: {\n\t\t\tresource: [\n\t\t\t\t'astronomyPictureOfTheDay',\n\t\t\t],\n\t\t\toperation: [\n\t\t\t\t'get',\n\t\t\t],\n\t\t},\n\t},\n\toptions: [\n\t\t{\n\t\t\tdisplayName: 'Date',\n\t\t\tname: 'apodDate',\n\t\t\ttype: 'dateTime',\n\t\t\tdefault: '',\n\t\t\trouting: {\n\t\t\t\trequest: {\n\t\t\t\t\t// You've already set up the URL. qs appends the value of the field as a query string\n\t\t\t\t\tqs: {\n\t\t\t\t\t\tdate: '={{ new Date($value).toISOString().substr(0,10) }}',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\t\t\t\t\t\t\t\t\t\n}\n```\n\n----------------------------------------\n\nTITLE: Reverting n8n Database Migrations (Shell)\nDESCRIPTION: This shell command is used by self-hosted n8n instances to revert database migrations. It is recommended to use this command if you update to a new version and need to roll back to a previous one, especially if the update included database schema changes.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/release-notes.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nn8n db:revert\n```\n\n----------------------------------------\n\nTITLE: Triggering n8n Webhook with Curl GET Request and Body Data (Shell)\nDESCRIPTION: This command uses curl to send an HTTP GET request to the specified n8n Webhook URL, including data in the request body using the `--data` flag. Replace `<https://your-n8n.url/webhook/path>` with the actual Webhook URL and `'key=value'` with the desired body data.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.webhook/common-issues.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl --request GET <https://your-n8n.url/webhook/path> --data 'key=value'\n```\n\n----------------------------------------\n\nTITLE: Using Logical OR Operator for Defaults in n8n JavaScript Expressions\nDESCRIPTION: This n8n expression shows how to use the JavaScript logical OR operator (`||`) for providing default values. It returns the value of the variable `$x` if it is truthy (i.e., not `false`, `0`, `\"\"`, `null`, `undefined`, or `NaN`). If `$x` is falsy, it returns the fallback string \"default value\".\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/expressions/check-incoming-data.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{{ $x || \"default value\" }}\n```\n\n----------------------------------------\n\nTITLE: Example: Getting Binary Buffer for First Input Item - JavaScript\nDESCRIPTION: Shows a practical example fetching the binary data buffer of the first item using n8n's JavaScript helpers. It passes 0 for the item index and 'data' as the binary property name. Returns a buffer containing binary contents from the first input item. Must be used within an async execution context in an n8n custom node or function.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/code-node/get-binary-data-buffer.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nlet binaryDataBufferItem = await this.helpers.getBinaryDataBuffer(0, 'data');\n// Returns the data in the binary buffer for the first input item\n```\n\n----------------------------------------\n\nTITLE: Sample Prometheus Metrics Output for n8n Queue in Scaling Mode\nDESCRIPTION: This code block demonstrates the format and types of queue metrics exposed by n8n when Prometheus metrics are enabled in scaling mode. It includes metrics for active, completed, failed, and waiting jobs.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/configuration-examples/prometheus.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# HELP n8n_scaling_mode_queue_jobs_active Current number of jobs being processed across all workers in scaling mode.\n# TYPE n8n_scaling_mode_queue_jobs_active gauge\nn8n_scaling_mode_queue_jobs_active 0\n\n# HELP n8n_scaling_mode_queue_jobs_completed Total number of jobs completed across all workers in scaling mode since instance start.\n# TYPE n8n_scaling_mode_queue_jobs_completed counter\nn8n_scaling_mode_queue_jobs_completed 0\n\n# HELP n8n_scaling_mode_queue_jobs_failed Total number of jobs failed across all workers in scaling mode since instance start.\n# TYPE n8n_scaling_mode_queue_jobs_failed counter\nn8n_scaling_mode_queue_jobs_failed 0\n\n# HELP n8n_scaling_mode_queue_jobs_waiting Current number of enqueued jobs waiting for pickup in scaling mode.\n# TYPE n8n_scaling_mode_queue_jobs_waiting gauge\nn8n_scaling_mode_queue_jobs_waiting 0\n```\n\n----------------------------------------\n\nTITLE: Creating a Dockerfile to Add cURL Support to n8n Docker Image\nDESCRIPTION: This Dockerfile extends the official n8n Docker image by installing the curl package on Alpine Linux. This enables running cURL commands from the Execute Command node when using Docker.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.executecommand/index.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nFROM docker.n8n.io/n8nio/n8n\nUSER root\nRUN apk --update add curl\nUSER node\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Key for SFTP Authentication\nDESCRIPTION: Command to generate an OpenSSH format private key using ssh-keygen with optimal parameters for enhanced security. Uses ed25519 algorithm with 100 rounds of key derivation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/ftp.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nssh-keygen -o -a 100 -t ed25519\n```\n\n----------------------------------------\n\nTITLE: Setting LangSmith Environment Variables for n8n Integration\nDESCRIPTION: Configure the required environment variables to connect n8n with LangSmith. These variables include the LangSmith endpoint, tracing setting, and API key. They should be set globally in the hosting environment, not in the n8n configuration file.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/advanced-ai/langchain/langsmith.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable | Value |\n| -------- | ----- |\n| LANGCHAIN_ENDPOINT | \"https://api.smith.langchain.com\" |\n| LANGCHAIN_TRACING_V2 | true |\n| LANGCHAIN_API_KEY | Set this to your API key |\n```\n\n----------------------------------------\n\nTITLE: Running Commands in a New Docker Container\nDESCRIPTION: Command for starting a new container to test if a command is available in the n8n Docker image, useful for diagnosing 'command not found' errors.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.executecommand/common-issues.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Start up a new container that runs the command instead of n8n\n# Use the same image and tag that you use to run n8n normally\ndocker run -it --rm --entrypoint /bin/sh docker.n8n.io/n8nio/n8n -c <command_to_run>\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication in Asana API Node\nDESCRIPTION: Example of the new simplified authentication syntax for node creators in n8n, using the Asana API node as an example. This shows how to set up generic authentication using the IAuthenticateGeneric interface.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/release-notes/0-x.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n\tIAuthenticateGeneric,\n\tICredentialType,\n\tINodeProperties,\n} from 'n8n-workflow';\n\nexport class AsanaApi implements ICredentialType {\n\tname = 'asanaApi';\n\tdisplayName = 'Asana API';\n\tdocumentationUrl = 'asana';\n\tproperties: INodeProperties[] = [\n\t\t{\n\t\t\tdisplayName: 'Access Token',\n\t\t\tname: 'accessToken',\n\t\t\ttype: 'string',\n\t\t\tdefault: '',\n\t\t},\n\t];\n\n\tauthenticate: IAuthenticateGeneric = {\n\t\ttype: 'generic',\n\t\tproperties: {\n\t\t\theaders: {\n\t\t\t\tAuthorization: '=Bearer {{$credentials.accessToken}}',\n\t\t\t},\n\t\t},\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Using Data Transformation Functions in n8n Expressions\nDESCRIPTION: Demonstrates the basic syntax for using data transformation functions in n8n expressions. The example shows how to check if a string is an email using the isEmail() function.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/data-transformation-functions/index.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{{ dataItem.function() }}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{{ \"example@example.com\".isEmail() }}\n\n// Returns true\n```\n\n----------------------------------------\n\nTITLE: Creating a New User in DigitalOcean Droplet\nDESCRIPTION: Commands to create a new user with administrative privileges on a DigitalOcean droplet. This is recommended for security purposes instead of using the root user.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/digital-ocean.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nadduser <username>\n```\n\nLANGUAGE: shell\nCODE:\n```\nusermod -aG sudo <username>\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Transformation Workflow in n8n\nDESCRIPTION: JSON workflow definition that demonstrates a complete date processing workflow in n8n. The workflow retrieves data from a Customer Datastore, rounds dates up to the end of month, checks if the date is after 1960, waits for a minute, and then outputs the calculated date to a field.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/courses/level-two/chapter-2.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"name\": \"Course 2, Ch 2, Date exercise\",\n\"nodes\": [\n\t{\n\t\"parameters\": {},\n\t\"id\": \"6bf64d5c-4b00-43cf-8439-3cbf5e5f203b\",\n\t\"name\": \"When clicking \\\"Test workflow\\\"\",\n\t\"type\": \"n8n-nodes-base.manualTrigger\",\n\t\"typeVersion\": 1,\n\t\"position\": [\n\t\t620,\n\t\t280\n\t]\n\t},\n\t{\n\t\"parameters\": {\n\t\t\"operation\": \"getAllPeople\",\n\t\t\"returnAll\": true\n\t},\n\t\"id\": \"a08a8157-99ee-4d50-8fe4-b6d7e16e858e\",\n\t\"name\": \"Customer Datastore (n8n training)\",\n\t\"type\": \"n8n-nodes-base.n8nTrainingCustomerDatastore\",\n\t\"typeVersion\": 1,\n\t\"position\": [\n\t\t840,\n\t\t360\n\t]\n\t},\n\t{\n\t\"parameters\": {\n\t\t\"operation\": \"roundDate\",\n\t\t\"date\": \"={{ $json.created }}\",\n\t\t\"mode\": \"roundUp\",\n\t\t\"outputFieldName\": \"new-date\",\n\t\t\"options\": {\n\t\t\"includeInputFields\": true\n\t\t}\n\t},\n\t\"id\": \"f66a4356-2584-44b6-a4e9-1e3b5de53e71\",\n\t\"name\": \"Date & Time\",\n\t\"type\": \"n8n-nodes-base.dateTime\",\n\t\"typeVersion\": 2,\n\t\"position\": [\n\t\t1080,\n\t\t360\n\t]\n\t},\n\t{\n\t\"parameters\": {\n\t\t\"conditions\": {\n\t\t\"options\": {\n\t\t\t\"caseSensitive\": true,\n\t\t\t\"leftValue\": \"\",\n\t\t\t\"typeValidation\": \"strict\"\n\t\t},\n\t\t\"conditions\": [\n\t\t\t{\n\t\t\t\"id\": \"7c82823a-e603-4166-8866-493f643ba354\",\n\t\t\t\"leftValue\": \"={{ $json['new-date'] }}\",\n\t\t\t\"rightValue\": \"1960-01-01T00:00:00\",\n\t\t\t\"operator\": {\n\t\t\t\t\"type\": \"dateTime\",\n\t\t\t\t\"operation\": \"after\"\n\t\t\t}\n\t\t\t}\n\t\t],\n\t\t\"combinator\": \"and\"\n\t\t},\n\t\t\"options\": {}\n\t},\n\t\"id\": \"cea39877-6183-4ea0-9400-e80523636912\",\n\t\"name\": \"If\",\n\t\"type\": \"n8n-nodes-base.if\",\n\t\"typeVersion\": 2,\n\t\"position\": [\n\t\t1280,\n\t\t360\n\t]\n\t},\n\t{\n\t\"parameters\": {\n\t\t\"amount\": 1,\n\t\t\"unit\": \"minutes\"\n\t},\n\t\"id\": \"5aa860b7-c73c-4df0-ad63-215850166f13\",\n\t\"name\": \"Wait\",\n\t\"type\": \"n8n-nodes-base.wait\",\n\t\"typeVersion\": 1.1,\n\t\"position\": [\n\t\t1480,\n\t\t260\n\t],\n\t\"webhookId\": \"be78732e-787d-463e-9210-2c7e8239761e\"\n\t},\n\t{\n\t\"parameters\": {\n\t\t\"assignments\": {\n\t\t\"assignments\": [\n\t\t\t{\n\t\t\t\"id\": \"e058832a-2461-4c6d-b584-043ecc036427\",\n\t\t\t\"name\": \"outputValue\",\n\t\t\t\"value\": \"={{ $json['new-date'] }}\",\n\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t]\n\t\t},\n\t\t\"includeOtherFields\": true,\n\t\t\"options\": {}\n\t},\n\t\"id\": \"be034e9e-3cf1-4264-9d15-b6760ce28f91\",\n\t\"name\": \"Edit Fields\",\n\t\"type\": \"n8n-nodes-base.set\",\n\t\"typeVersion\": 3.3,\n\t\"position\": [\n\t\t1700,\n\t\t260\n\t]\n\t},\n\t{\n\t\"parameters\": {\n\t\t\"rule\": {\n\t\t\"interval\": [\n\t\t\t{\n\t\t\t\"field\": \"minutes\",\n\t\t\t\"minutesInterval\": 30\n\t\t\t}\n\t\t]\n\t\t}\n\t},\n\t\"id\": \"6e8e4308-d0e0-4d0d-bc29-5131b57cf061\",\n\t\"name\": \"Schedule Trigger\",\n\t\"type\": \"n8n-nodes-base.scheduleTrigger\",\n\t\"typeVersion\": 1.1,\n\t\"position\": [\n\t\t620,\n\t\t480\n\t]\n\t}\n],\n\"pinData\": {},\n\"connections\": {\n\t\"When clicking \\\"Test workflow\\\"\": {\n\t\"main\": [\n\t\t[\n\t\t{\n\t\t\t\"node\": \"Customer Datastore (n8n training)\",\n\t\t\t\"type\": \"main\",\n\t\t\t\"index\": 0\n\t\t}\n\t\t]\n\t]\n\t},\n\t\"Customer Datastore (n8n training)\": {\n\t\"main\": [\n\t\t[\n\t\t{\n\t\t\t\"node\": \"Date & Time\",\n\t\t\t\"type\": \"main\",\n\t\t\t\"index\": 0\n\t\t}\n\t\t]\n\t]\n\t},\n\t\"Date & Time\": {\n\t\"main\": [\n\t\t[\n\t\t{\n\t\t\t\"node\": \"If\",\n\t\t\t\"type\": \"main\",\n\t\t\t\"index\": 0\n\t\t}\n\t\t]\n\t]\n\t},\n\t\"If\": {\n\t\"main\": [\n\t\t[\n\t\t{\n\t\t\t\"node\": \"Wait\",\n\t\t\t\"type\": \"main\",\n\t\t\t\"index\": 0\n\t\t}\n\t\t]\n\t]\n\t},\n\t\"Wait\": {\n\t\"main\": [\n\t\t[\n\t\t{\n\t\t\t\"node\": \"Edit Fields\",\n\t\t\t\"type\": \"main\",\n\t\t\t\"index\": 0\n\t\t}\n\t\t]\n\t]\n\t},\n\t\"Schedule Trigger\": {\n\t\"main\": [\n\t\t[\n\t\t{\n\t\t\t\"node\": \"Customer Datastore (n8n training)\",\n\t\t\t\"type\": \"main\",\n\t\t\t\"index\": 0\n\t\t}\n\t\t]\n\t]\n\t}\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Multi-line JavaScript within an n8n Expression (JavaScript)\nDESCRIPTION: Illustrates an incorrect attempt to use multi-line JavaScript, including a function definition and variable assignments (`let`), within n8n expression syntax (`{{ }}`). This highlights the limitation that n8n expressions must resolve to a single JavaScript statement or expression, even if formatted on one line.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/expressions.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// This example is split over multiple lines for readability\n// It's still invalid when formatted as a single line\n{{\n  function example() {\n    let end = DateTime.fromISO('2017-03-13');\n    let start = DateTime.fromISO('2017-02-13');\n    let diffInMonths = end.diff(start, 'months');\n    return diffInMonths.toObject();\n  }\n  example();\n}}\n```\n\n----------------------------------------\n\nTITLE: Extracting Specific Fields from Nested Data in JavaScript\nDESCRIPTION: This code snippet extracts specific fields (first name and job title) from nested data structures for each person in the input list. It demonstrates how to reference nested fields using dot notation in n8n.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/ai-code.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst items = $input.all();\nconst newItems = items.map((item) => {\n  const firstName = item.json.personal_info.first_name;\n  const jobTitle = item.json.work_info.job_title;\n  return {\n    json: {\n      firstName,\n      jobTitle,\n    },\n  };\n});\nreturn newItems;\n```\n\n----------------------------------------\n\nTITLE: Accessing Workflow Values in n8n Subworkflows with Expression Syntax\nDESCRIPTION: This snippet demonstrates how to access custom values passed to a subworkflow using n8n's expression syntax. The example shows how to reference a value named 'myCustomValue' that was passed to the workflow through the Execute Sub-workflow Trigger node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/integrations/builtin/cluster-nodes/langchain-sub-nodes/workflow-values.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{{ $('Execute Sub-workflow Trigger').item.json.myCustomValue }}\n```\n\n----------------------------------------\n\nTITLE: Getting Execution Resume URL in n8n JavaScript\nDESCRIPTION: Provides the webhook URL required to resume a workflow that is currently waiting at a [Wait node](/integrations/builtin/core-nodes/n8n-nodes-base.wait.md). This metadata property is available for use within the Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/n8n-metadata.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n$execution.resumeUrl\n```\n\n----------------------------------------\n\nTITLE: JMESPath Filter Query for Item Selection in Expression (JavaScript)\nDESCRIPTION: Illustrates how to select items from a collection based on property value using a JMESPath filter query in an n8n JavaScript expression. Assumes $(\"Code\").all() returns an array of items with nested 'json' properties. Filters for items where 'json.name' equals 'Lenovo', returning the associated 'category_id' fields.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/jmespath.md#2025-04-22_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\n{{ $jmespath($(\"Code\").all(), \"[?json.name=='Lenovo'].json.category_id\") }}\n```\n\n----------------------------------------\n\nTITLE: Parameterized SQL Query Example\nDESCRIPTION: SQL query example showing how to use parameterized queries with Postgres to prevent SQL injection.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.postgres/index.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM $1:name WHERE email = $2;\n```\n\n----------------------------------------\n\nTITLE: Supplying Query Parameters for MySQL Node in n8n using JavaScript Expressions\nDESCRIPTION: This JavaScript snippet specifies the query parameters needed by the parameterized SQL, typically placed in the n8n MySQL node's Query Parameters field. The first parameter ('users') would be used as the table name, and the second uses the n8n expression syntax ({{ $json.email }}) to dynamically reference each email from the input data. This ensures the query is executed for each input item separately without manual changes. Prerequisite: The table 'users' must exist, and the input data must have an 'email' property.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.mysql/index.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// users is an example table name\nusers, {{ $json.email }} \n```\n\n----------------------------------------\n\nTITLE: Google OAuth Scopes Example\nDESCRIPTION: Example of how to format multiple Google OAuth scopes as a space-separated list for n8n credential configuration.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/google/oauth-generic.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://www.googleapis.com/auth/gmail.labels https://www.googleapis.com/auth/gmail.addons.current.action.compose\n```\n\n----------------------------------------\n\nTITLE: Defining Endpoints Environment Variables Table in Markdown\nDESCRIPTION: This markdown table defines various environment variables for customizing n8n endpoints. It includes variables for payload size, metrics configuration, endpoint paths, and API-related settings.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/environment-variables/endpoints.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable | Type  | Default  | Description |\n| :------- | :---- | :------- | :---------- |\n| `N8N_PAYLOAD_SIZE_MAX` | Number | `16` | The maximum payload size in MiB. |\n| `N8N_FORMDATA_FILE_SIZE_MAX` | Number | `200` | Max payload size for files in form-data webhook payloads in MiB. |\n| `N8N_METRICS` | Boolean | `false` | Whether to enable the `/metrics` endpoint. |\n| `N8N_METRICS_PREFIX` | String | `n8n_` | Optional prefix for n8n specific metrics names. |\n| `N8N_METRICS_INCLUDE_DEFAULT_METRICS` | Boolean | `true` | Whether to expose default system and node.js metrics. |\n| `N8N_METRICS_INCLUDE_CACHE_METRICS` | Boolean | false | Whether to include metrics (true) for cache hits and misses, or not include them (false). |\n| `N8N_METRICS_INCLUDE_MESSAGE_EVENT_BUS_METRICS` | Boolean | `false` | Whether to include metrics (true) for events, or not include them (false). |\n| `N8N_METRICS_INCLUDE_WORKFLOW_ID_LABEL` | Boolean | `false` | Whether to include a label for the workflow ID on workflow metrics. |\n| `N8N_METRICS_INCLUDE_NODE_TYPE_LABEL` | Boolean | `false` | Whether to include a label for the node type on node metrics. |\n| `N8N_METRICS_INCLUDE_CREDENTIAL_TYPE_LABEL` | Boolean | `false` | Whether to include a label for the credential type on credential metrics. |\n| `N8N_METRICS_INCLUDE_API_ENDPOINTS` | Boolean | `false` | Whether to expose metrics for API endpoints. |\n| `N8N_METRICS_INCLUDE_API_PATH_LABEL` | Boolean | `false` | Whether to include a label for the path of API invocations. |\n| `N8N_METRICS_INCLUDE_API_METHOD_LABEL` | Boolean | `false` | Whether to include a label for the HTTP method (GET, POST, ...) of API invocations. |\n| `N8N_METRICS_INCLUDE_API_STATUS_CODE_LABEL` | Boolean | `false` | Whether to include a label for the HTTP status code (200, 404, ...) of API invocations. |\n| `N8N_METRICS_INCLUDE_QUEUE_METRICS` | Boolean | `false` | Whether to include metrics for jobs in scaling mode. Not supported in multi-main setup. |\n| `N8N_METRICS_QUEUE_METRICS_INTERVAL` | Integer | `20` | How often (in seconds) to update queue metrics. |\n| `N8N_ENDPOINT_REST` | String | `rest` | The path used for REST endpoint. |\n| `N8N_ENDPOINT_WEBHOOK` | String | `webhook` | The path used for webhook endpoint. |\n| `N8N_ENDPOINT_WEBHOOK_TEST` | String | `webhook-test` | The path used for test-webhook endpoint. |\n| `N8N_ENDPOINT_WEBHOOK_WAIT` | String | `webhook-waiting` | The path used for waiting-webhook endpoint. |\n| `WEBHOOK_URL` | String | - | Used to manually provide the Webhook URL when running n8n behind a reverse proxy. See [here](/hosting/configuration/configuration-examples/webhook-url.md) for more details. |\n| `N8N_DISABLE_PRODUCTION_MAIN_PROCESS` | Boolean | `false` | Disable production webhooks from main process. This helps ensure no HTTP traffic load to main process when using webhook-specific processes. |\n```\n\n----------------------------------------\n\nTITLE: Generating Nested JSON with Dot Notation Enabled in n8n Set Node\nDESCRIPTION: This JSON object demonstrates the output of the Edit Fields (Set) node when dot notation is enabled (default). Setting the field name to `number.one` and value to `20` results in a nested structure where `number` is an object containing the key `one`. This behavior occurs when using Manual Mapping mode.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.set.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"number\": { \"one\": 20}\n}\n```\n\n----------------------------------------\n\nTITLE: Calling n8n API with API Key Authentication in Shell\nDESCRIPTION: This code snippet demonstrates how to make a GET request to the n8n API to retrieve active workflows. It shows examples for both self-hosted n8n instances and n8n Cloud, using curl to send the request with the API key in the header.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/api/authentication.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# For a self-hosted n8n instance\ncurl -X 'GET' \\\n  '<N8N_HOST>:<N8N_PORT>/<N8N_PATH>/api/v<version-number>/workflows?active=true' \\\n  -H 'accept: application/json' \\\n  -H 'X-N8N-API-KEY: <your-api-key>'\n\n# For n8n Cloud\ncurl -X 'GET' \\\n  '<your-cloud-instance>/api/v<version-number>/workflows?active=true' \\\n  -H 'accept: application/json' \\\n  -H 'X-N8N-API-KEY: <your-api-key>'\n```\n\n----------------------------------------\n\nTITLE: Accessing n8n Readiness Check Endpoint\nDESCRIPTION: Demonstrates how to access the /healthz/readiness endpoint, which checks if the n8n instance is ready to accept traffic by verifying database connection and migration status.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/logging-monitoring/monitoring.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n<your-instance-url>/healthz/readiness\n```\n\n----------------------------------------\n\nTITLE: Workflow Activation Payload\nDESCRIPTION: JSON payload example for activating a workflow, showing the required active status field.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/embed/managing-workflows.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"active\":true,\n\"settings\": {},\n\"staticData\": null,\n\"tags\": []\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom n8n Docker Image with Private Nodes\nDESCRIPTION: This Dockerfile defines a custom Docker image for n8n, starting from a Node.js 16 Alpine base. It installs necessary system dependencies like graphicsmagick and git, installs a specific version of n8n passed via a build argument, configures fonts, sets up the working directory, and defines the entrypoint using tini and a custom script. This file serves as the foundation for building an n8n instance that includes private nodes located in `~/.n8n/custom/`.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/deploy/install-private-nodes.md#2025-04-22_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM node:16-alpine\n\nARG N8N_VERSION\n\nRUN if [ -z \"$N8N_VERSION\" ] ; then echo \"The N8N_VERSION argument is missing!\" ; exit 1; fi\n\n# Update everything and install needed dependencies\nRUN apk add --update graphicsmagick tzdata git tini su-exec\n\n# Set a custom user to not have n8n run as root\nUSER root\n\n# Install n8n and the packages it needs to build it correctly.\nRUN apk --update add --virtual build-dependencies python3 build-base ca-certificates && \\\n\tnpm config set python \"$(which python3)\" && \\\n\tnpm_config_user=root npm install -g full-icu n8n@${N8N_VERSION} && \\\n\tapk del build-dependencies \\\n\t&& rm -rf /root /tmp/* /var/cache/apk/* && mkdir /root;\n\n\n# Install fonts\nRUN apk --no-cache add --virtual fonts msttcorefonts-installer fontconfig && \\\n\tupdate-ms-fonts && \\\n\tfc-cache -f && \\\n\tapk del fonts && \\\n\tfind  /usr/share/fonts/truetype/msttcorefonts/ -type l -exec unlink {} \\; \\\n\t&& rm -rf /root /tmp/* /var/cache/apk/* && mkdir /root\n\nENV NODE_ICU_DATA /usr/local/lib/node_modules/full-icu\n\nWORKDIR /data\n\nCOPY docker-entrypoint.sh /docker-entrypoint.sh\nENTRYPOINT [\"tini\", \"--\", \"/docker-entrypoint.sh\"]\n\nEXPOSE 5678/tcp\n```\n\n----------------------------------------\n\nTITLE: Accessing Date Variables with n8n Expressions (Luxon, JavaScript)\nDESCRIPTION: Demonstrates how to access the custom $now variable provided by n8n in JavaScript-based expressions. Outputs an ISO-formatted timestamp or concatenates it into a string. The $now variable is a Luxon DateTime object representing the current time. No external dependencies required aside from default n8n setup. Accepts no parameters, returns string representations of the current timestamp.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/luxon.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n{{$now}}\n// n8n displays the ISO formatted timestamp\n// For example 2022-03-09T14:02:37.065+00:00\n{{\"Today's date is \" + $now}}\n// n8n displays \"Today's date is <unix timestamp>\"\n// For example \"Today's date is 1646834498755\"\n```\n\n----------------------------------------\n\nTITLE: Defining n8n Persistent Volume in Kubernetes Deployment\nDESCRIPTION: YAML configuration snippet showing how to mount a persistent volume claim for n8n file storage in the Kubernetes deployment.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/aws.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n…\nvolumes:\n  - name: n8n-claim0\n    persistentVolumeClaim:\n      claimName: n8n-claim0\n…\n```\n\n----------------------------------------\n\nTITLE: Defining Node Operations and Required Fields (TypeScript)\nDESCRIPTION: This code defines an operation dropdown (with a single 'Create' action) and a required email field, as well as their display conditions. The operation property dynamically appears when 'Contact' is selected as the resource, and the email field is required for this operation. It mimics the structure of a REST POST but fits n8n's data collection model via node parameters.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/programmatic-style-node.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\tdisplayName: 'Operation',\n\tname: 'operation',\n\ttype: 'options',\n\tdisplayOptions: {\n\t\tshow: {\n\t\t\tresource: [\n\t\t\t\t'contact',\n\t\t\t],\n\t\t},\n\t},\n\toptions: [\n\t\t{\n\t\t\tname: 'Create',\n\t\t\tvalue: 'create',\n\t\t\tdescription: 'Create a contact',\n\t\t\taction: 'Create a contact',\n\t\t},\n\t],\n\tdefault: 'create',\n\tnoDataExpression: true,\n},\n{\n\tdisplayName: 'Email',\n\tname: 'email',\n\ttype: 'string',\n\trequired: true,\n\tdisplayOptions: {\n\t\tshow: {\n\t\t\toperation: [\n\t\t\t\t'create',\n\t\t\t],\n\t\t\tresource: [\n\t\t\t\t'contact',\n\t\t\t],\n\t\t},\n\t},\n\tdefault:'',\n\tplaceholder: 'name@email.com',\n\tdescription:'Primary email for the contact',\n},\n```\n\n----------------------------------------\n\nTITLE: Basic Node Reference Expression in n8n\nDESCRIPTION: Shows the basic expression syntax for referencing data from previous nodes in n8n workflows.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/data/data-mapping/data-item-linking/item-linking-errors.md#2025-04-22_snippet_0\n\nLANGUAGE: expression\nCODE:\n```\n$(node_name).item\n```\n\n----------------------------------------\n\nTITLE: Query Parameters Expression in JavaScript\nDESCRIPTION: Example of setting query parameters using n8n expressions to dynamically inject table name and email values.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.postgres/index.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{{ [ 'users', $json.email ] }}\n```\n\n----------------------------------------\n\nTITLE: Using $now and $today in JavaScript\nDESCRIPTION: JavaScript methods for working with current date and time in n8n. $now returns a Luxon object with the current timestamp, while $today returns a Luxon object with the current timestamp rounded down to the day.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/date-time.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n$now // Equivalent to DateTime.now()\n$today // Equivalent to DateTime.now().set({ hour: 0, minute: 0, second: 0, millisecond: 0 })\n```\n\n----------------------------------------\n\nTITLE: Using _now and _today in Python\nDESCRIPTION: Python methods for working with current date and time in n8n. _now returns a Luxon object with the current timestamp, while _today returns a Luxon object with the current timestamp rounded down to the day.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/date-time.md#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n_now # Equivalent to DateTime.now()\n_today # Equivalent to DateTime.now().set({ hour: 0, minute: 0, second: 0, millisecond: 0 })\n```\n\n----------------------------------------\n\nTITLE: Setting Up Routing for an API Operation in n8n Node (JavaScript)\nDESCRIPTION: This snippet illustrates defining the 'routing' property inside an n8n node options array to configure an API call for an operation. It also shows the use of 'requestDefaults' to set default headers and base URL for all requests, and how to specify method and endpoint per operation. The code assumes dependency on the n8n node base and the target API (e.g., NASA API). Key parameters: 'baseURL', 'headers', and the per-operation 'routing.request' block. The main input is user-selected node operation, and the output is API call execution with appropriate defaults.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/node-base-files/declarative-style-parameters.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ndescription: INodeTypeDescription = {\n  // Other node info here\n  requestDefaults: {\n\t\t\tbaseURL: 'https://api.nasa.gov',\n\t\t\turl: '',\n\t\t\theaders: {\n\t\t\t\tAccept: 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t},\n    properties: [\n      // Resources here\n      {\n        displayName: 'Operation'\n        // Other operation details\n        options: [\n          {\n            name: 'Get'\n            value: 'get',\n            description: '',\n            routing: {\n              request: {\n                method: 'GET',\n                url: '/planetary/apod'\n              }\n            }\n          }\n        ]\n      }\n    ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Calculating Duration Between Two Dates with Luxon (JavaScript, Expressions and Code Node)\nDESCRIPTION: Calculates the difference (diff) between two Luxon DateTime objects, outputting the duration in months. Uses the diff method followed by toObject for a structured result. Inputs are two ISO date strings. Dependencies: Luxon library, available in n8n JavaScript. The output is an object containing the difference unit(s).\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/luxon.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n{{DateTime.fromISO('2019-06-23').diff(DateTime.fromISO('2019-05-23'), 'months').toObject()}}\n```\n\nLANGUAGE: js\nCODE:\n```\nlet monthsBetweenDates = DateTime.fromISO('2019-06-23').diff(DateTime.fromISO('2019-05-23'), 'months').toObject()\n```\n\n----------------------------------------\n\nTITLE: Handling JsProxy Objects when Printing in Python (n8n Code Node)\nDESCRIPTION: Provides an example of processing data retrieved from a previous n8n node (using `_(\"<node-name>\").all()`) within a Python Code node. It demonstrates the necessity of converting `JsProxy` objects (which represent n8n data items) to native Python dictionaries using `.json.to_py()` before printing to avoid the generic `[object Object]` output and view the actual data content. Replace `<node-name>` with the actual name of the source node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/code-node/console-log.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npreviousNodeData = _(\"<node-name>\").all();\nfor item in previousNodeData:\n\t# item is of type <class 'pyodide.ffi.JsProxy'>\n\t# You need to convert it to a Dict\n\titemDict = item.json.to_py()\n\tprint(itemDict)\n```\n\n----------------------------------------\n\nTITLE: Applying Object Projection with JMESPath in n8n Code Node (JavaScript)\nDESCRIPTION: Retrieves the ages for all dogs in object format through a JMESPath object projection in a JavaScript Code node. Uses $jmespath on $json.body.dogs with '*.age'. Returns result in object 'dogsAges'.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/jmespath.md#2025-04-22_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet dogsAges = $jmespath($json.body.dogs, \"*.age\");\nreturn {dogsAges};\n/* Returns:\n[\n\t{\n\t\t\"dogsAges\": [\n\t\t\t7,\n\t\t\t5\n\t\t]\n\t}\n]\n*/\n```\n\n----------------------------------------\n\nTITLE: Generating Sample Data n8n Code JavaScript\nDESCRIPTION: This JavaScript snippet, intended for use within an n8n Code node, generates a sample dataset formatted as an array containing a single object. The object includes properties for 'name', 'language', and a nested 'country' object with 'code' and 'name' properties. This data is used as an input source for the Merge node in the provided exercise.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/courses/level-two/chapter-3.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nreturn [\n  {\n    'name': 'Jay Gatsby',\n    'language': 'English',\n    'country': {\n      'code': 'US',\n      'name': 'United States'\n    }\n    \n  }\n  \n];\n```\n\n----------------------------------------\n\nTITLE: Retrieving Execution ID - n8n Code Node - JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve the unique execution ID of the current n8n workflow execution within a JavaScript Code node. You must use the built-in $execution context object provided by n8n. The result is a string identifier for the current execution. No external dependencies are required.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/builtin/execution.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet executionId = $execution.id;\n```\n\n----------------------------------------\n\nTITLE: Export Credentials\nDESCRIPTION: Commands for exporting credentials from n8n. Includes options for exporting all credentials or specific ones by ID, with various output formatting options.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/cli-commands.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nn8n export:credentials --all\n```\n\nLANGUAGE: bash\nCODE:\n```\nn8n export:credentials --id=<ID> --output=file.json\n```\n\nLANGUAGE: bash\nCODE:\n```\nn8n export:credentials --all --output=backups/latest/file.json\n```\n\nLANGUAGE: bash\nCODE:\n```\nn8n export:credentials --backup --output=backups/latest/\n```\n\nLANGUAGE: bash\nCODE:\n```\nn8n export:credentials --all --decrypted --output=backups/decrypted.json\n```\n\n----------------------------------------\n\nTITLE: Accessing Data from Items Retrieved with .all() in Python (n8n)\nDESCRIPTION: Illustrates iterating through items returned by `_('<node-name>').all()` in n8n Python code. Since items are returned as `pyodide.ffi.JsProxy` objects, this example demonstrates converting each item to a Python dictionary using `.json.to_py()` before accessing its data and printing it.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/builtin/all.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npreviousNodeData = _(\"<node-name>\").all();\nfor item in previousNodeData:\n\t# item is of type <class 'pyodide.ffi.JsProxy'>\n\t# You need to convert it to a Dict\n  \titemDict = item.json.to_py()\n  \tprint(itemDict)\n```\n\n----------------------------------------\n\nTITLE: Fetching Workflow Template\nDESCRIPTION: GET request to retrieve the JSON data of an existing workflow template by its ID.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/embed/managing-workflows.md#2025-04-22_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET https://<n8n-domain>/rest/workflows/1012\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using Shell\nDESCRIPTION: This shell command uses npm (Node Package Manager) to install all the necessary dependencies defined in the `package.json` file of the n8n node starter project. These dependencies are required for node development, building, and linting.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/declarative-style-node.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Checking Node Execution Status in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to check if a preceding node in an n8n workflow has been executed before attempting to access its data. Using `$(<node-name>).isExecuted` returns a boolean value, which can be used in conditional logic to prevent errors like 'Can't get data for expression' or 'Referenced node is unexecuted' when a node might not run in all workflow branches.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/expressions/common-issues.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n$(\"<node-name>\").isExecuted\n```\n\n----------------------------------------\n\nTITLE: Opening Firewall Ports for n8n Web Traffic\nDESCRIPTION: Commands to open ports 80 and 443 in the Droplet's firewall to allow incoming HTTP and HTTPS traffic for the n8n web application.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/digital-ocean.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo ufw allow 80\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo ufw allow 443\n```\n\n----------------------------------------\n\nTITLE: Defining an n8n Workflow to Convert PDF to JSON\nDESCRIPTION: This JSON object defines an n8n workflow. It starts with a manual trigger, uses an `HTTP Request` node to fetch a PDF file from a specified URL (`https://media.kaspersky.com/pdf/Kaspersky_Lab_Whitepaper_Anti_blocker.pdf`), and then uses an `Extract From File` node (configured for 'pdf' operation) to convert the binary PDF data into JSON format. The `connections` object defines the data flow between the nodes, starting from the manual trigger, going to the HTTP request, and finally to the extraction node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/courses/level-two/chapter-2.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"Binary to JSON\",\n\t\"nodes\": [\n\t\t{\n\t\t\"parameters\": {},\n\t\t\"id\": \"78639a25-b69a-4b9c-84e0-69e045bed1a3\",\n\t\t\"name\": \"When clicking \\\"Execute Workflow\\\"\",\n\t\t\"type\": \"n8n-nodes-base.manualTrigger\",\n\t\t\"typeVersion\": 1,\n\t\t\"position\": [\n\t\t\t480,\n\t\t\t520\n\t\t]\n\t\t},\n\t\t{\n\t\t\"parameters\": {\n\t\t\t\"url\": \"https://media.kaspersky.com/pdf/Kaspersky_Lab_Whitepaper_Anti_blocker.pdf\",\n\t\t\t\"options\": {}\n\t\t},\n\t\t\"id\": \"a11310df-1287-4e9a-b993-baa6bd4265a6\",\n\t\t\"name\": \"HTTP Request\",\n\t\t\"type\": \"n8n-nodes-base.httpRequest\",\n\t\t\"typeVersion\": 4.1,\n\t\t\"position\": [\n\t\t\t700,\n\t\t\t520\n\t\t]\n\t\t},\n\t\t{\n\t\t\"parameters\": {\n\t\t\t\"operation\": \"pdf\",\n\t\t\t\"options\": {}\n\t\t},\n\t\t\"id\": \"88697b6b-fb02-4c3d-a715-750d60413e9f\",\n\t\t\"name\": \"Extract From File\",\n\t\t\"type\": \"n8n-nodes-base.extractFromFile\",\n\t\t\"typeVersion\": 1,\n\t\t\"position\": [\n\t\t\t920,\n\t\t\t520\n\t\t]\n\t\t}\n\t],\n\t\"pinData\": {},\n\t\"connections\": {\n\t\t\"When clicking \\\"Execute Workflow\\\"\": {\n\t\t\"main\": [\n\t\t\t[\n\t\t\t{\n\t\t\t\t\"node\": \"HTTP Request\",\n\t\t\t\t\"type\": \"main\",\n\t\t\t\t\"index\": 0\n\t\t\t}\n\t\t\t]\n\t\t]\n\t\t},\n\t\t\"HTTP Request\": {\n\t\t\"main\": [\n\t\t\t[\n\t\t\t{\n\t\t\t\t\"node\": \"Extract From File\",\n\t\t\t\t\"type\": \"main\",\n\t\t\t\t\"index\": 0\n\t\t\t}\n\t\t\t]\n\t\t]\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Node Output in n8n Workflows - Python\nDESCRIPTION: These code snippets demonstrate the equivalent methods for accessing other nodes' output data in n8n workflows using Python in the Code node. The API mirrors the JavaScript methods, allowing retrieval of all, first, or last items, accessing node parameters and context, and item matching for input tracing. These Python methods are only available in the Code node for n8n, and some (such as .item) are not accessible in this context, as noted. Usage requires specifying the node name as a string.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/output-other-nodes.md#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# Returns all items from a given node\n_(\"<node-name>\").all(branchIndex?, runIndex?)\n\n```\n\nLANGUAGE: Python\nCODE:\n```\n# The first item output by the given node\n_(\"<node-name>\").first(branchIndex?, runIndex?)\n\n```\n\nLANGUAGE: Python\nCODE:\n```\n# The last item output by the given node\n_(\"<node-name>\").last(branchIndex?, runIndex?)\n\n```\n\nLANGUAGE: Python\nCODE:\n```\n# The linked item (not available in Code node)\n_(\"<node-name>\").item\n\n```\n\nLANGUAGE: Python\nCODE:\n```\n# Object containing the query settings of the given node\n_(\"<node-name>\").params\n\n```\n\nLANGUAGE: Python\nCODE:\n```\n# Boolean. Node execution context (only\n# available in Loop Over Items node)\n_(\"<node-name>\").context\n\n```\n\nLANGUAGE: Python\nCODE:\n```\n# Item tracing for linked input (use instead of .item in Code node)\n_(\"<node-name>\").itemMatching(currentNodeInputIndex)\n\n```\n\n----------------------------------------\n\nTITLE: Date Calculation Expression in n8n\nDESCRIPTION: Expression to calculate a date 7 days before the current date using n8n's Luxon integration.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/try-it-out/tutorial-first-workflow.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{{ $today.minus(7, 'days') }}\n```\n\n----------------------------------------\n\nTITLE: Returning Calculated Data from n8n Code Node in JavaScript\nDESCRIPTION: This snippet highlights the required return format for an n8n Code node. It shows how calculated variables (`totalBooked`, `bookedSum`) must be wrapped within a 'json' object, which itself is an element within an array (`[{ json: {...} }]`), adhering to the standard n8n data structure.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/courses/level-one/chapter-5/chapter-5.5.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nreturn [{ json: {totalBooked, bookedSum} }]\n```\n\n----------------------------------------\n\nTITLE: Starting n8n Worker Process using CLI in Bash\nDESCRIPTION: Executes the n8n command-line interface to start a worker process directly from the project's root directory. Worker processes connect to Redis and the database to pick up and execute workflows queued by the main n8n instance in queue mode.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/scaling/queue-mode.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./packages/cli/bin/n8n worker\n```\n\n----------------------------------------\n\nTITLE: Applying Object Projection with JMESPath Expression (JavaScript Expression)\nDESCRIPTION: Gets a list of dog ages from an object containing dog info using a JMESPath object projection in an n8n JavaScript expression. Assumes $json.body.dogs as dictionary input. Returns a flat array of dog ages.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/jmespath.md#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n{{$jmespath($json.body.dogs, \"*.age\")}}\n// Returns [7,5]\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Table for n8n External Hooks\nDESCRIPTION: Table defining the available environment variables for configuring external hooks in n8n. Includes variables for both backend hook files and frontend hook URLs.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/environment-variables/external-hooks.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable | Type  | Description |\n| :------- | :---- | :---------- |\n| `EXTERNAL_HOOK_FILES` | String | Files containing backend external hooks. Provide multiple files as a colon-separated list (\":`\"). |\n| `EXTERNAL_FRONTEND_HOOKS_URLS` | String | URLs to files containing frontend external hooks. Provide multiple URLs as a colon-separated list (\":`\"). |\n```\n\n----------------------------------------\n\nTITLE: Installing n8n globally with npm in Bash\nDESCRIPTION: This command installs n8n globally using npm. It can be modified to install specific versions using the @ syntax.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/npm.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install n8n -g\n```\n\n----------------------------------------\n\nTITLE: Configuring Light Node Versioning in n8n with Display Options - JavaScript\nDESCRIPTION: This code snippet demonstrates how to define multiple node versions in the n8n node configuration object using JavaScript. It changes the 'version' parameter to an array to enable light versioning, and uses 'displayOptions' with the '@version' property to conditionally display a resource only in a specified version (here, version 2). This approach requires no special dependencies beyond the n8n environment and is suitable for all node types. The expected input is the node descriptor object, while the output is a node that behaves differently based on its version, with properties explicitly shown or hidden depending on the active version.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/node-versioning.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n{\n    displayName: 'NASA Pics',\n    name: 'NasaPics',\n    icon: 'file:nasapics.svg',\n    // List the available versions\n    version: [1,2,3],\n    // More basic parameters here\n    properties: [\n        // Add a resource that's only displayed for version2\n        {\n            displayName: 'Resource name',\n            // More resource parameters\n            displayOptions: {\n                show: {\n                    '@version': 2,\n                },\n            },\n        },\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Export Workflows\nDESCRIPTION: Commands for exporting workflows from n8n. Includes options for exporting all workflows or specific ones by ID, with various output formatting options.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/cli-commands.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nn8n export:workflow --all\n```\n\nLANGUAGE: bash\nCODE:\n```\nn8n export:workflow --id=<ID> --output=file.json\n```\n\nLANGUAGE: bash\nCODE:\n```\nn8n export:workflow --all --output=backups/latest/file.json\n```\n\nLANGUAGE: bash\nCODE:\n```\nn8n export:workflow --backup --output=backups/latest/\n```\n\n----------------------------------------\n\nTITLE: Sensitive Data Configuration Examples\nDESCRIPTION: Examples of environment variables using _FILE suffix for loading sensitive data from separate files\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/configuration-methods.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nCREDENTIALS_OVERWRITE_DATA_FILE=/path/to/credentials_data\nDB_TYPE_FILE=/path/to/db_type\nDB_POSTGRESDB_DATABASE_FILE=/path/to/database_name\nDB_POSTGRESDB_HOST_FILE=/path/to/database_host\nDB_POSTGRESDB_PORT_FILE=/path/to/database_port\nDB_POSTGRESDB_USER_FILE=/path/to/database_user\nDB_POSTGRESDB_PASSWORD_FILE=/path/to/database_password\nDB_POSTGRESDB_SCHEMA_FILE=/path/to/database_schema\nDB_POSTGRESDB_SSL_CA_FILE=/path/to/ssl_ca\nDB_POSTGRESDB_SSL_CERT_FILE=/path/to/ssl_cert\nDB_POSTGRESDB_SSL_KEY_FILE=/path/to/ssl_key\nDB_POSTGRESDB_SSL_REJECT_UNAUTHORIZED_FILE=/path/to/ssl_reject_unauth\n```\n\n----------------------------------------\n\nTITLE: Configuring Execution Data Saving with Docker in n8n\nDESCRIPTION: This snippet shows how to set environment variables to control execution data saving when running n8n in a Docker container. It includes options for saving error executions, successful executions, node progress, and manual executions.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/scaling/execution-data.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -it --rm \\\n --name n8n \\\n -p 5678:5678 \\\n -e EXECUTIONS_DATA_SAVE_ON_ERROR=all \\\n -e EXECUTIONS_DATA_SAVE_ON_SUCCESS=none \\\n -e EXECUTIONS_DATA_SAVE_ON_PROGRESS=true \\\n -e EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS=false \\\n docker.n8n.io/n8nio/n8n\n```\n\n----------------------------------------\n\nTITLE: n8n Workflow Definition for Looping RSS Read (JSON)\nDESCRIPTION: This JSON snippet provides the complete configuration for an n8n workflow designed to read multiple RSS feeds sequentially. It includes nodes for manual triggering, a Code node generating feed URLs, a Loop Over Items node for iteration, and an RSS Read node dynamically using the URL from the loop item. This definition can be imported directly into the n8n editor.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/courses/level-two/chapter-3.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"meta\": {\n\t\t\"templateCredsSetupCompleted\": true,\n\t\t\"instanceId\": \"cb484ba7b742928a2048bf8829668bed5b5ad9787579adea888f05980292a4a7\"\n\t},\n\t\"nodes\": [\n\t\t{\n\t\t\"parameters\": {},\n\t\t\"id\": \"ed8dc090-ae8c-4db6-a93b-0fa873015c25\",\n\t\t\"name\": \"When clicking \\\"Test workflow\\\"\",\n\t\t\"type\": \"n8n-nodes-base.manualTrigger\",\n\t\t\"typeVersion\": 1,\n\t\t\"position\": [\n\t\t\t460,\n\t\t\t460\n\t\t]\n\t\t},\n\t\t{\n\t\t\"parameters\": {\n\t\t\t\"jsCode\": \"let urls = [\\n  {\\n    json: {\\n      url: 'https://medium.com/feed/n8n-io'\\n    }\\n  },\\n  {\\n   json: {\\n     url: 'https://dev.to/feed/n8n'\\n   } \\n  }\\n]\\n\\nreturn urls;\"\n\t\t},\n\t\t\"id\": \"1df2a9bf-f970-4e04-b906-92dbbc9e8d3a\",\n\t\t\"name\": \"Code\",\n\t\t\"type\": \"n8n-nodes-base.code\",\n\t\t\"typeVersion\": 2,\n\t\t\"position\": [\n\t\t\t680,\n\t\t\t460\n\t\t]\n\t\t},\n\t\t{\n\t\t\"parameters\": {\n\t\t\t\"options\": {}\n\t\t},\n\t\t\"id\": \"3cce249a-0eab-42e2-90e3-dbdf3684e012\",\n\t\t\"name\": \"Loop Over Items\",\n\t\t\"type\": \"n8n-nodes-base.splitInBatches\",\n\t\t\"typeVersion\": 3,\n\t\t\"position\": [\n\t\t\t900,\n\t\t\t460\n\t\t]\n\t\t},\n\t\t{\n\t\t\"parameters\": {\n\t\t\t\"url\": \"={{ $json.url }}\",\n\t\t\t\"options\": {}\n\t\t},\n\t\t\"id\": \"50e1c1dc-9a5d-42d3-b7c0-accc31636aa6\",\n\t\t\"name\": \"RSS Read\",\n\t\t\"type\": \"n8n-nodes-base.rssFeedRead\",\n\t\t\"typeVersion\": 1,\n\t\t\"position\": [\n\t\t\t1120,\n\t\t\t460\n\t\t]\n\t\t}\n\t],\n\t\"connections\": {\n\t\t\"When clicking \\\"Test workflow\\\"\": {\n\t\t\"main\": [\n\t\t\t[\n\t\t\t{\n\t\t\t\t\"node\": \"Code\",\n\t\t\t\t\"type\": \"main\",\n\t\t\t\t\"index\": 0\n\t\t\t}\n\t\t\t]\n\t\t]\n\t\t},\n\t\t\"Code\": {\n\t\t\"main\": [\n\t\t\t[\n\t\t\t{\n\t\t\t\t\"node\": \"Loop Over Items\",\n\t\t\t\t\"type\": \"main\",\n\t\t\t\t\"index\": 0\n\t\t\t}\n\t\t\t]\n\t\t]\n\t\t},\n\t\t\"Loop Over Items\": {\n\t\t\"main\": [\n\t\t\tnull,\n\t\t\t[\n\t\t\t{\n\t\t\t\t\"node\": \"RSS Read\",\n\t\t\t\t\"type\": \"main\",\n\t\t\t\t\"index\": 0\n\t\t\t}\n\t\t\t]\n\t\t]\n\t\t},\n\t\t\"RSS Read\": {\n\t\t\"main\": [\n\t\t\t[\n\t\t\t{\n\t\t\t\t\"node\": \"Loop Over Items\",\n\t\t\t\t\"type\": \"main\",\n\t\t\t\t\"index\": 0\n\t\t\t}\n\t\t\t]\n\t\t]\n\t\t}\n\t},\n\t\"pinData\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Execution Time for Individual Workflows in n8n\nDESCRIPTION: Sets the EXECUTIONS_TIMEOUT_MAX environment variable to configure the maximum execution time for individual workflows. The example sets a two-hour maximum (7200 seconds).\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/configuration-examples/execution-timeout.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport EXECUTIONS_TIMEOUT_MAX=7200\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates as Human-Readable Strings with Luxon (JavaScript, Expressions and Code Node)\nDESCRIPTION: Illustrates converting a Luxon DateTime object to a human-friendly string using toLocaleString, with or without custom formatting options. The first example produces a default locale string, while the second customizes the format to 'month: long', 'day: numeric', 'year: numeric'. Designed for easier display in reports, forms, or UI. Works in both expressions and code nodes. Requires a Luxon DateTime object.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/luxon.md#2025-04-22_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n{{$today.minus({days: 7}).toLocaleString()}}\n```\n\nLANGUAGE: js\nCODE:\n```\nlet readableSevenDaysAgo = $today.minus({days: 7}).toLocaleString()\n```\n\nLANGUAGE: js\nCODE:\n```\n{{$today.minus({days: 7}).toLocaleString({month: 'long', day: 'numeric', year: 'numeric'})}}\n```\n\nLANGUAGE: js\nCODE:\n```\nlet readableSevenDaysAgo = $today.minus({days: 7}).toLocaleString({month: 'long', day: 'numeric', year: 'numeric'})\n```\n\n----------------------------------------\n\nTITLE: Workflow JSON Configuration Demo\nDESCRIPTION: JSON workflow configurations referenced in the tutorial for demonstrating different stages of the chat agent setup.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/advanced-ai/intro-tutorial.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[[ workflowDemo(\"file:////advanced-ai/tutorials/chat_01.json\") ]]\n```\n\nLANGUAGE: json\nCODE:\n```\n[[ workflowDemo(\"file:////advanced-ai/tutorials/chat_02.json\") ]]\n```\n\n----------------------------------------\n\nTITLE: JMESPath Method Python Implementation\nDESCRIPTION: The _jmespath() method provides JMESPath search functionality for JSON objects in Python environments. Available only within Python code contexts, not in expressions.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/jmespath.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n_jmespath()\n```\n\n----------------------------------------\n\nTITLE: Defining Resource and Operation Parameters in n8n Nodes (JavaScript)\nDESCRIPTION: This snippet shows how to define a resource and operation selection structure inside an n8n node using JavaScript object notation. The implementation involves properties for choosing a resource and then choosing an operation relevant to that resource, using parameters such as 'displayOptions' to conditionally render operations per resource. This pattern ensures only valid operations are selectable for each resource and uses n8n's recommended naming and configuration fields.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/code-standards.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const ExampleNode implements INodeType {\n    description: {\n        displayName: 'Example Node',\n        ...\n        properties: [\n            {\n                displayName: 'Resource',\n                name: 'resource',\n                type: 'options',\n                options: [\n                    {\n                        name: 'Resource One',\n                        value: 'resourceOne'\n                    },\n                    {\n                        name: 'Resource Two',\n                        value: 'resourceTwo'\n                    }\n                ],\n                default: 'resourceOne'\n            },\n            {\n                displayName: 'Operation',\n                name: 'operation',\n                type: 'options',\n                // Only show these operations for Resource One\n                displayOptions: {\n                    show: {\n                        resource: [\n                            'resourceOne'\n                        ]\n                    }\n                },\n                options: [\n                    {\n                        name: 'Create',\n                        value: 'create',\n                        description: 'Create an instance of Resource One'\n                    }\n                ]\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Input Methods for n8n Nodes\nDESCRIPTION: JavaScript methods and variables available for working with node input data. Includes binary data access, item manipulation, and context information. Some methods have limited availability in the Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/current-node-input.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n$binary\n$input.item\n$input.all()\n$input.first()\n$input.last()\n$input.params\n$json\n$input.context.noItemsLeft\n```\n\n----------------------------------------\n\nTITLE: Sample Input Data for Arrow Function Alternatives (JavaScript)\nDESCRIPTION: Demonstrates returning custom JSON-formatted input data from a JavaScript Code node in n8n for use in JMESPath queries. No dependencies. Each returned item contains a 'json' property with item data, suitable for query or filtering examples.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/jmespath.md#2025-04-22_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nreturn[\n  {\n    \"json\": {      \n      \"num_categories\": \"0\",\n      \"num_products\": \"45\",\n      \"category_id\": 5529735,\n      \"parent_id\": 1407340,\n      \"pos_enabled\": 1,\n      \"pos_favorite\": 0,\n      \"name\": \"HP\",\n      \"description\": \"\",\n      \"image\": \"\"\n    }\n  },\n  {\n    \"json\": {\n      \"num_categories\": \"0\",\n      \"num_products\": \"86\",\n      \"category_id\": 5529740,\n      \"parent_id\": 1407340,\n      \"pos_enabled\": 1,\n      \"pos_favorite\": 0,\n      \"name\": \"Lenovo\",\n      \"description\": \"\",\n      \"image\": \"\"\n    }\n  }  \n]\n```\n\n----------------------------------------\n\nTITLE: Example MongoDB Connection String Format\nDESCRIPTION: Illustrates the typical format for a MongoDB connection string used for authentication in n8n. Replace placeholders like 'yourName', 'yourPassword', and 'clusterName' with actual database user credentials and cluster details before entering it into the 'Connection String' field in n8n.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/mongodb.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmongodb+srv://yourName:yourPassword@clusterName.mongodb.net/?retryWrites=true&w=majority\n```\n\n----------------------------------------\n\nTITLE: Running n8n with Tunnel for Localhost Webhook Testing\nDESCRIPTION: Commands to run n8n in tunnel mode for testing Webhook nodes on a self-hosted localhost instance. This allows external services to reach your local n8n instance.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.webhook/workflow-development.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm with tunnel\n```\n\nLANGUAGE: bash\nCODE:\n```\nDocker with tunnel\n```\n\n----------------------------------------\n\nTITLE: Import Credentials\nDESCRIPTION: Commands for importing credentials into n8n. Supports importing from single files or directories.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/cli-commands.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nn8n import:credentials --input=file.json\n```\n\nLANGUAGE: bash\nCODE:\n```\nn8n import:credentials --separate --input=backups/latest/\n```\n\n----------------------------------------\n\nTITLE: Enabling Data Pruning with npm in n8n\nDESCRIPTION: This snippet shows how to enable automatic data pruning and set related parameters using environment variables with npm. It includes options for activating pruning, setting the maximum age of data, and limiting the number of stored executions.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/scaling/execution-data.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# npm\n# Activate automatic data pruning\nexport EXECUTIONS_DATA_PRUNE=true\n\n# Number of hours after execution that n8n deletes data\nexport EXECUTIONS_DATA_MAX_AGE=168\n\n# Number of executions to store\nexport EXECUTIONS_DATA_PRUNE_MAX_COUNT=50000\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Node's Input Item in n8n Expressions\nDESCRIPTION: This expression returns the linked item from the current node's input. It's used to access the input item that the node links to an output item within the same node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/data/data-mapping/data-mapping-expressions.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n{{$input.item}}\n```\n\n----------------------------------------\n\nTITLE: Applying Multiselect List with JMESPath Expression (JavaScript Expression)\nDESCRIPTION: Extracts both first and last names for each person into a new list of pairs using JMESPath multiselect list in n8n expression context. Source is $json.body.people. Returns an array of array pairs.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/jmespath.md#2025-04-22_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n{{$jmespath($json.body.people, \"[].[first, last]\")}}\n// Returns [[\"James\",\"Green\"],[\"Jacob\",\"Jones\"],[\"Jayden\",\"Smith\"]]\n```\n\n----------------------------------------\n\nTITLE: Running n8n in Docker with Access to Host Networking (Shell)\nDESCRIPTION: This shell command launches n8n in a Docker container with special configuration to resolve host.docker.internal to allow the containerized n8n process to connect to the host's services (such as Ollama). It uses the --add-host flag, names the container, binds the n8n service port, and mounts a persistent data volume. Dependencies include Docker, and usage assumes Ollama is running on the Linux host. Output is an n8n instance available at localhost:5678, able to reach Ollama via host.docker.internal.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.lmollama/common-issues.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -it --rm --add-host host.docker.internal:host-gateway --name n8n -p 5678:5678 -v n8n_data:/home/node/.n8n docker.n8n.io/n8nio/n8n\n```\n\n----------------------------------------\n\nTITLE: Mocking Data with Data Pinning in n8n\nDESCRIPTION: This snippet demonstrates how to use data pinning in n8n to mock data. It involves loading real data into the workflow and pinning it in the output panel of a node for reuse.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/data/data-mocking.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/data/how-to-pin-data.md\"\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Commands on Separate Lines in Execute Command Node\nDESCRIPTION: This snippet shows how to run multiple commands in the Execute Command node by placing each command on a separate line. This example changes directory to 'bin' and then lists its contents.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.executecommand/index.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd bin\nls\n```\n\n----------------------------------------\n\nTITLE: Getting Previous Node Run Index in n8n JavaScript\nDESCRIPTION: Retrieves the run index of the previous node that generated the current input item. Note: When used after a Merge node, this always refers to the node connected to the first input connector. This metadata property is available for use within the Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/n8n-metadata.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n$prevNode.runIndex\n```\n\n----------------------------------------\n\nTITLE: Daily Cron Expression with Seconds\nDESCRIPTION: Cron expression to trigger a workflow every day at 04:08:30. The expression specifies seconds, minutes, hours, and uses asterisks for day, month, and weekday fields.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/integrations/builtin/poll-modes.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n30 8 4 * * *\n```\n\n----------------------------------------\n\nTITLE: Triggering n8n Webhook with Curl GET Request and Header (Shell)\nDESCRIPTION: This command uses curl to send an HTTP GET request to the specified n8n Webhook URL, including a custom header using the `--header` flag. Replace `<https://your-n8n.url/webhook/path>` with the actual Webhook URL and `'key=value'` with the desired header.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.webhook/common-issues.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl --request GET <https://your-n8n.url/webhook/path> --header 'key=value'\n```\n\n----------------------------------------\n\nTITLE: Configuring Execution Data Saving with npm in n8n\nDESCRIPTION: This snippet demonstrates how to set environment variables to control which execution data is saved in n8n when using npm. It includes options for saving error executions, successful executions, node progress, and manual executions.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/scaling/execution-data.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# npm\n# Save executions ending in errors\nexport EXECUTIONS_DATA_SAVE_ON_ERROR=all\n\n# Save successful executions\nexport EXECUTIONS_DATA_SAVE_ON_SUCCESS=all\n\n# Don't save node progress for each execution\nexport EXECUTIONS_DATA_SAVE_ON_PROGRESS=false\n\n# Don't save manually launched executions\nexport EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS=false\n```\n\n----------------------------------------\n\nTITLE: Import Workflows\nDESCRIPTION: Commands for importing workflows into n8n. Supports importing from single files or directories.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/cli-commands.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nn8n import:workflow --input=file.json\n```\n\nLANGUAGE: bash\nCODE:\n```\nn8n import:workflow --separate --input=backups/latest/\n```\n\n----------------------------------------\n\nTITLE: Setting n8n User Folder Path using Environment Variable\nDESCRIPTION: Example of how to set the N8N_USER_FOLDER environment variable to specify a custom path for n8n user data storage. This overrides the default .n8n subfolder location.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/configuration-examples/user-folder.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport N8N_USER_FOLDER=/home/jim/n8n\n```\n\n----------------------------------------\n\nTITLE: Managing Custom Execution Data - n8n Code Node - JavaScript\nDESCRIPTION: This JavaScript snippet illustrates how to set and retrieve custom execution data in n8n's Code node using the $execution.customData object. Methods shown include setting individual key-value pairs, setting multiple values at once, accessing the entire custom data object, and retrieving values by key. This functionality is only available in the Code node and requires no additional dependencies.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/builtin/execution.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Set a single piece of custom execution data\\n$execution.customData.set(\\\"key\\\", \\\"value\\\");\\n\\n// Set the custom execution data object\\n$execution.customData.setAll({\\\"key1\\\": \\\"value1\\\", \\\"key2\\\": \\\"value2\\\"})\\n\\n// Access the current state of the object during the execution\\nvar customData = $execution.customData.getAll()\\n\\n// Access a specific value set during this execution\\nvar customData = $execution.customData.get(\\\"key\\\")\n```\n\n----------------------------------------\n\nTITLE: Setting NODES_EXCLUDE Environment Variable in Bash\nDESCRIPTION: This snippet demonstrates how to set the NODES_EXCLUDE environment variable to block access to the Execute Command and Read/Write Files from Disk nodes in n8n.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/securing/blocking-nodes.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nNODES_EXCLUDE: \"[\\\"n8n-nodes-base.executeCommand\\\", \\\"n8n-nodes-base.readWriteFile\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Making API Call to Pull Source Control Changes in n8n\nDESCRIPTION: A cURL command to trigger the source control pull endpoint in n8n. This endpoint allows automating the process of pulling changes from Git into an n8n instance. Requires an instance URL and API key.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/source-control-environments/using/copy-work.md#2025-04-22_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --request POST \\\n\t--location '<YOUR-INSTANCE-URL>/api/v1/source-control/pull' \\\n\t--header 'Content-Type: application/json' \\\n\t--header 'X-N8N-API-KEY: <YOUR-API-KEY>' \\\n\t--data '{\"force\": true}'\n```\n\n----------------------------------------\n\nTITLE: Cloning Node Starter Repository using Shell\nDESCRIPTION: This shell script clones the n8n node starter repository from GitHub into a new directory named 'n8n-nodes-nasa-pics' and then changes the current directory to the newly created one. This sets up the basic project structure for developing a custom n8n node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/declarative-style-node.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/<your-organization>/<your-repo-name>.git n8n-nodes-nasa-pics\ncd n8n-nodes-nasa-pics\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up n8n Node Starter (Shell)\nDESCRIPTION: This snippet demonstrates how to generate and clone a new node repository from n8n's node starter template, and navigate into the project directory. It ensures the developer's environment is ready for building custom nodes by providing the required file structure based on the template. Replace placeholders in the repository URL with your organization and repository name as needed.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/programmatic-style-node.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/<your-organization>/<your-repo-name>.git n8n-nodes-friendgrid\ncd n8n-nodes-friendgrid\n```\n\n----------------------------------------\n\nTITLE: Defining a Programmatic n8n Node Class Structure with execute Method in TypeScript\nDESCRIPTION: This snippet provides the outline for a programmatic-style n8n node. It includes imports for execution context (`IExecuteFunctions`) and workflow types (`INodeExecutionData`, `INodeType`, `INodeTypeDescription`). The `ExampleNode` class implements `INodeType`, defines the `description` object similar to declarative nodes, and crucially includes an `async execute` method. This method is responsible for processing incoming data and returning the results.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/node-base-files/structure.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { IExecuteFunctions } from 'n8n-core';\nimport { INodeExecutionData, INodeType, INodeTypeDescription } from 'n8n-workflow';\n\nexport class ExampleNode implements INodeType {\n\tdescription: INodeTypeDescription = {\n    // Basic node details here\n    properties: [\n      // Resources and operations here\n    ]\n  };\n\n  async execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n    // Process data and return\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Secrets in n8n Expressions\nDESCRIPTION: This JavaScript expression demonstrates how to reference and retrieve a secret from an external vault in n8n credentials. It uses a template literal to access the secret by its vault and secret name.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/external-secrets.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{{ $secrets.<vault-name>.<secret-name> }}\n```\n\n----------------------------------------\n\nTITLE: Applying List Projection with JMESPath in n8n Code Node (Python)\nDESCRIPTION: Extracts first names from a people list using a JMESPath list projection within a Python Code node. Uses _jmespath helper on _json.body.people with the projection expression. Returns a dictionary with 'firstNames' mapping to the resulting list.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/jmespath.md#2025-04-22_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfirstNames = _jmespath(_json.body.people, \"[*].first\" )\nreturn {\"firstNames\":firstNames}\n\"\"\"\nReturns:\n[\n  \t{\n\t\t\"firstNames\": [\n\t\t\t\"James\",\n\t\t\t\"Jacob\",\n\t\t\t\"Jayden\"\n\t\t]\n\t}\n]\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Checking Node Execution Status in n8n JavaScript Code\nDESCRIPTION: This JavaScript code snippet demonstrates how to check if a specific node has executed before using its value in custom code within an n8n workflow. It uses the $() function to access node properties.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/integrations/referenced-node-unexecuted.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n$(\"<node-name>\").isExecuted\n```\n\n----------------------------------------\n\nTITLE: Adding Logs in n8n JavaScript Code\nDESCRIPTION: This snippet shows how to import the LoggerProxy (renamed to Logger for convenience) and use it to add an info-level log message with additional metadata in n8n JavaScript code.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/logging-monitoring/logging.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// You have to import the LoggerProxy. We rename it to Logger to make it easier\n\nimport {\n\tLoggerProxy as Logger\n} from 'n8n-workflow';\n\n// Info-level logging of a trigger function, with workflow name and workflow ID as additional metadata properties\n\nLogger.info(`Polling trigger initiated for workflow \"${workflow.name}\"`, {workflowName: workflow.name, workflowId: workflow.id});\n```\n\n----------------------------------------\n\nTITLE: Setting Node Metadata and Credentials (TypeScript)\nDESCRIPTION: This TypeScript snippet adds essential metadata to the node's description, including display name, icon, group, and required credentials. These properties configure how the node appears in the n8n editor and specify which API authentication credential (here, friendGridApi) is required to access SendGrid. This information is vital for correctly registering the node within n8n's UI and workflow engine.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/programmatic-style-node.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndisplayName: 'FriendGrid',\nname: 'friendGrid',\nicon: 'file:friendGrid.svg',\ngroup: ['transform'],\nversion: 1,\ndescription: 'Consume SendGrid API',\ndefaults: {\n\tname: 'FriendGrid',\n},\ninputs: ['main'],\noutputs: ['main'],\ncredentials: [\n\t{\n\t\tname: 'friendGridApi',\n\t\trequired: true,\n\t},\n],\n```\n\n----------------------------------------\n\nTITLE: Checking Node Execution Status in n8n Python\nDESCRIPTION: Checks whether a specific node, identified by `<node-name>`, has already executed in the current workflow run. This method is available for use within the Python Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/n8n-metadata.md#2025-04-22_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n_(\"<node-name>\").isExecuted\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Cron Interval in Schedule Trigger Node\nDESCRIPTION: This snippet shows examples of cron expressions for various scheduling scenarios in the Schedule Trigger node. It includes expressions for triggering workflows at specific intervals, days, and times.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.scheduletrigger/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Type|Cron Expression|Description|\n|---|---|---|\n|Every X Seconds|`*/10 * * * * *`|Every 10 seconds.|\n|Every X Minutes|`*/5 * * * *`|Every 5 minutes.|\n|Hourly|`0 * * * *`|Every hour on the hour.|\n|Daily|`0 6 * * *`|At 6:00 AM every day.|\n|Weekly|`0 12 * * 1`|At noon every Monday.|\n|Monthly|`0 0 1 * *`|At midnight on the 1st of every month.|\n|Every X Days|`0 0 */3 * *`|At midnight every 3rd day.|\n|Only Weekdays|`0 9 * * 1-5`|At 9:00 AM Monday through Friday.|\n|Custom Hourly Range|`0 9-17 * * *`|Every hour from 9:00 AM to 5:00 PM every day.|\n|Quarterly|`0 0 1 1,4,7,10 *`|At midnight on the 1st of January, April, July, and October.|\n```\n\n----------------------------------------\n\nTITLE: Generating Sample Data with JavaScript in Code Node (Input 1)\nDESCRIPTION: This JavaScript code snippet creates an array of objects representing people with their names and languages. It's used in a Code node to generate sample input data for the Merge node example.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.merge.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nreturn [\n  {\n    json: {\n      name: 'Stefan',\n      language: 'de',\n    }\n  },\n  {\n    json: {\n      name: 'Jim',\n      language: 'en',\n    }\n  },\n  {\n    json: {\n      name: 'Hans',\n      language: 'de',\n    }\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL Server Hostname in SQL\nDESCRIPTION: This SQL query retrieves the configured hostname of the MySQL server instance. The result is used to set the 'Host' parameter when configuring MySQL credentials in n8n. Requires permissions to execute `SHOW VARIABLES`.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/mysql.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSHOW VARIABLES WHERE Variable_name = 'hostname';\n```\n\n----------------------------------------\n\nTITLE: Setting Up Credential Test Request - n8n - TypeScript\nDESCRIPTION: This snippet defines a test object in the credentials configuration that n8n uses to verify if the credentials are valid. The configuration includes a 'request' property specifying a dynamic baseURL and a test endpoint URL. Inputs are sourced from the current credential values. This is necessary for enabling the 'test' function in the n8n GUI for credentials.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/credentials-files.md#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ntest: ICredentialTestRequest = {\n\t\trequest: {\n\t\t\tbaseURL: '={{$credentials?.domain}}',\n\t\t\turl: '/bearer',\n\t\t},\n\t};\n```\n\n----------------------------------------\n\nTITLE: Setting Next Page URL from Response Body in n8n HTTP Request (JavaScript)\nDESCRIPTION: This JavaScript expression demonstrates how to configure pagination in the n8n HTTP Request node when the API response includes the URL for the next page. It accesses the 'next-page' key within the response body using the built-in `$response` variable. This is used in the 'Next URL' field when 'Pagination Mode' is set to 'Response Contains Next URL'. The specific key ('next-page' in this example) depends on the API's response structure.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/http-node/pagination.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{{ $response.body[\"next-page\"] }}\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Volumes for n8n and Caddy\nDESCRIPTION: Commands to create Docker volumes for persisting Caddy and n8n data between container restarts. This ensures data persistence and faster start times.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/digital-ocean.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo docker volume create caddy_data\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo docker volume create n8n_data\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Action for n8n Instance Pull in YAML\nDESCRIPTION: This YAML configuration defines a GitHub Action workflow that performs a pull operation on an n8n instance. It uses secrets to securely handle the instance URL and API key.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/source-control-environments/github-action.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: CI\non:\n  # Trigger the workflow on push or pull request events for the \"production\" branch\n  push:\n    branches: [ \"production\" ]\n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\njobs:\n  run-pull:\n    runs-on: ubuntu-latest\n    steps:\n      - name: PULL\n\t\t\t\t# Use GitHub secrets to protect sensitive information\n        run: >\n          curl --location '${{ secrets.INSTANCE_URL }}/version-control/pull' --header\n          'Content-Type: application/json' --header 'X-N8N-API-KEY: ${{ secrets.INSTANCE_API_KEY }}'\n```\n\n----------------------------------------\n\nTITLE: Generating Flat JSON with Dot Notation Disabled in n8n Set Node\nDESCRIPTION: This JSON object illustrates the output when the 'Support Dot Notation' option is disabled in the Edit Fields (Set) node. Setting the field name to `number.one` and value to `20` results in a flat structure where `number.one` is treated as a single key. This requires explicitly disabling dot notation via node options.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.set.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"number.one\": 20\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Timezone for n8n in Docker\nDESCRIPTION: This command sets both the n8n application timezone and the system timezone when running n8n in Docker.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/docker.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker volume create n8n_data\n\ndocker run -it --rm \\\n --name n8n \\\n -p 5678:5678 \\\n -e GENERIC_TIMEZONE=\"Europe/Berlin\" \\\n -e TZ=\"Europe/Berlin\" \\\n -v n8n_data:/home/node/.n8n \\\n docker.n8n.io/n8nio/n8n\n```\n\n----------------------------------------\n\nTITLE: Configuring n8n Instance for External Task Runners\nDESCRIPTION: Environment variables to set up n8n for using external task runners. This includes enabling runners, setting the mode to external, configuring authentication, and allowing external connections.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/task-runners.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nN8N_RUNNERS_ENABLED=true\nN8N_RUNNERS_MODE=external\nN8N_RUNNERS_AUTH_TOKEN=<random secure shared secret>\nN8N_RUNNERS_BROKER_LISTEN_ADDRESS=0.0.0.0\n```\n\n----------------------------------------\n\nTITLE: Configuring loadOptions with Routing and Output in n8n Node (JavaScript)\nDESCRIPTION: This snippet demonstrates how to define the 'methods' and 'loadOptions' properties within an n8n node base file to dynamically load user-specific options from an external service. It configures routing to query a webhook endpoint and processes the response with several output post-processing actions: extracting data from nested properties, mapping response fields, and sorting. Dependencies include n8n's declarative node API, and parameters include the routing.request URL and the postReceive output transformations. Input is the remote data returned by the queried URL, and output is a GUI-renderable options list.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/node-base-files/declarative-style-parameters.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmethods : {\n\tloadOptions: {\n\t\trouting: {\n\t\t\trequest: {\n\t\t\t\turl: '/webhook/example-option-parameters',\n\t\t\t\tmethod: 'GET',\n\t\t\t},\n\t\t\toutput: {\n\t\t\t\tpostReceive: [\n\t\t\t\t\t{\n\t\t\t\t\t\t// When the returned data is nested under another property\n\t\t\t\t\t\t// Specify that property key\n\t\t\t\t\t\ttype: 'rootProperty',\n\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\tproperty: 'responseData',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'setKeyValue',\n\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\tname: '={{$responseItem.key}} ({{$responseItem.value}})',\n\t\t\t\t\t\t\tvalue: '={{$responseItem.value}}',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t// If incoming data is an array of objects, sort alphabetically by key\n\t\t\t\t\t\ttype: 'sort',\n\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\tkey: 'name',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t},\n\t}\n},\n\n```\n\n----------------------------------------\n\nTITLE: Incorrect: Setting 'json' to an Array (JavaScript)\nDESCRIPTION: This snippet shows a common mistake—returning an array assigned to the 'json' property, which results in an error. In n8n Code node outputs, 'json' must always reference an object, not an array or other types. This example is used to illustrate what not to do.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.code/common-issues.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    \"json\": [\n\t  // Setting `json` to an array like this will produce an error\n\t]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Starting n8n Worker Container using Docker Command\nDESCRIPTION: Runs a Docker command to start an n8n worker container named `n8n-queue`. It maps the container's port 5678 to the host's port 5679 and uses the official n8n Docker image (`docker.n8n.io/n8nio/n8n`) specifying the `worker` command. This worker connects to Redis and the database for processing queued workflow executions.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/scaling/queue-mode.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name n8n-queue -p 5679:5678 docker.n8n.io/n8nio/n8n worker\n```\n\n----------------------------------------\n\nTITLE: Accessing Instance Variables in n8n Python\nDESCRIPTION: Contains the [Variables](/code/variables.md) defined and available in the active n8n environment. This metadata property is available for use within the Python Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/n8n-metadata.md#2025-04-22_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n_vars\n```\n\n----------------------------------------\n\nTITLE: Importing Core n8n Node Types in TypeScript\nDESCRIPTION: This TypeScript code imports the essential interfaces `INodeType` and `INodeTypeDescription` from the 'n8n-workflow' package. These interfaces are fundamental for defining the structure and properties of a custom n8n node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/declarative-style-node.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { INodeType, INodeTypeDescription } from 'n8n-workflow';\n```\n\n----------------------------------------\n\nTITLE: Cloning n8n Kubernetes Configuration Repository\nDESCRIPTION: Commands to clone the n8n Kubernetes hosting configuration repository and change to the repository directory.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/google-cloud.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/n8n-io/n8n-kubernetes-hosting.git -b gcp\n```\n\nLANGUAGE: shell\nCODE:\n```\ncd n8n-kubernetes-hosting\n```\n\n----------------------------------------\n\nTITLE: Converting ISO Date String to Luxon DateTime (JavaScript, Expressions and Code Node)\nDESCRIPTION: Demonstrates initializing a Luxon DateTime object from an ISO 8601 date string using the fromISO method. Available in both expressions and JavaScript code nodes. Accepts a date string ('2019-06-23T00:00:00.00') as input and provides a Luxon DateTime object for downstream manipulation. Requires 'luxon' library (already present in n8n expressions/code nodes); no extra dependencies needed.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/luxon.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n{{DateTime.fromISO('2019-06-23T00:00:00.00')}}\n```\n\nLANGUAGE: js\nCODE:\n```\nlet luxonDateTime = DateTime.fromISO('2019-06-23T00:00:00.00')\n```\n\n----------------------------------------\n\nTITLE: Updating Notion Page Relation Using HTTP Request - JSON\nDESCRIPTION: Demonstrates the JSON payload used to update a one-way relation property for a Notion page using an HTTP PATCH request to the Notion API. This approach requires sending a PATCH request to the Notion page endpoint with the appropriate relation property structure under 'properties'. The snippet assumes authentication is configured and the Notion API version is compatible; parameters include the target relation property name and the related database record ID.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.notion/common-issues.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n\\t\\\"properties\\\": {\\n\\t\\t\\\"Account\\\": {\\n\\t\\t\\t\\\"relation\\\": [\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\\"id\\\": \\\"<your_relation_ID>\\\"\\n\\t\\t\\t\\t}\\n\\t\\t\\t]\\n\\t\\t}\\n\\t}\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Field Values with Query Parameters in n8n Form Trigger\nDESCRIPTION: This example demonstrates how to use query parameters to set initial values for form fields in the n8n Form Trigger node. It includes percent-encoding for special characters to ensure proper handling of field names and values.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.formtrigger.md#2025-04-22_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nhttps://my-account.n8n.cloud/form/my-form?email=jane.doe%40example.com&name=Jane%20Doe\n```\n\n----------------------------------------\n\nTITLE: Disabling n8n API Playground with Bash\nDESCRIPTION: This snippet uses Bash to set the N8N_PUBLIC_API_SWAGGERUI_DISABLED environment variable to true, thereby disabling the API playground interface (Swagger UI) for n8n's public API. This is recommended to further limit interactive exploration of the API, enhancing the system's security posture. It requires command line access and does not depend on external libraries or frameworks.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/securing/disable-public-api.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport N8N_PUBLIC_API_SWAGGERUI_DISABLED=true\n```\n\n----------------------------------------\n\nTITLE: Updating n8n Docker Image\nDESCRIPTION: These commands demonstrate how to pull the latest or a specific version of the n8n Docker image.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/docker.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Pull latest (stable) version\ndocker pull docker.n8n.io/n8nio/n8n\n\n# Pull specific version\ndocker pull docker.n8n.io/n8nio/n8n:1.81.0\n\n# Pull next (unstable) version\ndocker pull docker.n8n.io/n8nio/n8n:next\n```\n\n----------------------------------------\n\nTITLE: Setting Single Custom Execution Data Item - n8n Code Node (JavaScript)\nDESCRIPTION: Demonstrates how to set a single key-value pair in the custom execution data object for the current workflow run using the n8n Code node in JavaScript. Requires n8n and access to the special $execution object inside the Code node. The method $execution.customData.set(key, value) stores values (both as strings) for later retrieval; subject to length (key: 50, value: 255) and quantity (max 10) constraints.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/workflows/executions/custom-executions-data.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n$execution.customData.set(\"key\", \"value\");\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables Path in npm\nDESCRIPTION: Examples of setting the N8N_CONFIG_FILES environment variable path for single and multiple configuration files\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/configuration-methods.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Bash - Single file\nexport N8N_CONFIG_FILES=/<path-to-config>/my-config.json\n# Bash - Multiple files are comma-separated\nexport N8N_CONFIG_FILES=/<path-to-config>/my-config.json,/<path-to-config>/production.json\n\n# PowerShell - Single file, persist for current user\n# Note that setting scope (Process, User, Machine) has no effect on Unix systems\n[Environment]::SetEnvironmentVariable('N8N_CONFIG_FILES', '<path-to-config>\\config.json', 'User')\n```\n\n----------------------------------------\n\nTITLE: Starting n8n Webhook Processor using CLI in Bash\nDESCRIPTION: Executes the n8n command-line interface to start a dedicated webhook processor process from the project's root directory. Webhook processors handle incoming webhook requests in queue mode, requiring connection to Redis and the `EXECUTIONS_MODE=queue` setting. This offloads webhook handling from the main instance.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/scaling/queue-mode.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./packages/cli/bin/n8n webhook\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration Example for n8n Nodes\nDESCRIPTION: Example showing how to exclude specific nodes for security purposes using NODES_EXCLUDE environment variable in n8n.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/environment-variables/nodes.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"[\\\"n8n-nodes-base.executeCommand\\\", \\\"n8n-nodes-base.readWriteFile\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON Input in TypeScript for n8n Node\nDESCRIPTION: This code snippet demonstrates how to implement a JSON input UI element in an n8n node. It includes options for display conditions based on resource and operation selections.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/ui-elements.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\tdisplayName: 'Content (JSON)',\n\tname: 'content',\n\ttype: 'json',\n\tdefault: '',\n\tdescription: '',\n\tdisplayOptions: { // the resources and operations to display this element with\n\t\tshow: {\n\t\t\tresource: [\n\t\t\t\t// comma-separated list of resource names\n\t\t\t],\n\t\t\toperation: [\n\t\t\t\t// comma-separated list of operation names\n\t\t\t]\n\t\t}\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Resource Limits for n8n Pods in Kubernetes\nDESCRIPTION: YAML configuration for setting memory resource requests and limits for n8n pods in Kubernetes.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/azure.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  requests:\n    memory: \"250Mi\"\n  limits:\n    memory: \"500Mi\"\n```\n\n----------------------------------------\n\nTITLE: Outlining Credentials Structure with Class and Authentication - n8n - TypeScript\nDESCRIPTION: This snippet demonstrates the overall structure necessary to define a credentials file for an n8n node using TypeScript. It imports required types from the n8n-workflow package, creates a credentials class with basic properties (like API key), and showcases how authentication and credential testing should be set up. Dependencies include the 'n8n-workflow' TypeScript definitions, and the input parameters such as API key and domain are used for authenticating requests. The class is expected to be used within the n8n ecosystem to support secure connections for custom nodes.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/credentials-files.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {\n\tIAuthenticateGeneric,\n\tICredentialTestRequest,\n\tICredentialType,\n\tINodeProperties,\n} from 'n8n-workflow';\n\nexport class ExampleNode implements ICredentialType {\n\tname = 'exampleNodeApi';\n\tdisplayName = 'Example Node API';\n\tdocumentationUrl = '';\n\tproperties: INodeProperties[] = [\n\t\t{\n\t\t\tdisplayName: 'API Key',\n\t\t\tname: 'apiKey',\n\t\t\ttype: 'string',\n\t\t\tdefault: '',\n\t\t},\n\t];\n\tauthenticate: IAuthenticateGeneric = {\n\t\ttype: 'generic',\n\t\tproperties: {\n    \t\t// Can be body, header, qs or auth\n\t\t\tqs: {\n        \t\t// Use the value from `apiKey` above\n\t\t\t\t'api_key': '={{$credentials.apiKey}}'\n\t\t\t}\n\n\t\t},\n\t};\n\ttest: ICredentialTestRequest = {\n\t\trequest: {\n\t\t\tbaseURL: '={{$credentials?.domain}}',\n\t\t\turl: '/bearer',\n\t\t},\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing External Secrets in n8n JavaScript\nDESCRIPTION: Provides access to information about the configured [External secrets](/external-secrets.md). This metadata property is available for use within the Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/n8n-metadata.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n$secrets\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Encryption Key Environment Variable for n8n\nDESCRIPTION: This bash command sets the N8N_ENCRYPTION_KEY environment variable to a custom value. This variable is used by n8n to encrypt credentials before saving them to the database, overriding the default randomly generated key.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/configuration-examples/encryption-key.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport N8N_ENCRYPTION_KEY=<SOME RANDOM STRING>\n```\n\n----------------------------------------\n\nTITLE: Overwriting Entire Custom Data Object - n8n Code Node (Python)\nDESCRIPTION: Provides a Python Code node example for overwriting all custom execution data in n8n using customData.setAll(). The input is a dictionary mapping strings to strings, and prior data is replaced entirely. Follows the same constraints for key, value size, and item limits.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/workflows/executions/custom-executions-data.md#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n_execution.customData.setAll({\"key1\": \"value1\", \"key2\": \"value2\"})\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Database and User with Required Permissions for n8n (SQL)\nDESCRIPTION: This SQL snippet provides commands to set up the required PostgreSQL database and user for n8n. It creates a database, a dedicated user with a specific password, and grants all privileges on the database to that user. These steps are prerequisites for enabling n8n to manage its own schema and tables. Dependencies: Requires access to a PostgreSQL server. Key parameters are database name, username, and password. The output is a created user and a database with appropriate privileges. Choose strong, secure passwords for production environments.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/supported-databases-settings.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE n8n-db;\\nCREATE USER n8n-user WITH PASSWORD 'random-password';\\nGRANT ALL PRIVILEGES ON DATABASE n8n-db TO n8n-user;\n```\n\n----------------------------------------\n\nTITLE: Explaining Cron Expression Format in Schedule Trigger Node\nDESCRIPTION: This snippet explains the format of a cron expression used in the Schedule Trigger node, detailing what each asterisk represents in the six-part expression.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.scheduletrigger/index.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|  (*)  |  *  |  *  |  *  |  *  |  *  |\n|:--:|:--:|:--:|:--:|:--:|:--:|\n|(second)|minute|hour|day of month|month|day of week(Sun-Sat)|\n```\n\n----------------------------------------\n\nTITLE: Example Input Data for n8n Edit Fields Node (JSON Output Mode)\nDESCRIPTION: This JSON array represents sample input data, potentially generated by a previous node like Customer Datastore. It contains multiple customer objects, each with fields like `id`, `name`, `email`, etc. This data serves as the input for the JSON Output mode example in the Edit Fields (Set) node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.set.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": \"23423532\",\n    \"name\": \"Jay Gatsby\",\n    \"email\": \"gatsby@west-egg.com\",\n    \"notes\": \"Keeps asking about a green light??\",\n    \"country\": \"US\",\n    \"created\": \"1925-04-10\"\n  },\n  {\n    \"id\": \"23423533\",\n    \"name\": \"José Arcadio Buendía\",\n    \"email\": \"jab@macondo.co\",\n    \"notes\": \"Lots of people named after him. Very confusing\",\n    \"country\": \"CO\",\n    \"created\": \"1967-05-05\"\n  },\n  {\n    \"id\": \"23423534\",\n    \"name\": \"Max Sendak\",\n    \"email\": \"info@in-and-out-of-weeks.org\",\n    \"notes\": \"Keeps rolling his terrible eyes\",\n    \"country\": \"US\",\n    \"created\": \"1963-04-09\"\n  },\n  {\n    \"id\": \"23423535\",\n    \"name\": \"Zaphod Beeblebrox\",\n    \"email\": \"captain@heartofgold.com\",\n    \"notes\": \"Felt like I was talking to more than one person\",\n    \"country\": null,\n    \"created\": \"1979-10-12\"\n  },\n  {\n    \"id\": \"23423536\",\n    \"name\": \"Edmund Pevensie\",\n    \"email\": \"edmund@narnia.gov\",\n    \"notes\": \"Passionate sailor\",\n    \"country\": \"UK\",\n    \"created\": \"1950-10-16\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating EKS Cluster with eksctl\nDESCRIPTION: Uses the eksctl command-line tool to create a new EKS cluster for hosting n8n. Specifies the cluster name and AWS region.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/aws.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\neksctl create cluster --name n8n --region <your-aws-region>\n```\n\n----------------------------------------\n\nTITLE: Defining a Single-Select Dropdown (Options) in n8n Node UI (TypeScript)\nDESCRIPTION: This configuration defines a dropdown list for single selection using `type: 'options'`. The available choices are specified in the `options` array, each with a `name` (display text) and `value` (internal value). `default` sets the initially selected option. Includes standard properties like `displayName`, `name`, `description`, and `displayOptions`.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/ui-elements.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\tdisplayName: 'Resource',\n\tname: 'resource',\n\ttype: 'options',\n\toptions: [\n\t\t{\n\t\t\tname: 'Image',\n\t\t\tvalue: 'image',\n\t\t},\n\t\t{\n\t\t\tname: 'Template',\n\t\t\tvalue: 'template',\n\t\t},\n\t],\n\tdefault: 'image', // The initially selected option\n\tdescription: 'Resource to consume',\n\tdisplayOptions: { // the resources and operations to display this element with\n\t\tshow: {\n\t\t\tresource: [\n\t\t\t\t// comma-separated list of resource names\n\t\t\t],\n\t\t\toperation: [\n\t\t\t\t// comma-separated list of operation names\n\t\t\t]\n\t\t}\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TheHive 5 Webhook Endpoints\nDESCRIPTION: This configuration snippet defines webhook endpoints within TheHive's `application.conf` file. It specifies URLs for both testing and production environments, provided by the n8n TheHive 5 Trigger node, assigns names to these endpoints, and filters events based on organization names. Replace placeholders like `TESTING_WEBHOOK_URL`, `PRODUCTION_WEBHOOK_URL`, `TESTING_WEBHOOK_NAME`, `PRODUCTION_WEBHOOK_NAME`, and `ORGANIZATION_NAME` with actual values.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/trigger-nodes/n8n-nodes-base.thehive5trigger.md#2025-04-22_snippet_0\n\nLANGUAGE: conf\nCODE:\n```\nnotification.webhook.endpoints = [\n\t{\n\t\tname: TESTING_WEBHOOK_NAME\n\t\turl: TESTING_WEBHOOK_URL\n\t\tversion: 0\n\t\twsConfig: {}\n\t\tincludedTheHiveOrganisations: [\"ORGANIZATION_NAME\"]\n\t\texcludedTheHiveOrganisations: []\n\t},\n\t{\n\t\tname: PRODUCTION_WEBHOOK_NAME\n\t\turl: PRODUCTION_WEBHOOK_URL\n\t\tversion: 0\n\t\twsConfig: {}\n\t\tincludedTheHiveOrganisations: [\"ORGANIZATION_NAME\"]\n\t\texcludedTheHiveOrganisations: []\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Managing n8n Docker Container\nDESCRIPTION: These commands show how to find, stop, remove, and start an n8n Docker container.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/docker.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Find your container ID\ndocker ps -a\n\n# Stop the container with the `<container_id>`\ndocker stop <container_id>\n\n# Remove the container with the `<container_id>`\ndocker rm <container_id>\n\n# Start the container\ndocker run --name=<container_name> [options] -d docker.n8n.io/n8nio/n8n\n```\n\n----------------------------------------\n\nTITLE: Implementing loadOptions for Dynamic Parameters in n8n Nodes (JavaScript)\nDESCRIPTION: This snippet demonstrates the structure of the `methods` object within an n8n programmatic-style node definition, specifically showing how to implement the `loadOptions` method. The example `getLabels` function asynchronously fetches Gmail labels using an API request function (`googleApiRequestAllItems`), formats them into the required `INodePropertyOptions` array structure (containing `name` and `value` pairs), and returns them. This allows the node's UI to display dynamic options fetched from the service.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/node-base-files/programmatic-style-parameters.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nmethods = {\n\tloadOptions: {\n\t\t// Get all the labels and display them\n\t\tasync getLabels(\n\t\t\tthis: ILoadOptionsFunctions,\n\t\t): Promise<INodePropertyOptions[]> {\n\t\t\tconst returnData: INodePropertyOptions[] = [];\n\t\t\tconst labels = await googleApiRequestAllItems.call(\n\t\t\t\tthis,\n\t\t\t\t'labels',\n\t\t\t\t'GET',\n\t\t\t\t'/gmail/v1/users/me/labels',\n\t\t\t);\n\t\t\tfor (const label of labels) {\n\t\t\t\tconst labelName = label.name;\n\t\t\t\tconst labelId = label.id;\n\t\t\t\treturnData.push({\n\t\t\t\t\tname: labelName,\n\t\t\t\t\tvalue: labelId,\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn returnData;\n\t\t},\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Global Workflow Timeout in n8n\nDESCRIPTION: Sets the EXECUTIONS_TIMEOUT environment variable to configure the global timeout for all workflows. The example sets a one-hour timeout (3600 seconds).\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/configuration-examples/execution-timeout.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport EXECUTIONS_TIMEOUT=3600\n```\n\n----------------------------------------\n\nTITLE: Sample Input Data for Item Linking Example (JSON)\nDESCRIPTION: This JSON snippet represents sample input data used in the item linking example. It contains an array of objects with 'id' and 'name' properties.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/data/data-mapping/item-linking-code-node.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": \"23423532\",\n    \"name\": \"Jay Gatsby\"\n  },\n  {\n    \"id\": \"23423533\",\n    \"name\": \"José Arcadio Buendía\"\n  },\n  {\n    \"id\": \"23423534\",\n    \"name\": \"Max Sendak\"\n  },\n  {\n    \"id\": \"23423535\",\n    \"name\": \"Zaphod Beeblebrox\"\n  },\n  {\n    \"id\": \"23423536\",\n    \"name\": \"Edmund Pevensie\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Printing a Variable to Console using print in Python (n8n Code Node)\nDESCRIPTION: Shows the basic usage of the `print()` function within an n8n Code node (set to Python) to output the value of a variable (`a`) to the browser's developer console. This serves as a debugging tool to inspect variable states.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/code-node/console-log.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\na = \"apple\"\nprint(a)\n```\n\n----------------------------------------\n\nTITLE: Stopping n8n and Caddy Services\nDESCRIPTION: Command to stop the running n8n and Caddy services managed by Docker Compose.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/digital-ocean.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsudo docker compose stop\n```\n\n----------------------------------------\n\nTITLE: Sending Multiple HTTP Headers for Custom Authentication - JSON\nDESCRIPTION: This JSON snippet defines the use of two custom HTTP headers, 'X-AUTH-USERNAME' and 'X-AUTH-PASSWORD', to provide authentication data. The snippet is intended for use in n8n's custom authentication configuration, allowing users to specify header-based authentication in a flexible manner. Inputs are the specified credentials, and the output includes headers automatically added to HTTP requests; dependencies are limited to n8n's built-in HTTP Request nodes, and all key/value pairs should be replaced as needed.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/httprequest.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n\\t\\\"headers\\\": {\\n\\t\\t\\\"X-AUTH-USERNAME\\\": \\\"username\\\",\\n\\t\\t\\\"X-AUTH-PASSWORD\\\": \\\"password\\\"\\n\\t}\\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Public REST API in n8n with Bash\nDESCRIPTION: This Bash command disables the n8n public REST API by setting the N8N_PUBLIC_API_DISABLED environment variable to true. Use this to prevent unauthorized or programmatic access to API endpoints that correspond to the main GUI actions. Make sure to export this variable in the shell or add it to your startup scripts for persistence. No external dependencies are required beyond standard shell access.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/securing/disable-public-api.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport N8N_PUBLIC_API_DISABLED=true\n```\n\n----------------------------------------\n\nTITLE: Defining a Number Input Field with Constraints in n8n Node UI (TypeScript)\nDESCRIPTION: This configuration defines a number input field. It utilizes `type: 'number'` and `typeOptions` to set constraints like `maxValue`, `minValue`, and `numberPrecision` (for decimal places). It also includes standard properties like `displayName`, `name`, `required`, `default`, `description`, and `displayOptions`.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/ui-elements.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\tdisplayName: 'Amount',\n\tname: 'amount',\n\ttype: 'number',\n\trequired: true,\n\ttypeOptions: {\n\t\tmaxValue: 10,\n\t\tminValue: 0,\n\t\tnumberPrecision: 2,\n\t},\n\tdefault: 10.00,\n\tdescription: 'Your current amount',\n\tdisplayOptions: { // the resources and operations to display this element with\n\t\tshow: {\n\t\t\tresource: [\n\t\t\t\t// comma-separated list of resource names\n\t\t\t],\n\t\t\toperation: [\n\t\t\t\t// comma-separated list of operation names\n\t\t\t]\n\t\t}\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Running n8n in Docker with Host Network Access - Shell\nDESCRIPTION: Illustrates running n8n in a Docker container on Linux with host network mapping to enable connectivity to services on the Docker host, such as Ollama. This uses the --add-host flag to make 'host.docker.internal' resolve to the host's gateway. Prerequisites are Docker, the n8n container image, and necessary volume mappings for n8n persistence. This setup is especially needed when only n8n is containerized and services like Ollama run directly on the host or elsewhere.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.lmchatollama/common-issues.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -it --rm --add-host host.docker.internal:host-gateway --name n8n -p 5678:5678 -v n8n_data:/home/node/.n8n docker.n8n.io/n8nio/n8n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node Outputs in n8n AI Workflow\nDESCRIPTION: Method to get the outputs of the current node in an n8n AI workflow.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/integrations/builtin/cluster-nodes/langchain-root-nodes/langchaincode/builtin-methods.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n`this.getNodeOutputs()`\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Base URL Example\nDESCRIPTION: Example showing the format for Grafana base URL configuration\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/grafana.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://n8n.grafana.net\n```\n\n----------------------------------------\n\nTITLE: Starting n8n with Tunnel in Docker\nDESCRIPTION: This command starts n8n in Docker with the tunnel option enabled for exposing n8n to the internet.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/docker.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker volume create n8n_data\n\ndocker run -it --rm \\\n --name n8n \\\n -p 5678:5678 \\\n -v n8n_data:/home/node/.n8n \\\n docker.n8n.io/n8nio/n8n \\\n start --tunnel\n```\n\n----------------------------------------\n\nTITLE: Applying List Projection with JMESPath Expression (JavaScript Expression)\nDESCRIPTION: Demonstrates extracting all first names from an array of people using a JMESPath list projection within an n8n JavaScript expression. Assumes presence of $json.body.people as the source array. Returns a flat array of strings.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/jmespath.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n{{$jmespath($json.body.people, \"[*].first\" )}}\n// Returns [\"James\", \"Jacob\", \"Jayden\"]\n```\n\n----------------------------------------\n\nTITLE: Defining a DateTime Picker Input Field in n8n Node UI (TypeScript)\nDESCRIPTION: This configuration defines a date and time input field using `type: 'dateTime'`, which presents a date picker UI component to the user. It includes standard properties like `displayName`, `name`, `default`, `description`, and `displayOptions`.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/ui-elements.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\tdisplayName: 'Modified Since',\n\tname: 'modified_since',\n\ttype: 'dateTime',\n\tdefault: '',\n\tdescription: 'The date and time when the file was last modified',\n\tdisplayOptions: { // the resources and operations to display this element with\n\t\tshow: {\n\t\t\tresource: [\n\t\t\t\t// comma-separated list of resource names\n\t\t\t],\n\t\t\toperation: [\n\t\t\t\t// comma-separated list of operation names\n\t\t\t]\n\t\t}\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Days Until Christmas Using Luxon in n8n Code Node\nDESCRIPTION: This JavaScript code for n8n's Code node calculates the number of days remaining until December 25th using Luxon's DateTime manipulation. It creates a formatted string showing the countdown to Christmas based on the current date.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/luxon.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlet daysToChristmas = \"There are \" + $today.diff(DateTime.fromISO($today.year + '-12-25'), 'days').toObject().days.toString().substring(1) + \" days to Christmas!\";\n```\n\n----------------------------------------\n\nTITLE: Getting Execution Resume URL in n8n Python\nDESCRIPTION: Provides the webhook URL required to resume a workflow that is currently waiting at a [Wait node](/integrations/builtin/core-nodes/n8n-nodes-base.wait.md). This metadata property is available for use within the Python Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/n8n-metadata.md#2025-04-22_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n_execution.resumeUrl\n```\n\n----------------------------------------\n\nTITLE: Comparing Datasets with Person Information in JSON\nDESCRIPTION: This snippet demonstrates two JSON datasets containing person information (name and language) that can be compared using the Compare Datasets node. It illustrates how fields like 'person.language' can be used for matching, and how 'person.name' could be skipped in comparison.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.comparedatasets.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// Input 1\n[\n\t{\n\t\t\"person\":\n\t\t{\n\t\t\t\"name\":\t\"Stefan\",\n\t\t\t\"language\":\t\"de\"\n\t\t}\n\t},\n\t{\n\t\t\"person\":\n\t\t{\n\t\t\t\"name\":\t\"Jim\",\n\t\t\t\"language\":\t\"en\"\n\t\t}\n\t},\n\t{\n\t\t\"person\":\n\t\t{\n\t\t\t\"name\":\t\"Hans\",\n\t\t\t\"language\":\t\"de\"\n\t\t}\n\t}\n]\n// Input 2\n\t[\n\t{\n\t\t\"person\":\n\t\t{\n\t\t\t\"name\":\t\"Sara\",\n\t\t\t\"language\":\t\"de\"\n\t\t}\n\t},\n\t{\n\t\t\"person\":\n\t\t{\n\t\t\t\"name\":\t\"Jane\",\n\t\t\t\"language\":\t\"en\"\n\t\t}\n\t},\n\t{\n\t\t\"person\":\n\t\t{\n\t\t\t\"name\":\t\"Harriet\",\n\t\t\t\"language\":\t\"de\"\n\t\t}\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Filtering Records with Formulas in Airtable Node (Markdown)\nDESCRIPTION: This snippet demonstrates how to use the 'Filter By Formula' option in the Airtable node of n8n to selectively list records from a table based on formula criteria. It instructs users to set the operation mode to 'List', provide base and table IDs, enable the filter option, and input an Airtable formula (e.g., to list only users from the 'n8n' organization). No external code dependencies are required; the functionality depends on the correct configuration within n8n and a valid Airtable formula syntax. Inputs include the record fields and formula; outputs are filtered table records meeting the formula condition.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.airtable/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nEnter the following formula in the **Filter By Formula** field: `{Organization}='n8n'`.\n```\n\nLANGUAGE: markdown\nCODE:\n```\nSimilarly, if you want to return all the users that don't belong to the organization `n8n`, use the following formula: `NOT({Organization}='n8n')`.\n```\n\n----------------------------------------\n\nTITLE: Disabling Webhook Processing in Main Process\nDESCRIPTION: Command to disable webhook processing in the main process using an environment variable. This ensures all webhook executions are handled by webhook processors.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/scaling/queue-mode.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nexport N8N_DISABLE_PRODUCTION_MAIN_PROCESS=true\n```\n\n----------------------------------------\n\nTITLE: Running Ollama Docker Container with Published Ports - Shell\nDESCRIPTION: Demonstrates how to start the Ollama container with its data volume mounted and the service port published to the host. This makes Ollama available at the default port (11434) on localhost. Dependencies include Docker, access to the ollama/ollama image, and proper user permissions to execute Docker commands. The -v flag persists Ollama data, while -p exposes Ollama on the local network interface for other processes or containers to connect.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.lmchatollama/common-issues.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d -v ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama\n```\n\n----------------------------------------\n\nTITLE: Evaluating Expressions in JavaScript\nDESCRIPTION: The $evaluateExpression method evaluates a string as an expression. It takes an expression string and an optional item index as parameters. If no item index is provided, it uses data from item 0 in the Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/convenience.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n$evaluateExpression(expression: string, itemIndex?: number)\n```\n\n----------------------------------------\n\nTITLE: Defining API Resources in TypeScript\nDESCRIPTION: This TypeScript code defines the 'Resource' selection field within the node's `properties` array. It uses the 'options' type to create a dropdown in the UI, allowing users to choose between 'Astronomy Picture of the Day' (`astronomyPictureOfTheDay`) and 'Mars Rover Photos' (`marsRoverPhotos`) resources. The `noDataExpression: true` prevents this field from being sent in the API request body unless explicitly used in routing.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/declarative-style-node.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nproperties: [\n\t{\n\t\tdisplayName: 'Resource',\n\t\tname: 'resource',\n\t\ttype: 'options',\n\t\tnoDataExpression: true,\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'Astronomy Picture of the Day',\n\t\t\t\tvalue: 'astronomyPictureOfTheDay',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Mars Rover Photos',\n\t\t\t\tvalue: 'marsRoverPhotos',\n\t\t\t},\n\t\t],\n\t\tdefault: 'astronomyPictureOfTheDay',\n\t},\n\t// Operations will go here\n\n]\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Body for Discord Embeds\nDESCRIPTION: Example JSON body for the HTTP Request node to send a message with embedded content to Discord. Includes sample embed with author, URL, fields, and footer information.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.discord/common-issues.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"content\": \"Test\",\n\t\"embeds\": [\n\t\t{\n\t\t\t\"author\": \"My Name\",\n\t\t\t\"url\": \"https://discord.js.org\",\n\t\t\t\"fields\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"Regular field title\",\n\t\t\t\t\t\"value\": \"Some value here\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"footer\": {\n\t\t\t\t\"text\": \"Some footer text here\",\n\t\t\t\t\"icon_url\": \"https://i.imgur.com/AfFp7pu.png\"\n\t\t\t}\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Copying and Pasting n8n Workflow Nodes\nDESCRIPTION: Instructions for copying workflow nodes using keyboard shortcuts (Ctrl+c/cmd+c) and pasting them (Ctrl+v/cmd+v) within the Editor UI. Users can select individual nodes or groups by clicking and dragging.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/workflows/export-import.md#2025-04-22_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Accessing Input Data using n8n Expressions in Sub-Nodes\nDESCRIPTION: This snippet demonstrates the n8n expression syntax used to access the 'name' property from the JSON data of an input item. When used within a sub-node like the OpenAI Chat Model node, this expression will resolve to the 'name' value from the *first* input item only, regardless of how many items are passed to the node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.lmchatopenai/common-issues.md#2025-04-22_snippet_0\n\nLANGUAGE: n8n Expressions\nCODE:\n```\n{{ $json.name }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Recent Files Expression in Google Drive\nDESCRIPTION: Expression used to reference the file ID from the previous node's output in a Google Drive workflow. This is used to fetch the most recent file after sorting and limiting results.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.googledrive/common-issues.md#2025-04-22_snippet_0\n\nLANGUAGE: expression\nCODE:\n```\n{{ $json.id }}\n```\n\n----------------------------------------\n\nTITLE: Listing Accessible MySQL Databases in SQL\nDESCRIPTION: This SQL command lists all databases that the executing user has privileges to access on the MySQL server. This helps identify the specific database name required for the 'Database' field in the n8n MySQL credential configuration. Requires appropriate database permissions.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/mysql.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW DATABASES;\n```\n\n----------------------------------------\n\nTITLE: Applying Multiselect List with JMESPath in n8n Code Node (JavaScript)\nDESCRIPTION: Combines first and last names into pair lists for each entry in people array via JMESPath multiselect in JavaScript Code node. Uses $jmespath on $json.body.people. Returns the result as 'newList' for workflow use.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/jmespath.md#2025-04-22_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet newList = $jmespath($json.body.people, \"[].[first, last]\");\nreturn {newList};\n/* Returns:\n[\n\t{\n\t\t\"newList\": [\n\t\t\t[\n\t\t\t\t\"James\",\n\t\t\t\t\"Green\"\n\t\t\t],\n\t\t\t[\n\t\t\t\t\"Jacob\",\n\t\t\t\t\"Jones\"\n\t\t\t],\n\t\t\t[\n\t\t\t\t\"Jayden\",\n\t\t\t\t\"Smith\"\n\t\t\t]\n\t\t]\n\t}\n]\n*/\n```\n\n----------------------------------------\n\nTITLE: Setting Docker Environment Variables via Command Line\nDESCRIPTION: Example of configuring Docker environment variables using the -e flag when running n8n container\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/configuration-methods.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm \\\n --name n8n \\\n -p 5678:5678 \\\n -e N8N_TEMPLATES_ENABLED=\"false\" \\\n docker.n8n.io/n8nio/n8n\n```\n\n----------------------------------------\n\nTITLE: Defining Operations and Input Fields in TypeScript\nDESCRIPTION: This TypeScript code defines the 'Operation' fields and associated input parameters within the node's `properties`. It uses `displayOptions.show` to conditionally display operations based on the selected resource. For each operation ('Get' for APOD, 'Get' for Mars Rover), it specifies the `action`, `description`, and `routing.request` details (HTTP method and URL). It also defines required fields like 'Rover name' and 'Date' for the Mars Rover Photos resource, including `routing` configurations to dynamically construct the URL and query parameters based on user input.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/declarative-style-node.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\tdisplayName: 'Operation',\n\tname: 'operation',\n\ttype: 'options',\n\tnoDataExpression: true,\n\tdisplayOptions: {\n\t\tshow: {\n\t\t\tresource: [\n\t\t\t\t'astronomyPictureOfTheDay',\n\t\t\t],\n\t\t},\n\t},\n\toptions: [\n\t\t{\n\t\t\tname: 'Get',\n\t\t\tvalue: 'get',\n\t\t\taction: 'Get the APOD',\n\t\t\tdescription: 'Get the Astronomy Picture of the day',\n\t\t\trouting: {\n\t\t\t\trequest: {\n\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\turl: '/planetary/apod',\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n\tdefault: 'get',\n},\n{\n\tdisplayName: 'Operation',\n\tname: 'operation',\n\ttype: 'options',\n\tnoDataExpression: true,\n\tdisplayOptions: {\n\t\tshow: {\n\t\t\tresource: [\n\t\t\t\t'marsRoverPhotos',\n\t\t\t],\n\t\t},\n\t},\n\toptions: [\n\t\t{\n\t\t\tname: 'Get',\n\t\t\tvalue: 'get',\n\t\t\taction: 'Get Mars Rover photos',\n\t\t\tdescription: 'Get photos from the Mars Rover',\n\t\t\trouting: {\n\t\t\t\trequest: {\n\t\t\t\t\tmethod: 'GET',\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n\tdefault: 'get',\n},\n{\n\tdisplayName: 'Rover name',\n\tdescription: 'Choose which Mars Rover to get a photo from',\n\trequired: true,\n\tname: 'roverName',\n\ttype: 'options',\n\toptions: [\n\t\t{name: 'Curiosity', value: 'curiosity'},\n\t\t{name: 'Opportunity', value: 'opportunity'},\n\t\t{name: 'Perseverance', value: 'perseverance'},\n\t\t{name: 'Spirit', value: 'spirit'},\n\t],\n\trouting: {\n\t\trequest: {\n\t\t\turl: '=/mars-photos/api/v1/rovers/{{$value}}/photos',\n\t\t},\n\t},\n\tdefault: 'curiosity',\n\tdisplayOptions: {\n\t\tshow: {\n\t\t\tresource: [\n\t\t\t\t'marsRoverPhotos',\n\t\t\t],\n\t\t},\n\t},\n},\n{\n\tdisplayName: 'Date',\n\tdescription: 'Earth date',\n\trequired: true,\n\tname: 'marsRoverDate',\n\ttype: 'dateTime',\n\tdefault:'',\n\tdisplayOptions: {\n\t\tshow: {\n\t\t\tresource: [\n\t\t\t\t'marsRoverPhotos',\n\t\t\t],\n\t\t},\n\t},\n\trouting: {\n\t\trequest: {\n\t\t\t// You've already set up the URL. qs appends the value of the field as a query string\n\t\t\tqs: {\n\t\t\t\tearth_date: '={{ new Date($value).toISOString().substr(0,10) }}',\n\t\t\t},\n\t\t},\n\t},\n},\n// Optional/additional fields will go here\n```\n\n----------------------------------------\n\nTITLE: Starting n8n and Caddy with Docker Compose\nDESCRIPTION: Command to start n8n and Caddy services using Docker Compose in detached mode.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/hetzner.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Implementing Backend Hooks in JavaScript\nDESCRIPTION: Defines backend hooks for n8n, including a frontend settings hook to modify OAuth callback URLs and a workflow activation hook to limit the number of active workflows.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/embed/configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n    \"frontend\": {\n        \"settings\": [\n            async function (settings) {\n                settings.oauthCallbackUrls.oauth1 = 'https://n8n.example.com/oauth1/callback';\n                settings.oauthCallbackUrls.oauth2 = 'https://n8n.example.com/oauth2/callback';\n            }\n        ]\n    },\n    \"workflow\": {\n        \"activate\": [\n            async function (workflowData) {\n                const activeWorkflows = await this.dbCollections.Workflow.count({ active: true });\n\n                if (activeWorkflows > 1) {\n                    throw new Error(\n                        'Active workflow limit reached.'\n                    );\n                }\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Subsequent Page of n8n Workflows via API using Cursor (Bash)\nDESCRIPTION: Shows how to use `curl` to request the next page of results from the n8n API. This is done by appending the `cursor` query parameter to the request URL, using the `nextCursor` value obtained from the previous API response. Examples are provided for both self-hosted and n8n Cloud, continuing the workflow query with the same `active=true` and `limit=150` parameters.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/api/pagination.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# For a self-hosted n8n instance\ncurl -X 'GET' \\\n  '<N8N_HOST>:<N8N_PORT>/<N8N_PATH>/api/v<version-number>/workflows?active=true&limit=150&cursor=MTIzZTQ1NjctZTg5Yi0xMmQzLWE0NTYtNDI2NjE0MTc0MDA' \\\n  -H 'accept: application/json'\n\n# For n8n Cloud\ncurl -X 'GET' \\\n  '<your-cloud-instance>/api/v<version-number>/workflows?active=true&limit=150&cursor=MTIzZTQ1NjctZTg5Yi0xMmQzLWE0NTYtNDI2NjE0MTc0MDA' \\\n  -H 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Describing Workflow Item Data Schema in JSON Schema - JSON\nDESCRIPTION: This snippet defines, using JSON Schema (draft-07), the structure required for a 'workflow' item returned by the n8n templates API. All listed fields such as 'id', 'name', 'totalViews', 'price', 'purchaseUrl', 'recentViews', 'createdAt', 'user', and 'nodes' are required. Complex nested objects like user and arrays of nodes must match the specified type and property requirements. The schema ensures the API returns workflow objects in a standard, expected format; deviations may cause incompatibility.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/workflows/templates/custom-templates-library.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Generated schema for Root\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"number\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"totalViews\": {\n      \"type\": \"number\"\n    },\n    \"price\": {},\n    \"purchaseUrl\": {},\n    \"recentViews\": {\n      \"type\": \"number\"\n    },\n    \"createdAt\": {\n      \"type\": \"string\"\n    },\n    \"user\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"username\": {\n          \"type\": \"string\"\n        },\n        \"verified\": {\n          \"type\": \"boolean\"\n        }\n      },\n      \"required\": [\n        \"username\",\n        \"verified\"\n      ]\n    },\n    \"nodes\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"number\"\n          },\n          \"icon\": {\n            \"type\": \"string\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"codex\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"data\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"details\": {\n                    \"type\": \"string\"\n                  },\n                  \"resources\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"generic\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                          \"type\": \"object\",\n                          \"properties\": {\n                            \"url\": {\n                              \"type\": \"string\"\n                            },\n                            \"icon\": {\n                              \"type\": \"string\"\n                            },\n                            \"label\": {\n                              \"type\": \"string\"\n                            }\n                          },\n                          \"required\": [\n                            \"url\",\n                            \"label\"\n                          ]\n                        }\n                      },\n                      \"primaryDocumentation\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                          \"type\": \"object\",\n                          \"properties\": {\n                            \"url\": {\n                              \"type\": \"string\"\n                            }\n                          },\n                          \"required\": [\n                            \"url\"\n                          ]\n                        }\n                      }\n                    },\n                    \"required\": [\n                      \"primaryDocumentation\"\n                    ]\n                  },\n                  \"categories\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"nodeVersion\": {\n                    \"type\": \"string\"\n                  },\n                  \"codexVersion\": {\n                    \"type\": \"string\"\n                  }\n                },\n                \"required\": [\n                  \"categories\"\n                ]\n              }\n            }\n          },\n          \"group\": {\n            \"type\": \"string\"\n          },\n          \"defaults\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"name\": {\n                \"type\": \"string\"\n              },\n              \"color\": {\n                \"type\": \"string\"\n              }\n            },\n            \"required\": [\n              \"name\"\n            ]\n          },\n          \"iconData\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"icon\": {\n                \"type\": \"string\"\n              },\n              \"type\": {\n                \"type\": \"string\"\n              },\n              \"fileBuffer\": {\n                \"type\": \"string\"\n              }\n            },\n            \"required\": [\n              \"type\"\n            ]\n          },\n          \"displayName\": {\n            \"type\": \"string\"\n          },\n          \"typeVersion\": {\n            \"type\": \"number\"\n          },\n          \"nodeCategories\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"id\": {\n                  \"type\": \"number\"\n                },\n                \"name\": {\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"id\",\n                \"name\"\n              ]\n            }\n          }\n        },\n        \"required\": [\n          \"id\",\n          \"icon\",\n          \"name\",\n          \"codex\",\n          \"group\",\n          \"defaults\",\n          \"iconData\",\n          \"displayName\",\n          \"typeVersion\"\n        ]\n      }\n    }\n  },\n  \"required\": [\n    \"id\",\n    \"name\",\n    \"totalViews\",\n    \"price\",\n    \"purchaseUrl\",\n    \"recentViews\",\n    \"createdAt\",\n    \"user\",\n    \"nodes\"\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Invoking JMESPath Search Helper in n8n (JavaScript)\nDESCRIPTION: Demonstrates the syntax for using n8n's built-in $jmespath helper to perform JMESPath queries on JSON objects within the JavaScript context (expression or code node). Requires n8n workflow environment and valid JSON data. Parameters: \\'object\\' (JSON to query), \\'searchString\\' (JMESPath expression). Returns the result of JMESPath evaluation on the object.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/jmespath.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n$jmespath(object, searchString)\n```\n\n----------------------------------------\n\nTITLE: Setting Single Custom Execution Data Item - n8n Code Node (Python)\nDESCRIPTION: Shows how to set a single custom data key-value pair in the current execution context via the n8n Code node using Python syntax. Uses the _execution object and its customData.set method. The API requires both parameters to be strings and enforces length/quantity limitations as specified by n8n.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/workflows/executions/custom-executions-data.md#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n_execution.customData.set(\"key\", \"value\");\n```\n\n----------------------------------------\n\nTITLE: Summarizing Submission Data for Slack Message in JavaScript\nDESCRIPTION: This code snippet processes submission data to create a summary for a Slack message. It counts submissions by type, lists the top 5 submissions by votes, and formats the output as a markdown text for Slack.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/ai-code.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst submissions = $input.all();\n\n// Count the number of ideas, features, and bugs\nlet ideaCount = 0;\nlet featureCount = 0;\nlet bugCount = 0;\n\nsubmissions.forEach((submission) => {\n  switch (submission.json.property_type[0]) {\n    case \"Idea\":\n      ideaCount++;\n      break;\n    case \"Feature\":\n      featureCount++;\n      break;\n    case \"Bug\":\n      bugCount++;\n      break;\n  }\n});\n\n// Sort submissions by votes and take the top 5\nconst topSubmissions = submissions\n  .sort((a, b) => b.json.property_votes - a.json.property_votes)\n  .slice(0, 5);\n\nlet topSubmissionText = \"\";\ntopSubmissions.forEach((submission) => {\n  topSubmissionText += `<${submission.json.url}|${submission.json.name}> with ${submission.json.property_votes} votes\\n`;\n});\n\n// Construct the Slack message\nconst slackMessage = `*Summary of Submissions*\\n\nIdeas: ${ideaCount}\\n\nFeatures: ${featureCount}\\n\nBugs: ${bugCount}\\n\nTop 5 Submissions:\\n\n${topSubmissionText}`;\n\nreturn [{ json: { slackMessage } }];\n```\n\n----------------------------------------\n\nTITLE: Handling Empty Values in JavaScript\nDESCRIPTION: The $ifEmpty function checks if the first parameter is empty and returns either the first parameter (if not empty) or the second parameter (if empty). It considers various cases of emptiness for different data types.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/convenience.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n$ifEmpty(value, defaultValue)\n```\n\n----------------------------------------\n\nTITLE: Using $fromAI() for Numeric Values in JavaScript\nDESCRIPTION: Illustrates how to use the $fromAI() function to dynamically populate a numeric field, such as the number of items in stock.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/advanced-ai/examples/using-the-fromai-function.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n$fromAI(\"numItemsInStock\", \"Number of items in stock\", \"number\", 5)\n```\n\n----------------------------------------\n\nTITLE: Disabling Community Nodes via Environment Variable - Markdown\nDESCRIPTION: This snippet shows how to disable community nodes in n8n by setting the environment variable N8N_COMMUNITY_PACKAGES_ENABLED to false. There are no language-specific dependencies, but this expects a deployment environment where environment variables can be set prior to running the application. The key parameter is N8N_COMMUNITY_PACKAGES_ENABLED, and setting it to false will prevent the installation and execution of third-party or community-contributed nodes in n8n. This configuration is usually specified in your server or container configuration.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/community-nodes/risks.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`N8N_COMMUNITY_PACKAGES_ENABLED` to `false`.\n```\n\n----------------------------------------\n\nTITLE: Counting Returned Items in n8n - JavaScript\nDESCRIPTION: This JavaScript snippet checks how many items are returned from the previous node in an n8n workflow. If the first item's JSON payload is empty, it returns a result of zero; otherwise, it returns the count of items. It is intended to be used in an n8n Function or Code node. Required context: an items array where each element has a json property. Outputs an array containing an object with the \"results\" key set to the count.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/code-node/number-items-last-node.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (Object.keys(items[0].json).length === 0) {\nreturn [\n\t{\n\t\tjson: {\n\t\t\tresults: 0,\n\t\t}\n\t}\n]\n}\nreturn [\n\t{\n\t\tjson: {\n\t\t\tresults: items.length,\n\t\t}\n\t}\n];\n```\n\nLANGUAGE: JSON\nCODE:\n```\n[\n\t{\n\t\t\"results\": 8\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Defining n8n Persistent Volume Claim in YAML\nDESCRIPTION: YAML configuration for creating a persistent volume claim for n8n file storage in Kubernetes.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/google-cloud.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - name: n8n-claim0\n    persistentVolumeClaim:\n      claimName: n8n-claim0\n```\n\n----------------------------------------\n\nTITLE: Checking Data Type using print(type()) in Python (n8n Code Node)\nDESCRIPTION: Illustrates how to use `print(type(variable_name))` in a Python n8n Code node to check the data type of a variable. This is particularly helpful when encountering unexpected output like `[object Object]`, allowing developers to understand the variable's underlying type. `myData` should be replaced with the specific variable being inspected.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/code-node/console-log.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprint(type(myData))\n```\n\n----------------------------------------\n\nTITLE: Defining a Multi-Select List (MultiOptions) in n8n Node UI (TypeScript)\nDESCRIPTION: This configuration defines a multi-select list using `type: 'multiOptions'`. Users can select multiple values from the list defined in the `options` array. `default` is typically an empty array `[]` or an array of pre-selected values. Includes standard properties like `displayName`, `name`, `description`, and `displayOptions`.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/ui-elements.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\tdisplayName: 'Events',\n\tname: 'events',\n\ttype: 'multiOptions',\n\toptions: [\n\t\t{\n\t\t\tname: 'Plan Created',\n\t\t\tvalue: 'planCreated',\n\t\t},\n\t\t{\n\t\t\tname: 'Plan Deleted',\n\t\t\tvalue: 'planDeleted',\n\t\t},\n\t],\n\tdefault: [], // Initially selected options\n\tdescription: 'The events to be monitored',\n\tdisplayOptions: { // the resources and operations to display this element with\n\t\tshow: {\n\t\t\tresource: [\n\t\t\t\t// comma-separated list of resource names\n\t\t\t],\n\t\t\toperation: [\n\t\t\t\t// comma-separated list of operation names\n\t\t\t]\n\t\t}\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Node Hints in TypeScript\nDESCRIPTION: Shows how to define node-level hints using the 'hints' property within the node description. Includes options for message content, type, location, display conditions, and timing.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/ui-elements.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ndescription: INodeTypeDescription = {\n\t...\n\thints: [\n\t\t{\n\t\t\t// The hint message. You can use HTML.\n\t\t\tmessage: \"This node has many input items. Consider enabling <b>Execute Once</b> in the node's settings.\",\n\t\t\t// Choose from: info, warning, danger. The default is 'info'.\n\t\t\t// Changes the color. info (grey), warning (yellow), danger (red)\n\t\t\ttype: 'info',\n\t\t\t// Choose from: inputPane, outputPane, ndv. By default n8n displays the hint in both the input and output panels.\n\t\t\tlocation: 'outputPane',\n\t\t\t// Choose from: always, beforeExecution, afterExecution. The default is 'always'\n\t\t\twhenToDisplay: 'beforeExecution',\n\t\t\t// Optional. An expression. If it resolves to true, n8n displays the message. Defaults to true.\n\t\t\tdisplayCondition: '={{ $parameter[\"operation\"] === \"select\" && $input.all().length > 1 }}'\n\t\t}\n\t]\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker CLI for Custom Certificates in n8n\nDESCRIPTION: Docker run command to mount a local certificate directory to the n8n container. Maps the local 'pki' directory to '/opt/custom-certificates' in the container and exposes port 5678.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/configuration-examples/custom-certificate-authority.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm \\\n --name n8n \\\n -p 5678:5678 \\\n -v ./pki:/opt/custom-certificates \\\n docker.n8n.io/n8nio/n8n\n```\n\n----------------------------------------\n\nTITLE: Accessing and Managing Node Static Data - JavaScript\nDESCRIPTION: This code accesses and manipulates the static data object tied specifically to the current node in an n8n workflow using JavaScript. The $getWorkflowStaticData('node') function gives access to persistent key-value storage for the node, allowing loading, updating, and deleting of the 'lastExecution' property. Only the node that set the data can retrieve it later. Not all static data is available in test runs.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/builtin/get-workflow-static-data.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Get the static data of the node\\nconst nodeStaticData = $getWorkflowStaticData('node');\\n\\n// Access its data\\nconst lastExecution = nodeStaticData.lastExecution;\\n\\n// Update its data\\nnodeStaticData.lastExecution = new Date().getTime();\\n\\n// Delete data\\ndelete nodeStaticData.lastExecution;\n```\n\n----------------------------------------\n\nTITLE: Managing Custom Execution Data in n8n Python\nDESCRIPTION: Allows setting and getting custom data associated with the current execution. Refer to [Custom executions data](/workflows/executions/custom-executions-data.md) for details. This metadata property is available for use within the Python Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/n8n-metadata.md#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n_execution.customData\n```\n\n----------------------------------------\n\nTITLE: Granting Non-root User Access to Docker\nDESCRIPTION: These commands demonstrate how to grant a non-root user access to run Docker commands without sudo. It adds the user to the docker group and updates the group membership for the current session.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/docker-compose.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo usermod -aG docker ${USER}\n# Register the `docker` group memebership with current session without changing your primary group\nexec sg docker newgrp\n```\n\n----------------------------------------\n\nTITLE: Configuring Assistant Instructions Example\nDESCRIPTION: Detailed instructions for setting the assistant's persona and response behavior, including tone and interaction style.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-langchain.openai/assistant-operations.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nAlways respond in a friendly and engaging manner. When a user asks a question, provide a concise answer first, followed by a brief explanation or additional context if necessary. If the question is open-ended, offer a suggestion or ask a clarifying question to guide the conversation. Keep the tone positive and supportive, and avoid technical jargon unless specifically requested by the user.\n```\n\n----------------------------------------\n\nTITLE: JSON Expression Format Example for HTTP Request Node\nDESCRIPTION: Example of correctly formatting JSON when using expressions in the HTTP Request node. The JSON must be wrapped in double curly brackets and contain valid JSON syntax within.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/common-issues.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{{{\n    \"myjson\":\n    {\n        \"name1\": \"value1\",\n        \"name2\": \"value2\",\n        \"array1\":\n            [\"value1\",\"value2\"]\n    }\n}}}\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Template with Expressions in n8n\nDESCRIPTION: Create an HTML template using standard HTML, CSS, JavaScript, and n8n expressions. Expressions are wrapped in {{}} and can include n8n's built-in methods and variables.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.html.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<html>\n  <head>\n    <style>\n      /* CSS styles */\n    </style>\n  </head>\n  <body>\n    <h1>{{$node[\"Some Node\"].data[\"someField\"]}}</h1>\n    <script>\n      // JavaScript code (not executed by n8n)\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Postgres Volume in Kubernetes YAML\nDESCRIPTION: YAML snippet showing the configuration of volumes for Postgres in the n8n Kubernetes deployment.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/azure.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - name: n8n-claim0\n    persistentVolumeClaim:\n      claimName: n8n-claim0\n```\n\n----------------------------------------\n\nTITLE: Overwriting Entire Custom Data Object - n8n Code Node (JavaScript)\nDESCRIPTION: Illustrates replacing the entire contents of the customData object for the current execution in JavaScript via the n8n Code node using setAll(). Accepts a dictionary of up to 10 string key-value pairs, each key limited to 50 and value to 255 characters; any previous custom data is discarded.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/workflows/executions/custom-executions-data.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n$execution.customData.setAll({\"key1\": \"value1\", \"key2\": \"value2\"})\n```\n\n----------------------------------------\n\nTITLE: Starting n8n and Caddy with Docker Compose\nDESCRIPTION: Command to start the n8n and Caddy services using Docker Compose in detached mode.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/digital-ocean.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsudo docker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Node Items with .all() in JavaScript (n8n)\nDESCRIPTION: Demonstrates using the `$('<node-name>').all()` method in n8n JavaScript expressions to retrieve all output items from a specified node. Optional `branchIndex` (output index) and `runIndex` parameters can filter the results. If no parameters are provided, it retrieves all items from the specified node's most recent run. Using `$runIndex` targets the same run as the current node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/builtin/all.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// Returns all the items of the given node and current run\nlet allItems = $(\"<node-name>\").all();\n\n// Returns all items the node \"IF\" outputs (index: 0 which is Output \"true\" of its most recent run)\nlet allItems = $(\"IF\").all();\n\n// Returns all items the node \"IF\" outputs (index: 0 which is Output \"true\" of the same run as current node)\nlet allItems = $(\"IF\").all(0, $runIndex);\n\n// Returns all items the node \"IF\" outputs (index: 1 which is Output \"false\" of run 0 which is the first run)\nlet allItems = $(\"IF\").all(1, 0);\n```\n\n----------------------------------------\n\nTITLE: n8n JSON Configuration Example\nDESCRIPTION: Sample JSON configuration file showing various n8n settings including executions, timezone, and node exclusions\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/configuration-methods.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n \"executions\": {\n  \"saveDataOnSuccess\": \"none\"\n },\n \"generic\": {\n  \"timezone\": \"Europe/Berlin\"\n },\n \"nodes\": {\n  \"exclude\": \"[\\\"n8n-nodes-base.executeCommand\\\",\\\"n8n-nodes-base.writeBinaryFile\\\"]\"\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Outlook.com IMAP Configuration Settings\nDESCRIPTION: Core configuration settings for setting up Outlook.com IMAP credentials including host, port, and security settings. These settings enable email integration with n8n workflow automation platform.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/imap/outlook.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Enter your Outlook.com email address as the **User**.\n2. Enter your Outlook.com password as the **Password**.\n3. Enter `outlook.office365.com` as the **Host**.\n4. For the **Port**, keep the default port number of `993`.\n5. Turn on the **SSL/TLS** toggle.\n6. Check with your email administrator about whether to **Allow Self-Signed Certificates**.\n```\n\n----------------------------------------\n\nTITLE: Calculating Days Until Christmas Using Luxon in n8n Expression\nDESCRIPTION: This expression calculates the number of days remaining until December 25th of the current year using Luxon's DateTime manipulation. It uses the $today variable, performs date difference calculations, and formats the result as a readable string.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/luxon.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\"There are \" + $today.diff(DateTime.fromISO($today.year + '-12-25'), 'days').toObject().days.toString().substring(1) + \" days to Christmas!\"}\n```\n\n----------------------------------------\n\nTITLE: Generating RSA Key Pair for Wise SCA using OpenSSL (Shell)\nDESCRIPTION: This shell script uses the `openssl` command-line tool to generate a 2048-bit RSA private key (`private.pem`) and extract its corresponding public key (`public.pem`). This key pair is required for enabling Strong Customer Authentication (SCA) when using the Wise API with live endpoints in n8n. The public key should be uploaded to Wise, and the private key added to the n8n credential configuration. Requires `openssl` to be installed.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/wise.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ openssl genrsa -out private.pem 2048 \n$ openssl rsa -pubout -in private.pem -out public.pem\n```\n\n----------------------------------------\n\nTITLE: Defining a Multi-line String Input Field (Textarea) in n8n Node UI (TypeScript)\nDESCRIPTION: This configuration creates a multi-line string input field (textarea). It sets `type: 'string'` and uses `typeOptions: { rows: 4 }` to specify the number of visible text lines. Standard configuration properties are also present.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/ui-elements.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\tdisplayName: 'Description',\n\tname: 'description',\n\ttype: 'string',\n\trequired: true,\n\ttypeOptions: {\n\t\trows: 4,\n\t},\n\tdefault: '',\n\tdescription: 'Description',\n\tdisplayOptions: { // the resources and operations to display this element with\n\t\tshow: {\n\t\t\tresource: [\n\t\t\t\t// comma-separated list of resource names\n\t\t\t],\n\t\t\toperation: [\n\t\t\t\t// comma-separated list of operation names\n\t\t\t]\n\t\t}\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing the Resume Webhook URL in n8n Wait Node\nDESCRIPTION: This variable represents the unique URL generated at runtime for a Wait node configured with the 'On Webhook Call' resume condition. This URL must be called via an HTTP request to resume the paused workflow execution. It allows dynamic referencing and distribution of the resume endpoint, for example, sending it to a third-party service.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.wait.md#2025-04-22_snippet_0\n\nLANGUAGE: n8n Expression\nCODE:\n```\n$execution.resumeUrl\n```\n\n----------------------------------------\n\nTITLE: Installing n8n globally using npm\nDESCRIPTION: This command installs n8n globally on your system using npm.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/integrations/creating-nodes/testing.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install n8n -g\n```\n\n----------------------------------------\n\nTITLE: Defining a Fixed Collection for Grouping Related Fields in n8n Node UI (TypeScript)\nDESCRIPTION: This configuration defines a fixed collection using `type: 'fixedCollection'`. It groups a predefined set of related fields (specified in `options.values`) under a common label (`displayName`). `typeOptions: { multipleValues: true }` allows users to add multiple instances of this group. Includes standard properties like `displayName`, `name`, `placeholder`, `default`, `description`, and `displayOptions`.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/ui-elements.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\tdisplayName: 'Metadata',\n\tname: 'metadataUi',\n\tplaceholder: 'Add Metadata',\n\ttype: 'fixedCollection',\n\tdefault: '',\n\ttypeOptions: {\n\t\tmultipleValues: true,\n\t},\n\tdescription: '',\n\toptions: [\n\t\t{\n\t\t\tname: 'metadataValues',\n\t\t\tdisplayName: 'Metadata',\n\t\t\tvalues: [\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Name',\n\t\t\t\t\tname: 'name',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdefault: 'Name of the metadata key to add.',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Value',\n\t\t\t\t\tname: 'value',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdefault: '',\n\t\t\t\t\tdescription: 'Value to set for the metadata key.',\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t],\n\tdisplayOptions: { // the resources and operations to display this element with\n\t\tshow: {\n\t\t\tresource: [\n\t\t\t\t// comma-separated list of resource names\n\t\t\t],\n\t\t\toperation: [\n\t\t\t\t// comma-separated list of operation names\n\t\t\t]\n\t\t}\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Assignment Collection for Drag-and-Drop Field Mapping in n8n Node UI (TypeScript)\nDESCRIPTION: This configuration defines an assignment collection field using `type: 'assignmentCollection'`. This UI component allows users to drag and drop input data fields to simultaneously set both the 'name' and 'value' parameters, simplifying data mapping tasks. Includes standard properties like `displayName`, `name`, and `default`.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/ui-elements.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\tdisplayName: 'Fields to Set',\n\tname: 'assignments',\n\ttype: 'assignmentCollection',\n\tdefault: {},\n},\n```\n\n----------------------------------------\n\nTITLE: Installing a Community Node using npm - Shell\nDESCRIPTION: This snippet demonstrates how to install a community node package for n8n using npm from within the shell. Replace 'n8n-nodes-nodeName' with the actual package name of the community node. Requires npm installed in the environment and an internet connection. The result is the specified node being added to the project, making it available for use in n8n workflows.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/community-nodes/installation/manual-install.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm i n8n-nodes-nodeName\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 Scopes for HighLevel\nDESCRIPTION: Space-separated list of required OAuth2 scopes for HighLevel integration, including read and write permissions for locations, contacts, opportunities, and users.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/highlevel.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nlocations.readonly contacts.readonly contacts.write opportunities.readonly opportunities.write users.readonly\n```\n\n----------------------------------------\n\nTITLE: Running n8n Docker Container with Host Gateway\nDESCRIPTION: Docker command to run n8n container with host gateway configuration, enabling communication with MySQL running on the host machine. This setup is specifically needed for Linux environments.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.mysql/common-issues.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -it --rm --add-host host.docker.internal:host-gateway --name n8n -p 5678:5678 -v n8n_data:/home/node/.n8n docker.n8n.io/n8nio/n8n\n```\n\n----------------------------------------\n\nTITLE: Recommended Webex OAuth2 Scopes for n8n Integration\nDESCRIPTION: A list of recommended OAuth2 scopes to grant the n8n integration when configuring Webex by Cisco credentials. These scopes define the permissions n8n will have to access Webex resources, covering areas like rooms, messages, memberships, recordings, preferences, and schedules.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/ciscowebex.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n* `spark:rooms_read`\n* `spark:messages_write`\n* `spark:messages_read`\n* `spark:memberships_read`\n* `spark:memberships_write`\n* `meeting:recordings_write`\n* `meeting:recordings_read`\n* `meeting:preferences_read`\n* `meeting:schedules_write`\n* `meeting:schedules_read`\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Expression Resolution in Sub-Nodes\nDESCRIPTION: This snippet illustrates how the expression {{ $json.name }} is resolved differently in sub-nodes compared to other nodes when processing multiple input items.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/integrations/builtin/cluster-nodes/sub-node-expression-resolution.md#2025-04-22_snippet_0\n\nLANGUAGE: expression\nCODE:\n```\n{{ $json.name }}\n```\n\n----------------------------------------\n\nTITLE: Building a Custom Docker Image with cURL Support for n8n\nDESCRIPTION: This command builds a custom Docker image named 'n8n-curl' based on the Dockerfile that adds cURL support to the standard n8n image.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.executecommand/index.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker build -t n8n-curl\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL Connection Timeout in SQL\nDESCRIPTION: This SQL query retrieves the server's configured connection timeout value in seconds. This value indicates how long the server waits for a connection packet. The n8n 'Connect Timeout' field requires this value converted to milliseconds (multiply by 1000). Requires permissions to execute `SHOW VARIABLES`.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/mysql.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSHOW VARIABLES WHERE Variable_name = 'connect_timeout';\n```\n\n----------------------------------------\n\nTITLE: Restoring Email Using itemMatching in n8n Code Node (Python)\nDESCRIPTION: This Python code performs the same function as the JavaScript version within an n8n Code node. It iterates through the input items using `enumerate(_input.all())`. For each item and its index `i`, it accesses the corresponding item from the 'Customer Datastore (n8n training)' node using `_('Customer Datastore (n8n training)').itemMatching(i)` and retrieves the `email` property from its JSON data. This email is assigned to the `restoreEmail` property of the current item. The modified list of items is returned.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/builtin/itemmatching.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfor i,item in enumerate(_input.all()):\n  \t\t_input.all()[i].json.restoreEmail = _('Customer Datastore (n8n training)').itemMatching(i).json.email\n\n\treturn _input.all();\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker and Docker Compose Installation\nDESCRIPTION: This snippet shows how to verify that Docker and Docker Compose are correctly installed by checking their versions.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/docker-compose.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker --version\ndocker compose version\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Audio Generation Parameters\nDESCRIPTION: Configuration parameters for generating audio from text using OpenAI's TTS models. Includes model selection, voice options, and format settings.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-langchain.openai/audio-operations.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Credential to connect with: Create or select an existing OpenAI credential\n- Resource: Select Audio\n- Operation: Select Generate Audio\n- Model: Select TTS-1 (speed) or TTS-1-HD (quality)\n- Text Input: Maximum 4096 characters\n- Voice: Select from available voice options\n- Response Format: MP3, OPUS, AAC, FLAC, WAV, PCM\n- Audio Speed: 0.25 to 4.0 (default 1)\n```\n\n----------------------------------------\n\nTITLE: Getting Previous Node Output Index in n8n JavaScript\nDESCRIPTION: Retrieves the index of the output connector from the previous node that the current input came from. Useful when the previous node has multiple outputs (e.g., If, Switch). Note: When used after a Merge node, this always refers to the first input connector. This metadata property is available for use within the Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/n8n-metadata.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n$prevNode.outputIndex\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Variables with Vars API in n8n JavaScript\nDESCRIPTION: This snippet demonstrates how to access a user-created, environment-specific variable in n8n using the JavaScript API. The `$vars` object is read-only and exposes variables defined in the active environment; you cannot assign to it programmatically. The code requires access to a Self-hosted Enterprise or Pro or Enterprise Cloud n8n instance and owner-level permissions to create variables. Replace `<variable-name>` with the name of your variable. Returns the current value of the specified custom variable.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/builtin/vars.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// Access a variable\n$vars.<variable-name>\n```\n\n----------------------------------------\n\nTITLE: Managing Custom Execution Data - n8n Code Node - Python\nDESCRIPTION: This Python snippet demonstrates managing custom execution data within an n8n Code node via the _execution.customData object. It covers setting individual items, setting all custom data at once, retrieving all custom data, and accessing individual data entries. This behavior is only available in Code nodes and does not require external libraries.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/builtin/execution.md#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n# Set a single piece of custom execution data\\n_execution.customData.set(\\\"key\\\", \\\"value\\\");\\n\\n# Set the custom execution data object\\n_execution.customData.setAll({\\\"key1\\\": \\\"value1\\\", \\\"key2\\\": \\\"value2\\\"})\\n\\n# Access the current state of the object during the execution\\ncustomData = _execution.customData.getAll()\\n\\n# Access a specific value set during this execution\\ncustomData = _execution.customData.get(\\\"key\\\")\n```\n\n----------------------------------------\n\nTITLE: Setting concurrency limit for production executions in n8n\nDESCRIPTION: This command sets the environment variable to enable concurrency control and limit production executions to 20 concurrent runs. It applies only to self-hosted n8n instances in regular mode.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/scaling/concurrency-control.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport N8N_CONCURRENCY_PRODUCTION_LIMIT=20\n```\n\n----------------------------------------\n\nTITLE: Send Video Operation Parameters\nDESCRIPTION: Documentation for sending videos via Telegram Bot API, including required parameters and additional fields like duration, dimensions, thumbnail specifications, and caption options.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.telegram/message-operations.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n* **Chat ID**: @channelusername\n* **Binary File**: Toggle for sending binary files\n* **Video**: file_id or HTTP URL\n* **Duration**: Video duration in seconds\n* **Height**: Video height\n* **Width**: Video width\n* **Thumbnail**: JPEG format, <200 KB, dimensions <320px\n```\n\n----------------------------------------\n\nTITLE: Generating n8n Security Audit using n8n Node\nDESCRIPTION: Describes the configuration of the n8n node within a workflow to generate a security audit report. Set the 'Resource' parameter to 'Audit' and the 'Operation' parameter to 'Generate'. This integrates the audit process directly into n8n workflows.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/securing/security-audit.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nResource: Audit\nOperation: Generate\n```\n\n----------------------------------------\n\nTITLE: Creating Vector Search Index in MongoDB Atlas\nDESCRIPTION: JSON configuration for creating a vector search index in MongoDB Atlas. Defines the field structure for vector embeddings including dimension size and similarity function.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoremongodbatlas.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"fields\": [\n    {\n      \"type\": \"vector\",\n      \"path\": \"<field-name>\",\n      \"numDimensions\": 1536,\n      \"similarity\": \"<similarity-function>\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Previous Node Run Index in n8n Python\nDESCRIPTION: Retrieves the run index of the previous node that generated the current input item. Note: When used after a Merge node, this always refers to the node connected to the first input connector. This metadata property is available for use within the Python Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/n8n-metadata.md#2025-04-22_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n_prevNode.runIndex\n```\n\n----------------------------------------\n\nTITLE: Defining Node Metadata for NASA Pics Node in n8n\nDESCRIPTION: This JSON snippet defines the metadata for the NASA Pics node in n8n. It includes the node version, categories, and resources for documentation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/declarative-style-node.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"node\": \"n8n-nodes-base.NasaPics\",\n\t\"nodeVersion\": \"1.0\",\n\t\"codexVersion\": \"1.0\",\n\t\"categories\": [\n\t\t\"Miscellaneous\"\n\t],\n\t\"resources\": {\n\t\t\"credentialDocumentation\": [\n\t\t\t{\n\t\t\t\t\"url\": \"\"\n\t\t\t}\n\t\t],\n\t\t\"primaryDocumentation\": [\n\t\t\t{\n\t\t\t\t\"url\": \"\"\n\t\t\t}\n\t\t]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Standard Error Data Format for n8n Error Triggers\nDESCRIPTION: The default JSON data structure received by an Error Trigger when an error occurs during workflow execution. This includes execution details, error message and stack trace, along with workflow identification information.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/integrations/builtin/core-nodes/error-trigger/error-data.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\n\t\t\"execution\": {\n\t\t\t\"id\": \"231\",\n\t\t\t\"url\": \"https://n8n.example.com/execution/231\",\n\t\t\t\"retryOf\": \"34\",\n\t\t\t\"error\": {\n\t\t\t\t\"message\": \"Example Error Message\",\n\t\t\t\t\"stack\": \"Stacktrace\"\n\t\t\t},\n\t\t\t\"lastNodeExecuted\": \"Node With Error\",\n\t\t\t\"mode\": \"manual\"\n\t\t},\n\t\t\"workflow\": {\n\t\t\t\"id\": \"1\",\n\t\t\t\"name\": \"Example Workflow\"\n\t\t}\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up n8n Repository\nDESCRIPTION: Commands to clone the n8n repository, install dependencies, build, and start n8n for development.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/embed/white-labelling.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/<your-organization>/n8n.git n8n\ncd n8n\n\nnpm install\nnpm run build\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Configuring Self-hosted n8n for Metrics and Health Checks\nDESCRIPTION: Demonstrates how to enable the /metrics and /healthz endpoints for self-hosted n8n instances using environment variables. These endpoints are disabled by default.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/logging-monitoring/monitoring.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# metrics\nN8N_METRICS=true\n# healthz\nQUEUE_HEALTH_CHECK_ACTIVE=true\n```\n\n----------------------------------------\n\nTITLE: Running MySQL Container with Port Publishing\nDESCRIPTION: Docker command to run a MySQL container with port 3306 published to the host system. This configuration allows external connections to the MySQL instance running in the container.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.mysql/common-issues.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -p 3306:3306 --name my-mysql -d mysql:latest\n```\n\n----------------------------------------\n\nTITLE: Building the Custom n8n Docker Image\nDESCRIPTION: This command builds a Docker image using the previously defined Dockerfile located in the current directory (.). It requires passing the desired n8n version number as a build argument (`N8N_VERSION`) and tags the resulting image as `customizedn8n`. This image will contain the specified n8n version along with any custom nodes placed in the appropriate directory before building.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/deploy/install-private-nodes.md#2025-04-22_snippet_1\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Replace <n8n-version-number> with the n8n release version number. \n# For example, N8N_VERSION=0.177.0\ndocker build --build-arg N8N_VERSION=<n8n-version-number> --tag=customizedn8n .\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable to Disable n8n Templates\nDESCRIPTION: Sets the N8N_TEMPLATES_ENABLED environment variable to false to disable the templates feature in n8n.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/workflows/templates/disable-templates.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nN8N_TEMPLATES_ENABLED=false\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Credential Overwrites in JSON\nDESCRIPTION: Creates a JSON file (oauth-credentials.json) containing OAuth credential overwrites for Asana and GitHub, including client IDs and secrets.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/embed/configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"asanaOAuth2Api\": {\n        \"clientId\": \"<id>\",\n        \"clientSecret\": \"<secret>\"\n    },\n    \"githubOAuth2Api\": {\n        \"clientId\": \"<id>\",\n        \"clientSecret\": \"<secret>\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating n8n to latest version with npm in Bash\nDESCRIPTION: This command updates the installed n8n to the latest version using npm.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/npm.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm update -g n8n\n```\n\n----------------------------------------\n\nTITLE: Running the Linter Manually (Shell)\nDESCRIPTION: Executes the defined 'lint' script in `package.json`, typically running ESLint to analyze the codebase for potential errors and style issues based on the configured `eslint-plugin-n8n-nodes-base` rules. Detected issues are reported in the console. This command is run manually in the root directory of a community package, or in `/packages/nodes-base/` in the main n8n repository.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/test/node-linter.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Filtering Supabase Rows Using Metadata Query Syntax - Plaintext\nDESCRIPTION: Shows how to construct filter expressions for querying Supabase records by JSON metadata within n8n. Uses Supabase's metadata query language format, relying on the Postgres JSON operator (->>) and comparison operators. Users must fill in their specific property and filter values. The inputs are used in the n8n Supabase node's Filters (String) parameter. Output is the filtered dataset that matches the query.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.supabase/common-issues.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmetadata->>{your-property}={comparison-operator}.{comparison-value}\n```\n\n----------------------------------------\n\nTITLE: Nested Data Structure Example in JavaScript\nDESCRIPTION: Example showing an array of objects with nested data structures, demonstrating how n8n handles complex data hierarchies for mapping.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/data/data-mapping/data-mapping-ui.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    \"name\": \"First item\",\n    \"nested\": {\n      \"example-number-field\": 1,\n      \"example-string-field\": \"apples\"\n    }\n  },\n  {\n    \"name\": \"Second item\",\n    \"nested\": {\n      \"example-number-field\": 2,\n      \"example-string-field\": \"oranges\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Commands with AND Operator in Execute Command Node\nDESCRIPTION: This snippet demonstrates how to run multiple commands in the Execute Command node by separating them with && on a single line. This example changes directory to 'bin' and then lists its contents.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.executecommand/index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd bin && ls\n```\n\n----------------------------------------\n\nTITLE: Send Document Operation Parameters\nDESCRIPTION: Configuration for sending document files to Telegram chats using the sendDocument method. Includes parameters for both binary files and existing Telegram file IDs.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.telegram/message-operations.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* Chat ID: @channelusername format\n* Binary File: Toggle for binary files\n* Document: file_id or HTTP URL\n* Caption: Max 1024 characters\n* Parse Mode: HTML, Markdown, MarkdownV2\n```\n\n----------------------------------------\n\nTITLE: Installing n8n Globally using npm (Shell)\nDESCRIPTION: This command uses npm (Node Package Manager) to install the n8n application globally (`-g`) on the user's system. This makes the `n8n` command-line tool accessible from any directory, which is a prerequisite for running and testing custom nodes locally as described in the document. Requires Node.js and npm to be installed beforehand.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/node-development-environment.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install n8n -g\n```\n\n----------------------------------------\n\nTITLE: Example n8n API Paginated Response Structure (JSON)\nDESCRIPTION: Illustrates the JSON structure of a response from the n8n API when pagination is involved. The response contains a `data` array holding the list of items (workflows in this context) for the current page and a `nextCursor` field. The value of `nextCursor` is used to request the subsequent page of results.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/api/pagination.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"data\": [\n    // The response contains an object for each workflow\n    {\n      // Workflow data\n    }\n  ],\n  \"nextCursor\": \"MTIzZTQ1NjctZTg5Yi0xMmQzLWE0NTYtNDI2NjE0MTc0MDA\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Compose on Hetzner Cloud\nDESCRIPTION: Commands to update the system and install Docker Compose plugin on a Hetzner cloud server.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/hetzner.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\napt update && apt -y upgrade\napt install docker-compose-plugin\n```\n\n----------------------------------------\n\nTITLE: AWS IAM Policy for Full Secret Access in JSON\nDESCRIPTION: This JSON defines an IAM policy that grants full access to all secrets in AWS Secrets Manager. It allows listing, retrieving, and describing secrets.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/external-secrets.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"Version\": \"2012-10-17\",\n\t\"Statement\": [\n\t\t{\n\t\t\t\"Sid\": \"AccessAllSecrets\",\n\t\t\t\"Effect\": \"Allow\",\n\t\t\t\"Action\": [\n\t\t\t\t\"secretsmanager:ListSecrets\",\n\t\t\t\t\"secretsmanager:BatchGetSecretValue\",\n\t\t\t\t\"secretsmanager:GetResourcePolicy\",\n\t\t\t\t\"secretsmanager:GetSecretValue\",\n\t\t\t\t\"secretsmanager:DescribeSecret\",\n\t\t\t\t\"secretsmanager:ListSecretVersionIds\",\n\t\t\t],\n\t\t\t\"Resource\": \"*\"\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Header and Query String for Custom Authentication - JSON\nDESCRIPTION: This snippet illustrates a combined approach for authentication, setting both a custom HTTP header 'api-version' and a query string parameter 'apikey'. It targets advanced custom authentication schemes supported by n8n, enabling both headers and query parameters to be set simultaneously. All key names and values should be modified as needed for the target API or service.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/httprequest.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\\n\\t\\\"headers\\\": {\\n\\t\\t\\\"api-version\\\": \\\"202404\\\"\\n\\t},\\n\\t\\\"qs\\\": {\\n\\t\\t\\\"apikey\\\": \\\"my-api-key\\\"\\n\\t}\\n}\n```\n\n----------------------------------------\n\nTITLE: Starting n8n after installation in Bash\nDESCRIPTION: These commands show how to start n8n after installation. Both 'n8n' and 'n8n start' can be used.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/npm.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nn8n\n# or\nn8n start\n```\n\n----------------------------------------\n\nTITLE: Accessing Shell in n8n Docker Container - Shell\nDESCRIPTION: This snippet shows how to access the shell inside the running n8n Docker container. It is required as the initial step before running any node management commands (such as installing, uninstalling, or upgrading nodes). The parameter 'n8n' specifies the container name; it must match your running instance. The output is an interactive shell session inside the container. The prerequisite is having Docker installed and the n8n container running.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/community-nodes/installation/manual-install.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it n8n sh\n```\n\n----------------------------------------\n\nTITLE: Disabling Version Check Notifications - n8n - Bash\nDESCRIPTION: This snippet shows how to turn off automatic checks for newer versions of n8n by setting the N8N_VERSION_NOTIFICATIONS_ENABLED environment variable to false using a bash command. No additional dependencies are required. Setting this variable to 'false' causes n8n to skip version notification pings; this is usually configured in the shell environment before starting the n8n process. The expected effect is suppression of remote version check requests.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/securing/telemetry-opt-out.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport N8N_VERSION_NOTIFICATIONS_ENABLED=false\n```\n\n----------------------------------------\n\nTITLE: Example: Filtering Records Where Metadata Age is Greater Than or Equal to 21 - Plaintext\nDESCRIPTION: Provides a concrete example of constructing a filter query for the Supabase node in n8n, retrieving only records where the metadata property 'age' is at least 21. Shows correct use of the Postgres JSON extraction operator and the 'gte' (greater than or equal) operator in the filter expression. This string is input into the n8n Supabase node filter field, returning all records that meet the specified age condition.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.supabase/common-issues.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmetadata->>age=gte.21\n```\n\n----------------------------------------\n\nTITLE: Configuring Telemetry Opt-out in n8n\nDESCRIPTION: Environment variable configurations to disable telemetry data collection and version notification checks in self-hosted n8n installations.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/privacy-security/privacy.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport N8N_DIAGNOSTICS_ENABLED=false\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport N8N_VERSION_NOTIFICATIONS_ENABLED=false\n```\n\n----------------------------------------\n\nTITLE: Daily Cron Expression without Seconds\nDESCRIPTION: Cron expression to trigger a workflow every day at 04:08. The expression uses five fields without seconds specification, using asterisks for day, month, and weekday fields.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/integrations/builtin/poll-modes.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n8 4 * * *\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication for NASA Pics API in n8n\nDESCRIPTION: This TypeScript code defines the authentication structure for the NASA Pics API in n8n. It specifies the credential type, properties, and authentication method using an API key.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/declarative-style-node.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n\tIAuthenticateGeneric,\n\tICredentialType,\n\tINodeProperties,\n} from 'n8n-workflow';\n\nexport class NasaPicsApi implements ICredentialType {\n\tname = 'NasaPicsApi';\n\tdisplayName = 'NASA Pics API';\n\t// Uses the link to this tutorial as an example\n\t// Replace with your own docs links when building your own nodes\n\tdocumentationUrl = 'https://docs.n8n.io/integrations/creating-nodes/build/declarative-style-node/';\n\tproperties: INodeProperties[] = [\n\t\t{\n\t\t\tdisplayName: 'API Key',\n\t\t\tname: 'apiKey',\n\t\t\ttype: 'string',\n\t\t\tdefault: '',\n\t\t},\n\t];\n\tauthenticate = {\n\t\ttype: 'generic',\n\t\tproperties: {\n\t\t\tqs: {\n\t\t\t\t'api_key': '={{$credentials.apiKey}}'\n\t\t\t}\n\t\t},\n\t} as IAuthenticateGeneric;\n}\n```\n\n----------------------------------------\n\nTITLE: Gmail API Label Operations Configuration Examples\nDESCRIPTION: Example configuration steps showing parameter inputs for various Gmail label operations in n8n including creating, deleting, getting and listing labels with corresponding API endpoints.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.gmail/label-operations.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Select the **Credential to connect with** or create a new one.\n* **Resource**: Select **Label**.\n* **Operation**: Select **Create**.\n* **Name**: Enter a display name for the label.\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Variables with Vars API in n8n Python\nDESCRIPTION: This code illustrates how to retrieve the value of a user-defined environment variable in n8n using Python. It uses the `_vars` object, which, like its JavaScript counterpart, is read-only and provides access exclusively to predefined environment variables. This approach requires appropriate environment configuration in n8n and ownership permissions to create new variables. Replace `<variable-name>` with the name of your variable to access its value within the active environment.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/builtin/vars.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Access a variable\n_vars.<variable-name>\n```\n\n----------------------------------------\n\nTITLE: Structuring Input Data for MySQL Queries in JavaScript\nDESCRIPTION: This JavaScript snippet represents an array of user objects, each containing email, name, and age fields. It is typically used as sample input data that can be processed by n8n when interacting with the MySQL node, especially for parameterized queries. Ensure that each object matches the structure expected by the workflow, with 'email' corresponding to the field later referenced in expressions. Inputs are expected as JSON objects, and the snippet assumes that n8n or a similar automation tool can iterate over them.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.mysql/index.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n    {\n        \"email\": \"alex@example.com\",\n        \"name\": \"Alex\",\n        \"age\": 21 \n    },\n    {\n        \"email\": \"jamie@example.com\",\n        \"name\": \"Jamie\",\n        \"age\": 33 \n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Getting Workflow Name in n8n JavaScript\nDESCRIPTION: Retrieves the name of the current workflow. This metadata property is available for use within the Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/n8n-metadata.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n$workflow.name\n```\n\n----------------------------------------\n\nTITLE: Defining a Filter Component with Configuration Options in n8n Node UI (TypeScript)\nDESCRIPTION: This configuration defines a filter component (`type: 'filter'`) used for evaluating conditions on incoming data. It's paired with a 'collection' type field named 'options' that allows users to configure the filter's behavior, such as case sensitivity (`ignoreCase`) and type validation (`looseTypeValidation`), via boolean toggles. The filter's `typeOptions` reference these user-set parameters.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/ui-elements.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\tdisplayName: 'Conditions',\n\tname: 'conditions',\n\tplaceholder: 'Add Condition',\n\ttype: 'filter',\n\tdefault: {},\n\ttypeOptions: {\n\t\tfilter: {\n\t\t\t// Use the user options (below) to determine filter behavior\n\t\t\tcaseSensitive: '={{!$parameter.options.ignoreCase}}',\n\t\t\ttypeValidation: '={{$parameter.options.looseTypeValidation ? \"loose\" : \"strict\"}}',\n\t\t},\n\t},\n},\n{\ndisplayName: 'Options',\nname: 'options',\ntype: 'collection',\nplaceholder: 'Add option',\ndefault: {},\noptions: [\n\t{\n\t\tdisplayName: 'Ignore Case',\n\t\tdescription: 'Whether to ignore letter case when evaluating conditions',\n\t\tname: 'ignoreCase',\n\t\ttype: 'boolean',\n\t\tdefault: true,\n\t},\n\t{\n\t\tdisplayName: 'Less Strict Type Validation',\n\t\tdescription: 'Whether to try casting value types based on the selected operator',\n\t\tname: 'looseTypeValidation',\n\t\ttype: 'boolean',\n\t\tdefault: true,\n\t},\n],\n},\n```\n\n----------------------------------------\n\nTITLE: Accessing n8n Metrics Endpoint\nDESCRIPTION: Shows how to access the /metrics endpoint, which provides detailed information about the current status of the n8n instance. This endpoint is not available on n8n Cloud.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/logging-monitoring/monitoring.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n<your-instance-url>/metrics\n```\n\n----------------------------------------\n\nTITLE: Incorrect Field Name Expression Example\nDESCRIPTION: Example showing how not to reference field names for media messages using expressions, which can cause issues in the WhatsApp Business Cloud node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.whatsapp/common-issues.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n{{ $json.input.data }}\n```\n\n----------------------------------------\n\nTITLE: Workflow Template JSON Structure\nDESCRIPTION: Example JSON response showing the complete structure of an n8n workflow including nodes, connections, credentials and settings.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/embed/managing-workflows.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": \"1012\",\n    \"name\": \"Nathan's Workflow\",\n    \"active\": false,\n    \"nodes\": [\n      {\n        \"parameters\": {},\n        \"name\": \"Start\",\n        \"type\": \"n8n-nodes-base.start\",\n        \"typeVersion\": 1,\n        \"position\": [\n          130,\n          640\n        ]\n      },\n      {\n        \"parameters\": {\n          \"authentication\": \"headerAuth\",\n          \"url\": \"https://internal.users.n8n.cloud/webhook/custom-erp\",\n          \"options\": {\n            \"splitIntoItems\": true\n          },\n          \"headerParametersUi\": {\n            \"parameter\": [\n              {\n                \"name\": \"unique_id\",\n                \"value\": \"recLhLYQbzNSFtHNq\"\n              }\n            ]\n          }\n        },\n        \"name\": \"HTTP Request\",\n        \"type\": \"n8n-nodes-base.httpRequest\",\n        \"typeVersion\": 1,\n        \"position\": [\n          430,\n          300\n        ],\n        \"credentials\": {\n          \"httpHeaderAuth\": \"beginner_course\"\n        }\n      },\n      {\n        \"parameters\": {\n          \"operation\": \"append\",\n          \"application\": \"appKBGQfbm6NfW6bv\",\n          \"table\": \"processingOrders\",\n          \"options\": {}\n        },\n        \"name\": \"Airtable\",\n        \"type\": \"n8n-nodes-base.airtable\",\n        \"typeVersion\": 1,\n        \"position\": [\n          990,\n          210\n        ],\n        \"credentials\": {\n          \"airtableApi\": \"Airtable\"\n        }\n      },\n      {\n        \"parameters\": {\n          \"conditions\": {\n            \"string\": [\n              {\n                \"value1\": \"={{$json[\\\"orderStatus\\\"]}}\",\n                \"value2\": \"processing\"\n              }\n            ]\n          }\n        },\n        \"name\": \"IF\",\n        \"type\": \"n8n-nodes-base.if\",\n        \"typeVersion\": 1,\n        \"position\": [\n          630,\n          300\n        ]\n      },\n      {\n        \"parameters\": {\n          \"keepOnlySet\": true,\n          \"values\": {\n            \"number\": [\n              {\n                \"name\": \"=orderId\",\n                \"value\": \"={{$json[\\\"orderID\\\"]}}\"\n              }\n            ],\n            \"string\": [\n              {\n                \"name\": \"employeeName\",\n                \"value\": \"={{$json[\\\"employeeName\\\"]}}\"\n              }\n            ]\n          },\n          \"options\": {}\n        },\n        \"name\": \"Set\",\n        \"type\": \"n8n-nodes-base.set\",\n        \"typeVersion\": 1,\n        \"position\": [\n          800,\n          210\n        ]\n      },\n      {\n        \"parameters\": {\n          \"functionCode\": \"let totalBooked = items.length;\\nlet bookedSum = 0;\\n\\nfor(let i=0; i < items.length; i++) {\\n  bookedSum = bookedSum + items[i].json.orderPrice;\\n}\\nreturn [{json:{totalBooked, bookedSum}}]\\n\"\n        },\n        \"name\": \"Function\",\n        \"type\": \"n8n-nodes-base.function\",\n        \"typeVersion\": 1,\n        \"position\": [\n          800,\n          400\n        ]\n      },\n      {\n        \"parameters\": {\n          \"webhookUri\": \"https://discord.com/api/webhooks/865213348202151968/oD5_WPDQwtr22Vjd_82QP3-_4b_lGhAeM7RynQ8Js5DzyXrQEnj0zeAQIA6fki1JLtXE\",\n          \"text\": \"=This week we have {{$json[\\\"totalBooked\\\"]}} booked orders with a total value of {{$json[\\\"bookedSum\\\"]}}. My Unique ID: {{$node[\\\"HTTP Request\\\"].parameter[\\\"headerParametersUi\\\"][\\\"parameter\\\"][0][\\\"value\\\"]}}\"\n        },\n        \"name\": \"Discord\",\n        \"type\": \"n8n-nodes-base.discord\",\n        \"typeVersion\": 1,\n        \"position\": [\n          1000,\n          400\n        ]\n      },\n      {\n        \"parameters\": {\n          \"triggerTimes\": {\n            \"item\": [\n              {\n                \"mode\": \"everyWeek\",\n                \"hour\": 9\n              }\n            ]\n          }\n        },\n        \"name\": \"Cron\",\n        \"type\": \"n8n-nodes-base.cron\",\n        \"typeVersion\": 1,\n        \"position\": [\n          220,\n          300\n        ]\n      }\n    ],\n    \"connections\": {\n      \"HTTP Request\": {\n        \"main\": [\n          [\n            {\n              \"node\": \"IF\",\n              \"type\": \"main\",\n              \"index\": 0\n            }\n          ]\n        ]\n      },\n      \"Start\": {\n        \"main\": [\n          []\n        ]\n      },\n      \"IF\": {\n        \"main\": [\n          [\n            {\n              \"node\": \"Set\",\n              \"type\": \"main\",\n              \"index\": 0\n            }\n          ],\n          [\n            {\n              \"node\": \"Function\",\n              \"type\": \"main\",\n              \"index\": 0\n            }\n          ]\n        ]\n      },\n      \"Set\": {\n        \"main\": [\n          [\n            {\n              \"node\": \"Airtable\",\n              \"type\": \"main\",\n              \"index\": 0\n            }\n          ]\n        ]\n      },\n      \"Function\": {\n        \"main\": [\n          [\n            {\n              \"node\": \"Discord\",\n              \"type\": \"main\",\n              \"index\": 0\n            }\n          ]\n        ]\n      },\n      \"Cron\": {\n        \"main\": [\n          [\n            {\n              \"node\": \"HTTP Request\",\n              \"type\": \"main\",\n              \"index\": 0\n            }\n          ]\n        ]\n      }\n    },\n    \"createdAt\": \"2021-07-16T11:15:46.066Z\",\n    \"updatedAt\": \"2021-07-16T12:05:44.045Z\",\n    \"settings\": {},\n    \"staticData\": null,\n    \"tags\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Options Object Definition - TypeScript\nDESCRIPTION: Defines the structure and possible fields for the 'options' parameter when making HTTP requests in n8n custom nodes. All fields except 'url' are optional, allowing flexibility for different API requirements (e.g., methods, payloads, authentication, proxy, etc.). This interface ensures type-safe construction of request configuration objects. Key outputs include full control over headers, authentication, query parameters, response handling, and security options.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/http-helpers.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n\turl: string;\n\theaders?: object;\n\tmethod?: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'HEAD';\n\tbody?: FormData | Array | string | number | object | Buffer | URLSearchParams;\n\tqs?: object;\n\tarrayFormat?: 'indices' | 'brackets' | 'repeat' | 'comma';\n\tauth?: {\n\t\tusername: string,\n\t\tpassword: string,\n\t};\n\tdisableFollowRedirect?: boolean;\n\tencoding?: 'arraybuffer' | 'blob' | 'document' | 'json' | 'text' | 'stream';\n\tskipSslCertificateValidation?: boolean;\n\treturnFullResponse?: boolean;\n\tproxy?: {\n\t\thost: string;\n\t\tport: string | number;\n\t\tauth?: {\n\t\t\tusername: string;\n\t\t\tpassword: string;\n\t\t},\n\t\tprotocol?: string;\n\t};\n\ttimeout?: number;\n\tjson?: boolean;\n}\t\n```\n\n----------------------------------------\n\nTITLE: Uninstalling a Community Node using npm - Shell\nDESCRIPTION: This snippet shows how to remove a community node package from your n8n instance using npm's uninstall command. Replace 'n8n-nodes-nodeName' with the appropriate package name. npm must be installed in the container. The command removes the package, thus deleting the node functionality from your instance.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/community-nodes/installation/manual-install.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm uninstall n8n-nodes-nodeName\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Authentication in Auth Object - n8n - TypeScript\nDESCRIPTION: This snippet demonstrates how to configure an 'auth' property within generic authentication to provide username and password for basic authentication in n8n. Both values are sourced from credential inputs and must be present in the credentials configuration. This is intended for APIs that require HTTP Basic Auth.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/credentials-files.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nauthenticate: IAuthenticateGeneric = {\n\ttype: 'generic',\n\tproperties: {\n\t\tauth: {\n\t\t\tusername: '={{$credentials.username}}',\n\t\t\tpassword: '={{$credentials.password}}',\n\t\t},\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Workflow ID in n8n Python\nDESCRIPTION: Retrieves the unique ID of the current workflow. This metadata property is available for use within the Python Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/n8n-metadata.md#2025-04-22_snippet_34\n\nLANGUAGE: python\nCODE:\n```\n_workflow.id\n```\n\n----------------------------------------\n\nTITLE: Update Workflow Active Status\nDESCRIPTION: Commands to modify the active status of workflows. Can target specific workflows by ID or update all workflows at once.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/cli-commands.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nn8n update:workflow --id=<ID> --active=false\n```\n\nLANGUAGE: bash\nCODE:\n```\nn8n update:workflow --id=<ID> --active=true\n```\n\nLANGUAGE: bash\nCODE:\n```\nn8n update:workflow --all --active=false\n```\n\nLANGUAGE: bash\nCODE:\n```\nn8n update:workflow --all --active=true\n```\n\n----------------------------------------\n\nTITLE: Opening Firewall Ports for n8n Web Traffic\nDESCRIPTION: Commands to open ports 80 and 443 in the server's firewall for HTTP and HTTPS traffic.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/hetzner.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo ufw allow 80\nsudo ufw allow 443\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL Server Port Number in SQL\nDESCRIPTION: This SQL query fetches the network port number on which the MySQL server is listening for connections. This value is needed for the 'Port' field in the n8n MySQL credential setup (default is 3306). Requires permissions to execute `SHOW VARIABLES`.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/mysql.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSHOW VARIABLES WHERE Variable_name = 'port';\n```\n\n----------------------------------------\n\nTITLE: Configuring Postgres Persistent Volume in Kubernetes\nDESCRIPTION: YAML configuration for creating a persistent volume claim for Postgres using the gp2 storage class in AWS EKS.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/aws.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n…\nspec:\n  storageClassName: gp2\n  accessModes:\n    - ReadWriteOnce\n…\n```\n\n----------------------------------------\n\nTITLE: Installing a custom node in local n8n instance\nDESCRIPTION: This command links the custom node package to the local n8n installation. Replace <node-package-name> with the actual package name from package.json.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/integrations/creating-nodes/testing.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# In the nodes directory within your n8n installation\n# node-package-name is the name from the package.json\nnpm link <node-package-name>\n```\n\n----------------------------------------\n\nTITLE: Security Audit Command\nDESCRIPTION: Command to run a security audit on the n8n instance to detect common security issues.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/cli-commands.md#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nn8n audit\n```\n\n----------------------------------------\n\nTITLE: Embedding n8n Workflow Demo\nDESCRIPTION: This snippet uses a specific markdown-like syntax recognized by the n8n documentation system. It embeds or links to a visual representation of an n8n workflow defined in a JSON file. The path points to the specific workflow state relevant to this tutorial step, showing the HTTP Request node connected to the Airtable node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/courses/level-one/chapter-5/chapter-5.2.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[ workflowDemo(\"file:////courses/level-one/chapter-5/chapter-5.2.json\") ]]\n```\n\n----------------------------------------\n\nTITLE: Send Photo Operation Parameters\nDESCRIPTION: Documentation for sending photos via Telegram Bot API, including required parameters and additional fields like caption, notification settings, parse mode, and reply options.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.telegram/message-operations.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n* **Chat ID**: @channelusername\n* **Binary File**: Toggle for sending binary files\n* **Photo**: file_id or HTTP URL\n* **Caption**: Max 1024 characters\n* **Parse Mode**: HTML, Markdown (Legacy), MarkdownV2\n* **Message Thread ID**: Forum topic identifier\n```\n\n----------------------------------------\n\nTITLE: Setting the WEBHOOK_URL Environment Variable - Shell\nDESCRIPTION: This shell command sets the WEBHOOK_URL environment variable to the publicly accessible URL generated by ngrok. Setting this variable ensures that n8n will use the correct callback URL for OAuth2 redirection with Twist. The placeholder <YOUR-NGROK-URL> should be replaced with the actual URL output from the ngrok command. No additional dependencies are needed.\n\nInputs: <YOUR-NGROK-URL> (replace with actual ngrok URL).\nOutputs: Environment variable set in current terminal session.\nLimitations: Only affects the current shell session; needs to be set whenever environment is restarted.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/twist.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nexport WEBHOOK_URL=<YOUR-NGROK-URL>\n```\n\n----------------------------------------\n\nTITLE: Editing n8n Environment Variables File\nDESCRIPTION: Command to open the .env file for editing n8n environment variables.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/hetzner.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnano .env\n```\n\n----------------------------------------\n\nTITLE: Markdown Permission Table for n8n Account Types\nDESCRIPTION: A comprehensive table showing permissions across different account types in n8n, including access to workflows, credentials, tags, projects, and administrative functions.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/user-management/account-types.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Permission | Owner | Admin | Member |\n| ---------- |------ | ----- | ------ |\n| Manage own email and password | :white_check_mark: | :white_check_mark: | :white_check_mark: |\n| Manage own workflows | :white_check_mark: | :white_check_mark: | :white_check_mark: |\n| View, create, and use tags | :white_check_mark: | :white_check_mark: | :white_check_mark: |\n| Delete tags | :white_check_mark: | :white_check_mark: | :x: |\n| View and share all workflows | :white_check_mark: | :white_check_mark: | :x: |\n| View, edit, and share all credentials | :white_check_mark: | :white_check_mark: | :x: |\n| Set up and use [Source control](/source-control-environments/index.md) | :white_check_mark: | :white_check_mark: | :x: |\n| Create [projects](/user-management/rbac/projects.md) | :white_check_mark: | :white_check_mark: | :x: |\n| View all projects | :white_check_mark: | :white_check_mark: | :x: |\n| Add and remove users | :white_check_mark: | :white_check_mark: | :x: |\n| Access the Cloud dashboard | :white_check_mark: | :x: | :x: |\n```\n\n----------------------------------------\n\nTITLE: Basic Data Structure Example in JavaScript\nDESCRIPTION: Example showing a simple array containing objects with basic key-value pairs, used to demonstrate data mapping concepts.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/data/data-mapping/data-mapping-ui.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[\n\t{\n\t\t\"fruit\": \"apples\",\n\t\t\"color\": \"green\"\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Using the Base Resume Webhook URL with Suffix in n8n Wait Node\nDESCRIPTION: This variable refers to the base resume URL generated by the Wait node when using the 'On Webhook Call' or 'On Form Submitted' operations. If the 'Webhook Suffix' option is used to customize the URL, this suffix must be manually appended to the value of `$resumeWebhookUrl` before the URL is exposed or used.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.wait.md#2025-04-22_snippet_1\n\nLANGUAGE: n8n Expression\nCODE:\n```\n$resumeWebhookUrl\n```\n\n----------------------------------------\n\nTITLE: Execute Workflow by ID\nDESCRIPTION: Start a specific workflow using its ID via CLI.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/cli-commands.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nn8n execute --id <ID>\n```\n\n----------------------------------------\n\nTITLE: Getting Execution Mode in n8n JavaScript\nDESCRIPTION: Indicates whether the execution was triggered automatically (`production`) or by manually running the workflow (`test`). This metadata property is available for use within the Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/n8n-metadata.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n$execution.mode\n```\n\n----------------------------------------\n\nTITLE: Implementing HTML Editor in JavaScript for n8n Node\nDESCRIPTION: This code snippet shows how to implement an HTML editor UI element in an n8n node. It includes options for setting a default template and preventing data expressions.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/ui-elements.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tdisplayName: 'HTML Template', // The value the user sees in the UI\n\tname: 'html', // The name used to reference the element UI within the code\n\ttype: 'string',\n\ttypeOptions: {\n\t\teditor: 'htmlEditor',\n\t},\n\tdefault: placeholder, // Loads n8n's placeholder HTML template\n\tnoDataExpression: true, // Prevent using an expression for the field\n\tdescription: 'HTML template to render',\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Authentication Token in Query String - n8n - TypeScript\nDESCRIPTION: This snippet configures the n8n credentials authentication to append a token as a query string parameter in API requests. The property 'token' is extracted from the credential inputs. This is typical for APIs expecting tokens in URL query parameters.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/credentials-files.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nauthenticate: IAuthenticateGeneric = {\n\ttype: 'generic',\n\tproperties: {\n\t\tqs: {\n\t\t\ttoken: '={{$credentials.token}}',\n\t\t},\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: SAML Attribute Mapping Table Structure\nDESCRIPTION: Markdown table showing the required SAML attribute mappings between n8n and identity providers, including name formats and corresponding values.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/user-management/saml/setup.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Name format | Value (IdP side) |\n| ---- | ----------- | ---------------- |\n| http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress | URI Reference | User email       |\n| http://schemas.xmlsoap.org/ws/2005/05/identity/claims/firstname    | URI Reference | User First Name  |\n| http://schemas.xmlsoap.org/ws/2005/05/identity/claims/lastname     | URI Reference | User Last Name   |\n| http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn          | URI Reference | User Email       |\n```\n\n----------------------------------------\n\nTITLE: Querying Default Domain Name in Microsoft SQL\nDESCRIPTION: This SQL query retrieves the default domain name configured for the Microsoft SQL Server instance. It's used during n8n credential setup for the 'Domain' field when multiple domains access the database. The query requires execution against the target SQL Server.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/microsoftsql.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT DEFAULT_DOMAIN()[DomainName];\n```\n\n----------------------------------------\n\nTITLE: Updating MySQL Table with Composite Keys using SQL\nDESCRIPTION: Example SQL query showing how to update table rows using multiple columns for matching in cases where composite keys are used. This example updates the quantity in an orders table by matching both customer_id and product_id.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.mysql/common-issues.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE orders SET quantity = 3 WHERE customer_id = 538 AND product_id = 800;\n```\n\n----------------------------------------\n\nTITLE: Configuring Human Message for Conversational AI Agent in Markdown\nDESCRIPTION: This snippet demonstrates how to structure the Human Message for the Conversational AI Agent, including placeholders for tools, format instructions, and user input. It provides context for the agent about available tools and how to interpret the user's input.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent/conversational-agent.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nTOOLS\n------\nAssistant can ask the user to use tools to look up information that may be helpful in answering the user's original question. The tools the human can use are:\n\n{tools}\n\n{format_instructions}\n\nUSER'S INPUT\n--------------------\nHere is the user's input (remember to respond with a markdown code snippet of a JSON blob with a single action, and NOTHING else):\n\n{{input}}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Additional Optional Fields in n8n Node Properties (JavaScript)\nDESCRIPTION: This JavaScript object structure outlines how to define an 'Additional Fields' parameter within the `properties` array of an n8n node definition. It includes standard properties like `displayName`, `name`, `type` (which determines the UI element), `placeholder`, and a `default` value. The `displayOptions.show` object controls the visibility of these fields based on the selected `resource` and `operation`, allowing for context-dependent optional parameters.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/node-base-files/standard-parameters.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\ndisplayName: 'Additional Fields',\nname: 'additionalFields',\n// The UI element type\ntype: ''\nplaceholder: 'Add Field',\ndefault: {},\ndisplayOptions: {\n  // Set which resources and operations this field is available for\n  show: {\n    resource: [\n      // Resource names\n    ],\n    operation: [\n      // Operation names\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Solar Flare Report Message Expression\nDESCRIPTION: Expression to generate a formatted message containing the solar flare classification from the NASA API response.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/try-it-out/tutorial-first-workflow.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nThere was a solar flare of class {{$json[\"classType\"]}}\n```\n\n----------------------------------------\n\nTITLE: Adding Dynamic Hint to Programmatic-Style Node in TypeScript\nDESCRIPTION: Illustrates how to create a dynamic hint in a programmatic-style node, using information from the node execution. This type of hint is displayed after execution and relies on output data.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/ui-elements.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nif (operation === 'select' && items.length > 1 && !node.executeOnce) {\n    // Expects two parameters: NodeExecutionData and an array of hints\n\treturn new NodeExecutionOutput(\n\t\t[returnData],\n\t\t[\n\t\t\t{\n\t\t\t\tmessage: `This node ran ${items.length} times, once for each input item. To run for the first item only, enable <b>Execute once</b> in the node settings.`,\n\t\t\t\tlocation: 'outputPane',\n\t\t\t},\n\t\t],\n\t);\n}\nreturn [returnData];\n```\n\n----------------------------------------\n\nTITLE: Setting GENERIC_TIMEZONE Environment Variable in Bash\nDESCRIPTION: This command sets the GENERIC_TIMEZONE environment variable to 'Europe/Berlin', changing the default timezone for the n8n instance. The timezone affects various time-based operations in n8n, such as the Schedule node's execution times.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/configuration-examples/time-zone.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport GENERIC_TIMEZONE=Europe/Berlin\n```\n\n----------------------------------------\n\nTITLE: Accessing Binary Data Buffer Using n8n Helper - JavaScript\nDESCRIPTION: Demonstrates how to retrieve the binary data buffer for a specific item using n8n's `getBinaryDataBuffer()` JavaScript helper. Requires access to the node's helpers inside an n8n workflow execution context. Parameters include `itemIndex` (the zero-based index of the item) and `binaryPropertyName` (the property holding the binary data, usually 'data'). This returns a buffer containing the item's binary content. Deprecated direct access via expressions should be avoided.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/code-node/get-binary-data-buffer.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n/* \n* itemIndex: number. The index of the item in the input data.\n* binaryPropertyName: string. The name of the binary property. \n* The default in the Read/Write File From Disk node is 'data'. \n*/\nlet binaryDataBufferItem = await this.helpers.getBinaryDataBuffer(itemIndex, binaryPropertyName);\n```\n\n----------------------------------------\n\nTITLE: Editing n8n Environment Configuration\nDESCRIPTION: Command to open the .env file for editing. This file contains environment variables needed for n8n configuration.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/digital-ocean.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnano .env\n```\n\n----------------------------------------\n\nTITLE: Handling Empty Values in Python\nDESCRIPTION: The _ifEmpty function in Python checks if the first parameter is empty and returns either the first parameter (if not empty) or the second parameter (if empty). It considers various cases of emptiness for different data types.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/convenience.md#2025-04-22_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n_ifEmpty(value, defaultValue)\n```\n\n----------------------------------------\n\nTITLE: Using n8n executeBatch Command for Workflow Testing\nDESCRIPTION: A new CLI command introduced in version 0.127.0 for executing and testing multiple workflows at once. The command includes help documentation for detailed usage instructions.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/release-notes/0-x.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nn8n executeBatch --help\n```\n\n----------------------------------------\n\nTITLE: Applying Multiselect List with JMESPath in n8n Code Node (Python)\nDESCRIPTION: Combines first and last names for each person using JMESPath multiselect list in a Python Code node. Uses _jmespath on _json.body.people. Outputs a dictionary with 'newList' key pointing to list of pairs.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/jmespath.md#2025-04-22_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nnewList = _jmespath(_json.body.people, \"[].[first, last]\")\nreturn {\"newList\":newList}\n\"\"\"\nReturns:\n[\n\t{\n\t\t\"newList\": [\n\t\t\t[\n\t\t\t\t\"James\",\n\t\t\t\t\"Green\"\n\t\t\t],\n\t\t\t[\n\t\t\t\t\"Jacob\",\n\t\t\t\t\"Jones\"\n\t\t\t],\n\t\t\t[\n\t\t\t\t\"Jayden\",\n\t\t\t\t\"Smith\"\n\t\t\t]\n\t\t]\n\t}\n]\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Applying List Projection with JMESPath in n8n Code Node (JavaScript)\nDESCRIPTION: Retrieves first names from a people array using a list projection in a JavaScript Code node. Utilizes $jmespath helper with JMESPath expression. Expects input JSON to be available as $json.body.people. Returns an object keyed as 'firstNames' for downstream workflow use.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/jmespath.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet firstNames = $jmespath($json.body.people, \"[*].first\" )\nreturn {firstNames};\n/* Returns:\n[\n\t{\n\t\t\"firstNames\": [\n\t\t\t\"James\",\n\t\t\t\"Jacob\",\n\t\t\t\"Jayden\"\n\t\t]\n\t}\n]\n*/\n```\n\n----------------------------------------\n\nTITLE: Applying Slice Projection with JMESPath in n8n Code Node (JavaScript)\nDESCRIPTION: Retrieves the first two first names from a people array via JMESPath slice projection in a Code node. Uses $jmespath helper and expects $json.body.people as input. Returns an object with the result assigned to 'firstTwoNames'.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/jmespath.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet firstTwoNames = $jmespath($json.body.people, \"[:2].first\");\nreturn {firstTwoNames};\n/* Returns:\n[\n\t{\n\t\t\"firstNames\": [\n\t\t\t\"James\",\n\t\t\t\"Jacob\",\n\t\t\t\"Jayden\"\n\t\t]\n\t}\n]\n*/\n```\n\n----------------------------------------\n\nTITLE: Transform Array to Object using smartJoin Helper in JavaScript\nDESCRIPTION: Demonstrates using the smartJoin helper function to convert an array of objects with type and name properties into a single object where type becomes the key and name becomes the value. The input array contains fruit and vegetable entries that get transformed into a simplified object structure.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/data-function-code/smartjoin.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Input\n{{ [{\"type\":\"fruit\", \"name\":\"apple\"},{\"type\":\"vegetable\", \"name\":\"carrot\"} ].smartJoin(\"type\",\"name\") }}\n// Output\n[Object: {\"fruit\":\"apple\",\"vegetable\":\"carrot\"}]\n```\n\n----------------------------------------\n\nTITLE: Activating Workflow\nDESCRIPTION: PATCH request to activate a workflow by setting its active status to true.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/embed/managing-workflows.md#2025-04-22_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPATCH https://<n8n-domain>/rest/workflows/1012\n```\n\n----------------------------------------\n\nTITLE: Implementing Notice Element in JavaScript for n8n Node\nDESCRIPTION: This code snippet demonstrates how to implement a notice UI element in an n8n node. It displays a yellow box with additional information or hints for the user.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/ui-elements.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  displayName: 'Your text here',\n  name: 'notice',\n  type: 'notice',\n  default: '',\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Resource Mapper in JavaScript for n8n Node\nDESCRIPTION: This code snippet shows how to implement a resource mapper UI element in an n8n node. It includes options for mapping mode, field customization, and support for automatic mapping and multi-key matching.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/ui-elements.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tdisplayName: 'Columns',\n\tname: 'columns', // The name used to reference the element UI within the code\n\ttype: 'resourceMapper', // The UI element type\n\tdefault: {\n\t\t// mappingMode can be defined in the component (mappingMode: 'defineBelow')\n\t\t// or you can attempt automatic mapping (mappingMode: 'autoMapInputData')\n\t\tmappingMode: 'defineBelow',\n\t\t// Important: always set default value to null\n\t\tvalue: null,\n\t},\n\trequired: true,\n\t// See \"Resource mapper type options interface\" below for the full typeOptions specification\n\ttypeOptions: {\n\t\tresourceMapper: {\n\t\t\tresourceMapperMethod: 'getMappingColumns',\n\t\t\tmode: 'update',\n\t\t\tfieldWords: {\n\t\t\t\tsingular: 'column',\n\t\t\t\tplural: 'columns',\n\t\t\t},\n\t\t\taddAllFields: true, \n\t\t\tmultiKeyMatch: true,\n\t\t\tsupportAutoMap: true,\n\t\t\tmatchingFieldsLabels: {\n\t\t\t\ttitle: 'Custom matching columns title',\n\t\t\t\tdescription: 'Help text for custom matching columns',\n\t\t\t\thint: 'Below-field hint for custom matching columns',\n\t\t\t},\n\t\t},\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing n8n Health Check Endpoint\nDESCRIPTION: Shows how to access the /healthz endpoint for basic health checking of an n8n instance. This endpoint returns a 200 status code if the instance is reachable.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/logging-monitoring/monitoring.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<your-instance-url>/healthz\n```\n\n----------------------------------------\n\nTITLE: Finding and Executing Commands in Docker Containers\nDESCRIPTION: Commands for finding n8n's container ID and executing commands within a running container to troubleshoot 'command not found' errors.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.executecommand/common-issues.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Find n8n's container ID, it will be the first column\ndocker ps | grep n8n\n# Try to execute the command within the running container\ndocker container exec <container_ID> <command_to_run>\n```\n\n----------------------------------------\n\nTITLE: Getting Execution ID in n8n Python\nDESCRIPTION: Retrieves the unique ID of the current workflow execution. This metadata property is available for use within the Python Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/n8n-metadata.md#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n_execution.id\n```\n\n----------------------------------------\n\nTITLE: Applying Slice Projection with JMESPath Expression (JavaScript Expression)\nDESCRIPTION: Uses a JMESPath slice projection to retrieve the first two first names from a people array inside an n8n JavaScript expression. ${json.body.people is the array; the expression '[:2].first' limits to two elements. Returns an array of up to two strings.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/jmespath.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n{{$jmespath($json.body.people, \"[:2].first\")}}\n// Returns [\"James\", \"Jacob\"]\n```\n\n----------------------------------------\n\nTITLE: Importing AI Workflow with Human Fallback in n8n\nDESCRIPTION: This code snippet demonstrates how to import a pre-configured n8n workflow that implements an AI-powered query system with human fallback. The workflow is stored as a JSON file and can be imported into n8n for use.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/advanced-ai/examples/human-fallback.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[[ workflowDemo(\"file:///advanced-ai/examples/ask_a_human.json\") ]]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Input Connection Data in n8n AI Node\nDESCRIPTION: Method to get data from a specified non-main input in an n8n AI node. Allows retrieval of data based on input type, item index, and optional input index.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/integrations/builtin/cluster-nodes/langchain-root-nodes/langchaincode/builtin-methods.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`this.getInputConnectionData(inputName, itemIndex, inputIndex?)`\n```\n\n----------------------------------------\n\nTITLE: Querying Postgres Server Address\nDESCRIPTION: SQL query to retrieve the server address of the Postgres instance. This can be used to confirm the host name for the credential configuration.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/postgres.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT inet_server_addr();\n```\n\n----------------------------------------\n\nTITLE: Comparing Datasets with Fruit Information in JSON\nDESCRIPTION: This snippet shows two JSON datasets containing fruit information (type and color) that can be compared using the Compare Datasets node. It illustrates how duplicate data handling can affect the output, especially when using the 'Include First Match Only' option.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.comparedatasets.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// Input 1\n[\n\t{\n\t\t\"fruit\": {\n\t\t\t\"type\": \"apple\",\n\t\t\t\"color\": \"red\"\n\t\t}\n\t},\n\t\t\t{\n\t\t\"fruit\": {\n\t\t\t\"type\": \"apple\",\n\t\t\t\"color\": \"red\"\n\t\t}\n\t},\n\t\t\t{\n\t\t\"fruit\": {\n\t\t\t\"type\": \"banana\",\n\t\t\t\"color\": \"yellow\"\n\t\t}\n\t}\n]\n// Input 2\n[\n\t{\n\t\t\"fruit\": {\n\t\t\t\"type\": \"apple\",\n\t\t\t\"color\": \"red\"\n\t\t}\n\t},\n\t\t\t{\n\t\t\"fruit\": {\n\t\t\t\"type\": \"apple\",\n\t\t\t\"color\": \"red\"\n\t\t}\n\t},\n\t\t\t{\n\t\t\"fruit\": {\n\t\t\t\"type\": \"banana\",\n\t\t\t\"color\": \"yellow\"\n\t\t}\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Applying Kubernetes Namespace Manifest\nDESCRIPTION: Shell command to apply the Kubernetes namespace manifest file separately if needed.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/azure.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f namespace.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Docker CLI Commands in n8n\nDESCRIPTION: Execute n8n CLI commands within a Docker container environment. Requires specifying the container name and the CLI command to run.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/cli-commands.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker exec -u node -it <n8n-container-name> <n8n-cli-command>\n```\n\n----------------------------------------\n\nTITLE: Subscribing Facebook App to Page Feed via Graph API\nDESCRIPTION: This Graph API endpoint path is used within a POST request to subscribe a Facebook App to the 'feed' updates for a specific Facebook Page. Replace `{page-id}` with the actual Page ID and execute the call using your app token via tools like the Graph API Explorer. This subscription is a necessary prerequisite for the n8n Facebook Trigger node (using the 'Page' object) to receive feed-related events.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/trigger-nodes/n8n-nodes-base.facebooktrigger/page.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{page-id}/subscribed_apps?subscribed_fields=feed\n```\n\n----------------------------------------\n\nTITLE: SQL Query Example for Merging Data in n8n\nDESCRIPTION: This SQL query demonstrates how to perform a left join operation in the Merge node's SQL Query mode. It joins data from input1 and input2 based on matching name and id fields.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.merge.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM input1 LEFT JOIN input2 ON input1.name = input2.id\n```\n\n----------------------------------------\n\nTITLE: Checking Workflow Active Status in n8n Python\nDESCRIPTION: Indicates whether the current workflow is active (`True`) or inactive (`False`). This metadata property is available for use within the Python Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/n8n-metadata.md#2025-04-22_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n_workflow.active\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Node Details in TypeScript\nDESCRIPTION: This TypeScript code populates the `description` object within the node class. It sets fundamental node properties like `displayName`, `name`, `icon`, `group`, `version`, `subtitle` (dynamically generated), `description`, `defaults`, `inputs`, `outputs`, required `credentials` (NasaPicsApi), and `requestDefaults` including the `baseURL` and common headers for the NASA API.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/declarative-style-node.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndisplayName: 'NASA Pics',\nname: 'NasaPics',\nicon: 'file:nasapics.svg',\ngroup: ['transform'],\nversion: 1,\nsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\ndescription: 'Get data from NASAs API',\ndefaults: {\n\tname: 'NASA Pics',\n},\ninputs: ['main'],\noutputs: ['main'],\ncredentials: [\n\t{\n\t\tname: 'NasaPicsApi',\n\t\trequired: true,\n\t},\n],\nrequestDefaults: {\n\tbaseURL: 'https://api.nasa.gov',\n\theaders: {\n\t\tAccept: 'application/json',\n\t\t'Content-Type': 'application/json',\n\t},\n},\n```\n\n----------------------------------------\n\nTITLE: Creating n8n Environment Configuration File\nDESCRIPTION: This snippet shows the contents of the .env file used to configure the n8n instance. It includes settings for the domain name, subdomain, timezone, and SSL email address.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/docker-compose.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# DOMAIN_NAME and SUBDOMAIN together determine where n8n will be reachable from\n# The top level domain to serve from\nDOMAIN_NAME=example.com\n\n# The subdomain to serve from\nSUBDOMAIN=n8n\n\n# The above example serve n8n at: https://n8n.example.com\n\n# Optional timezone to set which gets used by Cron and other scheduling nodes\n# New York is the default value if not set\nGENERIC_TIMEZONE=Europe/Berlin\n\n# The email address to use for the TLS/SSL certificate creation\nSSL_EMAIL=user@example.com\n```\n\n----------------------------------------\n\nTITLE: Initiating n8n Security Audit via API\nDESCRIPTION: Triggers the n8n security audit by making a POST request to the `/audit` API endpoint. Authentication as the instance owner is required for this operation. This method allows programmatic initiation of the security audit.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/securing/security-audit.md#2025-04-22_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /audit\n```\n\n----------------------------------------\n\nTITLE: Defining a Password Input Field in n8n Node UI (TypeScript)\nDESCRIPTION: This configuration defines a string input field suitable for passwords. It uses `type: 'string'` along with `typeOptions: { password: true }` to mask the user's input in the UI. Other standard properties like `displayName`, `name`, `required`, `default`, `description`, and `displayOptions` are also included.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/ui-elements.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\tdisplayName: 'Password',\n\tname: 'password',\n\ttype: 'string',\n\trequired: true,\n\ttypeOptions: {\n\t\tpassword: true,\n\t},\n\tdefault: '',\n\tdescription: `User's password`,\n\tdisplayOptions: { // the resources and operations to display this element with\n\t\tshow: {\n\t\t\tresource: [\n\t\t\t\t// comma-separated list of resource names\n\t\t\t],\n\t\t\toperation: [\n\t\t\t\t// comma-separated list of operation names\n\t\t\t]\n\t\t}\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Node Version in n8n Python\nDESCRIPTION: Retrieves the version of the current node being executed. This metadata property is available for use within the Python Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/n8n-metadata.md#2025-04-22_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n_nodeVersion\n```\n\n----------------------------------------\n\nTITLE: Retrieving Full or Single Custom Data - n8n Code Node (Python)\nDESCRIPTION: Shows how to retrieve the entire custom data object or a specific value by key during a workflow execution using the Python Code node in n8n. Provides examples of accessing all key-value pairs (_execution.customData.getAll()) and fetching a single value (_execution.customData.get(key)); result values are strings if set, else None.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/workflows/executions/custom-executions-data.md#2025-04-22_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n# Access the current state of the object during the execution\ncustomData = _execution.customData.getAll();\n\n# Access a specific value set during this execution\ncustomData = _execution.customData.get(\"key\");\n```\n\n----------------------------------------\n\nTITLE: Getting Current Node Run Index in n8n JavaScript\nDESCRIPTION: Indicates how many times the current node has been executed within the workflow run. This is zero-based (0 for the first run, 1 for the second, etc.). This metadata property is available for use within the Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/n8n-metadata.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n$runIndex\n```\n\n----------------------------------------\n\nTITLE: Getting Execution ID in n8n JavaScript\nDESCRIPTION: Retrieves the unique ID of the current workflow execution. This metadata property is available for use within the Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/n8n-metadata.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n$execution.id\n```\n\n----------------------------------------\n\nTITLE: Example Webhook Input Data Structure (JSON)\nDESCRIPTION: Provides an example JSON structure representing data typically received by an n8n Webhook node. This structure includes headers, parameters, query strings, and a body object containing sample user data (name, age, city), often used as input for subsequent nodes.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/expressions.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"headers\": {\n      \"host\": \"n8n.instance.address\",\n      ...\n    },\n    \"params\": {},\n    \"query\": {},\n    \"body\": {\n      \"name\": \"Jim\",\n      \"age\": 30,\n      \"city\": \"New York\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Worker Concurrency\nDESCRIPTION: Command to set the number of parallel jobs a worker can run. The default value is 10, and n8n recommends setting it to 5 or higher to avoid database connection pool exhaustion.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/scaling/queue-mode.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nn8n worker --concurrency=5\n```\n\n----------------------------------------\n\nTITLE: Applying Kubernetes Manifests for n8n Deployment\nDESCRIPTION: Shell command to apply all Kubernetes manifest files in the current directory to set up the n8n deployment.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/azure.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f .\n```\n\n----------------------------------------\n\nTITLE: Specifying Light/Dark Mode Node Icons in n8n (JavaScript)\nDESCRIPTION: This configuration snippet illustrates defining different icons for light and dark modes for an n8n node within its base file. The `icon` parameter accepts an object with `light` and `dark` properties. Each property specifies the path to the respective icon file (e.g., an SVG) prefixed with `file:`, allowing for mode-specific visuals in the n8n UI.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/node-base-files/standard-parameters.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nicon: { \n  light: 'file:exampleNodeIcon.svg', \n  dark: 'file:exampleNodeIcon.dark.svg' \n}\n```\n\n----------------------------------------\n\nTITLE: Checking Workflow Active Status in n8n JavaScript\nDESCRIPTION: Indicates whether the current workflow is active (`true`) or inactive (`false`). This metadata property is available for use within the Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/n8n-metadata.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n$workflow.active\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for S3 External Storage in n8n\nDESCRIPTION: Shell commands to set the required environment variables for configuring S3 external storage in n8n. These include S3 host, bucket name, region, and access credentials.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/scaling/external-storage.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nexport N8N_EXTERNAL_STORAGE_S3_HOST=... # example: s3.us-east-1.amazonaws.com\nexport N8N_EXTERNAL_STORAGE_S3_BUCKET_NAME=...\nexport N8N_EXTERNAL_STORAGE_S3_BUCKET_REGION=...\nexport N8N_EXTERNAL_STORAGE_S3_ACCESS_KEY=...\nexport N8N_EXTERNAL_STORAGE_S3_ACCESS_SECRET=...\n```\n\n----------------------------------------\n\nTITLE: Enabling Prometheus Metrics in n8n using Environment Variable\nDESCRIPTION: This snippet shows how to enable the Prometheus metrics endpoint in n8n by setting the N8N_METRICS environment variable to true.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/configuration-examples/prometheus.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport N8N_METRICS=true\n```\n\n----------------------------------------\n\nTITLE: Getting Previous Node Name in n8n JavaScript\nDESCRIPTION: Retrieves the name of the node from which the current input originated. Note: When used after a Merge node, this always refers to the node connected to the first input connector. This metadata property is available for use within the Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/n8n-metadata.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n$prevNode.name\n```\n\n----------------------------------------\n\nTITLE: Finding Trello List ID Instructions\nDESCRIPTION: Step-by-step instructions for locating a Trello list ID by viewing a card's JSON data\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.trello.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Open the Trello board that contains the list.\n2. If the list doesn't have any cards, add a card to the list.\n3. Open the card, add `.json` at the end of the URL, and press enter.\n4. In the JSON file, you will see a field called `idList`.\n5. Copy the contents of the `idList`field and paste it in the ***List ID** field in n8n.\n```\n\n----------------------------------------\n\nTITLE: Accessing Node Version in Execute Function\nDESCRIPTION: Shows how to access the node version number in the execute function of a node. This is part of the new node versioning feature added in version 0.175.0.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/release-notes/0-x.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst nodeVersion = this.getNode().typeVersion;\n```\n\n----------------------------------------\n\nTITLE: Counting Returned Items in n8n - Python\nDESCRIPTION: This Python snippet performs an equivalent check to determine the number of items from the previous n8n node. It inspects whether the first item's json is empty, returning zero if true, or returns the length of items otherwise. Suitable for use in a Python Script node in n8n, it expects an items list with dictionaries containing a json key. Returns a list with a single dictionary containing the \"results\" key and the count.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/code-node/number-items-last-node.md#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nif len(items[0].json) == 0:\n\treturn [\n\t\t{\n\t\t\t\"json\": {\n\t\t\t\t\"results\": 0,\n\t\t\t}\n\t\t}\n\t]\nelse:\n\treturn [\n\t\t{\n\t\t\t\"json\": {\n\t\t\t\t\"results\": items.length,\n\t\t\t}\n\t\t}\n\t]\n```\n\nLANGUAGE: JSON\nCODE:\n```\n[\n\t{\n\t\t\"results\": 8\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Getting Workflow ID in n8n JavaScript\nDESCRIPTION: Retrieves the unique ID of the current workflow. This metadata property is available for use within the Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/n8n-metadata.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n$workflow.id\n```\n\n----------------------------------------\n\nTITLE: Enabling TheHive 5 Webhook Notifications via API\nDESCRIPTION: This shell command uses `curl` to send a PUT request to the TheHive 5 API, enabling notifications for the previously configured webhook endpoints. It requires replacing `THEHIVE_USERNAME`, `THEHIVE_PASSWORD`, `THEHIVE_URL`, `TESTING_WEBHOOK_NAME`, and `PRODUCTION_WEBHOOK_NAME` with the appropriate values. The command configures TheHive to send any event (`AnyEvent`) to both the testing and production webhook endpoints using basic authentication.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/trigger-nodes/n8n-nodes-base.thehive5trigger.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl -XPUT -uTHEHIVE_USERNAME:THEHIVE_PASSWORD -H 'Content-type: application/json' THEHIVE_URL/api/config/organisation/notification -d '\n{\n\t\"value\": [\n\t\t{\n\t\t\"delegate\": false,\n\t\t\"trigger\": { \"name\": \"AnyEvent\"},\n\t\t\"notifier\": { \"name\": \"webhook\", \"endpoint\": \"TESTING_WEBHOOK_NAME\" }\n\t\t},\n\t\t{\n\t\t\"delegate\": false,\n\t\t\"trigger\": { \"name\": \"AnyEvent\"},\n\t\t\"notifier\": { \"name\": \"webhook\", \"endpoint\": \"PRODUCTION_WEBHOOK_NAME\" }\n\t\t}\n\t]\n}'\n```\n\n----------------------------------------\n\nTITLE: Accessing Static Workflow Data in n8n JavaScript\nDESCRIPTION: Retrieves static workflow data of a specified `type`. Static data doesn't persist during workflow testing; the workflow must be active and triggered to save it. See an [example](/code/cookbook/builtin/get-workflow-static-data.md). This method is available for use within the Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/n8n-metadata.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n$getWorkflowStaticData(type)\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific Version of a Community Node using npm - Shell\nDESCRIPTION: This snippet installs a specific version (e.g., '2.1.0') of a community node with npm. Replace '2.1.0' with your desired version and 'n8n-nodes-nodeName' with the package name. Requires npm and internet connectivity. This is helpful for downgrading if an update introduces issues.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/community-nodes/installation/manual-install.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# Replace 2.1.0 with your version number\nnpm install n8n-nodes-nodeName@2.1.0\n```\n\n----------------------------------------\n\nTITLE: Accessing External Secrets in n8n Python\nDESCRIPTION: Provides access to information about the configured [External secrets](/external-secrets.md). This metadata property is available for use within the Python Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/n8n-metadata.md#2025-04-22_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n_secrets\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for NASA Pics Node in n8n\nDESCRIPTION: This JSON snippet shows the configuration of package.json for the NASA Pics node in n8n. It includes essential details such as the package name, version, description, and n8n-specific configurations.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/declarative-style-node.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"n8n-nodes-nasapics\",\n\t\"version\": \"0.1.0\",\n\t\"description\": \"n8n node to call NASA's APOD and Mars Rover Photo services.\",\n\t\"keywords\": [\n\t\t\"n8n-community-node-package\"\n\t],\n\t\"license\": \"MIT\",\n\t\"homepage\": \"https://n8n.io\",\n\t\"author\": {\n\t\t\"name\": \"Test\",\n\t\t\"email\": \"test@example.com\"\n\t},\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"git+<your-repo-url>\"\n\t},\n\t\"main\": \"index.js\",\n\t\"scripts\": {\n\t},\n\t\"files\": [\n\t\t\"dist\"\n\t],\n\t\"n8n\": {\n\t\t\"n8nNodesApiVersion\": 1,\n\t\t\"credentials\": [\n\t\t\t\"dist/credentials/NasaPicsApi.credentials.js\"\n\t\t],\n\t\t\"nodes\": [\n\t\t\t\"dist/nodes/NasaPics/NasaPics.node.js\"\n\t\t]\n\t},\n\t\"devDependencies\": {\n\t},\n\t\"peerDependencies\": {\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Resource Limits for n8n Pods\nDESCRIPTION: YAML configuration defining memory resource requests and limits for n8n containers in Kubernetes.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/aws.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n…\nresources:\n  requests:\n    memory: \"250Mi\"\n  limits:\n    memory: \"500Mi\"\n…\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Value in JavaScript Expressions\nDESCRIPTION: The $max function returns the highest of the provided numbers. This function is not available in the Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/convenience.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n$max()\n```\n\n----------------------------------------\n\nTITLE: Starting n8n locally\nDESCRIPTION: This command starts the n8n instance locally for testing custom nodes.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/integrations/creating-nodes/testing.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nn8n start\n```\n\n----------------------------------------\n\nTITLE: Example MongoDB JSON Sort Criteria for KoboToolbox Submissions\nDESCRIPTION: An example of sorting criteria in MongoDB JSON format for the KoboToolbox node's Submission > Get Many operation. This example sorts results first by the 'status' field in ascending order (1) and then by '_submission_time' in descending order (-1).\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.kobotoolbox.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n`{\"status\": 1, \"_submission_time\": -1}`\n```\n\n----------------------------------------\n\nTITLE: Upgrading a Community Node to Latest Version using npm - Shell\nDESCRIPTION: This snippet updates a specified community node to the latest available version using npm's update command. Like with install and uninstall, the actual package name should replace 'n8n-nodes-nodeName'. Requires npm and an up-to-date internet connection. Upgrading nodes may introduce breaking changes.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/community-nodes/installation/manual-install.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm update n8n-nodes-nodeName\n```\n\n----------------------------------------\n\nTITLE: Defining External Secrets Update Interval Environment Variable in n8n\nDESCRIPTION: Specifies the environment variable used to set the interval for checking updates to external secrets in a self-hosted n8n instance. The variable is of type Number and defaults to 300 seconds (5 minutes).\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/environment-variables/external-secrets.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable | Type  | Default  | Description |\n| :------- | :---- | :------- | :---------- |\n| `N8N_EXTERNAL_SECRETS_UPDATE_INTERVAL` | Number | `300` (5 minutes) | How often (in seconds) to check for secret updates. |\n```\n\n----------------------------------------\n\nTITLE: Configuring Execution Data Saving with Docker Compose in n8n\nDESCRIPTION: This snippet demonstrates how to set environment variables in a Docker Compose file to control execution data saving in n8n. It includes options for saving error executions, successful executions, node progress, and manual executions.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/scaling/execution-data.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nn8n:\n    environment:\n      - EXECUTIONS_DATA_SAVE_ON_ERROR=all\n      - EXECUTIONS_DATA_SAVE_ON_SUCCESS=none\n      - EXECUTIONS_DATA_SAVE_ON_PROGRESS=true\n      - EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS=false\n```\n\n----------------------------------------\n\nTITLE: Example Output Data from n8n Edit Fields Node (JSON Output Mode)\nDESCRIPTION: This JSON array shows the result of applying the JSON template (defined in the JSON Output field) to the example input data using the Edit Fields (Set) node. Each original input object is merged with the structure defined in the template, including the new keys and values derived from expressions. This assumes the 'Include in Output' option is set to 'All Input Fields'.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.set.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": \"23423532\",\n    \"name\": \"Jay Gatsby\",\n    \"email\": \"gatsby@west-egg.com\",\n    \"notes\": \"Keeps asking about a green light??\",\n    \"country\": \"US\",\n    \"created\": \"1925-04-10\",\n    \"newKey\": \"new value\",\n    \"array\": [\n      23423532,\n      \"Jay Gatsby\"\n    ],\n    \"object\": {\n      \"innerKey1\": \"new value\",\n      \"innerKey2\": \"23423532\",\n      \"innerKey3\": \"Jay Gatsby\"\n    }\n  },\n  {\n    \"id\": \"23423533\",\n    \"name\": \"José Arcadio Buendía\",\n    \"email\": \"jab@macondo.co\",\n    \"notes\": \"Lots of people named after him. Very confusing\",\n    \"country\": \"CO\",\n    \"created\": \"1967-05-05\",\n    \"newKey\": \"new value\",\n    \"array\": [\n      23423533,\n      \"José Arcadio Buendía\"\n    ],\n    \"object\": {\n      \"innerKey1\": \"new value\",\n      \"innerKey2\": \"23423533\",\n      \"innerKey3\": \"José Arcadio Buendía\"\n    }\n  },\n  {\n    \"id\": \"23423534\",\n    \"name\": \"Max Sendak\",\n    \"email\": \"info@in-and-out-of-weeks.org\",\n    \"notes\": \"Keeps rolling his terrible eyes\",\n    \"country\": \"US\",\n    \"created\": \"1963-04-09\",\n    \"newKey\": \"new value\",\n    \"array\": [\n      23423534,\n      \"Max Sendak\"\n    ],\n    \"object\": {\n      \"innerKey1\": \"new value\",\n      \"innerKey2\": \"23423534\",\n      \"innerKey3\": \"Max Sendak\"\n    }\n  },\n  {\n    \"id\": \"23423535\",\n    \"name\": \"Zaphod Beeblebrox\",\n    \"email\": \"captain@heartofgold.com\",\n    \"notes\": \"Felt like I was talking to more than one person\",\n    \"country\": null,\n    \"created\": \"1979-10-12\",\n    \"newKey\": \"new value\",\n    \"array\": [\n      23423535,\n      \"Zaphod Beeblebrox\"\n    ],\n    \"object\": {\n      \"innerKey1\": \"new value\",\n      \"innerKey2\": \"23423535\",\n      \"innerKey3\": \"Zaphod Beeblebrox\"\n    }\n  },\n  {\n    \"id\": \"23423536\",\n    \"name\": \"Edmund Pevensie\",\n    \"email\": \"edmund@narnia.gov\",\n    \"notes\": \"Passionate sailor\",\n    \"country\": \"UK\",\n    \"created\": \"1950-10-16\",\n    \"newKey\": \"new value\",\n    \"array\": [\n      23423536,\n      \"Edmund Pevensie\"\n    ],\n    \"object\": {\n      \"innerKey1\": \"new value\",\n      \"innerKey2\": \"23423536\",\n      \"innerKey3\": \"Edmund Pevensie\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Markdown URL Format for OAuth Callback\nDESCRIPTION: Example URL format for OAuth callback configuration in self-hosted n8n instances.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/formstacktrigger.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://<n8n_url>/rest/oauth2-credential/callback\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Node Locations using Environment Variable in Bash\nDESCRIPTION: This snippet demonstrates how to use the N8N_CUSTOM_EXTENSIONS environment variable to specify additional folders for custom nodes in n8n. Multiple paths can be separated by semicolons.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/configuration-examples/custom-nodes-location.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport N8N_CUSTOM_EXTENSIONS=\"/home/jim/n8n/custom-nodes;/data/n8n/nodes\"\n```\n\n----------------------------------------\n\nTITLE: Starting n8n with tunnel option in Bash\nDESCRIPTION: This command starts n8n with the --tunnel option, which can be used for exposing n8n to the internet securely.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/npm.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nn8n start --tunnel\n```\n\n----------------------------------------\n\nTITLE: Getting Previous Node Name in n8n Python\nDESCRIPTION: Retrieves the name of the node from which the current input originated. Note: When used after a Merge node, this always refers to the node connected to the first input connector. This metadata property is available for use within the Python Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/n8n-metadata.md#2025-04-22_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n_prevNode.name\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Embed Fields with Raw JSON in Discord Node\nDESCRIPTION: Example JSON object for adding custom fields like 'footer' and 'fields' to Discord embeds when using the Raw JSON input method. This allows adding elements not available in the standard UI options.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.discord/common-issues.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"author\": \"My Name\",\n\t\"url\": \"https://discord.js.org\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"name\": \"Regular field title\",\n\t\t\t\"value\": \"Some value here\"\n\t\t}\n\t],\n\t\"footer\": {\n\t\t\"text\": \"Some footer text here\",\n\t\t\"icon_url\": \"https://i.imgur.com/AfFp7pu.png\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Example OAuth Callback URL\nDESCRIPTION: Example of a complete OAuth callback URL for a localhost n8n instance.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/formstacktrigger.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://localhost:5678/rest/oauth2-credential/callback\n```\n\n----------------------------------------\n\nTITLE: Setting Credentials Overwrite Endpoint Environment Variable in Shell\nDESCRIPTION: Sets the CREDENTIALS_OVERWRITE_ENDPOINT environment variable to 'send-credentials' to activate the endpoint for credential overwrites.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/embed/configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport CREDENTIALS_OVERWRITE_ENDPOINT=send-credentials\n```\n\n----------------------------------------\n\nTITLE: Creating Node Directory and Navigating - Shell\nDESCRIPTION: This snippet creates the '~/.n8n/nodes' directory (if it does not exist) and changes the working directory to it. This organizes custom/community node installations for n8n. The commands are standard in shell environments and require no additional dependencies. Input: none. Output: working directory set to '~/.n8n/nodes'.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/community-nodes/installation/manual-install.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmkdir ~/.n8n/nodes\ncd ~/.n8n/nodes\n```\n\n----------------------------------------\n\nTITLE: Getting Execution Cancel Signal in n8n AI Workflow\nDESCRIPTION: Method to obtain a signal for stopping the execution of a function when the workflow stops. Useful for custom chains or agents in n8n AI nodes.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/integrations/builtin/cluster-nodes/langchain-root-nodes/langchaincode/builtin-methods.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n`this.getExecutionCancelSignal()`\n```\n\n----------------------------------------\n\nTITLE: Using Nullish Coalescing Operator for Defaults in n8n JavaScript Expressions\nDESCRIPTION: This n8n expression demonstrates the use of the JavaScript nullish coalescing operator (`??`) to provide a default value. It returns the value of the variable `$x` if it is not `null` or `undefined`. If `$x` is `null` or `undefined`, it returns the specified fallback string \"default value\".\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/expressions/check-incoming-data.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{{ $x ?? \"default value\" }}\n```\n\n----------------------------------------\n\nTITLE: Cloning n8n Kubernetes Configuration Repository\nDESCRIPTION: Commands to clone the n8n Kubernetes hosting configuration repository and change to the correct directory.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/azure.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/n8n-io/n8n-kubernetes-hosting.git -b azure\n```\n\nLANGUAGE: shell\nCODE:\n```\ncd azure\n```\n\n----------------------------------------\n\nTITLE: Cloning n8n Kubernetes Configuration Repository\nDESCRIPTION: Git commands to clone the n8n Kubernetes hosting configuration repository and change to the repository directory.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/aws.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/n8n-io/n8n-kubernetes-hosting.git -b aws\n```\n\nLANGUAGE: shell\nCODE:\n```\ncd n8n-kubernetes-hosting\n```\n\n----------------------------------------\n\nTITLE: Applying Kubernetes Namespace Manifest\nDESCRIPTION: Command to apply the namespace manifest file separately in case of namespace-related errors.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/google-cloud.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f namespace.yaml\n```\n\n----------------------------------------\n\nTITLE: Simplified $fromAI() Function Call in JavaScript\nDESCRIPTION: Demonstrates a simplified version of the $fromAI() function call when optional parameters are not needed.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/advanced-ai/examples/using-the-fromai-function.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n$fromAI(\"name\")\n```\n\n----------------------------------------\n\nTITLE: No Prompt Error Example\nDESCRIPTION: Example of error handling in Basic LLM Chain node when prompt is not specified or invalid. Shows two common scenarios and their solutions.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainllm.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### No prompt specified error\n\nThis error displays when the **Prompt** is empty or invalid.\n\nYou might see this error in one of two scenarios:\n\n1. When you've set the **Prompt** to **Define below** and haven't entered anything in the **Text** field.\n    * To resolve, enter a valid prompt in the **Text** field.\n2. When you've set the **Prompt** to **Connected Chat Trigger Node** and the incoming data has no field called `chatInput`. \n    * The node expects the `chatInput` field. If your previous node doesn't have this field, add an [Edit Fields (Set)] node to edit an incoming field name to `chatInput`.\n```\n\n----------------------------------------\n\nTITLE: Getting Previous Node Output Index in n8n Python\nDESCRIPTION: Retrieves the index of the output connector from the previous node that the current input came from. Useful when the previous node has multiple outputs (e.g., If, Switch). Note: When used after a Merge node, this always refers to the first input connector. This metadata property is available for use within the Python Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/n8n-metadata.md#2025-04-22_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n_prevNode.outputIndex\n```\n\n----------------------------------------\n\nTITLE: Database Environment Variable Configuration Table\nDESCRIPTION: Core database configuration variables that define the database type and table prefix settings.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/environment-variables/database.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable | Type  | Default  | Description |\n| :------- | :---- | :------- | :---------- |\n| `DB_TYPE`<br>/`_FILE` | Enum string:<br> `sqlite`, `postgresdb` | `sqlite` | The database to use. |\n| `DB_TABLE_PREFIX` | * | - | Prefix to use for table names. |\n```\n\n----------------------------------------\n\nTITLE: Sample Webhook JSON Payload\nDESCRIPTION: Provides a representative example of JSON data returned from a webhook node in n8n for use in subsequent JMESPath query examples. The sample contains nested objects and arrays to demonstrate projections and multiselects. No external dependencies. Expected to be consumed by the $jmespath or _jmespath helpers.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/jmespath.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n  {\n    \"headers\": {\n      \"host\": \"n8n.instance.address\",\n      ...\n    },\n    \"params\": {},\n    \"query\": {},\n    \"body\": {\n      \"people\": [\n        {\n          \"first\": \"James\",\n          \"last\": \"Green\"\n        },\n        {\n          \"first\": \"Jacob\",\n          \"last\": \"Jones\"\n        },\n        {\n          \"first\": \"Jayden\",\n          \"last\": \"Smith\"\n        }\n      ],\n      \"dogs\": {\n        \"Fido\": {\n          \"color\": \"brown\",\n          \"age\": 7\n        },\n        \"Spot\": {\n          \"color\": \"black and white\",\n          \"age\": 5\n        }\n      }\n    }\n  }\n]\n\n```\n\n----------------------------------------\n\nTITLE: Checking Node Execution Status in n8n JavaScript\nDESCRIPTION: Checks whether a specific node, identified by `<node-name>`, has already executed in the current workflow run. This method is available for use within the Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/n8n-metadata.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n$(\"<node-name>\").isExecuted\n```\n\n----------------------------------------\n\nTITLE: Configuring Caddy Reverse Proxy\nDESCRIPTION: Steps to edit the Caddy configuration file (Caddyfile) to set up the reverse proxy for n8n. This configuration tells Caddy which domain to serve and how to proxy requests to n8n.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/digital-ocean.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnano caddy_config/Caddyfile\n```\n\nLANGUAGE: text\nCODE:\n```\nautomate.example.com {\n    reverse_proxy n8n:5678 {\n      flush_interval -1\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting n8n Kubernetes Resources\nDESCRIPTION: Shell command to remove all resources created by the Kubernetes manifests for n8n.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/azure.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete -f .\n```\n\n----------------------------------------\n\nTITLE: Creating custom directory for n8n local installation\nDESCRIPTION: These commands create a custom directory in the local n8n installation and initialize an npm project in it. This is a troubleshooting step if the custom directory doesn't exist.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/integrations/creating-nodes/testing.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# In ~/.n8n directory run\nmkdir custom \ncd custom \nnpm init\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies for n8n Node (Shell)\nDESCRIPTION: This shell command installs all Node.js dependencies specified in the starter repository's package.json using npm. It must be run from the root of the cloned n8n node project to provide access to TypeScript, n8n core modules, and utilities required for development and execution. Run this command after setting up your project files and directory structure.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/programmatic-style-node.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Installing specific n8n version with npm in Bash\nDESCRIPTION: This command demonstrates how to install a specific version of n8n (0.126.1 in this case) using npm.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/npm.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g n8n@0.126.1\n```\n\n----------------------------------------\n\nTITLE: Initializing Data for Loop Over Items Node in n8n using JavaScript\nDESCRIPTION: This snippet is intended to be used within the n8n Code node as part of a workflow. It initializes and returns an array of two objects, each with a 'url' property, which serve as input items for subsequent nodes. The snippet has no explicit dependencies and is compatible with the standard n8n JavaScript runtime for Code nodes. Inputs: none; Outputs: array of items with 'json.url' for further processing. No external libraries required.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.splitinbatches.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nreturn [\n\t{\n\t\tjson: {\n\t\t\turl: 'https://medium.com/feed/n8n-io',\n\t\t}\n\t},\n\t{\n\t\tjson: {\n\t\t\turl: 'https://dev.to/feed/n8n',\n\t\t}\n\t}\n];\n```\n\n----------------------------------------\n\nTITLE: JMESPath Method JavaScript Implementation\nDESCRIPTION: The $jmespath() method allows performing searches on JSON objects using JMESPath syntax. This method is available in the Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/jmespath.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n$jmespath()\n```\n\n----------------------------------------\n\nTITLE: Defining a Color Picker Input Field in n8n Node UI (TypeScript)\nDESCRIPTION: This configuration defines a color input field using `type: 'color'`, providing a color selector UI component. The `default` property can set an initial color value. Includes standard properties like `displayName`, `name`, and `displayOptions`.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/ui-elements.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\tdisplayName: 'Background Color',\n\tname: 'backgroundColor',\n\ttype: 'color',\n\tdefault: '', // Initially selected color\n\tdisplayOptions: { // the resources and operations to display this element with\n\t\tshow: {\n\t\t\tresource: [\n\t\t\t\t// comma-separated list of resource names\n\t\t\t],\n\t\t\toperation: [\n\t\t\t\t// comma-separated list of operation names\n\t\t\t]\n\t\t}\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking JMESPath Search Helper in n8n (Python)\nDESCRIPTION: Shows how to use n8n's _jmespath helper in Python to run JMESPath queries over input JSON. Use in Python Code node; arguments are the JSON object and a query string in the JMESPath syntax. Returns query result for use later in the workflow.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/jmespath.md#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n_jmespath(object, searchString)\n```\n\n----------------------------------------\n\nTITLE: Setting Base URL Environment Variable in n8n\nDESCRIPTION: Sets the VUE_APP_URL_BASE_API environment variable to define the base URL for n8n's front end to access the back end REST API. Requires manual build of n8n-editor-ui package and cannot be used with default n8n Docker image where the default setting is '/'.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/configuration-examples/base-url.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport VUE_APP_URL_BASE_API=https://n8n.example.com/\n```\n\n----------------------------------------\n\nTITLE: Example Output for Get Time Between Dates (ISO String)\nDESCRIPTION: Illustrates the output format when the 'Output as ISO String' option is turned on in the 'Get Time Between Dates' operation. The time difference is returned as a single ISO 8601 duration string (e.g., P1Y3M13D represents 1 year, 3 months, and 13 days).\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.datetime.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nP1Y3M13D\n```\n\n----------------------------------------\n\nTITLE: Importing Required Interfaces and Types from n8n (TypeScript)\nDESCRIPTION: This TypeScript snippet imports required interfaces and types from the n8n-core and n8n-workflow packages, as well as the OptionsWithUri type from the request module. These imports are prerequisites for implementing n8n custom nodes in TypeScript, providing strong typing for node execution, parameter definitions, API calls, and data contract between nodes. Ensure these dependencies are available in your package.json.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/programmatic-style-node.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n\tIExecuteFunctions,\n} from 'n8n-core';\n\nimport {\n\tIDataObject,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\n\nimport {\n\tOptionsWithUri,\n} from 'request';\n```\n\n----------------------------------------\n\nTITLE: Example MongoDB JSON Query for KoboToolbox Submissions\nDESCRIPTION: An example of a query filter written in MongoDB's JSON query format for use with the KoboToolbox node's Submission > Get Many operation. This specific query filters submissions where the 'status' field is 'success' and the '_submission_time' is before November 1st, 2021, 01:02:03.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.kobotoolbox.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n`{\"status\": \"success\", \"_submission_time\": {\"$lt\": \"2021-11-01T01:02:03\"}}`\n```\n\n----------------------------------------\n\nTITLE: Uninstalling a Community Node Before Version-Specific Install - Shell\nDESCRIPTION: This snippet is used to remove an existing community node before installing a specific version of it. This step ensures that there is no version conflict when reinstalling.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/community-nodes/installation/manual-install.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm uninstall n8n-nodes-nodeName\n```\n\n----------------------------------------\n\nTITLE: Getting Execution Mode in n8n Python\nDESCRIPTION: Indicates whether the execution was triggered automatically (`production`) or by manually running the workflow (`test`). This metadata property is available for use within the Python Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/n8n-metadata.md#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n_execution.mode\n```\n\n----------------------------------------\n\nTITLE: Form.io Domain Example\nDESCRIPTION: Example showing how to format the self-hosted domain URL for Form.io credentials. The domain should be extracted from the full form URL.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/formiotrigger.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://yourserver.com/yourproject/manage/view -> https://yourserver.com\n```\n\n----------------------------------------\n\nTITLE: Example Output for Get Time Between Dates (Units)\nDESCRIPTION: Illustrates the output format when the 'Output as ISO String' option is turned off in the 'Get Time Between Dates' operation. The time difference is returned as an object where each selected unit (e.g., years, months, days) has its own key-value pair under the specified 'Output Field Name' (here, 'timeDifference').\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.datetime.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntimeDifference\nyears : 1\nmonths : 3\ndays : 13\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Environment Variable Configuration Table\nDESCRIPTION: Comprehensive list of PostgreSQL-specific environment variables including connection, security, and performance settings.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/environment-variables/database.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable | Type  | Default  | Description |\n| :------- | :---- | :------- | :---------- |\n| `DB_POSTGRESDB_DATABASE`<br>/`_FILE` | String | `n8n` | The name of the PostgreSQL database. |\n| `DB_POSTGRESDB_HOST`<br>/`_FILE` | String | `localhost` | The PostgreSQL host. |\n| `DB_POSTGRESDB_PORT`<br>/`_FILE` | Number | `5432` | The PostgreSQL port. |\n| `DB_POSTGRESDB_USER`<br>/`_FILE` | String | `postgres` | The PostgreSQL user. |\n| `DB_POSTGRESDB_PASSWORD`<br>/`_FILE` | String | - | The PostgreSQL password. |\n| `DB_POSTGRESDB_POOL_SIZE`<br>/`_FILE` | Number | `2` | Control how many parallel open Postgres connections n8n should have. Increasing it may help with resource utilization, but too many connections may degrade performance. |\n| `DB_POSTGRESDB_CONNECTION_TIMEOUT`<br>/`_FILE` | Number | `20000` | Postgres connection timeout (ms).\n| `DB_POSTGRESDB_SCHEMA`<br>/`_FILE` | String | `public` | The PostgreSQL schema. |\n| `DB_POSTGRESDB_SSL_ENABLED`<br>/`_FILE` | Boolean | `false` | Whether to enable SSL. Automatically enabled if `DB_POSTGRESDB_SSL_CA`, `DB_POSTGRESDB_SSL_CERT` or `DB_POSTGRESDB_SSL_KEY` is defined. |\n| `DB_POSTGRESDB_SSL_CA`<br>/`_FILE` | String | - | The PostgreSQL SSL certificate authority. |\n| `DB_POSTGRESDB_SSL_CERT`<br>/`_FILE` | String | - | The PostgreSQL SSL certificate. |\n| `DB_POSTGRESDB_SSL_KEY`<br>/`_FILE` | String | - | The PostgreSQL SSL key. |\n| `DB_POSTGRESDB_SSL_REJECT_UNAUTHORIZED`<br>/`_FILE` | Boolean | `true` | If n8n should reject unauthorized SSL connections (true) or not (false). |\n```\n\n----------------------------------------\n\nTITLE: Accessing Date Variables in Code Node (n8n Variables, Python)\nDESCRIPTION: Illustrates using the _now variable (as exposed by n8n in Python code nodes) to access the current timestamp. Python's _now variable provides a string representation of the current time, similar to JavaScript's $now but with limited Luxon operations. The code shows retrieving the timestamp and formatting it in a string. No Luxon operations are possible in Python.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/luxon.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n_now\n# n8n displays <ISO formatted timestamp>\n# For example 2022-03-09T14:00:25.058+00:00\nrightNow = \"Today's date is \" + str(_now)\n# n8n displays \"Today's date is <unix timestamp>\"\n# For example \"Today's date is 1646834498755\"\n```\n\n----------------------------------------\n\nTITLE: Adding Optional Fields as a Collection (TypeScript)\nDESCRIPTION: This snippet adds an 'Additional Fields' collection parameter to the node's UI, enabling users to input optional fields such as first name and last name. This collection appears only when creating a contact and allows for clean extension of the API input payload. The approach helps avoid cluttering the UI with too many parameters, presenting them as an expandable group.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/programmatic-style-node.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\tdisplayName: 'Additional Fields',\n\tname: 'additionalFields',\n\ttype: 'collection',\n\tplaceholder: 'Add Field',\n\tdefault: {},\n\tdisplayOptions: {\n\t\tshow: {\n\t\t\tresource: [\n\t\t\t\t'contact',\n\t\t\t],\n\t\t\toperation: [\n\t\t\t\t'create',\n\t\t\t],\n\t\t},\n\t},\n\toptions: [\n\t\t{\n\t\t\tdisplayName: 'First Name',\n\t\t\tname: 'firstName',\n\t\t\ttype: 'string',\n\t\t\tdefault: '',\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Last Name',\n\t\t\tname: 'lastName',\n\t\t\ttype: 'string',\n\t\t\tdefault: '',\n\t\t},\n\t],\n},\n```\n\n----------------------------------------\n\nTITLE: Importing Workflow Templates in n8n\nDESCRIPTION: Shows how to directly import templates from the n8n Workflows page by appending a specific URL pattern to your instance base URL, introduced in version 0.126.0.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/release-notes/0-x.md#2025-04-22_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\nlocalhost:5678/workflows/templates/<templateId>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of $fromAI() Function in JavaScript\nDESCRIPTION: Demonstrates the simplest way to use the $fromAI() function to dynamically populate a parameter field with an email address.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/advanced-ai/examples/using-the-fromai-function.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{{ $fromAI('email') }}\n```\n\n----------------------------------------\n\nTITLE: Setting Webhook URL Environment Variable\nDESCRIPTION: Command to set the WEBHOOK_URL environment variable with the ngrok URL for local development setup.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/getresponse.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nexport WEBHOOK_URL=<YOUR-NGROK-URL>\n```\n\n----------------------------------------\n\nTITLE: Extracting Data from CSV File in n8n\nDESCRIPTION: Example JSON output from the Extract From File node when processing a CSV file. The node converts each row of the CSV into a JSON object with numbered properties representing each column in the row.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.extractfromfile.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"row\": {\n  \"0\": \"apple\",\n  \"1\": \"1\",\n  \"2\": \"2\",\n  \"3\": \"3\"\n  }\n  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Heroku Addons and Build Process\nDESCRIPTION: A YAML configuration for Heroku (heroku.yml) that defines the PostgreSQL addon and specifies the Docker-based build process for the n8n application.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/heroku.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsetup:\n  addons:\n    - plan: heroku-postgresql\nbuild:\n  docker:\n    web: Dockerfile\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic String Input Field in n8n Node UI (TypeScript)\nDESCRIPTION: This configuration object defines a standard string input field for an n8n node UI. It includes properties like `displayName` (UI label), `name` (internal reference), `type` ('string'), `required` (validation), `default` (initial value), `description` (tooltip), and `displayOptions` to control visibility based on resource/operation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/ui-elements.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\tdisplayName: Name, // The value the user sees in the UI\n\tname: name, // The name used to reference the element UI within the code\n\ttype: string,\n\trequired: true, // Whether the field is required or not\n\tdefault: 'n8n',\n\tdescription: 'The name of the user',\n\tdisplayOptions: { // the resources and operations to display this element with\n\t\tshow: {\n\t\t\tresource: [\n\t\t\t\t// comma-separated list of resource names\n\t\t\t],\n\t\t\toperation: [\n\t\t\t\t// comma-separated list of operation names\n\t\t\t]\n\t\t}\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Node Run Index in n8n Python\nDESCRIPTION: Indicates how many times the current node has been executed within the workflow run. This is zero-based (0 for the first run, 1 for the second, etc.). This metadata property is available for use within the Python Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/n8n-metadata.md#2025-04-22_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n_runIndex\n```\n\n----------------------------------------\n\nTITLE: Installing n8n 'next' version with npm in Bash\nDESCRIPTION: This command installs the 'next' version of n8n using npm, which may include pre-release features.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/npm.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g n8n@next\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Value in JavaScript Expressions\nDESCRIPTION: The $min function returns the lowest of the provided numbers. This function is not available in the Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/convenience.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n$min()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Deduplication by Latest Date in n8n - Markdown\nDESCRIPTION: This Markdown table set demonstrates deduplication behavior in n8n workflows where the Remove Duplicates node is set to retain only items with the most recent \\'last_updated\\' date. It visualizes which entries are kept and which are discarded, serving as a reference for correct node configuration and typical output in n8n documentation. There are no code dependencies, and data is fixed for explanatory use.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.removeduplicates/templates-and-examples.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| **id** | **name**      | **job**           | **last_updated**         |\\n|--------|---------------|-------------------|--------------------------|\\n| 0      | Madonna       | Pop star          | 2024-10-17T17:11:38.493Z |\\n| 1      | Taylor Swift  | Pop star          | 2024-09-20T10:12:43.493Z |\\n| 1      | Taylor Swift  | Pop star          | 2024-09-20T10:12:43.493Z |\\n| 2      | Ed Sheeran    | Singer-songwriter | 2024-10-05T08:30:59.493Z |\\n| 2      | Ed Sheeran    | Singer-songwriter | 2024-10-05T08:30:59.493Z |\\n| 3      | Adele         | Singer-songwriter | 2024-10-07T14:15:59.493Z |\\n| 3      | Adele         | Singer-songwriter | 2024-10-07T14:15:59.493Z |\\n| 4      | Bruno Mars    | Singer-songwriter | 2024-08-25T17:45:12.493Z |\\n| 5      | Billie Eilish | Singer-songwriter | 2024-09-10T09:30:12.493Z |\\n| 6      | Katy Perry    | Pop star          | 2024-10-08T12:30:45.493Z |\\n| 7      | Lady Gaga     | Pop star          | 2024-09-15T14:45:30.493Z |\\n| 8      | Rihanna       | Pop star          | 2024-10-01T11:50:22.493Z |\\n| 9      | Tom Hanks     | Actor             | 2024-10-17T13:58:31.493Z |\\n| 15     | Bob Dylan     | Folk singer       | 2024-09-24T08:03:16.493Z |\n```\n\nLANGUAGE: markdown\nCODE:\n```\n| **id** | **name**      | **job**           | **last_updated**         |\\n|--------|---------------|-------------------|--------------------------|\\n| 11     | Kylie Minogue | Pop star          | 2024-10-24T08:03:16.493Z |\n```\n\nLANGUAGE: markdown\nCODE:\n```\n| **id** | **name**      | **job**           | **last_updated**         |\\n|--------|---------------|-------------------|--------------------------|\\n| 10     | Harry Nilsson | Singer-songwriter | 2020-10-17T17:11:38.493Z |\\n| 0      | Madonna       | Pop star          | 2024-10-17T17:11:38.493Z |\\n| 1      | Taylor Swift  | Pop star          | 2024-09-20T10:12:43.493Z |\\n| 1      | Taylor Swift  | Pop star          | 2024-09-20T10:12:43.493Z |\\n| 2      | Ed Sheeran    | Singer-songwriter | 2024-10-05T08:30:59.493Z |\\n| 2      | Ed Sheeran    | Singer-songwriter | 2024-10-05T08:30:59.493Z |\\n| 3      | Adele         | Singer-songwriter | 2024-10-07T14:15:59.493Z |\\n| 3      | Adele         | Singer-songwriter | 2024-10-07T14:15:59.493Z |\\n| 4      | Bruno Mars    | Singer-songwriter | 2024-08-25T17:45:12.493Z |\\n| 5      | Billie Eilish | Singer-songwriter | 2024-09-10T09:30:12.493Z |\\n| 6      | Katy Perry    | Pop star          | 2024-10-08T12:30:45.493Z |\\n| 7      | Lady Gaga     | Pop star          | 2024-09-15T14:45:30.493Z |\\n| 8      | Rihanna       | Pop star          | 2024-10-01T11:50:22.493Z |\\n| 9      | Tom Hanks     | Actor             | 2024-10-17T13:58:31.493Z |\\n| 15     | Bob Dylan     | Folk singer       | 2024-09-24T08:03:16.493Z |\n```\n\n----------------------------------------\n\nTITLE: Creating New Workflow\nDESCRIPTION: POST request to create a new workflow using the modified template JSON.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/embed/managing-workflows.md#2025-04-22_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST https://<n8n-domain>/rest/workflows/\n```\n\n----------------------------------------\n\nTITLE: Specifying Column Data Types in CrateDB Node\nDESCRIPTION: Demonstrates how to specify data types for columns in the CrateDB node by appending ':type' to column names. This example shows setting 'id' as an integer type and 'name' as text type in the Columns field.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.cratedb.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nid:int,name:text\n```\n\n----------------------------------------\n\nTITLE: Applying Object Projection with JMESPath in n8n Code Node (Python)\nDESCRIPTION: Gets all dog ages using a JMESPath object projection via Python Code node in n8n. Uses _jmespath on _json.body.dogs with '*.age'. Returns a dictionary with 'dogsAges' as key and age list as value.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/jmespath.md#2025-04-22_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\ndogsAges = _jmespath(_json.body.dogs, \"*.age\")\nreturn {\"dogsAges\": dogsAges}\n\"\"\"\nReturns:\n[\n\t{\n\t\t\"dogsAges\": [\n\t\t\t7,\n\t\t\t5\n\t\t]\n\t}\n]\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Querying Shirt Data with Static 'IN' Clause - Postgres - SQL\nDESCRIPTION: This SQL snippet retrieves the color and shirt_size from the shirts table for rows where shirt_size matches one of the statically provided values ('small', 'medium', 'large'). It demonstrates a basic use of the IN construct without any parameterization or dynamic expansion. No external dependencies are required. The inputs are hardcoded for demonstration; in n8n this pattern can be adapted with dynamic expressions.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.postgres/common-issues.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT color, shirt_size FROM shirts WHERE shirt_size IN ('small', 'medium', 'large');\n```\n\n----------------------------------------\n\nTITLE: Combining Static Text with $fromAI() in JavaScript\nDESCRIPTION: Shows how to combine static text with a dynamically generated value from the $fromAI() function, such as creating an email subject line.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/advanced-ai/examples/using-the-fromai-function.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nGenerated by AI: {{ $fromAI(\"subject\") }}\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Table in Markdown\nDESCRIPTION: Markdown table defining license-related environment variables for n8n, including their types, default values, and descriptions. Covers variables for controlling license activation, usage page visibility, auto-renewal settings, and proxy configuration.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/environment-variables/licenses.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable | Type  | Default  | Description |\n| :------- | :---- | :------- | :---------- |\n| `N8N_HIDE_USAGE_PAGE` | boolean | `false` | Hide the usage and plans page in the app. |\n| `N8N_LICENSE_ACTIVATION_KEY` | String | `''` | Activation key to initialize license. Not applicable if the n8n instance was already activated. |\n| `N8N_LICENSE_AUTO_RENEW_ENABLED` | Boolean | `true` | Enables (true) or disables (false) autorenewal for licenses. <br>If disabled, you need to manually renew the license every 10 days by navigating to **Settings** > **Usage and plan**, and pressing `F5`. Failure to renew the license will disable all licensed features. |\n| `N8N_LICENSE_DETACH_FLOATING_ON_SHUTDOWN` | Boolean | `true` | Controls whether the instance releases [floating entitlements](/glossary.md#entitlement-n8n) back to the pool upon shutdown. Set to `true` to allow other instances to reuse the entitlements, or `false` to retain them. <br> For production instances that must always keep their licensed features, set this to `false`. |\n| `N8N_LICENSE_SERVER_URL` | String | `http://license.n8n.io/v1` | Server URL to retrieve license. |\n| `N8N_LICENSE_TENANT_ID` | Number | `1` | Tenant ID associated with the license. Only set this variable if explicitly instructed by n8n. |\n| `https_proxy_license_server` | String | `https://user:pass@proxy:port` | Proxy server URL for HTTPS requests to retrieve license. This variable name needs to be lowercase. |\n```\n\n----------------------------------------\n\nTITLE: Discord API URL for HTTP Request Alternative\nDESCRIPTION: The Discord API endpoint URL for sending messages to a specific channel using the HTTP Request node. This can be used as an alternative when experiencing issues with the Discord node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.discord/common-issues.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://discord.com/api/v10/channels/<CHANNEL_ID>/messages\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Option for SendGrid Contact (TypeScript)\nDESCRIPTION: This snippet defines a resource selection property in the node's properties array, specifying 'Contact' as the target SendGrid API resource. The configuration utilizes the 'options' type so users select the resource from a dropdown. The resource parameter is required, and its value ('contact') is used to determine API logic in subsequent steps.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/programmatic-style-node.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\tdisplayName: 'Resource',\n\tname: 'resource',\n\ttype: 'options',\n\toptions: [\n\t\t{\n\t\t\tname: 'Contact',\n\t\t\tvalue: 'contact',\n\t\t},\n\t],\n\tdefault: 'contact',\n\tnoDataExpression: true,\n\trequired: true,\n\tdescription: 'Create a new contact',\n},\n```\n\n----------------------------------------\n\nTITLE: Evaluating Expressions in Python\nDESCRIPTION: The _evaluateExpression method in Python evaluates a string as an expression. It takes an expression string and an optional item index as parameters. If no item index is provided, it uses data from item 0 in the Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/convenience.md#2025-04-22_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n_evaluateExpression(expression: string, itemIndex?: number)\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Extraction in n8n\nDESCRIPTION: Set up parameters for extracting content from HTML sources, including specifying the source data, CSS selectors, and return values. This snippet demonstrates the structure of the extraction configuration.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.html.md#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"sourceData\": \"JSON\",\n  \"jsonProperty\": \"htmlContent\",\n  \"extractionValues\": [\n    {\n      \"key\": \"title\",\n      \"cssSelector\": \"h1\",\n      \"returnValue\": \"Text\"\n    },\n    {\n      \"key\": \"links\",\n      \"cssSelector\": \"a\",\n      \"returnValue\": \"Attribute\",\n      \"attribute\": \"href\",\n      \"returnArray\": true\n    }\n  ],\n  \"trimValues\": true,\n  \"cleanUpText\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting npm Environment Variables via Command Line\nDESCRIPTION: Example of setting environment variables using export command in terminal for npm installations\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/configuration-methods.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport <variable>=<value>\n```\n\n----------------------------------------\n\nTITLE: Example Gmail Trigger 401 Unauthorized Error (JSON)\nDESCRIPTION: Displays the typical \"401 unauthorized_client\" error message received from Google APIs when the n8n Gmail Trigger node encounters authorization issues. This usually stems from incorrect credential configuration (OAuth2 or Service Account) or insufficient permissions/scopes for the Gmail API.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/trigger-nodes/n8n-nodes-base.gmailtrigger/common-issues.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n401 - {\"error\":\"unauthorized_client\",\"error_description\":\"Client is unauthorized to retrieve access tokens using this method, or client not authorized for any of the scopes requested.\"}\n```\n\n----------------------------------------\n\nTITLE: Applying Kubernetes Manifests\nDESCRIPTION: Command to apply all Kubernetes manifest files in the current directory to the cluster.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/google-cloud.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f .\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook Endpoints in TheHive application.conf\nDESCRIPTION: This configuration snippet defines webhook endpoints within TheHive's `application.conf` file. It sets up named endpoints (for testing and production) that point to n8n webhook URLs, specifying which TheHive organizations should trigger these webhooks. Replace placeholders like `TESTING_WEBHOOK_NAME`, `TESTING_WEBHOOK_URL`, and `ORGANIZATION_NAME` with your specific values.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/trigger-nodes/n8n-nodes-base.thehivetrigger.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nnotification.webhook.endpoints = [\n\t{\n\t\tname: TESTING_WEBHOOK_NAME\n\t\turl: TESTING_WEBHOOK_URL\n\t\tversion: 0\n\t\twsConfig: {}\n\t\tincludedTheHiveOrganisations: [\"ORGANIZATION_NAME\"]\n\t\texcludedTheHiveOrganisations: []\n\t},\n\t{\n\t\tname: PRODUCTION_WEBHOOK_NAME\n\t\turl: PRODUCTION_WEBHOOK_URL\n\t\tversion: 0\n\t\twsConfig: {}\n\t\tincludedTheHiveOrganisations: [\"ORGANIZATION_NAME\"]\n\t\texcludedTheHiveOrganisations: []\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Variables Using n8n API Endpoint\nDESCRIPTION: Example of using a POST request to the /source-control/pull endpoint to set or update variable values in n8n. The API call supports creating new variables or updating existing ones, with the ability to force updates using the 'force' parameter.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/source-control-environments/using/manage-variables.md#2025-04-22_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl --location '<YOUR-INSTANCE-URL>/api/v1/source-control/pull' \\\n\t--header 'Content-Type: application/json' \\\n\t--header 'X-N8N-API-KEY: <YOUR-API-KEY>' \\\n\t--data '{\n\t\"force\": true,\n\t\"variables\": { \n\t\t\t\"key1\": \"value1\",\n\t\t\t\"key2\": \"value2\"\n\t}\n\t}'\n```\n\n----------------------------------------\n\nTITLE: Converting Arrays to JSON Format with AI Transform Node\nDESCRIPTION: Example prompt for the AI Transform node to convert a 'languages' array into JSON key-value pairs that can be properly inserted into Google Sheets.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.googlesheets/common-issues.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nConvert 'languages' array to JSON (key, value) pairs.\n```\n\n----------------------------------------\n\nTITLE: Defining FriendGrid Node Metadata for n8n Codex - JSON\nDESCRIPTION: This JSON snippet represents the codex file for the FriendGrid node, defining top-level metadata such as node name, version, codex version, categories, and resources for documentation links. It is required by n8n to register the node and display category information in the editor UI. The main inputs are metadata fields; outputs assist n8n in managing the node. There are no dependencies other than n8n's codex file parser, and values like documentation URLs should be filled as needed.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/programmatic-style-node.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"node\": \"n8n-nodes-base.FriendGrid\",\n\t\"nodeVersion\": \"1.0\",\n\t\"codexVersion\": \"1.0\",\n\t\"categories\": [\n\t\t\"Miscellaneous\"\n\t],\n\t\"resources\": {\n\t\t\"credentialDocumentation\": [\n\t\t\t{\n\t\t\t\t\"url\": \"\"\n\t\t\t}\n\t\t],\n\t\t\"primaryDocumentation\": [\n\t\t\t{\n\t\t\t\t\"url\": \"\"\n\t\t\t}\n\t\t]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Postgres Storage Topology in YAML\nDESCRIPTION: YAML configuration snippet for setting up Postgres storage topology in Kubernetes, specifying allowed regions for persistent volume creation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/google-cloud.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nallowedTopologies:\n  - matchLabelExpressions:\n      - key: failure-domain.beta.kubernetes.io/zone\n        values:\n          - us-central1-b\n          - us-central1-c\n```\n\n----------------------------------------\n\nTITLE: Displaying Google Drive API 401 Unauthorized Error\nDESCRIPTION: This snippet shows the format of a typical 401 error returned by Google APIs when the client is unauthorized. This often occurs with the Google Drive Trigger node if the credentials used (OAuth2 or Service Account) lack the necessary permissions, scopes, or proper configuration (like domain-wide delegation for Service Accounts).\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/trigger-nodes/n8n-nodes-base.googledrivetrigger/common-issues.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n401 - {\"error\":\"unauthorized_client\",\"error_description\":\"Client is unauthorized to retrieve access tokens using this method, or client not authorized for any of the scopes requested.\"}\n```\n\n----------------------------------------\n\nTITLE: Passing Authentication Data in Request Body - n8n - TypeScript\nDESCRIPTION: This snippet details the configuration for sending authentication data as part of the request body in an n8n credential type. The body will include the username and password, which are mapped from credential inputs. This pattern requires prior definition of 'username' and 'password' properties in the credentials configuration. Useful when APIs expect credentials in the POST/PUT body.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/credentials-files.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nauthenticate: IAuthenticateGeneric = {\n\ttype: 'generic',\n\tproperties: {\n\t\tbody: {\n\t\t\tusername: '={{$credentials.username}}',\n\t\t\tpassword: '={{$credentials.password}}',\n\t\t},\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Collection Field for Optional Inputs in n8n Node UI (TypeScript)\nDESCRIPTION: This configuration defines a collection field using `type: 'collection'`. It allows grouping related optional fields, defined within the `options` array. Users can add instances of these grouped fields via a button specified by `placeholder`. Includes standard properties like `displayName`, `name`, `default`, and `displayOptions`.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/ui-elements.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\tdisplayName: 'Filters',\n\tname: 'filters',\n\ttype: 'collection',\n\tplaceholder: 'Add Field',\n\tdefault: {},\n\toptions: [\n\t\t{\n\t\t\tdisplayName: 'Type',\n\t\t\tname: 'type',\n\t\t\ttype: 'options',\n\t\t\toptions: [\n\t\t\t\t{\n\t\t\t\t\tname: 'Automated',\n\t\t\t\t\tvalue: 'automated',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Past',\n\t\t\t\t\tvalue: 'past',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Upcoming',\n\t\t\t\t\tvalue: 'upcoming',\n\t\t\t\t},\n\t\t\t],\n\t\t\tdefault: '',\n\t\t},\n\t],\n\tdisplayOptions: { // the resources and operations to display this element with\n\t\tshow: {\n\t\t\tresource: [\n\t\t\t\t// comma-separated list of resource names\n\t\t\t],\n\t\t\toperation: [\n\t\t\t\t// comma-separated list of operation names\n\t\t\t]\n\t\t}\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Credential Schema in n8n API\nDESCRIPTION: This snippet demonstrates how to access the built-in documentation about credential formats using the credentials endpoint. It requires the credential type name as a parameter.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/api/using-api-playground.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nN8N_HOST:N8N_PORT/N8N_PATH/api/v<api-version-number>/credentials/schema/{credentialTypeName}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Audio Transcription Parameters\nDESCRIPTION: Configuration parameters for transcribing audio to text using OpenAI's whisper-1 model. Includes input specifications and temperature settings for output randomness.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-langchain.openai/audio-operations.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Credential to connect with: Create or select an existing OpenAI credential\n- Resource: Select Audio\n- Operation: Select Transcribe a Recording\n- Input Data Field Name: Default 'data'\n- Supported formats: .flac, .mp3, .mp4, .mpeg, .mpga, .m4a, .ogg, .wav, .webm\n- Language of the Audio File: ISO-639-1 format\n- Output Randomness (Temperature): 0.0 to 1.0\n```\n\n----------------------------------------\n\nTITLE: Original KoboToolbox Submission Data Example (JSON)\nDESCRIPTION: Illustrates the default JSON structure of a KoboToolbox form submission before applying n8n's reformatting logic. Note that fields are often strings, and nested structures representing form groups are flattened using '/' in keys (e.g., 'Field_Details/Field_Name').\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.kobotoolbox.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"_id\": 471987,\n  \"formhub/uuid\": \"189436bb09a54957bfcc798e338b54d6\",\n  \"start\": \"2021-12-05T16:13:38.527+02:00\",\n  \"end\": \"2021-12-05T16:15:33.407+02:00\",\n  \"Field_Details/Field_Name\": \"Test Fields\",\n  \"Field_Details/Field_Location\": \"-1.932914 30.078211 1421 165\",\n  \"Field_Details/Field_Shape\": \"-1.932914 30.078211 1421 165;-1.933011 30.078085 0 0;-1.933257 30.078004 0 0;-1.933338 30.078197 0 0;-1.933107 30.078299 0 0;-1.932914 30.078211 1421 165\",\n  \"Field_Details/Crops_Grown\": \"maize beans avocado\",\n  \"Field_Details/Field_Size_sqm\": \"2300\",\n  \"__version__\": \"veGcULpqP6JNFKRJbbMvMs\",\n  \"meta/instanceID\": \"uuid:2356cbbe-c1fd-414d-85c8-84f33e92618a\",\n  \"_xform_id_string\": \"ajXVJpBkTD5tB4Nu9QXpgm\",\n  \"_uuid\": \"2356cbbe-c1fd-414d-85c8-84f33e92618a\",\n  \"_attachments\": [],\n  \"_status\": \"submitted_via_web\",\n  \"_geolocation\": [\n    -1.932914,\n    30.078211\n  ],\n  \"_submission_time\": \"2021-12-05T14:15:44\",\n  \"_tags\": [],\n  \"_notes\": [],\n  \"_validation_status\": {},\n  \"_submitted_by\": null\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Finding Notion User ID from Slack Email in JavaScript\nDESCRIPTION: This code snippet finds the Notion user ID corresponding to a Slack user's email. It handles cases where the person property might be null and returns the Notion ID if found.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/ai-code.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst slackUser = $(\"Mock Slack\").all()[0];\nconst notionUsers = $input.all();\nconst slackUserEmail = slackUser.json.email;\n\nconst notionUser = notionUsers.find(\n  (user) => user.json.person && user.json.person.email === slackUserEmail\n);\n\nreturn notionUser ? [{ json: { notionId: notionUser.json.id } }] : [];\n```\n\n----------------------------------------\n\nTITLE: Setting pairedItem Property in n8n Node Output - TypeScript\nDESCRIPTION: Demonstrates two approaches for setting the pairedItem property on node output items: using existing pairedItem information from incoming items, or manually setting the index. Includes optional input parameter for nodes that combine multiple inputs.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/data/data-mapping/item-linking-node-creators.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Use the pairedItem information of the incoming item\nnewItem = {\n\t\"json\": { . . . },\n\t\"pairedItem\": {\n\t\t\"item\": item.pairedItem,\n\t\t// Optional: choose the input to use\n\t\t// Set this if your node combines multiple inputs\n\t\t\"input\": 0\n};\n\n// Or set the index manually\nnewItem = {\n\t\t\"json\": { . . . }\n\t\t\"pairedItem\": {\n\t\t\t\"item\": i,\n\t\t\t// Optional: choose the input to use\n\t\t\t// Set this if your node combines multiple inputs\n\t\t\t\"input\": 0\n\t\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Using Text Classifier Node Template Expression\nDESCRIPTION: Example of how to reference input fields in the Text Classifier node using expression syntax.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.text-classifier.md#2025-04-22_snippet_0\n\nLANGUAGE: expression\nCODE:\n```\n{{ $json.chatInput }}\n```\n\n----------------------------------------\n\nTITLE: Localizing Text in JSON\nDESCRIPTION: Example of customizing text in the English localization file for n8n's UI.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/embed/white-labelling.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"_brand.name\": \"My Brand\",\n\t\"about.aboutN8n\": \"About @:_brand.name\",\n\t\"about.n8nVersion\": \"@:_brand.name Version\"\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Credential Type Name in n8n Workflow JSON\nDESCRIPTION: This JSON snippet shows how to find the credential type name in a downloaded workflow JSON file. It uses a Google Drive node as an example, where the credential type name is 'googleDriveOAuth2Api'.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/api/using-api-playground.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...,\n    \"credentials\": {\n        \"googleDriveOAuth2Api\": {\n        \"id\": \"9\",\n        \"name\": \"Google Drive\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Telegram InlineQueryResults JSON Structure\nDESCRIPTION: JSON-serialized array of results used for answering callback queries. The structure follows Telegram's InlineQueryResults format and is used in both Answer Query and Answer Inline Query operations.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.telegram/callback-operations.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"results\": [\n    // Array of InlineQueryResult objects\n    // Maximum 50 results per query\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Window Title in HTML\nDESCRIPTION: Modification of the HTML title tag to change n8n's window title.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/embed/white-labelling.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<!-- Replace html title attribute -->\n\t<title>My Brand - Workflow Automation</title>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Generating Sample Data with JavaScript in n8n Code Node\nDESCRIPTION: This code snippet creates an array of sample data representing music artists with potential duplicates. It's used to set up test data for the Remove Duplicates node examples.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.removeduplicates/templates-and-examples.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet data =[];\n\nreturn {\n  data: [\n    { id: 1, name: 'Taylor Swift', job: 'Pop star', last_updated: '2024-09-20T10:12:43.493Z' },\n    { id: 2, name: 'Ed Sheeran', job: 'Singer-songwriter', last_updated: '2024-10-05T08:30:59.493Z' },\n    { id: 3, name: 'Adele', job: 'Singer-songwriter', last_updated: '2024-10-07T14:15:59.493Z' },\n    { id: 4, name: 'Bruno Mars', job: 'Singer-songwriter', last_updated: '2024-08-25T17:45:12.493Z' },\n    { id: 1, name: 'Taylor Swift', job: 'Pop star', last_updated: '2024-09-20T10:12:43.493Z' },  // duplicate\n    { id: 5, name: 'Billie Eilish', job: 'Singer-songwriter', last_updated: '2024-09-10T09:30:12.493Z' },\n    { id: 6, name: 'Katy Perry', job: 'Pop star', last_updated: '2024-10-08T12:30:45.493Z' },\n    { id: 2, name: 'Ed Sheeran', job: 'Singer-songwriter', last_updated: '2024-10-05T08:30:59.493Z' },  // duplicate\n    { id: 7, name: 'Lady Gaga', job: 'Pop star', last_updated: '2024-09-15T14:45:30.493Z' },\n    { id: 8, name: 'Rihanna', job: 'Pop star', last_updated: '2024-10-01T11:50:22.493Z' },\n    { id: 3, name: 'Adele', job: 'Singer-songwriter', last_updated: '2024-10-07T14:15:59.493Z' },  // duplicate\n    //{ id: 9, name: 'Tom Hanks', job: 'Actor', last_updated: '2024-10-17T13:58:31.493Z' },\n    //{ id: 0, name: 'Madonna', job: 'Pop star', last_updated: '2024-10-17T17:11:38.493Z' },\n    //{ id: 15, name: 'Bob Dylan', job: 'Folk singer', last_updated: '2024-09-24T08:03:16.493Z'},\n    //{ id: 10, name: 'Harry Nilsson', job: 'Singer-songwriter', last_updated: '2020-10-17T17:11:38.493Z' },\n    //{ id: 11, name: 'Kylie Minogue', job: 'Pop star', last_updated: '2024-10-24T08:03:16.493Z'},\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating New Items Without pairedItem in n8n Code Node (JavaScript)\nDESCRIPTION: This JavaScript code generates new items from the input data, extracting the name and adding a new field. However, it doesn't include the 'pairedItem' property, which means item linking is lost.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/data/data-mapping/item-linking-code-node.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnewItems = [];\nfor(let i=0; i<items.length; i++){\n  newItems.push(\n    {\n    \"json\":\n      {\n        \"name\": items[i].json.name,\n\t\t\t\t\"aBrandNewField\": \"New data for item \" + i\n      }\n    }\n  )\n}\n\nreturn newItems;\n```\n\n----------------------------------------\n\nTITLE: Accessing Input with JavaScript in Custom Code Tool\nDESCRIPTION: This example demonstrates how to access the tool input using the 'query' variable in JavaScript and return a transformed version of it. The code takes the input string and converts it to lowercase.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.toolcode.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet myString = query;\nreturn myString.toLowerCase();\n```\n\n----------------------------------------\n\nTITLE: Enable OAuth Bearer Tokens via CLI in Magento 2\nDESCRIPTION: Command to enable OAuth access tokens to be used as standalone Bearer tokens in Magento 2 configuration. This is executed from the Magento CLI interface.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/magento2.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/magento config:set oauth/consumer/enable_integration_as_bearer 1\n```\n\n----------------------------------------\n\nTITLE: Running n8n Security Audit via CLI\nDESCRIPTION: Executes the n8n security audit process using the command-line interface. This command initiates the audit and generates a report detailing potential security issues within the instance.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/securing/security-audit.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nn8n audit\n```\n\n----------------------------------------\n\nTITLE: Triggering n8n Webhook with Curl GET Request to Send a File (Shell)\nDESCRIPTION: This command uses curl to send an HTTP GET request to the specified n8n Webhook URL, attaching a file using the `--from` flag (Note: `--form` is typically used for POST requests to send files, but the example uses `--from`. Check curl documentation for exact behavior, often `--form 'key=@/path/to/file'` is intended for file uploads). Replace `<https://your-n8n.url/webhook/path>` with the Webhook URL and `/path/to/file` with the actual file path.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.webhook/common-issues.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl --request GET <https://your-n8n.url/webhook/path> --from 'key=@/path/to/file'\n```\n\n----------------------------------------\n\nTITLE: Disabling Telemetry Data Collection - n8n - Bash\nDESCRIPTION: This snippet demonstrates how to opt out of n8n telemetry events by setting the N8N_DIAGNOSTICS_ENABLED environment variable to false using a bash shell command. No special dependencies are required beyond a bash-compatible environment. This command can be added to a shell profile or startup script so that the n8n instance launches with telemetry disabled. The key parameter is N8N_DIAGNOSTICS_ENABLED, set to 'false' to turn off event data collection; there are no inputs or outputs besides the environment variable state.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/securing/telemetry-opt-out.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport N8N_DIAGNOSTICS_ENABLED=false\n```\n\n----------------------------------------\n\nTITLE: Customizing Logo Styles in SCSS\nDESCRIPTION: SCSS styles for customizing the logo placement and appearance in the main sidebar.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/embed/white-labelling.md#2025-04-22_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n.logoItem {\n\tdisplay: flex;\n\tjustify-content: space-between;\n\theight: $header-height;\n\tline-height: $header-height;\n\tmargin: 0 !important;\n\tborder-radius: 0 !important;\n\tborder-bottom: var(--border-width-base) var(--border-style-base) var(--color-background-xlight);\n\tcursor: default;\n\n\t&:hover, &:global(.is-active):hover {\n\t\tbackground-color: initial !important;\n\t}\n\n\t* { vertical-align: middle; }\n\t.icon {\n\t\theight: 18px;\n\t\tposition: relative;\n\t\tleft: 6px;\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown Formatting for n8n Sticky Notes\nDESCRIPTION: Demonstrates common Markdown formatting options available in n8n Sticky Notes, including bold text, italics, headings, links, and lists.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/workflows/components/sticky-notes.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nThe text in double asterisks will be **bold**\n\nThe text in single asterisks will be *italic*\n\nUse # to indicate headings:\n# This is a top-level heading\n## This is a sub-heading\n### This is a smaller sub-heading\n\nYou can add links:\n[Example](https://example.com/)\n\nCreate lists with asterisks:\n\n* Item one\n* Item two\n\nOr created ordered lists with numbers:\n\n1. Item one\n2. Item two\n```\n\n----------------------------------------\n\nTITLE: Retrieving Execution ID - n8n Code Node - Python\nDESCRIPTION: This Python snippet shows how to access the execution ID within an n8n Code node by referencing the _execution context object. The retrieved value is the unique identifier for the current workflow execution. No extra dependencies are needed.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/builtin/execution.md#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nexecutionId = _execution.id\n```\n\n----------------------------------------\n\nTITLE: AWS IAM Policy for Restricted Secret Access in JSON\nDESCRIPTION: This JSON defines an IAM policy that allows listing all secrets but restricts access to specific secrets in AWS Secrets Manager. It demonstrates how to scope permissions to select ARNs.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/external-secrets.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"Version\": \"2012-10-17\",\n\t\"Statement\": [\n\t\t{\n\t\t\t\"Sid\": \"ListingSecrets\",\n\t\t\t\"Effect\": \"Allow\",\n\t\t\t\"Action\": [\n\t\t\t\t\"secretsmanager:ListSecrets\",\n\t\t\t\t\"secretsmanager:BatchGetSecretValue\"\n\t\t\t],\n\t\t\t\"Resource\": \"*\"\n\t\t},\n\t\t{\n\t\t\t\"Sid\": \"RetrievingSecrets\",\n\t\t\t\"Effect\": \"Allow\",\n\t\t\t\"Action\": [\n\t\t\t\t\"secretsmanager:GetSecretValue\",\n\t\t\t\t\"secretsmanager:DescribeSecret\"\n\t\t\t],\n\t\t\t\"Resource\": [\n\t\t\t\t\"arn:aws:secretsmanager:us-west-2:123456789000:secret:n8n*\"\n\t\t\t]\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Declarative n8n Node Class Structure in TypeScript\nDESCRIPTION: This snippet outlines the basic structure for a declarative-style n8n node. It imports `INodeType` and `INodeTypeDescription` from 'n8n-workflow' and defines a class `ExampleNode` that implements `INodeType`. The core definition resides within the `description` property, which holds basic node details and properties (resources and operations).\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/node-base-files/structure.md#2025-04-22_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { INodeType, INodeTypeDescription } from 'n8n-workflow';\n\nexport class ExampleNode implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\t// Basic node details here\n\t\tproperties: [\n\t\t\t// Resources and operations here\n\t\t]\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Namespace Manifest Separately\nDESCRIPTION: Shell command to apply only the namespace manifest file to resolve potential namespace-related errors.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/aws.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f namespace.yaml\n```\n\n----------------------------------------\n\nTITLE: Ignoring Specific Files in Local File Trigger (Shell)\nDESCRIPTION: This snippet demonstrates how to ignore a single file using the Anymatch syntax in the Local File Trigger node's Ignore option. It uses a wildcard pattern to match the file regardless of its location in the directory structure.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.localfiletrigger.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n**/<fileName>.<suffix>\n# For example, **/myfile.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies including Linter (Shell)\nDESCRIPTION: Installs all project dependencies, including the n8n node linter (`eslint-plugin-n8n-nodes-base`), using npm. This command should be run in the root directory of an n8n node starter project or a community package to set up the development environment and make the linter available.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/test/node-linter.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing n8n 'next' version for update in Bash\nDESCRIPTION: This command installs the 'next' version of n8n, which can be used to update to the latest pre-release version.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/npm.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g n8n@next\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing Documentation Changes\nDESCRIPTION: Git commands for staging changes, creating a commit with a descriptive message, and pushing the branch to the remote repository.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit add *\ngit commit -m \"<short summary of changes>\"\ngit push --set-upstream origin <branch-name>\n```\n\n----------------------------------------\n\nTITLE: Docker Permission Update Command for n8n\nDESCRIPTION: Command to update permissions when using Docker-based deployments to run n8n process as user 'node' instead of 'root' for improved security.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/1-0-migration-checklist.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it --user root -v ~/.n8n:/home/node/.n8n --entrypoint chown n8nio/base:16 -R node:node /home/node/.n8n\n```\n\n----------------------------------------\n\nTITLE: Node Options and Parameters Configuration for Milvus Vector Store\nDESCRIPTION: Code section defining the available modes and parameters for the Milvus Vector Store node, including Get Many, Insert Documents, and Retrieve Documents configurations.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoremilvus.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Get Many parameters\n* **Milvus Collection**: Select or enter the Milvus Collection to use.\n* **Prompt**: Enter your search query.\n* **Limit**: Enter how many results to retrieve from the vector store.\n\n### Insert Documents parameters\n* **Milvus Collection**: Select or enter the Milvus Collection to use.\n* **Clear Collection**: Specify whether to clear the collection before inserting new documents.\n\n### Retrieve Documents parameters\n* **Milvus collection**: Select or enter the Milvus Collection to use.\n* **Name**: The name of the vector store.\n* **Description**: Explain to the LLM what this tool does.\n* **Limit**: Enter how many results to retrieve from the vector store.\n```\n\n----------------------------------------\n\nTITLE: Supported JWT Algorithms List\nDESCRIPTION: List of algorithms supported by n8n's JWT credential system, including HMAC, RSA, ECDSA, and RSASSA-PSS signature algorithms.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/jwt.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `HS256`\n- `HS384`\n- `HS512`\n- `RS256`\n- `RS384`\n- `RS512`\n- `ES256`\n- `ES384`\n- `ES512`\n- `PS256`\n- `PS384`\n- `PS512`\n- `none`\n```\n\n----------------------------------------\n\nTITLE: Cloning n8n Docker Caddy Configuration Repository\nDESCRIPTION: Commands to clone the n8n Docker Caddy configuration repository and change to the repository directory.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/hetzner.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/n8n-io/n8n-docker-caddy.git\ncd n8n-docker-caddy\n```\n\n----------------------------------------\n\nTITLE: Implementing Frontend Hooks in JavaScript\nDESCRIPTION: This code demonstrates the structure of a frontend external hook file in JavaScript. It shows how to define multiple hook functions for different hooks, such as nodeView.mount, nodeView.createNodeActiveChanged, and nodeView.addNodeButton.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/embed/configuration.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.n8nExternalHooks = {\n  nodeView: {\n    mount: [\n      function (store, meta) {\n        // do something\n      },\n    ],\n    createNodeActiveChanged: [\n      function (store, meta) {\n        // do something\n      },\n      function (store, meta) {\n        // do something else\n      },\n    ],\n    addNodeButton: [\n      function (store, meta) {\n        // do something\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Input Data to n8n AI Node\nDESCRIPTION: Method to populate data for a specified non-main input in an n8n AI node. Used for mocking data with specific input types.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/integrations/builtin/cluster-nodes/langchain-root-nodes/langchaincode/builtin-methods.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`this.addInputData(inputName, data)`\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Custom Certificates in n8n\nDESCRIPTION: Docker Compose configuration that sets up an n8n container with custom certificate support. Mounts the local 'pki' directory and configures container ports and image settings.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/configuration-examples/custom-certificate-authority.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: n8n\nservices:\n    n8n:\n        volumes:\n            - ./pki:/opt/custom-certificates\n        container_name: n8n\n        ports:\n            - 5678:5678\n        image: docker.n8n.io/n8nio/n8n\n```\n\n----------------------------------------\n\nTITLE: Getting Workflow Name in n8n Python\nDESCRIPTION: Retrieves the name of the current workflow. This metadata property is available for use within the Python Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/n8n-metadata.md#2025-04-22_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n_workflow.name\n```\n\n----------------------------------------\n\nTITLE: User Management Commands\nDESCRIPTION: Commands for managing users in n8n, including resetting user management, disabling MFA, and resetting LDAP settings.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/cli-commands.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nn8n user-management:reset\n```\n\nLANGUAGE: sh\nCODE:\n```\nn8n mfa:disable --email=johndoe@example.com\n```\n\nLANGUAGE: sh\nCODE:\n```\nn8n ldap:reset\n```\n\n----------------------------------------\n\nTITLE: Disabling Express X-Powered-By Header\nDESCRIPTION: Disables the X-Powered-By: Express header in the n8n CLI for security reasons.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/release-notes/0-x.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nCLI: disable X-Powered-By: Express header.\n```\n\n----------------------------------------\n\nTITLE: n8n Metrics Configuration Example\nDESCRIPTION: Example JSON configuration for enabling n8n metrics\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/configuration-methods.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"endpoints\": {\n\t\t\"metrics\": {\n\t\t\t\"enable\": true\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning n8n Docker Configuration Repository\nDESCRIPTION: Commands to clone the n8n Docker configuration repository and navigate to the cloned directory. This repository contains necessary configuration files for setting up n8n with Docker and Caddy.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/digital-ocean.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/n8n-io/n8n-docker-caddy.git\n```\n\nLANGUAGE: shell\nCODE:\n```\ncd n8n-docker-caddy\n```\n\n----------------------------------------\n\nTITLE: Private Key Format Example for Salesforce JWT Authentication\nDESCRIPTION: Example showing the standard PEM format required for the private key when configuring Salesforce JWT authentication in n8n. The private key must be entered in multi-line format with proper begin and end tags.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/salesforce.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-----BEGIN PRIVATE KEY-----\nKEY DATA GOES HERE\n-----END PRIVATE KEY-----\n```\n\n----------------------------------------\n\nTITLE: Exposing Local Server with Ngrok\nDESCRIPTION: Command to expose local server running on port 5678 using ngrok for OAuth2 callback URL configuration.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/getresponse.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nngrok http 5678\n```\n\n----------------------------------------\n\nTITLE: Ignoring Subdirectories in Local File Trigger (Shell)\nDESCRIPTION: This snippet shows how to ignore a specific subdirectory and all its contents when using the Local File Trigger node. It uses a wildcard pattern to match the directory name and all files and folders within it.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.localfiletrigger.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n**/<directoryName>/**\n# For example, **/myDirectory/**\n```\n\n----------------------------------------\n\nTITLE: Running the Linter and Fixing Issues (Shell)\nDESCRIPTION: Executes the defined 'lintfix' script, which runs the linter and automatically fixes any detected issues that are marked as fixable by the `eslint-plugin-n8n-nodes-base` rules. This command helps maintain code quality and consistency. Run this command manually in the root directory of a community package, or in `/packages/nodes-base/` in the main n8n repository.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/test/node-linter.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run lintfix\n```\n\n----------------------------------------\n\nTITLE: Command Line Import/Export Operations\nDESCRIPTION: Reference to command line options for importing and exporting workflows and credentials, with links to detailed documentation for specific commands.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/workflows/export-import.md#2025-04-22_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Defining Environment Variables for n8n Timezone and Localization\nDESCRIPTION: This markdown table defines two environment variables: GENERIC_TIMEZONE for setting the n8n instance timezone, and N8N_DEFAULT_LOCALE for setting the default language locale. These variables are crucial for proper scheduling and localization in n8n.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/environment-variables/timezone-localization.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable | Type  | Default  | Description |\n| :------- | :---- | :------- | :---------- |\n| `GENERIC_TIMEZONE` | * | `America/New_York` |The n8n instance timezone. Important for schedule nodes (such as Cron). |\n| `N8N_DEFAULT_LOCALE` | String | `en` | A locale identifier, compatible with the [Accept-Language header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language){:target=\"_blank\" .external-link}. n8n doesn't support regional identifiers, such as `de-AT`. When running in a locale other than the default, n8n displays UI strings in the selected locale, and falls back to `en` for any untranslated strings. |\n```\n\n----------------------------------------\n\nTITLE: Configuring SearXNG settings.yml for JSON Output\nDESCRIPTION: This YAML configuration snippet shows how to enable JSON output format in the SearXNG settings.yml file, which is required for the SearXNG Tool node to work properly with n8n. The configuration adds 'json' to the search.formats section.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.toolsearxng.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsearch:\n  # options available for formats: [html, csv, json, rss]\n  formats:\n    - html\n    - json\n```\n\n----------------------------------------\n\nTITLE: Full-width Image Syntax in n8n Sticky Notes\nDESCRIPTION: Shows the Markdown syntax for making images span the full width of a sticky note by using the #full-width suffix.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/workflows/components/sticky-notes.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n![Source example](https://<IMAGE-URL>/<IMAGE-NAME>.png#full-width)\n```\n\n----------------------------------------\n\nTITLE: Disabling n8n Server Connections\nDESCRIPTION: Environment variable configuration to disable n8n's server connections for diagnostics, version notifications, and templates.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/configuration-examples/isolation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nN8N_DIAGNOSTICS_ENABLED=false\nN8N_VERSION_NOTIFICATIONS_ENABLED=false\nN8N_TEMPLATES_ENABLED=false\n```\n\n----------------------------------------\n\nTITLE: Generating Sample Data with JavaScript in Code Node (Input 2)\nDESCRIPTION: This JavaScript code snippet creates an array of objects representing greetings in different languages. It's used in a second Code node to generate additional sample input data for the Merge node example.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.merge.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreturn [\n\t  {\n    json: {\n      greeting: 'Hello',\n      language: 'en',\n    }\n  },\n  {\n    json: {\n      greeting: 'Hallo',\n      language: 'de',\n    }\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Source Control Environment Variable in n8n\nDESCRIPTION: This table defines the environment variable N8N_SOURCECONTROL_DEFAULT_SSH_KEY_TYPE, which sets the default SSH key type for source control setup in n8n. It can be set to 'ed25519' (default) or 'rsa'.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/environment-variables/source-control.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable | Type  | Default  | Description |\n| :------- | :---- | :------- | :---------- |\n| `N8N_SOURCECONTROL_DEFAULT_SSH_KEY_TYPE` | String | `ed25519` | Set to `rsa` to make RSA the default SSH key type for [Source control setup](/source-control-environments/setup.md). |\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Node Subtitles in n8n (JavaScript)\nDESCRIPTION: This JavaScript code snippet, part of an n8n node definition, demonstrates how to dynamically set the node's subtitle displayed in the UI. It uses an n8n expression to concatenate the values of the 'operation' and 'resource' parameters selected by the user, separated by a colon and space. This provides immediate visual feedback on the node's configured function.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/plan/node-ui-design.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsubtitle: '={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}',\n```\n\n----------------------------------------\n\nTITLE: Applying Kubernetes Manifests\nDESCRIPTION: Shell command to apply all Kubernetes manifest files in the current directory to the EKS cluster.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/aws.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f .\n```\n\n----------------------------------------\n\nTITLE: Embedding Templates Widget using Shortcode\nDESCRIPTION: This shortcode or template directive is used within the n8n documentation system to dynamically embed a widget displaying relevant workflow templates. It uses the current page's title (`page.title`) and a specific identifier ('recursive-character-text-splitter') to fetch and display templates related to the Recursive Character Text Splitter node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.textsplitterrecursivecharactertextsplitter.md#2025-04-22_snippet_0\n\nLANGUAGE: templating\nCODE:\n```\n[[ templatesWidget(page.title, 'recursive-character-text-splitter') ]]\n```\n\n----------------------------------------\n\nTITLE: Creating Airtable Credentials via n8n API (JSON)\nDESCRIPTION: This code snippet demonstrates how to create Airtable credentials using the n8n API. It includes the request body structure for a POST request to the credentials endpoint.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/embed/managing-workflows.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"name\":\"MyAirtable\",\n   \"type\":\"airtableApi\",\n   \"nodesAccess\":[\n      {\n         \"nodeType\":\"n8n-nodes-base.airtable\"\n      }\n   ],\n   \"data\":{\n      \"apiKey\":\"q12we34r5t67yu\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Docker Compose Configuration\nDESCRIPTION: Command to view the Docker Compose configuration file, which defines the services for Caddy and n8n.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/digital-ocean.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnano docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Trigger Node Error Data Format for n8n Error Triggers\nDESCRIPTION: The JSON data structure received by an Error Trigger when the error occurs in a trigger node of the main workflow. This format contains less execution information but includes detailed trigger error data with a timestamp and context.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/integrations/builtin/core-nodes/error-trigger/error-data.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"trigger\": {\n    \"error\": {\n      \"context\": {},\n      \"name\": \"WorkflowActivationError\",\n      \"cause\": {\n        \"message\": \"\",\n        \"stack\": \"\"\n      },\n      \"timestamp\": 1654609328787,\n      \"message\": \"\",\n      \"node\": {\n        . . . \n      }\n    },\n    \"mode\": \"trigger\"\n  },\n  \"workflow\": {\n    \"id\": \"\",\n    \"name\": \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling TheHive Webhook Notifications via cURL\nDESCRIPTION: This shell command uses cURL to send a PUT request to TheHive API's organization notification configuration endpoint. It enables notifications for all events (`AnyEvent`) to be sent via the previously configured webhook endpoints (identified by `TESTING_WEBHOOK_NAME` and `PRODUCTION_WEBHOOK_NAME`). Replace placeholders like `THEHIVE_USERNAME`, `THEHIVE_PASSWORD`, `THEHIVE_URL`, and the webhook names with your actual credentials, instance URL, and configured endpoint names.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/trigger-nodes/n8n-nodes-base.thehivetrigger.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl -XPUT -uTHEHIVE_USERNAME:THEHIVE_PASSWORD -H 'Content-type: application/json' THEHIVE_URL/api/config/organisation/notification -d '\n{\n\t\"value\": [\n\t\t{\n\t\t\"delegate\": false,\n\t\t\"trigger\": { \"name\": \"AnyEvent\"},\n\t\t\"notifier\": { \"name\": \"webhook\", \"endpoint\": \"TESTING_WEBHOOK_NAME\" }\n\t\t},\n\t\t{\n\t\t\"delegate\": false,\n\t\t\"trigger\": { \"name\": \"AnyEvent\"},\n\t\t\"notifier\": { \"name\": \"webhook\", \"endpoint\": \"PRODUCTION_WEBHOOK_NAME\" }\n\t\t}\n\t]\n}'\n```\n\n----------------------------------------\n\nTITLE: Deleting Kubernetes Resources\nDESCRIPTION: Shell command to delete all resources created by the Kubernetes manifests in the current directory.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/aws.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete -f .\n```\n\n----------------------------------------\n\nTITLE: Specifying Column Data Types in QuestDB Node\nDESCRIPTION: Demonstrates how to specify data types for columns when working with the QuestDB node. This example shows how to define an integer type for an 'id' column and a text type for a 'name' column in the Columns field.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.questdb.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nid:int,name:text\n```\n\n----------------------------------------\n\nTITLE: Specifying a Single Node Icon in n8n (JavaScript)\nDESCRIPTION: This configuration snippet demonstrates how to define a single icon for an n8n node using the `icon` parameter within the node base file. It specifies the path to the icon file (e.g., an SVG) as a string, prefixed with `file:`. This single icon will be displayed for the node in both light and dark modes in the n8n UI.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/node-base-files/standard-parameters.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nicon: 'file:exampleNodeIcon.svg'\n```\n\n----------------------------------------\n\nTITLE: Direct JMESPath Query with JavaScript Library\nDESCRIPTION: Provides a direct invocation of the JMESPath JS library to perform a search. Requires the \\'jmespath\\' NPM package. Useful for custom n8n setups or Node.js contexts; not directly usable in n8n expressions since they require single-line statements. Takes \\'object\\' and \\'searchString\\' arguments and returns the query result.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/jmespath.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar jmespath = require('jmespath');\njmespath.search(object, searchString);\n```\n\n----------------------------------------\n\nTITLE: Gmail 401 Unauthorized Error Message\nDESCRIPTION: Error message that occurs when there are authentication issues with the credential scopes or permissions.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.gmail/common-issues.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n401 - {\"error\":\"unauthorized_client\",\"error_description\":\"Client is unauthorized to retrieve access tokens using this method, or client not authorized for any of the scopes requested.\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Certificate Permissions in n8n Docker Container\nDESCRIPTION: Docker command to set proper ownership permissions for imported certificates in the n8n container. Executes as root user to change ownership to user/group 1000.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/configuration-examples/custom-certificate-authority.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec --user 0 n8n chown -R 1000:1000 /opt/custom-certificates\n```\n\n----------------------------------------\n\nTITLE: Deleting Kubernetes Resources\nDESCRIPTION: Command to remove all resources created by the Kubernetes manifests in the current directory.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/google-cloud.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete -f .\n```\n\n----------------------------------------\n\nTITLE: Updating Window Title in TypeScript\nDESCRIPTION: TypeScript code to update the window title dynamically in n8n's UI.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/embed/white-labelling.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n$titleSet(workflow: string, status: WorkflowTitleStatus) {\n\t// replace n8n prefix\n\twindow.document.title = `My Brand - ${icon} ${workflow}`;\n},\n\n$titleReset() {\n\t// replace n8n prefix\n\tdocument.title = `My Brand - Workflow Automation`;\n},\n```\n\n----------------------------------------\n\nTITLE: Displaying Internal Error for Invalid Content in AI Agent Node\nDESCRIPTION: This code snippet shows an example of an error message that occurs when the Prompt input contains a null value in the AI Agent node. It's typically caused by invalid expressions or null values in the chatInput field.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent/common-issues.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nInternal error\nError: 400 Invalid value for 'content': expected a string, got null.\n<stack-trace>\n```\n\n----------------------------------------\n\nTITLE: Generating New Items With pairedItem in n8n Code Node (JavaScript)\nDESCRIPTION: This JavaScript code generates new items from the input data and includes the 'pairedItem' property. This maintains item linking, allowing tracing back from these items to the items used to generate them.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/data/data-mapping/item-linking-code-node.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnewItems = [];\nfor(let i=0; i<items.length; i++){\n  newItems.push(\n    {\n      \"json\":\n        {\n          \"name\": items[i].json.name,\n\t\t\t\t\t\"aBrandNewField\": \"New data for item \" + i\n        },\n      \"pairedItem\": i\n    }    \n  )\n}\nreturn newItems;\n```\n\n----------------------------------------\n\nTITLE: Passing Data to Embedded Chat Trigger Node in JavaScript\nDESCRIPTION: This code snippet demonstrates how to pass extra information to an embedded Chat Trigger node using the 'metadata' field in the JSON object passed to the 'createChat' function.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-langchain.chattrigger/common-issues.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncreateChat({\n\twebhookUrl: 'YOUR_PRODUCTION_WEBHOOK_URL',\n\tmetadata: {\n\t\t'YOUR_KEY': 'YOUR_DATA'\n\t};\n});\n```\n\n----------------------------------------\n\nTITLE: Example Output Data from Code Node (JSON)\nDESCRIPTION: This JSON snippet shows the final output after the 'Code' node has executed. It demonstrates that the 'restoreEmail' field has been added to each item, containing the corresponding email address retrieved from the original 'Customer Datastore' node's output using the `itemMatching` function.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/builtin/itemmatching.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\n\t\t\"name\": \"Jay Gatsby\",\n\t\t\"restoreEmail\": \"gatsby@west-egg.com\"\n\t},\n\t{\n\t\t\"name\": \"José Arcadio Buendía\",\n\t\t\"restoreEmail\": \"jab@macondo.co\"\n\t},\n\t...\n]\n```\n\n----------------------------------------\n\nTITLE: Editing Caddy Configuration\nDESCRIPTION: Command to edit the Caddy configuration file for domain and reverse proxy settings.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/hetzner.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnano caddy_config/Caddyfile\n```\n\n----------------------------------------\n\nTITLE: Getting Current Node Version in n8n JavaScript\nDESCRIPTION: Retrieves the version of the current node being executed. This metadata property is available for use within the Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/n8n-metadata.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n$nodeVersion\n```\n\n----------------------------------------\n\nTITLE: Getting Current Node in n8n AI Workflow\nDESCRIPTION: Method to retrieve the current node in an n8n AI workflow.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/integrations/builtin/cluster-nodes/langchain-root-nodes/langchaincode/builtin-methods.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n`this.getNode()`\n```\n\n----------------------------------------\n\nTITLE: Outlook.com Connection Error Resolution Steps\nDESCRIPTION: Troubleshooting steps for resolving connection errors when using Outlook.com IMAP with multiple email clients.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/imap/outlook.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. Go to [account.live.com/activity] and sign in using the email address and password of the affected account.\n1. Under **Recent activity**, find the **Session Type** event that matches the most recent time you received the connection error. Select it to expand the details.\n1. Select **This was me** to approve the IMAP connection.\n1. Retest your n8n credential.\n```\n\n----------------------------------------\n\nTITLE: Adding Parameter Hint to UI Element in TypeScript\nDESCRIPTION: Demonstrates how to add a hint to a UI element by including the 'hint' parameter in the element's configuration object.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/creating-nodes/build/reference/ui-elements.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\tdisplayName: 'URL',\n\tname: 'url',\n\ttype: 'string',\n\thint: 'Enter a URL',\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Credential Overwrites using cURL\nDESCRIPTION: Uses cURL to send the OAuth credential overwrites JSON file to the n8n instance, applying the overwrites through the configured endpoint.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/embed/configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl -H \"Content-Type: application/json\" --data @oauth-credentials.json http://localhost:5678/send-credentials\n```\n\n----------------------------------------\n\nTITLE: Unsetting n8n Diagnostics Configuration\nDESCRIPTION: Environment variable configuration to unset external frontend hooks and diagnostics configurations for both frontend and backend.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/configuration-examples/isolation.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nEXTERNAL_FRONTEND_HOOKS_URLS=\nN8N_DIAGNOSTICS_CONFIG_FRONTEND=\nN8N_DIAGNOSTICS_CONFIG_BACKEND=\n```\n\n----------------------------------------\n\nTITLE: Setting Field Name Example for Media Messages\nDESCRIPTION: Example showing the correct way to reference field names for media messages in WhatsApp Business Cloud node. Instead of using expressions, use direct field name references for media content.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.whatsapp/common-issues.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndata\n```\n\n----------------------------------------\n\nTITLE: Specifying Column Data Types in TimescaleDB\nDESCRIPTION: Demonstrates how to specify data types for columns when working with TimescaleDB node. The example shows how to define integer and text data types for 'id' and 'name' columns respectively.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.timescaledb.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nid:int,name:text\n```\n\n----------------------------------------\n\nTITLE: Constructing API Playground Path in n8n\nDESCRIPTION: This snippet shows how n8n constructs the path to access the API playground using environment variables. It includes the host, port, path, and API version number.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/api/using-api-playground.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nN8N_HOST:N8N_PORT/N8N_PATH/api/v<api-version-number>/docs\n```\n\n----------------------------------------\n\nTITLE: Embedding Workflow Demo MkDocs Macro\nDESCRIPTION: This macro is used to embed an interactive demo of an n8n workflow directly into the documentation page. It takes the URL or ID of the workflow template as a parameter to load and display the specific workflow.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs-site-feature-tests/index.md#_snippet_0\n\nLANGUAGE: MkDocs Macro\nCODE:\n```\n[[ workflowDemo(\"https://api.n8n.io/workflows/templates/655\") ]]\n```\n\n----------------------------------------\n\nTITLE: Viewing Docker Compose Configuration\nDESCRIPTION: Command to view the Docker Compose configuration file.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/hetzner.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnano docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Accessing Row ID from Get All Operation in n8n\nDESCRIPTION: Use this expression in n8n to access the Row ID returned by the Get All operation of the Grist node. This is helpful when you need to reference specific rows for update or delete operations.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.grist.md#2025-04-22_snippet_1\n\nLANGUAGE: expression\nCODE:\n```\n{{$node[\"GristNodeName\"].json[\"id\"]}}\n```\n\n----------------------------------------\n\nTITLE: Querying Postgres Server Port\nDESCRIPTION: SQL query to retrieve the server port of the Postgres instance. This can be used to confirm the port number for the credential configuration.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/postgres.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT inet_server_port();\n```\n\n----------------------------------------\n\nTITLE: Send Sticker Operation Parameters\nDESCRIPTION: Documentation for sending static .WEBP, animated .TGS, or video .WEBM stickers via Telegram Bot API, including required parameters and additional fields.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.telegram/message-operations.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n* **Chat ID**: @channelusername\n* **Binary File**: Toggle for sending binary files\n* **Sticker**: file_id or HTTP URL\n* **Disable Notification**: Silent notification toggle\n* **Message Thread ID**: Forum topic identifier\n```\n\n----------------------------------------\n\nTITLE: Gmail Parameter Loading Error Message\nDESCRIPTION: Example error message that appears when there are issues loading parameter options, typically related to Google Service Account credentials without proper impersonation settings.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.gmail/common-issues.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nThere was a problem loading the parameter options from server: \"Forbidden - perhaps check your credentials?\"\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration for Vector Store\nDESCRIPTION: Configuration options for controlling memory usage in the Simple Vector Store node through environment variables. Defines maximum memory and time-to-live settings.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoreinmemory.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n | Variable                      | Type   | Default | Description                                                                         |\n |-------------------------------|--------|---------|-------------------------------------------------------------------------------------||\n | `N8N_VECTOR_STORE_MAX_MEMORY` | Number | -1      | Maximum memory in MB allowed for all vector stores combined (-1 to disable limits). |\n | `N8N_VECTOR_STORE_TTL_HOURS`  | Number | -1      | Hours of inactivity after which a store gets removed (-1 to disable TTL).           |\n```\n\n----------------------------------------\n\nTITLE: Adding Variable Checks in Workflow Execution Mode\nDESCRIPTION: Example code showing the variable $mode that was added in n8n@0.105.0 to check which mode the workflow is being executed in.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/release-notes/0-x.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n$mode\n```\n\n----------------------------------------\n\nTITLE: Stopping n8n and Caddy Services\nDESCRIPTION: Command to stop the running n8n and Caddy services managed by Docker Compose.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/hetzner.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsudo docker compose stop\n```\n\n----------------------------------------\n\nTITLE: Defining Category Item Data Schema Using JSON Schema - JSON\nDESCRIPTION: This snippet provides the JSON Schema (draft-07) for validating 'category' objects returned by the n8n templates API. Essential properties include a numeric 'id' and the string 'name', both required. This ensures API consistency for all endpoints which deliver category items, and any response object must align with this schema.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/workflows/templates/custom-templates-library.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"number\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"id\",\n    \"name\"\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude Desktop for MCP Server Trigger Integration in JSON\nDESCRIPTION: This JSON configuration snippet demonstrates how to set up Claude Desktop to connect with the MCP Server Trigger node in n8n. It uses a gateway to proxy SSE messages to stdio-based servers, requiring the MCP URL and bearer token to be replaced with actual values.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-langchain.mcptrigger.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"n8n\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"supergateway\",\n        \"--sse\",\n        \"<MCP_URL>\",\n        \"--header\",\n        \"Authorization: Bearer <MCP_BEARER_TOKEN>\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Milliseconds in ISO 8601 Duration\nDESCRIPTION: Shows how milliseconds are represented within an ISO 8601 duration string. They are expressed as decimal seconds (S). For instance, 2.1 milliseconds is represented as '0.0021S'.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.datetime.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n0.0021S\n```\n\n----------------------------------------\n\nTITLE: IdP Documentation References Table\nDESCRIPTION: Markdown table listing common Identity Providers and their corresponding documentation links for SAML configuration.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/user-management/saml/setup.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| IdP | Documentation |\n| --- | ------------- |\n| Auth0 | [Configure Auth0 as SAML Identity Provider: Manually configure SSO integrations](https://auth0.com/docs/authenticate/protocols/saml/saml-sso-integrations/configure-auth0-saml-identity-provider#manually-configure-sso-integrations){:target=_blank .external-link} |\n| Authentik | [Applications](https://goauthentik.io/docs/applications){:target=_blank .external-link} and the [SAML Provider](https://goauthentik.io/docs/providers/saml/){:target=_blank .external-link} |\n| Azure AD | [SAML authentication with Azure Active Directory](https://learn.microsoft.com/en-us/azure/active-directory/fundamentals/auth-saml){:target=_blank .external-link} |\n| Keycloak | Choose a [Getting Started](https://www.keycloak.org/guides#getting-started){:target=_blank .external-link} guide depending on your hosting. |\n| Okta | n8n provides a [Workforce Identity setup guide](/user-management/saml/okta.md) |\n| PingIdentity | [PingOne SSO](https://docs.pingidentity.com/pingone/getting_started_with_pingone/p1_p1sso_start.html){:target=_blank .external-link} |\n```\n\n----------------------------------------\n\nTITLE: Checking n8n License Information Command\nDESCRIPTION: Command to retrieve license information for self-hosted n8n users\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/release-notes/0-x.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nn8n license:info\n```\n\n----------------------------------------\n\nTITLE: Getting Node Version in n8n JavaScript Expressions\nDESCRIPTION: Retrieves the version of the current node. This variable is available in expressions but *not* within the Code node. Use `$nodeVersion` inside the Code node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/n8n-metadata.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n$version\n```\n\n----------------------------------------\n\nTITLE: Including Jenkins Credentials Snippet in Markdown\nDESCRIPTION: This code snippet uses a custom Markdown syntax to include a reference to Jenkins credentials documentation. It provides guidance on setting up authentication for the Jenkins node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.jenkins.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n/// note | Credentials\nRefer to [Jenkins credentials](/integrations/builtin/credentials/jenkins.md) for guidance on setting up authentication. \n///\n```\n\n----------------------------------------\n\nTITLE: Retriever connection error resolution\nDESCRIPTION: Instructions for resolving the 'A Retriever sub-node must be connected' error by properly connecting a Retriever to the node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainretrievalqa/common-issues.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nTo resolve this, click the + Retriever button at the bottom of your screen when the node is open, or click the Retriever + connector when the node isn't open. n8n will then open a selection of possible Retrievers to pick from.\n```\n\n----------------------------------------\n\nTITLE: Extracting Specific Properties from Linked Items in n8n\nDESCRIPTION: This expression extracts the name property from a linked item in a previous node. It accesses the JSON data of the linked item and retrieves a specific field.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/data/data-mapping/data-mapping-expressions.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n{{$(\"<node-name>\").item.json.name}}\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration block defining the content type, title, and description for the documentation page.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/advanced-ai/examples/data-google-sheets.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ncontentType: howto\ntitle: Chat with a Google Sheet using AI\ndescription: Use the n8n workflow tool to load data from Google Sheets into your AI workflow.\n---\n```\n\n----------------------------------------\n\nTITLE: Registering Frontend Hooks in HTML\nDESCRIPTION: This snippet shows how to register frontend hooks by adding a script tag to the editor-ui/public/index.html file. This method loads the hooks script on the page.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/embed/configuration.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"frontend-hooks.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: API Response for Creating Airtable Credentials (JSON)\nDESCRIPTION: This snippet shows the expected response from the n8n API when creating Airtable credentials. It includes the newly created credential's ID, which is used when creating user-specific workflows.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/embed/managing-workflows.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"data\":{\n      \"name\":\"MyAirtable\",\n      \"type\":\"airtableApi\",\n      \"data\":{\n         \"apiKey\":\"q12we34r5t67yu\"\n      },\n      \"nodesAccess\":[\n         {\n            \"nodeType\":\"n8n-nodes-base.airtable\",\n            \"date\":\"2021-09-10T07:41:27.770Z\"\n         }\n      ],\n      \"id\":\"29\",\n      \"createdAt\":\"2021-09-10T07:41:27.777Z\",\n      \"updatedAt\":\"2021-09-10T07:41:27.777Z\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: License Management Commands\nDESCRIPTION: Commands for managing n8n license, including clearing existing license and displaying license information.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/cli-commands.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nn8n license:clear\n```\n\nLANGUAGE: sh\nCODE:\n```\nn8n license:info\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Volumes for Caddy and n8n\nDESCRIPTION: Commands to create Docker volumes for persisting Caddy cache and n8n data between restarts.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/hetzner.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker volume create caddy_data\nsudo docker volume create n8n_data\n```\n\n----------------------------------------\n\nTITLE: Customizing Theme Colors in SCSS\nDESCRIPTION: Example of modifying the primary color in the n8n design system's SCSS file.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/embed/white-labelling.md#2025-04-22_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@mixin theme {\n\t--color-primary-h: 6.9;\n\t--color-primary-s: 100%;\n\t--color-primary-l: 67.6%;\n```\n\nLANGUAGE: scss\nCODE:\n```\n@mixin theme {\n\t--color-primary-h: 204;\n\t--color-primary-s: 100%;\n\t--color-primary-l: 50%;\n```\n\n----------------------------------------\n\nTITLE: Including External Markdown Files - Output Format\nDESCRIPTION: Reference to an external markdown file containing output format configuration details\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent/react-agent.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/cluster-nodes/langchain-root-nodes/output-format.md\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Airtable 'Forbidden' Error Message\nDESCRIPTION: This snippet shows an example of the 'Forbidden - perhaps check your credentials?' error message displayed in n8n when attempting an Airtable operation without sufficient access permissions. This typically occurs if the credentials used lack the necessary scopes for the target resource.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.airtable/common-issues.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThere was a problem loading the parameter options from server: \"Forbidden - perhaps check your credentials?\"\n```\n\n----------------------------------------\n\nTITLE: Illustrating a Simple JSON Object\nDESCRIPTION: This snippet shows a basic JSON object with two key-value pairs ('name' and 'color') to illustrate the fundamental structure of objects used in data handling within n8n.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/courses/level-two/chapter-1.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n\tname: 'Michelangelo',\n\tcolor: 'blue',\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Audio Translation Parameters\nDESCRIPTION: Configuration parameters for translating audio to English using OpenAI's whisper-1 model. Includes input specifications and temperature settings.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-langchain.openai/audio-operations.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- Credential to connect with: Create or select an existing OpenAI credential\n- Resource: Select Audio\n- Operation: Select Translate a Recording\n- Input Data Field Name: Default 'data'\n- Supported formats: .flac, .mp3, .mp4, .mpeg, .mpga, .m4a, .ogg, .wav, .webm\n- Output Randomness (Temperature): 0.0 to 1.0\n```\n\n----------------------------------------\n\nTITLE: Telegram API Error Message Example\nDESCRIPTION: Example of the error message received when a bot is not added as a participant to a channel.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.telegram/common-issues.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nError: Forbidden: bot is not a participant of the channel\n```\n\n----------------------------------------\n\nTITLE: Markdown Cloud OAuth Callback URL\nDESCRIPTION: OAuth callback URL format for cloud-hosted n8n instances.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/formstacktrigger.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://oauth.n8n.cloud/oauth2/callback\n```\n\n----------------------------------------\n\nTITLE: Send Location Operation Parameters\nDESCRIPTION: Parameters for sending geographic locations to Telegram chats using the sendLocation method. Requires latitude and longitude coordinates.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.telegram/message-operations.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* Chat ID: @channelusername format\n* Latitude: Location latitude\n* Longitude: Location longitude\n* Disable Notification: Optional silence setting\n* Reply To Message ID: Optional reference message\n```\n\n----------------------------------------\n\nTITLE: Send Chat Action Operation Parameters\nDESCRIPTION: Parameters for sending chat actions to indicate bot activity using the sendChatAction method. Allows setting temporary status indicators for the bot.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.telegram/message-operations.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* Chat ID: @channelusername format\n* Action: Find Location, Typing, Recording, Uploading\n```\n\n----------------------------------------\n\nTITLE: Assistant Instructions Configuration\nDESCRIPTION: System instructions defining the assistant's persona, response style, and interaction guidelines\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-langchain.openai/assistant-operations.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAlways respond in a friendly and engaging manner. When a user asks a question, provide a concise answer first, followed by a brief explanation or additional context if necessary. If the question is open-ended, offer a suggestion or ask a clarifying question to guide the conversation. Keep the tone positive and supportive, and avoid technical jargon unless specifically requested by the user.\n```\n\n----------------------------------------\n\nTITLE: Configuring Adalo Credentials for n8n - Markdown\nDESCRIPTION: This snippet provides a detailed step-by-step guide in Markdown format for obtaining and setting up Adalo credentials within the n8n automation platform. Users are instructed on creating an app in Adalo, generating an API key, and locating the App ID needed for authentication. The guide includes critical prerequisites such as requiring an Adalo Team or Business plan and offers troubleshooting notes if the correct plan level is not met. Input parameters include the Adalo API Key and App ID, both of which are required to enable integration with n8n nodes. The output is a correctly configured Adalo credential in the n8n system; constraints relate to necessary Adalo plan level and accuracy of provided credentials.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/adalo.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Adalo credentials\n\nYou can use these credentials to authenticate the following nodes:\n\n- [Adalo](/integrations/builtin/app-nodes/n8n-nodes-base.adalo.md)\n\n/// note | API access\nYou need a Team or Business plan to use the Adalo APIs.\n///\n\n## Supported authentication methods\n\n- API key\n\n## Related resources\n\nRefer to [Adalo's API collections documentation](https://help.adalo.com/integrations/the-adalo-api/collections){:target=_blank .external-link} for more information about working with the service.\n\n## Using API key\n\nTo configure this credential, you'll need an [Adalo](https://www.adalo.com/){:target=_blank .external-link} account and:\n\n- An **API Key**\n- An **App ID**\n\nTo get these, create an Adalo app:\n\n1. From the app dropdown in the top navigation, select **CREATE NEW APP**.\n1. Select the App Layout type that makes sense for you and select **Next**.\n    - If you're new to using the product, Adalo recommend using **Mobile Only**.\n1. Select a template to get started with or select **Blank**, then select **Next**.\n1. Enter an **App Name**, like `n8n integration`.\n1. If applicable, select the **Team** for the app.\n1. Select branding colors.\n1. Select **Create**. The app editor opens.\n1. In the left menu, select **Settings** (the gear cog icon).\n1. Select **App Access**.\n1. In the **API Key** section, select **Generate Key**.\n    - If you don't have the correct plan level, you'll see a prompt to upgrade instead.\n1. Copy the key and enter it as the **API Key** in your n8n credential.\n1. The URL includes the **App ID** after `https://app.adalo.com/apps/`. For example, if the URL for your app is `https://app.adalo.com/apps/b78bdfcf-48dc-4550-a474-dd52c19fc371/app-settings`, `b78bdfcf-48dc-4550-a474-dd52c19fc371` is the App ID. Copy this value and enter it in your n8n credential.\n\nRefer to [Creating an app](https://help.adalo.com/design/designing-your-app/creating-an-app){:target=_blank .external-link} for more information on creating apps in Adalo. Refer to [The Adalo API](https://help.adalo.com/integrations/the-adalo-api){:target=_blank .external-link} for more information on generating API keys.\n```\n\n----------------------------------------\n\nTITLE: Converting Data to HTML Table in n8n\nDESCRIPTION: Configure options for converting input data to an HTML table, including custom styling and attributes for various table elements. This snippet shows the structure of the conversion options.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.html.md#2025-04-22_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"capitalizeHeaders\": true,\n  \"customStyling\": true,\n  \"caption\": \"Data Summary\",\n  \"tableAttributes\": \"class=\\\"data-table\\\" style=\\\"border-collapse: collapse;\\\"\",\n  \"headerAttributes\": \"style=\\\"background-color: #f2f2f2;\\\"\",\n  \"rowAttributes\": \"style=\\\"border: 1px solid #ddd;\\\"\",\n  \"cellAttributes\": \"style=\\\"padding: 8px;\\\"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reformatted KoboToolbox Submission Data Example (JSON)\nDESCRIPTION: Shows the same KoboToolbox submission data after enabling n8n's 'Reformat?' option. Field names are adjusted (trimmed '_'), hierarchy is nested following form groups (e.g., 'Field_Details' becomes an object), geospatial fields are converted to GeoJSON, multi-select fields ('Crops_Grown') are split into arrays (using masks like 'Crops_*'), and numeric fields ('Field_Size_sqm') are converted to floats (using masks like '*_sqm').\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.kobotoolbox.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"id\": 471987,\n  \"formhub\": {\n    \"uuid\": \"189436bb09a54957bfcc798e338b54d6\"\n  },\n  \"start\": \"2021-12-05T16:13:38.527+02:00\",\n  \"end\": \"2021-12-05T16:15:33.407+02:00\",\n  \"Field_Details\": {\n    \"Field_Name\": \"Test Fields\",\n    \"Field_Location\": {\n      \"lat\": -1.932914,\n      \"lon\": 30.078211\n    },\n    \"Field_Shape\": {\n      \"type\": \"polygon\",\n      \"coordinates\": [\n        {\n          \"lat\": -1.932914,\n          \"lon\": 30.078211\n        },\n        {\n          \"lat\": -1.933011,\n          \"lon\": 30.078085\n        },\n        {\n          \"lat\": -1.933257,\n          \"lon\": 30.078004\n        },\n        {\n          \"lat\": -1.933338,\n          \"lon\": 30.078197\n        },\n        {\n          \"lat\": -1.933107,\n          \"lon\": 30.078299\n        },\n        {\n          \"lat\": -1.932914,\n          \"lon\": 30.078211\n        }\n      ]\n    },\n    \"Crops_Grown\": [\n      \"maize\",\n      \"beans\",\n      \"avocado\"\n    ],\n    \"Field_Size_sqm\": 2300\n  },\n  \"version\": \"veGcULpqP6JNFKRJbbMvMs\",\n  \"meta\": {\n    \"instanceID\": \"uuid:2356cbbe-c1fd-414d-85c8-84f33e92618a\"\n  },\n  \"xform_id_string\": \"ajXVJpBkTD5tB4Nu9QXpgm\",\n  \"uuid\": \"2356cbbe-c1fd-414d-85c8-84f33e92618a\",\n  \"attachments\": [],\n  \"status\": \"submitted_via_web\",\n  \"geolocation\": {\n    \"lat\": -1.932914,\n    \"lon\": 30.078211\n  },\n  \"submission_time\": \"2021-12-05T14:15:44\",\n  \"tags\": [],\n  \"notes\": [],\n  \"validation_status\": {},\n  \"submitted_by\": null\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Main Input Data in n8n AI Node\nDESCRIPTION: Method to get data from the main input of an n8n AI node. Optionally allows specifying input index or name.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/integrations/builtin/cluster-nodes/langchain-root-nodes/langchaincode/builtin-methods.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`this.getInputData(inputIndex?, inputName?)`\n```\n\n----------------------------------------\n\nTITLE: LangChain Expression Templates for SQL AI Agent\nDESCRIPTION: Available LangChain expressions that can be used in the Suffix Prompt field of the SQL AI Agent node configuration.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent/sql-agent.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `{chatHistory}`: A history of messages in this conversation, useful for maintaining context.\n* `{input}`: Contains the user prompt.\n* `{agent_scratchpad}`: Information to remember for the next iteration.\n```\n\n----------------------------------------\n\nTITLE: Deploying n8n to Heroku with One-Click Button\nDESCRIPTION: A markdown snippet for a 'Deploy to Heroku' button that creates a new Heroku app using a predefined template.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/installation/server-setups/heroku.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://dashboard.heroku.com/new?template=https://github.com/n8n-io/n8n-heroku/tree/main)\n```\n\n----------------------------------------\n\nTITLE: Image Operations Documentation\nDESCRIPTION: Documents image-related operations including QR code processing, EXIF metadata extraction, barcode generation, and image manipulation functions.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.uproc.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Image\\n- Get QR code decoded content by an image URL\\n- It allows discovering all geographical and technical EXIF metadata present in a photographic JPEG image\\n- Get an encoded barcode by number and a required standard...\n```\n\n----------------------------------------\n\nTITLE: Gong Node Operations Structure - Markdown\nDESCRIPTION: Lists the supported operations for the Gong node, including call and user management capabilities.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.gong.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Call\n\t* Get\n\t* Get Many\n* User\n\t* Get\n\t* Get Many\n```\n\n----------------------------------------\n\nTITLE: Adding Output Data to n8n AI Node\nDESCRIPTION: Method to populate data for a specified non-main output in an n8n AI node. Used for mocking data with specific output types.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/integrations/builtin/cluster-nodes/langchain-root-nodes/langchaincode/builtin-methods.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`this.addOutputData(outputName, data)`\n```\n\n----------------------------------------\n\nTITLE: WordPress Node Operations List\nDESCRIPTION: Markdown list of supported operations for WordPress node including post, page and user management functionalities.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.wordpress.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Post\n    * Create a post\n    * Get a post\n    * Get all posts\n    * Update a post\n* Pages\n    * Create a page\n    * Get a page\n    * Get all pages\n    * Update a page\n* User\n    * Create a user\n    * Get a user\n    * Get all users\n    * Update a user\n```\n\n----------------------------------------\n\nTITLE: ISO 8601 Duration Format Structure\nDESCRIPTION: Defines the general structure of an ISO 8601 duration string used for representing time periods. It starts with 'P' (period), followed by number-unit pairs for years (Y), months (M), weeks (W), and days (D). A 'T' delineator separates date units from time units: hours (H), minutes (M), and seconds (S). '<n>' represents the number for the following unit.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.datetime.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nP<n>Y<n>M<n>DT<n>H<n>M<n>S\n```\n\n----------------------------------------\n\nTITLE: LangChain Code Node Configuration Example\nDESCRIPTION: Code snippet showing the configuration structure for LangChain Code node inputs and outputs in a table format\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.code.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Node type | Inputs | Outputs | Code mode |\n| --------- | ------ | ------- | --------- |\n| App node. Similar to the Code node | Main | Main | Execute |\n| Root node | Main; at least one other type | Main | Execute |\n| Sub-node | - | A type other than main. Must match the input type you want to connect to. | Supply Data |\n| Sub-node with sub-nodes | A type other than main |A type other than main. Must match the input type you want to connect to. | Supply Data |\n```\n\n----------------------------------------\n\nTITLE: Installing Git in Docker Images\nDESCRIPTION: Adds git to all Docker images used by n8n.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/release-notes/0-x.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nCLI: add git to all Docker images\n```\n\n----------------------------------------\n\nTITLE: Sample Input Data Format in JavaScript\nDESCRIPTION: Example of input data structure used for demonstrating query parameter usage in Postgres operations.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.postgres/index.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[\n    {\n        \"email\": \"alex@example.com\",\n        \"name\": \"Alex\",\n        \"age\": 21 \n    },\n    {\n        \"email\": \"jamie@example.com\",\n        \"name\": \"Jamie\",\n        \"age\": 33 \n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Row ID Column in Grist\nDESCRIPTION: Create a new column in your Grist table with the formula $id to generate Row IDs for each record. This is useful for operations that require a specific Row ID.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.grist.md#2025-04-22_snippet_0\n\nLANGUAGE: grist\nCODE:\n```\n$id\n```\n\n----------------------------------------\n\nTITLE: LinkedIn Node Parameters Example\nDESCRIPTION: Markdown formatted parameters documentation showing the configuration options for the LinkedIn node, including posting options and media settings.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.linkedin.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* **Post As**: choose whether to post as a **Person** or **Organization**.\n* **Person Name or ID** and **Organization URN**: enter an identifier for the person or organization.\n* **Text**: the post contents.\n* **Media Category**: use this when including images or article URLs in your post.\n```\n\n----------------------------------------\n\nTITLE: Example Output Data from Edit Fields Node (JSON)\nDESCRIPTION: This JSON snippet illustrates the data after being processed by the 'Edit Fields' node. The data has been simplified, retaining only the 'name' field for each item from the original 'Customer Datastore' output.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/builtin/itemmatching.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\n\t\t\"name\": \"Jay Gatsby\"\n\t},\n\t{\n\t\t\"name\": \"José Arcadio Buendía\"\n\t},\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Fixing BASE_URL Replacement on Windows\nDESCRIPTION: Ensures the BASE_URL replacement works correctly on Windows systems in the n8n editor.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/release-notes/0-x.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nEditor: ensure BASE_URL replacement works correctly on Windows.\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up n8n Documentation Repository\nDESCRIPTION: This snippet shows how to clone the n8n documentation repository with submodules, navigate to the project directory, and install the required dependencies. It's intended for members of the n8n GitHub organization.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --recurse-submodules git@github.com:n8n-io/n8n-docs.git\ncd n8n-docs\n# Set up virtual environment if using one (steps depend on your system)\n# Install dependencies\npip install -r requirements.txt\npip install _submodules/insiders\n```\n\n----------------------------------------\n\nTITLE: Source Control Permissions Info Block\nDESCRIPTION: Markdown info block specifying the Enterprise availability and required permissions for using source control features in n8n.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/source-control-environments/feature-availability.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n/// info | Feature availability\n* Available on Enterprise.\n* You need to be an n8n instance owner, admin, or project owner to set up source control, and to send work to and from Git.\n///\n```\n\n----------------------------------------\n\nTITLE: Using Schema Registry with Kafka Node in n8n\nDESCRIPTION: The Kafka node was enhanced in version 0.158.0 to support using a Schema Registry.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/release-notes/0-x.md#2025-04-22_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n* [Kafka:](/integrations/builtin/app-nodes/n8n-nodes-base.kafka.md) Added Use Schema Registry option.\n```\n\n----------------------------------------\n\nTITLE: Example Output Data from Customer Datastore Node (JSON)\nDESCRIPTION: This JSON snippet shows example output data from the initial 'Customer Datastore' node in the workflow. Each object represents a customer with properties like id, name, email, notes, country, and created date. This data serves as the starting point for subsequent processing.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/cookbook/builtin/itemmatching.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\n\t\t\"id\": \"23423532\",\n\t\t\"name\": \"Jay Gatsby\",\n\t\t\"email\": \"gatsby@west-egg.com\",\n\t\t\"notes\": \"Keeps asking about a green light??\",\n\t\t\"country\": \"US\",\n\t\t\"created\": \"1925-04-10\"\n\t},\n\t{\n\t\t\"id\": \"23423533\",\n\t\t\"name\": \"José Arcadio Buendía\",\n\t\t\"email\": \"jab@macondo.co\",\n\t\t\"notes\": \"Lots of people named after him. Very confusing\",\n\t\t\"country\": \"CO\",\n\t\t\"created\": \"1967-05-05\"\n\t},\n\t...\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Up n8n Documentation for External Contributors\nDESCRIPTION: This snippet demonstrates how external contributors can fork the repository, clone it, navigate to the project directory, and install the required dependencies using the free version of Material for MkDocs.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<your-username>/n8n-docs.git\ncd n8n-docs\npip install -r requirements.txt\npip install mkdocs-material\n```\n\n----------------------------------------\n\nTITLE: Serving Local Preview of n8n Documentation\nDESCRIPTION: This snippet shows how to serve a local preview of the n8n documentation using MkDocs. This command is used after setting up the repository and installing dependencies.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdocs serve\n```\n\n----------------------------------------\n\nTITLE: Embedding Expression Resolution Documentation with Markdown Includes\nDESCRIPTION: This snippet shows the inclusion of a shared Markdown file for sub-node expression resolution using the '8<--' delimiter, an n8n documentation convention. Dependencies include the shared snippet designated at '_snippets/integrations/builtin/cluster-nodes/sub-node-expression-resolution.md'. Inputs require a valid path to the snippet, and output is the expanded documentation where the content is rendered. This enables reuse and standardization of supporting documentation across integration pages.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.toolcalculator.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/cluster-nodes/sub-node-expression-resolution.md\"\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up n8n Documentation Repository\nDESCRIPTION: Commands for cloning a forked n8n-docs repository, creating a new branch, and pushing changes. These steps are required for contributors working locally on documentation changes.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<your-username>/n8n-docs.git\ncd n8n-docs\ngit checkout -b <branch-name>\n```\n\n----------------------------------------\n\nTITLE: Linking Related Tools Documentation using Markdown Includes\nDESCRIPTION: This snippet references an external shared Markdown snippet for related tool documentation via the n8n include syntax. It's dependent on the existence of the file at '_snippets/integrations/builtin/cluster-nodes/tools-link.md' and will substitute this reference with the content of that snippet when rendered. This pattern maintains consistency across related documentation sections and simplifies updates.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.toolcalculator.md#2025-04-22_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/cluster-nodes/tools-link.md\"\n```\n\n----------------------------------------\n\nTITLE: Calling Sub-workflows in n8n Documentation\nDESCRIPTION: Markdown documentation explaining how to call a sub-workflow from a parent workflow, including node configuration and execution flow tracking.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/flow-logic/subworkflow-usage.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Call the sub-workflow\n\n1. Open the workflow where you want to call the sub-workflow.\n2. Add the **Execute Sub-workflow** node.\n3. Set the sub-workflow you want to call.\n4. Fill in the required input items defined by the sub-workflow.\n5. Save your workflow.\n```\n\n----------------------------------------\n\nTITLE: Rendering Templates Widget with Limit MkDocs Macro\nDESCRIPTION: This macro functions similarly to the basic templates widget but includes an additional parameter to limit the number of results displayed. It allows showcasing a specific, controlled number of templates matching the filters.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs-site-feature-tests/index.md#_snippet_2\n\nLANGUAGE: MkDocs Macro\nCODE:\n```\n[[ templatesWidget('HTTP Request', 'http-request', 5) ]]\n```\n\n----------------------------------------\n\nTITLE: Embedding an n8n Workflow Demo using Directive\nDESCRIPTION: This markdown directive embeds an interactive demonstration of an n8n workflow defined in the `chat_complete.json` file. It allows users to view the final workflow configuration discussed in the tutorial. It relies on the n8n documentation platform's specific processing of the `workflowDemo` directive.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/advanced-ai/intro-tutorial.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[[ workflowDemo(\"file:////advanced-ai/tutorials/chat_complete.json\") ]]\n```\n\n----------------------------------------\n\nTITLE: Adding Expandable Explanation Sections\nDESCRIPTION: Demonstrates how to create collapsible explanation sections for additional details.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/document-templates/tutorial.md#2025-04-22_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n??? explanation \"More about the Chat Trigger node...\"\n    The trigger node generates output when there is an event causing it to trigger. In this case we want to be able to type in text to cause the workflow to run. In production, this trigger can be hooked up to a public chat interface as provided by n8n or embedded into another website. To start this simple workflow we will just use the built-in local chat interface to communicate, so no further setup is required.\n```\n\n----------------------------------------\n\nTITLE: Creating Assistant Description Example\nDESCRIPTION: Example description for creating a virtual assistant that defines its primary functions and capabilities\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-langchain.openai/assistant-operations.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nA virtual assistant that helps users with daily tasks, including setting reminders, answering general questions, and providing quick information.\n```\n\n----------------------------------------\n\nTITLE: Gmail Label Visibility Options\nDESCRIPTION: Configuration options for controlling label visibility in Gmail's web interface, including options for label list visibility and message list visibility.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.gmail/label-operations.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* **Label List Visibility**: Sets the visibility of the label in the label list in the Gmail web interface. Choose from:\n    * **Hide**: Don't show the label in the label list.\n    * **Show** (default): Show the label in the label list.\n    * **Show if Unread**: Show the label if there are any unread messages with that label.\n* **Message List Visibility**: Sets the visibility of messages with this label in the message list in the Gmail web interface. Choose whether to **Show** or **Hide** messages with this label.\n```\n\n----------------------------------------\n\nTITLE: Including Shared Content Snippets in n8n Docs (Markdown)\nDESCRIPTION: This snippet illustrates including shared content from another documentation file using the '--8<--' directive, commonly supported by some documentation toolchains. It inserts predefined content, here specific to unsupported operations for Philips Hue, aiding in DRY (Don't Repeat Yourself) documentation. The dependency is on the documentation platform’s ability to process include directives, and the file path must be valid. The input is a file path string; the output is the rendered inserted content.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.philipshue.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/app-nodes/operation-not-supported.md\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Lemlist Node Documentation Metadata (YAML)\nDESCRIPTION: YAML frontmatter block defining metadata for the Lemlist node documentation page, including its title, description, and content type (integration reference). This metadata is likely used by the documentation site generator.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.lemlist.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n#https://www.notion.so/n8n/Frontmatter-432c2b8dff1f43d4b1c8d20075510fe4\ntitle: Lemlist node documentation\ndescription: Learn how to use the Lemlist node in n8n. Follow technical documentation to integrate Lemlist node into your workflows.\ncontentType: [integration, reference]\n---\n```\n\n----------------------------------------\n\nTITLE: Hacker News Node Configuration Template\nDESCRIPTION: Markdown template that defines the content structure and metadata for the Hacker News node documentation, including frontmatter configuration.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.hackernews.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Hacker News node documentation\ndescription: Learn how to use the Hacker News node in n8n. Follow technical documentation to integrate Hacker News node into your workflows.\ncontentType: [integration, reference]\npriority: medium\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Sub-workflows in n8n Documentation\nDESCRIPTION: Markdown documentation detailing the steps to create a sub-workflow, including configuration options, input data modes, and important notes about workflow execution and data loading.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/flow-logic/subworkflow-usage.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Create the sub-workflow\n\n1. Create a new workflow.\n\n2. **Optional**: configure which workflows can call the sub-workflow:\n\t1. Select the **Options** menu > **Settings**. n8n opens the **Workflow settings** modal.\n\t1. Change the **This workflow can be called by** setting.\n\n3. Add the **Execute Sub-workflow** trigger node.\n\n4. Set the **Input data mode** to choose how you will define the sub-workflow's input data:\n\t* **Define using fields below**\n\t* **Define using JSON example**\n\t* **Accept all data**\n\n5. Add other nodes as needed\n6. Save the sub-workflow.\n```\n\n----------------------------------------\n\nTITLE: Send Audio Operation Parameters\nDESCRIPTION: Configuration parameters for sending audio files to Telegram chats using the Bot API sendAudio method. Includes basic and additional fields for customizing audio messages.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.telegram/message-operations.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Chat ID: @channelusername format\n* Binary File: Toggle for sending binary files\n* Audio: file_id or HTTP URL\n* Caption: Max 1024 characters\n* Duration: In seconds\n* Parse Mode: HTML, Markdown, MarkdownV2\n* Performer: Name of performer\n* Title: Audio track name\n```\n\n----------------------------------------\n\nTITLE: Configuring Ignore Bots Option in Wait and Webhook Nodes\nDESCRIPTION: The Wait and Webhook nodes were enhanced in version 0.157.0 to add an option to ignore requests from bots.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/release-notes/0-x.md#2025-04-22_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n* [Wait:](/integrations/builtin/core-nodes/n8n-nodes-base.wait.md) Added new Ignore Bots option.\n* [Webhook:](/integrations/builtin/core-nodes/n8n-nodes-base.webhook/index.md) Added new Ignore Bots option.\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration defining the document type and description for the workflow executions documentation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/workflows/executions/single-workflow-executions.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndescription: View and filter all executions for the workflow currently open on the canvas.\ncontentType: howto\n---\n```\n\n----------------------------------------\n\nTITLE: Initializing Tutorial Frontmatter in Markdown\nDESCRIPTION: Defines the frontmatter metadata for the tutorial document, including description and content type.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/document-templates/tutorial.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndescription: Learn how to build AI workflows with n8n\ntype: tutorial\n---\n```\n\n----------------------------------------\n\nTITLE: Embedding Debug Helper Templates/Examples via Widget\nDESCRIPTION: This directive/macro is used within the n8n documentation system (potentially linked to Notion as per comments) to dynamically embed relevant templates or examples for the Debug Helper node. It calls a 'templatesWidget' function, passing the current page title (`page.title`) and the node identifier ('debughelper') to fetch appropriate content.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.debughelper.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[[ templatesWidget(page.title, 'debughelper') ]]\n```\n\n----------------------------------------\n\nTITLE: Markdown Snippet Inclusion Directive\nDESCRIPTION: This directive includes content from a shared Markdown snippet file located at `_snippets/integrations/builtin/app-nodes/ai-tools.md` into the current document.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.openweathermap.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/app-nodes/ai-tools.md\"\n```\n\n----------------------------------------\n\nTITLE: Including AI Tools Snippet in Markdown\nDESCRIPTION: This code snippet uses a custom Markdown syntax to include content from an external file. It likely contains information about AI tools related to the Jenkins integration.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.jenkins.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/app-nodes/ai-tools.md\"\n```\n\n----------------------------------------\n\nTITLE: UptimeRobot Templates Widget Integration\nDESCRIPTION: Template widget shortcode for displaying UptimeRobot-related templates in the documentation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.uptimerobot.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'uptimerobot') ]]\n```\n\n----------------------------------------\n\nTITLE: Linking to LangChain Overview and AI Glossary using Markdown Includes\nDESCRIPTION: These two snippets incorporate additional documentation for LangChain integration and AI glossary definitions into the Calculator node page through the n8n Markdown include syntax. Dependencies are the target paths, and each include expects the corresponding Markdown resource to exist for proper rendering. This practice supports modular, easily maintained, and interconnected documentation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.toolcalculator.md#2025-04-22_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/cluster-nodes/langchain-overview-link.md\"\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n--8<-- \"_glossary/ai-glossary.md\"\n```\n\n----------------------------------------\n\nTITLE: SIGNL4 Template Widget Implementation\nDESCRIPTION: Liquid template syntax for including SIGNL4-specific templates in the documentation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.signl4.md#2025-04-22_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n[[ templatesWidget(page.title, 'signl4') ]]\n```\n\n----------------------------------------\n\nTITLE: Using Query-based Authentication in HTTP Request Node\nDESCRIPTION: The HTTP Request node was enhanced in version 0.153.0 to support query-based authentication.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/release-notes/0-x.md#2025-04-22_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n* [HTTP Request:](/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/index.md) Added support for query-based authentication.\n```\n\n----------------------------------------\n\nTITLE: Zoom Node Operations List\nDESCRIPTION: List of supported operations for the Zoom node in n8n, including meeting management capabilities.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.zoom.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Meeting\n    * Create a meeting\n    * Delete a meeting\n    * Retrieve a meeting\n    * Retrieve all meetings\n    * Update a meeting\n```\n\n----------------------------------------\n\nTITLE: Including Cloud OAuth Button Snippet in Markdown\nDESCRIPTION: This Markdown directive includes a shared snippet located at '_snippets/integrations/builtin/credentials/cloud-oauth-button.md'. This snippet likely contains reusable content, potentially instructions or a UI element representation (like a button description), related to initiating the OAuth2 authentication flow via n8n's cloud service. It's used here specifically for setting up Box OAuth2 credentials.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/box.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/credentials/cloud-oauth-button.md\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Note Block for Credentials\nDESCRIPTION: Custom note syntax used in n8n documentation to highlight credential information.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/document-templates/trigger-nodes.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n///  note  | Credentials\nYou can find authentication information for this node [here](/integrations/builtin/credentials/_Name_.md).\n///\n```\n\n----------------------------------------\n\nTITLE: Embedding Stackby Workflow Templates\nDESCRIPTION: This snippet utilizes a custom documentation widget or shortcode (`templatesWidget`) to dynamically embed relevant n8n workflow templates related to Stackby. It passes the current page's title and the identifier 'stackby' to fetch and display appropriate templates directly within the documentation page.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.stackby.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[[ templatesWidget(page.title, 'stackby') ]]\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration in Markdown\nDESCRIPTION: YAML frontmatter configuration for the RabbitMQ documentation page, specifying title, description, content type and priority.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.rabbitmq.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: RabbitMQ node documentation\ndescription: Learn how to use the RabbitMQ node in n8n. Follow technical documentation to integrate RabbitMQ node into your workflows.\ncontentType: [integration, reference]\npriority: medium\n---\n```\n\n----------------------------------------\n\nTITLE: Salesmate Node Documentation Frontmatter\nDESCRIPTION: YAML frontmatter configuration for the Salesmate node documentation page, defining the title, description, and content type.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.salesmate.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Salesmate node documentation\ndescription: Learn how to use the Salesmate node in n8n. Follow technical documentation to integrate Salesmate node into your workflows.\ncontentType: [integration, reference]\n---\n```\n\n----------------------------------------\n\nTITLE: Including AI Tools Snippet in Markdown\nDESCRIPTION: This directive includes content from the specified snippet file (`_snippets/integrations/builtin/app-nodes/ai-tools.md`). It's used within the documentation build process (likely MkDocs with the `markdown-include` extension or similar) to insert reusable content, specifically information about AI tools related to n8n app nodes.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.pipedrive.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/app-nodes/ai-tools.md\"\n```\n\n----------------------------------------\n\nTITLE: Vector Database Example Table in Markdown\nDESCRIPTION: A markdown table demonstrating a simplified vector database representation where sentences are mapped to numerical vectors. Shows how different automation tools and their features are represented as dimensional vectors.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/advanced-ai/examples/understand-vector-databases.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Sentence | Vector (array of dimensions) |\n| -------- | ------ |\n| n8n is a source-available automation tool that you can self-host | [0.1, 0.2, 0.3] |\n| Zapier is an automation tool | [0.1] |\n| Make is an automation tool | [0.1] |\n| Confluence is a wiki tool that you can self-host | [0.3] |\n```\n\n----------------------------------------\n\nTITLE: SQLite Environment Variable Configuration Table\nDESCRIPTION: SQLite-specific environment variables for configuring performance and maintenance options.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/environment-variables/database.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable | Type  | Default  | Description |\n| :------- | :---- | :------- | :---------- |\n| `DB_SQLITE_POOL_SIZE` | Number | `0` | Controls whether to open the SQLite file in [WAL mode](https://www.sqlite.org/wal.html) or [rollback journal mode](https://www.sqlite.org/lockingv3.html#rollback). Uses rollback journal mode when set to zero. When greater than zero, uses WAL mode with the value determining the number of parallel SQL read connections to configure. WAL mode is much more performant and reliable than the rollback journal mode. |\n| `DB_SQLITE_VACUUM_ON_STARTUP` | Boolean | `false` | Runs [VACUUM](https://www.sqlite.org/lang_vacuum.html) operation on startup to rebuild the database. Reduces file size and optimizes indexes. This is a long running blocking operation and increases start-up time. |\n```\n\n----------------------------------------\n\nTITLE: Inserting Templates Widget for Hunter in Markdown\nDESCRIPTION: This snippet uses a custom syntax to insert a templates widget for Hunter-related content. It's likely processed by n8n's documentation system.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.hunter.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'hunter') ]]\n```\n\n----------------------------------------\n\nTITLE: Displaying Note About Hunter Credentials in Markdown\nDESCRIPTION: This snippet uses Markdown syntax to create a note block providing information about Hunter credentials setup.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.hunter.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n/// note | Credentials\nRefer to [Hunter credentials](/integrations/builtin/credentials/hunter.md) for guidance on setting up authentication. \n///\n```\n\n----------------------------------------\n\nTITLE: Including OAuth Button Snippet in Markdown\nDESCRIPTION: This code snippet includes a reusable Markdown component for displaying an OAuth connection button. It's used to streamline the documentation for cloud-based OAuth authentication processes.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/philipshue.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/credentials/cloud-oauth-button.md\"\n```\n\n----------------------------------------\n\nTITLE: Defining Collection Item Data Schema in JSON Schema - JSON\nDESCRIPTION: This code defines, in JSON Schema (draft-07), the format expected for 'collection' items supplied by the API. Required fields include 'id', 'rank', 'name', 'totalViews', 'createdAt', 'workflows', and 'nodes'. 'workflows' is specifically an array of objects with required numeric 'id' properties. This enforces schema standardization across endpoints returning collection entities.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/workflows/templates/custom-templates-library.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"number\"\n    },\n    \"rank\": {\n      \"type\": \"number\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"totalViews\": {},\n    \"createdAt\": {\n      \"type\": \"string\"\n    },\n    \"workflows\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"number\"\n          }\n        },\n        \"required\": [\n          \"id\"\n        ]\n      }\n    },\n    \"nodes\": {\n      \"type\": \"array\",\n      \"items\": {}\n    }\n  },\n  \"required\": [\n    \"id\",\n    \"rank\",\n    \"name\",\n    \"totalViews\",\n    \"createdAt\",\n    \"workflows\",\n    \"nodes\"\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining System Variables in n8n Documentation\nDESCRIPTION: Markdown table defining key system variables in n8n including pageCount for pagination tracking, request object from HTTP nodes, and response object containing body, headers and status code from API calls.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/integrations/builtin/core-nodes/http/pagination-variables.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable | Description |\n| -------- | ----------- |\n| `$pageCount` | The pagination count. Tracks how many pages the node has fetched. |\n| `$request` | The request object sent by the HTTP node. |\n| `$response` | The response object from the HTTP call. Includes `$response.body`, `$response.headers`, and `$response.statusCode`. The contents of `body` and `headers` depend on the data sent by the API. |\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration for n8n Documentation\nDESCRIPTION: YAML frontmatter configuration defining the document's metadata including title, description, and content type.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/workflows/executions/manual-partial-and-production-executions.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Manual, partial, and production executions\ndescription: How manual, partial, and automatic workflow executions differ.\ncontentType: explanation\n---\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration in Markdown\nDESCRIPTION: YAML frontmatter block defining the page metadata including description and content type for the workflow components documentation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/workflows/components/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndescription: Learn about the building blocks of workflows.\ncontentType: overview\n---\n```\n\n----------------------------------------\n\nTITLE: Displaying Credential Setup Note (Markdown)\nDESCRIPTION: Uses a Markdown extension (likely admonition or custom directive) to display a note block directing users to the Microsoft credentials setup guide. This snippet provides essential context regarding authentication prerequisites.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.microsoftexcel.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n/// note | Credentials\nRefer to [Microsoft credentials](/integrations/builtin/credentials/microsoft.md) for guidance on setting up authentication.\n///\n```\n\n----------------------------------------\n\nTITLE: Editor UI Menu Export/Import Options\nDESCRIPTION: Available options in the Editor UI menu for workflow management, including downloading workflows as JSON files, importing workflows from URLs, and importing workflows from local files.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/workflows/export-import.md#2025-04-22_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: GoToWebinar Node Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the GoToWebinar node documentation page, specifying title, description and content type.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.gotowebinar.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: GoToWebinar node documentation\ndescription: Learn how to use the GoToWebinar node in n8n. Follow technical documentation to integrate GoToWebinar node into your workflows.\ncontentType: [integration, reference]\n---\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration for Help Scout Documentation\nDESCRIPTION: YAML frontmatter configuration defining the document metadata including title, description and content type for the Help Scout node documentation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.helpscout.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Help Scout node documentation\ndescription: Learn how to use the Help Scout node in n8n. Follow technical documentation to integrate Help Scout node into your workflows.\ncontentType: [integration, reference]\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Table: LLM vs AI Agent Comparison\nDESCRIPTION: A markdown table comparing features and capabilities between Large Language Models (LLMs) and AI Agents, highlighting their core differences in functionality and scope.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/advanced-ai/intro-tutorial.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Feature             | LLM                        | AI Agent                           |\n|---------------------|----------------------------|------------------------------------|\\n| Core Capability     | Text generation            | Goal-oriented task completion      |\n| Decision-Making     | None                       | Yes                                |\n| Uses Tools/APIs     | No                         | Yes                                |\n| Workflow Complexity | Single-step                | Multi-step                         |\n| Scope               | Generates language         | Performs complex, real-world tasks |\n| Example             | LLM generating a paragraph | An agent scheduling an appointment |\n```\n\n----------------------------------------\n\nTITLE: Adding Project Frontmatter for Integration Node Documentation - Markdown\nDESCRIPTION: This snippet demonstrates how to add project-level frontmatter metadata to a documentation Markdown file for an n8n node integration. It includes properties such as title, description, and contentType that help define the documentation's context and are likely consumed by static site generators or the n8n documentation platform. No special dependencies are required, but correct placement and YAML-like formatting are necessary for parsing by the documentation system.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/trigger-nodes/n8n-nodes-base.toggltrigger.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\\n#https://www.notion.so/n8n/Frontmatter-432c2b8dff1f43d4b1c8d20075510fe4\\ntitle: Toggl Trigger node documentation\\ndescription: Learn how to use the Toggl Trigger node in n8n. Follow technical documentation to integrate Toggl Trigger node into your workflows.\\ncontentType: [integration, reference]\\n---\n```\n\n----------------------------------------\n\nTITLE: Including Operation Not Supported Snippet (Markdown)\nDESCRIPTION: This Markdown snippet uses the MkDocs Material content inclusion syntax (`--8<-- \\\"path\\\"`) to embed the content from the specified file (`_snippets/integrations/builtin/app-nodes/operation-not-supported.md`). This is typically used for reusing common content blocks across multiple documentation pages, in this case, likely a standard message about unsupported operations.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.brevo.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/app-nodes/operation-not-supported.md\"\n```\n\n----------------------------------------\n\nTITLE: Iterating and Generating Documentation with Nunjucks Macro Call\nDESCRIPTION: This Nunjucks code block iterates through the `df_object` variable, which presumably holds an array or list of objects, each describing a specific data transformation function for objects. For each function's data (`func`), it calls the imported `dataFunctions.dataFunctions` macro, passing the function type ('object') and details like its name, return type, description, arguments, and examples to generate a formatted documentation entry dynamically.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/data-transformation-functions/objects.md#2025-04-22_snippet_2\n\nLANGUAGE: nunjucks\nCODE:\n```\n[[% for func in df_object %]]\n[[ dataFunctions.dataFunctions(\"object\", func.funcName, func.returns, func.description, func.args, func.examples ) ]]\n[[% endfor %]]\n```\n\n----------------------------------------\n\nTITLE: Markdown Templating Widget\nDESCRIPTION: Template widget syntax for displaying Google Contacts related templates\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.googlecontacts.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'google-contacts') ]]\n```\n\n----------------------------------------\n\nTITLE: Including LangChain Overview Link Snippet\nDESCRIPTION: This directive includes a reusable Markdown snippet containing a link or information related to the LangChain framework overview. This specific include might be contextualized for cluster node integrations within n8n.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.lmchatdeepseek.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/cluster-nodes/langchain-overview-link.md\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the RBAC documentation page, defining content type, title and description.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/user-management/rbac/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ncontentType: overview\ntitle: Role-based access control (RBAC)\ndescription: Set up and use role-based access control (RBAC) in n8n.\n---\n```\n\n----------------------------------------\n\nTITLE: Removing Unused Dependencies\nDESCRIPTION: Removes unused dependencies from the n8n core.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/release-notes/0-x.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nCore: delete unused dependencies.\n```\n\n----------------------------------------\n\nTITLE: Embedding AI Tools App Node Documentation with Markdown Include - Markdown\nDESCRIPTION: This snippet demonstrates how n8n documentation embeds shared content from another markdown partial using the custom --8<-- directive. It references '_snippets/integrations/builtin/app-nodes/ai-tools.md', pulling in standard documentation for AI tool integrations. To use this, the documentation generator or site must support custom markdown includes; no extra dependencies are required beyond that system.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.notion/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/app-nodes/ai-tools.md\"\n```\n\n----------------------------------------\n\nTITLE: Embedding Operation Not Supported Snippet - Markdown\nDESCRIPTION: This Markdown snippet demonstrates how to include reusable content for unsupported operations by embedding a separate markdown file within documentation. The syntax '--8<--' is likely processed by n8n's documentation tooling to pull in content at build-time, enabling consistent error or help messages across multiple documents. It requires that the referenced file exists relative to the documentation root and is properly formatted in Markdown.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.stripe.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/app-nodes/operation-not-supported.md\"\n```\n\n----------------------------------------\n\nTITLE: Embedding Templates Widget (Custom Macro/Shortcode)\nDESCRIPTION: Calls a custom template widget or macro (`templatesWidget`), likely specific to the n8n documentation system (possibly using Jinja2 or similar). It dynamically embeds relevant workflow templates based on the current page title and the 'microsoft-excel' keyword.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.microsoftexcel.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'microsoft-excel') ]]\n```\n\n----------------------------------------\n\nTITLE: Page Frontmatter Configuration in Markdown\nDESCRIPTION: YAML frontmatter configuration for the documentation page, defining metadata like title, description, content type and display settings.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/source-control-environments/using/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Using source control and environments\ndescription: How to use source control and environments in n8n.\ncontentType: overview\nhide:\n  - toc\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure\nDESCRIPTION: Core documentation structure for Slack node integration including frontmatter configuration, operation lists, and API method references.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.slack.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Slack node documentation\ndescription: Learn how to use the Slack node in n8n. Follow technical documentation to integrate Slack node into your workflows.\ncontentType: [integration, reference]\npriority: high\n---\n```\n\n----------------------------------------\n\nTITLE: SecurityScorecard Node Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the SecurityScorecard node documentation page, defining title, description and content type.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.securityscorecard.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: SecurityScorecard node documentation\ndescription: Learn how to use the SecurityScorecard node in n8n. Follow technical documentation to integrate SecurityScorecard node into your workflows.\ncontentType: [integration, reference]\n---\n```\n\n----------------------------------------\n\nTITLE: Metadata Filter Include\nDESCRIPTION: Markdown include directive for vector store metadata filter documentation\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstorepinecone.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/cluster-nodes/langchain-root-nodes/vector-store-metadata-filter.md\"\n```\n\n----------------------------------------\n\nTITLE: Templating Include Directive\nDESCRIPTION: Templating directive to include operation not supported snippet for the integration documentation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.metabase.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/app-nodes/operation-not-supported.md\"\n```\n\n----------------------------------------\n\nTITLE: Including AI Tools Snippet in Markdown\nDESCRIPTION: This snippet includes a markdown file containing information about AI tools. It's used to dynamically insert content into the documentation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.graphql.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/app-nodes/ai-tools.md\"\n```\n\n----------------------------------------\n\nTITLE: Embedding n8n Workflow Demonstration for Pinecone Population\nDESCRIPTION: This placeholder embeds an interactive demonstration of the n8n workflow described in the document. The workflow, defined in the linked JSON file, scrapes a website, processes content, and loads it into a Pinecone vector database.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/advanced-ai/examples/vector-store-website.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[ workflowDemo(\"file:///advanced-ai/examples/populate_a_pinecone_vector_database_from_a_website.json\") ]]\n```\n\n----------------------------------------\n\nTITLE: Workflow Demo Include Statement\nDESCRIPTION: Markdown include statement for embedding a workflow demonstration JSON file into the documentation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/advanced-ai/examples/data-google-sheets.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[[ workflowDemo(\"file:///advanced-ai/examples/chat_with_google_sheets_docs_version.json\") ]]\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata using Frontmatter (YAML)\nDESCRIPTION: YAML frontmatter block defining metadata for the documentation page. It includes the page title ('n8n Privacy and security'), a description ('Learn about privacy and security at n8n...'), and the content type ('overview'). This metadata is used by the documentation build system to structure and categorize the page.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/privacy-security/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n#https://www.notion.so/n8n/Frontmatter-432c2b8dff1f43d4b1c8d20075510fe4\ntitle: n8n Privacy and security\ndescription: Learn about privacy and security at n8n. Explore how n8n handles and secures your data, with an overview of key policies and procedures.\ncontentType: overview\n---\n```\n\n----------------------------------------\n\nTITLE: Including AI Glossary Snippet in Markdown\nDESCRIPTION: This code snippet includes content from an AI glossary file, likely containing definitions of AI-related terms used in the documentation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent/plan-execute-agent.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_glossary/ai-glossary.md\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration defining the document's metadata including title, description, and content type.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/source-control-environments/setup.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Set up source control\ndescription: Link n8n to your Git provider.\ncontentType: howto\n---\n```\n\n----------------------------------------\n\nTITLE: Rendering Integration Templates Widget - n8n Documentation - Markdown\nDESCRIPTION: This snippet uses a template widget function to embed AWS SNS-specific integration templates directly into the documentation page. It dynamically loads resources or template examples associated with the 'aws-sns' keyword for the current documentation context. The snippet assumes the presence of a documentation rendering system that understands and processes the templatesWidget directive.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.awssns.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'aws-sns') ]]\n```\n\n----------------------------------------\n\nTITLE: Rendering Templates Widget MkDocs Macro\nDESCRIPTION: This macro displays a widget listing workflow templates based on specified filters. The parameters typically define keywords or categories to fetch relevant templates from the n8n template library.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs-site-feature-tests/index.md#_snippet_1\n\nLANGUAGE: MkDocs Macro\nCODE:\n```\n[[ templatesWidget('wait', 'wait') ]]\n```\n\n----------------------------------------\n\nTITLE: Including Reference Snippets in Markdown\nDESCRIPTION: Markdown include directive for common operation support documentation snippet.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.googlebooks.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/app-nodes/operation-not-supported.md\"\n```\n\n----------------------------------------\n\nTITLE: Invoking TemplatesWidget with AWS SQS in Markdown Documentation\nDESCRIPTION: This snippet demonstrates embedding the 'templatesWidget' macro for the AWS SQS page to display reusable workflow templates for the AWS SQS node. It leverages n8n documentation's custom templating to enhance the user experience. No external dependencies are required, but the documentation system must recognize and render custom widgets such as 'templatesWidget'. The page title and integration key ('aws-sqs') are passed as arguments.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.awssqs.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'aws-sqs') ]]\n```\n\n----------------------------------------\n\nTITLE: Generating Templates Widget using Template Syntax\nDESCRIPTION: This snippet utilizes a template function or macro `templatesWidget` to dynamically insert a widget displaying relevant examples or templates for the Pipedrive integration. It passes the current page title (dynamically retrieved via `page.title`) and the integration key ('pipedrive') as arguments. This syntax is specific to the documentation generator environment used by n8n.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.pipedrive.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'pipedrive') ]]\n```\n\n----------------------------------------\n\nTITLE: Embedding Lemlist Templates Widget (Markdown Syntax)\nDESCRIPTION: This placeholder syntax, likely specific to the n8n documentation generator (possibly using a MkDocs extension), dynamically embeds relevant workflow templates related to the Lemlist node onto the page.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.lemlist.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'lemlist') ]]\n```\n\n----------------------------------------\n\nTITLE: NASA Node Template Widget Include\nDESCRIPTION: Templating code to include NASA-related workflow templates in the documentation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.nasa.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'nasa') ]]\n```\n\n----------------------------------------\n\nTITLE: Templating Widget Inclusion in Markdown\nDESCRIPTION: A templating widget inclusion statement that pulls in templates related to Zammad integration\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.zammad.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'zammad') ]]\n```\n\n----------------------------------------\n\nTITLE: Workflow Demo Include Statement\nDESCRIPTION: Markdown include statement for embedding a workflow demonstration JSON file into the documentation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/advanced-ai/examples/api-workflow-tool.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[[ workflowDemo(\"file:///advanced-ai/examples/let_your_ai_call_an_api.json\") ]]\n```\n\n----------------------------------------\n\nTITLE: Markdown Content Block with Grid Layout\nDESCRIPTION: A markdown-formatted section defining a grid layout of cards for navigating different aspects of n8n's AI documentation. Each card contains a title, description, and link to relevant documentation sections.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/advanced-ai/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<div class=\"grid cards\" markdown>\n\n-   __Get started__\n\n    Work through the short tutorial to learn the basics of building AI workflows in n8n.\n\n    [:octicons-arrow-right-24: Tutorial](/advanced-ai/intro-tutorial.md)\n\n-   __Use a Starter Kit__\n\n    Try n8n's Self-hosted AI Starter Kit to quickly start building AI workflows.\n\n    [:octicons-arrow-right-24: Self-hosted AI Starter Kit](/hosting/starter-kits/ai-starter-kit.md)\n\n-   __Explore examples and concepts__\n\n\tBrowse examples and workflow templates to help you build. Includes explanations of important AI concepts.\n\n    [:octicons-arrow-right-24: Examples](/advanced-ai/examples/introduction.md)\n\n-   __How n8n uses LangChain__\n\n    Learn more about how n8n builds on LangChain.\n\n    [:octicons-arrow-right-24: LangChain in n8n](/advanced-ai/langchain/overview.md)\n\n-   __Browse AI templates__\n\n    Explore a wide range of AI workflow templates on the n8n website.\n\n    [:octicons-arrow-right-24: AI workflows on n8n.io](https://n8n.io/workflows/?categories=25){:target=_blank .external-link}\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Templating Widget Inclusion\nDESCRIPTION: Template widget inclusion syntax for dynamically pulling in Google Sheets related templates.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.googlesheets/index.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'google-sheets') ]]\n```\n\n----------------------------------------\n\nTITLE: Creating Release Notes Template in Markdown\nDESCRIPTION: A structured markdown template for documenting n8n releases. Includes sections for version info, release summary, breaking changes warnings, feature descriptions, new nodes, and contributor acknowledgments.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/document-templates/release-notes.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## n8n@<version-number>\n\nView the [commits](<url for GitHub's 'Comparing changes' view, comparing this release to the previous one>) for this version.<br />\n**Release date:** <yyyy-MM-dd>\n\n_One or two sentence summary of release._\n\nFor full release details, refer to [Releases](https://github.com/n8n-io/n8n/releases) on GitHub.\n\n### New features\n\n<div class=\"n8n-new-features\" markdown>\n\n#### Feature name\n\n_Description of new feature. Link to docs if available._\n\n</div>\n\n### New nodes\n\n<div class=\"n8n-new-features\" markdown>\n\n#### Node name\n\n_Description of new feature. Link to new node doc._\n\n</div>\n\n### Contributors\n\n_List external contributors. Don't use a bulleted list here._\n```\n\n----------------------------------------\n\nTITLE: Embedding Templates Widget in n8n Docs (JavaScript/Markdown)\nDESCRIPTION: This snippet demonstrates how to embed a dynamic templates widget for Philips Hue integration pages using a template call syntax. It references the page title and a resource identifier ('philips-hue'), pulling in relevant usage templates into the documentation. Inputs are the page title and identifier; the output renders associated templates for n8n’s documentation page. This usage requires the documentation system to recognize and process template embedding expressions.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.philipshue.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'philips-hue') ]]\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: Frontmatter metadata configuration for the documentation page, defining the title, description and content type.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/data-transformation-functions/strings.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Data transformation functions for strings\ndescription: A reference document listing built-in convenience functions to support data transformation in expressions for strings.\ncontentType: reference\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the LinkedIn node documentation page, defining metadata like title, description, content type, and priority.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.linkedin.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: LinkedIn node documentation\ndescription: Learn how to use the LinkedIn node in n8n. Follow technical documentation to integrate LinkedIn node into your workflows.\ncontentType: [integration, reference]\npriority: medium\n---\n```\n\n----------------------------------------\n\nTITLE: Including 'Operation Not Supported' Snippet in Markdown\nDESCRIPTION: This directive includes content from the specified snippet file (`_snippets/integrations/builtin/app-nodes/operation-not-supported.md`). It's used within the documentation build process to insert standard text explaining what users can do if a desired operation is not currently supported by the node, ensuring consistency across integration documentation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.pipedrive.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/app-nodes/operation-not-supported.md\"\n```\n\n----------------------------------------\n\nTITLE: Including Unsupported Operation Notice - n8n Documentation - Markdown\nDESCRIPTION: This snippet pulls in a standardized notice about operations not supported by the module from an external Markdown file. It is used to automatically display consistent guidance whenever a user encounters a feature or operation that is unavailable in the AWS SNS node, ensuring clarity and uniformity across documentation. The syntax assumes the documentation framework supports the '--8<--' include directive for modular content reuse.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.awssns.md#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/app-nodes/operation-not-supported.md\"\n```\n\n----------------------------------------\n\nTITLE: Including Shared Markdown Snippet using Directive\nDESCRIPTION: This directive includes the content of the specified Markdown file (`_snippets/integrations/builtin/app-nodes/operation-not-supported.md`) at this location in the final document. It's used for content reuse, likely inserting a standard 'operation not supported' message.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.uproc.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/app-nodes/operation-not-supported.md\"\n```\n\n----------------------------------------\n\nTITLE: Including Pagination API Differences Snippet in Markdown\nDESCRIPTION: This snippet includes content from another file containing information about API differences related to pagination in the HTTP node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/index.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/core-nodes/http/pagination-api-differences.md\"\n```\n\n----------------------------------------\n\nTITLE: Documenting APITemplate.io Node Operations - Markdown\nDESCRIPTION: This Markdown snippet structures the documentation for the APITemplate.io node, describing supported operations (Account Get, Image Create, PDF Create) and setup requirements. It includes templated widget syntax and references to modular content, expecting users to refer to related credentials documentation for authentication. Inputs are Markdown content merged with dynamic template widgets; outputs are rendered n8n documentation pages for users. No programming libraries are required; the interface is intended for documentation readers and maintainers.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.apitemplateio.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#https://www.notion.so/n8n/Frontmatter-432c2b8dff1f43d4b1c8d20075510fe4\ntitle: APITemplate.io node documentation\ndescription: Learn how to use the APITemplate.io node in n8n. Follow technical documentation to integrate APITemplate.io node into your workflows.\ncontentType: [integration, reference]\n---\n\n# APITemplate.io node\n\nUse the APITemplate.io node to automate work in APITemplate.io, and integrate APITemplate.io with other applications. n8n has built-in support for a wide range of APITemplate.io features, including getting and creating accounts and PDF.\n\nOn this page, you'll find a list of operations the APITemplate.io node supports and links to more resources.\n\n/// note | Credentials\nRefer to [APITemplate.io credentials](/integrations/builtin/credentials/apitemplateio.md) for guidance on setting up authentication. \n///\n\n--8<-- \"_snippets/integrations/builtin/app-nodes/ai-tools.md\"\n\n## Operations\n\n* Account\n    * Get\n* Image\n    * Create\n* PDF\n    * Create\n\n## Templates and examples\n\n<!-- see https://www.notion.so/n8n/Pull-in-templates-for-the-integrations-pages-37c716837b804d30a33b47475f6e3780 -->\n[[ templatesWidget(page.title, 'apitemplateio') ]]\n\n--8<-- \"_snippets/integrations/builtin/app-nodes/operation-not-supported.md\"\n\n```\n\n----------------------------------------\n\nTITLE: Embedding Templates Widget for Plivo Integrations in n8n Documentation - Javascript\nDESCRIPTION: This snippet embeds a templates widget into the documentation page using n8n's templating system. The widget dynamically retrieves and displays relevant Plivo integration templates for quick access. No external dependencies are needed, but it relies on n8n's documentation infrastructure recognizing the special syntax.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.plivo.md#2025-04-22_snippet_0\n\nLANGUAGE: Javascript\nCODE:\n```\n[[ templatesWidget(page.title, 'plivo') ]]\n```\n\n----------------------------------------\n\nTITLE: Including Operation Not Supported Markdown Snippet in AWS SQS Documentation\nDESCRIPTION: This line shows how to inline an external Markdown snippet containing content about unsupported operations within the AWS SQS node documentation. The '--8<--' syntax instructs the documentation builder to include the referenced Markdown file, enhancing content reuse and maintainability. It assumes that the documentation build process can resolve and insert the snippet from the given relative path.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.awssqs.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/app-nodes/operation-not-supported.md\"\n```\n\n----------------------------------------\n\nTITLE: Include Sub-Node Expression Resolution Snippet\nDESCRIPTION: This directive includes a reusable Markdown snippet detailing how expressions are resolved in sub-nodes within n8n clusters.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.lmchatgooglegemini.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/cluster-nodes/sub-node-expression-resolution.md\"\n```\n\n----------------------------------------\n\nTITLE: Including Templates Widget in Markdown\nDESCRIPTION: This snippet includes a templates widget for the HTTP Request node, which likely displays relevant templates or examples.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/index.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'http-request') ]]\n```\n\n----------------------------------------\n\nTITLE: AI Glossary Include\nDESCRIPTION: Markdown include directive for AI glossary terms\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstorepinecone.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_glossary/ai-glossary.md\"\n```\n\n----------------------------------------\n\nTITLE: Harvest Templates Widget Integration\nDESCRIPTION: Markdown template inclusion directive for displaying Harvest-related templates within the documentation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.harvest.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'harvest') ]]\n```\n\n----------------------------------------\n\nTITLE: Operation Not Supported Snippet Inclusion\nDESCRIPTION: Markdown include directive to insert content about unsupported operations.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.misp.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/app-nodes/operation-not-supported.md\"\n```\n\n----------------------------------------\n\nTITLE: Embedding n8n Templates Widget\nDESCRIPTION: This is a placeholder directive used within the n8n documentation system (likely MkDocs with extensions) to dynamically embed a widget that displays relevant workflow templates. It takes the current page's title and a specific identifier ('hugging-face-inference-model') as arguments to fetch and display the appropriate templates.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.lmopenhuggingfaceinference.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'hugging-face-inference-model') ]]\n```\n\n----------------------------------------\n\nTITLE: Including OAuth Button Snippet\nDESCRIPTION: Reference to a reusable markdown snippet for displaying the cloud OAuth button component\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/gitlab.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/credentials/cloud-oauth-button.md\"\n```\n\n----------------------------------------\n\nTITLE: Embedding Workflow Templates using a Macro\nDESCRIPTION: This snippet uses a custom macro `[[ templatesWidget(...) ]]` likely processed by the documentation build system (e.g., MkDocs with a plugin) to dynamically embed relevant workflow templates onto the documentation page. It passes the current page title and the integration identifier 'box' as parameters to fetch appropriate examples.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.box.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'box') ]]\n```\n\n----------------------------------------\n\nTITLE: Templating Widget Include in Markdown\nDESCRIPTION: A templating directive to include Google Cloud Storage templates in the documentation page.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.googlecloudstorage.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'google-cloud-storage') ]]\n```\n\n----------------------------------------\n\nTITLE: Tapfiliate Node Configuration Properties\nDESCRIPTION: Markdown structure defining the configuration and documentation layout for the Tapfiliate node, including frontmatter metadata and operation listings.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.tapfiliate.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Tapfiliate node documentation\ndescription: Learn how to use the Tapfiliate node in n8n. Follow technical documentation to integrate Tapfiliate node into your workflows.\ncontentType: [integration, reference]\n---\n```\n\n----------------------------------------\n\nTITLE: Including Operation Not Supported Snippet in Markdown\nDESCRIPTION: This markdown directive includes a reusable content snippet from the specified path (`_snippets/integrations/builtin/app-nodes/operation-not-supported.md`). It is likely used within the documentation system (such as MkDocs with the snippets extension) to display a standard message regarding unsupported operations or feature requests.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.azurestorage.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/app-nodes/operation-not-supported.md\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Configuration for Google Analytics Node Documentation\nDESCRIPTION: Frontmatter configuration and markdown structure for Google Analytics node documentation, including metadata, operations list, and resource links.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.googleanalytics.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Google Analytics node documentation\ndescription: Learn how to use the Google Analytics node in n8n. Follow technical documentation to integrate Google Analytics node into your workflows.\ncontentType: [integration, reference]\npriority: medium\n---\n```\n\n----------------------------------------\n\nTITLE: Embedding Operation Not Supported Documentation with Markdown Include - Markdown\nDESCRIPTION: This snippet illustrates the reuse of common documentation text by embedding a markdown partial with the --8<-- directive, referencing '_snippets/integrations/builtin/app-nodes/operation-not-supported.md'. It is used to standardize the handling of unsupported operations in n8n documentation files. This pattern requires a static site generator or doc system that can interpret the --8<-- syntax to include file contents.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.notion/index.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/app-nodes/operation-not-supported.md\"\n```\n\n----------------------------------------\n\nTITLE: Render Templates Widget\nDESCRIPTION: This directive dynamically renders a widget displaying relevant templates for the Google Gemini Chat Model node, using the page title as input.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.lmchatgooglegemini.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n[[ templatesWidget(page.title, 'google-gemini-chat-model') ]]\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Metadata using YAML Frontmatter\nDESCRIPTION: This YAML frontmatter block defines metadata for the documentation page. It includes a reference link (commented out), sets the page description that often appears in search results or previews, and specifies the content type as 'overview' for organizational purposes within the documentation system.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/user-management/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n#https://www.notion.so/n8n/Frontmatter-432c2b8dff1f43d4b1c8d20075510fe4\ndescription: User management in n8n\ncontentType: overview\n---\n```\n\n----------------------------------------\n\nTITLE: Including Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration defining document metadata including title, description, content type and priority level for the Google Sheets node documentation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.googlesheets/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Google Sheets\ndescription: Documentation for the Google Sheets node in n8n, a workflow automation platform. Includes details of operations and configuration, and links to examples and credentials information.\ncontentType: [integration, reference]\npriority: critical\n---\n```\n\n----------------------------------------\n\nTITLE: Home Assistant Templating Reference\nDESCRIPTION: Markdown snippet showing template widget inclusion for Home Assistant integration\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.homeassistant.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'home-assistant') ]]\n```\n\n----------------------------------------\n\nTITLE: Including Markdown Snippet using MkDocs Directive\nDESCRIPTION: This directive utilizes MkDocs 'snippet' extension syntax to include the content of another Markdown file (`_snippets/integrations/builtin/app-nodes/operation-not-supported.md`). This is commonly used for reusing standard content blocks, such as warnings or feature availability notes, across multiple documentation pages.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.cloudflare.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/app-nodes/operation-not-supported.md\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Template Reference\nDESCRIPTION: A markdown template for including FileMaker templates widget integration into the documentation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.filemaker.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'filemaker') ]]\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata using YAML Frontmatter\nDESCRIPTION: This YAML frontmatter block sets essential metadata for the Box node documentation page, including the title, description, and content type. These properties are used by the documentation generation system (like MkDocs) for page rendering and SEO.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.box.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n#https://www.notion.so/n8n/Frontmatter-432c2b8dff1f43d4b1c8d20075510fe4\ntitle: Box node documentation\ndescription: Learn how to use the Box node in n8n. Follow technical documentation to integrate Box node into your workflows.\ncontentType: [integration, reference]\n---\n```\n\n----------------------------------------\n\nTITLE: Template Import and Loop Structure\nDESCRIPTION: Nunjucks template syntax for importing macros and iterating over string functions to generate documentation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/data-transformation-functions/strings.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[[% import \"_macros/data-functions.html\" as dataFunctions %]]\n\n[[% for func in df_string %]]\n[[ dataFunctions.dataFunctions(\"string\", func.funcName, func.returns, func.description, func.args, func.examples ) ]]\n[[% endfor %]]\n```\n\n----------------------------------------\n\nTITLE: Embedding BambooHR Templates Widget\nDESCRIPTION: This snippet uses a custom shortcode or template tag specific to the documentation system (likely Markdown-based). It instructs the system to render a widget that displays relevant workflow templates for the BambooHR integration. The `page.title` variable likely passes the current page's title, and 'bamboohr' specifies the integration key for which to find templates.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.bamboohr.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'bamboohr') ]]\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration for Number Functions Documentation\nDESCRIPTION: YAML frontmatter configuration block defining the document's metadata including title, description, and content type.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/data-transformation-functions/numbers.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Data transformation functions for numbers\ndescription: A reference document listing built-in convenience functions to support data transformation in expressions for numbers.\ncontentType: reference\n---\n```\n\n----------------------------------------\n\nTITLE: Specifying MkDocs Dependencies for Documentation Build\nDESCRIPTION: Lists required Python packages and their versions for building documentation with MkDocs. Includes core MkDocs package, exclude plugin, lightbox plugin for images, and macros plugin with specific version constraints.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmkdocs==1.6.1\nmkdocs-exclude==1.0.2\nmkdocs-glightbox\nmkdocs-macros-plugin==1.0.4\n```\n\n----------------------------------------\n\nTITLE: Including External Markdown Snippet in Documentation\nDESCRIPTION: This code snippet includes an external markdown file containing information about unsupported operations. It uses a custom syntax for file inclusion in the documentation system.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.mindee.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/app-nodes/operation-not-supported.md\"\n```\n\n----------------------------------------\n\nTITLE: Template Widget Include Statement\nDESCRIPTION: Markdown include statement for pulling in templates related to Venafi TLS Protect Cloud integration.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.venafitlsprotectcloud.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'venafi-tls-protect-cloud') ]]\n```\n\n----------------------------------------\n\nTITLE: Including Brevo Templates Widget (Markdown)\nDESCRIPTION: This Markdown snippet uses a specific syntax (`[[ templatesWidget(...) ]]`) to dynamically include relevant workflow templates related to the Brevo node directly into the documentation page. It likely calls a function or macro named `templatesWidget` with the current page title and the integration key 'brevo' as arguments.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.brevo.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'brevo') ]]\n```\n\n----------------------------------------\n\nTITLE: Including Snippet for Output Format Parameter in Markdown\nDESCRIPTION: This code snippet includes content from another file that describes the 'Require Specific Output Format' parameter for the Plan and Execute Agent node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent/plan-execute-agent.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/cluster-nodes/langchain-root-nodes/output-format.md\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Include Statement for Cloud OAuth Button\nDESCRIPTION: Include statement for inserting cloud OAuth button documentation snippet\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/document-templates/credentials.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/credentials/cloud-oauth-button.md\"\n```\n\n----------------------------------------\n\nTITLE: Zoom Node Template Widget\nDESCRIPTION: Template widget inclusion for displaying Zoom-related workflow templates.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.zoom.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'zoom') ]]\n```\n\n----------------------------------------\n\nTITLE: Template Widget Inclusion\nDESCRIPTION: Markdown directive to include templates specific to Zulip integration\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.zulip.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'zulip') ]]\n```\n\n----------------------------------------\n\nTITLE: Template Widget Inclusion\nDESCRIPTION: Markdown directive for including templates widget specific to Google Books integration.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.googlebooks.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'google-books') ]]\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Template Macros (Jinja2/Nunjucks)\nDESCRIPTION: Template directives, likely for a Jinja2/Nunjucks based system, used within the Markdown content. The first line imports a macro file ('_macros/section-toc.html') and assigns it to the variable 'sectionToc'. The second line calls the 'sectionToc' macro function from the imported file, passing the current page object ('page') as an argument, likely to generate a table of contents for the sections on the page.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/privacy-security/index.md#2025-04-22_snippet_1\n\nLANGUAGE: jinja2\nCODE:\n```\n[[% import \"_macros/section-toc.html\" as sectionToc %]]\n\n[[ sectionToc.sectionToc(page) ]]\n```\n\n----------------------------------------\n\nTITLE: Harvest Node Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the Harvest node documentation page, specifying the title, description, and content type.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.harvest.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Harvest node documentation\ndescription: Learn how to use the Harvest node in n8n. Follow technical documentation to integrate Harvest node into your workflows.\ncontentType: [integration, reference]\n---\n```\n\n----------------------------------------\n\nTITLE: Including Cloud OAuth Button Snippet in Markdown\nDESCRIPTION: This code snippet includes a reusable Markdown snippet for displaying a cloud OAuth button. It uses the 'include' directive specific to the documentation system being used.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/pagerduty.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/credentials/cloud-oauth-button.md\"\n```\n\n----------------------------------------\n\nTITLE: Template Widget Inclusion\nDESCRIPTION: Markdown directive to include templates widget for displaying Iterable-related workflow templates.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.iterable.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'iterable') ]]\n```\n\n----------------------------------------\n\nTITLE: Including Sub-workflow Usage Snippet in Markdown\nDESCRIPTION: This code snippet includes a Markdown file containing instructions for sub-workflow usage. It uses a custom syntax for file inclusion.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.executeworkflow.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/flow-logic/subworkflow-usage.md\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Templating Syntax for n8n Documentation\nDESCRIPTION: Template syntax used for injecting dynamic content into the documentation page, specifically for including Netscaler ADC templates.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.netscaleradc.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'netscaler-adc') ]]\n```\n\n----------------------------------------\n\nTITLE: Embedding Templates via Templating Syntax in Markdown\nDESCRIPTION: This snippet uses double-bracket notation to inject templates for the Calculator node into the documentation, likely as part of a static site generator or custom documentation system. It expects a 'templatesWidget' function capable of taking the current page title and a string identifier, outputting relevant template content. The surrounding HTML comment documents the purpose and original source for clarity. Useful for maintaining modularity and up-to-date examples.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.toolcalculator.md#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n<!-- see https://www.notion.so/n8n/Pull-in-templates-for-the-integrations-pages-37c716837b804d30a33b47475f6e3780 -->\n[[ templatesWidget(page.title, 'calculator') ]]\n```\n\n----------------------------------------\n\nTITLE: Template Section TOC Rendering\nDESCRIPTION: Template code to render the section table of contents using the imported macro.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/configuration-examples/index.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n[[ sectionToc.sectionToc(page) ]]\n```\n\n----------------------------------------\n\nTITLE: Including External Markdown Files - Intermediate Steps\nDESCRIPTION: Reference to an external markdown file containing intermediate steps configuration\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent/react-agent.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/cluster-nodes/langchain-root-nodes/return-intermediate-steps.md\"\n```\n\n----------------------------------------\n\nTITLE: Defining Frontmatter Metadata for Airtop Credentials Documentation\nDESCRIPTION: This YAML frontmatter block defines metadata for the Airtop credentials documentation page within the n8n-docs project. It includes the page title, a brief description explaining the credential's purpose for authenticating Airtop in n8n, and assigns content types ('integration', 'reference') likely used by the documentation system for categorization and rendering.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/airtop.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n#https://www.notion.so/n8n/Frontmatter-432c2b8dff1f43d4b1c8d20075510fe4\ntitle: Airtop credentials\ndescription: Documentation for the Airtop credentials. Use these credentials to authenticate Airtop in n8n, a workflow automation platform.\ncontentType: [integration, reference]\n---\n```\n\n----------------------------------------\n\nTITLE: MISP Template Widget Inclusion\nDESCRIPTION: Markdown directive to include MISP-related templates in the documentation page.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.misp.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'misp') ]]\n```\n\n----------------------------------------\n\nTITLE: Embedding Workflow Demo\nDESCRIPTION: Shows how to embed a workflow demonstration JSON file in the tutorial.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/document-templates/tutorial.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n[[ workflowDemo(\"file:////advanced-ai/tutorials/chat_complete.json\") ]]\n```\n\n----------------------------------------\n\nTITLE: Mailgun Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration block defining the document metadata including title, description and content type for the Mailgun node documentation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.mailgun.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Mailgun node documentation\ndescription: Learn how to use the Mailgun node in n8n. Follow technical documentation to integrate Mailgun node into your workflows.\ncontentType: [integration, reference]\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Table API Methods\nDESCRIPTION: Reference table mapping Slack node operations to their corresponding API methods, including links to official Slack API documentation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.slack.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| **Resource** | **Operation** | **Slack API method** |\n| --- | --- | --- |\n| Channel | Archive | [conversations.archive](https://api.slack.com/methods/conversations.archive) |\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata using Frontmatter (YAML)\nDESCRIPTION: This YAML block at the beginning of the file defines metadata like the title, description, and content type for the documentation page using frontmatter conventions. This metadata is likely used by the documentation generation system (like MkDocs or a custom system).\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.cloudflare.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n#https://www.notion.so/n8n/Frontmatter-432c2b8dff1f43d4b1c8d20075510fe4\ntitle: Cloudflare node documentation\ndescription: Learn how to use the Cloudflare node in n8n. Follow technical documentation to integrate Cloudflare node into your workflows.\ncontentType: [integration, reference]\n---\n```\n\n----------------------------------------\n\nTITLE: MSG91 Template Widget Integration\nDESCRIPTION: Liquid/Template syntax for including MSG91-specific templates in the documentation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.msg91.md#2025-04-22_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n[[ templatesWidget(page.title, 'msg91') ]]\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration for n8n Trigger Node\nDESCRIPTION: YAML frontmatter block defining metadata for the trigger node documentation page, including title, description, and content type.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/document-templates/trigger-nodes.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: _Name_ Trigger node documentation\ndescription: Learn how to use the _Name_ Trigger node in n8n. Follow technical documentation to integrate _Name_ Trigger node into your workflows.\ncontentType: [integration, reference]\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for OpenWeatherMap Node Documentation\nDESCRIPTION: This YAML block defines metadata for the OpenWeatherMap node documentation page, including the title, description, content type (integration reference), and priority.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.openweathermap.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n#https://www.notion.so/n8n/Frontmatter-432c2b8dff1f43d4b1c8d20075510fe4\ntitle: OpenWeatherMap node documentation\ndescription: Learn how to use the OpenWeatherMap node in n8n. Follow technical documentation to integrate OpenWeatherMap node into your workflows.\ncontentType: [integration, reference]\npriority: medium\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Tutorial Requirements Section\nDESCRIPTION: Lists the prerequisites and requirements needed to follow the tutorial, including n8n setup and credentials.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/document-templates/tutorial.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### What you will need\n\n- **n8n**: For this tutorial we recommend using the [n8n cloud](/manage-cloud/overview.md) service - there is a free trial for new users! For a self hosted service, refer to the [installation pages](/hosting/installation/docker.md).\n- **Credentials for a chat model**: This tutorial uses OpenAI, but you can easily use DeepSeek, Google Gemini, Groq, Azure, and others (see the [sub-nodes documentation](/integrations/builtin/cluster-nodes/sub-nodes/index.md) for more).\n```\n\n----------------------------------------\n\nTITLE: Markdown Snippet Include\nDESCRIPTION: Includes a markdown snippet for handling unsupported operations\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.wekan.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/app-nodes/operation-not-supported.md\"\n```\n\n----------------------------------------\n\nTITLE: Including AI Glossary (Markdown)\nDESCRIPTION: Markdown directive used to embed a reusable snippet containing definitions of common Artificial Intelligence terms, ensuring consistent terminology across the documentation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainretrievalqa/index.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_glossary/ai-glossary.md\"\n```\n\n----------------------------------------\n\nTITLE: YouTube Operations List\nDESCRIPTION: Structured list of all operations supported by the YouTube node in n8n, including channel management, playlist operations, video handling, and video category features.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.youtube.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Channel\n    * Retrieve a channel\n    * Retrieve all channels\n    * Update a channel\n    * Upload a channel banner\n* Playlist\n    * Create a playlist\n    * Delete a playlist\n    * Get a playlist\n    * Retrieve all playlists\n    * Update a playlist\n* Playlist Item\n    * Add an item to a playlist\n    * Delete a item from a playlist\n    * Get a playlist's item\n    * Retrieve all playlist items\n* Video\n    * Delete a video\n    * Get a video\n    * Retrieve all videos\n    * Rate a video\n    * Update a video\n    * Upload a video\n* Video Category\n    * Retrieve all video categories\n```\n\n----------------------------------------\n\nTITLE: SIGNL4 Node Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the SIGNL4 node documentation page, specifying title, description, and content type.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.signl4.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: SIGNL4 node documentation\ndescription: Learn how to use the SIGNL4 node in n8n. Follow technical documentation to integrate SIGNL4 node into your workflows.\ncontentType: [integration, reference]\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Grid Layout Structure\nDESCRIPTION: HTML/Markdown hybrid structure for creating a grid layout of AI documentation sections using div and markdown formatting.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/advanced-ai/examples/introduction.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<div class=\"grid cards\" markdown>\n\n-   __Agents and chains__\n\n\tLearn about [agents](/glossary.md#ai-agent) and [chains](/glossary.md#ai-chain) in AI, including exploring key differences using the example workflow.\n\n\t[:octicons-arrow-right-24: What's a chain in AI?](/advanced-ai/examples/understand-chains.md)  \n    [:octicons-arrow-right-24: What's an agent in AI?](/advanced-ai/examples/understand-agents.md)  \n\t[:octicons-arrow-right-24: Demonstration of key differences between agents and chains](/advanced-ai/examples/agent-chain-comparison.md) \n\n-   __Call n8n Workflow Tool__\n\n    Learn about [tools](/glossary.md#ai-tool) in AI, then explore examples that use n8n workflows as custom tools to give your AI workflow access to more data.\n\n\t[:octicons-arrow-right-24: What's a tool in AI?](/advanced-ai/examples/understand-tools.md)  \n    [:octicons-arrow-right-24: Chat with Google Sheets](/advanced-ai/examples/data-google-sheets.md)  \n\t[:octicons-arrow-right-24: Call an API to fetch data](/advanced-ai/examples/api-workflow-tool.md)  \n\t[:octicons-arrow-right-24: Set up a human fallback](/advanced-ai/examples/human-fallback.md)  \n\t[:octicons-arrow-right-24: Let AI specify tool parameters with `$fromAI()`](/advanced-ai/examples/using-the-fromai-function.md)\n</div>\n```\n\n----------------------------------------\n\nTITLE: MessageBird Node Template Widget\nDESCRIPTION: Template widget inclusion for displaying MessageBird-related workflow templates. This markdown snippet embeds a dynamic template widget that shows relevant MessageBird automation templates.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.messagebird.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'messagebird') ]]\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure\nDESCRIPTION: The markdown structure defines documentation for an n8n workflow comparing AI agents and chains. It includes frontmatter metadata, sections for explaining key features, and workflow component descriptions.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/advanced-ai/examples/agent-chain-comparison.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ncontentType: explanation\ntitle: Agents vs chains\ndescription: A workflow example that demonstrates key differences between agents and chains.\n---\n\n# Demonstration of key differences between agents and chains\n\nIn this workflow you can choose whether your chat query goes to an [agent](/glossary.md#ai-agent) or [chain](/glossary.md#ai-chain). It shows some of the ways that agents are more powerful than chains.\n\n[[ workflowDemo(\"file:///advanced-ai/examples/agents_vs_chains.json\") ]]\n\n## Key features\n\nThis workflow uses:\n\n* [Chat Trigger](/integrations/builtin/core-nodes/n8n-nodes-langchain.chattrigger/index.md): start your workflow and respond to user chat interactions. The node provides a customizable chat interface.\n* [Switch node](/integrations/builtin/core-nodes/n8n-nodes-base.switch.md): directs your query to either the agent or chain, depending on which you specify in your query. If you say \"agent\" it sends it to the agent. If you say \"chain\" it sends it to the chain.\n* [Agent](/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent/index.md): the Agent node interacts with other components of the workflow and makes decisions about what [tools](/glossary.md#ai-tool) to use.\n* [Basic LLM Chain](/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainllm.md): the Basic LLM Chain node supports chatting with a connected LLM, but doesn't support [memory](/glossary.md#ai-memory) or tools.\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration for Zulip Documentation\nDESCRIPTION: YAML frontmatter configuration defining the documentation metadata including title, description and content type for the Zulip node documentation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.zulip.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Zulip node documentation\ndescription: Learn how to use the Zulip node in n8n. Follow technical documentation to integrate Zulip node into your workflows.\ncontentType: [integration, reference]\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the documentation page, specifying content type, title, description and display settings.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/advanced-ai/examples/introduction.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ncontentType: overview\ntitle: Advanced AI examples and concepts\ndescription: Example workflows and use cases for building AI functionality using n8n.\nhide:\n  - toc\n---\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration defining metadata for the Information Extractor node documentation page.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.information-extractor.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Information Extractor node documentation\ndescription: Learn how to use the Information Extractor node in n8n. Follow technical documentation to integrate Information Extractor node into your workflows.\ncontentType: [integration, reference]\n---\n```\n\n----------------------------------------\n\nTITLE: Templating Markdown for Twilio Integration\nDESCRIPTION: Markdown template structure for documenting Twilio node functionality in n8n, including frontmatter configuration, operation listings, and resource links.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.twilio.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Twilio node documentation\ndescription: Learn how to use the Twilio node in n8n. Follow technical documentation to integrate Twilio node into your workflows.\ncontentType: [integration, reference]\npriority: medium\n---\n\n# Twilio node\n\nUse the Twilio node to automate work in Twilio, and integrate Twilio with other applications. n8n supports sending MMS/SMS and WhatsApp messages with Twilio.\n\nOn this page, you'll find a list of operations the Twilio node supports and links to more resources.\n```\n\n----------------------------------------\n\nTITLE: Text Classifier System Prompt Template Variable\nDESCRIPTION: Variable placeholder used in system prompt templates for category insertion.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.text-classifier.md#2025-04-22_snippet_1\n\nLANGUAGE: template\nCODE:\n```\n{categories}\n```\n\n----------------------------------------\n\nTITLE: Venafi TLS Protect Cloud Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the documentation page, defining metadata like title, description and content type.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.venafitlsprotectcloud.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Venafi TLS Protect Cloud node documentation\ndescription: Learn how to use the Venafi TLS Protect Cloud node in n8n. Follow technical documentation to integrate Venafi TLS Protect Cloud node into your workflows.\ncontentType: [integration, reference]\n---\n```\n\n----------------------------------------\n\nTITLE: Including Expression Resolution Snippet\nDESCRIPTION: This directive includes a reusable Markdown snippet explaining how expressions are resolved within sub-nodes, relevant for nodes potentially running in n8n cluster environments. It ensures consistent information about expression handling is presented.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.lmchatdeepseek.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/cluster-nodes/sub-node-expression-resolution.md\"\n```\n\n----------------------------------------\n\nTITLE: Vector Store Mode Include\nDESCRIPTION: Markdown include directive for vector store mode documentation with update functionality\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstorepinecone.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/cluster-nodes/vector-store-mode-with-update.md\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure\nDESCRIPTION: Main documentation structure for source control and environments in n8n, including frontmatter metadata and navigation links.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/source-control-environments/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Source control and environments\ndescription: Overview of source control and environments in n8n\ncontentType: overview\nhide:\n  - toc\n---\n\n# Source control and environments\n```\n\n----------------------------------------\n\nTITLE: Vector Store Mode Update Code\nDESCRIPTION: This code snippet appears to be referenced but not directly shown in the documentation. The documentation references vector store mode updating functionality.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoresupabase.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/cluster-nodes/vector-store-mode-with-update.md\"\n```\n\n----------------------------------------\n\nTITLE: Including Examples Color Key Snippet\nDESCRIPTION: This directive includes a reusable Markdown snippet named 'examples-color-key.md' from the '_snippets' directory. This snippet likely provides a legend or key for understanding visual elements (like colors) used in n8n workflow examples within the documentation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/advanced-ai/examples/vector-store-website.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/examples-color-key.md\"\n```\n\n----------------------------------------\n\nTITLE: Template Import in Jinja/Nunjucks\nDESCRIPTION: Template macro import statement for section table of contents functionality.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/configuration-examples/index.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n[[% import \"_macros/section-toc.html\" as sectionToc %]]\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the LoneScale documentation page, defining metadata like title, description and content type.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.lonescale.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: LoneScale node documentation\ndescription: Learn how to use the LoneScale node in n8n. Follow technical documentation to integrate LoneScale node into your workflows.\ncontentType: [integration, reference]\n---\n```\n\n----------------------------------------\n\nTITLE: SyncroMSP Templating Widget Integration\nDESCRIPTION: Template widget inclusion for displaying SyncroMSP integration examples and templates.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.syncromsp.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'syncromsp') ]]\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: Configuration metadata for the documentation page, including title, description, and content type specifications.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/data-transformation-functions/booleans.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Data transformation functions for booleans\ndescription: A reference document listing built-in convenience functions to support data transformation in expressions for booleans.\ncontentType: reference\n---\n```\n\n----------------------------------------\n\nTITLE: MSG91 Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the MSG91 documentation page, defining metadata like title, description, and content type.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.msg91.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: MSG91 node documentation\ndescription: Learn how to use the MSG91 node in n8n. Follow technical documentation to integrate MSG91 node into your workflows.\ncontentType: [integration, reference]\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure\nDESCRIPTION: Structured documentation explaining AI chains, including frontmatter metadata and content organization.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/advanced-ai/examples/understand-chains.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: What's a chain in AI?\ndescription: Understand chains in the context of AI. Learn about chains in n8n.\ncontentType: explanation\n---\n\n# What's a chain in AI?\n\n[Chains](/glossary.md#ai-chain) bring together different components of AI to create a cohesive system. They set up a sequence of calls between the components. These components can include models and [memory](/glossary.md#ai-memory) (though note that in n8n chains can't use memory).\n\n## Chains in n8n\n\nn8n provides three chain nodes:\n\n* [Basic LLM Chain](/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainllm.md): use to interact with an LLM, without any additional components.\n* [Question and Answer Chain](/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainretrievalqa/index.md): can connect to a [vector store](/glossary.md#ai-vector-store) using a retriever, or to an n8n workflow using the Workflow Retriever node. Use this if you want to create a workflow that supports asking questions about specific documents.\n* [Summarization Chain](/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainsummarization.md): takes an input and returns a summary.\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for LangChain-n8n Integration\nDESCRIPTION: Complete documentation structure outlining the mapping between LangChain concepts and n8n nodes, including trigger nodes, cluster nodes, and various sub-nodes for different functionalities.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/advanced-ai/langchain/langchain-n8n.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ncontentType: explanation\ntitle: LangChain concepts in n8n\ndescription: How LangChain concepts map to n8n, and which n8n nodes to use.\n---\n\n# LangChain concepts in n8n\n\nThis page explains how LangChain concepts and features map to n8n nodes.\n\nThis page includes lists of the LangChain-focused nodes in n8n. You can use any n8n node in a workflow where you interact with LangChain, to link LangChain to other services. The LangChain features uses n8n's [Cluster nodes](/integrations/builtin/cluster-nodes/index.md).\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration\nDESCRIPTION: Defines the document metadata including title, description and content type for the n8n documentation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/source-control-environments/create-environments.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Tutorial - Create environments with source control\ndescription: How to use n8n's source control feature to create environments.\ncontentType: tutorial\n---\n```\n\n----------------------------------------\n\nTITLE: Inserting Templates Widget in Markdown\nDESCRIPTION: This snippet inserts a templates widget for the GraphQL node. It's used to dynamically display relevant templates and examples for the node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.graphql.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'graphql') ]]\n```\n\n----------------------------------------\n\nTITLE: Including External Markdown Files - Prompt Configuration\nDESCRIPTION: Reference to an external markdown file containing prompt configuration details\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent/react-agent.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/cluster-nodes/langchain-root-nodes/prompt.md\"\n```\n\n----------------------------------------\n\nTITLE: Including Sub-workflow Data Flow Snippet in Markdown\nDESCRIPTION: This code snippet includes a Markdown file explaining data flow between workflows. It uses a custom syntax for file inclusion.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.executeworkflow.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/flow-logic/subworkflow-data-flow.md\"\n```\n\n----------------------------------------\n\nTITLE: Hacker News Node Template Widget\nDESCRIPTION: Template widget notation for including Hacker News related templates in the documentation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.hackernews.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'hacker-news') ]]\n```\n\n----------------------------------------\n\nTITLE: Including Snippet for Prompt Parameter in Markdown\nDESCRIPTION: This code snippet includes content from another file that describes the 'Prompt' parameter for the Plan and Execute Agent node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent/plan-execute-agent.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/cluster-nodes/langchain-root-nodes/prompt.md\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Vonage Templates Widget in Markdown\nDESCRIPTION: This code snippet inserts a widget to display Vonage-related templates in the documentation. It uses a custom syntax to pull in templates for the Vonage integration.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.vonage.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'vonage') ]]\n```\n\n----------------------------------------\n\nTITLE: Embedding Workflow Templates Widget\nDESCRIPTION: This custom widget call dynamically inserts pre-built n8n workflow templates related to the DeepSeek Chat Model node (identified by 'deepseek-chat-model') into the documentation page. It uses the current page's title (`page.title`) as context for selecting relevant templates.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.lmchatdeepseek.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'deepseek-chat-model') ]]\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration in Markdown\nDESCRIPTION: YAML frontmatter configuration for the Iterable node documentation page, defining the title, description, and content type.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.iterable.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Iterable node documentation\ndescription: Learn how to use the Iterable node in n8n. Follow technical documentation to integrate Iterable node into your workflows.\ncontentType: [integration, reference]\n---\n```\n\n----------------------------------------\n\nTITLE: Template Import Reference in Markdown\nDESCRIPTION: A templating directive to import Invoice Ninja related templates into the documentation page.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.invoiceninja.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'invoice-ninja') ]]\n```\n\n----------------------------------------\n\nTITLE: Including AI Glossary Snippet\nDESCRIPTION: This directive includes a reusable Markdown snippet containing a glossary of common Artificial Intelligence terms. This provides users with definitions for potentially unfamiliar AI terminology used within the DeepSeek Chat Model node documentation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.lmchatdeepseek.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_glossary/ai-glossary.md\"\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration for n8n API Documentation\nDESCRIPTION: YAML frontmatter configuration for documentation page metadata, specifying content type, title, and description for API data fetching guide.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/advanced-ai/examples/api-workflow-tool.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ncontentType: howto\ntitle: Call an API to fetch data\ndescription: Use the n8n workflow tool to load data from an API using the HTTP Request node into your AI workflow.\n---\n```\n\n----------------------------------------\n\nTITLE: Including AI Tools Snippet (Markdown Include)\nDESCRIPTION: Uses a Markdown include syntax (likely `mkdocs-include-markdown-plugin` indicated by `--8<--`) to insert reusable content from the specified snippet file (`_snippets/integrations/builtin/app-nodes/ai-tools.md`). This likely pertains to related AI features or nodes.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.microsoftexcel.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/app-nodes/ai-tools.md\"\n```\n\n----------------------------------------\n\nTITLE: Importing Freshworks CRM Templates Widget\nDESCRIPTION: Markdown template inclusion for Freshworks CRM integration examples and templates\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.freshworkscrm.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'freshworks-crm') ]]\n```\n\n----------------------------------------\n\nTITLE: Include LangChain Overview Link Snippet\nDESCRIPTION: This directive includes a reusable Markdown snippet containing a link to the LangChain overview documentation, relevant for nodes integrating with LangChain.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.lmchatgooglegemini.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/cluster-nodes/langchain-overview-link.md\"\n```\n\n----------------------------------------\n\nTITLE: Disabling CORS on SSE Connections\nDESCRIPTION: Disables Cross-Origin Resource Sharing (CORS) on Server-Sent Events (SSE) connections in production environments.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/release-notes/0-x.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nCLI: disable CORS on SSE connections in production.\n```\n\n----------------------------------------\n\nTITLE: Embedding Templates Widget in Markdown (n8n/MkDocs)\nDESCRIPTION: This directive embeds a dynamic templates widget into the documentation page, specific to the 'cloudflare' integration. It uses the page title as an argument and relies on n8n's custom documentation generation setup, likely built upon MkDocs or a similar system.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.cloudflare.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'cloudflare') ]]\n```\n\n----------------------------------------\n\nTITLE: Template Widget Shortcode\nDESCRIPTION: This shortcode `[[ templatesWidget(...) ]]` is likely processed by the documentation generator to dynamically insert relevant workflow templates related to the 'openweathermap' integration, using the current page's title.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.openweathermap.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- see https://www.notion.so/n8n/Pull-in-templates-for-the-integrations-pages-37c716837b804d30a33b47475f6e3780 -->\n[[ templatesWidget(page.title, 'openweathermap') ]]\n```\n\n----------------------------------------\n\nTITLE: Embedding Paddle Workflow Templates\nDESCRIPTION: This placeholder or directive is used within the n8n documentation system (potentially based on Notion integration, as hinted by comments) to dynamically pull in and display relevant n8n workflow templates specific to the Paddle integration. It likely calls a function or macro named 'templatesWidget' during the documentation build process, passing the current page's title and the identifier 'paddle' as arguments.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.paddle.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[[ templatesWidget(page.title, 'paddle') ]]\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration in Markdown\nDESCRIPTION: YAML frontmatter configuration block defining the page metadata including title, description and content type.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/configuration-examples/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Configuration examples\ndescription: An overview containing different configuration examples.\ncontentType: overview\n---\n```\n\n----------------------------------------\n\nTITLE: Template Macro Import and Usage\nDESCRIPTION: Template code for importing and using macros to generate function documentation dynamically.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/data-transformation-functions/booleans.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[[% import \"_macros/data-functions.html\" as dataFunctions %]]\n\n[[% for func in df_boolean %]]\n[[ dataFunctions.dataFunctions(\"boolean\", func.funcName, func.returns, func.description, func.args, func.examples ) ]]\n[[% endfor %]]\n```\n\n----------------------------------------\n\nTITLE: Template Macro Import for Data Functions\nDESCRIPTION: Imports a template macro file that contains data function documentation helpers.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/data-transformation-functions/arrays.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n[[% import \"_macros/data-functions.html\" as dataFunctions %]]\n```\n\n----------------------------------------\n\nTITLE: Markdown Include Statement for Credential-Only Nodes\nDESCRIPTION: Include statement for pulling in reusable content specific to credential-only nodes\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/document-templates/credentials.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/credentials/cred-only-statement.md\"\n```\n\n----------------------------------------\n\nTITLE: Snippets Include Statement\nDESCRIPTION: Markdown include statement for embedding color key snippets into the documentation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/advanced-ai/examples/data-google-sheets.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/examples-color-key.md\"\n```\n\n----------------------------------------\n\nTITLE: Workflow Permissions Table in Markdown\nDESCRIPTION: Markdown table defining permissions for different workflow roles (Creator and Editor), showing what actions each role can perform.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/workflows/sharing.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Permissions | Creator | Editor | \n| ----------- | ------- | ------ | \n| View workflow (read-only) | :white_check_mark: | :white_check_mark: |\n| View executions | :white_check_mark: | :white_check_mark: |\n| Update (including tags) | :white_check_mark: | :white_check_mark: |\n| Run | :white_check_mark: | :white_check_mark: |\n| Share | :white_check_mark: | :x: |\n| Export | :white_check_mark: | :white_check_mark: |\n| Delete | :white_check_mark: | :x: |\n```\n\n----------------------------------------\n\nTITLE: Embedding Templates Widget for RSS Feed Trigger in Markdown\nDESCRIPTION: This snippet demonstrates how to embed a templates widget for the RSS Feed Trigger node using custom markdown syntax. It's used to dynamically include relevant templates and examples for the node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.rssfeedreadtrigger.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'rss-feed-trigger') ]]\n```\n\n----------------------------------------\n\nTITLE: Markdown Note Block for Credentials\nDESCRIPTION: This Markdown block uses a custom note syntax (`/// note`) to direct users to the OpenWeatherMap credentials setup guide.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.openweathermap.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n/// note | Credentials\nRefer to [OpenWeatherMap credentials](/integrations/builtin/credentials/openweathermap.md) for guidance on setting up authentication. \n///\n```\n\n----------------------------------------\n\nTITLE: Documenting Item List Output Parser Node Options in Markdown\nDESCRIPTION: This snippet outlines the configurable options for the Item List Output Parser node using Markdown syntax. It details crucial parameters such as Number of Items and Separator, explains the use of -1 for unlimited items, and describes the default separator behavior. The documentation helps users understand how to control the output and formatting of item lists in their n8n workflows.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.outputparseritemlist.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n* **Number of Items**: Enter the maximum items to return. Set to `-1` for unlimited items.\n* **Separator**: Select the separator used to split the results into separate items. Defaults to a new line.\n```\n\n----------------------------------------\n\nTITLE: Templating Widget Include for Intercom\nDESCRIPTION: Markdown template include statement for displaying Intercom-related workflow templates in the documentation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.intercom.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'intercom') ]]\n```\n\n----------------------------------------\n\nTITLE: Displaying Mindee Templates Widget in Markdown\nDESCRIPTION: This code snippet inserts a templates widget for Mindee into the markdown document. It uses a custom syntax to dynamically include templates related to the Mindee integration.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.mindee.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'mindee') ]]\n```\n\n----------------------------------------\n\nTITLE: Including Snippets Reference\nDESCRIPTION: Markdown include directive for sub-node expression resolution documentation\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstorepinecone.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/cluster-nodes/sub-node-expression-resolution.md\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Assistant Description Example\nDESCRIPTION: Example description text for an OpenAI assistant that defines its basic functionality and purpose.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-langchain.openai/assistant-operations.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nA virtual assistant that helps users with daily tasks, including setting reminders, answering general questions, and providing quick information.\n```\n\n----------------------------------------\n\nTITLE: Template Import Directive\nDESCRIPTION: Macro import statement for section table of contents template\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/user-management/rbac/index.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[[% import \"_macros/section-toc.html\" as sectionToc %]]\n\n[[ sectionToc.sectionToc(page) ]]\n```\n\n----------------------------------------\n\nTITLE: GoToWebinar Template Widget Implementation\nDESCRIPTION: Markdown template widget implementation for displaying GoToWebinar-related templates.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.gotowebinar.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'gotowebinar') ]]\n```\n\n----------------------------------------\n\nTITLE: Including LangChain Overview Link (Markdown)\nDESCRIPTION: Markdown directive used to embed a reusable snippet containing a link or overview information related to LangChain, likely providing context or further reading within the n8n documentation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainretrievalqa/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/cluster-nodes/langchain-overview-link.md\"\n```\n\n----------------------------------------\n\nTITLE: Displaying UpLead Templates Widget in Markdown\nDESCRIPTION: This code snippet is a placeholder for dynamically inserting UpLead-related templates into the documentation page. It uses a custom syntax to indicate where templates should be displayed based on the page title and the 'uplead' keyword.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.uplead.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'uplead') ]]\n```\n\n----------------------------------------\n\nTITLE: Markdown Include Directive\nDESCRIPTION: An include directive to add a common snippet about unsupported operations.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.googlecloudstorage.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/app-nodes/operation-not-supported.md\"\n```\n\n----------------------------------------\n\nTITLE: Including Operation Not Supported Snippet\nDESCRIPTION: Markdown include directive for operation not supported documentation snippet\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.freshworkscrm.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/app-nodes/operation-not-supported.md\"\n```\n\n----------------------------------------\n\nTITLE: Adding Next Steps Section\nDESCRIPTION: Template for providing additional resources and next steps for readers to continue learning.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/document-templates/tutorial.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n## Next steps\n\nNow you have seen how to create a basic AI workflow, there are plenty of resources to build on that knowledge and plenty of examples to give you ideas of where to go next:\n\n* Learn more about AI concepts and view examples in [Examples and concepts](/advanced-ai/examples/introduction.md).\n* Browse AI [Workflow templates](https://n8n.io/workflows/?categories=25){:target=_blank .external-link}.\n* Find out how to [enhance the AI agent with tools](/advanced-ai/examples/understand-tools.md).\n```\n\n----------------------------------------\n\nTITLE: Embedding Contentful Templates Widget\nDESCRIPTION: This shortcode is used within the n8n documentation system (likely Hugo or a similar static site generator) to dynamically embed a widget. The widget displays relevant templates and examples specifically for the Contentful integration, using the current page's title and the keyword 'contentful' as parameters.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.contentful.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'contentful') ]]\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the documentation page defining metadata like description and content type.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/workflows/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndescription: \"Learn about the key components of automation in n8n.\"\ncontentType: overview\n---\n```\n\n----------------------------------------\n\nTITLE: Template Widget Include Statement\nDESCRIPTION: Markdown include statement for rendering Help Scout related templates in the documentation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.helpscout.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'helpscout') ]]\n```\n\n----------------------------------------\n\nTITLE: UptimeRobot Node Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the UptimeRobot node documentation page, specifying title, description, and content type.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.uptimerobot.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: UptimeRobot node documentation\ndescription: Learn how to use the UptimeRobot node in n8n. Follow technical documentation to integrate UptimeRobot node into your workflows.\ncontentType: [integration, reference]\n---\n```\n\n----------------------------------------\n\nTITLE: Including Redoc JavaScript Bundle\nDESCRIPTION: This snippet includes the Redoc standalone JavaScript bundle from a CDN. This script is necessary for rendering the Redoc component and displaying the API documentation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/api/api-reference.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.redoc.ly/redoc/latest/bundles/redoc.standalone.js\"> </script>\n```\n\n----------------------------------------\n\nTITLE: Including Pagination Variables in Markdown Documentation\nDESCRIPTION: This snippet uses a Markdown include directive to insert content from a separate file containing pagination variables documentation. This allows for modular documentation management.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/http-node-variables.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/core-nodes/http/pagination-variables.md\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Templates Widget in n8n Documentation\nDESCRIPTION: This shortcode dynamically inserts a widget displaying relevant templates and examples for the integration described on the page (Microsoft Dynamics CRM). It uses the page's title and the integration's slug ('microsoft-dynamics-crm') as parameters.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.microsoftdynamicscrm.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'microsoft-dynamics-crm') ]]\n```\n\n----------------------------------------\n\nTITLE: Salesmate Templates Widget Integration\nDESCRIPTION: Template widget shortcode for displaying Salesmate-specific workflow templates and examples.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.salesmate.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'salesmate') ]]\n```\n\n----------------------------------------\n\nTITLE: Embedding n8n Workflow Demo from File\nDESCRIPTION: This custom directive embeds a visual demonstration of the n8n workflow defined in the 'chapter-2.json' file. It's used within the documentation system (likely VuePress or a similar framework processing the markdown) to show the user the final workflow structure they will build in the tutorial. The directive requires the specified JSON file to exist at the given path relative to the documentation source and the system to be configured to handle the 'workflowDemo' directive.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/courses/level-one/chapter-2.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[[ workflowDemo(\"file:////courses/level-one/chapter-2.json\") ]]\n```\n\n----------------------------------------\n\nTITLE: Configuring Redoc for n8n API Documentation\nDESCRIPTION: This snippet sets up the Redoc component to display the n8n API documentation. It specifies the OpenAPI specification URL, disables search, hides the hostname, and applies custom theming for typography and sidebar.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/api/api-reference.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<redoc\n  spec-url=\"/api/v1/openapi.yml\"\n  disable-search\n  hide-hostname\n  theme='{\n    \"typography\": {\n      \"fontSize\": \"14px\",\n      \"lineHeight\": \"1.2em\",\n      \"fontFamily\": \"\\\"Open sans\\\", Helvetica, sans-serif\",\n      \"headings\": {\n        \"fontFamily\": \"\\\"Open sans\\\", Helvetica, sans-serif\"\n      }\n    },\n    \"sidebar\": {\n      \"backgroundColor\": \"#eaeaea\",\n      \"width\": \"280px\"\n    }\n  }' />\n```\n\n----------------------------------------\n\nTITLE: Including Standard 'Operation Not Supported' Content\nDESCRIPTION: This MkDocs Material include directive incorporates a reusable markdown snippet from the specified path. This snippet typically contains standard information or instructions related to operations that might not be directly supported by the node, often guiding users on how to use generic methods or alternative approaches.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.microsoftdynamicscrm.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/app-nodes/operation-not-supported.md\"\n```\n\n----------------------------------------\n\nTITLE: Including Shared Content using Markdown Include Syntax\nDESCRIPTION: This line utilizes the `--8<--` syntax, characteristic of the `markdown-include` extension or similar mechanisms in static site generators like MkDocs. It instructs the build process to include the content of the specified markdown file (`_snippets/integrations/builtin/app-nodes/operation-not-supported.md`) at this location, promoting content reuse for standard messages.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.box.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/app-nodes/operation-not-supported.md\"\n```\n\n----------------------------------------\n\nTITLE: Inserting Templates Widget for MailerLite Integration in n8n Documentation (Liquid)\nDESCRIPTION: This Liquid snippet inserts a widget that displays predefined templates related to the MailerLite node into the n8n documentation page. It requires a compatible static site generator or documentation system (such as Notion-backed n8n Docs) capable of interpreting the 'templatesWidget' function. The function takes the current page's title and the keyword 'mailerlite' as arguments to filter and present relevant integration templates. Inputs are the page title and integration identifier, and the output is a rendered list of workflow templates. Ensure the documentation tooling supports widget and Liquid-style syntax.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.mailerlite.md#2025-04-22_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n[[ templatesWidget(page.title, 'mailerlite') ]]\n```\n\n----------------------------------------\n\nTITLE: Embedding CircleCI Workflow Templates via Shortcode\nDESCRIPTION: This snippet uses a specific shortcode syntax likely processed by the documentation's static site generator. The `templatesWidget` shortcode dynamically fetches and displays relevant n8n workflow templates for the CircleCI integration, using the current page's title and the integration key 'circleci' as parameters.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.circleci.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'circleci') ]]\n```\n\n----------------------------------------\n\nTITLE: Including Templates Widget in Markdown\nDESCRIPTION: This code snippet uses a custom Markdown syntax to include a templates widget. It dynamically pulls in templates related to Jenkins integration based on the page title.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.jenkins.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'jenkins') ]]\n```\n\n----------------------------------------\n\nTITLE: Embedding Cockpit Templates Widget\nDESCRIPTION: This markdown-like directive is used within the n8n documentation system to dynamically include relevant workflow templates and examples for the Cockpit node. It uses the current page's title and the 'cockpit' identifier to find appropriate content.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.cockpit.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'cockpit') ]]\n```\n\n----------------------------------------\n\nTITLE: Inserting Templates Widget in Markdown\nDESCRIPTION: This code snippet demonstrates how to insert a templates widget in the markdown documentation. It uses a custom syntax to include templates related to the RSS Read node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.rssfeedread.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'rss-read') ]]\n```\n\n----------------------------------------\n\nTITLE: NASA Node Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for NASA node documentation page, specifying metadata like title, description, content type and priority.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.nasa.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: NASA node documentation\ndescription: Learn how to use the NASA node in n8n. Follow technical documentation to integrate NASA node into your workflows.\ncontentType: [integration, reference]\npriority: medium\n```\n\n----------------------------------------\n\nTITLE: Zendesk Node Templating Include\nDESCRIPTION: Markdown template inclusion for displaying Zendesk-related templates in the documentation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.zendesk.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'zendesk') ]]\n```\n\n----------------------------------------\n\nTITLE: WordPress Templates Widget Include\nDESCRIPTION: Template widget inclusion syntax for displaying WordPress related templates.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.wordpress.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'wordpress') ]]\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: Frontmatter metadata configuration for the cluster nodes documentation page, defining content type, title and description.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ncontentType: overview\ntitle: Cluster nodes\ndescription: Understand cluster nodes in n8n, and browse the cluster nodes library.\n---\n```\n\n----------------------------------------\n\nTITLE: Configuration YAML Frontmatter\nDESCRIPTION: YAML frontmatter configuration for the documentation page, defining metadata like title, description, content type and tags.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/environment-variables/credentials.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Credentials environment variables\ndescription: Manage default credentials and override them through environment variables your self-hosted n8n instance.\ncontentType: reference\ntags:\n  - environment variables\nhide:\n  - toc\n  - tags\n---\n```\n\n----------------------------------------\n\nTITLE: Template Macro Import and Usage\nDESCRIPTION: Template code that imports and uses macros for generating data function documentation, specifically for number-related functions.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/data-transformation-functions/numbers.md#2025-04-22_snippet_1\n\nLANGUAGE: nunjucks\nCODE:\n```\n[[% import \"_macros/data-functions.html\" as dataFunctions %]]\n\n[[% for func in df_number %]]\n[[ dataFunctions.dataFunctions(\"number\", func.funcName, func.returns, func.description, func.args, func.examples ) ]]\n[[% endfor %]]\n```\n\n----------------------------------------\n\nTITLE: Markdown Template Widget Inclusion\nDESCRIPTION: Includes a templates widget for displaying Wekan-related workflow templates\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.wekan.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'wekan') ]]\n```\n\n----------------------------------------\n\nTITLE: Embedding PostHog Templates using a Widget\nDESCRIPTION: This snippet utilizes a documentation-specific shortcode or template engine syntax to dynamically embed relevant workflow templates and examples for the PostHog node. It calls a `templatesWidget` function, passing the current page's title (`page.title`) and the specific integration identifier ('posthog') as parameters. This mechanism requires the underlying documentation generation system to interpret and replace this tag with the appropriate content.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.posthog.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[[ templatesWidget(page.title, 'posthog') ]]\n```\n\n----------------------------------------\n\nTITLE: Creating Tutorial Title in Markdown\nDESCRIPTION: Demonstrates the proper format for the main tutorial title using imperative call to action.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/document-templates/tutorial.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Build an AI chat agent with n8n\n```\n\n----------------------------------------\n\nTITLE: Documentation Snippet Include\nDESCRIPTION: Markdown include statement for embedding a color key snippet into the documentation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/advanced-ai/examples/api-workflow-tool.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/examples-color-key.md\"\n```\n\n----------------------------------------\n\nTITLE: Including External Markdown Files - AI Glossary\nDESCRIPTION: Reference to an external markdown file containing AI-related terminology definitions\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent/react-agent.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_glossary/ai-glossary.md\"\n```\n\n----------------------------------------\n\nTITLE: Importing Nunjucks Macro for Data Function Documentation\nDESCRIPTION: This Nunjucks statement imports macros defined in the `_macros/data-functions.html` file, making them available under the `dataFunctions` namespace within this template. This allows for reusable code to format the documentation blocks for different functions.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/data-transformation-functions/objects.md#2025-04-22_snippet_1\n\nLANGUAGE: nunjucks\nCODE:\n```\n[[% import \"_macros/data-functions.html\" as dataFunctions %]]\n```\n\n----------------------------------------\n\nTITLE: Including Pagination Variables Snippet in Markdown\nDESCRIPTION: This snippet includes content from another file containing information about built-in variables for HTTP node requests and responses when using pagination.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.httprequest/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/core-nodes/http/pagination-variables.md\"\n```\n\n----------------------------------------\n\nTITLE: Including Operation Not Supported Snippet (Markdown Include)\nDESCRIPTION: Uses a Markdown include syntax (likely `mkdocs-include-markdown-plugin` indicated by `--8<--`) to insert reusable content from the specified snippet file (`_snippets/integrations/builtin/app-nodes/operation-not-supported.md`). This snippet likely contains standard text explaining how to handle or request unsupported operations.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.microsoftexcel.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/app-nodes/operation-not-supported.md\"\n```\n\n----------------------------------------\n\nTITLE: Embedding Templates Widget for UProc using Shortcode\nDESCRIPTION: This shortcode directive dynamically embeds pre-defined templates relevant to the UProc integration onto the page. It calls a function `templatesWidget` within the documentation build system, passing the current page title and the integration name ('uproc') as arguments.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.uproc.md#2025-04-22_snippet_3\n\nLANGUAGE: shortcode\nCODE:\n```\n[[ templatesWidget(page.title, 'uproc') ]]\n```\n\n----------------------------------------\n\nTITLE: Including Node Operations Snippet\nDESCRIPTION: A markdown include statement for node operations documentation\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/workflows/components/nodes.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/node-operations.md\"\n```\n\n----------------------------------------\n\nTITLE: Template Loop for Array Functions\nDESCRIPTION: Iterates through array functions to generate documentation using the imported macro.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/data-transformation-functions/arrays.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n[[% for func in df_array %]]\n[[ dataFunctions.dataFunctions(\"array\", func.funcName, func.returns, func.description, func.args, func.examples ) ]]\n[[% endfor %]]\n```\n\n----------------------------------------\n\nTITLE: Preventing Unsupported Data in Function Nodes\nDESCRIPTION: The Function and Function Item nodes were updated in version 0.157.0 to prevent returning unsupported data types.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/release-notes/0-x.md#2025-04-22_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n* [Function:](/integrations/builtin/core-nodes/n8n-nodes-base.code/index.md) The node now prevents unsupported data from being returned.\n* [Function Item:](/integrations/builtin/core-nodes/n8n-nodes-base.code/index.md) The node now prevents unsupported data from being returned.\n```\n\n----------------------------------------\n\nTITLE: Configuring Jenkins Node in n8n\nDESCRIPTION: The Jenkins node was added in version 0.159.0 to allow integration with Jenkins CI/CD systems.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/release-notes/0-x.md#2025-04-22_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n* [Jenkins](/integrations/builtin/app-nodes/n8n-nodes-base.jenkins.md)\n```\n\n----------------------------------------\n\nTITLE: Updating MongoDB Driver\nDESCRIPTION: Updates the MongoDB driver to version 4.9.1 in the MongoDB node.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/release-notes/0-x.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nMongoDB node: updated the Mongo driver to 4.9.1.\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Table in Markdown\nDESCRIPTION: Markdown table listing key environment variables for credential configuration, including their types, default values and descriptions.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/hosting/configuration/environment-variables/credentials.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable | Type  | Default  | Description |\n| :------- | :---- | :------- | :---------- |\n| `CREDENTIALS_OVERWRITE_DATA`<br>/`_FILE` | * | - | Overwrites for credentials. |\n| `CREDENTIALS_OVERWRITE_ENDPOINT` | String | - | The API endpoint to fetch credentials. |\n| `CREDENTIALS_DEFAULT_NAME` | String | `My credentials` | The default name for credentials. |\n```\n\n----------------------------------------\n\nTITLE: Defining Learning Objectives Section\nDESCRIPTION: Outlines the key concepts and skills that will be learned through the tutorial.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/document-templates/tutorial.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### What you will learn\n\n- AI concepts in n8n\n- How to use the AI Agent node\n- Working with Chat input\n```\n\n----------------------------------------\n\nTITLE: Markdown Snippet Include\nDESCRIPTION: A directive to include a shared snippet about unsupported operations\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.invoiceninja.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/app-nodes/operation-not-supported.md\"\n```\n\n----------------------------------------\n\nTITLE: Embedding Template Widgets in AWS ELB Integration Docs - Markdown\nDESCRIPTION: This snippet demonstrates how to embed a dynamic templates widget using Jinja-like syntax within a Markdown documentation file. This is used for pulling workflow templates relevant to AWS ELB, enhancing documentation with practical usage examples. Requires n8n documentation templating infrastructure; 'page.title' must resolve to an appropriate value for the integration.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.awselb.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'aws-elb') ]]\n```\n\n----------------------------------------\n\nTITLE: Displaying Wise Templates in Markdown\nDESCRIPTION: This code snippet is a placeholder for dynamically inserting Wise-related templates into the documentation. It uses a custom syntax to indicate where templates should be displayed based on the page title and the 'wise' keyword.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.wise.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'wise') ]]\n```\n\n----------------------------------------\n\nTITLE: LangChain Overview Include\nDESCRIPTION: Markdown include directive for LangChain overview link\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstorepinecone.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/cluster-nodes/langchain-overview-link.md\"\n```\n\n----------------------------------------\n\nTITLE: Templating Widget Include for Medium\nDESCRIPTION: Markdown include statement for displaying Medium-related templates widget on the documentation page.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.medium.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'medium') ]]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Deduplication by Maximum Value in n8n - Markdown\nDESCRIPTION: This Markdown table illustrates the state of input items as processed by the Remove Duplicates node in n8n with deduplication configured based on a numeric id, before and after processing. These tables are intended to visually communicate which items are kept or discarded for users of n8n documentation. They do not involve executable code, but must be properly rendered in Markdown-compatible environments to provide clarity. No external dependencies are required for table use, and all data is static.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/core-nodes/n8n-nodes-base.removeduplicates/templates-and-examples.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| **id** | **name**      | **job**           | **last_updated**         |\\n|--------|---------------|-------------------|--------------------------|\\n| 1      | Taylor Swift  | Pop star          | 2024-09-20T10:12:43.493Z |\\n| 1      | Taylor Swift  | Pop star          | 2024-09-20T10:12:43.493Z |\\n| 2      | Ed Sheeran    | Singer-songwriter | 2024-10-05T08:30:59.493Z |\\n| 2      | Ed Sheeran    | Singer-songwriter | 2024-10-05T08:30:59.493Z |\\n| 3      | Adele         | Singer-songwriter | 2024-10-07T14:15:59.493Z |\\n| 3      | Adele         | Singer-songwriter | 2024-10-07T14:15:59.493Z |\\n| 4      | Bruno Mars    | Singer-songwriter | 2024-08-25T17:45:12.493Z |\\n| 5      | Billie Eilish | Singer-songwriter | 2024-09-10T09:30:12.493Z |\\n| 6      | Katy Perry    | Pop star          | 2024-10-08T12:30:45.493Z |\\n| 7      | Lady Gaga     | Pop star          | 2024-09-15T14:45:30.493Z |\\n| 8      | Rihanna       | Pop star          | 2024-10-01T11:50:22.493Z |\\n| 9      | Tom Hanks     | Actor             | 2024-10-17T13:58:31.493Z |\n```\n\nLANGUAGE: markdown\nCODE:\n```\n| **id** | **name**  | **job**     | **last_updated**         |\\n|--------|-----------|-------------|--------------------------|\\n| 15     | Bob Dylan | Folk singer | 2024-09-24T08:03:16.493Z |\n```\n\nLANGUAGE: markdown\nCODE:\n```\n| **id** | **name**      | **job**           | **last_updated**         |\\n|--------|---------------|-------------------|--------------------------|\\n| 0      | Madonna       | Pop star          | 2024-10-17T17:11:38.493Z |\\n| 1      | Taylor Swift  | Pop star          | 2024-09-20T10:12:43.493Z |\\n| 1      | Taylor Swift  | Pop star          | 2024-09-20T10:12:43.493Z |\\n| 2      | Ed Sheeran    | Singer-songwriter | 2024-10-05T08:30:59.493Z |\\n| 2      | Ed Sheeran    | Singer-songwriter | 2024-10-05T08:30:59.493Z |\\n| 3      | Adele         | Singer-songwriter | 2024-10-07T14:15:59.493Z |\\n| 3      | Adele         | Singer-songwriter | 2024-10-07T14:15:59.493Z |\\n| 4      | Bruno Mars    | Singer-songwriter | 2024-08-25T17:45:12.493Z |\\n| 5      | Billie Eilish | Singer-songwriter | 2024-09-10T09:30:12.493Z |\\n| 6      | Katy Perry    | Pop star          | 2024-10-08T12:30:45.493Z |\\n| 7      | Lady Gaga     | Pop star          | 2024-09-15T14:45:30.493Z |\\n| 8      | Rihanna       | Pop star          | 2024-10-01T11:50:22.493Z |\\n| 9      | Tom Hanks     | Actor             | 2024-10-17T13:58:31.493Z |\n```\n\n----------------------------------------\n\nTITLE: OpenAI Text Operations Configuration Parameters\nDESCRIPTION: Markdown documentation showing the configuration parameters and options for OpenAI text operations in n8n, including model messaging and content moderation settings.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-langchain.openai/text-operations.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: OpenAI Text operations \ndescription: Documentation for the Text operations in OpenAI node in n8n, a workflow automation platform. Includes details of operations and configuration, and links to examples and credentials information.\ncontentType: [integration, reference]\npriority: critical\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Template Widget Inclusion\nDESCRIPTION: Template inclusion syntax for displaying LoneScale-specific templates in the documentation.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.lonescale.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[[ templatesWidget(page.title, 'lonescale') ]]\n```\n\n----------------------------------------\n\nTITLE: Include AI Glossary Snippet\nDESCRIPTION: This directive includes a reusable Markdown snippet defining common AI-related terms.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.lmchatgooglegemini.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_glossary/ai-glossary.md\"\n```\n\n----------------------------------------\n\nTITLE: Listing Potential n8n Cloud Outbound IP Addresses (Text)\nDESCRIPTION: A list of IPv4 addresses and CIDR blocks that n8n Cloud instances might use for outbound connections. This list is indicative and subject to change without notice due to the dynamic nature of cloud infrastructure, hence strong authentication is preferred over IP allowlisting.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/manage-cloud/cloud-ip.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n* 20.79.227.226/32\n* 20.113.47.122/32\n* 20.218.202.73/32\n* 98.67.233.91/32\n* 4.182.111.50/32\n* 4.182.129.20/32\n* 4.182.88.118/32\n* 4.182.212.136/32\n* 98.67.244.108/32\n* 72.144.128.145/32\n* 72.144.83.147/32\n* 72.144.69.38/32\n* 72.144.111.50/32\n* 4.182.128.108/32\n* 4.182.190.144/32\n* 4.182.191.184/32\n* 98.67.233.200/32\n```\n\nLANGUAGE: text\nCODE:\n```\n* 20.52.126.0/28\n* 20.218.238.112/28\n* 4.182.64.64/28\n* 20.218.174.0/28\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the Metabase node documentation page defining title, description and content type.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.metabase.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Metabase node documentation\ndescription: Learn how to use the Metabase node in n8n. Follow technical documentation to integrate Metabase node into your workflows.\ncontentType: [integration, reference]\n```\n\n----------------------------------------\n\nTITLE: n8n Version 0.173.1 Release Information\nDESCRIPTION: Release information showing version number, date and bug fix note.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/release-notes/0-x.md#2025-04-22_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n## n8n@0.173.1\n\nView the [commits](https://github.com/n8n-io/n8n/compare/n8n@0.173.0...n8n@0.173.1) for this version.\n**Release date:** 2022-04-19\n\nFixes a bug with the Discord node icon name.\n```\n\n----------------------------------------\n\nTITLE: WhatsApp Business Cloud Operations List\nDESCRIPTION: List of supported operations for the WhatsApp Business Cloud node including message and media management capabilities.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.whatsapp/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Message\n\t* Send\n\t* Send and Wait for Response\n\t* Send Template\n* Media\n\t* Upload\n\t* Download\n\t* Delete\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration for Documentation\nDESCRIPTION: YAML frontmatter configuration block defining metadata for the documentation page including title, description and content type.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/document-templates/credentials.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: _Name_ credentials\ndescription: Documentation for the _Name_ credentials. Use these credentials to authenticate _Name_ in n8n, a workflow automation platform.\ncontentType: [integration, reference]\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Frontmatter for Documentation Page (YAML)\nDESCRIPTION: This YAML block defines metadata (frontmatter) for the documentation page. It includes the title, description, and content type, which are likely used by the documentation generation system (like Astro or similar) to categorize and display the page.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/code/builtin/data-transformation-functions/objects.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n#https://www.notion.so/n8n/Frontmatter-432c2b8dff1f43d4b1c8d20075510fe4\ntitle: Data transformation functions for objects\ndescription: A reference document listing built-in convenience functions to support data transformation in expressions for objects.\ncontentType: reference\n---\n```\n\n----------------------------------------\n\nTITLE: n8n Version 0.174.0 Release Information\nDESCRIPTION: Release information showing version number, date and link to commits.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/release-notes/0-x.md#2025-04-22_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n## n8n@0.174.0\n\nView the [commits](https://github.com/n8n-io/n8n/compare/n8n@0.173.1...n8n@0.174.0) for this version.\n**Release date:** 2022-04-25\n```\n\n----------------------------------------\n\nTITLE: Visualizing n8n Workflow State (Chapter 5.4)\nDESCRIPTION: This custom tag displays a visual representation of the n8n workflow described in this tutorial step (Chapter 5.4). It shows the workflow state after the Edit Fields (Set) node has been added and configured to handle the 'true' output of the If node, preparing data for insertion into the 'processingOrders' Airtable table.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/courses/level-one/chapter-5/chapter-5.4.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[ workflowDemo(\"file:////courses/level-one/chapter-5/chapter-5.4.json\") ]]\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration in Markdown\nDESCRIPTION: YAML frontmatter configuration for the documentation page, specifying title, description, content type and display settings.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/source-control-environments/understand/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Understand source control and environments\ndescription: Understand how source control and environments work in n8n.\ncontentType: overview\nhide:\n  - toc\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to Advanced AI Documentation\nDESCRIPTION: A markdown link that redirects users to the Advanced AI documentation section using relative path syntax.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/integrations/builtin/cluster-nodes/langchain-overview-link.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Advanced AI](/advanced-ai/index.md)\n```\n\n----------------------------------------\n\nTITLE: Reusing OAuth2 Integration Button in Markdown\nDESCRIPTION: This Markdown snippet imports a reusable component (_snippets/integrations/builtin/credentials/cloud-oauth-button.md) that likely displays an OAuth2 authentication button for user onboarding. This approach relies on Markdown includes or partials, as supported by certain documentation platforms. The snippet enables consistent embedding of credential setup instructions but requires proper support for include syntax in the build system. It does not accept parameters and only renders static content.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/credentials/helpscout.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/credentials/cloud-oauth-button.md\"\n```\n\n----------------------------------------\n\nTITLE: Including Reusable Snippet (Markdown Include Syntax)\nDESCRIPTION: This directive uses a Markdown extension (likely MkDocs Snippets) to include the content of a shared file located at `_snippets/integrations/builtin/app-nodes/operation-not-supported.md`. This promotes reusability for common content sections across documentation pages.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.lemlist.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/app-nodes/operation-not-supported.md\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Snippet Inclusion\nDESCRIPTION: Include directive for adding a shared snippet about unsupported operations.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.lonescale.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/app-nodes/operation-not-supported.md\"\n```\n\n----------------------------------------\n\nTITLE: Including MIT License in Documentation - Plain Text\nDESCRIPTION: This snippet provides the full MIT License text as required for open-source projects. It is intended for inclusion in project documentation or source files to clarify rights and responsibilities of users and contributors. There are no dependencies; simply ensure the license appears in source distributions to meet compliance requirements. The input is the license block; the output is legal protection and clarity. This license allows broad usage, modification, and distribution, but must always be accompanied by the copyright notice.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/styles/from-write-good/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nThe MIT License (MIT)\n\nCopyright (c) 2014 Brian Ford\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \\\"Software\\\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: n8n Version 0.173.0 Release Information\nDESCRIPTION: Release information showing version number, date and link to commits.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/release-notes/0-x.md#2025-04-22_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n## n8n@0.173.0\n\nView the [commits](https://github.com/n8n-io/n8n/compare/n8n@0.172.0...n8n@0.173.0) for this version.\n**Release date:** 2022-04-19\n```\n\n----------------------------------------\n\nTITLE: Markdown Privacy Security Documentation\nDESCRIPTION: A markdown document detailing security measures and recommendations for n8n users, including instructions for both general users and self-hosted deployments.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/privacy-security/what-you-can-do.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: What you can do\ndescription: What you can do to improve privacy and data security when using n8n.\ncontentType: howto\n---\n<!-- vale off -->\n# What you can do\n\nIt's also your responsibility as a customer to ensure you are securing your code and data. This document lists some steps you can take.\n\n## All users\n\n* Report security issues and [terms of service](https://n8n.io/legal/#terms){:target=_blank .external-link} violations to security@n8n.io.\n* If more than one person uses your n8n instance, set up [User management](/user-management/index.md) and follow the [Best practices](/user-management/best-practices.md).\n* Use OAuth to connect integrations whenever possible.\n\n## Self-hosted users\n\nIf you self-host n8n, there are additional steps you can take:\n\n* Set up a reverse proxy to handle TLS, ensuring data is encrypted in transit.\n* Ensure data is encrypted at rest by using encrypted partitions, or encryption at the hardware level, and ensuring n8n and its database is written to that location.\n* Run a [Security audit](/hosting/securing/security-audit.md).\n* Be aware of the [Risks](/integrations/community-nodes/risks.md) when installing community nodes, or choose to disable them.\n* Make sure users can't import external modules in the Code node. Refer to [Environment variables | Nodes](https://docs.n8n.io/hosting/configuration/environment-variables/nodes) for more information.\n* Choose to exclude certain nodes. For example, you can disable nodes like Execute Command or SSH. Refer to [Environment variables | Nodes](https://docs.n8n.io/hosting/configuration/environment-variables/nodes) for more information.\n* For maximum privacy, you can [Isolate n8n](/hosting/configuration/configuration-examples/isolation.md).\n\n### GDPR for self-hosted users\n\n--8<-- \"_snippets/privacy-security/gdpr-self-hosted.md\"\n\n<!-- vale on -->\n```\n\n----------------------------------------\n\nTITLE: Displaying Screenshots of Pull and Push Buttons in Markdown\nDESCRIPTION: This markdown snippet shows how to display two screenshots with captions using the Details disclosure element. It demonstrates the pull and push buttons in both closed and open menu states.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/_snippets/source-control-environments/push-pull-menu-state.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n??? Details \"View screenshot\" \n\t<figure markdown>\n\t\t![Pull and push buttons when menu is closed](/_images/source-control-environments/pull-push-menu-closed.png)\n\t\t<figcaption>Pull and push buttons when menu is closed</figcaption>\n\t</figure>\n\n\t<figure markdown>\n\t\t![Pull and push buttons when menu is open](/_images/source-control-environments/pull-push-menu-open.png)\n\t\t<figcaption>Pull and push buttons when menu is open</figcaption>\n\t</figure>\n```\n\n----------------------------------------\n\nTITLE: Internet Operations Documentation\nDESCRIPTION: Lists internet-related operations including domain validation, DNS operations, SSL certificate verification, URL processing, and website analysis tools.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.uproc.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Internet\\n- Check if a domain exists\\n- Check if a domain has a DNS record\\n- Check if a  domain has the given IP address assigned...\n```\n\n----------------------------------------\n\nTITLE: Writing Tutorial Steps Example\nDESCRIPTION: Shows the format for writing step-by-step instructions in the tutorial, including proper heading structure and numbering.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/document-templates/tutorial.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 2. Add a trigger node\n\nEvery workflow needs somewhere to start. In n8n these are called ['trigger nodes'](/glossary.md#trigger-node-n8n). For this workflow, we want to start with a chat node.\n\n 1. Select **Add first step** or press ++tab++ to open the node menu.\n\n 1. Search for **Chat Trigger**. n8n shows a list of nodes that match the search.\n\n 1. Select **Chat Trigger** to add the node to the canvas. n8n opens the node.\n```\n\n----------------------------------------\n\nTITLE: Adding Conclusion Section\nDESCRIPTION: Provides a template for the tutorial conclusion, summarizing achievements and learnings.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/document-templates/tutorial.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## Congratulations!\n\nYou have taken your first steps in building useful and effective workflows with AI. In this tutorial we have investigated the basic building blocks of an AI workflow, added an **AI Agent** and a chat model, and adjusted the prompt to get the kind of output we wanted. We also added memory so the chat could retain context between messages.\n```\n\n----------------------------------------\n\nTITLE: Referencing Related LangChain Output Parser Documentation in Markdown\nDESCRIPTION: This code snippet provides a Markdown-formatted external link to the LangChain output parser documentation. It is designed to guide users towards additional resources for the underlying service that the Item List Output Parser node leverages. This reference is intended to supplement n8n documentation and does not require any dependencies other than Markdown support for links.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.outputparseritemlist.md#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\nRefer to [LangChain's output parser documentation](https://js.langchain.com/docs/concepts/output_parsers){:target=_blank .external-link} for more information about the service.\n```\n\n----------------------------------------\n\nTITLE: Breaking Change Warning Block in Markdown\nDESCRIPTION: A warning block in markdown format indicating a breaking change in version 0.118.0, with a reference link to more details.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/release-notes/0-x.md#2025-04-22_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n/// warning | Breaking change\nPlease note that this version contains a breaking change. You can read more about it [here](https://github.com/n8n-io/n8n/blob/master/packages/cli/BREAKING-CHANGES.md#01180).\nThe features that introduced the breaking changes have been flagged below.\n///\n```\n\n----------------------------------------\n\nTITLE: Node Expression Resolution Code\nDESCRIPTION: This code snippet appears to be referenced but not directly shown in the documentation. The documentation references sub-node expression resolution functionality.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoresupabase.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/cluster-nodes/sub-node-expression-resolution.md\"\n```\n\n----------------------------------------\n\nTITLE: Metadata Filter Example Code\nDESCRIPTION: This code snippet appears to be referenced but not directly shown in the documentation. The documentation discusses metadata filtering functionality but does not expose the actual implementation code.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoresupabase.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n--8<-- \"_snippets/integrations/builtin/cluster-nodes/langchain-root-nodes/vector-store-metadata-filter.md\"\n```\n\n----------------------------------------\n\nTITLE: Geographical Operations Documentation\nDESCRIPTION: Lists available geographical operations including country validation, distance calculations, address validation, coordinate operations, and location-based services. Many operations have specific coverage for Spain.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/app-nodes/n8n-nodes-base.uproc.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Geographical\\n- Check if a country's ISO code exists\\n- Discover if the distance between two coordinates is equal to another\\n- Discover if the distance (kilometers) between two coordinates is greater than the given input...\n```\n\n----------------------------------------\n\nTITLE: No prompt specified error resolution\nDESCRIPTION: Documentation explaining how to resolve the 'No prompt specified' error that occurs when the Prompt field is empty or invalid. Includes two common scenarios and their solutions.\nSOURCE: https://github.com/n8n-io/n8n-docs/blob/main/docs/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainretrievalqa/common-issues.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. When you've set the **Prompt** to **Define below** and have an expression in your **Text** that isn't generating a value.\n    * To resolve, enter a valid prompt in the **Text** field.\n    * Make sure any expressions reference valid fields and that they resolve to valid input rather than null.\n2. When you've set the **Prompt** to **Connected Chat Trigger Node** and the incoming data has null values.\n    * To resolve, make sure your input contains a `chatInput` field. Add an [Edit Fields (Set)] node to edit an incoming field name to `chatInput`.\n    * Remove any null values from the `chatInput` field of the input node.\n```"
  }
]