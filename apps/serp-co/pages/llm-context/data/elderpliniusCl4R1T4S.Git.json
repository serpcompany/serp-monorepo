[
  {
    "owner": "elder-plinius",
    "repo": "cl4r1t4s.git",
    "content": "TITLE: Using useQuery Hook with Object Configuration - React Query - TypeScript\nDESCRIPTION: This code snippet demonstrates the recommended pattern for using the useQuery hook from @tanstack/react-query in a TypeScript React project. By employing the object configuration format, it allows for clearer query management, specifying the query key, fetch function, and compatibility with additional options. The variables data, isLoading, and error are destructured from the useQuery return for further use in components. This approach depends on the @tanstack/react-query package and assumes fetchTodos is a valid asynchronous function returning the desired data. Typical use involves integrating this hook into functional React components to manage asynchronous data-fetching with proper loading and error states.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/LOVABLE/Lovable_Dev.txt#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, isLoading, error } = useQuery({\n  queryKey: ['todos'],\n  queryFn: fetchTodos,\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Semantic Code Search using semantic_search (XML)\nDESCRIPTION: Defines the `semantic_search` command for performing high-level, meaning-based searches across the codebase using a natural language query. It's useful for understanding complex relationships between code components. The command returns relevant repositories, files, and explanatory notes. The required parameter is `query` (the search phrase or question).\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<semantic_search step_number=\"001\" query=\"how are permissions to access a particular endpoint checked?\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining the 'codebase_search' Tool Function in JSON\nDESCRIPTION: This JSON object defines the 'codebase_search' tool. It searches for relevant code snippets within specified directories based on a query. It performs best with precise queries and may truncate results or only show docstrings/signatures for less relevant items. It has limitations on the number of files searched effectively (optimally under 500). Key parameters are 'Query' and 'TargetDirectories'.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/WINDSURF/Windsurf_Tools.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Find snippets of code from the codebase most relevant to the search query. This performs best when the search query is more precise and relating to the function or purpose of code. Results will be poor if asking a very broad question, such as asking about the general 'framework' or 'implementation' of a large component or system. Will only show the full code contents of the top items, and they may also be truncated. For other items it will only show the docstring and signature. Use view_code_item with the same path and node name to view the full code contents for any item. Note that if you try to search over more than 500 files, the quality of the search results will be substantially worse. Try to only search over a large number of files if it is really necessary.\",\n  \"name\": \"codebase_search\",\n  \"parameters\": {\n    \"properties\": {\n      \"Query\": {\n        \"description\": \"Search query\",\n        \"type\": \"string\"\n      },\n      \"TargetDirectories\": {\n        \"description\": \"List of absolute paths to directories to search over\",\n        \"items\": {\n          \"type\": \"string\"\n        },\n        \"type\": \"array\"\n      }\n    },\n    \"type\": \"object\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Programming Language Installer Tool - JSON\nDESCRIPTION: Defines 'programming_language_install_tool', a function for ensuring one or more programming languages are installed. It requires an array of language IDs and covers language-specific setup, including versioning and related package manager installation. Useful for bootstrapping developer environments via automation.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/REPLIT/Replit_Functions.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\\\"description\\\": \\\"If a program doesn't run, you may not have the programming language installed. Use programming_language_install_tool to install it. If you need to use python, include 'python-3.11' in programming_languages. For Python 3.10, use 'python-3.10'. If you need to use Node.js, include 'nodejs-20' in programming_languages. For Node.js 18, use 'nodejs-18'. Note, this will also install the language's package manager, so don't install it separately.\\\", \\\"name\\\": \\\"programming_language_install_tool\\\", \\\"parameters\\\": {\\\"properties\\\": {\\\"programming_languages\\\": {\\\"description\\\": \\\"IDs of the programming languages to install\\\", \\\"items\\\": {\\\"type\\\": \\\"string\\\"}, \\\"type\\\": \\\"array\\\"}}, \\\"required\\\": [\\\"programming_languages\\\"], \\\"type\\\": \\\"object\\\"}}\n```\n\n----------------------------------------\n\nTITLE: Defining Dependency Management Tool - JSON\nDESCRIPTION: Specifies the 'packager_tool', which automates installing or uninstalling language or system dependencies. It requires parameters for the dependency list, action (install or uninstall), and the target language or system, and can initialize relevant project files if not present. This contract standardizes package management for automation scripts.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/REPLIT/Replit_Functions.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\\\"description\\\": \\\"Installs the language (if needed) and installs or uninstalls a list of libraries or project dependencies. Use this tool to install dependencies instead of executing shell commands, or editing files manually. Use this tool with language_or_system=system to add system-dependencies instead of using apt install. Installing libraries for the first time also creates the necessary project files automatically (like 'package.json', 'cargo.toml', etc). This will automatically reboot all workflows.\\\", \\\"name\\\": \\\"packager_tool\\\", \\\"parameters\\\": {\\\"properties\\\": {\\\"dependency_list\\\": {\\\"default\\\": [], \\\"description\\\": \\\"The list of system dependencies or libraries to install. System dependencies are packages (attribute paths) in the Nixpkgs package collection. Example system dependencies: ['jq', 'ffmpeg', 'imagemagick']. Libraries are packages for a particular programming language. Example libraries: ['express'], ['lodash'].\\\", \\\"items\\\": {\\\"type\\\": \\\"string\\\"}, \\\"type\\\": \\\"array\\\"}, \\\"install_or_uninstall\\\": {\\\"description\\\": \\\"Whether to install or uninstall.\\\", \\\"enum\\\": [\\\"install\\\", \\\"uninstall\\\"], \\\"type\\\": \\\"string\\\"}, \\\"language_or_system\\\": {\\\"description\\\": \\\"The language for which to install/uninstall libraries, for example 'nodejs', 'bun', 'python', etc. Use system to install/uninstall system dependencies.\\\", \\\"type\\\": \\\"string\\\"}}, \\\"required\\\": [\\\"install_or_uninstall\\\", \\\"language_or_system\\\"], \\\"type\\\": \\\"object\\\"}}\n```\n\n----------------------------------------\n\nTITLE: Defining the 'create_memory' Tool Function in JSON\nDESCRIPTION: This JSON object defines the 'create_memory' tool. It allows saving, updating, or deleting important contextual information (e.g., user preferences, code snippets, project details) to a memory database. It takes an 'Action' ('create', 'update', 'delete'), 'Content', 'Title', optional 'Id' for existing memories, 'CorpusNames' (for workspace association), 'Tags' for retrieval, and a 'UserTriggered' flag. It advises checking for existing related memories before creating new ones.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/WINDSURF/Windsurf_Tools.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Save important context relevant to the USER and their task to a memory database.\\nExamples of context to save:\\n- USER preferences\\n- Explicit USER requests to remember something or otherwise alter your behavior\\n- Important code snippets\\n- Technical stacks\\n- Project structure\\n- Major milestones or features\\n- New design patterns and architectural decisions\\n- Any other information that you think is important to remember.\\nBefore creating a new memory, first check to see if a semantically related memory already exists in the database. If found, update it instead of creating a duplicate.\\nUse this tool to delete incorrect memories when necessary.\",\n  \"name\": \"create_memory\",\n  \"parameters\": {\n    \"properties\": {\n      \"Action\": {\n        \"description\": \"The type of action to take on the MEMORY. Must be one of 'create', 'update', or 'delete'\",\n        \"enum\": [\"create\", \"update\", \"delete\"],\n        \"type\": \"string\"\n      },\n      \"Content\": {\n        \"description\": \"Content of a new or updated MEMORY. When deleting an existing MEMORY, leave this blank.\",\n        \"type\": \"string\"\n      },\n      \"CorpusNames\": {\n        \"description\": \"CorpusNames of the workspaces associated with the MEMORY. Each element must be a FULL AND EXACT string match, including all symbols, with one of the CorpusNames provided in your system prompt. Only used when creating a new MEMORY.\",\n        \"items\": {\n          \"type\": \"string\"\n        },\n        \"type\": \"array\"\n      },\n      \"Id\": {\n        \"description\": \"Id of an existing MEMORY to update or delete. When creating a new MEMORY, leave this blank.\",\n        \"type\": \"string\"\n      },\n      \"Tags\": {\n        \"description\": \"Tags to associate with the MEMORY. These will be used to filter or retrieve the MEMORY. Only used when creating a new MEMORY. Use snake_case.\",\n        \"items\": {\n          \"type\": \"string\"\n        },\n        \"type\": \"array\"\n      },\n      \"Title\": {\n        \"description\": \"Descriptive title for a new or updated MEMORY. This is required when creating or updating a memory. When deleting an existing MEMORY, leave this blank.\",\n        \"type\": \"string\"\n      },\n      \"UserTriggered\": {\n        \"description\": \"Set to true if the user explicitly asked you to create/modify this memory.\",\n        \"type\": \"boolean\"\n      }\n    },\n    \"type\": \"object\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the 'view_file' Tool in JSON\nDESCRIPTION: Defines the `view_file` tool interface using JSON. This tool views a specified range of lines (0-indexed, inclusive) within a file, up to 200 lines at a time. It requires the absolute file path (`AbsolutePath`), start line (`StartLine`), and end line (`EndLine`). An optional boolean parameter (`IncludeSummaryOfOtherLines`) controls whether a summary of the remaining file content is included. Users must ensure they view sufficient context, potentially making multiple calls.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/WINDSURF/Windsurf_Tools.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"View the contents of a file. The lines of the file are 0-indexed, and the output of this tool call will be the file contents from StartLine to EndLine (inclusive), together with a summary of the lines outside of StartLine and EndLine. Note that this call can view at most 200 lines at a time.\\n\\nWhen using this tool to gather information, it's your responsibility to ensure you have the COMPLETE context. Specifically, each time you call this command you should:\\n1) Assess if the file contents you viewed are sufficient to proceed with your task.\\n2) If the file contents you have viewed are insufficient, and you suspect they may be in lines not shown, proactively call the tool again to view those lines.\\n3) When in doubt, call this tool again to gather more information. Remember that partial file views may miss critical dependencies, imports, or functionality.\",\n  \"name\": \"view_file\",\n  \"parameters\": {\n    \"properties\": {\n      \"AbsolutePath\": {\n        \"description\": \"Path to file to view. Must be an absolute path.\",\n        \"type\": \"string\"\n      },\n      \"EndLine\": {\n        \"description\": \"Endline to view, inclusive. This cannot be more than 200 lines away from StartLine\",\n        \"type\": \"integer\"\n      },\n      \"IncludeSummaryOfOtherLines\": {\n        \"description\": \"If true, you will also get a condensed summary of the full file contents in addition to the exact lines of code from StartLine to EndLine.\",\n        \"type\": \"boolean\"\n      },\n      \"StartLine\": {\n        \"description\": \"Startline to view\",\n        \"type\": \"integer\"\n      }\n    },\n    \"type\": \"object\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Structured File Editing and Viewing Tool - JSON\nDESCRIPTION: Describes 'str_replace_editor', a tool for file viewing, creation, and advanced editing operations such as string replacement and undo, based on unique, case-sensitive string matches. It has parameters covering multiple file and directory commands, edit tracking, and manages string uniqueness constraints to avoid ambiguous replacements.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/REPLIT/Replit_Functions.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\\\"description\\\": \\\"Custom editing tool for viewing, creating and editing files\\\\n State is persistent across command calls and discussions with the user\\\\n If path is a file, view displays the result of applying cat -n. If path is a directory, view lists non-hidden files and directories up to 2 levels deep\\\\n The create command cannot be used if the specified path already exists as a file\\\\n If a command generates a long output, it will be truncated and marked with <response clipped> \\\\n The undo_edit command will revert the last edit made to the file at path\\\\n\\\\nNotes for using the str_replace command:\\\\n The old_str parameter should match EXACTLY one or more consecutive lines from the original file. Be mindful of whitespaces!\\\\n If the old_str parameter is not unique in the file, the replacement will not be performed. Make sure to include enough context in old_str to make it unique\\\\n The new_str parameter should contain the edited lines that should replace the old_str\\\", \\\"name\\\": \\\"str_replace_editor\\\", \\\"parameters\\\": {\\\"properties\\\": {\\\"command\\\": {\\\"description\\\": \\\"The commands to run. Allowed options are: view, create, str_replace, insert, undo_edit.\\\", \\\"enum\\\": [\\\"view\\\", \\\"create\\\", \\\"str_replace\\\", \\\"insert\\\", \\\"undo_edit\\\"], \\\"type\\\": \\\"string\\\"}, \\\"file_text\\\": {\\\"description\\\": \\\"Required parameter of create command, with the content of the file to be created.\\\", \\\"type\\\": \\\"string\\\"}, \\\"insert_line\\\": {\\\"description\\\": \\\"Required parameter of insert command. The new_str will be inserted AFTER the line insert_line of path.\\\", \\\"type\\\": \\\"integer\\\"}, \\\"new_str\\\": {\\\"description\\\": \\\"Optional parameter of str_replace command containing the new string (if not given, no string will be added). Required parameter of insert command containing the string to insert.\\\", \\\"type\\\": \\\"string\\\"}, \\\"old_str\\\": {\\\"description\\\": \\\"Required parameter of str_replace command containing the string in path to replace.\\\", \\\"type\\\": \\\"string\\\"}, \\\"path\\\": {\\\"description\\\": \\\"Absolute path to file or directory, e.g. /repo/file.py or /repo.\\\", \\\"type\\\": \\\"string\\\"}, \\\"view_range\\\": {\\\"description\\\": \\\"Optional parameter of view command when path points to a file. If none is given, the full file is shown. If provided, the file will be shown in the indicated line number range, e.g. [11, 12] will show lines 11 and 12. Indexing at 1 to start. Setting [start_line, -1] shows all lines from start_line to the end of the file.\\\", \\\"items\\\": {\\\"type\\\": \\\"integer\\\"}, \\\"type\\\": \\\"array\\\"}}, \\\"required\\\": [\\\"command\\\", \\\"path\\\"], \\\"type\\\": \\\"object\\\"}}\n```\n\n----------------------------------------\n\nTITLE: Searching File Content using find_filecontent (XML)\nDESCRIPTION: Defines the `find_filecontent` command to search for content matching a regular expression within files at a specified path. It returns the matching lines along with surrounding context, file names, and line numbers. This command is presented as an optimized alternative to `grep`. Required parameters are `path` (absolute path to file/directory) and `regex` (the search pattern).\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<find_filecontent step_number=\"001\" path=\"/path/to/dir\" regex=\"regexPattern\"/>\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Page Scaffolding for TODO Application - HTML\nDESCRIPTION: This HTML snippet defines the skeleton for the application's main user interface. It sets up character encoding, mobile viewport, and links an external CSS stylesheet. The body contains a placeholder for future HTML content related to the TODO application. No dependencies beyond standard HTML, but stylesheet and scripts are assumed to be present in referenced paths. Expected input/output: browser renders a blank page with the title 'TODO App'.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/REPLIT/Replit_Initial_Code_Generation_Prompt.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>TODO App</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <!-- HTML content here -->\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining `run_command` Tool Parameters in JSON\nDESCRIPTION: Defines the `run_command` tool for proposing bash commands to be executed on the user's macOS system. Requires user approval before execution, especially for potentially unsafe commands (determined by the `SafeToAutoRun` flag). Parameters include `CommandLine` (the exact command), `Cwd` (working directory), `Blocking` (whether to wait for completion), and `WaitMsBeforeAsync` (delay for non-blocking commands). Proposing `cd` commands is explicitly forbidden.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/WINDSURF/Windsurf_Tools.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"PROPOSE a command to run on behalf of the user. Operating System: mac. Shell: bash.\\n**NEVER PROPOSE A cd COMMAND**.\\nIf you have this tool, note that you DO have the ability to run commands directly on the USER's system.\\nMake sure to specify CommandLine exactly as it should be run in the shell.\\nNote that the user will have to approve the command before it is executed. The user may reject it if it is not to their liking.\\nThe actual command will NOT execute until the user approves it. The user may not approve it immediately.\\nIf the step is WAITING for user approval, it has NOT started running.\\nCommands will be run with PAGER=cat. You may want to limit the length of output for commands that usually rely on paging and may contain very long output (e.g. git log, use git log -n <N>).\",\n  \"name\": \"run_command\",\n  \"parameters\": {\n    \"properties\": {\n      \"Blocking\": {\n        \"description\": \"If true, the command will block until it is entirely finished. During this time, the user will not be able to interact with Cascade. Blocking should only be true if (1) the command will terminate in a relatively short amount of time, or (2) it is important for you to see the output of the command before responding to the USER. Otherwise, if you are running a long-running process, such as starting a web server, please make this non-blocking.\",\n        \"type\": \"boolean\"\n      },\n      \"CommandLine\": {\n        \"description\": \"The exact command line string to execute.\",\n        \"type\": \"string\"\n      },\n      \"Cwd\": {\n        \"description\": \"The current working directory for the command\",\n        \"type\": \"string\"\n      },\n      \"SafeToAutoRun\": {\n        \"description\": \"Set to true if you believe that this command is safe to run WITHOUT user approval. A command is unsafe if it may have some destructive side-effects. Example unsafe side-effects include: deleting files, mutating state, installing system dependencies, making external requests, etc. Set to true only if you are extremely confident it is safe. If you feel the command could be unsafe, never set this to true, EVEN if the USER asks you to. It is imperative that you never auto-run a potentially unsafe command.\",\n        \"type\": \"boolean\"\n      },\n      \"WaitMsBeforeAsync\": {\n        \"description\": \"Only applicable if Blocking is false. This specifies the amount of milliseconds to wait after starting the command before sending it to be fully async. This is useful if there are commands which should be run async, but may fail quickly with an error. This allows you to see the error if it happens in this duration. Don't set it too long or you may keep everyone waiting.\",\n        \"type\": \"integer\"\n      }\n    },\n    \"type\": \"object\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Computation or Visualization Code for Execution - Python\nDESCRIPTION: This snippet presents how Python code blocks should be formatted to be recognized by the Gemini assistant as executable in a virtual machine. These 'python' blocks can be used for computations, data visualizations, file generation, or other code artifacts. Only valid Python code should be included, wrapped within triple-backtick 'python' code fences. No explicit dependencies are required beyond the standard Python environment, but referenced libraries must be available for execution.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/GOOGLE/Gemini-2.5-Pro-04-18-2025.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n```python\\n...\\n```\n```\n\n----------------------------------------\n\nTITLE: Executing Bash Commands Using <shell> XML Block - XML\nDESCRIPTION: This XML code snippet shows how to define a shell command using a custom <shell> tag for executing bash commands within a controlled environment. It illustrates multi-line command syntax using shell line continuation and parameter specification for both the shell instance and working directory. The snippet demonstrates how to both add and commit a file in Git within a single shell command. The executing system must support running bracketed paste mode shells and handling parameter attributes such as exec_dir accurately. It is also noted that the <shell> command must not be used for viewing, editing, or creating files, only for execution of commands.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<shell step_number=\\\"001\\\" id=\\\"shellId\\\" exec_dir=\\\"/absolute/path/to/dir\\\">\\nCommand(s) to execute. Use `&&` for multi-line commands. Ex:\\ngit add /path/to/repo/file && \\\\\\ngit commit -m \\\"example commit\\\"\\n</shell>\n```\n\n----------------------------------------\n\nTITLE: Inserting Strings into Files at Specific Lines - Editor Commands - Plaintext/XML\nDESCRIPTION: This example demonstrates the <insert> command, which inserts user-supplied content at a given line number in a file. Users must specify the target file, sudo permissions, and the exact insertion line; any newlines after the closing tag are treated as part of the inserted string. The updated file is shown after the operation, including LSP diagnostics if available. Constraints handle bounds-checking on line numbers and preserve file correctness.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<insert step_number=\\\"001\\\" path=\\\"/full/path/to/filename\\\" sudo=\\\"True/False\\\" insert_line=\\\"123\\\">\\nProvide the strings to insert within the <insert ...> tags.\\n* The string you provide here should start immediately after the closing angle bracket of the <insert ...> tag. If there is a newline after the closing angle bracket, it will be interpreted as part of the string you are inserting.\\n* After the edit, you will be shown the part of the file that was changed, so there's no need to call <open_file> for the same part of the same file at the same time as <insert>.\\n</insert>\n```\n\n----------------------------------------\n\nTITLE: Defining the 'deploy_web_app' Tool Function in JSON\nDESCRIPTION: This JSON object defines the 'deploy_web_app' tool. It handles deploying a JavaScript web application (e.g., to Netlify) using only source files. It requires prior checks using 'read_deployment_config'. Key parameters include 'Framework', 'ProjectPath', optional 'ProjectId' for existing sites, and 'Subdomain' for new sites.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/WINDSURF/Windsurf_Tools.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Deploy a JavaScript web application to a deployment provider like Netlify. Site does not need to be built. Only the source files are required. Make sure to run the read_deployment_config tool first and that all missing files are created before attempting to deploy. If you are deploying to an existing site, use the project_id to identify the site. If you are deploying a new site, leave the project_id empty.\",\n  \"name\": \"deploy_web_app\",\n  \"parameters\": {\n    \"properties\": {\n      \"Framework\": {\n        \"description\": \"The framework of the web application.\",\n        \"enum\": [\"eleventy\", \"angular\", \"astro\", \"create-react-app\", \"gatsby\", \"gridsome\", \"grunt\", \"hexo\", \"hugo\", \"hydrogen\", \"jekyll\", \"middleman\", \"mkdocs\", \"nextjs\", \"nuxtjs\", \"remix\", \"sveltekit\", \"svelte\"],\n        \"type\": \"string\"\n      },\n      \"ProjectId\": {\n        \"description\": \"The project ID of the web application if it exists in the deployment configuration file. Leave this EMPTY for new sites or if the user would like to rename a site. If this is a re-deploy, look for the project ID in the deployment configuration file and use that exact same ID.\",\n        \"type\": \"string\"\n      },\n      \"ProjectPath\": {\n        \"description\": \"The full absolute project path of the web application.\",\n        \"type\": \"string\"\n      },\n      \"Subdomain\": {\n        \"description\": \"Subdomain or project name used in the URL. Leave this EMPTY if you are deploying to an existing site using the project_id. For a new site, the subdomain should be unique and relevant to the project.\",\n        \"type\": \"string\"\n      }\n    },\n    \"type\": \"object\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Files for Viewing and LSP Diagnostics - Editor Commands - Plaintext/XML\nDESCRIPTION: This snippet demonstrates the usage of the <open_file> command to open a file in view mode with optional LSP diagnostics, outlining, and diff capability. The command requires a file path and accepts arguments for line range and sudo access. Outputs may truncate large files or show the full file depending on length and parameters. It serves as a central mechanism for viewing both text and images within the editor system.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<open_file step_number=\\\"001\\\" path=\\\"/full/path/to/filename.py\\\" start_line=\\\"123\\\" end_line=\\\"456\\\" sudo=\\\"True/False\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Navigating to Symbol Definition using go_to_definition (XML)\nDESCRIPTION: Defines the `go_to_definition` LSP command to locate the definition of a specific symbol (class, method, function, variable) within a file. Required parameters are `path` (absolute file path), `line` (line number of the symbol), and `symbol` (the symbol name).\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<go_to_definition path=\"/absolute/path/to/file.py\" line=\"123\" symbol=\"symbol_name\" step_number=\"001\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining the 'check_deploy_status' Tool Function in JSON\nDESCRIPTION: This JSON object defines the 'check_deploy_status' tool. It is used to check the status of a web application deployment using a 'WindsurfDeploymentId'. The tool determines if the build succeeded and if the deployment has been claimed. It should only be run after a 'deploy_web_app' tool call and when requested by the user.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/WINDSURF/Windsurf_Tools.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Check the status of the deployment using its windsurf_deployment_id for a web application and determine if the application build has succeeded and whether it has been claimed. Do not run this unless asked by the user. It must only be run after a deploy_web_app tool call.\",\n  \"name\": \"check_deploy_status\",\n  \"parameters\": {\n    \"properties\": {\n      \"WindsurfDeploymentId\": {\n        \"description\": \"The Windsurf deployment ID for the deploy we want to check status for. This is NOT a project_id.\",\n        \"type\": \"string\"\n      }\n    },\n    \"type\": \"object\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Workflow Restart Function - JSON\nDESCRIPTION: Specifies a function 'restart_workflow' that allows restarting or starting named workflows. It requires a 'name' string parameter for workflow identification. This schema serves as an API contract for workflow control and assumes the consumer can invoke the restart logic with the supplied parameters.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/REPLIT/Replit_Functions.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\\\"description\\\": \\\"Restart (or start) a workflow.\\\", \\\"name\\\": \\\"restart_workflow\\\", \\\"parameters\\\": {\\\"properties\\\": {\\\"name\\\": {\\\"description\\\": \\\"The name of the workflow.\\\", \\\"type\\\": \\\"string\\\"}}, \\\"required\\\": [\\\"name\\\"], \\\"type\\\": \\\"object\\\"}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Metrics Dashboard Component in React\nDESCRIPTION: This React code defines a functional component `Dashboard` that displays a basic metrics dashboard. It imports React hooks (`useState`, `useEffect`), charting components from `recharts` (`BarChart`, `Bar`, etc.), and UI components from `@/components/ui/card`. The component generates random data, updates it periodically using `useEffect`, displays metrics in `Card` elements via a `MetricCard` sub-component, and renders a `BarChart`. This exemplifies creating a React artifact using allowed libraries.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/ANTHROPIC/Claude_Sonnet_3.5.md#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, ResponsiveContainer } from 'recharts';\nimport { Card, CardHeader, CardContent } from '@/components/ui/card';\n\nconst generateData = () =>\n  [...Array(12)].map((_, i) => ({\n    month: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'][i],\n    revenue: Math.floor(Math.random() * 5000) + 1000\n  }));\n\nconst MetricCard = ({ title, value, change }) => (\n  <Card>\n    <CardHeader className=\"text-sm font-medium\">{title}</CardHeader>\n    <CardContent>\n      <div className=\"text-2xl font-bold\">{value}</div>\n      <div className={`text-sm ${change >= 0 ? 'text-green-500' : 'text-red-500'}`}>\n        {change >= 0 ? '↑' : '↓'} {Math.abs(change)}%\n      </div>\n    </CardContent>\n  </Card>\n);\n\nconst Dashboard = () => {\n  const [data, setData] = useState(generateData);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setData(generateData);\n    }, 5000);\n    return () => clearInterval(timer);\n  }, []);\n\n  return (\n    <div className=\"p-4 space-y-4\">\n      <h1 className=\"text-2xl font-bold\">Metrics Dashboard</h1>\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <MetricCard title=\"Total Revenue\" value=\"$45,231\" change={12} />\n        <MetricCard title=\"Subscriptions\" value=\"+2350\" change={8} />\n        <MetricCard title=\"Sales\" value=\"+12,234\" change={-5} />\n        <MetricCard title=\"Active Users\" value=\"921\" change={3} />\n      </div>\n      <Card>\n        <CardHeader>Revenue Over Time</CardHeader>\n        <CardContent>\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <BarChart data={data}>\n              <XAxis dataKey=\"month\" />\n              <YAxis />\n              <Bar dataKey=\"revenue\" fill=\"#8884d8\" />\n            </BarChart>\n          </ResponsiveContainer>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default Dashboard;\n```\n\n----------------------------------------\n\nTITLE: Navigating Browser to URL using navigate_browser (XML)\nDESCRIPTION: Defines the `navigate_browser` command to open a specified URL in a controlled Chrome browser tab managed by Playwright. The required parameter is `url`. The optional `tab_idx` parameter specifies the target tab, creating a new one if the index is unused (defaults to 0).\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<navigate_browser step_number=\"001\" url=\"https://www.example.com\" tab_idx=\"0\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining the 'command_status' Tool Function in JSON\nDESCRIPTION: This JSON object defines the 'command_status' tool. It retrieves the status (running, done), output, and errors of a previously executed background terminal command identified by its 'CommandId'. It allows specifying the number of output characters ('OutputCharacterCount'), output priority ('OutputPriority': top, bottom, split), and an optional wait duration ('WaitDurationSeconds') for command completion.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/WINDSURF/Windsurf_Tools.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Get the status of a previously executed terminal command by its ID. Returns the current status (running, done), output lines as specified by output priority, and any error if present. Do not try to check the status of any IDs other than Background command IDs.\",\n  \"name\": \"command_status\",\n  \"parameters\": {\n    \"properties\": {\n      \"CommandId\": {\n        \"description\": \"ID of the command to get status for\",\n        \"type\": \"string\"\n      },\n      \"OutputCharacterCount\": {\n        \"description\": \"Number of characters to view. Make this as small as possible to avoid excessive memory usage.\",\n        \"type\": \"integer\"\n      },\n      \"OutputPriority\": {\n        \"description\": \"Priority for displaying command output. Must be one of: 'top' (show oldest lines), 'bottom' (show newest lines), or 'split' (prioritize oldest and newest lines, excluding middle)\",\n        \"enum\": [\"top\", \"bottom\", \"split\"],\n        \"type\": \"string\"\n      },\n      \"WaitDurationSeconds\": {\n        \"description\": \"Number of seconds to wait for command completion before getting the status. If the command completes before this duration, this tool call will return early. Set to 0 to get the status of the command immediately. If you are only interested in waiting for command completion, set to 60.\",\n        \"type\": \"integer\"\n      }\n    },\n    \"type\": \"object\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive Factorial Calculator in Python (Teaching Example)\nDESCRIPTION: This Python script enhances the factorial calculator into an interactive command-line tool suitable for teaching. It separates the factorial logic into a function, adds a `main` function to handle user interaction (including quitting with 'q'), provides clear prompts, and includes robust error handling using `try-except`. The script runs the `main` function when executed directly. This demonstrates updating an artifact for educational purposes.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/ANTHROPIC/Claude_Sonnet_3.5.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef main():\n    print(\"Welcome to the Factorial Calculator!\")\n    print(\"Enter a non-negative integer to calculate its factorial.\")\n    print(\"Enter 'q' to quit the program.\")\n\n    while True:\n        user_input = input(\"Enter a number (or 'q' to quit): \")\n\n        if user_input == 'q':\n            print(\"Thank you for using the Factorial Calculator. Goodbye!\")\n            break\n\n        try:\n            num = int(user_input)\n            if num < 0:\n                raise ValueError\n            result = factorial(num)\n            print(f\"The factorial of {num} is {result}\")\n        except ValueError:\n            print(\"Invalid input. Please enter a non-negative integer or 'q' to quit.\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Defining `replace_file_content` Tool Parameters in JSON\nDESCRIPTION: Defines the `replace_file_content` tool for editing existing files using specified replacement chunks. Key parameters are `TargetFile` (the file to edit) and `ReplacementChunks` (an array defining edits with `TargetContent`, `ReplacementContent`, and `AllowMultiple`). Additional parameters include `Instruction`, `CodeMarkdownLanguage`, and optional `TargetLintErrorIds`. Strict usage rules apply, such as avoiding parallel calls for the same file, making precise replacements, and not editing `.ipynb` files.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/WINDSURF/Windsurf_Tools.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Use this tool to edit an existing file. Make sure to follow all of these rules:\\n1. Do NOT make multiple parallel calls to this tool for the same file.\\n2. To edit multiple, non-adjacent lines of code in the same file, make a single call to this tool. Specify each edit as a separate ReplacementChunk.\\n3. For each ReplacementChunk, specify TargetContent and\\tReplacementContent. In TargetContent, specify the precise lines of code to edit. These lines MUST EXACTLY MATCH text in the existing file content. In ReplacementContent, specify the replacement content for the specified target content. This must be a complete drop-in replacement of the TargetContent, with necessary modifications made.\\n4. If you are making multiple edits across a single file, specify multiple separate ReplacementChunks. DO NOT try to replace the entire existing content with the new content, this is very expensive.\\n5. You may not edit file extensions: [.ipynb]\\nYou should specify the following arguments before the others: [TargetFile]\",\n  \"name\": \"replace_file_content\",\n  \"parameters\": {\n    \"properties\": {\n      \"CodeMarkdownLanguage\": {\n        \"description\": \"Markdown language for the code block, e.g 'python' or 'javascript'\",\n        \"type\": \"string\"\n      },\n      \"Instruction\": {\n        \"description\": \"A description of the changes that you are making to the file.\",\n        \"type\": \"string\"\n      },\n      \"ReplacementChunks\": {\n        \"description\": \"A list of chunks to replace. It is best to provide multiple chunks for non-contiguous edits if possible. This must be a JSON array, not a string.\",\n        \"items\": {\n          \"additionalProperties\": false,\n          \"properties\": {\n            \"AllowMultiple\": {\n              \"description\": \"If true, multiple occurrences of 'targetContent' will be replaced by 'replacementContent' if they are found. Otherwise if multiple occurences are found, an error will be returned.\",\n              \"type\": \"boolean\"\n            },\n            \"ReplacementContent\": {\n              \"description\": \"The content to replace the target content with.\",\n              \"type\": \"string\"\n            },\n            \"TargetContent\": {\n              \"description\": \"The exact string to be replaced. This must be the exact character-sequence to be replaced, including whitespace. Be very careful to include any leading whitespace otherwise this will not work at all. If AllowMultiple is not true, then this must be a unique substring within the file, or else it will error.\",\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\"TargetContent\", \"ReplacementContent\", \"AllowMultiple\"],\n          \"type\": \"object\"\n        },\n        \"type\": \"array\"\n      },\n      \"TargetFile\": {\n        \"description\": \"The target file to modify. Always specify the target file as the very first argument.\",\n        \"type\": \"string\"\n      },\n      \"TargetLintErrorIds\": {\n        \"description\": \"If applicable, IDs of lint errors this edit aims to fix (they'll have been given in recent IDE feedback). If you believe the edit could fix lints, do specify lint IDs; if the edit is wholly unrelated, do not. A rule of thumb is, if your edit was influenced by lint feedback, include lint IDs. Exercise honest judgement here.\",\n        \"items\": {\n          \"type\": \"string\"\n        },\n        \"type\": \"array\"\n      }\n    },\n    \"type\": \"object\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Input to Running Shell with <write_to_shell_process> XML Block - XML\nDESCRIPTION: This snippet demonstrates the use of the custom <write_to_shell_process> XML tag to programmatically send input to an active shell process (for example to provide required stdin input). The id attribute selects the running shell instance, while the press_enter attribute specifies whether to follow the written content with an Enter keystroke. The text node can contain any content including special ANSI sequences if needed. This command is useful for interaction with shells that expect user intervention mid-process and is meant to be used together with shell execution and monitoring commands.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<write_to_shell_process step_number=\\\"001\\\" id=\\\"shellId\\\" press_enter=\\\"true\\\">Content to write to the shell process. Also works with unicode for ANSI, for example. For example: `y`, `\\u0003`, `\\u0004`, `\\u0001B[B`. You can leave this empty if you just want to press enter.</write_to_shell_process>\n```\n\n----------------------------------------\n\nTITLE: Planning Next Blocks in Gemini Assistant using 'thought' Block - Markdown\nDESCRIPTION: This snippet introduces the 'thought' block syntax, which allows Gemini to provide intermediate thoughts or updates to the user in a documented and structured fashion using Markdown. There are no dependencies, and the block contains freeform content aimed at planning or structuring a response before code or tool code blocks are presented. The expected input for this block is arbitrary content within the triple-backtick 'thought' fenced block, and the output is effectively a documented note or plan step.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/GOOGLE/Gemini-2.5-Pro-04-18-2025.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n```thought\\n...\\n```\n```\n\n----------------------------------------\n\nTITLE: Typing Text in Browser using type_browser (XML)\nDESCRIPTION: Defines the `type_browser` command to input text into a specified element (e.g., a textbox) in a browser tab. The target element is identified by `devinid` (preferred) or `coordinates`. The text to be typed is provided as the content of the tag. Optional parameters include `press_enter` (boolean, simulates pressing Enter after typing) and `tab_idx` (defaults to 0).\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n<type_browser step_number=\"001\" devinid=\"12\" coordinates=\"420,1200\" press_enter=\"True/False\" tab_idx=\"0\">Text to type into the textbox. Can be multiline.</type_browser>\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse Cursor in Browser using move_mouse (XML)\nDESCRIPTION: Defines the `move_mouse` command to position the mouse cursor at specific pixel coordinates (x,y) within a browser tab. The required parameter is `coordinates`. The `tab_idx` specifies the target tab (defaults to 0).\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_23\n\nLANGUAGE: xml\nCODE:\n```\n<move_mouse step_number=\"001\" coordinates=\"420,1200\" tab_idx=\"0\"/>\n```\n\n----------------------------------------\n\nTITLE: Pressing Keys in Browser using press_key_browser (XML)\nDESCRIPTION: Defines the `press_key_browser` command to simulate pressing keyboard keys or shortcuts within the context of a specific browser tab. The keys to press are provided as the content of the tag, using '+' to indicate simultaneous key presses (e.g., 'Control+C'). The `tab_idx` specifies the target tab (defaults to 0).\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_24\n\nLANGUAGE: xml\nCODE:\n```\n<press_key_browser step_number=\"001\" tab_idx=\"0\">keys to press. Use `+` to press multiple keys simultaneously for shortcuts</press_key_browser>\n```\n\n----------------------------------------\n\nTITLE: Removing Workflow Run Configuration - JSON\nDESCRIPTION: Describes the 'workflows_remove_run_config_tool', a simple tool for deregistering previously configured workflow background commands by name. Useful for dynamic task management during CI/CD, project reconfiguration, or when disabling obsolete services.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/REPLIT/Replit_Functions.md#_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\\\"description\\\": \\\"Remove previously added named command\\\", \\\"name\\\": \\\"workflows_remove_run_config_tool\\\", \\\"parameters\\\": {\\\"properties\\\": {\\\"name\\\": {\\\"description\\\": \\\"The name of the command to remove.\\\", \\\"type\\\": \\\"string\\\"}}, \\\"required\\\": [\\\"name\\\"], \\\"type\\\": \\\"object\\\"}}\n```\n\n----------------------------------------\n\nTITLE: Displaying Symbol Information using hover_symbol (XML)\nDESCRIPTION: Defines the `hover_symbol` LSP command to retrieve hover information (like type signatures or documentation) for a symbol at a specific location in a file. This helps in understanding the usage of classes, methods, or functions. Required parameters are `path` (absolute file path), `line` (line number), and `symbol` (the symbol name).\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<hover_symbol path=\"/absolute/path/to/file.py\" line=\"123\" symbol=\"symbol_name\" step_number=\"001\"/>\n```\n\n----------------------------------------\n\nTITLE: Calculating Factorial with Input Validation in Python (Update Example)\nDESCRIPTION: This Python script demonstrates updating the previous factorial calculator artifact. It retains the recursive `factorial` function but adds a `while` loop with `try-except` block for user input. It handles potential `ValueError` if the input is not a non-negative integer, prompting the user until valid input is received. This illustrates modifying an existing artifact for robustness.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/ANTHROPIC/Claude_Sonnet_3.5.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nwhile True:\n    try:\n        num = int(input(\"Enter a non-negative integer: \"))\n        if num < 0:\n            raise ValueError\n        break\n    except ValueError:\n        print(\"Invalid input. Please enter a non-negative integer.\")\n```\n\n----------------------------------------\n\nTITLE: Listing Accessible Secrets\nDESCRIPTION: Retrieves and lists the names of all secrets the user has granted access to, including organization-level and task-specific secrets. These secret names can then potentially be used as environment variables in subsequent commands.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_32\n\nLANGUAGE: xml\nCODE:\n```\n<list_secrets step_number=\"001\"/>\n```\n\n----------------------------------------\n\nTITLE: Sending Message to User with Optional Attachments and Auth Request\nDESCRIPTION: Sends a specified message to the user. Can optionally include file attachments (specified by absolute paths) which are made available via public URLs. Allows requesting authentication via a secure UI by setting `request_auth` to True. Supports embedding file/snippet references using `<ref_file>` and `<ref_snippet>` tags. The message content should be in the user's language.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_31\n\nLANGUAGE: xml\nCODE:\n```\n<message_user step_number=\"001\" attachments=\"file1.txt,file2.pdf\" request_auth=\"False/True\">Message to the user. Use the same language as the user.</message_user>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<ref_file file=\"/home/ubuntu/absolute/path/to/file\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<ref_snippet file=\"/home/ubuntu/absolute/path/to/file\" lines=\"10-20\" />\n```\n\n----------------------------------------\n\nTITLE: Indicating Readiness to Suggest Plan\nDESCRIPTION: Signals that enough information has been gathered to formulate a complete plan to address the user's request. This command is used specifically when the system is in 'planning' mode and precedes the actual outputting of the plan.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_37\n\nLANGUAGE: xml\nCODE:\n```\n<suggest_plan step_number=\"001\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining `read_url_content` Tool Parameters in JSON\nDESCRIPTION: Defines the `read_url_content` tool for fetching content from a specified URL. It requires the `Url` parameter, which must be a valid HTTP or HTTPS URL pointing to an accessible internet resource.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/WINDSURF/Windsurf_Tools.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Read content from a URL. URL must be an HTTP or HTTPS URL that points to a valid internet resource accessible via web browser.\",\n  \"name\": \"read_url_content\",\n  \"parameters\": {\n    \"properties\": {\n      \"Url\": {\n        \"description\": \"URL to read content from\",\n        \"type\": \"string\"\n      }\n    },\n    \"type\": \"object\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Canvas/Immersive Document Code Block Structure - Markdown\nDESCRIPTION: This snippet shows how to define immersive document sections for various content types (Markdown text, code, etc.), leveraging special tags with specific attributes (id, type, title) and enclosing content between opening and closing immersive tags. Code blocks should be properly fenced with the language identifier. No direct dependencies exist, but correct use is required for proper document rendering. Key parameters include the section type, document id, and title.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/GOOGLE/Gemini-2.5-Pro-04-18-2025.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n<immersive> id=\\\"{unique_id}\\\" type=\\\"text/markdown\\\" title=\\\"{descriptive_title}\\\"\\n{content in Markdown}\\n</immersive>\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n<immersive> id=\\\"{unique_id}\\\" type=\\\"code\\\" title=\\\"{descriptive_title}\\\"\\n```{language}\\n{complete, well-commented code}```\\n</immersive>\n```\n\n----------------------------------------\n\nTITLE: Defining Directory Structure in JSON - JSON\nDESCRIPTION: This JSON code snippet represents an example output for the flattened file tree structure of a generated project. It lists each file's path and whether it's new or overwritten. No dependencies are required. Takes no input and outputs a JSON array with details about each project file. It is intended to be presented within Markdown output, not for use within code logic.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/REPLIT/Replit_Initial_Code_Generation_Prompt.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"path\": \"/index.html\", \"status\": \"new\"},\n  {\"path\": \"/styles.css\", \"status\": \"new\"},\n  {\"path\": \"/script.js\", \"status\": \"new\"},\n  {\"path\": \"/app.py\", \"status\": \"new\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Common Python List Methods (append, extend, insert)\nDESCRIPTION: Provides examples of three fundamental Python list methods: `append` adds a single element to the end, `extend` adds all elements from an iterable to the end, and `insert` adds an element at a specific index. These examples illustrate basic list manipulation using standard Python lists.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/ANTHROPIC/Claude_Sonnet_3.5.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nappend(x): Adds an item x to the end of the list. Example: my_list.append(4)\n```\n\nLANGUAGE: python\nCODE:\n```\nextend(iterable): Adds all items from an iterable (like another list) to the end. Example: my_list.extend([5, 6, 7])\n```\n\nLANGUAGE: python\nCODE:\n```\ninsert(i, x): Inserts an item x at a given position i. Example: my_list.insert(1, \"new\")\n```\n\n----------------------------------------\n\nTITLE: Selecting Dropdown Option in Browser using select_option_browser (XML)\nDESCRIPTION: Defines the `select_option_browser` command to select an option from a dropdown (select) element in a browser tab. The dropdown element is identified by its `devinid`. The required parameter `index` specifies the zero-based index of the option to select. The `tab_idx` specifies the target tab (defaults to 0).\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_26\n\nLANGUAGE: xml\nCODE:\n```\n<select_option_browser step_number=\"001\" devinid=\"12\" index=\"2\" tab_idx=\"0\"/>\n```\n\n----------------------------------------\n\nTITLE: Memorizing Information Before Scrolling with Agent Command\nDESCRIPTION: This example demonstrates the 'Memorization Technique'. The agent explicitly states the information it is memorizing within the 'EXPLANATION:' section *before* issuing a subsequent command, such as `SCROLL_DOWN 1`. This pattern is required for tasks needing recall of information across steps.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/MULTION/MultiOn.md#_snippet_2\n\nLANGUAGE: Agent Command Language\nCODE:\n```\nEXPLANATION: Memorizing the following information: The information you want to memorize. COMMANDS: SCROLL_DOWN 1 STATUS: CONTINUE\n```\n\n----------------------------------------\n\nTITLE: Memorizing Counted Information During Scrolling with Agent Command\nDESCRIPTION: This example combines the 'Scroll Context', 'Memorization Technique', and 'Counting Technique'. Information found while scrolling (`SCROLL_DOWN 1`) that requires counting is listed numerically ('1. ... 2. ...') and memorized within the 'EXPLANATION:' section before continuing.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/MULTION/MultiOn.md#_snippet_7\n\nLANGUAGE: Agent Command Language\nCODE:\n```\nEXPLANATION: Memorizing the following information: The information you want to memorize while scrolling: 1. ... 2. ... 3. ... etc.. COMMANDS: SCROLL_DOWN 1 STATUS: CONTINUE\n```\n\n----------------------------------------\n\nTITLE: Memorizing Counted Information Before Scrolling with Agent Command\nDESCRIPTION: This example combines the 'Memorization Technique' and 'Counting Technique'. The agent lists numbered items ('1. ... 2. ... 3. ...') within the 'EXPLANATION:' section to accurately memorize them before issuing a subsequent command, like `SCROLL_DOWN 1`. This ensures accurate recall of lists.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/MULTION/MultiOn.md#_snippet_3\n\nLANGUAGE: Agent Command Language\nCODE:\n```\nEXPLANATION: Memorizing the following information: The information you want to memorize: 1. ... 2. ... 3. ... etc.. COMMANDS: SCROLL_DOWN 1 STATUS: CONTINUE\n```\n\n----------------------------------------\n\nTITLE: Memorizing Information Found During Scrolling with Agent Command\nDESCRIPTION: Demonstrates the mandatory 'Scroll Context' rule. When performing a scroll action (`SCROLL_DOWN 1`), any information found during the scroll that needs to be remembered *must* be explicitly stated in the 'EXPLANATION:' section using the 'Memorization Technique'.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/MULTION/MultiOn.md#_snippet_6\n\nLANGUAGE: Agent Command Language\nCODE:\n```\nEXPLANATION: Memorizing the following information: The information you want to memorize while scrolling... COMMANDS: SCROLL_DOWN 1 STATUS: CONTINUE\n```\n\n----------------------------------------\n\nTITLE: Scrolling Down While Seeking Information with Agent Command\nDESCRIPTION: This example shows the command format when the agent executes a scroll down action (`SCROLL_DOWN 1`) because it has not yet found the necessary information to memorize. The accompanying explanation clarifies the agent's intent to continue searching while scrolling.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/MULTION/MultiOn.md#_snippet_5\n\nLANGUAGE: Agent Command Language\nCODE:\n```\nCOMMANDS: SCROLL_DOWN 1 EXPLANATION: I'm going to keep scrolling to find the information I need so I can memorize it. STATUS: CONTINUE\n```\n\n----------------------------------------\n\nTITLE: Performing a Google Search using GOTO_URL Agent Command\nDESCRIPTION: Specifies the exact format for initiating a Google search using the agent's command language. The agent must use the `GOTO_URL` command with the specific Google search URL structure, replacing `QUERY` with the URL-encoded search terms.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/MULTION/MultiOn.md#_snippet_8\n\nLANGUAGE: Agent Command Language\nCODE:\n```\nCOMMANDS: GOTO_URL https://www.google.com/search?q=QUERY\n```\n\n----------------------------------------\n\nTITLE: Finding Symbol References using go_to_references (XML)\nDESCRIPTION: Defines the `go_to_references` LSP command to find all occurrences (references) of a specific symbol within the codebase. This is useful for assessing the impact of code changes. Required parameters are `path` (absolute file path of the symbol's occurrence), `line` (line number of the symbol), and `symbol` (the symbol name).\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<go_to_references path=\"/absolute/path/to/file.py\" line=\"123\" symbol=\"symbol_name\" step_number=\"001\"/>\n```\n\n----------------------------------------\n\nTITLE: Basic Stylesheet Placeholder for Application - CSS\nDESCRIPTION: A minimal CSS file with a comment placeholder. This file is intended to be customized for styling the TODO application's user interface. Requires no dependencies and is referenced by the HTML file. Empty by default; does not affect any content until edited.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/REPLIT/Replit_Initial_Code_Generation_Prompt.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n/* CSS styles here */\n```\n\n----------------------------------------\n\nTITLE: Batch Refactoring with Regex Across Many Files - Editor Commands - Plaintext/XML\nDESCRIPTION: This code block shows how to use the <find_and_edit> command to perform regex-based batch finding and context-driven edits across multiple files in a directory. Parameters allow filtering by path, file globbing, and exclusion rules. The command creates a task for each matched regex location, invoking potential edits as described in the user-supplied instruction body. It is the recommended approach for wide-ranging, efficient refactoring operations.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<find_and_edit step_number=\\\"001\\\" dir=\\\"/some/path/\\\" regex=\\\"regexPattern\\\" exclude_file_glob=\\\"**/some_dir_to_exclude/**\\\" file_extension_glob=\\\"*.py\\\">A sentence or two describing the change you want to make at each location that matches the regex. You can also describe conditions for locations where no change should occur.</find_and_edit>\n```\n\n----------------------------------------\n\nTITLE: Pausing Execution with WAIT Agent Command\nDESCRIPTION: This command instructs the agent to pause execution for 5ms, typically used to allow dynamic content like menus to load on the page. Crucially, no other commands can be issued after WAIT in the same response step. An explanation and status are required.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/MULTION/MultiOn.md#_snippet_1\n\nLANGUAGE: Agent Command Language\nCODE:\n```\nCOMMANDS: WAIT EXPLANATION: I am... STATUS: CONTINUE\n```\n\n----------------------------------------\n\nTITLE: Formatting Inline Mathematical Expressions using LaTeX\nDESCRIPTION: Mandates the use of LaTeX for rendering inline mathematical expressions, specifically using `\\\\( ... \\\\)` delimiters. Provides an example `\\\\(x^4 = x - 3\\\\)` and shows how to add citations like `\\\\(x^2-2\\\\) [4]`. Explicitly forbids using `$` or `$$` delimiters, Unicode math characters, and the `\\\\label` command.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/PERPLEXITY/Perplexity_Deep_Research.txt#_snippet_3\n\nLANGUAGE: latex\nCODE:\n```\nMathematical Expressions:\n- Wrap all math expressions in LaTeX using \\\\( \\\\) for inline ... For example: \\\\(x^4 = x - 3\\\\)\n- To cite a formula add citations to the end, for example ... \\\\(x^2-2\\\\) [4].\n- Never use $ or $$ to render LaTeX, even if it is present in the Query.\n- Never use Unicode to render math expressions, ALWAYS use LaTeX.\n- Never use the \\\\label instruction for LaTeX.\n```\n\n----------------------------------------\n\nTITLE: Defining the 'view_code_item' Tool in JSON\nDESCRIPTION: Defines the `view_code_item` tool interface using JSON. This tool allows viewing the content of a specific code item (like a class or function) within a file using its fully qualified name (e.g., `package.class.FunctionName`). It requires the absolute file path (`File`) and the node path within the file (`NodePath`) as parameters. It should not be used if the content was already shown by `codebase_search`. Returns an empty string if the symbol isn't found.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/WINDSURF/Windsurf_Tools.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"View the content of a code item node, such as a class or a function in a file. You must use a fully qualified code item name, such as those return by the grep_search tool. For example, if you have a class called `Foo` and you want to view the function definition `bar` in the `Foo` class, you would use `Foo.bar` as the NodeName. Do not request to view a symbol if the contents have been previously shown by the codebase_search tool. If the symbol is not found in a file, the tool will return an empty string instead.\",\n  \"name\": \"view_code_item\",\n  \"parameters\": {\n    \"properties\": {\n      \"File\": {\n        \"description\": \"Absolute path to the node to edit, e.g /path/to/file\",\n        \"type\": \"string\"\n      },\n      \"NodePath\": {\n        \"description\": \"Path of the node within the file, e.g package.class.FunctionName\",\n        \"type\": \"string\"\n      }\n    },\n    \"type\": \"object\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Optional 'Type' Parameter in JSON Schema\nDESCRIPTION: Defines an optional string parameter named 'Type' as part of a larger JSON schema object. This parameter serves as a type filter, accepting enumerated values 'file', 'directory', or 'any'.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/WINDSURF/Windsurf_Tools.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n      \"Type\": {\n        \"description\": \"Optional, type filter, enum=file,directory,any\",\n        \"type\": \"string\"\n      }\n    },\n    \"type\": \"object\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining `grep_search` Tool Parameters in JSON\nDESCRIPTION: Defines the `grep_search` tool which uses ripgrep for finding exact pattern matches within files or directories specified by `SearchPath`. Results, capped at 50 matches, are returned in JSON format including filename, line number, and content. Parameters include `Query` (search term), optional `Includes` (file patterns/paths), `CaseInsensitive` flag, and `MatchPerLine` to control output detail (line content vs. just filenames).\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/WINDSURF/Windsurf_Tools.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Use ripgrep to find exact pattern matches within files or directories.\\nResults are returned in JSON format and for each match you will receive the:\\n- Filename\\n- LineNumber\\n- LineContent: the content of the matching line\\nTotal results are capped at 50 matches. Use the Includes option to filter by file type or specific paths to refine your search.\",\n  \"name\": \"grep_search\",\n  \"parameters\": {\n    \"properties\": {\n      \"CaseInsensitive\": {\n        \"description\": \"If true, performs a case-insensitive search.\",\n        \"type\": \"boolean\"\n      },\n      \"Includes\": {\n        \"description\": \"The files or directories to search within. Supports file patterns (e.g., '*.txt' for all .txt files) or specific paths (e.g., 'path/to/file.txt' or 'path/to/dir'). Leave this empty if you're grepping within an individual file.\",\n        \"items\": {\n          \"type\": \"string\"\n        },\n        \"type\": \"array\"\n      },\n      \"MatchPerLine\": {\n        \"description\": \"If true, returns each line that matches the query, including line numbers and snippets of matching lines (equivalent to 'git grep -nI'). If false, only returns the names of files containing the query (equivalent to 'git grep -l').\",\n        \"type\": \"boolean\"\n      },\n      \"Query\": {\n        \"description\": \"The search term or pattern to look for within files.\",\n        \"type\": \"string\"\n      },\n      \"SearchPath\": {\n        \"description\": \"The path to search. This can be a directory or a file. This is a required parameter.\",\n        \"type\": \"string\"\n      }\n    },\n    \"type\": \"object\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Factorial in Python (Initial Example)\nDESCRIPTION: This Python code snippet defines a simple recursive function `factorial(n)` to calculate the factorial of a non-negative integer `n`. It serves as an introductory example of creating a code artifact.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/ANTHROPIC/Claude_Sonnet_3.5.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n```\n\n----------------------------------------\n\nTITLE: Defining the 'find_by_name' Tool Function in JSON\nDESCRIPTION: This JSON object defines the 'find_by_name' tool, which searches for files and directories using 'fd'. It supports glob patterns, smart case, optional exclusions ('Excludes'), extension filtering ('Extensions'), max depth ('MaxDepth'), and matching against full paths ('FullPath'). Results (capped at 50) include type, size, modification time, and relative path, starting from the specified 'SearchDirectory'.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/WINDSURF/Windsurf_Tools.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Search for files and subdirectories within a specified directory using fd.\\nSearch uses smart case and will ignore gitignored files by default.\\nPattern and Excludes both use the glob format. If you are searching for Extensions, there is no need to specify both Pattern AND Extensions.\\nTo avoid overwhelming output, the results are capped at 50 matches. Use the various arguments to filter the search scope as needed.\\nResults will include the type, size, modification time, and relative path.\",\n  \"name\": \"find_by_name\",\n  \"parameters\": {\n    \"properties\": {\n      \"Excludes\": {\n        \"description\": \"Optional, exclude files/directories that match the given glob patterns\",\n        \"items\": {\n          \"type\": \"string\"\n        },\n        \"type\": \"array\"\n      },\n      \"Extensions\": {\n        \"description\": \"Optional, file extensions to include (without leading .), matching paths must match at least one of the included extensions\",\n        \"items\": {\n          \"type\": \"string\"\n        },\n        \"type\": \"array\"\n      },\n      \"FullPath\": {\n        \"description\": \"Optional, whether the full absolute path must match the glob pattern, default: only filename needs to match. Take care when specifying glob patterns with this flag on, e.g when FullPath is on, pattern '*.py' will not match to the file '/foo/bar.py', but pattern '**/*.py' will match.\",\n        \"type\": \"boolean\"\n      },\n      \"MaxDepth\": {\n        \"description\": \"Optional, maximum depth to search\",\n        \"type\": \"integer\"\n      },\n      \"Pattern\": {\n        \"description\": \"Optional, Pattern to search for, supports glob format\",\n        \"type\": \"string\"\n      },\n      \"SearchDirectory\": {\n        \"description\": \"The directory to search within\",\n        \"type\": \"string\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Local Port to Public URL\nDESCRIPTION: Exposes a specified local port to the internet, providing a public URL for access. This is useful for user testing or feedback on locally running frontends without using the built-in browser. Requires the local port number. Ensure exposed applications do not access local backends.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_29\n\nLANGUAGE: xml\nCODE:\n```\n<expose_port step_number=\"001\" local_port=\"8000\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Tea-Making Process Flow Chart using Mermaid\nDESCRIPTION: This snippet uses Mermaid syntax to define a top-down flow chart (`graph TD`) illustrating the steps for making tea, starting from boiling water to enjoying the tea. This serves as an example of creating a Mermaid diagram artifact.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/ANTHROPIC/Claude_Sonnet_3.5.md#_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    A[Start] --> B{Water boiled?}\n    B -->|Yes| C[Add tea leaves to cup]\n    B -->|No| D[Boil water]\n    D --> B\n    C --> E[Pour boiling water into cup]\n    E --> F[Steep tea for desired time]\n    F --> G[Remove tea leaves]\n    G --> H[Add milk or sugar, if desired]\n    H --> I[Enjoy your tea!]\n    I --> J[End]\n```\n\n----------------------------------------\n\nTITLE: Analyzing SQL Query Performance with EXPLAIN ANALYZE\nDESCRIPTION: This SQL query uses 'EXPLAIN ANALYZE' to provide a detailed execution plan and performance analysis for a query that joins the 'orders' and 'customers' tables on 'customer_id'. It demonstrates how the 'execute_sql_tool' can be used for running ad-hoc SQL analysis.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/REPLIT/Replit_Functions.md#_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN ANALYZE SELECT orders.*, customers.name\n FROM orders\n JOIN customers ON orders.customer_id = customers.id;\n```\n\n----------------------------------------\n\nTITLE: Running an OpenCV Application via Shell for VNC Feedback\nDESCRIPTION: This shell command executes a program named 'opencv_face_detection', likely an application using OpenCV to display results in a window. This serves as an example command for the 'vnc_window_application_feedback' tool for testing VNC-displayed graphical applications.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/REPLIT/Replit_Functions.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n./opencv_face_detection\n```\n\n----------------------------------------\n\nTITLE: Defining Filesystem Search Tool - JSON\nDESCRIPTION: Defines the 'search_filesystem' function to search and open files programmatically in a codebase. It accepts lists of class names, code snippets, or function names, and a natural language query for semantic similarity. The schema documents parameter types, defaults, and constraints for use by search automation tools.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/REPLIT/Replit_Functions.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\\\"description\\\": \\\"This tools searches and opens the relevant files for a codebase\\\", \\\"name\\\": \\\"search_filesystem\\\", \\\"parameters\\\": {\\\"properties\\\": {\\\"class_names\\\": {\\\"default\\\": [], \\\"description\\\": \\\"List of specific class names to search for in the codebase. Case-sensitive and supports exact matches only. Use this to find particular class definitions or their usages.\\\", \\\"items\\\": {\\\"type\\\": \\\"string\\\"}, \\\"type\\\": \\\"array\\\"}, \\\"code\\\": {\\\"default\\\": [], \\\"description\\\": \\\"List of exact code snippets to search for in the codebase. Useful for finding specific implementations or patterns. Each snippet should be a complete code fragment, not just keywords.\\\", \\\"items\\\": {\\\"type\\\": \\\"string\\\"}, \\\"type\\\": \\\"array\\\"}, \\\"function_names\\\": {\\\"default\\\": [], \\\"description\\\": \\\"List of specific function or method names to search for. Case-sensitive and supports exact matches only. Use this to locate function definitions or their invocations throughout the code.\\\", \\\"items\\\": {\\\"type\\\": \\\"string\\\"}, \\\"type\\\": \\\"array\\\"}, \\\"query_description\\\": {\\\"anyOf\\\": [{\\\"type\\\": \\\"string\\\"}, {\\\"type\\\": \\\"null\\\"}], \\\"default\\\": null, \\\"description\\\": \\\"A natural language query to perform semantic similarity search. Describe what you're looking for using plain English, e.g. 'find error handling in database connections' or 'locate authentication middleware implementations'.\\\"}}, \\\"type\\\": \\\"object\\\"}}\n```\n\n----------------------------------------\n\nTITLE: Replacing Strings in Files with Atomic Edits - Editor Commands - Plaintext/XML\nDESCRIPTION: This snippet outlines the structure and usage rules of the <str_replace> command, enabling the user to atomically replace strings matching one or more lines in a file. Parameters control the file, sudo behavior, and whether to perform a single or global replacement. The old and new strings are specified in nested tags, requiring exact match including whitespace and line structure. The command supplies immediate feedback via updated view, outline, and diagnostics.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<str_replace step_number=\\\"001\\\" path=\\\"/full/path/to/filename\\\" sudo=\\\"True/False\\\" many=\\\"False\\\">\\nProvide the strings to find and replace within <old_str> and <new_str> tags inside the <str_replace ..> tags.\\n* The `old_str` parameter should match EXACTLY one or more consecutive lines from the original file. Be mindful of whitespaces! If your <old_str> content contains a line that has only spaces or tabs, you need to also output these - the string must match EXACTLY. You cannot include partial lines.\\n* The `new_str` parameter should contain the edited lines that should replace the `old_str`\\n* After the edit, you will be shown the part of the file that was changed, so there's no need to call <open_file> for the same part of the same file at the same time as <str_replace>.\\n</str_replace>\n```\n\n----------------------------------------\n\nTITLE: Calling Data APIs using ApiClient in Python\nDESCRIPTION: This Python snippet demonstrates how to call a data API within the Manus AI agent's environment, specifically exemplified under the <datasource_module_code_example> section. It imports the necessary `ApiClient` from a specific system path, initializes the client, and then uses the `call_api` method with the fully qualified API name ('WeatherBank/get_weather') and query parameters to retrieve data (weather information for Singapore). The retrieved data is then printed. It requires the `data_api` module to be available in the '/opt/.manus/.sandbox-runtime' path.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/MANUS/Manus_Prompt.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nsys.path.append('/opt/.manus/.sandbox-runtime')\nfrom data_api import ApiClient\nclient = ApiClient()\n# Use fully-qualified API names and parameters as specified in API documentation events.\n# Always use complete query parameter format in query={...}, never omit parameter names.\nweather = client.call_api('WeatherBank/get_weather', query={'location': 'Singapore'})\nprint(weather)\n```\n\n----------------------------------------\n\nTITLE: Creating Files with Specified Content - Editor Commands - Plaintext/XML\nDESCRIPTION: This code snippet describes usage of the <create_file> command, which allows users to create a new file with specific content. The content is provided directly between the create_file tags, and parameters such as path and sudo control file location and permissions. The file must not already exist, and the command guarantees that special characters and formatting will be preserved as entered.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<create_file step_number=\\\"001\\\" path=\\\"/full/path/to/filename\\\" sudo=\\\"True/False\\\">Content of the new file. Don't start with backticks.</create_file>\n```\n\n----------------------------------------\n\nTITLE: Defining the 'write_to_file' Tool in JSON\nDESCRIPTION: Defines the `write_to_file` tool interface using JSON. This tool creates a new file and writes content to it, creating parent directories if needed. It must not be used to modify existing files; confirmation of non-existence is required before calling. Parameters include the target file path (`TargetFile`, specified first), the content to write (`CodeContent`), and an option to create an empty file (`EmptyFile`).\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/WINDSURF/Windsurf_Tools.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Use this tool to create new files. The file and any parent directories will be created for you if they do not already exist.\\n\\t\\tFollow these instructions:\\n\\t\\t1. NEVER use this tool to modify or overwrite existing files. Always first confirm that TargetFile does not exist before calling this tool.\\n\\t\\t2. You MUST specify TargetFile as the FIRST argument. Please specify the full TargetFile before any of the code contents.\\nYou should specify the following arguments before the others: [TargetFile]\",\n  \"name\": \"write_to_file\",\n  \"parameters\": {\n    \"properties\": {\n      \"CodeContent\": {\n        \"description\": \"The code contents to write to the file.\",\n        \"type\": \"string\"\n      },\n      \"EmptyFile\": {\n        \"description\": \"Set this to true to create an empty file.\",\n        \"type\": \"boolean\"\n      },\n      \"TargetFile\": {\n        \"description\": \"The target file to create and write code to.\",\n        \"type\": \"string\"\n      }\n    },\n    \"type\": \"object\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating GitHub Pull Request Comment Status\nDESCRIPTION: Updates the status of a specific comment on a GitHub pull request. This helps track progress on addressing feedback. Requires the pull request number, the comment number, and the desired state (`done` or `outdated`).\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_35\n\nLANGUAGE: xml\nCODE:\n```\n<gh_pr_checklist step_number=\"001\" pull_number=\"42\" comment_number=\"42\" state=\"done/outdated\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining `list_dir` Tool Parameters in JSON\nDESCRIPTION: Defines the `list_dir` tool designed to list the contents of a specified directory. It requires an absolute `DirectoryPath` parameter. The output for each item includes its relative path, type (file/directory), size (for files), and recursive child count (for directories).\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/WINDSURF/Windsurf_Tools.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"List the contents of a directory. Directory path must be an absolute path to a directory that exists. For each child in the directory, output will have: relative path to the directory, whether it is a directory or file, size in bytes if file, and number of children (recursive) if directory.\",\n  \"name\": \"list_dir\",\n  \"parameters\": {\n    \"properties\": {\n      \"DirectoryPath\": {\n        \"description\": \"Path to list contents of, should be absolute path to a directory\",\n        \"type\": \"string\"\n      }\n    },\n    \"type\": \"object\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extensions Tool API Usage and Error Logging - Python\nDESCRIPTION: This snippet defines Python classes and functions for interacting with the extensions API. It introduces the Status enum, UnsupportedError dataclass, and generic logging and extension discovery functions. The extensions API provides error logging, as well as mechanisms for searching extension capabilities and names. Dependencies include enum and dataclasses modules. Input parameters differ per function, and outputs include error objects or string lists.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/GOOGLE/Gemini-2.5-Pro-04-18-2025.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"API for extensions.\"\"\"\\n\\nimport dataclasses\\nimport enum\\nfrom typing import Any\\n\\n\\nclass Status(enum.Enum):\\n    UNSUPPORTED = \\\"unsupported\\\"\\n\\n\\n@dataclasses.dataclass\\nclass UnsupportedError:\\n    message: str\\n    tool_name: str\\n    status: Status\\n    operation_name: str | None = None\\n    parameter_name: str | None = None\\n    parameter_value: str | None = None\\n    missing_parameter: str | None = None\\n\\n\\ndef log(\\n    message: str,\\n    tool_name: str,\\n    status: Status,\\n    operation_name: str | None = None,\\n    parameter_name: str | None = None,\\n    parameter_value: str | None = None,\\n    missing_parameter: str | None = None,\\n) -> UnsupportedError:\\n    ...\\n\\ndef search_by_capability(query: str) -> list[str]:\\n    ...\\n\\ndef search_by_name(extension: str) -> list[str]:\\n    ...\\n\n```\n\n----------------------------------------\n\nTITLE: Google Search Tool API Usage - Python\nDESCRIPTION: This Python code snippet provides the type definitions and function interface for the google_search tool, including dataclasses for single-result and multi-result search responses. It defines types, method signatures, and the expected use pattern for querying Google Search via the assistant's tool interface. Dependencies are the dataclasses module and Python typing primitives. Input parameters are flexible for single or batch queries; expected outputs are structured search result lists. The method body is stubbed and would require system-level implementation.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/GOOGLE/Gemini-2.5-Pro-04-18-2025.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"API for google_search\"\"\"\\n\\nimport dataclasses\\nfrom typing import Union, Dict\\n\\n\\n@dataclasses.dataclass\\nclass PerQueryResult:\\n    index: str | None = None\\n    publication_time: str | None = None\\n    snippet: str | None = None\\n    source_title: str | None = None\\n    url: str | None = None\\n\\n\\n@dataclasses.dataclass\\nclass SearchResults:\\n    query: str | None = None\\n    results: Union[list[\\\"PerQueryResult\\\"], None] = None\\n\\n\\ndef search(\\n    query: str | None = None,\\n    queries: list[str] | None = None,\\n) -> list[SearchResults]:\\n    ...\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Binary Search Algorithm in Python\nDESCRIPTION: Defines a Python function `binary_search` that implements the binary search algorithm. It takes a sorted list `arr` and a `target` value as input. The function iteratively narrows down the search space by comparing the target with the middle element until the target is found (returning its index) or the search space is exhausted. Assumes the input list `arr` is sorted. Note: The snippet is incomplete as indicated by `...`.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/ANTHROPIC/Claude_Sonnet_3.5.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        ...\n```\n\n----------------------------------------\n\nTITLE: Deploying Backend Application (FastAPI/Poetry)\nDESCRIPTION: Deploys a backend application to Fly.io, specifically designed for FastAPI projects using Poetry for dependency management. Requires the directory path. Ensure `pyproject.toml` includes all necessary dependencies. Returns a public URL. Can also be used to view logs of an existing deployment by setting `logs` to True and omitting `dir`. Test locally before and via the public URL after deployment.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_28\n\nLANGUAGE: xml\nCODE:\n```\n<deploy_backend step_number=\"001\" dir=\"path/to/backend\" logs=\"True/False\"/>\n```\n\n----------------------------------------\n\nTITLE: Calling Tool APIs with Python Code in Gemini Assistant - Python\nDESCRIPTION: This snippet describes the use of the 'tool_code' block for writing Python code meant to interact with predefined tool APIs (such as search, browsing, or other extensions). The expected input is Python code that leverages one of the described tool APIs. The code should be wrapped in triple-backtick 'tool_code' fences. Dependencies include the tool modules provided by the system, and the output depends on the specific tool's API.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/GOOGLE/Gemini-2.5-Pro-04-18-2025.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n```tool_code\\n...\\n```\n```\n\n----------------------------------------\n\nTITLE: Defining `search_web` Tool Parameters in JSON\nDESCRIPTION: Defines the `search_web` tool for performing web searches. It requires a `query` parameter for the search terms. An optional `domain` parameter can be provided to suggest prioritizing results from a specific domain.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/WINDSURF/Windsurf_Tools.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Performs a web search to get a list of relevant web documents for the given query and optional domain filter.\",\n  \"name\": \"search_web\",\n  \"parameters\": {\n    \"properties\": {\n      \"domain\": {\n        \"description\": \"Optional domain to recommend the search prioritize\",\n        \"type\": \"string\"\n      },\n      \"query\": {\n        \"type\": \"string\"\n      }\n    },\n    \"type\": \"object\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Frontend Application Build\nDESCRIPTION: Deploys the build folder of a frontend application. It requires the absolute path to the build directory. Upon successful deployment, it returns a public URL. Ensure the deployed frontend uses public backend URLs, not local ones. Test locally before and via the public URL after deployment.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_27\n\nLANGUAGE: xml\nCODE:\n```\n<deploy_frontend step_number=\"001\" dir=\"path/to/frontend/dist\"/>\n```\n\n----------------------------------------\n\nTITLE: Browsing Tool API for Gemini Assistant - Python\nDESCRIPTION: This snippet demonstrates the interface for the 'browsing' tool module, which provides a function to browse a specified URL given a search query. It also defines (without detail) response dataclass and expected type use. The function accepts a query string and a URL, returning the retrieved document as a string. Dependencies are dataclasses and typing modules.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/GOOGLE/Gemini-2.5-Pro-04-18-2025.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"API for browsing\"\"\"\\n\\nimport dataclasses\\nfrom typing import Union, Dict\\n\\n\\ndef browse(\\n    query: str,\\n    url: str,\\n) -> str:\\n    ...\\n\n```\n\n----------------------------------------\n\nTITLE: Viewing Git Pull Request Details\nDESCRIPTION: Displays formatted details of a Git pull request, including comments, review requests, and CI status. Requires the repository name (`owner/repo`) and the pull request number. This is presented as a more readable alternative to `gh pr view` for viewing metadata; use `git diff --merge-base {merge_base}` for viewing code changes.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_34\n\nLANGUAGE: xml\nCODE:\n```\n<git_view_pr step_number=\"001\" repo=\"owner/repo\" pull_number=\"42\"/>\n```\n\n----------------------------------------\n\nTITLE: Finding Filenames using find_filename (XML)\nDESCRIPTION: Defines the `find_filename` command to recursively search a directory for filenames matching one or more glob patterns. It's recommended over the standard `find` command due to optimizations. Required parameters are `path` (absolute directory path) and `glob` (semicolon-separated glob patterns). Restricting the search path is advised to manage result volume.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<find_filename step_number=\"001\" path=\"/path/to/dir\" glob=\"globPattern1; globPattern2; ...\"/>\n```\n\n----------------------------------------\n\nTITLE: Content Fetcher Tool API for Source Retrieval - Python\nDESCRIPTION: This Python snippet provides data structures and function signatures for fetching content from source references via the assistant's content_fetcher tool. It introduces the SourceReference dataclass and a fetch function that takes a query and a list of source references, returning the fetched content as a string. Dependencies include dataclasses and typing modules. Input validation relies on IDs and source references, and the expected output is document text or data.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/GOOGLE/Gemini-2.5-Pro-04-18-2025.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n\"\"\"API for content_fetcher\"\"\"\\n\\nimport dataclasses\\nfrom typing import Union, Dict\\n\\n\\n@dataclasses.dataclass\\nclass SourceReference:\\n    id: str\\n    type: str | None = None\\n\\n\\ndef fetch(\\n    query: str,\\n    source_references: list[SourceReference],\\n) -> str:\\n    ...\\n\n```\n\n----------------------------------------\n\nTITLE: Interacting with Browser Console using browser_console (XML)\nDESCRIPTION: Defines the `browser_console` command to view output from the browser's developer console or optionally execute JavaScript code within it. If code is provided as the tag's content, it's executed; otherwise, recent console output is returned. Useful for debugging. The `tab_idx` specifies the target tab (defaults to 0).\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_25\n\nLANGUAGE: xml\nCODE:\n```\n<browser_console step_number=\"001\" tab_idx=\"0\">console.log('Hi') // Optionally run JS code in the console.</browser_console>\n```\n\n----------------------------------------\n\nTITLE: Defining `read_deployment_config` Tool Parameters in JSON\nDESCRIPTION: Defines the `read_deployment_config` tool used to read a web application's deployment configuration and check readiness for deployment. It requires the `ProjectPath` parameter, which must be the full absolute path to the application's project directory. This tool is intended as a preparatory step for the `deploy_web_app` tool.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/WINDSURF/Windsurf_Tools.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Read the deployment configuration for a web application and determine if the application is ready to be deployed. Should only be used in preparation for the deploy_web_app tool.\",\n  \"name\": \"read_deployment_config\",\n  \"parameters\": {\n    \"properties\": {\n      \"ProjectPath\": {\n        \"description\": \"The full absolute project path of the web application.\",\n        \"type\": \"string\"\n      }\n    },\n    \"type\": \"object\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Python Data Analysis Script Interactively in Shell\nDESCRIPTION: This shell command executes a Python script 'data_analysis.py' in interactive mode using the '-i' flag. This example illustrates how the 'shell_command_application_feedback_tool' can be used to interact with scripts designed for interactive data manipulation.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/REPLIT/Replit_Functions.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\npython -i data_analysis.py\n```\n\n----------------------------------------\n\nTITLE: Defining PostgreSQL Database Creation Tool - JSON\nDESCRIPTION: Describes the 'create_postgresql_database_tool', a utility for creating a PostgreSQL database and exposing standard connection environment variables to the consuming runtime. No parameters are required, and it is intended for one-step initialization in deployment or development workflows.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/REPLIT/Replit_Functions.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\\\"description\\\": \\\"When a project requires a PostgreSQL database, you can use this tool to create a database for it. After successfully creating a database, you will have access to the following environment variables: DATABASE_URL, PGPORT, PGUSER, PGPASSWORD, PGDATABASE, PGHOST\\\\nYou can use these environment variables to connect to the database in your project.\\\", \\\"name\\\": \\\"create_postgresql_database_tool\\\", \\\"parameters\\\": {\\\"properties\\\": {}, \\\"type\\\": \\\"object\\\"}}\n```\n\n----------------------------------------\n\nTITLE: Defining the 'browser_preview' Tool Function in JSON\nDESCRIPTION: This JSON object defines the 'browser_preview' tool. Its purpose is to spin up a browser preview for a web server, allowing user interaction and providing console logs. Key parameters include 'Name' (a short, title-cased name for the server) and 'Url' (the full base URL of the server). The tool does not automatically open the preview; user action is required.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/WINDSURF/Windsurf_Tools.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Spin up a browser preview for a web server. This allows the USER to interact with the web server normally as well as provide console logs and other information from the web server to Cascade. Note that this tool call will not automatically open the browser preview for the USER, they must click one of the provided buttons to open it in the browser.\",\n  \"name\": \"browser_preview\",\n  \"parameters\": {\n    \"properties\": {\n      \"Name\": {\n        \"description\": \"A short name 3-5 word name for the target web server. Should be title-cased e.g. 'Personal Website'. Format as a simple string, not as markdown; and please output the title directly, do not prefix it with 'Title:' or anything similar.\",\n        \"type\": \"string\"\n      },\n      \"Url\": {\n        \"description\": \"The URL of the target web server to provide a browser preview for. This should contain the scheme (e.g. http:// or https://), domain (e.g. localhost or 127.0.0.1), and port (e.g. :8080) but no path.\",\n        \"type\": \"string\"\n      }\n    },\n    \"type\": \"object\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Undoing Edits on Files - Editor Commands - Plaintext/XML\nDESCRIPTION: This snippet covers the <undo_edit> command, which rolls back the most recent change to a specified file. The input parameters determine the file and optional sudo status. Upon execution, a diff of reverted changes is provided, aiding in validation and further review. The operation only undoes the last change applied via these editor commands, ensuring controlled change management.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<undo_edit step_number=\\\"001\\\" path=\\\"/full/path/to/filename\\\" sudo=\\\"True/False\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Background Workflow Shell Commands - JSON\nDESCRIPTION: Defines the 'workflows_set_run_config_tool' to register long running or background shell commands associated with project workflows. Parameters include command, human-readable name, and optionally a port number to wait for readiness. Essential for orchestrating multi-service or development server automation on a dedicated, firewalled port (5000).\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/REPLIT/Replit_Functions.md#_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{\\\"description\\\": \\\"Configure a background task that executes a shell command.\\\\nThis is useful for starting development servers, build processes, or any other\\\\nlong-running tasks needed for the project.\\\\nIf this is a server, ensure you specify the port number it listens on in the wait_for_port field so\\\\nthe workflow isn't considered started until the server is ready to accept connections.\\\\n\\\\nExamples:\\\\n- For a Node.js server: set name to 'Server', command to 'npm run dev', and wait_for_port to 5000\\\\n- For a Python script: set name to 'Data Processing' and command to 'python process_data.py'\\\\n\\\\nMultiple tasks can be configured and they will all execute in parallel when the project is started.\\\\nAfter configuring a task, it will automatically start executing in the background.\\\\n\\\\nALWAYS serve the app on port 5000, even if there are problems serving that port: it is the only port that is not firewalled.\\\\n\\\", \\\"name\\\": \\\"workflows_set_run_config_tool\\\", \\\"parameters\\\": {\\\"properties\\\": {\\\"command\\\": {\\\"description\\\": \\\"The shell command to execute. This will run in the background when the project is started.\\\", \\\"type\\\": \\\"string\\\"}, \\\"name\\\": {\\\"description\\\": \\\"A unique name to identify the command. This will be used to keep a track of the command.\\\", \\\"type\\\": \\\"string\\\"}, \\\"wait_for_port\\\": {\\\"anyOf\\\": [{\\\"type\\\": \\\"integer\\\"}, {\\\"type\\\": \\\"null\\\"}], \\\"default\\\": null, \\\"description\\\": \\\"If the command starts a process that listens on a port, specify the port number here.\\\\nThis allows the system to wait for the port to be ready before considering the command fully started.\\\"}}, \\\"required\\\": [\\\"name\\\", \\\"command\\\"], \\\"type\\\": \\\"object\\\"}}\n```\n\n----------------------------------------\n\nTITLE: Defining Persistent Bash Command Runner - JSON\nDESCRIPTION: Represents the 'bash' tool schema for invoking shell commands in a persistent environment. It supports standard command execution, optional restarts, and warns about output length. Designed for integrating bash tasks into CI/CD or development tooling without direct shell manipulation.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/REPLIT/Replit_Functions.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\\\"description\\\": \\\"Run commands in a bash shell\\\\n When invoking this tool, the contents of the \\\\\\\"command\\\\\\\" parameter does NOT need to be XML-escaped.\\\\n You have access to a mirror of common linux and python packages via apt and pip.\\\\n State is persistent across command calls and discussions with the user.\\\\n To inspect a particular line range of a file, e.g. lines 10-25, try 'sed -n 10,25p /path/to/the/file'.\\\\n Please avoid commands that may produce a very large amount of output.\\\\n Please run long lived commands in the background, e.g. 'sleep 10 &' or start a server in the background.\\\", \\\"name\\\": \\\"bash\\\", \\\"parameters\\\": {\\\"properties\\\": {\\\"command\\\": {\\\"description\\\": \\\"The bash command to run. Required unless the tool is being restarted.\\\", \\\"type\\\": \\\"string\\\"}, \\\"restart\\\": {\\\"description\\\": \\\"Specifying true will restart this tool. Otherwise, leave this unspecified.\\\", \\\"type\\\": \\\"boolean\\\"}}, \\\"type\\\": \\\"object\\\"}}\n```\n\n----------------------------------------\n\nTITLE: Defining Database Status Checker Tool - JSON\nDESCRIPTION: Provides a schema for the 'check_database_status' tool, which validates the accessibility and readiness of configured databases. No parameters are needed, making it ideal for routine or preflight status checks in devops pipelines or integration tests.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/REPLIT/Replit_Functions.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\\\"description\\\": \\\"Check if given databases are available and accessible.\\\\nThis tool is used to verify the connection and status of specified databases.\\\", \\\"name\\\": \\\"check_database_status\\\", \\\"parameters\\\": {\\\"properties\\\": {}, \\\"type\\\": \\\"object\\\"}}\n```\n\n----------------------------------------\n\nTITLE: Restarting Browser Instance using restart_browser (XML)\nDESCRIPTION: Defines the `restart_browser` command to close all existing tabs and restart the controlled browser, navigating to a specified URL. Optionally, browser extensions can be loaded by providing comma-separated paths via the `extensions` parameter. The required parameter is `url`. Use with care as it closes all tabs.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<restart_browser step_number=\"001\" extensions=\"/path/to/extension1,/path/to/extension2\" url=\"https://www.google.com\"/>\n```\n\n----------------------------------------\n\nTITLE: Querying Customer Data by Region in SQL\nDESCRIPTION: This SQL query selects all columns (*) for records from the 'customers' table where the 'region' column matches the value 'North'. It serves as an example usage for the 'execute_sql_tool' to view specific database information.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/REPLIT/Replit_Functions.md#_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM customers WHERE region = 'North';\n```\n\n----------------------------------------\n\nTITLE: Defining the 'view_web_document_content_chunk' Tool in JSON\nDESCRIPTION: Defines the `view_web_document_content_chunk` tool interface using JSON. This tool retrieves a specific chunk of content from a web document previously read by the `read_url_content` tool. It requires the URL of the document (`url`) and the integer position (`position`) of the chunk to view as parameters.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/WINDSURF/Windsurf_Tools.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"View a specific chunk of web document content using its URL and chunk position. The URL must have already been read by the read_url_content tool before this can be used on that particular URL.\",\n  \"name\": \"view_web_document_content_chunk\",\n  \"parameters\": {\n    \"properties\": {\n      \"position\": {\n        \"description\": \"The position of the chunk to view\",\n        \"type\": \"integer\"\n      },\n      \"url\": {\n        \"description\": \"The URL that the chunk belongs to\",\n        \"type\": \"string\"\n      }\n    },\n    \"type\": \"object\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for Condition or Time\nDESCRIPTION: Pauses execution until a specific condition is met (user input, shell process completion) or for a specified duration. Requires either the condition (`on`) or the duration in seconds (`seconds`). Useful for synchronizing with long-running processes or user interaction.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_30\n\nLANGUAGE: xml\nCODE:\n```\n<wait step_number=\"001\" on=\"user/shell/etc\" seconds=\"5\"/>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shell Output Using <view_shell> XML Block - XML\nDESCRIPTION: This XML code sample displays the invocation of a custom <view_shell> tag designed to view the latest output from a given shell process instance. The required id parameter identifies the specific shell instance whose output status is being requested. This block is particularly useful for monitoring or polling the progress of asynchronous or long-running shell commands. The system that processes this code should be capable of tracking shell lifecycle states and returning output data accordingly.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<view_shell step_number=\\\"001\\\" id=\\\"shellId\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Terminating Running Shell Processes Using <kill_shell_process> XML Block - XML\nDESCRIPTION: This snippet illustrates how to use the <kill_shell_process> XML tag to terminate an active shell process. By specifying the required id attribute, the target shell instance can be forcefully ended. This command is essential for cleaning up stuck or long-running processes initiated using the <shell> command, ensuring that system resources are effectively managed. It is typically used in error handling scenarios or when a process fails to exit on its own.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<kill_shell_process step_number=\\\"001\\\" id=\\\"shellId\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Viewing Browser Tab Content using view_browser (XML)\nDESCRIPTION: Defines the `view_browser` command to capture the current state (screenshot and HTML) of a specific browser tab. Optional parameters include `reload_window` (boolean, defaults to false, useful to avoid reloading after waiting for content), `scroll_direction` ('up'/'down'), and `tab_idx` (defaults to 0).\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<view_browser step_number=\"001\" reload_window=\"True/False\" scroll_direction=\"up/down\" tab_idx=\"0\"/>\n```\n\n----------------------------------------\n\nTITLE: Executing a Pygame Application via Shell for VNC Feedback\nDESCRIPTION: This shell command runs a Python script 'pygame_snake.py', presumably a Pygame application that opens a window. It's an example command for the 'vnc_window_application_feedback' tool, used to test graphical applications displayed via VNC.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/REPLIT/Replit_Functions.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\npython pygame_snake.py\n```\n\n----------------------------------------\n\nTITLE: Clicking Element in Browser using click_browser (XML)\nDESCRIPTION: Defines the `click_browser` command to simulate a mouse click on an element within a browser tab. The element can be identified either by its `devinid` attribute (preferred) or by `coordinates` (x,y pixels, fallback). The `tab_idx` specifies the target tab (defaults to 0).\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<click_browser step_number=\"001\" devinid=\"12\" coordinates=\"420,1200\" tab_idx=\"0\"/>\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into Products Table in SQL\nDESCRIPTION: This SQL query inserts a new row into the 'products' table with specified values for the 'name', 'price', and 'category' columns. This is an example usage of the 'execute_sql_tool' for modifying database data.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/REPLIT/Replit_Functions.md#_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO products (name, price, category)\n VALUES ('New Product', 29.99, 'Electronics');\n```\n\n----------------------------------------\n\nTITLE: Removing Exact Multi-line Strings from Files - Editor Commands - Plaintext/XML\nDESCRIPTION: This snippet explains usage of the <remove_str> command to delete exact multi-line strings from a file, with behavior controlled by parameters for sudo access and single or multiple removals. Strict matching is enforced regarding whitespace and full-line selection; partial lines cannot be removed. The result is an updated view and possible LSP diagnostics, ensuring atomic and precise removal of content.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<remove_str step_number=\\\"001\\\" path=\\\"/full/path/to/filename\\\" sudo=\\\"True/False\\\" many=\\\"False\\\">\\nProvide the strings to remove here.\\n* The string you provide here should match EXACTLY one or more consecutive full lines from the original file. Be mindful of whitespaces! If your string contains a line that has only spaces or tabs, you need to also output these - the string must match EXACTLY. You cannot include partial lines. You cannot remove part of a line.\\n* Start your string immediately after closing the <remove_str ...> tag. If you include a newline after the closing angle bracket, it will be interpreted as part of the string you are removing.\\n</remove_str>\n```\n\n----------------------------------------\n\nTITLE: Executing an Interactive Python Script in Shell\nDESCRIPTION: This shell command executes a Python script named 'interactive_script.py'. It serves as an example command for the 'shell_command_application_feedback_tool', intended for testing interactive command-line applications.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/REPLIT/Replit_Functions.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npython interactive_script.py\n```\n\n----------------------------------------\n\nTITLE: Navigating to a URL using GOTO_URL Agent Command\nDESCRIPTION: This command instructs the agent to navigate the browser to the specified URL (`https://www.example.com`). It must be the only command issued in a step, and no follow-up commands can be executed after it in the same response. The agent must provide an explanation summarizing its goal and indicate the task status (`CONTINUE` in this example).\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/MULTION/MultiOn.md#_snippet_0\n\nLANGUAGE: Agent Command Language\nCODE:\n```\nCOMMANDS: GOTO_URL https://www.example.com EXPLANATION: I am... STATUS: CONTINUE\n```\n\n----------------------------------------\n\nTITLE: Reporting Development Environment Issue\nDESCRIPTION: Reports an issue encountered within the development environment to the user. The message content should briefly explain the observed problem (e.g., missing dependencies, auth issues, broken config) and suggest a fix. This command is critical for informing the user about environment problems that need attention.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_33\n\nLANGUAGE: xml\nCODE:\n```\n<report_environment_issue step_number=\"001\">message</report_environment_issue>\n```\n\n----------------------------------------\n\nTITLE: Formatting Code Snippets in Markdown\nDESCRIPTION: Instructs the AI on how to include code snippets in the generated report. Requires the use of Markdown code blocks with appropriate language identifiers for syntax highlighting. If the query requests code, the code block should precede its explanation.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/PERPLEXITY/Perplexity_Deep_Research.txt#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nCode Snippets:\n- Include code snippets using Markdown code blocks.\n- Use the appropriate language identifier for syntax highlighting.\n- If the Query asks for code, you should write the code first and then explain it.\n```\n\n----------------------------------------\n\nTITLE: Defining Secret Existence Checker Parameter Schema in JSON\nDESCRIPTION: This snippet describes the parameters for a tool or API that checks for existence of secret keys in the environment using JSON schema. It specifies a required array of secret key names and marks them as required. This schema can be used for parameter validation in JavaScript/Node.js environment or automated API documentation. Inputs are JSON objects with an array of secret keys, and output or further behavior is implied but not detailed in the snippet.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/REPLIT/Replit_Functions.md#_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Check if a given secret exists in the environment.\\nThis tool is used to verify the presence of a secret without exposing its actual value.\\n\",\n  \"name\": \"check_secrets\",\n  \"parameters\": {\n    \"properties\": {\n      \"secret_keys\": {\n        \"description\": \"The secret keys to check in the environment.\",\n        \"items\": {\"type\": \"string\"},\n        \"type\": \"array\"\n      }\n    },\n    \"required\": [\"secret_keys\"],\n    \"type\": \"object\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Secret Key Requirement Schema in JSON\nDESCRIPTION: This snippet defines a JSON schema object specifying parameters for an API/tool requiring secret keys and an explanatory user message. It describes required properties, including an array of secret key names and a user-facing description, enforcing required fields for proper validation. Suitable for use with OpenAPI, JSON schema validation, or input validation in Node.js environments. Inputs are expected as properties within a JSON object, with clear data types and requirement constraints.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/REPLIT/Replit_Functions.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"The message to send back to the user explaining the reason for needing these secret keys. If you haven't already, briefly introduce what a secret key is in general terms, assume the user never registered for an API key before. Please phrase your question respectfully.\",\n  \"type\": \"string\"\n},\n\"required\": [\"secret_keys\", \"user_message\"],\n\"type\": \"object\"\n}\n```\n\n----------------------------------------\n\nTITLE: Python Flask Backend Placeholder for TODO App - Python\nDESCRIPTION: A placeholder Python file for backend logic, using Flask implicitly (as per context, not explicit in this snippet). Expected to be expanded to handle REST API routes and data management for the TODO application. No code logic is present yet; only a comment. No dependencies required for this snippet, but Flask or a similar web framework is implied.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/REPLIT/Replit_Initial_Code_Generation_Prompt.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n/ Python code here\n```\n\n----------------------------------------\n\nTITLE: Defining the 'suggested_responses' Tool in JSON\nDESCRIPTION: Defines the `suggested_responses` tool interface using JSON. This tool is used to provide a small list of suggested answers (like Yes/No or simple multiple choice) to the user when asking a question, but should be used sparingly and only when a suggested response is highly likely and doesn't require a follow-up question. It accepts a list of strings (`Suggestions`) as parameters, with a maximum of 3 suggestions, each being short.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/WINDSURF/Windsurf_Tools.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"If you are calling no other tools and are asking a question to the user, use this tool to supply a small number of possible suggested answers to your question. Examples can be Yes/No, or other simple multiple choice options. Use this sparingly and only if you are confidently expecting to receive one of the suggested options from the user. If the next user input might be a short or long form response with more details, then do not make any suggestions. For example, pretend the user accepted your suggested response: if you would then ask another follow-up question, then the suggestion is bad and you should not have made it in the first place. Try not to use this many times in a row.\",\n  \"name\": \"suggested_responses\",\n  \"parameters\": {\n    \"properties\": {\n      \"Suggestions\": {\n        \"description\": \"List of suggestions. Each should be at most a couple words, do not return more than 3 options.\",\n        \"items\": {\n          \"type\": \"string\"\n        },\n        \"type\": \"array\"\n      }\n    },\n    \"type\": \"object\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Blue Circle using SVG\nDESCRIPTION: This SVG code creates a simple graphic artifact: a blue circle. It defines an SVG canvas with a `viewBox` and draws a circle element centered at (50,50) with a radius of 40, filled with the color blue. This exemplifies creating an SVG artifact.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/ANTHROPIC/Claude_Sonnet_3.5.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n  <circle cx=\"50\" cy=\"50\" r=\"40\" fill=\"blue\" />\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Running a Text Adventure Game from Shell\nDESCRIPTION: This shell command runs an executable file named 'text_adventure_game'. It's provided as an example command for the 'shell_command_application_feedback_tool' to test interactive CLI game functionality.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/REPLIT/Replit_Functions.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n./text_adventure_game\n```\n\n----------------------------------------\n\nTITLE: JavaScript Placeholder for Frontend Logic - JavaScript\nDESCRIPTION: This JavaScript code provides a comment indicating where application logic will be inserted. Intended to be linked in the HTML and used for dynamic interaction in the TODO app. No dependencies required. Currently, it does not handle any logic or I/O.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/REPLIT/Replit_Initial_Code_Generation_Prompt.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript code here\n```\n\n----------------------------------------\n\nTITLE: Formatting Block Mathematical Expressions using LaTeX\nDESCRIPTION: Mandates the use of LaTeX for rendering block-level mathematical expressions, specifically using `\\\\[ ... \\\\]` delimiters. Shows how to add citations like `\\\\[ \\\\sin(x) \\\\] [1][2]`. Explicitly forbids using `$` or `$$` delimiters, Unicode math characters, and the `\\\\label` command.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/PERPLEXITY/Perplexity_Deep_Research.txt#_snippet_4\n\nLANGUAGE: latex\nCODE:\n```\nMathematical Expressions:\n- Wrap all math expressions in LaTeX using ... \\\\[ \\\\] for block formulas. ...\n- To cite a formula add citations to the end, for example \\\\[ \\\\sin(x) \\\\] [1][2] ...\n- Never use $ or $$ to render LaTeX, even if it is present in the Query.\n- Never use Unicode to render math expressions, ALWAYS use LaTeX.\n- Never use the \\\\label instruction for LaTeX.\n```\n\n----------------------------------------\n\nTITLE: Example JSON Array of Secret Key Identifiers\nDESCRIPTION: This snippet shows an example JSON array containing strings that represent secret key identifiers ('OPENAI_API_KEY', 'GITHUB_TOKEN'). It illustrates the expected format for the 'secret_keys' parameter within the 'ask_secrets' tool.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/REPLIT/Replit_Functions.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n[\"OPENAI_API_KEY\", \"GITHUB_TOKEN\"]\n```\n\n----------------------------------------\n\nTITLE: Completing and Exporting a React Functional Component\nDESCRIPTION: This snippet shows the closing part of a React functional component definition, likely named `Dashboard`. It closes the component's JSX return statement and function body, then exports the `Dashboard` component as the default export, making it available for use in other parts of the application. It assumes the presence of the React library.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/ANTHROPIC/Claude_Sonnet_3.5.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n); };\n\nexport default Dashboard;\n```\n\n----------------------------------------\n\nTITLE: Describing Internal Reasoning Using Custom <think> XML Tag - XML\nDESCRIPTION: This XML code snippet demonstrates the usage of a custom <think> tag, which acts as a structured container for internal reasoning and free-form thought within the automated task-control system. The tag allows users (or automated agents) to write extended multi-line explanations, observations, and planning logic that are not meant to be visible to end users. It expects users to use this tag at specific decision points, such as prior to Git operations or when verifying completion of a task. There are no external dependencies and the input is purely descriptive; the system consuming this tag must recognize and process it according to its own rules.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<think>Freely describe and reflect on what you know so far, things that you tried, and how that aligns with your objective and the user's intent. You can play through different scenarios, weigh options, and reason about possible next next steps. The user will not see any of your thoughts here, so you can think freely.</think>\n```\n\n----------------------------------------\n\nTITLE: Formatting Inline Citations in Markdown\nDESCRIPTION: Specifies the rules for citing sources within the report text. Citations must immediately follow the relevant sentence using bracketed indices for each source (e.g., `[1][2]`), referencing provided search results. Up to three sources can be cited per sentence. A separate references list is explicitly forbidden.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/PERPLEXITY/Perplexity_Deep_Research.txt#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<citations>\n- You MUST cite search results used directly after each sentence it is used in.\n- Cite search results using the following method. Enclose the index of the relevant search result in brackets at the end of the corresponding sentence. For example: \"Ice is less dense than water[1][2].\"\n- Each index should be enclosed in its own bracket and never include multiple indices in a single bracket group.\n- Do not leave a space between the last word and the citation.\n- Cite up to three relevant sources per sentence, choosing the most pertinent search results.\n- Never include a References section, Sources list, or list of citations at the end of your report. The list of sources will already be displayed to the user.\n- Please answer the Query using the provided search results, but do not produce copyrighted material verbatim.\n- If the search results are empty or unhelpful, answer the Query as well as you can with existing knowledge.\n</citations>\n```\n\n----------------------------------------\n\nTITLE: Marking Plan Step as Already Complete\nDESCRIPTION: Indicates that a specific step in a plan is already completed and requires no further action. Used within a planning context.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/DEVIN/Devin_2.0_Commands.md#_snippet_36\n\nLANGUAGE: xml\nCODE:\n```\n<already_complete step_number=\"001\"/>\n```\n\n----------------------------------------\n\nTITLE: Specifying Report Document Structure using Markdown Headers\nDESCRIPTION: Defines the mandatory Markdown header structure for the generated report. It requires a single H1 title, H2 for main sections (at least 5), H3 for subsections, and optional H4s, prohibiting skipped levels. Each section/subsection must have narrative paragraphs (min 4-5 sentences each) and avoid lists.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/PERPLEXITY/Perplexity_Deep_Research.txt#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<document_structure>\n- Always begin with a clear title using a single # header\n- Organize content into major sections using ## headers\n- Further divide into subsections using ### headers\n- Use #### headers sparingly for special subsections\n- Never skip header levels\n- Write multiple paragraphs per section or subsection\n- Each paragraph must contain at least 4-5 sentences, present novel insights and analysis grounded in source material, connect ideas to original query, and build upon previous paragraphs to create a narrative flow\n- Never use lists, instead always use text or tables\n\nMandatory Section Flow:\n1. Title (# level)\n   - Before writing the main report, start with one detailed paragraph summarizing key findings\n2. Main Body Sections (## level)\n   - Each major topic gets its own section (## level). There MUST BE at least 5 sections.\n   - Use ### subsections for detailed analysis\n   - Every section or subsection needs at least one paragraph of narrative before moving to the next section\n   - Do NOT have a section titled \"Main Body Sections\" and instead pick informative section names that convey the theme of the section\n3. Conclusion (## level)\n   - Synthesis of findings\n   - Potential recommendations or next steps\n</document_structure>\n```\n\n----------------------------------------\n\nTITLE: Explaining Intent to Scroll for Information\nDESCRIPTION: This is an example explanation the agent should provide when it needs to scroll further down the page to find information required for memorization, but hasn't located it yet. This explanation precedes the actual scroll command.\nSOURCE: https://github.com/elder-plinius/cl4r1t4s.git/blob/main/MULTION/MultiOn.md#_snippet_4\n\nLANGUAGE: Agent Command Language\nCODE:\n```\nEXPLANATION: Im going to keep scrolling to find the information I need so I can memorize it.\n```"
  }
]