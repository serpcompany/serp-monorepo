[
  {
    "owner": "vitessce",
    "repo": "vitessce",
    "content": "TITLE: Implementing Custom Zoom Controller Plugin View in React/Vitessce\nDESCRIPTION: A complete example showing how to create a custom zoom controller view type plugin for Vitessce. The code demonstrates component creation, coordination hook usage, plugin registration, and configuration setup. The example includes a simple UI for displaying and randomly changing zoom levels.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/tutorial-plugin-view-type.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport {\n  Vitessce,\n  CoordinationType,\n  registerPluginViewType,\n  TitleInfo,\n  useCoordination,\n} from 'vitessce';\nimport 'vitessce/dist/es/production/static/css/index.css';\nimport './index.css';\n\nfunction MyCustomZoomController(props) {\n  const {\n    spatialZoom,\n    setSpatialZoom,\n  } = props;\n\n  function handleClick() {\n    setSpatialZoom(-10 + Math.random() * 10);\n  }\n  return (\n    <div>\n      <p>Zoom level: <b>{spatialZoom}</b></p>\n      <p>\n        <button onClick={handleClick}>Try a random zoom level</button>\n      </p>\n    </div>\n  );\n}\n\nfunction MyCustomZoomControllerSubscriber(props) {\n  const {\n    coordinationScopes,\n    removeGridComponent,\n    theme,\n    title = 'My plugin view',\n  } = props;\n\n  // Get \"props\" from the coordination space.\n  const [{\n    spatialZoom,\n  }, {\n    setSpatialZoom,\n  }] = useCoordination(\n    [\n      CoordinationType.DATASET,\n      CoordinationType.SPATIAL_ZOOM,\n    ],\n    coordinationScopes,\n  );\n\n  return (\n    <TitleInfo\n      title={title}\n      theme={theme}\n      removeGridComponent={removeGridComponent}\n      isReady\n    >\n      <MyCustomZoomController\n        spatialZoom={spatialZoom}\n        setSpatialZoom={setSpatialZoom}\n      />\n    </TitleInfo>\n  );\n}\n\n// Register the plugin view type.\nregisterPluginViewType(\n  'myCustomZoomController',\n  MyCustomZoomControllerSubscriber,\n  [\n    CoordinationType.DATASET,\n    CoordinationType.SPATIAL_ZOOM,\n  ],\n);\n\n// Use the plugin view in the configuration.\nconst configWithPluginViewType = {\n  name: 'Test plugin view types',\n  version: '1.0.9',\n  description: 'Demonstration of a basic plugin view implementation.',\n  public: true,\n  datasets: [\n    {\n      uid: 'plugin-test-dataset',\n      name: 'Plugin test dataset',\n      files: [\n        {\n          type: 'raster',\n          fileType: 'raster.json',\n          url: 'https://data-1.vitessce.io/0.0.31/master_release/spraggins/spraggins.raster.json',\n        },\n      ],\n    },\n  ],\n  initStrategy: 'auto',\n  coordinationSpace: {\n    spatialZoom: {\n      A: -6.5,\n    },\n  },\n  layout: [\n    {\n      component: 'description',\n      props: {\n        title: 'Description',\n      },\n      x: 10,\n      y: 0,\n      w: 2,\n      h: 2,\n    },\n    {\n      component: 'spatial',\n      coordinationScopes: {\n        spatialZoom: 'A',\n      },\n      x: 2,\n      y: 0,\n      w: 8,\n      h: 2,\n    },\n    {\n      component: 'myCustomZoomController',\n      coordinationScopes: {\n        spatialZoom: 'A',\n      },\n      x: 0,\n      y: 0,\n      w: 2,\n      h: 2,\n    },\n  ],\n};\n\nexport default function MyApp() {\n  return (\n    <Vitessce\n      config={configWithPluginViewType}\n      height={800}\n      theme=\"light\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Vitessce in Plain HTML\nDESCRIPTION: This HTML snippet demonstrates how to integrate Vitessce into a plain HTML page using script tags. It includes an import map for dependencies and a module script that creates a Vitessce component.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/js-overview.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>My web page</title>\n  </head>\n  <body>\n    <h1>Demo of Vitessce inside a plain HTML page</h1>\n    <div id=\"root\"></div>\n\n    <script type=\"importmap\">\n      {\n        \"imports\": {\n          \"react\": \"https://esm.sh/react@18.2.0?dev\",\n          \"react-dom\": \"https://esm.sh/react-dom@18.2.0?dev\",\n          \"react-dom/client\": \"https://esm.sh/react-dom@18.2.0/client?dev\",\n          \"vitessce\": \"https://unpkg.com/vitessce@latest\"\n        }\n      }\n    </script>\n    <script type=\"module\">\n      import React from 'react';\n      import { createRoot } from 'react-dom/client';\n      import { Vitessce } from 'vitessce';\n\n      const config = {\n        version: '1.0.16',\n        name: 'Example configuration',\n        description: '',\n        datasets: [],\n        initStrategy: 'auto',\n        coordinationSpace: {},\n        layout: [{\n          component: 'description',\n          props: { description: 'Hello, world!' },\n          x: 0, y: 0, w: 6, h: 6,\n        }],\n      };\n\n      function MyApp() {\n        return React.createElement(\n          Vitessce,\n          {\n            height: 500,\n            theme: 'light',\n            config: config,\n          }\n        );\n      }\n\n      const container = document.getElementById('root');\n      const root = createRoot(container);\n      root.render(React.createElement(MyApp));\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Basic Vitessce React Component Implementation\nDESCRIPTION: A basic example of importing and using the Vitessce React component in a React application. This snippet demonstrates how to import the component, provide a view configuration, set a height, and specify a theme.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/js-react-vitessce.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { Vitessce } from 'vitessce';\nimport myViewConfig from './my-view-config';\n\nexport default function MyApp() {\n    return (\n        <Vitessce\n            config={myViewConfig}\n            height={800}\n            theme=\"light\"\n        />\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vitessce via NPM\nDESCRIPTION: This snippet shows how to install Vitessce from NPM using the command line. It requires NodeJS and a package manager like NPM.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/js-overview.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install vitessce\n```\n\n----------------------------------------\n\nTITLE: Implementing Vitessce Scatterplot in React\nDESCRIPTION: A complete React component implementation showing how to set up and use the Vitessce Scatterplot component. The example demonstrates state management for view controls, cell data mapping, and proper styling setup with required CSS classes. It includes the necessary imports, data structure setup, and component configuration.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/component-scatterplot.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Scatterplot } from 'vitessce/es/production/scatterplot.min.js';\nimport 'vitessce/es/production/static/css/index.css';\n\nexport default function App() {\n    const [viewState, setViewState] = useState({\n        target: [0, 0, 0],\n        zoom: 0.75,\n    });\n    const mapping = \"PCA\";\n    const cells = {\n        1: { mappings: { [mapping]: [0, 0] } },\n        2: { mappings: { [mapping]: [1, 1] } },\n        3: { mappings: { [mapping]: [1, 2] } }\n    };\n    const cellColors = new Map();\n    const dimensions = {\n        width: '400px', height: '400px', margin: '10px',\n    };\n\n    return (\n        <div className=\"vitessce-container vitessce-theme-light\">\n            <div className=\"card card-body bg-secondary\" style={dimensions}>\n                <Scatterplot\n                    uuid=\"my-vitessce-scatterplot\"\n                    theme=\"light\"\n                    viewState={viewState}\n                    setViewState={setViewState}\n                    mapping={mapping}\n                    cells={cells}\n                    cellColors={cellColors}\n                />\n            </div>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vitessce in a React Project\nDESCRIPTION: Command to install the Vitessce package from NPM for use in React projects. This enables integration of Vitessce's visualization capabilities into existing React applications.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install vitessce\n```\n\n----------------------------------------\n\nTITLE: Instantiating a VitessceConfig Object in JavaScript\nDESCRIPTION: Creates a new Vitessce configuration object with a schema version and name. This is the starting point for building a Vitessce visualization configuration.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/view-config-js.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VitessceConfig } from 'vitessce';\n\nconst vc = new VitessceConfig({ schemaVersion: \"1.0.15\", name: \"My config\" });\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Loading for the Vitessce Component\nDESCRIPTION: An implementation of lazy loading for the Vitessce component using React.lazy and Suspense. This approach helps reduce the initial bundle size by dynamically importing the Vitessce component only when needed.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/js-react-vitessce.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { Suspense } from 'react';\nconst Vitessce = React.lazy(() => import('./VitessceWrapper'));\n\nexport default function MyApp(props) {\n  const { config } = props;\n\n  return (\n    <Suspense fallback={<div>Loading...</div>}>\n      <Vitessce config={config} theme=\"dark\" height={600} />\n    </Suspense>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Views with Coordination Types in JavaScript\nDESCRIPTION: Demonstrates how to coordinate multiple views using the linkViews method. This example connects two spatial views so they share zoom level and spatial position.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/view-config-js.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VitessceConfig, ViewType as vt, CoordinationType as ct } from 'vitessce';\n\nconst vc = new VitessceConfig({ schemaVersion: \"1.0.15\", name: \"My config\" });\nconst dataset = vc.addDataset(\"My dataset\");\nconst v1 = vc.addView(dataset, vt.SPATIAL);\nconst v2 = vc.addView(dataset, vt.SPATIAL);\nvc.linkViews(\n    [v1, v2],\n    [ct.SPATIAL_ZOOM, ct.SPATIAL_TARGET_X, ct.SPATIAL_TARGET_Y],\n    [2, 0, 0]\n);\n```\n\n----------------------------------------\n\nTITLE: Adding a Dataset with File to a VitessceConfig in JavaScript\nDESCRIPTION: Demonstrates how to add a dataset to a Vitessce configuration and attach a data file with its type and coordination values. The example adds a CSV file containing cell coordinates.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/view-config-js.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VitessceConfig, DataType as dt, FileType as ft } from 'vitessce';\n\nconst vc = new VitessceConfig({ schemaVersion: \"1.0.15\", name: \"My config\" });\nconst dataset = vc.addDataset(\"My dataset\")\n    .addFile({\n        url: \"http://example.com/my-cell-coordinates.csv\",\n        fileType: ft.OBS_LOCATIONS_CSV,\n        coordinationValues: { obsType: 'cell' },\n    });\n```\n\n----------------------------------------\n\nTITLE: Creating Complex View Layouts in JavaScript\nDESCRIPTION: Shows how to create complex multi-view layouts using horizontal and vertical concatenation. This example creates a layout with one view on the left and two stacked views on the right.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/view-config-js.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VitessceConfig, ViewType as vt, hconcat, vconcat } from 'vitessce';\n\nconst vc = new VitessceConfig({ schemaVersion: \"1.0.15\", name: \"My config\" });\nconst dataset = vc.addDataset(\"My dataset\");\nconst v1 = vc.addView(dataset, vt.SPATIAL);\nconst v2 = vc.addView(dataset, vt.SPATIAL);\nconst v3 = vc.addView(dataset, vt.SPATIAL);\nvc.layout(hconcat(v1, vconcat(v2, v3)));\n```\n\n----------------------------------------\n\nTITLE: Defining Layout in Vitessce View Config JSON\nDESCRIPTION: This snippet shows how to define the layout property in the Vitessce view configuration JSON. It includes examples of setting up scatterplot components with their positions, sizes, and coordination scopes.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/view-config-json.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"layout\": [\n    {\n        \"component\": \"scatterplot\",\n        \"x\": 0, \"y\": 0, \"w\": 6, \"h\": 12,\n        \"coordinationScopes\": {\n            \"dataset\": \"D1\",\n            \"embeddingZoom\": \"EZ1\",\n            \"embeddingType\": \"ET1\"\n        }\n    },\n    {\n        \"component\": \"scatterplot\",\n        \"x\": 6, \"y\": 0, \"w\": 6, \"h\": 12,\n        \"coordinationScopes\": {\n            \"dataset\": \"D1\",\n            \"embeddingZoom\": \"EZ2\",\n            \"embeddingType\": \"ET2\"\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Views to a VitessceConfig in JavaScript\nDESCRIPTION: Shows how to add visualization views to a Vitessce configuration. The example adds both a spatial view and a scatterplot view with a specific embedding mapping.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/view-config-js.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VitessceConfig, ViewType as vt } from 'vitessce';\n\nconst vc = new VitessceConfig({ schemaVersion: \"1.0.15\", name: \"My config\" });\nconst dataset = vc.addDataset(\"My dataset\");\nconst v1 = vc.addView(dataset, vt.SPATIAL);\nconst v2 = vc.addView(dataset, vt.SCATTERPLOT, { mapping: \"X_umap\" });\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom File Loaders and Configuring Vitessce with Plugin File Types\nDESCRIPTION: This code snippet demonstrates the creation of custom file loaders (InMemoryCellsLoader and InMemoryMatrixLoader) that extend the JsonLoader class. It also shows how to register these loaders as plugin file types and use them in a Vitessce configuration. The example includes generating random cell data and a gene expression matrix.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/tutorial-plugin-file-type.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { range } from 'lodash-es';\nimport {\n  Vitessce,\n  registerPluginFileType,\n  JsonLoader,\n  JsonSource,\n  LoaderResult,\n} from 'vitessce';\nimport 'vitessce/dist/es/production/static/css/index.css';\nimport './index.css';\n\nconst numCells = 60;\nconst numGenes = 90;\n\nclass InMemoryCellsLoader extends JsonLoader {\n  // eslint-disable-next-line class-methods-use-this\n  async load() {\n    const data = Object.fromEntries(range(numCells).map(i => ([`cell_${i}`, {\n      mappings: {\n        random: [\n          Math.random(),\n          Math.random(),\n        ],\n      },\n      genes: {},\n      xy: [\n        Math.random(),\n        Math.random(),\n      ],\n    }])));\n\n    return Promise.resolve(new LoaderResult(data, null));\n  }\n}\n\nclass InMemoryMatrixLoader extends JsonLoader {\n  // eslint-disable-next-line class-methods-use-this\n  async load() {\n    const data = {\n      rows: range(numGenes).map(j => `gene_${j}`),\n      cols: range(numCells).map(j => `cell_${j}`),\n      matrix: range(numGenes).map(\n        i => range(numCells).map(j => i + j + 1),\n      ),\n    };\n    const { rows, cols, matrix } = data;\n    const attrs = {\n      rows: cols,\n      cols: rows,\n    };\n    const shape = [attrs.rows.length, attrs.cols.length];\n    // Normalize values by converting to one-byte integers.\n    // Normalize for each gene (column) independently.\n    const normalizedMatrix = matrix.map((col) => {\n      const [min, max] = [0, 1];\n      const normalize = d => Math.floor(((d - min) / (max - min)) * 255);\n      return col.map(normalize);\n    });\n    // Transpose the normalized matrix.\n    const tNormalizedMatrix = range(shape[0])\n      .map(i => range(shape[1]).map(j => normalizedMatrix[j][i]));\n    // Flatten the transposed matrix.\n    const normalizedFlatMatrix = tNormalizedMatrix.flat();\n    // Need to wrap the NestedArray to mock the HTTPStore-based array\n    // which returns promises.\n    const arr = { data: Uint8Array.from(normalizedFlatMatrix) };\n    return Promise.resolve(new LoaderResult([attrs, arr], null));\n  }\n}\n\nregisterPluginFileType(\n  'in-memory-cells', 'cells',\n  InMemoryCellsLoader, JsonSource,\n);\n\nregisterPluginFileType(\n  'in-memory-matrix', 'expression-matrix',\n  InMemoryMatrixLoader, JsonSource,\n);\n\n// Use the plugin file type in the configuration.\nconst configWithPluginFileType = {\n  name: 'Test plugin file types',\n  version: '1.0.9',\n  description: 'Demonstration of a basic plugin file type implementation.',\n  public: true,\n  datasets: [\n    {\n      uid: 'plugin-test-dataset',\n      name: 'Plugin test dataset',\n      files: [\n        {\n          type: 'expression-matrix',\n          fileType: 'in-memory-matrix',\n          url: '',\n        },\n        {\n          type: 'cells',\n          fileType: 'in-memory-cells',\n          url: '',\n        },\n      ],\n    },\n  ],\n  initStrategy: 'auto',\n  coordinationSpace: {\n    spatialZoom: {\n      A: -6.5,\n    },\n  },\n  layout: [\n    {\n      component: 'description',\n      props: {\n        title: 'Description',\n      },\n      x: 0,\n      y: 0,\n      w: 2,\n      h: 2,\n    },\n    {\n      component: 'heatmap',\n      x: 2,\n      y: 0,\n      w: 10,\n      h: 2,\n    },\n  ],\n};\n\nexport default function MyApp() {\n  return (\n    <Vitessce\n      config={configWithPluginFileType}\n      height={800}\n      theme=\"light\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitessce Multi-View Visualization\nDESCRIPTION: Comprehensive JSON configuration for Vitessce that sets up multiple coordinated views including spatial visualizations, heatmaps, and various controllers. The configuration includes dataset definitions with expression matrix, cells data, cell sets, and raster image specifications, along with coordination space settings and layout definitions.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/tutorial-visium.mdx#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"1.0.0\",\n  \"name\": \"10x visium human lymph node\",\n  \"initStrategy\": \"auto\",\n  \"datasets\": [\n    {\n      \"uid\": \"visium\",\n      \"files\": [\n        {\n          \"type\": \"expression-matrix\",\n          \"fileType\": \"anndata-expression-matrix.zarr\",\n          \"url\": \"http://localhost:9000/V1_Human_Lymph_Node.zarr\",\n          \"options\": {\n            \"matrix\": \"obsm/X_hvg\",\n            \"geneFilter\": \"var/highly_variable\"\n          }\n        },\n        {\n          \"type\": \"cells\",\n          \"fileType\": \"anndata-cells.zarr\",\n          \"url\": \"http://localhost:9000/V1_Human_Lymph_Node.zarr\",\n          \"options\": {\n            \"xy\": \"obsm/spatial\",\n            \"mappings\": {\n              \"UMAP\": {\n                \"key\": \"obsm/X_umap\",\n                \"dims\": [\n                  0,\n                  1\n                ]\n              },\n              \"PCA\": {\n                \"key\": \"obsm/X_pca\",\n                \"dims\": [\n                  0,\n                  1\n                ]\n              }\n            },\n            \"factors\": [\n              \"obs/clusters\"\n            ]\n          }\n        },\n        {\n          \"type\": \"cell-sets\",\n          \"fileType\": \"anndata-cell-sets.zarr\",\n          \"url\": \"http://localhost:9000/V1_Human_Lymph_Node.zarr\",\n          \"options\": [\n            {\n              \"groupName\": \"Leiden\",\n              \"setName\": \"obs/clusters\"\n            }\n          ]\n        },\n        {\n          \"type\": \"raster\",\n          \"fileType\": \"raster.json\",\n          \"options\": {\n            \"schemaVersion\": \"0.0.2\",\n            \"images\": [\n              {\n                \"name\": \"H&E Image\",\n                \"url\": \"http://localhost:9000/V1_Human_Lymph_Node.zarr/uns/spatial/V1_Human_Lymph_Node/images/hires\",\n                \"type\": \"zarr\",\n                \"metadata\": {\n                  \"isPyramid\": false,\n                  \"transform\": {\n                    \"scale\": 5.87,\n                    \"translate\": {\n                      \"x\": 0,\n                      \"y\": 0\n                    }\n                  },\n                  \"dimensions\": [\n                    {\n                      \"field\": \"channel\",\n                      \"type\": \"nominal\",\n                      \"values\": [\n                        \"R\",\n                        \"G\",\n                        \"B\"\n                      ]\n                    },\n                    {\n                      \"field\": \"y\",\n                      \"type\": \"quantitative\",\n                      \"values\": null\n                    },\n                    {\n                      \"field\": \"x\",\n                      \"type\": \"quantitative\",\n                      \"values\": null\n                    }\n                  ]\n                }\n              }\n            ]\n          }\n        }\n      ]\n    }\n  ],\n  \"coordinationSpace\": {\n    \"spatialLayers\": {\n      \"A\": [\n        {\n          \"type\": \"cells\",\n          \"radius\": 65,\n          \"stroked\": true,\n          \"visible\": true,\n          \"opacity\": 1\n        },\n        {\n          \"type\": \"raster\",\n          \"index\": 0,\n          \"colormap\": null,\n          \"transparentColor\": null,\n          \"opacity\": 1,\n          \"domainType\": \"Min/Max\",\n          \"channels\": [\n            {\n              \"selection\": {\n                \"channel\": 0\n              },\n              \"color\": [\n                255,\n                0,\n                0\n              ],\n              \"visible\": true,\n              \"slider\": [\n                0,\n                1\n              ]\n            },\n            {\n              \"selection\": {\n                \"channel\": 1\n              },\n              \"color\": [\n                0,\n                255,\n                0\n              ],\n              \"visible\": true,\n              \"slider\": [\n                0,\n                1\n              ]\n            },\n            {\n              \"selection\": {\n                \"channel\": 2\n              },\n              \"color\": [\n                0,\n                0,\n                255\n              ],\n              \"visible\": true,\n              \"slider\": [\n                0,\n                1\n              ]\n            }\n          ]\n        }\n      ]\n    },\n    \"cellColorEncoding\": {\n      \"A\": \"cellSetSelection\",\n      \"B\": \"geneSelection\"\n    },\n    \"spatialZoom\": {\n      \"A\": -4.455728265917529\n    },\n    \"spatialTargetX\": {\n      \"A\": 4975.310550270499\n    },\n    \"spatialTargetY\": {\n      \"A\": 5678.288421953778\n    },\n    \"geneSelection\": {\n      \"A\": [\n        \"CR2\"\n      ]\n    }\n  },\n  \"layout\": [\n    {\n      \"component\": \"spatial\",\n      \"coordinationScopes\": {\n        \"spatialLayers\": \"A\",\n        \"spatialZoom\": \"A\",\n        \"spatialTargetX\": \"A\",\n        \"spatialTargetY\": \"A\",\n        \"cellColorEncoding\": \"A\"\n      },\n      \"x\": 0,\n      \"y\": 0,\n      \"w\": 6,\n      \"h\": 6\n    },\n    {\n      \"component\": \"spatial\",\n      \"coordinationScopes\": {\n        \"spatialLayers\": \"A\",\n        \"spatialZoom\": \"A\",\n        \"spatialTargetX\": \"A\",\n        \"spatialTargetY\": \"A\",\n        \"cellColorEncoding\": \"B\",\n        \"geneSelection\": \"A\"\n      },\n      \"x\": 6,\n      \"y\": 0,\n      \"w\": 6,\n      \"h\": 6\n    },\n    {\n      \"component\": \"heatmap\",\n      \"coordinationScopes\": {\n        \"cellColorEncoding\": \"A\"\n      },\n      \"x\": 6,\n      \"y\": 6,\n      \"w\": 6,\n      \"h\": 6\n    },\n    {\n      \"component\": \"layerController\",\n      \"coordinationScopes\": {\n        \"spatialLayers\": \"A\"\n      },\n      \"x\": 0,\n      \"y\": 6,\n      \"w\": 2,\n      \"h\": 6\n    },\n    {\n      \"component\": \"cellSets\",\n      \"coordinationScopes\": {\n        \"cellColorEncoding\": \"A\"\n      },\n      \"x\": 2,\n      \"y\": 6,\n      \"w\": 2,\n      \"h\": 6\n    },\n    {\n      \"component\": \"genes\",\n      \"coordinationScopes\": {\n        \"cellColorEncoding\": \"B\",\n        \"geneSelection\": \"A\"\n      },\n      \"x\": 4,\n      \"y\": 6,\n      \"w\": 2,\n      \"h\": 6\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Datasets in Vitessce View Config JSON\nDESCRIPTION: This snippet demonstrates how to define datasets in the Vitessce view configuration JSON. It includes examples of setting dataset UIDs, names, and file objects with their respective properties.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/view-config-json.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"datasets\": [\n    {\n        \"uid\": \"my-dataset\",\n        \"name\": \"My amazing dataset\",\n        \"files\": [\n            {\n                \"fileType\": \"obsEmbedding.csv\",\n                \"url\": \"http://example.com/umap.csv\",\n                \"coordinationValues\": {\n                    \"obsType\": \"cell\",\n                    \"embeddingType\": \"UMAP\"\n                },\n                \"options\": {\n                    ...\n                }\n            },\n            {\n                \"fileType\": \"obsEmbedding.csv\",\n                \"url\": \"http://example.com/pca.csv\",\n                \"coordinationValues\": {\n                    \"obsType\": \"cell\",\n                    \"embeddingType\": \"PCA\"\n                },\n                \"options\": {\n                    ...\n                }\n            },\n            {\n                \"fileType\": \"image.ome-zarr\",\n                \"url\": \"http://example.com/my_image.zarr\"\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Coordination Space in Vitessce View Config JSON\nDESCRIPTION: This snippet demonstrates how to define the coordination space in the Vitessce view configuration JSON. It includes examples of setting up coordination types, scopes, and their associated values.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/view-config-json.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"coordinationSpace\": {\n    \"dataset\": {\n        \"D1\": \"my-dataset\"\n    },\n    \"embeddingZoom\": {\n        \"EZ1\": 2,\n        \"EZ2\": 20\n    },\n    \"embeddingType\": {\n        \"ET1\": \"UMAP\",\n        \"ET2\": \"PCA\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Plugin Coordination Type in Vitessce\nDESCRIPTION: This code snippet demonstrates the full process of creating a custom plugin coordination type in Vitessce. It includes defining a custom slider component, registering the new coordination type and view type, and using them in a Vitessce configuration. The example showcases coordinated and independent sliders to illustrate the functionality.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/tutorial-plugin-coordination-type.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Slider } from '@material-ui/core';\nimport {\n  Vitessce,\n  CoordinationType,\n  registerPluginViewType,\n  registerPluginCoordinationType,\n  TitleInfo,\n  useCoordination,\n} from 'vitessce';\nimport 'vitessce/dist/es/production/static/css/index.css';\nimport './index.css';\n\nfunction MyPluginSlider(props) {\n  const {\n    myCustomCoordinationType,\n    setMyCustomCoordinationType,\n  } = props;\n\n  function handleChange(event, newValue) {\n    setMyCustomCoordinationType(newValue);\n  }\n\n  return (\n    <div>\n      <Slider\n        value={myCustomCoordinationType}\n        onChange={handleChange}\n        min={0.0}\n        max={1.0}\n        step={0.005}\n        aria-label=\"Custom coordination type slider\"\n      />\n    </div>\n  );\n}\n\nfunction MyPluginSliderSubscriber(props) {\n  const {\n    coordinationScopes,\n    removeGridComponent,\n    theme,\n    title = 'My plugin slider',\n  } = props;\n\n  // Get \"props\" from the coordination space.\n  const [{\n    myCustomCoordinationType,\n  }, {\n    setMyCustomCoordinationType,\n  }] = useCoordination(\n    [\n      CoordinationType.DATASET,\n      'myCustomCoordinationType',\n    ],\n    coordinationScopes,\n  );\n\n  return (\n    <TitleInfo\n      title={title}\n      theme={theme}\n      removeGridComponent={removeGridComponent}\n      isReady\n    >\n      <MyPluginSlider\n        myCustomCoordinationType={myCustomCoordinationType}\n        setMyCustomCoordinationType={setMyCustomCoordinationType}\n      />\n    </TitleInfo>\n  );\n}\n\nregisterPluginCoordinationType(\n  'myCustomCoordinationType',\n  0.75,\n);\n\n// Register the plugin view type.\nregisterPluginViewType(\n  'myCustomSlider',\n  MyPluginSliderSubscriber,\n  [\n    CoordinationType.DATASET,\n    'myCustomCoordinationType',\n  ],\n);\n\n// Use the plugin view in the configuration.\nconst configWithPluginCoordinationType = {\n  name: 'Test plugin views and coordination types',\n  version: '1.0.9',\n  description: 'Demonstration of a plugin coordination type implementation. The left sliders should be coordinated, while the right sliders are independent.',\n  public: true,\n  datasets: [\n    {\n      uid: 'plugin-test-dataset',\n      name: 'Plugin test dataset',\n      files: [],\n    },\n  ],\n  initStrategy: 'auto',\n  coordinationSpace: {\n    myCustomCoordinationType: {\n      A: 0.5,\n      B: 0.25,\n      C: undefined,\n    },\n  },\n  layout: [\n    {\n      component: 'description',\n      props: {\n        title: 'Description',\n      },\n      x: 0,\n      y: 0,\n      w: 2,\n      h: 2,\n    },\n    {\n      component: 'myCustomSlider',\n      coordinationScopes: {\n        myCustomCoordinationType: 'A',\n      },\n      x: 2,\n      y: 0,\n      w: 2,\n      h: 1,\n    },\n    {\n      component: 'myCustomSlider',\n      coordinationScopes: {\n        myCustomCoordinationType: 'A',\n      },\n      x: 2,\n      y: 1,\n      w: 2,\n      h: 1,\n    },\n    {\n      component: 'myCustomSlider',\n      coordinationScopes: {\n        myCustomCoordinationType: 'B',\n      },\n      x: 4,\n      y: 0,\n      w: 2,\n      h: 1,\n    },\n    {\n      component: 'myCustomSlider',\n      x: 4,\n      y: 1,\n      w: 2,\n      h: 1,\n    },\n  ],\n};\n\nexport default function MyApp() {\n  return (\n    <Vitessce\n      config={configWithPluginCoordinationType}\n      height={800}\n      theme=\"light\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Plugins via Props in Vitessce React Component\nDESCRIPTION: Example of how to pass plugin view types, file types, joint file types, and coordination types as props to the Vitessce React component. This is the entry point for registering custom plugins within a Vitessce visualization.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/dev-plugins.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Vitessce\n  // ...\n  pluginViewTypes={/* array of PluginViewType */}\n  pluginFileTypes={/* array of PluginFileType */}\n  pluginJointFileTypes={/* array of PluginJointFileType */}\n  pluginCoordinationTypes={/* array of PluginCoordinationType */}\n/>\n```\n\n----------------------------------------\n\nTITLE: Filtering Highly Variable Genes in AnnData Using Scanpy in Python\nDESCRIPTION: This code snippet shows how to use Scanpy to identify highly variable genes in an AnnData object. This is useful for initialization-only filtering in Vitessce visualization.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-file-types.mdx#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport scanpy as sc\n\n# ...\nsc.pp.highly_variable_genes(adata, n_top_genes=200)\n# ...\n```\n\n----------------------------------------\n\nTITLE: Converting Vitessce Config to JSON\nDESCRIPTION: Example demonstrating how to create a basic Vitessce config with a spatial view and convert it to JSON format.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/view-config-js.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VitessceConfig, ViewType as vt } from 'vitessce';\n\nconst vc = new VitessceConfig({ schemaVersion: \"1.0.15\", name: \"My config\" });\nconst dataset = vc.addDataset(\"My dataset\");\nvc.layout(vc.addView(dataset, vt.SPATIAL));\nconst vcJson = vc.toJSON();\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Plugin Registration in Vitessce v3 (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to implement global plugin registration functionality in userland for Vitessce v3. It includes functions for registering different plugin types and a wrapper component for Vitessce that applies the registered plugins.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/upgrade-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport {\n  Vitessce,\n  PluginFileType, PluginViewType, PluginCoordinationType, PluginJointFileType,\n} from 'vitessce';\n\nconst PLUGINS = {\n  viewTypes: [], coordinationTypes: [], fileTypes: [], jointFileTypes: [],\n};\n\n/**\n * @param {PluginViewType} pluginObj\n */\nexport function registerPluginViewType(pluginObj) {\n  PLUGINS.viewTypes.push(pluginObj);\n}\n\n/**\n * @param {PluginCoordinationType} pluginObj\n */\nexport function registerPluginCoordinationType(pluginObj) {\n  PLUGINS.coordinationTypes.push(pluginObj);\n}\n\n/**\n * @param {PluginFileType} pluginObj\n */\nexport function registerPluginFileType(pluginObj) {\n  PLUGINS.fileTypes.push(pluginObj);\n}\n\n/**\n * @param {PluginJointFileType} pluginObj\n */\nexport function registerPluginJointFileType(pluginObj) {\n  PLUGINS.jointFileTypes.push(pluginObj);\n}\n\n// React component which wraps <Vitessce/>\n// to provide the globally-registered plugins via props.\nexport function VitessceWithGlobalPlugins(props) {\n  return (\n    <Vitessce\n      {...props}\n      pluginViewTypes={PLUGINS.viewTypes}\n      pluginFileTypes={PLUGINS.fileTypes}\n      pluginJointFileTypes={PLUGINS.jointFileTypes}\n      pluginCoordinationTypes={PLUGINS.coordinationTypes}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: React App Component Implementation\nDESCRIPTION: Main React component implementing Vitessce visualization\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/tutorial-gh-pages.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Vitessce } from 'vitessce';\nimport { myViewConfig } from './my-view-config';\n\nexport default function App() {\n  return (\n    <Vitessce\n      config={myViewConfig}\n      theme=\"light\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Multi-Level Coordination with Nested Objects in JavaScript\nDESCRIPTION: Demonstrates advanced coordination setup using nested objects and coordination levels. This example configures image layer coordination with channel-specific settings for an OME-TIFF image.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/view-config-js.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VitessceConfig, CoordinationLevel as CL, CoordinationType as ct } from 'vitessce';\n\nconst vc = new VitessceConfig({ schemaVersion: \"1.0.16\", name: \"My config\" });\nconst dataset = vc.addDataset(\"My dataset\").addFile({\n    fileType: 'image.ome-tiff',\n    url: 'https://assets.hubmapconsortium.org/2130d5f91ce61d7157a42c0497b06de8/ometiff-pyramids/processedMicroscopy/VAN0006-LK-2-85-AF_preIMS_images/VAN0006-LK-2-85-AF_preIMS_registered.ome.tif?token=',\n    coordinationValues: { [ct.FILE_UID]: 'AF' },\n});\n\nconst imageScopes = vc.addCoordinationByObject({\n    [ct.IMAGE_LAYER]: CL([\n        {\n            [ct.FILE_UID]: 'AF',\n            [ct.SPATIAL_LAYER_OPACITY]: 1,\n            [ct.SPATIAL_LAYER_VISIBLE]: true,\n            [ct.PHOTOMETRIC_INTERPRETATION]: 'BlackIsZero',\n            [ct.IMAGE_CHANNEL]: CL([\n                {\n                    [ct.SPATIAL_TARGET_C]: 0,\n                    [ct.SPATIAL_CHANNEL_COLOR]: [255, 0, 0],\n                    [ct.SPATIAL_CHANNEL_VISIBLE]: true,\n                    [ct.SPATIAL_CHANNEL_OPACITY]: 1.0,\n                    [ct.SPATIAL_CHANNEL_WINDOW]: null,\n                },\n            ]),\n        },\n    ]),\n});\n\nconst metaCoordinationScope = vc.addMetaCoordination();\nmetaCoordinationScope.useCoordinationByObject(imageScopes);\n\nconst v1 = vc.addView(dataset, vt.SPATIAL);\nconst v2 = vc.addView(dataset, vt.SPATIAL);\nv1.useMetaCoordination(metaCoordinationScope);\nv2.useMetaCoordination(metaCoordinationScope);\n```\n\n----------------------------------------\n\nTITLE: Optimizing AnnData Object for Vitessce Compatibility in Python\nDESCRIPTION: This code snippet shows how to use the optimize_adata function from the vitessce package to automatically cast AnnData object datatypes for compatibility with Vitessce and Zarr.js.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom vitessce.data_utils import optimize_adata\n# ...\nadata = optimize_adata(adata)\n# ...\n```\n\n----------------------------------------\n\nTITLE: Loading Vitessce Config from JSON\nDESCRIPTION: Example showing how to construct a Vitessce config instance from an existing JSON configuration file.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/view-config-js.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VitessceConfig } from 'vitessce';\nimport myConfig from './my-config.json';\n\nconst vc = VitessceConfig.fromJSON(myConfig);\n```\n\n----------------------------------------\n\nTITLE: Creating a Subset Matrix for Always Filtering in AnnData Using Scanpy in Python\nDESCRIPTION: This snippet demonstrates how to create a subset matrix of highly variable genes and store it in the obsm attribute of an AnnData object. This is useful for always filtering in Vitessce visualization.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-file-types.mdx#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport scanpy as sc\n\n# ...\nsc.pp.highly_variable_genes(adata, n_top_genes=200)\nadata.obsm['X_subset'] = adata[:, adata.var['highly_variable']].X\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring View Coordination in Vitessce JavaScript\nDESCRIPTION: Example showing how to create a Vitessce config with two spatial views and link them using coordination objects. Demonstrates setting up image layers with specific properties.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/view-config-js.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VitessceConfig, CoordinationLevel as CL, CoordinationType as ct } from 'vitessce';\n\nconst vc = new VitessceConfig({ schemaVersion: \"1.0.16\", name: \"My config\" });\nconst dataset = vc.addDataset(\"My dataset\").addFile({\n    fileType: 'image.ome-tiff',\n    url: 'https://assets.hubmapconsortium.org/2130d5f91ce61d7157a42c0497b06de8/ometiff-pyramids/processedMicroscopy/VAN0006-LK-2-85-AF_preIMS_images/VAN0006-LK-2-85-AF_preIMS_registered.ome.tif?token=',\n    coordinationValues: { [ct.FILE_UID]: 'AF' },\n});\n\nconst v1 = vc.addView(dataset, vt.SPATIAL);\nconst v2 = vc.addView(dataset, vt.SPATIAL);\n\nvc.linkViewsByObject([v1, v2], {\n    [ct.IMAGE_LAYER]: CL([\n        {\n            [ct.FILE_UID]: 'AF',\n            [ct.SPATIAL_LAYER_OPACITY]: 1,\n            [ct.SPATIAL_LAYER_VISIBLE]: true,\n            [ct.PHOTOMETRIC_INTERPRETATION]: 'RGB',\n        },\n    ]),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Plugin File Type in Vitessce\nDESCRIPTION: Example of creating a custom file type plugin by instantiating the PluginFileType class. This shows how to register a custom data format handler, specifying the file type, data type, loader and source classes, and options schema.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/dev-plugins.mdx#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport {\n  PluginFileType,\n  z, // vitessce re-exports { z } from zod\n} from 'vitessce';\n\n// ...\n// Omitted: definition of the classes\n// MyCustomExpressionMatrixDataLoader and MyCustomExpressionMatrixDataSource.\n// ...\n\nconst pluginFileTypes = [\n  new PluginFileType(\n    'myCustomExpressionMatrixFormat.xyz',\n    'expression-matrix',\n    MyCustomExpressionMatrixDataLoader,\n    MyCustomExpressionMatrixDataSource,\n    z.null(),\n  ),\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Loader Class in JavaScript for Vitessce\nDESCRIPTION: This snippet demonstrates how to create a custom data loader class that extends AbstractTwoStepLoader. It shows the basic structure including constructor setup and the load method implementation with error handling and options validation.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/dev-docs/plugin-file-types.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyLoader extends AbstractTwoStepLoader {\n  constructor(dataSource, params) {\n    super(dataSource, params);\n    this.optionsSchema = obsEmbeddingAnndataSchema;\n  }\n\n  async load() {\n    // super.load() will perform validation of this.options against this.optionsSchema\n    const superResult = await super.load().catch(reason => Promise.resolve(reason));\n    if (superResult instanceof AbstractLoaderError) {\n      return Promise.reject(superResult);\n    }\n    // ... omitted ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Plugin Coordination Type in Vitessce\nDESCRIPTION: Example of creating a custom coordination type by instantiating the PluginCoordinationType class. This demonstrates how to register a new state variable with a default value and validation schema using Zod.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/dev-plugins.mdx#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport {\n  PluginCoordinationType,\n  z, // vitessce re-exports { z } from zod\n} from 'vitessce';\n\nconst pluginCoordinationTypes = [\n  new PluginCoordinationType(\n    'myCustomCoordinationType',\n    0.75,\n    z.number(),\n  ),\n];\n```\n\n----------------------------------------\n\nTITLE: Updating VitessceConfig Constructor Call for v2 (JavaScript)\nDESCRIPTION: This code snippet shows how to update the VitessceConfig constructor call when upgrading from Vitessce v1 to v2. The new version uses named arguments via an object.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/upgrade-guide.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n- const vc = new VitessceConfig(\"My config\");\n+ const vc = new VitessceConfig({ schemaVersion: \"1.0.7\", name: \"My config\" });\n```\n\n----------------------------------------\n\nTITLE: Configuring obsEmbedding.csv for UMAP Visualization\nDESCRIPTION: Configuration for embedding coordinates CSV file containing observation IDs and 2D coordinates. Requires columns for observation index and two embedding coordinates.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-file-types.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"obsIndex\": \"cell_id\",\n  \"obsEmbedding\": [\"UMAP_1\", \"UMAP_2\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Data Preprocessing with Scanpy\nDESCRIPTION: Comprehensive preprocessing steps including QC metrics, filtering, normalization, and clustering\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/tutorial-visium.mdx#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Calculate QC metrics\nadata.var_names_make_unique()\nadata.var[\"mt\"] = adata.var_names.str.startswith(\"MT-\")\nsc.pp.calculate_qc_metrics(adata, qc_vars=[\"mt\"], inplace=True)\n\n# Perform basic filtering\nsc.pp.filter_cells(adata, min_counts=5000)\nsc.pp.filter_cells(adata, max_counts=35000)\nadata = adata[adata.obs[\"pct_counts_mt\"] < 20]\nsc.pp.filter_genes(adata, min_cells=10)\n\n# Perform normalization\nsc.pp.normalize_total(adata, inplace=True)\nsc.pp.log1p(adata)\n# Determine the top 300 highly variable genes.\nsc.pp.highly_variable_genes(adata, flavor=\"seurat\", n_top_genes=300)\n\n# Dimensionality reduction and clustering\nsc.pp.pca(adata)\nsc.pp.neighbors(adata)\nsc.tl.umap(adata)\nsc.tl.leiden(adata, key_added=\"clusters\")\n```\n\n----------------------------------------\n\nTITLE: Normalizing and Storing AnnData Matrix as uint8 in Python\nDESCRIPTION: This snippet demonstrates how to normalize an AnnData matrix to uint8 and store it in the layers attribute for use with Vitessce. It uses the to_uint8 function from vitessce.data_utils to perform the normalization.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-file-types.mdx#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom vitessce.data_utils import to_uint8\n\n# ...\nadata.layers['X_uint8'] = to_uint8(adata.X, norm_along=\"global\")\n# ...\n```\n\n----------------------------------------\n\nTITLE: AWS S3 CORS Configuration\nDESCRIPTION: Cross-origin resource sharing (CORS) configuration for AWS S3 bucket to allow cross-domain file access.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-hosting.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"AllowedHeaders\": [\"*\"],\n    \"AllowedMethods\": [\"GET\"],\n    \"AllowedOrigins\": [\"*\"],\n    \"ExposeHeaders\": [\"Content-Range\"],\n    \"MaxAgeSeconds\": 3000\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing Dataset with Cell Data in JavaScript\nDESCRIPTION: JavaScript implementation for adding a dataset with cell data configuration, including dimension mappings for PCA and UMAP.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/tutorial-visium.mdx#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst dataset = vc\n  .addDataset(\"my-visium-dataset\")\n  .addFile({\n    url: \"http://localhost:9000/V1_Human_Lymph_Node.zarr\",\n    dataType: dt.CELLS,\n    fileType: ft.ANNDATA_CELLS_ZARR,\n    options: {\n      \"mappings\": {\n        \"UMAP\": {\n          \"key\": \"obsm/X_umap\",\n          \"dims\": [0, 1]\n        },\n        \"PCA\": {\n          \"key\": \"obsm/X_pca\",\n          \"dims\": [0, 1]\n        }\n      }\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Optimizing Large Expression Matrix Storage in Zarr\nDESCRIPTION: Demonstrates how to handle large expression matrices by using chunking strategies and converting sparse matrices to dense format. Includes adding highly variable genes filter to improve visualization performance.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-file-types.mdx#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport scanpy as sc\nfrom anndata import read_h5ad\nimport zarr\n\nadata = read_h5ad('path/to/my_dataset.h5ad')\n\n# Adds the `highly_variable` key to `var`\nsc.pp.highly_variable_genes(adata, n_top_genes=200)\n# If the matrix is sparse, it's best for performance to\n# use non-sparse formats + chunking to keep the UI responsive.\n# In the future, we should be able to use CSC sparse data natively\n# and get equal performance with chunking:\n# https://github.com/theislab/anndata/issues/524 \n# but for now, it is still not as good (although not unusable).\nif isinstance(adata.X, sparse.spmatrix):\n    adata.X = adata.X.todense() # Or adata.X.tocsc() if you need to.\nadata.write_zarr(zarr_path, [adata.shape[0], VAR_CHUNK_SIZE])  # VAR_CHUNK_SIZE should be something small like 10\n```\n\n----------------------------------------\n\nTITLE: Google Cloud Storage CORS Configuration\nDESCRIPTION: CORS configuration for Google Cloud Storage bucket to enable cross-origin access with specific headers and methods.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-hosting.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"origin\": [\"*\"],\n    \"responseHeader\": [\n      \"Content-Type\",\n      \"Accept-Ranges\",\n      \"Content-Range\",\n      \"Content-Encoding\",\n      \"Content-Length\",\n      \"Access-Control-Allow-Origin\",\n      \"Access-Control-Allow-Methods\",\n      \"Range\"\n    ],\n    \"method\": [\"OPTIONS\", \"GET\", \"HEAD\"],\n    \"maxAgeSeconds\": 3600\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Plugin Joint File Type in Vitessce\nDESCRIPTION: Example of creating a custom joint file type plugin by instantiating the PluginJointFileType class. This demonstrates how to create a file type that expands into multiple atomic file types, enabling complex data loading from a single source.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/dev-plugins.mdx#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport {\n  PluginJointFileType,\n  z, // vitessce re-exports { z } from zod\n} from 'vitessce';\n\nfunction mySegmentationsAndLocationsExpansionFunction(fileDef) {\n  const { url, coordinationValues } = fileDef;\n  return [\n    {\n      // Assuming 'obsSegmentations.segmentations-and-locations.csv'\n      // was already registered as an \"atomic\" plugin file type.\n      fileType: 'obsSegmentations.segmentations-and-locations.csv',\n      url,\n      coordinationValues,\n    },\n    {\n      // Assuming 'obsLocations.segmentations-and-locations.csv'\n      // was already registered as an \"atomic\" plugin file type.\n      fileType: 'obsLocations.segmentations-and-locations.csv',\n      url,\n      coordinationValues,\n    }\n  ];\n}\n\nconst pluginJointFileTypes = [\n  new PluginJointFileType(\n    'segmentations-and-locations.csv',\n    mySegmentationsAndLocationsExpansionFunction,\n    z.null(),\n  ),\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Data-Dependent Coordination Values in JavaScript\nDESCRIPTION: Example of how a data loader can return coordination values, including both single-level and multi-level coordination using CoordinationLevel (CL) objects.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/coordination-types.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    someCoordinationType: 'someInitialValue',\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    primaryCoordinationType: CL([\n        {\n            secondaryCoordinationType: 'someInitialValue',\n        },\n    ]),\n}\n```\n\n----------------------------------------\n\nTITLE: Converting H5AD to Zarr using AnnData\nDESCRIPTION: Basic conversion of an H5AD file to Zarr format using AnnData's read_h5ad and write_zarr functions. This allows the data to be used with Vitessce's AnnData as Zarr file types.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-file-types.mdx#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom anndata import read_h5ad\nimport zarr\n\nadata = read_h5ad('path/to/my_dataset.h5ad')\nadata.write_zarr('my_store.zarr')\n```\n\n----------------------------------------\n\nTITLE: Expanded Multi-Level Coordination in JavaScript\nDESCRIPTION: Demonstrates how multi-level coordination values are automatically expanded, including the generation of metaCoordinationScopes and metaCoordinationScopesBy.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/coordination-types.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    primaryCoordinationType: {\n        'init_{datasetUid}_{dataType}_0': '',\n    },\n    secondaryCoordinationType: {\n        'init_{datasetUid}_{dataType}_0': 'someInitialValue',\n    },\n    metaCoordinationScopes: {\n        'init_{datasetUid}_{dataType}_0': {\n            primaryCoordinationType: ['init_{datasetUid}_{dataType}_0'],\n        },\n    },\n    metaCoordinationScopesBy: {\n        'init_{datasetUid}_{dataType}_0': {\n            primaryCoordinationType: {\n                secondaryCoordinationType: {\n                    'init_{datasetUid}_{dataType}_0': 'init_{datasetUid}_{dataType}_0',\n                },\n            },\n        },\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Coordination Scopes with Manual Linking in JavaScript\nDESCRIPTION: Demonstrates a more explicit approach to creating coordination scopes and manually linking views to them. This provides finer control over coordination between views.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/view-config-js.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VitessceConfig, ViewType as vt, CoordinationType as ct } from 'vitessce';\n\nconst vc = new VitessceConfig({ schemaVersion: \"1.0.15\", name: \"My config\" });\nconst dataset = vc.addDataset(\"My dataset\");\nconst v1 = vc.addView(dataset, vt.SPATIAL);\nconst v2 = vc.addView(dataset, vt.SPATIAL);\nconst [zoomScope, xScope, yScope] = vc.addCoordination(\n    ct.SPATIAL_ZOOM,\n    ct.SPATIAL_TARGET_X,\n    ct.SPATIAL_TARGET_Y,\n);\nv1.useCoordination(zoomScope, xScope, yScope);\nv2.useCoordination(zoomScope, xScope, yScope);\nzoomScope.setValue(2);\nxScope.setValue(0);\nyScope.setValue(0);\n```\n\n----------------------------------------\n\nTITLE: Writing OME-NGFF Image Data for Vitessce Compatibility in Python\nDESCRIPTION: This example demonstrates how to write an image to an OME-NGFF Zarr store using ome-zarr-py, ensuring compatibility with Vitessce. It includes setting proper chunking, axis order, and metadata.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-troubleshooting.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport zarr\nimport numpy as np\nfrom tifffile import imread\nfrom ome_zarr import writer\n\nmy_image = imread(\"my_image.tif\")\nmy_image = np.transpose(my_image, axes=(1, 0, 3, 2)) # zcxy to czyx\n\nz_root = zarr.open_group(\"my_image.zarr\", mode = \"w\")\n\ndefault_window = {\n    \"start\": 0,\n    \"min\": 0,\n    \"max\": 65_535, # may need to change depending on the numpy dtype of the my_image array\n    \"end\": 65_535 # may need to change depending on the numpy dtype of the my_image array\n}\n\nwriter.write_image(\n    image = my_image,\n    group = z_root,\n    axes = \"czyx\",\n    omero = {\n        \"name\": \"My image\",\n        \"version\": \"0.3\",\n        \"rdefs\": {},\n        \"channels\": [\n            {\n                \"label\": f\"Channel {i}\",\n                \"color\": \"FFFFFF\", # may want to use a different color for each channel\n                \"window\": default_window\n            } for i in range(my_image.shape[0])\n        ]\n    },\n    chunks = (1, 1, 256, 256),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Comparative Analysis Metadata Schema in JavaScript\nDESCRIPTION: Example JSON structure demonstrating the metadata schema for comparative analyses in AnnData objects. Shows how to define cell types, sample groups, and store analysis results with their parameters and coordination values.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-comparison.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"schema_version\": \"0.0.2\",\n  \"cell_type_cols\": [\n    \"cell_type\",\n    \"subclass_l1\",\n    \"subclass_l2\"\n  ],\n  \"sample_id_col\": \"SampleID\",\n  \"sample_group_pairs\": [\n    [\n      \"EnrollmentCategory\",\n      [\n        \"Reference\",\n        \"AKI\"\n      ]\n    ],\n    [ \"EnrollmentCategory\", [\"AKI\", \"H-CKD\"] ],\n    [ \"EnrollmentCategory\", [\"DKD\", \"Reference\"] ],\n    [ \"AdjudicatedCategory\", [\"Diabetic Kidney Disease\", \"Reference\"] ],\n    [ \"AdjudicatedCategory\", [\"Acute Tubular Injury\", \"Reference\"] ],\n    [ \"AdjudicatedCategory\", [\"Acute Interstitial Nephritis\", \"Reference\"] ],\n    [ \"EnrollmentCategory\", [\"DKD\", \"H-CKD\"] ],\n    [ \"AdjudicatedCategory\", [\"Diabetic Kidney Disease\", \"Hypertensive Kidney Disease\"] ],\n    [ \"AdjudicatedCategory\", [\"Acute Interstitial Nephritis\", \"Acute Tubular Injury\"] ],\n    [ \"diseasetype\", [\"Reference\", \"AKI\"] ],\n    [ \"diseasetype\", [\"CKD\", \"AKI\"] ],\n    [ \"diseasetype\", [\"Reference\", \"CKD\"] ]\n  ],\n  \"donor_id_col\": \"donor_id\",\n  \"comparisons\": {\n    \"__all__\": {\n      \"comparison\": \"__all__\",\n      \"results\": [\n        {\n          \"path\": \"uns/__all__.samples\",\n          \"coordination_values\": {\n            \"obsType\": \"sample\"\n          },\n          \"analysis_type\": \"samples\",\n          \"analysis_params\": null\n        }\n      ]\n    },\n    \"compare_cell_type.val_kidney_collecting_duct_principal_cell.__rest__\": {\n      \"comparison\": [[\"compare\", \"cell_type\"], [\"val\", \"kidney collecting duct principal cell\"], \"__rest__\"],\n      \"results\": [\n        {\n          \"path\": \"uns/compare_cell_type.val_kidney_collecting_duct_principal_cell.__rest__.rank_genes_groups\",\n          \"coordination_values\": {\n            \"obsType\": \"cell\",\n            \"featureType\": \"gene\",\n            \"obsSetSelection\": [\n              [\"cell_type\", \"kidney collecting duct principal cell\"]\n            ]\n          },\n          \"analysis_type\": \"rank_genes_groups\",\n          \"analysis_params\": {\n            \"rank_genes_groups\": {\n              \"groupby\": \"cell_type\",\n              \"reference\": \"rest\",\n              \"method\": \"wilcoxon\",\n              \"use_raw\": false,\n              \"layer\": \"logcounts\",\n              \"corr_method\": \"benjamini-hochberg\"\n            },\n            \"rank_genes_groups_df\": {\n              \"group\": \"kidney collecting duct principal cell\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating VitessceConfigDataset addFile Call for v2 (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to update the addFile method call on VitessceConfigDataset when upgrading to Vitessce v2. The new version uses named arguments via an object and removes the data type argument.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/upgrade-guide.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n- dataset.addFile('http://example.com/my_cells.json', dt.CELLS, ft.CELLS_JSON);\n+ dataset.addFile({ url: 'http://example.com/my_cells.json', fileType: ft.CELLS_JSON });\n```\n\n----------------------------------------\n\nTITLE: Horizontal View Layout in Vitessce\nDESCRIPTION: Example demonstrating horizontal concatenation of views in Vitessce grid layout using the hconcat helper function.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/view-config-js.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VitessceConfig, ViewType as vt, hconcat } from 'vitessce';\n\nconst vc = new VitessceConfig({ schemaVersion: \"1.0.15\", name: \"My config\" });\nconst dataset = vc.addDataset(\"My dataset\");\nconst v1 = vc.addView(dataset, vt.SPATIAL);\nconst v2 = vc.addView(dataset, vt.SPATIAL);\nvc.layout(hconcat(v1, v2));\n```\n\n----------------------------------------\n\nTITLE: Configuring Differential Expression Analysis for Kidney Interstitial Cells in JSON\nDESCRIPTION: This snippet configures a differential expression analysis for kidney interstitial cells using the ScanPy rank_genes_groups function. It specifies coordination values, analysis type, and parameters for the comparison.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-comparison.md#2025-04-23_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"coordination_values\": {\n    \"obsType\": \"cell\",\n    \"featureType\": \"gene\",\n    \"obsSetSelection\": [\n      [\"cell_type\", \"kidney interstitial cell\"]\n    ]\n  },\n  \"analysis_type\": \"rank_genes_groups\",\n  \"analysis_params\": {\n    \"rank_genes_groups\": {\n      \"groupby\": \"cell_type\",\n      \"reference\": \"rest\",\n      \"method\": \"wilcoxon\",\n      \"use_raw\": false,\n      \"layer\": \"logcounts\",\n      \"corr_method\": \"benjamini-hochberg\"\n    },\n    \"rank_genes_groups_df\": {\n      \"group\": \"kidney interstitial cell\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Files to Vitessce Dataset\nDESCRIPTION: Example showing how to add a file to a Vitessce dataset with URL, file type, and coordination values.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/view-config-js.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VitessceConfig, DataType as dt, FileType as ft } from 'vitessce';\n\nconst vc = new VitessceConfig({ schemaVersion: \"1.0.15\", name: \"My config\" });\nconst dataset = vc.addDataset(\"My dataset\")\n    .addFile({\n        url: \"http://example.com/my-cell-coordinates.csv\",\n        fileType: ft.OBS_LOCATIONS_CSV,\n        coordinationValues: { obsType: 'cell' }\n    });\n```\n\n----------------------------------------\n\nTITLE: Optimizing AnnData-Zarr Chunking for Vitessce in Python\nDESCRIPTION: This snippet demonstrates how to set an optimal chunking strategy when writing an AnnData object to a Zarr store. It uses a small chunk size for the VAR dimension to improve efficiency when loading gene-specific data in Vitessce.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# ...\nVAR_CHUNK_SIZE = 10 # VAR_CHUNK_SIZE should be small\nadata.write_zarr(out_path, chunks=(adata.shape[0], VAR_CHUNK_SIZE))\n```\n\n----------------------------------------\n\nTITLE: Configuring Gene Set Enrichment Analysis with PertPy in JSON\nDESCRIPTION: This snippet sets up a gene set enrichment analysis for kidney interstitial cells using the PertPy hypergeometric function. It defines coordination values, analysis type, and parameters for the enrichment analysis.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-comparison.md#2025-04-23_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"coordination_values\": {\n    \"obsType\": \"cell\",\n    \"featureType\": \"pathway\",\n    \"obsSetSelection\": [\n      [\"cell_type\", \"kidney interstitial cell\"]\n    ]\n  },\n  \"analysis_type\": \"pertpy_hypergeometric\",\n  \"analysis_params\": {\n    \"rank_genes_groups\": {\n      \"groupby\": \"cell_type\",\n      \"reference\": \"rest\",\n      \"method\": \"wilcoxon\",\n      \"use_raw\": false,\n      \"layer\": \"logcounts\",\n      \"corr_method\": \"benjamini-hochberg\"\n    },\n    \"pertpy_hypergeometric\": {\n      \"group\": \"kidney interstitial cell\",\n      \"pvals_adj_thresh\": 0.05,\n      \"direction\": \"both\",\n      \"corr_method\": \"benjamini-hochberg\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Data Finalization and Export\nDESCRIPTION: Final processing steps including data subsetting, coordinate conversion, and saving to Zarr format\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/tutorial-visium.mdx#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nadata = adata[:, var_index_ordering].copy()\nadata.obsm['X_hvg'] = adata[:, adata.var['highly_variable']].X.copy()\nadata.obsm['spatial'] = adata.obsm['spatial'].astype('uint16')\nadata.write_zarr(\"V1_Human_Lymph_Node.zarr\")\n```\n\n----------------------------------------\n\nTITLE: Implementing React Component Structure in Vitessce\nDESCRIPTION: Example of the React component hierarchy for a FeatureList component in Vitessce, showing the relationship between subscriber, TitleInfo, and child components.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/dev-docs/plugin-view-types.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<FeatureListSubscriber>\n  <TitleInfo>\n    <Genes />\n  </TitleInfo>\n</FeatureListSubscriber>\n```\n\n----------------------------------------\n\nTITLE: Setting up Vitessce Development Environment\nDESCRIPTION: Commands for setting up the Vitessce development environment after cloning the repository. These steps install dependencies, build the project, and start the demo server for local development.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\npnpm run build\npnpm run start-demo\n```\n\n----------------------------------------\n\nTITLE: Configuring Gene Set Enrichment Analysis with ScanPy in JSON\nDESCRIPTION: This snippet configures a gene set enrichment analysis for kidney interstitial cells using the ScanPy enrich function. It specifies coordination values, analysis type, and parameters for the enrichment analysis.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-comparison.md#2025-04-23_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"coordination_values\": {\n    \"obsType\": \"cell\",\n    \"featureType\": \"pathway\",\n    \"obsSetSelection\": [\n      [\"cell_type\", \"kidney interstitial cell\"]\n    ]\n  },\n  \"analysis_type\": \"enrich\",\n  \"analysis_params\": {\n    \"rank_genes_groups\": {\n      \"groupby\": \"cell_type\",\n      \"reference\": \"rest\",\n      \"method\": \"wilcoxon\",\n      \"use_raw\": false,\n      \"layer\": \"logcounts\",\n      \"corr_method\": \"benjamini-hochberg\"\n    },\n    \"enrich\": {\n      \"group\": \"kidney interstitial cell\",\n      \"log2fc_min\": 2,\n      \"pval_cutoff\": 0.01\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Incremental Build Configuration\nDESCRIPTION: TypeScript configuration for enabling incremental builds to improve development performance in the monorepo setup.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/blog/2022-10-13-internal-refactoring.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"incremental\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Wrapper for Lazy Loading Vitessce Component\nDESCRIPTION: A wrapper module that re-exports the Vitessce component as a default export, enabling lazy loading support. This is needed because React.lazy only works with default exports rather than named exports.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/js-react-vitessce.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nexport { Vitessce as default } from 'vitessce';\n```\n\n----------------------------------------\n\nTITLE: Configuring ScanPy Enrichment Analysis in JSON\nDESCRIPTION: Configuration for ScanPy enrichment analysis with specific cell type and disease type filtering. Includes parameters for differential expression analysis and gene set enrichment with log2 fold change and p-value cutoffs.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-comparison.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": \"uns/filter_subclass_l1.val_t.compare_diseasetype.val_ckd.val_aki.enrich\",\n  \"coordination_values\": {\n    \"obsType\": \"cell\",\n    \"featureType\": \"pathway\",\n    \"obsSetFilter\": [[\"subclass_l1\", \"T\"]],\n    \"sampleSetSelection\": [[\"diseasetype\", \"AKI\"]],\n    \"sampleSetFilter\": [[\"diseasetype\", \"CKD\"], [\"diseasetype\", \"AKI\"]]\n  },\n  \"analysis_type\": \"enrich\",\n  \"analysis_params\": {\n    \"rank_genes_groups\": {\n      \"groupby\": \"cell_type_sample_group\",\n      \"reference\": \"T_CKD\",\n      \"method\": \"wilcoxon\",\n      \"use_raw\": false,\n      \"layer\": \"logcounts\",\n      \"corr_method\": \"benjamini-hochberg\"\n    },\n    \"enrich\": {\n      \"group\": \"T_AKI\",\n      \"log2fc_min\": 2,\n      \"pval_cutoff\": 0.01\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Gene Ordering and Matrix Processing\nDESCRIPTION: Code to compute optimal gene ordering and process the gene matrix for visualization\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/tutorial-visium.mdx#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Get the highly variable gene matrix as a plain NumPy array\nX_hvg_arr = adata[:, adata.var['highly_variable']].X.toarray()\nX_hvg_index = adata[:, adata.var['highly_variable']].var.copy().index\n\n# Perform average linkage hierarchical clustering on along the genes axis of the array\nZ = scipy.cluster.hierarchy.linkage(X_hvg_arr.T, method=\"average\", optimal_ordering=True)\n\n# Get the hierarchy-based ordering of genes.\nnum_genes = adata.var.shape[0]\nhighly_var_index_ordering = scipy.cluster.hierarchy.leaves_list(Z)\nhighly_var_genes = X_hvg_index.values[highly_var_index_ordering].tolist()\n\nall_genes = adata.var.index.values.tolist()\nnot_var_genes = adata.var.loc[~adata.var['highly_variable']].index.values.tolist()\n\ndef get_orig_index(gene_id):\n    return all_genes.index(gene_id)\nvar_index_ordering = list(map(get_orig_index, highly_var_genes)) + list(map(get_orig_index, not_var_genes))\n```\n\n----------------------------------------\n\nTITLE: Cell Segmentation JSON Structure Example\nDESCRIPTION: Example showing the JSON structure for storing cell segmentation polygons where each cell is represented by an array of vertex coordinates.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-file-types.mdx#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cell_1\": [\n    [6668, 26182],\n    [6668, 26296],\n    [6873, 26501],\n    [6932, 26501],\n    [6955, 26478],\n    [6955, 26260],\n    [6838, 26143],\n    [6707, 26143]\n  ],\n  \"cell_2\": [\n    [5047, 44428],\n    [5047, 44553],\n    [5065, 44571],\n    [5125, 44571],\n    [5284, 44412],\n    [5284, 44368],\n    [5239, 44323],\n    [5152, 44323]\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Loom to Zarr via AnnData\nDESCRIPTION: Demonstrates conversion of Loom files to Zarr format using AnnData as an intermediate step. Includes mapping of embedding coordinates from the Loom file to AnnData obsm.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-file-types.mdx#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom anndata import read_loom\n\nadata = read_loom(\n  'path/to/my_dataset.loom',\n  obsm_names={ \"tSNE\": [\"_tSNE_1\", \"_tSNE_2\"], \"spatial\": [\"X\", \"Y\"] }\n)\nadata.write_zarr('my_store.zarr')\n```\n\n----------------------------------------\n\nTITLE: Configuring obsFeatureMatrix.csv for Gene Expression Data\nDESCRIPTION: Configuration for observation-by-feature matrix CSV file where rows represent observations (e.g., cells) and columns represent features (e.g., genes). The file requires a unique ID column and feature value columns.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-file-types.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"obsType\": \"cell\",\n  \"featureType\": \"gene\",\n  \"featureValueType\": \"expression\"\n}\n```\n\n----------------------------------------\n\nTITLE: Image Raster JSON Configuration with Zarr\nDESCRIPTION: Configuration example for the image.raster.json file type pointing to a Bioformats-Zarr image with channel and dimension metadata.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-file-types.mdx#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemaVersion\": \"0.0.2\",\n  \"images\": [\n    {\n      \"name\": \"My Bioformats-Zarr Image\",\n      \"url\": \"http://example.com/my_image.zarr\",\n      \"type\": \"zarr\",\n      \"metadata\": {\n        \"dimensions\": [\n          {\n            \"field\": \"channel\",\n            \"type\": \"nominal\",\n            \"values\": [\n              \"DAPI - Hoechst (nuclei)\",\n              \"FITC - Laminin (basement membrane)\",\n              \"Cy3 - Synaptopodin (glomerular)\",\n              \"Cy5 - THP (thick limb)\"\n            ]\n          },\n          {\n            \"field\": \"y\",\n            \"type\": \"quantitative\",\n            \"values\": null\n          },\n          {\n            \"field\": \"x\",\n            \"type\": \"quantitative\",\n            \"values\": null\n          }\n        ],\n        \"isPyramid\": true,\n        \"transform\": {\n          \"translate\": {\n            \"y\": 0,\n            \"x\": 0\n          },\n          \"scale\": 1\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying AnndataZarrAutoConfig Class in JavaScript\nDESCRIPTION: This code modifies the AnndataZarrAutoConfig class to include a parser function for generating metadata summary without reading the .zmetadata file.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n- Modified the `AnndataZarrAutoConfig` class:\n  - added a parser function that generates metadata summary without reading `.zmetadata` file.\n  - the class calls the parser function if no `.zmetadata` file is present in the given URL.\n```\n\n----------------------------------------\n\nTITLE: Configuring obsPoints.csv for Spatial Coordinates\nDESCRIPTION: Configuration for spatial coordinates CSV file containing observation IDs and x,y coordinates. Specifies columns for observation index and spatial coordinates.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-file-types.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"obsIndex\": \"cell_id\",\n  \"obsPoints\": [\"X\", \"Y\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding VegaPlot Component (JavaScript)\nDESCRIPTION: Added a VegaPlot component, a Vega-Lite implementation of a cell set size bar plot, and a useGridItemSize hook to enable responsive charts.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/CHANGELOG.md#2025-04-23_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { width, height } = useGridItemSize();\n\n<VegaPlot\n  spec={spec}\n  width={width}\n  height={height}\n/>\n```\n\n----------------------------------------\n\nTITLE: Storing Filtered Gene Expression in obsm\nDESCRIPTION: Shows how to store a subset of highly variable genes in the obsm attribute of AnnData object, which can be used with the geneFilter configuration in Vitessce.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-file-types.mdx#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nsc.pp.highly_variable_genes(adata, n_top_genes=200)\nadata.obsm['X_top_200_genes'] = adata[:, adata.var['highly_variable']].X.copy()\nadata.write_zarr('my_store.zarr')\n```\n\n----------------------------------------\n\nTITLE: Configuring obsSets.csv for Cell Classifications\nDESCRIPTION: Configuration for set membership CSV file that maps observations to sets or hierarchical classifications. Supports multiple grouping schemes and optional confidence scores.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-file-types.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"obsIndex\": \"cell_id\",\n  \"obsSets\": [\n    {\n      \"name\": \"Leiden Clustering\",\n      \"column\": \"leiden\"\n    },\n    {\n      \"name\": \"Cell Type Annotations\",\n      \"column\": [\"cell_type_coarse\", \"cell_type_fine\"]\n    },\n    {\n      \"name\": \"Predicted Cell Types\",\n      \"column\": \"pred_cell_type\",\n      \"scoreColumn\": \"pred_score\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring scCODA Cell Type Composition Analysis in JSON\nDESCRIPTION: This snippet sets up a scCODA cell type composition analysis for comparing CKD and Reference disease types. It defines coordination values, analysis type, and parameters for the composition analysis.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-comparison.md#2025-04-23_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"path\": \"uns/compare_diseasetype.val_reference.val_ckd.compare_subclass_l2.sccoda_df\",\n  \"coordination_values\": {\n    \"obsType\": \"cell\",\n    \"sampleSetSelection\": [\n      [\"diseasetype\", \"CKD\"]\n    ],\n    \"sampleSetFilter\": [\n      [\"diseasetype\", \"Reference\"],\n      [\"diseasetype\", \"CKD\"]\n    ],\n    \"obsSetSelection\": [\n      [\"subclass_l2\"]\n    ]\n  },\n  \"analysis_type\": \"sccoda_df\",\n  \"analysis_params\": {\n    \"reference_cell_type\": \"MON\",\n    \"automatic_reference_absence_threshold\": 0.05\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding RESET Event Publisher (JavaScript)\nDESCRIPTION: Added a RESET event so that the SourcePublisher can notify other components that a new viewconfig and dataset has been loaded.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/CHANGELOG.md#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\npubSub.publish('RESET', {});\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Dataset Coordination Scopes in Vitessce (JavaScript)\nDESCRIPTION: Demonstrates the new view config schema version 1.0.8 that supports multiple dataset coordination scopes and dataset-specific coordination scope mappings for all coordination types.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndatasets: [\n  { uid: 'my-query', ... },\n  { uid: 'some-atlas', ... },\n],\ncoordinationSpace: {\n  dataset: {\n    REFERENCE: 'some-atlas',\n    QUERY: 'my-query',\n  },\n  embeddingType: {\n    common: 'UMAP',\n  },\n  embeddingZoom: {\n    refZoom: 2,\n    qryZoom: 4,\n  },\n  ...,\n},\nlayout: [\n  {\n    component: 'qrComparisonScatterplot',\n    coordinationScopes: {\n      dataset: ['REFERENCE', 'QUERY'],\n      embeddingType: 'common',\n      embeddingZoom: { REFERENCE: 'refZoom', QUERY: 'qryZoom' },\n    },\n    x: 0, y: 0, w: 5, h: 12,\n  },\n  ...,\n],\n...\n```\n\n----------------------------------------\n\nTITLE: Defining obsLocations in AnnData Zarr for Vitessce\nDESCRIPTION: Specifies the structure of obsLocations.anndata.zarr file type, which contains a two-column array with (x, y) spatial coordinates along the obs axis. This is typically stored in adata.obsm['X_spatial'].\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-file-types.mdx#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\narray([[ 3.1402664 , -7.1668797 ],\n       [-3.105793  , -3.2035291 ],\n       [ 6.1815314 ,  3.4141443 ],\n       ...,\n       [ 6.922351  , -6.529349  ],\n       [ 4.714882  , -4.027811  ],\n       [ 0.75445884, -4.2975116 ]], dtype=float32)\n```\n\n----------------------------------------\n\nTITLE: Adding Label Override Prop for Genes Component (JavaScript)\nDESCRIPTION: Added a labelOverride prop for the genes component to allow customizing labels.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Genes labelOverride=\"Custom Label\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing VitessceConfig with Schema Version\nDESCRIPTION: Example showing how to properly initialize a new VitessceConfig object with the latest schema version specification.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/blog/2022-07-16-obs-feature.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst vc = new VitessceConfig({ schemaVersion: \"1.0.15\", name: \"My config\" });\n```\n\n----------------------------------------\n\nTITLE: Cell Metadata Example\nDESCRIPTION: Example of cell metadata in MuData format, showing cell IDs and their corresponding cell type annotations.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-file-types.mdx#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nindex\ncell_1     ATCGC\ncell_2     TCGGC\ncell_3     TTTCA\nName: alt_cell_id, dtype: object\n```\n\n----------------------------------------\n\nTITLE: Defining featureLabels in AnnData Zarr for Vitessce\nDESCRIPTION: Describes the featureLabels.anndata.zarr file type, which contains a column of string labels along the var axis. This is typically stored in adata.var['gene_symbol'].\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-file-types.mdx#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nindex\nENSG00000152128     TMEM163\nENSG00000153086     ACMSD\nENSG00000082258     CCNT2\nENSG00000176601     MAP3K19\nENSG00000115839     RAB3GAP1\nName: gene_symbol, dtype: object\n```\n\n----------------------------------------\n\nTITLE: Adding Support for Cell Sets Files in View Configs (JavaScript)\nDESCRIPTION: Added support for providing cell sets files in view configs to load pre-defined cell sets.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/CHANGELOG.md#2025-04-23_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"name\": \"My View Config\",\n  \"datasets\": [\n    {\n      \"files\": [\n        {\n          \"type\": \"cell-sets\",\n          \"fileType\": \"cell-sets.json\",\n          \"url\": \"http://example.com/cell-sets.json\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Vitessce Local Dataset Configuration\nDESCRIPTION: Example JSON configuration for connecting Vitessce to local data files served through http-server.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-hosting.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n...,\n\"datasets\": [\n    {\n        \"uid\": \"my-dataset\",\n        \"name\": \"My amazing dataset\",\n        \"files\": [\n            {\n                \"fileType\": \"obsEmbedding.csv\",\n                \"url\": \"http://localhost:9000/path/to/my-local-file.csv\",\n                ...\n            }\n        ]\n    }\n],\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Polygon Segmentation Properties in JSON\nDESCRIPTION: JSON configuration object showing the structure for polygon segmentation properties including opacity, radius, visibility and stroke settings. This represents the previous implementation approach for polygon-based segmentations.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/blog/2023-09-05-spatial-beta.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{ opacity, radius, visible, stroked }\n```\n\n----------------------------------------\n\nTITLE: Defining sampleEdges in AnnData Zarr for Vitessce\nDESCRIPTION: Outlines the sampleEdges.anndata.zarr file type, which contains a column of string labels along the obs axis, mapping observations to samples. This is typically stored in adata.obs['donor_id'].\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-file-types.mdx#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nindex\ncell_1     donor_1\ncell_2     donor_1\ncell_3     donor_2\nName: donor_id, dtype: object\n```\n\n----------------------------------------\n\nTITLE: Image Raster JSON Configuration with OME-TIFF\nDESCRIPTION: Configuration example for the image.raster.json file type pointing to an OME-TIFF image with transformation matrix metadata.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-file-types.mdx#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"renderLayers\": [\"My OME-TIFF Image\"],\n  \"schemaVersion\": \"0.0.2\",\n  \"images\": [\n    {\n      \"name\": \"My OME-TIFF Image\",\n      \"url\": \"http://example.com/my_image.ome.tif\",\n      \"type\": \"ome-tiff\",\n      \"metadata\": {\n        \"transform\": {\n          \"matrix\": [\n            0.81915098, -0.57357901, 0, 3264.76514684,\n            0.57357502, 0.819152, 0, 556.50440621,\n            0, 0, 1, 0,\n            0, 0, 0, 1\n          ]\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Vitessce Configuration\nDESCRIPTION: Basic JSON configuration template for Vitessce visualization\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/tutorial-visium.mdx#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"1.0.0\",\n  \"name\": \"10x visium human lymph node\",\n  \"initStrategy\": \"auto\",\n  \"datasets\": [],\n  \"coordinationSpace\": {},\n  \"layout\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Numpy Array Example for 2D Embeddings\nDESCRIPTION: Example of a 2D embedding array structure storing coordinate pairs, typically used for UMAP or spatial coordinates. Shows the format for coordinates stored as float32 values.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-file-types.mdx#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\narray([[ 3.1402664 , -7.1668797 ],\n       [-3.105793  , -3.2035291 ],\n       [ 6.1815314 ,  3.4141443 ],\n       ...,\n       [ 6.922351  , -6.529349  ],\n       [ 4.714882  , -4.027811  ],\n       [ 0.75445884, -4.2975116 ]], dtype=float32)\n```\n\n----------------------------------------\n\nTITLE: Adding State Variables for Feature List in JavaScript\nDESCRIPTION: This snippet shows the addition of state variables 'featureListSort' and 'showFeatureTable' to manage feature list ordering and visibility.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n- added state variables `featureListSort` and `showFeatureTable`.\n- hooked the state variables to `FeatureListOptions` and to `FeatureList`.\n```\n\n----------------------------------------\n\nTITLE: Configuring Cell Data File for Dimensionality Reduction\nDESCRIPTION: Defines the cell data file configuration for PCA and UMAP visualizations, specifying the file type, URL, and dimension mappings.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/tutorial-visium.mdx#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"cells\",\n  \"fileType\": \"anndata-cells.zarr\",\n  \"url\": \"http://localhost:9000/V1_Human_Lymph_Node.zarr\",\n  \"options\": {\n    \"mappings\": {\n      \"UMAP\": {\n        \"key\": \"obsm/X_umap\",\n        \"dims\": [0, 1]\n      },\n      \"PCA\": {\n        \"key\": \"obsm/X_pca\",\n        \"dims\": [0, 1]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ViewType Usage Example in Vitessce Configuration\nDESCRIPTION: Demonstrates how to use the ViewType constant when creating a new Vitessce configuration and adding a spatial view.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/constants.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VitessceConfig, ViewType as vt } from 'vitessce';\n\nconst vc = new VitessceConfig({ schemaVersion: \"1.0.15\", name: \"My config\" });\nconst dataset = vc.addDataset(\"My dataset\");\nconst v1 = vc.addView(dataset, vt.SPATIAL);\n```\n\n----------------------------------------\n\nTITLE: Loading Visium Dataset\nDESCRIPTION: Code to load the V1_Human_Lymph_Node dataset using Scanpy\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/tutorial-visium.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nadata = sc.datasets.visium_sge(sample_id=\"V1_Human_Lymph_Node\", include_hires_tiff=True)\n```\n\n----------------------------------------\n\nTITLE: Configuring Coordination Space for Embedding Types\nDESCRIPTION: Sets up coordination space to manage different embedding types (PCA and UMAP) for scatterplot coordination.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/tutorial-visium.mdx#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"coordinationSpace\": {\n    \"embeddingType\": {\n      \"ET1\": \"PCA\",\n      \"ET2\": \"UMAP\"\n    }\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst [ET1, ET2] = vc.addCoordination(\"embeddingType\", \"embeddingType\");\nET1.setValue(\"PCA\");\nET2.setValue(\"UMAP\");\n```\n\n----------------------------------------\n\nTITLE: Importing FileType Constants in JavaScript\nDESCRIPTION: Shows how to import the FileType constant with an alias for use in Vitessce configurations.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/constants.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FileType as ft } from 'vitessce';\n```\n\n----------------------------------------\n\nTITLE: React JSX Conditional Rendering Pattern\nDESCRIPTION: Demonstrates the preferred pattern for conditional rendering in JSX, using ternary operators with explicit null cases rather than short-circuit evaluation.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/dev-docs/design-guidelines.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nreturn (someCondition ? (<SomeComponent/>) : null)\n```\n\n----------------------------------------\n\nTITLE: Defining Scatterplot Components\nDESCRIPTION: Creates scatterplot visualization components with respective embedding type coordination scopes and layout positioning.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/tutorial-visium.mdx#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"component\": \"scatterplot\",\n    \"coordinationScopes\": {\n      \"embeddingType\": \"ET1\"\n    },\n    \"x\": 0, \"y\": 0, \"w\": 6, \"h\": 12\n  },\n  {\n    \"component\": \"scatterplot\",\n    \"coordinationScopes\": {\n      \"embeddingType\": \"ET2\"\n    },\n    \"x\": 6, \"y\": 0, \"w\": 6, \"h\": 12\n  }\n]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst pcaPlot = vc\n  .addView(dataset, vt.SCATTERPLOT)\n  .useCoordination(ET1);\nconst umapPlot = vc\n  .addView(dataset, vt.SCATTERPLOT)\n  .useCoordination(ET2);\n```\n\n----------------------------------------\n\nTITLE: Configuring Gene Expression Analysis Parameters in JSON\nDESCRIPTION: JSON configuration specifying analysis parameters for differential gene expression and pathway enrichment between chronic kidney disease (CKD) and acute kidney injury (AKI) T cell populations. Includes settings for Wilcoxon rank test, PertPy hypergeometric testing, and gene set enrichment analysis with specific filtering criteria.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-comparison.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"groupby\": \"cell_type_sample_group\",\n  \"reference\": \"T_CKD\",\n  \"method\": \"wilcoxon\",\n  \"use_raw\": false,\n  \"layer\": \"logcounts\",\n  \"corr_method\": \"benjamini-hochberg\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom createGenerateClassName in JavaScript\nDESCRIPTION: This snippet implements a custom createGenerateClassName function without random numbers to ensure deterministic class names, and renames makeStyles keys for specificity.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n- Implement custom createGenerateClassName without random numbers involved to ensure deterministic class names.\n  - Rename `makeStyles` keys to be more specific to avoid conflicts.\n```\n\n----------------------------------------\n\nTITLE: Importing ViewType Constants in JavaScript\nDESCRIPTION: Shows how to import the ViewType constant with an alias for use in Vitessce configurations.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/constants.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ViewType as vt } from 'vitessce';\n```\n\n----------------------------------------\n\nTITLE: Configuring PertPy Hypergeometric Analysis in JSON\nDESCRIPTION: Configuration for PertPy hypergeometric analysis with cell type and disease type filtering. Specifies parameters for differential expression analysis and pathway enrichment with adjusted p-value thresholds.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-comparison.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": \"uns/filter_subclass_l1.val_t.compare_diseasetype.val_ckd.val_aki.pertpy_hypergeometric\",\n  \"coordination_values\": {\n    \"obsType\": \"cell\",\n    \"featureType\": \"pathway\",\n    \"obsSetFilter\": [[\"subclass_l1\", \"T\"]],\n    \"sampleSetSelection\": [[\"diseasetype\", \"AKI\"]],\n    \"sampleSetFilter\": [[\"diseasetype\", \"CKD\"], [\"diseasetype\", \"AKI\"]]\n  },\n  \"analysis_type\": \"pertpy_hypergeometric\",\n  \"analysis_params\": {\n    \"rank_genes_groups\": {\n      \"groupby\": \"cell_type_sample_group\",\n      \"reference\": \"T_CKD\",\n      \"method\": \"wilcoxon\",\n      \"use_raw\": false,\n      \"layer\": \"logcounts\",\n      \"corr_method\": \"benjamini-hochberg\"\n    },\n    \"pertpy_hypergeometric\": {\n      \"group\": \"T_AKI\",\n      \"pvals_adj_thresh\": 0.05,\n      \"direction\": \"both\",\n      \"corr_method\": \"benjamini-hochberg\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding cellOpacity Prop to Scatterplot and Spatial Components (JavaScript)\nDESCRIPTION: Added the cellOpacity prop for the Scatterplot and Spatial components to pass a value to the opacity deck.gl ScatterplotLayer and PolygonLayer prop.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/CHANGELOG.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Scatterplot cellOpacity={0.5} />\n<Spatial cellOpacity={0.5} />\n```\n\n----------------------------------------\n\nTITLE: Importing DataType Constants in JavaScript\nDESCRIPTION: Shows how to import the DataType constant with an alias for use in Vitessce configurations.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/constants.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DataType as dt } from 'vitessce';\n```\n\n----------------------------------------\n\nTITLE: Configuring Differential Expression Analysis for Filtered Cell Types in JSON\nDESCRIPTION: This snippet configures a differential expression analysis for dFIB cells, comparing CKD and Reference disease types. It specifies coordination values, analysis type, and parameters for the filtered comparison.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-comparison.md#2025-04-23_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"path\": \"uns/filter_subclass_l2.val_dfib.compare_diseasetype.val_reference.val_ckd.rank_genes_groups\",\n  \"coordination_values\": {\n    \"obsType\": \"cell\",\n    \"featureType\": \"gene\",\n    \"obsSetFilter\": [\n      [\"subclass_l2\", \"dFIB\"]\n    ],\n    \"sampleSetSelection\": [\n      [\"diseasetype\", \"CKD\"]\n    ],\n    \"sampleSetFilter\": [\n      [\"diseasetype\", \"Reference\"],\n      [\"diseasetype\", \"CKD\"]\n    ]\n  },\n  \"analysis_type\": \"rank_genes_groups\",\n  \"analysis_params\": {\n    \"rank_genes_groups\": {\n      \"groupby\": \"cell_type_sample_group\",\n      \"reference\": \"dFIB_Reference\",\n      \"method\": \"wilcoxon\",\n      \"use_raw\": false,\n      \"layer\": \"logcounts\",\n      \"corr_method\": \"benjamini-hochberg\"\n    },\n    \"rank_genes_groups_df\": {\n      \"group\": \"dFIB_CKD\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting AnnData and MuData Zarr Directories to JSON Memory Store\nDESCRIPTION: Node.js commands to convert Zarr directory structures into JSON memory store files. Handles multiple versions of AnnData (0.7-0.10) and MuData 0.2, supporting different matrix formats including CSC (Compressed Sparse Column), CSR (Compressed Sparse Row), and dense formats.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/packages/file-types/zarr/src/json-fixtures/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# anndata-0.7\nnode scripts/directory-to-memory-store.mjs packages/file-types/zarr/fixtures/anndata-0.7/anndata-csc.zarr packages/file-types/zarr/src/json-fixtures/anndata-0.7/anndata-csc.json\nnode scripts/directory-to-memory-store.mjs packages/file-types/zarr/fixtures/anndata-0.7/anndata-csr.zarr packages/file-types/zarr/src/json-fixtures/anndata-0.7/anndata-csr.json\nnode scripts/directory-to-memory-store.mjs packages/file-types/zarr/fixtures/anndata-0.7/anndata-dense.zarr packages/file-types/zarr/src/json-fixtures/anndata-0.7/anndata-dense.json\n\n# anndata-0.8\nnode scripts/directory-to-memory-store.mjs packages/file-types/zarr/fixtures/anndata-0.8/anndata-csc.zarr packages/file-types/zarr/src/json-fixtures/anndata-0.8/anndata-csc.json\nnode scripts/directory-to-memory-store.mjs packages/file-types/zarr/fixtures/anndata-0.8/anndata-csr.adata.zarr packages/file-types/zarr/src/json-fixtures/anndata-0.8/anndata-csr.adata.json\nnode scripts/directory-to-memory-store.mjs packages/file-types/zarr/fixtures/anndata-0.8/anndata-dense.zarr packages/file-types/zarr/src/json-fixtures/anndata-0.8/anndata-dense.json\n\n# anndata-0.9\nnode scripts/directory-to-memory-store.mjs packages/file-types/zarr/fixtures/anndata-0.9/anndata-csc.zarr packages/file-types/zarr/src/json-fixtures/anndata-0.9/anndata-csc.json\nnode scripts/directory-to-memory-store.mjs packages/file-types/zarr/fixtures/anndata-0.9/anndata-csr.adata.zarr packages/file-types/zarr/src/json-fixtures/anndata-0.9/anndata-csr.adata.json\nnode scripts/directory-to-memory-store.mjs packages/file-types/zarr/fixtures/anndata-0.9/anndata-dense.zarr packages/file-types/zarr/src/json-fixtures/anndata-0.9/anndata-dense.json\n\n# anndata-0.10\nnode scripts/directory-to-memory-store.mjs packages/file-types/zarr/fixtures/anndata-0.10/anndata-csc.zarr packages/file-types/zarr/src/json-fixtures/anndata-0.10/anndata-csc.json\nnode scripts/directory-to-memory-store.mjs packages/file-types/zarr/fixtures/anndata-0.10/anndata-csr.adata.zarr packages/file-types/zarr/src/json-fixtures/anndata-0.10/anndata-csr.adata.json\nnode scripts/directory-to-memory-store.mjs packages/file-types/zarr/fixtures/anndata-0.10/anndata-dense.zarr packages/file-types/zarr/src/json-fixtures/anndata-0.10/anndata-dense.json\n\n# mudata-0.2\nnode scripts/directory-to-memory-store.mjs packages/file-types/zarr/fixtures/mudata-0.2/mudata-csc.zarr packages/file-types/zarr/src/json-fixtures/mudata-0.2/mudata-csc.json\nnode scripts/directory-to-memory-store.mjs packages/file-types/zarr/fixtures/mudata-0.2/mudata-csr.zarr packages/file-types/zarr/src/json-fixtures/mudata-0.2/mudata-csr.json\nnode scripts/directory-to-memory-store.mjs packages/file-types/zarr/fixtures/mudata-0.2/mudata-dense.zarr packages/file-types/zarr/src/json-fixtures/mudata-0.2/mudata-dense.json\nnode scripts/directory-to-memory-store.mjs packages/file-types/zarr/fixtures/mudata-0.2/mudata-dense-updated.zarr packages/file-types/zarr/src/json-fixtures/mudata-0.2/mudata-dense-updated.json\n```\n\n----------------------------------------\n\nTITLE: FileType Usage Example in Vitessce Configuration\nDESCRIPTION: Demonstrates how to use the FileType constant when adding a file to a Vitessce dataset configuration.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/constants.mdx#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VitessceConfig, DataType as dt, FileType as ft } from 'vitessce';\n\nconst vc = new VitessceConfig({ schemaVersion: \"1.0.15\", name: \"My config\" });\nconst dataset = vc.addDataset(\"My dataset\")\n    .addFile({\n        url: \"http://example.com/my-cell-coordinates.csv\",\n        fileType: ft.OBS_LOCATIONS_CSV,\n        coordinationValues: { obsType: 'cell' },\n    });\n```\n\n----------------------------------------\n\nTITLE: Vertical View Layout in Vitessce\nDESCRIPTION: Example showing vertical concatenation of views in Vitessce grid layout using the vconcat helper function.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/view-config-js.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VitessceConfig, ViewType as vt, vconcat } from 'vitessce';\n\nconst vc = new VitessceConfig({ schemaVersion: \"1.0.15\", name: \"My config\" });\nconst dataset = vc.addDataset(\"My dataset\");\nconst v1 = vc.addView(dataset, vt.SPATIAL);\nconst v2 = vc.addView(dataset, vt.SPATIAL);\nvc.layout(vconcat(v1, v2));\n```\n\n----------------------------------------\n\nTITLE: Updating File Type Property in View Config (JavaScript)\nDESCRIPTION: Added the fileType property to the view config layers objects to choose a data loader class.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayers: [\n  {\n    fileType: 'cells.json',\n    ...\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Importing CoordinationType Constants in JavaScript\nDESCRIPTION: Shows how to import the CoordinationType constant with an alias for use in Vitessce configurations.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/constants.mdx#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CoordinationType as ct } from 'vitessce';\n```\n\n----------------------------------------\n\nTITLE: Complete Vitessce Configuration\nDESCRIPTION: Full configuration combining all components including dataset definition, coordination space, and layout settings.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/tutorial-visium.mdx#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"1.0.0\",\n  \"name\": \"10x visium human lymph node\",\n  \"initStrategy\": \"auto\",\n  \"datasets\": [\n    {\n      \"uid\": \"my-visium-dataset\",\n      \"files\": [\n        {\n          \"type\": \"cells\",\n          \"fileType\": \"anndata-cells.zarr\",\n          \"url\": \"http://localhost:9000/V1_Human_Lymph_Node.zarr\",\n          \"options\": {\n            \"mappings\": {\n              \"UMAP\": {\n                \"key\": \"obsm/X_umap\",\n                \"dims\": [0, 1]\n              },\n              \"PCA\": {\n                \"key\": \"obsm/X_pca\",\n                \"dims\": [0, 1]\n              }\n            }\n          }\n        }\n      ]\n    }\n  ],\n  \"coordinationSpace\": {\n    \"embeddingType\": {\n      \"ET1\": \"PCA\",\n      \"ET2\": \"UMAP\"\n    }\n  },\n  \"layout\": [\n    {\n      \"component\": \"scatterplot\",\n      \"coordinationScopes\": {\n        \"embeddingType\": \"ET1\"\n      },\n      \"x\": 0, \"y\": 0, \"w\": 6, \"h\": 12\n    },\n    {\n      \"component\": \"scatterplot\",\n      \"coordinationScopes\": {\n        \"embeddingType\": \"ET2\"\n      },\n      \"x\": 6, \"y\": 0, \"w\": 6, \"h\": 12\n    }\n  ]\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst vc = new VitessceConfig({ schemaVersion: \"1.0.9\", name: \"10x visium human lymph node\" });\nconst dataset = vc\n  .addDataset(\"my-visium-dataset\")\n  .addFile({\n    url: \"http://localhost:9000/V1_Human_Lymph_Node.zarr\",\n    dataType: dt.CELLS,\n    fileType: ft.ANNDATA_CELLS_ZARR,\n    options: {\n      \"mappings\": {\n        \"UMAP\": {\n          \"key\": \"obsm/X_umap\",\n          \"dims\": [0, 1]\n        },\n        \"PCA\": {\n          \"key\": \"obsm/X_pca\",\n          \"dims\": [0, 1]\n        }\n      }\n    }\n  });\nconst [ET1, ET2] = vc.addCoordination(\"embeddingType\", \"embeddingType\");\nET1.setValue(\"PCA\");\nET2.setValue(\"UMAP\");\nconst pcaPlot = vc\n  .addView(dataset, vt.SCATTERPLOT)\n  .useCoordination(ET1);\nconst umapPlot = vc\n  .addView(dataset, vt.SCATTERPLOT)\n  .useCoordination(ET2);\nvc.layout(hconcat(pcaPlot, umapPlot));\nreturn vc.toJSON();\n```\n\n----------------------------------------\n\nTITLE: Logging Vitessce View Configuration in Browser Console\nDESCRIPTION: This snippet shows the console output format for the current Vitessce view configuration, which is automatically logged by Vitessce.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n🚄 Vitessce (x.x.x) view configuration\n```\n\n----------------------------------------\n\nTITLE: CoordinationType Usage Example in Vitessce Configuration\nDESCRIPTION: Demonstrates how to use the CoordinationType constant when linking views in a Vitessce configuration.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/constants.mdx#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { VitessceConfig, ViewType as vt, CoordinationType as ct } from 'vitessce';\n\nconst vc = new VitessceConfig({ schemaVersion: \"1.0.15\", name: \"My config\" });\nconst dataset = vc.addDataset(\"My dataset\");\nconst v1 = vc.addView(dataset, vt.SPATIAL);\nconst v2 = vc.addView(dataset, vt.SPATIAL);\nvc.linkViews(\n    [v1, v2],\n    [ct.SPATIAL_ZOOM, ct.SPATIAL_TARGET_X, ct.SPATIAL_TARGET_Y],\n    [2, 0, 0]\n);\n```\n\n----------------------------------------\n\nTITLE: Vitessce View Configuration\nDESCRIPTION: JavaScript configuration file defining the Vitessce visualization layout and data sources\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/tutorial-gh-pages.mdx#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const myViewConfig = {\n  version: \"1.0.4\",\n  name: \"My example config\",\n  description: \"This demonstrates the JSON schema\",\n  datasets: [\n    {\n      uid: \"D1\",\n      name: \"Dries\",\n      files: [\n        {\n          url: \"https://data-1.vitessce.io/0.0.31/master_release/dries/dries.cells.json\",\n          type: \"cells\",\n          fileType: \"cells.json\"\n        },\n        {\n          url: \"https://data-1.vitessce.io/0.0.31/master_release/dries/dries.cell-sets.json\",\n          type: \"cell-sets\",\n          fileType: \"cell-sets.json\"\n        }\n      ]\n    }\n  ],\n  coordinationSpace: {\n    dataset: {\n      A: \"D1\"\n    },\n    embeddingType: {\n      A: \"UMAP\",\n      B: \"t-SNE\"\n    },\n    embeddingZoom: {\n      A: 2.5\n    }\n  },\n  layout: [\n    {\n      component: \"scatterplot\",\n      coordinationScopes: {\n        dataset: \"A\",\n        embeddingType: \"A\",\n        embeddingZoom: \"A\"\n      },\n      x: 6, y: 0, w: 6, h: 6\n    },\n    {\n      component: \"scatterplot\",\n      coordinationScopes: {\n        dataset: \"A\",\n        embeddingType: \"B\",\n        embeddingZoom: \"A\"\n      },\n      x: 0, y: 0, w: 6, h: 6\n    },\n    {\n      component: \"cellSets\",\n      coordinationScopes: {\n        dataset: \"A\"\n      },\n      x: 0, y: 6, w: 6, h: 6\n    },\n    {\n      component: \"cellSetSizes\",\n      coordinationScopes: {\n        dataset: \"A\"\n      },\n      x: 6, y: 6, w: 6, h: 6\n    }\n  ],\n  initStrategy: \"auto\"\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Cell Sets JSON Schema (JSON)\nDESCRIPTION: Updated the cell-sets.json schemas to allow both leaf nodes and non-leaf nodes in the same tree level.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"version\": \"0.1.3\",\n  \"tree\": [\n    {\n      \"name\": \"Parent\",\n      \"children\": [\n        {\n          \"name\": \"Child\",\n          \"set\": [1, 2, 3]\n        },\n        {\n          \"name\": \"Another Parent\",\n          \"children\": [...]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CoordinationLevel Alias - JavaScript\nDESCRIPTION: Example of importing the CoordinationLevel function and aliasing it as CL for brevity. This function is used to configure multi-level coordination in Vitessce.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/view-config-js.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CoordinationLevel as CL } from 'vitessce';\n```\n\n----------------------------------------\n\nTITLE: Configuring Layer Controller Props in Vitessce\nDESCRIPTION: JSON configuration to disable 3D visualization and enable automatic RGB channel detection in the layer controller component.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/default-config.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"props\": {\n    \"disable3d\": [],\n    \"disableChannelsIfRgbDetected\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies with Version Constraints\nDESCRIPTION: Specifies required Python packages and their version constraints. Pins anndata to version 0.7.1, zarr to version 2.6.1, and pandas to any version below 2.0.0.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/packages/file-types/zarr/fixtures/anndata-0.7/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nanndata==0.7.1\nzarr==2.6.1\npandas<2.0.0\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Vitessce Container\nDESCRIPTION: CSS styles for proper rendering of Vitessce visualization\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/tutorial-gh-pages.mdx#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\nhtml {\n  height: 100%;\n}\n\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  height: 100%;\n  margin: 0;\n}\n\n.vitessce-container {\n  height: max(100%, 100vh);\n  width: 100%;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Testing Vitessce Packages\nDESCRIPTION: Commands for building, bundling and installing Vitessce packages for testing in a consumer environment. Includes steps to start the HTML server for testing.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/consumer/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# From root of repo\npnpm run build\npnpm run bundle\n./scripts/consumer-install.sh\npnpm run start-html\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Vitessce\nDESCRIPTION: This snippet defines the required Python packages and their version constraints for the Vitessce project. It includes anndata, zarr, numpy, and pandas with specific version ranges to ensure compatibility.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/packages/file-types/zarr/fixtures/anndata-0.10/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nanndata>=0.10.0,<0.11\nzarr==2.6.1\nnumpy<2\npandas<2\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Deployment Workflow\nDESCRIPTION: GitHub Actions workflow configuration for automated deployment to GitHub Pages\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/tutorial-gh-pages.mdx#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nname: Deploy\n\non:\n  push:\n    branches:\n      - main\n\n\npermissions:\n  contents: read\n  pages: write\n  id-token: write\n\njobs:\n  build:\n    runs-on: ubuntu-22.04\n    name: Build React app and deploy to GitHub Pages\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v1\n        with:\n          node-version: 18.20.0\n      - name: Install NPM dependencies\n        run: npm ci\n      - name: Build React app\n        run: npm run build\n      - uses: actions/upload-pages-artifact@v1\n        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}\n        with:\n          path: ./build\n  deploy:\n    runs-on: ubuntu-22.04\n    needs: build\n    environment:\n      name: github-pages\n      url: ${{ steps.deployment.outputs.page_url }}\n    steps:\n      - name: Deploy to GitHub Pages\n        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}\n        id: deployment\n        uses: actions/deploy-pages@v1\n```\n\n----------------------------------------\n\nTITLE: Testing Vitessce in Portal-UI Environment\nDESCRIPTION: Step-by-step instructions for testing Vitessce packages in the portal-ui environment, including environment setup, package installation, and development server startup.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/consumer/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm run build\npnpm run bundle\n./scripts/consumer-install.sh\n\ncd ../portal-ui\nconda activate portal-ui # may need to be created the first time\nnvm use `cat .nvmrc` # may need to nvm install `cat .nvmrc`\ncd context\nnpm install\n\nnpm install $(ls ../../vitessce/consumer/vitessce-*.tgz)\ncd ..\n./etc/dev/dev-start.sh --no-npm-install # open http://localhost:5001\n```\n\n----------------------------------------\n\nTITLE: Adding onWarn Callback to Vitessce Component (JavaScript)\nDESCRIPTION: Added an onWarn callback to the Vitessce component to allow a consumer app to manage display of warning messages.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Vitessce\n  onWarn={(message) => {\n    // Handle warning\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating Vitessce Import Statement for v3 (JavaScript)\nDESCRIPTION: This code snippet shows the necessary change in the import statement when upgrading from Vitessce v2 to v3. The file extension for the ESM bundle is updated from .mjs to .js.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/upgrade-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\n// highlight-start\n- import { Vitessce } from 'vitessce/dist/index.min.mjs';\n+ import { Vitessce } from 'vitessce/dist/index.min.js';\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Cloning the Vitessce Repository Fork in Bash\nDESCRIPTION: This command clones a forked Vitessce repository to the local machine. It's the first step in the contribution workflow after creating a fork on GitHub.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/contributing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/your-username/vitessce.git\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Vitessce\nDESCRIPTION: This snippet defines the required Python packages and their versions for the Vitessce project. It includes zarr version 2.13.3 and mudata version 0.2.1.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/packages/file-types/zarr/fixtures/mudata-0.2/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nzarr==2.13.3\nmudata==0.2.1\n```\n\n----------------------------------------\n\nTITLE: Removing Explicit CSS Import for Vitessce v2 (JavaScript)\nDESCRIPTION: This code snippet demonstrates the removal of the explicit CSS import that was required in Vitessce v1 but fails in v2.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/upgrade-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Vitessce } from 'vitessce';\n// highlight-start\nimport 'vitessce/dist/es/production/static/css/index.css';\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Vitessce\nDESCRIPTION: This snippet defines the required Python packages and their version constraints for the Vitessce project. It includes anndata with version 0.9.0 or higher but less than 0.10, zarr version 2.6.1 exactly, numpy less than version 2, and pandas less than version 2.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/packages/file-types/zarr/fixtures/anndata-0.9/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nanndata>=0.9.0,<0.10\nzarr==2.6.1\nnumpy<2\npandas<2\n```\n\n----------------------------------------\n\nTITLE: Gene Feature Labels Example\nDESCRIPTION: Example of gene feature labels in MuData format, showing ENSEMBL IDs mapped to gene symbols.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-file-types.mdx#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nindex\nENSG00000152128     TMEM163\nENSG00000153086     ACMSD\nENSG00000082258     CCNT2\nENSG00000176601     MAP3K19\nENSG00000115839     RAB3GAP1\nName: gene_symbol, dtype: object\n```\n\n----------------------------------------\n\nTITLE: Configuring Heatmap Transposition in Vitessce\nDESCRIPTION: JSON configuration to enable heatmap transposition in the visualization.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/default-config.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"props\": {\n    \"transpose\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements with Version Constraints\nDESCRIPTION: Specifies required Python packages and their version constraints needed for Vitessce. Includes AnnData 0.8.0, Zarr 2.6.1, and version-constrained NumPy and Pandas packages.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/packages/file-types/zarr/fixtures/anndata-0.8/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nanndata==0.8.0\nzarr==2.6.1\nnumpy<2\npandas<2\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS S3 Bucket Policy\nDESCRIPTION: JSON policy configuration for AWS S3 bucket to allow public read access to bucket objects. Requires replacing 'foo-bar' with actual bucket name.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-hosting.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Id\": \"Policy12345\",\n  \"Statement\": [\n    {\n      \"Sid\": \"Stmt6789\",\n      \"Effect\": \"Allow\",\n      \"Principal\": \"*\",\n      \"Action\": [\n        \"s3:GetObject\",\n        \"s3:GetObjectAcl\",\n        \"s3:ListBucket\"\n      ],\n      \"Resource\": [\n        \"arn:aws:s3:::foo-bar\",\n        \"arn:aws:s3:::foo-bar/*\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Swapping Vitessce Package for Debugging in React\nDESCRIPTION: This diff snippet demonstrates how to replace the production Vitessce package with the development version for improved debugging in a React environment.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- import { Vitessce } from 'vitessce';\n+ import { Vitessce } from '@vitessce/dev';\n```\n\n----------------------------------------\n\nTITLE: Setting up Conda Environment and Creating Vitessce AnnData Fixtures\nDESCRIPTION: Creates and activates a dedicated Conda environment with Python 3.7, installs required dependencies, and runs the fixture creation script. Used for generating test data fixtures for Vitessce's AnnData integration.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/packages/file-types/zarr/fixtures/anndata-0.7/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nconda create -n vitessce-anndata-fixtures python=3.7\nconda activate vitessce-anndata-fixtures\npip install -r requirements.txt\npython create-fixtures.py .\n```\n\n----------------------------------------\n\nTITLE: TypeScript File Extension Import Pattern\nDESCRIPTION: Example of the required pattern for relative imports using .js extensions, even in TypeScript contexts.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/dev-docs/design-guidelines.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { something } from './something.js'\n```\n\n----------------------------------------\n\nTITLE: Updating Import Map for Debugging in HTML\nDESCRIPTION: This diff snippet shows how to modify the import map in an HTML file to use the development versions of React and Vitessce for debugging purposes.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/troubleshooting.md#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n <script type=\"importmap\">\n {\n   \"imports\": {\n-    \"react\": \"https://esm.sh/react@18.2.0\",\n+    \"react\": \"https://esm.sh/react@18.2.0?dev\",\n-    \"react-dom\": \"https://esm.sh/react-dom@18.2.0\",\n+    \"react-dom\": \"https://esm.sh/react-dom@18.2.0?dev\",\n-    \"react-dom/client\": \"https://esm.sh/react-dom@18.2.0/client\",\n+    \"react-dom/client\": \"https://esm.sh/react-dom@18.2.0/client?dev\",\n-    \"vitessce\": \"https://unpkg.com/vitessce@latest\"\n+    \"vitessce\": \"https://unpkg.com/@vitessce/dev@latest\"\n   }\n }\n </script>\n```\n\n----------------------------------------\n\nTITLE: Citing Vitessce in BibTeX Format\nDESCRIPTION: BibTeX citation format for referencing the main Vitessce paper published in Nature Methods 2024.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bibtex\nCODE:\n```\n@article{keller2024vitessce,\n  title = {{Vitessce: integrative visualization of multimodal and spatially resolved single-cell data}},\n  author = {Keller, Mark S. and Gold, Ilan and McCallum, Chuck and Manz, Trevor and Kharchenko, Peter V. and Gehlenborg, Nils},\n  journal = {Nature Methods},\n  year = {2024},\n  month = sep,\n  doi = {10.1038/s41592-024-02436-x}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding METADATA_REMOVE Event (JavaScript)\nDESCRIPTION: Added METADATA_REMOVE event to facilitate removal of image layer metadata from the DescriptionSubscriber upon layer removal.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/CHANGELOG.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\npubSub.publish('METADATA_REMOVE', { type: 'image', id: 'layer1' });\n```\n\n----------------------------------------\n\nTITLE: Local Development Server Installation\nDESCRIPTION: Commands for installing http-server using either Homebrew or NPM package manager.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-hosting.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbrew install http-server\n# or\nnpm install --global http-server\n```\n\n----------------------------------------\n\nTITLE: React JSX Anti-pattern for Conditional Rendering\nDESCRIPTION: Shows the discouraged pattern for conditional rendering in JSX using short-circuit evaluation.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/dev-docs/design-guidelines.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nreturn (someCondition && <SomeComponent/>)\n```\n\n----------------------------------------\n\nTITLE: Importing DataTypesTable Component in Markdown\nDESCRIPTION: This code snippet imports a custom React component called DataTypesTable, which is likely used to render a table of data types and file types supported by Vitessce.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-types-file-types.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport DataTypesTable from '../src/pages/_DataTypesTable';\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Vitessce Locally for Portal Testing\nDESCRIPTION: This bash script demonstrates how to build Vitessce locally, package it, and install it in a Portal UI project for testing. It's useful when testing functionality changes that affect the Portal.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/dev-docs/manual-testing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run-script build-lib && npm pack\ncd ../path/to/portal-ui\ncd context\nnpm i ../path/to/vitessce/vitessce-VERSION.tar.gz\ncd ..\n./dev-start.sh\n```\n\n----------------------------------------\n\nTITLE: Building JSON Schema from Zod using PNPM\nDESCRIPTION: Command to execute the schema conversion process from the root of the monorepo, converting Zod schemas to JSON format.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/packages/json-schema/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm run build-json-schema\n```\n\n----------------------------------------\n\nTITLE: Configuring ATAC-seq Dataset Types in Vitessce\nDESCRIPTION: Example configuration for specifying entity types in an scATAC-seq experiment, showing how to define observation, feature, and value types.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/blog/2022-07-16-obs-feature.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndataset: 'my_atac_experiment',\nobsType: 'cell',\nfeatureType: 'peak',\nfeatureValueType: 'count'\n```\n\n----------------------------------------\n\nTITLE: Creating Conda Environment for Vitessce\nDESCRIPTION: Commands to create and activate a new conda environment for the Vitessce tutorial\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/tutorial-visium.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nconda create -n vitessce-tutorial-env python=3.8\n```\n\nLANGUAGE: sh\nCODE:\n```\nconda activate vitessce-tutorial-env\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages\nDESCRIPTION: Commands to install Scanpy, leidenalg, and SciPy packages using conda\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/tutorial-visium.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nconda install -c conda-forge scanpy>=1.6.0 leidenalg>=0.8.3\n```\n\nLANGUAGE: sh\nCODE:\n```\nconda install -c conda-forge scipy>=1.0.0\n```\n\n----------------------------------------\n\nTITLE: Increasing NodeJS Memory Allocation\nDESCRIPTION: This command increases the max_old_space_size option for NodeJS, which may be necessary when working with Vitessce. It sets the maximum amount of memory available to 4GB.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/js-overview.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nexport NODE_OPTIONS=--max_old_space_size=4096\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup Options for React Externalization in Vite\nDESCRIPTION: This snippet shows how to configure Rollup options in Vite to externalize React and ReactDOM dependencies. This is done to prevent including multiple copies of React in the final bundle, which can cause crashes.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/blog/2022-10-13-internal-refactoring.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n...,\nrollupOptions: {\n  external: ['react', 'react-dom'],\n  output: {\n    globals: {\n      react: 'React',\n      'react-dom': 'ReactDOM',\n    },\n  }\n},\n...\n```\n\n----------------------------------------\n\nTITLE: Importing Python Dependencies\nDESCRIPTION: Python code to import required libraries for data processing\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/tutorial-visium.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport scanpy as sc\nimport scipy.cluster\nfrom os.path import join\n```\n\n----------------------------------------\n\nTITLE: Running glslify for GLSL Shader Generation in Vitessce\nDESCRIPTION: This command runs the glslify tool to process GLSL shader files in the root directory of the Vitessce package. The generated .out.glsl files can then be copied into JavaScript files for export.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/packages/gl/src/glsl/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm run glslify\n```\n\n----------------------------------------\n\nTITLE: Using Vitessce React Component Import\nDESCRIPTION: Example showing how the Vitessce React component is exported from the main package, which internally imports from @vitessce/all\nSOURCE: https://github.com/vitessce/vitessce/blob/main/packages/main/dev/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<Vitessce/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Plugin View Type in Vitessce\nDESCRIPTION: Example of creating a custom view plugin by instantiating the PluginViewType class. The example shows how to register a React component as a custom visualization, specifying its name and coordination types it subscribes to.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/dev-plugins.mdx#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { PluginViewType, CoordinationType } from 'vitessce';\n\n// ...\n// Omitted: definition of a React component\n// in some function called MyCustomZoomControllerSubscriber.\n// ...\n\nconst pluginViewTypes = [\n  new PluginViewType(\n    'myCustomZoomController',\n    MyCustomZoomControllerSubscriber,\n    [\n      CoordinationType.DATASET,\n      CoordinationType.SPATIAL_ZOOM,\n    ],\n  ),\n];\n```\n\n----------------------------------------\n\nTITLE: Building SVG Icons as React Components using pnpm\nDESCRIPTION: This command runs the build process to convert SVG files into React components. It uses pnpm as the package manager to execute the build script defined in the project.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/packages/icons/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm run build\n```\n\n----------------------------------------\n\nTITLE: Building Vitessce with Inlined Workers\nDESCRIPTION: Executes the build process using pnpm to inline web worker scripts into the main bundle. This command runs the build configuration that utilizes rollup and rollup-plugin-web-worker-loader to handle web worker integration.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/packages/workers/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm run build\n```\n\n----------------------------------------\n\nTITLE: Citing Viv Visualization Component in BibTeX Format\nDESCRIPTION: BibTeX citation format for referencing the Viv visualization component paper published in Nature Methods 2022.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bibtex\nCODE:\n```\n@article{manz2022viv,\n  title = {{Viv: multiscale visualization of high-resolution multiplexed bioimaging data on the web}},\n  author = {Manz, Trevor and Gold, Ilan and Patterson, Nathan Heath and McCallum, Chuck and Keller, Mark S. and Herr, II, Bruce W. and Börner, Kay and Spraggins, Jeffrey M. and Gehlenborg, Nils},\n  journal = {Nature Methods},\n  year = {2022},\n  month = may,\n  doi = {10.1038/s41592-022-01482-7}\n}\n```\n\n----------------------------------------\n\nTITLE: Building Vitessce with Inlined Workers\nDESCRIPTION: Command to build the project with rollup-plugin-web-worker-loader for inlining web worker scripts. This build process uses pnpm as the package manager and handles the worker script inlining automatically.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/packages/neuroglancer-workers/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm run build\n```\n\n----------------------------------------\n\nTITLE: TypeScript/JavaScript Import Examples\nDESCRIPTION: Examples of non-standard imports that should be avoided in ESM, including CSS and JSON imports. Shows the recommended Material UI styling approach instead.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/dev-docs/monorepo-and-bundling.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'styles.css'; // Avoid this\nimport dataStructure from 'file.json'; // Avoid this\n\n// Instead use Material UI makeStyles\nimport { makeStyles } from '@material-ui/core/styles';\n```\n\n----------------------------------------\n\nTITLE: Defining Schema Extension in TypeScript\nDESCRIPTION: Example of extending a previous schema using Zod's .extend() method, as referenced in the documentation link.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/packages/schemas/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n.extend\n```\n\n----------------------------------------\n\nTITLE: Serving Data with HTTP Server\nDESCRIPTION: Command to serve the processed Zarr store over HTTP using http-server\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/tutorial-visium.mdx#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nhttp-server ./ --cors -p 9000\n```\n\n----------------------------------------\n\nTITLE: Rendering Image Tag in Markdown with HTML\nDESCRIPTION: HTML image element embedded in markdown to display the Vitessce architecture diagram. The image is wrapped in an anchor tag for linking to the source Google Drawing.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/dev-docs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://docs.google.com/drawings/d/1vS6wP1vs5QepLhXGDRww7LR505HJ-aIqnGn9O19f6xg/edit\" target=\"_blank\">\n    <img\n        src=\"https://docs.google.com/drawings/d/e/2PACX-1vSoB3YGPxOTKnFOpYHeHX4JruHnibGXruM36uAZtuvPQNM3a7F4uS3q4b5jwGNQ6TJ7bQ9IPB32rdle/pub?w=650\"\n        alt=\"Architecture diagram\"\n        className=\"ar-16x9\"\n    />\n</a>\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch in Vitessce using Git\nDESCRIPTION: This command creates a new branch for implementing features or bug fixes in the Vitessce codebase. The naming convention follows the recommended pattern of user/feature-name.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/contributing.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b user/my-new-feature\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: Command to start a local development server with CORS enabled on port 9000.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/data-hosting.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nhttp-server ./ --cors -p 9000\n```\n\n----------------------------------------\n\nTITLE: Pushing Branch to Forked Vitessce Repository\nDESCRIPTION: This command pushes the local feature branch to the contributor's forked repository, making it available for creating a pull request to the main Vitessce project.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/contributing.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin user/my-new-feature\n```\n\n----------------------------------------\n\nTITLE: Committing Changes to Vitessce Repository\nDESCRIPTION: This command commits changes with a descriptive message following Vitessce's contribution guidelines. The example follows a 'Fix:' prefix pattern for clarity.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/contributing.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"Fix: Resolve issue with rendering component\"\n```\n\n----------------------------------------\n\nTITLE: React Project Setup Commands\nDESCRIPTION: Series of commands to initialize a new React project and set up Git repository\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/tutorial-gh-pages.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm init react-app vitessce-demo-gh-pages --use-npm\ncd vitessce-demo-gh-pages\n```\n\n----------------------------------------\n\nTITLE: Git Repository Setup\nDESCRIPTION: Commands to initialize Git repository and connect to GitHub\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/tutorial-gh-pages.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit init\ngit add .\ngit commit -m \"Initial commit\"\ngit branch -M main\n```\n\n----------------------------------------\n\nTITLE: Checking NodeJS Version\nDESCRIPTION: Command to verify the installed version of NodeJS\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/tutorial-gh-pages.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode --version\n```\n\n----------------------------------------\n\nTITLE: Citing Vitessce Framework in BibTeX Format\nDESCRIPTION: BibTeX citation format for referencing the Vitessce framework in academic publications. The citation refers to a 2021 OSF Preprints article describing the framework for integrative visualization of multi-modal and spatially-resolved single-cell data.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/about.md#2025-04-23_snippet_0\n\nLANGUAGE: bibtex\nCODE:\n```\n@article{keller2021vitessce,\n  title = {{Vitessce: a framework for integrative visualization of multi-modal and spatially-resolved single-cell data}},\n  author = {Keller, Mark S. and Gold, Ilan and McCallum, Chuck and Manz, Trevor and Kharchenko, Peter V. and Gehlenborg, Nils},\n  journal = {OSF Preprints},\n  year = {2021},\n  month = oct,\n  doi = {10.31219/osf.io/y8thv}\n}\n```\n\n----------------------------------------\n\nTITLE: Citing Viv Image Rendering in BibTeX Format\nDESCRIPTION: BibTeX citation format for referencing the Viv image rendering functionality. The citation refers to a 2022 Nature Methods article describing the Viv system for multiscale visualization of high-resolution multiplexed bioimaging data.\nSOURCE: https://github.com/vitessce/vitessce/blob/main/sites/docs/docs/about.md#2025-04-23_snippet_1\n\nLANGUAGE: bibtex\nCODE:\n```\n@article{manz2022viv,\n  title = {{Viv: multiscale visualization of high-resolution multiplexed bioimaging data on the web}},\n  author = {Manz, Trevor and Gold, Ilan and Patterson, Nathan Heath and McCallum, Chuck and Keller, Mark S. and Herr, II, Bruce W. and Börner, Kay and Spraggins, Jeffrey M. and Gehlenborg, Nils},\n  journal = {Nature Methods},\n  year = {2022},\n  month = may,\n  doi = {10.1038/s41592-022-01482-7}\n}\n```"
  }
]