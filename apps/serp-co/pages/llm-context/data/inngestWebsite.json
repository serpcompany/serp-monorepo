[
  {
    "owner": "inngest",
    "repo": "website",
    "content": "TITLE: Implementing AI Article Writer Function with Inngest\nDESCRIPTION: This function orchestrates the article writing process using Inngest step functions. It handles writing the initial content, inserting related links, and generating custom images, all with concurrency and rate limiting to manage LLM token usage.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/next-generation-ai-workflows.mdx#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// writer_agent.ts\nexport const writeArticle = client.createFunction(\n  { id: \"write-article\" },\n  {\n    event: Events.WRITE_ARTICLE,\n    concurrency: {\n      limit: 5,\n    },\n    rateLimit: {\n      // Avoid hitting tokens per minute rate limits\n      limit: 10,\n      period: \"1 minute\",\n    },\n  },\n  async ({ event, step }) => {\n    const { outline, keywords, targetAudience, customerId } =\n      event.data as CreateArticleRequest;\n\n    const article = await step.run(\"write-article\", async () => {\n      return writeArticle(outline, keywords, targetAudience);\n    });\n\n    const [linkedArticle, image] = await Promise.all([\n      step.run(\"insert-links\", async () => {\n        return insertRelatedLinks(article, customerId);\n      }),\n\n      step.run(\"generate-image\", async () => {\n        return generateCustomImage(article);\n      }),\n    ]);\n\n    return {\n      content: linkedArticle,\n      image,\n    };\n  }\n);\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Chained LLM Processing with Inngest and TypeScript\nDESCRIPTION: Demonstrates how to create a multi-step LLM processing chain using Inngest. The function processes input text through multiple LLM calls, generates summaries and titles, and stores results in a database. Includes automatic state management, retries, and error handling.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/running-chained-llms-typescript-in-production.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Inngest } from \"inngest\";\nimport { serve } from \"inngest/next\";\n\nconst inngest = new Inngest({ name: \"Chained LLM app\" });\n\nexport const chain = inngest.createFunction(\n  { name: \"Summarize chat and documents\" },\n  { event: \"api/chat.submitted\" },\n  async ({ event, step }) => {\n    const llm = new OpenAI();\n\n    const output = await step.run(\"Summarize input\", async () => {\n      const prompt = `You are an executive assistant.\n      You must summarize the given document accurately within 4 paragraphs.`;\n      return await llm.createCompletion({\n        model: \"gpt-3.5-turbo\",\n        prompt: `${prompt}: ${event.data.input}`,\n      });\n    });\n\n    const title = await step.run(\"Generate a title\", async () => {\n      const prompt = `You are a business leader who writes reports\non different topics.  Given the following report, generate a title\nwhich introduces the report in under 100 words`;\n\n      return await llm.createCompletion({\n        model: \"gpt-3.5-turbo\",\n        prompt: `${prompt}: ${output}`,\n      });\n    });\n\n    await step.run(\"Save to DB\", async () => {\n      await db.summaries.create({ output, title, requestID: event.data.requestID });\n    });\n\n    return { output, title };\n  },\n);\n\nexport const handler = serve(inngest, [chain]);\n\nawait inngest.send({\n  name: \"api/chat.submitted\",\n  data: {\n    requestID: \"ef2fc16e-5f9b-48fb-a996-e3adbf1accb9\",\n    input: \"<Add any data you want summarized here>\",\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Inngest Function with Throttling and Steps\nDESCRIPTION: This code snippet demonstrates how to create an Inngest Function with throttling and steps in TypeScript, Python, and Go. It includes event triggering, flow control, and step-based error handling and data reuse.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction({\n    id: \"sync-systems\",\n    // Easily add Throttling with Flow Control\n    throttle: { limit: 3, period: \"1min\"},\n  },\n  // A Function is triggered by events\n  { event: \"auto/sync.request\" },\n  async ({ step }) => {\n    // step is retried if it throws an error\n    const data = await step.run(\"get-data\", async () => {\n      return getDataFromExternalSource();\n    });\n\n    // Steps can reuse data from previous ones\n    await step.run(\"save-data\", async () => {\n      return db.syncs.insertOne(data);\n    });\n  }\n);\n```\n\nLANGUAGE: python\nCODE:\n```\n@inngest_client.create_function(\n    fn_id=\"sync-systems\",\n    # A Function is triggered by events\n    trigger=inngest.TriggerEvent(event=\"auto/sync.request\"),\n    # Easily add Throttling with Flow Control\n    throttle=inngest.Throttle(\n        count=2, period=datetime.timedelta(minutes=1)\n    ),\n)\ndef sync_systems(ctx: inngest.Context, step: inngest.StepSync) -> None:\n    # step is retried if it throws an error\n    data = step.run(\"Get data\", get_data_from_external_source)\n\n    # Steps can reuse data from previous ones\n    step.run(\"Save data\", db.syncs.insert_one, data)\n```\n\nLANGUAGE: go\nCODE:\n```\ninngestgo.CreateFunction(\n\tinngestgo.FunctionOpts{ID: \"sync-systems\", },\n\t// Functions are triggered by events\n\tinngestgo.EventTrigger(\"auto/sync.request\", nil),\n\tfunc(ctx context.Context, input inngestgo.Input[SyncRequestEvent]) (any, error) {\n\t\t// step is retried if it throws an error\n\t\tdata, err := step.Run(ctx, \"get-data\", func(ctx context.Context) (any, error) {\n\t\t\treturn getDataFromExternalSource()\n\t\t})\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\t// steps can reuse data from previous ones\n\t\t_, err = step.Run(ctx, \"save-data\", func(ctx context.Context) (any, error) {\n\t\t\treturn db.Syncs.InsertOne(data.(DataType))\n\t\t})\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\treturn nil, nil\n\t},\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Inngest Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an Inngest function in TypeScript that imports product images. It includes configuration, event triggering, and a handler with multiple steps for copying images to S3 and resizing them.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/inngest-functions.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inngest } from \"./client\";\n\nexport default inngest.createFunction(\n  // config\n  { id: \"import-product-images\" },\n  // trigger (event or cron)\n  { event: \"shop/product.imported\" },\n  // handler function\n  async ({ event, step }) => {\n    // Here goes the business logic\n    // By wrapping code in steps, it will be retried automatically on failure\n    const s3Urls = await step.run(\"copy-images-to-s3\", async () => {\n      return copyAllImagesToS3(event.data.imageURLs);\n    });\n    // You can include numerous steps in your function\n    await step.run('resize-images', async () => {\n      await resizer.bulk({ urls: s3Urls, quality: 0.9, maxWidth: 1024 });\n    })\n  };\n);\n```\n\n----------------------------------------\n\nTITLE: Creating an Inngest Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an Inngest function in TypeScript that imports product images. It includes configuration, event triggering, and a handler with multiple steps for copying images to S3 and resizing them.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/inngest-functions.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inngest } from \"./client\";\n\nexport default inngest.createFunction(\n  // config\n  { id: \"import-product-images\" },\n  // trigger (event or cron)\n  { event: \"shop/product.imported\" },\n  // handler function\n  async ({ event, step }) => {\n    // Here goes the business logic\n    // By wrapping code in steps, it will be retried automatically on failure\n    const s3Urls = await step.run(\"copy-images-to-s3\", async () => {\n      return copyAllImagesToS3(event.data.imageURLs);\n    });\n    // You can include numerous steps in your function\n    await step.run('resize-images', async () => {\n      await resizer.bulk({ urls: s3Urls, quality: 0.9, maxWidth: 1024 });\n    })\n  };\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Step Activation Email Function in Go\nDESCRIPTION: This code snippet demonstrates a complete implementation of a multi-step Inngest function in Go. It sends a welcome email, waits for a post creation event, and conditionally sends a reminder email if no post is created within 24 hours.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/multi-step-functions.mdx#2025-04-10_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/inngest/inngest-go\"\n    \"github.com/inngest/inngest-go/step\"\n)\n\ninngestgo.CreateFunction(\n    inngestgo.FunctionOpts{\n        ID: \"activation-email\",\n    },\n    inngestgo.EventTrigger(\"app/user.created\", nil),\n    func(ctx context.Context, input inngestgo.Input) (any, error) {\n        // Send welcome email\n        _, err := step.Run(\"send-welcome-email\", func() (any, error) {\n            return nil, sendEmail(input.Event.Data[\"user\"].(map[string]interface{})[\"email\"].(string), \"welcome\")\n        })\n        if err != nil {\n            return nil, err\n        }\n\n        // Wait for post creation event\n        postCreated, err := step.WaitForEvent(\"wait-for-post-creation\", &step.WaitForEventOpts{\n            Event:   \"app/post.created\",\n            Match:   \"data.user.id\",\n            Timeout: \"24h\",\n        })\n        if err != nil {\n            return nil, err\n        }\n\n        // If no post was created, send reminder email\n        if postCreated == nil {\n            _, err := step.Run(\"send-reminder-email\", func() (any, error) {\n                return nil, sendEmail(input.Event.Data[\"user\"].(map[string]interface{})[\"email\"].(string), \"reminder\")\n            })\n            if err != nil {\n                return nil, err\n            }\n        }\n\n        return nil, nil\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Workflow Function with Inngest in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a function in Inngest that processes integration data. It showcases key features including step-based execution with independent retries, adding sleep/delay periods, and running work in parallel with reliable retry mechanisms.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/inngest-add-super-powers-to-serverless-functions.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  { name: \"Import integration data\" },\n  { event: \"app/integration.connected\" },\n  async ({ event, step }) => {\n    // Steps are retried independently\n    const list = await step.run(\"Fetch data\", async () =>\n      await getList(event.data.id)\n    )\n    // Sleep, delay, whatever\n    await step.sleep(\"3d\")\n\n    // Run work in parallel - *reliably* w/ retries\n    await Promise.all(\n      list.map(item =>\n        step.run(\"Process item\", async () => await doSomething(item))\n      )\n    )\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Wrapping Vercel AI SDK with Inngest AI in TypeScript\nDESCRIPTION: Demonstrates how to wrap the Vercel AI SDK using Inngest's AI wrapper. It shows techniques for enabling prompt editing and step rerunning in the dev server by ensuring arguments are JSON serializable.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/steps-workflows/step-ai-orchestration.mdx#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateText as vercelGenerateText } from \"ai\";\nimport { openai as vercelOpenAI } from \"@ai-sdk/openai\";\n\nexport const vercelWrapGenerateText = inngest.createFunction(\n  { id: \"vercel-wrap-generate-text\" },\n  { event: \"vercel/wrap.generate.text\" },\n  async ({ event, step }) => {\n    //\n    // Will work but you will not be able to edit the prompt and rerun the step in the dev server.\n    await step.ai.wrap(\n      \"vercel-openai-generateText\",\n      vercelGenerateText,\n      {\n        model: vercelOpenAI(\"gpt-4o-mini\"),\n        prompt: \"Write a haiku about recursion in programming.\",\n      },\n    );\n\n    //\n    // Will work and you will be able to edit the prompt and rerun the step in the dev server because\n    // the arguments to step.ai.wrap are JSON serializable.\n    const args = {\n      model: \"gpt-4o-mini\",\n      prompt: \"Write a haiku about recursion in programming.\",\n    };\n\n    const gen = ({ model, prompt }: { model: string; prompt: string }) =>\n      vercelGenerateText({\n        model: vercelOpenAI(model),\n        prompt,\n      });\n\n    await step.ai.wrap(\"using-vercel-ai\", gen, args);\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Creating an Inngest Function for Workflow Generation\nDESCRIPTION: Implementation of an Inngest function that handles the workflow generation process using OpenAI's o1 model. This function includes throttling to respect API rate limits and is triggered by the 'contacts.uploaded' event.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/agentic-workflow-example.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default inngest.createFunction(\n  {\n    id: \"generate-import-workflow\",\n    throttle: {\n      limit: 5000,\n      period: \"1m\",\n    },\n  },\n  { event: \"contacts.uploaded\" },\n  async ({ event, step }) => {\n    const generatedStepsResult = await step.run(\n      \"openai-o1-generate-steps\",\n      async () => {\n         // ...\n      }\n    )\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Billing Workflow with TypeScript\nDESCRIPTION: Example implementation of a billing workflow using a durable workflow engine. Demonstrates key workflow primitives like step.run for reliable transactions, step.sleep for time-based operations, and parallel execution of steps. Includes error handling and retry logic for failed payments.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/how-durable-workflow-engines-work.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync ({ event, step }) => {\n  // Wait until the next billing date.\n  await step.sleepUntil(event.data.invoiceDate);\n\n  for (let i = 0; i < 3; i++) {\n    const charge = await step.run(\"Attempt charge\", async () => {\n      // Note: This throws an error and retries automatically if the charge\n      // cannot be attempted.  If a charge is attempted, the returning\n      // object will specify whether the charge is successful.\n      return await lib.stripe.charges.create({\n        user: event.data.accountId,\n        amount: event.data.amount,\n      });\n    });\n\n    if (charge.success) {\n      // Run two steps in parallel, both enqueued for reliability.\n      // Note that both steps finish before the function continues, and the output\n      // of both steps is available to the function in the future.\n      const [update, send] = await Promise.all([\n        step.run(\"Update DB\", async () => {\n          return await db.payments.upsert(charge)\n        }),\n        step.run(\"Send receipt\", async () => {\n          return await resend.emails.send({\n            to: event.user.email,\n            subject: \"Your receipt for Inngest\",\n          })\n        })\n      ]);\n      // Done.  Return the charge for observability.\n      return charge;\n    }\n\n    // Wait 24 hours and retry.\n    await step.sleep(\"24h\");\n  }\n\n  // If we're here, we've retried 3 times and we haven't been able to\n  // succeed with a payment. Handle the failure.\n  await step.run(\"Handle permanently failed payment\", async () => {\n    lib.accounts.suspend(event.data.accountId);\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Order Processing Workflow with Durable Functions\nDESCRIPTION: Demonstrates a basic order processing workflow using Inngest's SDK with step.run function to handle payment processing, inventory checks, shipment scheduling, and customer notifications.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/durable-functions-a-visual-javascript-primer.mdx#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst orderProcessingWorkflow = inngest.createFunction(\n  { id: \"Order Processing\" },\n  { event: \"order.placed\" },\n  async ({ step, event }) => {\n    const paymentConfirmation = await step.run(\"process-payment\", () =>\n      processPayment(event.data.orderDetails)\n    );\n\n    const inventoryStatus = await step.run(\"check-inventory\", () =>\n      checkInventory(event.data.orderDetails.items)\n    );\n\n     const shipmentDetails = await step.run(\"schedule-shipment\", () =>\n      scheduleShipment(event.data.orderDetails)\n    );\n\n    await step.run(\"send-notification\", () =>\n      sendNotification(\n        event.data.customerId,\n        \"Order Received\",\n        shipmentDetails.status\n      )\n    );\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating an Inngest Function for Blog Post Workflow in TypeScript\nDESCRIPTION: This code snippet creates an Inngest function that runs the blog post workflow automation. It initializes a workflow engine with action handlers and sets up triggers for blog post updates and publications. The function uses the workflow engine to process events and execute the appropriate actions.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/user-defined-workflows.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Engine } from \"@inngest/workflow-kit\";\n\nimport { loadWorkflow } from \"../loaders/workflow\";\nimport { inngest } from \"./client\";\nimport { actionsWithHandlers } from \"./workflowActionHandlers\";\n\nconst workflowEngine = new Engine({\n  actions: actionsWithHandlers,\n  loader: loadWorkflow,\n});\n\nexport default inngest.createFunction(\n  { id: \"blog-post-workflow\" },\n  // Triggers\n  // - When a blog post is set to \"review\"\n  // - When a blog post is published\n  [{ event: \"blog-post.updated\" }, { event: \"blog-post.published\" }],\n  async ({ event, step }) => {\n    // When `run` is called, the loader function is called with access to the event\n    await workflowEngine.run({ event, step });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Converting to a Multi-Step Function in TypeScript\nDESCRIPTION: Example showing how to transform a simple Inngest function into a multi-step function by using the step.run() method to define individual, independently retriable steps.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/multi-step-functions.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default inngest.createFunction(\n  { id: \"activation-email\" },\n  { event: \"app/user.created\" },\n  async ({ event, step }) => {\n    await step.run(\"send-welcome-email\", async () => {\n      return await sendEmail({ email: event.user.email, template: \"welcome\" });\n    });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Workflow Execution Function with Inngest and Next.js\nDESCRIPTION: This TypeScript function fetches a workflow from Sanity CMS and executes its actions using Inngest. It handles various action types including delays, sending emails, filtering, and sending Slack messages.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/user-defined-workflows-sanity-nextjs.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const newAccount = inngest.createFunction(\n  {id: 'new-account', name: 'New Account Created'},\n  {event: 'marketing/new-account'},\n  async ({event, step}) => {\n    const {accountId = 'default'} = event.data\n\n    const workflow = await step.run('load workflow from sanity', async () => {\n      return sanityClient.fetch(\n        `*[_type == \"workflow\" && trigger == \"new-account\" && accountId == \"${accountId}\"][0]{title, _id, _type, trigger, accountId, \"actions\": actions[]}`\n      )\n    })\n\n    let shouldContinue = Boolean(workflow)\n\n    while (shouldContinue && workflow.actions.length > 0) {\n      const action = workflow.actions.shift()\n      switch (action._type) {\n        case 'delay':\n          await step.sleep(`${action.duration}${action.unit}`)\n          break\n        case 'sendEmail':\n          const sendToAddress = event.data[action.to]\n          await step.run('send email', async () => {\n            return sendEmail({\n              to: sendToAddress,\n              template: action.template,\n              accountId,\n            })\n          })\n          break\n        case 'filter':\n          shouldContinue = await step.run('filter', async () => {\n            return (\n              action.field &&\n              event.data[action.field as string] === action.value\n            )\n          })\n          break\n        case 'slack':\n          await step.run('send slack message', async () => {\n            return postInSlack({\n              channelId: action.channel,\n              accountId,\n              notificationType: event.data.status,\n            })\n          })\n          break\n        default:\n          shouldContinue = false\n      }\n    }\n\n    return {status: 'complete', workflow: workflow.title, accountId}\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Contact Import Workflow with Inngest and TypeScript\nDESCRIPTION: This code defines an Inngest function that uses a workflow engine to process contact information. It includes a 'save' action that persists contacts to a database and a workflow engine setup that processes events. The function handles the 'contact.process' event to trigger the dynamic workflow execution.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/agentic-workflow-example.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Engine, EngineAction } from \"@inngest/workflow-kit\";\nimport { inngest } from \"../client\";\n\nexport const actions: EngineAction[] = [\n  // other actions ...\n  {\n    kind: \"save\",\n    name: \"Save contacts\",\n    description: \"save contact information to the database\",\n    handler: async ({ state, step }) => {\n      await step.run(\"save-contacts-to-database\", async () => {\n        const contacts = JSON.parse(state.get(\"contacts\"));\n        await sql.query(\n          `INSERT INTO contacts (Name,Position,Company,Email,Decider,Ranking) VALUES ${contacts\n            .map((contact: any) => {\n              return `('${contact.Name}', '${contact.Position}', '${contact.Company}', '${contact.Email}', ${contact.Decider}, ${contact.Ranking})`;\n            })\n            .join()}`\n        );\n      });\n    },\n  }\n];\n\nconst workflowEngine = new Engine({\n  actions,\n  loader: (event) => {\n    return event.data.workflowInstance;\n  },\n});\n\nexport default inngest.createFunction(\n  { id: \"import-contacts\" },\n  { event: \"contact.process\" },\n  async ({ event, step }) => {\n    // When `run` is called, the loader function is called with access to the event\n    await workflowEngine.run({ event, step });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Generating Campaign Core Concept with DeepSeek-R1\nDESCRIPTION: Implements the first step of the workflow which generates the campaign's core message and key themes. It uses the step.ai.wrap function to handle API calls, retries, and caching, with specific temperature settings for each model type.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/deepseek-r1-step-ai.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\nconst campaignConcept: any = await step.ai.wrap(\n    \"generate-campaign-concept\",\n    createCompletion,\n    {\n    model: model,\n    messages: [\n        {\n        role: \"user\",\n        content: `\n${MARKETING_EXPERT_PROMPT}\nCreate a marketing campaign concept for the following brand:\n${brandInfo}\nCampaign Goal: ${campaignGoal}\n\nThe concept should be culturally adaptable across multiple markets.\nProvide the core message and key themes.\n`,\n        },\n    ],\n    temperature: model.includes(\"deepseek\") ? 0.6 : 1,\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing an Inngest Function with Multiple Steps in TypeScript\nDESCRIPTION: This example demonstrates a three-step Inngest function that parses, normalizes, and imports contact data from a CSV file. Each step is executed separately and memoized, allowing the function to resume from failure points. The function uses step.run() to define discrete units of work that can be retried independently.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/how-functions-are-executed.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst fn = inngest.createFunction(\n  { id: \"import-contacts\" },\n  { event: \"contacts/csv.uploaded\" },\n  // The function handler:\n  async ({ event, step }) => {\n    const rows = await step.run(\"parse-csv\", async () => {\n      return await parseCsv(event.data.fileURI);\n    });\n\n    const normalizedRows = await step.run(\"normalize-raw-csv\", async () => {\n      const normalizedColumnMapping = getNormalizedColumnNames();\n      return normalizeRows(rows, normalizedColumnMapping);\n    });\n\n    const results = await step.run(\"input-contacts\", async () => {\n      return await importContacts(normalizedRows);\n    });\n\n    return { results };\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Typed Inngest Client (v3)\nDESCRIPTION: Demonstrates how to create a new Inngest client with TypeScript types for your events. This provides autocomplete and type safety for event names and data.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/typescript.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventSchemas, Inngest } from \"inngest\";\n\ntype UserSignup = {\n  data: {\n    email: string;\n    name: string;\n  };\n};\ntype Events = {\n  \"user/new.signup\": UserSignup;\n};\n\nexport const inngest = new Inngest({\n  id: \"my-app\",\n  schemas: new EventSchemas().fromRecord<Events>(),\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Video on Remote Workers with Dynamic Configuration in JavaScript\nDESCRIPTION: This step orchestrates the actual video rendering on remote workers with GPUs. It determines the appropriate renderer based on the attempt number (for retry logic), sets quality parameters based on the user's subscription bundle, and reports progress back to the database. It also handles HDR video settings if needed.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/banger-video-rendering-pipeline.mdx#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { videoFileURL, renderTime } = await step.run(\n  'render-video-to-s3',\n  async () => {\n    const outKey = await getVideoOutKey(videoId)\n\n    const userBundle = bundles.find((p) => p.key === updatedVideo.user.bundle)\n\n    if (!userBundle) {\n      throw new NonRetriableError('no bundle assigned to user')\n    }\n\n    await dbConnect()\n\n    const video = await VideoModel.findOne({\n      _id: videoId\n    }).populate('user')\n\n    if (!video) {\n      throw new NonRetriableError('no video found')\n    }\n\n    // attempt is provided by Inngest.\n    // if video fails to render from the first attempt, we will pick different worker\n    const renderer = await determineRenderer(video, attempt)\n\n    // CRF of the video based on user bundle\n    const constantRateFactor = determineRemotionConstantRateFactor(\n      video.user.bundle\n    )\n\n    const renderPriority = await determineQueuePriority(video.user.bundle)\n\n    logger.info(\n      `Rendering Remotion video with renderer ${renderer} and crf ${constantRateFactor}`\n    )\n\n    const renderedVideo = await renderVideo({\n      videoId: videoId,\n      priority: renderPriority,\n      renderOptions: {\n        crf: constantRateFactor,\n        concurrency: determineRemotionConcurrency(video),\n        ...(video.hdr && {\n          colorSpace: 'bt2020-ncl'\n        })\n      },\n      inputPropsOverride: {\n        ...video.videoSettings,\n        videoFormat: video.videoFormat\n      },\n      renderer,\n      audioURL: croppedMp3Url,\n      startTime: 0,\n      endTime: video.videoDuration,\n      outKey,\n      onProgress: async (progress) => {\n        await VideoModel.updateOne(\n          {\n            _id: videoId\n          },\n          { $set: { renderProgress: progress, status: 'processing' } }\n        )\n      }\n    })\n\n    return renderedVideo\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Function with Default Retries in Inngest\nDESCRIPTION: A basic Inngest function that demonstrates the default retry behavior. When the database write fails, the function will be retried up to 4 additional times until it succeeds, for a total of 5 attempts.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/error-retries/retries.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  { id: \"click-recorder\" },\n  { event: \"app/button.clicked\" },\n  async ({ event, attempt }) => {\n    await db.clicks.insertOne(event.data); // this code now retries!\n  },\n);\n```\n\nLANGUAGE: go\nCODE:\n```\ninngestgo.CreateFunction(\n\tinngestgo.FunctionOpts{ID: \"click-recorder\"},\n\tinngestgo.EventTrigger(\"app/button.clicked\", nil),\n\tfunc(ctx context.Context, input inngestgo.Input[ButtonClickedEvent]) (any, error) {\n\t\tresult, err := db.Clicks.InsertOne(input.Event[\"data\"])\n\t},\n)\n```\n\nLANGUAGE: python\nCODE:\n```\n@inngest_client.create_function(\n    fn_id=\"click-recorder\",\n    trigger=inngest.TriggerEvent(event=\"app/button.clicked\"),\n)\ndef record_click(ctx: inngest.Context) -> None:\n    db.clicks.insert_one(ctx.event.data)\n```\n\n----------------------------------------\n\nTITLE: Implementing Weekly Digest Schedule in Next.js with Inngest\nDESCRIPTION: Creates a scheduled function using Inngest to send weekly digest emails to users. The function is configured to run at 12:00 every Monday using cron syntax and includes error handling with return status.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/run-nextjs-functions-in-the-background.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Inngest } from \"inngest\";\nimport { serve } from \"inngest/next\"\nimport { sendWeeklyDigestEmailsToAllUsers } from \"../../someExistingCode\"\n\nconst inngest = new Inngest({ name: \"My app\" });\n\n// Your scheduled function\nconst weeklyDigest = inngest.createFunction(\n  { name: \"Send Weekly Digest\" },\n  { cron: \"0 12 * * 1\" }, // At 12:00 every Monday\n  async () => {\n    const results = await sendWeeklyDigestEmailsToAllUsers();\n    return {\n      message: `Weekly digests sent to ${results.sent} users successfully`,\n    }\n  }\n)\n\nexport default serve(\"My App\", [ weeklyDigest ]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Signup Drip Campaign with Inngest in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a signup drip campaign using Inngest. It includes sending a welcome email, waiting for user engagement, sending follow-up emails based on user actions, and offering a trial if the user hasn't upgraded.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/examples/email-sequence.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst signupDripCampaign = inngest.createFunction(\n  { id: \"signup-drip-campaign\" },\n  { event: \"app/signup.completed\" },\n  async ({ event, step }) => {\n    const { user } = event.data;\n    const { email, first_name } = user\n    const welcome = \"Welcome to ACME\";\n\n    const { id: emailId } = await step.run(\"welcome-email\", async () => {\n      return await sendEmail(\n        email,\n        welcome,\n        <div>\n          <h1>Welcome to ACME, {user.firstName}</h1>\n        </div>\n      );\n    });\n\n    // Wait up to 3 days for the user open the email and click any link in it\n    const clickEvent = await step.waitForEvent(\"wait-for-engagement\", {\n      event: \"resend/email.clicked\",\n      if: `async.data.email_id == ${emailId}`,\n      timeout: \"3 days\",\n    });\n\n    // if the user clicked the email, send them power user tips\n    if (clickEvent) {\n      await step.sleep(\"delay-power-tips-email\", \"1 day\");\n      await step.run(\"send-power-user-tips\", async () => {\n        await sendEmail(\n          email,\n          \"Supercharge your ACME experience\",\n          <h1>\n            Hello {firstName}, here are tips to get the most out of ACME\n          </h1>\n        );\n      });\n\n      // wait one more day before sending the trial offer\n      await step.sleep(\"delay-trial-email\", \"1 day\");\n    }\n\n    // check that the user is not already on the pro plan\n    const dbUser = db.users.byEmail(email);\n\n    if (dbUser.plan !== \"pro\") {\n      // send them a free trial offer\n      await step.run(\"trial-offer-email\", async () => {\n        await sendEmail(\n          email,\n          \"Free ACME Pro trial\",\n          <h1>\n            Hello {firstName}, try our Pro features for 30 days for free\n          </h1>\n        );\n      });\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Step Contact Import Workflow Using Inngest in TypeScript\nDESCRIPTION: This code demonstrates a complex workflow for importing contacts from a CSV file, with steps for validation, enrichment, user review, and database insertion. It showcases Inngest's step.run() for independent, retryable steps and step.waitForEvent() for event coordination, providing reliability and observability for critical background processes.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/build-more-reliable-workflows-with-events.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inngest } from \"./client\";\n\ninngest.createFunction(\n  { name: \"Contacts Import and enrichment\" },\n  { event: \"api/contact_list.uploaded\" },\n  async ({ event, step }) => {\n    const { isValid, errors } = await step.run(\"Validate upload contents\", async () => {\n      // Download the csv file, validate columns and data in each row\n      const { isValid, errors } = downloadAndValidateCSV(event.data.filename);\n      return { isValid, errors };\n    });\n\n    if (!isValid) {\n      return await step.run(\"Notify user of invalid contents\", async () =>\n        await sendContactsImportFailedEmail(event.user.id, errors)\n      );\n    }\n\n    // Enrichment may fail at times due to networking blip\n    await step.run(\"Enrich contracts information\", async () => {\n      // Call a third party API service to enriches each contact's info\n      // then uploads the data to an object store when complete\n    });\n\n    const listReviewedEvent = await step.waitForEvent(\"api/contact_list.reviewed\", {\n      timeout: \"7d\",\n      match: \"data.upload_id\", // data.upload_id is in both events and must match to proceed\n    })\n\n    if (listReviewedEvent.data.is_approved === false) {\n      return await step.run(\"Delete uploaded contact lists\", () => { /* ...*/ });\n    }\n\n    const { totalUsersAdded } = await step.run(\"Create contacts in CRM\", async () => {\n      const contacts = await downloadEnrichedContactList(event.data.filename);\n      const filteredContacts = applyFilters(listReviewedEvent.data.filters);\n      return await insertContactsIntoCRMDatabase(event.data.account_id, filteredContacts);\n    });\n\n    await step.run(\"Notify user of successful import\", async () =>\n      await sendContactsImportSuccessEmail(event.user.id, totalUsersAdded)\n    );\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering Card Group for Inngest Learning Resources\nDESCRIPTION: This JSX snippet creates a card group layout to display additional learning resources about Inngest events. Each card represents a blog post with an icon, title, and link to the full article.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/events-triggers.mdx#2025-04-10_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<CardGroup cols={2}>\n  <Card title=\"Blog post: How event Filtering works\" icon={<RiNewspaperLine className=\"text-basis h-4 w-4\"/>} href={'https://www.inngest.com/blog/accidentally-quadratic-evaluating-trillions-of-event-matches-in-real-time'}>\n    Accidentally Quadratic: Evaluating trillions of event matches in real-time\n  </Card>\n  <Card title=\"Blog post: Events in practice\" icon={<RiNewspaperLine className=\"text-basis h-4 w-4\"/>} href={'https://www.inngest.com/blog/nextjs-trpc-inngest'}>\n    Building an Event Driven Video Processing Workflow with Next.js, tRPC, and Inngest\n  </Card>\n</CardGroup>\n```\n\n----------------------------------------\n\nTITLE: AI Blog Post Generator with Conditional Event Waiting in TypeScript\nDESCRIPTION: Complex example using step.waitForEvent() with advanced event matching using the 'if' condition. Generates blog post ideas with AI, waits for user selection, then generates a full post based on the selected topic.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/steps-workflows/wait-for-event.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default inngest.createFunction(\n  { id: \"generate-blog-post-with-ai\" },\n  { event: \"ai/post.generator.requested\" },\n  async ({ event, step }) => {\n    // Generate a number of suggestions for topics with OpenAI\n    const generatedTopics = await step.run(\"generate-topic-ideas\", async () => {\n      const completion = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: helpers.topicIdeaPromptWrapper(event.data.prompt),\n        n: 3,\n      });\n      return {\n        completionId: completion.data.id,\n        topics: completion.data.choices,\n      };\n    });\n\n    // Send the topics to the user via Websockets so they can select one\n    // Also send the completion id so we can match that later\n    await step.run(\"send-user-topics\", () => {\n      pusher.sendToUser(event.data.userId, \"topics_generated\", {\n        sessionId: event.data.sessionId,\n        completionId: generatedTopics.completionId,\n        topics: generatedTopics.topics,\n      });\n    });\n\n    // Wait up to 5 minutes for the user to select a topic\n    // Ensuring the topic is from this batch of suggestions generated\n    const topicSelected = await step.waitForEvent(\"wait-for-topic-selection\", {\n      event: \"ai/post.topic.selected\",\n      timeout: \"5m\",\n      // \"async\" is the \"ai/post.topic.selected\" event here:\n      if: `async.data.completionId == \"${generatedTopics.completionId}\"`,\n    });\n\n    // If the user selected a topic within 5 minutes, \"topicSelected\" will\n    // be the event payload, otherwise it is null\n    if (topicSelected) {\n      // Now that we've confirmed the user selected their topic idea from\n      // this batch of suggestions, let's generate a blog post\n      await step.run(\"generate-blog-post-draft\", async () => {\n        const completion = await openai.createCompletion({\n          model: \"text-davinci-003\",\n          prompt: helpers.blogPostPromptWrapper(topicSelected.data.prompt),\n        });\n        // Do something with the blog post draft like save it or something else...\n        await blog.saveDraft(completion.data.choices[0]);\n      });\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating and Running an Agent Network with AgentKit in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a network of AI agents using AgentKit, define custom routing logic, and run the network with a prompt. It includes the setup of OpenAI models and conditional routing based on shared state.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/render-hacker-news-ai-agent.mdx#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { openai } from \"inngest\";\nimport {\n  createNetwork,\n  getDefaultRoutingAgent,\n} from \"@inngest/agent-kit\";\n\n\nconst model = openai({ model: \"gpt-4\" });\nconst network = createNetwork({\n  agents: [searchAgent.withModel(model), summarizerAgent.withModel(model)],\n  defaultModel: model,\n  maxIter: 4,\n  defaultRouter: ({ network }) => {\n    if (network?.state.kv.has(\"answers\")) {\n      return;\n    } else if (\n      network?.state.kv.has(\"search-result\") ||\n      network?.state.kv.has(\"trends-result\")\n    ) {\n      return summarizerAgent;\n    }\n    return getDefaultRoutingAgent();\n  },\n});\n\nconst result = await network.run(\n  `I am passionate about ${interest.name}. Answer the following questions: ${question.question}`\n);\n```\n\n----------------------------------------\n\nTITLE: Orchestrating Complete Writer Pipeline with Inngest\nDESCRIPTION: This pipeline function coordinates the entire content creation workflow, from keyword research and site indexing to article writing and publishing. It demonstrates how Inngest makes complex workflows manageable with step functions and event deduplication.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/next-generation-ai-workflows.mdx#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// writer_pipeline.ts\nexport const writerPipeline = client.createPipeline(\n  { id: \"writer-pipeline\" },\n  { event: Events.WRITER_PIPELINE },\n  async ({ event, step }) => {\n    const { keywords, url, targetAudience, customerId } = event.data as WriterPipelineRequest;\n\n    const [siteResult, ...outlineResults] = await Promise.all([\n      step.invoke(\"index-site\", async () => {\n        function:\n      }),\n      ...keywords.map(async (keyword) => {\n        return step.invoke(`write-outline-${keyword}`, {\n          function: writeOutline,\n          data: { keyword },\n        });\n      })\n    ]);\n\n    const articles = await Promise.all(\n      outlineResults.map(async (outline, index) => {\n        return step.invoke(`write-article-${index}`, {\n          function: writeArticle,\n          data: { outline, keywords, targetAudience},\n        });\n      })\n    );\n\n    await step.run(\"publish-articles\", async () => {\n      return publishArticles(articles);\n    });\n\n    await step.sendEvent(Events.SEND_EMAILS, {\n        data: {\n          customerId,\n        articles,\n      },\n      // Deduplication key\n      id: `send-emails-${customerId}`,\n    });\n\n    return {\n      siteResult,\n      articles,\n    };\n  }\n);\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Inngest Function with Step in TypeScript\nDESCRIPTION: Demonstrates how to create an Inngest function with a step using the TypeScript SDK. The step copies product images to S3 and is automatically retried on failure.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/inngest-steps.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default inngest.createFunction(\n  { id: \"import-product-images\" },\n  { event: \"shop/product.imported\" },\n  async ({ event, step }) => {\n    const uploadedImageURLs = await step.run(\n      // step ID\n      \"copy-images-to-s3\",\n      // other arguments, in this case: a handler\n      async () => {\n        return copyAllImagesToS3(event.data.imageURLs);\n    });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Inngest Function for OpenAI-Linear Bot Workflow\nDESCRIPTION: This code defines an Inngest function that manages the AI bot workflow. It creates a FunctionInvoker instance to handle interactions with OpenAI and processes messages using steps. The function can be cancelled via a specific event to prevent wasted execution.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/semi-autonomous-ai-agents.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const aibot = inngest.createFunction(\n    {\n        name: \"OpenAI Linear Bot\",\n        cancelOn: [\n            // Cancel this function if we receive a cancellation event with the same request ID can .\n            // This prevents wasted execution and increased costs.\n            {\n                event: \"api/chat.cancelled\",\n                if: \"event.data.requestId == async.data.requestId\",\n            },\n        ],\n    },\n    {event: \"api/chat.started\"},\n    async ({event, step}) => {\n        const invoker = new FunctionInvoker({\n            openai,\n            functions,\n            requestId: event.data.requestId,\n            });\n\n        const messages = await invoker.start(event.data.messages as AIMessage[], step);\n        return messages;\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Checkout Workflow with Inngest in TypeScript\nDESCRIPTION: This snippet demonstrates creating a durable checkout workflow function with Inngest. It handles inventory management, payment processing, inventory updates, and email notifications through defined steps that ensure reliability and fault tolerance.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/principles-of-durable-execution.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default inngest.createFunction(\n  { id: \"checkout\" },\n  { event: \"store/checkout.completed\" },\n  async ({ event, step }) => {\n    const inventoryClaim = await step.run(\"lock-item-in-inventory\", async () => {\n      return await db.inventoryClaim.insert({\n        sku: event.data.itemSKU,\n        count: event.data.count,\n        cartId: event.data.cart.id,\n        status: 'pending-payment'\n      });\n    });\n\n    const orderNumber = await step.run(\"perform-payment\", async () => {\n      return await paymentsAPI.charge({\n        paymentMethodId: event.data.paymentMethodId,\n        amount: event.data.cart.amount,\n      });\n    });\n\n    await step.run(\"update-inventory\", async () => {\n      return await db.inventoryClaim.update(inventoryClaim.id, {\n        status: 'pending-shipment',\n        orderNumber,\n      });\n    });\n\n    await step.run(\"send-user-email\", async () => {\n      await emails.send({\n        to: event.data.email,\n        subject: \"Thanks for your order!\",\n        body: templates.createReceiptEmail(event.data.cart, orderNumber)\n      });\n    });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-step Workflow for CSV Processing with Inngest in TypeScript\nDESCRIPTION: This snippet demonstrates how to use Inngest to create a multi-step function that processes a CSV file upload. The workflow includes steps for validating the upload contents, enriching address information, creating contacts in a CRM, and notifying users of the outcome. Each step runs independently and can be retried in isolation if it fails.\nSOURCE: https://github.com/inngest/website/blob/main/pages/patterns/_patterns/reliably-run-critical-workflows.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inngest } from \"./client\";\n\ninngest.createFunction(\n  { id: \"process-contacts-csv-upload\" },\n  { event: \"api/contact_list.uploaded\" },\n  async ({ event, step }) => {\n    const { isValid, errors } = await step.run(\n      \"validate-upload-contents\",\n      async () => {\n        const uploadFilename = event.data.filename;\n        // Download the csv file from object storage, validate columns and data in each row\n      }\n    );\n    if (!isValid) {\n      return await step.run(\n        \"notify-user-of-invalid-contents\",\n        async () => await sendContactsImportFailedEmail(event.user.id, errors)\n      );\n    }\n    await step.run(\"enrich-address-information\", async () => {\n      // Call a third party API service to enriches each contact's address information\n      // with zip codes, etc., then uploads the enriched data to the object store\n    });\n    const { totalUsersAdded } = await step.run(\n      \"create-contacts-in-crm\",\n      async () => {\n        // Download the enriched file and insert into contacts into the database\n      }\n    );\n    await step.run(\n      \"notify-user-of-successful-import\",\n      async () =>\n        await sendContactsImportSuccessEmail(event.user.id, totalUsersAdded)\n    );\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Step AI Workflow with Inngest in TypeScript\nDESCRIPTION: This code snippet illustrates a complex AI workflow using Inngest's multi-step functions. It chains together calls to OpenAI, Hugging Face, and Anthropic APIs, demonstrating how to enhance reliability and manage costs in AI-powered applications.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/ai-in-production-managing-capacity-with-flow-control.mdx#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport const userWorkflow = inngest.createFunction(\n  fnOptions,\n  fnListener,\n  async ({ event, step }) => {\n    const similar = await step.run(\"query-vectordb\", async () => {\n      // Query a vectorDB for similar results given input\n      const embedding = createEmbedding(event.data.input)\n      return await index.query({ vector: embedding, topK: 3 }).matches\n    })\n\n    const response = await step.run(\"generate-llm-response\", async () => {\n      // Inject our prompt given similar search results and event.data.input\n      const prompt = createAgentPrompt(similar, event.data.input)\n      return await llm.createCompletion({\n        model: \"gpt-3.5-turbo\",\n        prompt,\n      })\n    })\n\n    const entities = await step.run(\"extract-entities-hf\", async () => {\n      // Extract entities from the generated response using Hugging Face's named entity recognition model\n      let pipe = await pipeline(\n        \"entity-extraction\",\n        \"Xenova/bert-base-multilingual-uncased-sentiment\"\n      )\n      return await pipe(response)\n    })\n\n    const summary = await step.run(\"generate-summary-anthropic\", async () => {\n      // Generate a summary document using the extracted entities and the Anthropic API\n      const anthropic = new Anthropic()\n\n      const anthropicPrompt = `The following entities were mentioned in the response: ${entities.join(\n        \", \"\n      )}. Please generate a summary document based on these entities and the original response:\\n\\nResponse: ${response}`\n\n      return await anthropic.messages.create({\n        model: \"claude-3-opus-20240229\",\n        max_tokens: 1024,\n        messages: [{ role: \"user\", content: anthropicPrompt }],\n      })\n    })\n\n    await step.run(\"save-to-db\", async () => {\n      // Save the generated response, extracted entities, and summary to the database\n      await db.summaries.create({\n        requestID: event.data.requestID,\n        response,\n        entities,\n        summary,\n      })\n    })\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Agentic Workflow with Inngest and Weaviate\nDESCRIPTION: TypeScript implementation of the dinner generator workflow combining Inngest's workflow management with Weaviate's vector search capabilities. Includes recipe querying and allergy analysis.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/weaviate-ai-workflows.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { openai } from \"inngest\";\nimport { inngest } from \"./inngest-client\";\nimport { weaviate } from \"./weaviate-client\";\n\nexport const generateMeal = inngest.createFunction(\n  { id: \"generate-meal\", concurrency: 10 },\n  { event: \"meal.generate\" },\n  async ({ event, step }) => {\n    // retrieve the input parameters from our trigger event\n    const { participantsCount, preferences, cuisine_type } = event.data;\n\n    // Query relevant recipes based on cusine type preference\n    let relevantRecipes = await step.run(\"query-recipes\", async () => {\n      const collection = weaviate.collections.get(\n        \"Thefoodprocessorcuisinetype\"\n      );\n      const query = cuisine_type;\n      const result = await collection.query.nearText(query, {\n        limit: 10,\n      });\n      return result.objects.map((r) => r.properties.recipe).join(`\\n`);\n    });\n\n    const allergiesAnalysis = await step.ai.infer(\"Allergies analysis\", {\n      model: openai({ model: \"gpt-4\" }),\n      body: {\n        messages: [\n          {\n            role: \"system\",\n            content:\n              'Given the following list meal requirements, return a list of allergies, if not allergies, return \"not allergies\"',\n          },\n          {\n            role: \"user\",\n            content: preferences.join(\", \"),\n          },\n        ],\n        temperature: 0.7,\n      },\n    });\n    // ...\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Likes Notifications with Event Batching in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use Inngest's Event Batching feature to group and process post likes notifications. It showcases the implementation before the introduction of Batch Keys, highlighting the manual grouping of events by post ID.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/announcing-batch-keys.mdx#2025-04-10_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport const sendPostLikesNotifications = inngest.createFunction(\n  {\n    id: \"send-post-likes-notification\",\n    batchEvents: {\n      maxSize: 100, // let's group up to 100 post likes\n      timeout: \"60s\", // we want to group likes from the same 1min window\n    },\n  },\n  { event: \"post.liked\" },\n  async ({ events }) => {\n    // let's count the number of likes per post\n    const likes: Record<string, number> = events.reduce(\n      (acc, event) => {\n        if (!acc[event.data.post_id]) {\n          acc[event.data.post_id] = 1;\n        } else {\n          acc[event.data.post_id] += 1;\n        }\n        return acc;\n      },\n      {} as Record<string, number>,\n    );\n\n    for (let [postId, likesCount] of Object.entries(likes)) {\n\t    await notifyPostLikesCount(postId, likesCount);\n    }\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running Workflow Engine in an Inngest Function\nDESCRIPTION: This code demonstrates how to initialize a workflow Engine with custom actions and a loader function, and then run it within an Inngest Function that responds to a 'blog-post.updated' event. The loader function extracts workflow instance data from the incoming event.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/workflow-kit/engine.mdx#2025-04-10_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Engine, type Workflow } from \"@inngest/workflow-kit\";\n\nimport { inngest } from \"./client\";\nimport { actions } from \"./actions\";\nimport { loadWorkflowInstanceFromEvent } from \"./loaders\";\n\nconst workflowEngine = new Engine({\n  actions: actionsWithHandlers,\n  loader: (event) => {\n    return loadWorkflowInstanceFromEvent(event);\n  },\n});\n\nexport default inngest.createFunction(\n  { id: \"blog-post-workflow\" },\n  { event: \"blog-post.updated\" },\n  async ({ event, step }) => {\n    // When `run` is called,\n    //  the loader function is called with access to the event\n    await workflowEngine.run({ event, step });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Sleep Function in Inngest v3\nDESCRIPTION: Demonstrates various ways to use the step.sleep() function in Inngest v3, including using Temporal.Duration, string formats, and milliseconds.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/functions/step-sleep.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Sleep for 30 minutes\nconst thirtyMins = Temporal.Duration.from({ minutes: 5 });\nawait step.sleep(\"wait-with-temporal\", thirtyMins);\n\nawait step.sleep(\"wait-with-string\", \"30m\");\nawait step.sleep(\"wait-with-string-alt\", \"30 minutes\");\nawait step.sleep(\"wait-with-ms\", 30 * 60 * 1000);\n```\n\n----------------------------------------\n\nTITLE: Creating Multilingual Campaign Generation Workflow with Inngest\nDESCRIPTION: Initializes an Inngest workflow function that handles the marketing campaign generation process. It configures the OpenAI client to work with either DeepSeek-R1 or OpenAI models based on user input.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/deepseek-r1-step-ai.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst generateCampaign = inngest.createFunction(\n    { id: \"generate-multilingual-campaign\" },\n    { event: \"marketing/campaign.requested\" },\n    async ({ event, step }) => {\n    const { brandInfo, targetLanguages, campaignGoal, model } = event.data;\n\n    const openai = new OpenAI({\n    apiKey: model.includes(\"deepseek\")\n        ? process.env.DEEPSEEK_API_KEY\n        : process.env.OPENAI_API_KEY,\n    ...(model.includes(\"deepseek\")\n        ? { baseURL: process.env.DEEPSEEK_BASE_URL }\n        : {}),\n    });\n    const createCompletion = openai.chat.completions.create.bind(\n    openai.chat.completions\n    );\n\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Inngest Client - Basic Setup\nDESCRIPTION: Basic initialization of the Inngest client with version comparison between v2 and v3. Shows the fundamental configuration options for getting started.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/client/create.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inngest } from \"inngest\";\n\nconst inngest = new Inngest({\n  id: \"my-application\",\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inngest } from \"inngest\";\n\nconst inngest = new Inngest({\n  name: \"My application\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Shopify Products with Loop in Python\nDESCRIPTION: This Inngest function imports all products from a Shopify store into a local system using Python. It uses a while loop to iterate over all pages, combining products into a single list. Each iteration is managed using step.run() to ensure non-deterministic logic is encapsulated within a step.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/working-with-loops.mdx#2025-04-10_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@inngest.create_function(\n    id=\"shopify-product-import\",\n    trigger=inngest.TriggerEvent(event=\"shopify/import.requested\")\n)\nasync def shopify_product_import(ctx: inngest.Context, step: inngest.Step):\n    all_products = []\n    cursor = None\n    has_more = True\n\n    # Use the event's \"data\" to pass key info like IDs\n    # Note: in this example is deterministic across multiple requests\n    # If the returned results must stay in the same order, wrap the db call in step.run()\n    session = await database.get_shopify_session(ctx.event.data[\"store_id\"])\n\n    while has_more:\n        page = await step.run(f\"fetch-products-{cursor}\", lambda: shopify.Product.all(\n            session=session,\n            since_id=cursor\n        ))\n        # Combine all of the data into a single list\n        all_products.extend(page.products)\n        if len(page.products) == 50:\n            cursor = page.products[49].id\n        else:\n            has_more = False\n\n    # Now we have the entire list of products within all_products!\n```\n\n----------------------------------------\n\nTITLE: Implementing Failure Handlers in TypeScript for Inngest Functions\nDESCRIPTION: Demonstrates two approaches for handling function failures in TypeScript: using an onFailure handler for a specific function, and listening for the inngest/function.failed system event to catch all failures in the Inngest environment.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/error-retries/failure-handlers.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/* Option 1: give the inngest function an `onFailure` handler. */\ninngest.createFunction(\n  {\n    id: \"update-subscription\",\n    retries: 5,\n    onFailure: async ({ event, error }) => {\n      // if the subscription check fails after all retries, unsubscribe the user\n      await unsubscribeUser(event.data.userId);\n    },\n  },\n  { event: \"user/subscription.check\" },\n  async ({ event }) => { /* ... */ },\n);\n/* Option 2: Listens for the [`inngest/function.failed`](/docs/reference/functions/handling-failures#the-inngest-function-failed-event) system event to catch all failures in the inngest environment*/\ninngest.createFunction(\n  { id: \"handle-any-fn-failure\" },\n  { event: \"inngest/function.failed\" },\n  async ({ event }) => { /* ... */ },\n);\n```\n\n----------------------------------------\n\nTITLE: Triggering Other Functions with step.send_event() in Python\nDESCRIPTION: Demonstrates how to use the send_event method to emit events that trigger other functions. This method is useful when you want to trigger other functions but don't need to wait for their results, such as in fan-out scenarios.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/inngest-steps.mdx#2025-04-10_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport inngest\nfrom src.inngest.client import inngest_client\n\n@inngest_client.create_function(\n    fn_id=\"my_function\",\n    trigger=inngest.TriggerEvent(event=\"app/my_function\"),\n)\nasync def fn(\n    ctx: inngest.Context,\n    step: inngest.Step,\n) -> list[str]:\n    return await step.send_event(\"send\", inngest.Event(name=\"foo\"))\n```\n\n----------------------------------------\n\nTITLE: Creating Inngest Function to Handle Discord Bot Messages in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates creating an Inngest function that processes messages received from Discord. It uses step.run for reliable execution with automatic retries, calls an OpenAI endpoint to generate a response, and then sends the reply back to Discord.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/ai-personalization-and-the-future-of-developer-docs.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  { name: \"Handle Inngestabot message\" },\n  { event: \"inngestabot/message.received\" },\n  async ({ event, step }) => {\n    const { message } = event.data;\n\n    // Generate a reply using our OpenAI Codex endpoint\n    // OpenAI can sometimes error — `step.run` automatically retries on errors\n    const reply = await step.run(\"Generate reply from OpenAI\", async () => {\n      const res = await fetch(OPENAI_ENDPOINT, {\n        method: \"POST\",\n        body: JSON.stringify({ message: message.content }),\n      });\n\n      return await res.json();\n    });\n\n    // Parse and send the reply to Discord\n    await step.run(\"Send reply to Discord\", async () => {\n      return await bot.sendMessage(\n        message.channelId,\n        createDiscordMessageFromReply(reply)\n      );\n    });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Cross-Function Communication in Inngest using Python\nDESCRIPTION: Demonstrates how to create two Inngest functions where one function invokes another and handles its return value. Shows the setup of both the called function (fn_1) and the calling function (fn_2) with proper error handling and async execution.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/steps/invoke.mdx#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@inngest_client.create_function(\n    fn_id=\"fn-1\",\n    trigger=inngest.TriggerEvent(event=\"app/fn-1\"),\n)\nasync def fn_1(\n    ctx: inngest.Context,\n    step: inngest.Step,\n) -> None:\n    return \"Hello!\"\n\n@inngest_client.create_function(\n    fn_id=\"fn-2\",\n    trigger=inngest.TriggerEvent(event=\"app/fn-2\"),\n)\nasync def fn_2(\n    ctx: inngest.Context,\n    step: inngest.Step,\n) -> None:\n    output = await step.invoke(\n        \"invoke\",\n        function=fn_1,\n    )\n\n    # Prints \"Hello!\"\n    print(output)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Drip Email Campaign with Event Waiting in TypeScript\nDESCRIPTION: Advanced example of an onboarding email drip campaign that sends different emails based on whether the user completes onboarding within a specified timeframe. Uses step.waitForEvent() to monitor for completion events.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/steps-workflows/wait-for-event.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default inngest.createFunction(\n  { id: \"onboarding-email-drip-campaign\" },\n  { event: \"app/account.created\" },\n  async ({ event, step }) => {\n    // Send the user the welcome email immediately\n    await step.run(\"send-welcome-email\", async () => {\n      await sendEmail(event.user.email, \"welcome\");\n    });\n\n    // Wait up to 3 days for the user to complete the final onboarding step\n    // If the event is received within these 3 days, onboardingCompleted will be the\n    // event payload itself, if not it will be null\n    const onboardingCompleted = await step.waitForEvent(\"wait-for-onboarding\", {\n      event: \"app/onboarding.completed\",\n      timeout: \"3d\",\n      // The \"data.userId\" must match in both the \"app/account.created\" and\n      // the \"app/onboarding.completed\" events\n      match: \"data.userId\",\n    });\n\n    // If the user has not completed onboarding within 3 days, send them a nudge email\n    if (!onboardingCompleted) {\n      await step.run(\"send-onboarding-nudge-email\", async () => {\n        await sendEmail(event.user.email, \"onboarding_nudge\");\n      });\n    } else {\n      // If they have completed onboarding, send them a tips email\n      await step.run(\"send-tips-email\", async () => {\n        await sendEmail(event.user.email, \"new_user_tips\");\n      });\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Chunking Jobs for Parallel Processing in TypeScript with Inngest\nDESCRIPTION: Illustrates how to chunk large tasks and process them in parallel using Inngest. This example shows text summarization by splitting text into chunks, summarizing each chunk concurrently, and then aggregating the results.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/step-parallelism.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inngest } from \"inngest\";\n\nconst inngest = new Inngest({ id: \"signup-flow\" });\n\nexport const fn = inngest.createFunction(\n  { id: \"summarize-text\" },\n  { event: \"app/text.summarize\" },\n  async ({ event, step }) => {\n    const chunks = splitTextIntoChunks(event.data.text);\n\n    const summaries = await Promise.all(\n      chunks.map((chunk) =>\n        step.run(\"summarize-chunk\", () => summarizeChunk(chunk))\n      )\n    );\n\n    await step.run(\"summarize-summaries\", () => summarizeSummaries(summaries));\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Advanced Order Processing with Event Waiting\nDESCRIPTION: Extends the order processing workflow to include waiting for shipment confirmation using step.waitForEvent function, with timeout handling and conditional event matching.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/durable-functions-a-visual-javascript-primer.mdx#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst orderProcessingWorkflow = inngest.createFunction(\n  { id: \"Order Processing\" },\n  { event: \"order.placed\" },\n  async ({ step, event }) => {\n    const paymentConfirmation = await step.run(\"process-payment\", () =>\n      processPayment(event.data.orderDetails)\n    );\n\n    const inventoryStatus = await step.run(\"check-inventory\", () =>\n      checkInventory(event.data.orderDetails.items)\n    );\n\n    await step.run(\"schedule-shipment\", () =>\n      scheduleShipment(event.data.orderDetails)\n    );\n\n    await step.run(\"notify-customer\", () =>\n      sendNotification(event.data.customerId, \"Order Received\")\n    );\n\n    const shipment = await step.waitForEvent(\"wait-for-shipment-confirmation\", {\n      event: \"shipment/create\",\n      timeout: \"7d\",\n      if: \"event.data.id == async.data.orderId\",\n    });\n\n    if (shipment) {\n      await step.run(\"send-notification\", () =>\n        sendNotification(event.data.customerId, \"Order Shipped\")\n      );\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of step.run() in an Inngest Function\nDESCRIPTION: This example demonstrates how to use step.run() to create a retriable step for copying product images to S3 storage. The function is triggered by a 'shop/product.imported' event and executes the image copying operation as a named step.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/functions/step-run.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default inngest.createFunction(\n  { id: \"import-product-images\" },\n  { event: \"shop/product.imported\" },\n  async ({ event, step }) => {\n    const uploadedImageURLs = await step.run(\"copy-images-to-s3\", async () => {\n      return copyAllImagesToS3(event.data.imageURLs);\n    });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using step.run() Method in TypeScript\nDESCRIPTION: Shows how to use the step.run() method to execute a piece of code as a retriable step in an Inngest function. This method is used for running synchronous or asynchronous code that needs automatic retry on failure.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/inngest-steps.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default inngest.createFunction(\n  { id: \"import-product-images\" },\n  { event: \"shop/product.imported\" },\n  async ({ event, step }) => {\n    // Here goes the business logic\n    // By wrapping code in steps, it will be retried automatically on failure\n    const uploadedImageURLs = await step.run(\"copy-images-to-s3\", async () => {\n      return copyAllImagesToS3(event.data.imageURLs);\n    });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Steps in Inngest Functions\nDESCRIPTION: Demonstrates how to use Steps in Inngest Functions across TypeScript, Python, and Go. Steps are used to create checkpoints in workflows, enabling retries, parallelism, and extended execution times.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/steps-workflows.mdx#2025-04-10_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninngest.createFunction(\n  { id: \"sync-systems\" },\n  { event: \"auto/sync.request\" },\n  async ({ step }) => {\n    // By wrapping code in step.run, the code will be retried if it throws an error and when successfuly.\n    // It's result is saved to prevent unnecessary re-execution\n    const data = await step.run(\"get-data\", async () => {\n      return getDataFromExternalSource();\n    });\n\n    // Can also be retried up to 4 times\n    await step.run(\"save-data\", async () => {\n      return db.syncs.insertOne(data);\n    });\n  },\n);\n```\n\nLANGUAGE: Python\nCODE:\n```\n@inngest_client.create_function(\n    fn_id=\"sync-systems\",\n    trigger=inngest.TriggerEvent(event=\"auto/sync.request\"),\n)\ndef sync_systems(ctx: inngest.Context, step: inngest.StepSync) -> None:\n    # By wrapping code in step.run, the code will be retried if it throws an error and when successfuly.\n    # It's result is saved to prevent unnecessary re-execution\n    data = step.run(\"Get data\", get_data_from_external_source)\n\n    # Can also be retried up to 4 times\n    step.run(\"Save data\", db.syncs.insert_one, data)\n```\n\nLANGUAGE: Go\nCODE:\n```\ninngestgo.CreateFunction(\n\tinngestgo.FunctionOpts{ID: \"sync-systems\"},\n\tinngestgo.EventTrigger(\"auto/sync.request\", nil),\n\tfunc(ctx context.Context, input inngestgo.Input[SyncRequestEvent]) (any, error) {\n\t\t// By wrapping code in step.run, the code will be retried if it throws an error and when successfuly.\n\t\t// It's result is saved to prevent unnecessary re-execution\n\t\tdata, err := step.Run(ctx, \"get-data\", func(ctx context.Context) (any, error) {\n\t\t\treturn getDataFromExternalSource()\n\t\t})\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\t// can also be retried up to 4 times\n\t\t_, err = step.Run(ctx, \"save-data\", func(ctx context.Context) (any, error) {\n\t\t\treturn db.Syncs.InsertOne(data.(DataType))\n\t\t})\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\treturn nil, nil\n\t},\n)\n```\n\n----------------------------------------\n\nTITLE: Running Parallel Steps in TypeScript with Inngest\nDESCRIPTION: Demonstrates how to run steps in parallel using Promise.all() in an Inngest function. It shows a post-payment flow where email sending and user updating are executed concurrently.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/step-parallelism.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inngest } from \"inngest\";\n\nconst inngest = new Inngest({ id: \"signup-flow\" });\n\nexport const fn = inngest.createFunction(\n  { id: \"post-payment-flow\" },\n  { event: \"stripe/charge.created\" },\n  async ({ event, step }) => {\n    // These steps are not `awaited` and run in parallel when Promise.all\n    // is invoked.\n    const sendEmail = step.run(\"confirmation-email\", async () => {\n      const emailID = await sendEmail(event.data.email);\n      return emailID;\n    });\n\n    const updateUser = step.run(\"update-user\", async () => {\n      return db.updateUserWithCharge(event);\n    });\n\n    // Run both steps in parallel.  Once complete, Promise.all will return all\n    // parallelized state here.\n    //\n    // This ensures that all steps complete as fast as possible, and we still have\n    // access to each step's data once they're compelte.\n    const [emailID, updates] = await Promise.all([sendEmail, updateUser]);\n\n    return { emailID, updates };\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Sending Events for Asynchronous Processing with Inngest in JavaScript\nDESCRIPTION: This code demonstrates how to implement an API endpoint that handles critical-path operations synchronously while sending an event to Inngest for asynchronous background processing. The example shows connecting a data source and then dispatching an event to trigger background data backfill.\nSOURCE: https://github.com/inngest/website/blob/main/pages/patterns/_patterns/keeping-your-api-fast.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Inngest } from \"inngest\";\n\napp.post(\"/api/connectSource\", async (req, res) => {\n  // Your critical-path business logic for connecting the source for the user\n  const source = createSource(req.body);\n\n  // Send an event for what just happened with pertinent data to be handled async\n  const inngest = new Inngest(\"API\");\n  await inngest.send({\n    name: \"api/source.connected\",\n    data: { sourceId: source.id, userId: req.user.id },\n  });\n\n  res.json({\n    data: { sourceId: source.id },\n    message: \"Your source was connected successfully!\"\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Delays with step.sleep() in Python\nDESCRIPTION: Demonstrates how to use step.sleep() in Python to pause execution for a specified duration. This method is useful for adding delays or waiting for a specific amount of time before proceeding with the function execution.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/inngest-steps.mdx#2025-04-10_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport inngest\nfrom src.inngest.client import inngest_client\n\n@inngest_client.create_function(\n    fn_id=\"send-delayed-email\",\n    trigger=inngest.Trigger(event=\"app/user.signup\")\n)\nasync def send_delayed_email(ctx: inngest.Context, step: inngest.Step):\n    await step.sleep(\"wait-a-couple-of-days\", datetime.timedelta(days=2))\n    # Do something else\n```\n\n----------------------------------------\n\nTITLE: Processing Video with Durable Execution in TypeScript\nDESCRIPTION: This code demonstrates a durable function for video processing using Inngest. It handles transcription, summarization, and database storage with built-in concurrency control, prioritization based on billing plan, and guaranteed execution.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/queues-are-no-longer-the-right-abstraction.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const processVideo = inngest.createFunction(\n  {\n    name: \"Process video upload\", id: \"process-video\",\n    concurrency: {\n      limit: 1,\n      key: `event.data.userId`, // You can use any piece of data from the event payload\n    },\n    priority: {\n      run: \"event.data.billingPlan != 'free' ? 120 : 0\",\n    },\n\n  },\n  { event: \"video.uploaded\" },\n  async ({ event, step }) => {\n    const transcript = await step.run('transcribe-video', async () => {\n      return deepgram.transcribe(event.data.videoUrl);\n    });\n    const summary = await step.run('summarize-transcript', async () => {\n      return llm.createCompletion({\n        model: \"gpt-3.5-turbo\",\n        prompt: createSummaryPrompt(transcript),\n      });\n    });\n    await step.run('write-to-db', async () => {\n      await db.videoSummaries.upsert({\n        videoId: event.data.videoId,\n        transcript,\n        summary,\n      });\n    });\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Type-Safe Inngest Function\nDESCRIPTION: Demonstrates how to create a type-safe function using the Inngest client. The event data is fully typed, providing autocompletion and type checking.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/typescript.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inngest } from \"./client\";\n\nexport default inngest.createFunction(\n  { id: \"send-welcome-email\" },\n  { event: \"user/new.signup\" },\n  async ({ event }) => {\n    // \"event\" is fully typed to provide typesafety within this function\n    return await email.send(\"welcome\", event.data.email);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Dynamically Building Parallel Steps with Inngest Python SDK\nDESCRIPTION: Example showing how to dynamically build a tuple of parallel steps using functools.partial. This pattern allows for creating multiple parallel steps in a loop while avoiding Python's block scoping issues with lambda.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/steps/parallel.mdx#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@client.create_function(\n    fn_id=\"my-function\",\n    trigger=inngest.TriggerEvent(event=\"my-event\"),\n)\nasync def fn(\n    ctx: inngest.Context,\n    step: inngest.Step,\n) -> None:\n    parallel_steps = tuple[typing.Callable[[], typing.Awaitable[bool]]]()\n    for user_id in ctx.event.data[\"user_ids\"]:\n        parallel_steps += tuple(\n            [\n                functools.partial(\n                    step.run,\n                    f\"get-user-{user_id}\",\n                    functools.partial(update_user, user_id),\n                )\n            ]\n        )\n\n    updated_users = await step.parallel(parallel_steps)\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Triggers in Inngest Functions (TypeScript)\nDESCRIPTION: Example showing how to configure an Inngest function with multiple triggers including specific events and a scheduled cron job in TypeScript. The function will run when either user.created or user.updated events occur, or every morning at 5am.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/multiple-triggers.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  { id: \"resync-user-data\" },\n  [\n    { event: \"user.created\" },\n    { event: \"user.updated\" },\n    { cron: \"0 5 * * *\" }, // Every morning at 5am\n  ],\n  async ({ event, step }) => {\n    // ...\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing a Simple Inngest Function in TypeScript\nDESCRIPTION: A basic example showing how to create a simple function in Inngest that sends a welcome email when a user signs up, with error handling provided by Inngest's retryable execution.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/multi-step-functions.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inngest } from \"inngest\";\n\nconst inngest = new Inngest({ id: \"my-app\" });\n\nexport default inngest.createFunction(\n  { id: \"activation-email\" },\n  { event: \"app/user.created\" },\n  async ({ event }) => {\n    await sendEmail({ email: event.user.email, template: \"welcome\" });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Middleware in TypeScript\nDESCRIPTION: Demonstrates how to register middleware at both the client and function level in TypeScript, showing the execution order of multiple middleware.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/middleware.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst inngest = new Inngest({\n  id: \"my-app\",\n  middleware: [\n    logMiddleware, // This is executed first\n    errorMiddleware, // This is executed second\n  ],\n});\n\ninngest.createFunction(\n  {\n    id: \"example\",\n    middleware: [\n      dbSetupMiddleware, // This is executed third\n      datadogMiddleware, // This is executed fourth\n    ],\n  },\n  { event: \"test\" },\n  async () => {\n    // ...\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Running Parallel Steps in Inngest for Batch Processing\nDESCRIPTION: This snippet demonstrates how to optimize long-running functions by executing steps in parallel using Promise.all. It imports multiple products from Shopify simultaneously, making efficient use of concurrency to process large datasets while staying within timeout limits.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/vercel-long-running-background-functions.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  { id: \"shopify-product-import\", concurrency: 10 },\n  { event: \"shopify/import.requested\" },\n  async ({ event, step }) => {\n    const products = await step.run(\"fetch-all-products\", async () => {\n      return await shopify.rest.Product.all()\n    })\n    // Use Promise.all to kick off all steps in parallel!\n    Promise.all(\n      products.map((product) =>\n        step.run(\"import-product\", async () => {\n          await database.upsertProduct({\n            storeId: event.data.storeId,\n            product,\n          })\n        })\n      )\n    )\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Transferring Video to Mux using Inngest\nDESCRIPTION: This function imports a video to Mux. It supports various Mux import features like auto-generated captions, resolution tiers, and playback policies. The function also updates the job status using a PartyKit server for real-time client updates.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/mux-migrating-video-collections.mdx#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const transferVideo = inngest.createFunction(\n  { id: 'transfer-video', name: 'Transfer video - Mux', concurrency: 10 },\n  { event: 'truckload/video.transfer' },\n  async ({ event, step }) => {\n    const mux = new Mux({\n      tokenId: event.data.encrypted.destinationPlatform.credentials!.publicKey,\n      tokenSecret: event.data.encrypted.destinationPlatform.credentials!.secretKey,\n    });\n\n    const config = event.data.encrypted.destinationPlatform.config;\n\n    let input: Mux.Video.Assets.AssetCreateParams.Input[] = [{ url: event.data.encrypted.video.url }];\n\n    if (config?.autoGenerateCaptions) {\n      input[0].generated_subtitles = [{ name: 'English', language_code: 'en' }];\n    }\n\n    let payload: Mux.Video.Assets.AssetCreateParams = {\n      input,\n      passthrough: JSON.stringify({ jobId: event.data.jobId, sourceVideoId: event.data.encrypted.video.id }),\n    };\n\n    if (config?.maxResolutionTier) {\n      payload = { ...payload, max_resolution_tier: config.maxResolutionTier as any };\n    }\n\n    if (config?.playbackPolicy) {\n      payload = {\n        ...payload,\n        playback_policy: Array.isArray(config.playbackPolicy)\n          ? (config.playbackPolicy as PlaybackPolicy[])\n          : ([config.playbackPolicy] as PlaybackPolicy[]),\n      };\n    }\n\n    if (config?.encodingTier) {\n      payload = { ...payload, encoding_tier: config.encodingTier as any };\n    }\n\n    if (config?.testMode) {\n      payload = { ...payload, test: true };\n    }\n\n    const result = await mux.video.assets.create(payload);\n\n    await updateJobStatus(event.data.jobId, 'migration.video.progress', {\n      video: {\n        id: event.data.encrypted.video.id,\n        status: 'in-progress',\n        progress: 0,\n      },\n    });\n\n    return { status: 'success', result };\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing step.sendEvent() Method in TypeScript\nDESCRIPTION: Demonstrates the usage of step.sendEvent() method to send events to Inngest and trigger other functions. This example sends an activation event after user signup.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/inngest-steps.mdx#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default inngest.createFunction(\n  { id: \"user-onboarding\" },\n  { event: \"app/user.signup\" },\n  async ({ event, step }) => {\n    // Do something\n    await step.sendEvent(\"send-activation-event\", {\n      name: \"app/user.activated\",\n      data: { userId: event.data.userId },\n    });\n    // Do something else\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Multi-Step Error Handling and Rollback in TypeScript with Inngest\nDESCRIPTION: This TypeScript snippet demonstrates how to use try/catch blocks to handle errors across multiple steps in an Inngest function. It includes error detection for specific steps and performs a rollback operation if needed.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/improved-error-handling.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst sync = inngest.createFunction(\n  { id: \"provision-database\" },\n  { event: \"auto/sync.request\" },\n  async ({ event, step }) => {\n    const { databaseID, seedDataSetID } = event.data;\n\n    try {\n      const databaseURL = await step.run(\"create-database\", async () => {\n        return await infra.createDatabase(databaseID);\n      });\n\n      await step.run(\"seed-database\", async () => {\n        const db = await postgres.connect(databaseURL)\n        const seedData = await db.seedDataSets.find(seedDataSetID)\n        return await infra.insertSeedData(db, seedData)\n      })\n    } catch (err) {\n      // If the seeding failed, let's remove the database\n      if (err.stepId === \"seed-database\") {\n        await step.run(\"remove-database\", async () => {\n          return await infra.removeDatabase(databaseID);\n        })\n      }\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Inngest with RedwoodJS Handler\nDESCRIPTION: This snippet demonstrates how to set up Inngest with RedwoodJS, create an event-driven function, and serve it using the RedwoodJS handler. It shows the basic structure for creating and exporting an Inngest function handler in a RedwoodJS application.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/redwood-handler.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inngest } from 'inngest'\nimport { serve } from 'inngest/redwood'\n\nconst inngest = new Inngest({ id: 'my-redwood-app' });\n\nconst userAlert = inngest.createFunction(\n  { id: 'new-user-alert' },\n  { event: 'app/user.created' },\n  async ({ event }) => {\n    console.log(`New user @${event.data.username} created!`)\n  }\n)\n\nexport const handler = serve({\n  client: inngest,\n  functions: [userAlert],\n  servePath: \"/api/inngest\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Rate Limiting in Inngest Functions with TypeScript\nDESCRIPTION: This code demonstrates how to configure rate limiting for an Inngest Function that scrapes company information. The function is limited to run once every 4 hours for a given company ID, preventing costly and unnecessary operations during company update surges.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/rate-limit-debouncing-throttling-explained.mdx#2025-04-10_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport default inngest.createFunction(\n  {\n    id: \"scrape-company\",\n    rateLimit: {\n      limit: 1,\n      period: \"4h\",\n      key: \"event.data.company_id\",\n    },\n  },\n  { event: \"intercom/company.updated\" },\n  async ({ event, step }) => {\n    // This function will be rate limited\n    // It will only run once per 4 hours for a given event payload with matching company_id\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating an Inngest Function in Python\nDESCRIPTION: This snippet illustrates how to create an Inngest function in Python for importing product images. It includes configuration, event triggering, and a handler with multiple steps for copying images to S3 and resizing them.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/inngest-functions.mdx#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport inngest\nfrom src.inngest.client import inngest_client\n\n@inngest_client.create_function(\n    # config\n    id=\"import-product-images\",\n    # trigger (event or cron)\n    trigger=inngest.Trigger(event=\"shop/product.imported\")\n)\nasync def import_product_images(ctx: inngest.Context, step: inngest.Step):\n    # Here goes the business logic\n    # By wrapping code in steps, it will be retried automatically on failure\n    s3_urls = await step.run(\n        \"copy-images-to-s3\",\n        lambda: copy_all_images_to_s3(ctx.event.data[\"imageURLs\"])\n    )\n\n    # You can include numerous steps in your function\n    await step.run(\n        \"resize-images\",\n        lambda: resizer.bulk(\n            urls=s3_urls,\n            quality=0.9,\n            max_width=1024\n        )\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing User Onboarding Workflow with Event-Driven Functions in TypeScript\nDESCRIPTION: This example demonstrates creating an event-driven workflow function for user onboarding using Inngest. The function automatically runs when a user signs up, waits for profile completion events, and includes automatic cancellation logic when a user is deleted. It showcases event filtering, timeout handling, and conditional follow-up actions.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/how-durable-workflow-engines-work.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { lib } from \"src/lib\";\nimport { inngest } from \"src/inngest/client\"\n\nexport default inngest.createFunction(\n  {\n    id: \"user-onboarding\",\n    name: \"User onboarding campaign\"\n    cancelOn: [\n      // Automatically cancel this function any time the user is deleted.  This prevents\n      // developers from having to pass or store workflow run IDs around, or handle state\n      // checking within functions.\n      {\n        event: \"app/user.deleted\",\n        if: \"event.data.userId == async.data.userId\",\n      },\n    ]\n  },\n  { event: \"app/user.signup\" }, // Automatically run instantly any time this event is received\n  async ({ event, step }) => {\n    // Wait for the `app/user.profile.completed` event to be received with the same user\n    // ID for up to 24 hours.  Whenever the event is received, this function will be\n    // resumed and `profileComplete` will hold the received event data.  If this times out\n    // the variable will be `null`.\n    const profileComplete = await step.waitForEvent(\n      \"app/user.profile.completed\",\n      {\n        timeout: \"24h\",\n        if: `async.data.userId == \"${event.data.userId}\"`,\n      }\n    );\n\n    if (profileComplete === null) {\n      await step.run(\"send-followup\", async () => {\n        // Send the user a followup.\n      });\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Stripe Webhook Handler with Inngest for Invoice Payment Failures\nDESCRIPTION: This code snippet demonstrates how to create an Inngest function that processes Stripe's 'invoice.payment_failed' webhook events. The function handles user downgrade operations after a failed payment by retrieving the user, downgrading their plan, and sending a notification email.\nSOURCE: https://github.com/inngest/website/blob/main/pages/patterns/_patterns/build-reliable-webhooks.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { inngest } from \"./client\";\n\ninngest.createFunction(\n  { id: \"downgrade-customer\" },\n  { event: \"stripe/invoice.payment_failed\" },\n  async ({ event, step }) => {\n    const invoice = event.data.data.object;\n\n    const user = await step.run(\"load-user-via-stripe-id\", async () => {\n      return await getUserByStripeCustomerId(invoice.customer);\n    });\n\n    await step.run(\"downgrade-user\", async () => {\n      await billingUtils.downgradeUser(user.id);\n    });\n\n    await step.run(\"send-email\", async () => {\n      sendDowngradeEmail(user.email);\n    });\n\n    return `Downgraded user plan & ${user.id}`;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limiting for Inngest Function\nDESCRIPTION: This snippet demonstrates how to set up rate limiting for an Inngest function. It limits the function to run once every 4 hours for a given company ID from an Intercom webhook event.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/functions/rate-limit.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default inngest.createFunction(\n  {\n    id: \"synchronize-data\",\n    rateLimit: {\n      key: \"event.data.company_id\",\n      limit: 1,\n      period: \"4h\",\n    },\n  },\n  { event: \"intercom/company.updated\" },\n  async ({ event, step }) => {\n    // This function will be rate limited\n    // It will only run 1 once per 4 hours for a given event payload with matching company_id\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Invoking Functions in TypeScript with Inngest\nDESCRIPTION: Demonstrates how to create and invoke functions using Inngest in TypeScript. It shows the creation of a computeSquare function and its invocation from a mainFunction.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/invoking-functions-directly.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Some function we'll call\nconst computeSquare = inngest.createFunction(\n  { id: \"compute-square\" },\n  { event: \"calculate/square\" },\n  async ({ event }) => {\n    return { result: event.data.number * event.data.number }; // Result typed as { result: number }\n  }\n);\n\n// In this function, we'll call `computeSquare`\nconst mainFunction = inngest.createFunction(\n  { id: \"main-function\" },\n  { event: \"main/event\" },\n  async ({ step }) => {\n    const square = await step.invoke(\"compute-square-value\", {\n      function: computeSquare,\n      data: { number: 4 }, // input data is typed, requiring input if it's needed\n    });\n\n    return `Square of 4 is ${square.result}.`; // square.result is typed as number\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Invoking a Function by ID Across Apps in Python\nDESCRIPTION: This example shows how to use invoke_by_id to call a function in a different app. Two separate Inngest clients are created with different app IDs, and a function in the second app invokes a function in the first app by specifying both app_id and function_id.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/steps/invoke_by_id.mdx#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ninngest_client_1 = inngest.Inngest(app_id=\"app-1\")\ninngest_client_2 = inngest.Inngest(app_id=\"app-2\")\n\n@inngest_client_1.create_function(\n    fn_id=\"fn-1\",\n    trigger=inngest.TriggerEvent(event=\"app/fn-1\"),\n)\nasync def fn_1(\n    ctx: inngest.Context,\n    step: inngest.Step,\n) -> str:\n    return \"Hello!\"\n\n@inngest_client_2.create_function(\n    fn_id=\"fn-2\",\n    trigger=inngest.TriggerEvent(event=\"app/fn-2\"),\n)\nasync def fn_2(\n    ctx: inngest.Context,\n    step: inngest.Step,\n) -> None:\n    output = step.invoke_by_id(\n        \"invoke\",\n        app_id=\"app-1\",\n        function_id=\"fn-1\",\n    )\n\n    # Prints \"Hello!\"\n    print(output)\n```\n\n----------------------------------------\n\nTITLE: Implementing Fan-Out Pattern with Inngest in TypeScript\nDESCRIPTION: This code snippet demonstrates how to implement the fan-out pattern using Inngest. It includes two functions: a scheduled cron job that dispatches multiple notifications, and an event-triggered function that posts individual notifications to Slack. The cron job uses the inngest.send() method to trigger multiple parallel jobs.\nSOURCE: https://github.com/inngest/website/blob/main/pages/patterns/_patterns/reliable-scheduling-systems.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inngest } from \"./client\";\n\nconst inngest = new Inngest({ id: \"scheduling-backend\" });\n\n// A scheduled function uses the current time to find notifications to send\nconst slackCron = inngest.createFunction(\n  { id: \"slack-notification-cron\" },\n  { cron: \"0 9,12 * * MON,FRI\" },\n  async () => {\n    const notifications = await getNotificationsToRun();\n\n    const events = notifications.map((notification) => ({\n      name: \"app/notification.dispatched\",\n      data: { notification },\n    }));\n\n    // Send an array of events to Inngest, triggering many jobs in parallel.\n    await inngest.send(events);\n\n    return `${notifications.length} notifications dispatched`;\n  }\n);\n\n// A function runs for every app/notification.dispatched event to\n// post the notification to Slack\nconst postSlackNotification = inngest.createFunction(\n  { id: \"send-slack-notification\" },\n  { event: \"app/notification.dispatched\" },\n  async ({ event }) => {\n    const reportData = getAccountReportData(event.data.notification.accountId);\n\n    await app.client.chat.postMessage({\n      channel: event.data.notification.slackChannelId,\n      blocks: generateReportSlackBlocks(reportData),\n      // ...\n    });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Sleep Function in Inngest Python SDK\nDESCRIPTION: This example demonstrates how to create and use the sleep function within an Inngest function. The function sleeps for 2 seconds using a datetime.timedelta object. This pattern is useful for introducing intentional delays in function execution.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/steps/sleep.mdx#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@inngest_client.create_function(\n    fn_id=\"my_function\",\n    trigger=inngest.TriggerEvent(event=\"app/my_function\"),\n)\nasync def fn(\n    ctx: inngest.Context,\n    step: inngest.Step,\n) -> None:\n    await step.sleep(\"zzz\", datetime.timedelta(seconds=2))\n```\n\n----------------------------------------\n\nTITLE: Initiating Migration Process with Inngest Function in JavaScript\nDESCRIPTION: This function initiates the migration process by retrieving a list of videos from the source platform using pagination, then dispatching individual processing events for each video. It dynamically selects the fetching function based on the source platform identifier.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/mux-migrating-video-collections.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const initiateMigration = inngest.createFunction(\n  { id: 'initiate-migration' },\n  { event: 'truckload/migration.init' },\n  async ({ event, step }) => {\n    let jobId = event.id;\n    let hasMorePages = true;\n    let page = 1;\n    let nextPageNumber: number | undefined = undefined;\n    let nextPageToken: string | null | undefined = undefined;\n    let videoList: Video[] = [];\n\n    // use the source platform id to conditionally set the fetch page function\n    const sourcePlatformId = event.data.encrypted.sourcePlatform.id;\n    const fetchPageFn = providerFns[sourcePlatformId].fetchPage;\n\n    while (hasMorePages && event.data.encrypted.sourcePlatform.credentials) {\n      const { cursor, isTruncated, videos } = await step.invoke(`fetch-page-${page}`, {\n        function: fetchPageFn,\n        data: {\n          jobId: jobId!,\n          encrypted: event.data.encrypted.sourcePlatform.credentials,\n          nextPageToken,\n          nextPageNumber\n        },\n      });\n\n      videoList = videoList.concat(videos);\n      nextPageToken = cursor;\n\n      if (!isTruncated) {\n        hasMorePages = false;\n      } else {\n        page++;\n      }\n    }\n\n    const videoEvents = videoList.map((video): Events['truckload/video.process'] => ({\n      name: 'truckload/video.process',\n      data: {\n        jobId: jobId!,\n        encrypted: {\n          sourcePlatform: event.data.encrypted.sourcePlatform,\n          destinationPlatform: event.data.encrypted.destinationPlatform,\n          video,\n        },\n      },\n    }));\n\n    await step.sendEvent('process-videos', videoEvents);\n\n    return { message: 'migration initiated', videosMigrated: videoList.length };\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limiting for Inngest Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up rate limiting for an Inngest function in TypeScript. It limits the function to run once every 4 hours for a given company ID.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/rate-limiting.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default inngest.createFunction(\n  {\n    id: \"synchronize-data\",\n    rateLimit: {\n      limit: 1,\n      period: \"4h\",\n      key: \"event.data.company_id\",\n    },\n  },\n  { event: \"intercom/company.updated\" },\n  async ({ event, step }) => {\n    // This function will be rate limited\n    // It will only run once per 4 hours for a given event payload with matching company_id\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Rate Limiting for Inngest Function in Go\nDESCRIPTION: This code snippet shows how to implement rate limiting for an Inngest function in Go. It configures the function to run only once every 4 hours for a specific company ID.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/rate-limiting.mdx#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ninngestgo.CreateFunction(\n  &inngestgo.FunctionOpts{\n    ID: \"synchronize-data\",\n    RateLimit: &inngestgo.RateLimit{\n      Limit: 1,\n      Period: 4 * time.Hour,\n      Key: inngestgo.StrPtr(\"event.data.company_id\"),\n    },\n  },\n  inngestgo.EventTrigger(\"intercom/company.updated\", nil),\n  func(ctx context.Context, input inngestgo.Input) (any, error) {\n    // This function will be rate limited to 1 run per 4 hours for a given event payload with matching company_id\n    return nil, nil\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Defining an Inngest Function with Multiple Triggers in Python\nDESCRIPTION: This example shows how to create an Inngest function with multiple event triggers using a list of TriggerEvent objects.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/functions/create.mdx#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport inngest\n\n@inngest_client.create_function(\n    fn_id=\"import-product-images\",\n    trigger=[\n      inngest.TriggerEvent(event=\"shop/product.imported\"),\n      inngest.TriggerEvent(event=\"shop/product.updated\"),\n    ],\n)\nasync def fn(ctx: inngest.Context, step: inngest.Step):\n    # Your function code\n```\n\n----------------------------------------\n\nTITLE: Implementing User Onboarding Workflow with Inngest in TypeScript\nDESCRIPTION: A TypeScript function that handles user creation events by sending a welcome email, waiting for a specific follow-up event within a timeout period, and then sending either a nudge email or congratulatory email based on the user's actions.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/lifecycle-emails-with-resend.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const userCreated = inngest.createFunction(\n  { id: \"user-created\" },\n  { event: \"user/created\" },\n  async ({ event, step }) => {\n    const { email } = event.user;\n\n    await step.run(\"send-welcome-email\", async () => {\n      return sendEmail({\n        to: email,\n        subject: \"Welcome to our app!\",\n        body: \"<p>Thanks for signing up!</p>\",\n      });\n    });\n\n    const completedAction = await step.waitForEvent(\"user/created.document\", {\n      timeout: \"1m\",\n      if: \"event.user.email == async.user.email\",\n    });\n\n    if (!completedAction) {\n      await step.run(\"send-nudge-email\", async () => {\n        return sendEmail({\n          to: email,\n          subject: \"How can we help!\",\n          body: \"<p>What can we do better? We are always here to help you suceed.</p>\",\n        });\n      });\n    } else {\n      await step.run(\"send-congrats-email\", async () => {\n        return sendEmail({\n          to: email,\n          subject: \"You did it!\",\n          body: \"<p>We are so glad figured it out! It's challenging to do anything in this rough and tumble world so congrats on that.</p>\",\n        });\n      });\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Functions for Parallel Execution with Inngest in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create multiple functions in Inngest that subscribe to the same event ('app/user.created'). Each function runs independently and in parallel when the event is received, allowing for efficient fan-out implementation.\nSOURCE: https://github.com/inngest/website/blob/main/pages/patterns/_patterns/running-functions-in-parallel.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inngest } from \"@/inngest\";\n\nconst funcA = inngest.createFunction(\n  { id: \"a\" },\n  { event: \"app/user.created\" },\n  ({ event }) => {\n    /* Your logic runs on signup here */\n  }\n);\n\nconst funcB = inngest.createFunction(\n  { id: \"b\" },\n  { event: \"app/user.created\" },\n  ({ event }) => {\n    /* And this function runs in parallel on signup */\n  }\n);\n\nconst funcC = inngest.createFunction(\n  { id: \"c\" },\n  { event: \"app/user.created\" },\n  ({ event }) => {\n    /* This function _also_ runs at the same time */\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Sleep Until Functionality in TypeScript v3\nDESCRIPTION: Examples of using step.sleepUntil() in v3 to pause execution until specific dates and times. Shows usage with different datetime formats including Date objects, ISO strings, and Temporal API.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/functions/step-sleep-until.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Sleep until the new year\nawait step.sleepUntil(\"happy-new-year\", \"2024-01-01\");\n\n// Sleep until September ends\nawait step.sleepUntil(\"wake-me-up\", \"2023-09-30T11:59:59\");\n\n// Sleep until the end of the this week\nconst date = dayjs().endOf(\"week\").toDate();\nawait step.sleepUntil(\"wait-for-end-of-the-week\", date);\n\n// Sleep until tea time in London\nconst teaTime = Temporal.ZonedDateTime.from(\"2025-05-01T16:00:00+01:00[Europe/London]\");\nawait step.sleepUntil(\"british-tea-time\", teaTime);\n\n// Sleep until the end of the day\nconst now = Temporal.Now.instant();\nconst endOfDay = now.round({ smallestUnit: \"day\", roundingMode: \"ceil\" });\nawait step.sleepUntil(\"done-for-today\", endOfDay);\n```\n\n----------------------------------------\n\nTITLE: Implementing step.sleep() Method in TypeScript\nDESCRIPTION: Demonstrates the usage of step.sleep() method to pause execution for a specified duration without consuming compute resources. This example shows how to add a delay of two days in a function.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/inngest-steps.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default inngest.createFunction(\n  { id: \"send-delayed-email\" },\n  { event: \"app/user.signup\" },\n  async ({ event, step }) => {\n    await step.sleep(\"wait-a-couple-of-days\", \"2d\");\n    // Do something else\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Invoking a Function Directly in Inngest\nDESCRIPTION: Shows how to invoke an Inngest function directly using step.invoke() with a function definition. The code demonstrates passing the function object and data to the invoke method.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/functions/step-invoke.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst resultFromDirectCall = await step.invoke(\"invoke-by-definition\", {\n  function: anotherFunction,\n  data: { ... },\n});\n```\n\n----------------------------------------\n\nTITLE: Cancellation Event Example for Inngest Function\nDESCRIPTION: This JSON snippet shows an example of an event that would cancel the Inngest function. It matches the userId from the trigger event, demonstrating how cancelOn works.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/typescript/functions/cancel-on.mdx#2025-04-10_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"app/user.deleted\",\n  \"data\": {\n    \"userId\": \"123\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Long-running Background Functions with Inngest on Vercel\nDESCRIPTION: This code demonstrates how to create a function that invites users from a waiting list, implementing multiple steps that can exceed Vercel's timeout limits. The function fetches emails, creates invite codes, and sends emails as separate steps that are orchestrated by Inngest.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/vercel-long-running-background-functions.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default inngest.createFunction(\n  { id: \"invite-waiting-list\" },\n  { event: \"invite.users\" },\n  async ({ event, step }) => {\n    const emails = await step.run(\"fetch-waiting-list\", async () => {\n      const data = await typeformAPI.responses.list({\n        after: event.data.from,\n        until: event.data.until,\n        pageSize: 1000,\n      });\n      return data.items.map(i => i.answers.find(a => a.email).email)\n    });\n\n    for (let email of emails) {\n      const inviteCode = await step.run(\"create-invite-code\", async () => {\n        return await createInviteCodeAndSaveInDatabase(email);\n      });\n      await step.run(\"send-invite-email\", async () => {\n        return await emails.sendInviteEmail({ email, inviteCode });\n      });\n    }\n\n    return { message: `Successfully invited ${emails.length} users` }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Sleep Until Functionality in TypeScript v2\nDESCRIPTION: Legacy implementation of step.sleepUntil() in v2, showing simpler usage without step IDs. Supports basic datetime strings and Date objects.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/functions/step-sleep-until.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Sleep until the new year\nawait step.sleepUntil(\"2024-01-01\");\n\n// Sleep until September ends\nawait step.sleepUntil(\"2023-09-30T11:59:59\");\n\n// Sleep until the end of the this week\nconst date = dayjs().endOf('week').toDate();\nawait step.sleepUntil(date)\n```\n\n----------------------------------------\n\nTITLE: Implementing Rate-Limited Durable Function in Next.js\nDESCRIPTION: Example demonstrating how to create a rate-limited Durable Function for domain verification with throttling configuration to limit API calls to 2 requests per second. The function uses the Inngest framework and includes throttle settings to prevent API rate limit issues.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/nextjs-serverless-vs-durable-functions.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default inngest.createFunction(\n  {\n    id: \"account-verify-domain\",\n    // we limit this Durable Function to 2 call/s\n    throttle: {\n      limit: 2,\n      period: \"1s\",\n    },\n  },\n  { event: \"account/verify-domain\" },\n  async ({ event, step }) => {\n    // ...\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Email Drip Campaign with step.sleep in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a multi-step email drip campaign that sends emails over several days. It uses the step.sleep method to pause execution between emails, with configured delays of 2 and 3 days respectively.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/vercel-long-running-background-functions.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  { id: \"new-user-email-drip-campaign\" },\n  { event: \"api/account.created\" },\n  async ({ event, step }) => {\n    await step.run(\"send-welcome-email\", async () =>\n      await sendWelcomeEmail(event.user.email)\n    )\n\n    await step.sleep(\"delay-second-email\", \"2d\")\n\n    await step.run(\"send-product-tips-email\", async () =>\n      await sendTipsEmail(event.user.email)\n    )\n\n    await step.sleep(\"delay-third-email\", \"3d\")\n\n    await step.run(\"send-how-tos-email\", async () =>\n      await sentHowTosEmail(event.user.email)\n    )\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Sending Events from Fastify to Trigger Inngest Functions\nDESCRIPTION: Configures a Fastify server with an API endpoint that sends an event to Inngest. The code demonstrates how to register the Inngest plugin, create a route handler, and send a 'test/hello.world' event with user data.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/getting-started/nodejs-quick-start.mdx#2025-04-10_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport Fastify from \"fastify\";\nimport { fastifyPlugin } from \"inngest/fastify\";\nimport { inngest, functions } from \"./src/inngest\"\n\nconst fastify = Fastify({\n  logger: true,\n});\nfastify.register(fastifyPlugin, { client: inngest, functions, options: {} });\n\n// Create a new route:\nfastify.get(\"/api/hello\", async function (request, reply) {\n  await inngest.send({\n    name: \"test/hello.world\",\n    data: {\n      email: \"testUser@example.com\",\n    },\n  });\n  return { message: \"Event sent!\" };\n})\n\nfastify.listen({ port: 3000 }, function (err, address) {\n  if (err) {\n    fastify.log.error(err);\n    process.exit(1);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Drip Campaign with Inngest and Resend\nDESCRIPTION: A sophisticated email campaign function that sends a welcome email, waits for email engagement events, and customizes follow-up emails based on user behavior. It demonstrates step.waitForEvent to respond to Resend webhook events and conditional logic for personalization.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/resend-webhook-events.mdx#2025-04-10_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst signupDripCampaign = inngest.createFunction(\n  { id: \"signup-drip-campaign\" },\n  { event: \"app/signup.completed\" },\n  async ({ event, step }) => {\n    const { user } = event.data;\n    const { email, first_name } = user\n    const welcome = \"Welcome to ACME\";\n\n    const { id: emailId } = await step.run(\"welcome-email\", async () => {\n      return await sendEmail(\n        email,\n        welcome,\n        <div>\n          <h1>Welcome to ACME, {user.firstName}</h1>\n        </div>\n      );\n    });\n\n    // Wait up to 3 days for the user open the email and click any link in it\n    const clickEvent = await step.waitForEvent(\"wait-for-engagement\", {\n      event: \"resend/email.clicked\",\n\t\t\tif: `async.data.email_id == ${emailId}`,\n      timeout: \"3 days\",\n    });\n\n    // if the user clicked the email, send them power user tips\n    if (clickEvent) {\n      await step.sleep(\"delay-power-tips-email\", \"1 day\");\n      await step.run(\"send-power-user-tips\", async () => {\n        await sendEmail(\n          email,\n          \"Supercharge your ACME experience\",\n          <h1>\n            Hello {firstName}, here are tips to get the most out of ACME\n          </h1>\n        );\n      });\n\n      // wait one more day before sending the trial offer\n      await step.sleep(\"delay-trial-email\", \"1 day\");\n    }\n\n    // check that the user is not already on the pro plan\n    const dbUser = db.users.byEmail(email);\n\n    if (dbUser.plan !== \"pro\") {\n      // send them a free trial offer\n      await step.run(\"trial-offer-email\", async () => {\n        await sendEmail(\n          email,\n          \"Free ACME Pro trial\",\n          <h1>\n            Hello {firstName}, try our Pro features for 30 days for free\n          </h1>\n        );\n      });\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: AutomationEditor Component Using Inngest Workflow Kit UI\nDESCRIPTION: React component that implements the workflow editor interface using components from Inngest's Workflow Kit. It maintains state for the workflow draft and provides an onChange handler to update the workflow configuration when users make changes.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/user-defined-workflows.mdx#2025-04-10_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from \"react\";\nimport { Editor, Provider, Sidebar } from \"@inngest/workflow-kit/ui\";\n\nimport { actions } from \"@/inngest/workflowActions\";\nimport { type Workflow } from \"@/lib/supabase/types\";\n\nimport \"@inngest/workflow-kit/ui/ui.css\";\nimport \"@xyflow/react/dist/style.css\";\n\nexport const AutomationEditor = ({ workflow }: { workflow: Workflow }) => {\n  const [workflowDraft, updateWorkflowDraft] =\n    useState<typeof workflow>(workflow);\n\n  return (\n    <Provider\n      key={workflowDraft?.id}\n      workflow={workflowDraft?.workflow}\n      trigger={{\n        event: {\n          name: workflowDraft.trigger,\n        },\n      }}\n      availableActions={actions}\n      onChange={(updated) => {\n        updateWorkflowDraft({\n          ...workflowDraft,\n          workflow: updated,\n        });\n      }}\n    >\n      <Editor>\n        <Sidebar position=\"right\"/>\n      </Editor>\n    </Provider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing step.waitForEvent() Method in TypeScript\nDESCRIPTION: Demonstrates the usage of step.waitForEvent() method to pause execution until a specific event is received. This example waits for an onboarding completion event before proceeding.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/inngest-steps.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default inngest.createFunction(\n  { id: \"send-onboarding-nudge-email\" },\n  { event: \"app/account.created\" },\n  async ({ event, step }) => {\n    const onboardingCompleted = await step.waitForEvent(\n      \"wait-for-onboarding-completion\",\n      { event: \"app/onboarding.completed\", timeout: \"3d\", if: \"event.data.userId == async.data.userId\" }\n    );\n    // Do something else\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Inngest Client and Hello World Function\nDESCRIPTION: Sets up an Inngest client and creates a basic function that sleeps for 1 second before returning a greeting. The function is triggered by the 'test/hello.world' event and uses the email from the event data.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/getting-started/nodejs-quick-start.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inngest } from \"inngest\";\n\nexport const inngest = new Inngest({ id: \"my-app\" });\n\n// Your new function:\nconst helloWorld = inngest.createFunction(\n  { id: \"hello-world\" },\n  { event: \"test/hello.world\" },\n  async ({ event, step }) => {\n    await step.sleep(\"wait-a-moment\", \"1s\");\n    return { message: `Hello ${event.data.email}!` };\n  },\n);\n\n// Add the function to the exported array:\nexport const functions = [\n  helloWorld\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Retry Logic in Go Functions\nDESCRIPTION: Go implementation showing how to use RetryAtError to control function retry timing. Demonstrates error handling in a user email sending function with custom retry delay.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/error-retries/inngest-errors.mdx#2025-04-10_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"github.com/inngest/inngestgo\"\n  \"github.com/inngest/inngestgo/step\"\n)\n\n// Register the function\ninngestgo.CreateFunction(\n    &inngest.FunctionOptions{\n        ID: \"send-user-email\",\n    },\n    inngest.FunctionTrigger{\n        Event: \"user/created\",\n    },\n    SendUserEmail,\n)\n\nfunc SendUserEmail(ctx *inngest.FunctionContext) (any, error) {\n    // Run a step which emails the user.  This automatically retries on error.\n    // This returns the fully typed result of the lambda.\n    result, err := step.Run(ctx, \"on-user-created\", func(ctx context.Context) (bool, error) {\n      // Run any code inside a step.\n      result, err := emails.Send(emails.Opts{})\n      return result, err\n    })\n    if err != nil {\n      // This step retried 5 times by default and permanently failed.\n      // We delay the next retry attempt by 5 hours\n      return nil, inngestgo.RetryAtError(err, time.Now().Add(5*time.Hour))\n    }\n\n    return nil, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Weekly Digest Cron Job with Inngest in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a weekly digest cron job using Inngest. It sets up a function that runs every Monday at 9am, loads all accounts, and sends a weekly digest email to each account. The function uses steps to manage the workflow and returns the number of emails sent.\nSOURCE: https://github.com/inngest/website/blob/main/pages/patterns/_patterns/running-code-on-a-schedule.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { inngest } from \"./client\";\n\ninngest.createFunction(\n  { id: \"send-weekly-digest\" },\n  { cron: \"0 9 * * MON\" },\n  async ({ step }) => {\n    const accounts = await step.run(\"load-accounts\", async () => {\n      return await getAllAccounts();\n    });\n    // For each account, reliably send a weekly digest.\n    for (let account of accounts) {\n      await step.run(\n        \"send-digest\",\n        async () => await sentWeeklyDigest(account)\n      );\n    }\n    return `Sent ${accounts.length} weekly digest emails`;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Multiple Event Sending Patterns with Inngest TypeScript SDK\nDESCRIPTION: Examples showing various patterns for sending events with Inngest, including single events, arrays of events, events with user data, and events with custom idempotency IDs, versions, and timestamps.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/events/send.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Send a single event\nawait inngest.send({\n  name: \"app/post.created\",\n  data: { postId: \"01H08SEAXBJFJNGTTZ5TAWB0BD\" }\n});\n\n// Send an array of events\nawait inngest.send([\n  {\n    name: \"app/invoice.created\",\n    data: { invoiceId: \"645e9e024befa68763f5b500\" }\n  },\n  {\n    name: \"app/invoice.created\",\n    data: { invoiceId: \"645e9e08f29fb563c972b1f7\" }\n  },\n]);\n\n// Send user data that will be encrypted at rest\nawait inngest.send({\n  name: \"app/account.created\",\n  data: { billingPlan: \"pro\" },\n  user: {\n    external_id: \"6463da8211cdbbcb191dd7da\",\n    email: \"test@example.com\"\n  }\n});\n\n// Specify the idempotency id, version, and timestamp\nawait inngest.send({\n  // Use an id specific to the event type & payload\n  id: \"cart-checkout-completed-ed12c8bde\",\n  name: \"storefront/cart.checkout.completed\",\n  data: { cartId: \"ed12c8bde\" },\n  user: { external_id: \"6463da8211cdbbcb191dd7da\" },\n  ts: 1684274328198,\n  v: \"2024-05-15.1\"\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Cancellable Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a cancellable function in TypeScript using Inngest. It includes event-based cancellation and showcases a sleep step followed by a reminder push notification.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/cancellation.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst scheduleReminder = inngest.createFunction(\n  {\n    id: \"schedule-reminder\",\n    cancelOn: [{ event: \"tasks/deleted\", if: \"event.data.id == async.data.id\" }],\n  }\n  { event: \"tasks/reminder.created\" },\n  async ({ event, step }) => {\n    // Step 1\n    await step.sleepUntil('sleep-until-remind-at-time', event.data.remindAt);\n    // Step 2\n    await step.run('send-reminder-push', async ({}) => {\n      await pushNotificationService.push(event.data.userId, event.data.reminderBody)\n    })\n  }\n  // ...\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Prisma Client to Inngest Function Context\nDESCRIPTION: This example shows how to create middleware that adds a Prisma client to all Inngest functions. It demonstrates using the onFunctionRun hook to mutate function input and provide access to Prisma.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/middleware/examples.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  { name: \"Example\" },\n  { event: \"app/user.loggedin\" },\n  async ({ prisma }) => {\n    await prisma.auditTrail.create(/* ... */);\n  }\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from \"@prisma/client\";\n\nconst prismaMiddleware = new InngestMiddleware({\n  name: \"Prisma Middleware\",\n  init() {\n    const prisma = new PrismaClient();\n\n    return {\n      onFunctionRun(ctx) {\n        return {\n          transformInput(ctx) {\n            return {\n              // Anything passed via `ctx` will be merged with the function's arguments\n              ctx: {\n                prisma,\n              },\n            };\n          },\n        };\n      },\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Weekly Digest Cron in TypeScript\nDESCRIPTION: Implements a weekly digest system using Inngest's cron scheduling in TypeScript. Uses a fan-out pattern to process multiple users efficiently by splitting the work into two functions: one for preparation and another for sending individual emails.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/scheduled-functions.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inngest } from \"inngest\";\n\nconst inngest = new Inngest({ id: \"signup-flow\" });\n\n// This weekly digest function will run at 12:00pm on Friday in the Paris timezone\nexport const prepareWeeklyDigest = inngest.createFunction(\n  { id: \"prepare-weekly-digest\" },\n  { cron: \"TZ=Europe/Paris 0 12 * * 5\" },\n  async ({ step }) => {\n    const users = await step.run(\n      \"load-users\",\n      async () => await db.load(\"SELECT * FROM users\")\n    );\n\n    const events = users.map((user) => {\n      return {\n        name: \"app/send.weekly.digest\",\n        data: {\n          user_id: user.id,\n          email: user.email,\n        },\n      };\n    });\n\n    await step.sendEvent(\"send-digest-events\", events);\n  }\n);\n\nexport const sendWeeklyDigest = inngest.createFunction(\n  { id: \"send-weekly-digest-email\" },\n  { event: \"app/send.weekly.digest\" },\n  async ({ event }) => {\n    const { email, user_id } = event.data;\n    await email.send(\"weekly_digest\", email, user_id);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Sending Events from Next.js API Route for User Signup\nDESCRIPTION: Next.js API route handler that processes user signup and sends an event to Inngest. It creates a new user, then sends a 'user.signup' event with the user's email and signup reason to trigger background processing.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/run-nextjs-functions-in-the-background.mdx#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Inngest } from \"inngest\";\n\nexport default async function handler(req, res) {\n  const { email, password, signupReason } = req.body;\n  const result = await createNewUser(email, password);\n\n  // Send an event over to Inngest to trigger your function\n  const inngest = new Inngest({ eventKey: process.env.INNGEST_EVENT_KEY });\n  await inngest.send({\n    name: \"user.signup\",\n    data: { signupReason },\n    user: { email },\n  });\n\n  res.status(200).json({ success: true });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Background Jobs with Python in Inngest\nDESCRIPTION: This snippet demonstrates how to create a background job function in Python that sends an email to new users when triggered by a user creation event. It includes steps for sending an email with automatic retries and scheduling future tasks using sleep functionality.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/background-jobs.mdx#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport inngest\n\ninngest_client = inngest.Inngest(\n    app_id=\"my-app\",\n)\n\n@inngest_client.create_function(\n    fn_id=\"send-signup-email\",\n    trigger=inngest.TriggerEvent(event=\"app/user.created\")\n)\nasync def send_signup_email(ctx: inngest.Context, step: inngest.Step):\n    async def send_email():\n        await sesclient.send_email(\n            to=ctx.event.data[\"user_email\"],\n            subject=\"Welcome to Inngest!\",\n            message=\"...\"\n        )\n\n    await step.run(\"send-the-user-a-signup-email\", send_email)\n\n    await step.sleep_until(\"wait-for-the-future\", \"2023-02-01T16:30:00\")\n\n    async def future_work():\n        # Code here runs in the future automatically\n        pass\n\n    await step.run(\"do-some-work-in-the-future\", future_work)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Workflow Engine with Inngest's Workflow Kit\nDESCRIPTION: This snippet demonstrates how to set up a workflow engine using Inngest's Workflow Kit. It defines custom workflow actions, implements a loader to retrieve workflow configurations from a database, and integrates with Inngest's function system for event processing.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/introducing-workflow-kit.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Engine } from \"@inngest/workflow-kit\";\nimport { inngest } from \"./inngest/client\";\n\nconst workflowEngine = new Engine({\n  actions: [\n    {\n      kind: \"add_ToC\",\n      name: \"Add a Table of Content\",\n      description: \"Add a Table of Content\",\n      handler: async ({ event, step, workflowAction }) => {\n        await step.run(\"generate-toc-for-article\", async () => {\n          // await openai.chat.completions.create({ /* ... */ })\n        });\n      },\n    },\n  ],\n  loader: async function (event) {\n    return loadWorkflowFromDatabase(event)\n  },\n});\n\nexport default inngest.createFunction(\n  { id: \"blog-post-workflow\" },\n  [{ event: \"blog-post.updated\" }],\n  async ({ event, step }) => {\n    await workflowEngine.run({ event, step });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Video Tip with Next.js and tRPC\nDESCRIPTION: Implementation of a form submission handler that uploads video content to Cloudinary and creates a new tip resource using tRPC mutation. The code handles file upload progress tracking and routing after successful submission.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/nextjs-trpc-inngest.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { mutate: createTip } = trpc.tips.create.useMutation();\n\nconst handleSubmit = async (values?: any, event?: BaseSyntheticEvent) => {\n  try {\n    if (fileType && fileContents) {\n      setState(\"uploading\");\n      const uploadResponse: { secure_url: string } = await processFile(\n        fileContents,\n        (progress) => {\n          setProgress(progress);\n        }\n      );\n\n      setState(\"success\");\n\n      console.log({ values });\n\n      createTip(\n        {\n          s3Url: uploadResponse.secure_url,\n          fileName,\n          title: values.title,\n        },\n        {\n          onSettled: (data) => {\n            console.log(\"tip creation settled\", data);\n            router.push(`/creator/tips/${data?.slug}`);\n          },\n        }\n      );\n    }\n  } catch (err) {\n    setState(\"error\");\n    console.log(\"error is\", err);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Event Waiting to an Inngest Function in Go\nDESCRIPTION: Example demonstrating how to implement event waiting in Go using step.WaitForEvent() to pause execution until a specific event occurs or a timeout is reached, allowing for coordinated workflows.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/multi-step-functions.mdx#2025-04-10_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/inngest/inngest-go\"\n    \"github.com/inngest/inngest-go/step\"\n)\n\ninngestgo.CreateFunction(\n    inngestgo.FunctionOpts{\n        ID: \"activation-email\",\n    },\n    inngestgo.EventTrigger(\"app/user.created\"),\n    func(ctx *inngestgo.Context) (any, error) {\n        _, err := step.Run(\"send-welcome-email\", func() (any, error) {\n            return nil, sendEmail(ctx.Event.Data[\"user\"].(map[string]interface{})[\"email\"].(string), \"welcome\")\n        })\n        if err != nil {\n            return nil, err\n        }\n\n        // Wait for an \"app/post.created\" event\n        postCreated, err := step.WaitForEvent(\"wait-for-post-creation\", &step.WaitForEventOpts{\n            Event:   \"app/post.created\",\n            Match:   \"data.user.id\", // the field \"data.user.id\" must match\n            Timeout: \"24h\",          // wait at most 24 hours\n        })\n        if err != nil {\n            return nil, err\n        }\n\n        return postCreated, nil\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Indexing Functions with TypeScript and Inngest\nDESCRIPTION: Example showing two interconnected functions for indexing website pages. Demonstrates using step.run() for content retrieval and database operations with built-in error handling and parallel processing capabilities.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/step-ai-for-serverless-ai-applications.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const indexPage = client.createFunction(\n  { id: \"index-page\", concurrency: 10 },\n  { event: Events.INDEX_PAGE },\n  async ({ event, step }) => {\n    const { pageUrl } = event.data;\n\n    const page = await step.run(\"get-page-content\", async () => {\n      return getPageContent(pageUrl);\n    });\n\n    await step.run(\"index-page\", async () => {\n      return saveToPinecone({ page });\n    });\n  }\n);\n\nexport const indexSite = client.createFunction(\n  { id: \"index-site\" },\n  { event: Events.INDEX_SITE },\n  async ({ event, step }) => {\n    const { url } = event.data;\n\n    const pages = await step.run(\"find-pages\", async () => {\n      return findPagesToIndex(url);\n    });\n\n    await Promise.all(\n      pages.map(async (page) => {\n        return step.invoke(`index-page-${page.url}`, {\n          function: indexPage,\n          data: { pageUrl: page.url },\n        });\n      })\n    );\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Weekly Digest Cron in Go\nDESCRIPTION: Implements a weekly digest system using Inngest's cron scheduling in Go. Uses a fan-out pattern with two functions to handle user processing and email sending separately, supporting timezone-specific scheduling.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/scheduled-functions.mdx#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\n\t\"github.com/inngest/inngest-go\"\n\t\"github.com/inngest/inngest-go/step\"\n)\n\nfunc init() {\n\tinngestgo.CreateFunction(\n\t\tinngestgo.FunctionOpts{ID: \"prepare-weekly-digest\", Name: \"Prepare Weekly Digest\"},\n\t\tinngestgo.CronTrigger(\"TZ=Europe/Paris 0 12 * * 5\"),\n\t\tfunc(ctx context.Context, input inngestgo.Input[any]) (any, error) {\n\t\t\tusers, err := step.Run(\"load-users\", func() ([]*User, error) {\n\t\t\t\treturn loadUsers()\n\t\t\t})\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\n\t\t\tevents := make([]inngestgo.Event, len(users))\n\t\t\tfor i, user := range users {\n\t\t\t\tevents[i] = inngestgo.Event{\n\t\t\t\t\tName: \"app/send.weekly.digest\",\n\t\t\t\t\tData: map[string]interface{}{\n\t\t\t\t\t\t\"user_id\": user.ID,\n\t\t\t\t\t\t\"email\":   user.Email,\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t}\n\n\t\t\terr = step.SendEvent(\"send-digest-events\", events)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\n\t\t\treturn nil, nil\n\t\t},\n\t)\n\n\tinngestgo.CreateFunction(\n\t\tinngestgo.FunctionOpts{ID: \"send-weekly-digest-email\"},\n\t\tinngestgo.EventTrigger(\"app/send.weekly.digest\", nil),\n\t\tfunc(ctx context.Context, input inngestgo.Input) (any, error) {\n\t\t\temail := input.Event.Data[\"email\"].(string)\n\t\t\tuserID := input.Event.Data[\"user_id\"].(string)\n\n\t\t\terr := email.Send(\"weekly_digest\", email, userID)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\n\t\t\treturn nil, nil\n\t\t},\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Function Example in Go\nDESCRIPTION: A basic Inngest function example in Go showing how each step executes as a separate HTTP request, causing the initialization code to run multiple times.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/working-with-loops.mdx#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"fmt\"\n    \"github.com/inngest/inngest-go\"\n    \"github.com/inngest/inngest-go/step\"\n)\n\ninngestgo.CreateFunction(\n\tinngestgo.FunctionOpts{ID: \"simple-function\"},\n\tinngestgo.EventTrigger(\"test/simple.function\", nil),\n\tfunc(ctx context.Context, input inngestgo.Input) (any, error) {\n\t\tfmt.Println(\"hello\")\n\n\t\t_, err := step.Run(\"a\", func() error {\n\t\t\tfmt.Println(\"a\")\n\t\t\treturn nil\n\t\t})\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\t_, err = step.Run(\"b\", func() error {\n\t\t\tfmt.Println(\"b\")\n\t\t\treturn nil\n\t\t})\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\t_, err = step.Run(\"c\", func() error {\n\t\t\tfmt.Println(\"c\")\n\t\t\treturn nil\n\t\t})\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\treturn nil, nil\n\t},\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Encryption Middleware in TypeScript\nDESCRIPTION: Demonstrates how to install and configure the encryption middleware in TypeScript. This middleware encrypts all step data, function output, and event data placed inside data.encrypted by default.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/middleware/encryption-middleware.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encryptionMiddleware } from \"@inngest/middleware-encryption\";\n\n// Initialize the middleware\nconst mw = encryptionMiddleware({\n  // your encryption key string should not be hard coded\n  key: process.env.MY_ENCRYPTION_KEY,\n});\n\n// Use the middleware with Inngest\nconst inngest = new Inngest({\n  id: \"my-app\",\n  middleware: [mw],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Meal Generation Workflow in TypeScript with Inngest and Weaviate\nDESCRIPTION: Creates a meal generation workflow that uses OpenAI for allergy analysis and Weaviate for ingredient alternatives querying. The function processes participant count, preferences, and cuisine type to generate appropriate meal suggestions based on dietary restrictions.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/weaviate-ai-workflows.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { openai } from \"inngest\";\nimport { inngest } from \"./inngest-client\";\nimport { weaviate } from \"./weaviate-client\";\n\nexport const generateMeal = inngest.createFunction(\n  { id: \"generate-meal\", concurrency: 10 },\n  { event: \"meal.generate\" },\n  async ({ event, step }) => {\n    // retrieve the input parameters from our trigger event\n    const { participantsCount, preferences, cuisine_type } = event.data;\n\n    // Query relevant recipes based on cusine type preference\n    let relevantRecipes = await step.run(\"query-recipes\", async () => {\n      // ...\n    });\n\n    // Look for allergies in the food preferences\n    const allergiesAnalysis = await step.ai.infer(\"Allergies analysis\", {\n      // ...\n    });\n\n    let ingredientsAlternatives: any[] = [];\n\n    // run a conditional step based on `allergiesAnalysis` result\n    if (allergiesAnalysis.choices[0].message.content !== \"not allergies\") {\n      // Query relevant recipes based on cusine type preference\n      ingredientsAlternatives = await step.run(\n        \"query-ingredients-alternatives\",\n        async () => {\n          const collection = client.collections.get(\n            \"Thefoodprocessoringredientsalternatives\"\n          );\n          const query = allergiesAnalysis.choices[0].message.content!;\n          const result = await collection.query.nearText(query, {\n            limit: 10,\n          });\n          return result.objects;\n        }\n      );\n    }\n    // ...\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat API Route in Next.js for AI Agent Workflow\nDESCRIPTION: This code creates an Edge runtime API route in Next.js that handles chat POST requests, generates unique IDs for conversations, and dispatches Inngest events to trigger asynchronous workflows. It manages both initial message sending and confirmation actions.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/semi-autonomous-ai-agents.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Message } from 'ai'\nimport { customAlphabet } from 'nanoid';\nimport { inngest } from '@/inngest/inngest.server.client';\n\nconst nanoid = customAlphabet(\n  \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\",\n  7\n);\n\nexport const runtime = 'edge'\n\nexport async function POST(req: Request) {\n  const body = await req.json()\n  const { messages, requestId = nanoid(), confirm } = body\n\n  if (confirm !== undefined) {\n    // Confirm API\n    await inngest.send({\n      name: \"api/chat.confirmed\",\n      data: {\n        requestId,\n        confirm,\n      },\n    });\n    return new Response(requestId, { status: 200 });\n  }\n\n  console.log('start the chat')\n\n  await inngest.send({\n    name: \"api/chat.started\",\n    data: {\n      messages: messages as Message[],\n      requestId,\n    },\n  });\n\n  return new Response(requestId as string, { status: 200 });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onFunctionRun Middleware Lifecycle in TypeScript\nDESCRIPTION: Example implementation of an Inngest middleware with the onFunctionRun lifecycle. Shows how to hook into various function execution phases including input transformation, memoization, execution, and output transformation.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/middleware/lifecycle.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst myMiddleware = new InngestMiddleware({\n  name: \"My Middleware\",\n  init({ client, fn }) {\n    return {\n      onFunctionRun({ ctx, fn, steps }) {\n        return {\n          transformInput({ ctx, fn, steps }) {\n            // ...\n            return {\n              // All returns are optional\n              ctx: { /* extend fn input */ },\n              steps: steps.map(({ data }) => { /* transform step data */ })\n            }\n          },\n          beforeMemoization() {\n            // ...\n          },\n          afterMemoization() {\n            // ...\n          },\n          beforeExecution() {\n            // ...\n          },\n          afterExecution() {\n            // ...\n          },\n          transformOutput({ result, step }) {\n            // ...\n            return {\n              // All returns are optional\n              result: {\n                // Transform data before it goes back to Inngest\n                data: transformData(result.data)\n              }\n            }\n          },\n          finished({ result }) {\n            // ...\n          },\n          beforeResponse() {\n            // ...\n          },\n        };\n      },\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Delaying Jobs with Inngest in TypeScript\nDESCRIPTION: This snippet demonstrates how to delay a function execution by a specific duration (1 hour) using Inngest's step.sleep() method in TypeScript. It creates a function that waits before executing a task in response to a user creation event.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/delayed-functions.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inngest } from \"inngest\";\n\nconst inngest = new Inngest({ id: \"signup-flow\" });\n\nexport const fn = inngest.createFunction(\n  { id: \"send-signup-email\" },\n  { event: \"app/user.created\" },\n  async ({ event, step }) => {\n    await step.sleep(\"wait-a-moment\", \"1 hour\");\n    await step.run(\"do-some-work-in-the-future\", async () => {\n      // This runs after 1 hour\n    });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Synchronous Parallel Steps in Python with Inngest\nDESCRIPTION: Demonstrates how to implement parallel steps in Python using synchronous code and the step.parallel method. This example shows updating a user and sending an email concurrently.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/step-parallelism.mdx#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@client.create_function(\n  fn_id=\"my-fn\",\n  trigger=inngest.TriggerEvent(event=\"my-event\"),\n)\ndef fn(\n  ctx: inngest.Context,\n  step: inngest.StepSync,\n) -> None:\n  user_id = ctx.event.data[\"user_id\"]\n\n  (updated_user, sent_email) = step.parallel(\n    (\n      lambda: step.run(\"update-user\", update_user, user_id),\n      lambda: step.run(\"send-email\", send_email, user_id),\n    )\n  )\n```\n\n----------------------------------------\n\nTITLE: Waiting for an Event in Go with Conditional Logic\nDESCRIPTION: Example showing how to use step.waitForEvent() in Go with conditional event matching using the 'If' option. Handles the case when the event isn't received by checking for the ErrEventNotReceived error.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/steps-workflows/wait-for-event.mdx#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc AccountCreated(ctx context.Context, input inngestgo.Input[AccountCreatedEvent]) (any, error) {\n  // Sleep for a second, minute, hour, week across server restarts.\n  opened, err = step.waitForEvent(ctx, \"wait-for-open\", opts.WaitForEventOpts{\n      Event: \"email/mail.opened\",\n      If:\tinngestgo.StrPtr(fmt.Sprintf(\"async.data.id == %s\", strconv.Quote(\"my-id\"))),\n      Timeout: 24 * time.Hour,\n  })\n\n  if err == step.ErrEventNotReceived {\n\t\t// A function wasn't created within 3 days.  Send a follow-up email.\n\t\tstep.Run(ctx, \"follow-up-email\", func(ctx context.Context) (any, error) {\n\t\t\t// ...\n\t\t\treturn true, nil\n\t\t})\n\t\treturn nil, nil\n\t}\n\n  // ...\n\n  return nil, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Workflow Action Handlers in TypeScript\nDESCRIPTION: This code snippet defines action handlers for workflow automation tasks, specifically adding a table of contents to a blog post. It uses OpenAI for content generation and Supabase for data storage. The handler function processes the blog post, generates a table of contents, and updates the post in the database.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/user-defined-workflows.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport OpenAI from \"openai\";\nimport { type EngineAction, type WorkflowAction } from \"@inngest/workflow-kit\";\n\nimport { type BlogPost } from \"../supabase/types\";\n\nimport { loadBlogPost } from \"../loaders/blog-post\";\nimport { createClient } from \"../supabase/server\";\nimport { actions } from \"./workflowActions\";\n\n\nexport const actions: EngineAction[] = [\n  {\n    // Add a Table of Contents\n    ...actionsDefinition[0],\n    handler: async ({ event, step, workflowAction }) => {\n      const supabase = createClient();\n\n      const blogPost = await step.run(\"load-blog-post\", async () =>\n        loadBlogPost(event.data.id)\n      );\n\n      const aiRevision = await step.run(\"add-toc-to-article\", async () => {\n        const openai = new OpenAI({\n          apiKey: process.env[\"OPENAI_API_KEY\"], // This is the default and can be omitted\n        });\n\n        const prompt = `\n        Please update the below markdown article by adding a Table of Content under the h1 title. Return only the complete updated article in markdown without the wrapping \"\\`\\`\\`\".\n\n        Here is the text wrapped with \"\\`\\`\\`\":\n        \\`\\`\\`\n        ${getAIworkingCopy(workflowAction, blogPost)}\n        \\`\\`\\`\n        `;\n\n        const response = await openai.chat.completions.create({\n          model: process.env[\"OPENAI_MODEL\"] || \"gpt-3.5-turbo\",\n          messages: [\n            {\n              role: \"system\",\n              content: \"You are an AI that make text editing changes.\",\n            },\n            {\n              role: \"user\",\n              content: prompt,\n            },\n          ],\n        });\n\n        return response.choices[0]?.message?.content || \"\";\n      });\n\n      await step.run(\"save-ai-revision\", async () => {\n        await supabase\n          .from(\"blog_posts\")\n          .update({\n            markdown_ai_revision: aiRevision,\n            status: \"under review\",\n          })\n          .eq(\"id\", event.data.id)\n          .select(\"*\");\n      });\n    },\n    }\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Adding Event Waiting to an Inngest Function in TypeScript\nDESCRIPTION: Example demonstrating how to add step.waitForEvent() to pause execution while waiting for a specific event to occur, with a timeout that allows continuing execution if the event doesn't arrive within the specified time.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/multi-step-functions.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default inngest.createFunction(\n  { id: \"activation-email\" },\n  { event: \"app/user.created\" },\n  async ({ event, step }) => {\n    await step.run(\"send-welcome-email\", async () => {\n      return await sendEmail({ email: event.user.email, template: \"welcome\" });\n    });\n\n    // Wait for an \"app/post.created\" event\n    const postCreated = await step.waitForEvent(\"wait-for-post-creation\", {\n      event: \"app/post.created\",\n      match: \"data.user.id\", // the field \"data.user.id\" must match\n      timeout: \"24h\", // wait at most 24 hours\n    });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using step.ai.infer() for LLM Processing in Inngest\nDESCRIPTION: Example showing how to use step.ai.infer() to offload LLM requests to Inngest's infrastructure, preventing timeout issues and optimizing serverless compute usage with OpenAI integration.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/step-ai-for-serverless-ai-applications.mdx#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default inngest.createFunction(\n  {\n    id: \"generate-import-workflow\",\n  },\n  { event: \"contacts.uploaded\" },\n  async ({ event, step }) => {\n    const generatedStepsResult = await step.ai.infer(\n      \"generate-workflow-steps\",\n      {\n        model: step.ai.models.openai({ model: \"gpt-4\" }),\n        body: {\n          messages: [\n            {\n              role: \"user\",\n              content: prompt(event.data.contactsFileContent),\n            },\n          ],\n        },\n      }\n    );\n    // ...\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Standard Errors in Go Inngest Functions\nDESCRIPTION: Demonstrates how errors returned by Go Inngest functions are automatically handled and retried. The example shows error handling within a step function that sends an email.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/error-retries/inngest-errors.mdx#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"github.com/inngest/inngestgo\"\n  \"github.com/inngest/inngestgo/step\"\n)\n\n// Register the function\ninngestgo.CreateFunction(\n    &inngest.FunctionOptions{\n        ID: \"send-user-email\",\n    },\n    inngest.FunctionTrigger{\n        Event: \"user/created\",\n    },\n    SendUserEmail,\n)\n\nfunc SendUserEmail(ctx *inngest.FunctionContext) (any, error) {\n    // Run a step which emails the user.  This automatically retries on error.\n    // This returns the fully typed result of the lambda.\n    result, err := step.Run(ctx, \"on-user-created\", func(ctx context.Context) (bool, error) {\n      // Run any code inside a step.\n      result, err := emails.Send(emails.Opts{})\n      return result, err\n    })\n    if err != nil {\n      // This step retried 5 times by default and permanently failed.\n      return nil, err\n    }\n\n    return nil, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Rate-Limited Data Synchronization from Intercom Webhook\nDESCRIPTION: This example shows a complete implementation of a rate-limited function that synchronizes data from Intercom. It fetches the latest company data and updates the database, limiting execution to once every 4 hours per company.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/functions/rate-limit.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/** Example event payload:\n{\n  name: \"intercom/company.updated\",\n  data: {\n    company_id: \"123456789\",\n    company_name: \"Acme, Inc.\"\n  }\n}\n*/\nexport default inngest.createFunction(\n  {\n    id: \"synchronize-data\",\n    rateLimit: {\n      key: \"event.data.company_id\",\n      limit: 1,\n      period: \"4h\",\n    },\n  },\n  { event: \"intercom/company.updated\" },\n  async ({ event, step }) => {\n    const company = await step.run(\n      \"fetch-latest-company-data-from-intercom\",\n      async () => {\n        return await client.companies.find({\n          companyId: event.data.company_id,\n        });\n      }\n    );\n\n    await step.run(\"update-company-data-in-database\", async () => {\n      return await database.companies.upsert({ id: company.id }, company);\n    });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Discord Bot with Inngest Event Emission in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to create a Discord bot that listens for message events and sends them to Inngest for processing. It initializes both a Discord bot and Inngest client, then sets up an event handler to detect messages and emit them as Inngest events.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/ai-personalization-and-the-future-of-developer-docs.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createBot, Inngest } from \"./deps.ts\";\n\n// Create the Discord bot\nconst bot = createBot({\n  token: Deno.env.get(\"DISCORD_TOKEN\"),\n});\n\n// Create an Inngest instance\nconst inngest = new Inngest({ name: \"Discord Bot\" });\n\nbot.events.messageCreate = async (_b, message) => {\n  // Check if the message is a request, then...\n  await inngest.send(\"inngestabot/message.received\", {\n    data: {\n      message: {\n        channelId: message.channelId.toString(),\n        content: message.content,\n        id: message.id.toString(),\n      },\n    },\n    user: { authorId: message.authorId.toString() },\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Sending Multiple Image Processing Events in Inngest Function\nDESCRIPTION: This code creates an Inngest function that handles Shopify product imports, fetches images for each product, and fans out the image processing work by sending 'shopify/copy.image' events for each image. The function uses a concurrency of 10 and leverages step.sendEvent() to trigger parallel processing.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/import-ecommerce-api-data-in-seconds.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  { id: \"shopify-product-import\", concurrency: 10 },\n  { event: \"shopify/import.requested\" },\n  async ({ event, step }) => {\n    // --- See first code snippet above for the setup ---\n\n    for (let product of allProducts) {\n      // Fetch all images from each product\n      const response = await step.run(\"fetch-images-product\", async () => {\n        return await shopify.rest.Image.all({\n          session: session,\n          product_id: product.id,\n        })\n      })\n      // Turn the image list into a series of events to send\n      const events = response.images.map((image) => ({\n        name: \"shopify/copy.image\",\n        data: {\n          imageId: image.id,\n          imageUrl: image.src,\n          storeId: event.data.storeId,\n          productId: product.id,\n        },\n      }))\n      // Now, we send events in bulk to Inngest\n      await step.sendEvent(events)\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Inngest Function with TypeScript\nDESCRIPTION: Demonstrates how to create a basic Inngest function that responds to a shop/product.imported event. The function shows the basic structure with configuration, event trigger, and an async handler.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/functions/create.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inngest } from \"./client\";\n\nexport default inngest.createFunction(\n  { id: \"import-product-images\" },\n  { event: \"shop/product.imported\" },\n  async ({ event, step, runId }) => {\n    // Your function code\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using Injected OpenAI Client in Inngest Function\nDESCRIPTION: Demonstrates how to access and use the injected OpenAI client within an Inngest function.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/middleware/dependency-injection.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  { name: \"user-create\" },\n  { event: \"app/user.create\" },\n  async ({ openai }) => {\n    const chatCompletion = await openai.chat.completions.create({\n      messages: [{ role: \"user\", content: \"Say this is a test\" }],\n      model: \"gpt-3.5-turbo\",\n    });\n\n    // ...\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Shopify Products with Loop in TypeScript\nDESCRIPTION: This Inngest function imports all products from a Shopify store into a local system. It uses a while loop to iterate over all pages, combining products into a single array. Each iteration is managed using step.run() to ensure non-deterministic logic is encapsulated within a step.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/working-with-loops.mdx#2025-04-10_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport default inngest.createFunction(\n  { id: \"shopify-product-import\"},\n  { event: \"shopify/import.requested\" },\n  async ({ event, step }) => {\n    const allProducts = []\n    let cursor = null\n    let hasMore = true\n\n    // Use the event's \"data\" to pass key info like IDs\n    // Note: in this example is deterministic across multiple requests\n    // If the returned results must stay in the same order, wrap the db call in step.run()\n    const session = await database.getShopifySession(event.data.storeId)\n\n    while (hasMore) {\n      const page = await step.run(`fetch-products-${pageNumber}`, async () => {\n        return await shopify.rest.Product.all({\n          session,\n          since_id: cursor,\n        })\n      })\n      // Combine all of the data into a single list\n      allProducts.push(...page.products)\n      if (page.products.length === 50) {\n        cursor = page.products[49].id\n      } else {\n        hasMore = false\n      }\n    }\n\n    // Now we have the entire list of products within allProducts!\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Integrating Inngest with Nitro Framework\nDESCRIPTION: Sets up Inngest in a Nitro application by creating an API route that handles Inngest requests. Available in Inngest v3.24.0 and above.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/serving-inngest-functions.mdx#2025-04-10_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from \"inngest/nitro\";\nimport { inngest } from \"~~/inngest/client\";\nimport fnA from \"~~/inngest/fnA\"; // Your own function\n\nexport default eventHandler(\n  serve({\n    client: inngest,\n    functions: [fnA],\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Triggering Inngest Background Functions with Python\nDESCRIPTION: This code shows how to send an event to Inngest in Python that will trigger the background function. The event includes the name that matches the function trigger and custom data to be processed.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/background-jobs.mdx#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom src.inngest.client import inngest_client\n\nawait inngest_client.send(\n    name=\"app/user.created\",  # This matches the event used in `create_function`\n    data={\n        \"email\": \"test@example.com\",\n        # any data you want to send\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Event Handler with Type Inference Using Generic Functions in TypeScript\nDESCRIPTION: An advanced implementation that uses TypeScript generics and mapped types to infer the correct argument type based on the event name, providing more precise type information.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/building-educational-typescript-tooling.mdx#2025-04-10_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Args {\n  \"server.start\": boolean;\n  \"server.stop\": Date;\n}\n\nconst on = <Event extends keyof Args>(\n  event: Event,\n  fn: (arg: Args[Event]) => any\n) => {\n  // ...\n};\n\non(\"server.start\", (success) => {\n//                     ^?\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Batching in Go\nDESCRIPTION: Creates an Inngest function that processes batches of events with Go. The function is configured with a maximum batch size, timeout, and optional key for grouping events by user ID. It transforms event data and performs a bulk database write operation.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/batching.mdx#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ninngestgo.CreateFunction(\n  &inngestgo.FunctionOpts{\n    ID: \"record-api-calls\",\n    BatchEvents: &inngest.EventBatchConfig{\n      MaxSize: 100,\n      Timeout: \"5s\",\n      Key: \"event.data.user_id\", // Optional: batch events by user ID\n    },\n  },\n  inngestgo.EventTrigger(\"log/api.call\"),\n  func(ctx context.Context, events []*inngestgo.Event, step inngestgo.StepFunction) (any, error) {\n    // NOTE: Use the events argument, which is an array of event payloads\n    attrs := make([]interface{}, len(events))\n    for i, evt := range events {\n      attrs[i] = map[string]interface{}{\n        \"user_id\":   evt.Data[\"user_id\"],\n        \"endpoint\":  evt.Data[\"endpoint\"], \n        \"timestamp\": toDateTime(evt.Ts),\n      }\n    }\n\n    var result []interface{}\n    _, err := step.Run(ctx, \"record-data-to-db\", func(ctx context.Context) (interface{}, error) {\n      return nil, db.BulkWrite(attrs)\n    })\n    if err != nil {\n      return err, nil\n    }\n\n    return nil, map[string]interface{}{\n      \"success\":  true,\n      \"recorded\": len(result),\n    }\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Standard Errors in Python Inngest Functions\nDESCRIPTION: Shows how to throw standard Python exceptions in Inngest functions for automatic retry behavior. The example demonstrates raising a ValueError within a step that will trigger automatic retries.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/error-retries/inngest-errors.mdx#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@client.create_function(\n    fn_id=\"import-item-data\",\n    retries=0,\n    trigger=inngest.TriggerEvent(event=\"store/import.requested\"),\n)\nasync def fn_async(\n    ctx: inngest.Context,\n    step: inngest.Step,\n) -> None:\n\n    def foo() -> None:\n        raise ValueError(\"foo\")\n\n    # a retry will be attempted\n    await step.run(\"foo\", foo)\n```\n\n----------------------------------------\n\nTITLE: Waiting for Inngest Connection Closure\nDESCRIPTION: Example showing how to wait for an Inngest connection to fully close by awaiting the closed promise on the connection object.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/setup/connect.mdx#2025-04-10_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// The `closed` promise will resolve when the connection is \"CLOSED\"\nawait connection.closed\n// Connection is now closed\n```\n\n----------------------------------------\n\nTITLE: Implementing Failure Handling for Video Rendering with Inngest in JavaScript\nDESCRIPTION: This code snippet defines an Inngest function for rendering videos, with a focus on the 'onFailure' handler. It updates video status in the database, refunds user units for non-recoverable errors, and logs errors to Telegram and Sentry.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/banger-video-rendering-pipeline.mdx#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport const renderVideo = inngest.createFunction(\n  {\n    name: 'Render video',\n    id: 'render-video',\n    cancelOn: [\n      {\n        event: 'banger/video.create',\n        match: 'data.videoId'\n      }\n    ],\n    onFailure: async ({ error, event, step }) => {\n      await dbConnect()\n\n      const isStalled = RenderStalledError.isRenderStalledError(error)\n\n       const updatedVideo = await step.run(\n        'Update video status to failed',\n        () =>\n          VideoModel.findOneAndUpdate(\n            { _id: event.data.event.data.videoId },\n            {\n              $set: {\n                status: isStalled ? 'stalled' : 'error',\n                ...(isStalled && { stalledAt: new Date() }),\n                renderProgress: null\n              }\n            },\n            { new: true }\n          )\n            .lean()\n      )\n\n      invariant(updatedVideo, 'no video found')\n\n      // refund user units if error is not recoverable\n      // if it's stalled, we're going to recover it later\n      if (!isStalled) {\n        await step.run('Refund user units', async () => {\n          await UserModel.updateOne(\n            {\n              _id: event.data.event.data.userId\n            },\n            { $inc: { unitsRemaining: updatedVideo.videoDuration } }\n          )\n        })\n      }\n\n      if (process.env.NODE_ENV === 'production') {\n        const errorJson = _.truncate(JSON.stringify(event), {\n          length: 3000\n        })\n        await sendTelegramLog(\n          _.truncate(\n            `🚨 Error while rendering video: ${error.message}\\n\n          Event: ${errorJson}\\n`,\n            { length: 3000 }\n          )\n        )\n      }\n\n      Sentry.captureException(error)\n    }\n  },\n  { event: 'banger/video.create' },\n  async ({ event, step, attempt, logger }) => {\n    // ...\n  })\n```\n\n----------------------------------------\n\nTITLE: Integrating Inngest with Next.js App Router\nDESCRIPTION: Implements Inngest in a Next.js application using the App Router pattern. Creates route handlers for GET, POST, and PUT methods at '/api/inngest' to serve Inngest functionality.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/serving-inngest-functions.mdx#2025-04-10_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app/api/inngest/route.ts\nimport { serve } from \"inngest/next\";\nimport { inngest } from \"../../../inngest/client\";\nimport fnA from \"../../../inngest/fnA\"; // Your own functions\n\nexport const { GET, POST, PUT } = serve({\n  client: inngest,\n  functions: [fnA],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Handler in Go\nDESCRIPTION: Implements a Go HTTP handler for Inngest functions using the inngestgo package. Sets up an account creation flow handler that responds to specific events.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/serving-inngest-functions.mdx#2025-04-10_snippet_30\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/inngest/inngestgo\"\n\t\"github.com/inngest/inngestgo/step\"\n)\n\nfunc main() {\n\th := inngestgo.NewHandler(\"core\", inngestgo.HandlerOpts{})\n\tf := inngestgo.CreateFunction(\n\t\tinngestgo.FunctionOpts{\n\t\t\tID:   \"account-created\",\n\t\t\tName: \"Account creation flow\",\n\t\t},\n\t\t// Run on every api/account.created event.\n\t\tinngestgo.EventTrigger(\"api/account.created\", nil),\n\t\tAccountCreated,\n\t)\n\th.Register(f)\n\thttp.ListenAndServe(\":8080\", h)\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Parallel Customer Imports with Concurrency in Python\nDESCRIPTION: This Python example demonstrates implementing concurrency control for CSV imports in Inngest. By setting a concurrency limit of 1 with a key based on the customer ID, it ensures that only one import process runs per customer at any given time while allowing parallel processing across different customers.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/concurrency.mdx#2025-04-10_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@inngest_client.create_function(\n    fn_id=\"process-customer-csv-import\",\n    name=\"Process customer csv import\",\n    trigger=inngest.TriggerEvent(event=\"csv/file.uploaded\"),\n    concurrency=[\n        inngest.Concurrency(\n            limit=1,\n            key=\"event.data.customerId\"  # You can use any piece of data from the event payload\n        )\n    ]\n)\nasync def process_csv_import(ctx: inngest.Context, step: inngest.Step):\n    async def process_file():\n        file = await bucket.fetch(ctx.event.data.file_uri)\n        # ...\n\n    await step.run(\"process-file\", process_file)\n    return {\"message\": \"success\"}\n```\n\n----------------------------------------\n\nTITLE: Custom OpenAI Middleware Implementation in TypeScript\nDESCRIPTION: Shows how to create a custom middleware for OpenAI client injection using InngestMiddleware class. Compatible with TypeScript SDK v2.0.0+.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/middleware/dependency-injection.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InngestMiddleware } from \"inngest\";\nimport OpenAI from \"openai\";\n\nconst openaiMiddleware = new InngestMiddleware({\n  name: \"OpenAI Middleware\",\n  init() {\n    const openai = new OpenAI();\n\n    return {\n      onFunctionRun(ctx) {\n        return {\n          transformInput(ctx) {\n            return {\n              ctx: {\n                openai,\n              },\n            };\n          },\n        };\n      },\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Action for File Upload in Next.js\nDESCRIPTION: A Next.js server action that processes an uploaded file and sends the file content to Inngest for background processing. This function extracts the text from the uploaded file and triggers a 'contacts.uploaded' event.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/agentic-workflow-example.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"use server\";\n\nimport { inngest } from \"@/lib/inngest/client\";\n\nexport async function uploadFile(formData: FormData) {\n  const file = formData.get(\"file\") as File;\n  const fileText = await file.text();\n\n  await inngest.send({\n    name: \"contacts.uploaded\",\n    data: {\n      contactFileContent: fileText,\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using RetryAfterError in TypeScript Inngest Functions\nDESCRIPTION: Shows how to use RetryAfterError to control when Inngest retries a function or step. This is useful for handling rate limits or timing issues by delaying the next retry attempt.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/error-retries/inngest-errors.mdx#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  { id: \"send-welcome-sms\" },\n  { event: \"app/user.created\" },\n  async ({ event, step }) => {\n    const { success, retryAfter } = await twilio.messages.create({\n      to: event.data.user.phoneNumber,\n      body: \"Welcome to our service!\",\n    });\n\n    if (!success && retryAfter) {\n      throw new RetryAfterError(\"Hit Twilio rate limit\", retryAfter);\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Triggering Inngest Functions with Event Payloads in Vercel\nDESCRIPTION: This code shows how to trigger the long-running function by sending an event payload to Inngest with a specified time period for fetching waiting list users. The event is used to initiate the background job process.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/vercel-long-running-background-functions.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait inngest.send({\n  name: \"invite.users\",\n  data: { from: \"2023-03-20T00:00:00\", to: \"2023-03-21T00:00:00\" }\n})\n```\n\n----------------------------------------\n\nTITLE: Using NonRetriableError in TypeScript Inngest Functions\nDESCRIPTION: Shows how to use the NonRetriableError class to prevent automatic retries when an error occurs. This is useful for errors that won't be resolved by retrying, such as invalid inputs or missing resources.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/error-retries/inngest-errors.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NonRetriableError } from \"inngest\";\n\nexport default inngest.createFunction(\n  { id: \"mark-store-imported\" },\n  { event: \"store/import.completed\" },\n  async ({ event }) => {\n    try {\n      const result = await database.updateStore(\n        { id: event.data.storeId },\n        { imported: true }\n      );\n      return result.ok === true;\n    } catch (err) {\n      // Passing the original error via `cause` enables you to view the error in function logs\n      throw new NonRetriableError(\"Store not found\", { cause: err });\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Listening for Events in TypeScript\nDESCRIPTION: This snippet shows a function that listens for the 'app/weekly-email-activity.send' event. It processes each event by loading user data and sending an email. This function runs in parallel for each user event received.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/sending-events-from-functions.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const sendReminder = inngest.createFunction(\n  { id: \"weekly-activity-send-email\" },\n  { event: \"app/weekly-email-activity.send\" },\n  async ({ event, step }) => {\n    const data = await step.run(\"load-user-data\", async () => {\n      return loadUserData(event.data.user.id);\n    });\n\n    await step.run(\"email-user\", async () => {\n      return sendEmail(event.data.user, data);\n    });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Scheduling Future Work with step.sleepUntil in TypeScript\nDESCRIPTION: This snippet shows how to schedule a task to run at a specific future time using step.sleepUntil. It calculates a date one day before a reservation and sends a reminder text message at that time.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/vercel-long-running-background-functions.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  { id: \"send-reminder\" },\n  { event: \"dinner_reservation.created\" },\n  async ({ event, step }) => {\n    const reservationAt = new Date(event.data.reservationTimestamp);\n    const dayBefore = new Date(reservationAt - 24 * 60 * 60 * 1000);\n    await step.sleepUntil(dayBefore)\n\n    await step.run(\"send-reminder-text-message\", async () =>\n      await sendSMSReminder(event.user.phone, event.data)\n    )\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Top-Level Await in Inngest TypeScript SDK v3.0\nDESCRIPTION: This snippet shows how top-level await can now be used in Inngest functions with SDK v3.0. It creates a function that handles a user creation event and allows for top-level await, which was not possible in previous versions.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/releasing-ts-sdk-3.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  { id: \"signup-flow\", name: \"Signup flow\" },\n  { event: \"app/user.created\" },\n  async ({ event, step }) => {\n    // Top-level awaits are now allowed.  Note that, for determinism, it's\n    // still recommended to use `step.run` to handle async logic.  step.run\n    // runs code exactly once and retries on error.\n    await db.connect();\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Importing Shopify Products with Loop in Go\nDESCRIPTION: This Inngest function imports all products from a Shopify store into a local system using Go. It uses a for loop to iterate over all pages, combining products into a single slice. Each iteration is managed using step.Run() to ensure non-deterministic logic is encapsulated within a step.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/working-with-loops.mdx#2025-04-10_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ninngest.CreateFunction(\n\t\"shopify-product-import\",\n\tinngest.EventTrigger(\"shopify/import.requested\"),\n\tfunc(ctx context.Context, event inngest.Event) error {\n\t\tvar allProducts []Product\n\t\tvar cursor *string\n\t\thasMore := true\n\n\t\t// Use the event's \"data\" to pass key info like IDs\n\t\t// Note: in this example is deterministic across multiple requests\n\t\t// If the returned results must stay in the same order, wrap the db call in step.run()\n\t\tsession, err := database.GetShopifySession(event.Data[\"storeId\"].(string))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tfor hasMore {\n\t\t\tif page, err := step.Run(fmt.Sprintf(\"fetch-products-%v\", cursor), func() error {\n\t\t\t\treturn shopify.Product.All(&shopify.ProductListOptions{\n\t\t\t\t\tSession: session,\n\t\t\t\t\tSinceID: cursor,\n\t\t\t\t})\n\t\t\t}); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\t// Combine all of the data into a single list\n\t\t\tallProducts = append(allProducts, page.Products...)\n\n\t\t\tif len(page.Products) == 50 {\n\t\t\t\tid := page.Products[49].ID\n\t\t\t\tcursor = &id\n\t\t\t} else {\n\t\t\t\thasMore = false\n\t\t\t}\n\t\t}\n\n\t\t// Now we have the entire list of products within allProducts!\n\t\treturn nil\n\t},\n)\n```\n\n----------------------------------------\n\nTITLE: Restricting Parallel Customer Imports with Concurrency in TypeScript\nDESCRIPTION: This snippet demonstrates how to limit CSV import jobs to one per customer using Inngest's concurrency control. It sets a concurrency limit of 1 scoped to the customer ID from the event payload, preventing concurrent imports for the same customer while allowing parallel processing for different customers.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/concurrency.mdx#2025-04-10_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport const send = inngest.createFunction(\n  {\n    name: \"Process customer csv import\",\n    id: \"process-customer-csv-import\",\n    concurrency: {\n      limit: 1,\n      key: `event.data.customerId`, // You can use any piece of data from the event payload\n    },\n  },\n  { event: \"csv/file.uploaded\" },\n  async ({ event, step }) => {\n    await step.run(\"process-file\", async () => {\n      const file = await bucket.fetch(event.data.fileURI);\n      // ...\n    });\n\n    return { message: \"success\" };\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Batching in Python\nDESCRIPTION: Creates an Inngest function that processes batches of events with Python. The function is configured with a maximum batch size, timeout, and optional key for grouping events by user ID. It transforms event data and performs a bulk database write operation.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/batching.mdx#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@inngest_client.create_function(\n    fn_id=\"record-api-calls\",\n    trigger=inngest.TriggerEvent(event=\"log/api.call\"),\n    batch_events=inngest.Batch(\n        max_size=100,\n        timeout=datetime.timedelta(seconds=5),\n        key=\"event.data.user_id\"  # Optional: batch events by user ID\n    ),\n)\nasync def record_api_calls(ctx: inngest.Context, step: inngest.Step):\n    # NOTE: Use the events from ctx, which is an array of event payloads\n    attrs = [\n        {\n            \"user_id\": evt.data.user_id,\n            \"endpoint\": evt.data.endpoint,\n            \"timestamp\": to_datetime(evt.ts)\n        }\n        for evt in ctx.events\n    ]\n\n    async def record_data():\n        return await db.bulk_write(attrs)\n\n    result = await step.run(\"record-data-to-db\", record_data)\n\n    return {\"success\": True, \"recorded\": len(result)}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reactive Websocket Connection in Svelte\nDESCRIPTION: This code demonstrates how to create a reactive store in Svelte that updates in real-time with websocket messages. It creates a writable store for managing request state and a connect function that establishes a websocket connection, updating the store when new messages arrive.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/building-a-realtime-websocket-app-using-sveltekit.md#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { writable } from \"svelte/store\";\n\ntype State = {\n  requests: Array<Request>;\n};\n\n// Create a new store with the given data.\nexport const state = writable<State>({\n  requests: [],\n});\n\nexport const connect = () => {\n  // Create a new websocket\n  const ws = new WebSocket(\"ws://example.com\");\n\n  ws.addEventListener(\"message\", (message: any) => {\n    // Parse the incoming message here\n    const data: Request = JSON.parse(message.data);\n    // Update the state.  That's literally it.  This can happen from anywhere:\n    // we're not in a component, and there's no nested context.\n    state.update((state) => ({\n      ...state,\n      requests: [data].concat(state.requests),\n    }));\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Batching with Inngest in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a function that processes events in batches using Inngest's new batchEvents configuration. It shows how to set batch size and timeout, and how to access the array of events for bulk processing in a database.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/event-batching.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  // `batchEvents` is a new function configuration\n  { name: \"Record API calls\", batchEvents: { maxSize: 100, timeout: \"5s\" } },\n  { event: \"log/api.call\" },\n  // NOTE: Use the `events` instead of the `event` argument, which is an array of event payloads\n  async ({ events, step }) => {\n    const attrs = events.map(evt => {\n      return {\n        user_id: evt.data.user_id,\n        endpoint: evt.data.endpoint,\n        timestamp: toDateTime(evt.ts)\n      }\n    })\n\n    const result = await step.run(\"record data to DB\", async () => {\n      return db.bulkWrite(attrs)\n    })\n\n    return { success: true, recorded: result.length }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Middleware in TypeScript\nDESCRIPTION: Demonstrates the basic setup of middleware using InngestMiddleware class and registering it with the client.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/middleware/create.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst myMiddleware = new InngestMiddleware({\n  name: \"My Middleware\",\n  init: () => {\n      return {};\n  },\n});\n\n// Register it on the client\nconst inngest = new Inngest({\n  id: \"my-app\",\n  middleware: [myMiddleware],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing the Identify-Trends Tool for the Search Agent\nDESCRIPTION: Detailed implementation of the identify-trends tool that uses OpenAI embeddings to find similar stories in the database. This tool generates embeddings for the user query, finds similar content using vector similarity, and aggregates the stories by date to identify trends.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/render-hacker-news-ai-agent.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createAgent,\n  createTool,\n} from \"@inngest/agent-kit\";\n\n\nconst searchAgent = createAgent({\n  name: \"Search Agent\",\n  // ...\n  tools: [\n    // ...\n    createTool({\n      name: \"identify-trends\",\n      description:\n        \"Identify trends on Hacker News for a given set of interests\",\n      parameters: z.object({\n        query: z.string(),\n        startDate: z.string(),\n        endDate: z.string(),\n      }),\n      handler: async (input, { network }) => {\n        console.info(\"[HackerNewsAgent] Identifying trends\", input);\n        // Generate embedding for the query\n        const openai = new OpenAI({\n          apiKey: process.env.OPENAI_API_KEY,\n        });\n\n        const embedding = await openai.embeddings.create({\n          model: \"text-embedding-ada-002\",\n          input: input.query,\n        });\n\n        // Find similar stories using vector similarity\n        const similarStories = await db.query(\n          `WITH similar_stories AS (\n                SELECT title, content, date::timestamp as date, comments,\n                  (embedding <=> $1::vector) as distance\n                FROM stories\n                WHERE (embedding <=> $1::vector) < 0.3\n                AND interest_id = $2\n                AND date >= $3::date\n                AND date <= $4::date\n                ORDER BY date DESC\n              )\n              SELECT\n                date_trunc('day', date) as story_date,\n                COUNT(*) as story_count,\n                STRING_AGG(title, ' | ' ORDER BY date DESC) as titles\n              FROM similar_stories\n              GROUP BY date_trunc('day', date)\n              ORDER BY story_date DESC\n              LIMIT 10`,\n          [\n            `[${embedding.data[0].embedding.join(\",\")}]`,\n            interest.id,\n            input.startDate,\n            input.endDate,\n          ]\n        );\n\n        // Format results to show trends\n        const result = similarStories.rows.map((row) => {\n          const date = new Date(row.story_date).toLocaleDateString();\n          return `Date: ${date}\\nNumber of Related Stories: ${row.story_count}\\nTitles: ${row.titles}\\n\\n`;\n        });\n\n        console.info(\n          \"[HackerNewsAgent] Trends results:\",\n          input.query,\n          result.length\n        );\n\n        network?.state.kv.set(\"trends-result\", result);\n\n        return result;\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Inngest Function with Step in Go\nDESCRIPTION: Shows how to create an Inngest function with a step using the Go SDK. The step copies product images to S3 and is automatically retried on failure.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/inngest-steps.mdx#2025-04-10_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"github.com/inngest/inngestgo\"\n  \"github.com/inngest/inngestgo/step\"\n)\n\ninngestgo.CreateFunction(\n  // config\n  &inngestgo.FunctionOpts{\n    ID: \"import-product-images\",\n  },\n  // trigger (event or cron)\n  inngestgo.EventTrigger(\"shop/product.imported\", nil),\n  // handler function\n  func(ctx context.Context, input inngestgo.Input) (any, error) {\n    // Here goes the business logic\n    // By wrapping code in steps, it will be retried automatically on failure\n    s3Urls, err := step.Run(\"copy-images-to-s3\", func() ([]string, error) {\n      return copyAllImagesToS3(input.Event.Data[\"imageURLs\"].([]string))\n    })\n    if err != nil {\n      return nil, err\n    }\n\n    return nil, nil\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Flask Integration for Inngest\nDESCRIPTION: Sets up an Inngest integration with Flask framework in Python, including logging configuration and a simple hello world function handler.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/serving-inngest-functions.mdx#2025-04-10_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport inngest\nfrom src.flask import app\nimport inngest.flask\n\nlogger = logging.getLogger(f\"{app.logger.name}.inngest\")\nlogger.setLevel(logging.DEBUG)\n\ninngest_client = inngest.Inngest(app_id=\"flask_example\", logger=logger)\n\n@inngest_client.create_function(\n    fn_id=\"hello-world\",\n    trigger=inngest.TriggerEvent(event=\"say-hello\"),\n)\ndef hello(\n    ctx: inngest.Context,\n    step: inngest.StepSync,\n) -> str:\n\ninngest.flask.serve(\n    app,\n    inngest_client,\n    [hello],\n)\n\napp.run(port=8000)\n```\n\n----------------------------------------\n\nTITLE: Initializing Video Render and Updating User Balance in JavaScript\nDESCRIPTION: This snippet initializes the video rendering process by creating an Inngest function that updates the render status to 'pending' and deducts the necessary credits from the user's balance. It uses the built-in concurrency control from Inngest and supports cancellation based on matching events.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/banger-video-rendering-pipeline.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const renderVideo = inngest.createFunction(\n  {\n    name: 'Render video',\n    id: 'render-video',\n    cancelOn: [\n      {\n        event: 'banger/video.create',\n        match: 'data.videoId'\n      }\n    ],\n  },\n  { event: 'banger/video.create' },\n  async ({ event, step, attempt, logger }) => {\n    const updatedVideo = await step.run('update-user-balance', async () => {\n      await dbConnect()\n\n      const render = await VideoModel.findOneAndUpdate(\n        { _id: videoId },\n        { $set: { renderProgress: 0, renderTime: 0, status: 'pending' } },\n        { new: true }\n      )\n      .populate('user')\n      .lean()\n\n      invariant(video, 'no render found')\n\n      // Simplified\n      await UserModel.updateOne(\n        { _id: video.user._id },\n        { $inc: { unitsRemaining: -video.videoDuration } }\n      )\n      return video\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating Inngest with NestJS Framework\nDESCRIPTION: Implements Inngest in a NestJS application by configuring a handler at '/api/inngest' and injecting NestJS dependencies into Inngest functions. Uses Express as the underlying HTTP server.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/serving-inngest-functions.mdx#2025-04-10_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\nimport { NestExpressApplication } from '@nestjs/platform-express';\nimport { serve } from 'inngest/express';\n\nimport { inngest } from '@modules/common/inngest/client';\nimport { getInngestFunctions } from '@modules/common/inngest/functions';\n\nimport { AppModule } from './app.module';\nimport { AppService } from './app.service';\n\nasync function bootstrap() {\n  const app = await NestFactory.create<NestExpressApplication>(AppModule, {\n    bodyParser: true,\n  });\n\n  // Setup inngest\n  app.useBodyParser('json', { limit: '10mb' });\n\n  // Inject Dependencies into inngest functions\n\n  const logger = app.get(Logger);\n  const appService = app.get(AppService);\n\n  // Pass dependencies into this function\n  const inngestFunctions = getInngestFunctions({\n    appService,\n    logger,\n  });\n\n  // Register inngest endpoint\n  app.use(\n    '/api/inngest',\n    serve({\n      client: inngest,\n      functions: inngestFunctions,\n    }),\n  );\n\n  // Start listening for http requests\n  await app.listen(3000);\n}\n\nbootstrap();\n```\n\n----------------------------------------\n\nTITLE: Pausing Function Execution for a Specific Duration in TypeScript\nDESCRIPTION: This TypeScript example demonstrates using `step.sleep()` to pause the execution of a function for a specific amount of time. The function waits for two days after a user signup event before continuing execution.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/steps-workflows/sleeps.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default inngest.createFunction(\n  { id: \"send-delayed-email\" },\n  { event: \"app/user.signup\" },\n  async ({ event, step }) => {\n    await step.sleep(\"wait-a-couple-of-days\", \"2d\");\n    // Do something else\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing RAG Workflow with Inngest Steps in TypeScript\nDESCRIPTION: This code demonstrates a RAG (Retrieval-Augmented Generation) workflow using Inngest steps. The function queries a vector database, retrieves transcript content from S3, generates a summary using GPT-4, and saves the result to a database. Each step is implemented with automatic retry guarantees.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/examples/ai-agents-and-rag.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const summarizeContent = inngest.createFunction(\n  { name: 'Summarize content via GPT-4', id: 'summarize-content' },\n  { event: 'ai/summarize.content' },\n  async ({ event, step, attempt }) => {\n    const results = await step.run('query-vectordb', async () => {\n      return {\n        matches: [\n          {\n            id: 'vec3',\n            score: 0,\n            values: [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3],\n            text: casual.sentences(3),\n          },\n          {\n            id: 'vec4',\n            score: 0.0799999237,\n            values: [0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4],\n            text: casual.sentences(3),\n          },\n          {\n            id: 'vec2',\n            score: 0.0800000429,\n            values: [0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2],\n            text: casual.sentences(3),\n          },\n        ],\n        namespace: 'ns1',\n        usage: { readUnits: 6 },\n      };\n    });\n\n    const transcript = await step.run('read-s3-file', async () => {\n      return casual.sentences(10);\n    });\n\n    // We can globally share throttle limited functions like this using invoke\n    const completion = await step.invoke('generate-summary-via-gpt-4', {\n      function: chatCompletion,\n      data: {\n        messages: [\n          {\n            role: 'system',\n            content:\n              'You are a helpful assistant that summaries content for product launches.',\n          },\n          {\n            role: 'user',\n            content: `Question: Summarize my content: \\n${transcript}. \\nInformation: ${results.matches\n              .map((m) => m.text)\n              .join('. ')}`,\n          },\n        ],\n      },\n    });\n    // You might use the response like this:\n    const summary = completion.choices[0].message.content;\n\n    await step.run('save-to-db', async () => {\n      return casual.uuid;\n    });\n\n    await step.run('websocket-push-to-client', async () => {\n      return casual.uuid;\n    });\n    return { success: true, summaryId: casual.uuid };\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: FastAPI Modal Integration\nDESCRIPTION: Implements a FastAPI application with Inngest integration, including environment setup, function creation, and Modal deployment configuration.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/guides/modal.mdx#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom dotenv import load_dotenv\nfrom fastapi import FastAPI\nimport inngest\nimport inngest.fast_api\nimport modal\n\nload_dotenv()\n\napp = modal.App(\"test-fast-api\")\n\n# Load all environment variables that start with \"INNGEST_\"\nenv: dict[str, str] = {}\nfor k, v, in os.environ.items():\n    if k.startswith(\"INNGEST_\"):\n        env[k] = v\n\nimage = (\n    modal.Image.debian_slim()\n    .pip_install_from_requirements(\"requirements.txt\")\n    .env(env)\n)\n\nfast_api_app = FastAPI()\n\n# Create an Inngest client\ninngest_client = inngest.Inngest(app_id=\"fast_api_example\")\n\n# Create an Inngest function\n@inngest_client.create_function(\n    fn_id=\"my-fn\",\n    trigger=inngest.TriggerEvent(event=\"my-event\"),\n)\nasync def fn(ctx: inngest.Context, step: inngest.Step) -> str:\n    print(ctx.event)\n    return \"done\"\n\n# Serve the Inngest endpoint (its path is /api/inngest)\ninngest.fast_api.serve(fast_api_app, inngest_client, [fn])\n\n@app.function(image=image)\n@modal.asgi_app()\ndef fastapi_app():\n    return fast_api_app\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Queue and Bus with Inngest in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use Inngest to create functions that respond to events, effectively implementing both message queue and message bus concepts. It includes two functions that react to a 'thread/message.sent' event and an API endpoint that triggers these functions.\nSOURCE: https://github.com/inngest/website/blob/main/app/(landing-pages)/landing/(pages)/message-queue-vs-message-bus/content.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst createSummary = inngest.createFunction(\n  { id: \"create-conversation-summary\", concurrency: { limit: 10 } },\n  { event: \"thread/message.sent\" }\n  async (event) => {\n    // business logic to create a summary via LLM\n  }\n);\nconst createSummary = inngest.createFunction(\n  { id: \"send-notifications\" },\n  { event: \"thread/message.sent\" }\n  async (event) => {\n    // business logic to send email notifications to users\n  }\n);\n// In your API endpoint\nasync function POST(req) {\n  const message = await db.messages.create(req.body);\n\n  // ⬇️ This event triggers both functions to run, each with their own queue:\n  await inngest.send({ name: \"thread/message.sent\", data: message });\n\n  return Response.json({ success: true }, { status: 200 });\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Video Details from VideoPlayz using Inngest\nDESCRIPTION: This function fetches video details from VideoPlayz API. It makes a POST request to retrieve the MP4 URL and handles cases where the video might not be immediately available by invoking a status check function.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/mux-migrating-video-collections.mdx#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport const fetchVideo = inngest.createFunction(\n  { id: 'fetch-video-video-playz', name: 'Fetch video - VideoPlayz', concurrency: 10 },\n  { event: 'truckload/video.fetch' },\n  async ({ event, step }) => {\n    const response = await fetch(\n      `https://api.videoplayz.notarealdomain.com/videos/${event.data.encrypted.video.id}/downloads`,\n      {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${event.data.encrypted.credentials.secretKey}`,\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n\n    const result = await response.json();\n\n    if (result.result.default.status === 'ready') {\n      return {\n        id: event.data.encrypted.video.id,\n        url: result.result.default.url,\n      };\n    }\n\n    const { url } = await step.invoke(`check-source-status-video-playz`, {\n      function: checkSourceStatus,\n      data: {\n        jobId: event.data.jobId,\n        encrypted: event.data.encrypted,\n      },\n    });\n\n    return {\n      id: event.data.encrypted.video.id,\n      url,\n    };\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Invoking Functions in Go with Inngest\nDESCRIPTION: Shows how to create and invoke functions using Inngest in Go. It demonstrates the creation of a ComputeSquare function and its invocation from a MainFunction.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/invoking-functions-directly.mdx#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"github.com/inngest/inngestgo\"\n  \"github.com/inngest/inngestgo/step\"\n)\n\n// Some function we'll call\ninngest.CreateFunction(\n\tinngest.FunctionOpts{ID: \"compute-square\"},\n\tinngest.EventTrigger(\"calculate/square\"),\n\tComputeSquare,\n)\nfunc ComputeSquare(ctx *inngest.Context) error {\n\tdata := struct {\n\t\tNumber int `json:\"number\"`\n\t}{}\n\tif err := ctx.Event.Data.Decode(&data); err != nil {\n\t\treturn err\n\t}\n\n\treturn ctx.Return(map[string]int{\n\t\t\"result\": data.Number * data.Number,\n\t})\n}\n\n\n// In this function, we'll call ComputeSquare\ninngest.CreateFunction(\n\tinngest.FunctionOpts{ID: \"main-function\"},\n\tinngest.EventTrigger(\"main/event\"),\n\tMainFunction,\n)\nfunc MainFunction(ctx *inngest.Context) error {\n\tsquare, err := step.Invoke(\"compute-square-value\", &inngest.InvokeOpts{\n\t\tFunction: \"compute-square\",\n\t\tData: map[string]interface{}{\n\t\t\t\"number\": 4,\n\t\t},\n\t})\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tresult := square.Data[\"result\"].(int)\n\treturn ctx.Return(fmt.Sprintf(\"Square of 4 is %d.\", result))\n}\n```\n\n----------------------------------------\n\nTITLE: Determining Event Types in Multi-Trigger Functions (TypeScript)\nDESCRIPTION: Example showing how to determine which event type triggered the function in TypeScript. Uses type narrowing with conditional checks on event.name to provide type-safe event handling for different event types.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/multiple-triggers.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync ({ event }) => {\n  //      ^? type event: EventA | EventB | InngestScheduledEvent | InngestFnInvoked\n  if (event.name === \"a\") {\n    // `event` is type narrowed to only the `a` event\n  } else if (event.name === \"b\") {\n    // `event` is type narrowed to only the `b` event\n  } else {\n    // `event` is type narrowed to only the `inngest/function.invoked` event\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Inngest Dev Server with NPX\nDESCRIPTION: Command to start the Inngest Dev Server using NPX. The server connects to the local FastAPI application endpoint.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/getting-started/python-quick-start.mdx#2025-04-10_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpx inngest-cli@latest dev -u http://127.0.0.1:8000/api/inngest --no-discovery\n```\n\n----------------------------------------\n\nTITLE: Invalidating CDN Cache after Video Rendering in JavaScript\nDESCRIPTION: This snippet handles CDN cache invalidation after a video is re-rendered to ensure users always see the freshest version. It extracts the video pathname from the URL and creates CloudFront invalidations for the video and its thumbnails, with error handling that reports to a Telegram log.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/banger-video-rendering-pipeline.mdx#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait step.run('create-invalidation-on-CloudFront', async () => {\n  try {\n    const { pathname: videoPathnameToInvalidate } = new URL(videoFileURL)\n\n    return await invalidateCloudFrontPaths([\n      videoPathnameToInvalidate,\n      `/thumbnails/${videoId}.jpg`,\n      `/thumbnails/${videoId}-square.jpg`\n    ])\n  } catch (error) {\n    sendTelegramLog(`Invalidation failed for ${videoId}: ${error.message}`)\n    return `Invalidation failed, skipping: ${error.message}`\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Minimal Inngest Go App with v0.8\nDESCRIPTION: Example of a minimal Inngest Go application using the v0.8 SDK. Shows the complete setup including client initialization, function creation with an event trigger, and serving the HTTP handler.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/go/migrations/v0.7-to-v0.8.mdx#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\t\"net/http\"\n\n\t\"github.com/inngest/inngestgo\"\n)\n\nfunc main() {\n\tclient, err := inngestgo.NewClient(inngestgo.ClientOpts{AppID: \"my-app\"})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t_, err = inngestgo.CreateFunction(\n\t\tclient,\n\t\tinngestgo.FunctionOpts{ID: \"my-fn\"},\n\t\tinngestgo.EventTrigger(\"my-event\", nil),\n\t\tfunc(\n\t\t\tctx context.Context,\n\t\t\tinput inngestgo.Input[inngestgo.GenericEvent[any, any]],\n\t\t) (any, error) {\n\t\t\treturn \"Hello, world!\", nil\n\t\t},\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t_ = http.ListenAndServe(\":8080\", client.Serve())\n}\n```\n\n----------------------------------------\n\nTITLE: Delaying Jobs with Inngest in Python\nDESCRIPTION: This snippet demonstrates how to delay a function execution by a specific duration (4 hours) using Inngest's step.sleep() method in Python. It creates a function that waits before executing a task in response to a user creation event.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/delayed-functions.mdx#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport inngest\nfrom src.inngest.client import inngest_client\nfrom datetime import timedelta\n\n@inngest_client.create_function(\n    fn_id=\"send-signup-email\", \n    trigger=inngest.TriggerEvent(event=\"app/user.created\")\n)\nasync def send_signup_email(ctx: inngest.Context, step: inngest.Step):\n    \n    await step.sleep(\"wait-for-the-future\", timedelta(hours=4))\n\n    async def future_work():\n        # Code here runs in the future automatically\n        pass\n\n    await step.run(\"do-some-work-in-the-future\", future_work)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Process Audio Function in TypeScript with Inngest\nDESCRIPTION: A TypeScript example of an Inngest function that processes audio by transcoding, generating a transcript, summarizing with AI, and saving to a database. Each operation is organized as a separate step with memoized state, enabling long-running workflows.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/migrating-across-clouds-with-zero-downtime.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inngest } from \"./client\";\n\nexport const processAudio = inngest.createFunction(\n  { id: \"process-audio\" },\n  { event: \"podcast/audio.uploaded\" },\n  async ({ event, step }) => {\n    const newFileURL = await step.run('transcode-audio', async () => {\n      const filename = await download(event.data.url);\n      return await transcode(filename, 'aac');\n    });\n\n    const transcript = await step.run('generate-transcript', async () => {\n      // ... business logic omitted for sake of example ...\n    });\n    const summary = await step.run('summarize-with-ai', async () => {\n      // ...\n    });\n\n    await step.run('save-to-db', async () => {\n      // ...\n    })\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Retries for Multiple Steps in Inngest Functions\nDESCRIPTION: Demonstrates how to implement retries for individual steps within an Inngest function. Each step has its own set of retries, allowing for more granular error handling and recovery.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/error-retries/retries.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  { id: \"sync-systems\" },\n  { event: \"auto/sync.request\" },\n  async ({ step }) => {\n    // Can be retried up to 4 times\n    const data = await step.run(\"get-data\", async () => {\n      return getDataFromExternalSource();\n    });\n\n    // Can also be retried up to 4 times\n    await step.run(\"save-data\", async () => {\n      return db.syncs.insertOne(data);\n    });\n  },\n);\n```\n\nLANGUAGE: go\nCODE:\n```\ninngestgo.CreateFunction(\n\tinngestgo.FunctionOpts{ID: \"sync-systems\"},\n\tinngestgo.EventTrigger(\"auto/sync.request\", nil),\n\tfunc(ctx context.Context, input inngestgo.Input[SyncRequestEvent]) (any, error) {\n\t\t// can be retried up to 4 times\n\t\tdata, err := step.Run(ctx, \"get-data\", func(ctx context.Context) (any, error) {\n\t\t\treturn getDataFromExternalSource()\n\t\t})\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\t// can also be retried up to 4 times\n\t\t_, err = step.Run(ctx, \"save-data\", func(ctx context.Context) (any, error) {\n\t\t\treturn db.Syncs.InsertOne(data.(DataType))\n\t\t})\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\treturn nil, nil\n\t},\n)\n```\n\nLANGUAGE: python\nCODE:\n```\n@inngest_client.create_function(\n    fn_id=\"sync-systems\",\n    trigger=inngest.TriggerEvent(event=\"auto/sync.request\"),\n)\ndef sync_systems(ctx: inngest.Context, step: inngest.StepSync) -> None:\n    # Can be retried up to 4 times\n    data = step.run(\"Get data\", get_data_from_external_source)\n\n    # Can also be retried up to 4 times\n    step.run(\"Save data\", db.syncs.insert_one, data)\n```\n\n----------------------------------------\n\nTITLE: Event Schema Definition with Zod\nDESCRIPTION: Demonstrates how to define event payload types using Zod schema validation, including individual event definitions and combined event maps.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/client/create.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventSchemas, Inngest, type LiteralZodEventSchema } from \"inngest\";\nimport { z } from \"zod\";\n\nconst productPurchasedEvent = z.object({\n  name: z.literal(\"shop/product.purchased\"),\n  data: z.object({ productId: z.string() }),\n});\n\nconst productViewedEvent = z.object({\n  name: z.literal(\"shop/product.viewed\"),\n  data: z.object({ productId: z.string() }),\n}) satisfies LiteralZodEventSchema;\n\nconst eventsMap = {\n  \"app/account.created\": {\n    data: z.object({\n      userId: z.string(),\n    }),\n  },\n  \"app/subscription.started\": {\n    data: z.object({\n      userId: z.string(),\n      planId: z.string(),\n    }),\n  },\n};\n\nexport const inngest = new Inngest({\n  schemas: new EventSchemas()\n    .fromZod([productPurchasedEvent, productViewedEvent])\n    .fromZod(eventsMap),\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Hacker News Agent Workflow with Inngest\nDESCRIPTION: The main workflow function that fetches question and interest data from PostgreSQL database as the first step in the AI workflow. This function is triggered by the 'hacker-news-agent/run' event and uses Inngest's step mechanism for handling retries and error recovery.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/render-hacker-news-ai-agent.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inngest } from \"./client\";\n\nexport const hackerNewsAgent = inngest.createFunction(\n  {\n    id: \"hacker-news-agent\",\n  },\n  { event: \"hacker-news-agent/run\" },\n  async ({ event, db, step }) => {\n    const { interest_id, question_id } = event.data;\n\n    // By wrapping code in step.run(),\n    //   the code will be retried if it throws an error.\n    // If successful, its result is saved to prevent unnecessary re-execution.\n    const { interest, question } = await step.run(\n      \"fetch-interest-and-question\",\n      async () => {\n        const interest = await db.query(\n          \"SELECT * FROM interests WHERE id = $1 LIMIT 1\",\n          [interest_id]\n        );\n        const question = await db.query(\n          \"SELECT * FROM questions WHERE id = $1 LIMIT 1\",\n          [question_id]\n        );\n        return { interest: interest.rows[0], question: question.rows[0] };\n      }\n    );\n\n    if (!interest || !question) {\n      console.warn(\n        \"[HackerNewsAgent] Interest or question not found, aborting\"\n      );\n      return;\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Inngest Functions with Cancellation Cleanup\nDESCRIPTION: Implementation of two Inngest functions - a main function that can be cancelled and a cleanup function that executes after cancellation. The cleanup function uses the inngest/function.cancelled event with conditional filtering.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/examples/cleanup-after-function-cancellation.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst inngest = new Inngest({ id: \"newsletter-app\" });\n\n// This is our \"import\" function that will get cancelled\nexport const importAllContacts = inngest.createFunction(\n  {\n    id: \"import-all-contacts\",\n    cancelOn: [{ event: \"contacts/import.cancelled\", if: \"async.data.importId == event.data.importId\" }]\n  },\n  { event: \"contacts/import.requested\" },\n  async ({ event, step  }) => {\n    // This is a long running function\n  }\n)\n\n// This function will be run only when the matching function_id has a run that is cancelled\nexport const cleanupCancelledImport = inngest.createFunction(\n  {\n    name: \"Cleanup cancelled import\",\n    id: \"cleanup-cancelled-import\"\n  },\n  {\n    event: \"inngest/function.cancelled\",\n    // The function ID is a hyphenated slug of the App ID w/ the functions\" id\n    if: \"event.data.function_id == 'newsletter-app-import-all-contacts'\"\n  },\n  async ({ event, step, logger }) => {\n    // This code will execute after your function is cancelled\n\n    // The event that triggered our original function run is passed nested in our event payload\n    const originalTriggeringEvent = event.data.event;\n    logger.info(`Import was cancelled: ${originalTriggeringEvent.data.importId}`)\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Throttling in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up throttling for an Inngest function in TypeScript. It limits the function to 1 execution per 5 seconds, with a burst capacity of 2, using the user_id as the throttling key.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/throttling.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  {\n    id: \"unique-function-id\",\n    throttle: {\n      limit: 1,\n      period: \"5s\",\n      burst: 2,\n      key: \"event.data.user_id\",\n    },\n  }\n  { event: \"ai/summary.requested\" },\n  async ({ event, step }) => {\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Sending Events to Inngest Server in Python\nDESCRIPTION: Demonstrates multiple ways to send events to Inngest server using both async and sync methods. Shows initialization of Inngest client and sending single or multiple events with custom data payloads.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/client/send.mdx#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport inngest\n\ninngest_client = inngest.Inngest(app_id=\"my_app\")\n\n# Call the `send` method if you're using async/await\nids = await inngest_client.send(\n    inngest.Event(name=\"my_event\", data={\"msg\": \"Hello!\"})\n)\n\n# Call the `send_sync` method if you aren't using async/await\nids = inngest_client.send_sync(\n    inngest.Event(name=\"my_event\", data={\"msg\": \"Hello!\"})\n)\n\n# Can pass a list of events\nids = await inngest_client.send(\n    [\n        inngest.Event(name=\"my_event\", data={\"msg\": \"Hello!\"}),\n        inngest.Event(name=\"my_other_event\", data={\"name\": \"Alice\"}),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Sending Multiple Events in Python\nDESCRIPTION: Shows how to send multiple events in a single request using Python. This batching approach is efficient for sending related events together.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/events/index.mdx#2025-04-10_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nawait inngest_client.send([\n  { name: \"storefront/cart.checkout.completed\", data: { ... } },\n  { name: \"storefront/coupon.used\", data: { ... } },\n  { name: \"storefront/loyalty.program.joined\", data: { ... } },\n])\n```\n\n----------------------------------------\n\nTITLE: Rotating Encryption Keys in TypeScript\nDESCRIPTION: Shows how to use fallback decryption keys when rotating encryption keys in TypeScript. This approach allows for gradual key rotation while maintaining the ability to decrypt events encrypted with older keys.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/middleware/encryption-middleware.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// start out with the current key\nencryptionMiddleware({\n  key: process.env.MY_ENCRYPTION_KEY,\n});\n\n// deploy all services with the new key as a decryption fallback\nencryptionMiddleware({\n  key: process.env.MY_ENCRYPTION_KEY,\n  fallbackDecryptionKeys: [\"new\"],\n});\n\n// deploy all services using the new key for encryption\nencryptionMiddleware({\n  key: process.env.MY_ENCRYPTION_KEY_V2,\n  fallbackDecryptionKeys: [\"current\"],\n});\n\n// once you are sure all data using the \"current\" key has passed, phase it out\nencryptionMiddleware({\n  key: process.env.MY_ENCRYPTION_KEY_V2,\n});\n```\n\n----------------------------------------\n\nTITLE: Using sleep_until in an Inngest Function (Python)\nDESCRIPTION: Example of implementing the sleep_until method in an Inngest function. This code creates a function with a trigger event and demonstrates how to pause execution for 2 seconds using a datetime object.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/steps/sleep-until.mdx#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@inngest_client.create_function(\n    fn_id=\"my_function\",\n    trigger=inngest.TriggerEvent(event=\"app/my_function\"),\n)\nasync def fn(\n    ctx: inngest.Context,\n    step: inngest.Step,\n) -> None:\n    await step.sleep_until(\n        \"zzz\",\n        datetime.datetime.now() + datetime.timedelta(seconds=2),\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining Fan-out Functions in TypeScript\nDESCRIPTION: This TypeScript code defines two functions, 'sendWelcomeEmail' and 'startStripeTrial', both triggered by the 'app/user.signup' event. It demonstrates how to implement fan-out by having multiple independent functions respond to the same event.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/fan-out-jobs.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst sendWelcomeEmail = inngest.createFunction(\n  { id: 'send-welcome-email' },\n  { event: 'app/user.signup' },\n  async ({ event, step }) => {\n    await step.run('send-email', async () => {\n      await sendEmail({ email: event.data.user.email, template: 'welcome');\n    });\n  }\n)\n\nconst startStripeTrial = inngest.createFunction(\n  { id: 'start-stripe-trial' },\n  { event: 'app/user.signup' },\n  async ({ event }) => {\n    const customer = await step.run('create-customer', async () => {\n      return await stripe.customers.create({ email: event.data.user.email });\n    });\n    await step.run('create-subscription', async () => {\n      return await stripe.subscriptions.create({\n        customer: customer.id,\n        items: [{ price: 'price_1MowQULkdIwHu7ixraBm864M' }],\n        trial_period_days: 14,\n      });\n    });\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-tenant AI Workflow with Inngest in Python\nDESCRIPTION: Demonstrates how to create a throttled AI workflow function that processes contacts with proper multitenancy support. The function includes throttling configuration to limit requests per user and implements a step-based workflow pattern.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/principles-of-production-ai.mdx#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@inngest_client.create_function(\n    fn_id=\"import_contacts\",\n    trigger=inngest.TriggerEvent(event=\"user/process-contacts\"),\n    throttle=Throttle(\n    \tkey=\"event.data.user_id\",\n       limit=10,\n       period=datetime.timedelta(seconds=60),\n     ),\n)\nasync def fn(\n    ctx: inngest.Context,\n    step: inngest.Step,\n) -> None:\n    contacts = await step.run(\"load_contacts\", load_contacts)\n\n    sanitized_contacts = await step.run(\n\"sanitize_contacts\",\nsanitize_contacts,\ncontacts\n    )\n\n    await step.run(\"embed_contacts\", embed_contacts, sanitized_contacts)\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Model Call with AgentKit in Inngest Function\nDESCRIPTION: Demonstrates how to use AgentKit to create an agent and run a single model call within an Inngest function. This example creates a writer agent using OpenAI's GPT-4 model to generate a tweet about AI.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/steps-workflows/step-ai-orchestration.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent, agenticOpenai as openai, createAgent } from \"@inngest/agent-kit\";\nexport default inngest.createFunction(\n  { id: \"summarize-contents\" },\n  { event: \"app/ticket.created\" },\n  async ({ event, step }) => {\n\n    // Create a new agent with a system prompt (you can add optional tools, too)\n    const writer = createAgent({\n      name: \"writer\",\n      system: \"You are an expert writer.  You write readable, concise, simple content.\",\n      model: openai({ model: \"gpt-4o\", step }),\n    });\n\n    // Run the agent with an input.  This automatically uses steps\n    // to call your AI model.\n    const { output } = await writer.run(\"Write a tweet on how AI works\");\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Syncing User Data from Clerk to Database with Inngest\nDESCRIPTION: This function is triggered by a 'clerk/user.created' event and syncs the new user data from Clerk to a database. It extracts user ID, name, and email from the Clerk event payload and inserts them into a database.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/clerk-webhook-events.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst syncUser = inngest.createFunction(\n  { id: 'sync-user-from-clerk' },\n  { event: 'clerk/user.created' },\n  async ({ event }) => {\n    // The event payload's data will be the Clerk User json object\n    const { user } = event.data;\n    const { id, first_name, last_name } = user;\n    const email = user.email_addresses.find(e =>\n      e.id === user.primary_email_address_id\n    ).email;\n    await database.users.insert({ id, email, first_name, last_name });\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenAI Integration with Throttling in Inngest\nDESCRIPTION: Example demonstrating OpenAI integration with rate limiting and throttling configuration for processing contact uploads using step.ai.infer().\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/step-ai-for-serverless-ai-applications.mdx#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default inngest.createFunction(\n  {\n    id: \"generate-import-workflow\",\n    throttle: {\n      limit: 5000,\n      period: \"1m\",\n    },\n  },\n  { event: \"contacts.uploaded\" },\n  async ({ event, step }) => {\n    const generatedStepsResult = await step.ai.infer(\n      \"generate-workflow-steps\",\n      {\n        model: step.ai.models.openai({ model: \"gpt-4\" }),\n        body: {\n          messages: [\n            {\n              role: \"user\",\n              content: prompt(event.data.contactsFileContent),\n            },\n          ],\n        },\n      }\n    );\n\n   // ...\n }\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Cancellable Function in Go\nDESCRIPTION: This snippet illustrates how to create a cancellable function in Go using Inngest. It includes event-based cancellation and sets up the basic structure for a schedule reminder function.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/cancellation.mdx#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"github.com/inngest/inngestgo\"\n\t\"github.com/inngest/inngestgo/step\"\n)\n\nfunc main() {\n\tf := inngestgo.CreateFunction(\n\t\tinngestgo.FunctionOpts{\n\t\t\tID:   \"schedule-reminder\",\n\t\t\tName: \"Schedule reminder\",\n\t\t\tCancel: []inngestgo.Cancel{\n\t\t\t\t{\n\t\t\t\t\tEvent: \"tasks/deleted\",\n\t\t\t\t\tIfExp: \"event.data.id == async.data.id\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t// Run on every tasks/reminder.created event.\n\t\tinngestgo.EventTrigger(\"tasks/reminder.created\", nil),\n\t\tScheduleReminder,\n\t)\n}\n\nfunc ScheduleReminder(ctx context.Context, input inngestgo.Input[ScheduleReminderEvent]) (any, error) {\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using OpenAI Client in Python Inngest Function\nDESCRIPTION: Shows how to use the injected OpenAI client within a Python Inngest function.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/middleware/dependency-injection.mdx#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@inngest_client.create_function(\n    fn_id=\"user-create\",\n    trigger=inngest.TriggerEvent(event=\"app/user.create\"),\n)\nasync def fn(ctx: inngest.Context, step: inngest.Step):\n    chat_completion = ctx.openai.chat.completions.create(\n        messages=[\n            {\n                \"role\": \"user\",\n                \"content\": \"Say this is a test\",\n            }\n        ],\n        model=\"gpt-3.5-turbo\",\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting Event-Level Idempotency Key in Python\nDESCRIPTION: Python implementation for setting an idempotency key when sending an event to Inngest. The cart_id is used to generate a unique event ID to prevent duplicate processing.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/handling-idempotency.mdx#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncart_id = 'CGo5Q5ekAxilN92d27asEoDO'\nawait inngest.send({\n  id: f'checkout-completed-{cart_id}', // <-- This is the idempotency key\n  name: 'cart/checkout.completed',\n  data: {\n    email: 'taylor@example.com',\n    cart_id: cart_id\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Triggering Inngest Workflow with Event Data\nDESCRIPTION: This snippet sends an event to Inngest to start the video processing workflow, passing tip and video resource IDs as payload data. This event initiates the entire backend processing pipeline.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/nextjs-trpc-inngest.md#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait inngest.send({\n  name: \"tip/video.uploaded\",\n  data: {\n    tipId: tip._id,\n    videoResourceId: newVideoResource._id,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Declarative Event-Driven Functions with Inngest in TypeScript\nDESCRIPTION: This TypeScript example demonstrates how to create a declarative function with Inngest that responds to auth/signup events. The function imports event types, defines handlers, and will automatically execute when the specified event is received, showcasing Inngest's event-driven approach to background jobs.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/modern-serverless-job-scheduler.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createFunction } from \"inngest\";\n// Import the type for the event you want to listen to.  This fully types\n// the arguments to your function.  The types are generated by running\n// `npx inngest-cli types ts`.\nimport { AuthSignup } from '../__generated__/inngest';\nimport { addToStripe, sendWelcomeEmail } from '../lib/';\n\nexport const newPR = createFunction<AuthSignup>(\"New PR\", \"auth/signup\", async ({ event }) => {\n  // This function is triggered any time the `auth/signup` event is received.\n  await addToStripe(event.data.user_id);\n  await sendWelcomeEmail(event);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Embedding for New Book Using Inngest Function\nDESCRIPTION: This TypeScript code snippet demonstrates how to create an Inngest function that responds to a 'db/books.inserted' event. The function creates an embedding for the new book and updates the database with the embedding.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/neon-postgres-database-triggers-for-durable-functions.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  { id: \"create-embedding-for-new-book\" },\n  { event: \"db/books.inserted\" },\n  async ({ event, step }) => {\n    const embedding = await step.run(\"create-embedding\", async () => {\n      const metadata = generateMetadata(event.data.new);\n      return await createEmbedding(metadata);\n    });\n    await step.run(\"insert-embedding\", async () => {\n      const id = event.data.new.id.data;\n      return await sql`UPDATE SET embedding = ${embedding} WHERE id = ${id}`\n    })\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Consuming a Stream in a React Client Component\nDESCRIPTION: This Next.js client component demonstrates how to consume a streaming response from the server. It sends a search prompt to the API endpoint, reads the stream data in chunks, and updates the UI with each piece of information received until the stream is complete.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/realtime/nextjs.mdx#2025-04-10_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\nimport { useState, useRef, useEffect } from \"react\";\n\nexport function SimpleSearch() {\n  const [updates, setUpdates] = useState<string[]>([]);\n  const [input, setInput] = useState(\"\");\n\n  const handleNewChat = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (!input.trim()) return;\n\n    try {\n      const response = await fetch(\"/api/simple-search\", {\n        method: \"POST\",\n        body: JSON.stringify({ prompt: input }),\n      });\n\n      const reader = response.body?.getReader();\n      if (!reader) {\n        return;\n      }\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n          break;\n        }\n        const text = new TextDecoder().decode(value);\n        const data = JSON.parse(text).data;\n        if (data === \"Search complete\") {\n          reader.cancel();\n          break;\n        } else {\n          setUpdates((prev) => [...prev, data]);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n    } finally {\n      setInput(\"\");\n    }\n  };\n\n  return (\n    // ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Parallel Product Import with Promise.all() in Inngest\nDESCRIPTION: This advanced implementation uses Promise.all() to run all product import steps in parallel. It also includes a final step to send a notification email when the import is completed. Inngest manages the concurrency and retries for each step.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/import-ecommerce-api-data-in-seconds.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  { id: \"shopify-product-import\", concurrency: 10 },\n  { event: \"shopify/import.requested\" },\n  async ({ event, step }) => {\n    // --- See first code snippet above for the setup ---\n\n    // Since step.run return a Promise, we iterate over all products\n    // creating an array of step.run Promises - Inngest can handle it all!\n    await Promise.all(\n      allProducts.map((product) =>\n        step.run(\"import-product\", async () => {\n          await database.upsertProduct({\n            storeId: event.data.storeId,\n            product,\n          })\n        })\n      )\n    )\n\n    // Tell the user the import has been completed\n    await step.run(\"import-completed-notification\", async () => {\n      const user = await database.getUser(event.data.userId)\n      await sentEmail(user.email, \"import_completed\")\n    })\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Simple Concurrency Limit Configuration in Inngest\nDESCRIPTION: Shows how to set a basic concurrency limit of 10 concurrent executions for a function that syncs contacts.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/functions/concurrency.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default inngest.createFunction(\n  {\n    id: \"sync-contacts\",\n    concurrency: {\n      limit: 10,\n    },\n  }\n  // ...\n);\n```\n\n----------------------------------------\n\nTITLE: Sending Emails with Resend Helper Function\nDESCRIPTION: A helper function that uses the Resend API to send emails. It accepts recipient email, subject, and React content, then returns the response data or throws an error if the email fails to send.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/resend-webhook-events.mdx#2025-04-10_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// resend.ts\n\nimport { Resend } from 'resend';\n\nconst resend = new Resend(process.env.RESEND_API_KEY);\n\nexport async function sendEmail(\n  to: string,\n  subject: string,\n  content: React.ReactElement\n) {\n  const { data, error } = await resend.emails.send({\n    from: 'Acme <noreply@acme.dev>',\n    to: [to],\n    subject,\n    react: content\n  });\n\n  if (error) {\n    throw error;\n  }\n\n\treturn data;\n};\n```\n\n----------------------------------------\n\nTITLE: Using step.ai.infer() for OpenAI Model Inference in Inngest\nDESCRIPTION: Shows how to use step.ai.infer() to call OpenAI's GPT-4 model within an Inngest function. This method offloads the inference request to Inngest's infrastructure, providing AI observability and metrics.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/steps-workflows/step-ai-orchestration.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default inngest.createFunction(\n  { id: \"summarize-contents\" },\n  { event: \"app/ticket.created\" },\n  async ({ event, step }) => {\n\n    // This calls your model's chat endpoint, adding AI observability,\n    // metrics, datasets, and monitoring to your calls.\n    const response = await step.ai.infer(\"call-openai\", {\n      model: step.ai.models.openai({ model: \"gpt-4o\" }),\n      // body is the model request, which is strongly typed depending on the model\n      body: {\n        messages: [{\n          role: \"assistant\",\n          content: \"Write instructions for improving short term memory\",\n        }],\n      },\n    });\n\n    // The response is also strongly typed depending on the model.\n    return response.choices;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Sharing Concurrency Limits Across Functions with Scope in Inngest\nDESCRIPTION: Uses the scope option to share concurrency limits across multiple functions. This example sets an account-level limit for OpenAI API calls that can be shared by any function using the same key.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/concurrency.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  {\n    id: \"generate-ai-summary\",\n    concurrency: [\n      {\n        scope: \"account\",\n        key: `\"openai\"`,\n        limit: 60,\n      },\n    ],\n  },\n  { event: \"ai/summary.requested\" },\n  async ({ event, step }) => {\n  }\n);\n```\n\nLANGUAGE: go\nCODE:\n```\ninngest.CreateFunction(\n  &inngestgo.FunctionOpts{\n    Name: \"generate-ai-summary\",\n    Concurrency: []inngest.Concurrency{\n      {\n        Scope: \"account\",\n        Key:   `\"openai\"`,\n        Limit: 60,\n      }\n    },\n  },\n  inngestgo.EventTrigger(\"ai/summary.requested\", nil),\n  func(ctx context.Context, input inngestgo.Input) (any, error) {\n    // Your function handler here\n    return nil, nil\n  },\n)\n```\n\nLANGUAGE: python\nCODE:\n```\n@inngest.create_function(\n    fn_id=\"another-function\",\n    concurrency=[\n      inngest.Concurrency(\n          scope=\"account\",\n          key='\"openai\"',\n          limit=60,\n      )\n    ]\n)\nasync def first_function(event, step):\n    # Your function handler here\n    pass\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Concurrency Limits in TypeScript\nDESCRIPTION: Example of creating an Inngest function with two concurrency limits: one at the account level with the \"openai\" key and another at the function level using the event's account_id field.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/concurrency.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  {\n    id: \"unique-function-id\",\n    concurrency: [\n      {\n         // Use an account-level concurrency limit for this function, using the\n         // \"openai\" key as a virtual queue.  Any other function which\n         // runs using the same \"openai\"` key counts towards this limit.\n         scope: \"account\",\n         key: `\"openai\"`,\n         limit: 10,\n      },\n      {\n         // Create another virtual concurrency queue for this function only.  This\n         // limits all accounts to a single execution for this function, based off\n         // of the `event.data.account_id` field.\n         // NOTE - \"fn\" is the default scope, so we could omit this field.\n         scope: \"fn\",\n         key: \"event.data.account_id\",\n         limit: 1,\n      },\n    ],\n  },\n  { event: \"ai/summary.requested\" },\n  async ({ event, step }) => {\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Restricting Parallel Customer Imports with Concurrency in Go\nDESCRIPTION: This Go implementation shows how to limit CSV import jobs to one per customer using Inngest's concurrency control. It configures a concurrency limit of 1 using the customer ID as the key, ensuring only one import job runs per customer at any time.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/concurrency.mdx#2025-04-10_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ninngestgo.CreateFunction(\n  &inngestgo.FunctionConfig{\n    Name: \"Process customer csv import\",\n    ID: \"process-customer-csv-import\",\n    Concurrency: []inngest.Concurrency{\n      {\n        Limit: 1,\n        Key: `event.data.customerId`, // You can use any piece of data from the event payload\n      },\n    },\n  },\n  inngestgo.EventTrigger(\"csv/file.uploaded\"),\n  func(ctx context.Context, event *inngestgo.Event, step inngestgo.StepFunction) (any, error) {\n    _, err := step.Run(ctx, \"process-file\", func(ctx context.Context) (any, error) {\n      file, err := bucket.Fetch(event.Data.FileURI)\n      if err != nil {\n        return nil, err\n      }\n      // ...\n      return nil, nil\n    })\n    if err != nil {\n      return err, nil\n    }\n\n    return nil, nil\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Throttling in Go\nDESCRIPTION: This snippet shows how to configure throttling for an Inngest function in Go. It sets a limit of 1 execution per 5 seconds, with a burst capacity of 2, using the user_id as the throttling key.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/throttling.mdx#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ninngestgo.CreateFunction(\n  &inngestgo.FunctionOpts{\n    ID: \"unique-function-id\",\n    Throttle: &inngestgo.Throttle{\n      Limit: 1,\n      Period: 5 * time.Second,\n      Key: inngestgo.StrPtr(\"event.data.user_id\"),\n      Burst: 2,\n    },\n  },\n  inngestgo.EventTrigger(\"ai/summary.requested\", nil),\n  func(ctx context.Context, input inngestgo.Input) (any, error) {\n    // This function will be throttled to 1 run per 5 seconds for a given event payload with matching user_id\n    return nil, nil\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Throwing a Non-Retriable Error in TypeScript\nDESCRIPTION: Example of throwing a custom error in TypeScript that will not be retried by the Inngest system. This demonstrates how to create custom error types that can be identified in the platform.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/platform/monitor/inspecting-function-runs.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nthrow new NonRetriableError(\"Failed to import data\");\n```\n\n----------------------------------------\n\nTITLE: Sending Events in Inngest Functions (v2)\nDESCRIPTION: Example of creating an Inngest function using v2 API to send an event during user onboarding. It demonstrates the previous syntax for step.sendEvent() which doesn't require a step ID.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/functions/step-send-event.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default inngest.createFunction(\n  { name: \"User onboarding\" },\n  { event: \"app/user.signup\" },\n  async ({ event, step }) => {\n    // Do something\n    await step.sendEvent({\n      name: \"app/user.activated\",\n      data: { userId: event.data.userId },\n    });\n    // Do something else\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-tenant Concurrency with Keys in Inngest\nDESCRIPTION: Uses concurrency keys to apply limits to each unique value (like account_id), creating virtual queues per unique key. This prevents a single tenant from consuming too many resources in a multi-tenant system.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/concurrency.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  {\n    id: \"generate-ai-summary\",\n    concurrency: [\n      {\n        key: \"event.data.account_id\",\n        limit: 10,\n      },\n    ],\n  },\n  { event: \"ai/summary.requested\" },\n  async ({ event, step }) => {\n  }\n);\n```\n\nLANGUAGE: go\nCODE:\n```\ninngest.CreateFunction(\n  &inngestgo.FunctionOpts{\n    Name: \"generate-ai-summary\",\n    Concurrency: []inngest.Concurrency{\n      {\n        Scope: \"fn\",\n        Key:   \"event.data.account_id\",\n        Limit: 10,\n      }\n    },\n  },\n  inngestgo.EventTrigger(\"ai/summary.requested\", nil),\n  func(ctx context.Context, input inngestgo.Input) (any, error) {\n    // Your function handler here\n    return nil, nil\n  },\n)\n```\n\nLANGUAGE: python\nCODE:\n```\n@inngest.create_function(\n    fn_id=\"another-function\",\n    concurrency=[\n      inngest.Concurrency(\n          scope=\"fn\",\n          key=\"event.data.account_id\",\n          limit=10,\n      )\n    ]\n)\nasync def first_function(event, step):\n    # Your function handler here\n    pass\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of sleep() in Inngest (TypeScript)\nDESCRIPTION: Shows the proper way to use sleep() for waiting a specific duration from the current time. This approach is recommended for consistent behavior across function invocations.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/multi-step-functions.mdx#2025-04-10_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// ✅ Good\nawait step.sleep(\"wait-a-day\", \"1 day\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Throttling with Inngest for AI API Calls\nDESCRIPTION: Example of implementing rate limiting using Inngest's throttle feature to manage API call frequency. Limits function execution to 10 calls per minute.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/ai-in-production-managing-capacity-with-flow-control.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  {\n    id: \"ai-generate-summary\",\n    throttle: {\n      limit: 10,\n      period: \"1m\",\n    }\n  },\n  { event: \"ai/summary.requested\" },\n  async ({ event, step }) => {\n    /* call OpenAI */\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Serve Handler in TypeScript\nDESCRIPTION: Creates a custom serve handler for Inngest using TypeScript, demonstrating how to set up request handling and function creation. Includes implementation of InngestCommHandler with Edge framework support.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/serving-inngest-functions.mdx#2025-04-10_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inngest, InngestCommHandler, type ServeHandlerOptions } from \"inngest\";\n\nconst serve = (options: ServeHandlerOptions) => {\n  const handler = new InngestCommHandler({\n    frameworkName: \"edge\",\n    fetch: fetch.bind(globalThis),\n    ...options,\n    handler: (req: Request) => {\n      return {\n        body: () => req.json(),\n        headers: (key) => req.headers.get(key),\n        method: () => req.method,\n        url: () => new URL(req.url, `https://${req.headers.get(\"host\") || \"\"}`),\n        transformResponse: ({ body, status, headers }) => {\n          return new Response(body, { status, headers });\n        },\n      };\n    },\n  });\n\n  return handler.createHandler();\n};\n\nconst inngest = new Inngest({ id: \"example-edge-app\" });\n\nconst fn = inngest.createFunction(\n  { id: \"hello-world\" },\n  { event: \"test/hello.world\" },\n  () => \"Hello, World!\"\n);\n\nexport default serve({ client: inngest, functions: [fn] });\n```\n\n----------------------------------------\n\nTITLE: Sending Weekly Activity Emails with Python\nDESCRIPTION: This Python code defines a function that listens for the 'app/weekly-email-activity.send' event and sends an email to each user with their activity data.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/sending-events-from-functions.mdx#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@inngest_client.create_function(\n    fn_id=\"weekly-activity-send-email\",\n    trigger=inngest.TriggerEvent(event=\"app/weekly-email-activity.send\")\n)\nasync def send_reminder(ctx: inngest.Context, step: inngest.Step):\n    async def load_data():\n        return await load_user_data(ctx.event.data[\"user\"][\"id\"])\n    \n    data = await step.run(\"load-user-data\", load_data)\n\n    async def send():\n        return await send_email(ctx.event.data[\"user\"], data)\n    \n    await step.run(\"email-user\", send)\n```\n\n----------------------------------------\n\nTITLE: Example TypeScript Error JSON Structure\nDESCRIPTION: Shows how TypeScript errors are serialized as JSON in the output object, including error name, message, and stack trace. This structure can be searched using CEL expressions.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/platform/monitor/inspecting-function-runs.mdx#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"NonRetriableError\",\n  \"message\": \"Failed to import data\",\n  \"stack\": \"NonRetriableError: Failed to import data\\n    at V1InngestExecution.userFnToRun (/opt/render/project/src/build/inngest/ai.js:143:15) ...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-tenant Concurrency with Keys in Inngest\nDESCRIPTION: Uses concurrency keys to apply limits to each unique value (like account_id), creating virtual queues per unique key. This prevents a single tenant from consuming too many resources in a multi-tenant system.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/concurrency.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  {\n    id: \"generate-ai-summary\",\n    concurrency: [\n      {\n        key: \"event.data.account_id\",\n        limit: 10,\n      },\n    ],\n  },\n  { event: \"ai/summary.requested\" },\n  async ({ event, step }) => {\n  }\n);\n```\n\nLANGUAGE: go\nCODE:\n```\ninngest.CreateFunction(\n  &inngestgo.FunctionOpts{\n    Name: \"generate-ai-summary\",\n    Concurrency: []inngest.Concurrency{\n      {\n        Scope: \"fn\",\n        Key:   \"event.data.account_id\",\n        Limit: 10,\n      }\n    },\n  },\n  inngestgo.EventTrigger(\"ai/summary.requested\", nil),\n  func(ctx context.Context, input inngestgo.Input) (any, error) {\n    // Your function handler here\n    return nil, nil\n  },\n)\n```\n\nLANGUAGE: python\nCODE:\n```\n@inngest.create_function(\n    fn_id=\"another-function\",\n    concurrency=[\n      inngest.Concurrency(\n          scope=\"fn\",\n          key=\"event.data.account_id\",\n          limit=10,\n      )\n    ]\n)\nasync def first_function(event, step):\n    # Your function handler here\n    pass\n```\n\n----------------------------------------\n\nTITLE: Waiting for an Event in TypeScript with timeout and match\nDESCRIPTION: Example showing basic usage of step.waitForEvent() in TypeScript to pause function execution until an event is received or a timeout occurs. Uses matching to ensure the event is related to the same user.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/steps-workflows/wait-for-event.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default inngest.createFunction(\n  { id: \"send-onboarding-nudge-email\" },\n  { event: \"app/account.created\" },\n  async ({ event, step }) => {\n    const onboardingCompleted = await step.waitForEvent(\n      \"wait-for-onboarding-completion\",\n      { event: \"app/onboarding.completed\", timeout: \"3d\", match: \"data.userId\" }\n    );\n    if (!onboardingCompleted) {\n      // if no event is received within 3 days, onboardingCompleted will be null\n    } else {\n      // if the event is received, onboardingCompleted will be the event payload object\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Blog Post Metadata in JavaScript\nDESCRIPTION: This code snippet defines the title and date for a blog post announcing Postgres support for self-hosted Inngest. It uses JavaScript's export syntax to make these variables available for use in other parts of the application.\nSOURCE: https://github.com/inngest/website/blob/main/content/changelog/2025-01-20-postgres-self-hosting.mdx#2025-04-10_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const title = \"Postgres support for self-hosted Inngest (experimental)\";\nexport const date = \"2025-01-20\";\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Future Function Execution in Inngest with TypeScript\nDESCRIPTION: This code demonstrates how to trigger a function to run at a specific future time by sending an event with a timestamp. The example schedules a reminder to run 5 minutes in the future by setting the 'ts' field in the event payload.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/examples/scheduling-one-off-function.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait inngest.send({\n  name: \"notifications/reminder.scheduled\",\n  data: {\n    user: { email: \"johnny.utah@fbi.gov\" }\n    message: \"Don't forget to catch the wave at 3pm\",\n  },\n  // Include the timestamp for 5 minutes in the future:\n  ts: Date.now() + 5 * 60 * 1000,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Shopify Product Import Function with Inngest\nDESCRIPTION: This code snippet shows how to create an Inngest function that imports Shopify products. It iterates through paginated API responses, combining all products into a single array. Each API request is wrapped in a step for automatic retries.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/import-ecommerce-api-data-in-seconds.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default inngest.createFunction(\n  { id: \"shopify-product-import\", concurrency: 10 },\n  { event: \"shopify/import.requested\" },\n  async ({ event, step }) => {\n    const allProducts = []\n    let cursor = null\n    let hasMore = true\n\n    // Use the event's \"data\" to pass key info like IDs\n    const session = await database.getShopifySession(event.data.storeId)\n\n    while (hasMore) {\n      // step.run will be retried automatically if the request fails\n      const page = await step.run(\"fetch-products\", async () => {\n        return await shopify.rest.Product.all({\n          session,\n          since_id: cursor,\n        })\n      })\n      // Combine all of the data into a single list\n      allProducts.push(...page.products)\n      if (page.products.length === 50) {\n        cursor = page.products[49].id\n      } else {\n        hasMore = false\n      }\n    }\n\n    // Now we have the entire list of products within allProducts!\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Function References with TypeScript\nDESCRIPTION: Shows how to create references to both local and remote Inngest functions using referenceFunction, including optional Zod schema validation for type safety.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/functions/references.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @/inngest/compute.ts\nimport { referenceFunction } from \"inngest\";\nimport { z } from \"zod\";\nimport { type computePi } from \"@/inngest/computePi\";\n\n// Create a local reference to a function without importing dependencies\nexport const computePi = referenceFunction<typeof computePi>({\n  functionId: \"compute-pi\",\n});\n\n// Create a reference to a function in another application\nexport const computeSquare = referenceFunction({\n  appId: \"my-python-app\",\n  functionId: \"compute-square\",\n  // Schemas are optional, but provide types for your call if specified\n  schemas: {\n    data: z.object({\n      number: z.number(),\n    }),\n    return: z.object({\n      result: z.number(),\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Datadog Failure Handler for Inngest Functions\nDESCRIPTION: This TypeScript function listens for the 'inngest/function.failed' system event and forwards failure details to Datadog's Events API. It captures function IDs, error messages, and stack traces to create comprehensive failure alerts in Datadog.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/examples/track-failures-in-datadog.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client, v1 } from \"@datadog/datadog-api-client\";\nimport { inngest } from \"./client\";\n\nconst configuration = client.createConfiguration();\nconst apiInstance = new v1.EventsApi(configuration);\n\nexport default inngest.createFunction(\n  {\n    name: \"Send failures to Datadog\",\n    id: \"send-failed-function-events-to-datadog\"\n  },\n  { event: \"inngest/function.failed\" },\n  async ({ event, step }) => {\n    // This is a normal Inngest function, so we can use steps as we normally do:\n    await step.run(\"send-event-to-datadog\", async () => {\n      const error = event.data.error;\n\n      // Create the Datadog event body using information about the failed function:\n      const params: v1.EventsApiCreateEventRequest = {\n        body: {\n          title: \"Inngest Function Failed\",\n          alert_type: \"error\",\n          text: `The ${event.data.function_id} function failed with the error: ${error.message}`,\n          tags: [\n            // Add a tag with the Inngest function id:\n            `inngest_function_id:${event.data.function_id}`,\n          ],\n        },\n      };\n\n      // Send to Datadog:\n      const data = await apiInstance.createEvent(params);\n\n      // Return the data to Inngest for viewing in function logs:\n      return { message: \"Event sent successfully\", data };\n    });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Stripe Trial Subscription with Clerk Events\nDESCRIPTION: Implements an Inngest function that creates a Stripe customer and initiates a 14-day trial subscription when a new user signs up through Clerk.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/building-auth-workflows-with-clerk-integration.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst createTrial = inngest.createFunction(\n  { name: \"Create trial\", id: \"create-trial\" },\n  { event: \"clerk/user.created\" },\n  async ({ event, step }) => {\n    const name = event.data.first_name + \" \" + event.data.last_name;\n    const email = event.data.email_addresses[0].email_address;\n\n    const customer = await step.run('create-customer', async () => {\n      return await stripe.customers.create({\n        name,\n        email,\n      });\n    })\n\n    await step.run('create-subscription', async () => {\n      return await stripe.subscriptions.create({\n        customer: customer.id,\n        items: [\n          {\n            price: 'price_1MowQULkdIwHu7ixraBm864M',\n          },\n        ],\n        trial_period_days: 14,\n      });\n    })\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Executing Retriable Code with step.Run() in Go\nDESCRIPTION: Demonstrates how to use step.Run() to execute a piece of code that will be automatically retried if it throws an error. The response is saved in the function run state upon successful completion.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/inngest-steps.mdx#2025-04-10_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"github.com/inngest/inngestgo\"\n  \"github.com/inngest/inngestgo/step\"\n)\n\ninngestgo.CreateFunction(\n  &inngestgo.FunctionOpts{\n    ID: \"import-product-images\",\n  },\n  inngestgo.EventTrigger(\"shop/product.imported\", nil),\n  func(ctx context.Context, input inngestgo.Input) (any, error) {\n    // Here goes the business logic\n    // By wrapping code in steps, it will be retried automatically on failure\n    s3Urls, err := step.Run(\"copy-images-to-s3\", func() ([]string, error) {\n      return copyAllImagesToS3(input.Event.Data[\"imageURLs\"].([]string))\n    })\n    if err != nil {\n      return nil, err\n    }\n\n    return nil, nil\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Configurable TypeScript Middleware\nDESCRIPTION: Demonstrates how to create a configurable middleware in TypeScript that can log specific event outputs. The middleware uses a factory function pattern to accept configuration options.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/middleware/create.mdx#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InngestMiddleware } from \"inngest\";\n\nexport const createMyMiddleware = (logEventOutput: string) => {\nreturn new InngestMiddleware({\n    name: \"My Middleware\",\n    init() {\n    return {\n        onFunctionRun({ ctx, fn, steps }) {\n        if (ctx.event.name === logEventOutput) {\n            return {\n            transformOutput({ result, step }) {\n                console.log(\n                `${logEventOutput} output: ${JSON.stringify(result)}`\n                );\n            },\n            };\n        }\n\n        return {};\n        },\n    };\n    },\n});\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createMyMiddleware } from \"./middleware/myMiddleware\";\n\nexport const inngest = new Inngest({\nid: \"my-client\",\nmiddleware: [createMyMiddleware(\"app/user.created\")],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing step.ai.infer for AI Inference in TypeScript\nDESCRIPTION: This example demonstrates the use of step.ai.infer API to offload AI inference requests through Inngest's gateway. It provides AI observability, metrics, and optimized serverless function execution by pausing during the request.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/ai-orchestration-with-agentkit-step-ai.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default inngest.createFunction(\n  { id: \"summarize-contents\" },\n  { event: \"app/ticket.created\" },\n  async ({ event, step }) => {\n\n    // This calls your model's chat endpoint, adding AI observability,\n    // metrics, datasets, and monitoring to your calls.\n    const response = await step.ai.infer(\"call-openai\", {\n      model: openai({ model: \"gpt-4o\" }),\n      // body is the model request, which is strongly typed depending on the model\n      body: {\n        messages: [{\n          role: \"assistant\",\n          content: \"Write instructions for improving short term memory\",\n        }],\n      },\n    });\n\n    // The response is also strongly typed depending on the model.\n    return response.choices;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Function for Inngest\nDESCRIPTION: This code snippet demonstrates how to create a Python function using Inngest SDK that calculates the sum of values passed in the event data. The function includes error handling for invalid input types.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/cross-language-support-with-new-sdks.mdx#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@inngest_client.create_function(\n    fn_id=\"total\",\n    trigger=inngest.TriggerEvent(event=\"python-app/total\"),\n)\ndef fn(\n    ctx: inngest.Context,\n    step: inngest.StepSync,\n) -> int:\n    values = ctx.event.data.get(\"values\")\n    if not isinstance(values, list):\n        raise inngest.NonRetriableError(\"values must be a list\")\n\n    total = 0\n    for value in values:\n        if not isinstance(value, int):\n            raise inngest.NonRetriableError(\"values must be a list of integers\")\n        total += value\n\n    return total\n```\n\n----------------------------------------\n\nTITLE: Integrating Inngest with Remix Framework (v3)\nDESCRIPTION: Implements Inngest in a Remix application by creating a route at '/api/inngest' and exporting both action and loader handlers to handle Inngest requests.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/serving-inngest-functions.mdx#2025-04-10_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n// app/routes/api.inngest.ts\nimport { serve } from \"inngest/remix\";\nimport { inngest } from \"~/inngest/client\";\nimport fnA from \"~/inngest/fnA\";\n\nconst handler = serve({\n  client: inngest,\n  functions: [fnA],\n});\n\nexport { handler as action, handler as loader };\n```\n\n----------------------------------------\n\nTITLE: Using the built-in logger in Inngest functions\nDESCRIPTION: Demonstrates the basic usage of the logger object that is automatically available within Inngest functions. Shows logging at different levels with metadata.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/logging.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  { id: \"my-awesome-function\" },\n  { event: \"func/awesome\" },\n  async ({ event, step, logger }) => {\n    logger.info(\"starting function\", { metadataKey: \"metadataValue\" });\n\n    const val = await step.run(\"do-something\", () => {\n      if (somethingBadHappens) logger.warn(\"something bad happened\");\n    });\n\n    return { success: true, event };\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Sending Welcome and Delayed Follow-up Emails with Inngest\nDESCRIPTION: This enhanced function sends a welcome email immediately after user creation, then waits for 3 days before sending a follow-up trial offer email. It uses step.run() for automatic retries and step.sleep() for the delay between emails.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/clerk-webhook-events.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst sendWelcomeEmail = inngest.createFunction(\n  { id: 'send-welcome-email' },\n  { event: 'clerk/user.created' },\n  async ({ event, step }) => {\n    const { user } = event.data;\n    const { first_name } = user;\n    const email = user.email_addresses.find(e =>\n      e.id === user.primary_email_address_id\n    ).email;\n\n    // Wrapping each distinct task in step.run() ensures that each\n    // will be retried automatically on error and will not be re-run\n    await step.run('welcome-email', async () => {\n      await emails.sendWelcomeEmail({ email, first_name })\n    });\n\n    // wait 3 days before second email\n    await step.sleep('wait-3-days', '3 days');\n\n    await step.run('trial-offer-email', async () => {\n      await emails.sendTrialOfferEmail({ email, first_name })\n    });\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Indexing Functions in TypeScript\nDESCRIPTION: Two functions that handle page and site indexing. The indexPage function processes individual pages while indexSite manages the crawling of entire websites with parallel processing capability.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/next-generation-ai-workflows.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const indexPage = client.createFunction(\n  { id: \"index-page\" },\n  { event: Events.INDEX_PAGE },\n  async ({ event, step }) => {\n    const { pageUrl } = event.data;\n\n    const page = await step.run(\"get-page-content\", async () => {\n      return getPageContent(pageUrl);\n    });\n\n    await step.run(\"index-page\", async () => {\n      return saveToPinecone({ page });\n    });\n  }\n);\n\nexport const indexSite = client.createFunction(\n  { id: \"index-site\" },\n  { event: Events.INDEX_SITE },\n  async ({ event, step }) => {\n    const { url } = event.data;\n\n    const pages = await step.run(\"find-pages\", async () => {\n      return findPagesToIndex(url);\n    });\n\n    await Promise.all(\n      pages.map(async (page) => {\n        return step.invoke(`index-page-${page.url}`, {\n          function: indexPage,\n          data: {\n            pageUrl: page.url,\n          },\n        });\n      })\n    );\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Cloudflare Workers with Inngest\nDESCRIPTION: Demonstrates how to set environment variables for Inngest in Cloudflare Workers, where environment variables aren't available in the global scope but are passed as runtime arguments to the handler.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/environment-variables.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// For example, in Hono on Cloudflare Workers\napp.on(\"POST\", \"/my-api/send-some-event\", async (c) => {\n  inngest.setEnvVars(c.env);\n\n  await inngest.send({ name: \"test/event\" });\n\n  return c.json({ message: \"Done!\" });\n});\n\n// You can also chain the call to be succinct\nawait inngest.setEnvVars(c.env).send({ name: \"test/event\" });\n```\n\n----------------------------------------\n\nTITLE: Verifying Webhook Signatures in Inngest Functions\nDESCRIPTION: This code demonstrates how to verify a webhook signature within an Inngest function. It checks if the signature is valid using the raw request body and signature information, throwing a non-retriable error if verification fails before processing the event data.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/platform/webhooks.mdx#2025-04-10_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  { id: \"stripe/charge.updated\" },\n  { event: \"stripe/charge.updated\" },\n  async ({ attempt, event, step }) => {\n    if (!verifySig(event.data.raw, event.data.sig, stripeSecret)) {\n      throw new NonRetriableError(\"failed signature verification\");\n    }\n\n    // Now it's safe to use the event data.\n    const data = JSON.parse(event.data.raw);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Durable Function with Inngest in TypeScript\nDESCRIPTION: This snippet shows how to create a Durable Function using Inngest. It demonstrates handling long-running tasks with steps, including data fetching and saving.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/vercel-function-timeout.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction({\n    id: \"long-running-code\",\n  },\n  // A Function is triggered by events\n  { event: \"sync/start\" },\n  async ({ step }) => {\n    // step is retried if it throws an error\n    const data = await step.run(\"get-data\", async () => {\n      return getDataFromExternalSource();\n    });\n\n    // Steps can reuse data from previous ones\n    await step.run(\"save-data\", async () => {\n      return db.syncs.insertMany(data);\n    });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Waiting for a Specific Event in Inngest Python Function\nDESCRIPTION: This code snippet demonstrates how to use the wait_for_event method within an Inngest function. It waits for a specific event with a timeout of 2 seconds. The method returns the received event if it arrives before the timeout, or None if the timeout is reached.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/steps/wait-for-event.mdx#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@inngest_client.create_function(\n    fn_id=\"my_function\",\n    trigger=inngest.TriggerEvent(event=\"app/my_function\"),\n)\nasync def fn(\n    ctx: inngest.Context,\n    step: inngest.Step,\n) -> None:\n    res = await step.wait_for_event(\n        \"wait\",\n        event=\"app/wait_for_event.fulfill\",\n        timeout=datetime.timedelta(seconds=2),\n    )\n```\n\n----------------------------------------\n\nTITLE: Sending Events in Inngest Functions (v3)\nDESCRIPTION: Example of creating an Inngest function that sends an event during user onboarding. It demonstrates how to use step.sendEvent() to reliably send an activation event after a user signup.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/functions/step-send-event.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default inngest.createFunction(\n  { id: \"user-onboarding\" },\n  { event: \"app/user.signup\" },\n  async ({ event, step }) => {\n    // Do something\n    await step.sendEvent(\"send-activation-event\", {\n      name: \"app/user.activated\",\n      data: { userId: event.data.userId },\n    });\n    // Do something else\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Standard Errors in TypeScript Inngest Functions\nDESCRIPTION: Demonstrates how to throw standard errors in Inngest function handlers and steps for automatic retry behavior. This shows error handling both at the function level and within individual steps.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/error-retries/inngest-errors.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default inngest.createFunction(\n  { id: \"import-item-data\" },\n  { event: \"store/import.requested\" },\n  async ({ event }) => {\n\n    // throwing a standard error\n    if (!event.itemId) {\n      throw new Error(\"Item ID is required\");\n    }\n\n    // throwing an error within a step\n    const item = await step.run('fetch-item', async () => {\n      const response = await fetch(`https://api.ecommerce.com/items/${event.itemId}`);\n      if (response.status === 500) {\n        throw new Error(\"Failed to fetch item from ecommerce API\");\n      }\n      // ...\n    });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Workflow Editor Component with @inngest/workflow-kit in React\nDESCRIPTION: This example demonstrates how to create a workflow editor component using @inngest/workflow-kit. It shows the implementation of a controlled component that manages workflow state, integrates with available actions, and renders the Editor and Sidebar components.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/workflow-kit/components-api.mdx#2025-04-10_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from \"react\";\nimport { Editor, Provider, Sidebar, type Workflow } from \"@inngest/workflow-kit/ui\";\n\n// import `PublicEngineAction[]`\nimport { actionsDefinitions } from \"@/inngest/actions-definitions\";\n\n// NOTE - Importing CSS from JavaScript requires a bundler plugin like PostCSS or CSS Modules\nimport \"@inngest/workflow-kit/ui/ui.css\";\nimport \"@xyflow/react/dist/style.css\";\n\nexport const MyWorkflowEditor = ({ workflow }: { workflow: Workflow }) => {\n  const [workflowDraft, updateWorkflowDraft] =\n    useState<typeof workflow>(workflow);\n\n  return (\n    <Provider\n      workflow={workflowDraft}\n      trigger={{ event: { name: 'blog-post.updated' } }}\n      availableActions={actionsDefinitions}\n      onChange={updateWorkflowDraft}\n    >\n      <Editor>\n        <Sidebar position=\"right\"></Sidebar>\n      </Editor>\n    </Provider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Sending Transcript for LLM Suggestions (TypeScript)\nDESCRIPTION: This code sends the transcript to a Cloudflare Worker for processing with OpenAI to generate content suggestions. It uses a fetch request and doesn't wait for the response.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/nextjs-trpc-inngest.md#2025-04-10_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nawait step.run(\"Send Transcript for LLM Suggestions\", async () => {\n  fetch(\n    `https://deepgram-wrangler.skillstack.workers.dev/tipMetadataLLM?videoResourceId=${event.data.videoResourceId}`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        transcript: transcript.data.transcript.text,\n        tipId: event.data.tipId,\n      }),\n    }\n  );\n  await sleep(1000);\n  return \"Transcript sent to LLM\";\n});\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Concurrency Limits in Python\nDESCRIPTION: Example of creating an Inngest function in Python with two concurrency limits: one at the account level with the \"openai\" key and another at the function level using the event's account_id field.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/concurrency.mdx#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@inngest.create_function(\n    fn_id=\"unique-function-id\",\n    concurrency=[\n        inngest.Concurrency(\n            # Use an account-level concurrency limit for this function, using the\n            # \"openai\" key as a virtual queue.  Any other function which\n            # runs using the same \"openai\" key counts towards this limit.\n            scope=\"account\",\n            key='\"openai\"',\n            limit=10,\n        ),\n        inngest.Concurrency(\n            # Create another virtual concurrency queue for this function only.  This\n            # limits all accounts to a single execution for this function, based off\n            # of the `event.data.account_id` field.\n            # NOTE - \"fn\" is the default scope, so we could omit this field.\n            scope=\"fn\",\n            key=\"event.data.account_id\",\n            limit=1,\n        ),\n    ],\n)\nasync def handle_ai_summary(event, step):\n    # Function implementation here\n    pass\n```\n\n----------------------------------------\n\nTITLE: Importing Products to Database with Inngest Steps\nDESCRIPTION: This snippet extends the previous example by adding a step to write each product to the database. It demonstrates how to use step.run() for database operations, ensuring automatic retries for each insert.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/import-ecommerce-api-data-in-seconds.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  { id: \"shopify-product-import\", concurrency: 10 },\n  { event: \"shopify/import.requested\" },\n  async ({ event, step }) => {\n    // --- See first code snippet above for the setup ---\n\n    for (let product of allProducts) {\n      await step.run(\"import-product\", async () => {\n        await database.upsertProduct({\n          storeId: event.data.storeId,\n          product,\n        })\n      })\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Inngest SDK with npm (TypeScript)\nDESCRIPTION: Installs the Inngest SDK using npm package manager for TypeScript projects.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/overview.mdx#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install inngest\n```\n\n----------------------------------------\n\nTITLE: Example Reminder Creation and Deletion Events in JSON\nDESCRIPTION: These JSON snippets show example events for creating and deleting reminders. They demonstrate the structure of events that trigger and cancel the reminder function.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/cancellation/cancel-on-events.mdx#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"tasks/reminder.created\",\n  \"data\": {\n    \"userId\": \"user_123\",\n    \"reminderId\": \"reminder_0987654321\",\n    \"reminderBody\": \"Pick up Jane from the airport\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"tasks/reminder.deleted\",\n  \"data\": {\n    \"userId\": \"user_123\",\n    \"reminderId\": \"reminder_0987654321\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Inngest Scheduled Function\nDESCRIPTION: Demonstrates the basic structure of creating a scheduled function with Inngest, including function naming, cron scheduling, and async execution.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/run-nextjs-functions-in-the-background.mdx#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { inngest } from \"./client\"\n// Arguments:\n// - Function name\n// - Cron-tab expression\n// - The async function code to run\nconst weeklyDigest = inngest.createFunction(\n  { name: \"Send Weekly Digest\" },\n  { cron: \"0 12 * * 1\" },\n  async () => {\n    /* your code, anything returned will be catpured in Inngest logs */\n    return \"Hello!\"\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Installing @inngest/test Package\nDESCRIPTION: Various package manager commands to install the @inngest/test library as a dev dependency.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/testing/index.mdx#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -D @inngest/test\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add -D @inngest/test\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm add -D @inngest/test\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun add -d @inngest/test\n```\n\nLANGUAGE: shell\nCODE:\n```\ndeno add --dev @inngest/test\n# or with JSR...\ndeno add --dev jsr:@inngest/test\n```\n\n----------------------------------------\n\nTITLE: Typed Channels Implementation\nDESCRIPTION: Advanced example showing typed channels with schema validation for realtime data publishing\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/realtime.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inngest } from \"inngest\";\nimport { realtimeMiddleware, channel, topic } from \"@inngest/realtime\";\n\nconst inngest = new Inngest({\n  id: \"my-app\",\n  middleware: [realtimeMiddleware()],\n});\n\nconst userChannel = channel((userId: string) => `user:${userId}`)\n  .addTopic(\n    topic(\"ai\").schema(\n      z.object({\n        response: z.string(),\n        success: z.number().transform(Boolean),\n      })\n    )\n  );\n\nconst logsChannel = channel(\"logs\").addTopic(topic(\"info\").type<string>());\n\ninngest.createFunction(\n  { id: \"some-task\" },\n  { event: \"ai/ai.requested\" },\n  async ({ event, step, publish }) => {\n    await publish(\n      userChannel(event.data.userId).ai({\n        response: \"an llm response here\",\n        success: true,\n      })\n    );\n\n    await publish(logsChannel().info(\"All went well\"))\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Summarizer Agent with AgentKit\nDESCRIPTION: Implementation of a Summarizer Agent using the AgentKit library. This agent takes search results and trends data from previous steps in the workflow and generates a summary or answer based on the user's question and interests.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/render-hacker-news-ai-agent.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createAgent\n} from \"@inngest/agent-kit\";\n\nconst summarizerAgent = createAgent({\n      name: \"Summarizer Agent\",\n      description: \"Summarize the results of the search agent\",\n      system: ({ network }) => {\n        const searchResults = network?.state.kv.get(\"search-result\");\n        const trendsResults = network?.state.kv.get(\"trends-result\");\n        const prompt = `\n        Prepare the answers to the questions based on the results of the search agent.\n        If the user is interested in trends, use the trends-result to answer the questions and provide a summary of the trends.\n        If the user is not interested in trends, use the search-result to answer the questions.\n\n        The user is interested in ${\n          interest.name\n        }. They asked the following questions:\n        <questions>\n        ${question.question}\n        </questions>\n\n        The search agent found the following results online:\n        <search-results>\n        ${(searchResults || []).join(`\\n`)}\n        </search-results>\n\n        The trends agent found the following trends:\n        <trends-results>\n        ${(trendsResults || []).join(`\\n`)}\n        </trends-results>\n\n        Provide you answer wrapped in <answer> tags.\n        `;\n        return prompt;\n      },\n      / ...\n    });\n```\n\n----------------------------------------\n\nTITLE: Sending Event from Cloudflare Worker using Inngest (TypeScript)\nDESCRIPTION: This code demonstrates how to send an event using the Inngest Cloudflare library to notify that a transcript has been created.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/nextjs-trpc-inngest.md#2025-04-10_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst inngestResponse = await inngest.send({\n  name: \"tip/video.transcript.created\",\n  data,\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Weekly Activity Emails with Go\nDESCRIPTION: This Go code defines a function that listens for the 'app/weekly-email-activity.send' event and sends an email to each user with their activity data.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/sending-events-from-functions.mdx#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"github.com/inngest/inngest-go\"\n    \"github.com/inngest/inngest-go/step\"\n)\n\nfunc sendReminder(client *inngest.Client) *inngest.FunctionDefinition {\n    return client.CreateFunction(\n        inngest.FunctionOpts{\n            ID: \"weekly-activity-send-email\",\n        },\n        inngest.TriggerEvent(\"app/weekly-email-activity.send\"),\n        func(ctx *inngest.Context) error {\n            var data interface{}\n            if err := step.Run(\"load-user-data\", func() error {\n                var err error\n                data, err = loadUserData(ctx.Event.Data[\"user\"].(map[string]interface{})[\"id\"].(string))\n                return err\n            }); err != nil {\n                return err\n            }\n\n            if err := step.Run(\"email-user\", func() error {\n                return sendEmail(ctx.Event.Data[\"user\"], data)\n            }); err != nil {\n                return err\n            }\n\n            return nil\n        },\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Start and Finish Timeouts for Inngest Function in Go\nDESCRIPTION: This snippet shows how to set both 'start' and 'finish' timeouts for an Inngest function in Go. The function will be cancelled if it takes longer than 10 seconds to start or 30 seconds to finish after starting.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/cancellation/cancel-on-timeouts.mdx#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nreturn inngestgo.CreateFunction(\n\tinngestgo.FunctionOpts{\n\t\tName: \"A function\",\n\t\tTimeouts: &inngestgo.Timeouts{\n\t\t\t// If the run takes longer than 10s to start, cancel the run.\n\t\t\tStart: inngestgo.Ptr(10*time.Second),\n\t\t\t// And if the run takes longer than 30s to finish after starting, cancel the run.\n\t\t\tFinish: inngestgo.Ptr(30*time.Second),\n\t\t},\n\t},\n\tinngestgo.EventTrigger(\"tasks/reminder.createad\", nil),\n\tfunc(ctx context.Context, input inngestgo.Input[ReminderEvent]) (any, error) {\n\t\treturn step.Run(ctx, \"send-reminder\", func (ctx context.Context) (bool, error) {\n\t\t\t// ...\n\t\t\treturn false, nil\n\t\t})\n\t},\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Combined Concurrency Limits in Inngest\nDESCRIPTION: This code shows how to combine multiple concurrency limits in an Inngest function. It limits each user to 5 concurrent jobs while also setting a global limit of 100 concurrent jobs across all users, demonstrating Inngest's flexible resource management capabilities.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/fixing-multi-tenant-queueing-concurrency-problems.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const combinedConcurrencyLimits = inngest.createFunction(\n  {\n    id: 'multi-tenant-concurrency-with-shared-limit',\n    concurrency: [\n      {\n        // Each unique user_slug has a concurrency limit of 5\n        limit: 5,\n        key: 'event.data.user_slug',\n      },\n      {\n        // Overall concurrency for all users is limited to 100\n        limit: 100,\n      },\n    ],\n  },\n  { event: 'demo/job.created' },\n  async ({ event, step }) => {\n    /* function logic omitted for example */\n    return { status: 'success' };\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Scheduling Reminders with Cancellation in TypeScript\nDESCRIPTION: This TypeScript code defines an Inngest function for scheduling reminders with the ability to cancel based on a deletion event. It uses 'cancelOn' to specify the cancellation event and conditions.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/cancellation/cancel-on-events.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst scheduleReminder = inngest.createFunction(\n  {\n    id: \"schedule-reminder\",\n    cancelOn: [{\n      event: \"tasks/reminder.deleted\", // The event name that cancels this function\n      // Ensure the cancellation event (async) and the triggering event (event)'s reminderId are the same:\n      if: \"async.data.reminderId == event.data.reminderId\",\n    }],\n  }\n  { event: \"tasks/reminder.created\" },\n  async ({ event, step }) => {\n    await step.sleepUntil('sleep-until-remind-at-time', event.data.remindAt);\n    await step.run('send-reminder-push', async ({}) => {\n      await pushNotificationService.push(event.data.userId, event.data.reminderBody)\n    })\n  }\n  // ...\n);\n```\n\n----------------------------------------\n\nTITLE: Creating an Inngest Client in Next.js (App Router)\nDESCRIPTION: Code to create an Inngest client for a Next.js App Router application.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/getting-started/nextjs-quick-start.mdx#2025-04-10_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { Inngest } from \"inngest\";\n\n// Create a client to send and receive events\nexport const inngest = new Inngest({ id: \"my-app\" });\n```\n\n----------------------------------------\n\nTITLE: Configuring cancelOn with Timeout in Inngest (v3)\nDESCRIPTION: This snippet demonstrates how to set up cancelOn with a timeout window in Inngest v3. It specifies a cancellation event, matching condition, and a 1-hour timeout.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/typescript/functions/cancel-on.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  {\n    id: \"sync-contacts\",\n    cancelOn: [{ event: \"app/user.deleted\", match: \"data.userId\", timeout: \"1h\" }],\n  }\n  // ...\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Content Outline Generator in TypeScript\nDESCRIPTION: Function that handles the generation of article outlines based on keywords, including research and outline creation steps.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/next-generation-ai-workflows.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const writeOutline = client.createFunction(\n  { id: \"write-outline\" },\n  { event: Events.WRITE_OUTLINE },\n  async ({ event, step }) => {\n    const { keyword } = event.data as WriteOutlineRequest;\n    const research = await step.run(\"conduct-research\", async () => {\n      return conductResearch(keyword);\n    });\n\n    const outline = await step.run(\"write-outline\", async () => {\n      return writeOutline(research);\n    });\n\n    return outline;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Inngest Development Mode Environment Variable\nDESCRIPTION: Controls development mode and Dev Server URL configuration. Can be set to 1 to disable production mode or set to a custom URL for Docker environments.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/overview/env-vars.mdx#2025-04-10_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nINNGEST_DEV=1\nINNGEST_DEV=http://host.docker.internal:8288\n```\n\n----------------------------------------\n\nTITLE: Syncing Mux Asset with Sanity in Inngest Workflow Step\nDESCRIPTION: This Inngest step updates the Video Resource in Sanity with Mux asset information. It attaches the processed video metadata and duration to the existing video resource for later use in the frontend.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/nextjs-trpc-inngest.md#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait step.run(\"Sync Asset with Sanity\", async () => {\n  const videoResource = await getVideoResource(event.data.videoResourceId);\n  const { duration: assetDuration, ...muxAsset } = newMuxAsset;\n\n  return await sanityWriteClient\n    .patch(videoResource._id)\n    .set({\n      duration: assetDuration,\n      muxAsset,\n    })\n    .commit();\n});\n```\n\n----------------------------------------\n\nTITLE: Using NoRetryError in Go Inngest Functions\nDESCRIPTION: Shows how to use inngestgo.NoRetryError in Go to prevent Inngest from retrying a function when an error occurs that cannot be resolved by retrying.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/error-retries/inngest-errors.mdx#2025-04-10_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"github.com/inngest/inngestgo\"\n  \"github.com/inngest/inngestgo/step\"\n)\n\n// Register the function\ninngestgo.CreateFunction(\n    &inngest.FunctionOptions{\n        ID: \"send-user-email\",\n    },\n    inngest.FunctionTrigger{\n        Event: \"user/created\",\n    },\n    SendUserEmail,\n)\n\nfunc SendUserEmail(ctx *inngest.FunctionContext) (any, error) {\n    // Run a step which emails the user.  This automatically retries on error.\n    // This returns the fully typed result of the lambda.\n    result, err := step.Run(ctx, \"on-user-created\", func(ctx context.Context) (bool, error) {\n      // Run any code inside a step.\n      result, err := emails.Send(emails.Opts{})\n      return result, err\n    })\n    if err != nil {\n      // This step retried 5 times by default and permanently failed.\n      // we return a NoRetryError to prevent Inngest from retrying the function\n      return nil, inngestgo.NoRetryError(err)\n    }\n\n    return nil, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Welcome Email Function with Clerk and Inngest\nDESCRIPTION: Creates an Inngest function that sends a welcome email using React Email and Resend when a new user is created in Clerk. The function runs with a concurrency limit of 10.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/building-auth-workflows-with-clerk-integration.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst welcomeEmail = inngest.createFunction(\n  { name: \"Send welcome email\", id: \"send-welcome-email\", concurrency: 10 },\n  { event: \"clerk/user.created\" },\n  async ({ event, step }) => {\n    const email = event.data.email_addresses[0].email_address;\n    await step.run('send-email', async () => {\n      return await resend.emails.send({\n        to: email,\n        from: \"noreply@inngest.com\",\n        subject: \"Welcome to Inngest!\",\n        react: WelcomeEmail(),\n      })\n    });\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Start and Finish Timeouts for Inngest Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to set both 'start' and 'finish' timeouts for an Inngest function in TypeScript. The function will be cancelled if it takes longer than 10 seconds to start or 30 seconds to finish after starting.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/cancellation/cancel-on-timeouts.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst scheduleReminder = inngest.createFunction(\n  {\n    id: \"schedule-reminder\",\n    timeouts: {\n      // If the run takes longer than 10s to start, cancel the run.\n      start: \"10s\",\n      // And if the run takes longer than 30s to finish after starting, cancel the run.\n      finish: \"30s\",\n    },\n  }\n  { event: \"tasks/reminder.created\" },\n  async ({ event, step }) => {\n    await step.run('send-reminder-push', async () => {\n      await pushNotificationService.push(event.data.reminder)\n    })\n  }\n  // ...\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Search Agent with Tools using AgentKit\nDESCRIPTION: Implementation of a Search Agent with AgentKit that has access to search and identify-trends tools. This agent searches Hacker News for posts relevant to a user's interests and can identify trends over time.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/render-hacker-news-ai-agent.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createAgent,\n  createTool,\n} from \"@inngest/agent-kit\";\n\n\nconst searchAgent = createAgent({\n  name: \"Search Agent\",\n  description: \"Search Hacker News for a given set of interests\",\n  system: `You are a search agent that searches Hacker News for posts that are relevant to a given set of interests. Today is ${\n    new Date().toISOString().split(\"T\")[0]\n  }. Search for posts from the last ${frequencyToRelativeHuman(\n    question.frequency\n  )} period.`,\n  tools: [\n    createTool({\n      name: \"search\",\n      description: \"Search Hacker News for a given set of interests\",\n      parameters: z.object({\n        query: z.string(),\n        startDate: z.string(),\n        endDate: z.string(),\n      }),\n      handler: async (input, { network }) => {\n        // ...\n      },\n    }),\n    createTool({\n      name: \"identify-trends\",\n      description:\n        \"Identify trends on Hacker News for a given set of interests\",\n      parameters: z.object({\n        query: z.string(),\n        startDate: z.string(),\n        endDate: z.string(),\n      }),\n      handler: async (input, { network }) => {\n        // ...\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Concurrency Limits in TypeScript\nDESCRIPTION: Example of creating two Inngest functions with different concurrency limits for the same \"openai\" key at the account scope. Function A is limited to 5 concurrent executions while Function B is limited to 50.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/concurrency.mdx#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  {\n    id: \"func-a\",\n    concurrency: {\n      scope: \"account\",\n      key: `\"openai\"`,\n      limit: 5,\n    },\n  },\n  { event: \"ai/summary.requested\" },\n  async ({ event, step }) => {\n  }\n);\n\ninngest.createFunction(\n  {\n    id: \"func-b\",\n    concurrency: {\n      scope: \"account\",\n      key: `\"openai\"`,\n      limit: 50,\n    },\n  },\n  { event: \"ai/summary.requested\" },\n  async ({ event, step }) => {\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Inngest Client in TypeScript\nDESCRIPTION: Code to create an Inngest client and initialize an array for future Inngest functions.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/getting-started/nodejs-quick-start.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inngest } from \"inngest\";\n\n// Create a client to send and receive events\nexport const inngest = new Inngest({ id: \"my-app\" });\n\n// Create an empty array where we'll export future Inngest functions\nexport const functions = [];\n```\n\n----------------------------------------\n\nTITLE: Waiting for Transcript Completion in Inngest Workflow (TypeScript)\nDESCRIPTION: This snippet shows how to use Inngest to wait for a transcript creation event with a specified timeout. It matches the event based on the video resource ID.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/nextjs-trpc-inngest.md#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst transcript = await step.waitForEvent(\"tip/video.transcript.created\", {\n  match: \"data.videoResourceId\",\n  timeout: \"1h\",\n});\n```\n\n----------------------------------------\n\nTITLE: Wrapping Vercel AI SDK with step.ai.wrap() in Inngest\nDESCRIPTION: Demonstrates how to use step.ai.wrap() to integrate the Vercel AI SDK into an Inngest function. This method adds AI observability to existing SDK calls without significant code changes.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/steps-workflows/step-ai-orchestration.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateText } from \"ai\"\nimport { openai } from \"@ai-sdk/openai\"\n\nexport default inngest.createFunction(\n  { id: \"summarize-contents\" },\n  { event: \"app/ticket.created\" },\n  async ({ event, step }) => {\n\n    // This calls `generateText` with the given arguments, adding AI observability,\n    // metrics, datasets, and monitoring to your calls.\n    const { text } = await step.ai.wrap(\"using-vercel-ai\", generateText, {\n      model: openai(\"gpt-4-turbo\"),\n      prompt: \"What is love?\"\n    });\n\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Concurrency Limits in Python\nDESCRIPTION: Example of creating two Inngest functions in Python with different concurrency limits for the same \"openai\" key at the account scope. Function A is limited to 5 concurrent executions while Function B is limited to 50.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/concurrency.mdx#2025-04-10_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@inngest_client.create_function(\n    fn_id=\"func-a\",\n    trigger=inngest.TriggerEvent(event=\"ai/summary.requested\"),\n    concurrency=[\n      inngest.Concurrency(\n        scope=\"account\",\n        key='\"openai\"',\n        limit=5\n      )\n    ]\n)\nasync def func_a(ctx: inngest.Context, step: inngest.Step):\n    pass\n\n@inngest_client.create_function(\n    fn_id=\"func-b\",\n    trigger=inngest.TriggerEvent(event=\"ai/summary.requested\"),\n    concurrency=[\n      inngest.Concurrency(\n        scope=\"account\",\n        key='\"openai\"',\n        limit=50\n      )\n    ]\n)\nasync def func_b(ctx: inngest.Context, step: inngest.Step):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Running Functions at Specific Times in Python\nDESCRIPTION: This snippet shows how to schedule a function to run at a specific date/time using Inngest's step.sleep_until() method in Python. It demonstrates sending an immediate email and then scheduling future work for a specific timestamp.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/delayed-functions.mdx#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport inngest\nfrom src.inngest.client import inngest_client\n\ninngest_client = inngest.Inngest(\n    app_id=\"my-app\",\n)\n\n@inngest_client.create_function(\n    fn_id=\"send-signup-email\", \n    trigger=inngest.TriggerEvent(event=\"app/user.created\")\n)\nasync def send_signup_email(ctx: inngest.Context, step: inngest.Step):\n    async def send_email():\n        await sesclient.send_email(\n            to=ctx.event.data[\"user_email\"],\n            subject=\"Welcome to Inngest!\",\n            message=\"...\"\n        )\n    \n    await step.run(\"send-the-user-a-signup-email\", send_email)\n    \n    await step.sleep_until(\"wait-for-the-future\", \"2023-02-01T16:30:00\")\n\n    async def future_work():\n        # Code here runs in the future automatically\n        pass\n\n    await step.run(\"do-some-work-in-the-future\", future_work)\n```\n\n----------------------------------------\n\nTITLE: Scheduling Weekly Activity Emails with Python\nDESCRIPTION: This Python code defines a scheduled function that fetches all users, creates events for each user, and sends them to Inngest for weekly activity emails.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/sending-events-from-functions.mdx#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport inngest\nfrom src.inngest.client import inngest_client\n\n@inngest_client.create_function(\n    fn_id=\"weekly-activity-load-users\",\n    trigger=inngest.TriggerCron(cron=\"0 12 * * 5\")\n)\nasync def load_cron(ctx: inngest.Context, step: inngest.Step):\n    # Fetch all users\n    async def fetch():\n        return await fetch_users()\n    \n    users = await step.run(\"fetch-users\", fetch)\n\n    # For each user, send us an event. Inngest supports batches of events\n    # as long as the entire payload is less than 512KB.\n    events = []\n    for user in users:\n        events.append(\n            inngest.Event(\n                name=\"app/weekly-email-activity.send\",\n                data={\n                    **user,\n                    \"user\": user\n                }\n            )\n        )\n\n    # Send all events to Inngest, which triggers any functions listening to\n    # the given event names.\n    await step.send_event(\"fan-out-weekly-emails\", events)\n\n    # Return the number of users triggered.\n    return {\"count\": len(users)}\n```\n\n----------------------------------------\n\nTITLE: Basic Realtime Publishing Implementation\nDESCRIPTION: Minimal example showing how to publish realtime data using Inngest middleware\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/realtime.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inngest } from \"inngest\";\nimport { realtimeMiddleware } from \"@inngest/realtime\";\n\nconst inngest = new Inngest({\n  id: \"my-app\",\n  // Whenever you create your app, include the `realtimeMiddleware()`\n  middleware: [realtimeMiddleware()],\n});\n\ninngest.createFunction(\n  { id: \"some-task\" },\n  { event: \"ai/ai.requested\" },\n  async ({ event, step, publish }) => {\n    await publish({\n      channel: `user:${event.data.userId}`,\n      topic: \"ai\",\n      data: {\n        response: \"an llm response here\",\n        success: true,\n      }\n    });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Waiting for an Event in Python\nDESCRIPTION: Example showing how to use step.wait_for_event() in Python to pause function execution until a specific event is received, with a timeout specified in seconds.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/steps-workflows/wait-for-event.mdx#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@inngest_client.create_function(\n    fn_id=\"my_function\",\n    trigger=inngest.TriggerEvent(event=\"app/my_function\"),\n)\nasync def fn(\n    ctx: inngest.Context,\n    step: inngest.Step,\n) -> None:\n    res = await step.wait_for_event(\n        \"wait\",\n        event=\"app/wait_for_event.fulfill\",\n        timeout=datetime.timedelta(seconds=2),\n    )\n```\n\n----------------------------------------\n\nTITLE: Ordering Transcript via Deepgram in Inngest Workflow Step\nDESCRIPTION: This Inngest step triggers a Cloudflare Worker to generate video transcripts using Deepgram's API. It fetches the video resource data and sends a POST request to the worker with the necessary video information.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/nextjs-trpc-inngest.md#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait step.run(\"Initiate Transcript Order via Deepgram\", async () => {\n  const videoResource = await getVideoResource(event.data.videoResourceId);\n  const { originalMediaUrl, _id } = videoResource;\n  return await fetch(\n    `https://deepgram-wrangler.skillstack.workers.dev/transcript?videoUrl=${originalMediaUrl}&videoResourceId=${_id}`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    }\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Validated Events with Pydantic and Inngest in Python\nDESCRIPTION: Demonstrates sending an event with automatic validation through Pydantic. The example shows how invalid data ('count' as a string instead of integer) would trigger a validation error at runtime.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/guides/pydantic.mdx#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclient.send(\n    PostUpvotedEvent(\n        data=PostUpvotedEventData(count=\"bad data\"),\n    ).to_event()\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Function Reference Example\nDESCRIPTION: Shows the simplest way to reference a function within the same app using just the functionId.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/functions/references.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { referenceFunction } from \"inngest\";\n\nawait step.invoke(\"start-process\", {\n  function: referenceFunction({\n    functionId: \"some-fn\",\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing SRT Addition to Mux Asset Workflow (TypeScript)\nDESCRIPTION: This function defines a workflow to add SRT subtitles to a Mux asset, including checking asset status, removing existing subtitles, and adding new ones. It also implements a retry mechanism if the asset is not ready.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/nextjs-trpc-inngest.md#2025-04-10_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst addSrtToMuxAsset = inngest.createFunction(\n  { name: \"Add SRT to Mux Asset\" },\n  { event: \"tip/video.srt.ready\" },\n  async ({ event, step }) => {\n    const muxAssetStatus = await step.run(\n      \"Check if Mux Asset is Ready\",\n      async () => {\n        const { Video } = new Mux();\n        const { status } = await Video.Assets.get(event.data.muxAssetId);\n        return status;\n      }\n    );\n\n    await step.run(\"Update Video Resource Status\", async () => {\n      return await sanityWriteClient\n        .patch(event.data.videoResourceId)\n        .set({\n          state: muxAssetStatus,\n        })\n        .commit();\n    });\n\n    if (muxAssetStatus === \"ready\") {\n      await step.run(\n        \"Check for existing subtitles in Mux and remove if found\",\n        async () => {\n          const { Video } = new Mux();\n          const { tracks } = await Video.Assets.get(event.data.muxAssetId);\n\n          const existingSubtitle = tracks?.find(\n            (track: any) => track.name === \"English\"\n          );\n\n          if (existingSubtitle) {\n            return await Video.Assets.deleteTrack(\n              event.data.muxAssetId,\n              existingSubtitle.id\n            );\n          } else {\n            return \"No existing subtitle found.\";\n          }\n        }\n      );\n\n      await step.run(\"Update Mux with SRT\", async () => {\n        const { Video } = new Mux();\n        return await Video.Assets.createTrack(event.data.muxAssetId, {\n          url: `https://www.epicweb.dev/api/videoResource/${event.data.videoResourceId}/srt`,\n          type: \"text\",\n          text_type: \"subtitles\",\n          closed_captions: false,\n          language_code: \"en-US\",\n          name: \"English\",\n          passthrough: \"English\",\n        });\n      });\n\n      // await step.run('Notify in Slack', async () => {\n      //\n      // })\n    } else {\n      await step.sleep(60000);\n      await step.run(\"Re-run After Cooldown\", async () => {\n        return await inngest.send({\n          name: \"tip/video.srt.ready\",\n          data: event.data,\n        });\n      });\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Applying LLM Suggestions to Tip Resource (TypeScript)\nDESCRIPTION: This snippet waits for the LLM suggestions event and updates the Tip resource in Sanity with the generated content, including title, body, and description.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/nextjs-trpc-inngest.md#2025-04-10_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst llmResponse = await step.waitForEvent(\n  \"tip/video.llm.suggestions.created\",\n  {\n    match: \"data.videoResourceId\",\n    timeout: \"1h\",\n  }\n);\n\nif (llmResponse) {\n  await step.run(\"Update Tip with Generated Text\", async () => {\n    const title = llmResponse.data.llmSuggestions?.titles?.[0];\n    const body = llmResponse.data.llmSuggestions?.body;\n    const description = llmResponse.data.llmSuggestions?.descriptions?.[0];\n    return await sanityWriteClient\n      .patch(event.data.tipId)\n      .set({\n        title,\n        description,\n        body,\n        state: \"reviewing\",\n      })\n      .commit();\n  });\n  return { llmSuggestions: llmResponse.data.llmSuggestions, transcript };\n} else {\n  return { transcript, llmSuggestions: null };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Middleware for Hono to Access Environment Variables\nDESCRIPTION: Middleware that extracts environment variables from Hono context and makes them available in Inngest function handlers.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/examples/middleware/cloudflare-workers-environment-variables.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inngest, InngestMiddleware } from 'inngest';\nimport { type Context } from 'hono';\n\ntype Bindings = {\n  MY_VAR: string;\n  DB_URL: string;\n  MY_BUCKET: R2Bucket;\n};\n\nconst bindings = new InngestMiddleware({\n  name: 'Hono bindings',\n  init({ client, fn }) {\n    return {\n      onFunctionRun({ ctx, fn, steps, reqArgs }) {\n        return {\n          transformInput({ ctx, fn, steps }) {\n            // reqArgs is the array of arguments passed to a Hono handler\n            // We cast the argument to the correct Hono Context type with our\n            // environment variable bindings\n            const [honoCtx] = reqArgs as [Context<{ Bindings: Bindings }>];\n            return {\n              ctx: {\n                // Return the context's env object to the function handler's input args\n                env: honoCtx.env,\n              },\n            };\n          },\n        };\n      },\n    };\n  },\n});\n\n// Include the middleware when creating the Inngest client\nexport const inngest = new Inngest({\n  id: 'my-hono-app',\n  middleware: [bindings],\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Inngest with Hono Framework for Cloudflare Workers\nDESCRIPTION: Sets up Inngest in a Hono application by creating an endpoint at '/api/inngest' that handles GET, PUT, and POST requests. This is commonly used with Cloudflare Workers deployment.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/serving-inngest-functions.mdx#2025-04-10_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Hono } from \"hono\";\nimport { serve } from \"inngest/hono\";\nimport { functions, inngest } from \"./inngest\";\n\nconst app = new Hono();\n\napp.on(\n  [\"GET\", \"PUT\", \"POST\"],\n  \"/api/inngest\",\n  serve({\n    client: inngest,\n    functions,\n  })\n);\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Sending Events with Inngest in Express Route Handler\nDESCRIPTION: Demonstrates how to initialize Inngest and send an event when a user signs up. The code shows integration with an Express.js route handler for account creation.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/no-workers-necessary-nodejs-express.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Inngest } from \"inngest\"\n\nconst inngest = new Inngest({ name: \"My App\" })\n\napp.post(\"/signup\", async (req, res) => {\n  const account = await createAccount(req.body)\n  await inngest.send({\n    name: \"account.created\",\n    data: { account_id: account.id, email: account.email }\n  })\n  res.redirect(\"/dashboard/welcome\")\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Streaming API Route in Next.js with Inngest Realtime\nDESCRIPTION: This code sets up a Next.js API route that uses Inngest's Realtime feature to create a streaming response. It generates a unique ID for the Inngest function run, sends an event to trigger processing, and subscribes to the function's channel to stream updates back to the client.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/realtime/nextjs.mdx#2025-04-10_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport crypto from \"crypto\";\nimport { inngest } from \"@/inngest/client\";\nimport { subscribe } from \"@inngest/realtime\";\n\nexport async function POST(req: Request) {\n  const json = await req.json();\n  const { prompt } = json;\n\n  // Generate a unique ID for Inngest function run\n  const uuid = crypto.randomUUID();\n\n  // The Inngest function will rely on this ID to publish messages\n  // on a dedicated channel for this run.\n  await inngest.send({\n    name: \"app/simple-search-agent.run\",\n    data: {\n      uuid,\n      input: prompt,\n    },\n  });\n\n  // Subscribe to the Inngest function's channel.\n  const stream = await subscribe({\n    channel: `simple-search.${uuid}`,\n    topics: [\"updates\"], // subscribe to one or more topics in the user channel\n  });\n\n  // Stream the response to the client with Vercel's streaming response.\n  return new Response(stream.getEncodedStream(), {\n    headers: {\n      \"Content-Type\": \"text/event-stream\",\n      \"Cache-Control\": \"no-cache\",\n      Connection: \"keep-alive\",\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling Reminders with Cancellation in Python\nDESCRIPTION: This Python code defines an Inngest function for scheduling reminders with the ability to cancel based on a deletion event. It uses the 'cancel' option to specify the cancellation event and conditions.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/cancellation/cancel-on-events.mdx#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@inngest_client.create_function(\n    fn_id=\"schedule-reminder\",\n    trigger=inngest.TriggerEvent(event=\"tasks/reminder.created\"),\n    cancel=[inngest.Cancel(\n                event=\"tasks/reminder.deleted\", # The event name that cancels this function\n                # Ensure the cancellation event (async) and the triggering event (event)'s reminderId are the same:\n                if_exp=\"async.data.reminderId == event.data.reminderId\"\n            )],\n)\nasync def fn(\n    ctx: inngest.Context,\n    step: inngest.Step,\n) -> None:\n    # Step 1\n    await step.sleep_until(\n        \"sleep-until-remind-at-time\",\n         ctx.event.data[\"remind_at\"],\n    )\n\n    # Step 2\n    await step.run(\"send-reminder-push\", send_reminder_push)\n\n\n\nasync def send_reminder_push() -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Serving Inngest Functions with Client in v2\nDESCRIPTION: Shows the correct way to serve Inngest functions in v2, which requires passing the Inngest client instance.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/migration.mdx#2025-04-10_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inngest } from \"./client\";\nserve(inngest, [...fns]);\n```\n\n----------------------------------------\n\nTITLE: Basic Event Sending with Inngest TypeScript SDK\nDESCRIPTION: Example of sending a basic event to Inngest with account creation data. Events sent will trigger functions with matching event triggers.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/events/send.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inngest } from \"./client\";\n\nawait inngest.send({\n  name: \"app/account.created\",\n  data: {\n    accountId: \"645e9f6794e10937e9bdc201\",\n    billingPlan: \"pro\",\n  },\n  user: {\n    external_id: \"645ea000129f1c40109ca7ad\",\n    email: \"taylor@example.com\",\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a BaseEvent Class with Pydantic for Inngest Events in Python\nDESCRIPTION: Defines a base class that all event classes will inherit from, providing conversion methods between Pydantic models and Inngest Event objects. This establishes the foundation for type validation throughout the event lifecycle.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/guides/pydantic.mdx#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport inngest\nimport pydantic\nimport typing\n\nTEvent = typing.TypeVar(\"TEvent\", bound=\"BaseEvent\")\n\nclass BaseEvent(pydantic.BaseModel):\n    data: pydantic.BaseModel\n    id: str = \"\"\n    name: typing.ClassVar[str]\n    ts: int = 0\n\n    @classmethod\n    def from_event(cls: type[TEvent], event: inngest.Event) -> TEvent:\n        return cls.model_validate(event.model_dump(mode=\"json\"))\n\n    def to_event(self) -> inngest.Event:\n        return inngest.Event(\n            name=self.name,\n            data=self.data.model_dump(mode=\"json\"),\n            id=self.id,\n            ts=self.ts,\n        )\n```\n\n----------------------------------------\n\nTITLE: Sending Single Event in Python\nDESCRIPTION: Shows how to send a single event to Inngest using the Python client. The event includes cart details and user account information in the data payload.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/events/index.mdx#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport inngest\nfrom src.inngest.client import inngest_client\n\n# This sends an event to Inngest.\nawait inngest_client.send(\n  inngest.Event(\n    name=\"storefront/cart.checkout.completed\",\n    data={\n      \"cartId\": \"ed12c8bde\",\n      \"itemIds\": [\"9f08sdh84\", \"sdf098487\", \"0fnun498n\"],\n      \"account\": {\n        \"id\": 123,\n        \"email\": \"test@example.com\",\n      },\n    },\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Selective Cancellation in JSON for Inngest Bulk Cancellation API\nDESCRIPTION: This JSON snippet demonstrates how to configure selective cancellation for the Inngest bulk cancellation API. It includes an 'if' condition to cancel functions based on event data, date range parameters, and function identifiers.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/bulk-cancellation-api.mdx#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  // Only cancel functions pushed yesterday (Jan 21, 2024) if the vendor is Acme inc\n  \"if\": \"event.data.vendor_id == 'acme_inc'\",\n  \"started_after\": \"2024-01-21T00:00:00Z\",\n  \"started_before\": \"2024-01-22T00:00:00Z\",\n  \"app_id\": \"billing\",\n  \"function_id\": \"vendor-syncs\"\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Audio Files with FFmpeg in JavaScript\nDESCRIPTION: This step in the pipeline crops the audio file based on user selection and converts it to MP3 format for better compatibility. It uses FFmpeg for audio processing, creates temporary files, uploads the processed audio to S3 storage, and updates the video record with the new audio file URL.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/banger-video-rendering-pipeline.mdx#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst croppedMp3Url = await step.run(\n  'trim-audio-and-convert-to-mp3',\n  async () => {\n    // create temporary file\n    const tempFilePath = `${os.tmpdir()}/${videoId}.mp3`\n\n    await execa(`ffmpeg`, [\n      '-i',\n      updatedVideo.audioFileURL, // ffmpeg will grab input from URL\n      '-map',\n      '0:a',\n      '-map_metadata',\n      '-1',\n      '-ab',\n      '320k',\n      '-f',\n      'aac',\n      '-ss',\n      String(updatedVideo.regionStartTime), // start time\n      '-to',\n      String(updatedVideo.regionEndTime), // end time\n      tempFilePath\n    ])\n\n    const croppedAudioS3Key = await getAudioFileKey(videoId)\n\n    // upload mp3 to file storage\n    const mp3URL = await uploadFile({\n      Key: croppedAudioS3Key,\n      Body: fs.createReadStream(tempFilePath)\n    })\n\n    // remove temp file\n    await unlink(tempFilePath)\n\n    await dbConnect()\n\n    await VideoModel.updateOne(\n      { _id: videoId },\n      { $set: { croppedAudioFileURL: mp3URL } }\n    )\n\n    return mp3URL\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing the Update Function in Bubbletea Model\nDESCRIPTION: This snippet demonstrates how to implement the Update function in a Bubbletea model to handle keyboard inputs and model updates. It shows how to handle terminal resize events, key presses, and how to quit the application with Ctrl+C.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/interactive-clis-with-bubbletea.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\ttea \"github.com/charmbracelet/bubbletea\"\n)\n\nfunc NewModel() (*model, error) {\n\treturn &model{}, nil\n}\n\ntype model struct {\n\tnameInput string\n\tlistInput string\n\tevent     string\n}\n\nvar _ tea.Model = (*model)(nil)\n\nfunc (m *model) View() string {\n\tif m.event != \"\" {\n\t\treturn fmt.Sprintf(\"You've selected: %s\", m.event)\n\t}\n\treturn \"TODO\" // We'll do this soon :)\n}\n\n// Update is called with a tea.Msg, representing something that happened within\n// our application.\n//\n// This can be things like terminal resizing, keypresses, or custom IO.\nfunc (m model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {\n\t// Let's figure out what is in tea.Msg, and what we need to do.\n\tswitch msg := msg.(type) {\n\tcase tea.WindowSizeMsg:\n\t\t// The terminal was resized.  We can access the new size with:\n\t\t_, _ = msg.Width, msg.Height\n\tcase tea.KeyMsg:\n\t\t// msg is a keypress.  We can handle each key combo uniquely, and update\n\t\t// our state:\n\t\tswitch msg.Type {\n\t\tcase tea.KeyCtrlC, tea.KeyCtrlBackslash:\n\t\t\t// In this case, ctrl+c or ctrl+backslash quits the app by sending a\n\t\t\t// tea.Quit cmd.  This is a Bubbletea builtin which terminates the\n\t\t\t// overall framework which renders our model.\n\t\t\t//\n\t\t\t// Unfortunately, if you don't include this quitting can be, uh,\n\t\t\t// frustrating, as bubbletea catches every key combo by default.\n\t\t\treturn m, tea.Quit\n\t\t}\n\t}\n\t// We return an updated model to Bubbletea for rendering here.  This allows\n\t// us to mutate state so that Bubbletea can render an updated view.\n\t//\n\t// We also return \"commands\".  A command is something that you need to do\n\t// after rendering.  Each command produces a tea.Msg which is its *result*.\n\t// Bubbletea calls this Update function again with the tea.Msg - this is our\n\t// render loop.\n\t//\n\t// For now, we have no commands to run given the message is not a keyboard\n\t// quit combo.\n\treturn m, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Using Steps in Python Inngest Functions\nDESCRIPTION: Demonstration of using steps in Inngest functions to manage execution flow. Steps are discrete tasks that can be executed, retried and recovered independently. Common step methods include step.run, step.sleep(), and step.wait_for_event().\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/inngest-functions.mdx#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nstep.run(\"copy-images-to-s3\")\nstep.run(\"resize-images\")\n```\n\n----------------------------------------\n\nTITLE: Wrapping Anthropic SDK with Inngest AI in TypeScript\nDESCRIPTION: Demonstrates how to properly wrap the Anthropic SDK using Inngest's AI wrapper. It shows both an incorrect approach that fails due to lost client context and the correct method using function binding.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/steps-workflows/step-ai-orchestration.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Anthropic from \"@anthropic-ai/sdk\";\nconst anthropic = new Anthropic();\n\nexport const anthropicWrapGenerateText = inngest.createFunction(\n  { id: \"anthropic-wrap-generateText\" },\n  { event: \"anthropic/wrap.generate.text\" },\n  async ({ event, step }) => {\n    //\n    // Will fail because anthropic client requires instance context\n    // to be preserved across invocations.\n    await step.ai.wrap(\n      \"using-anthropic\",\n      anthropic.messages.create,\n      {\n        model: \"claude-3-5-sonnet-20241022\",\n        max_tokens: 1024,\n        messages: [{ role: \"user\", content: \"Hello, Claude\" }],\n      },\n    );\n\n    //\n    // Will work beccause we bind to preserve instance context\n    const createCompletion = anthropic.messages.create.bind(anthropic.messages);\n    await step.ai.wrap(\n      \"using-anthropic\",\n      createCompletion,\n      {\n        model: \"claude-3-5-sonnet-20241022\",\n        max_tokens: 1024,\n        messages: [{ role: \"user\", content: \"Hello, Claude\" }],\n      },\n    );\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Debounce in Python with Inngest\nDESCRIPTION: Implements a function with debounce settings in Python using Inngest decorators. The function delays execution until 5 minutes after the last event with the same account_id is received, with a maximum delay of 10 minutes.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/debounce.mdx#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@inngest.create_function(\n    fn_id=\"handle-webhook\",\n    debounce=inngest.Debounce(\n        key=\"event.data.account_id\",\n        period=datetime.timedelta(minutes=5),\n        timeout=datetime.timedelta(minutes=10)\n    ),\n    trigger=inngest.Trigger(event=\"intercom/company.updated\")\n)\nasync def handle_webhook(ctx: inngest.Context):\n    // This function will only be scheduled 5 minutes after events are no longer received with the same\n    // `event.data.account_id` field.\n    //\n    // `event` will be the last event in the series received.\n    pass\n```\n\n----------------------------------------\n\nTITLE: Delaying Jobs with Inngest in Go\nDESCRIPTION: This snippet demonstrates how to delay a function execution by a specific duration (4 hours) using Inngest's step.Sleep() method in Go. It creates a function that waits before executing a task in response to a user creation event.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/delayed-functions.mdx#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"time\"\n    \"github.com/inngest/inngest-go\"\n    \"github.com/inngest/inngest-go/step\"\n)\n\ninngestgo.CreateFunction(\n    inngest.FunctionOpts{\n        ID: \"send-signup-email\",\n    },\n    inngest.TriggerEvent(\"app/user.created\"),\n    func(ctx *inngest.Context) error {\n        // business logic\n\n        step.Sleep(\"wait-for-the-future\", 4 * time.Hour)\n\n        _, err = step.Run(\"do-some-work-in-the-future\", func(ctx *inngest.StepContext) (any, error) {\n            // Code here runs in the future automatically.\n            return nil, nil\n        })\n        return err, nil\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Concurrency Limits with Inngest in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an Inngest function with concurrency limits. It sets a limit of 2 concurrent executions per user for an AI summary generation function.\nSOURCE: https://github.com/inngest/website/blob/main/app/(landing-pages)/landing/(pages)/managing-capacity-for-ai-concurrency/content.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n {\n   id: \"ai-generate-summary\",\n   concurrency: {\n     key: \"event.data.user_id\",\n     limit: 2,\n   }\n },\n { event: \"ai/summary.requested\" },\n async ({ event, step }) => {\n   /* call OpenAI */\n }\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Function Run Priority Based on Account Type in Inngest\nDESCRIPTION: This snippet demonstrates how to configure run priority for an Inngest function. Priority is set conditionally based on the account type, where enterprise accounts receive priority (120 seconds) while other accounts run with no priority (0). This feature is available from Inngest version 3.2.1 onwards.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/functions/run-priority.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default inngest.createFunction(\n  {\n    id: \"ai-generate-summary\",\n    priority: {\n      // For enterprise accounts, a given function run will be prioritized\n      // ahead of functions that were enqueued up to 120 seconds ago.\n      // For all other accounts, the function will run with no priority.\n      run: \"event.data.account_type == 'enterprise' ? 120 : 0\",\n    },\n  },\n  { event: \"ai/summary.requested\" },\n  async ({ event, step }) => {\n    // This function will be prioritized based on the account type\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Workflow Editor UI with React Components\nDESCRIPTION: This snippet shows how to implement a workflow editor UI using the prebuilt React components from Inngest's Workflow Kit. It sets up a provider for workflow state management, renders the editor with a sidebar, and handles workflow changes to save updates to a database.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/introducing-workflow-kit.mdx#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react'\nimport {\n  Provider,\n  Editor,\n  Sidebar\n} from \"@inngest/workflow-kit\";\nimport { actions, trigger } from \"@lib/inngest/workflow\"\n\nexport default function Editor({ workflow }) {\n  // `workflow` is loaded from the database\n  return (\n    <Provider\n      workflow={workflow}\n      trigger={trigger}\n      availableActions={actions}\n      onChange={(updatedWorkflow) => {\n        // save to database...\n      }}\n    >\n      <Editor>\n        <Sidebar position=\"right\"></Sidebar>\n      </Editor>\n    </Provider>;\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Inngest Client in Python\nDESCRIPTION: Creates an Inngest client in Python with a specified application ID. This client instance is used to send events from anywhere in the application.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/events/index.mdx#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport inngest\n\ninngest_client = inngest.Inngest(app_id=\"acme-storefront-app\")\n```\n\n----------------------------------------\n\nTITLE: Defining an Inngest Function with Event Trigger in Python\nDESCRIPTION: This snippet demonstrates how to create a basic Inngest function using the create_function decorator. It sets up a function triggered by a specific event.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/functions/create.mdx#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport inngest\n\n@inngest_client.create_function(\n    fn_id=\"import-product-images\",\n    trigger=inngest.TriggerEvent(event=\"shop/product.imported\"),\n)\nasync def fn(ctx: inngest.Context, step: inngest.Step):\n    # Your function code\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to PartyKit Server in TypeScript\nDESCRIPTION: This function sends a POST request to the PartyKit server to publish a message. It takes a body and requestId as parameters and sends them as JSON data.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/semi-autonomous-ai-agents.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * 🥳 Publish a message to the party. Sends a POST request to the partykit server.\n * The server then broadcasts it to all connected clients.\n *\n * @param body\n * @param requestId\n */\nexport const publish = async (body: string, requestId: string) => {\n  const partyUrl = `${process.env.NEXT_PUBLIC_PARTY_KIT_URL!}/party/${process.env.NEXT_PUBLIC_PARTYKIT_ROOM_NAME}`\n  await fetch(partyUrl, {\n    method: \"POST\",\n    body: JSON.stringify({\n        requestId,\n        body,\n    }),\n  }).catch((e) => {\n    console.error(e);\n  })\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Retry Times with RetryAfterError in Inngest\nDESCRIPTION: Demonstrates how to customize retry timing using RetryAfterError. This is useful when working with external APIs that provide specific retry timings through headers like 'Retry-After'.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/error-retries/retries.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RetryAfterError } from 'inngest';\n\ninngest.createFunction(\n  { id: \"send-welcome-notification\" },\n  { event: \"app/user.created\" },\n  async ({ event, step }) => {\n\n    const msg = await step.run('send-message', async () => {\n      const { success, retryAfter, message } = await twilio.messages.create({\n        to: event.data.user.phoneNumber,\n        body: \"Welcome to our service!\",\n      });\n\n      if (!success && retryAfter) {\n        throw new RetryAfterError(\"Hit Twilio rate limit\", retryAfter);\n      }\n      \n      return { message };\n    });\n    \n  },\n);\n```\n\nLANGUAGE: go\nCODE:\n```\ninngestgo.CreateFunction(\n\tinngestgo.FunctionOpts{ID: \"send-welcome-notification\"},\n\tinngestgo.EventTrigger(\"user.created\", nil),\n\tfunc(ctx context.Context, input inngestgo.Input[SignedUpEvent]) (any, error) {\n\t\tsuccess, retryAfter, err := twilio.Messages.Create(twilio.MessageOpts{\n\t\t\tTo:   input.Event.Data.User.PhoneNumber,\n\t\t\tBody: \"Welcome to our service!\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tif !success && retryAfter != nil {\n\t\t\treturn nil, inngestgo.RetryAtError(fmt.Errorf(\"Hit Twilio rate limit\"), *retryAfter)\n\t\t}\n\n\t\treturn nil, nil\n\t}\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nimport inngest\nfrom src.inngest.client import inngest_client\n\n@inngest_client.create_function(\n    fn_id=\"send-welcome-notification\",\n    trigger=inngest.TriggerEvent(event=\"user.created\"),\n)\ndef send_welcome_notification(ctx: inngest.Context, step: inngest.StepSync) -> None:\n\tsuccess, retryAfter, err = twilio.Messages.Create(twilio.MessageOpts{\n\t\tTo:   ctx.event.data[\"user\"][\"phoneNumber\"],\n\t\tBody: \"Welcome to our service!\",\n\t})\n\n\tif not success and retryAfter is not None:\n\t\traise inngest.RetryAfterError(\"Hit Twilio rate limit\", retryAfter)\n```\n\n----------------------------------------\n\nTITLE: JSON Serialization of step.run() Return Values\nDESCRIPTION: This example shows how return values from step.run() are automatically serialized as JSON. Complex types like MongoDB ObjectId and Date objects are converted to their string representations to ensure compatibility with Inngest's service.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/functions/step-run.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst output = await step.run(\"create-user\", () => {\n  return { id: new ObjectId(), createdAt: new Date() };\n});\n/*\n{\n  \"id\": \"647731d1759aa55be43b975d\",\n  \"createdAt\": \"2023-05-31T11:39:18.097Z\"\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Logger Interface Definition\nDESCRIPTION: TypeScript interface definition for the logger object showing available logging methods including info, warn, error, and debug.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/functions/create.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Logger {\n  info(...args: any[]): void;\n  warn(...args: any[]): void;\n  error(...args: any[]): void;\n  debug(...args: any[]): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Localized Marketing Content in Parallel\nDESCRIPTION: Creates localized content for each target language in parallel using Promise.all. Each language gets a customized campaign adaptation including headline, main copy, CTA, and social media snippets while maintaining the core message.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/deepseek-r1-step-ai.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst localizedContent = targetLanguages.map(async (lang: string) =>\n    step.ai.wrap(\"generate-campaign-concept\", createCompletion, {\n    model: model,\n    messages: [\n        {\n        role: \"user\",\n        content: `\n        ${MARKETING_EXPERT_PROMPT}\n        Adapt the following campaign concept for ${lang} market:\n        ${campaignConcept.choices[0].message.content}\n        \n        Consider cultural nuances, local preferences, and idiomatic expressions.\n        Provide:\n        1. Headline\n        2. Main copy\n        3. Call to action\n        4. Social media snippets (3 variations)\n        \n        Ensure the content feels native to ${lang} speakers while maintaining the core message and keeping technical terms in English.\n        `,\n        },\n    ],\n    temperature: model.includes(\"deepseek\") ? 0.6 : 1,\n    })\n);\n\nawait Promise.all(localizedContent);\n```\n\n----------------------------------------\n\nTITLE: Pausing Function Execution for a Specific Duration in Go\nDESCRIPTION: This Go example demonstrates using `step.Sleep()` to pause the execution of a function. The function sleeps for a second after receiving an account creation event before continuing execution.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/steps-workflows/sleeps.mdx#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc AccountCreated(ctx context.Context, input inngestgo.Input[AccountCreatedEvent]) (any, error) {\n  // Sleep for a second, minute, hour, week across server restarts.\n  step.Sleep(ctx, \"initial-delay\", time.Second)\n\n  // ...\n\n  return nil, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Individual Video Transfers with Inngest in JavaScript\nDESCRIPTION: This function handles the processing of individual video transfers. It fetches detailed video information from the source provider and initiates the transfer to the destination platform. It uses dynamic function selection based on platform IDs and leverages encrypted credentials for security.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/mux-migrating-video-collections.mdx#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const processVideo = inngest.createFunction(\n  { id: 'process-video', name: 'Process video' },\n  { event: 'truckload/video.process' },\n  async ({ event, step }) => {\n    const videoData = event.data.encrypted.video;\n    // use the source platform id to conditionally set the fetch page function\n    const sourcePlatformId = event.data.encrypted.sourcePlatform.id;\n    const fetchVideoFn = providerFns[sourcePlatformId].fetchVideo;\n\n    // use the destination platform id to conditionally set the transfer video function\n    const destinationPlatformId = event.data.encrypted.destinationPlatform.id;\n    const transferVideoFn = providerFns[destinationPlatformId].transferVideo;\n\n    const video = await step.invoke(`fetch-video-${videoData.id}`, {\n      function: fetchVideoFn,\n      data: {\n        jobId: event.data.jobId,\n        encrypted: {\n          credentials: event.data.encrypted.sourcePlatform.credentials!,\n          video: videoData,\n        },\n      },\n    });\n\n    const transfer = await step.invoke(`transfer-video-${videoData.id}`, {\n      function: transferVideoFn,\n      data: {\n        jobId: event.data.jobId,\n        encrypted: {\n          sourcePlatform: event.data.encrypted.sourcePlatform,\n          destinationPlatform: event.data.encrypted.destinationPlatform,\n          video,\n        },\n      },\n    });\n\n    return { status: 'success', transfer };\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Sending Multiple Events in TypeScript\nDESCRIPTION: Shows how to batch multiple events in a single request to Inngest using TypeScript. This is efficient for sending related events or processing arrays of data.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/events/index.mdx#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait inngest.send([\n  { name: \"storefront/cart.checkout.completed\", data: { ... } },\n  { name: \"storefront/coupon.used\", data: { ... } },\n  { name: \"storefront/loyalty.program.joined\", data: { ... } },\n])\n```\n\n----------------------------------------\n\nTITLE: Sending Events from Functions in Python\nDESCRIPTION: Shows how to send events from within Inngest functions in Python using step.send_event(). This ensures reliable event delivery and is the recommended approach for functions.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/events/index.mdx#2025-04-10_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport inngest\nfrom src.inngest.client import inngest_client\n\n@inngest_client.create_function(\n    fn_id=\"my_function\",\n    trigger=inngest.TriggerEvent(event=\"app/my_function\"),\n)\nasync def fn(\n    ctx: inngest.Context,\n    step: inngest.Step,\n) -> list[str]:\n    return await step.send_event(\"send\", inngest.Event(name=\"foo\"))\n```\n\n----------------------------------------\n\nTITLE: Integrating Inngest with Firebase Cloud Functions (TypeScript)\nDESCRIPTION: Shows how to use Inngest with Firebase Cloud Functions using the onRequest handler. It includes setting up the serve function and notes on configuring INNGEST_SERVE_PATH.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/serving-inngest-functions.mdx#2025-04-10_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { onRequest } from \"firebase-functions/v2/https\";\n\nimport { serve } from \"inngest/express\";\nimport { inngest as inngestClient } from \"./inngest/client\";\n\nexport const inngest = onRequest(\n  serve({\n    client: inngestClient,\n    functions: [/* ...functions... */],\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Priority in TypeScript for Inngest Function\nDESCRIPTION: This snippet demonstrates how to set up priority for an Inngest function in TypeScript. It uses a conditional expression to assign higher priority to enterprise accounts.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/priority.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default inngest.createFunction(\n  {\n    id: \"ai-generate-summary\",\n    priority: {\n      // For enterprise accounts, a given function run will be prioritized\n      // ahead of functions that were enqueued up to 120 seconds ago.\n      // For all other accounts, the function will run with no priority.\n      run: \"event.data.account_type == 'enterprise' ? 120 : 0\",\n    },\n  },\n  { event: \"ai/summary.requested\" },\n  async ({ event, step }) => {\n    // This function will be prioritized based on the account type\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Action in Python\nDESCRIPTION: This snippet shows the complete implementation of the multi-step Inngest function in Python, including the conditional action to send a reminder email if no post is created within 24 hours.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/multi-step-functions.mdx#2025-04-10_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport inngest\nfrom src.inngest.client import inngest_client\n\n@inngest_client.create_function(\n    fn_id=\"activation-email\",\n    trigger=inngest.TriggerEvent(event=\"app/user.created\"),\n)\nasync def fn(\n    ctx: inngest.Context,\n    step: inngest.Step,\n) -> None:\n    await step.run(\"send-welcome-email\", lambda: sendEmail({\n        \"email\": ctx.event.user.email,\n        \"template\": \"welcome\"\n    }))\n\n    # Wait for an \"app/post.created\" event\n    post_created = await step.wait_for_event(\"wait-for-post-creation\", {\n        \"event\": \"app/post.created\",\n        \"match\": \"data.user.id\",  # the field \"data.user.id\" must match\n        \"timeout\": \"24h\",  # wait at most 24 hours\n    })\n\n    if not post_created:\n        # If no post was created, send a reminder email\n        await step.run(\"send-reminder-email\", lambda: sendEmail({\n            \"email\": ctx.event.user.email,\n            \"template\": \"reminder\"\n        }))\n```\n\n----------------------------------------\n\nTITLE: Using NonRetriableError in Python Inngest Functions\nDESCRIPTION: Demonstrates how to use NonRetriableError in Python to prevent Inngest from retrying a function or step when an error occurs that cannot be resolved by retrying.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/error-retries/inngest-errors.mdx#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@client.create_function(\n    fn_id=\"import-item-data\",\n    retries=0,\n    trigger=inngest.TriggerEvent(event=\"store/import.requested\"),\n)\nasync def fn_async(\n    ctx: inngest.Context,\n    step: inngest.Step,\n) -> None:\n    def step_1() -> None:\n        raise inngest.NonRetriableError(\"non-retriable-step-error\")\n\n    step.run(\"step_1\", step_1)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry Middleware with Inngest in Python\nDESCRIPTION: This snippet shows how to set up the SentryMiddleware in Python by importing the necessary modules, initializing Sentry, and configuring the Inngest client with the middleware. The middleware is included directly as part of the inngest package.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/middleware/sentry-middleware.mdx#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport inngest\nfrom inngest.experimental.sentry_middleware import SentryMiddleware\n\nimport sentry_sdk\n\n# Initialize Sentry as usual wherever is appropriate\nsentry_sdk.init(\n    traces_sample_rate=1.0,\n    profiles_sample_rate=1.0,\n)\n\ninngest_client = inngest.Inngest(\n    app_id=\"my-app\",\n    middleware=[SentryMiddleware],\n)\n```\n\n----------------------------------------\n\nTITLE: Sending Single Event in Go\nDESCRIPTION: Demonstrates how to send an event to Inngest using the Go client. The event contains cart checkout information and account details in a structured format.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/events/index.mdx#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"github.com/inngest/inngest-go\"\n\nfunc main() {\n  inngestgo.Send(context.Background(), inngestgo.Event{\n    Name: \"storefront/cart.checkout.completed\",\n    Data: map[string]any{\n      \"cartId\": \"ed12c8bde\",\n      \"itemIds\": []string{\"9f08sdh84\", \"sdf098487\", \"0fnun498n\"},\n      \"account\": map[string]any{\n        \"id\": 123,\n        \"email\": \"test@example.com\",\n      },\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Inngest function in v3 vs v2\nDESCRIPTION: Comparison showing how function creation differs between v3 and v2, with v3 requiring an explicit 'id' property rather than just 'name'.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/migration.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  { id: \"send-welcome-email\", name: \"Send welcome email\" },\n  { event: \"app/user.created\" },\n  async ({ event }) => {\n    // ...\n  }\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  { name: \"Send welcome email\" },\n  { event: \"app/user.created\" },\n  async ({ event }) => {\n    // ...\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Receiving and Validating Events with Pydantic in Inngest Functions\nDESCRIPTION: Shows how to define an Inngest function that receives events and converts them to typed Pydantic models. This ensures that incoming event data is validated and properly typed within the function handler.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/guides/pydantic.mdx#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@client.create_function(\n    fn_id=\"handle-upvoted-post\",\n    trigger=inngest.TriggerEvent(event=PostUpvotedEvent.name),\n)\ndef fn(\n    ctx: inngest.Context,\n    step: inngest.StepSync,\n) -> None:\n    event = PostUpvotedEvent.from_event(ctx.event)\n```\n\n----------------------------------------\n\nTITLE: Sending Events and Retrieving Event IDs in Python\nDESCRIPTION: Example of sending multiple events using the Python SDK and retrieving their unique Event IDs. These IDs can be used to look up events in the Inngest dashboard or via the REST API.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/events/index.mdx#2025-04-10_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nids = await inngest_client.send(\n    [\n        inngest.Event(name=\"my_event\", data={\"msg\": \"Hello!\"}),\n        inngest.Event(name=\"my_other_event\", data={\"name\": \"Alice\"}),\n    ]\n)\n#\n#  ids = [\n#    \"01HQ8PTAESBZPBDS8JTRZZYY3S\",\n#    \"01HQ8PTFYYKDH1CP3C6PSTBZN5\"\n#  ]\n# \n```\n\n----------------------------------------\n\nTITLE: Inngest Function with Complete Return Object for Enhanced Searchability\nDESCRIPTION: Improved version of an Inngest function that returns the complete LLM completion object instead of just the text. This approach enables more powerful search patterns using output properties like token usage.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/announcing-function-runs-search.mdx#2025-04-10_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nexport const chatCompletion = inngest.createFunction(\n  {\n    name: \"Create chat completion\",\n    id: \"create-chat-completion\",\n    throttle: {\n      limit: 5,\n      period: \"60s\"\n    },\n  },\n  { event: \"ai/chat.completion\" },\n  async ({ event, step }) => {\n    const completion = await openai.chat.completions.create({\n      messages: event.data.messages,\n      model: \"gpt-3.5-turbo\",\n    });\n    return completion;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Integrating Inngest with Express (TypeScript)\nDESCRIPTION: Shows how to serve Inngest functions within an existing Express app. It includes setting up the JSON middleware and exposing the Inngest middleware on a specific path.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/serving-inngest-functions.mdx#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from \"inngest/express\";\nimport { inngest } from \"./src/inngest/client\";\nimport fnA from \"./src/inngest/fnA\"; // Your own function\n\n// Important:  ensure you add JSON middleware to process incoming JSON POST payloads.\napp.use(express.json());\napp.use(\n  // Expose the middleware on our recommended path at `/api/inngest`.\n  \"/api/inngest\",\n  serve({ client: inngest, functions: [fnA] })\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Priority in Python for Inngest Function\nDESCRIPTION: This example illustrates how to set up priority for an Inngest function using Python. It uses a decorator to define the function with priority configuration.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/priority.mdx#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@inngest.create_function(\n  id=\"ai-generate-summary\",\n  priority=inngest.Priority(\n    run=\"event.data.account_type == 'enterprise' ? 120 : 0\",\n  ),\n  trigger=inngest.Trigger(event=\"ai/summary.requested\")\n)\nasync def ai_generate_summary(ctx: inngest.Context):\n    # This function will be prioritized based on the account type\n```\n\n----------------------------------------\n\nTITLE: Executing Retriable Code with step.run() in Python\nDESCRIPTION: Shows how to use step.run() in Python to execute a piece of code that will be automatically retried if it throws an error. The response is saved in the function run state upon successful completion.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/inngest-steps.mdx#2025-04-10_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport inngest\nfrom src.inngest.client import inngest_client\n\n@inngest_client.create_function(\n    fn_id=\"import-product-images\",\n    event=\"shop/product.imported\"\n)\nasync def import_product_images(ctx: inngest.Context, step: inngest.Step):\n    # Here goes the business logic\n    # By wrapping code in steps, it will be retried automatically on failure\n    uploaded_image_urls = await step.run(\n        # step ID\n        \"copy-images-to-s3\",\n        # other arguments, in this case: a handler\n        lambda: copy_all_images_to_s3(ctx.event.data[\"image_urls\"])\n    )\n```\n\n----------------------------------------\n\nTITLE: Run Generation Function with Complex Idempotency Key\nDESCRIPTION: Example function with a composite idempotency key combining promptHash and userId. This prevents duplicate AI generations for the same prompt from the same user within a 24-hour period.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/handling-idempotency.mdx#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst runGeneration = inngest.createFunction(\n  {\n    id: 'run-generation',\n    // Given the event payload sends a hash of the prompt,\n    // this will only run once per unique prompt per user\n    // every 24 hours:\n    idempotency: `event.data.promptHash + \"-\" + event.data.userId`\n  },\n  { event: 'ai/generation.requested' },\n  async ({ event, step }) => {\n    // Track the request\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Step Functions\nDESCRIPTION: Example of mocking and testing sleep and waitForEvent steps in Inngest functions.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/testing/index.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst myFunction = inngest.createFunction(\n  { id: \"my-function\" },\n  { event: \"user.created\" },\n  async ({ event, step }) => {\n    await step.sleep(\"one-day-delay\", \"1d\");\n    return { message: \"success\" };\n  }\n)\n\nt.execute({\n  steps: [\n    {\n      id: \"one-day-delay\",\n      handler() {}, // no return value necessary\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Using serve() API with Inngest v2\nDESCRIPTION: Example of setting up an Inngest serve handler with v2 syntax, which uses a different function signature compared to v3.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/serve/index.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from \"inngest/next\"; // or your preferred framework\nimport { inngest } from \"./client\";\nimport {\n  importProductImages,\n  sendSignupEmail,\n  summarizeText,\n} from \"./functions\";\n\nserve(inngest, [sendSignupEmail, summarizeText, importProductImages]);\n```\n\n----------------------------------------\n\nTITLE: Initializing Inngest Client in TypeScript\nDESCRIPTION: Creates and exports an Inngest client instance with a specified application ID. This client can be imported anywhere in your application to send events.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/events/index.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inngest } from \"inngest\";\n\nexport const inngest = new Inngest({ id: \"acme-storefront-app\" }); // Use your app's ID\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Independent Functions with Inngest in Python\nDESCRIPTION: This code defines two separate functions that both trigger on the 'app/user.signup' event. The first function sends a welcome email while the second function creates a Stripe customer and subscription with a trial period. Both functions run independently and in parallel when the signup event occurs.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/fan-out-jobs.mdx#2025-04-10_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@inngest_client.create_function(\n    fn_id=\"send-welcome-email\",\n    trigger=inngest.TriggerEvent(event=\"app/user.signup\"),\n)\nasync def send_welcome_email(\n    ctx: inngest.Context,\n    step: inngest.Step,\n) -> None:\n    await step.run(\"send-email\", lambda: send_email(\n        email=ctx.event.data[\"user\"][\"email\"],\n        template=\"welcome\"\n    ))\n\n@inngest_client.create_function(\n    fn_id=\"start-stripe-trial\", \n    trigger=inngest.TriggerEvent(event=\"app/user.signup\"),\n)\nasync def start_stripe_trial(\n    ctx: inngest.Context,\n    step: inngest.Step,\n) -> None:\n    customer = await step.run(\"create-customer\", lambda: stripe.Customer.create(\n        email=ctx.event.data[\"user\"][\"email\"]\n    ))\n    \n    await step.run(\"create-subscription\", lambda: stripe.Subscription.create(\n        customer=customer.id,\n        items=[{\"price\": \"price_1MowQULkdIwHu7ixraBm864M\"}],\n        trial_period_days=14\n    ))\n```\n\n----------------------------------------\n\nTITLE: Configuring Remix Edge Runtime with Inngest Streaming (v3)\nDESCRIPTION: Enables response streaming in Remix Edge Functions when using Inngest v3. This configuration extends request timeout to 15 minutes when deployed on Vercel.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/serving-inngest-functions.mdx#2025-04-10_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nexport const config = {\n  runtime: \"edge\",\n};\n\nconst handler = serve({\n  client: inngest,\n  functions: [...fns],\n  streaming: \"allow\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Schemas in Inngest TypeScript SDK v2.0\nDESCRIPTION: Demonstrates how to set up event payload typing in Inngest v2.0 using different methods including fromRecord, fromUnion, and fromZod. This approach improves type discoverability and provides clearer error messages.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/releasing-ts-sdk-2-0.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const inngest = new Inngest({\n  name: \"Admin Panel\",\n  schemas: new EventSchemas()\n    .fromRecord<Events>()\n    .fromUnion<Custom1 | Custom2>()\n    .fromZod(zodEventSchemas),\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Command to start the Next.js development server.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/getting-started/nextjs-quick-start.mdx#2025-04-10_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating an AI Agent Network with AgentKit in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a network of AI agents using AgentKit and Inngest. It sets up a network with multiple agents, defines a default model, and runs the network with a specific input and routing strategy.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/ai-orchestration-with-agentkit-step-ai.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Network, agenticOpenai } from \"@inngest/agent-kit\";\nimport { navigator, classifier, summarizer } from \"./src/agents\";\n\nexport default inngest.createFunction(\n  { id: \"summarizer\" },\n  { event: \"api/summary.requested\" },\n  async ({ event, step }) => {\n\n    // Create a network of agents with separate tasks and instructions to solve\n    // a specific task, using Inngest steps for orchestration\n    const network = new Network({\n      agents: [navigator, classifier, summarizer],\n      defaultModel: agenticOpenai({ model: \"gpt-4o\", step }),\n    })\n\n    const input = \"Classify then summarize the latest 10 blog posts on https://www.deeplearning.ai/blog/\"\n\n    const result = await network.run(input, ({ network }) => {\n      // Use an agent which figures out the specific agent to call based off of the network's history.\n      return defaultRoutingAgent;\n    });\n\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing a Simple Inngest Function in Go\nDESCRIPTION: A basic Go implementation of an Inngest function that sends a welcome email when a user signs up, using the Inngest Go SDK to create a reliable, retriable function.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/multi-step-functions.mdx#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/inngest/inngest-go\"\n)\n\ninngestgo.CreateFunction(\n    inngestgo.FunctionOpts{\n        ID: \"activation-email\",\n    },\n    inngestgo.EventTrigger(\"app/user.created\"),\n    func(ctx *inngestgo.Context) (any, error) {\n        if err := sendEmail(ctx.Event.Data[\"user\"].(map[string]interface{})[\"email\"].(string), \"welcome\"); err != nil {\n            return err\n        }\n        return nil, nil\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Sending Events in Inngest v2\nDESCRIPTION: Shows the correct way to send events in Inngest v2, which has been simplified to use a single standard method.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/migration.mdx#2025-04-10_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.send({ name: \"app/user.created\", data: { userId: \"123\" } });\ninngest.send([\n  { name: \"app/user.created\", data: { userId: \"123\" } },\n  { name: \"app/user.created\", data: { userId: \"456\" } },\n]);\n```\n\n----------------------------------------\n\nTITLE: Sending User Signup Event in Python (Flask)\nDESCRIPTION: This Python code using Flask sets up a '/signup' route that handles user signup. It creates a user, establishes a session, and sends an event to Inngest with the user's data.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/fan-out-jobs.mdx#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask, request, redirect\nfrom src.inngest.client import inngest_client\n\napp = Flask(__name__)\n\n@app.route('/signup', methods=['POST'])\nasync def signup():\n    // NOTE - this code is simplified for the example:\n    data = await request.get_json()\n    email = data['email']\n    password = data['password']\n    \n    user = await create_user(email=email, password=password)\n    await create_session(user.id)\n\n    // Send an event to Inngest\n    await inngest_client.send(\n        name=\"app/user.signup\",\n        data={\n            \"user\": {\n                \"id\": user.id,\n                \"email\": user.email\n            }\n        }\n    )\n\n    return redirect('https://myapp.com/dashboard')\n```\n\n----------------------------------------\n\nTITLE: Registering Middleware in Python\nDESCRIPTION: Shows how to register middleware at both the client and function level in Python, illustrating the execution order of multiple middleware.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/middleware.mdx#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ninngest_client = inngest.Inngest(\n    app_id=\"my_app\",\n    middleware=[\n        LogMiddleware, # This is executed first\n        ErrorMiddleware # This is executed second\n    ],\n)\n\n# ...\n\n\n@inngest_client.create_function(\n    fn_id=\"import-product-images\",\n    trigger=inngest.TriggerEvent(event=\"shop/product.imported\"),\n    middleware=[\n        DbSetupMiddleware, # This is executed third\n        DatadogMiddleware # This is executed fourth\n    ],\n)\nasync def fn(ctx: inngest.Context, step: inngest.Step):\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Debounce for AI API Calls in TypeScript with Inngest\nDESCRIPTION: This snippet demonstrates how to use Inngest's debounce feature to limit the frequency of AI API calls for each user. It sets a one-minute debounce period keyed by user ID, helping to control costs and prevent abuse.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/ai-in-production-managing-capacity-with-flow-control.mdx#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  {\n    id: \"summarize-user-generated-content\",\n    debounce: {\n      period: \"1m\",\n      key: \"event.data.user_id\",\n    },\n  },\n  { event: \"ai/summary.requested\" },\n  async ({ event, step }) => {\n    /* call OpenAI */\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Inngest using TypeScript\nDESCRIPTION: This snippet demonstrates how to set up a connection to Inngest using TypeScript, including creating a function and establishing a persistent connection.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/setup/connect.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inngest } from 'inngest'\nimport { connect } from 'inngest/connect';\nimport { ConnectionState } from 'inngest/components/connect/types';\n\nconst inngest = new Inngest({\n  id: 'my-app'\n});\n\nconst handleSignupFunction = inngest.createFunction(\n  { id: 'handle-signup' },\n  { event: 'user.created'}\n  async ({ event, step }) => {\n    console.log('Function called', event);\n  }\n);\n\n(async () => {\n  const connection = await connect({\n    apps: [{ client: inngest, functions: [handleSignupFunction] }]\n  });\n\n  console.log('Worker: connected', connection);\n})();\n```\n\n----------------------------------------\n\nTITLE: Setting Event Key in Python\nDESCRIPTION: Demonstrates how to set an Event Key in Python for production environments by passing it directly to the Inngest constructor. This allows secure authentication of your application.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/events/index.mdx#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport inngest\n\n# It is not recommended to hard-code your Event Key in your code.\ninngest_client = inngest.Inngest(app_id=\"your-app-id\", event_key=\"xyz...\")\n```\n\n----------------------------------------\n\nTITLE: Function Configuration in Python Inngest\nDESCRIPTION: Example showing configuration options available when creating Inngest functions including ID specification, concurrency, throttling, debouncing, rate limiting, priority and batch event handling.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/inngest-functions.mdx#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncreateFunction(\n  id=\"function-name\",\n  # Other config options:\n  # concurrency=5,\n  # throttle=\"1/s\",\n  # debounce=\"5m\"\n)\n```\n\n----------------------------------------\n\nTITLE: Simple Function Example in TypeScript\nDESCRIPTION: A basic Inngest function example showing how each step executes as a separate HTTP request, causing the initialization code to run multiple times. This demonstrates the typical incorrect implementation pattern.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/working-with-loops.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ninngest.createFunction(\n  { id: \"simple-function\" },\n  { event: \"test/simple.function\" },\n  async ({ step }) => {\n    console.log(\"hello\");\n\n    await step.run(\"a\", async () => { console.log(\"a\") });\n    await step.run(\"b\", async () => { console.log(\"b\") });\n    await step.run(\"c\", async () => { console.log(\"c\") });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using step.invoke() Method in TypeScript\nDESCRIPTION: Shows how to use the step.invoke() method to asynchronously call another Inngest function and handle the result. This example demonstrates calling a function to compute the square of a number.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/inngest-steps.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// A function we will call in another place in our app\nconst computeSquare = inngest.createFunction(\n  { id: \"compute-square\" },\n  { event: \"calculate/square\" },\n  async ({ event }) => {\n    return { result: event.data.number * event.data.number }; // Result typed as { result: number }\n  }\n);\n\n// In this function, we'll call `computeSquare`\nconst mainFunction = inngest.createFunction(\n  { id: \"main-function\" },\n  { event: \"main/event\" },\n  async ({ step }) => {\n    const square = await step.invoke(\"compute-square-value\", {\n      function: computeSquare,\n      data: { number: 4 }, // input data is typed, requiring input if it's needed\n    });\n\n    return `Square of 4 is ${square.result}.`; // square.result is typed as number\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using step.ai.wrap for AI SDK Integration in TypeScript\nDESCRIPTION: This code snippet shows how to use the step.ai.wrap API to integrate an existing AI SDK (in this case, Vercel's AI SDK) with Inngest. It adds AI observability, metrics, and monitoring to the AI model calls.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/ai-orchestration-with-agentkit-step-ai.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateText } from \"ai\"\nimport { openai } from \"@ai-sdk/openai\"\n\nexport default inngest.createFunction(\n  { id: \"summarize-contents\" },\n  { event: \"app/ticket.created\" },\n  async ({ event, step }) => {\n\n    // This calls `generateText` with the given arguments, adding AI observability,\n    // metrics, datasets, and monitoring to your calls.\n    const { text } = await step.ai.wrap(\"using-vercel-ai\", generateText, {\n      model: openai(\"gpt-4-turbo\"),\n      prompt: \"What is love?\"\n    });\n\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Processing Workflow Actions with Switch Statement\nDESCRIPTION: This TypeScript code snippet shows how to process different types of workflow actions using a switch statement. It handles actions such as delays, sending emails, filtering, and sending Slack messages.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/user-defined-workflows-sanity-nextjs.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst action = workflow.actions.shift()\nswitch (action._type) {\ncase 'delay':\n  await step.sleep(`${action.duration}${action.unit}`)\n  break\ncase 'sendEmail':\n  const sendToAddress = event.data[action.to]\n  await step.run('send email', async () => {\n    return sendEmail({\n      to: sendToAddress,\n      template: action.template,\n      accountId,\n    })\n  })\n  break\ncase 'filter':\n  shouldContinue = await step.run('filter', async () => {\n    return (\n      action.field &&\n      event.data[action.field as string] === action.value\n    )\n  })\n  break\ncase 'slack':\n  await step.run('send slack message', async () => {\n    return postInSlack({\n      channelId: action.channel,\n      accountId,\n      notificationType: event.data.status,\n    })\n  })\n  break\ndefault:\n  shouldContinue = false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Triggers in Inngest Functions (Python)\nDESCRIPTION: Example showing how to configure an Inngest function with multiple triggers including specific events and a scheduled cron job in Python. The function will run when either user.created or user.updated events occur, or every morning at 5am.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/multiple-triggers.mdx#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@inngest_client.create_function(\n    fn_id=\"resync-user-data\",\n    trigger=[\n        inngest.TriggerEvent(event=\"user.created\"),\n        inngest.TriggerEvent(event=\"user.updated\"),\n        inngest.TriggerCron(cron=\"0 5 * * *\")\n    ],\n)\ndef my_handler(ctx: inngest.Context) -> None:\n     # ...\n```\n\n----------------------------------------\n\nTITLE: Using step.sleepUntil() Method in TypeScript\nDESCRIPTION: Shows how to use the step.sleepUntil() method to pause execution until a specific date and time. This example demonstrates pausing until a scheduled reminder date.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/inngest-steps.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default inngest.createFunction(\n  { id: \"send-scheduled-reminder\" },\n  { event: \"app/reminder.scheduled\" },\n  async ({ event, step }) => {\n    const date = new Date(event.data.remind_at);\n    await step.sleepUntil(\"wait-for-the-date\", date);\n    // Do something else\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Understanding the Finalization Step in Inngest Function Traces\nDESCRIPTION: Demonstrates where the 'finalization' step occurs in an Inngest function execution, showing code that runs between the last explicit step and the end of the function handler.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/faq.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst myFunction = inngest.createFunction(\n  { id: \"handle-import\" }\n  { event: \"integration.connected\" }\n  async ({ event, step }) => {\n    const res = await step.run(\"import-data\", async () => {\n      // ...\n    });\n    // -- Finalization starts ⬇️ --\n    const newRows = res.rows.filter((row) => row.created === true)\n    return { message: `Imported ${newRows.length} rows` }\n    // -- Finalization ends ⬆️ --\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Cancellable Function in Python\nDESCRIPTION: This snippet shows how to create a cancellable function in Python using Inngest. It includes event-based cancellation and demonstrates a sleep step followed by a reminder push notification.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/cancellation.mdx#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@inngest_client.create_function(\n    fn_id=\"schedule-reminder\",\n    trigger=inngest.TriggerEvent(event=\"tasks/reminder.created\"),\n    cancel=[inngest.Cancel(\n                event=\"tasks/deleted\",\n                if_exp=\"event.data.id == async.data.id\"\n            )],\n)\nasync def fn(\n    ctx: inngest.Context,\n    step: inngest.Step,\n) -> None:\n    # Step 1\n    await step.sleep_until(\n        \"sleep-until-remind-at-time\",\n         ctx.event.data[\"remind_at\"],\n    )\n\n    # Step 2\n    await step.run(\"send-reminder-push\", send_reminder_push)\n\n\n\nasync def send_reminder_push() -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Middleware in Inngest TypeScript SDK v2.0\nDESCRIPTION: Shows how to create and use middleware in Inngest v2.0 to hook into various client lifecycles. This example implements logging before and after function execution, demonstrating the middleware pattern.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/releasing-ts-sdk-2-0.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inngest, InngestMiddleware } from \"inngest\";\n\nconst myMiddleware = new InngestMiddleware({\n  name: \"My Middleware\",\n  init() {\n    return {\n      onFunctionRun({ fn }) {\n        // This will be logged whenever a function is executed\n        console.log(`Function ${fn.name} is running!`);\n\n        // This is where you can optionally specify hooks for this particular run\n        return {\n          afterExecution() {\n            console.log(`Function ${fn.name} has finished running!`);\n          },\n        };\n      },\n    };\n  },\n});\n\nconst inngest = new Inngest({\n  name: \"My App\",\n  middleware: [myMiddleware],\n});\n```\n\n----------------------------------------\n\nTITLE: Cloudflare Pages Functions Integration\nDESCRIPTION: Implementation for Cloudflare Pages Functions using the Inngest API server.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/serving-inngest-functions.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from \"inngest/cloudflare\";\nimport { inngest } from \"../../inngest/client\";\nimport fnA from \"../../inngest/fnA\"; // Your own function\n\nexport const onRequest = serve({\n  client: inngest,\n  functions: [fnA],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Inngest Client with Branch Environment in TypeScript\nDESCRIPTION: Example showing how to initialize the Inngest client with branch environment configuration in TypeScript, including serve handler setup.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/platform/environments.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst inngest = new Inngest({\n  id: \"my-app\",\n  env: process.env.BRANCH,\n});\n// Alternatively, you can set the INNGEST_ENV environment variable in your app\n\n// Pass the client to the serve handler to complete the setup\nserve({ client: inngest, functions: [myFirstFunction, mySecondFunction] });\n```\n\n----------------------------------------\n\nTITLE: Creating a New Next.js Project with Pages Router\nDESCRIPTION: Command to create a new Next.js project with TypeScript, ESLint, Tailwind, and Pages Router configuration.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/getting-started/nextjs-quick-start.mdx#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-next-app@latest --ts --eslint --tailwind --no-src-dir --no-app --import-alias='@/*' inngest-guide\n```\n\n----------------------------------------\n\nTITLE: Conditional Cron Execution Based on Environment in Inngest\nDESCRIPTION: Shows how to conditionally render cron triggers based on the environment to ensure that cron jobs only run in production environments. In non-production environments, it substitutes with a manual event trigger.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/faq.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nprocess.env.NODE_ENV === \"production\" ? { cron: \"* * *\" } : { event: \"dev/manualXYZ\" }\n```\n\n----------------------------------------\n\nTITLE: Processing Return Values from step.sendEvent()\nDESCRIPTION: Example showing how to handle the return value from step.sendEvent(), which includes an array of event IDs that were sent. These IDs can be used to look up events in the dashboard or API.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/functions/step-send-event.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { ids } = await step.sendEvent([\n  {\n    name: \"app/invoice.created\",\n    data: { invoiceId: \"645e9e024befa68763f5b500\" }\n  },\n  {\n    name: \"app/invoice.created\",\n    data: { invoiceId: \"645e9e08f29fb563c972b1f7\" }\n  },\n]);\n/**\n * ids = [\n *   \"01HQ8PTAESBZPBDS8JTRZZYY3S\",\n *   \"01HQ8PTFYYKDH1CP3C6PSTBZN5\"\n * ]\n */\n```\n\n----------------------------------------\n\nTITLE: Implementing Failure Handlers in Go for Inngest Functions\nDESCRIPTION: Demonstrates how to create a failure handler in Go by creating a new function that listens for the inngest/function.failed event with a specific expression to match the failing function's ID.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/error-retries/failure-handlers.mdx#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// the Go SDK doesn't have native way to define failure handlers,\n// but you can define one by create a new function that uses\n// the \"inngest/function.failed\" event and an expression:\nmyFailureHandler := inngestgo.CreateFunction(\n\tinngestgo.FunctionOpts{\n\t\t\tID:   \"account-created-on-failure\",\n\t\t\tName: \"Account creation flow: On Failure\",\n\t},\n\tinngestgo.EventTrigger(\n\t\t\"inngest/function.failed\",\n\t\t// The full function_id is a concatenated slug of your app id and the\n\t\t// failing function's \"ID\"\n\t\tinngestgo.StrPtr(\"event.data.function_id == 'my-app-account-created'\")\n\t),\n\tfunc(\n\t\tctx context.Context,\n\t\tinput inngestgo.Input[inngestgo.GenericEvent[functionFailedEventData, any]],\n\t) (any, error) {\n\t\t// Handle your failure here\n\t}\n)\n\ntype functionFailedEventData struct {\n  Error struct {\n    Message string `json:\"message\"`\n    Name string `json:\"name\"`\n  } `json:\"error\"`\n  FunctionID string `json:\"function_id\"`\n  RunID string `json:\"run_id\"`\n}\n\n// How to determine the full function_id to use in the expression?\n// 1. Get the \"app id\" set via \"NewHandler\"\nh := inngestgo.NewHandler(\"my-app\", inngestgo.HandlerOpts{})\n// 2. Get the FunctionOpts's ID parameter:\nf := inngestgo.CreateFunction(\n\tinngestgo.FunctionOpts{\n\t\t\tID:   \"account-created\",\n\t\t\tName: \"Account creation flow\",\n\t},\n\tinngestgo.EventTrigger(\"api/account.created\", nil),\n\tAccountCreated,\n)\n// 3. Join them with a hyphen:\n// event.data.function_id == 'my-app-account-created'\n```\n\n----------------------------------------\n\nTITLE: Using RetryAfterError in Python Inngest Functions\nDESCRIPTION: Demonstrates how to use RetryAfterError in Python to control when Inngest retries a function or step, specifying a delay in milliseconds for the next retry attempt.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/error-retries/inngest-errors.mdx#2025-04-10_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@client.create_function(\n    fn_id=\"import-item-data\",\n    retries=0,\n    trigger=inngest.TriggerEvent(event=\"store/import.requested\"),\n)\nasync def fn_async(\n        ctx: inngest.Context,\n    step: inngest.Step,\n) -> None:\n  def step_1() -> None:\n      raise inngest.RetryAfterError(\"rate-limit-hit\", 1000) # delay in milliseconds\n\n  step.run(\"step_1\", step_1)\n```\n\n----------------------------------------\n\nTITLE: Handling Return Values from Inngest Send Method\nDESCRIPTION: Example showing how to handle the return values from the inngest.send() method. The function returns a promise that resolves to an object with an array of Event IDs that were sent.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/events/send.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { ids } = await inngest.send([\n  {\n    name: \"app/invoice.created\",\n    data: { invoiceId: \"645e9e024befa68763f5b500\" }\n  },\n  {\n    name: \"app/invoice.created\",\n    data: { invoiceId: \"645e9e08f29fb563c972b1f7\" }\n  },\n]);\n/**\n * ids = [\n *   \"01HQ8PTAESBZPBDS8JTRZZYY3S\",\n *   \"01HQ8PTFYYKDH1CP3C6PSTBZN5\"\n * ]\n */\n```\n\n----------------------------------------\n\nTITLE: Advanced Multi-Key Concurrency Configuration in Inngest\nDESCRIPTION: Demonstrates setting up multiple concurrency queues with different scopes and keys, including account-level OpenAI rate limiting and per-account function execution limiting.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/functions/concurrency.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  {\n    id: \"unique-function-id\",\n    concurrency: [\n      {\n         // Use an account-level concurrency limit for this function, using the\n         // \"openai\" key as a virtual queue.  Any other function which\n         // runs using the same \"openai\"` key counts towards this limit.\n         scope: \"account\",\n         key: `\"openai\"`,\n         // If there are 10 functions running with the \"openai\" key, this function's\n         // runs will wait for capacity before executing.\n         limit: 10,\n      },\n      {\n         // Create another virtual concurrency queue for this function only.  This\n         // limits all accounts to a single execution for this function, based off\n         // of the `event.data.account_id` field.\n         // \"fn\" is the default scope, so we could omit this field.\n         scope: \"fn\",\n         key: \"event.data.account_id\",\n         limit: 1,\n      },\n    ],\n  }\n  { event: \"ai/summary.requested\" },\n  async ({ event, step }) => {\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Inngest Function Handler Structure in Python\nDESCRIPTION: This snippet outlines the basic structure of an Inngest function handler, showing the expected arguments and their types.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/functions/create.mdx#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@inngest_client.create_function(\n    # Function options\n)\nasync def fn(ctx: inngest.Context, step: inngest.Step):\n    # Function code\n```\n\n----------------------------------------\n\nTITLE: Resend Webhook Transform\nDESCRIPTION: A simple JavaScript transform function for Resend email service webhooks that sets the event name with a resend/ prefix and extracts the data field from the webhook payload.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/platform/webhooks.mdx#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction transform(evt, headers = {}, queryParams = {}) {\n  return {\n    name: `resend/${evt.type}`,\n    data: evt.data,\n   };\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Payments with Sleep Functionality in TypeScript\nDESCRIPTION: This code demonstrates a durable function for payment processing using Inngest, featuring the ability to pause execution until a specific date. It handles charging, database updates, and sending receipts with built-in retry capabilities.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/queues-are-no-longer-the-right-abstraction.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handlePayments = inngest.createFunction(\n  {\n    name: \"Handle payments\", id: \"handle-payments\"\n  },\n  { event: \"api/invoice.created\" },\n  async ({ event, step }) => {\n    // Wait until the next billing date\n    await step.sleepUntil(\"wait-for-billing-date\", event.data.invoiceDate);\n\n    // Steps automatically retry on error, and only run\n    // once on success - automatically, with no work.\n    const charge = await step.run(\"charge\", async () => {\n      return await stripe.charges.create({\n        amount: event.data.amount,\n      });\n    });\n\n    await step.run(\"update-db\", async () => {\n      return await db.payments.upsert(charge);\n    });\n\n    await step.run(\"send-receipt\", async () => {\n      return await resend.emails.send({\n        to: event.user.email,\n        subject: \"Your receipt for Inngest\",\n      });\n    });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Correct Variable Assignment from step.run Return Value\nDESCRIPTION: TypeScript example showing the correct approach to setting variables from step.run() by returning values from the step and assigning them to variables.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/eslint.mdx#2025-04-10_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\n// ✅ Good\n// This is the right way to set variables within step.run :)\nconst userId = await step.run(\"get-user\", () => getRandomUserId());\n\nconsole.log(userId); // 123\n```\n\n----------------------------------------\n\nTITLE: Demonstrating logger execution in Inngest functions\nDESCRIPTION: Shows how log statements behave differently inside and outside of step functions. Statements outside steps may run multiple times, while those inside steps run exactly once.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/logging.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync ({ event, step }) => {\n  logger.info(\"something\") // this can be run three times\n\n  await step.run(\"fn\", () => {\n    logger.info(\"something else\") // this will always be run once\n  })\n\n  await step.run(...)\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Events from Scheduled Function in TypeScript\nDESCRIPTION: This snippet demonstrates a scheduled function that fetches users, creates events for each user, and sends these events to Inngest. It uses step.sendEvent() to trigger weekly email activity for multiple users in parallel.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/sending-events-from-functions.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GetEvents, Inngest } from \"inngest\";\n\nconst inngest = new Inngest({ id: \"signup-flow\" });\ntype Events = GetEvents<typeof inngest>;\n\nexport const loadCron = inngest.createFunction(\n  { id: \"weekly-activity-load-users\" },\n  { cron: \"0 12 * * 5\" },\n  async ({ event, step }) => {\n    // Fetch all users\n    const users = await step.run(\"fetch-users\", async () => {\n      return fetchUsers();\n    });\n\n    // For each user, send us an event.  Inngest supports batches of events\n    // as long as the entire payload is less than 512KB.\n    const events = users.map<Events[\"app/weekly-email-activity.send\"]>(\n      (user) => {\n        return {\n          name: \"app/weekly-email-activity.send\",\n          data: {\n            ...user,\n          },\n          user,\n        };\n      }\n    );\n\n    // Send all events to Inngest, which triggers any functions listening to\n    // the given event names.\n    await step.sendEvent(\"fan-out-weekly-emails\", events);\n\n    // Return the number of users triggered.\n    return { count: users.length };\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Event Payload Type Definition\nDESCRIPTION: TypeScript type definition for the event payload structure, showing all possible fields including optional properties.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/events-triggers/event-format.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// If you prefer to think in TypeScript types, here's the type representation of the event payload:\ntype EventPayload = {\n  name: string;\n  data: Record<string, any>;\n  user?: Record<string, any>;\n  id?: string;\n  ts?: number;\n  v?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Function References with step.invoke() in Inngest\nDESCRIPTION: Demonstrates how to create and use function references with referenceFunction() to invoke functions from other apps or to avoid importing dependencies. Shows both local references and cross-application references.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/functions/step-invoke.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { referenceFunction } from \"inngest\";\nimport { type computePi } from \"@/inngest/computePi\";\n\n// Create a local reference to a function without importing dependencies\nconst computePi = referenceFunction<typeof computePi>({\n  functionId: \"compute-pi\",\n});\n\n// Create a reference to a function in another application\nconst computeSquare = referenceFunction({\n  appId: \"my-python-app\",\n  functionId: \"compute-square\",\n});\n\n// square.result is typed as a number\nconst square = await step.invoke(\"compute-square-value\", {\n  function: computePi,\n  data: { number: 4 }, // input data is typed, requiring input if it's needed\n});\n```\n\n----------------------------------------\n\nTITLE: Stripe Webhook Transform with Deduplication\nDESCRIPTION: A JavaScript transform function for Stripe webhooks that uses Stripe's event ID for deduplication, sets the event name with a stripe/ prefix, and passes through the entire payload as data.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/platform/webhooks.mdx#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction transform(evt, headers = {}, queryParams = {}) {\n  return {\n    id: evt.id,\n    name: `stripe/${evt.type}`,\n    data: evt,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Image Copy Operations in S3 with Higher Concurrency\nDESCRIPTION: This code handles the 'shopify/copy.image' events sent from the previous function, copying images to an S3 bucket. It uses a higher concurrency (20) than the product import function since S3 supports higher rate limits. The function extracts image data from the event and uploads it to S3.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/import-ecommerce-api-data-in-seconds.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  { id: \"shopify-copy-image-to-S3\", concurrency: 20 },\n  { event: \"shopify/copy.image\" },\n  async ({ event, step }) => {\n    const { imageId, storeId, productId } = event.data\n    await step.run(\"copy-image\", async () => {\n      const res = await fetch(event.data.imageUrl)\n      const blob = await res.blob()\n      const ext = path.extname(event.data.imageUrl)\n      const uploadedImage = await s3\n        .upload({\n          Bucket: process.env.AWS_S3_BUCKET_NAME,\n          Key: `/${storeId}/${productId}/${imageId}.${ext}`,\n          ContentType: res.headers.get(\"content-type\"),\n          Body: blob,\n        })\n        .promise()\n      return uploadedImage.Location\n    })\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Running Two Steps in Parallel with Inngest Python SDK\nDESCRIPTION: Example of running two steps in parallel using step.parallel. This code demonstrates how to execute the update_user and send_email functions concurrently for a given user_id.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/steps/parallel.mdx#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@inngest_client.create_function(\n    fn_id=\"my-function\",\n    trigger=inngest.TriggerEvent(event=\"my-event\"),\n)\nasync def fn(\n    ctx: inngest.Context,\n    step: inngest.Step,\n) -> None:\n    user_id = ctx.event.data[\"user_id\"]\n\n    (updated_user, sent_email) = await step.parallel(\n        (\n            lambda: step.run(\"update-user\", update_user, user_id),\n            lambda: step.run(\"send-email\", send_email, user_id),\n        )\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding Text Input Component to Bubbletea Model\nDESCRIPTION: This snippet shows how to incorporate a text input subcomponent from the bubbles library into a Bubbletea model. It demonstrates initializing the text input, handling its state updates, and rendering it as part of the application interface.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/interactive-clis-with-bubbletea.md#2025-04-10_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\n\t\"github.com/charmbracelet/bubbles/textinput\"\n\ttea \"github.com/charmbracelet/bubbletea\"\n)\n\nfunc NewModel() (*model, error) {\n\t// We need to initialize a new text input model.\n\tti := textinput.New()\n\tti.CharLimit = 30\n\tti.Placeholder = \"Type in your event\"\n\t// Nest the text input in our application state.\n\treturn &model{input: ti}, nil\n}\n\ntype model struct {\n\tnameInput string\n\tlistInput string\n\tevent     string\n\t// Add the text input to our main application state.  It's a subcomponent\n\t// which has its own state, etc.\n\tinput textinput.Model\n}\n\nfunc (m model) Init() tea.Cmd {\n\t// Call Init() on our submodel.  If we had > 1 submodel and command, we would\n\t// create a slice of commands to batch:\n\t//\n\t// return tea.Batch(cmds...)\n\tcmd := m.input.Init()\n\treturn cmd\n}\n\nfunc (m model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {\n\tvar (\n\t\tcmd  tea.Cmd\n\t\tcmds []tea.Cmd\n\t)\n\tswitch msg := msg.(type) {\n\tcase tea.WindowSizeMsg:\n\t\t_, _ = msg.Width, msg.Height\n\tcase tea.KeyMsg:\n\t\tswitch msg.Type {\n\t\tcase tea.KeyCtrlC, tea.KeyCtrlBackslash:\n\t\t\treturn m, tea.Quit\n\t\t}\n\t}\n\t// We call Bubbletea using our model as the top-level application.  Bubbletea\n\t// will call Update() in our model only.  It's up to us to call Update() on\n\t// our text input to update its state.  Without this, typing won't fill out\n\t// the text box.\n\tm.input, cmd = m.textinput.Update(msg)\n\tcmds = append(cmds, cmd)\n\t// store the text inputs value in our top-level state.\n\tm.nameInput = m.textinput.Value()\n\treturn m, tea.Batch(cmds...)\n}\n\nfunc (m model) View() string {\n\tif m.event != \"\" {\n\t\treturn fmt.Sprintf(\"You've selected: %s\", m.event)\n\t}\n\n\tb := &strings.Builder{}\n\tb.WriteString(\"Enter your event:\\n\")\n\t// render the text input.  All we need to do to show the full\n\t// input is call View() and return the string.\n\tb.WriteString(m.input.View())\n\treturn b.String()\n}\n```\n\n----------------------------------------\n\nTITLE: Express.js Inngest Function Server Setup\nDESCRIPTION: JavaScript code showing how to serve Inngest functions using Express.js middleware.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/trigger-your-code-from-retool.mdx#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { serve } from \"inngest/express\"\nimport runBackfillForUser from \"../inngest/runBackfillForUser\"\n\napp.use(\"/api/inngest\", serve(\"My API\", process.env.INNGEST_SIGNING_KEY, [\n  runBackfillForUser,\n]))\n// your existing routes...\napp.get(\"/api/whatever\", ...)\napp.post(\"/api/something_else\", ...)\n```\n\n----------------------------------------\n\nTITLE: Updating step.waitForEvent() in Inngest SDK v3\nDESCRIPTION: Shows the changes in step.waitForEvent() function between v2 and v3. V3 requires an identifier and moves the event name into the options object.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/migration.mdx#2025-04-10_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nstep.waitForEvent(\"wait-for-user-login\", {\n  event: \" app/user.login\",\n  timeout: \"1h \",\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nstep.waitForEvent(\"app/user.login\", {\n  timeout: \"1h \",\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Sequential step.run Implementation\nDESCRIPTION: TypeScript example showing the correct approach to executing dependent steps in sequence by extracting them into a separate function.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/eslint.mdx#2025-04-10_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\n// ✅ Good\nconst aThenB = async () => {\n  const someValue = await step.run(\"a\", async () => {\n    return \"...\";\n  });\n\n  return step.run(\"b\", async () => {\n    return use(someValue);\n  });\n};\n\nawait aThenB();\n```\n\n----------------------------------------\n\nTITLE: Sending an Event in an Inngest Function (Python)\nDESCRIPTION: This code snippet demonstrates how to create an Inngest function that sends an event. It uses the @inngest_client.create_function decorator to define a function triggered by an 'app/my_function' event. The function then sends a new event named 'foo' using the step.send_event method.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/steps/send-event.mdx#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@inngest_client.create_function(\n    fn_id=\"my_function\",\n    trigger=inngest.TriggerEvent(event=\"app/my_function\"),\n)\nasync def fn(\n    ctx: inngest.Context,\n    step: inngest.Step,\n) -> list[str]:\n    return await step.send_event(\"send\", inngest.Event(name=\"foo\"))\n```\n\n----------------------------------------\n\nTITLE: Connecting to Inngest using Python\nDESCRIPTION: This snippet illustrates how to create a persistent connection to Inngest using Python, including defining a function and establishing the connection using asyncio.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/setup/connect.mdx#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport inngest\nfrom inngest.experimental.connect import connect\n\nclient = inngest.Inngest(app_id=\"my-app\")\n\n@client.create_function(\n    fn_id=\"handle-signup\",\n    trigger=inngest.TriggerEvent(event=\"user.created\"),\n)\nasync def fn_1(ctx: inngest.Context, step: inngest.Step) -> None:\n    print(\"Function called\")\n\nfunctions = [fn_1]\n\nasyncio.run(\n    connect(\n        apps=[(client, functions)],\n    ).start()\n)\n```\n\n----------------------------------------\n\nTITLE: Checking Inngest Connection State\nDESCRIPTION: Example showing how to check the connection state after connecting to Inngest. The connect promise resolves when the connection reaches the ACTIVE state.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/setup/connect.mdx#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// The connect promise will resolve when the connection is ACTIVE\nconst connection = await connect({\n  apps: [...],\n})\nconsole.log(`The worker connection is: ${connection.state}`)\n// The worker connection is: ACTIVE\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Batching in TypeScript\nDESCRIPTION: Creates an Inngest function that processes batches of events with TypeScript. The function is configured with a maximum batch size, timeout, and optional key for grouping events by user ID. It maps event data and performs a bulk database write operation.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/batching.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  {\n    id: \"record-api-calls\",\n    batchEvents: {\n      maxSize: 100,\n      timeout: \"5s\",\n      key: \"event.data.user_id\", // Optional: batch events by user ID\n    },\n  },\n  { event: \"log/api.call\" },\n  async ({ events, step }) => {\n    // NOTE: Use the `events` argument, which is an array of event payloads\n    const attrs = events.map((evt) => {\n      return {\n        user_id: evt.data.user_id,\n        endpoint: evt.data.endpoint,\n        timestamp: toDateTime(evt.ts),\n      };\n    });\n\n    const result = await step.run(\"record-data-to-db\", async () => {\n      return db.bulkWrite(attrs);\n    });\n\n    return { success: true, recorded: result.length };\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Event Payload Structure Example\nDESCRIPTION: Example of an Inngest event payload object structure showing the standard fields including name, data, version, and timestamp.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/functions/create.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"app/account.created\",\n  data: {\n    userId: \"1234567890\"\n  },\n  v: \"2023-05-12.1\",\n  ts: 1683898268584\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Duplicate Events with Custom ID in Go\nDESCRIPTION: Example showing how to prevent duplicate events from being processed by adding a custom ID to the event payload in Go. The example includes a detailed event data structure with nested maps and arrays.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/events/index.mdx#2025-04-10_snippet_21\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"github.com/inngest/inngest-go\"\n\nfunc main() {\n  inngestgo.Send(context.Background(), inngestgo.Event{\n    Name: \"storefront/cart.checkout.completed\",\n    ID: \"cart-checkout-completed-ed12c8bde\",\n    Data: map[string]any{\n      \"cartId\": \"ed12c8bde\",\n      \"itemIds\": []string{\"9f08sdh84\", \"sdf098487\", \"0fnun498n\"},\n      \"account\": map[string]any{\n        \"id\": 123,\n        \"email\": \"test@example.com\",\n      },\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Welcome Email on User Creation with Inngest\nDESCRIPTION: This function listens for the 'clerk/user.created' event and sends a welcome email to the new user. It extracts the user's first name and email from the Clerk event payload and sends a personalized welcome email.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/clerk-webhook-events.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst sendWelcomeEmail = inngest.createFunction(\n  { id: 'send-welcome-email' },\n  { event: 'clerk/user.created' },\n  async ({ event }) => {\n    const { user } = event.data;\n    const { first_name } = user;\n    const email = user.email_addresses.find(e =>\n      e.id === user.primary_email_address_id\n    ).email;\n    await emails.sendWelcomeEmail({ email, first_name });\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Different Ways to Handle step.run() Promises\nDESCRIPTION: This example demonstrates various methods to handle the Promise returned by step.run() including using the await keyword, Promise.then(), and Promise.all() for parallel execution. Each approach offers different patterns for managing asynchronous operations in Inngest functions.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/functions/step-run.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Use the \"await\" keyword to wait for the promise to fulfil\nawait step.run(\"create-user\", () => {/* ... */});\nconst user = await step.run(\"create-user\", () => {/* ... */});\n\n// Use `then` (or similar)\nstep.run(\"create-user\", () => {/* ... */})\n  .then((user) => {\n    // do something else\n  });\n\n// Use with a Promise helper function to run in parallel\nPromise.all([\n  step.run(\"create-subscription\", () => {/* ... */}),\n  step.run(\"add-to-crm\", () => {/* ... */}),\n  step.run(\"send-welcome-email\", () => {/* ... */}),\n]);\n```\n\n----------------------------------------\n\nTITLE: Different Ways to Handle step.run() Promises\nDESCRIPTION: This example demonstrates various methods to handle the Promise returned by step.run() including using the await keyword, Promise.then(), and Promise.all() for parallel execution. Each approach offers different patterns for managing asynchronous operations in Inngest functions.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/functions/step-run.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Use the \"await\" keyword to wait for the promise to fulfil\nawait step.run(\"create-user\", () => {/* ... */});\nconst user = await step.run(\"create-user\", () => {/* ... */});\n\n// Use `then` (or similar)\nstep.run(\"create-user\", () => {/* ... */})\n  .then((user) => {\n    // do something else\n  });\n\n// Use with a Promise helper function to run in parallel\nPromise.all([\n  step.run(\"create-subscription\", () => {/* ... */}),\n  step.run(\"add-to-crm\", () => {/* ... */}),\n  step.run(\"send-welcome-email\", () => {/* ... */}),\n]);\n```\n\n----------------------------------------\n\nTITLE: Next.js Pages API Route Handler\nDESCRIPTION: Implementation of a Next.js API route handler that sends an event to Inngest using the Pages Router. Uses force-dynamic to ensure new events are sent on each request.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/getting-started/nextjs-quick-start.mdx#2025-04-10_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextApiRequest, NextApiResponse } from \"next\";\nimport { inngest } from \"./inngest\";\n\n// Opt out of caching; every request should send a new event\nexport const dynamic = \"force-dynamic\";\n\n// Create a simple async Next.js API route handler\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse,\n) {\n  // Send your event payload to Inngest\n  await inngest.send({\n    name: \"test/hello.world\",\n    data: {\n      email: \"testUser@example.com\",\n    },\n  });\n\n  res.status(200).json({ message: \"Event sent!\" });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Event Structure for User Signup in JavaScript\nDESCRIPTION: Sample event structure for triggering background functions on user signup. This JSON structure includes the event name 'user.signup' and contains relevant user data like email and signup reason.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/run-nextjs-functions-in-the-background.mdx#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  name: \"user.signup\",\n  data: {\n    signupReason: \"some string\"\n  },\n  user: {\n    email: \"the.user.email@example.com\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Inngest with Fastify\nDESCRIPTION: Code to set up Inngest using the provided Fastify plugin in a Fastify server.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/getting-started/nodejs-quick-start.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Fastify from \"fastify\";\nimport { fastifyPlugin } from \"inngest/fastify\";\nimport { inngest, functions } from \"./src/inngest\"\n\nconst fastify = Fastify({\n  logger: true,\n});\n\n// This automatically adds the \"/api/inngest\" routes to your server\nfastify.register(fastifyPlugin, {\n  client: inngest,\n  functions,\n  options: {},\n});\n\n// Start up the fastify server\nfastify.listen({ port: 3000 }, function (err, address) {\n  if (err) {\n    fastify.log.error(err);\n    process.exit(1);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Inngest with Next.js Pages Router\nDESCRIPTION: Implements Inngest in a Next.js application using the Pages Router pattern. Creates an API route at '/api/inngest' that handles all Inngest-related HTTP requests.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/serving-inngest-functions.mdx#2025-04-10_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// pages/api/inngest.ts\nimport { serve } from \"inngest/next\";\nimport { inngest } from \"../../inngest/client\";\nimport fnA from \"../../inngest/fnA\"; // Your own function\n\nexport default serve({\n  client: inngest,\n  functions: [fnA],\n});\n```\n\n----------------------------------------\n\nTITLE: Linear Webhook Transform with Meaningful Event Names\nDESCRIPTION: A JavaScript transform function for Linear webhooks that creates descriptive event names by combining the event type and action with a linear/ prefix.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/platform/webhooks.mdx#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction transform(evt, headers = {}, queryParams = {}) {\n  return {\n    // type (e.g. Issue) + action (e.g. create)\n    name: `linear/${evt.type.toLowerCase()}.${evt.action}`,\n    data: evt,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Prometheus Metrics from Inngest - YAML Example\nDESCRIPTION: An example of Prometheus metrics output from Inngest showing various counters and gauges for function runs, SDK requests, and step execution statistics. The metrics include execution counts, status breakdowns, and resource usage indicators.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/platform/monitor/prometheus-metrics-export-integration.mdx#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# HELP inngest_function_run_ended_total The total number of function runs ended\n# TYPE inngest_function_run_ended_total counter\ninngest_function_run_ended_total{date=\"2025-02-12\",fn=\"my-app-my-function\",status=\"Completed\"} 480\ninngest_function_run_ended_total{date=\"2025-02-12\",fn=\"my-app-my-function\",status=\"Failed\"} 20\n# HELP inngest_function_run_scheduled_total The total number of function runs scheduled\n# TYPE inngest_function_run_scheduled_total counter\ninngest_function_run_scheduled_total{date=\"2025-02-12\",fn=\"my-app-my-function\"} 500\n# HELP inngest_function_run_started_total The total number of function runs started\n# TYPE inngest_function_run_started_total counter\ninngest_function_run_started_total{date=\"2025-02-12\",fn=\"my-app-my-function\"} 500\n# HELP inngest_sdk_req_ended_total The total number of SDK invocation/step execution ended\n# TYPE inngest_sdk_req_ended_total counter\ninngest_sdk_req_ended_total{date=\"2025-02-12\",fn=\"my-app-my-function\",status=\"errored\"} 17\ninngest_sdk_req_ended_total{date=\"2025-02-12\",fn=\"my-app-my-function\",status=\"failed\"} 15\ninngest_sdk_req_ended_total{date=\"2025-02-12\",fn=\"my-app-my-function\",status=\"success\"} 740\n# HELP inngest_sdk_req_scheduled_total The total number of SDK invocation/step execution scheduled\n# TYPE inngest_sdk_req_scheduled_total counter\ninngest_sdk_req_scheduled_total{date=\"2025-02-12\",fn=\"my-app-my-function\"} 772\n# HELP inngest_sdk_req_started_total The total number of SDK invocation/step execution started\n# TYPE inngest_sdk_req_started_total counter\ninngest_sdk_req_started_total{date=\"2025-02-12\",fn=\"my-app-my-function\"} 772\n# HELP inngest_step_output_bytes_total The total number of bytes used by step outputs\n# TYPE inngest_step_output_bytes_total counter\ninngest_step_output_bytes_total{date=\"2025-02-12\",fn=\"my-app-my-function\"} 2804\n# HELP inngest_steps_running The number of steps currently running\n# TYPE inngest_steps_running gauge\ninngest_steps_running{fn=\"my-app-my-function\"} 7\n# HELP inngest_steps_scheduled The number of steps scheduled\n# TYPE inngest_steps_scheduled gauge\ninngest_steps_scheduled{fn=\"my-app-my-function\"} 30\n```\n\n----------------------------------------\n\nTITLE: Implementing Failure Handlers in Python for Inngest Functions\nDESCRIPTION: Shows how to implement failure handlers in Python using either the on_failure parameter for a specific function or by creating a dedicated function that listens for the inngest/function.failed system event.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/error-retries/failure-handlers.mdx#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Option 1: give the inngest function an [`on_failure`] handler.\nasync def update_subscription_failed(ctx: inngest.Context, step: inngest.Step):\n    # if the subscription check fails after all retries, unsubscribe the user\n    await unsubscribe_user(ctx.data.userId)\n\n@inngest_client.create_function(\n    fn_id=\"update-subscription\",\n    retries=5,\n    on_failure=update_subscription_failed,\n    trigger=TriggerEvent(event=\"user/subscription.check\"))\nasync def update_subscription(ctx: Context, step: Step):\n    pass # ...\n\n\n# Option 2: Listens for the [inngest/function.failed](/docs/reference/functions/handling-failures#the-inngest-function-failed-event)\n# system event to catch all failures in the inngest environment\n@inngest_client.create_function(\n    fn_id=\"global_failure_handler\",\n    trigger=[\n        TriggerEvent(event=\"inngest/function.failed\"),\n        #TriggerEvent(event=\"inngest/function.cancelled\")\n    ],\n)\nasync def global_failure_handler(ctx: Context, step: Step):\n    pass # handle all failures, e.g. to send to sentry\n```\n\n----------------------------------------\n\nTITLE: Determining Event Types in Multi-Trigger Functions (Go)\nDESCRIPTION: Example showing how to determine which event type triggered the function in Go. Uses type switching to handle different event types with type-safe event handling for each case.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/multiple-triggers.mdx#2025-04-10_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc(ctx context.Context, input inngestgo.Input) (any, error) {\n\tswitch event := input.Event.(type) {\n\tcase EventA:\n\t\t// `event` is type narrowed to only the `a` event\n\tcase EventB:\n\t\t// `event` is type narrowed to only the `b` event\n\tcase inngestgo.FunctionInvokedEvent:\n\t\t// `event` is type narrowed to only the `inngest/function.invoked` event\n\t}\n\treturn nil, nil\n},\n```\n\n----------------------------------------\n\nTITLE: Referencing External Inngest Functions in TypeScript\nDESCRIPTION: Shows how to create a reference to an Inngest function in another application and use it in TypeScript. It includes schema definition for type safety.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/invoking-functions-directly.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @/inngest/computeSquare.ts\nimport { referenceFunction } from \"inngest\";\nimport { z } from \"zod\";\n\n// Create a reference to a function in another application.\nexport const computeSquare = referenceFunction({\n  appId: \"my-python-app\",\n  functionId: \"compute-square\",\n  // Schemas are optional, but provide types for your call if specified\n  schemas: {\n    data: z.object({\n      number: z.number(),\n    }),\n    return: z.object({\n      result: z.number(),\n    }),\n  },\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { computeSquare } from \"@/inngest/computeSquare\";\n\n// square.result is typed as a number\nconst square = await step.invoke(\"compute-square-value\", {\n  function: computeSquare,\n  data: { number: 4 }, // input data is typed, requiring input if it's needed\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Delayed Follow-up Emails with Inngest in TypeScript\nDESCRIPTION: A function that sends a welcome email to new users, waits for three days using step.sleep, and then sends a follow-up email about a free trial offer. This demonstrates basic delayed email functionality with Inngest.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/resend-webhook-events.mdx#2025-04-10_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst sendOnboardingEmails = inngest.createFunction(\n  { id: 'onboarding-emails' },\n  { event: 'app/signup.completed' },\n  async ({ event, step }) => { // ← step is available in the handler's arguments\n    const { user } = event.data\n\t  const { email, first_name } = user\n\n    await step.run('welcome-email', async () => {\n      await sendEmail(email, \"Welcome to ACME\", (\n        <div>\n          <h1>Welcome to ACME, {firstName}</h1>\n        </div>\n      ));\n    })\n\n   // wait 3 days before second email\n   await step.sleep('wait-3-days', '3 days')\n\n   await step.run('trial-offer-email', async () => {\n     await sendEmail(email, \"Free ACME Pro trial\", (\n        <div>\n          <h1>Hello {firstName}, try our Pro features for 30 days for free</h1>\n        </div>\n      ));\n    })\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Invoking Inngest Functions with step.invoke()\nDESCRIPTION: Demonstrates how to create an Inngest function and invoke it from another function using step.invoke(). The example shows a main function that calls a 'computeSquare' function, with proper typing for input and output data.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/functions/step-invoke.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Some function we'll call\nconst computeSquare = inngest.createFunction(\n  { id: \"compute-square\" },\n  { event: \"calculate/square\" },\n  async ({ event }) => {\n    return { result: event.data.number * event.data.number }; // Result typed as { result: number }\n  }\n);\n\n// In this function, we'll call `computeSquare`\nconst mainFunction = inngest.createFunction(\n  { id: \"main-function\" },\n  { event: \"main/event\" },\n  async ({ step }) => {\n    const square = await step.invoke(\"compute-square-value\", {\n      function: computeSquare,\n      data: { number: 4 }, // input data is typed, requiring input if it's needed\n    });\n\n    return `Square of 4 is ${square.result}.`; // square.result is typed as number\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Sending Events to Inngest Dev Server using SDK\nDESCRIPTION: Code snippets demonstrating how to send events to the Inngest Dev Server using the Inngest SDK in Node.js, Python, and Go. These examples show how to create an Inngest client and send an event.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/dev-server.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inngest } from \"inngest\";\n\nconst inngest = new Inngest({ id: \"my-app\" });\nawait inngest.send({\n  name: \"user.avatar.uploaded\",\n  data: { url: \"https://a-bucket.s3.us-west-2.amazonaws.com/...\" },\n});\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom inngest import Inngest\n\ninngest_client = inngest.Inngest(app_id=\"my_app\")\nawait inngest_client.send(\n  name=\"user.avatar.uploaded\",\n  data={\"url\": \"https://a-bucket.s3.us-west-2.amazonaws.com/...\"},\n)\n```\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"github.com/inngest/inngest-go\"\n\nfunc main() {\n  inngestgo.Send(context.Background(), inngestgo.Event{\n    Name: \"user.avatar.uploaded\",\n    Data: map[string]any{\"url\": \"https://a-bucket.s3.us-west-2.amazonaws.com/...\"},\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Production Mode with Environment Variables in Python\nDESCRIPTION: This code example demonstrates how to initialize the Inngest SDK with production mode controlled by an environment variable. It uses the is_production constructor argument to determine whether the SDK should connect to Inngest Cloud based on the FLASK_ENV variable.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/overview/prod-mode.mdx#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport inngest\n\ninngest.Inngest(\n    app_id=\"my_flask_app\",\n    is_production=os.environ.get(\"FLASK_ENV\") == \"production\",\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Inngest SDK in Node.js\nDESCRIPTION: Commands to install the Inngest SDK using various package managers.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/getting-started/nodejs-quick-start.mdx#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install inngest\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add inngest\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm add inngest\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun add inngest\n```\n\n----------------------------------------\n\nTITLE: AWS Lambda Integration\nDESCRIPTION: Setup for AWS Lambda function handler using Inngest, supporting both API Gateway V1 and V2.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/serving-inngest-functions.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from \"inngest/lambda\";\nimport { inngest } from \"./client\";\nimport fnA from \"./fnA\"; // Your own function\n\nexport const handler = serve({\n  client: inngest,\n  functions: [fnA],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Debounced Function Handler in Inngest\nDESCRIPTION: Example of creating a debounced function that handles webhook events. The function is configured to delay execution for 5 minutes after the last event is received, using the account_id as the debounce key.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/functions/debounce.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default inngest.createFunction(\n  {\n    id: \"handle-webhook\",\n    debounce: {\n      key: \"event.data.account_id\",\n      period: \"5m\",\n    },\n  },\n  { event: \"intercom/company.updated\" },\n  async ({ event, step }) => {\n    // This function will only be scheduled 5m after events have stopped being received with the same\n    // `event.data.account_id` field.\n    //\n    // `event` will be the last event in the series received.\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Starting Inngest Server\nDESCRIPTION: Commands to start the Inngest server using shell command or Docker.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/self-hosting.mdx#2025-04-10_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ninngest start\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ndocker run -p 8288:8288 inngest/inngest inngest start\n```\n\n----------------------------------------\n\nTITLE: Configuring Debounce in TypeScript with Inngest\nDESCRIPTION: Configures a function with debounce settings to handle webhook events. The function will wait 5 minutes after receiving the last event with the same account_id before executing, with a maximum timeout of 10 minutes.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/debounce.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default inngest.createFunction(\n  {\n    id: \"handle-webhook\",\n    debounce: {\n      key: \"event.data.account_id\",\n      period: \"5m\",\n      timeout: \"10m\",\n    },\n  },\n  { event: \"intercom/company.updated\" },\n  async ({ event, step }) => {\n    // This function will only be scheduled 5 minutes after events are no longer received with the same\n    // `event.data.account_id` field.\n    //\n    // `event` will be the last event in the series received.\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Comparing Inngest SDK v3 (new) and v2 (old) implementations\nDESCRIPTION: Side-by-side comparison of the same functionality implemented in Inngest SDK v3 and v2, showing changes to client initialization, function creation with IDs, step handling, and serve handler configuration.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/migration.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inngest, slugify } from \"inngest\";\nimport { serve } from \"inngest/next\";\n\nconst inngest = new Inngest({\n  id: \"My App\",\n});\n\nconst fn = inngest.createFunction(\n  // NOTE: You can manually slug IDs or import slugify to convert names to IDs automatically.\n  // { id: \"onboarding-example\", name: \"Onboarding example\" },\n  { id: slugify(\"Onboarding example\"), name: \"Onboarding example\" },\n  { event: \"app/user.created\" },\n  async ({ event, step }) => {\n    await step.run(\"send-welcome-email\", () =>\n      sendEmail(event.user.email, \"Welcome!\")\n    );\n\n    const profileCompleted = await step.waitForEvent(\n      \"wait-for-profile-completion\",\n      {\n        event: \"app/user.profile.completed\",\n        timeout: \"1d\",\n        match: \"data.userId\",\n      }\n    );\n\n    await step.sleep(\"wait-a-moment\", \"5m\");\n\n    if (!profileCompleted) {\n      await step.run(\"send-profile-reminder\", () =>\n        sendEmail(event.user.email, \"Complete your profile!\")\n      );\n    }\n  }\n);\n\nexport default serve({\n  client: inngest,\n  functions: [fn],\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inngest } from \"inngest\";\nimport { serve } from \"inngest/next\";\n\n// Clients only previously required a `name`, but we want to be\n// explicit that this is used to identify your application and manage\n// concepts such as deployments.\nconst inngest = new Inngest({ name: \"My App\" });\n\nconst fn = inngest.createFunction(\n  // Similarly, functions now require an `id` and `name` is optional.\n  { name: \"Onboarding Example\" },\n  { event: \"app/user.created\" },\n  async ({ event, step }) => {\n    // `step.run()` stays the same.\n    await step.run(\"send-welcome-email\", () =>\n      sendEmail(event.user.email, \"Welcome!\")\n    );\n\n    // The shape of `waitForEvent` has changed; all steps now require\n    // an ID.\n    const profileCompleted = await step.waitForEvent(\n      \"app/user.profile.completed\",\n      {\n        timeout: \"1d\",\n        match: \"data.userId\",\n      }\n    );\n\n    // All steps, even sleeps, require IDs.\n    await step.sleep(\"5m\");\n\n    if (!profileCompleted) {\n      await step.run(\"send-profile-reminder\", () =>\n        sendEmail(event.user.email, \"Complete your profile!\")\n      );\n    }\n  }\n);\n\n// Serving now uses a single object parameter for better readability.\nexport default serve(inngest, [fn]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Priority for Paid Users in AI Services with Inngest\nDESCRIPTION: This snippet shows how to use Inngest's function run priority to prioritize paid users in AI services. It assigns higher priority to enterprise users, ensuring their jobs are executed ahead of others in the queue.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/ai-in-production-managing-capacity-with-flow-control.mdx#2025-04-10_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport default inngest.createFunction(\n  {\n    id: \"unique-function-id\",\n    priority: {\n      run: \"event.data.account_type == 'enterprise' ? 120 : 0\",\n    },\n  },\n  { event: \"ai/summary.requested\" },\n  async ({ event, step }) => {\n    /** call LLM */\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Referencing Local Functions in TypeScript with Inngest\nDESCRIPTION: Demonstrates how to reference and invoke local functions without direct imports, useful for frameworks like Next.js with mixed edge and serverless handlers.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/invoking-functions-directly.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inngest, referenceFunction } from \"inngest\";\nimport { type computeSquare } from \"@/inngest/computeSquare\"; // Import only the type\n\nconst mainFunction = inngest.createFunction(\n  { id: \"main-function\" },\n  { event: \"main/event\" },\n  async ({ step }) => {\n    const square = await step.invoke(\"compute-square-value\", {\n      function: referenceFunction<typeof computeSquare>({\n        functionId: \"compute-square\",\n      }),\n      data: { number: 4 }, // input data is still typed\n    });\n\n    return `Square of 4 is ${square.result}.`; // square.result is typed as number\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Starting Inngest Dev Server with npx and Docker\nDESCRIPTION: Commands to start the Inngest Dev Server using npx (for npm) and Docker. The commands demonstrate how to specify the URL of the development 'serve' API endpoint.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/dev-server.mdx#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx inngest-cli@latest dev\n# You can specify the URL of your development `serve` API endpoint\nnpx inngest-cli@latest dev -u http://localhost:3000/api/inngest\n```\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -p 8288:8288 inngest/inngest \\\n  inngest dev -u http://host.docker.internal:3000/api/inngest\n```\n\n----------------------------------------\n\nTITLE: Implementing Actions Middleware in Inngest v3\nDESCRIPTION: Demonstrates how to use middleware to replace the removed 'fns' option in Inngest v3. It shows the creation of an Inngest client with middleware and a function that uses actions provided by the middleware.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/migration.mdx#2025-04-10_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as actions from \"./actions\";\nimport { createActionsMiddleware } from \"./middleware\";\n\nconst inngest = new Inngest({\n  id: \"my-app\",\n  name: \"My App\",\n  middleware: [createActionsMiddleware(actions)],\n});\n\ninngest.createFunction(\n  { name: \"Send welcome email\" },\n  { event: \"app/user.created\" },\n  async ({ event, action }) => {\n    const user = await action.getUserFromDb(event.data.userId);\n    await action.sendWelcomeEmail(user.email);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Edge Runtime with Inngest Streaming\nDESCRIPTION: Enables response streaming in Next.js Edge Functions when using Inngest. This configuration extends request timeout to 15 minutes when deployed on Vercel, allowing for longer-running operations.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/serving-inngest-functions.mdx#2025-04-10_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport const runtime = \"edge\";\n\nexport const { GET, POST, PUT } = serve({\n  client: inngest,\n  functions: [...fns],\n  streaming: \"allow\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring the await-inngest-send Rule\nDESCRIPTION: JSON configuration for the await-inngest-send rule which ensures proper awaiting of Inngest send operations.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/eslint.mdx#2025-04-10_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"@inngest/await-inngest-send\": \"warn\" // recommended\n```\n\n----------------------------------------\n\nTITLE: Cloudflare Workers Integration\nDESCRIPTION: Setup for Cloudflare Workers using Inngest serve handler with explicit path configuration.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/serving-inngest-functions.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from \"inngest/cloudflare\";\nimport { inngest } from \"./client\";\nimport fnA from \"./fnA\";\n\nexport default {\n  fetch: serve({\n    client: inngest,\n    functions: [fnA],\n    // We suggest explicitly defining the path to serve Inngest functions\n    servePath: \"/api/inngest\",\n  }),\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Inngest Function Handler Definition\nDESCRIPTION: Basic structure of an Inngest function handler showing the available parameters including event, events, step, runId, logger, and attempt.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/functions/create.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction handler({ event, events, step, runId, logger, attempt }) {/* ... */}\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Likes Notifications with Batch Keys in TypeScript\nDESCRIPTION: This code snippet demonstrates the improved implementation of post likes notifications using Inngest's new Batch Keys feature. It shows how to configure batching by post_id, simplifying the code and improving efficiency.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/announcing-batch-keys.mdx#2025-04-10_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport const sendPostLikesNotifications = inngest.createFunction(\n  {\n    id: \"send-post-likes-notification\",\n    batchEvents: {\n      maxSize: 100,\n      timeout: \"60s\",\n      key: \"event.data.post_id\",\n    },\n  },\n  { event: \"post.liked\" },\n  async ({ events }) => {\n    await notifyPostLikesCount(events[0].data.post_id, events.length);\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Using waitForEvent in a Function Pipeline (v3)\nDESCRIPTION: Demonstrates how to use waitForEvent in a step function to pause execution until a specific event is received or times out. Uses type-safe event matching.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/typescript.mdx#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inngest } from \"./client\";\n\nexport default inngest.createFunction(\n  { id: \"onboarding-drip-campaign\" },\n  { event: \"user/new.signup\" },\n  async ({ event, step }) => {\n    await step.run(\"send-welcome-email\", async () => {\n      // \"event\" will be fully typed provide typesafety within this function\n      return await email.send(\"welcome\", event.data.email);\n    });\n\n    // We wait up to 2 days for the user to set up their account\n    const accountSetupCompleted = await step.waitForEvent(\n      \"wait-for-setup-complete\",\n      {\n        event: \"user/account.setup.completed\",\n        timeout: \"2d\",\n        // ⬇️ This matches both events using the same property\n        // Since both events types are registered above, this is match is typesafe\n        match: \"data.user_id\",\n      }\n    );\n\n    if (!accountSetupCompleted) {\n      await step.run(\"send-setup-account-guide\", async () => {\n        return await email.send(\"account_setup_guide\", event.data.email);\n      });\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Using slugify for migration to preserve function IDs in TypeScript\nDESCRIPTION: Example of using the slugify function to generate consistent IDs from existing function names when migrating from v2 to v3. This ensures in-progress runs transition smoothly to the new version.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/migration.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { slugify } from \"inngest\";\n\nconst fn = inngest.createFunction(\n  { id: slugify(\"Onboarding Example\"), name: \"Onboarding Example\" },\n  { event: \"app/user.created\" },\n  async ({ event, step }) => {\n    // ...\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Delays with step.Sleep() in Go\nDESCRIPTION: Shows how to use step.Sleep() to pause execution for a specified duration. This method is useful for adding delays or waiting for a specific amount of time before proceeding with the function execution.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/inngest-steps.mdx#2025-04-10_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"github.com/inngest/inngestgo\"\n  \"github.com/inngest/inngestgo/step\"\n)\n\ninngestgo.CreateFunction(\n  &inngestgo.FunctionOpts{\n    ID: \"send-delayed-email\",\n  },\n  inngestgo.EventTrigger(\"app/user.signup\", nil),\n  // handler function\n  func(ctx context.Context, input inngestgo.Input) (any, error) {\n    step.Sleep(\"wait-a-couple-of-days\", 2 * time.Day)\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Using Cloudflare Workers AI in Inngest Function\nDESCRIPTION: This example shows how to use the Cloudflare Workers AI middleware within an Inngest function. It demonstrates accessing the 'ai' property to run a language model.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/middleware/examples.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inngest } from \"./client\";\n\nexport default inngest.createFunction(\n  { id: \"hello-world\" },\n  { event: \"demo/event.sent\" },\n  async ({ ai }) => {\n    // `ai` is typed and can be used directly or within a step\n    const response = await ai.run(\"@cf/meta/llama-2-7b-chat-int8\", {\n      prompt: \"What is the origin of the phrase Hello, World\",\n    });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Concurrency Limits in Go\nDESCRIPTION: Example of creating an Inngest function in Go with two concurrency limits: one at the account level with the \"openai\" key and another at the function level using the event's account_id field.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/concurrency.mdx#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ninngestgo.CreateFunction(\n  &inngestgo.FunctionOpts{\n    Name: \"unique-function-id\",\n    Concurrency: []inngest.Concurrency{\n      {\n        // Use an account-level concurrency limit for this function, using the\n        // \"openai\" key as a virtual queue. Any other function which\n        // runs using the same \"openai\" key counts towards this limit.\n        Scope: \"account\",\n        Key:   `\"openai\"`,\n        Limit: 10,\n      },\n      {\n        // Create another virtual concurrency queue for this function only. This\n        // limits all accounts to a single execution for this function, based off\n        // of the `event.data.account_id` field.\n        // NOTE - \"fn\" is the default scope, so we could omit this field.\n        Scope: \"fn\",\n        Key:   \"event.data.account_id\",\n        Limit: 1,\n      },\n    },\n  },\n  inngestgo.EventTrigger(\"ai/summary.requested\", nil),\n  func(ctx context.Context, input inngestgo.Input) (any, error) {\n    // Function implementation here\n    return nil, nil\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Inngest Serve Handler in Next.js App Router\nDESCRIPTION: Creates API route handlers (GET, POST, PUT) that serve Inngest functions using the App Router in Next.js. This implementation exports the HTTP methods required for the App Router architecture.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/deploy/vercel.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from \"inngest/next\";\nimport { client } from \"../../inngest/client\";\nimport { firstFunction, anotherFunction } from \"../../inngest/functions\";\n\nexport const { GET, POST, PUT } = serve({\n  client: client,\n  functions: [\n    firstFunction,\n    anotherFunction\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Manually Configuring Inngest ESLint Rules\nDESCRIPTION: JSON configuration showing how to manually configure specific rules from the Inngest plugin instead of using the recommended preset.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/eslint.mdx#2025-04-10_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@inngest\"],\n  \"rules\": {\n    \"@inngest/await-inngest-send\": \"warn\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remix Edge Runtime with Inngest Streaming (v2)\nDESCRIPTION: Enables response streaming in Remix Edge Functions when using Inngest v2. Extends the request timeout to 15 minutes on Vercel, using a different function signature than v3.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/serving-inngest-functions.mdx#2025-04-10_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nexport const config = {\n  runtime: \"edge\",\n};\n\nconst handler = serve(inngest, [...fns], {\n  streaming: \"allow\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Function to Fetch Event Runs from Inngest API in TypeScript\nDESCRIPTION: This snippet defines a reusable function that fetches runs for a given event ID using the Inngest REST API. It includes authentication with the Inngest signing key.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/examples/fetch-run-status-and-output.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getRuns(eventId) {\n  const response = await fetch(`https://api.inngest.com/v1/events/${eventId}/runs`, {\n    headers: {\n      Authorization: `Bearer ${process.env.INNGEST_SIGNING_KEY}`,\n    },\n  });\n  const json = await response.json();\n  return json.data;\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Side Subscription Implementation\nDESCRIPTION: Examples showing how to subscribe to realtime data streams from the client using basic subscription and React hooks\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/realtime.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { subscribe } from \"@inngest/realtime\";\n\nconst stream = await subscribe(token)\n\nfor await (const message of stream) {\n  console.log(message)\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Realtime } from \"@inngest/realtime\";\nimport { useInngestSubscription } from \"@inngest/realtime/hooks\";\n\nexport default function MyComponent({ token }: { token: Realtime.Subscribe.Token }) {\n  const { data } = useInngestSubscription({ token });\n\n  return (\n    <div>\n      {data.map((message, i) => (\n        <div key={i}>{message.data}</div>\n      ))}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Slack Notification on Function Failure in TypeScript\nDESCRIPTION: Illustrates how to implement an onFailure handler that sends a Slack notification when a function fails. It uses the Slack Web API to post a message to a specific channel.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/functions/handling-failures.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client } from \"@slack/web-api\";\nimport { inngest } from \"./client\";\n\nexport default inngest.createFunction(\n  {\n    id: \"sync-shopify-products\",\n    // Your handler should be an async function:\n    onFailure: async ({ error, event }) => {\n      const originalEvent = event.data.event;\n\n      // Post a message to the Engineering team's alerts channel in Slack:\n      const result = await client.chat.postMessage({\n        token: process.env.SLACK_TOKEN,\n        channel: \"C12345\",\n        blocks: [\n          {\n            type: \"section\",\n            text: {\n              type: \"mrkdwn\",\n              text: `Sync Shopify function failed for Store ${\n                originalEvent.storeId\n              }: ${error.toString()}`,\n            },\n          },\n        ],\n      });\n\n      return result;\n    },\n  },\n  { event: \"shop/product_sync.requested\" },\n  async ({ event, step, runId }) => {\n    // This is the main function handler's code\n    const products = await step.run(\"fetch-products\", async () => {\n      const storeId = event.data.storeId;\n      // The function might fail here or...\n    });\n    await step.run(\"save-products\", async () => {\n      // The function might fail here after the maximum number of retries\n    });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Pulling Inngest Docker Image\nDESCRIPTION: Command to pull the latest Inngest Docker image from Docker Hub.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/development-with-docker.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull inngest/inngest\n```\n\n----------------------------------------\n\nTITLE: Implementing Backend Workflow Actions in TypeScript\nDESCRIPTION: This snippet demonstrates how to create EngineAction objects by extending PublicEngineAction definitions with handler implementations. The handler function contains the business logic that executes when the action is triggered.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/workflow-kit/actions.mdx#2025-04-10_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type EngineAction } from \"@inngest/workflow-kit\";\n\nimport { actionsDefinition } from \"./actions-definition\";\n\nexport const actions: EngineAction[] = [\n  {\n    // Add a Table of Contents\n    ...actionsDefinition[0],\n    handler: async ({ event, step, workflowAction }) => {\n\t      // implementation...\n    }\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Actions Middleware for Inngest\nDESCRIPTION: This code defines the createActionsMiddleware function, which creates middleware to wrap a set of functions in step tooling. It allows common actions to be provided to specific functions or all functions created by a client.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/middleware/examples.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InngestMiddleware, StepOptionsOrId } from \"inngest\";\n\n/**\n * Create a middleware that wraps a set of functions in step tooling, allowing\n * them to be invoked directly instead of using `step.run()`.\n *\n * This is useful for providing a set of common actions to a particular function\n * or to all functions created by a client.\n */\nexport const createActionsMiddleware = <T extends Actions>(rawActions: T) => {\n  return new InngestMiddleware({\n    name: \"Inngest: Actions\",\n    init: () => {\n      return {\n        onFunctionRun: () => {\n          return {\n            transformInput: ({ ctx: { step } }) => {\n              const action: FilterActions<T> = Object.entries(\n                rawActions\n              ).reduce((acc, [key, value]) => {\n                if (typeof value !== \"function\") {\n                  return acc;\n                }\n\n                const action = (\n                  idOrOptions: StepOptionsOrId,\n                  ...args: unknown[]\n                ) => {\n                  return step.run(idOrOptions, () => value(...args));\n                };\n\n                return {\n                  ...acc,\n                  [key]: action,\n                };\n              }, {} as FilterActions<T>);\n\n              return {\n                ctx: { action },\n              };\n            },\n          };\n        },\n      };\n    },\n  });\n};\n\ntype Actions = Record<string, unknown>;\n\n/**\n * Filter out all keys from `T` where the associated value does not match type\n * `U`.\n */\ntype KeysNotOfType<T, U> = {\n  [P in keyof T]: T[P] extends U ? never : P;\n}[keyof T];\n\n/**\n * Given a set of generic objects, extract any top-level functions and\n * appropriately shim their types.\n *\n * We use this type to allow users to spread a set of functions into the\n * middleware without having to worry about non-function properties.\n */\ntype FilterActions<Fns extends Record<string, any>> = {\n  [K in keyof Omit<Fns, KeysNotOfType<Fns, (...args: any[]) => any>>]: (\n    idOrOptions: StepOptionsOrId,\n    ...args: Parameters<Fns[K]>\n  ) => Promise<Awaited<ReturnType<Fns[K]>>>;\n};\n```\n\n----------------------------------------\n\nTITLE: Invoking Other Functions with step.Invoke() in Go\nDESCRIPTION: Demonstrates how to use step.Invoke() to asynchronously call another Inngest function and handle the result. This method allows for reusing functionality and composing more complex workflows or map-reduce type jobs.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/inngest-steps.mdx#2025-04-10_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"github.com/inngest/inngestgo\"\n  \"github.com/inngest/inngestgo/errors\"\n  \"github.com/inngest/inngestgo/step\"\n)\n\ninngestgo.CreateFunction(\n  &inngestgo.FunctionOpts{\n    ID: \"send-delayed-email\",\n  },\n  inngestgo.EventTrigger(\"app/user.signup\", nil),\n  // handler function\n  func(ctx context.Context, input inngestgo.Input) (any, error) {\n    // Invoke another function and wait for its result\n    result, err := step.Invoke[any](\n      ctx,\n      \"invoke-email-function\",\n      step.InvokeOpts{\n        FunctionID: \"send-welcome-email\",\n        // Pass data to the invoked function\n        Data: map[string]any{\n          \"user_id\": input.Event.Data[\"user_id\"],\n          \"email\":   input.Event.Data[\"email\"],\n        },\n        // Optional: Set a concurrency limit\n        Concurrency: step.ConcurrencyOpts{\n          Limit: 5,\n          Key:   \"user-{{event.data.user_id}}\",\n        },\n      },\n    )\n    if err != nil {\n      return nil, err\n    }\n    return result, nil\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Invoking Other Functions with step.Invoke() in Go\nDESCRIPTION: Demonstrates how to use step.Invoke() to asynchronously call another Inngest function and handle the result. This method allows for reusing functionality and composing more complex workflows or map-reduce type jobs.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/inngest-steps.mdx#2025-04-10_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"github.com/inngest/inngestgo\"\n  \"github.com/inngest/inngestgo/errors\"\n  \"github.com/inngest/inngestgo/step\"\n)\n\ninngestgo.CreateFunction(\n  &inngestgo.FunctionOpts{\n    ID: \"send-delayed-email\",\n  },\n  inngestgo.EventTrigger(\"app/user.signup\", nil),\n  // handler function\n  func(ctx context.Context, input inngestgo.Input) (any, error) {\n    // Invoke another function and wait for its result\n    result, err := step.Invoke[any](\n      ctx,\n      \"invoke-email-function\",\n      step.InvokeOpts{\n        FunctionID: \"send-welcome-email\",\n        // Pass data to the invoked function\n        Data: map[string]any{\n          \"user_id\": input.Event.Data[\"user_id\"],\n          \"email\":   input.Event.Data[\"email\"],\n        },\n        // Optional: Set a concurrency limit\n        Concurrency: step.ConcurrencyOpts{\n          Limit: 5,\n          Key:   \"user-{{event.data.user_id}}\",\n        },\n      },\n    )\n    if err != nil {\n      return nil, err\n    }\n    return result, nil\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Sending User Signup Event in Python (FastAPI)\nDESCRIPTION: This Python code using FastAPI sets up a '/signup' route that handles user signup. It creates a user, establishes a session, and sends an event to Inngest with the user's data.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/fan-out-jobs.mdx#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI, Request, Response\nfrom fastapi.responses import RedirectResponse\nfrom src.inngest.client import inngest_client\n\napp = FastAPI()\n\n@app.post(\"/signup\")\nasync def signup(request: Request):\n    # NOTE - this code is simplified for the example:\n    data = await request.json()\n    email = data['email']\n    password = data['password']\n    \n    user = await create_user(email=email, password=password)\n    await create_session(user.id)\n\n    # Send an event to Inngest\n    await inngest_client.send(\n        name=\"app/user.signup\",\n        data={\n            \"user\": {\n                \"id\": user.id,\n                \"email\": user.email\n            }\n        }\n    )\n\n    return RedirectResponse(url=\"https://myapp.com/dashboard\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Watched Tables in Inngest Pulse Router\nDESCRIPTION: Code snippet showing how to configure the list of Prisma models to watch for changes in the Inngest Pulse Router.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/events-triggers/prisma-pulse.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Here configure each prisma model to stream changes from\nconst PRISMA_MODELS = ['notification', 'user'];\n```\n\n----------------------------------------\n\nTITLE: Account Synchronization Function Implementation with Inngest in JSX\nDESCRIPTION: Implements a reusable account synchronization function that processes accounts data, identifies new and updated accounts, and syncs them to the destination while logging results to the database.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/synchronizing-financial-data-from-plaid-and-stripe.mdx#2025-04-10_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst table = 'Accounts';\n\nconst syncAccounts = inngest.createFunction(\n  {\n    ...\n  },\n  async ({ event, step, utils }) => { // Utils comes from middleware\n    const { destinationId, accounts } = event.data;\n    const destination = await utils.fetchDestination(\n\t  { id: 'fetch-destination' }, \n\t  destinationId\n\t);\n\t\t\n\tconst { records, destinationError } = await utils.loadRecords(\n\t  { id: 'load-account-records' }, {\n\t    table,\n\t    destinationId,\n\t    destination\n\t\t}\n\t);\n\t\n\tif { destinationError } {\n\t  return { hasError: true }\n\t}\n\t\n\tconst currentAccounts = records.map(record => record.properties.id);\n\tconst newAccounts = accounts.filter(account => !currentAccounts.includes(account.id));\n\tconst updatedAccounts = accounts.filter(account => currentAccounts.includes(account.id));\n\n\tconst createResults = await step.run(\n\t  { id: 'sync-new-accounts-to-destination' }, \n\t  async () => {\n\t    ...\n\t  }\n\t);\n\t\t\n\tconst updateResults = await step.run(\n\t  { id: 'sync-updated-accounts-to-destination' },\n\t  async () => {\n\t    ...\n\t  }\n\t);\n\t\t\n\tawait utils.logResultsToDB({ id: 'log-results-to-db' }, { createResults, updateResults });\n\t\t\n\treturn { hasError: false }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Express.js Server with Inngest Self-Registration\nDESCRIPTION: Express.js server setup that includes automatic self-registration with Inngest on startup when deployed to Render. Includes error handling and registration status logging.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/deploy/render.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.listen(PORT, async () => {\n  console.log(`✅ Server started on localhost:${PORT}\n➡️ Inngest running at http://localhost:${PORT}/api/inngest`);\n\n  // Attempt to self-register the app after deploy\n  if (process.env.RENDER_EXTERNAL_URL) {\n    console.log(\n      `Attempting self-register. Functions: `,\n      functions.map((f) => f.name).join(', ')\n    );\n    const inngestURL = new URL('/api/inngest', process.env.RENDER_EXTERNAL_URL);\n    const result = await fetch(inngestURL, {\n      method: 'PUT',\n    });\n    await sleep(2000);\n    try {\n      const json = await result.json();\n      console.log(\n        `Register attempted:`,\n        inngestURL.toString(),\n        result.status,\n        json\n      );\n    } catch (err) {\n      console.log(\n        `Register failed:`,\n        inngestURL.toString(),\n        result.status,\n        result.body\n      );\n    }\n  }\n});\n\nfunction sleep(t: number): Promise<void> {\n  return new Promise((res) => {\n    return setTimeout(res, t);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using useInngestSubscription Hook in React Component\nDESCRIPTION: This snippet demonstrates how to implement the useInngestSubscription hook in a React component. It shows how to subscribe to channels using a user-scoped token and render the received data.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/realtime/react-hooks.mdx#2025-04-10_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Realtime } from \"@inngest/realtime\";\nimport { useInngestSubscription } from \"@inngest/realtime/hooks\";\n\nexport default function MyComponent({ token }: { token: Realtime.Subscribe.Token }) {\n  // Use a user scoped token to subscribe to channels:\n  const { data } = useInngestSubscription({ token });\n\n  return (\n    <div>\n      {data.map((message, i) => (\n        <div key={i}>{message.data}</div>\n      ))}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Corrected Function Example in TypeScript\nDESCRIPTION: The fixed version of the TypeScript function, properly implementing the initialization code within a step to ensure it only runs once.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/working-with-loops.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  { id: \"simple-function\" },\n  { event: \"test/simple.function\" },\n  async ({ step }) => {\n    await step.run(\"hello\", () => { console.log(\"hello\") });\n\n    await step.run(\"a\", async () => { console.log(\"a\") });\n    await step.run(\"b\", async () => { console.log(\"b\") });\n    await step.run(\"c\", async () => { console.log(\"c\") });\n  }\n);\n\n// hello\n// a\n// b\n// c\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript Helper Types with Inngest\nDESCRIPTION: Demonstrates various TypeScript helper types provided by the Inngest SDK, including GetEvents, GetFunctionInput, GetStepTools, and namespace types for typing functions.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/typescript.mdx#2025-04-10_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetEvents } from \"inngest\";\nimport { inngest } from \"@/inngest\";\n\ntype Events = GetEvents<typeof inngest>;\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntype Events = GetEvents<typeof inngest, true>;\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetFunctionInput } from \"inngest\";\nimport { inngest } from \"@/inngest\";\n\ntype InputArg = GetFunctionInput<typeof inngest>;\ntype InputArgWithTrigger = GetFunctionInput<typeof inngest, \"app/user.created\">;\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type GetStepTools } from \"inngest\";\nimport { inngest } from \"@/inngest\";\n\ntype StepTools = GetStepTools<typeof inngest>;\ntype StepToolsWithTrigger = GetStepTools<typeof inngest, \"app/user.created\">;\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type InngestFunction } from \"inngest\";\n\nconst functionsToServe: InngestFunction.Any[] = [];\n\n```\n\n----------------------------------------\n\nTITLE: Example Function with cancelOn Configuration\nDESCRIPTION: This snippet shows a complete example of an Inngest function that uses cancelOn. It demonstrates how to specify the cancellation event and the condition for matching the userId between the trigger and cancellation events.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/typescript/functions/cancel-on.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  {\n    id: \"sync-contacts\",\n    cancelOn: [\n      {\n        event: \"app/user.deleted\",\n        // ensure the async (future) event's userId matches the trigger userId\n        if: \"async.data.userId == event.data.userId\",\n      },\n    ],\n  },\n  { event: \"app/user.created\" },\n  // ...\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Logging Middleware for Inngest\nDESCRIPTION: This example demonstrates how to create a custom logging middleware for Inngest. It shows how to customize logging behavior, create child loggers, and handle errors.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/middleware/examples.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nnew InngestMiddleware({\n  name: \"Inngest: Logger\",\n  init({ client }) {\n    return {\n      onFunctionRun(arg) {\n        const { ctx } = arg;\n        const metadata = {\n          runID: ctx.runId,\n          eventName: ctx.event.name,\n          functionName: arg.fn.name,\n        };\n\n        let providedLogger: Logger = client[\"logger\"];\n        // create a child logger if the provided logger has child logger implementation\n        try {\n          if (\"child\" in providedLogger) {\n            type ChildLoggerFn = (\n              metadata: Record<string, unknown>\n            ) => Logger;\n            providedLogger = (providedLogger.child as ChildLoggerFn)(metadata)\n          }\n        } catch (err) {\n          console.error('failed to create \"childLogger\" with error: ', err);\n          // no-op\n        }\n        const logger = new ProxyLogger(providedLogger);\n\n        return {\n          transformInput() {\n            return {\n              ctx: {\n                /**\n                 * The passed in logger from the user.\n                 * Defaults to a console logger if not provided.\n                 */\n                logger,\n              },\n            };\n          },\n          beforeExecution() {\n            logger.enable();\n          },\n          transformOutput({ result: { error } }) {\n            if (error) {\n              logger.error(error);\n            }\n          },\n          async beforeResponse() {\n            await logger.flush();\n          },\n        };\n      },\n    };\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating Inngest with Redwood Framework (v2)\nDESCRIPTION: Implements Inngest in a Redwood v2 application by creating a handler that serves Inngest functions. Uses a different function signature compared to the v3 implementation.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/serving-inngest-functions.mdx#2025-04-10_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from \"inngest/redwood\";\nimport { inngest } from \"src/inngest/client\";\nimport fnA from \"src/inngest/fnA\"; // Your own function\n\nexport const handler = serve(\n  inngest,\n  [fnA],\n  { servePath: \"/api/inngest\" }\n);\n```\n\n----------------------------------------\n\nTITLE: Testing Event Waiting\nDESCRIPTION: Example of testing waitForEvent functionality with different response scenarios.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/testing/index.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst myFunction = inngest.createFunction(\n  { id: \"my-function\" },\n  { event: \"time_off.requested\" },\n  async ({ event, step }) => {\n    const evt = await step.waitForEvent(\"wait-for-approval\", {\n      event: \"manager.approved\",\n      timeout: \"1d\",\n    });\n    return { message: evt?.data.message };\n  }\n)\n\nt.execute({\n  steps: [\n    {\n      id: \"wait-for-approval\",\n      handler() {\n        return {\n          name: 'manager.approved',\n          data: {\n            message: 'This looks great!'\n          }\n        };\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Inngest Pulse Router with NPX\nDESCRIPTION: Command to generate an Inngest Pulse Router in your application using the npx try-prisma tool.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/events-triggers/prisma-pulse.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx try-prisma -t pulse/inngest-router\n```\n\n----------------------------------------\n\nTITLE: Updating Variables in Inngest Steps (TypeScript)\nDESCRIPTION: Demonstrates the correct way to update variables within Inngest steps by returning values from step.run(). This ensures that variables are properly updated across multiple function invocations.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/multi-step-functions.mdx#2025-04-10_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// This is the right way to set variables within step.run :)\nconst userId = await step.run(\"get-user\", () => getRandomUserId());\n\nconsole.log(userId); // 123\n```\n\n----------------------------------------\n\nTITLE: Creating Middleware for Workers to Access Environment Variables\nDESCRIPTION: Middleware that extracts the env argument from Cloudflare Workers fetch event and makes it available in Inngest function handlers.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/examples/middleware/cloudflare-workers-environment-variables.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inngest, InngestMiddleware } from 'inngest';\n\nconst bindings = new InngestMiddleware({\n  name: 'Cloudflare Workers bindings',\n  init({ client, fn }) {\n    return {\n      onFunctionRun({ ctx, fn, steps, reqArgs }) {\n        return {\n          transformInput({ ctx, fn, steps }) {\n            // reqArgs is the array of arguments passed to the Worker's fetch event handler\n            // ex. fetch(request, env, ctx)\n            // We cast the argument to the global Env var that Wrangler generates:\n            const env = reqArgs[1] as Env;\n            return {\n              ctx: {\n                // Return the env object to the function handler's input args\n                env,\n              },\n            };\n          },\n        };\n      },\n    };\n  },\n});\n\n// Include the middleware when creating the Inngest client\nexport const inngest = new Inngest({\n  id: 'my-workers-app',\n  middleware: [bindings],\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Framework Handler Update in TypeScript\nDESCRIPTION: Shows the required changes for custom framework handlers in v1, including the addition of stepId parameter.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/migration.mdx#2025-04-10_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nrun: async () => {\n  if (req.method === \"POST\") {\n    return {\n      fnId: url.searchParams.get(queryKeys.FnId) as string,\n      // 🆕 stepId is now required\n      stepId: url.searchParams.get(queryKeys.StepId) as string,\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Concurrency Limit in Inngest\nDESCRIPTION: Sets a basic concurrency limit on a function to control the maximum number of steps that can execute simultaneously. When the limit is reached, new steps will be queued for later processing.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/concurrency.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  {\n    id: \"generate-ai-summary\",\n    concurrency: 10,\n  },\n  { event: \"ai/summary.requested\" },\n  async ({ event, step }) => {\n    // Your function handler here\n  }\n);\n```\n\nLANGUAGE: go\nCODE:\n```\ninngest.CreateFunction(\n  &inngestgo.FunctionOpts{\n    Name: \"generate-ai-summary\",\n    Concurrency: []inngest.Concurrency{\n      {\n        Limit: 10,\n      }\n    },\n  },\n  inngestgo.EventTrigger(\"ai/summary.requested\", nil),\n  func(ctx context.Context, input inngestgo.Input) (any, error) {\n    // Your function handler here\n    return nil, nil\n  },\n)\n```\n\nLANGUAGE: python\nCODE:\n```\n@inngest.create_function(\n    fn_id=\"generate-ai-summary\",\n    concurrency=[\n      inngest.Concurrency(\n          limit=10,\n      )\n    ]\n)\nasync def first_function(event, step):\n    # Your function handler here\n    pass\n```\n\n----------------------------------------\n\nTITLE: Running Inngest Dev Server with Different Package Managers\nDESCRIPTION: Commands to start the Inngest Dev Server using different package managers. The server provides a local development environment for testing Inngest functions.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/getting-started/nextjs-quick-start.mdx#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx inngest-cli@latest dev\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn dlx inngest-cli@latest dev\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm dlx inngest-cli@latest dev\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun add global inngest-cli@latest\ninngest-cli dev\n```\n\n----------------------------------------\n\nTITLE: Creating and Running Durable Functions with Inngest in Python\nDESCRIPTION: This snippet demonstrates how to create an Inngest function and use step.run to execute durable functions. It shows various ways to pass arguments and use scoped variables within the function.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/steps/run.mdx#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@inngest_client.create_function(\n    fn_id=\"my_function\",\n    trigger=inngest.TriggerEvent(event=\"app/my_function\"),\n)\nasync def fn(\n    ctx: inngest.Context,\n    step: inngest.Step,\n) -> None:\n    # Pass a function to step.run\n    await step.run(\"my_fn\", my_fn)\n\n    # Args are passed after the function\n    await step.run(\"my_fn_with_args\", my_fn_with_args, 1, \"a\")\n\n    # Kwargs require functools.partial\n    await step.run(\n        \"my_fn_with_args_and_kwargs\",\n        functools.partial(my_fn_with_args_and_kwargs, 1, b=\"a\"),\n    )\n\n    # Defining functions like this gives you easy access to scoped variables\n    def use_scoped_variable() -> None:\n        print(ctx.event.data[\"user_id\"])\n\n    await step.run(\"use_scoped_variable\", use_scoped_variable)\n\nasync def my_fn() -> None:\n    pass\n\nasync def my_fn_with_args(a: int, b: str) -> None:\n    pass\n\nasync def my_fn_with_args_and_kwargs(a: int, *, b: str) -> None:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Sending Function with Resend in TypeScript\nDESCRIPTION: A utility function that uses the Resend API to send emails. It accepts recipient address, subject, and HTML body as parameters and configures the email with environment variables for API key, sender address, and optional reply-to address.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/lifecycle-emails-with-resend.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sendEmail({\n  to,\n  subject,\n  body,\n}: {\n  to: string;\n  subject: string;\n  body: string;\n}) {\n  const resend = new Resend(env.RESEND_API_KEY);\n  return resend.emails.send({\n    from: env.FROM_EMAIL,\n    ...(env.REPLY_TO_EMAIL && { replyTo: env.REPLY_TO_EMAIL }), // optional (defaults to from\n    to,\n    subject,\n    html: body,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering an Inngest Function with Event Data in TypeScript\nDESCRIPTION: This snippet demonstrates how to trigger the CSV processing function by sending an event using inngest.send(). It includes the event name and payload data, and returns an array of Event IDs.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/examples/fetch-run-status-and-output.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { ids } = await inngest.send({\n  name: \"imports/csv.uploaded\",\n  data: {\n    file: \"http://s3.amazonaws.com/acme-uploads/user_0xp3wqz7vumcvajt/JVLO6YWS42IXEIGO.csv\",\n    userId: \"user_0xp3wqz7vumcvajt\",\n  },\n});\n// ids = [\"01HWAVEB858VPPX47Z65GR6P6R\"]\n```\n\n----------------------------------------\n\nTITLE: Recording Metrics with Go Tally in Timescale\nDESCRIPTION: Example of using the tally metrics library to record function execution metrics with account, environment, and function ID tags. This code increments a counter that tracks the total number of function runs started.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/2023-11-29-metrics-with-timescale.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmetrics.Tagged(\n\tmetrics.WithAccountID(id.AccountID.String()),\n\tmetrics.WithEnvironmentID(id.EnvironmentID.String()),\n\tmetrics.WithFunctionID(id.FunctionID.String()),\n).Counter(timescale.CounterFunctionRunStartedTotal).Inc(1)\n```\n\n----------------------------------------\n\nTITLE: Creating Mux Asset in Inngest Workflow Step\nDESCRIPTION: This Inngest step sends the original media URL to Mux for video processing. It retrieves video resource data from Sanity and calls a createMuxAsset function to initiate the conversion process.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/nextjs-trpc-inngest.md#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst newMuxAsset = await step.run(\"Create a Mux Asset\", async () => {\n  const videoResource = await getVideoResource(event.data.videoResourceId);\n  const { originalMediaUrl, muxAsset, duration } = videoResource;\n  return await createMuxAsset({\n    originalMediaUrl,\n    muxAsset,\n    duration,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing netlify-plugin-inngest via npm or yarn\nDESCRIPTION: Command to install the netlify-plugin-inngest as a dev dependency using either npm or yarn package managers.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/deploy/netlify.mdx#2025-04-10_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-dev netlify-plugin-inngest\n# or\nyarn add --dev netlify-plugin-inngest\n```\n\n----------------------------------------\n\nTITLE: Implementing Cart Abandonment Reminder Flow with Inngest\nDESCRIPTION: This TypeScript snippet demonstrates how to create a function that sends a reminder email when a user adds a product to their cart but doesn't complete the purchase within 24 hours. It uses Inngest's waitForEvent to pause execution until either a purchase event is received or the timeout period elapses.\nSOURCE: https://github.com/inngest/website/blob/main/pages/patterns/_patterns/event-coordination-for-lost-customers.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inngest } from \"./client\";\n\n/*\nThis is the data received whenever the `cart/product.added` event is received:\n\ntype CartProductAdded = {\n  name: \"cart/product.added\"\n  data: {\n    cart_id: string;\n    product_id: string;\n    product_name: string;\n  };\n  user: {\n    email: string;\n  };\n};\n*/\n\nexport default inngest.createFunction(\n  {\n    id: \"product-added-to-cart\",\n    // Automatically cancel this instance of the function whenever a user adds another\n    // product to their cart.  Another instance of this function will run and schedule\n    // another wait from 24 hours after the new product was added to their cart.\n    cancelOn: {\n      event: \"cart/product.added\",\n      timeout: \"24h\",\n      match: \"data.cart_id\",\n    },\n  },\n  { event: \"cart/product.added\" },\n  ({ event, step }) => {\n    // This function runs as soon as a product is added to the cart.\n    // We immediately pause and wait up to 24 hours for the `cart/purchased`\n    // event from the same cart_id.\n    const purchased = await step.waitForEvent(\"wait-for-purchase\", {\n      event: \"cart/purchased\",\n      timeout: \"24h\",\n      match: \"data.cart_id\", // The \"data.cart_id\" field in both events must match.\n    });\n\n    // waitForEvent will return the `cart/purchased` event immediately when the\n    // matching event is received, or after the timeout with `null` if the event\n    // was not received (ie. the user didn't purchase).\n    if (purchased !== null) {\n      // The user has purchased their products;  we can end.\n      return;\n    }\n\n    await step.run(\"send-reminder\", () => {\n      sendCartReminderEmail({\n        email: event.user.email,\n        cart: event.data.cart_id,\n      });\n    });\n\n    // Idea: We could also wait another 6 days to send a 1 week cart reminder\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry Middleware with Inngest in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up the sentryMiddleware in TypeScript by installing the '@inngest/middleware-sentry' package, importing the required modules, initializing Sentry, and configuring the Inngest client with the middleware.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/middleware/sentry-middleware.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Sentry from \"@sentry/node\";\nimport { Inngest } from \"inngest\";\nimport { sentryMiddleware } from \"@inngest/middleware-sentry\";\n\n// Initialize Sentry as usual wherever is appropriate\nSentry.init(...);\n\nconst inngest = new Inngest({\n  id: \"my-app\",\n  middleware: [sentryMiddleware()],\n});\n```\n\n----------------------------------------\n\nTITLE: Rebinding Fetch Function to Resolve Illegal Invocation Error in Inngest\nDESCRIPTION: Shows how to properly provide a custom fetch function to the Inngest client by rebinding it to maintain the proper context, which resolves the 'Illegal invocation' error.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/faq.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nnew Inngest({\n  fetch: fetch.bind(globalThis),\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Events for Multiple Items in TypeScript\nDESCRIPTION: Demonstrates how to transform an array of items into events and send them all at once. This pattern is useful for processing bulk operations like imports or updates.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/events/index.mdx#2025-04-10_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// This function call might return 10s or 100s of items, so we can use map\n// to transform the items into event payloads then pass that array to send:\nconst importedItems = await api.fetchAllItems();\nconst events = importedItems.map((item) => ({\n  name: \"storefront/item.imported\",\n  data: {\n    ...item,\n  }\n}));\nawait inngest.send(events);\n```\n\n----------------------------------------\n\nTITLE: Running Inngest Dev Server\nDESCRIPTION: Commands to start the Inngest Dev Server using different package managers, assuming the server runs on port 3000.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/getting-started/nodejs-quick-start.mdx#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx inngest-cli@latest dev -u http://localhost:3000/api/inngest\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn dlx inngest-cli@latest dev -u http://localhost:3000/api/inngest\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm dlx inngest-cli@latest dev -u http://localhost:3000/api/inngest\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun add global inngest-cli@latest\ninngest-cli dev -u http://localhost:3000/api/inngest\n```\n\n----------------------------------------\n\nTITLE: Using Event IDs in TypeScript\nDESCRIPTION: Shows how to capture and use event IDs returned from sending events. These IDs can be used to look up events in the dashboard or via the REST API.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/events/index.mdx#2025-04-10_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst { ids } = await inngest.send([\n  {\n    name: \"app/invoice.created\",\n    data: { invoiceId: \"645e9e024befa68763f5b500\" }\n  },\n  {\n    name: \"app/invoice.created\",\n    data: { invoiceId: \"645e9e08f29fb563c972b1f7\" }\n  },\n]);\n/**\n * ids = [\n *   \"01HQ8PTAESBZPBDS8JTRZZYY3S\",\n *   \"01HQ8PTFYYKDH1CP3C6PSTBZN5\"\n * ]\n */\n```\n\n----------------------------------------\n\nTITLE: Configuring Winston with Inngest\nDESCRIPTION: Shows how to set up Winston as a custom logger for Inngest functions. Includes configuration for multi-transport logging to both console and Datadog in a production environment.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/logging.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inngest } from \"inngest\";\nimport winston from \"winston\";\n\n/// Assuming we're deploying to Vercel.\n/// Other providers likely have their own pre-defined environment variables you can use.\nconst env = process.env.VERCEL_ENV || \"development\";\nconst ddTransportOps = {\n  host: \"http-intake.logs.datadoghq.com\",\n  path: `/api/v2/logs?dd-api-key=${process.env.DD_API_KEY}&ddsource=nextjs&service=inngest&ddtags=env:${env}`,\n  ssl: true,\n};\n\nconst logger = winston.createLogger({\n  level: \"info\",\n  exitOnError: false,\n  format: winston.format.json(),\n  transports: [\n    new winston.transports.Console(),\n    new winston.transports.Http(ddTransportOps),\n  ],\n});\n\n// Pass `logger` to the Inngest client, and this winston logger will be accessible within functions\nexport const inngest = new Inngest({\n  id: \"my-awesome-app\",\n  logger: logger,\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Handling AI Image Generation Errors in TypeScript with Inngest\nDESCRIPTION: This snippet demonstrates how to use try/catch blocks with Inngest's step.run() in TypeScript to handle errors when generating images with different AI models. It attempts to use DALL-E first, and if it fails, it falls back to Midjourney.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/improved-error-handling.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst transcoding = inngest.createFunction(\n  { id: \"generate-result\" },\n  { event: \"prompt.created\" },\n  async ({ event, step }) => {\n    let imageURL: string | null = null\n    let via: \"dall-e\" | \"midjourney\"\n\n    // try one AI model, if it fails, try another\n    try {\n      // This step.run will get retried automatically\n      // If all retries fail, it will throw an error which can be caught\n      imageURL = await step.run(\"generate-image-dall-e\", () => {\n        // open api call to generate image...\n      })\n      via = \"dall-e\"\n    } catch (err) {\n      imageURL = await step.run(\"generate-image-midjourney\", () => {\n        // midjourney call to generate image...\n      })\n      via = \"midjourney\"\n    }\n\n    await step.run(\"notify-user\", () => {\n      return pusher.trigger(event.data.channelID, \"image-result\", {\n        imageURL,\n        via,\n      })\n    })\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Inngest API Endpoint in Shell\nDESCRIPTION: Shows how to format the Inngest Event API URL with an event key for Retool resource configuration.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/trigger-your-code-from-retool.mdx#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhttps://inn.gs/e/<INNGEST-EVENT-KEY>\n```\n\n----------------------------------------\n\nTITLE: Inngest Configuration File Examples\nDESCRIPTION: YAML and JSON configuration file examples for Inngest server setup.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/self-hosting.mdx#2025-04-10_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nurls:\n  - http://localhost:3000/api/inngest\npoll-interval: 60\nredis-uri: redis://localhost:6379\nsqlite-dir: /app/data\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"urls\": [\n    \"http://localhost:3000/api/inngest\"\n  ],\n  \"poll-interval\": 60,\n  \"redis-uri\": \"redis://localhost:6379\",\n  \"sqlite-dir\": \"/app/data\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Bounced Emails with Inngest\nDESCRIPTION: This Inngest function is triggered when an email bounces. It retrieves the user by their email address from the database and marks their email status as invalid.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/resend-webhook-events.mdx#2025-04-10_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport db from \"./database\";\n\nconst invalidateUserEmail = inngest.createFunction(\n  { id: 'invalidate-user-email' },\n  { event: 'resend/email.bounced' },\n  async ({ event }) => {\n    const email = event.data.to[0];\n    const user = await db.users.byEmail(email);\n    if (user) {\n      user.email_status = \"invalid\";\n      await db.users.update(user);\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing onSendEvent Middleware Lifecycle in TypeScript\nDESCRIPTION: Example implementation of an Inngest middleware with the onSendEvent lifecycle. Shows how to intercept and transform events before they're sent to Inngest and modify the output after sending.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/middleware/lifecycle.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst myMiddleware = new InngestMiddleware({\n  name: \"My Middleware\",\n  init: ({ client, fn }) => {\n    return {\n      onSendEvent() {\n        return {\n          transformInput({ payloads }) {\n            // ...\n          },\n          transformOutput() {\n            // ...\n          },\n        };\n      },\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata Variables in JavaScript for Fey Case Study\nDESCRIPTION: JavaScript export statements defining metadata variables for a case study webpage about Fey's integration with Inngest. These variables define content elements such as title, company information, quotes, and image paths.\nSOURCE: https://github.com/inngest/website/blob/main/pages/customers/fey.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const title = '50x faster and 50x cheaper. How Fey leverages Inngest in data-intensive processes.'\nexport const companyName = 'Fey'\nexport const logo = '/assets/customers/fey/fey-icon.svg'\nexport const logoScale = 2;\nexport const quote = {\n  text: `As soon as companies release their data, we want to have it in Fey. With our old tool it would take up to a day for them to show up. And with Inngest it's almost instant.`,\n  attribution: {\n    name: 'Dennis Brotzky',\n    title: 'CTO, Co-founder',\n  },\n  avatar: '/assets/customers/fey/dennis-brotzky.jpg',\n}\nexport const companyURL = 'https://www.feyapp.com'\nexport const companyDescription = `Fey is a personal finance app that that's making financial research more accessible and effortless for anyone.`\nexport const ogImage = '/assets/customers/case-study/og-image-fey.png'\n```\n\n----------------------------------------\n\nTITLE: Configuring Start Timeout for Inngest Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to set a 'start' timeout of 10 seconds for an Inngest function in TypeScript. The function will be cancelled if it takes longer than 10 seconds to start.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/cancellation/cancel-on-timeouts.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst scheduleReminder = inngest.createFunction(\n  {\n    id: \"schedule-reminder\",\n    timeouts: {\n      // If the run takes longer than 10s to start, cancel the run.\n      start: \"10s\",\n    },\n  }\n  { event: \"tasks/reminder.created\" },\n  async ({ event, step }) => {\n    await step.run('send-reminder-push', async () => {\n      await pushNotificationService.push(event.data.reminder)\n    })\n  }\n  // ...\n);\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple AI Models with Different Rate Limits\nDESCRIPTION: Implementation showing how to manage different AI models with varying rate limits using separate throttled functions.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/ai-in-production-managing-capacity-with-flow-control.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst highLimitFunction = inngest.createFunction(\n  {\n    id: \"pre-process-text-with-llama\",\n    throttle: {\n      limit: 100,\n      period: '1m',\n    },\n  },\n  { event: \"ai/preprocess.text\" },\n  async ({ event, step }) => {\n    /* call Llama */\n  }\n)\n\nconst lowLimitFunction = inngest.createFunction(\n  {\n    id: \"summarize-with-openai\",\n    throttle: {\n      limit: 10,\n      period: '1m',\n    },\n  },\n  { event: \"ai/create.summary\" },\n  async ({ event, step }) => {\n    /* call OpenAI */\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Video Thumbnails with FFmpeg in JavaScript\nDESCRIPTION: This final step generates a thumbnail image for the rendered video using FFmpeg. It extracts a single representative frame, uploads it to S3 storage, updates the video record with the thumbnail URL, and cleans up temporary files afterward.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/banger-video-rendering-pipeline.mdx#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nawait step.run('generate-thumbnail-and-upload-to-s3', async () => {\n  const thumbnailFilePath = `${os.tmpdir()}/${videoId}-thumbnail.jpg`\n\n  await execa(`ffmpeg`, [\n    '-i',\n    videoFileURL, // ffmpeg will grab input from URL\n    '-vf',\n    'thumbnail=300',\n    '-frames:v', // only one frame\n    '1',\n    thumbnailFilePath\n  ])\n\n  const thumbnailFileURL = await uploadFile({\n    Key: `thumbnails/${videoId}.jpg`,\n    Body: fs.createReadStream(thumbnailFilePath)\n  })\n\n  await dbConnect()\n  await VideoModel.updateOne(\n    { _id: videoId },\n    { $set: { thumbnailURL: thumbnailFileURL } }\n  )\n\n  await unlink(thumbnailFilePath)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Inngest App in Node.js\nDESCRIPTION: Creates an Inngest app named \"example-app\" containing one function using the Node.js SDK. The implementation uses the Inngest client with a specific ID and serves a signup email function.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/apps/index.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inngest } from \"inngest\";\nimport { serve } from \"inngest/next\"; // or your preferred framework\nimport { sendSignupEmail } from \"./functions\";\n\nconst inngest = new Inngest({ id: \"example-app\" });\n\nserve({\n  client: inngest,\n  functions: [sendSignupEmail],\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Inngest Serve Handler Configuration\nDESCRIPTION: Shows the basic structure for configuring an Inngest serve handler with a client and functions array.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/serving-inngest-functions.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nserve({\n  client: inngest, // a client created with new Inngest()\n  functions: [fnA, fnB], // an array of Inngest functions to serve, created with inngest.createFunction()\n  /* Optional extra configuration */\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of inngest.send Without await\nDESCRIPTION: TypeScript example showing incorrect usage of inngest.send without await, which may lead to cancelled operations in serverless environments.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/eslint.mdx#2025-04-10_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n// ❌ Bad\ninngest.send({ name: \"some.event\" });\n```\n\n----------------------------------------\n\nTITLE: SQL Insert Statement for Initial Workflow Instances\nDESCRIPTION: SQL statement to add two workflow instances to the workflows table - one triggered when a blog post is published and another when a blog post is moved to review. Each record includes ID, timestamp, trigger event, description, and name.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/user-defined-workflows.mdx#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO \"public\".\"workflows\" (\"id\", \"created_at\", \"workflow\", \"enabled\", \"trigger\", \"description\", \"name\") VALUES\n\t(2, '2024-09-14 20:19:41.892865+00', NULL, true, 'blog-post.published', 'Actions performed to optimize the distribution of blog posts', 'When a blog post is published'),\n\t(1, '2024-09-14 15:46:53.822922+00', NULL, true, 'blog-post.updated', 'Getting a review from AI', 'When a blog post is moved to review');\n```\n\n----------------------------------------\n\nTITLE: Legacy vs New Step Function Implementation\nDESCRIPTION: Comparison between v0 and v1 step function implementation patterns.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/migration.mdx#2025-04-10_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// ⚠️ v0 step function\nimport { createStepFunction } from \"inngest\";\nimport { getUser } from \"./db\";\nimport { sendAlert, sendEmail } from \"./email\";\n\nexport default createStepFunction(\n  \"Example\",\n  \"app/user.created\",\n  ({ event, tools }) => {\n    const user = tools.run(\"Get user email\", () => getUser(event.userId));\n\n    tools.run(\"Send email\", () => sendEmail(user.email, \"Welcome!\"));\n    tools.run(\"Send alert to staff\", () => sendAlert(\"New user created!\"));\n  }\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// ✅ v1 step function\nimport { inngest } from \"./client\";\nimport { getUser } from \"./db\";\nimport { sendAlert, sendEmail } from \"./email\";\n\nexport default inngest.createFunction(\n  { name: \"Example\" },\n  { event: \"app/user.created\" },\n  async ({ event, step }) => {\n    const user = await step.run(\"Get user email\", () => getUser(event.userId));\n\n    await step.run(\"Send email\", () => sendEmail(user.email, \"Welcome!\"));\n    await step.run(\"Send alert to staff\", () => sendAlert(\"New user created!\"));\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Sending Welcome Email on User Signup with Inngest\nDESCRIPTION: This Inngest function is triggered when a new user signs up. It sends a welcome email to the new user using the Resend API helper function with React content.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/resend-webhook-events.mdx#2025-04-10_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { sendEmail } from \"./resend\";\n\nconst sendWelcomeEmail = inngest.createFunction(\n  { id: 'send-welcome-email' },\n  { event: 'app/signup.completed' },\n  async ({ event }) => {\n\t  const { user } = event.data;\n    await sendEmail(user.email, \"Welcome to Acme\", (\n      <div>\n        <h1>Welcome to ACME, {user.firstName}</h1>\n      </div>\n    ));\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Example of an Inngest event from a GraphQL mutation\nDESCRIPTION: A JSON example showing the structure of an event sent by the Inngest plugin when a GraphQL mutation creates a cart item. The event includes operation details, result data, and type information.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/instrumenting-graphql.mdx#2025-04-10_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"graphql/create-cart-item.mutation\",\n  \"data\": {\n    \"identifiers\": [\n      {\n        \"id\": 27,\n        \"typename\": \"CartItem\"\n      }\n    ],\n    \"operation\": {\n      \"id\": \"create-cart-item\",\n      \"name\": \"CreateCartItem\",\n      \"type\": \"mutation\"\n    },\n    \"result\": {\n      \"data\": {\n        \"createCartItem\": {\n          \"id\": 27,\n          \"productId\": \"123\"\n        }\n      }\n    },\n    \"types\": [\n      \"CartItem\"\n    ],\n    \"variables\": {}\n  },\n  \"id\": \"01GXXAQ1M0A1SFVGEHACRF4K1C\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Events to Inngest Dev Server via HTTP\nDESCRIPTION: A curl command demonstrating how to send events to the Inngest Dev Server using an HTTP POST request. This example uses a dummy event key and sends a JSON payload.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/dev-server.mdx#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -v \"http://localhost:8288/e/123\" \\\n  -d '{\n    \"name\": \"user.avatar.uploaded\",\n    \"data\": { \"url\": \"https://a-bucket.s3.us-west-2.amazonaws.com/...\" }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Integrating Inngest with Google Cloud Run Functions (TypeScript)\nDESCRIPTION: Demonstrates how to use Inngest with Google Cloud Run Functions using the Functions Framework. It includes setting up an HTTP function that serves Inngest functions.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/serving-inngest-functions.mdx#2025-04-10_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as ff from \"@google-cloud/functions-framework\";\nimport { serve } from \"inngest/express\";\nimport { inngest } from \"./src/inngest/client\";\nimport fnA from \"./src/inngest/fnA\"; // Your own function\n\nff.http(\n  \"inngest\",\n  serve({\n    client: inngest,\n    functions: [fnA],\n    servePath: \"/\",\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of inngest.send With await\nDESCRIPTION: TypeScript example showing the correct approach to using inngest.send with await to ensure operations complete before the handler resolves.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/eslint.mdx#2025-04-10_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n// ✅ Good\nawait inngest.send({ name: \"some.event\" });\n```\n\n----------------------------------------\n\nTITLE: Initializing Inngest Client in Python\nDESCRIPTION: Basic initialization of the Inngest client with an application ID. This is the minimal setup required to start using Inngest in a Python application.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/client/overview.mdx#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport inngest\n\ninngest_client = inngest.Inngest(\n    app_id=\"flask_example\",\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Search Query with DeepSeek-R1 Qwen 32B in TypeScript\nDESCRIPTION: This snippet demonstrates how to generate a search query using DeepSeek-R1 Qwen 32B model. It uses a specific prompt pattern to overcome the model's limitations and ensure a formatted answer.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/deepseek-r1-step-ai.mdx#2025-04-10_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst generateSearchQuery = await step.ai.wrap(\n    \"generate-search-query\",\n    createCompletion,\n    {\n    model: model,\n    messages: [\n        {\n        role: \"user\",\n        content: `You are a helpful research analyst that helps users find relevant academic papers on arXiv to answer the following question:\n${input}\n\nDO NOT answer with your current knowledge, ONLY search for papers on arXiv.\nIMPORTANT: We are in the year ${new Date().getFullYear()}.\n\nPerform your arXiv search by returning your search query in the following format:\n\n<search_query>\n{your search query}\n</search_query>\n`,\n        },\n    ],\n    temperature: model.includes(\"deepseek\") ? 0.6 : 1,\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Framework Serve Handlers in Inngest SDK v3\nDESCRIPTION: Demonstrates the changes in implementing custom framework serve handlers between v2 and v3. V3 simplifies the handler by focusing on request parsing and response sending.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/migration.mdx#2025-04-10_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport const serve = (options: ServeHandlerOptions) => {\n  const handler = new InngestCommHandler({\n    frameworkName,\n    ...options,\n    handler: (req: Request) => {\n      return {\n        body: () => req.json(),\n        headers: (key) => req.headers.get(key),\n        method: () => req.method,\n        url: () => new URL(req.url, `https://${req.headers.get(\"host\") || \"\"}`),\n        transformResponse: ({ body, status, headers }) => {\n          return new Response(body, { status, headers });\n        },\n      };\n    },\n  });\n\n  return handler.createHandler();\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport const serve: ServeHandler = (inngest, fns, opts) => {\n  const handler = new InngestCommHandler(\n    name,\n    inngest,\n    fns,\n    {\n      fetch: fetch.bind(globalThis),\n      ...opts,\n    },\n    (req: Request) => {\n      const url = new URL(req.url, `https://${req.headers.get(\"host\") || \"\"}`);\n\n      return {\n        url,\n        register: () => {\n          if (req.method === \"PUT\") {\n            return {\n              deployId: url.searchParams.get(queryKeys.DeployId) as string,\n            };\n          }\n        },\n        run: async () => {\n          if (req.method === \"POST\") {\n            return {\n              data: (await req.json()) as Record<string, unknown>,\n              fnId: url.searchParams.get(queryKeys.FnId) as string,\n              stepId: url.searchParams.get(queryKeys.StepId) as string,\n              signature: req.headers.get(headerKeys.Signature) as string,\n            };\n          }\n        },\n        view: () => {\n          if (req.method === \"GET\") {\n            return {\n              isIntrospection: url.searchParams.has(queryKeys.Introspect),\n            };\n          }\n        },\n      };\n    },\n    ({ body, status, headers }): Response => {\n      return new Response(body, { status, headers });\n    }\n  );\n\n  return handler.createHandler();\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a New Astro and Inngest Project with NPM\nDESCRIPTION: Command to initialize a new Astro project with the Inngest starter template. This creates a project with both Astro and Inngest configured and ready to use.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/2024-01-12-extending-the-range-of-your-astro-app.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create astro@latest -- --template inngest/inngest-js/examples/framework-astro inngest-astro\n```\n\n----------------------------------------\n\nTITLE: Integrating Inngest with Redwood Framework (v3)\nDESCRIPTION: Sets up Inngest in a Redwood application by exporting a handler that serves Inngest functions at '/api/inngest'. Requires configuring apiUrl in redwood.toml.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/serving-inngest-functions.mdx#2025-04-10_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from \"inngest/redwood\";\nimport { inngest } from \"src/inngest/client\";\nimport fnA from \"src/inngest/fnA\"; // Your own function\n\nexport const handler = serve({\n  client: inngest,\n  functions: [fnA],\n  servePath: \"/api/inngest\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Rate Limit in Inngest v2\nDESCRIPTION: Demonstrates the use of 'rateLimit' instead of 'throttle' for specifying rate limits in Inngest v2 function definitions.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/migration.mdx#2025-04-10_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  {\n    name: \"Example\",\n    rateLimit: { limit: 5 },\n  },\n  { event: \"app/user.created\" },\n  async ({ step }) => {\n    // ...\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Preventing Duplicate Events with Custom ID in Python\nDESCRIPTION: Example showing how to prevent duplicate events from being processed by adding a custom ID to the event payload in Python. The ID should be specific to the event type and payload.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/events/index.mdx#2025-04-10_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nawait inngest_client.send(\n  inngest.Event(\n    name=\"storefront/cart.checkout.completed\",\n    id=\"cart-checkout-completed-ed12c8bde\",\n    data={\"cartId\": \"ed12c8bde\"},\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Invoking a Function with Timeout in Inngest\nDESCRIPTION: Demonstrates how to set a timeout when invoking an Inngest function. The timeout specifies how long to wait for the invoked function to complete before throwing an error.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/functions/step-invoke.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst resultFromDirectCall = await step.invoke(\"invoke-with-timeout\", {\n  function: anotherFunction,\n  data: { ... },\n  timeout: \"1h\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Channel in Inngest\nDESCRIPTION: Demonstrates how to create a dynamic channel for a specific run ID in Inngest. This allows for creating unique channels for individual runs or contexts.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/realtime.mdx#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nrun:${ctx.runId}\n```\n\n----------------------------------------\n\nTITLE: Configuring Throttling in Python\nDESCRIPTION: This example illustrates how to set up throttling for an Inngest function in Python. It configures the function to run once per 5 seconds, with a burst capacity of 2, using the user_id as the throttling key.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/throttling.mdx#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@inngest.create_function(\n  id=\"unique-function-id\",\n  throttle=inngest.Throttle(\n    limit=1,\n    period=datetime.timedelta(seconds=5),\n    key=\"event.data.user_id\",\n    burst=2,\n  ),\n  trigger=inngest.Trigger(event=\"ai/summary.requested\")\n)\nasync def synchronize_data(ctx: inngest.Context):\n    # This function will be throttled to 1 run per 5 seconds for a given event payload with matching user_id\n```\n\n----------------------------------------\n\nTITLE: Configuring Vercel Function Max Duration in JSON\nDESCRIPTION: This snippet shows how to increase the max duration of a specific Vercel Function to 60 seconds by updating the vercel.json configuration file.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/vercel-function-timeout.mdx#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"functions\": {\n    \"app/api/mySlowFunction/route.ts\": {\n      \"maxDuration\": 60\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a CSV Processing Function in TypeScript with Inngest\nDESCRIPTION: This snippet defines a basic function that processes a CSV file and returns the number of items processed. It uses Inngest's createFunction method to set up the function.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/examples/fetch-run-status-and-output.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst processCSV = inngest.createFunction(\n  { id: \"process-csv-upload\" },\n  { event: \"imports/csv.uploaded\" },\n  async ({ event, step }) => {\n    // CSV processing logic omitted for the sake of the example\n    return {\n      status: \"success\",\n      processedItems: results.length,\n      failedItems: failures.length,\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating an Autonomous Agent Network with AgentKit\nDESCRIPTION: Implements a network that runs a coding agent in a loop until it completes its goal. The network is configured with a maximum of 10 iterations and uses a defaultRouter function to determine when to stop execution based on a task_summary key in the state.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/cursor-agentkit-e2b.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAgent, anthropic, createTool, createNetwork } from \"@inngest/agent-kit\"\n\nconst agent = createAgent(/* our Agent and its Tools */);\n\nconst network = createNetwork({\n    name: \"coding-agent-network\",\n    agents: [agent],\n    maxIter: 10,\n    defaultRouter: ({ network }) => {\n    if (network?.state.kv.has(\"task_summary\")) {\n        return;\n    }\n\n    return agent;\n    },\n});\n\nasync function main() {\n    const result = await network.run(process.argv.slice(2).join(\" \"));\n    console.log(result.state.kv.get(\"task_summary\"));\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Middleware Event Hooks in Python\nDESCRIPTION: Shows implementation of event handling hooks in Python middleware.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/middleware/create.mdx#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport inngest\n\nclass MyMiddleware(inngest.Middleware):\n    def __init__(\n        self,\n        client: inngest.Inngest,\n        raw_request: object,\n    ) -> None:\n        #  ...\n\n    async def before_send_events( self, events: list[inngest.Event]) -> None:\n        # called before an event is sent from within a Function or Step\n        print(f\"Sending {len(events)} events\")\n\n    async def after_send_events(self, result: inngest.SendEventsResult) -> None:\n        # called after an event is sent from within a Function or Step\n        print(\"Done sending events\")\n```\n\n----------------------------------------\n\nTITLE: Creating Unique Index for Debounce Key in Postgres\nDESCRIPTION: SQL query to create a unique index on the debounce key and status columns to ensure only one queued job exists for a given key.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/debouncing-in-queuing-systems-optimizing-efficiency-in-async-workflows.mdx#2025-04-10_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE UNIQUE INDEX debounce_key_status\nON debounce_job_queue(debounce_key, status)\nWHERE status = 'QUEUED';\n```\n\n----------------------------------------\n\nTITLE: Enhanced Event Sending in Inngest for Better Searchability\nDESCRIPTION: Improved version of sending an event in Inngest with additional properties that aid in searchability. This approach includes workspace context and feature-specific information to enable more powerful filtering.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/announcing-function-runs-search.mdx#2025-04-10_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nawait inngest.send({\n  name: \"user/message.sent\",\n  data: {\n    messageId: 1,\n    userId: 12,\n    workspaceId: 2,\n    // you can also add feature-specific information\n    messageEdit: false,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Event Schemas in Inngest v2\nDESCRIPTION: Demonstrates the new approach to defining event schemas in Inngest v2 using the EventSchemas class. This method reduces duplication and provides more flexibility in defining event types.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/migration.mdx#2025-04-10_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inngest, EventSchemas } from \"inngest\";\n\ntype Events = {\n  \"app/user.created\": {\n    data: { id: string };\n  };\n  \"app/user.deleted\": {\n    data: { id: string };\n  };\n};\n\nnew Inngest({\n  schemas: new EventSchemas().fromRecord<Events>(),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Function Cancellation in Inngest TypeScript SDK\nDESCRIPTION: This code illustrates how to set up automatic function cancellation in Inngest based on specific events. The example shows a trial management function that automatically cancels when a user upgrades their account, preventing unnecessary trial cancellation processing.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/postmortem-2023-08-31.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  {\n    name: \"Trial management\",\n    cancelOn: [\n      // Automatically cancel this function if the account upgrades.\n      {\n        event: \"billing/user.upgraded\",\n        if: \"async.data.account_id == event.data.acocunt_id\",\n      },\n    ],\n  },\n  { event: \"auth/user.created\" }, // The event that causes this function to run\n  async ({ event, step }) => {\n    await step.sleep(\"7d\"); // Sleep for 7 days\n    // If the user upgrades, this function is cancelled and the next step\n    // will never run.\n    await step.run(\"Process trial cancellation\", () => \n      // ...\n    });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenAI Client with dependencyInjectionMiddleware in TypeScript\nDESCRIPTION: Shows how to use the dependencyInjectionMiddleware to inject an OpenAI client instance into Inngest functions. This approach is available in TypeScript SDK v3.34.0+.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/middleware/dependency-injection.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { dependencyInjectionMiddleware } from \"inngest\";\nimport OpenAI from 'openai';\n\nconst openai = new OpenAI();\n\nconst inngest = new Inngest({\n  id: 'my-app',\n  middleware: [\n    dependencyInjectionMiddleware({ openai }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Inngest Serve Handler in Next.js Pages Router\nDESCRIPTION: Creates an API endpoint at /api/inngest that serves Inngest functions using the Pages Router in Next.js. This code imports the client and functions from their respective modules and passes them to the serve handler.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/deploy/vercel.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from \"inngest/next\";\nimport { client } from \"../../inngest/client\";\nimport { firstFunction, anotherFunction } from \"../../inngest/functions\";\n\nexport default serve({\n  client: client,\n  functions: [\n    firstFunction,\n    anotherFunction\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Example Workflow Instance Structure in JSON\nDESCRIPTION: A sample JSON representation of a workflow instance that demonstrates the structure with two actions for generating social media posts, connected sequentially via edges.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/workflow-kit/workflow-instance.mdx#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Generate social posts\",\n  \"edges\": [\n    {\n      \"to\": \"1\",\n      \"from\": \"$source\"\n    },\n    {\n      \"to\": \"2\",\n      \"from\": \"1\"\n    }\n  ],\n  \"actions\": [\n    {\n      \"id\": \"1\",\n      \"kind\": \"generate_tweet_posts\",\n      \"name\": \"Generate Twitter posts\"\n    },\n    {\n      \"id\": \"2\",\n      \"kind\": \"generate_linkedin_posts\",\n      \"name\": \"Generate LinkedIn posts\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Next.js Project with App Router\nDESCRIPTION: Command to create a new Next.js project with TypeScript, ESLint, Tailwind, and App Router configuration.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/getting-started/nextjs-quick-start.mdx#2025-04-10_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-next-app@latest --ts --eslint --tailwind --src-dir --app --import-alias='@/*' inngest-guide\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Waiting with Complex Conditional Logic in JavaScript\nDESCRIPTION: Example showing how to define a function that waits for a specific subscription event with multiple conditions. This demonstrates the complexity of expressions that need to be evaluated against incoming events.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/accidentally-quadratic-evaluating-trillions-of-event-matches-in-real-time.mdx#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Wait 30 days for a user to start a subscription\n// on the pro plan\nconst subscription = await step.waitForEvent(\"wait-for-subscription\", {\n  event: \"app/subscription.created\",\n  timeout: \"30d\",\n  if: \"event.data.userId == async.data.userId && async.data.billing_plan == 'pro'\",\n});\n```\n\n----------------------------------------\n\nTITLE: Next.js Page for Loading Workflow Data in Automation Editor\nDESCRIPTION: A Next.js page component that loads a workflow from the database based on the ID in the URL parameters. It then renders the AutomationEditor component with the loaded workflow data or returns a 404 if the workflow isn't found.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/user-defined-workflows.mdx#2025-04-10_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AutomationEditor } from \"@/components/automation-editor\";\nimport { createClient } from \"@/lib/supabase/server\";\nimport { notFound } from \"next/navigation\";\n\nexport const runtime = \"edge\";\n\nexport default async function Automation({\n  params,\n}: {\n  params: { id: string };\n}) {\n  const supabase = createClient();\n  const { data: workflow } = await supabase\n    .from(\"workflows\")\n    .select(\"*\")\n    .eq(\"id\", params.id!)\n    .single();\n  if (workflow) {\n    return <AutomationEditor workflow={workflow} />;\n  } else {\n    notFound();\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Incorrect Nesting of step.run Calls\nDESCRIPTION: TypeScript example showing incorrect nesting of step.run() calls, which is not supported and will result in runtime errors.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/eslint.mdx#2025-04-10_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\n// ❌ Bad\nawait step.run(\"a\", async () => {\n  const someValue = \"...\";\n  await step.run(\"b\", () => {\n    return use(someValue);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Basic FastAPI Application\nDESCRIPTION: Initial code to create a minimal FastAPI application that will be extended with Inngest functionality.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/getting-started/python-quick-start.mdx#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n\napp = FastAPI()\n```\n\n----------------------------------------\n\nTITLE: Unit Testing an Inngest Function with Mocked Library\nDESCRIPTION: Example of unit testing an Inngest function using the experimental mocked library. The test creates a mocked Inngest client, triggers the function with a simulated event, and verifies the expected output.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/guides/testing.mdx#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport unittest\nimport inngest\nfrom inngest.experimental import mocked\nfrom .functions import greet\n\n# Mocked Inngest client. The app_id can be any string (it's currently unused)\nclient_mock = mocked.Inngest(app_id=\"test\")\n\n# A normal Python test class\nclass TestGreet(unittest.TestCase):\n    def test_greet(self) -> None:\n        # Trigger the function with an in-memory, simulated Inngest server\n        res = mocked.trigger(\n            greet,\n            inngest.Event(name=\"user.login\", data={\"name\": \"Alice\"}),\n            client_mock,\n        )\n\n        # Assert that it ran as expected\n        assert res.status is mocked.Status.COMPLETED\n        assert res.output == \"Hello, Alice!\"\n```\n\n----------------------------------------\n\nTITLE: Creating an Inngest client in v3 vs v2\nDESCRIPTION: Comparison showing how client initialization changes from v2 to v3, with the key difference being the use of 'id' instead of 'name' as the identifier property.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/migration.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inngest } from \"inngest\";\n\nexport const inngest = new Inngest({\n  id: \"My App\",\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inngest } from \"inngest\";\n\nexport const inngest = new Inngest({\n  name: \"My App\",\n});\n```\n\n----------------------------------------\n\nTITLE: OpenAI Middleware Implementation in Python\nDESCRIPTION: Demonstrates how to create a middleware class in Python to inject OpenAI client into Inngest functions. Compatible with Python SDK v0.3.0+.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/middleware/dependency-injection.mdx#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport inngest\nfrom openai import OpenAI\n\nclass OpenAIMiddleware(inngest.Middleware):\n    def __init__(\n        self,\n        client: inngest.Inngest,\n        raw_request: object,\n    ) -> None:\n        self.openai = OpenAI(\n            # This is the default and can be omitted\n            api_key=os.environ.get(\"OPENAI_API_KEY\"),\n        )\n\n    def transform_input(\n        self,\n        ctx: execution_lib.Context,\n        function: function.Function,\n        steps: step_lib.StepMemos,\n    ) -> None:\n        ctx.openai = self.openai  # type: ignore\n\n\ninngest_client = inngest.Inngest(\n    app_id=\"my_app\",\n    middleware=[OpenAIMiddleware],\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Inngest App in Go with HTTP\nDESCRIPTION: Creates a Go-based Inngest app named \"core\" that includes an account creation function triggered by \"api/account.created\" events. Sets up an HTTP server on port 8080 to handle Inngest function execution.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/apps/index.mdx#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/inngest/inngestgo\"\n\t\"github.com/inngest/inngestgo/step\"\n)\n\nfunc main() {\n\th := inngestgo.NewHandler(\"core\", inngestgo.HandlerOpts{})\n\tf := inngestgo.CreateFunction(\n\t\tinngestgo.FunctionOpts{\n\t\t\tID:   \"account-created\",\n\t\t\tName: \"Account creation flow\",\n\t\t},\n\t\t// Run on every api/account.created event.\n\t\tinngestgo.EventTrigger(\"api/account.created\", nil),\n\t\tAccountCreated,\n\t)\n\th.Register(f)\n\thttp.ListenAndServe(\":8080\", h)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring cancelOn in Inngest Function Creation\nDESCRIPTION: This snippet demonstrates how to set up cancelOn when creating an Inngest function. It shows how to specify the cancellation event and the condition for matching the async event with the trigger event.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/typescript/functions/cancel-on.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  {\n    id: \"sync-contacts\",\n    cancelOn: [\n      {\n        event: \"app/user.deleted\",\n        // ensure the async (future) event's userId matches the trigger userId\n        if: \"async.data.userId == event.data.userId\",\n      },\n    ],\n  }\n  // ...\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Inngest SDK with pnpm\nDESCRIPTION: Command to install the Inngest SDK package using pnpm package manager.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/typescript/index.mdx#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add inngest\n```\n\n----------------------------------------\n\nTITLE: Pausing Function Execution Until a Specific DateTime in Python\nDESCRIPTION: This Python example demonstrates using `step.sleep_until()` to pause execution until a specific date and time. The function sleeps until a time 2 seconds in the future from when it's executed.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/steps-workflows/sleeps.mdx#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@inngest_client.create_function(\n    fn_id=\"my_function\",\n    trigger=inngest.TriggerEvent(event=\"app/my_function\"),\n)\nasync def fn(\n    ctx: inngest.Context,\n    step: inngest.Step,\n) -> None:\n    await step.sleep_until(\n        \"zzz\",\n        datetime.datetime.now() + datetime.timedelta(seconds=2),\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Destination-Based Concurrency Controls with Inngest in JSX\nDESCRIPTION: Sets up concurrency control for sync functions by limiting execution to one active function per destination, preventing race conditions and duplicate data syncs across functions.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/synchronizing-financial-data-from-plaid-and-stripe.mdx#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst syncHoldingsFunction = inngest.createFunction({\n\tid: 'sync-holdings',\n\tname: 'Sync Holdings',\n\tconcurrency: { limit: 1, key: 'event.data.destinationId' },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Record Type for Key Validation\nDESCRIPTION: Demonstrates using Record<Keys, ValueType> to ensure all required keys are present in an object. The compiler enforces that all hobby types are accounted for, preventing missing properties.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/building-educational-typescript-tooling.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype Hobby = \"dancing\" | \"romancing\" | \"typescript\";\n\n// The compiler will make sure we account for every hobby!\nconst myHobbies: Record<Hobby, boolean> = {\n// Error: Property 'romancing' is missing in type '{ readonly dancing: false; readonly typescript: true; }' but required in type 'Record<Hobby, boolean>'.\n  dancing: false,\n  typescript: true,\n} as const;\n```\n\n----------------------------------------\n\nTITLE: Sample Event Payload JSON\nDESCRIPTION: Example JSON payload used to trigger the hello-world function through the Inngest Dev Server UI, containing an email address in the data object.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/getting-started/nodejs-quick-start.mdx#2025-04-10_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"email\": \"test@example.com\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Stubbing Inngest Function Steps for Testing\nDESCRIPTION: Example of stubbing Inngest function steps using the mocked library. This demonstrates how to test functions that use step.invoke and step.wait_for_event by providing mock responses for each step.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/guides/testing.mdx#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Real production function\n@client.create_function(\n    fn_id=\"signup\",\n    trigger=inngest.TriggerEvent(event=\"user.signup\"),\n)\ndef signup(\n    ctx: inngest.Context,\n    step: inngest.StepSync,\n) -> bool:\n    email_id = step.invoke(\n        \"send-email\",\n        function=send_email,\n    )\n\n    event = step.wait_for_event(\n        \"wait-for-reply\",\n        event=\"email.reply\",\n        if_exp=f\"async.data.email_id == '{email_id}'\",\n        timeout=datetime.timedelta(days=1),\n    )\n    user_replied = event is not None\n    return user_replied\n\n# Mocked Inngest client\nclient_mock = mocked.Inngest(app_id=\"test\")\n\nclass TestSignup(unittest.TestCase):\n    def test_signup(self) -> None:\n        res = mocked.trigger(\n            fn,\n            inngest.Event(name=\"test\"),\n            client_mock,\n\n            # Stub the invoke and wait_for_event steps. The keys are the step\n            # IDs\n            step_stubs={\n                \"send-email\": \"email-id-abc123\",\n                \"wait-for-reply\": inngest.Event(\n                    data={\"text\": \"Sounds good!\"}, name=\"email.reply\"\n                ),\n            },\n        )\n        assert res.status is mocked.Status.COMPLETED\n        assert res.output is True\n```\n\n----------------------------------------\n\nTITLE: Installing Inngest Python SDK via pip\nDESCRIPTION: This command installs the Inngest Python SDK using pip, the Python package installer. It's the first step to integrate Inngest into a Python project.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/index.mdx#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install inngest\n```\n\n----------------------------------------\n\nTITLE: Using Union Types for Event Schemas in Inngest v2\nDESCRIPTION: Shows an alternative method of defining event schemas in Inngest v2 using union types. This approach allows for more flexible event type definitions.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/migration.mdx#2025-04-10_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ntype AppUserCreated = {\n  name: \"app/user.created\";\n  data: { id: string };\n};\n\ntype AppUserDeleted = {\n  name: \"app/user.deleted\";\n  data: { id: string };\n};\n\nnew EventSchemas().fromUnion<AppUserCreated | AppUserDeleted>();\n```\n\n----------------------------------------\n\nTITLE: Example Inngest Function Failed Event Payload Structure\nDESCRIPTION: Demonstrates the complete JSON structure of an inngest/function.failed event payload, including error details, original event data, function identification, and timestamps.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/system-events/inngest-function-failed.mdx#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"inngest/function.failed\",\n    \"data\": {\n      \"error\": {\n        \"__serialized\": true,\n        \"error\": \"invalid status code: 500\",\n        \"message\": \"taylor@ok.com is already a list member. Use PUT to insert or update list members.\",\n        \"name\": \"Error\",\n        \"stack\": \"Error: taylor@ok.com is already a list member. Use PUT to insert or update list members.\\n    at /var/task/.next/server/pages/api/inngest.js:2430:23\\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\\n    at async InngestFunction.runFn (/var/task/node_modules/.pnpm/inngest@2.6.0_typescript@5.1.6/node_modules/inngest/components/InngestFunction.js:378:32)\\n    at async InngestCommHandler.runStep (/var/task/node_modules/.pnpm/inngest@2.6.0_typescript@5.1.6/node_modules/inngest/components/InngestCommHandler.js:459:25)\\n    at async InngestCommHandler.handleAction (/var/task/node_modules/.pnpm/inngest@2.6.0_typescript@5.1.6/node_modules/inngest/components/InngestCommHandler.js:359:33)\\n    at async ServerTiming.wrap (/var/task/node_modules/.pnpm/inngest@2.6.0_typescript@5.1.6/node_modules/inngest/helpers/ServerTiming.js:69:21)\\n    at async ServerTiming.wrap (/var/task/node_modules/.pnpm/inngest@2.6.0_typescript@5.1.6/node_modules/inngest/helpers/ServerTiming.js:69:21)\"\n      },\n      \"event\": {\n        \"data\": { \"billingPlan\": \"pro\" },\n        \"id\": \"01H0TPSHZTVFF6SFVTR6E25MTC\",\n        \"name\": \"user.signup\",\n        \"ts\": 1684523501562,\n        \"user\": { \"external_id\": \"6463da8211cdbbcb191dd7da\" }\n      },\n      \"function_id\": \"my-gcp-cloud-functions-app-hello-inngest\",\n      \"run_id\": \"01H0TPSJ576QY54R6JJ8MEX6JH\"\n    },\n    \"id\": \"01H0TPW7KB4KCR739TG2J3FTHT\",\n    \"ts\": 1684523589227\n  }\n```\n\n----------------------------------------\n\nTITLE: Starting FastAPI App with Inngest in Dev Mode\nDESCRIPTION: Command to start the FastAPI application with Inngest in development mode. The INNGEST_DEV environment variable enables local development features.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/getting-started/python-quick-start.mdx#2025-04-10_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n(INNGEST_DEV=1 uvicorn main:app --reload)\n```\n\n----------------------------------------\n\nTITLE: Implementing FastAPI Integration for Inngest\nDESCRIPTION: Demonstrates integration of Inngest with FastAPI framework in Python, setting up async function handlers and logging configuration.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/serving-inngest-functions.mdx#2025-04-10_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport inngest\nimport fastapi\nimport inngest.fast_api\n\nlogger = logging.getLogger(\"uvicorn.inngest\")\nlogger.setLevel(logging.DEBUG)\n\ninngest_client = inngest.Inngest(app_id=\"fast_api_example\", logger=logger)\n\n@inngest_client.create_function(\n    fn_id=\"hello-world\",\n    trigger=inngest.TriggerEvent(event=\"say-hello\"),\n)\nasync def hello(\n    ctx: inngest.Context,\n    step: inngest.Step,\n) -> str:\n    return \"Hello world!\"\n\napp = fastapi.FastAPI()\n\ninngest.fast_api.serve(\n    app,\n    inngest_client,\n    [hello],\n)\n```\n\n----------------------------------------\n\nTITLE: Embedding Interactive Graph in Markdown\nDESCRIPTION: HTML iframe element used to embed a visualization graph showing API performance metrics. The iframe references an external visualization tool (graphy.app) with specific styling parameters.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/edge-event-api-beta.mdx#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://visualize.graphy.app/view/748398b9-71ab-42e6-9e60-836ebafebf76\"\n  style={{ width: \"100%\", height: \"420px\" }}/>\n```\n\n----------------------------------------\n\nTITLE: Transforming Resend Webhook Events for Inngest\nDESCRIPTION: This function transforms incoming Resend webhook data to be compatible with Inngest's event payload format. It prefixes all events with 'resend/' and passes through the event data.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/resend-webhook-events.mdx#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction transform(evt, headers = {}, queryParams = {}) {\n  return {\n    // Add a prefix to the name of the event\n    name: `resend/${evt.type}`,\n    data: evt.data,\n   };\n};\n```\n\n----------------------------------------\n\nTITLE: Refactoring Domain Verification with Inngest Durable Functions\nDESCRIPTION: This improved implementation uses Inngest's Durable Functions to handle the domain verification workflow. It simplifies the code by removing custom state management, eliminating loops over multiple domains, and breaking the process into logical steps with better error handling and retry capabilities.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/nextjs-serverless-vs-durable-functions.mdx#2025-04-10_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { intervalToDuration } from \"date-fns\";\n\nimport inngest from \"./inngest-client\";\nimport prisma from \"./prisma-client\";\nimport {\n  resend,\n  FROM,\n  DomainConfiguredEmailTemplate,\n  DomainFailedConfigureEmailTemplate,\n} from \"./resend\";\nimport { checkDNSRecord } from \"./domain-verification\";\n\nexport default inngest.createFunction(\n  { id: \"account-verify-domain\" },\n  { event: \"account/verify-domain\" },\n  async ({ event, step }) => {\n    let domainConfigured = false;\n\n    const { domain, account } = event.data;\n\n    const { hours: hoursSinceStarted } = intervalToDuration(\n      event.ts,\n      new Date()\n    );\n\n    while (!domainConfigured && hoursSinceStarted < 72) {\n      const { error } = await step.run(\"check-domain\", async () => {\n        return checkDNSRecord(domain.domain);\n      });\n\n      if (!error) {\n        domainConfigured = true;\n      } else {\n        await step.sleep('wait-5min-for-next-check', '5m')\n      }\n    }\n\n    if (domainConfigured) {\n      await step.run(\"send-domain-configured-email\", async () => {\n        await resend.emails.send({\n          from: FROM,\n          to: [account.email],\n          subject: \"Start sending emails now!\",\n          react: DomainConfiguredEmailTemplate({ account }),\n        });\n      });\n    } else {\n      await step.run(\"send-domain-failed-configured\", async () => {\n        await resend.emails.send({\n          from: FROM,\n          to: [domain.account.email],\n          subject: \"We coudn't configure your domain.\",\n          react: DomainFailedConfigureEmailTemplate({\n            account: domain.account,\n          }),\n        });\n      });\n    }\n\n    await step.run(\"update-domain-status-for-dashboard\", async () => {\n      await prisma.domains.update({\n        where: {\n          id: domain.id,\n        },\n        data: {\n          status: status: domainConfigured ? \"configured\" : \"error\",\n        },\n      });\n    });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Rate Limiting for Inngest Function in Python\nDESCRIPTION: This Python code example illustrates how to set up rate limiting for an Inngest function. It restricts the function to run once every 4 hours based on a specific company ID.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/rate-limiting.mdx#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@inngest.create_function(\n  id=\"synchronize-data\",\n  rate_limit=inngest.RateLimit(\n    limit=1,\n    period=datetime.timedelta(hours=4),\n    key=\"event.data.company_id\",\n  ),\n  trigger=inngest.Trigger(event=\"intercom/company.updated\")\n)\nasync def synchronize_data(ctx: inngest.Context):\n    # This function will be rate limited to 1 run per 4 hours for a given event payload with matching company_id\n```\n\n----------------------------------------\n\nTITLE: Coding Agent Demo Output for Next.js TodoList Creation\nDESCRIPTION: Shows the execution output of the autonomous coding agent as it creates a Next.js TodoList application with unit tests. The agent works through multiple iterations to scaffold the project, install dependencies, create components, write tests, and run the test suite with coverage reporting.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/cursor-agentkit-e2b.mdx#2025-04-10_snippet_5\n\nLANGUAGE: txt\nCODE:\n```\n    --- Iteration #0 ---\nAgent response > undefined\nterminal <  npx create-next-app@latest todo-list-demo --typescript --tailwind --eslint --app --src-dir --use-npm --yes\nterminal result > Creating a new Next.js app in /home/user/todo-list-demo.\n\n[...]\nSuccess! Created todo-list-demo at /home/user/todo-list-demo\n\n\n    --- Iteration #1 ---\nAgent response > undefined\nterminal <  cd todo-list-demo && npm install --save-dev @testing-library/react @testing-library/jest-dom @testing-library/user-event jest jest-environment-jsdom\nterminal result > \nadded 329 packages, and audited 709 packages in 14s\n\n[...]\n\n    --- Iteration #2 ---\nAgent response > undefined\ncreateOrUpdateFiles < [ 'todo-list-demo/src/components/TodoList.tsx' ]\n    --- Iteration #3 ---\nAgent response > undefined\ncreateOrUpdateFiles < [ 'todo-list-demo/src/components/__tests__/TodoList.test.tsx' ]\n    --- Iteration #4 ---\nAgent response > undefined\ncreateOrUpdateFiles < [ 'todo-list-demo/jest.config.js' ]\n    --- Iteration #5 ---\nAgent response > undefined\ncreateOrUpdateFiles < [ 'todo-list-demo/jest.setup.js' ]\n    --- Iteration #6 ---\nAgent response > undefined\nterminal <  cd todo-list-demo && npm pkg set scripts.test=\"jest\" scripts.test:coverage=\"jest --coverage\"\nterminal result > \n    --- Iteration #7 ---\nAgent response > undefined\ncreateOrUpdateFiles < [ 'todo-list-demo/src/app/page.tsx' ]\n    --- Iteration #8 ---\nAgent response > undefined\nterminal <  cd todo-list-demo && npm run test:coverage\nterminal result > \n> todo-list-demo@0.1.0 test:coverage\n> jest --coverage\n\n--------------|---------|----------|---------|---------|-------------------\nFile          | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------|---------|----------|---------|---------|-------------------\nAll files     |     100 |    85.71 |     100 |     100 |                   \n    TodoList.tsx |     100 |    85.71 |     100 |     100 | 28                \n--------------|---------|----------|---------|---------|-------------------\n\n    --- Iteration #9 ---\nAgent response > <agent>Coding Agent</agent>\nNow that we have completed all the steps, let me provide a task summary:\n\n<task_summary>\n[...]\n</task_summary>\n    --- Iteration #10 ---\n<agent>Coding Agent</agent>\nNow that we have completed all the steps, let me provide a task summary:\n\n<task_summary>\n1. Created a new Next.js project with TypeScript and Tailwind CSS\n2. Installed testing dependencies (Jest, Testing Library)\n3. Created the TodoList component with the following features:\n    - Add new todos\n    - Toggle todo completion\n    - Delete todos\n    - Support for Enter key to add todos\n4. Created comprehensive unit tests covering:\n    - Component rendering\n    - Adding todos\n    - Toggling todo completion\n    - Deleting todos\n    - Enter key functionality\n5. Configured Jest with coverage reporting\n6. Executed tests with coverage results:\n    - Statements: 100%\n    - Branches: 85.71%\n    - Functions: 100%\n    - Lines: 100%\n\nThe TodoList demo is now complete and fully tested. The coverage report shows excellent test coverage with only one uncovered branch case.\n</task_summary>\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component in TypeScript\nDESCRIPTION: Import statement for the Callout component used in documentation MDX files.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/platform/signing-keys.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Callout } from \"src/shared/Docs/mdx\";\n```\n\n----------------------------------------\n\nTITLE: Defining Event Schemas with Zod in Inngest v2\nDESCRIPTION: Demonstrates how to use Zod for defining event schemas in Inngest v2, showcasing the integration with third-party validation libraries.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/migration.mdx#2025-04-10_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst userDataSchema = z.object({\n  id: z.string(),\n});\n\nnew EventSchemas().fromZod({\n  \"app/user.created\": { data: userDataSchema },\n  \"app/user.deleted\": { data: userDataSchema },\n});\n```\n\n----------------------------------------\n\nTITLE: Transforming Webhook Data for Signature Verification in Inngest\nDESCRIPTION: This snippet shows how to transform incoming webhook data to extract signature information from headers for verification purposes. The example is tailored for Stripe webhooks, capturing both the raw request body and the Stripe-Signature header.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/platform/webhooks.mdx#2025-04-10_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nfunction transform(evt, headers, queryParams, raw) {\n  return {\n    name: `stripe/${evt.type}`,\n    data: {\n      raw,\n      sig: headers[\"Stripe-Signature\"],\n    }\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Inngest Function Handlers\nDESCRIPTION: Example showing how to access environment variables in an Inngest function handler after setting up the middleware.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/examples/middleware/cloudflare-workers-environment-variables.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst myFn = inngest.createFunction(\n  { id: 'my-fn' },\n  { event: 'demo/event.sent' },\n  // The \"env\" argument returned in transformInput is passed through:\n  async ({ event, step, env }) => {\n\n    // The env object will be typed as well:\n    console.log(env.MY_VAR);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Card Group for Inngest Event Sources\nDESCRIPTION: This JSX snippet creates a card group layout to display different event sources for Inngest functions. Each card represents a specific trigger type with an icon, title, and brief description, linking to relevant documentation.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/events-triggers.mdx#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CardGroup cols={2}>\n  <Card title=\"Your application\" icon={<RiCloudLine className=\"text-basis h-4 w-4\" />} href={'/docs/events'}>\n    Send an event from your application's backend with the Inngest SDK.\n  </Card>\n  <Card title=\"Cron schedule\" icon={<RiTimeLine className=\"text-basis h-4 w-4\" />} href={'/docs/guides/scheduled-functions'}>\n    Run an Inngest function periodically with a trigger using cron syntax.\n  </Card>\n  <Card title=\"Webhook events\" icon={<RiWebhookFill className=\"text-basis h-4 w-4\"/>} href={'/docs/platform/webhooks'}>\n    Use Inngest as a webhook consumer for any service to trigger functions.\n  </Card>\n  <Card title=\"Another Inngest function\" icon={<RiGitForkFill className=\"rotate-90 text-basis h-4 w-4\" />} href={'/docs/guides/invoking-functions-directly'}>\n    Directly invoke other functions to compose more powerful functions.\n  </Card>\n</CardGroup>\n```\n\n----------------------------------------\n\nTITLE: Exporting Metadata for Otto Case Study in JavaScript\nDESCRIPTION: This code exports various metadata variables for the Otto case study page, including title, company information, quotes, URLs, and descriptions used for rendering the customer story.\nSOURCE: https://github.com/inngest/website/blob/main/pages/customers/otto.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const title = 'Leveraging multi-tenant concurrency to scale AI workflows'\nexport const companyName = 'Otto'\nexport const logo = '/assets/customers/otto-logo.svg'\nexport const logoScale = 1;\nexport const quote = {\n  text: `Inngest completely transformed how we handle AI orchestration at Otto. Its intuitive developer experience, built-in multi-tenant concurrency, and flow control allowed us to scale without the complexity of other tools or the need to build custom solutions. What would have taken us a month.`,\n  attribution: {\n    name: 'Sully Omar',\n    title: 'Co-founder, CEO',\n  },\n  avatar: '/assets/customers/otto-sully.jpg',\n}\nexport const companyURL = 'https://ottogrid.ai'\nexport const companyDescription = `AI-powered spreadsheets that handle the work, from start to finish.`\nexport const ogImage = '/assets/customers/case-study/og-image-otto.png'\n```\n\n----------------------------------------\n\nTITLE: Search Query for LLM Token Usage\nDESCRIPTION: Example of how to use the Function Run Search to find AI completion functions that used more than 300 tokens. This demonstrates searching based on function output properties when returning complete objects.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/announcing-function-runs-search.mdx#2025-04-10_snippet_6\n\nLANGUAGE: txt\nCODE:\n```\nevent.name == \"ai/chat.completion\" && output.usage.total_token > 300\n```\n\n----------------------------------------\n\nTITLE: Converting to Step Function in Python\nDESCRIPTION: This snippet shows how to convert a single-step Inngest function to a multi-step function in Python. It demonstrates the use of step.run() to wrap the sendEmail() call.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/multi-step-functions.mdx#2025-04-10_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport inngest\nfrom src.inngest.client import inngest_client\n\n@inngest_client.create_function(\n    fn_id=\"activation-email\",\n    trigger=inngest.TriggerEvent(event=\"app/user.created\"),\n)\nasync def fn(\n    ctx: inngest.Context,\n    step: inngest.Step,\n) -> None:\n    await step.run(\"send-welcome-email\", lambda: sendEmail({\n        \"email\": ctx.event.user.email,\n        \"template\": \"welcome\"\n    }))\n```\n\n----------------------------------------\n\nTITLE: Example Inngest Event Format\nDESCRIPTION: Demonstrates the expected format for events in Inngest after transformation, showing how a Clerk webhook is converted to match Inngest's required structure with name and data fields.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/platform/webhooks.mdx#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"clerk/user.created\",\n  \"data\": {\n    \"created_at\": 1654012591514,\n    \"external_id\": \"567772\",\n    \"first_name\": \"Example\",\n    \"id\": \"user_29w83sxmDNGwOuEthce5gg56FcC\",\n    \"last_name\": \"Example\",\n    \"last_sign_in_at\": 1654012591514,\n    \"object\": \"user\",\n    \"primary_email_address_id\": \"idn_29w83yL7CwVlJXylYLxcslromF1\",\n    // ... simplified for example\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Inngest Event Format\nDESCRIPTION: Demonstrates the expected format for events in Inngest after transformation, showing how a Clerk webhook is converted to match Inngest's required structure with name and data fields.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/platform/webhooks.mdx#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"clerk/user.created\",\n  \"data\": {\n    \"created_at\": 1654012591514,\n    \"external_id\": \"567772\",\n    \"first_name\": \"Example\",\n    \"id\": \"user_29w83sxmDNGwOuEthce5gg56FcC\",\n    \"last_name\": \"Example\",\n    \"last_sign_in_at\": 1654012591514,\n    \"object\": \"user\",\n    \"primary_email_address_id\": \"idn_29w83yL7CwVlJXylYLxcslromF1\",\n    // ... simplified for example\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing File-Based Metadata from Root Layout\nDESCRIPTION: Further simplification of the root layout by removing <link> tags for files that Next.js automatically handles when placed in the app directory, such as favicon.ico.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/migrating-from-vite-to-nextjs.mdx#2025-04-10_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <title>My App</title>\n        <meta name=\"description\" content=\"My App is a...\">\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component in React/JSX\nDESCRIPTION: Import statement for the Callout component used in the documentation MDX file to display important notices and information boxes.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/platform/manage/bulk-cancellation.mdx#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout } from \"src/shared/Docs/mdx\";\n```\n\n----------------------------------------\n\nTITLE: Client Initialization in TypeScript\nDESCRIPTION: Shows how to initialize the Inngest client in v1.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/migration.mdx#2025-04-10_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inngest } from \"inngest\";\n\nexport const inngest = new Inngest({ name: \"My App\" });\n```\n\n----------------------------------------\n\nTITLE: Configuring Inngest Dev Server with JSON and YAML\nDESCRIPTION: Examples of configuration files (inngest.json and inngest.yaml) for the Inngest Dev Server. These configurations specify multiple SDK URLs and disable auto-discovery.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/dev-server.mdx#2025-04-10_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sdk-url\": [\n    \"http://localhost:3000/api/inngest\",\n    \"http://localhost:3030/api/inngest\"\n  ],\n  \"no-discovery\": true\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nsdk-url:\n  - \"http://localhost:3000/api/inngest\"\n  - \"http://localhost:3030/api/inngest\"\nno-discovery: true\n```\n\n----------------------------------------\n\nTITLE: Creating Background Jobs with Go in Inngest\nDESCRIPTION: This snippet shows how to create a background job function in Go that sends an email to new users when triggered by a user creation event. It includes steps for sending an email with automatic retries and scheduling future tasks using sleep functionality.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/background-jobs.mdx#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"time\"\n    \"github.com/inngest/inngest-go\"\n    \"github.com/inngest/inngest-go/step\"\n)\n\ninngestgo.CreateFunction(\n    inngest.FunctionOpts{\n        ID: \"send-signup-email\",\n    },\n    inngest.TriggerEvent(\"app/user.created\"),\n    func(ctx *inngest.Context) error {\n        _, err := step.Run(\"send-the-user-a-signup-email\", func(ctx *inngest.StepContext) (any, error) {\n            return nil, sesclient.SendEmail(&ses.SendEmailInput{\n                To:      ctx.Event.Data[\"user_email\"].(string),\n                Subject: \"Welcome to Inngest!\",\n                Message: \"...\",\n            })\n        })\n        if err != nil {\n            return err, nil\n        }\n\n        step.Sleep(\"wait-for-the-future\", 4 * time.Hour)\n\n        _, err = step.Run(\"do-some-work-in-the-future\", func(ctx *inngest.StepContext) error {\n            // Code here runs in the future automatically.\n            return nil, nil\n        })\n        return err, nil\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing File Management Tools with AgentKit\nDESCRIPTION: Creation of a createOrUpdateFiles tool using AgentKit's createTool() function to enable file operations in the E2B sandbox environment.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/cursor-agentkit-e2b.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAgent, anthropic, createTool } from \"@inngest/agent-kit\"\n\nconst agent = createAgent({\n    name: \"Coding Agent\",\n    description: \"An expert coding agent\",\n    system: `You are a coding agent help the user to achieve the described task.\n\n    When running commands, keep in mind that the terminal is non-interactive, remind to use the '-y' flag when running commands.\n\n    Once the task completed, you should return the following information:\n    <task_summary>\n    </task_summary>\n\n    Think step-by-step before you start the task.\n    `,\n    model: anthropic({\n    model: \"claude-3-5-sonnet-latest\",\n    max_tokens: 4096,\n    }),\n    tools: [\n    // create or update file\n    createTool({\n        name: \"createOrUpdateFiles\",\n        description: \"Create or update files in the sandbox\",\n        parameters: z.object({\n        files: z.array(\n            z.object({\n            path: z.string(),\n            content: z.string(),\n            })\n        ),\n        }),\n        handler: async ({ files }, { network }) => {\n        const sandbox = getSandbox(network);\n        try {\n            await Promise.all(\n                files.map((file) => sandbox?.files.write(file.path, file.content)\n            );\n            return `Files created or updated: ${files.map((f) => f.path).join(\", \")}`;\n        } catch (e) {\n            console.error(\"error\", e);\n            return \"Error: \" + e;\n        }\n        },\n    }),\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Next.js Root Layout Component\nDESCRIPTION: Initial setup of the required root layout component in Next.js App Router. This component serves as the wrapper for all pages in the application.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/migrating-from-vite-to-nextjs.mdx#2025-04-10_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting to a Multi-Step Function in Go\nDESCRIPTION: Example showing how to convert a simple Go Inngest function into a multi-step function by adding the step package and wrapping the email sending operation with step.Run() for independent retries.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/multi-step-functions.mdx#2025-04-10_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/inngest/inngest-go\"\n    \"github.com/inngest/inngest-go/step\"\n)\n\ninngestgo.CreateFunction(\n    inngestgo.FunctionOpts{\n        ID: \"activation-email\",\n    },\n    inngestgo.EventTrigger(\"app/user.created\"),\n    func(ctx *inngestgo.Context) (any, error) {\n        _, err := step.Run(\"send-welcome-email\", func() (any, error) {\n            return nil, sendEmail(ctx.Event.Data[\"user\"].(map[string]interface{})[\"email\"].(string), \"welcome\")\n        })\n        if err != nil {\n            return err\n        }\n        return nil, nil\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Sending Single Event in TypeScript\nDESCRIPTION: Demonstrates how to send a single event to Inngest using the client. The event includes a name and data payload with cart information and user account details.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/events/index.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inngest } from \"../inngest/client\";\n\n// This sends an event to Inngest.\nawait inngest.send({\n  // The event name\n  name: \"storefront/cart.checkout.completed\",\n  // The event's data\n  data: {\n    cartId: \"ed12c8bde\",\n    itemIds: [\"9f08sdh84\", \"sdf098487\", \"0fnun498n\"],\n    account: {\n      id: 123,\n      email: \"test@example.com\",\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Single Event in TypeScript\nDESCRIPTION: Demonstrates how to send a single event to Inngest using the client. The event includes a name and data payload with cart information and user account details.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/events/index.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inngest } from \"../inngest/client\";\n\n// This sends an event to Inngest.\nawait inngest.send({\n  // The event name\n  name: \"storefront/cart.checkout.completed\",\n  // The event's data\n  data: {\n    cartId: \"ed12c8bde\",\n    itemIds: [\"9f08sdh84\", \"sdf098487\", \"0fnun498n\"],\n    account: {\n      id: 123,\n      email: \"test@example.com\",\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Page Description Export\nDESCRIPTION: Exports the page description as a constant string explaining the fan-out pattern functionality in Inngest.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/fan-out-jobs.mdx#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const description = 'How to use the fan-out pattern with Inngest to trigger multiple functions from a single event.'\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of sleepUntil() in Inngest (TypeScript)\nDESCRIPTION: Demonstrates an incorrect use of sleepUntil() with a dynamically calculated date. This approach can lead to inconsistent behavior across function invocations.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/multi-step-functions.mdx#2025-04-10_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// ❌ Bad\nconst tomorrow = new Date();\ntomorrow.setDate(tomorrow.getDate() + 1);\nawait step.sleepUntil(\"wait-until-tomorrow\", tomorrow);\n```\n\n----------------------------------------\n\nTITLE: Configuring Inngest Client with Branch Environment in Python\nDESCRIPTION: Example showing how to initialize the Inngest client with branch environment configuration in Python using environment variables.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/platform/environments.mdx#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport inngest\n\ninngest_client = inngest.Inngest(\n    app_id=\"flask_example\",\n  env=os.getenv(\"BRANCH\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Clerk Webhook Transform Function\nDESCRIPTION: A simple TypeScript transform function that converts Clerk webhook payloads to the Inngest event format by setting the event name with a clerk/ prefix and copying the data field.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/platform/webhooks.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction transform(evt, headers = {}, queryParams = {}) {\n  return {\n    name: `clerk/${evt.type}`,\n    data: evt.data,\n    // You can optionally set ts using data from the raw json payload\n    // to explicitly set the timestamp of the incoming event.\n    // If ts is not set, it will be automatically set to the time the request is received.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Inngest using Go\nDESCRIPTION: This snippet shows how to create a persistent connection to Inngest using Go, including defining an event structure, creating a function, and establishing the connection.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/setup/connect.mdx#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype UserCreatedEvent struct {\n\tName string\n\tData struct {\n\t\tUserID string `json:\"user_id\"`\n\t}\n}\n\nfunc main() {\n\tctx := context.Background()\n\n\tapp, err := inngestgo.NewClient(inngestgo.ClientOpts{\n\t\tAppID:      \"my-app\",\n\t\tLogger:     logger.StdlibLogger(ctx),\n\t\tAppVersion: nil, // Optional, defaults to the git commit SHA\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tf := inngestgo.CreateFunction(\n    app,\n\t\tinngestgo.FunctionOpts{ID: \"handle-signup\", Name: \"Handle signup\"},\n\t\tinngestgo.EventTrigger(\"user.created\", nil),\n\t\tfunc(ctx context.Context, input inngestgo.Input[UserCreatedEvent]) (any, error) {\n\t\t\tfmt.Println(\"Function called\")\n\t\t\treturn map[string]any{\"success\": true}, nil\n\t\t},\n\t)\n\n\tfmt.Println(\"Worker: connecting\")\n\n\tws, err := inngestgo.Connect(ctx, inngestgo.ConnectOpts{\n\t\tInstanceID: inngestgo.Ptr(\"example-worker\"),\n\t\tApps:       []inngestgo.Handler{\n      app,\n    },\n\t})\n\tif err != nil {\n\t\tfmt.Printf(\"ERROR: %#v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\n  defer func(ws connect.WorkerConnection) {\n\t\t<-ctx.Done()\n\t\terr := ws.Close()\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"could not close connection: %s\\n\", err)\n\t\t}\n\t}(ws)\n}\n```\n\n----------------------------------------\n\nTITLE: Event Type Definition with Record Type\nDESCRIPTION: Demonstrates how to define event types using TypeScript Record type for mapping event names to their data structures.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/client/create.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventSchemas, Inngest } from \"inngest\";\n\ntype Events = {\n  \"app/account.created\": {\n    data: {\n      userId: string;\n    };\n  };\n  \"app/subscription.started\": {\n    data: {\n      userId: string;\n      planId: string;\n    };\n  };\n};\n\nexport const inngest = new Inngest({\n  schemas: new EventSchemas().fromRecord<Events>(),\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Page Title for New Run Traces View in JavaScript\nDESCRIPTION: This code snippet exports a constant variable 'title' that defines the page title for the new run traces view. It's likely used in the website's routing or page rendering system.\nSOURCE: https://github.com/inngest/website/blob/main/content/changelog/2025-03-07-new-runs-view.mdx#2025-04-10_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const title = \"New Run Traces View\";\n```\n\n----------------------------------------\n\nTITLE: Adding Wait for Event Step in Python\nDESCRIPTION: This code snippet demonstrates how to add a step.wait_for_event() method in Python to wait for a post creation event after sending the welcome email.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/multi-step-functions.mdx#2025-04-10_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport inngest\nfrom src.inngest.client import inngest_client\n\n@inngest_client.create_function(\n    fn_id=\"activation-email\",\n    trigger=inngest.TriggerEvent(event=\"app/user.created\"),\n)\nasync def fn(\n    ctx: inngest.Context,\n    step: inngest.Step,\n) -> None:\n    await step.run(\"send-welcome-email\", lambda: sendEmail({\n        \"email\": ctx.event.user.email,\n        \"template\": \"welcome\"\n    }))\n\n    # Wait for an \"app/post.created\" event\n    post_created = await step.wait_for_event(\"wait-for-post-creation\", {\n        \"event\": \"app/post.created\",\n        \"match\": \"data.user.id\",  # the field \"data.user.id\" must match\n        \"timeout\": \"24h\",  # wait at most 24 hours\n    })\n```\n\n----------------------------------------\n\nTITLE: Integrating Inngest with Fastify (TypeScript)\nDESCRIPTION: Demonstrates how to serve Inngest functions within a Fastify app using either the inngestFastify plugin or a custom route with the serve function.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/serving-inngest-functions.mdx#2025-04-10_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport Fastify from \"fastify\";\nimport { fastifyPlugin } from \"inngest/fastify\";\nimport { inngest, fnA } from \"./inngest\";\n\nconst fastify = Fastify();\n\nfastify.register(fastifyPlugin, {\n  client: inngest,\n  functions: [fnA],\n  options: {},\n});\n\nfastify.listen({ port: 3000 }, function (err, address) {\n  if (err) {\n    fastify.log.error(err);\n    process.exit(1);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Inngest SDK Debug Endpoint\nDESCRIPTION: A curl command to query the Inngest SDK debug endpoint, which returns diagnostic information about the server configuration. The example includes piping the output to jq for better formatting.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/dev-server.mdx#2025-04-10_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -s http://localhost:3000/api/inngest | jq\n{\n  \"message\": \"Inngest endpoint configured correctly.\",\n  \"hasEventKey\": false,\n  \"hasSigningKey\": false,\n  \"functionsFound\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Job Posting Front Matter in Markdown\nDESCRIPTION: YAML front matter block defining metadata for the job posting including title, location, visibility status and posting date.\nSOURCE: https://github.com/inngest/website/blob/main/pages/careers/_roles/front-end-engineer.mdx#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nhidden: true\ntitle: Front-end Engineer\nlocation: Remote - Americas/Europe\ndate: 2022-12-21\n---\n```\n\n----------------------------------------\n\nTITLE: Basic Event Handler with Different Argument Types in TypeScript\nDESCRIPTION: A version of the event handler that attempts to handle different argument types for different events using union types, which works but provides limited type information to users.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/building-educational-typescript-tooling.mdx#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst on = (\n  event: \"server.start\" | \"server.stop\",\n  fn: (arg: boolean | Date) => any\n) => {\n  // ...\n};\n\non(\"server.start\", (success) => {\n//                     ^?\n```\n\n----------------------------------------\n\nTITLE: Configuring the Inngest Envelop plugin with GraphQL Yoga\nDESCRIPTION: An example showing how to set up and configure the Inngest Envelop plugin with a GraphQL Yoga server. This demonstrates creating a schema, adding the plugin, and starting the server.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/instrumenting-graphql.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useInngest } from \"envelop-plugin-inngest\";\nimport { createSchema, createYoga } from \"graphql-yoga\";\nimport { Inngest } from \"inngest\";\n\nconst inngest = new Inngest({ id: \"my-app\" });\n\n// Provide your schema\nconst yoga = createYoga({\n  schema: createSchema({\n    typeDefs: /* GraphQL */ `\n      type Query {\n        greetings: String!\n      }\n    `,\n    resolvers: {\n      Query: {\n        greetings: () => \"Hello World!\",\n      },\n    },\n  }),\n\n  // Add the plugin to the server. RedwoodJS users can use the\n  // `extraPlugins` option instead.\n  plugins: [useInngest({ inngestClient: inngest })],\n});\n\n// Start the server and explore http://localhost:4000/graphql\nconst server = createServer(yoga);\n\nserver.listen(4000, () => {\n  console.info(\"Server is running on http://localhost:4000/graphql\");\n});\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Branch Environment Configuration in Python\nDESCRIPTION: Example of configuring Inngest client with branch environment for specific platforms like Netlify in Python.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/platform/environments.mdx#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport inngest\n\ninngest_client = inngest.Inngest(\n    app_id=\"flask_example\",\n  env=os.getenv(\"BRANCH\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Github Webhook Transform Using Headers\nDESCRIPTION: A JavaScript transform function that processes Github webhook events, using the X-Github-Event header to determine the event type and prefixing it with 'github.' to create the Inngest event name.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/platform/webhooks.mdx#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction transform(evt, headers = {}, queryParams = {}) {\n  const name = headers[\"X-Github-Event\"];\n  return {\n    // Use the event as the data without modification\n    data: evt,\n    // Add an event name, prefixed with \"github.\" based off of the X-Github-Event data\n    name: \"github.\" + name.trim().replace(\"Event\", \"\").toLowerCase(),\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sleep Function in Inngest v2\nDESCRIPTION: Shows how to use the step.sleep() function in Inngest v2, using string formats and milliseconds to specify sleep duration.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/functions/step-sleep.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Sleep for 30 minutes\nawait step.sleep(\"30m\");\nawait step.sleep(\"30 minutes\");\nawait step.sleep(30 * 60 * 1000);\n```\n\n----------------------------------------\n\nTITLE: Integrating Inngest with Koa Framework\nDESCRIPTION: Configures Inngest with Koa by creating a handler for the '/api/inngest' endpoint. Requires bodyParser middleware to parse incoming JSON payloads. Available in Inngest v3.6.0 and above.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/serving-inngest-functions.mdx#2025-04-10_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from \"inngest/koa\";\nimport Koa from \"koa\";\nimport bodyParser from \"koa-bodyparser\";\nimport { functions, inngest } from \"./inngest\";\n\nconst app = new Koa();\napp.use(bodyParser()); // make sure we're parsing incoming JSON\n\nconst handler = serve({\n  client: inngest,\n  functions,\n});\n\napp.use((ctx) => {\n  if (ctx.request.path === \"/api/inngest\") {\n    return handler(ctx);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Frontmatter Redirect for Ocoya Case Study\nDESCRIPTION: YAML frontmatter configuration that defines a redirect path and associated metadata for the Ocoya customer story page. Includes redirect URL, page heading, descriptive subtitle, featured image path, and publication date.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/ocoya-case-study.mdx#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\n# This redirects directly to the Ocoya customer story page\nredirect: /customers/ocoya\nheading: \"Customer story: Ocoya\"\nsubtitle: Learn how Ocoya uses Inngest to develop and deliver their world class product in record time, with end-to-end local testing.\nimage: /assets/blog/ocoya-case-study.png\ndate: 2023-04-07\n---\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of sleep_until() in Inngest (Python)\nDESCRIPTION: Illustrates the proper way to use sleep_until() with a static date obtained from a step.run() call in Python. This ensures consistent behavior across function invocations.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/multi-step-functions.mdx#2025-04-10_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# ✅ Good\nuser_birthday = await step.run(\"get-user-birthday\", async () => {\n  user = await get_user();\n  return user.birthday; # Date\n});\n\nawait step.sleep_until(\"wait-for-user-birthday\", user_birthday);\n```\n\n----------------------------------------\n\nTITLE: Serving Inngest Functions with DigitalOcean Functions (TypeScript)\nDESCRIPTION: Demonstrates how to configure and serve Inngest functions using DigitalOcean serverless functions. It includes setting up the serve function with the required serveHost and servePath parameters.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/serving-inngest-functions.mdx#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from \"inngest/digitalocean\";\nimport { inngest } from \"./src/inngest/client\";\nimport fnA from \"./src/inngest/fnA\"; // Your own function\n\nconst main = serve({\n  client: inngest,\n  functions: [fnA],\n  // Your digitalocean hostname.  This is required otherwise your functions won't work.\n  serveHost: \"https://faas-sfo3-your-url.doserverless.co\",\n  // And your DO path, also required.\n  servePath: \"/api/v1/web/fn-your-uuid/inngest\",\n});\n\n// IMPORTANT: Makes the function available as a module in the project.\n// This is required for any functions that require external dependencies.\nmodule.exports.main = main;\n```\n\n----------------------------------------\n\nTITLE: Accessing Event Data in Inngest Python Functions\nDESCRIPTION: Demonstrates the structure of the event payload object accessible through ctx.event in Inngest Python functions. It shows the main properties of an event, including data, id, name, and timestamp.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/functions/create.mdx#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n{\n  \"data\": dict[str, object],  # The event payload data\n  \"id\": str,\n  \"name\": str,\n  \"ts\": int  # Time (Unix millis) the event was received by the Inngest server\n}\n```\n\n----------------------------------------\n\nTITLE: Function Reference with Schema Validation\nDESCRIPTION: Shows how to use Zod schemas to add type safety to function references for both input and output data.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/functions/references.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { referenceFunction } from \"inngest\";\nimport { z } from \"zod\";\n\nawait step.invoke(\"start-process\", {\n  function: referenceFunction({\n    functionId: \"some-fn\",\n    appId: \"some-app\",\n    schemas: {\n      data: z.object({\n        foo: z.string(),\n      }),\n      return: z.object({\n        success: z.boolean(),\n      }),\n    },\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Shutdown Signal Handling for Inngest Connect\nDESCRIPTION: Examples showing how to customize shutdown signal handling for Inngest Connect in TypeScript and Go. This allows customizing which signals trigger the worker shutdown process.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/setup/connect.mdx#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// You can explicitly configure which signals the SDK should\n// listen for by an array of signals to `handleShutdownSignals`:\nconst connection = await connect({\n  apps: [...],\n  // ex. Only listen for SIGTERM, or pass an empty array to listen to no signals\n  handleShutdownSignals: ['SIGTERM'],\n})\n```\n\nLANGUAGE: go\nCODE:\n```\n// The Go SDK must receive a Context object that will be notified\n// when the correct signals are received. Use signal.NotifyContext:\nctx, cancel := signal.NotifyContext(context.Background(), syscall.SIGINT, syscall.SIGTERM)\ndefer cancel()\n\n// Later in your function - pass the context to the connect function:\nws, err := inngestgo.Connect(ctx, inngestgo.ConnectOpts{\n    InstanceID: inngestgo.Ptr(\"example-worker\"),\n    Apps:       []inngestgo.Client{client},\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Metrics Reporter for TimescaleDB\nDESCRIPTION: Implementation of a custom metrics reporter that extends the tally StatsReporter interface. This code handles counter metrics by capturing the metric name, tags, and value, then recording them to TimescaleDB while adding the hostname as an additional tag.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/2023-11-29-metrics-with-timescale.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype metricsReporter struct {\n\tcachedCounters *CachedCounters\n}\n\nfunc (r metricsReporter) ReportCounter(name string, tags map[string]string, value int64) {\n\tctx := context.Background()\n\tnow := time.Now()\n\n\thost, err := os.Hostname()\n\tif err != nil {\n\t\tlog.From(ctx).Err(err).Msg(\"failed to retrieve host value\")\n\t\treturn\n\t}\n\n\tval, err := updateCounter(r.cachedCounters, &CounterMetric{Name: name, Tags: tags, Value: value})\n\tif err != nil {\n\t\tlog.From(ctx).\n\t\t\tErr(err).\n\t\t\tStr(\"metric\", name).\n\t\t\tInt64(\"value\", value).\n\t\t\tInterface(\"tags\", tags).\n\t\t\tMsg(fmt.Sprintf(\"failed to update counter metric: %s\", name))\n\t\treturn\n\t}\n\n\ttagsWithHost := mergeTags(tags, map[string]string{\"host\": host})\n\n\tmetric := metricspb.Counter{\n\t\tName:  name,\n\t\tTags:  tagsWithHost,\n\t\tValue: val,\n\t\tTs:    timestamppb.New(now),\n\t}\n\n  // recordCounter will write the data to TimescaleDB\n\tif err := recordCounter(ctx, &metric); err != nil {\n\t\tlog.From(ctx).\n\t\t\tErr(err).\n\t\t\tStr(\"metric\", name).\n\t\t\tInt64(\"value\", value).\n\t\t\tInterface(\"tags\", tags).\n\t\t\tMsg(fmt.Sprintf(\"error recording counter metric: %s\", name))\n\t}\n}\n\n// more code...\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-discovery in Inngest Dev Server\nDESCRIPTION: A command demonstrating how to start the Inngest Dev Server with auto-discovery disabled. This is useful when you want to manually specify the app URLs.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/dev-server.mdx#2025-04-10_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx inngest-cli@latest dev --no-discovery -u http://localhost:3000/api/inngest\n```\n\n----------------------------------------\n\nTITLE: Implementing a Process Audio Function in Python with Inngest\nDESCRIPTION: The Python equivalent of the audio processing function with identical step IDs and functionality. This demonstrates how Inngest enables cross-language compatibility, allowing workflows to continue execution even after being migrated between programming languages.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/migrating-across-clouds-with-zero-downtime.mdx#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@inngest_client.create_function(\n    fn_id=\"process-audio\",\n    trigger=inngest.TriggerEvent(event=\"podcast/audio.uploaded\"),\n)\nasync def fn(ctx: inngest.Context, step: inngest.Step) -> None:\n    async def transcode_audio() -> str:\n        filename = download(ctx.event.data[\"url\"])\n        return await transcode(filename, 'aac')\n    new_file_url = await step.run(\"transcode-audio\", transcode_audio)\n\n    async def generate_transcript():\n        return # ... business logic omitted ...\n    transcript = await step.run(\"generate-transcript\", generate_transcript)\n\n    async def summarize():\n        return # ...\n    summary = await step.run(\"summarize-with-ai\", summarize)\n\n    async def save_to_db():\n        return # ...\n    await step.run(\"save-to-db\", save_to_db)\n```\n\n----------------------------------------\n\nTITLE: Updating Sanity Video Resource with Transcript (TypeScript)\nDESCRIPTION: This snippet shows how to update a Sanity video resource with the generated transcript text and SRT file using the Sanity write client.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/nextjs-trpc-inngest.md#2025-04-10_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait step.run(\"Update Video Resource with Transcript\", async () => {\n  return await sanityWriteClient\n    .patch(event.data.videoResourceId)\n    .set({\n      transcript: {\n        text: transcript.data.transcript.text,\n        srt: transcript.data.transcript.srt,\n      },\n    })\n    .commit();\n});\n```\n\n----------------------------------------\n\nTITLE: Bun Server Integration\nDESCRIPTION: Integration with Bun.serve() for creating a lightweight Inngest server.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/serving-inngest-functions.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from \"inngest/bun\";\nimport { functions, inngest } from \"./inngest\";\n\nBun.serve({\n  port: 3000,\n  fetch(request: Request) {\n    const url = new URL(request.url);\n\n    if (url.pathname === \"/api/inngest\") {\n      return serve({ client: inngest, functions })(request);\n    }\n\n    return new Response(\"Not found\", { status: 404 });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing User-Scoped Concurrency Control in Inngest\nDESCRIPTION: Example of using Inngest's concurrency control to limit simultaneous API calls per user, ensuring fair resource distribution.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/ai-in-production-managing-capacity-with-flow-control.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  {\n    id: \"ai-generate-summary\",\n    concurrency: {\n      scope: \"fn\",\n      key: \"event.data.user_id\",\n      limit: 1,\n    }\n  },\n  { event: \"ai/summary.requested\" },\n  async ({ event, step }) => {\n    /* call OpenAI */\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Python implementation using the result library (Rust-inspired)\nDESCRIPTION: A Python implementation using the 'result' library to create a Rust-like Result type for error handling. This leverages pattern matching and provides a more structured approach, but introduces external dependencies and new syntax patterns.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/python-errors-as-values.mdx#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport result\n\n# Define a function that returns a Result\ndef get_user(user_id: str) -> result.Result[User, Exception]:\n    rows = users.find(user_id=user_id)\n    if len(rows) == 0:\n        return result.Error(Exception(\"user not found\"))\n\n    return result.Ok(rows[0])\n\ndef rename_user(user_id: str, name: str) -> result.Result[User, Exception]:\n    # Consume the function\n    match get_user(user_id):\n        case result.Ok(user):\n            pass\n        case result.Err(err):\n            return result.Err(err)\n\n    user.name = name\n    return result.Ok(user)\n```\n\n----------------------------------------\n\nTITLE: Cross-App Function Reference\nDESCRIPTION: Demonstrates how to reference a function from a different application by specifying both functionId and appId.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/functions/references.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { referenceFunction } from \"inngest\";\n\nawait step.invoke(\"start-process\", {\n  function: referenceFunction({\n    functionId: \"some-fn\",\n    appId: \"some-app\",\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Readiness Probe for Inngest Health Check\nDESCRIPTION: This YAML snippet demonstrates how to configure a Kubernetes readiness probe for an Inngest app. It checks the /ready endpoint every 10 seconds, with initial delay and failure thresholds set.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/setup/connect.mdx#2025-04-10_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nreadinessProbe:\n  httpGet:\n    path: /ready\n  initialDelaySeconds: 3\n  periodSeconds: 10\n  successThreshold: 3\n  failureThreshold: 3\n```\n\n----------------------------------------\n\nTITLE: Integrating Inngest with Nuxt Framework (v3)\nDESCRIPTION: Implements Inngest in a Nuxt application by creating a server route at '/api/inngest' that handles all Inngest-related requests. Uses defineEventHandler for Nuxt's server middleware.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/serving-inngest-functions.mdx#2025-04-10_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from \"inngest/nuxt\";\nimport { inngest } from \"~~/inngest/client\";\nimport fnA from \"~~/inngest/fnA\"; // Your own function\n\nexport default defineEventHandler(\n  serve({\n    client: inngest,\n    functions: [fnA],\n  })\n);\n```\n\n----------------------------------------\n\nTITLE: Astro Framework Integration\nDESCRIPTION: Implementation of Inngest handler for Astro framework in the API routes.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/serving-inngest-functions.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from \"inngest/astro\";\nimport { functions, inngest } from \"../../inngest\";\n\nexport const { GET, POST, PUT } = serve({\n  client: inngest,\n  functions,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Function with v0.8\nDESCRIPTION: Example of creating and registering a function using the v0.8 SDK. The function now requires a client instance as the first parameter and returns an error. The ID field is required in FunctionOpts.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/go/migrations/v0.7-to-v0.8.mdx#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n_, err := inngestgo.CreateFunction(\n\tclient,\n\tinngestgo.FunctionOpts{ID: \"my-fn\"},\n\tinngestgo.EventTrigger(\"my-event\", nil),\n\tfunc(\n\t\tctx context.Context,\n\t\tinput inngestgo.Input[inngestgo.GenericEvent[any, any]],\n\t) (any, error) {\n\t\treturn \"Hello, world!\", nil\n\t},\n)\n```\n\n----------------------------------------\n\nTITLE: Using step.waitForEvent() to Wait for Events in Inngest Functions (v3)\nDESCRIPTION: Examples of using step.waitForEvent() in Inngest v3 to wait for specific events with different matching strategies. The first example waits for an invoice approval by matching invoice IDs, while the second waits for a user subscription with conditional matching using an expression.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/functions/step-wait-for-event.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Wait 7 days for an approval and match invoice IDs\nconst approval = await step.waitForEvent(\"wait-for-approval\", {\n  event: \"app/invoice.approved\",\n  timeout: \"7d\",\n  match: \"data.invoiceId\",\n});\n\n// Wait 30 days for a user to start a subscription\n// on the pro plan\nconst subscription = await step.waitForEvent(\"wait-for-subscription\", {\n  event: \"app/subscription.created\",\n  timeout: \"30d\",\n  if: \"event.data.userId == async.data.userId && async.data.billing_plan == 'pro'\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Cloudflare Workers AI Middleware in TypeScript\nDESCRIPTION: This snippet demonstrates how to create middleware for integrating Cloudflare Workers AI with Inngest functions. It accesses the Cloudflare AI environment and adds it to the function context.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/middleware/examples.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InngestMiddleware } from \"inngest\";\n\ninterface Env {\n  // If you set another name in wrangler.toml as the value for 'binding',\n  // replace \"AI\" with the variable name you defined.\n  AI: Ai;\n}\n\nexport const cloudflareMiddleware = new InngestMiddleware({\n  name: \"Inngest: Workers AI\",\n  init: () => {\n    return {\n      onFunctionRun: ({ reqArgs }) => {\n        const [ctx] = reqArgs as [Request, Env];\n        const ai = ctx.env.AI\n\n        return {\n          transformInput: () => {\n            return { ctx: { ai } };\n          },\n        };\n      },\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Searching for Errors with CEL Expression\nDESCRIPTION: CEL expression that can be used to search for specific errors based on error name and message. This query filters function runs by the exact error details.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/platform/monitor/inspecting-function-runs.mdx#2025-04-10_snippet_2\n\nLANGUAGE: text\nCODE:\n```\noutput.name == \"NonRetriableError\" && output.message == \"Failed to import data\"\n```\n\n----------------------------------------\n\nTITLE: Async Middleware Initialization in TypeScript\nDESCRIPTION: Shows how to initialize middleware with async operations like database connections.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/middleware/create.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nnew InngestMiddleware({\n  name: \"Example Middleware\",\n  async init() {\n    const db = await connectToDatabase();\n\n    return {};\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Rewriting Gateway Endpoint for Self-Hosted Inngest\nDESCRIPTION: This TypeScript snippet shows how to dynamically rewrite the gateway URL for self-hosted Inngest installations. It modifies the WebSocket gateway URL based on the environment.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/setup/connect.mdx#2025-04-10_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst connection = await connect({\n  apps: [...],\n  rewriteGatewayEndpoint: (url) => { // ex. \"wss://gw2.connect.inngest.com/v0/connect\"\n    // If not running in dev mode, return\n    if (!process.env.INNGEST_DEV) {\n      const clusterUrl = new URL(url);\n      clusterUrl.host = 'my-cluster-host:8289';\n      return clusterUrl.toString();\n    }\n    return url;\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating Inngest with H3 Framework (TypeScript)\nDESCRIPTION: Demonstrates how to use Inngest with the H3 framework. It includes setting up a simple H3 server that hosts and serves an Inngest function.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/serving-inngest-functions.mdx#2025-04-10_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, eventHandler, toNodeListener } from \"h3\";\nimport { serve } from \"inngest/h3\";\nimport { createServer } from \"node:http\";\nimport { inngest } from \"./inngest/client\";\nimport fnA from \"./inngest/fnA\";\n\nconst app = createApp();\napp.use(\n  \"/api/inngest\",\n  eventHandler(\n    serve({\n      client: inngest,\n      functions: [fnA],\n    })\n  )\n);\n\ncreateServer(toNodeListener(app)).listen(process.env.PORT || 3000);\n```\n\n----------------------------------------\n\nTITLE: Handling Step Errors in Python Functions\nDESCRIPTION: Example of catching and handling StepError in Python Inngest functions. Shows how to implement custom error handling after step retries are exhausted.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/error-retries/inngest-errors.mdx#2025-04-10_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@client.create_function(\n    fn_id=\"import-item-data\",\n    retries=0,\n    trigger=inngest.TriggerEvent(event=\"store/import.requested\"),\n)\nasync def fn_async(\n    ctx: inngest.Context,\n    step: inngest.Step,\n) -> None:\n    def foo() -> None:\n        raise ValueError(\"foo\")\n\n    try:\n        step.run(\"foo\", foo)\n    except inngest.StepError:\n        raise MyError(\"I am new\")\n```\n\n----------------------------------------\n\nTITLE: Refactoring serve() function in Inngest SDK v3\nDESCRIPTION: Illustrates the changes in the serve() function between v2 and v3. V3 uses an object parameter instead of separate arguments for better option discoverability.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/migration.mdx#2025-04-10_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from \"inngest/next\";\nimport { inngest, functions } from \"~/inngest\";\n\nexport default serve({\n  client: inngest,\n  functions,\n  // ...options\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from \"inngest/next\";\nimport { inngest, functions } from \"~/inngest\";\n\nexport default serve(inngest, functions, {\n  // ...options\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Domain Verification with Serverless Function in Next.js\nDESCRIPTION: This code implements a domain verification workflow using a traditional Next.js Serverless Function that runs on a CRON schedule. It retrieves pending domains, checks DNS records, and handles notifications to users. The approach has limitations with error handling, potential timeouts, and complex state management.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/nextjs-serverless-vs-durable-functions.mdx#2025-04-10_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { intervalToDuration } from \"date-fns\";\n\nimport prisma from \"./prisma-client\";\nimport {\n  resend,\n  FROM,\n  DomainConfiguredEmailTemplate,\n  DomainFailedConfigureEmailTemplate,\n} from \"./resend\";\nimport { notifyFailureToTeam } from \"./slack\";\nimport { checkDNSRecord } from \"./domain-verification\";\n\nexport async function GET(_request: Request) {\n  const domains = await prisma.domains.findMany({\n    where: {\n      status: \"pending\",\n    },\n    include: {\n       account: true\n    }\n  });\n\n  for (let index = 0; index < domains.length; index++) {\n    const domain = domains[index];\n\n    const {\n\t    configured,\n\t    error: domainConfigurationError\n\t  } = await checkDNSRecord(domain.domain);\n\n    if (configured) {\n      const { error } = await resend.emails.send({\n        from: FROM,\n        to: [domain.account.email],\n        subject: \"Start sending emails now!\",\n        react: DomainConfiguredEmailTemplate({ account: domain.account }),\n      });\n\n      if (!error) {\n        await prisma.domains.update({\n          where: {\n            id: domain.id,\n          },\n          data: {\n            status: \"configured\",\n          },\n        });\n      } else {\n        await notifyFailureToTeam(domain, error);\n      }\n    } else {\n      const { hours } = intervalToDuration({\n        start: domain.createdAt,\n        end: domain.lastCheckedAt,\n      });\n\n\t\t\t// we stop checking a domain after 72h as DNS is probably\n\t\t\t//  up to date but misconfigured.\n      if (hours >= 72) {\n        await notifyFailureToTeam(domain, domainConfigurationError);\n\n        const { error } = await resend.emails.send({\n          from: FROM,\n          to: [domain.account.email],\n          subject: \"We coudn't configure your domain.\",\n          react: DomainFailedConfigureEmailTemplate({ account: domain.account }),\n        });\n\n        if (!error) {\n          await prisma.domains.update({\n            where: {\n              id: domain.id,\n            },\n            data: {\n              status: \"configured\",\n            },\n          });\n        } else {\n          await notifyFailureToTeam(domain, error);\n        }\n      } else {\n\t      await prisma.domains.update({\n            where: {\n              id: domain.id,\n            },\n            data: {\n              lastCheckedAt: new Date(),\n            },\n          });\n      }\n    }\n  }\n\n  return new Response(`done.`);\n}\n\nexport const dynamic = \"force-dynamic\";\n```\n\n----------------------------------------\n\nTITLE: Defining Pydantic Event Models for Inngest in Python\nDESCRIPTION: Creates Pydantic models for event data and the event itself by inheriting from the BaseEvent class. This example defines a 'post.upvoted' event with a count field that will be validated at runtime.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/guides/pydantic.mdx#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass PostUpvotedEventData(pydantic.BaseModel):\n    count: int\n\nclass PostUpvotedEvent(BaseEvent):\n    data: PostUpvotedEventData\n    name: typing.ClassVar[str] = \"forum/post.upvoted\"\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js Dependency with npm\nDESCRIPTION: Command to install Next.js as a dependency for your project using npm package manager.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/migrating-from-vite-to-nextjs.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install next\n```\n\n----------------------------------------\n\nTITLE: Basic Event Handler Implementation in TypeScript\nDESCRIPTION: A simple implementation of an event handler function that accepts a string event name and a callback function. This provides basic functionality but lacks type safety and discoverability.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/building-educational-typescript-tooling.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst on = (event: string, fn: (...args: any[]) => any) => {\n  // ...\n};\n\non(\"event\", () => console.log(\"Something happened\"))\n```\n\n----------------------------------------\n\nTITLE: Corrected Function Example in Python\nDESCRIPTION: The fixed version of the Python function, properly implementing the initialization code within a step to ensure it only runs once.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/working-with-loops.mdx#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport inngest\nfrom src.inngest.client import inngest_client\n\n@inngest_client.create_function(\n    id=\"simple-function\",\n    trigger=inngest.TriggerEvent(event=\"test/simple.function\")\n)\nasync def simple_function(ctx: inngest.Context, step: inngest.Step):\n    await step.run(\"hello\", lambda: print(\"hello\"))\n\n    await step.run(\"a\", lambda: print(\"a\"))\n    await step.run(\"b\", lambda: print(\"b\")) \n    await step.run(\"c\", lambda: print(\"c\"))\n\n# hello\n# a\n# b\n# c\n```\n\n----------------------------------------\n\nTITLE: Basic Function Testing\nDESCRIPTION: Examples of basic function testing using t.execute() for successful and error cases.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/testing/index.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntest(\"returns a greeting\", async () => {\n  const { result } = await t.execute();\n  expect(result).toEqual(\"Hello World!\");\n});\n\ntest(\"throws an error\", async () => {\n  const { error } = await t.execute();\n  expect(error).toContain(\"Some specific error\");\n});\n```\n\n----------------------------------------\n\nTITLE: Updating step.sleepUntil() in Inngest SDK v3\nDESCRIPTION: Demonstrates the syntax change for step.sleepUntil() function between v2 and v3. V3 requires an additional identifier parameter.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/migration.mdx#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nstep.sleepUntil(\"wait-for-user-birthday\", specialDate);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nstep.sleepUntil(specialDate);\n```\n\n----------------------------------------\n\nTITLE: Using Non-Retriable Errors to Prevent Retries in Inngest\nDESCRIPTION: Shows how to use non-retriable errors to stop retry attempts when certain error conditions occur. This is useful for permanent errors where retrying would be futile, like missing user records.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/error-retries/retries.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NonRetriableError } from \"inngest\";\n\ninngest.createFunction(\n  { id: \"user-weekly-digest\" },\n  { event: \"user/weekly.digest.requested\" },\n  async ({ event, step }) => {\n    const user = await step\n      .run(\"get-user-email\", () => {\n        return db.users.findOne(event.data.userId);\n      })\n      .catch((err) => {\n        if (err.name === \"UserNotFoundError\") {\n          throw new NonRetriableError(\"User no longer exists; stopping\");\n        }\n\n        throw err;\n      });\n\n    await step.run(\"send-digest\", () => {\n      return sendDigest(user.email);\n    });\n  },\n);\n```\n\nLANGUAGE: go\nCODE:\n```\ninngestgo.CreateFunction(\n\tinngestgo.FunctionOpts{ID: \"user-weekly-digest\"},\n\tinngestgo.EventTrigger(\"user/weekly.digest.requested\", nil),\n\tfunc(ctx context.Context, input inngestgo.Input[WeeklyDigestRequestedEvent]) (any, error) {\n\t\tuser, err := step.Run(ctx, \"get-user-email\", func(ctx context.Context) (any, error) {\n\t\t\treturn db.Users.FindOne(input.Event.Data.UserID)\n\t\t})\n\t\tif err != nil {\n\t\t\tif stepErr, ok := err.(step.StepError); ok && stepErr.Name == \"UserNotFoundError\" {\n\t\t\t\treturn nil, inngestgo.NoRetryError(fmt.Errorf(\"User no longer exists; stopping\"))\n\t\t\t}\n\t\t\treturn nil, err\n\t\t}\n\n\t\t_, err = step.Run(ctx, \"send-digest\", func(ctx context.Context) (any, error) {\n\t\t\treturn sendDigest(user.(UserType).Email)\n\t\t})\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\treturn nil, nil\n\t},\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom inngest.errors import NonRetriableError\n\n@inngest_client.create_function(\n    fn_id=\"user-weekly-digest\",\n    trigger=inngest.TriggerEvent(event=\"user/weekly.digest.requested\"),\n)\ndef user_weekly_digest(ctx: inngest.Context, step: inngest.StepSync) -> None:\n    try:\n        user = step.run(\"get-user-email\", db.users.find_one, ctx.event.data[\"userId\"])\n    except Exception as err:\n        if err.name == \"UserNotFoundError\":\n            raise NonRetriableError(\"User no longer exists; stopping\")\n        raise\n\n    step.run(\"send-digest\", send_digest, user[\"email\"])\n```\n\n----------------------------------------\n\nTITLE: New Function Creation Pattern in TypeScript\nDESCRIPTION: Demonstrates the new unified approach to creating Inngest functions using inngest.createFunction() in v1.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/migration.mdx#2025-04-10_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inngest } from \"inngest\";\n\nexport const inngest = new Inngest({ name: \"My App\" });\n\nconst singleStepFn = inngest.createFunction(\n  { name: \"Single step\" },\n  { event: \"example/single.step\" },\n  async ({ event, step }) => \"...\"\n);\n\nconst scheduledFn = inngest.createFunction(\n  { name: \"Scheduled\" },\n  { cron: \"0 9 * * MON\" },\n  async ({ event, step }) => \"...\"\n);\n\nconst stepFn = inngest.createFunction(\n  { name: \"Step function\" },\n  { event: \"example/step.function\" },\n  async ({ event, step }) => \"...\"\n);\n```\n\n----------------------------------------\n\nTITLE: Pre-Inngest Sync Logic with Conditional Execution in JSX\nDESCRIPTION: Demonstrates the previous approach to handling different sync triggers with conditional logic, showing the maintenance challenges that arose as the number of sync triggers increased.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/synchronizing-financial-data-from-plaid-and-stripe.mdx#2025-04-10_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n...\nif (['stripe_balance_update', 'plaid_holdings_update', 'plaid_transactions_update', 'plaid_investments_update'].includes(syncTrigger) ) {\n\tawait syncAccounts(...)\n};\n\nif (['stripe_transactions_update', 'plaid_transactions_update'].includes(syncTrigger) ) {\n\tawait syncTransactions(...)\n};\n\nif (['plaid_holdings_update', 'plaid_investments_update'].includes(syncTrigger) ) {\n\tawait syncSecurities(...)\n};\n\nif (['plaid_holdings_update'].includes(syncTrigger) ) {\n\tawait syncHoldings(...)\n};\n\nif (['plaid_investments_update'].includes(syncTrigger) ) {\n\tawait syncInvestments(...)\n};\n...\n```\n\n----------------------------------------\n\nTITLE: Different Ways to Handle step.invoke() Promises in Inngest\nDESCRIPTION: Shows various ways to handle the Promise returned by step.invoke(), including using await, .then() for chaining, and Promise.all() for parallel execution of multiple invocations.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/functions/step-invoke.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Using the \"await\" keyword\nconst result = await step.invoke(\"invoke-function\", {\n  function: someInngestFn,\n  data: { ... },\n});\n\n// Using `then` for chaining\nstep\n  .invoke(\"invoke-function\", { function: someInngestFn, data: { ... } })\n  .then((result) => {\n    // further processing\n  });\n\n// Running multiple invocations in parallel\nPromise.all([\n  step.invoke(\"invoke-first-function\", {\n    function: firstFunctionReference,\n    data: { ... },\n  }),\n  step.invoke(\"invoke-second-function\", {\n    function: secondFn,\n    data: { ... },\n  }),\n]);\n```\n\n----------------------------------------\n\nTITLE: Invoking Functions in Python with Inngest\nDESCRIPTION: Demonstrates how to create and invoke functions using Inngest in Python. It shows the creation of a compute_square function and its invocation from a main_function.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/invoking-functions-directly.mdx#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport inngest\nfrom src.inngest.client import inngest_client\n\n# Some function we'll call\n@inngest_client.create_function(\n    fn_id=\"compute-square\",\n    trigger=inngest.TriggerEvent(event=\"calculate/square\")\n)\nasync def compute_square(ctx: inngest.Context, step: inngest.Step):\n    return {\"result\": ctx.event.data[\"number\"] * ctx.event.data[\"number\"]}  # Result typed as { result: number }\n\n# In this function, we'll call compute_square\n@inngest_client.create_function(\n    fn_id=\"main-function\",\n    trigger=inngest.TriggerEvent(event=\"main/event\")\n)\nasync def main_function(ctx: inngest.Context, step: inngest.Step):\n    square = await step.invoke(\n        \"compute-square-value\",\n        function=compute_square,\n        data={\"number\": 4}  # input data is typed, requiring input if it's needed\n    )\n\n    return f\"Square of 4 is {square['result']}.\"  # square.result is typed as number\n```\n\n----------------------------------------\n\nTITLE: Inngest Dev Server Output Example\nDESCRIPTION: Example output when running the Inngest Dev Server, showing successful startup messages.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/getting-started/nextjs-quick-start.mdx#2025-04-10_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n$ npx inngest-cli@latest dev\n\n12:33PM INF executor > service starting\n12:33PM INF runner > starting event stream backend=redis\n12:33PM INF executor > subscribing to function queue\n12:33PM INF runner > service starting\n12:33PM INF runner > subscribing to events topic=events\n12:33PM INF no shard finder;  skipping shard claiming\n12:33PM INF devserver > service starting\n12:33PM INF devserver > autodiscovering locally hosted SDKs\n12:33PM INF api > starting server addr=0.0.0.0:8288\n\n\n        Inngest dev server online at 0.0.0.0:8288, visible at the following URLs:\n\n         - http://127.0.0.1:8288 (http://localhost:8288)\n\n        Scanning for available serve handlers.\n        To disable scanning run `inngest dev` with flags: --no-discovery -u <your-serve-url>\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Event Types for waitForEvent (v3)\nDESCRIPTION: Shows how to define multiple event types for use with waitForEvent functionality, enabling type-safe event matching across different events.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/typescript.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventSchemas, Inngest } from \"inngest\";\n\ntype UserSignup = {\n  data: {\n    email: string;\n    user_id: string;\n    name: string;\n  };\n};\ntype UserAccountSetupCompleted = {\n  data: {\n    user_id: string;\n  };\n};\ntype Events = {\n  \"user/new.signup\": UserSignup;\n  \"user/account.setup.completed\": UserAccountSetupCompleted;\n};\n\nexport const inngest = new Inngest({\n  id: \"my-app\",\n  schemas: new EventSchemas().fromRecord<Events>(),\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Complex TypeScript Overloads with Inngest AI Wrapper\nDESCRIPTION: Illustrates how to handle complex TypeScript overloads when using Inngest's AI wrapper with Vercel's generateObject function. It shows the need for type casting to ensure compatibility with complex function signatures.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/steps-workflows/step-ai-orchestration.mdx#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateText as vercelGenerateText } from \"ai\";\nimport { openai as vercelOpenAI } from \"@ai-sdk/openai\";\n\nexport const vercelWrapSchema = inngest.createFunction(\n  { id: \"vercel-wrap-generate-object\" },\n  { event: \"vercel/wrap.generate.object\" },\n  async ({ event, step }) => {\n    //\n    // Calling generateObject directly is fine\n    await vercelGenerateObject({\n      model: vercelOpenAI(\"gpt-4o-mini\"),\n      schema: z.object({\n        recipe: z.object({\n          name: z.string(),\n          ingredients: z.array(\n            z.object({ name: z.string(), amount: z.string() }),\n          ),\n          steps: z.array(z.string()),\n        }),\n      }),\n      prompt: \"Generate a lasagna recipe.\",\n    });\n\n    //\n    // step.ai.wrap requires type casting\n    await step.ai.wrap(\n      \"vercel-openai-generateObject\",\n      vercelGenerateObject,\n      {\n        model: vercelOpenAI(\"gpt-4o-mini\"),\n        schema: z.object({\n          recipe: z.object({\n            name: z.string(),\n            ingredients: z.array(\n              z.object({ name: z.string(), amount: z.string() }),\n            ),\n            steps: z.array(z.string()),\n          }),\n        }),\n        prompt: \"Generate a lasagna recipe.\",\n      } as any,\n    );\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Client Component with Stream Termination Handling\nDESCRIPTION: This React component shows how to handle stream termination in a client component. It reads the stream data and watches for a specific 'Search complete' message that signals the end of the stream, at which point it cancels the reader and exits the read loop.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/realtime/nextjs.mdx#2025-04-10_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\nimport { useState, useRef, useEffect } from \"react\";\n\nexport function SimpleSearch() {\n  const [updates, setUpdates] = useState<string[]>([]);\n  const [input, setInput] = useState(\"\");\n\n  const handleNewChat = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (!input.trim()) return;\n\n    try {\n      const response = await fetch(\"/api/simple-search\", {\n        method: \"POST\",\n        body: JSON.stringify({ prompt: input }),\n      });\n\n      const reader = response.body?.getReader();\n      if (!reader) {\n        return;\n      }\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n          break;\n        }\n        const text = new TextDecoder().decode(value);\n        const data = JSON.parse(text).data;\n        if (data === \"Search complete\") {\n          reader.cancel();\n          break;\n        } else {\n          setUpdates((prev) => [...prev, data]);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n    } finally {\n      setInput(\"\");\n    }\n  };\n\n  return (\n    // ...\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Single and Multiple Event Sending Examples (v3)\nDESCRIPTION: Examples of sending both single events and arrays of events using the v3 API. Shows how to structure event payloads with event names and data.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/functions/step-send-event.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Send a single event\nawait step.sendEvent(\"send-activation-event\", {\n  name: \"app/user.activated\",\n  data: { userId: \"01H08SEAXBJFJNGTTZ5TAWB0BD\" },\n});\n\n// Send an array of events\nawait step.sendEvent(\"send-invoice-events\", [\n  {\n    name: \"app/invoice.created\",\n    data: { invoiceId: \"645e9e024befa68763f5b500\" },\n  },\n  {\n    name: \"app/invoice.created\",\n    data: { invoiceId: \"645e9e08f29fb563c972b1f7\" },\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Fully Type-Safe Event Handler with Named Object Properties in TypeScript\nDESCRIPTION: The most developer-friendly implementation that uses named object properties for event arguments. This provides complete type safety with descriptive property names and encourages destructuring for better code readability.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/building-educational-typescript-tooling.mdx#2025-04-10_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Args {\n  \"server.start\": { success: boolean };\n  \"server.stop\": { stoppedAt: Date };\n}\n\nconst on = <Event extends keyof Args>(\n  event: Event,\n  fn: (arg: Args[Event]) => any\n) => {\n  // ...\n};\n\non(\"server.start\", ({ success }) => {\n//                     ^?\n```\n\n----------------------------------------\n\nTITLE: Defining onFailure Handler for Inngest Function in TypeScript\nDESCRIPTION: Demonstrates how to create an Inngest function with an onFailure handler to manage function failures. The handler receives error details, event data, and execution context.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/functions/handling-failures.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inngest } from \"./client\";\n\nexport default inngest.createFunction(\n  {\n    id: \"import-product-images\",\n    onFailure: async ({ error, event, step }) => {\n      // This is the failure handler which can be used to\n      // send an alert, notification, or whatever you need to do\n    },\n  },\n  { event: \"shop/product.imported\" },\n  async ({ event, step, runId }) => {\n    // This is the main function handler's code\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Agent Prompt Structure\nDESCRIPTION: Base prompt template following Anthropic's Chain of Thoughts format for coding agent instructions and task completion format.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/cursor-agentkit-e2b.mdx#2025-04-10_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nYou are a coding agent help the user to achieve the described task.\n\nWhen running commands, keep in mind that the terminal is non-interactive, remind to use the '-y' flag when running commands.\n\nOnce the task completed, you should return the following information:\n<task_summary>\n</task_summary>\n\nThink step-by-step before you start the task.\n```\n\n----------------------------------------\n\nTITLE: Setting Event-Level Idempotency Key in Go\nDESCRIPTION: Go implementation for setting an idempotency key when sending an event to Inngest. The cart_id is used to create a unique event ID that prevents duplicate processing.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/handling-idempotency.mdx#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncart_id := \"CGo5Q5ekAxilN92d27asEoDO\"\nawait inngest.Send(context.Background(), inngest.Event{\n  ID: fmt.Sprintf(\"checkout-completed-%s\", cart_id), // <-- This is the idempotency key\n  Name: \"cart/checkout.completed\",\n  Data: map[string]any{\"email\": \"taylor@example.com\", \"cart_id\": cart_id},\n})\n```\n\n----------------------------------------\n\nTITLE: Next.js App Router API Route Handler\nDESCRIPTION: Implementation of a Next.js API route handler that sends an event to Inngest using the App Router. Demonstrates event sending using NextResponse and force-dynamic configuration.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/getting-started/nextjs-quick-start.mdx#2025-04-10_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from \"next/server\";\nimport { inngest } from \"../../../inngest/client\"; // Import our client\n\n// Opt out of caching; every request should send a new event\nexport const dynamic = \"force-dynamic\";\n\n// Create a simple async Next.js API route handler\nexport async function GET() {\n  // Send your event payload to Inngest\n  await inngest.send({\n    name: \"test/hello.world\",\n    data: {\n      email: \"testUser@example.com\",\n    },\n  });\n\n  return NextResponse.json({ message: \"Event sent!\" });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Streaming in Inngest Serve Handler\nDESCRIPTION: Example showing how to enable streaming in the Inngest serve handler configuration. The streaming option can be set to false (default), \"allow\" for automatic detection, or \"force\" for override mode.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/streaming.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nserve({\n  client: inngest,\n  functions: [...fns],\n  streaming: \"allow\",\n});\n```\n\n----------------------------------------\n\nTITLE: Modal Deployment Command\nDESCRIPTION: Command to deploy the FastAPI application to Modal.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/guides/modal.mdx#2025-04-10_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmodal deploy main.py\n```\n\n----------------------------------------\n\nTITLE: Corrected Function Example in Go\nDESCRIPTION: The fixed version of the Go function, properly implementing the initialization code within a step to ensure it only runs once.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/working-with-loops.mdx#2025-04-10_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"fmt\"\n    \"github.com/inngest/inngest-go\"\n    \"github.com/inngest/inngest-go/step\"\n)\n\ninngest.CreateFunction(\n\t\"simple-function\",\n\tinngest.EventTrigger(\"test/simple.function\"),\n\tfunc(ctx context.Context, step inngest.Step) error {\n\t\tif _, err := step.Run(\"hello\", func() error {\n\t\t\tfmt.Println(\"hello\")\n\t\t\treturn nil\n\t\t}); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif _, err := step.Run(\"a\", func() error {\n\t\t\tfmt.Println(\"a\")\n\t\t\treturn nil\n\t\t}); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif _, err := step.Run(\"b\", func() error {\n\t\t\tfmt.Println(\"b\")\n\t\t\treturn nil\n\t\t}); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif _, err := step.Run(\"c\", func() error {\n\t\t\tfmt.Println(\"c\")\n\t\t\treturn nil\n\t\t}); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\treturn nil\n\t},\n)\n\n// hello\n// a \n// b\n// c\n```\n\n----------------------------------------\n\nTITLE: Defining an Inngest Function in Python\nDESCRIPTION: Example of defining an Inngest function that creates a greeting message. The function is triggered by a 'user.login' event and uses step.run to create a personalized greeting message.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/guides/testing.mdx#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport inngest\n\ndef create_message(name: object) -> str:\n    return f\"Hello, {name}!\"\n\nclient = inngest.Inngest(app_id=\"my-app\")\n\n@client.create_function(\n    fn_id=\"greet\",\n    trigger=inngest.TriggerEvent(event=\"user.login\"),\n)\nasync def greet(\n    ctx: inngest.Context,\n    step: inngest.Step,\n) -> str:\n    message = await step.run(\n        \"create-message\",\n        create_message,\n        ctx.event.data[\"name\"],\n    )\n\n    return message\n```\n\n----------------------------------------\n\nTITLE: Error Handling with waitUntil and Inngest\nDESCRIPTION: Demonstrates error handling implementation when using waitUntil with Inngest event sending.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/vercel-cloudflare-wait-until.mdx#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { inngest } from \"src/inngest\";\n\nasync function POST(request) {\n  const data = await createPost(request.body)\n  waitUntil(\n    inngest.send({ name: \"post.created\", data: data })}\n      .catch((error) => {\n        // Log the event somewhere where you could read and re-send it later\n      })\n  )\n  return new Response(data)\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Events for Multiple Items in Python\nDESCRIPTION: Demonstrates how to convert an array of items into Inngest events and send them in a batch. This approach is useful for bulk processing operations in Python.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/events/index.mdx#2025-04-10_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# This function call might return 10s or 100s of items, so we can use map\n# to transform the items into event payloads then pass that array to send:\nimportedItems = await api.fetchAllItems();\nevents = [\n  inngest.Event(name=\"storefront/item.imported\", data=item)\n  for item in importedItems\n]\nawait inngest_client.send(events);\n```\n\n----------------------------------------\n\nTITLE: Setting Event-Level Idempotency Key in TypeScript\nDESCRIPTION: Example of setting an idempotency key at the event level when sending an event to Inngest. The cartId is used to create a unique event ID that prevents duplicate processing over a 24-hour period.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/handling-idempotency.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst cartId = 'CGo5Q5ekAxilN92d27asEoDO';\nawait inngest.send({\n  id: `checkout-completed-${cartId}`, // <-- This is the idempotency key\n  name: 'cart/checkout.completed',\n  data: {\n    email: 'taylor@example.com',\n    cartId: cartId\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Workflow Actions in TypeScript with Inngest\nDESCRIPTION: This code defines various workflow actions that users can configure, including AI tasks like adding a table of contents and performing grammar reviews. Each action is defined as a PublicEngineAction with a kind, name, and description.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/user-defined-workflows.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type PublicEngineAction } from \"@inngest/workflow-kit\";\n\nexport const actions: PublicEngineAction[] = [\n  {\n    kind: \"add_ToC\",\n    name: \"Add a Table of Contents\",\n    description: \"Add an AI-generated ToC\",\n  },\n  {\n    kind: \"grammar_review\",\n    name: \"Perform a grammar review\",\n    description: \"Use OpenAI for grammar fixes\",\n  },\n  {\n    kind: \"wait_for_approval\",\n    name: \"Apply changes after approval\",\n    description: \"Request approval for changes\",\n  },\n  {\n    kind: \"apply_changes\",\n    name: \"Apply changes\",\n    description: \"Save the AI revisions\",\n  },\n  {\n    kind: \"generate_linkedin_posts\",\n    name: \"Generate LinkedIn posts\",\n    description: \"Generate LinkedIn posts\",\n  },\n  {\n    kind: \"generate_tweet_posts\",\n    name: \"Generate Twitter posts\",\n    description: \"Generate Twitter posts\",\n  },\n];\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Pytest for Inngest Integration Testing\nDESCRIPTION: Example of setting up Pytest fixtures for Inngest integration testing using the dev_server library. This configures the test environment to start and stop a real Dev Server for testing Inngest functions.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/guides/testing.mdx#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom inngest.experimental import dev_server\n\ndef pytest_configure(config: pytest.Config) -> None:\n    dev_server.server.start()\n\ndef pytest_unconfigure(config: pytest.Config) -> None:\n    dev_server.server.stop()\n```\n\n----------------------------------------\n\nTITLE: Fetching and Logging Run Status and Output from Inngest in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the getRuns function to fetch the status and output of a function run. It logs the first run's details, including status, start time, and output.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/examples/fetch-run-status-and-output.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst runs = await getRuns(\"01HWAVEB858VPPX47Z65GR6P6R\");\nconsole.log(runs[0]);\n/*\n{\n  run_id: '01HWAVJ8ASQ5C3FXV32JS9DV9Q',\n  run_started_at: '2024-04-25T14:46:45.337Z',\n  function_id: '6219fa64-9f58-41b6-95ec-a45c7172fa1e',\n  function_version: 12,\n  environment_id: '6219fa64-9f58-41b6-95ec-a45c7172fa1e',\n  event_id: '01HWAVEB858VPPX47Z65GR6P6R',\n  status: 'Completed',\n  ended_at: '2024-04-25T14:46:46.896Z',\n  output: {\n    status: \"success\",\n    processedItems: 98,\n    failedItems: 2,\n  }\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Combining Concurrency Limits for Multi-tenant Systems in Inngest\nDESCRIPTION: This code shows how to stack multiple concurrency limits in an Inngest function. It limits each user to 5 concurrent jobs while also enforcing an overall limit of 100 concurrent jobs across all users, providing both per-tenant fairness and global resource management.\nSOURCE: https://github.com/inngest/website/blob/main/app/(landing-pages)/landing/(pages)/multi-tenant-concurrency-noisy-neighbors/content.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const combinedConcurrencyLimits = inngest.createFunction(\n  {\n    id: 'multi-tenant-concurrency-with-shared-limit',\n    concurrency: [\n      {\n        // !mark(1:3)\n        // Each unique user_slug has a concurrency limit of 5\n        limit: 5,\n        key: 'event.data.user_slug',\n      },\n      {\n        // !mark(1:2)\n        // Overall concurrency for all users is limited to 100\n        limit: 100,\n      },\n    ],\n  },\n  { event: 'demo/job.created' },\n  async ({ event, step }) => {\n    /* function logic omitted for example */\n    return { status: 'success' };\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of sleep() in Inngest (Python)\nDESCRIPTION: Demonstrates the proper way to use sleep() for waiting a specific duration from the current time in Python. This approach ensures consistent behavior across function invocations.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/multi-step-functions.mdx#2025-04-10_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# ✅ Good\nawait step.sleep(\"wait-a-day\", \"1 day\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Cobra Command for Event Browser in Go\nDESCRIPTION: This snippet sets up a Cobra command to launch an event browser using Bubbletea. It defines a new command and a placeholder function for running the browser.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/interactive-clis-with-bubbletea.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc NewCmdEventBrowser() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:     \"init\",\n\t\tShort:   \"Scaffold a new function\",\n\t\tExample: \"inngest init\",\n\t\tRun:     runBrowser,\n\t}\n\treturn cmd\n}\n\nfunc runBrowser(cmd *cobra.Command, args []string) {\n\t// This is where we'll handle launching the event browser when invoked\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Messages from PartyKit Server in React Hook (TypeScript)\nDESCRIPTION: This React hook uses PartySocket to connect to the PartyKit server and listen for incoming messages. When a message is received, it updates the lastMessage state.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/semi-autonomous-ai-agents.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst socket = usePartySocket({\n  room: process.env.NEXT_PUBLIC_PARTYKIT_ROOM_NAME!,\n  host: process.env.NEXT_PUBLIC_PARTY_KIT_URL!,\n  onMessage: (message) => {\n    setLastMessage(message);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Debounce in Go with Inngest\nDESCRIPTION: Creates a function with debounce configuration in Go to handle webhook events. The function execution is delayed until 5 minutes after the last event with the same account_id is received, with a maximum timeout of 10 minutes.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/debounce.mdx#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ninngestgo.CreateFunction(\n  &inngestgo.FunctionOpts{\n    ID: \"handle-webhook\",\n    Debounce: &inngestgo.Debounce{\n      Key: \"event.data.account_id\",\n      Period: \"5m\",\n      Timeout: \"10m\",\n    },\n  },\n  inngestgo.EventTrigger(\"intercom/company.updated\", nil),\n  func(ctx context.Context, input inngestgo.Input) (any, error) {\n    // This function will only be scheduled 5 minutes after events are no longer received with the same\n    // `event.data.account_id` field.\n    //\n    // `event` will be the last event in the series received.\n    return nil, nil\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Event Type Definition with Union Types\nDESCRIPTION: Shows how to define event types using TypeScript union types for type-safe event handling.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/client/create.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventSchemas, Inngest } from \"inngest\";\n\ntype AppAccountCreated = {\n  name: \"app/account.created\";\n  data: {\n    userId: string;\n  };\n};\n\ntype AppSubscriptionStarted = {\n  name: \"app/subscription.started\";\n  data: {\n    userId: string;\n    planId: string;\n  };\n};\n\ntype Events = AppAccountCreated | AppSubscriptionStarted;\n\nexport const inngest = new Inngest({\n  schemas: new EventSchemas().fromUnion<Events>(),\n});\n```\n\n----------------------------------------\n\nTITLE: Type-Only Import Reference\nDESCRIPTION: Demonstrates how to reference functions while only importing their types, useful for optimizing dependencies in frameworks like Next.js.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/functions/references.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { referenceFunction } from \"inngest\";\nimport { type someInngestFn } from \"@/inngest/someFn\"; // import only the type\n\nawait step.invoke(\"start-process\", {\n  function: referenceFunction<typeof someInngestFn>({\n    functionId: \"some-fn\",\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Triggers in Inngest Functions (Go)\nDESCRIPTION: Example showing how to configure an Inngest function with multiple triggers including specific events and a scheduled cron job in Go. The function will run when either user.created or user.updated events occur, or every morning at 5am.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/multiple-triggers.mdx#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ninngestgo.CreateFunction(\n\tinngestgo.FunctionOpts{ID: \"resync-user-data\"},\n\tinngestgo.MultipleTriggers{\n\t\tinngestgo.EventTrigger(\"user.created\", nil),\n\t\tinngestgo.EventTrigger(\"user.updated\", nil),\n\t\tinngestgo.CronTrigger(\"0 5 * * *\", nil),\n\t},\n\tfunc(ctx context.Context, input inngestgo.Input) (any, error) {\n\t\t// ...\n\t},\n)\n```\n\n----------------------------------------\n\nTITLE: Sending Email as Final Step in Inngest Workflow using TypeScript\nDESCRIPTION: This code snippet shows the final step of an Inngest workflow where an email is sent using the Resend API. It checks for the presence of answers in the shared state and sends an email with the summarized information if not in preview mode.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/render-hacker-news-ai-agent.mdx#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nif (result.state.kv.has(\"answers\") && !event.data.preview) {\n      await step.run(\"send-email\", async () => {\n        console.info(\"[HackerNewsAgent] Preparing to send email\");\n        const answers = result.state.kv.get(\"answers\");\n\n        if (!event.data.preview) {\n          const { data, error } = await resend.emails.send({\n            from: \"Hacker News Agent <onboarding@resend.dev>\",\n            to: interest.email,\n            subject: `Your Hacker News Agent Update on ${interest.name}`,\n            text: `Here are the answers to \"${question.question}\":\\n\\n${answers}`,\n          });\n\n          // …\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of sleepUntil() in Inngest (TypeScript)\nDESCRIPTION: Illustrates the proper way to use sleepUntil() with a static date obtained from a step.run() call. This ensures consistent behavior across function invocations.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/multi-step-functions.mdx#2025-04-10_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// ✅ Good\nconst userBirthday = await step.run(\"get-user-birthday\", async () => {\n  const user = await getUser();\n  return user.birthday; // Date\n});\n\nawait sleepUntil(\"wait-for-user-birthday\", userBirthday);\n```\n\n----------------------------------------\n\nTITLE: Setting Max Concurrency for Inngest Connect Workers\nDESCRIPTION: Example showing how to set the maxConcurrency option when connecting to Inngest to limit the number of concurrent steps executed by a worker instance.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/setup/connect.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait connect({\n  apps: [...],\n  maxConcurrency: 100,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Start Timeout for Inngest Function in Go\nDESCRIPTION: This snippet shows how to set a 'start' timeout of 10 seconds for an Inngest function in Go. The function will be cancelled if it takes longer than 10 seconds to start.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/cancellation/cancel-on-timeouts.mdx#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nreturn inngestgo.CreateFunction(\n\tinngestgo.FunctionOpts{\n\t\tName: \"A function\",\n\t\tTimeouts: &inngestgo.Timeouts{\n\t\t\t// If the run takes longer than 10s to start, cancel the run.\n\t\t\tStart: inngestgo.Ptr(10*time.Second),\n\t\t},\n\t},\n\tinngestgo.EventTrigger(\"tasks/reminder.created\", nil),\n\tfunc(ctx context.Context, input inngestgo.Input[ReminderEvent]) (any, error) {\n\t\treturn step.Run(ctx, \"send-reminder\", func (ctx context.Context) (bool, error) {\n\t\t\t// ...\n\t\t\treturn false, nil\n\t\t})\n\t},\n)\n```\n\n----------------------------------------\n\nTITLE: Shared Client Configuration\nDESCRIPTION: Demonstrates best practices for sharing the Inngest client across a codebase with both v2 and v3 configurations.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/client/create.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inngest } from \"inngest\";\n\nexport const inngest = new Inngest({ id: \"my-app\" });\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inngest } from \"./client\";\n\nexport default inngest.createFunction(...);\n```\n\n----------------------------------------\n\nTITLE: Implementing Bubbletea View Function in Go\nDESCRIPTION: This snippet shows the implementation of the View function for the Bubbletea model. It renders different output based on whether an event has been selected or not.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/interactive-clis-with-bubbletea.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\ttea \"github.com/charmbracelet/bubbletea\"\n)\n\nfunc NewModel() (*model, error) {\n\treturn &model{}, nil\n}\n\ntype model struct {\n\tnameInput string\n\tlistInput string\n\tevent     string\n}\n\nvar _ tea.Model = (*model)(nil)\n\nfunc (m model) View() string {\n\tif m.event != \"\" {\n\t\treturn fmt.Sprintf(\"You've selected: %s\", m.event)\n\t}\n\treturn \"TODO\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Inngest SDK with bun (TypeScript)\nDESCRIPTION: Installs the Inngest SDK using bun package manager for TypeScript projects.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/overview.mdx#2025-04-10_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbun add inngest\n```\n\n----------------------------------------\n\nTITLE: Integrating Inngest with Remix Framework (v2)\nDESCRIPTION: Sets up Inngest in a Remix v2 application with a different function signature compared to v3. Creates a route that handles Inngest requests through both loader and action exports.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/serving-inngest-functions.mdx#2025-04-10_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// app/routes/api.inngest.ts\nimport { serve } from \"inngest/remix\";\nimport { inngest } from \"~/inngest/client\";\nimport fnA from \"~/inngest/fnA\";\n\nconst handler = serve(inngest, [fnA]);\n\nexport { handler as loader, handler as action };\n```\n\n----------------------------------------\n\nTITLE: Creating Inngest Function for User Backfill\nDESCRIPTION: TypeScript implementation of an Inngest function that handles the backfill operation triggered from Retool.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/trigger-your-code-from-retool.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { runBackfillForUser } from \"../lib/backfill-scripts\";\nimport { inngest } from \"./client\";\n\nexport default inngest.createFunction(\n  { id: \"run-backfill-for-user\" }, // The name displayed in the Inngest dashboard\n  { event: \"retool/backfill.requested\" }, // The event triggger\n  async ({ event }) => {\n    const result = await runBackfillForUser(event.data.user_id);\n\n    return {\n      status: result.ok ? 200 : 500,\n      message: `Ran backfill for user ${event.data.user_id}`,\n    };\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Updating step.sleep() in Inngest SDK v3\nDESCRIPTION: Shows the change in syntax for the step.sleep() function between v2 and v3. In v3, an additional identifier parameter is required.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/migration.mdx#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nstep.sleep(\"wait-before-poll\", \"1m\");\n```\n\nLANGUAGE: typescript\nCODE:\n```\nstep.sleep(\"1m\");\n```\n\n----------------------------------------\n\nTITLE: Building and Running Inngest Website in Production Mode\nDESCRIPTION: Commands to build the Inngest website for production and then start it in production mode. This is useful for testing the app in production mode locally.\nSOURCE: https://github.com/inngest/website/blob/main/README.md#2025-04-10_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Build the app for production usage\n$ pnpm build\n\n# Start the app in production mode\n$ pnpm start\n```\n\n----------------------------------------\n\nTITLE: Manually Closing Inngest Connection\nDESCRIPTION: Example showing how to manually close an Inngest connection using the close method on the connection object.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/setup/connect.mdx#2025-04-10_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait connection.close()\n// Connection is now closed\n```\n\n----------------------------------------\n\nTITLE: Middleware Initialization in TypeScript\nDESCRIPTION: Example of middleware initialization with basic configuration.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/middleware/create.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InngestMiddleware } from \"inngest\";\n\nnew InngestMiddleware({\n  name: \"Example Middleware\",\n  init() {\n    // This runs when the client is initialized\n    // Use this to set up anything your middleware needs\n    return {};\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using the Logger in Inngest TypeScript SDK v2.0\nDESCRIPTION: Demonstrates how to use the built-in logger in Inngest functions for reliable logging. The logger handles common serverless environment challenges and supports integration with popular logging libraries like Winston, Pino, or Bunyan.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/releasing-ts-sdk-2-0.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst fn = inngest.createFunction(\n  { name: \"My awesome function\" },\n  { event: \"func/awesome\" },\n  async ({ event, step, logger }) => {\n    logger.info(\"starting function\", { metadataKey: \"metadataValue\" })\n\n    await step.run(\"do something\", () => {\n      if (somethingBadHappens) logger.warn(\"something bad happened\")\n    })\n\n    return { success: true, event }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Using serve() API with Inngest v3\nDESCRIPTION: Example of setting up an Inngest serve handler with v3 syntax, importing functions and configuring the client to expose them via HTTP.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/serve/index.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from \"inngest/next\"; // or your preferred framework\nimport { inngest } from \"./client\";\nimport {\n  importProductImages,\n  sendSignupEmail,\n  summarizeText,\n} from \"./functions\";\n\nserve({\n  client: inngest,\n  functions: [sendSignupEmail, summarizeText, importProductImages],\n});\n```\n\n----------------------------------------\n\nTITLE: Subscription Token Generation\nDESCRIPTION: Server-side examples for generating subscription tokens for client authentication\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/realtime.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getSubscriptionToken } from \"@inngest/realtime\";\nimport { auth } from \"src/auth\";\n\nexport async function POST() {\n  const { userId } = await auth()\n\n  const token = await getSubscriptionToken({\n    channel: `user:${userId}`,\n    topics: [\"ai\"],\n  })\n\n  return NextResponse.json({ token }, { status: 200 })\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getSubscriptionToken } from \"@inngest/realtime\";\nimport { getAuth } from \"src/auth\";\n\napp.post(\"/get-subscribe-token\", async (req, res) => {\n  const { userId } = getAuth(req)\n\n  const token = await getSubscriptionToken({\n    channel: `user:${userId}`,\n    topics: [\"ai\"],\n  })\n\n  res.json({ token })\n})\n```\n\n----------------------------------------\n\nTITLE: Single and Multiple Event Sending Examples (v2)\nDESCRIPTION: Examples of sending both single events and arrays of events using the v2 API. Shows the different syntax where the step ID is not required as a parameter.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/functions/step-send-event.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Send a single event\nawait step.sendEvent({\n  name: \"app/user.activated\",\n  data: { userId: \"01H08SEAXBJFJNGTTZ5TAWB0BD\" },\n});\n\n// Send an array of events\nawait step.sendEvent([\n  {\n    name: \"app/invoice.created\",\n    data: { invoiceId: \"645e9e024befa68763f5b500\" },\n  },\n  {\n    name: \"app/invoice.created\",\n    data: { invoiceId: \"645e9e08f29fb563c972b1f7\" },\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Sending events with step.sendEvent() in v3 vs v2\nDESCRIPTION: Comparison of step.sendEvent() usage between v3 and v2, showing the addition of a required ID parameter in v3, which appears as the first argument.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/migration.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nstep.sendEvent(\"broadcast-user-creation\", {\n  name: \"app/user.created\",\n  data: {\n    /* ... */\n  },\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nstep.sendEvent({\n  name: \"app/user.created\",\n  data: {\n    /* ... */\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-tenant Concurrency Control with Inngest\nDESCRIPTION: This snippet demonstrates how to create an Inngest function with concurrency control specific to each tenant. It uses a concurrency limit of 1 for each unique user_slug, preventing any single user from monopolizing resources.\nSOURCE: https://github.com/inngest/website/blob/main/app/(landing-pages)/landing/(pages)/multi-tenant-concurrency-noisy-neighbors/content.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const multiTenantConcurrency = inngest.createFunction(\n  {\n    id: 'multi-tenant-concurrency',\n    concurrency: [\n      {\n        limit: 1,\n        // !mark(1:2)\n        // Add a key to apply the concurrency limit to each unique user_slug\n        key: 'event.data.user_slug',\n      },\n    ],\n  },\n  { event: 'demo/job.created' },\n  async ({ event, step }) => {\n    /* function logic omitted for example */\n    return { status: 'success' };\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Retool Event Payload\nDESCRIPTION: JSON payload structure for sending data from Retool to Inngest, including user ID and agent information.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/trigger-your-code-from-retool.mdx#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{ \"user_id\": \"{{runBackfillForm.data.userId}}\", \"agent_id\": \"{{current_user.email}}\" }\n```\n\n----------------------------------------\n\nTITLE: Invoking a Function by Reference in Inngest\nDESCRIPTION: Shows how to invoke an Inngest function using a function reference created with referenceFunction(). This approach allows calling functions without importing their dependencies.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/functions/step-invoke.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst resultFromReference = await step.invoke(\"invoke-by-reference\", {\n  function: referenceFunction(...),\n  data: { ... },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Configurable Python Middleware\nDESCRIPTION: Shows how to create configurable middleware in Python using the Factory pattern. The example includes configuration for a secret key and implements event handling methods.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/middleware/create.mdx#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport inngest\n\nclass MyMiddleware(inngest.Middleware):\n    def __init__(\n        self,\n        client: inngest.Inngest,\n        raw_request: object,\n    ) -> None:\n        #  ...\n\n    @classmethod\n    def factory(\n        cls,\n        secret_key: typing.Union[bytes, str],\n    ) -> typing.Callable[[inngest.Inngest, object], MyMiddleware]:\n        def _factory(\n            client: inngest.Inngest,\n            raw_request: object,\n        ) -> MyMiddleware:\n            return cls(\n                client,\n                raw_request,\n                secret_key,\n            )\n\n        return _factory\n\n    async def before_send_events( self, events: list[inngest.Event]) -> None:\n        # called before an event is sent from within a Function or Step\n        print(f\"Sending {len(events)} events\")\n\n    async def after_send_events(self, result: inngest.SendEventsResult) -> None:\n        # called after an event is sent from within a Function or Step\n        print(\"Done sending events\")\n```\n\nLANGUAGE: python\nCODE:\n```\ninngest_client = inngest.Inngest(\n    app_id=\"my_app\",\n    middleware=[MyMiddleware.factory(_secret_key)],\n)\n```\n\n----------------------------------------\n\nTITLE: Defining an Inngest Function in Next.js (App Router)\nDESCRIPTION: Code to define a simple Inngest function in a separate file for a Next.js App Router application.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/getting-started/nextjs-quick-start.mdx#2025-04-10_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport { inngest } from \"./client\";\n\nexport const helloWorld = inngest.createFunction(\n  { id: \"hello-world\" },\n  { event: \"test/hello.world\" },\n  async ({ event, step }) => {\n    await step.sleep(\"wait-a-moment\", \"1s\");\n    return { message: `Hello ${event.data.email}!` };\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Inngest CLI\nDESCRIPTION: Different methods for installing the Inngest CLI using npm, Docker, or curl.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/self-hosting.mdx#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnpm install -g inngest-cli\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ndocker pull inngest/inngest\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ncurl -sfL https://cli.inngest.com/install.sh\n```\n\n----------------------------------------\n\nTITLE: Defining Types for Wildcard Triggers in TypeScript\nDESCRIPTION: Example demonstrating how to define TypeScript types for wildcard event triggers. This allows for proper type checking when using wildcard patterns like 'app/blog.post.*' to handle multiple event types with similar structures.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/multiple-triggers.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype WildcardEvents = {\n  \"app/blog.post.*\": {\n    name: \"app/blog.post.created\" | \"app/blog.post.published\";\n    data: {\n      postId: string;\n      authorId: string;\n      createdAt: string;\n    } | {\n      postId: string;\n      authorId: string;\n      publishedAt: string;\n    }\n  }\n}\nconst inngest = new Inngest({\n  id: \"my-app\",\n  schemas: new EventSchemas().fromRecord<WildcardEvents>()\n});\n\ninngest.createFunction(\n  { id: \"blog-updates-to-slack\" },\n  { event: \"app/blog.post.*\" },\n  async ({ event, step }) => {\n    // ...\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring a Sign-up Flow Step Function in JSON\nDESCRIPTION: This JSON configuration defines a step function for a sign-up flow. It includes steps for sending a welcome email, adding the user to Stripe, enriching signup data, and notifying the sales team based on certain conditions.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/simple-testable-step-functions.mdx#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Sign-up flow\",\n  \"id\": \"improved-chamois-c592a7\",\n  \"triggers\": [\n    { \"event\": \"auth0/user.created\" }\n  ],\n  \"steps\": {\n\n    \"welcome\": {\n      \"id\": \"welcome\",\n      \"name\": \"Send a welcome email\",\n      // The path links to the source code for the step.\n      \"path\": \"file://./steps/welcome\",\n      \"runtime\": {\n        // This lets us run steps in eg. webassembly also.\n        \"type\": \"docker\"\n      },\n      \"after\": [{\n        \"step\": \"$trigger\"\n      }]\n    },\n\n    \"stripe\": {\n      \"id\": \"stripe\",\n      \"name\": \"Add the user to stripe\",\n      \"path\": \"file://./steps/stripe\",\n      \"runtime\": {\n        \"type\": \"docker\"\n      },\n      \"after\": [{\n        \"step\": \"welcome\",\n        \"if\": \"event.data.plan != 'free'\"\n      }]\n    },\n\n    \"enrich\": {\n      \"id\": \"enrich\",\n      \"name\": \"Enrich signup data\",\n      \"path\": \"file://./steps/enrich\",\n      \"runtime\": {\n        \"type\": \"docker\"\n      },\n      \"after\": [{\n        \"step\": \"welcome\"\n      }]\n    },\n\n    \"notify\": {\n      \"id\": \"notify\",\n      \"name\": \"Notify sales team\",\n      \"path\": \"file://./steps/slack\",\n      \"runtime\": {\n        \"type\": \"docker\"\n      },\n      \"after\": [{\n        \"step\": \"enrich\",\n        \"if\": \"steps.enrich.value >= 1000\"\n      }]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'fns' Option in Inngest v2 (Deprecated)\nDESCRIPTION: Shows the deprecated usage of the 'fns' option in Inngest v2 for comparison. This approach is no longer supported in v3.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/migration.mdx#2025-04-10_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as actions from \"./actions\";\n\nconst inngest = new Inngest({ name: \"My App\" });\n\ninngest.createFunction(\n  {\n    name: \"Send welcome email\",\n    fns: actions,\n  },\n  { event: \"app/user.created\" },\n  async ({ event, fns }) => {\n    const user = await fns.getUserFromDb(event.data.userId);\n    await fns.sendWelcomeEmail(user.email);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Searching for Custom Errors with CEL Expression\nDESCRIPTION: Example of a CEL expression that searches for custom error types along with specific event data. This allows for precise filtering of function runs based on both input and error conditions.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/platform/monitor/inspecting-function-runs.mdx#2025-04-10_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nevent.data.userId == \"12345\" && output.name == \"UserNotFoundError\"\n```\n\n----------------------------------------\n\nTITLE: Different step.run() Usage Patterns\nDESCRIPTION: This example shows various ways to use step.run() including async handlers to fetch API data, synchronous handlers for data transformation, and operations without return values. Each step is given a unique identifier and performs a specific task in the workflow.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/functions/step-run.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Steps can have async handlers\nconst result = await step.run(\"get-api-data\", async () => {\n  // Steps should return data used in other steps\n  return fetch(\"...\").json();\n});\n\n// Steps can have synchronous handlers\nconst data = await step.run(\"transform\", () => {\n  return transformData(result);\n});\n\n// Returning data is optional\nawait step.run(\"insert-data\", async () => {\n  db.insert(data);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Encryption Middleware in Python\nDESCRIPTION: Shows how to install and configure the EncryptionMiddleware in Python. This middleware encrypts the 'encrypted' field in event.data, step.run return values, and function return values by default.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/middleware/encryption-middleware.mdx#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport inngest\nfrom inngest_encryption import EncryptionMiddleware\n\ninngest_client = inngest.Inngest(\n    app_id=\"my-app\",\n    middleware=[EncryptionMiddleware.factory(\"my-secret-key\")],\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Inngest Function to API Handler (Pages Router)\nDESCRIPTION: Code showing how to add a defined Inngest function to the serve handler in a Next.js Pages Router application.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/getting-started/nextjs-quick-start.mdx#2025-04-10_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nexport default serve({\n  client: inngest,\n  functions: [\n    helloWorld, // <-- This is where you'll always add your new functions\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Events from Express to Trigger Inngest Functions\nDESCRIPTION: Sets up an Express server with an API endpoint that sends an event to Inngest. The code includes the Inngest client initialization, middleware setup, and a GET endpoint that sends a 'test/hello.world' event with user data.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/getting-started/nodejs-quick-start.mdx#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from \"express\";\nimport { serve } from \"inngest/express\";\nimport { inngest, functions } from \"./src/inngest\"\n\napp.use(express.json());\napp.use(\"/api/inngest\", serve({ client: inngest, functions }));\n\n// Create a new route\napp.get(\"/api/hello\", async function (req, res, next) {\n  await inngest.send({\n    name: \"test/hello.world\",\n    data: {\n      email: \"testUser@example.com\",\n    },\n  }).catch(err => next(err));\n  res.json({ message: 'Event sent!' });\n});\n\napp.listen(3000, () => {\n  console.log('Server running on http://localhost:3000');\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Event IDs from SendMany in Go\nDESCRIPTION: Example showing how to retrieve the unique Event IDs when sending multiple events with the Go SDK. These IDs can be used for looking up events in the dashboard or via the REST API.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/events/index.mdx#2025-04-10_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nids, err := inngestgo.SendMany(ctx, []inngestgo.Event{\n  {\n    Name: \"storefront/cart.checkout.completed\",\n    Data: data,\n  },\n  {\n    Name: \"storefront/coupon.used\",\n    Data: data,\n  },\n  {\n    Name: \"storefront/loyalty.program.joined\",\n    Data: data,\n  },\n})\n#\n#  ids = [\n#    \"01HQ8PTAESBZPBDS8JTRZZYY3S\",\n#    \"01HQ8PTFYYKDH1CP3C6PSTBZN5\"\n#  ]\n# \n```\n\n----------------------------------------\n\nTITLE: Triggering Shopify Import Event with Inngest\nDESCRIPTION: This snippet demonstrates how to send an event to trigger a Shopify import job using Inngest. It includes the event name and relevant data such as storeId and userId.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/import-ecommerce-api-data-in-seconds.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait inngest.send({\n  name: \"shopify/import.requested\",\n  data: { storeId: 1462924, userId: 9357925756 },\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Attempt Counters in TypeScript\nDESCRIPTION: TypeScript example showing how to use attempt counters to implement different logic based on retry attempts. Useful for implementing fallback strategies.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/error-retries/inngest-errors.mdx#2025-04-10_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  { id: \"generate-summary\" },\n  { event: \"blog/post.created\" },\n  async ({ attempt }) => {\n    // `attempt` is the zero-index attempt number\n\n    await step.run('call-llm', async () => {\n      if (attempt < 2) {\n        // Call OpenAI's API two times\n      } else {\n        // After two attempts to OpenAI, try a different LLM, for example, Mistral\n      }\n    });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Inngest Server Handler in Next.js\nDESCRIPTION: Sets up the Inngest serve handler in a Next.js API route to enable Inngest to securely call the defined functions. Requires INNGEST_SIGNING_KEY environment variable.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/run-nextjs-functions-in-the-background.mdx#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { serve } from \"inngest/next\"\n// Arguments:\n// - The name of your app\n// - Functions - An array of all of your Inngest functions\nexport default serve(\"My App\", [\n  weeklyDigest,\n  runDailyReport,\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating Common Actions Middleware for Inngest Functions\nDESCRIPTION: This snippet shows how to create middleware that provides common actions as steps to all Inngest functions. It wraps functions in step tooling for reusable code blocks.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/middleware/examples.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Pass to a client to provide a set of actions as steps to all functions, or to\n * a function to provide a set of actions as steps only to that function.\n */\nconst inngest = new Inngest({\n  id: \"my-app\",\n  middleware: [\n    createActionsMiddleware({\n      getUser(id: string) {\n        return db.user.get(id);\n      },\n    }),\n  ],\n});\n\ninngest.createFunction(\n  { id: \"user-data-dump\" },\n  { event: \"app/data.requested\" },\n  async ({ event, action: { getUser } }) => {\n    // The first parameter is the step's options or ID\n    const user = await getUser(\"get-user-details\", event.data.userId);\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Icons for Inngest Documentation\nDESCRIPTION: This snippet imports necessary components from a shared documentation module and icons from the Remix icon library. These are used to create an interactive card-based layout for explaining Inngest's event sources.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/events-triggers.mdx#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CardGroup, Card, ImageTheme } from \"src/shared/Docs/mdx\";\nimport {\n  RiTimeLine,\n  RiCloudLine,\n  RiGitForkFill,\n  RiWebhookFill,\n  RiNewspaperLine,\n} from \"@remixicon/react\";\n```\n\n----------------------------------------\n\nTITLE: Integrating Inngest with FastAPI Application\nDESCRIPTION: Complete implementation that adds Inngest to a FastAPI app, including client creation, function definition, and endpoint serving. The function responds to an 'app/my_function' event trigger.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/getting-started/python-quick-start.mdx#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nfrom fastapi import FastAPI\nimport inngest\nimport inngest.fast_api\n\n# Create an Inngest client\ninngest_client = inngest.Inngest(\n    app_id=\"fast_api_example\",\n    logger=logging.getLogger(\"uvicorn\"),\n)\n\n# Create an Inngest function\n@inngest_client.create_function(\n    fn_id=\"my_function\",\n    # Event that triggers this function\n    trigger=inngest.TriggerEvent(event=\"app/my_function\"),\n)\nasync def my_function(ctx: inngest.Context, step: inngest.Step) -> str:\n    ctx.logger.info(ctx.event)\n    return \"done\"\n\napp = FastAPI()\n\n# Serve the Inngest endpoint\ninngest.fast_api.serve(app, inngest_client, [my_function])\n```\n\n----------------------------------------\n\nTITLE: Displaying Middleware Documentation Card\nDESCRIPTION: Provides a navigation card for middleware-specific documentation, focusing on Cloudflare Workers and Hono environment variables integration with Inngest functions.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/examples/index.mdx#2025-04-10_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<CardGroup>\n<Card\n  href={\"/docs/examples/middleware/cloudflare-workers-environment-variables\"}\n  title={'Cloudflare Workers & Hono environment variables'}\n>\n  Access environment variables and other Cloudflare bindings within Inngest functions when using Workers or Hono.\n</Card>\n\n</CardGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing Health Check with Connect API in Bun\nDESCRIPTION: This snippet shows how to use the Connect API with Bun to implement a health check endpoint. It creates a basic web server that listens for requests on the /ready endpoint and returns a 200 status code when the connection to Inngest is active.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/setup/connect.mdx#2025-04-10_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { connect } from 'inngest/connect';\nimport { ConnectionState } from 'inngest/components/connect/types';\nimport { inngest, functions } from './src/inngest';\n\nconst connection = await connect({\n  apps: [{ client: inngest, functions: [helloWorld] }],\n});\n\nconsole.log('Worker: connected', connection);\n\n// Start a basic web server that only listens for the /ready endpoint\n// and returns a 200 status code when the connection to Inngest is active.\nconst server = Bun.serve({\n  port: 8080,\n  routes: {\n    '/ready': async () => {\n      return connection.state === ConnectionState.ACTIVE\n        ? new Response('OK')\n        : new Response('Not Ready', { status: 500 });\n    },\n  },\n  fetch(req) {\n    return new Response('Not Found', { status: 404 });\n  },\n});\n\nconsole.log('Worker: HTTP server listening on port 8080');\n\n// When the Inngest connection has gracefully closed,\n// this will resolve and the app will exit.\nawait connection.closed;\nconsole.log('Worker: Shut down');\n\n// Stop the HTTP server\nawait server.stop();\n```\n\n----------------------------------------\n\nTITLE: NonRetriableError Parameters in TypeScript\nDESCRIPTION: Defines the parameters for the NonRetriableError constructor in TypeScript, including message and optional cause for tracking the original error.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/error-retries/inngest-errors.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nnew NonRetriableError(message: string, options?: { cause?: Error }): NonRetriableError\n```\n\n----------------------------------------\n\nTITLE: Rendering Flow Control Documentation Card Navigation in JSX\nDESCRIPTION: This JSX snippet creates a card-based navigation interface listing the five main flow control methods in Inngest. Each card includes an icon, title, link to detailed documentation, and a brief description of the flow control method's purpose.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/flow-control.mdx#2025-04-10_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<CardGroup cols={1}>\n  <Card title=\"Concurrency\" icon={<IconConcurrency className=\"text-basis h-4 w-4\" />} href={'/docs/guides/concurrency'}>\n    Limit the number of executing steps across your function runs. Ideal for limiting concurrent workloads by user, resource, or in general.\n  </Card>\n  <Card title=\"Throttling\" icon={<RiSlowDownFill className=\"text-basis h-4 w-4\" />} href={'/docs/guides/throttling'}>\n    Limit the throughput of function execution over a period of time. Ideal for working around third-party API rate limits.\n  </Card>\n  <Card title=\"Rate Limiting\" icon={<RiSkipRightFill className=\"text-basis h-4 w-4\" />} href={'/docs/guides/rate-limiting'}>\n    Prevent excessive function runs over a given time period by _skipping_ events beyond a specific limit. Ideal for protecting against abuse.\n  </Card>\n  <Card title=\"Debounce\" icon={<IconDebounce className=\"text-basis h-4 w-4\" />} href={'/docs/guides/debounce'}>\n    Avoid unnecessary function invocations by de-duplicating events over a sliding time window. Ideal for preventing wasted work when a function might be triggered in quick succession.\n  </Card>\n  <Card title=\"Priority\" icon={<RiGitPullRequestFill className=\"rotate-90 text-basis h-4 w-4\" />} href={'/docs/guides/priority'}>\n    Dynamically adjust the execution order of functions based on any data. Ideal for pushing critical work to the front of the queue.\n  </Card>\n</CardGroup>\n```\n\n----------------------------------------\n\nTITLE: Preventing Duplicate Events with Custom ID in TypeScript\nDESCRIPTION: Example showing how to prevent duplicate events from being processed by adding a custom ID to the event payload in TypeScript. Events with the same ID will be ignored by Inngest.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/events/index.mdx#2025-04-10_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nawait inngest.send({\n  // Your deduplication id must be specific to this event payload.\n  // Use something that will not be used across event types, not a generic value like cartId\n  id: \"cart-checkout-completed-ed12c8bde\",\n  name: \"storefront/cart.checkout.completed\",\n  data: {\n    cartId: \"ed12c8bde\",\n    // ...the rest of the payload's data...\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Function-Level Idempotency with CEL Expression\nDESCRIPTION: Example of setting an idempotency key at the function level using a CEL expression. This ensures the function is only executed once per cartId within a 24-hour period.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/handling-idempotency.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const sendEmail = inngest.createFunction(\n  {\n    id: 'send-checkout-email',\n    // This is the idempotency key\n    idempotency: 'event.data.cartId',\n    // Evaluates to: \"s6CIMNqIaxt503I1gVEICfwp\"\n    // for the given event payload\n  },\n  { trigger: 'cart/checkout.completed' },\n  async  ({ event, step }) => { /* ... */ }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring the no-nested-steps Rule\nDESCRIPTION: JSON configuration for the no-nested-steps rule which prevents nesting step.run() calls that would cause runtime errors.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/eslint.mdx#2025-04-10_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"@inngest/no-nested-steps\": \"error\" // recommended\n```\n\n----------------------------------------\n\nTITLE: Installing Inngest Dependencies for FastAPI\nDESCRIPTION: Command to install the required Python packages for Inngest with FastAPI.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/getting-started/python-quick-start.mdx#2025-04-10_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npip install fastapi inngest uvicorn\n```\n\n----------------------------------------\n\nTITLE: Implementing Inngest App in Python FastAPI\nDESCRIPTION: Creates a FastAPI-based Inngest app with ID \"fast_api_example\" that contains an asynchronous hello-world function triggered by a \"say-hello\" event. Includes logging configuration and serves the function through FastAPI.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/apps/index.mdx#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport inngest\nimport fastapi\nimport inngest.fast_api\n\n\nlogger = logging.getLogger(\"uvicorn.inngest\")\nlogger.setLevel(logging.DEBUG)\n\ninngest_client = inngest.Inngest(app_id=\"fast_api_example\", logger=logger)\n\n@inngest_client.create_function(\n    fn_id=\"hello-world\",\n    trigger=inngest.TriggerEvent(event=\"say-hello\"),\n)\nasync def hello(\n    ctx: inngest.Context,\n    step: inngest.Step,\n) -> str:\n    return \"Hello world!\"\n\napp = fastapi.FastAPI()\n\ninngest.fast_api.serve(\n    app,\n    inngest_client,\n    [hello],\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Inngest SDK with pnpm (TypeScript)\nDESCRIPTION: Installs the Inngest SDK using pnpm package manager for TypeScript projects.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/overview.mdx#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm add inngest\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Limitations of Traditional Queue Workers in TypeScript\nDESCRIPTION: This code snippet shows the traditional approach to queue workers and why it's incompatible with multi-tenant queues or custom concurrency limits per function. The static nature of queue subscription prevents dynamic discovery of new functions.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/building-the-inngest-queue-pt-i-fairness-multi-tenancy.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// ❌ classic queue workers aren't compatible with multi-tenant queues,\n// or > 1 custom concurrency limits per function\nworker.concurrency = 100;\nworker.run([\"queue:1\", \"queue:2\"], () => {\n  // run jobs in queue 1 and 2\n})\n```\n\n----------------------------------------\n\nTITLE: Example Payload for Inngest Function Cancellation Event in JSON\nDESCRIPTION: This snippet demonstrates the structure of the 'inngest/function.cancelled' event payload. It includes details about the cancelled function, error information, and the original event that triggered the function.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/system-events/inngest-function-cancelled.mdx#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"inngest/function.cancelled\",\n  \"data\": {\n    \"error\": {\n      \"error\": \"function cancelled\",\n      \"message\": \"function cancelled\",\n      \"name\": \"Error\"\n    },\n    \"event\": {\n      \"data\": {\n        \"content\": \"Yost LLC explicabo eos\",\n        \"transcript\": \"s3://product-ideas/carber-vac-release.txt\",\n        \"userId\": \"bdce1b1b-6e3a-43e6-84c2-2deb559cdde6\"\n      },\n      \"id\": \"01JDJK451Y9KFGE5TTM2FHDEDN\",\n      \"name\": \"integrations/export.requested\",\n      \"ts\": 1732558407003,\n      \"user\": {}\n    },\n    \"events\": [\n      {\n        \"data\": {\n          \"content\": \"Yost LLC explicabo eos\",\n          \"transcript\": \"s3://product-ideas/carber-vac-release.txt\",\n          \"userId\": \"bdce1b1b-6e3a-43e6-84c2-2deb559cdde6\"\n        },\n        \"id\": \"01JDJK451Y9KFGE5TTM2FHDEDN\",\n        \"name\": \"integrations/export.requested\",\n        \"ts\": 1732558407003\n      }\n    ],\n    \"function_id\": \"demo-app-export\",\n    \"run_id\": \"01JDJKGTGDVV4DTXHY6XYB7BKK\"\n  },\n  \"id\": \"01JDJKH1S5P2YER8PKXPZJ1YZJ\",\n  \"ts\": 1732570023717\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Weekly Digest Cron in Python\nDESCRIPTION: Implements a weekly digest system using Inngest's cron scheduling in Python. Features timezone-aware scheduling and a fan-out pattern implementation using async/await for handling multiple user digests efficiently.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/scheduled-functions.mdx#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom inngest import Inngest\n\ninngest_client = Inngest(id=\"signup-flow\")\n\n@inngest_client.create_function(\n    fn_id=\"prepare-weekly-digest\",\n    trigger=inngest.TriggerCron(cron=\"TZ=Europe/Paris 0 12 * * 5\")\n)\nasync def prepare_weekly_digest(ctx: inngest.Context) -> None:\n    users = await ctx.step.run(\n        \"load-users\",\n        lambda: db.load(\"SELECT * FROM users\")\n    )\n\n    events = [\n        {\n            \"name\": \"app/send.weekly.digest\",\n            \"data\": {\n                \"user_id\": user.id,\n                \"email\": user.email,\n            }\n        }\n        for user in users\n    ]\n\n    await ctx.step.send_event(\"send-digest-events\", events)\n\n@inngest_client.create_function(\n    fn_id=\"send-weekly-digest-email\",\n    trigger=inngest.TriggerEvent(event=\"app/send.weekly.digest\")\n)\nasync def send_weekly_digest(ctx: inngest.Context) -> None:\n    email = ctx.event.data[\"email\"]\n    user_id = ctx.event.data[\"user_id\"]\n\n    await email.send(\"weekly_digest\", email, user_id)\n```\n\n----------------------------------------\n\nTITLE: Initializing InngestTestEngine\nDESCRIPTION: Example showing how to import and initialize the InngestTestEngine for testing Inngest functions.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/testing/index.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InngestTestEngine } from \"@inngest/test\";\nimport { helloWorld } from \"./helloWorld\";\n\ndescribe(\"helloWorld function\", () => {\n  const t = new InngestTestEngine({\n    function: helloWorld,\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Python Dependencies Configuration\nDESCRIPTION: Specifies required Python packages for the Modal application including FastAPI, Inngest, and python-dotenv.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/guides/modal.mdx#2025-04-10_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nfastapi==0.115.0\ninngest==0.4.12\npython-dotenv==1.0.1\n```\n\n----------------------------------------\n\nTITLE: Intercom Webhook Transform with Timestamp Setting\nDESCRIPTION: A JavaScript transform function for Intercom webhooks that sets the event name with an intercom/ prefix, extracts only the data field from the webhook, and sets the timestamp from the created_at field.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/platform/webhooks.mdx#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction transform(evt, headers = {}, queryParams = {}) {\n  return {\n    name: `intercom/${evt.topic}`,\n    // the top level obj only contains webhook data, so we omit that\n    data: evt.data,\n    ts: evt.created_at * 1000,\n   };\n};\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Inngest\nDESCRIPTION: Example Docker Compose configuration that sets up both an application service and Inngest Dev Server with proper networking and environment variables.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/development-with-docker.mdx#2025-04-10_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  app:\n    build: ./app\n    environment:\n      - INNGEST_DEV=1\n      - INNGEST_BASE_URL=http://inngest:8288\n    ports:\n      - '3000:3000'\n  inngest:\n    image: inngest/inngest:v0.27.0\n    command: 'inngest dev -u http://app:3000/api/inngest'\n    ports:\n      - '8288:8288'\n```\n\n----------------------------------------\n\nTITLE: Configuring Inngest Server with Keys\nDESCRIPTION: Command to start Inngest server with custom event and signing keys for security.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/self-hosting.mdx#2025-04-10_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ninngest start --event-key <YOUR_EVENT_KEY> --signing-key <YOUR_SIGNING_KEY>\n```\n\n----------------------------------------\n\nTITLE: Verbose Python error handling with multiple try/catch blocks\nDESCRIPTION: A Python function demonstrating overly thorough error handling with multiple try/catch blocks. This makes the code safer but extremely verbose, showing why this approach isn't commonly used despite being theoretically safer.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/python-errors-as-values.mdx#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef upsert_thing(thing_id: str) -> Thing:\n    try:\n        thing = get_thing(thing_id)\n    except Exception as err:\n        # Swallow error and create a new Thing\n        thing = Thing(thing_id)\n\n    try:\n        thing.set_name(\"Doodad\")\n    except Exception as err:\n        raise Exception(f\"failed to set name: {err}\") from err\n\n    try:\n        update_thing(thing)\n    except Exception as err:\n        raise Exception(f\"failed to update: {err}\") from err\n\n    try:\n        log_thing(thing)\n    except Exception as err:\n        # Swallow error because logging isn't critical\n        pass\n\n\treturn user\n```\n\n----------------------------------------\n\nTITLE: Example Cancellation Event Payload Structure\nDESCRIPTION: Sample JSON payload structure of an inngest/function.cancelled event, showing the complete event data including original triggering event details, function identification, and timestamps.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/examples/cleanup-after-function-cancellation.mdx#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"inngest/function.cancelled\",\n  \"data\": {\n    \"error\": {\n      \"error\": \"function cancelled\",\n      \"message\": \"function cancelled\",\n      \"name\": \"Error\"\n    },\n    \"event\": {\n      \"data\": {\n        \"importId\": \"bdce1b1b-6e3a-43e6-84c2-2deb559cdde6\"\n      },\n      \"id\": \"01JDJK451Y9KFGE5TTM2FHDEDN\",\n      \"name\": \"contacts/import.requested\",\n      \"ts\": 1732558407003,\n      \"user\": {}\n    },\n    \"events\": [\n      {\n        \"data\": {\n          \"importId\": \"bdce1b1b-6e3a-43e6-84c2-2deb559cdde6\"\n        },\n        \"id\": \"01JDJK451Y9KFGE5TTM2FHDEDN\",\n        \"name\": \"contacts/import.requested\",\n        \"ts\": 1732558407003,\n        \"user\": {}\n      }\n    ],\n    \"function_id\": \"newsletter-app-import-all-contacts\",\n    \"run_id\": \"01JDJKGTGDVV4DTXHY6XYB7BKK\"\n  },\n  \"id\": \"01JDJKH1S5P2YER8PKXPZJ1YZJ\",\n  \"ts\": 1732570023717\n}\n```\n\n----------------------------------------\n\nTITLE: Experimental Parallel Execution in Python with Inngest\nDESCRIPTION: Showcases experimental support for asyncio.gather in Inngest Python functions. This approach allows for concurrent execution of multiple steps using Python's asyncio library.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/step-parallelism.mdx#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@client.create_function(\n  fn_id=\"my-fn\",\n  trigger=inngest.TriggerEvent(event=\"my-event\"),\n  _experimental_execution=True,\n)\ndef fn(\n  ctx: inngest.Context,\n  step: inngest.StepSync,\n) -> None:\n  user_id = ctx.event.data[\"user_id\"]\n\n  (updated_user, sent_email) = asyncio.gather(\n    asyncio.create_task(step.run(\"update-user\", update_user, user_id)),\n    asyncio.create_task(step.run(\"send-email\", send_email, user_id)),\n  )\n```\n\n----------------------------------------\n\nTITLE: Event Payload Example for Function-Level Idempotency\nDESCRIPTION: Example JSON event payload containing a checkout completion event with cart information, used to demonstrate how function-level idempotency works with CEL expressions.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/handling-idempotency.mdx#2025-04-10_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"cart/checkout.completed\",\n  \"data\": {\n    \"email\": \"blake@example.com\",\n    \"cartId\": \"s6CIMNqIaxt503I1gVEICfwp\"\n  },\n  \"ts\": 1703275661157\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Inngest Client\nDESCRIPTION: TypeScript code for creating an Inngest client instance with application ID.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/trigger-your-code-from-retool.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inngest } from \"inngest\";\n\nexport const inngest = new Inngest({ id: \"my-app\" })\n```\n\n----------------------------------------\n\nTITLE: Sending an Event with Inngest Client in JavaScript\nDESCRIPTION: This code demonstrates how to send an event using the Inngest client. It includes all possible fields: required name and data fields, plus optional user, timestamp, and version fields.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/events/_event-format-and-structure.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait inngest.send({\n  name: \"api/user.signup\",\n  data: { method: \"google_auth\" },\n  user: { id: \"1JDydig4HHBJCiaGu2a9\" },\n  ts: new Date().valueOf(), // = 1663702869305\n  v: \"2022-09-20.1\",\n})\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Branch Environment Configuration in TypeScript\nDESCRIPTION: Example of configuring Inngest client with branch environment for specific platforms like Netlify in TypeScript.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/platform/environments.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst inngest = new Inngest({\n  id: \"my-app\",\n  env: process.env.BRANCH,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Ngrok Tunnel for Dev Server\nDESCRIPTION: Sets up an ngrok tunnel to enable bidirectional communication between the Dev Server and the app on port 8288.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/guides/modal.mdx#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Tunnel to the Dev Server's port\nngrok http 8288\n```\n\n----------------------------------------\n\nTITLE: Integrating Inngest with SvelteKit Framework\nDESCRIPTION: Implements Inngest in a SvelteKit application by creating route handlers for GET, POST, and PUT methods at '/api/inngest'. Available in Inngest v3.5.0 and above.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/serving-inngest-functions.mdx#2025-04-10_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport { functions, inngest } from '$lib/inngest';\nimport { serve } from 'inngest/sveltekit';\n\nconst inngestServe = serve({ client: inngest, functions });\nexport const GET = inngestServe.GET;\nexport const POST = inngestServe.POST;\nexport const PUT = inngestServe.PUT;\n```\n\n----------------------------------------\n\nTITLE: Scheduling Tasks with step.sleep_until() in Python\nDESCRIPTION: Shows how to use step.sleep_until() in Python to pause execution until a specific date and time. This method is useful for scheduling tasks or reminders at a precise moment in the future.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/inngest-steps.mdx#2025-04-10_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport inngest\nfrom src.inngest.client import inngest_client\nfrom datetime import datetime\n\n@inngest_client.create_function(\n    fn_id=\"send-scheduled-reminder\",\n    trigger=inngest.Trigger(event=\"app/reminder.scheduled\")\n)\nasync def send_scheduled_reminder(ctx: inngest.Context, step: inngest.Step):\n    date = datetime.fromisoformat(ctx.event.data[\"remind_at\"])\n    await step.sleep_until(\"wait-for-the-date\", date)\n    # Do something else\n```\n\n----------------------------------------\n\nTITLE: Using Generic Input Type with Custom Event Data in Go\nDESCRIPTION: Demonstrates how to use the updated Input type which now accepts event data type as a generic parameter instead of GenericEvent type. Shows implementation of a custom event handler with typed event data.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/go/migrations/v0.8-to-v0.11.mdx#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype MyEventData struct {\n\tMessage string `json:\"message\"`\n}\n\n_, err = inngestgo.CreateFunction(\n\tclient,\n\tinngestgo.FunctionOpts{ID: \"my-fn\"},\n\tinngestgo.EventTrigger(\"my-event\", nil),\n\tfunc(\n\t\tctx context.Context,\n\t\tinput inngestgo.Input[MyEventData],\n\t) (any, error) {\n\t\tfmt.Println(input.Event.Data.Message)\n\t\treturn nil, nil\n\t},\n)\n```\n\n----------------------------------------\n\nTITLE: Defining RetryAfterError Parameter Structure in Python\nDESCRIPTION: Python class definition for RetryAfterError that specifies retry timing for failed operations. Accepts an optional error message and retry timing specified as milliseconds, timedelta, or datetime.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/error-retries/inngest-errors.mdx#2025-04-10_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nRetryAfterError(\n  message: typing.Optional[str],\n  retry_after: typing.Union[int, datetime.timedelta, datetime.datetime],\n) -> None\n```\n\n----------------------------------------\n\nTITLE: Async Step Function Example in TypeScript\nDESCRIPTION: Demonstrates the use of async/await with Promise.all for parallel step execution in v1.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/migration.mdx#2025-04-10_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nawait Promise.all([\n  step.run(\"Send email\", () => sendEmail(user.email, \"Welcome!\")),\n  step.run(\"Send alert to staff\", () => sendAlert(\"New user created!\")),\n]);\n```\n\n----------------------------------------\n\nTITLE: Filtering Function Runs with Event and Output Properties\nDESCRIPTION: Example of a search query that filters function runs based on both event data (organizationId) and function output (verification status). This demonstrates the combined filtering capabilities of the Function Run Search feature.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/announcing-function-runs-search.mdx#2025-04-10_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nevent.data.organizationId == \"org_ab1fd2\" && output.verified == false\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic K6 HTTP POST Test Script in JavaScript\nDESCRIPTION: A simple K6 test script that sends a POST request with a JSON payload to an API endpoint. This example demonstrates the basic structure of a K6 test including importing the HTTP module, defining the payload, setting headers, and making the request.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/2022-07-load-testing-event-queue.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport http from \"k6/http\";\n\nexport default function () {\n  const data = '{\"status\":200}';\n  const params = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  http.post(\"https://www.example.local\", data, params);\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Events via HTTP API Using cURL\nDESCRIPTION: Example of sending an event to Inngest using the HTTP API with cURL. The request includes an event key in the URL and sends JSON payload with event name and data.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/events/index.mdx#2025-04-10_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://inn.gs/e/$INNGEST_EVENT_KEY \\\n  -H 'Content-Type: application/json' \\\n  --data '{\n    \"name\": \"user.signup\",\n    \"data\": {\n      \"userId\": \"645ea8289ad09eac29230442\"\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Basic TypeScript Type Inference with Object Properties\nDESCRIPTION: Demonstrates basic TypeScript inference where an object property is inferred as a boolean type. This shows the starting point before applying advanced typing techniques.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/building-educational-typescript-tooling.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst myHobbies = {\n  dancing: false,\n  typescript: true,\n};\n\nconst likeDancing = myHobbies.dancing;\n//    ^?\n```\n\n----------------------------------------\n\nTITLE: Pausing Execution with step.wait_for_event() in Python\nDESCRIPTION: Demonstrates how to use the wait_for_event method to pause function execution until a specific event is received. This example shows waiting for an onboarding completion event with a timeout of one day.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/inngest-steps.mdx#2025-04-10_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport inngest\nfrom src.inngest.client import inngest_client\n\n@inngest_client.create_function(\n    fn_id=\"send-onboarding-nudge-email\",\n    trigger=inngest.Trigger(event=\"app/account.created\")\n)\nasync def send_onboarding_nudge_email(ctx: inngest.Context, step: inngest.Step):\n    onboarding_completed = await step.wait_for_event(\n      \"wait-for-onboarding-completion\",\n      event=\"app/wait_for_event.fulfill\",\n      if_exp=\"event.data.user_id == async.data.user_id\",\n      timeout=datetime.timedelta(days=1),\n    );\n    # Do something else\n```\n\n----------------------------------------\n\nTITLE: Key Value Expressions in Inngest\nDESCRIPTION: Examples of expressions that return values used as keys for concurrency, rate limiting, debounce, or idempotency in Inngest functions. These expressions extract or generate unique identifiers from event data.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/writing-expressions.mdx#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Use the user's id as a concurrency key\n\"event.data.id\" // => \"1234\"\n\n// Concatenate two strings together to create a unique key\n`event.data.userId + \"-\" + event.type` // => \"user_1234-signup\"\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Event Type with Custom Event Data in Go\nDESCRIPTION: Shows the updated GenericEvent type usage which no longer accepts event user type as a generic parameter. Demonstrates type definition with custom event data structure.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/go/migrations/v0.8-to-v0.11.mdx#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype MyEventData struct {\n\tMessage string `json:\"message\"`\n}\n\ntype MyEvent = inngestgo.GenericEvent[MyEventData]\n```\n\n----------------------------------------\n\nTITLE: Exporting Function Description in JavaScript\nDESCRIPTION: Exports a constant string that describes the purpose of pausing an Inngest function.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/pause-functions.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const description = 'Learn how to pause an Inngest function.'\n```\n\n----------------------------------------\n\nTITLE: Implementing Inngest App in Python Flask\nDESCRIPTION: Creates a Flask-based Inngest app with ID \"flask_example\" that contains a hello-world function triggered by a \"say-hello\" event. The implementation sets up logging and serves the function via Flask on port 8000.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/apps/index.mdx#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport inngest\nfrom src.flask import app\nimport inngest.flask\n\nlogger = logging.getLogger(f\"{app.logger.name}.inngest\")\nlogger.setLevel(logging.DEBUG)\n\ninngest_client = inngest.Inngest(app_id=\"flask_example\", logger=logger)\n\n@inngest_client.create_function(\n    fn_id=\"hello-world\",\n    trigger=inngest.TriggerEvent(event=\"say-hello\"),\n)\ndef hello(\n    ctx: inngest.Context,\n    step: inngest.StepSync,\n) -> str:\n\ninngest.flask.serve(\n    app,\n    inngest_client,\n    [hello],\n)\n\napp.run(port=8000)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Error Types in TypeScript\nDESCRIPTION: Example of creating a custom error class that extends NonRetriableError to make error searching more specific. This pattern allows for typed errors that can be easily filtered in the Inngest UI.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/platform/monitor/inspecting-function-runs.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NonRetriableError } from \"inngest\";\n\nclass UserNotFoundError extends NonRetriableError {\n  constructor(message: string) {\n    super(message);\n    this.name = \"UserNotFoundError\";\n  }\n}\ninngest.createFunction(\n  { id: \"my-fn\" },\n  { event: \"user\" },\n  async ({ step, event }) => {\n    await step.run(\"get-user\", async () => {\n      const user = await getUser(event.data.userId);\n      if (!user) {\n        throw new UserNotFoundError(`User not found (${event.data.userId})`);\n      }\n      // ...\n    });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Successful Bulk Cancellation Request\nDESCRIPTION: This snippet shows the expected JSON response from the Inngest API after a successful bulk cancellation request. It includes the cancellation ID and job details.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/cancel-running-functions.mdx#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"01HMRMPE5ZQ4AMNJ3S2N79QGRZ\",\n  \"environment_id\": \"e03843e1-d2df-419e-9b7b-678b03f7398f\",\n  \"function_id\": \"schedule-reminder\",\n  \"started_after\": \"2024-01-21T18:23:12.000Z\",\n  \"started_before\": \"2024-01-22T14:22:42.130Z\",\n  \"if\": \"event.data.userId == 'user_o9235hf84hf'\"\n}\n```\n\n----------------------------------------\n\nTITLE: Orchestrating Multiple AI Model Functions with Inngest\nDESCRIPTION: Example of coordinating multiple AI model functions with different rate limits in a main workflow function.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/ai-in-production-managing-capacity-with-flow-control.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst mainFunction = inngest.createFunction(\n  { id: \"main-function\" },\n  { event: \"ai/summary.requested\" },\n  async ({ event, step }) => {\n    const preprocessed_text = await step.invoke(\"preprocess-text-with-llama\", {\n      function: highLimitFunction,\n      data: { string: event.data.text },\n    })\n    const preprocessed_text = await step.invoke(\"summarize-text-with-openai\", {\n      function: lowLimitFunction,\n      data: { string: preprocessed_text },\n    })\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Orchestrating Multiple AI Model Functions with Inngest\nDESCRIPTION: Example of coordinating multiple AI model functions with different rate limits in a main workflow function.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/ai-in-production-managing-capacity-with-flow-control.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst mainFunction = inngest.createFunction(\n  { id: \"main-function\" },\n  { event: \"ai/summary.requested\" },\n  async ({ event, step }) => {\n    const preprocessed_text = await step.invoke(\"preprocess-text-with-llama\", {\n      function: highLimitFunction,\n      data: { string: event.data.text },\n    })\n    const preprocessed_text = await step.invoke(\"summarize-text-with-openai\", {\n      function: lowLimitFunction,\n      data: { string: preprocessed_text },\n    })\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Exporting SoundCloud Case Study Metadata in JavaScript\nDESCRIPTION: This code snippet exports various metadata variables for the SoundCloud case study, including company information, quotes, and image assets. It sets up the content structure for the case study page.\nSOURCE: https://github.com/inngest/website/blob/main/pages/customers/soundcloud.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const title = 'Streamlining dynamic video generation'\nexport const companyName = 'SoundCloud'\nexport const logo = '/assets/customers/soundcloud-logo-white.svg'\nexport const logoScale = 1.5;\nexport const quote = {\n  text: `I wanted to find a solution that would let us just write the code, not manage the infrastructure around queues, concurrency, retries, error handling, prioritization... I don't think that developers should be even configuring and managing queues themselves in 2024.`,\n  attribution: {\n    name: 'Matthew Drooker',\n    title: 'CTO',\n  },\n  avatar: '/assets/customers/soundcloud-matthew-drooker.jpg',\n}\nexport const companyURL = 'https://soundcloud.com'\nexport const companyDescription = 'SoundCloud empowers artists and fans to connect and share through music'\nexport const ogImage = '/assets/customers/case-study/og-image-soundcloud.png'\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Trigger Data Structure for Dinner Generator\nDESCRIPTION: JSON structure defining the input parameters for triggering the dinner generator workflow, including participant count, dietary preferences, and cuisine type.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/weaviate-ai-workflows.md#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"participantsCount\": 4,\n    \"preferences\": [\"no nuts\", \"vegan\"],\n    \"cuisine_type\": \"Italian\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Public Workflow Actions in TypeScript\nDESCRIPTION: This snippet shows how to define PublicEngineAction objects that will be passed to the frontend components. These definitions include metadata about the action such as kind, name, and description.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/workflow-kit/actions.mdx#2025-04-10_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { type PublicEngineAction } from \"@inngest/workflow-kit\";\n\nexport const actionsDefinition: PublicEngineAction[] = [\n  {\n    kind: \"grammar_review\",\n    name: \"Perform a grammar review\",\n    description: \"Use OpenAI for grammar fixes\",\n  },\n];\n\n```\n\n----------------------------------------\n\nTITLE: Sending Events from Functions in TypeScript\nDESCRIPTION: Shows how to send events from within Inngest functions using step.sendEvent(). This approach ensures reliable event delivery and prevents duplicates in workflow functions.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/events/index.mdx#2025-04-10_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport default inngest.createFunction(\n  { id: \"user-onboarding\" },\n  { event: \"app/user.signup\" },\n  async ({ event, step }) => {\n    // Do something\n    await step.sendEvent(\"send-activation-event\", {\n      name: \"app/user.activated\",\n      data: { userId: event.data.userId },\n    });\n    // Do something else\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Health Check with Connect API in Node.js\nDESCRIPTION: This snippet demonstrates how to use the Connect API with a basic Node.js HTTP server to implement a health check endpoint. It listens for requests on the /ready endpoint and returns a 200 status code when the connection to Inngest is active.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/setup/connect.mdx#2025-04-10_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'http';\nimport { connect } from 'inngest/connect';\nimport { ConnectionState } from 'inngest/components/connect/types';\nimport { inngest, functions } from './src/inngest';\n\n(async () => {\n  const connection = await connect({\n    apps: [{ client: inngest, functions }]\n  });\n\n  console.log('Worker: connected', connection);\n\n  // This is a basic web server that only listens for the /ready endpoint\n  // and returns a 200 status code when the connection to Inngest is active.\n  const httpServer = createServer((req, res) => {\n    if (req.url === '/ready') {\n      if (connection.state === ConnectionState.ACTIVE) {\n        res.writeHead(200, { 'Content-Type': 'text/plain' });\n        res.end('OK');\n      } else {\n        res.writeHead(500, { 'Content-Type': 'text/plain' });\n        res.end('NOT OK');\n      }\n      return;\n    }\n    res.writeHead(404, { 'Content-Type': 'text/plain' });\n    res.end('NOT FOUND');\n  });\n\n  // Start the server on a port of your choice\n  httpServer.listen(8080, () => {\n    console.log('Worker: HTTP server listening on port 8080');\n  });\n\n  // When the Inngest connection has gracefully closed,\n  // this will resolve and the app will exit.\n  await connection.closed;\n  console.log('Worker: Shut down');\n\n  // Stop the HTTP server\n  httpServer.close();\n})();\n```\n\n----------------------------------------\n\nTITLE: Multi-line Function Run Search Query\nDESCRIPTION: Example showing how multi-line search queries work in the Function Run Search feature. Each line is automatically joined with an '&&' operator, allowing for more readable complex queries.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/announcing-function-runs-search.mdx#2025-04-10_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nevent.data.organizationId == \"org_ab1fd2\"\noutput.verified == false\n```\n\n----------------------------------------\n\nTITLE: Boolean Expressions with CEL in Inngest\nDESCRIPTION: Examples of boolean expressions used for conditional matching in Inngest functions. These expressions are used in wait for event conditions, cancellation conditions, and function trigger's 'if' option.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/writing-expressions.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Match a field to a string\n\"event.data.billingPlan == 'enterprise'\"\n\n// Number comparison\n\"event.data.amount > 1000\"\n\n// Combining multiple conditions\n\"event.data.billingPlan == 'enterprise' && event.data.amount > 1000\"\n\"event.data.billingPlan != 'pro' || event.data.amount < 300\"\n\n// Compare the function trigger with an inbound event (for wait for event or cancellation)\n\"event.data.userId == async.data.userId\"\n\n// Alternatively, you can use JavaScript string interpolation for wait for event\n`${userId} == async.data.userId` // => \"user_1234 == async.data.userId\"\n```\n\n----------------------------------------\n\nTITLE: Invoking a Function by ID Within the Same App in Python\nDESCRIPTION: This example demonstrates how to use invoke_by_id to call another function within the same app. The first function returns a string value, and the second function invokes the first one by its ID and prints the returned value.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/steps/invoke_by_id.mdx#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@inngest_client.create_function(\n    fn_id=\"fn-1\",\n    trigger=inngest.TriggerEvent(event=\"app/fn-1\"),\n)\nasync def fn_1(\n    ctx: inngest.Context,\n    step: inngest.Step,\n) -> str:\n    return \"Hello!\"\n\n@inngest_client.create_function(\n    fn_id=\"fn-2\",\n    trigger=inngest.TriggerEvent(event=\"app/fn-2\"),\n)\nasync def fn_2(\n    ctx: inngest.Context,\n    step: inngest.Step,\n) -> None:\n    output = step.invoke_by_id(\n        \"invoke\",\n        function_id=\"fn-1\",\n    )\n\n    # Prints \"Hello!\"\n    print(output)\n```\n\n----------------------------------------\n\nTITLE: Triggering Inngest Function from Vercel Function in TypeScript\nDESCRIPTION: This code shows how to replace a long-running Vercel Function with an Inngest Function invocation. It sends an event to trigger the Inngest Function and returns a response immediately.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/vercel-function-timeout.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inngest } from '@lib/inngest/client' \n\nexport const dynamic = 'force-dynamic';\n \nexport function POST(request: Request) {\n  await inngest.send({\n    name: \"sync/start\",\n    data: {\n      //  The event's data (params)\n    },\n  });\n\n  return new Response(`Sync triggered!`);\n}\n```\n\n----------------------------------------\n\nTITLE: Sending User Signup Event in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to send a user signup event to Inngest from a POST route handler. It creates a user, establishes a session, and sends an event with user data to Inngest.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/fan-out-jobs.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inngest } from '../inngest/client';\n\nexport async function POST(request: Request) {\n  // NOTE - this code is simplified for the of the example:\n  const { email, password } = await request.json();\n  const user = await createUser({ email, password });\n  await createSession(user.id);\n\n  // Send an event to Inngest\n  await inngest.send({\n    name: 'app/user.signup',\n    data: {\n      user: {\n        id: user.id,\n        email: user.email,\n      },\n    },\n  });\n\n  redirect('https://myapp.com/dashboard');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TransformOutputResult Class in Python for Inngest SDK v0.4\nDESCRIPTION: This code snippet defines the TransformOutputResult and TransformOutputStepInfo classes used in the transform_output middleware. It specifies the structure for handling output transformations in the updated SDK version.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/migrations/v0.3-to-v0.4.mdx#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass TransformOutputResult:\n    # Mutations to these fields within middleware will be kept after running\n    # middleware\n    error: typing.Optional[Exception]\n    output: object\n\n    # Mutations to these fields within middleware will be discarded after\n    # running middleware\n    step: typing.Optional[TransformOutputStepInfo]\n\nclass TransformOutputStepInfo:\n    id: str\n    op: execution.Opcode\n    opts: typing.Optional[dict[str, object]]\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Layout in JSX\nDESCRIPTION: Sets a configuration variable to hide the page sidebar when rendering the documentation page.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/platform/index.mdx#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const hidePageSidebar = true;\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Count in Inngest Functions\nDESCRIPTION: Examples showing how to configure the number of retries for an Inngest function. The 'retries' parameter in the function configuration allows specifying the exact number of retry attempts after the initial execution.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/error-retries/retries.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  {\n    id: \"click-recorder\",\n    retries: 10, // choose how many retries you'd like\n  },\n  { event: \"app/button.clicked\" },\n  async ({ event, step, attempt }) => { /* ... */ },\n);\n```\n\nLANGUAGE: go\nCODE:\n```\ninngestgo.CreateFunction(\n\tinngestgo.FunctionOpts{\n\t\tID:      \"click-recorder\",\n\t\tRetries: 10, // choose how many retries you'd like\n\t},\n\tinngestgo.EventTrigger(\"app/button.clicked\", nil),\n\tfunc(ctx context.Context, input inngestgo.Input[ButtonClickedEvent]) (any, error) {\n\t\t// ...\n\t},\n)\n```\n\nLANGUAGE: python\nCODE:\n```\n@inngest_client.create_function(\n    fn_id=\"click-recorder\",\n    retries=10,  # choose how many retries you'd like\n    trigger=inngest.TriggerEvent(event=\"app/button.clicked\"),\n)\ndef click_recorder(ctx: inngest.Context) -> None:\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Example JSON Event for Database Insert in Neon\nDESCRIPTION: This JSON snippet demonstrates the structure of an event created when a new row is inserted into a 'books' table in a Neon Postgres database. It includes details such as the event name, inserted data, and transaction information.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/neon-postgres-database-triggers-for-durable-functions.mdx#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"db/books.inserted\",\n  \"data\": {\n    \"new\": {\n      \"id\": {\n        \"data\": 2,\n        \"encoding\": \"i\"\n      },\n      \"name\": {\n        \"data\": \"Designing Data-Intensive Applications\",\n        \"encoding\": \"t\"\n      },\n      \"description\": {\n        \"data\": \"Data is at the center of many challenges...\",\n        \"encoding\": \"t\"\n      }\n    },\n    \"table\": \"books\",\n    \"txn_commit_time\": \"2024-09-24T14:41:19.75149Z\",\n    \"txn_id\": 36530520\n  },\n  \"ts\": 1727146545006\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Priority in Go for Inngest Function\nDESCRIPTION: This code snippet shows how to configure priority for an Inngest function using Go. It uses a string pointer to set the priority expression.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/priority.mdx#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ninngestgo.CreateFunction(\n  &inngestgo.FunctionOpts{\n    ID: \"ai-generate-summary\",\n    Priority: &inngest.Priority{\n      Run: inngestgo.StrPtr(\"event.data.account_type == 'enterprise' ? 120 : 0\"),\n    },\n  },\n  inngestgo.EventTrigger(\"ai/summary.requested\", nil),\n  func(ctx context.Context, input inngestgo.Input) (any, error) {\n    // This function will be prioritized based on the account type\n    return nil, nil\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Syncing Inngest App Using Curl Command in Shell\nDESCRIPTION: This command allows you to sync your Inngest app by sending a PUT request to your application's serve endpoint. It can be used from your local machine or automated within a CI/CD pipeline.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/apps/cloud.mdx#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PUT https://<your-app>.com/api/inngest\n```\n\n----------------------------------------\n\nTITLE: Basic Async Operation Handling in Serverless Functions\nDESCRIPTION: Demonstrates incorrect and correct ways to handle asynchronous operations in serverless functions using await.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/vercel-cloudflare-wait-until.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// ❌ BAD: If sendMetrics is an async function (a Promise), there is no guarantee it will succeed\nasync function POST(request) {\n  const data = await createPost(request.body)\n  sendMetrics({ metric: 'posts.created', increment: 1 })\n  return new Response(data)\n}\n// ✅ GOOD: Awaiting will ensure it completes before the function returns\nasync function POST(request) {\n  const data = await createPost(request.body)\n  await sendMetrics({ metric: 'posts.created', increment: 1 })\n  return new Response(data)\n}\n```\n\n----------------------------------------\n\nTITLE: Sending User Signup Event in Go\nDESCRIPTION: This Go code snippet sets up an HTTP server with a '/signup' route that handles user signup. It parses the request body, creates a user, and sends an event to Inngest with the user's data.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/fan-out-jobs.mdx#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    // Initialize your HTTP server\n    mux := http.NewServeMux()\n\n    // Handle signup route\n    mux.HandleFunc(\"/signup\", func(w http.ResponseWriter, r *http.Request) {\n        if r.Method != http.MethodPost {\n            http.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n            return\n        }\n\n        // Parse request body - in a real app you'd validate the input\n        var user struct {\n            Email string `json:\"email\"`\n        }\n        if err := json.NewDecoder(r.Body).Decode(&user); err != nil {\n            http.Error(w, err.Error(), http.StatusBadRequest)\n            return\n        }\n\n        // Send event to Inngest\n        _, err := inngestgo.Send(r.Context(), inngestgo.Event{\n            Name: \"app/user.signup\",\n            Data: map[string]interface{}{\n                \"user\": map[string]interface{}{\n                    \"email\": user.email,\n                },\n            },\n        })\n        if err != nil {\n            http.Error(w, err.Error(), http.StatusInternalServerError)\n            return\n        }\n\n        w.WriteHeader(http.StatusOK)\n    })\n\n    // Start the server\n    log.Fatal(http.ListenAndServe(\":8080\", mux))\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Value Expressions in Inngest\nDESCRIPTION: Examples of expressions that return dynamic values based on conditions in Inngest functions. These are typically used for run priority configurations where different conditions result in different priority values.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/writing-expressions.mdx#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Return a 0 priority if the billing plan is enterprise, otherwise return 1800\n`event.data.billingPlan == 'enterprise' ? 0 : 1800`\n\n// Return a value based on multiple conditions\n`event.data.billingPlan == 'enterprise' && event.data.requestNumber < 10 ? 0 : 1800`\n```\n\n----------------------------------------\n\nTITLE: Querying for Available Jobs in Postgres Queue\nDESCRIPTION: JavaScript function to query and update the status of available jobs in the queue, considering scheduled times and using SKIP LOCKED for concurrency.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/debouncing-in-queuing-systems-optimizing-efficiency-in-async-workflows.mdx#2025-04-10_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nasync function getQueueItem(jobType) {\n  return await sql`\n    UPDATE debounce_job_queue\n    SET status = 'PROCESSING'\n    WHERE id = (\n      SELECT id FROM debounce_job_queue\n      WHERE status = 'QUEUED' and scheduled_at <= now() + INTERVAL '2 minute'\n      ORDER BY scheduled_at ASC\n      FOR UPDATE SKIP LOCKED\n      LIMIT 1\n    )\n    RETURNING id, payload;\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Marketing Expert Prompt for DeepSeek-R1\nDESCRIPTION: Creates a constant string prompt that describes the role of a marketing expert since DeepSeek-R1 doesn't support system messages. This prompt sets the context for all subsequent interactions with the model.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/deepseek-r1-step-ai.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst MARKETING_EXPERT_PROMPT = `You are an expert marketing copywriter who specializes in creating engaging, culturally-appropriate content \\nin multiple languages. You understand marketing psychology, cultural nuances, and how to adapt messaging \\nacross different markets while maintaining brand voice.`;\n```\n\n----------------------------------------\n\nTITLE: Integrating Inngest with Nuxt Framework (v2)\nDESCRIPTION: Implements Inngest in a Nuxt v2 application by creating a server route for Inngest requests. Uses a slightly different function signature compared to the v3 implementation.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/serving-inngest-functions.mdx#2025-04-10_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from \"inngest/nuxt\";\nimport { inngest } from \"~~/inngest/client\";\nimport fnA from \"~~/inngest/fnA\"; // Your own function\n\nexport default defineEventHandler(\n  serve(inngest, [fnA])\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Client with v0.8\nDESCRIPTION: Example of creating a new Inngest client using the v0.8 SDK. The AppID is now a required field in ClientOpts, and DefaultClient has been removed.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/go/migrations/v0.7-to-v0.8.mdx#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nclient, err := inngest.NewClient(inngest.ClientOpts{AppID: \"my-app\"})\n```\n\n----------------------------------------\n\nTITLE: Implementing Stream Termination in Inngest Functions\nDESCRIPTION: This code demonstrates how to handle stream termination by sending a specific message from an Inngest function. The function processes data and then publishes a 'Search complete' message to signal the client that the stream can be closed.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/realtime/nextjs.mdx#2025-04-10_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { inngest } from \"../client\";\n\n\nexport const simpleSearchAgent = inngest.createFunction(\n  {\n    id: \"simple-search-agent-workflow\",\n  },\n  {\n    event: \"app/simple-search-agent.run\",\n  },\n  async ({ step, event, publish }) => {\n    const { uuid } = event.data;\n\n    // ...\n\n    await publish({\n      channel: `simple-search.${uuid}`,\n      topic: \"updates\",\n      data: \"Search complete\",\n    });\n\n    return {\n      response,\n    };\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration\nDESCRIPTION: Creates an environment file to store the tunnel URL for development.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/guides/modal.mdx#2025-04-10_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nINNGEST_DEV=https://23ef-173-10-53-121.ngrok-free.app\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Project\nDESCRIPTION: This shell command snippet shows how to install dependencies and run the development server for the project. It uses npm, but mentions that yarn or pnpm can also be used.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/user-defined-workflows-sanity-nextjs.mdx#2025-04-10_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm i\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Defining Fan-out Functions in Go\nDESCRIPTION: This Go code defines two functions, 'sendWelcomeEmail' and 'startStripeTrial', both triggered by the 'app/user.signup' event. It demonstrates how to implement fan-out in Go using Inngest, with each function performing different tasks in response to the same event.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/fan-out-jobs.mdx#2025-04-10_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/inngest/inngest-go\"\n    \"github.com/inngest/inngest-go/step\"\n)\n\nfunc sendWelcomeEmail() *inngest.Function {\n    return inngestgo.CreateFunction(\n        inngest.FunctionOpts{\n            ID: \"send-welcome-email\",\n        },\n        inngest.TriggerEvent(\"app/user.signup\"),\n        func(ctx *inngest.Context) error {\n            _, err := step.Run(\"send-email\", func(ctx *inngest.StepContext) (any, error) {\n                return sendEmail(&SendEmailInput{\n                    Email:    ctx.Event.Data[\"user\"].(map[string]interface{})[\"email\"].(string),\n                    Template: \"welcome\",\n                })\n            })\n            return err, nil\n        },\n    )\n}\n\nfunc startStripeTrial() *inngest.Function {\n    return inngestgo.CreateFunction(\n        inngest.FunctionOpts{\n            ID: \"start-stripe-trial\",\n        },\n        inngest.TriggerEvent(\"app/user.signup\"),\n        func(ctx *inngest.Context) (any, error) {\n            customer, err := step.Run(\"create-customer\", func(ctx *inngest.StepContext) (any, error) {\n                return nil, stripe.Customers.Create(&stripe.CustomerParams{\n                    Email: ctx.Event.Data[\"user\"].(map[string]interface{})[\"email\"].(string),\n                })\n            })\n            if err != nil {\n                return err, nil\n            }\n\n            _, err = step.Run(\"create-subscription\", func(ctx *inngest.StepContext) (any, error) {\n                return nil, stripe.Subscriptions.Create(&stripe.SubscriptionParams{\n                    Customer:        customer.ID,\n                    Items:          []*stripe.SubscriptionItemsParams{{Price: \"price_1MowQULkdIwHu7ixraBm864M\"}},\n                    TrialPeriodDays: 14,\n                })\n            })\n            return err, nil\n        },\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Traditional Python function with unclear error throwing points\nDESCRIPTION: A Python function that demonstrates how traditional error handling makes it unclear which lines might throw errors. This illustrates the problem with thrown errors - it's impossible to know where errors might occur without reading all the function implementations.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/python-errors-as-values.mdx#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef upsert_thing(thing_id: str) -> Thing:\n    thing = get_thing(thing_id)\n    thing.set_name(\"Doodad\")\n    update_thing(thing)\n    log_thing(thing)\n    return thing\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Event Handler with Union Types in TypeScript\nDESCRIPTION: An improved event handler that uses string literal union types to restrict event names to a predefined set. This enables IDE autocomplete and compile-time error checking for invalid event names.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/building-educational-typescript-tooling.mdx#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst on = (\n  event: \"server.start\" | \"server.stop\",\n  fn: (...args: any[]) => any\n) => {\n  // ...\n  // We're protected at compile time, and we get autocomplete!\n};\n\non(\"event\", () => console.log(\"Something happened\"));\n// Error: Argument of type '\"event\"' is not assignable to parameter of type '\"server.start\" | \"server.stop\"'.\n```\n\n----------------------------------------\n\nTITLE: Creating a Typed Inngest Client (v2)\nDESCRIPTION: Shows how to create a new Inngest client with TypeScript types for v2 of the SDK, using the 'name' property instead of 'id'.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/typescript.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventSchemas, Inngest } from \"inngest\";\n\ntype UserSignup = {\n  data: {\n    email: string;\n    name: string;\n  };\n};\ntype Events = {\n  \"user/new.signup\": UserSignup;\n};\n\nexport const inngest = new Inngest({\n  name: \"My App\",\n  schemas: new EventSchemas().fromRecord<Events>(),\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Inngest with Fresh (Deno)\nDESCRIPTION: Shows how to use Inngest with Deno's Fresh framework via the esm.sh CDN. It includes setting up the serve handler in an API route file.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/serving-inngest-functions.mdx#2025-04-10_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from \"https://esm.sh/inngest/deno/fresh\";\nimport { inngest } from \"./src/inngest/client.ts\";\nimport fnA from \"./src/inngest/fnA\"; // Your own function\n\nexport const handler = serve({\n  client: inngest,\n  functions: [fnA],\n});\n```\n\n----------------------------------------\n\nTITLE: Python implementation using tuple return values (Go-inspired)\nDESCRIPTION: A Python implementation of errors as values using tuples, inspired by Go. This approach returns a pair of (value, error) where one is always None. This forces error handling but has limitations with type checking.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/python-errors-as-values.mdx#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Define a function that returns a tuple of a User and an error\ndef get_user(user_id: str) -> tuple[User | None, Exception | None]:\n    rows = users.find(user_id=user_id)\n    if len(rows) == 0:\n        return None, Exception(\"user not found\")\n\n    return rows[0], None\n\ndef rename_user(\n    user_id: str, name: str\n) -> tuple[User | None, Exception | None]:\n    # Consume the function\n    user, err = get_user(user_id)\n    if err is not None:\n        return None, err\n\n    # Unnecessary check but the type checker can't know that\n    assert user is not None\n\n    user.name = name\n    return user, None\n```\n\n----------------------------------------\n\nTITLE: Implementing a Polling Function for Inngest Run Output in TypeScript\nDESCRIPTION: This snippet defines a function that polls for the output of a function run until it's completed. It handles different run statuses and throws an error for failed or cancelled runs.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/examples/fetch-run-status-and-output.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nasync function getRunOutput(eventId) {\n  let runs = await getRuns(eventId);\n  while (runs[0].status !== \"Completed\") {\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n    runs = await getRuns(eventId);\n    if (runs[0].status === \"Failed\" || runs[0].status === \"Cancelled\") {\n      throw new Error(`Function run ${runs[0].status}`);\n    }\n  }\n  return runs[0];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Workflow Schema in Sanity with TypeScript\nDESCRIPTION: TypeScript schema definition for workflows in Sanity CMS. Includes fields for title, trigger, accountId, and an array of possible actions that can be executed in the workflow.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/user-defined-workflows-sanity-nextjs.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {defineField, defineType} from 'sanity'\n\nexport default defineType({\n    name: 'workflow',\n    type: 'document',\n    title: 'Workflow',\n    fields: [\n        defineField({\n            name: 'title',\n            title: 'Title',\n            type: 'string',\n            validation: (Rule) => Rule.required(),\n        }),\n        defineField({\n            name: 'trigger',\n            title: 'Trigger',\n            type: 'string',\n            validation: (Rule) => Rule.required(),\n        }),\n        defineField({\n            name: 'accountId',\n            title: 'Account ID',\n            type: 'string',\n            validation: (Rule) => Rule.required(),\n        }),\n        defineField({\n            name: 'actions',\n            title: 'Actions',\n            type: 'array',\n            of: [{type: 'delay'}, {type:'filter'}, {type: 'sendEmail'}, {type: 'slack'}]\n        })\n    ]\n})\n```\n\n----------------------------------------\n\nTITLE: Scheduling Weekly Activity Emails with Go\nDESCRIPTION: This Go code defines a scheduled function that fetches all users, creates events for each user, and sends them to Inngest for weekly activity emails.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/sending-events-from-functions.mdx#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    \"github.com/inngest/inngest-go\"\n    \"github.com/inngest/inngest-go/step\"\n)\n\nfunc loadCron(client *inngest.Client) *inngest.FunctionDefinition {\n    return client.CreateFunction(\n        inngest.FunctionOpts{\n            ID: \"weekly-activity-load-users\",\n        },\n        inngest.CronTrigger(\"0 12 * * 5\"),\n        func(ctx context.Context, event *inngest.Event) error {\n            // Fetch all users\n            var users []User\n            if err := step.Run(\"fetch-users\", func() error {\n                var err error\n                users, err = fetchUsers()\n                return err\n            }); err != nil {\n                return err\n            }\n\n            // For each user, send us an event. Inngest supports batches of events\n            // as long as the entire payload is less than 512KB.\n            events := make([]inngest.Event, len(users))\n            for i, user := range users {\n                events[i] = inngest.Event{\n                    Name: \"app/weekly-email-activity.send\",\n                    Data: map[string]interface{}{\n                        \"user\": user,\n                    },\n                }\n            }\n\n            // Send all events to Inngest, which triggers any functions listening to\n            // the given event names.\n            if err := inngestgo.Send(ctx, events); err != nil {\n                return err\n            }\n\n            // Return the number of users triggered\n            return step.Return(map[string]interface{}{\n                \"count\": len(users),\n            })\n        },\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Common Python approach with coarse-grained error handling\nDESCRIPTION: A Python function showing the typical approach developers use with one large try/catch block. This is more common but provides less specific error handling, demonstrating why thrown errors encourage less careful error handling.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/python-errors-as-values.mdx#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef upsert_thing(thing_id: str) -> Thing:\n    try:\n        thing = get_thing(thing_id)\n        thing.set_name(\"Doodad\")\n        update_thing(thing)\n        log_thing(thing)\n    except Exception as err:\n        raise Exception(f\"something errored ¯\\_(ツ)_/¯: {err}\")\n\n\treturn thing\n```\n\n----------------------------------------\n\nTITLE: Configuring Function Cancellation on Specific Events in JavaScript\nDESCRIPTION: Example of defining a function that can be cancelled when a specific event occurs with matching criteria. This demonstrates how ephemeral matchers are created for the duration of a function execution.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/accidentally-quadratic-evaluating-trillions-of-event-matches-in-real-time.mdx#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ninngest.createFunction(\n  {\n    id: \"sync-contacts\",\n    cancelOn: [{ event: \"app/user.deleted\", match: \"data.userId\" }],\n  },\n  { event: \"app/user.created\" },\n  // ...\n);\n```\n\n----------------------------------------\n\nTITLE: Triggering Inngest Background Functions with Go\nDESCRIPTION: This code shows how to send an event to Inngest in Go that will trigger the background function. The event includes the name that matches the function trigger and custom data to be processed.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/background-jobs.mdx#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n_, err := inngestgo.Send(context.Background(), inngestgo.Event{\n    Name: \"app/user.created\", // This matches the event used in `createFunction`\n    Data: map[string]interface{}{\n        \"email\": \"test@example.com\",\n        // any data you want to send\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Rust implementation of errors as values using Result type\nDESCRIPTION: A Rust example demonstrating the Result type approach to error handling. Result is a wrapper type that contains either a successful value (Ok) or an error value (Err), forcing explicit error handling.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/python-errors-as-values.mdx#2025-04-10_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n// Define a function that returns a Result with a User or an error string\nfn get_user(user_id: &str) -> Result<Option<User>, &str> {\n    match find_user_by_id(user_id) {\n        Some(user) => Ok(Some(user)),\n        None => Err(\"user not found\"),\n    }\n}\n\nfn rename_user(user_id: &str, name: String) -> Result<User, &str> {\n    // Consume the function\n    match get_user(user_id) {\n        Ok(Some(mut user)) => {\n            user.name = name;\n            Ok(user)\n        },\n        Ok(None) => Err(\"user not found\"),\n        Err(e) => Err(e),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating createFunction() in Inngest SDK v3\nDESCRIPTION: Shows the change in createFunction() syntax between v2 and v3. V3 requires an object for the first two parameters instead of strings for better option discoverability.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/migration.mdx#2025-04-10_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  { id: \"send-welcome-email\", name: \"Send welcome email\" },\n  { event: \"app/user.created\" },\n  async () => {\n    // ...\n  }\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  \"Send welcome email\",\n  \"app/user.created\",\n  async () => {\n    // ...\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Plaid Transactions Update Handler Function with Inngest in JSX\nDESCRIPTION: Orchestrates the full transaction sync workflow triggered by Plaid updates, fetching connected destinations, coordinating account and transaction syncs across destinations using the invoke functionality.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/synchronizing-financial-data-from-plaid-and-stripe.mdx#2025-04-10_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { syncAccounts, syncTransactions } from './functions/...';\n\nconst plaidDefaultUpdate = inngest.createFunction(\n  {\n    ...\n  },\n  { event: 'plaid/transactions.default_update' },\n  async ({ event, step, utils }) => {\n    const connectedDestinationIds = await utils.getConnectedDestinationIds(\n\t  { id: 'get-connected-destination-ids' }, \n\t  data: event.data\n\t)\n\t\t\n\tconst sync = await utils.startSync({ id: 'start-sync' }, ...);\n\tconst accountsData = await step.run({ id: 'fetch-accounts-from-plaid' }, ...)\n\t\t\n\tconst syncAccountsResponse = await Promise.all(connectedDestinationIds.map(destinationId => \n\t  step.invoke({ id: `sync-accounts-to-${destinationId}` }, {\n\t    function: syncAccounts,\n\t\tdata: {\n\t\t  destinationid,\n\t\t  syncId: sync.id,\n\t\t  accounts: accountsData\n\t\t}\n\t  })\n\t)).then(responses => {\n\t  const hasError = Boolean(responses.find(response => response.hasError));\n\t\t\n\t  return { responses, hasError }\n\t})\n\t\n\tif ( syncAccountsResponse.hasError ) {\n\t  // Send notification\n\t  // Update logs\n\t  // etc.\n\t  return;\n\t}\n\n\tconst transactionsData = await step.run({ id: 'fetch-transactions-from-plaid' }, ...);\n\tconst syncTransactionsResponse = ...\n})\n```\n\n----------------------------------------\n\nTITLE: Execution Flow Demonstration (Incorrect)\nDESCRIPTION: Shows a common misconception about how Inngest functions execute, incorrectly assuming sequential execution without re-entries.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/working-with-loops.mdx#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# This is a common assumption of how Inngest executes the code above.\n# It is not correct.\n\n<run start>\n\n\"hello\"\n\"a\"\n\"b\"\n\"c\"\n\n<run complete>\n```\n\n----------------------------------------\n\nTITLE: Python implementation using union types with type narrowing\nDESCRIPTION: A Python implementation using union types and type narrowing with isinstance() checks. This approach is concise, idiomatic, and works well with type checkers, making it the preferred method for implementing errors as values in Python.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/python-errors-as-values.mdx#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Define a function that returns a union of a User and an error\ndef get_user(user_id: str) -> User | Exception:\n    rows = users.find(user_id=user_id)\n    if len(rows) == 0:\n        return Exception(\"user not found\")\n\n    return rows[0]\n\ndef rename_user(user_id: str, name: str) -> User | Exception:\n    # Consume the function\n    user = get_user(user_id)\n    if isinstance(user, Exception):\n        return user\n\n    user.name = name\n    return user\n```\n\n----------------------------------------\n\nTITLE: Updating Video Status after Successful Rendering in JavaScript\nDESCRIPTION: This step updates the video status to 'ready' after successful rendering and updates the render time metric. It uses MongoDB's updateOne operation to atomically update multiple fields in the database document.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/banger-video-rendering-pipeline.mdx#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait step.run('update-video-status-to-ready', () =>\n  Promise.all([\n    VideoModel.updateOne(\n      { _id: videoId },\n      {\n        $set: {\n          status: 'ready',\n          videoFileURL\n        },\n        $inc: {\n          renderTime\n        }\n      }\n    )\n  ])\n)\n```\n\n----------------------------------------\n\nTITLE: Using 'step' Instead of 'tools' in Inngest v2\nDESCRIPTION: Demonstrates the replacement of the deprecated 'tools' parameter with 'step' in Inngest v2 function definitions.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/migration.mdx#2025-04-10_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  { name: \"Example\" },\n  { event: \"app/user.created\" },\n  async ({ step }) => {\n    await step.run(\"Foo\", () => {});\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Event Sending in Inngest\nDESCRIPTION: Example of sending an event in Inngest with minimal properties that are only useful for function execution context. This represents the approach before optimizing for searchability.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/announcing-function-runs-search.mdx#2025-04-10_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nawait inngest.send({\n  name: \"user/message.sent\",\n  data: { messageId: 1, userId: 12 },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata in JavaScript\nDESCRIPTION: JavaScript export statements that define the title and publication date for the webhook management API documentation page.\nSOURCE: https://github.com/inngest/website/blob/main/content/changelog/2025-02-11-webhooks-api.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const title = \"Webhook management API\";\nexport const date = \"2025-02-12\";\n```\n\n----------------------------------------\n\nTITLE: Running Historic Replay with Inngest CLI\nDESCRIPTION: Command to use Inngest's historic replay feature, which allows testing local functions against real production data. This command pipes historic events from your system to your local functions for testing.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/release-v0-5-0.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ninngest run --replay\n```\n\n----------------------------------------\n\nTITLE: Sending Typed Events in Next.js API\nDESCRIPTION: Shows how to send type-safe events within a Next.js API handler. TypeScript will warn if the event payload doesn't match the defined types.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/typescript.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextApiRequest, NextApiResponse } from \"next\";\nimport { inngest } from \"../../inngest/client\";\n\nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\n  const user = createNewUser(req.body.email, req.body.password, req.body.name);\n\n  // TypeScript will now warn you if types do not match for the event payload\n  // and the user object's properties:\n  await inngest.send({\n    name: \"user/new.signup\",\n    data: {\n      email: user.email,\n      name: user.name,\n    }\n  });\n  res.status(200).json({ success: true });\n}\n```\n\n----------------------------------------\n\nTITLE: Inngest Function with Limited Return Value\nDESCRIPTION: Example of an Inngest function that returns only the LLM completion text. This represents a limited approach before optimizing for searchability of function outputs.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/announcing-function-runs-search.mdx#2025-04-10_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nexport const chatCompletion = inngest.createFunction(\n  {\n    name: \"Create chat completion\",\n    id: \"create-chat-completion\",\n    throttle: {\n      limit: 5,\n      period: \"60s\"\n    },\n  },\n  { event: \"ai/chat.completion\" },\n  async ({ event, step }) => {\n    const completion = await openai.chat.completions.create({\n      messages: event.data.messages,\n      model: \"gpt-3.5-turbo\",\n    });\n    const { choices } = completion\n    const message = choices[0]!.message\n    return message?.content;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Init Function in Bubbletea Model\nDESCRIPTION: This snippet shows how to implement the Init function in a Bubbletea model, which is called just before the first render. The Init function allows for running async logic and returning a tea.Msg which will be passed to Update() to update the model's state.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/interactive-clis-with-bubbletea.md#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\n\ttea \"github.com/charmbracelet/bubbletea\"\n)\n\nfunc NewModel() (model, error) {\n\treturn model{}, nil\n}\n\ntype model struct {\n\tnameInput string\n\tlistInput string\n\tevent     string\n}\n\nvar _ tea.Model = (*model)(nil)\n\nfunc (m model) View() string {\n\tif m.event != \"\" {\n\t\treturn fmt.Sprintf(\"You've selected: %s\", m.event)\n\t}\n\treturn \"TODO\" // We'll do this soon :)\n}\n\nfunc (m model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {\n\tswitch msg := msg.(type) {\n\tcase tea.WindowSizeMsg:\n\t\t_, _ = msg.Width, msg.Height\n\tcase tea.KeyMsg:\n\t\tswitch msg.Type {\n\t\tcase tea.KeyCtrlC, tea.KeyCtrlBackslash:\n\t\t\treturn m, tea.Quit\n\t\t}\n\t}\n\treturn m, nil\n}\n\n// Init() is called to kick off the render cycle.  It allows you to\n// perform IO after the app has loaded and rendered once, asynchronously.\n// The tea.Cmd can return a tea.Msg which will be passed into Update() in order\n// to update the model's state.\nfunc (m model) Init() tea.Cmd {\n\t// We have nothing to do.  But, you could write a function which eg. calls\n\t// an HTTP endpoint to load events here, then return those events as a tea.Msg\n\t// so that our Update() function can store the events.\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Servers for Web Browsing Capabilities\nDESCRIPTION: Shows how to extend the coding agent with web browsing capabilities by configuring Model Context Protocol (MCP) servers. This enables the agent to interact with external tools like Stagehand for web browsing, similar to functionality in Cursor Agent.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/cursor-agentkit-e2b.mdx#2025-04-10_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAgent, anthropic } from \"@inngest/agent-kit\"\n\nconst agent = createAgent({\n    name: \"Coding Agent\",\n    description: \"An expert coding agent\",\n    // prompt, model configuration\n    mcpServers: [\n        // enables our Coding Agent to browse the web\n    {\n        name: \"stagehand\",\n        transport: {\n        type: \"sse\",\n        url: \"http://localhost:3005\",\n        requestInit: {\n            headers: {\n            \"BROWSERBASE_API_KEY\": \"<YOUR_BROWSERBASE_API_KEY>\",\n            \"BROWSERBASE_PROJECT_ID\": \"browserbase-project-id\",\n            \"OPENAI_API_KEY\": \"openai-api-key\",\n            },\n        },\n        },\n    },\n    ],  \n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Workflow Throttling in Inngest\nDESCRIPTION: Example configuration for implementing workflow throttling to limit execution frequency. This snippet shows how to set a workflow to run at most once per day using throttle_count and throttle_period parameters.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/product-updates-jan-18.md#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nthrottle_count: 1\nthrottle_period: 1d\n```\n\n----------------------------------------\n\nTITLE: Setting up Inngest with Express.js\nDESCRIPTION: Code to set up Inngest using the provided serve handler in an Express.js server.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/getting-started/nodejs-quick-start.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from \"express\";\nimport { serve } from \"inngest/express\";\nimport { inngest, functions } from \"./src/inngest\"\n\nconst app = express();\n// Important: ensure you add JSON middleware to process incoming JSON POST payloads.\napp.use(express.json());\n// Set up the \"/api/inngest\" (recommended) routes with the serve handler\napp.use(\"/api/inngest\", serve({ client: inngest, functions }));\n\napp.listen(3000, () => {\n  console.log('Server running on http://localhost:3000');\n});\n```\n\n----------------------------------------\n\nTITLE: RetryAfterError Parameters in TypeScript\nDESCRIPTION: Defines the parameters for the RetryAfterError constructor in TypeScript, including message, retryAfter timing information, and optional cause for tracking the original error.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/error-retries/inngest-errors.mdx#2025-04-10_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nnew RetryAfterError(\n  message: string,\n  retryAfter: number | string | date,\n  options?: { cause?: Error }\n): RetryAfterError\n```\n\n----------------------------------------\n\nTITLE: Setting Inngest Event API Base URL Environment Variable\nDESCRIPTION: Configures the origin for the Inngest Event API. Defaults to https://inn.gs/ and can be customized for local development or Docker environments.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/overview/env-vars.mdx#2025-04-10_snippet_3\n\nLANGUAGE: env\nCODE:\n```\nINNGEST_EVENT_API_BASE_URL=https://inn.gs/\n```\n\n----------------------------------------\n\nTITLE: Implementing Video Processing Tasks with Celery in Python\nDESCRIPTION: This code defines Celery tasks for video processing, showing how state must be managed between different steps in the workflow. It requires separate implementations for transcription, summarization, and database operations.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/queues-are-no-longer-the-right-abstraction.mdx#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# tasks.py\n\nfrom celery import shared_task\nfrom utils import transcribe_video, summarize_transcript, write_to_db\n\n@shared_task(name='process_video')\ndef process_video(event, user_id, priority=10):\n    video_path = event['data']['videoPath']\n\n    # Transcribe the video\n    transcript = transcribe_video(video_path, user_id, priority)\n\n    # Summarize the transcript\n    summary = summarize_transcript(transcript, user_id, priority)\n\n    # Write to the database\n    write_to_db(video_path, transcript, summary, user_id, priority)\n\n@shared_task\ndef process_video_event(event, priority=10):\n    user_id = event['data']['userId']\n    process_video.apply_async(args=[event], kwargs={'user_id': user_id, 'priority': priority})\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Event Types for waitForEvent (v2)\nDESCRIPTION: Shows how to define multiple event types for use with waitForEvent functionality in v2 of the SDK.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/typescript.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EventSchemas, Inngest } from \"inngest\";\n\ntype UserSignup = {\n  data: {\n    email: string;\n    user_id: string;\n    name: string;\n  };\n};\ntype UserAccountSetupCompleted = {\n  data: {\n    user_id: string;\n  };\n};\ntype Events = {\n  \"user/new.signup\": UserSignup;\n  \"user/account.setup.completed\": UserAccountSetupCompleted;\n};\n\nexport const inngest = new Inngest({\n  name: \"My App\",\n  schemas: new EventSchemas().fromRecord<Events>(),\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Inngest Integration with waitUntil\nDESCRIPTION: Demonstrates how to integrate Inngest event sending with waitUntil in a serverless function.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/vercel-cloudflare-wait-until.mdx#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { inngest } from \"src/inngest\";\n\nasync function POST(request) {\n  const data = await createPost(request.body)\n  waitUntil(inngest.send({ name: \"post.created\", data: data }))\n  return new Response(data)\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Data into Weaviate Collections\nDESCRIPTION: TypeScript function that processes JSON files and creates vectorized collections in Weaviate using batching and vectorizer APIs. Handles data loading and embedding generation.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/weaviate-ai-workflows.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function processJsonFile(\n  filePath: string,\n  client: any,\n  batchSize: number = 100\n) {\n  const jsonData = JSON.parse(await fs.readFile(filePath, \"utf-8\"));\n  let count = 0;\n  let records: any[] = [];\n\n  // Create collection name from filename (without extension)\n  const collectionName = path\n    .basename(filePath, \".json\")\n    .replace(/[^a-zA-Z0-9]/g, \"\") // Remove special characters\n    .replace(/^[0-9]/, \"C$&\"); // Prefix with 'C' if starts with number\n\n  const properties = Object.keys(jsonData[0]);\n\n  // Create collection for this file\n  const collection = await client.collections.create({\n    name: collectionName,\n    properties: properties.map((property) => ({\n      name: property,\n      dataType: \"text\" as const,\n    })),\n    // Use Weaviate vectorize to create embeddings\n    vectorizers: [\n      weaviate.configure.vectorizer.text2VecOpenAI({\n        name: \"recipe_vector\",\n        sourceProperties: properties as any,\n      }),\n    ],\n  });\n\n  for (const record of jsonData) {\n    const { id: _, ...cleanRecord } = record;\n    records.push({\n      class: collectionName,\n      properties: cleanRecord,\n    });\n    count++;\n\n    // we push new records in batches using Weaviate's insertMany()\n    if (count % batchSize === 0) {\n      console.log(\n        `Processing batch from ${path.basename(filePath)}: ${\n          records.length\n        } records`\n      );\n      await collection.data.insertMany(records);\n      records = [];\n    }\n  }\n\n  // Process any remaining records\n  if (records.length > 0) {\n    console.log(\n      `Processing final batch from ${path.basename(filePath)}: ${\n        records.length\n      } records`\n    );\n    await collection.data.insertMany(records);\n  }\n\n  return { count, collectionName };\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Referenced Functions\nDESCRIPTION: Demonstrates how to invoke a referenced function using step.invoke() with proper typing for input and output parameters.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/functions/references.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @/inngest/someFn.ts\nimport { computeSquare } from \"@/inngest/compute\"; // import the referenece\n\n// square.result is typed as a number\nconst square = await step.invoke(\"compute-square-value\", {\n  function: computeSquare,\n  data: { number: 4 }, // input data is typed, requiring input if it's needed\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Configuration File\nDESCRIPTION: Implementation of a basic Next.js configuration file (next.config.mjs) that sets up a Single-Page Application output and specifies the distribution directory.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/migrating-from-vite-to-nextjs.mdx#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  output: 'export', // Outputs a Single-Page Application (SPA)\n  distDir: './dist', // Changes the output directory `./dist/`\n}\n\nexport default nextConfig\n```\n\n----------------------------------------\n\nTITLE: Running Standalone Inngest Docker Container\nDESCRIPTION: Command to run Inngest Dev Server in a Docker container, exposing port 8288 and connecting to a host application on port 3000.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/development-with-docker.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 8288:8288 \\\n  inngest/inngest \\\n  inngest dev -u http://host.docker.internal:3000/api/inngest\n```\n\n----------------------------------------\n\nTITLE: Implementing waitForEvent in Inngest TypeScript Functions\nDESCRIPTION: This code demonstrates how to use the waitForEvent functionality in Inngest to pause function execution until a specific event is received. The example shows an onboarding flow that waits for a user to create a function after sending a welcome email, with a 24-hour timeout.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/postmortem-2023-08-31.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  { name: \"Onboarding flow\" },\n  { event: \"auth/user.created\" }, // The event that causes this function to run\n  async ({ event, step }) => {\n    await step.run(\"Send welcome email\", () => { sendEmail() });\n\n    // Wait for the 'app/function.created' event that has the same user ID\n    // for up to 24 hours.\n    const fn = await step.waitForEvent(\n      \"app/function.created\",\n      {\n        if: \"async.data.user_id == event.data.user_id\",\n        timeout: \"24h\",\n      }\n    );\n\n    if (fn === null) {\n      // The user didn't create a function within 24 hours.  Follow up.\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Inngest Functions via CURL\nDESCRIPTION: Shows how to register the Inngest functions with the Inngest Cloud service using a curl command.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/no-workers-necessary-nodejs-express.mdx#2025-04-10_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PUT https://yourappsdomain.com/api/inngest\n```\n\n----------------------------------------\n\nTITLE: Required Provider Component Structure in @inngest/workflow-kit\nDESCRIPTION: This snippet shows the required component structure for the Provider component's children in @inngest/workflow-kit. The Provider must contain an Editor component with a Sidebar component nested inside it.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/workflow-kit/components-api.mdx#2025-04-10_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Editor>\n  <Sidebar position=\"right\"></Sidebar>\n</Editor>\n```\n\n----------------------------------------\n\nTITLE: Type Widening Problem with Record Type\nDESCRIPTION: Illustrates a limitation where using Record<Keys, ValueType> widens literal types back to their base types, causing the loss of specific type information at the value level.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/building-educational-typescript-tooling.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype Hobby = \"dancing\" | \"romancing\" | \"typescript\";\n\nconst myHobbies: Record<Hobby, boolean> = {\n  dancing: false,\n  romancing: false,\n  typescript: true,\n} as const;\n\nconst likeDancing = myHobbies.dancing;\n```\n\n----------------------------------------\n\nTITLE: Updating Tip Status in Inngest Workflow Step\nDESCRIPTION: This Inngest step updates the status of a tip in Sanity CMS to 'processing'. It uses the step.run method to execute the update as a discrete operation within the larger workflow.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/nextjs-trpc-inngest.md#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait step.run(\"Update Tip Status\", async () => {\n  return await sanityWriteClient\n    .patch(event.data.tipId)\n    .set({\n      state: \"processing\",\n    })\n    .commit();\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Webhooks to Specific Branch Environments in Inngest\nDESCRIPTION: This bash example shows how to send a webhook to a specific branch environment in Inngest by including the x-inngest-env query parameter. This routes the event to the specified branch instead of the default environment.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/platform/webhooks.mdx#2025-04-10_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://inn.gs/e/REDACTED?x-inngest-env=branch-1' -d '{\"msg\": \"hi\"}'\n```\n\n----------------------------------------\n\nTITLE: StepOptionsOrId type definition in TypeScript\nDESCRIPTION: Type definition for StepOptionsOrId showing the expected format for step identifiers in v3, which can be either a string or an object with id and optional name.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/migration.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype StepOptionsOrId =\n  | string\n  | {\n      id: string;\n      name?: string;\n    };\n```\n\n----------------------------------------\n\nTITLE: Installing @inngest/eslint-plugin as a Dev Dependency\nDESCRIPTION: Command to install the Inngest ESLint plugin as a development dependency using npm.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/eslint.mdx#2025-04-10_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -D @inngest/eslint-plugin\n```\n\n----------------------------------------\n\nTITLE: Creating an Inngest Function Handler for Welcome Email Processing\nDESCRIPTION: Implementation of an Inngest function that processes 'user.signup' events to send welcome emails. This code defines a function that extracts user data from the event and calls a sendEmail utility, then exports a Next.js handler using Inngest's serve function.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/run-nextjs-functions-in-the-background.mdx#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { inngest } from \"./client\"\nimport { serve } from \"inngest/next\"\nimport { sendEmail } from \"../../someExistingCode\"\n\n// Define your function\nconst welcomeEmail = inngest.createFunction(\n  { name: \"Send Welcome Email\" },\n  { event: \"user.signup\" },\n  async ({ event }) => {\n    if (!event.user?.email) {\n      throw new Error(\"Event payload missing email\")\n    }\n\n    await sendEmail({\n      template: \"welcome-email\",\n      to: event.user.email,\n      data: {\n        // The template will use this to show useful content to our new user\n        signupReason: event.data?.signupReason,\n      },\n    });\n\n    return `Successfully sent`\n  }\n)\n\n// This is the same as above, you can pass as many functions are you want in the array:\n// Grab your key here: https://app.inngest.com/secrets\nexport default serve(\"My App\", [ welcomeEmail ]);\n```\n\n----------------------------------------\n\nTITLE: Creating an Inngest Function Handler\nDESCRIPTION: Shows how to create a function that responds to the account.created event. The function demonstrates handling background tasks like sending welcome emails.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/no-workers-necessary-nodejs-express.mdx#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Inngest } from \"inngest\"\n\nconst inngest = new Inngest({ name: \"My App\" })\n\nexport default inngest.createFunction(\n  { name: \"My fn\" },\n  { event: \"account.created\" },\n  async ({ event }) => {\n    // Do something like send a welcome email:\n    await sendWelcomeEmail(event.data.email)\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Inngest Function in Go\nDESCRIPTION: This snippet shows how to create an Inngest function in Go for importing product images. It includes configuration, event triggering, and a handler with multiple steps for copying images to S3 and resizing them.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/inngest-functions.mdx#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"github.com/inngest/inngestgo\"\n  \"github.com/inngest/inngestgo/step\"\n)\n\ninngestgo.CreateFunction(\n  // config\n  &inngestgo.FunctionOpts{\n    ID: \"import-product-images\",\n  },\n  // trigger (event or cron)\n  inngestgo.EventTrigger(\"shop/product.imported\", nil),\n  // handler function\n  func(ctx context.Context, input inngestgo.Input) (any, error) {\n    // Here goes the business logic\n    // By wrapping code in steps, it will be retried automatically on failure\n    s3Urls, err := step.Run(\"copy-images-to-s3\", func() ([]string, error) {\n      return copyAllImagesToS3(input.Event.Data[\"imageURLs\"].([]string))\n    })\n    if err != nil {\n      return nil, err\n    }\n\n    // You can include numerous steps in your function\n    _, err = step.Run(\"resize-images\", func() (any, error) {\n      return nil, resizer.Bulk(ResizerOpts{\n        URLs:     s3Urls,\n        Quality:  0.9,\n        MaxWidth: 1024,\n      })\n    })\n    if err != nil {\n      return nil, err\n    }\n\n    return nil, nil\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: DeepSeek English Market Campaign\nDESCRIPTION: Generated marketing campaign for the English market focused on professional tone and trust-oriented values.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/deepseek-r1-step-ai.mdx#2025-04-10_snippet_6\n\nLANGUAGE: txt\nCODE:\n```\n**Campaign for England Market: \"Empower Your Innovation with Koyeb\"**\n**Headline:**  \n\"Empower Your Innovation with Koyeb\"\n**Main Copy:**  \n\"Koyeb is your serverless solution, enabling you to deploy and manage applications effortlessly. With Koyeb, you can focus on innovation while we handle the rest. Experience the benefits of a secure, scalable, and flexible cloud platform that grows with your business.\"\n**Call to Action:**  \n\"Start Your Free Trial Today\" or \"Deploy in Minutes with Koyeb\"\n**Social Media Snippets:**\n1. **Ease of Use:**  \n\"Say goodbye to server stress. Koyeb lets you deploy and scale effortlessly. Start today!\"\n2. **Security:**  \n\"Secure, scalable, and serverless. Koyeb is your cloud solution. Learn more now.\"\n3. **Scalability:**  \n\"Innovation meets simplicity. Koyeb takes care of the servers, so you can focus on your business. Get started.\"\n\nThis campaign is designed to resonate with the professional and trust-oriented values of the English market, emphasizing efficiency, security, and scalability.\n```\n\n----------------------------------------\n\nTITLE: Sending an event to Inngest DevServer using JavaScript fetch\nDESCRIPTION: JavaScript code example showing how to send an event to the local Inngest DevServer using the fetch API. It includes the event name, custom data payload, and user information.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/introducing-inngest-dev-server.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait fetch(\"http://localhost:9999/e/KEY\", {\n  method: \"POST\",\n  headers: { \"Content-Type\": \"application/json\" },\n  body: JSON.stringify({\n    // replace this with your event name and the data you want to send\n    name: \"my.event.name\",\n    data: { hello: \"there\" },\n    user: { email: \"test@example.com\" },\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up Inngest Express Handler\nDESCRIPTION: Demonstrates how to set up the Express.js handler to serve Inngest functions securely using the serve middleware.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/no-workers-necessary-nodejs-express.mdx#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { serve } from \"inngest/express\"\nimport myFn from \"../inngest/myfn\"\napp.use(\"/api/inngest\", serve(\"My App\", [ myFn ]))\n```\n\n----------------------------------------\n\nTITLE: Sending Multiple Events with Limits in TypeScript, Go, and Python\nDESCRIPTION: Examples of sending multiple events while respecting the 5000 events per request limit. Shows proper syntax for batch event sending in three different programming languages using Inngest's client libraries.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/usage-limits/inngest.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// this `events` list will need to be <= 5000\nconst events = [{name: \"<event-name>\", data: {}}, ...];\n\nawait step.sendEvent(\"send-example-events\", events);\n// or\nawait inngest.send(events);\n```\n\nLANGUAGE: go\nCODE:\n```\n// this `events` list will need to be <= 5000\nevents := []inngestgo.Event{{Name: \"<event-name>\", Data: {}}}\n\nids, err := inngestgo.SendMany(ctx, events)\n```\n\nLANGUAGE: python\nCODE:\n```\n# this `events` list will need to be <= 5000\nevents = [{'name': '<event-name>', 'data': {}}, ...]\n\nawait step.send_event('send-example-events', events)\n# or\nawait inngest.send(events)\n```\n\n----------------------------------------\n\nTITLE: Installing Inngest SDK with yarn\nDESCRIPTION: Command to install the Inngest SDK package using yarn package manager.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/typescript/index.mdx#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add inngest\n```\n\n----------------------------------------\n\nTITLE: Running Functions at Specific Times in TypeScript\nDESCRIPTION: This snippet shows how to schedule a function to run at a specific date/time using Inngest's step.sleepUntil() method in TypeScript. It demonstrates both using a hardcoded ISO timestamp and using a timestamp from the event data.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/delayed-functions.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inngest } from \"inngest\";\n\nconst inngest = new Inngest({ id: \"signup-flow\" });\n\nexport const fn = inngest.createFunction(\n  { id: \"send-signup-email\" },\n  { event: \"app/user.created\" },\n  async ({ event, step }) => {\n    await step.sleepUntil(\"wait-for-iso-string\", \"2023-04-01T12:30:00\");\n\n    // You can also sleep until a timestamp within the event data.  This lets you\n    // pass in a time for you to run the job:\n    await step.sleepUntil(\"wait-for-timestamp\", event.data.run_at); // Assuming event.data.run_at is a timestamp.\n\n    await step.run(\"do-some-work-in-the-future\", async () => {\n      // This runs at the specified time.\n    });\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Initiating SRT Addition to Mux Asset Workflow (TypeScript)\nDESCRIPTION: This code initiates a sub-workflow to add SRT subtitles to a Mux asset by sending an event with the necessary data.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/nextjs-trpc-inngest.md#2025-04-10_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nawait step.run(\"Notify SRT is Ready to Add to Mux Asset\", async () => {\n  return await inngest.send({\n    name: \"tip/video.srt.ready\",\n    data: {\n      muxAssetId: newMuxAsset.muxAssetId,\n      videoResourceId: event.data.videoResourceId,\n      srt: transcript.data.transcript.srt,\n    },\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Event Key in TypeScript\nDESCRIPTION: Shows how to configure an Event Key in TypeScript for production environments by passing it directly to the Inngest constructor. This authenticates your application for sending events.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/events/index.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inngest } from \"inngest\";\n\n// NOTE - It is not recommended to hard-code your Event Key in your code.\nconst inngest = new Inngest({ id: \"your-app-id\", eventKey: \"xyz...\" });\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Next.js Compatibility\nDESCRIPTION: Example of a TypeScript configuration file (tsconfig.json) updated with necessary settings for Next.js compatibility, including module settings, JSX handling, and Next.js TypeScript plugin.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/migrating-from-vite-to-nextjs.mdx#2025-04-10_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"useDefineForClassFields\": true,\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"noEmit\": true,\n    \"jsx\": \"preserve\",\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"allowJs\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"incremental\": true,\n    \"plugins\": [{ \"name\": \"next\" }]\n  },\n  \"include\": [\"./src\", \"./dist/types/**/*.ts\", \"./next-env.d.ts\"],\n  \"exclude\": [\"./node_modules\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Inngest DevServer locally\nDESCRIPTION: Command to start the Inngest DevServer in development mode, which sets up a local API endpoint and event processor for triggering and executing functions.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/introducing-inngest-dev-server.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ninngest dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Trial Check-in Email with Sleep Step\nDESCRIPTION: Code snippet showing how to add a delayed trial check-in email using Inngest's step.sleep() function to wait 7 days before sending.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/building-auth-workflows-with-clerk-integration.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait step.sleep('7d');\nawait step.run('trial-check-in-email', async () => {\n  return await resend.emails.send({\n    to: email,\n    from: \"noreply@inngest.com\",\n    subject: \"One week left on your trial!\",\n    react: TrialCheckInEmail(),\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Installing the Inngest Envelop plugin\nDESCRIPTION: Command to install the Inngest Envelop plugin using npm or yarn.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/instrumenting-graphql.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install envelop-plugin-inngest # or yarn add\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of sleep_until() in Inngest (Python)\nDESCRIPTION: Shows an incorrect use of sleep_until() with a dynamically calculated date in Python. This approach can lead to inconsistent behavior across function invocations.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/multi-step-functions.mdx#2025-04-10_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# ❌ Bad\ntomorrow = datetime.now() + timedelta(days=1)\nawait step.sleepUntil(\"wait-until-tomorrow\", tomorrow);\n```\n\n----------------------------------------\n\nTITLE: Example Clerk Webhook Payload\nDESCRIPTION: Shows a typical JSON payload structure sent by Clerk's webhook service when a user is created. This is the raw format before transformation.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/platform/webhooks.mdx#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"user.created\",\n  \"object\": \"event\",\n  \"data\": {\n    \"created_at\": 1654012591514,\n    \"external_id\": \"567772\",\n    \"first_name\": \"Example\",\n    \"id\": \"user_29w83sxmDNGwOuEthce5gg56FcC\",\n    \"last_name\": \"Example\",\n    \"last_sign_in_at\": 1654012591514,\n    \"object\": \"user\",\n    \"primary_email_address_id\": \"idn_29w83yL7CwVlJXylYLxcslromF1\",\n    // ... simplified for example\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Node.js App with Inngest Environment Variables\nDESCRIPTION: Command to start a Node.js application with Inngest environment variables for connecting to a self-hosted server.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/self-hosting.mdx#2025-04-10_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nINNGEST_EVENT_KEY=<YOUR_EVENT_KEY> \\\n  INNGEST_SIGNING_KEY=<YOUR_SIGNING_KEY> \\\n  INNGEST_DEV=0 \\\n  INNGEST_BASE_URL=http://localhost:8288 \\\n  node ./server.js\n```\n\n----------------------------------------\n\nTITLE: Initializing Writer Pipeline in TypeScript\nDESCRIPTION: Main writer pipeline function that orchestrates the content generation workflow including keyword processing, URL handling, and target audience analysis.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/next-generation-ai-workflows.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const writerPipeline = client.createFunction(\n  { id: \"writer-pipeline\" },\n  { event: Events.WRITER_PIPELINE },\n  async ({ event, step }) => {\n    const { keywords, url, targetAudience } = event.data;\n\n    // Index the blog | Write blog post outlines\n    // Write the blog post\n    // Publish the blog post\n    // Send notifications\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Sending Events via HTTP API in PHP\nDESCRIPTION: Example of sending an event to Inngest using the HTTP API with PHP. The code constructs a JSON payload with event name and data, and handles the HTTP response.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/events/index.mdx#2025-04-10_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$url = \"https://inn.gs/e/{$eventKey}\";\n$content = json_encode([\n    \"name\" => \"user.signup\",\n    \"data\" => [\n      \"userId\" => \"645ea8289ad09eac29230442\",\n    ],\n]);\n\n$curl = curl_init($url);\ncurl_setopt($curl, CURLOPT_HEADER, false);\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($curl, CURLOPT_HTTPHEADER, [\"Content-type: application/json\"]);\ncurl_setopt($curl, CURLOPT_POST, true);\ncurl_setopt($curl, CURLOPT_POSTFIELDS, $content);\n\n$json_response = curl_exec($curl);\n$status = curl_getinfo($curl, CURLINFO_HTTP_CODE);\nif ($status != 200) {\n    return [\n        'status' => $status,\n        'message' => \"Error: call to URL $url failed with status $status, response $json_response, curl_error \" . curl_error($curl) . \", curl_errno \" . curl_errno($curl),\n    ];\n}\n\ncurl_close($curl);\n$response = json_decode($json_response, true);\n```\n\n----------------------------------------\n\nTITLE: Installing Inngest SDK with npm\nDESCRIPTION: Command to install the Inngest SDK package using npm package manager.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/typescript/index.mdx#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install inngest\n```\n\n----------------------------------------\n\nTITLE: Configuring Celery with Task Routing in Python\nDESCRIPTION: This code sets up a Celery application with custom task routing to handle user-specific queues and prioritization. It demonstrates the configuration required for queue management without durable execution abstractions.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/queues-are-no-longer-the-right-abstraction.mdx#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# celery_app.py\ndef user_task_router(name, args, kwargs, options, task=None, **kw):\n    user_id = kwargs.get('user_id')\n    if user_id:\n        return {\n            'queue': f'user_{user_id}',\n            'priority': kwargs.get('priority', 10),  # Get the priority from kwargs, default to 10\n        }\n    return None\n\napp = Celery('tasks', broker='amqp://guest:guest@localhost:5672//')\napp.conf.update(\n    worker_concurrency=4,\n    worker_prefetch_multiplier=1,\n    task_routes = (user_task_router,),\n    task_default_queue = 'default',\n    task_default_priority = 0,\n    task_queue_max_priority = 10,\n    task_queues = [Queue('default', routing_key='default')],\n)\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request for Bulk Cancellation using cURL\nDESCRIPTION: This snippet demonstrates how to use cURL to send a POST request to the Inngest API for bulk cancellation of functions. It includes specifying app_id, function_id, time range, and an optional condition.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/cancel-running-functions.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://api.inngest.com/v1/cancellations \\\n  -H 'Authorization: Bearer signkey-prod-<YOUR-SIGNING-KEY>' \\\n  -H 'Content-Type: application/json' \\\n  --data '{\n    \"app_id\": \"acme-app\",\n    \"function_id\": \"schedule-reminder\",\n    \"started_after\": \"2024-01-21T18:23:12.000Z\",\n    \"started_before\": \"2024-01-22T14:22:42.130Z\",\n    \"if\": \"event.data.userId == \\'user_o9235hf84hf\\'\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Configuring the no-variable-mutation-in-step Rule\nDESCRIPTION: JSON configuration for the no-variable-mutation-in-step rule which prevents mutating variables within step.run() functions.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/eslint.mdx#2025-04-10_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"@inngest/no-variable-mutation-in-step\": \"error\" // recommended\n```\n\n----------------------------------------\n\nTITLE: Incorrect Variable Update in Inngest Steps (TypeScript)\nDESCRIPTION: Illustrates an incorrect approach to updating variables within Inngest steps. This method fails because step.run() only executes once and is skipped in future steps, leaving the variable undefined.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/multi-step-functions.mdx#2025-04-10_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// THIS IS WRONG! step.run() only runs once and is skipped for future\n// steps, so userID will not be defined.\nlet userId;\n\n// Do NOT do this! Instead, return data from step.run()\nawait step.run(\"get-user\", async () => {\n  userId = await getRandomUserId();\n});\n\nconsole.log(userId); // undefined\n```\n\n----------------------------------------\n\nTITLE: Sending Multiple Events in Go\nDESCRIPTION: Example of sending multiple events using the Go SDK. The function takes a context and an array of events with name and data properties.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/events/index.mdx#2025-04-10_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n_, err := inngestgo.SendMany(ctx, []inngestgo.Event{\n  {\n    Name: \"storefront/cart.checkout.completed\",\n    Data: data,\n  },\n  {\n    Name: \"storefront/coupon.used\",\n    Data: data,\n  },\n  {\n    Name: \"storefront/loyalty.program.joined\",\n    Data: data,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Middleware in Inngest Python SDK\nDESCRIPTION: This snippet demonstrates how to create a custom middleware class and apply it to an Inngest client. The middleware includes methods for executing code before and after sending events.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/middleware/overview.mdx#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyMiddleware(inngest.Middleware):\n    async def before_send_events( self, events: list[inngest.Event]) -> None:\n        print(f\"Sending {len(events)} events\")\n\n    async def after_send_events(self, result: inngest.SendEventsResult) -> None:\n        print(\"Done sending events\")\n\ninngest_client = inngest.Inngest(\n    app_id=\"my_app\",\n    middleware=[MyMiddleware],\n)\n```\n\n----------------------------------------\n\nTITLE: Simple Function Example in Python\nDESCRIPTION: A basic Inngest function example in Python showing how each step executes as a separate HTTP request, causing the initialization code to run multiple times.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/working-with-loops.mdx#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@inngest_client.create_function(\n    fn_id=\"simple-function\",\n    trigger=inngest.TriggerEvent(event=\"test/simple.function\")\n)\nasync def simple_function(ctx: inngest.Context, step: inngest.Step):\n    print(\"hello\")\n\n    async def step_a():\n        print(\"a\")\n    await step.run(\"a\", step_a)\n\n    async def step_b():\n        print(\"b\") \n    await step.run(\"b\", step_b)\n\n    async def step_c():\n        print(\"c\")\n    await step.run(\"c\", step_c)\n```\n\n----------------------------------------\n\nTITLE: Sample CSV Data for Contact Import Testing\nDESCRIPTION: This CSV file contains sample contact data with intentional typos in roles and positions. The data includes fields like names, emails, roles, and companies that will be processed by the agent workflow, which can identify and fix errors like 'Scbentist' and 'CqO'.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/agentic-workflow-example.mdx#2025-04-10_snippet_5\n\nLANGUAGE: csv\nCODE:\n```\nFirst Name,Last Name,Email,Seniority,Role,Company,Industry\nAmanda,Brown,amanda.brown@example.com,VP,Data Scbentist,AutoCorp,Real Estate\nSarah,Johnson,sarah.johnson@example.com,Junior,CEO,BioGen,Education\nMichael,Jackson,michael.jackson@example.com,Junior,CqO,AutoCorp,Healthcare\n```\n\n----------------------------------------\n\nTITLE: Logger interface definition\nDESCRIPTION: Shows the TypeScript interface for the logger object that Inngest provides. It includes the standard logging levels according to RFC5424 guidelines.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/logging.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Logger {\n  info(...args: any[]): void;\n  warn(...args: any[]): void;\n  error(...args: any[]): void;\n  debug(...args: any[]): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Table with pgvector Extension\nDESCRIPTION: SQL schema definition for creating a 'stories' table with vector embeddings support using pgvector. The table stores Hacker News stories with their titles, content, and vector embeddings, and creates an HNSW index for faster similarity searches.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/render-hacker-news-ai-agent.mdx#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS stories (\n  id SERIAL PRIMARY KEY,\n  title TEXT,\n  content TEXT,\n  date DATE,\n  comments TEXT,\n  interest_id INTEGER REFERENCES interests(id),\n  embedding vector(1536)\n);\n\n-- Create an index on the embedding column for faster similarity searches\nCREATE INDEX IF NOT EXISTS stories_embedding_idx ON stories\nUSING hnsw (embedding vector_cosine_ops);\n```\n\n----------------------------------------\n\nTITLE: Exporting Customer Case Study Metadata in JavaScript\nDESCRIPTION: Defines and exports metadata for a customer case study about Mega SEO, including title, company information, quote, and other descriptive elements used for rendering the case study page.\nSOURCE: https://github.com/inngest/website/blob/main/pages/customers/megaseo.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const title = 'Powering the Future of AI-Driven Content'\nexport const companyName = 'Mega SEO'\nexport const logo = '/assets/customers/megaseo-logo.svg'\nexport const quote = {\n  text: `By leveraging Inngest, we've seen a 50% reduction in debugging time. The ability to test complex workflows locally has been a game-changer, giving us confidence that our AI-driven processes will run smoothly in production.`,\n  attribution: {\n    name: 'Joe Adams',\n    title: 'CEO',\n  },\n  avatar: '/assets/customers/joe-adams.jpeg',\n}\nexport const companyURL = 'https://www.megaseo.ai'\nexport const companyDescription = 'Automated content from end to end.'\nexport const ogImage = '/assets/customers/case-study/og-image-mega-seo.png'\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind with CSS Variables for Theme Switching\nDESCRIPTION: This code snippet shows how Tailwind configuration was set up to use CSS color variables for theme switching. It defines background color tokens that reference CSS variables with alpha value support, enabling seamless light/dark mode switching.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/introducing-dark-mode.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbackgroundColor: {\n    canvasBase: 'rgb(var(--color-background-canvas-base) / <alpha-value>)',\n    canvasSubtle: 'rgb(var(--color-background-canvas-subtle) / <alpha-value>)',\n    canvasMuted: 'rgb(var(--color-background-canvas-muted) / <alpha-value>)',\n    surfaceBase: 'rgb(var(--color-background-surface-base) / <alpha-value>)',\n    surfaceSubtle: 'rgb(var(--color-background-surface-subtle) / <alpha-value>)',\n    surfaceMuted: 'rgb(var(--color-background-surface-muted) / <alpha-value>)',\n    disabled: 'rgb(var(--color-background-disabled) / <alpha-value>)',\n    alwaysWhite: 'rgb(var(--color-foreground-alwaysWhite) / <alpha-value>)',\n    contrast: 'rgb(var(--color-background-contrast) / <alpha-value>)',\n    success: 'rgb(var(--color-background-success) / <alpha-value>)',\n}\n```\n\n----------------------------------------\n\nTITLE: Python Pydantic Event Model Definition\nDESCRIPTION: Pydantic model implementation of the event payload structure in Python, including base event class and specific event type example.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/events-triggers/event-format.mdx#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport inngest\nimport pydantic\nimport typing\n\nTEvent = typing.TypeVar(\"TEvent\", bound=\"BaseEvent\")\n\nclass BaseEvent(pydantic.BaseModel):\n    data: pydantic.BaseModel\n    id: str = \"\"\n    name: typing.ClassVar[str]\n    ts: int = 0\n\n    @classmethod\n    def from_event(cls: type[TEvent], event: inngest.Event) -> TEvent:\n        return cls.model_validate(event.model_dump(mode=\"json\"))\n\n    def to_event(self) -> inngest.Event:\n        return inngest.Event(\n            name=self.name,\n            data=self.data.model_dump(mode=\"json\"),\n            id=self.id,\n            ts=self.ts,\n        )\n\nclass InvoicePaidEventData(pydantic.BaseModel):\n    customerId: str\n    invoiceId: str\n    amount: int\n    metadata: dict\n\nclass InvoicePaidEvent(BaseEvent):\n    data: InvoicePaidEventData\n    name: typing.ClassVar[str] = \"billing/invoice.paid\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Case Study Metadata in JavaScript\nDESCRIPTION: This code defines the metadata for the Florian Works case study, including title, company information, URLs, and descriptions. It includes commented-out quote information that could be used in the future.\nSOURCE: https://github.com/inngest/website/blob/main/pages/customers/florian-works.mdx#2025-04-10_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const title = 'Building a mission-critical workflow engine on top of Inngest'\nexport const companyName = 'Florian Works'\nexport const logo = '/assets/customers/florian-works-logotype.svg'\n// export const quote = {\n//   text: ``,\n//   attribution: {\n//     name: '',\n//     title: '',\n//   },\n//   avatar: '',\n// }\nexport const companyURL = 'https://www.florianworks.com'\nexport const companyDescription = 'Revolutionizing operational software for Fire Departments'\nexport const ogImage = '/assets/customers/case-study/og-image-florian-works.png'\n```\n\n----------------------------------------\n\nTITLE: Implementing Agent Lifecycle Hooks for Task Completion Detection\nDESCRIPTION: Sets up lifecycle hooks for an AgentKit agent to detect when a task is complete by looking for a task_summary tag in the agent's response. This updates the network state to signal that the goal has been achieved.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/cursor-agentkit-e2b.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst agent = createAgent({\n    name: \"Coding Agent\",\n    description: \"An expert coding agent\",\n    // ... prompt and tools\n    lifecycle: {\n    onResponse: async ({ result, network }) => {\n        const lastAssistantMessageText =\n            lastAssistantTextMessageContent(result);\n    if (lastAssistantMessageText) {\n        if (lastAssistantMessageText.includes(\"<task_summary>\")) {\n            network?.state.kv.set(\"task_summary\", lastAssistantMessageText);\n        }\n    }\n    \n    return result;\n    },\n},\n```\n\n----------------------------------------\n\nTITLE: Sample Inngest Function Failure Event Payload\nDESCRIPTION: This is an example of the JSON payload provided by Inngest's 'inngest/function.failed' system event. It includes detailed error information, stack traces, and context about the failed function execution.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/examples/track-failures-in-datadog.mdx#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"inngest/function.failed\",\n  \"data\": {\n    \"error\": {\n      \"__serialized\": true,\n      \"error\": \"invalid status code: 500\",\n      \"message\": \"taylor@ok.com is already a list member. Use PUT to insert or update list members.\",\n      \"name\": \"Error\",\n      \"stack\": \"Error: taylor@ok.com is already a list member. Use PUT to insert or update list members.\\n    at /var/task/.next/server/pages/api/inngest.js:2430:23\\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\\n    at async InngestFunction.runFn (/var/task/node_modules/.pnpm/inngest@2.6.0_typescript@5.1.6/node_modules/inngest/components/InngestFunction.js:378:32)\\n    at async InngestCommHandler.runStep (/var/task/node_modules/.pnpm/inngest@2.6.0_typescript@5.1.6/node_modules/inngest/components/InngestCommHandler.js:459:25)\\n    at async InngestCommHandler.handleAction (/var/task/node_modules/.pnpm/inngest@2.6.0_typescript@5.1.6/node_modules/inngest/components/InngestCommHandler.js:359:33)\\n    at async ServerTiming.wrap (/var/task/node_modules/.pnpm/inngest@2.6.0_typescript@5.1.6/node_modules/inngest/helpers/ServerTiming.js:69:21)\\n    at async ServerTiming.wrap (/var/task/node_modules/.pnpm/inngest@2.6.0_typescript@5.1.6/node_modules/inngest/helpers/ServerTiming.js:69:21)\"\n    },\n    \"event\": {\n      \"data\": { \"billingPlan\": \"pro\" },\n      \"id\": \"01H0TPSHZTVFF6SFVTR6E25MTC\",\n      \"name\": \"user.signup\",\n      \"ts\": 1684523501562,\n      \"user\": { \"external_id\": \"6463da8211cdbbcb191dd7da\" }\n    },\n    \"function_id\": \"my-gcp-cloud-functions-app-hello-inngest\",\n    \"run_id\": \"01H0TPSJ576QY54R6JJ8MEX6JH\"\n  },\n  \"id\": \"01H0TPW7KB4KCR739TG2J3FTHT\",\n  \"ts\": 1684523589227\n}\n```\n\n----------------------------------------\n\nTITLE: Normalizing JavaScript Expressions for AST Building\nDESCRIPTION: This snippet demonstrates how JavaScript expressions are normalized by lifting variables. The original expressions with different string literals are transformed into a standardized format with a variable placeholder.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/accidentally-quadratic-evaluating-trillions-of-event-matches-in-real-time.mdx#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nevent.data.id == \"foo\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nevent.data.id == \"bar\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nevent.data.id == vars.a\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Event Payload Structure\nDESCRIPTION: Example of a basic event payload for a paid invoice, demonstrating the required name and data fields along with optional user information.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/events-triggers/event-format.mdx#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"billing/invoice.paid\",\n  \"data\": {\n    \"customerId\": \"cus_NffrFeUfNV2Hib\",\n    \"invoiceId\": \"in_1J5g2n2eZvKYlo2C0Z1Z2Z3Z\",\n    \"amount\": 1000,\n    \"metadata\": {\n      \"accountId\": \"acct_1J5g2n2eZvKYlo2C0Z1Z2Z3Z\",\n      \"accountName\": \"Acme.ai\"\n    }\n  },\n  \"user\": {\n    \"email\": \"taylor@example.com\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Inngest Client with Event Keys in JavaScript/JSX\nDESCRIPTION: This code snippet demonstrates two methods of configuring the Inngest client with an Event Key: either by setting an environment variable or by explicitly passing the key as an argument to the constructor. It also shows how to send events once configured.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/events/creating-an-event-key.mdx#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Recommended: Set an INNGEST_EVENT_KEY environment variable for automatic configuration:\nconst inngest = new Inngest({ name: \"Your app name\" });\n\n// Or you can pass the eventKey explicitly to the constructor:\nconst inngest = new Inngest({ name: \"Your app name\", eventKey: \"xyz...\" });\n\n// With the Event Key, you're now ready to send data:\nawait inngest.send({ ... })\n```\n\n----------------------------------------\n\nTITLE: Error Handling and Cleanup in Go with Inngest SDK\nDESCRIPTION: This Go code snippet shows how to handle errors and perform cleanup operations using Inngest's SDK. It attempts to import account data and, if it fails, runs a cleanup step to remove any partially imported data.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/improved-error-handling.mdx#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ninngestgo.CreateFunction(\n\tinngestgo.FunctionOpts{ID: \"import-account-data\"},\n\tinngestgo.EventTrigger(\"app/account.connected\", nil),\n\tfunc (\n\t\tctx context.Context,\n\t\tinput inngestgo.Input[AccountConnectedEvent]\n\t) (any, error) {\n\t\t// Attempt to import data\n\t\tdata, err := step.Run(\n\t\t\tctx,\n\t\t\t\"import-data\",\n\t\t\tfunc(ctx context.Context) (bool, error) {\n\t\t\t\t// omitted for the sake of brevity\n\t\t\t\treturn result, err\n\t\t\t}\n\t\t)\n\t\t// If it fails, ensure that we cleanup any partially imported data\n\t\tif err != nil {\n\t\t\t_, cleanupErr := step.Run(\n\t\t\t\tctx,\n\t\t\t\t\"cleanup-failed-import\",\n\t\t\t\tfunc(ctx context.Context) (bool, error) {\n\t\t\t\t\t// omitted for the sake of brevity\n\t\t\t\t\treturn result, err\n\t\t\t\t}\n\t\t\t)\n\t\t\treturn nil, errors.Join(cleanupErr, err)\n\t\t}\n\t\treturn nil, nil\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Welcome Email Function in TypeScript with Inngest\nDESCRIPTION: This snippet demonstrates how to create an Inngest function that sends a welcome email when a user creation event from Clerk is received. It uses the Resend email service to send a React-based email template to the new user.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/platform/webhooks.mdx#2025-04-10_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  { name: \"Send welcome email\", id: \"send-welcome-email\" },\n  { event: \"clerk/user.created\" },\n  async ({ event, step }) => {\n    const emailAddress = event.data.email_addresses[0].email_address;\n    await step.run('send-email', async () => {\n      return await resend.emails.send({\n        to: emailAddress,\n        from: \"noreply@inngest.com\",\n        subject: \"Welcome to Inngest!\",\n        react: WelcomeEmail(),\n      })\n    });\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Inngest Signing Key Environment Variable\nDESCRIPTION: Configures the secret key used for request signing between your application and Inngest. Not required when using the Dev Server.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/overview/env-vars.mdx#2025-04-10_snippet_5\n\nLANGUAGE: env\nCODE:\n```\nINNGEST_SIGNING_KEY=your-signing-key\n```\n\n----------------------------------------\n\nTITLE: Legacy Event Waiting Implementation with waitForEvents in JSX\nDESCRIPTION: Shows the previous implementation that used waitForEvents to handle synchronous function execution, demonstrating the more complex approach before Inngest's invoke feature was used.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/synchronizing-financial-data-from-plaid-and-stripe.mdx#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst { destinationId, syncId } = event.data;\n\nconst transactions = await step.run(\n  { id: 'fetch-transaction' }, \n  async () => ...\n)\n\nconst syncTransactionsPromise = step.waitForEvent('app/destination.sync.task.finished', {\n  timeout: '10m',\n  if: `async.data.destinationId == '${destinationId}' && async.data.syncId == '${syncId}' && async.data.action == 'Sync' && async.data.table == 'Transactions'}`\n})\n\nawait step.sendEvent({\nname: 'app/destination.sync.transactions',\ndata: {\n  destinationId,\n  transactions,\n  syncId\n}\n});\n\nconst syncTransactionsResponse = await syncTransactionsPromise;\n\n...\n```\n\n----------------------------------------\n\nTITLE: Incorrect Variable Mutation Inside step.run\nDESCRIPTION: TypeScript example showing incorrect mutation of a variable inside step.run(), which can lead to unexpected behavior due to Inngest's memoization.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/eslint.mdx#2025-04-10_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\n// ❌ Bad\n// THIS IS WRONG!  step.run only runs once and is skipped for future\n// steps, so userID will not be defined.\nlet userId;\n\n// Do NOT do this!  Instead, return data from step.run.\nawait step.run(\"get-user\", async () => {\n  userId = await getRandomUserId();\n});\n\nconsole.log(userId); // undefined\n```\n\n----------------------------------------\n\nTITLE: Disabling Server-Side Cache in Next.js App Router\nDESCRIPTION: Demonstrates how to temporarily disable the server-side cache for route segments in Next.js App Router. This can be useful when dealing with dynamic data or while learning the caching system.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/5-lessons-learned-from-taking-next-js-app-router-to-production.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const dynamic = 'force-dynamic'\n```\n\n----------------------------------------\n\nTITLE: Go implementation of errors as values using return tuples\nDESCRIPTION: A Go example showing how errors are returned as values in tuples. This approach forces developers to handle errors at every step, making the error handling more deliberate and visible in the code.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/python-errors-as-values.mdx#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Define a function that returns a User or error\nfunc getUser(userID string) (*User, error) {\n\trows := users.Find(userID)\n\tif len(rows) == 0 {\n\t\treturn nil, errors.New(\"user not found\")\n\t}\n\n\treturn rows[0], nil\n}\n\nfunc renameUser(userID string, name string) (*User, error) {\n  // Consume the function\n\tuser, err := getUser(userID)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tuser.Name = name\n\treturn user, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Go implementation of errors as values using return tuples\nDESCRIPTION: A Go example showing how errors are returned as values in tuples. This approach forces developers to handle errors at every step, making the error handling more deliberate and visible in the code.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/python-errors-as-values.mdx#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Define a function that returns a User or error\nfunc getUser(userID string) (*User, error) {\n\trows := users.Find(userID)\n\tif len(rows) == 0 {\n\t\treturn nil, errors.New(\"user not found\")\n\t}\n\n\treturn rows[0], nil\n}\n\nfunc renameUser(userID string, name string) (*User, error) {\n  // Consume the function\n\tuser, err := getUser(userID)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tuser.Name = name\n\treturn user, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Using waitForEvent in a Function Pipeline (v2)\nDESCRIPTION: Shows how to use waitForEvent in v2 of the Inngest SDK, with differences in function naming and event waiting syntax.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/typescript.mdx#2025-04-10_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inngest } from \"./client\";\n\nexport default inngest.createFunction(\n  { id: \"Onboarding drip campaign\" },\n  { event: \"user/new.signup\" },\n  async ({ event, step }) => {\n    await step.run(\"Send welcome email\", async () => {\n      // \"event\" will be fully typed provide typesafety within this function\n      return await email.send(\"welcome\", event.data.email);\n    });\n\n    // We wait up to 2 days for the user to set up their account\n    const accountSetupCompleted = await step.waitForEvent(\n      \"user/account.setup.completed\",\n      {\n        timeout: \"2d\",\n        // ⬇️ This matches both events using the same property\n        // Since both events types are registered above, this is match is typesafe\n        match: \"data.user_id\",\n      }\n    );\n\n    if (!accountSetupCompleted) {\n      await step.run(\"Send setup account guide\", async () => {\n        return await email.send(\"account_setup_guide\", event.data.email);\n      });\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Components for MDX Documentation in React\nDESCRIPTION: This code snippet imports various React components used for documentation including Callout, CodeGroup, Card, CardGroup, and ImageTheme from the shared docs directory. It also imports various icon components that will be used throughout the documentation page.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/platform/deployment.mdx#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout, CodeGroup, Card, CardGroup, ImageTheme } from \"src/shared/Docs/mdx\";\nimport VercelIcon from 'src/shared/Icons/VercelIcon';\nimport NetlifyIcon from 'src/shared/Icons/NetlifyIcon';\nimport CloudflareIcon from 'src/shared/Icons/CloudflareIcon';\nimport RenderIcon from 'src/shared/Icons/RenderIcon';\nimport {\n  RiCloudLine,\n} from \"@remixicon/react\";\n```\n\n----------------------------------------\n\nTITLE: Searching arXiv and Processing Paper Contents in TypeScript\nDESCRIPTION: This code snippet shows how to extract the generated search query, search arXiv for papers, download PDFs, and format the content of the papers. It handles up to MAX_RESULTS papers and extracts the first 5 pages of each PDF.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/deepseek-r1-step-ai.mdx#2025-04-10_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst papersContents = await step.run(\"search-arxiv\", async () => {\n    if (\n    generateSearchQuery.choices[0].message.content.includes(\n        \"<search_query>\"\n    )\n    ) {\n    console.log(\"found search query!\");\n    let searchQuery = (\n        generateSearchQuery.choices[0].message.content as string\n    ).match(/<search_query>(.*?)<\\/search_query>/s)?.[1];\n    // remove quotes and line breaks\n    searchQuery = searchQuery?.replace(/[\"\\n]/g, \"\");\n    console.log(\"search query:\", searchQuery);\n    if (searchQuery) {\n        try {\n        let results = await searchArxiv(searchQuery, MAX_RESULTS);\n        console.log(\"results:\", results);\n        const papersContents = [];\n        for (const result of results) {\n            let content = \"\";\n            try {\n            content = await getPaperContent(\n                result.link.replace(\"/abs/\", \"/pdf/\")\n            );\n            } catch (error) {\n            console.error(\"Error getting paper content\", error);\n            }\n            papersContents.push(`\n                ------------------------------\n                Title: ${result.title}\n                Authors: ${result.authors.join(\", \")}\n                Summary: ${result.summary}\n                Content: \\n ${content}\n                ------------------------------\n                `);\n        }\n        return papersContents.join(\"\\n\\n\");\n        } catch (error) {\n        console.error(\"Error calling tool\", error);\n        }\n    }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Workflow Data from Sanity CMS\nDESCRIPTION: This TypeScript code snippet demonstrates how to fetch workflow data from Sanity CMS using the Sanity client. It retrieves the workflow based on the trigger type and account ID.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/user-defined-workflows-sanity-nextjs.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst workflow = await step.run('load workflow from sanity', async () => {\n  return sanityClient.fetch(\n    `*[_type == \"workflow\" && trigger == \"new-account\" && accountId == \"${accountId}\"][0]{title, _id, _type, trigger, accountId, \"actions\": actions[]}`\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-Discovery in Inngest Dev Server\nDESCRIPTION: Command to disable the automatic endpoint discovery feature in the Inngest dev server, preventing it from polling endpoints that don't exist in your application.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/faq.mdx#2025-04-10_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx inngest-cli@latest dev --no-discovery\n```\n\n----------------------------------------\n\nTITLE: Implementing tRPC Mutation for Creating Sanity Resources\nDESCRIPTION: This snippet implements a tRPC mutation that creates video and tip resources in Sanity CMS. It validates user input with Zod, checks permissions with CASL, and triggers an Inngest event to start the video processing workflow.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/nextjs-trpc-inngest.md#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const tipsRouter = router({\n  create: publicProcedure\n    .input(\n      z.object({\n        s3Url: z.string(),\n        fileName: z.string().nullable(),\n        title: z.string(),\n      }),\n    )\n    .mutation(async ({ctx, input}) => {\n      // create a video resource, which should trigger the process of uploading to\n      // mux and ordering a transcript because of the active webhook\n      const token = await getToken({req: ctx.req})\n      const ability = getCurrentAbility({\n        user: UserSchema.parse(token),\n      })\n\n      // use CASL rbac to check if the user can create content\n      if (ability.can('create', 'Content')) {\n        // create the video resource object in Sanity\n        const newVideoResource = await sanityWriteClient.create({\n          _id: `videoResource-${v4()}`,\n          _type: 'videoResource',\n          state: 'new',\n          title: input.fileName,\n          originalMediaUrl: input.s3Url,\n        })\n\n        if (newVideoResource._id) {\n          // control the id that is used so we can reference it immediately\n          const id = v4()\n\n          const nanoid = customAlphabet(\n            '1234567890abcdefghijklmnopqrstuvwxyz',\n            5,\n          )\n\n          // create the Tip resource in sanity with the video resource attached\n          const tipResource = await sanityWriteClient.create({\n            _id: `tip-${id}`,\n            _type: 'tip',\n            state: 'new',\n            title: input.title,\n            slug: {\n              // since title is unique, we can use it as the slug with a random string\n              current: `${slugify(input.title)}~${nanoid()}`,\n            },\n            resources: [\n              {\n                _key: v4(),\n                _type: 'reference',\n                _ref: newVideoResource._id,\n              },\n            ],\n          })\n\n          // load the complete tip from sanity so we can return it\n          // we are reloading it because the query for `getTip` \"normalizes\"\n          // the data and that's what we expect client-side\n          const tip = await getTip(tipResource.slug.current)\n\n          await inngest.send({\n            name: 'tip/video.uploaded',\n            data: {\n              tipId: tip._id,\n              videoResourceId: newVideoResource._id,\n            },\n          })\n\n          return tip\n        } else {\n          throw new Error('Could not create video resource')\n        }\n      } else {\n        throw new Error('Unauthorized')\n      }\n    }),\n```\n\n----------------------------------------\n\nTITLE: Defining Bubbletea Model Structure in Go\nDESCRIPTION: This code defines the model structure for the Bubbletea application, including fields for storing user input and selected events. It also ensures the model fulfills the tea.Model interface.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/interactive-clis-with-bubbletea.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\ttea \"github.com/charmbracelet/bubbletea\"\n)\n\nfunc NewModel() (*model, error) {\n\treturn model{}, nil\n}\n\ntype model struct {\n\tnameInput string\n\tlistInput string\n\tevent     string\n}\n\nvar _ tea.Model = (*model)(nil)\n```\n\n----------------------------------------\n\nTITLE: Using const Assertions for Literal Type Inference\nDESCRIPTION: Shows how to use TypeScript's const assertion to prevent type widening, preserving literal types (false instead of boolean) for better type safety and IDE feedback.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/building-educational-typescript-tooling.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst myHobbies = {\n  dancing: false,\n  typescript: true,\n} as const;\n\nconst likeDancing = myHobbies.dancing;\n//    ^?\n```\n\n----------------------------------------\n\nTITLE: Configuring App Version in Inngest Across Different Platforms\nDESCRIPTION: Code examples showing how to set the appVersion parameter when initializing Inngest across various deployment platforms. The appVersion helps identify different versions of your app connected to Inngest during rolling deploys.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/setup/connect.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// You can set the app version to any environment variable, you might use\n// a build number ('v2025.02.12.01'), git commit sha ('f5a40ff'), or\n// a custom value ('my-app-v1').\nconst inngest = new Inngest({\n  id: 'my-app',\n  appVersion: process.env.MY_APP_VERSION, // Use any environment variable you choose\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// If you're using Github Actions to build your app, you can set the\n// app version to the GITHUB_SHA environment variable during build time\n// or inject into the build of a Docker image.\nconst inngest = new Inngest({\n  id: 'my-app',\n  appVersion: process.env.GITHUB_SHA,\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Render includes the RENDER_GIT_COMMIT env var at build and runtime.\n// https://render.com/docs/environment-variables\nconst inngest = new Inngest({\n  id: 'my-app',\n  appVersion: process.env.RENDER_GIT_COMMIT,\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Fly includes a machine version env var at runtime.\n// https://fly.io/docs/machines/runtime-environment/\nconst inngest = new Inngest({\n  id: 'my-app',\n  appVersion: process.env.FLY_MACHINE_VERSION,\n})\n```\n\n----------------------------------------\n\nTITLE: Event Payload Example for UI Invocation\nDESCRIPTION: Sample JSON payload used to trigger an Inngest function through the Dev Server UI. Contains email data that can be accessed within the function handler.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/getting-started/nextjs-quick-start.mdx#2025-04-10_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"email\": \"test@example.com\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Marketing Campaign Generator Parameters\nDESCRIPTION: JSON configuration for generating marketing campaigns across German, English, and French markets, including brand information and campaign goals for Koyeb's serverless platform.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/deepseek-r1-step-ai.mdx#2025-04-10_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"brandInfo\": \"At Koyeb, our mission is to provide the fastest way to run APIs, full-stack apps, and event-driven workloads around the world with high performance and a developer-centric experience. We aim to dramatically reduce deployment time and operational complexity by removing server and infrastructure management for businesses and developers.\\nWe are building a next-generation serverless platform to run applications across clouds and edges. We provide strong primitives for application hosting with a focus on the developer experience.\\nPrimary cloud infrastructure services are now a commodity; Cloud Compute & Storage are now behind nearly all online platforms built in the last decade. As a pioneer in serverless solutions for the cloud-native era, we are committed to building the industry's first cloud platform for efficient serverless hosting across multiple Cloud Service Providers. Koyeb aims to remove operational complexity and vendor lock-in with a flexible serverless technology designed for multi-cloud environments.\\nThink of us as a the ultimate Serverless Cloud Provider - designed to deploy, run, and operate all your apps.\",\n    \"campaignGoal\": \"Target CTO, Architect and Founders building AI B2B products in FinTech, EdTech, HealthTech or other industries requiring self-hosting of data.\",\n    \"targetLanguages\": [\n        \"Germany\",\n        \"France\",\n        \"England\"\n    ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Edge Function with Streaming in TypeScript\nDESCRIPTION: This code demonstrates how to use Edge Functions with a ReadableStream to handle long-running tasks. It simulates a data sync operation and streams the progress back to the client.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/vercel-function-timeout.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const config = {\n  runtime: 'edge',\n};\n\nexport default async function handler(req: Request): Promise<Response> {\n  // Create a ReadableStream to stream the data\n  const stream = new ReadableStream({\n    async start(controller) {\n      // Simulate long-running task with multiple steps\n      const startSync = async () => {\n        controller.enqueue(`Sync started.`);\n\n        // perform time-consuming data-sync\n        const data = await getDataFromExternalSource();\n        await db.syncs.insertMany(data);\n\n        controller.enqueue(`Sync completed.`);\n\n        // Close the stream when done\n        controller.close();\n      };\n\n      // Execute the task\n      startSync();\n    },\n  });\n\n  // Return the stream as a response with appropriate headers\n  return new Response(stream, {\n    headers: { 'Content-Type': 'text/plain; charset=utf-8' },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Page Description for Flow Control Documentation\nDESCRIPTION: This code exports a description string for the flow control documentation page, providing a brief summary of what users will learn about function execution management.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/flow-control.mdx#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const description = 'Learn how to manage how functions are executed with flow control.';\n```\n\n----------------------------------------\n\nTITLE: Importing Inngest Documentation Components\nDESCRIPTION: Import statement for required documentation components including ImageTheme, GuideSelector, GuideSection, and CodeGroup from the shared documentation directory.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/fan-out-jobs.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ImageTheme, GuideSelector, GuideSection, CodeGroup } from \"src/shared/Docs/mdx\";\n```\n\n----------------------------------------\n\nTITLE: Installing Inngest Realtime Package\nDESCRIPTION: Instructions for installing the @inngest/realtime package using different package managers\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/realtime.mdx#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @inngest/realtime\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @inngest/realtime\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @inngest/realtime\n```\n\nLANGUAGE: shell\nCODE:\n```\nbun add @inngest/realtime\n```\n\nLANGUAGE: shell\nCODE:\n```\ndeno add jsr:@inngest/realtime\n```\n\n----------------------------------------\n\nTITLE: Calculating Accurate Deltas Using Window Functions in SQL\nDESCRIPTION: This SQL query uses Postgres' windowing functions to compute accurate differences between counters by partitions. It addresses the limitations of continuous aggregates and provides more precise results for user-facing metrics.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/2023-11-29-metrics-with-timescale.md#2025-04-10_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nWITH\n  base AS (\n    SELECT\n      account_id,\n      environment_id,\n      function_id,\n      time,\n      host,\n      value,\n      -- NOTE: Calculating diff compared with the previous record value\n      value - LAG(value, 1, 0) OVER (PARTITION BY account_id,environment_id,function_id,host ORDER BY time) as diff_val\n    FROM\n      function_run_scheduled_total\n    WHERE\n      function_id = '?' AND time >= NOW() - INTERVAL '1d2h'\n  ),\n  final AS (\n    SELECT\n      account_id,\n      environment_id,\n      function_id,\n      time,\n      CASE\n        WHEN diff_val >= 0 THEN diff_val\n        ELSE value\n      END AS diff\n    FROM\n      base\n  )\n\nSELECT\n  time_bucket_gapfill (INTERVAL '30 minutes', time) AS bucket,\n  account_id,\n  environment_id,\n  function_id,\n  COALESCE(SUM(diff), 0) AS count\nFROM\n  final\nWHERE\n  time >= NOW() - INTERVAL '1 day' AND time <= NOW()\nGROUP BY\n  bucket, account_id, environment_id, function_id\nORDER BY\n  bucket DESC\n```\n\n----------------------------------------\n\nTITLE: Event Data Structure for Destination Sync in JSX\nDESCRIPTION: Defines the structure of a sync event payload containing the destination ID, sync ID, and the accounts data to be processed during synchronization.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/synchronizing-financial-data-from-plaid-and-stripe.mdx#2025-04-10_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  name: 'app/destination.sync.accounts',\n  data: {\n    destinationId: string;\n    syncId: string;\n    accounts: Account[]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enqueueing Jobs with Debounce in Node.js and Postgres\nDESCRIPTION: JavaScript function using @vercel/postgres to enqueue jobs with debounce functionality, handling conflicts and updating scheduled times.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/debouncing-in-queuing-systems-optimizing-efficiency-in-async-workflows.mdx#2025-04-10_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { crypto } from \"node:crypto\";\nimport { sql } from \"@vercel/postgres\";\nasync function enqueue(jobType, payload, delay = 0) {\n  const json = JSON.stringify(payload);\n  const debounceKey = crypto\n    .createHash(\"sha256\")\n    .update(jobType + json)\n    .digest(\"hex\");\n  return await sql`\n\t\tINSERT INTO debounce_job_queue (\n\t\t\tjob_type, status, payload, scheduled_at, debounce_key\n\t\t)\n\t\tVALUES (\n\t\t\t'${jobType}', 'QUEUED', '${json}',\n\t\t\tnow() + INTERVAL '${delay} seconds', ${debounceKey}\n\t\t)\n\t\t-- If the item is already QUEUED, update the scheduled at w/ the delay\n\t\tON CONFLICT (debounce_key, status) WHERE status = 'QUEUED'\n\t\tDO UPDATE SET scheduled_at = now() + INTERVAL '${delay} seconds';\n\t`;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Debouncing for an Inngest Function in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create an Inngest function with debouncing capabilities. It sets up a function that generates blog post title ideas whenever a draft is saved, with a one-minute debounce period and a key based on the blog post ID to ensure each post is debounced separately.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/debouncing-in-queuing-systems-optimizing-efficiency-in-async-workflows.mdx#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst generateIdeasFunction = inngest.createFunction(\n  {\n    id: \"generate-ideas-via-open-ai\",\n    debounce: {\n      period: \"1m\",\n      key: \"event.data.blog_post_id\",\n    },\n  },\n  { event: \"blog/draft.saved\" },\n  async ({ event, step }) => {\n    /* call OpenAI */\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAI Function Calls for Linear Issue Management\nDESCRIPTION: This code defines the functions available to the OpenAI Chat completion API for interacting with Linear issues. It includes a search_issues function that queries Linear data and a delete_issue function that requires human confirmation before execution.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/semi-autonomous-ai-agents.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst functions: Functions = {\n  search_issues: {\n    docs: {\n      name: \"search_issues\",\n      description: \"Search all issues for the given text\",\n      parameters: {\n        type: \"object\",\n        properties: {\n          search: {\n            type: \"string\",\n            description: \"The search term\",\n          },\n        },\n        required: [\"search\"],\n      },\n    },\n    invoke: async (f: FunctionCall, _m: ChatCompletionRequestMessage[]) => {\n      if (typeof f.arguments.search !== \"string\") {\n        throw new Error(\"No search term provided\");\n      }\n      return linear.issues({\n        last: 5,\n        filter: { searchableContent: { contains: f.arguments.search } },\n      });\n    },\n  },\n  delete_issue: {\n    docs: {\n      name: \"delete_issue\",\n      description: \"Delete an issue by ID\",\n      parameters: {\n        type: \"object\",\n        properties: {\n          id: {\n            type: \"string\",\n            description: \"ID of the issue to delete\",\n          },\n        },\n        required: [\"id\"],\n      },\n    },\n    confirm: true,\n    invoke: async (f: FunctionCall, _m: ChatCompletionRequestMessage[]) => {\n      console.log(\"🤡 Not actually deleting issues!\", f.arguments.id);\n      return true;\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Description Variable in JavaScript\nDESCRIPTION: Exports a constant string that describes the purpose of the glossary documentation.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/glossary.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const description = `Key terms for Inngest's documentation explained.`\n```\n\n----------------------------------------\n\nTITLE: Installing Inngest SDK for Python\nDESCRIPTION: Installs the Inngest SDK for Python projects using pip package manager.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/overview.mdx#2025-04-10_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npip install inngest\n```\n\n----------------------------------------\n\nTITLE: Creating a new Inngest function with custom event name\nDESCRIPTION: Commands to navigate to a project directory and initialize a new Inngest function with a custom event name trigger using the CLI.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/introducing-inngest-dev-server.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd my-project\ninngest init --event my.event.name\n```\n\n----------------------------------------\n\nTITLE: Aggregating Function Run Data with Continuous Aggregates in SQL\nDESCRIPTION: This SQL query demonstrates an attempt to use continuous aggregates with counter and gauge aggregators to compute differences between counters and gauges. It uses time bucketing and interpolated delta, but faces limitations with window functions.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/2023-11-29-metrics-with-timescale.md#2025-04-10_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nWITH\n  agg AS (\n    SELECT\n      account_id,\n      environment_id,\n      function_id,\n      counter_agg(time, counter) AS summary,\n      time_bucket_gapfill(INTERVAL '30 minutes', time) AS bucket\n    FROM\n      function_run_scheduled_total\n    WHERE\n      function_id = '?' AND time >= NOW() - INTERVAL '1 day' AND time <= NOW()\n    GROUP BY\n      bucket,account_id,environment_id,function_id\n  )\n\nSELECT\n  bucket,\n  account_id,\n  environment_id,\n  function_id,\n  interpolated_delta(summary, bucket, INTERVAL '30 minutes')\nFROM\n  agg\nORDER BY\n  bucket DESC\n```\n\n----------------------------------------\n\nTITLE: Selecting Provider Functions Based on Platform ID in JavaScript\nDESCRIPTION: This code snippet shows how the application dynamically selects the appropriate fetch function based on the source platform identifier. This allows the system to support multiple video storage providers with different API implementations.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/mux-migrating-video-collections.mdx#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst sourcePlatformId = event.data.encrypted.sourcePlatform.id;\nconst fetchPageFn = providerFns[sourcePlatformId].fetchPage;\n```\n\n----------------------------------------\n\nTITLE: Creating an Inngest function to react to GraphQL events\nDESCRIPTION: Code example showing how to create an Inngest function that triggers on a specific GraphQL event. This function sends a Slack message when a new item is added to a cart.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/instrumenting-graphql.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  { id: \"send-cart-alert\" },\n  { event: \"graphql/create-cart-item.mutation\" },\n  async ({ event }) => {\n    await sendSlackMessage(\n      \"#marketing\",\n      `Someone added product #${event.data.identifiers[0].id} to their cart!`\n    );\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Coding Agent with AgentKit\nDESCRIPTION: Implementation of the coding agent using AgentKit's createAgent() function, configuring the Claude 3.5 Sonnet model and system prompt.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/cursor-agentkit-e2b.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createAgent, anthropic } from \"@inngest/agent-kit\"\n\nconst agent = createAgent({\n    name: \"Coding Agent\",\n    description: \"An expert coding agent\",\n    system: `You are a coding agent help the user to achieve the described task.\n\n    When running commands, keep in mind that the terminal is non-interactive, remind to use the '-y' flag when running commands.\n\n    Once the task completed, you should return the following information:\n    <task_summary>\n    </task_summary>\n\n    Think step-by-step before you start the task.\n    `,\n    model: anthropic({\n    model: \"claude-3-5-sonnet-latest\",\n    max_tokens: 4096,\n}),  \n})\n```\n\n----------------------------------------\n\nTITLE: Handling Requests and Broadcasting Messages on PartyKit Server in TypeScript\nDESCRIPTION: This server-side code handles incoming requests, extracts the message body, and broadcasts it to all connected clients. It's part of the PartyKit server implementation.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/semi-autonomous-ai-agents.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync onRequest(_req: PartyRequest) {\n  const messageBody: {requestId: string, body: string} = await _req.json();\n\n  this.party.broadcast(messageBody.body);\n\n  return new Response(\n      `Party ${this.party.id} has received ${this.messages.length} messages`\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Inngest SDK in NPM\nDESCRIPTION: Command to update Inngest SDK to version 1.7.0 or greater to enable Branch Environments functionality.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/branch-environments.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i inngest@latest\n```\n\n----------------------------------------\n\nTITLE: Adding Inngest Function to API Handler (App Router)\nDESCRIPTION: Code showing how to import and add a defined Inngest function to the serve handler in a Next.js App Router application.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/getting-started/nextjs-quick-start.mdx#2025-04-10_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nimport { serve } from \"inngest/next\";\nimport { inngest } from \"../../../inngest/client\";\nimport { helloWorld } from \"../../../inngest/functions\";\n\nexport const { GET, POST, PUT } = serve({\n  client: inngest,\n  functions: [\n    helloWorld, // <-- This is where you'll always add all your functions\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Render Deployment and Inngest Sync\nDESCRIPTION: GitHub Actions workflow configuration that deploys an application to Render and syncs it with Inngest using the Render Deploy Action and a curl command.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/deploy/render.mdx#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: My Deploy\n\non:\n  push:\n    branches: [ master ]\n  pull_request:\n    branches: [ master ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Deploy to production\n        uses: johnbeynon/render-deploy-action@v0.0.8\n        with:\n          service-id: ${{ secrets.MY_RENDER_SERVICE_ID }}\n          api-key: ${{ secrets.MY_RENDER_API_KEY }}\n          wait-for-success: true\n\n  sync_inngest:\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n      - name: Register application to Inngest\n       - run: |\n            curl -X PUT ${{ secrets.APP_URL }}/api/inngest\n```\n\n----------------------------------------\n\nTITLE: Exporting Resend Case Study Configuration in JavaScript\nDESCRIPTION: Configuration exports for a case study page including company details, quotes, and meta information for Resend's implementation of Inngest workflows.\nSOURCE: https://github.com/inngest/website/blob/main/pages/customers/resend.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const title = 'Scaling a fast growing developer email platform with serverless workflows'\nexport const companyName = 'Resend'\nexport const logo = '/assets/customers/resend.svg'\nexport const quote = {\n  text: `The DX and visibility with Inngest is really incredible. We are able to develop functions locally easier and faster that with our previous queue. Also, Inngest's tools give us the visibility to debug issues much quicker than before.`,\n  attribution: {\n    name: 'Bu Kinoshita',\n    title: 'Co-founder',\n  },\n  avatar: '/assets/customers/resend-bu-kinoshita.jpg',\n}\nexport const companyURL = 'https://resend.com'\nexport const companyDescription = 'The modern email sending platform'\nexport const ogImage = '/assets/customers/case-study/og-image-resend.png'\n```\n\n----------------------------------------\n\nTITLE: Calculating Difference Between Current and Previous Bucket in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates the logic for calculating the difference between the last value of the current bucket and the previous bucket. It's a simplified representation of the delta calculation performed in the SQL queries.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/2023-11-29-metrics-with-timescale.md#2025-04-10_snippet_4\n\nLANGUAGE: js\nCODE:\n```\ndiff = prev ? current - prev : current;\n```\n\n----------------------------------------\n\nTITLE: Pausing Function Execution for a Specific Duration in Python\nDESCRIPTION: This Python example shows how to use `step.sleep()` to pause function execution for a specific time period. The function sleeps for 2 seconds using a timedelta object.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/steps-workflows/sleeps.mdx#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@inngest_client.create_function(\n    fn_id=\"my_function\",\n    trigger=inngest.TriggerEvent(event=\"app/my_function\"),\n)\nasync def fn(\n    ctx: inngest.Context,\n    step: inngest.Step,\n) -> None:\n    await step.sleep(\"zzz\", datetime.timedelta(seconds=2))\n```\n\n----------------------------------------\n\nTITLE: DeepSeek French Market Analysis\nDESCRIPTION: Reasoning process output from DeepSeek model for adapting the marketing campaign to the French market, considering cultural nuances and language requirements.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/deepseek-r1-step-ai.mdx#2025-04-10_snippet_5\n\nLANGUAGE: txt\nCODE:\n```\n<think>\nAlright, so I've got this task to adapt a marketing campaign concept for Koyeb into French.\nKoyeb is a serverless platform that helps businesses deploy applications without worrying about servers or infrastructure.\nThe target audience is CTOs, Architects, and Founders, especially in sectors like FinTech, EdTech, and HealthTech.\nFirst, I need to understand the core message. It's about empowering innovation with serverless freedom.\nThe key themes are freedom from complexity, scalability, security, multi-cloud flexibility, and a developer-centric experience.\nThat makes sense because these decision-makers are often concerned with efficiency, cost, and security.\n\nNow, adapting this for the French market. I should consider the cultural nuances.\nIn France, professionalism and precision are highly valued.\nThe language is formal, especially in business contexts.\nAlso, data privacy is a big concern, so emphasizing security and compliance would resonate well.\n\nI need to translate the campaign elements: headline, main copy, call to action, and social media snippets. The challenge is to make it feel native without losing the technical terms. So, I'll keep terms like \\\"serverless\\\" and \\\"cloud\\\" in English but translate the surrounding text.\n\n...\n</think>\n```\n\n----------------------------------------\n\nTITLE: Invoking Python Function from TypeScript using Inngest\nDESCRIPTION: This code demonstrates cross-language function invocation where a TypeScript function calls a Python function through Inngest's step.invoke() method. It passes an array of values to the Python function and returns a formatted string with the result.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/cross-language-support-with-new-sdks.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const hello = inngestClient.createFunction(\n  { id: \"hello\" },\n  { event: \"node-app/hello\" },\n  async ({ event, step }) => {\n    const values = [1, 2, 3];\n\n    const totalResult = await step.invoke(\"get-total\", {\n      function: referenceFunction({\n        appId: \"python-app\", functionId: \"total\"\n      }),\n      data: { values },\n    });\n\n    return `The Python app says the sum of ${values.join(\n      \" + \"\n    )} is ${totalResult}`;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Throttling and Concurrency Controls in Inngest\nDESCRIPTION: Example showing how to combine both throttling and concurrency controls for comprehensive API call management.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/ai-in-production-managing-capacity-with-flow-control.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n  {\n    id: \"ai-generate-summary\",\n    throttle: {\n      limit: 10,\n      period: \"1m\",\n    }\n    concurrency: {\n      scope: \"fn\",\n      key: \"event.data.user_id\",\n      limit: 1,\n    },\n  },\n  { event: \"ai/summary.requested\" },\n  async ({ event, step }) => {\n    /* call OpenAI */\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Middleware in Python\nDESCRIPTION: Shows how to create a middleware class in Python with event handling hooks.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/middleware/create.mdx#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport inngest\n\nclass MyMiddleware(inngest.Middleware):\n    def __init__(\n        self,\n        client: inngest.Inngest,\n        raw_request: object,\n    ) -> None:\n        #  ...\n\n    async def before_send_events( self, events: list[inngest.Event]) -> None:\n        print(f\"Sending {len(events)} events\")\n\n    async def after_send_events(self, result: inngest.SendEventsResult) -> None:\n        print(\"Done sending events\")\n\ninngest_client = inngest.Inngest(\n    app_id=\"my_app\",\n    middleware=[MyMiddleware],\n)\n```\n\n----------------------------------------\n\nTITLE: Execution Flow Demonstration (Correct)\nDESCRIPTION: Shows how Inngest actually executes the function code, with each step causing a re-entry from the beginning of the function. This demonstrates the actual execution flow.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/working-with-loops.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# This is how Inngest executes the code above:\n\n<run start>\n\"hello\"\n\n\"hello\"\n\"a\"\n\n\"hello\"\n\"b\"\n\n\"hello\"\n\"c\"\n<run complete>\n```\n\n----------------------------------------\n\nTITLE: Configuring Next-Auth with Inngest Event Integration\nDESCRIPTION: Implementation of Next-Auth configuration with custom event handling for user creation. Demonstrates how to trigger Inngest events on user signup and configure authentication providers.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/lifecycle-emails-with-resend.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const authOptions: NextAuthOptions = {\n  callbacks: {\n    session: ({ session, user }) => ({\n      ...session,\n      user: {\n        ...session.user,\n        id: user.id,\n      },\n    }),\n  },\n  events: {\n    createUser: async ({ user }) => {\n      inngest.send({ name: \"user/created\", user, data: {} });\n    },\n  },\n  adapter: PrismaAdapter(prisma),\n  providers: [\n    GithubProvider({\n      clientId: env.GITHUB_CLIENT_ID,\n      clientSecret: env.GITHUB_CLIENT_SECRET,\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Components for Inngest Examples Page\nDESCRIPTION: Imports required components and icons from shared documentation components and icon libraries for building the examples page.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/examples/index.mdx#2025-04-10_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { CardGroup, Card } from \"src/shared/Docs/mdx\";\nimport { EnvelopeIcon, Cog6ToothIcon } from \"@heroicons/react/24/outline\";\nimport { RiBracesFill, RiCalendarScheduleFill, RiErrorWarningFill } from \"@remixicon/react\";\n\nexport const hidePageSidebar = true;\n```\n\n----------------------------------------\n\nTITLE: Importing Flow Control Icons and Components in React/JSX\nDESCRIPTION: This snippet imports various icon components for flow control features and card components from the shared docs library. These components are used to create a visual card-based navigation interface for the flow control documentation.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/flow-control.mdx#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport IconConcurrency from 'src/shared/Icons/FlowControl/Concurrency';\nimport IconDebounce from 'src/shared/Icons/FlowControl/Debounce';\nimport { CardGroup, Card, ImageTheme } from \"src/shared/Docs/mdx\";\n\nimport {\n  RiGitPullRequestFill,\n  RiSlowDownFill,\n  RiSkipRightFill,\n} from \"@remixicon/react\";\n```\n\n----------------------------------------\n\nTITLE: Setting Instance ID for Inngest Connect Workers\nDESCRIPTION: Examples showing how to set the instanceId parameter when connecting to Inngest across different deployment platforms. The instanceId uniquely identifies worker instances connecting to Inngest.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/setup/connect.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Set the instance ID to any environment variable that is unique to the worker\nawait connect({\n  apps: [...],\n  instanceId: process.env.MY_CONTAINER_ID,\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// instanceId defaults to the HOSTNAME environment variable.\n// By default, Kubernetes and Docker set the HOSTNAME environment variable to the pod name\n// so it is automatically set for you.\nawait connect({\n  apps: [...],\n  // This is what happens under the hood if you don't set instanceId\n  // instanceId: process.env.HOSTNAME,\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Render includes the RENDER_INSTANCE_ID env var at runtime.\n// https://render.com/docs/environment-variables\nawait connect({\n  apps: [...],\n  instanceId: process.env.RENDER_INSTANCE_ID,\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Fly includes the FLY_MACHINE_ID env var at runtime.\n// https://fly.io/docs/machines/runtime-environment/\nawait connect({\n  apps: [...],\n  instanceId: process.env.FLY_MACHINE_ID,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Type-Safe Factory Function with Generic Inference\nDESCRIPTION: Demonstrates creating a factory function that enforces a specific input shape while preserving literal types in the return value. This provides both compile-time validation and precise type inference.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/building-educational-typescript-tooling.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype Hobby = \"dancing\" | \"romancing\" | \"typescript\";\n\n/**\n * Enforce input and infer the literal output\n */\nconst createHobbies = <T extends Record<Hobby, boolean>>(hobbies: T): T =>\n  hobbies;\n\nconst myHobbies = createHobbies({\n  dancing: false,\n  romancing: false,\n  typescript: true,\n});\n\nconst likeDancing = myHobbies.dancing;\n//     ^?\n```\n\n----------------------------------------\n\nTITLE: Converting HTML to Next.js Root Layout with Children\nDESCRIPTION: Transformation of the index.html content into a Next.js Root Layout component. This shows how to replace the standard Vite HTML structure with React components that maintain the same HTML structure.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/migrating-from-vite-to-nextjs.mdx#2025-04-10_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\" />\n        <link rel=\"icon\" type=\"image/svg+xml\" href=\"/icon.svg\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <title>My App</title>\n        <meta name=\"description\" content=\"My App is a...\">\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Inngest CLI using curl and shell script\nDESCRIPTION: A command to download and install the Inngest CLI tool to the local machine. The script downloads the installer and moves the binary to the /usr/local/bin directory for system-wide access.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/introducing-inngest-dev-server.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sfL https://cli.inngest.com/install.sh | sh && sudo mv ./inngest /usr/local/bin/inngest\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Parallel Steps in Python with Inngest\nDESCRIPTION: Shows how to implement parallel steps in Python using async code and the step.parallel method. This example demonstrates updating a user and sending an email concurrently.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/step-parallelism.mdx#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@client.create_function(\n  fn_id=\"my-fn\",\n  trigger=inngest.TriggerEvent(event=\"my-event\"),\n)\nasync def fn(\n  ctx: inngest.Context,\n  step: inngest.Step,\n) -> None:\n  user_id = ctx.event.data[\"user_id\"]\n\n  (updated_user, sent_email) = await step.parallel(\n    (\n      lambda: step.run(\"update-user\", update_user, user_id),\n      lambda: step.run(\"send-email\", send_email, user_id),\n    )\n  )\n```\n\n----------------------------------------\n\nTITLE: JSX Comment About Additional Flow Control Documentation\nDESCRIPTION: This JSX comment indicates a consideration for potentially adding documentation about using timestamps for delaying execution as a flow control mechanism, showing the documentation is still evolving.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/flow-control.mdx#2025-04-10_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n{/* NOTE - Should we include 'delaying for flow control - e.g. using the ts' */}\n```\n\n----------------------------------------\n\nTITLE: Redis Cluster Client Sharding Implementation in Go\nDESCRIPTION: Code showing the implementation of Redis client sharding logic. Includes functions for determining client sharding status and rollout timing based on account ID and timestamps. Demonstrates gradual rollout strategy with time-based activation.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/sharding-at-inngest.mdx#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc Client(account string) redis.UniversalClient {\n    if IsSharded(account) {\n        return shardedClient\n    }\n    return singleNodeClient\n}\n\nfunc RollOutSharding(accountID string, t time.Time) bool {\n    // Determine if sharding should be enabled for this account\n    // based on time and account ID\n    return shouldEnableSharding\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Page Configuration in JavaScript/JSX\nDESCRIPTION: This line sets a configuration option to hide the page sidebar. It's likely used in the context of a documentation system or content management setup.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/index.mdx#2025-04-10_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const hidePageSidebar = true;\n```\n\n----------------------------------------\n\nTITLE: Creating a Reminder Function in Inngest with TypeScript\nDESCRIPTION: This code creates an Inngest function that sends a reminder email to a user. The function is triggered by the 'notifications/reminder.scheduled' event and extracts user information and message content from the event data.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/examples/scheduling-one-off-function.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst sendReminder = inngest.createFunction(\n  { id: \"send-reminder\" },\n  { event: \"notifications/reminder.scheduled\" },\n  async ({ event, step }) => {\n    const { user, message } = event.data;\n\n    const { id } = await emailApi.send({\n      to: user.email,\n      subject: \"Reminder for your upcoming event\",\n      body: message,\n    });\n\n    return { id }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining an Event-Driven Function Configuration in JSON\nDESCRIPTION: This JSON configuration demonstrates how to define a multi-step function in Inngest with triggers, conditions, and a sequence of steps. It shows how to specify different runtimes (Docker and Lambda) for individual steps within a DAG workflow.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/building-an-event-driven-queue.md#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"A beautiful background function\",\n  \"id\": \"prompt-deer-ede40d\",\n  \"triggers\": [\n    {\n      \"event\": \"user/signed.up\",\n      \"expression\": \"user.created_at > '2020-01-01'\"\n    }\n  ],\n\n  \"steps\": {\n    \"step-1\": {\n      \"id\": \"step-1\",\n      \"path\": \"file://./steps/send-sms-dispatch\",\n      \"name\": \"Send SMS\",\n      \"runtime\": {\n        \"type\": \"docker\"\n      }\n    },\n    \"step-2\": {\n      \"id\": \"step-2\",\n      \"path\": \"file://./steps/add-to-intercom\",\n      \"name\": \"Add user to Intercom\",\n      \"runtime\": {\n        \"type\": \"lambda\"\n      },\n      \"after\": [{ \"step\": \"step-1\" }]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Next.js Metadata API in Root Layout\nDESCRIPTION: Final version of the root layout that uses Next.js Metadata API to define page metadata instead of using HTML head tags, following Next.js best practices for SEO optimization.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/migrating-from-vite-to-nextjs.mdx#2025-04-10_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: 'My App',\n  description: 'My App is a...',\n}\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Inngest CLI Replay Command\nDESCRIPTION: Basic command to run Inngest replays which pulls recent events from Inngest Cloud and tests local functions against them.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/introducing-cli-replays.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ inngest run --replay\n```\n\n----------------------------------------\n\nTITLE: Setting Page Configuration for Inngest SDK Reference\nDESCRIPTION: Exports a configuration setting to hide the page sidebar in the documentation layout. This controls how the reference page is displayed in the UI.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/index.mdx#2025-04-10_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const hidePageSidebar = true;\n```\n\n----------------------------------------\n\nTITLE: Installing Inngest SDK for Go\nDESCRIPTION: Installs the Inngest SDK for Go projects using go get command.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/overview.mdx#2025-04-10_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo get github.com/inngest/inngestgo\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Documentation\nDESCRIPTION: Import statement bringing in UI components from the shared Docs/mdx folder to be used in the markdown documentation page.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/platform/monitor/observability-metrics.mdx#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout, Col, Row } from \"src/shared/Docs/mdx\";\n```\n\n----------------------------------------\n\nTITLE: Exporting Description Variable in JavaScript\nDESCRIPTION: Exports a constant description string for documentation purposes.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/versioning.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const description = \"Learn how .\"\n```\n\n----------------------------------------\n\nTITLE: Waiting for Events with step.WaitForEvent() in Go\nDESCRIPTION: Illustrates the usage of step.WaitForEvent() to pause execution until a specific event is received. This method allows for sampling from the event stream and automatically resuming when a matching event is found or a timeout is reached.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/learn/inngest-steps.mdx#2025-04-10_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"github.com/inngest/inngestgo\"\n  \"github.com/inngest/inngestgo/errors\"\n  \"github.com/inngest/inngestgo/step\"\n)\n\ninngestgo.CreateFunction(\n  &inngestgo.FunctionOpts{\n    ID: \"send-delayed-email\",\n  },\n  inngestgo.EventTrigger(\"app/user.signup\", nil),\n  // handler function\n  func(ctx context.Context, input inngestgo.Input) (any, error) {\n    // Sample from the event stream for new events.  The function will stop\n    // running and automatically resume when a matching event is found, or if\n    // the timeout is reached.\n    fn, err := step.WaitForEvent[FunctionCreatedEvent](\n      ctx,\n      \"wait-for-activity\",\n      step.WaitForEventOpts{\n        Name:    \"Wait for a function to be created\",\n        Event:   \"api/function.created\",\n        Timeout: time.Hour * 72,\n        // Match events where the user_id is the same in the async sampled event.\n        If: inngestgo.StrPtr(\"event.data.user_id == async.data.user_id\"),\n      },\n    )\n    if err == step.ErrEventNotReceived {\n      // A function wasn't created within 3 days.  Send a follow-up email.\n      _, _ = step.Run(ctx, \"follow-up-email\", func(ctx context.Context) (any, error) {\n        // ...\n        return true, nil\n      })\n      return nil, nil\n    }\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Basic OpenAI Chat Completion Implementation in TypeScript\nDESCRIPTION: Simple example of using OpenAI's chat completion API to generate responses. Shows basic implementation without production-ready controls.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/ai-in-production-managing-capacity-with-flow-control.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const completion = await openai.chat.completions.create({\n    messages: [{\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n        {\"role\": \"user\", \"content\": \"Who won the world series in 2020?\"},\n        {\"role\": \"assistant\", \"content\": \"The Los Angeles Dodgers won the World Series in 2020.\"},\n        {\"role\": \"user\", \"content\": \"Where was it played?\"}],\n    model: \"gpt-3.5-turbo\",\n  });\n\n  console.log(completion.choices[0]);\n}\nmain();\n```\n\n----------------------------------------\n\nTITLE: Creating a Client-Side Entrypoint Page Component\nDESCRIPTION: Implementation of a page.tsx file that serves as the SPA entrypoint using the 'use client' directive and dynamic imports to disable SSR. This allows preserving the client-side behavior of the original Vite app.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/migrating-from-vite-to-nextjs.mdx#2025-04-10_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport dynamic from 'next/dynamic'\nimport '../../index.css'\n\nconst App = dynamic(() => import('../../App'), { ssr: false })\n\nexport default function Page() {\n  return (<App />)\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Resource Grid with Pattern Cards in JSX\nDESCRIPTION: This JSX code creates a ResourceGrid component with multiple Resource components as children. Each Resource represents a different Inngest pattern or guide, including background jobs, delayed functions, parallelization, and more.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/index.mdx#2025-04-10_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<ResourceGrid cols={3}>\n\n<Resource resource={{\n  href: \"/docs/guides/background-jobs\",\n  name: \"Background jobs\",\n  icon: \"paper-airplane\",\n  description: \"Run long-running tasks in the background out of the critical path of a request.\",\n  pattern: 0,\n}}/>\n\n<Resource resource={{\n  href: \"/docs/guides/delayed-functions\",\n  name: \"Enqueueing future jobs\",\n  icon: \"chevron-double-right\",\n  description: \"Schedule or delay functions to run in the future.\",\n  pattern: 1,\n}}/>\n\n<Resource resource={{\n  href: \"/docs/guides/step-parallelism\",\n  name: \"Parallelize steps\",\n  icon: \"parallel\",\n  description: \"Run function steps in parallel to speed up execution.\",\n  pattern: 2,\n}}/>\n\n<Resource resource={{\n  href: \"/docs/guides/fan-out-jobs\",\n  name: \"Fan-out\",\n  icon: \"arrows-pointing-out\",\n  description: \"Use events to trigger multiple functions at once.\",\n  pattern: 3,\n}}/>\n\n<Resource resource={{\n  href: \"/docs/guides/batching\",\n  name: \"Batching events\",\n  icon: \"square-3-stack-3d\",\n  description: \"Improve efficiency with high-load systems by processing batches of events at once.\",\n  pattern: 2,\n}}/>\n\n<Resource resource={{\n  href: \"/docs/guides/scheduled-functions\",\n  name: \"Scheduled functions\",\n  icon: \"clock\",\n  description: \"Run functions periodically on a cron schedule.\",\n  pattern: 1,\n}}/>\n\n<Resource resource={{\n  href: \"/docs/guides/invoking-functions-directly\",\n  name: \"Invoking functions directly\",\n  icon: \"rectangle-group\",\n  description: \"Call one function from another across multiple apps.\",\n  pattern: 0\n}}/>\n\n</ResourceGrid>\n```\n\n----------------------------------------\n\nTITLE: Importing React Components and Icons\nDESCRIPTION: Imports required React components from MDX documentation shared components and Remix icons for use in the documentation interface.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/error-handling.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CardGroup, Card, CodeGroup, Callout } from \"src/shared/Docs/mdx\";\nimport { RiArrowGoBackLine, RiErrorWarningLine } from \"@remixicon/react\";\n\nimport ReplayIcon from 'src/shared/Icons/Replay';\n\nexport const description = 'Learn how to handle errors and failures in your Inngest functions.'\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment for Inngest Project\nDESCRIPTION: Command to create and activate a Python virtual environment for an Inngest project.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/getting-started/python-quick-start.mdx#2025-04-10_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython -m venv .venv && source .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Setting Description Variable in TypeScript\nDESCRIPTION: Export statement defining the page description for documentation purposes.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/platform/signing-keys.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const description = 'Learn about how signing keys are used to secure communication between Inngest and your servers, how to rotate them, and how to set them in your SDK.'\n```\n\n----------------------------------------\n\nTITLE: Combining Concurrency Limits with Throttle Controls in Inngest\nDESCRIPTION: This example shows how to combine concurrency limits with throttle controls in an Inngest function. It limits each user to two concurrent executions and applies a global throttle of 30 executions per minute.\nSOURCE: https://github.com/inngest/website/blob/main/app/(landing-pages)/landing/(pages)/managing-capacity-for-ai-concurrency/content.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninngest.createFunction(\n {\n   id: \"ai-generate-summary\",\n   throttle: {\n     limit: 30,\n     period: \"1m\",\n   }\n   concurrency: {\n     key: \"event.data.user_id\",\n     limit: 2,\n   },\n },\n { event: \"ai/summary.requested\" },\n async ({ event, step }) => {\n   /* call OpenAI */\n }\n);\n```\n\n----------------------------------------\n\nTITLE: Using Side-Effect Imports for Cross-Package Functions\nDESCRIPTION: Example of using a side-effect import to include Inngest functions declared in a different package than the client. This is required when functions are created in separate packages.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/go/migrations/v0.7-to-v0.8.mdx#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"github.com/inngest/inngestgo\"\n\n\t// Side-effect import to include functions declared in a different package.\n\t_ \"github.com/myorg/myapp/fns\"\n)\n\nfunc main() {\n\tclient, err := inngestgo.NewClient(inngestgo.ClientOpts{AppID: \"my-app\"})\n\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Documentation Guide Grid in JSX\nDESCRIPTION: Implements a grid layout containing guide links to various Inngest platform documentation sections. Each Guide component includes a href, name, and description property.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/platform/index.mdx#2025-04-10_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<GuideGrid cols={4}>\n\n  <Guide\n    href=\"/docs/apps/cloud\"\n    name=\"Working with apps\"\n    description=\"Sync your app and functions with the Inngest platform\"\n  />\n\n  <Guide\n    href=\"/docs/platform/environments\"\n    name=\"Working with environments\"\n    description=\"How to use production, branch and local environments\"\n  />\n\n  <Guide\n    href=\"/docs/events/creating-an-event-key\"\n    name=\"Creating an event key\"\n    description=\"Used to send events to your environment\"\n  />\n\n  <Guide\n    href=\"/docs/platform/replay\"\n    name=\"Replaying functions\"\n    description=\"Replay your function runs\"\n    />\n\n</GuideGrid>\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output from OpenAI o1 Model\nDESCRIPTION: Sample JSON response generated by OpenAI's o1 model, containing a sequence of actions and model calls needed to process contact data. This output shows a mixed workflow of predefined actions and custom GPT model calls.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/agentic-workflow-example.mdx#2025-04-10_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"action\": \"convert\"\n  },\n  {\n    \"model\": \"gpt-3.5-turbo\",\n    \"prompt\": \"Parse the following contact information from JSON, correct any typos, and ensure all fields are properly formatted.\"\n  },\n  {\n    \"action\": \"enrich\"\n  },\n  {\n    \"model\": \"gpt-3.5-turbo\",\n    \"prompt\": \"Label each contact as a decider and rank them as a good sales target for software based on their company, role, and industry.\"\n  },\n  {\n    \"model\": \"gpt-3.5-turbo\",\n    \"prompt\": \"Reformat the following JSON data to match the columns: Name, Position, Company, Email.\"\n  },\n  {\n    \"action\": \"save\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js with Custom Base Path\nDESCRIPTION: Configuration of next.config.cjs to use an environment variable for setting the base path, enabling the application to be served from a subdirectory similar to how it might have been configured in Vite.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/migrating-from-vite-to-nextjs.mdx#2025-04-10_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  output: 'export',\n  distDir: './dist',\n  basePath: process.env.NEXT_PUBLIC_BASE_PATH,\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Importing ResourceGrid and Resource Components in JavaScript/JSX\nDESCRIPTION: This snippet imports the ResourceGrid and Resource components from a shared documentation module. These components are likely used to create a grid layout for displaying resource cards.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/index.mdx#2025-04-10_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ResourceGrid, Resource } from 'src/shared/Docs/Resources'\n```\n\n----------------------------------------\n\nTITLE: Track Requests Function without Idempotency\nDESCRIPTION: Example of a function that tracks AI generation requests without idempotency, allowing it to run for every event occurrence regardless of content duplication.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/handling-idempotency.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst trackRequests = inngest.createFunction(\n  { id: 'track-requests' },\n  { event: 'ai/generation.requested' },\n  async ({ event, step }) => {\n    // Track the request\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring netlify.toml for basic Inngest plugin setup\nDESCRIPTION: Basic configuration in netlify.toml file to enable the Inngest plugin for Netlify builds.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/deploy/netlify.mdx#2025-04-10_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[[plugins]]\npackage = \"netlify-plugin-inngest\"\n```\n\n----------------------------------------\n\nTITLE: Advanced netlify.toml configuration for Inngest plugin\nDESCRIPTION: Extended configuration in netlify.toml file to specify custom host and path for the Inngest plugin.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/deploy/netlify.mdx#2025-04-10_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[[plugins]]\npackage = \"netlify-plugin-inngest\"\n\n  [plugins.inputs]\n    host = \"https://my-specific-domain.com\"\n    path = \"/api/inngest\"\n```\n\n----------------------------------------\n\nTITLE: Importing Guide Components in JSX\nDESCRIPTION: Imports the GuideGrid and Guide components from the shared Docs directory, which are used to create a grid layout of documentation guides.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/platform/index.mdx#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GuideGrid, Guide } from 'src/shared/Docs/Guides'\n```\n\n----------------------------------------\n\nTITLE: Starting the Inngest Dev Server for Testing Webhook Events\nDESCRIPTION: Command to start the Inngest Dev Server for local development and testing. This allows developers to test their functions with simulated webhook events without requiring a production environment.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/resend-webhook-events.mdx#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx inngest-cli@latest dev\n```\n\n----------------------------------------\n\nTITLE: Creating a Prompt for OpenAI o1 Workflow Generation\nDESCRIPTION: Function that constructs a prompt for OpenAI's o1 model to generate a workflow for contact import. The prompt instructs the model to create a series of steps to parse, enrich, and format contact information from a CSV file.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/agentic-workflow-example.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst prompt = (contactsFileContent: string) => `\nConsidering the following available actions:\n${actions\n  .filter(({ kind }) => kind !== \"openaiCall\")\n  .map(({ kind, description }) => `- ${description}, name: ${kind}\\n`)}\n\nand, given the below CSV file (between \\`\\`\\`), recommend the best steps by balancing existing actions and using custom openai calls (do not use deprecated models) to successfully:\n    - parse the contact information and remove any typos\n    - enrich the contacts data\n    - label them a decider and rank them as a good Sales target to sale software to based on the provided property\n    - rework the CSV file to match the provided column to the following: Name, Position, Company, Email and the ranking and decider columns\n    - save the contacts to the database\n\nReturn a JSON array made of steps to execute. When a step is a model call, provide the \"model\" for model name and \"prompt\" for the prompt with \"{data}\" as a placeholder for the provided data; When the step is an action, provide the action name.\n\n\\`\\`\\`\n${contactsFileContent}\n\\`\\`\\`\n`;\n```\n\n----------------------------------------\n\nTITLE: Creating a Cobra Command for Bubbletea Application\nDESCRIPTION: This snippet demonstrates how to create a Cobra command that will initialize and run a Bubbletea application. It shows how to create a new model, handle errors, and start the Bubbletea program.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/interactive-clis-with-bubbletea.md#2025-04-10_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc NewCmdEventBrowser() *cobra.Command {\n\tcmd := &cobra.Command{\n\t\tUse:     \"init\",\n\t\tShort:   \"Create a new event browser\",\n\t\tExample: \"inngest init\",\n\t\tRun:     runBrowser,\n\t}\n\treturn cmd\n}\n\nfunc runBrowser(cmd *cobra.Command, args []string) {\n\t// Create a new TUI model which will be rendered in Bubbletea.\n\tstate, err := NewModel()\n\tif err != nil {\n\t\tfmt.Println(fmt.Sprintf(\"Error starting init command: %s\\n\", err))\n\t\tos.Exit(1)\n\t}\n\t// tea.NewProgram starts the Bubbletea framework which will render our\n\t// application using our state.\n\tif err := tea.NewProgram(state).Start(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Card-Based Navigation for Inngest Examples\nDESCRIPTION: Implements a responsive card-based navigation interface for Inngest documentation examples, organizing related functionality into visually distinct cards with appropriate icons.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/examples/index.mdx#2025-04-10_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<CardGroup cols={2}>\n\n<Card\n  href={\"/docs/examples/ai-agents-and-rag\"}\n  icon={<Cog6ToothIcon className=\"h-6 w45 fill-carbon-700/10 stroke-carbon-700 transition-colors duration-300 group-hover:stroke-carbon-900 dark:fill-white/10 dark:stroke-carbon-400 dark:group-hover:fill-indigo-300/10 dark:group-hover:stroke-indigo-400\" />}\n  title={'AI Agents and RAG'}\n>\nUse Inngest to build AI agents and RAG.\n</Card>\n\n<Card\n  href={\"/docs/examples/email-sequence\"}\n  icon={<EnvelopeIcon fill={\"black\"} className=\"h-6 w45 fill-carbon-700/10 stroke-carbon-700 transition-colors duration-300 group-hover:stroke-carbon-900 dark:fill-white/10 dark:stroke-carbon-400 dark:group-hover:fill-indigo-300/10 dark:group-hover:stroke-indigo-400\" />}\n  title={'Email Sequence'}\n>\nBuild a dynamic drip campaign based on a user's behavior.\n</Card>\n\n<Card\n  href={\"/docs/examples/scheduling-one-off-function\"}\n  icon={<RiCalendarScheduleFill fill={\"black\"} className=\"h-6 w45 fill-carbon-700/10 stroke-carbon-700 transition-colors duration-300 group-hover:stroke-carbon-900 dark:fill-white/10 dark:stroke-carbon-400 dark:group-hover:fill-indigo-300/10 dark:group-hover:stroke-indigo-400\" />}\n  title={'Scheduling a one-off function'}\n>\nSchedule a function to run at a specific time.\n</Card>\n\n<Card\n  href={\"/docs/examples/fetch-run-status-and-output\"}\n  icon={<RiBracesFill fill={\"black\"} className=\"h-6 w45 fill-carbon-700/10 stroke-carbon-700 transition-colors duration-300 group-hover:stroke-carbon-900 dark:fill-white/10 dark:stroke-carbon-400 dark:group-hover:fill-indigo-300/10 dark:group-hover:stroke-indigo-400\" />}\n  title={'Fetch run status and output'}\n>\nGet the result of a run using an Event ID.\n</Card>\n\n<Card\n  href={\"/docs/examples/track-failures-in-datadog\"}\n  icon={<RiErrorWarningFill fill={\"black\"} className=\"h-6 w45 fill-carbon-700/10 stroke-carbon-700 transition-colors duration-300 group-hover:stroke-carbon-900 dark:fill-white/10 dark:stroke-carbon-400 dark:group-hover:fill-indigo-300/10 dark:group-hover:stroke-indigo-400\" />}\n  title={'Track all function failures in Datadog'}\n>\nSend all function failures to Datadog (or similar) for monitoring.\n</Card>\n\n</CardGroup>\n```\n\n----------------------------------------\n\nTITLE: Rendering Image with Theme Support for Inngest Documentation\nDESCRIPTION: This JSX snippet displays an image with theme support, showing an illustration of how events trigger Inngest functions. It provides different image sources for dark and light themes and includes alt text for accessibility.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/events-triggers.mdx#2025-04-10_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ImageTheme\n  dark={'/assets/docs/features/events-triggers/inngest-function-triggers-dark.jpg'}\n  light={'/assets/docs/features/events-triggers/inngest-function-triggers-light.jpg'}\n  className=\"my-0\"\n  alt={'Illustration of a demo application sending a \"user.signup\" event to the Inngest Platform which triggers two Inngest Functions: sendWelcomeEmail and importContacts.'}\n/>\n```\n\n----------------------------------------\n\nTITLE: Blocking Inngest Integration\nDESCRIPTION: Shows how to use Inngest without waitUntil for guaranteed delivery of events.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/vercel-cloudflare-wait-until.mdx#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { inngest } from \"src/inngest\";\n\nasync function POST(request) {\n  const data = await createPost(request.body)\n  await inngest.send({ name: \"post.created\", data: data })\n  return new Response(data)\n}\n```\n\n----------------------------------------\n\nTITLE: Dev Server Sync Command\nDESCRIPTION: Command to start the Inngest Dev Server and sync it with the deployed FastAPI application.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/guides/modal.mdx#2025-04-10_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx inngest-cli@latest dev -u https://test-fast-api-fastapi-app.modal.run/api/inngest --no-discovery\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata for CMD+K Quick Search Update in JavaScript\nDESCRIPTION: This snippet sets the title and date for a changelog entry about the CMD+K quick search update. It uses JavaScript export statements to define these metadata properties.\nSOURCE: https://github.com/inngest/website/blob/main/content/changelog/2025-03-24-quick-search.mdx#2025-04-10_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const title = \"CMD+K Quick Search\";\nexport const date = \"2025-03-24\";\n```\n\n----------------------------------------\n\nTITLE: Setting Up Inngest Client in Next.js (Pages Router)\nDESCRIPTION: Code to create an Inngest client and API endpoint in a Next.js Pages Router application. This enables sending events and serving Inngest functions.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/getting-started/nextjs-quick-start.mdx#2025-04-10_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { Inngest } from \"inngest\";\nimport { serve } from \"inngest/next\";\n\n// Create a client to send and receive events\nexport const inngest = new Inngest({ id: \"my-app\" });\n\n// Create an API that serves zero functions\nexport default serve({\n  client: inngest,\n  functions: [\n    /* your functions will be passed here later! */\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Waiting with Conditional Matching in JavaScript\nDESCRIPTION: Code example showing how to pause a function execution to wait for a specific event that matches a user ID. This demonstrates the dynamic creation of matching expressions at runtime that must be evaluated in the system.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/accidentally-quadratic-evaluating-trillions-of-event-matches-in-real-time.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst onboardingCompleted = await step.waitForEvent(\n      \"wait-for-onboarding-completion\",\n      {\n        event: \"app/onboarding.completed\",\n        timeout: \"3d\",\n        if: `data.userId == '${user.id}'`\n      }\n    );\n```\n\n----------------------------------------\n\nTITLE: OpenAI o1-preview Campaign\nDESCRIPTION: Marketing campaign generated by OpenAI's o1-preview model, featuring a more casual and direct tone typical of US markets.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/deepseek-r1-step-ai.mdx#2025-04-10_snippet_7\n\nLANGUAGE: txt\nCODE:\n```\n**Headline:**\n\"Push Boundaries, Not Paperwork: Effortless Global AI Deployment with Koyeb\"\n---\n**Main Copy:**\nUnlock the true potential of your AI-driven B2B solutions and take them global without the usual hassle. With Koyeb's cutting-edge serverless platform, you can deploy worldwide at lightning speed, seamlessly integrating with your existing workflows. Say farewell to the faff of infrastructure management—free up your team to focus on innovation while we handle the heavy lifting.\nExperience unparalleled scalability and performance by running your applications wherever your users are. Our edge computing advantage ensures reduced latency and a superior user experience across the globe. Keep control firmly in your hands with self-hosting capabilities, vital for sectors like FinTech, EdTech, and HealthTech, ensuring data sovereignty and compliance with regional regulations.\nBreak free from vendor lock-in with our multi-cloud flexibility. Future-proof your applications and stay ahead of the curve with solutions adaptable to evolving technologies and market needs. Optimised for AI workloads, Koyeb empowers you to create value without getting bogged down by operational complexities.\n---\n**Call to Action:**\nIt's time to cut to the chase and let your innovation know no bounds. Discover how Koyeb can accelerate your AI-driven B2B solutions, giving your business the agility and control it demands. **Experience the freedom of serverless, multi-cloud deployment today.**\n---\n**Social Media Snippets:**\n1. \"Ready to ditch the faff and deploy your AI solutions globally? With Koyeb, go serverless and scale instantly. No fuss, just innovation. #Koyeb #AI #Serverless\"\n2. \"Push boundaries, not paperwork! Effortless global deployment of your AI-driven products starts with Koyeb. Focus on what matters. #InnovationUnleashed #MultiCloud\"\n3. \"Stay ahead of the game with Koyeb's edge computing. Deliver superior user experiences worldwide—securely and swiftly. #EdgeComputing #FinTech #EdTech #HealthTech\"\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Icons for Inngest SDK Reference Page\nDESCRIPTION: Imports necessary components and icons from various locations to build the SDK reference page. This includes the ResourceGrid and Resource components from the shared Docs directory, along with TypeScript, Python, and Go icons, and the CommandLineIcon from Heroicons.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/index.mdx#2025-04-10_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ResourceGrid, Resource } from 'src/shared/Docs/Resources'\nimport TypeScriptIcon from \"src/shared/Icons/TypeScript\";\nimport PythonIcon from \"src/shared/Icons/Python\";\nimport {\n  CommandLineIcon\n} from \"@heroicons/react/24/outline\";\nimport GoIcon from \"src/shared/Icons/Go\";\n```\n\n----------------------------------------\n\nTITLE: Setting Inngest API Base URL Environment Variable\nDESCRIPTION: Configuration variable for specifying the Inngest API origin endpoint. Defaults to https://api.inngest.com/\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/overview/env-vars.mdx#2025-04-10_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nINNGEST_API_BASE_URL=https://api.inngest.com/\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Scripts in Package.json\nDESCRIPTION: Updated script configurations in package.json for running Next.js development server, building the application, and starting the production server. These scripts replace the previous Vite commands.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/migrating-from-vite-to-nextjs.mdx#2025-04-10_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n\"scripts\": {\n  \"dev\": \"next dev\",\n  \"build\": \"next build\",\n  \"start\": \"next start\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component in React\nDESCRIPTION: This code snippet imports the Callout component from a shared documentation module. The Callout component is likely used for displaying important information or notices within the documentation.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/platform/manage/apps.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Callout } from \"src/shared/Docs/mdx\";\n```\n\n----------------------------------------\n\nTITLE: Exporting Event Title in JavaScript\nDESCRIPTION: A JavaScript export statement that defines the title for the archive events documentation page.\nSOURCE: https://github.com/inngest/website/blob/main/content/changelog/2025-01-28-archive-events.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const title = \"Archive events\";\n```\n\n----------------------------------------\n\nTITLE: Advanced Middleware Lifecycle Configuration in TypeScript\nDESCRIPTION: Demonstrates how to configure lifecycle hooks and handle specific events in middleware.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/middleware/create.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nnew InngestMiddleware({\n  name: \"Example Middleware\",\n  async init() {\n    return {\n      onFunctionRun({ ctx, fn, steps }) {\n        if (ctx.event.name === \"app/user.created\") {\n          return {\n            beforeExecution() {\n              console.log(\"Function executing with user created event\");\n            },\n          };\n        }\n        return {};\n      },\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Running Inngest Website in Development Mode using pnpm\nDESCRIPTION: Command to start the Inngest website in development mode. This launches a local server that automatically rebuilds the app and refreshes the page when code changes are made.\nSOURCE: https://github.com/inngest/website/blob/main/README.md#2025-04-10_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ pnpm dev\n```\n\n----------------------------------------\n\nTITLE: Constructing API URL for Fetching Event Runs in Inngest\nDESCRIPTION: This snippet shows the URL structure for fetching all runs triggered by a specific event using the Inngest REST API. It uses the Event ID to construct the endpoint.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/examples/fetch-run-status-and-output.mdx#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhttps://api.inngest.com/v1/events/01HWAVEB858VPPX47Z65GR6P6R/runs\n```\n\n----------------------------------------\n\nTITLE: Rendering SDK Resource Grid with React Components\nDESCRIPTION: Creates a resource grid with links to different SDK implementations using the ResourceGrid and Resource components. Each resource includes an icon, name, link, and pattern configuration for consistent styling.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/index.mdx#2025-04-10_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<ResourceGrid cols={3}>\n\n<Resource resource={{\n  href: \"/docs/reference/typescript\",\n  name: \"TypeScript SDK\",\n  icon: TypeScriptIcon,\n  description: \"\",\n  pattern: 0,\n}}/>\n\n<Resource resource={{\n  href: \"/docs/reference/python\",\n  name: \"Python SDK\",\n  icon: PythonIcon,\n  description: \"\",\n  pattern: 1,\n}}/>\n\n<Resource resource={{\n  href: \"https://pkg.go.dev/github.com/inngest/inngestgo\",\n  name: \"Go SDK\",\n  icon: GoIcon,\n  description: \"\",\n  pattern: 1,\n}}/>\n\n<Resource resource={{\n  href: \"https://api-docs.inngest.com/docs/inngest-api/1j9i5603g5768-introduction\",\n  name: \"REST API\",\n  icon: CommandLineIcon,\n  description: \"\",\n  pattern: 1,\n}}/>\n</ResourceGrid>\n```\n\n----------------------------------------\n\nTITLE: Implementing User-level Concurrency Control in Inngest\nDESCRIPTION: This code demonstrates how to configure concurrency limits for each unique user in an Inngest function. By setting a limit of 1 and using a user_slug as the key, the system ensures that each user can only have one job running at a time.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/fixing-multi-tenant-queueing-concurrency-problems.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const multiTenantConcurrency = inngest.createFunction(\n  {\n    id: 'multi-tenant-concurrency',\n    concurrency: [\n      {\n        limit: 1,\n        // Add a key to apply the concurrency limit to each unique user_slug\n        key: 'event.data.user_slug',\n      },\n    ],\n  },\n  { event: 'demo/job.created' },\n  async ({ event, step }) => {\n    /* function logic omitted for example */\n    return { status: 'success' };\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Exporting Case Study Metadata in JavaScript\nDESCRIPTION: Configuration exports for a case study page, including company information, testimonial quote, and image assets. Defines the metadata used throughout the case study presentation.\nSOURCE: https://github.com/inngest/website/blob/main/pages/customers/aomni.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const title = 'Productionizing AI-driven sales flows using serverless LLMs'\nexport const companyName = 'Aomni'\nexport const logo = '/assets/customers/aomni-logo.svg'\nexport const quote = {\n  text: `For anyone who is building multi-step AI agents (such as AutoGPT type\nsystems), I highly recommend building it on top of Inngest's job queue\norchestration framework, the traceability it provides out of the box is\nsuper useful, plus you get timeouts & retries for free.`,\n  attribution: {\n    name: 'David Zhang',\n    title: 'CEO & Co-founder',\n  },\n  avatar: '/assets/customers/aomni-david.jpg',\n}\nexport const companyURL = 'https://www.aomni.com'\nexport const companyDescription = 'Actionable account intelligence for sales'\nexport const ogImage = '/assets/customers/case-study/og-image-aomni.png'\n```\n\n----------------------------------------\n\nTITLE: Running a K6 Load Test with Virtual Users via Command Line\nDESCRIPTION: Command for executing a K6 load test with 25 virtual users for a duration of 30 seconds. This command runs the specified JavaScript file and simulates concurrent users making requests to the target endpoint.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/2022-07-load-testing-event-queue.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nk6 run --vus 25 --duration 30s ./post.js\n```\n\n----------------------------------------\n\nTITLE: Exporting Ocoya Case Study Metadata in JavaScript\nDESCRIPTION: This code snippet exports various metadata for the Ocoya case study, including company information, quotes, and image paths. It defines constants for use in the case study presentation.\nSOURCE: https://github.com/inngest/website/blob/main/pages/customers/ocoya.mdx#2025-04-10_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const title = 'Shipping e-commerce imports pipelines in record time'\nexport const companyName = 'Ocoya'\nexport const logo = '/assets/customers/ocoya.svg'\nexport const quote = {\n  text: `At Ocoya, we were struggling with the complexities of managing our\nsocial media and e-commerce workflows. Thanks to Inngest, we were\nable to simplify our development process, speed up our time to\nmarket, and deliver a better customer experience. Inngest has\nbecome an essential tool in our tech stack, enabling us to focus\non delivering a world-class product to our users.`,\n  attribution: {\n    name: 'Aivaras Tumas',\n    title: 'CEO & Co-founder',\n  },\n  avatar: '/assets/customers/ocoya-aivaras-tumas.png',\n}\nexport const companyURL = 'https://www.ocoya.com'\nexport const companyDescription = 'AI Social Media Management'\nexport const ogImage = '/assets/customers/case-study/og-image-ocoya.png'\n```\n\n----------------------------------------\n\nTITLE: Legacy Function Creation Methods in TypeScript\nDESCRIPTION: Example showing the removed helper methods for creating Inngest functions in v0.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/migration.mdx#2025-04-10_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createFunction,\n  createScheduledFunction,\n  createStepFunction,\n} from \"inngest\";\n\n// ❌ Removed in v1\ninngest.createScheduledFunction(...);\ninngest.createStepFunction(...);\n```\n\n----------------------------------------\n\nTITLE: Simplifying the Root Layout by Removing Default Next.js Tags\nDESCRIPTION: Optimization of the root layout by removing meta tags that Next.js includes by default, such as charset and viewport tags, while preserving custom metadata.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/migrating-from-vite-to-nextjs.mdx#2025-04-10_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <link rel=\"icon\" type=\"image/svg+xml\" href=\"/icon.svg\" />\n        <title>My App</title>\n        <meta name=\"description\" content=\"My App is a...\">\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Robot.txt Rules for Inngest Website\nDESCRIPTION: This snippet defines the robot.txt rules for the Inngest website. It allows all user agents to access the entire site, specifies the host domain, and provides the location of the sitemap.\nSOURCE: https://github.com/inngest/website/blob/main/public/robots.txt#2025-04-10_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\n# *\nUser-agent: *\nAllow: /\n\n# Host\nHost: https://www.inngest.com\n\n# Sitemaps\nSitemap: https://www.inngest.com/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with Recommended Inngest Plugin Settings\nDESCRIPTION: JSON configuration for ESLint that adds the Inngest plugin and extends the recommended configuration.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/eslint.mdx#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@inngest\"],\n  \"extends\": [\"plugin:@inngest/recommended\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components and Icons for Inngest Documentation\nDESCRIPTION: This code snippet imports various React components and icons used throughout the Inngest documentation page. It includes custom components from the project's shared folder and icons from external libraries.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/index.mdx#2025-04-10_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { CardGroup, Card, Button } from \"src/shared/Docs/mdx\";\nimport PythonIcon from 'src/shared/Icons/Python';\nimport GoIcon from 'src/shared/Icons/Go';\nimport {\n  RiCloudLine,\n  RiNextjsFill,\n  RiNodejsFill,\n  RiGitPullRequestFill,\n  RiGuideFill,\n} from \"@remixicon/react\";\nimport InngestIcon from 'src/shared/Icons/InngestIcon';\n\nexport const hidePageSidebar = true;\n```\n\n----------------------------------------\n\nTITLE: Creating Debounce Job Queue Table in Postgres\nDESCRIPTION: SQL query to create a table for storing debounced jobs with fields for job details, scheduling, and a debounce key.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/debouncing-in-queuing-systems-optimizing-efficiency-in-async-workflows.mdx#2025-04-10_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE debounce_job_queue (\n  id SERIAL PRIMARY KEY,\n  job_type VARCHAR(64),\n  status VARCHAR(64),\n  payload JSONB,\n  scheduled_at TIMESTAMP,\n  debounce_key VARCHAR(64)\n);\n```\n\n----------------------------------------\n\nTITLE: Exporting GitBook Case Study Metadata in TypeScript\nDESCRIPTION: This snippet defines and exports various metadata properties for the GitBook case study, including company information, quotes, and image paths. It's likely used to populate a case study page or component.\nSOURCE: https://github.com/inngest/website/blob/main/pages/customers/gitbook.mdx#2025-04-10_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const title = 'Solving bi-directional data synchronization.'\nexport const companyName = 'GitBook'\nexport const logo = '/assets/customers/gitbook-logo-white.svg'\nexport const logoScale = 1;\nexport const quote = {\n  text: `We had to hack Google Cloud Tasks to achieve the same capabilities that Inngest offers out of the box, but eventually hit a roadblock achieving pure concurrency. Inngest's Developer Experience is simply incomparable. We are going to gradually migrate most features to use Inngest.`,\n  attribution: {\n    name: 'Johan Preynat',\n    title: 'Engineering Lead',\n  },\n  avatar: '/assets/customers/gitbook/johan-preynat.jpeg',\n}\nexport const companyURL = 'https://www.gitbook.com/'\nexport const companyDescription = `GitBook is a knowledge management tool for engineering teams.`\nexport const ogImage = '/assets/customers/gitbook/social-image-gitbook.png'\n```\n\n----------------------------------------\n\nTITLE: Sample K6 Load Test Output for Performance Analysis\nDESCRIPTION: Example of the detailed metrics output from a K6 load test run. Shows various performance statistics including request durations, throughput, and success rates that help analyze how the system performs under load.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/2022-07-load-testing-event-queue.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nexecution: local\n     script: ./post.js\n     output: -\n\n  scenarios: (100.00%) 1 scenario, 25 max VUs, 1m0s max duration (incl. graceful stop):\n           * default: 25 looping VUs for 30s (gracefulStop: 30s)\n\nrunning (0m30.0s), 0/25 VUs, 209441 complete and 0 interrupted iterations\ndefault ✓ [======================================] 25 VUs  30s\n\n     data_received..................: 20 MB  656 kB/s\n     data_sent......................: 169 MB 5.6 MB/s\n     http_req_blocked...............: avg=683ns    min=333ns   med=500ns    max=823.15µs p(90)=958ns   p(95)=1.25µs\n     http_req_connecting............: avg=2ns      min=0s      med=0s       max=146.12µs p(90)=0s      p(95)=0s\n     http_req_duration..............: avg=686.06µs min=68.37µs med=324.87µs max=41.93ms  p(90)=1.23ms  p(95)=2.27ms\n       { expected_response:true }...: avg=686.06µs min=68.37µs med=324.87µs max=41.93ms  p(90)=1.23ms  p(95)=2.27ms\n     http_req_failed................: 0.00%  ✓ 0          ✗ 209441\n     http_req_receiving.............: avg=10.9µs   min=2.33µs  med=8.29µs   max=9.96ms   p(90)=17.54µs p(95)=23.7µs\n     http_req_sending...............: avg=6.19µs   min=2.08µs  med=3.66µs   max=10.05ms  p(90)=6.33µs  p(95)=8.58µs\n     http_req_tls_handshaking.......: avg=0s       min=0s      med=0s       max=0s       p(90)=0s      p(95)=0s\n     http_req_waiting...............: avg=668.96µs min=63.12µs med=310.45µs max=41.9ms   p(90)=1.21ms  p(95)=2.24ms\n     http_reqs......................: 209441 6981.16637/s\n     iteration_duration.............: avg=712.69µs min=81.58µs med=349.91µs max=41.96ms  p(90)=1.26ms  p(95)=2.31ms\n     iterations.....................: 209441 6981.16637/s\n     vus............................: 25      min=25        max=25\n     vus_max........................: 25      min=25        max=25\n\nk6 run --vus 25 --duration 30s ./post.js  13.30s user 6.14s system 63% cpu 30.576 total\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in Next.js\nDESCRIPTION: Example of adding environment variables to a .env file for Next.js, specifically setting up a base path that can be accessed by both the application and the Next.js configuration.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/migrating-from-vite-to-nextjs.mdx#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n// ...\nNEXT_PUBLIC_BASE_PATH=/some-base-path\n```\n\n----------------------------------------\n\nTITLE: Using step.waitForEvent() to Wait for Events in Inngest Functions (v2)\nDESCRIPTION: Examples of using step.waitForEvent() in Inngest v2 to wait for specific events. Unlike v3, the event name is passed as the first parameter rather than as part of the options object, while maintaining similar functionality for matching and conditional logic.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/functions/step-wait-for-event.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Wait 7 days for an approval and match invoice IDs\nconst approval = await step.waitForEvent(\"app/invoice.approved\", {\n  timeout: \"7d\",\n  match: \"data.invoiceId\",\n});\n\n// Wait 30 days for a user to start a subscription\n// on the pro plan\nconst subscription = await step.waitForEvent(\"app/subscription.created\", {\n  timeout: \"30d\",\n  if: \"event.data.userId == async.data.userId && async.data.billing_plan == 'pro'\",\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Inngest SDK with yarn (TypeScript)\nDESCRIPTION: Installs the Inngest SDK using yarn package manager for TypeScript projects.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/sdk/overview.mdx#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add inngest\n```\n\n----------------------------------------\n\nTITLE: Importing UI Components for Inngest Documentation Page\nDESCRIPTION: Import statements for React components used to build the Inngest documentation page, including card components, icons from Remix icon library, and custom icon components for different programming languages.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/local-development.mdx#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CardGroup, Card, ImageTheme } from \"src/shared/Docs/mdx\";\nimport {\n  RiFunctionLine,\n  RiQuestionLine,\n  RiTerminalBoxLine,\n} from \"@remixicon/react\";\nimport InngestIcon from 'src/shared/Icons/InngestIcon';\nimport TypeScriptIcon from 'src/shared/Icons/TypeScript';\nimport PythonIcon from 'src/shared/Icons/Python';\nimport GoIcon from 'src/shared/Icons/Go';\n```\n\n----------------------------------------\n\nTITLE: Creating an Inngest Function for Background Processing in JavaScript\nDESCRIPTION: This snippet shows how to define an Inngest function that runs in the background when a specific event is received. The function performs data backfill operations for a connected source, with built-in logging and retry capabilities provided by Inngest.\nSOURCE: https://github.com/inngest/website/blob/main/pages/patterns/_patterns/keeping-your-api-fast.mdx#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { inngest } from \"./client\";\n\ninngest.createFunction(\n  { id: \"backfill-user-data\" },\n  { event: \"api/source.connected\" },\n  async ({ event }) => {\n    const source = await getSource(event.data.sourceId);\n    await backfillDataForSource(source);\n    return `Successful backfill for ${source.id} (User: ${event.data.userId})`;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Dark Mode Constants\nDESCRIPTION: Exports constants for the dark mode feature title and release date for documentation purposes.\nSOURCE: https://github.com/inngest/website/blob/main/content/changelog/2025-02-26-dark-mode.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const title = \"Dark mode\";\nexport const date = \"2025-02-26\";\n```\n\n----------------------------------------\n\nTITLE: Load Test Results for 300 Requests per Second\nDESCRIPTION: Performance metrics for an Inngest event API when handling 300 requests per second on a 1GB RAM/0.5 vCPU instance. Shows how latency increases significantly at higher throughput levels.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/2022-07-load-testing-event-queue.md#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nhttp_req_duration..............: min=6.76ms  med=91.72ms avg=83.18ms max=277.32ms p(99)=187.25ms p(99.9)=199.77ms\n     http_req_failed................: 0.00%  ✓ 0\n     http_reqs......................: 6009   299.721533/s\n```\n\n----------------------------------------\n\nTITLE: Using waitUntil for Background Operations\nDESCRIPTION: Shows how to use waitUntil to handle non-critical async operations without blocking the response.\nSOURCE: https://github.com/inngest/website/blob/main/content/blog/vercel-cloudflare-wait-until.mdx#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// ✅ GOOD: The sendMetrics function will execute in the background,\n// but not block the response from returning to the user\nasync function POST(request) {\n  const data = await createPost(request.body)\n  waitUntil(sendMetrics({ metric: 'posts.created', increment: 1 }))\n  return new Response(data)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Title and Date Constants in JavaScript\nDESCRIPTION: This snippet defines two constants: 'title' for the page title and 'date' for the publication date of the content. These are likely used for metadata or rendering purposes in a web application.\nSOURCE: https://github.com/inngest/website/blob/main/content/changelog/2025-02-11-prometheus-metrics-export.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const title = \"Prometheus metrics export integration\";\nexport const date = \"2025-02-12\";\n```\n\n----------------------------------------\n\nTITLE: Running Inngest Dev Server with Docker\nDESCRIPTION: Command to start the Inngest Dev Server using Docker. The server connects to the local FastAPI application endpoint through host.docker.internal.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/getting-started/python-quick-start.mdx#2025-04-10_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -p 8288:8288 inngest/inngest \\\n  inngest dev -u http://host.docker.internal:8000/api/inngest --no-discovery\n```\n\n----------------------------------------\n\nTITLE: Defining Event Title and Date in JavaScript\nDESCRIPTION: This code snippet exports constants for the title and date of the new event announcement. It sets the title for the new 'inngest/function.cancelled' event and specifies the announcement date.\nSOURCE: https://github.com/inngest/website/blob/main/content/changelog/2024-11-25-function-cancelled-event.mdx#2025-04-10_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const title = \"New inngest/function.cancelled event\";\nexport const date = \"2024-11-25\";\n```\n\n----------------------------------------\n\nTITLE: Setting Inngest Environment Branch Variable\nDESCRIPTION: Specifies which branch environment to use for sending and receiving events. Can be overridden in the Inngest client configuration.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/overview/env-vars.mdx#2025-04-10_snippet_2\n\nLANGUAGE: env\nCODE:\n```\nINNGEST_ENV=branch-name\n```\n\n----------------------------------------\n\nTITLE: Scheduling Reminders with Cancellation in Go\nDESCRIPTION: This Go code defines an Inngest function for scheduling reminders with the ability to cancel based on a deletion event. It uses the 'Cancel' option to specify the cancellation event and conditions.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/features/inngest-functions/cancellation/cancel-on-events.mdx#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"github.com/inngest/inngestgo\"\n\t\"github.com/inngest/inngestgo/step\"\n)\n\nfunc main() {\n\tf := inngestgo.CreateFunction(\n\t\tinngestgo.FunctionOpts{\n\t\t\tID:   \"schedule-reminder\",\n\t\t\tName: \"Schedule reminder\",\n\t\t\tCancel: []inngestgo.Cancel{\n\t\t\t\t{\n\t\t\t\t\tEvent: \"tasks/reminder.deleted\",\n\t\t\t\t\tIfExp: \"event.data.id == async.data.id\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t// Run on every tasks/reminder.created event.\n\t\tinngestgo.EventTrigger(\"tasks/reminder.created\", nil),\n\t\tScheduleReminder,\n\t)\n}\n\nfunc ScheduleReminder(ctx context.Context, input inngestgo.Input[ScheduleReminderEvent]) (any, error) {\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Environment Variables for Inngest Website with Vercel CLI\nDESCRIPTION: Commands for managing environment variables using the Vercel CLI. This includes pulling the latest development environment variables, adding new variables, and removing existing ones.\nSOURCE: https://github.com/inngest/website/blob/main/README.md#2025-04-10_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# Download the latest development environment variables\n$ pnpm env:pull\n\n# Add a new environment variable\n$ pnpm env:add\n\n# Remove an environment variable\n$ pnpm env:rm\n```\n\n----------------------------------------\n\nTITLE: Setting Inngest Signing Key Fallback Environment Variable\nDESCRIPTION: Configures a fallback signing key for key rotation scenarios. Available in version 0.3.9 and above.\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/reference/python/overview/env-vars.mdx#2025-04-10_snippet_6\n\nLANGUAGE: env\nCODE:\n```\nINNGEST_SIGNING_KEY_FALLBACK=your-fallback-signing-key\n```\n\n----------------------------------------\n\nTITLE: Complete Multi-Step Function with Conditional Execution in TypeScript\nDESCRIPTION: A full example of a multi-step function that sends a welcome email, waits for a user to create a post for up to 24 hours, and conditionally sends a reminder email if no post was created, using step.run() and step.waitForEvent().\nSOURCE: https://github.com/inngest/website/blob/main/pages/docs/guides/multi-step-functions.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default inngest.createFunction(\n  { id: \"activation-email\" },\n  { event: \"app/user.created\" },\n  async ({ event, step }) => {\n    await step.run(\"send-welcome-email\", async () => {\n      return await sendEmail({ email: event.user.email, template: \"welcome\" });\n    });\n\n    // Wait for an \"app/post.created\" event\n    const postCreated = await step.waitForEvent(\"wait-for-post-creation\", {\n      event: \"app/post.created\",\n      match: \"data.user.id\", // the field \"data.user.id\" must match\n      timeout: \"24h\", // wait at most 24 hours\n    });\n\n    if (!postCreated) {\n      // If no post was created, send a reminder email\n      await step.run(\"send-reminder-email\", async () => {\n        return await sendEmail({\n          email: event.user.email,\n          template: \"reminder\",\n        });\n      });\n    }\n  }\n);\n```"
  }
]