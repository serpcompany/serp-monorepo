[
  {
    "owner": "radix-ng",
    "repo": "primitives",
    "content": "TITLE: Basic Alert Dialog Implementation in React\nDESCRIPTION: A complete example of implementing an Alert Dialog with all its essential components. This demonstrates the standard structure with a trigger button, modal content containing title, description, and action buttons for confirming or canceling the action.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/alert-dialog/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default () => (\n  <AlertDialog.Root>\n    <AlertDialog.Trigger asChild>\n      <button className=\"Button violet\">Delete account</button>\n    </AlertDialog.Trigger>\n    <AlertDialog.Portal>\n      <AlertDialog.Overlay className=\"AlertDialogOverlay\" />\n      <AlertDialog.Content className=\"AlertDialogContent\">\n        <AlertDialog.Title className=\"AlertDialogTitle\">Are you absolutely sure?</AlertDialog.Title>\n        <AlertDialog.Description className=\"AlertDialogDescription\">\n          This action cannot be undone. This will permanently delete your account and remove your\n          data from our servers.\n        </AlertDialog.Description>\n        <div style={{ display: 'flex', gap: 25, justifyContent: 'flex-end' }}>\n          <AlertDialog.Cancel asChild>\n            <button className=\"Button mauve\">Cancel</button>\n          </AlertDialog.Cancel>\n          <AlertDialog.Action asChild>\n            <button className=\"Button red\">Yes, delete account</button>\n          </AlertDialog.Action>\n        </div>\n      </AlertDialog.Content>\n    </AlertDialog.Portal>\n  </AlertDialog.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Checkbox Structure in Angular with Radix NG\nDESCRIPTION: Demonstrates the basic HTML structure for implementing a Checkbox component using Radix NG primitives in Angular. Shows the relationship between the root element, indicator, and input elements.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/primitives/components/checkbox.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button rdxCheckboxRoot [(checked)]=\"checked\">\n  <lucide-angular rdxCheckboxIndicator name=\"check\" />\n  <input rdxCheckboxInput type=\"checkbox\" />\n</button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation Menu Structure in HTML\nDESCRIPTION: Basic structure of the navigation menu component showing the root nav element, list, items, trigger, content, indicator and viewport elements.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/navigation-menu/stories/navigation-menu.docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<nav rdxNavigationMenu>\n  <ul rdxNavigationMenuList>\n    <li rdxNavigationMenuItem value=\"item1\">\n      <button rdxNavigationMenuTrigger>Item 1</button>\n\n      <!-- Content as structural directive -->\n      <div *rdxNavigationMenuContent class=\"NavigationMenuContent\">\n        <!-- Content for Item 1 -->\n      </div>\n    </li>\n\n    <li rdxNavigationMenuItem value=\"item2\">\n      <a rdxNavigationMenuLink href=\"#\">Item 2</a>\n    </li>\n\n    <!-- Indicator for highlighting active item -->\n    <div rdxNavigationMenuIndicator></div>\n  </ul>\n\n  <!-- Viewport for content display -->\n  <div rdxNavigationMenuViewport></div>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Label Component\nDESCRIPTION: Angular component implementation showing how to import and use the Radix Label primitive with basic structure\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/primitives/overview/getting-started.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from '@angular/core';\nimport { bootstrapApplication } from '@angular/platform-browser';\n\nimport 'zone.js';\n\nimport { RdxLabelRootDirective } from '@radix-ng/primitives/label';\n\n@Component({\n    selector: 'app-root',\n    standalone: true,\n    imports: [RdxLabelRootDirective],\n    template: `\n        <h1>Hello from {{ name }}!</h1>\n        <a target=\"_blank\" href=\"https://angular.dev/overview\">Learn more about Angular</a>\n        <div>\n            <label LabelRoot htmlFor=\"uniqId\">First Name</label>\n            <input type=\"text\" class=\"Input\" id=\"uniqId\" />\n        </div>\n    `\n})\nexport class App {\n    name = 'Angular';\n}\n\nbootstrapApplication(App);\n```\n\n----------------------------------------\n\nTITLE: Accordion Component Structure in HTML\nDESCRIPTION: Demonstrates the basic HTML structure for implementing the Accordion component, showing the proper nesting of directives for root, item, header, trigger, and content elements.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/accordion/stories/accordion.docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div rdxAccordionRoot>\n  <div rdxAccordionItem>\n    <div rdxAccordionHeader>\n      <button rdxAccordionTrigger></button>\n    </div>\n    <div rdxAccordionContent></div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Menubar Structure in Angular\nDESCRIPTION: Demonstrates the basic HTML structure for creating a menubar with nested submenus. Shows implementation of root menu, triggers, content templates, and menu items with separators.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/menubar/stories/menubar.docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div rdxMenuBarRoot>\n    <div\n        rdxMenuBarItem\n        rdxMenuBarTrigger\n        [menuTriggerFor]=\"file\"\n    >\n        File\n    </div>\n</div>\n\n<ng-template #file>\n    <div rdxMenuBarContent>\n        <div rdxMenuBarItem>New Tab</div>\n        <div rdxMenubarSeparator></div>\n        <div rdxMenuBarItem rdxMenuBarTrigger [menuTriggerFor]=\"share\">\n            Share\n        </div>\n        <div rdxMenubarSeparator></div>\n        <div rdxMenuBarItem>Print…</div>\n    </div>\n</ng-template>\n\n<ng-template #share>\n    <div rdxMenuBarContent>\n        <div rdxMenuBarItem>Undo</div>\n        <div rdxMenuBarItem>Redo</div>\n        <div rdxMenubarSeparator></div>\n        <div rdxMenuBarItem>Cut</div>\n        <div rdxMenuBarItem>Copy</div>\n        <div rdxMenuBarItem>Paste</div>\n    </div>\n</ng-template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dialog Component Structure in HTML\nDESCRIPTION: This snippet demonstrates the basic structure of the Dialog component using HTML and Angular directives. It includes a trigger button, dialog content, title, description, close button, and dismiss button.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/dialog/stories/dialog.docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button [rdxDialogTrigger]=\"dialog\">Open Dialog</button>\n\n<ng-template #dialog>\n    <div rdxDialogContent>\n        <h2 rdxDialogTitle></h2>\n        <p rdxDialogDescription></p>\n        <button rdxDialogClose></button>\n        <button rdxDialogDismiss>X</button>\n    </div>\n</ng-template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Popover Structure with HTML\nDESCRIPTION: Basic HTML structure showing how to compose a Popover component with various directives including root, trigger, content, close button and arrow.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/popover/stories/popover.docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<ng-container rdxPopoverRoot>\n    <button class=\"IconButton\" rdxPopoverTrigger>+</button>\n\n    <ng-template rdxPopoverContent>\n        <div class=\"PopoverContent\" rdxPopoverContentAttributes>\n            <button class=\"PopoverClose\" rdxPopoverClose aria-label=\"Close\">X</button>\n            Popover Content\n            <div class=\"PopoverArrow\" rdxPopoverArrow></div>\n        </div>\n    </ng-template>\n</ng-container>\n```\n\n----------------------------------------\n\nTITLE: Controlled Alert Dialog with State Management in React\nDESCRIPTION: Example of a controlled Alert Dialog component where the open state is managed by the parent component. This allows for programmatic control of the dialog's visibility through React state, demonstrating more advanced usage patterns.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/alert-dialog/README.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport * as AlertDialog from '@radix-ng/primitives/alert-dialog';\n\nexport default () => {\n  const [open, setOpen] = useState(false);\n  return (\n    <AlertDialog.Root open={open} onOpenChange={setOpen}>\n      <AlertDialog.Trigger />\n      <AlertDialog.Portal>\n        <AlertDialog.Overlay />\n        <AlertDialog.Content>\n          <AlertDialog.Title />\n          <AlertDialog.Description />\n          <AlertDialog.Cancel />\n          <AlertDialog.Action />\n        </AlertDialog.Content>\n      </AlertDialog.Portal>\n    </AlertDialog.Root>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Accordion Component in Angular HTML Template\nDESCRIPTION: Demonstrates how to use the Accordion components in an Angular HTML template with a simple example showing a single accordion item.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/shadcn-docs/src/content/components/accordion/index.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<shAccordion>\n  <shAccordionItem value=\"item-1\">\n    <shAccordionTrigger>Is it accessible?</shAccordionTrigger>\n    <div shAccordionContent>Yes. It adheres to the WAI-ARIA design pattern.</div>\n  </shAccordionItem>\n</shAccordion>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Slider Structure in HTML\nDESCRIPTION: Basic HTML structure for the slider component showing the hierarchy of elements including the root slider, track, range, and thumb components.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/primitives/components/slider.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<rdx-slider>\n    <rdx-slider-track>\n        <rdx-slider-range />\n    </rdx-slider-track>\n    <rdx-slider-thumb />\n</rdx-slider>\n```\n\n----------------------------------------\n\nTITLE: Opening a Dialog with RdxDialogService\nDESCRIPTION: Demonstrates how to inject and use the RdxDialogService to open a dialog with a specified component.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/primitives/components/dialog.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({...})\nexport class AppComponent {\n    #dialog = inject(RdxDialogService);\n\n    openDialog() {\n        const dialogRef = this.#dialog.open({\n            content: MyDialogContentComponent,\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Tabs Component Structure in HTML\nDESCRIPTION: Demonstrates the basic HTML structure and hierarchy for implementing tabs using Radix NG directives, showing the relationship between root, list, triggers, and content elements.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/tabs/stories/tabs.docs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div rdxTabsRoot>\n    <div rdxTabsList>\n        <button rdxTabsTrigger></button>\n        <button rdxTabsTrigger></button>\n        <button rdxTabsTrigger></button>\n    </div>\n    <div rdxTabsContent></div>\n    <div rdxTabsContent></div>\n    <div rdxTabsContent></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Switch Implementation\nDESCRIPTION: Demonstrates basic usage of the Switch component with a label and thumb element.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/switch/stories/switch.docs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<label rdxLabel htmlFor=\"airplane-mode\">Airplane mode</label>\n<button id=\"airplane-mode\" rdxSwitchRoot [(checked)]=\"checked\">\n  <span rdxSwitchThumb></span>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dialog Component with Data and Reference Injection\nDESCRIPTION: Demonstrates how to create a dialog component that receives injected data and manages its own closing with typed return values.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/primitives/components/dialog.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n  selector: 'app-custom-dialog'\n})\nexport class AppCustomDialogComponent {\n\n  readonly data = injectDialogData<{ name: string; username?: string }>();\n\n  readonly ref = injectDialogRef<boolean>();\n\n  close(): void {\n    this.ref.close(true);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Stepper Structure in HTML\nDESCRIPTION: Demonstrates the basic anatomy of the Stepper component showing the proper nesting of stepper elements including root, item, separator, trigger, indicator, title and description elements.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/stepper/stories/stepper.docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div rdxStepperRoot >\n    <div rdxStepperItem >\n        <div rdxStepperSeparator></div>\n        <button rdxStepperTrigger>\n            <div rdxStepperIndicator></div>\n        </button>\n\n        <h4 rdxStepperTitle></h4>\n        <p rdxStepperDescription></p>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Radix-NG and Supporting Dependencies\nDESCRIPTION: Installs the required packages for using Radix-NG primitives with Angular. This includes the shadcn component library and utility packages for styling and class management.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/shadcn-docs/src/content/getting-started/installation/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ng/shadcn @tailwindcss/typography tailwind-merge class-variance-authority clsx\n```\n\n----------------------------------------\n\nTITLE: Implementing Toggle Group Component in HTML\nDESCRIPTION: Demonstrates the HTML structure for implementing a Toggle Group component with text alignment buttons using Lucide icons. Shows how to use the rdxToggleGroup and rdxToggleGroupItem directives with proper ARIA labels.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/toggle-group/stories/toggle-group.docs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"ToggleGroup\" rdxToggleGroup value=\"center\" aria-label=\"Text alignment\">\n  <button class=\"ToggleGroupItem\" rdxToggleGroupItem value=\"left\" aria-label=\"Left aligned\">\n    <lucide-icon name=\"align-left\" size=\"16\"></lucide-icon>\n  </button>\n  <button class=\"ToggleGroupItem\" rdxToggleGroupItem value=\"center\" aria-label=\"Center aligned\">\n    <lucide-icon name=\"align-center\" size=\"16\"></lucide-icon>\n  </button>\n  <button class=\"ToggleGroupItem\" rdxToggleGroupItem value=\"right\" aria-label=\"Right aligned\">\n    <lucide-icon name=\"align-right\" size=\"16\"></lucide-icon>\n  </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Avatar Component Structure in HTML\nDESCRIPTION: This snippet shows the basic HTML structure of the Avatar component. It includes the root element, an image element with the rdxAvatarImage directive, and a fallback element with text content.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/avatar/stories/avatar.docs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<span rdxAvatarRoot>\n  <img rdxAvatarImage src=\"...\" alt=\"...\" />\n  <span rdxAvatarFallback>Angular</span>\n</span>\n```\n\n----------------------------------------\n\nTITLE: Implementing Radix Theme in Angular Root Component\nDESCRIPTION: Example of implementing the Radix Theme directive in an Angular root component with theme configuration options\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/themes/overview/getting-started.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from '@angular/core';\nimport { bootstrapApplication } from '@angular/platform-browser';\nimport 'zone.js';\nimport { RdxThemeDirective } from '@radix-ng/components/theme';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [RdxThemeDirective],\n  template: `\n    <div rdxTheme data-accent-color=\"indigo\"\n                  data-radius=\"medium\"\n                  data-scaling=\"100%\">\n        <h1>Hello from {{ name }}!</h1>\n        <a target=\"_blank\" href=\"https://angular.dev/overview\">Learn more about Angular</a>\n    </div>\n  `\n})\nexport class App {\n  name = 'Angular';\n}\n\nbootstrapApplication(App);\n```\n\n----------------------------------------\n\nTITLE: Importing Alert Dialog Components in React\nDESCRIPTION: Example of importing all necessary Alert Dialog components from the Radix NG primitives package. This shows the modular component structure of the Alert Dialog, including Root, Trigger, Portal, Overlay, Content, Title, Description, Action, and Cancel components.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/alert-dialog/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as AlertDialog from '@radix-ng/primitives/alert-dialog';\n```\n\n----------------------------------------\n\nTITLE: Radio Group HTML Structure\nDESCRIPTION: Demonstrates the basic HTML structure for implementing a Radio Group with root, item, and indicator elements using directives.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/radio/stories/radio.docs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div rdxRadioRoot>\n  <button rdxRadioItem value=\"default\">\n    <div rdxRadioIndicator></div>\n  </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Extending RadixNG Label Primitive with Angular Component\nDESCRIPTION: This example demonstrates how to extend the RadixNG Label primitive using an Angular component with hostDirectives.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/primitives/overview/styling.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from '@angular/core';\nimport { RdxLabelDirective } from '@radix-ng/primitives/label';\n\n@Component({\n    hostDirectives: [RdxLabelDirective],\n    selector: 'my-label',\n    standalone: true,\n    template: `\n        <ng-content />\n    `\n})\nexport class MyLabelDirective {}\n```\n\n----------------------------------------\n\nTITLE: Basic Pagination Component Structure\nDESCRIPTION: Basic anatomy of the pagination component showing the root, list, and navigation elements\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/pagination/stories/pagination.docs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div rdxPaginationRoot>\n    <div rdxPaginationList #list=\"rdxPaginationList\">\n        <button rdxPaginationFirst></button>\n        <button rdxPaginationPrev></button>\n\n        @for (item of list.transformedRange(); track item) {\n            <button rdxPaginationListItem [value]=\"item.value\">{{ item.value }}</button>\n        }\n\n        <button rdxPaginationNext></button>\n        <button rdxPaginationLast></button>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Select Component Structure\nDESCRIPTION: Basic HTML structure showing the anatomy of the Select component with root, content, and item elements.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/select/stories/select.docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div rdxSelectRoot>\n    <div rdxSelectContent>\n        <div rdxSelectItem></div>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Roving Focus Group Structure in Angular HTML\nDESCRIPTION: Demonstrates the basic structure for implementing roving focus in Angular using rdxRovingFocusGroup and rdxRovingFocusItem directives. The example shows how to create a group of focusable buttons that can be navigated through keyboard interactions.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/roving-focus/stories/roving-focus.docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div rdxRovingFocusGroup>\n    <button rdxRovingFocusItem></button>\n    <button rdxRovingFocusItem></button>\n    <button rdxRovingFocusItem></button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Dropdown Menu Template Structure\nDESCRIPTION: Demonstrates the basic HTML structure for creating a dropdown menu with a trigger button and menu items.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/shadcn-docs/src/content/components/dropdown-menu/index.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button [rdxDropdownMenuTrigger]=\"menu\" shButton variant=\"outline\">Open</button>\n\n<ng-template #menu>\n  <shDropdownMenuContent>\n    <shDropdownMenuLabel>My Account</shDropdownMenuLabel>\n    <shDropdownMenuSeparator />\n    <shDropdownMenuItem>Profile</shDropdownMenuItem>\n    <shDropdownMenuItem>Billing</shDropdownMenuItem>\n    <shDropdownMenuItem>Keyboard shortcuts</shDropdownMenuItem>\n  </shDropdownMenuContent>\n</ng-template>\n```\n\n----------------------------------------\n\nTITLE: Defining Select Component Structure in HTML\nDESCRIPTION: The HTML structure defining the anatomy of the Select component using Radix UI's directives. It shows the basic nesting structure with rdxSelectRoot as the container, rdxSelectContent for the dropdown area, and rdxSelectItem for individual options.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/primitives/components/select.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div rdxSelectRoot>\n    <div rdxSelectContent>\n        <div rdxSelectItem></div>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Tooltip Component Structure\nDESCRIPTION: Basic HTML structure showing the anatomy of a Tooltip component with all possible elements including root, trigger, content, close button and arrow.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/tooltip/stories/tooltip.docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<ng-container rdxTooltipRoot>\n    <button class=\"IconButton\" rdxTooltipTrigger>+</button>\n\n    <ng-template rdxTooltipContent>\n        <div class=\"TooltipContent\" rdxTooltipContentAttributes>\n            <button class=\"TooltipClose\" rdxTooltipClose aria-label=\"Close\">X</button>\n            Tooltip Content\n            <div class=\"TooltipArrow\" rdxTooltipArrow></div>\n        </div>\n    </ng-template>\n</ng-container>\n```\n\n----------------------------------------\n\nTITLE: Using Label Component in HTML\nDESCRIPTION: Demonstrates the basic usage of the rdxLabel directive with the native HTML label element. The example shows how to associate a label with a form control using the htmlFor attribute.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/primitives/components/label.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<label rdxLabel htmlFor=\"firstName\">First Name</label>\n```\n\n----------------------------------------\n\nTITLE: Uncontrolled Alert Dialog with React\nDESCRIPTION: Example of implementing an uncontrolled Alert Dialog component where the dialog's open state is managed internally by the component. This demonstrates the simplest usage pattern where the component handles its own state.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/alert-dialog/README.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as AlertDialog from '@radix-ng/primitives/alert-dialog';\n\nexport default () => (\n  <AlertDialog.Root>\n    <AlertDialog.Trigger />\n    <AlertDialog.Portal>\n      <AlertDialog.Overlay />\n      <AlertDialog.Content>\n        <AlertDialog.Title />\n        <AlertDialog.Description />\n        <AlertDialog.Cancel />\n        <AlertDialog.Action />\n      </AlertDialog.Content>\n    </AlertDialog.Portal>\n  </AlertDialog.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Switch Implementation with Input\nDESCRIPTION: Shows how to implement the Switch component with an additional input element for enhanced functionality.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/switch/stories/switch.docs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<label rdxLabel htmlFor=\"airplane-mode\">Airplane mode</label>\n<button id=\"airplane-mode\" rdxSwitchRoot [(checked)]=\"checked\">\n  <input rdxSwitchInput />\n  <span rdxSwitchThumb></span>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Basic Collapsible Component Implementation in React\nDESCRIPTION: A basic example of implementing a Collapsible component with trigger and content in React using Radix UI. This shows the core structure with open state management.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/collapsible/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport * as Collapsible from '@radix-ui/react-collapsible';\n\nexport default () => {\n  const [open, setOpen] = useState(false);\n  return (\n    <Collapsible.Root\n      className=\"CollapsibleRoot\"\n      open={open}\n      onOpenChange={setOpen}\n    >\n      <div\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'space-between'\n        }}\n      >\n        <span className=\"Text\" style={{ color: 'white' }}>\n          @peduarte starred 3 repositories\n        </span>\n        <Collapsible.Trigger asChild>\n          <button className=\"IconButton\">{open ? 'X' : 'Y'}</button>\n        </Collapsible.Trigger>\n      </div>\n\n      <div className=\"Repository\">\n        <span className=\"Text\">@radix-ui/primitives</span>\n      </div>\n\n      <Collapsible.Content>\n        <div className=\"Repository\">\n          <span className=\"Text\">@radix-ui/colors</span>\n        </div>\n        <div className=\"Repository\">\n          <span className=\"Text\">@stitches/react</span>\n        </div>\n      </Collapsible.Content>\n    </Collapsible.Root>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Toggle Button Implementation\nDESCRIPTION: Demonstrates the basic HTML structure for implementing a toggle button with an icon.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/toggle/stories/toggle.docs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button rdxToggle aria-label=\"Toggle italic\">\n  <icon />\n</button>\n```\n\n----------------------------------------\n\nTITLE: Importing Accordion Directives in TypeScript\nDESCRIPTION: Shows how to import all the necessary directives from the Radix-NG primitives library to implement an Accordion component in an Angular application.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/accordion/stories/accordion.docs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  RdxAccordionRootDirective,\n  RdxAccordionItemDirective,\n  RdxAccordionHeaderDirective,\n  RdxAccordionTriggerDirective,\n  RdxAccordionContentDirective\n} from '@radix-ng/primitives/accordion';\n```\n\n----------------------------------------\n\nTITLE: Configuring Dialog Provider in Application Configuration\nDESCRIPTION: Sets up the initial dialog configuration using provideRdxDialogConfig during application startup.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/primitives/components/dialog.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApplicationConfig } from '@angular/core';\nimport { provideRdxDialogConfig } from '@radix-ng/primitives/dialog';\n\nexport const appConfig: ApplicationConfig = {\n    providers: [\n        provideRdxDialogConfig()\n    ]\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Hover Card Component Anatomy in HTML\nDESCRIPTION: Demonstrates the structure of a Hover Card component using Radix-ng directives.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/hover-card/stories/hover-card.docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<ng-container rdxHoverCardRoot>\n    <button class=\"IconButton\" rdxHoverCardTrigger>+</button>\n\n    <ng-template rdxHoverCardContent>\n        <div class=\"HoverCardContent\" rdxHoverCardContentAttributes>\n            <button class=\"HoverCardClose\" rdxHoverCardClose aria-label=\"Close\">X</button>\n            Hover Card Content\n            <div class=\"HoverCardArrow\" rdxHoverCardArrow></div>\n        </div>\n    </ng-template>\n</ng-container>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS for Accordion Animations\nDESCRIPTION: Updates tailwind.config.js to include necessary keyframes and animations for the accordion component's expand and collapse transitions.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/shadcn-docs/src/content/components/accordion/index.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  theme: {\n    extend: {\n      keyframes: {\n        'accordion-down': {\n          from: { height: '0' },\n          to: { height: 'var(--radix-accordion-content-height)' }\n        },\n        'accordion-up': {\n          from: { height: 'var(--radix-accordion-content-height)' },\n          to: { height: '0' }\n        }\n      },\n      animation: {\n        'accordion-down': 'accordion-down 0.2s ease-out',\n        'accordion-up': 'accordion-up 0.2s ease-out'\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Switch Component Structure in HTML\nDESCRIPTION: The basic HTML structure for implementing a Switch component. It consists of a button element with the rdxSwitchRoot directive, containing an input with rdxSwitchInput directive and a span with rdxSwitchThumb directive.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/primitives/components/switch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button rdxSwitchRoot>\n    <input rdxSwitchInput />\n    <span rdxSwitchThumb></span>\n</button>\n```\n\n----------------------------------------\n\nTITLE: Link Button Component Demo\nDESCRIPTION: Implementation example of a link style button\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/shadcn-docs/src/content/components/button/index.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{{ NgDocActions.demo(\"ButtonExampleLinkComponent\", { expanded: false}) }}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Avatar Component in Angular with Radix UI\nDESCRIPTION: This example demonstrates how to implement a basic avatar component using Radix UI Angular primitives. It shows the structure with avatar root, image, and fallback elements.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/avatar/README.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<avatar.Root>\n  <avatar.Image\n    src=\"https://github.com/radix-ui.png\"\n    alt=\"Radix UI\"\n  />\n  <avatar.Fallback>UI</avatar.Fallback>\n</avatar.Root>\n```\n\n----------------------------------------\n\nTITLE: Importing Dropdown Menu Components\nDESCRIPTION: Shows the necessary imports for using Radix NG dropdown menu components and Shadcn button directive.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/shadcn-docs/src/content/components/dropdown-menu/index.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RdxDropdownMenuTriggerDirective } from '@radix-ng/primitives/dropdown-menu';\nimport { ShButtonDirective } from '@radix-ng/shadcn/button';\nimport {\n  ShDropdownMenuContentComponent,\n  ShDropdownMenuGroupComponent,\n  ShDropdownMenuItemComponent,\n  ShDropdownMenuLabelComponent,\n  ShDropdownMenuSeparatorComponent,\n  ShDropdownMenuShortcutComponent\n} from '@radix-ng/shadcn/dropdown-menu';\n```\n\n----------------------------------------\n\nTITLE: Outline Button Component Demo\nDESCRIPTION: Implementation example of an outline style button\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/shadcn-docs/src/content/components/button/index.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{{ NgDocActions.demo(\"ButtonExampleOutlineComponent\", { expanded: false}) }}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Slider Structure in HTML\nDESCRIPTION: Demonstrates the basic structure and composition of the Slider component using nested elements including track, range and thumb components.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/slider/stories/slider.docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<rdx-slider>\n    <rdx-slider-track >\n        <rdx-slider-range />\n    </rdx-slider-track>\n    <rdx-slider-thumb />\n</rdx-slider>\n```\n\n----------------------------------------\n\nTITLE: Implementing Collapsible Component Structure HTML\nDESCRIPTION: Basic HTML structure for the Collapsible component showing the root container, trigger button, and content area using Radix-NG directives.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/collapsible/stories/collapsible.docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div rdxCollapsibleRoot>\n  <button rdxCollapsibleTrigger>Trigger</button>\n  <div rdxCollapsibleContent>Content</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Providing Dialog Service in Component\nDESCRIPTION: Sets up the Dialog service in a component using provideRdxDialog in the component providers array.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/primitives/components/dialog.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { provideRdxDialog } from '@radix-ng/primitives/dialog';\n\n@Component({\n  selector: 'app-dialog-component',\n  providers: [provideRdxDialog()]\n})\nexport class AppDialogComponent {}\n```\n\n----------------------------------------\n\nTITLE: Toggle Component HTML Structure\nDESCRIPTION: The basic HTML structure for implementing the Toggle component using the rdxToggle directive. It shows how to create a toggle button with an icon and proper ARIA labeling.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/primitives/components/toggle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button rdxToggle aria-label=\"Toggle italic\">\n  <icon />\n</button>\n```\n\n----------------------------------------\n\nTITLE: Basic Navigation Menu Styling in CSS\nDESCRIPTION: Essential CSS styles for the navigation menu components including positioning, layout, and state-based styling.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/navigation-menu/stories/navigation-menu.docs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n/* Basic styling example */\n.NavigationMenuRoot {\n  position: relative;\n}\n\n.NavigationMenuList {\n  display: flex;\n  list-style: none;\n}\n\n.NavigationMenuTrigger,\n.NavigationMenuLink {\n  padding: 8px 12px;\n  color: var(--primary);\n  text-decoration: none;\n}\n\n.NavigationMenuTrigger[data-state=\"open\"] {\n  background-color: var(--primary-light);\n}\n\n.NavigationMenuContent {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  animation-duration: 250ms;\n  animation-timing-function: ease;\n}\n\n.NavigationMenuIndicator {\n  transition: transform 250ms ease;\n}\n\n.NavigationMenuViewport {\n  position: relative;\n  transform-origin: top center;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Radix Theme in Angular with rdxTheme Directive\nDESCRIPTION: This snippet demonstrates how to apply the rdxTheme directive to a div element, configuring various theme properties including appearance, accent color, gray color, panel background, radius, and scaling. The directive applies these theme settings to all content within the container.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/components/theme/README.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div rdxTheme appearance=\"dark\" accentColor=\"blue\" grayColor=\"gray\" panelBackground=\"white\" radius=\"small\" scaling=\"medium\">\n  <!-- Your content here -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Breadcrumb Components for Standalone Usage\nDESCRIPTION: Shows how to import individual breadcrumb components and directives for standalone component usage in Angular.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/shadcn-docs/src/content/components/breadcrumb/index.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  ShBreadcrumbDirective,\n  ShBreadcrumbEllipsisComponent,\n  ShBreadcrumbItemDirective,\n  ShBreadcrumbLinkDirective,\n  ShBreadcrumbListDirective,\n  ShBreadcrumbPageDirective,\n  ShBreadcrumbSeparatorComponent\n} from '@radix-ng/shadcn/breadcrumb';\n```\n\n----------------------------------------\n\nTITLE: Installing Radix Primitives Dependencies\nDESCRIPTION: Command to install required packages for using Radix Primitives with Angular\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/primitives/overview/getting-started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ng/primitives @angular/cdk\n```\n\n----------------------------------------\n\nTITLE: Importing Toggle Group Directives in TypeScript\nDESCRIPTION: Shows how to import the necessary directives from the Radix NG primitives library to implement a toggle group component.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/primitives/components/toggle-group.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  RdxToggleGroupDirective,\n  RdxToggleGroupItemDirective\n} from '@radix-ng/primitives/toggle-group';\n```\n\n----------------------------------------\n\nTITLE: Implementing Radix Label Component in Angular\nDESCRIPTION: Example of a standalone Angular component implementing the Radix Label directive. Shows how to import and use the RdxLabelDirective with a form input.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/storybook-radix/docs/overview/installation.docs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from '@angular/core';\nimport { bootstrapApplication } from '@angular/platform-browser';\nimport 'zone.js';\nimport { RdxLabelDirective } from '@radix-ng/primitives/label';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [RdxLabelDirective],\n  template: `\n    <h1>Hello from {{ name }}!</h1>\n    <a target=\"_blank\" href=\"https://angular.dev/overview\">Learn more about Angular</a>\n    <div>\n      <label rdxLabel htmlFor=\"uniqId\">First Name</label>\n      <input class=\"Input\" id=\"uniqId\" type=\"text\" />\n    </div>\n  `\n})\nexport class App {\n  name = 'Angular';\n}\n\nbootstrapApplication(App);\n```\n\n----------------------------------------\n\nTITLE: Importing Breadcrumb Module in NgModule\nDESCRIPTION: Shows how to import the Breadcrumb module into an Angular application using the NgModule approach.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/shadcn-docs/src/content/components/breadcrumb/index.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ShBreadcrumbModule } from '@radix-ng/shadcn/breadcrumb';\n```\n\n----------------------------------------\n\nTITLE: Checkbox Component Structure in HTML\nDESCRIPTION: This snippet demonstrates the basic structure of a Checkbox component using Radix NG directives. It includes the root element, indicator, and input.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/checkbox/stories/checkbox.docs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button rdxCheckboxRoot [(checked)]=\"checked\">\n  <lucide-angular rdxCheckboxIndicator name=\"check\" />\n  <input rdxCheckboxInput type=\"checkbox\" />\n</button>\n```\n\n----------------------------------------\n\nTITLE: Importing Progress Directives in TypeScript\nDESCRIPTION: Demonstrates how to import the Progress component directives from the Radix NG Primitives package.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/primitives/components/progress.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RdxProgressIndicatorDirective, RdxProgressRootDirective } from '@radix-ng/primitives/progress';\n```\n\n----------------------------------------\n\nTITLE: Importing Hover Card Directives in TypeScript\nDESCRIPTION: Shows how to import individual Hover Card directives from the Radix-ng primitives package.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/hover-card/stories/hover-card.docs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  RdxHoverCardRootDirective,\n  RdxHoverCardRootTrigger,\n  RdxHoverCardContentDirective,\n  RdxHoverCardArrowDirective,\n  RdxHoverCardAnchorDirective,\n  RdxHoverCardCloseDirective\n} from '@radix-ng/primitives/hover-card';\n```\n\n----------------------------------------\n\nTITLE: Switch Accessibility Examples\nDESCRIPTION: Demonstrates different ways to implement accessibility features in the Switch component using labels and ARIA attributes.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/switch/stories/switch.docs.mdx#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<label for=\"switch1\">Remember Me</label>\n<button rdxSwitchRoot id=\"switch1\" ></button>\n\n<span id=\"switch2\">Remember Me</span>\n<button rdxSwitchRoot ariaLabelledBy=\"switch2\"></button>\n\n<button rdxSwitchRoot ariaLabel=\"Remember Me\"></button>\n```\n\n----------------------------------------\n\nTITLE: Implementing usePresence Function in Angular TypeScript\nDESCRIPTION: Function signature for usePresence utility that handles DOM element transitions and animations in Angular. The function takes NgZone, HTMLElement, transition start function, and options as parameters, returning an Observable<void>.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/presence/stories/presence.docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const usePresence = <T>(\n  zone: NgZone,\n  element: HTMLElement,\n  startFn: TransitionStartFn<T>,\n  options: TransitionOptions<T>\n): Observable<void> => { ... }\n\n```\n\n----------------------------------------\n\nTITLE: Importing Accordion Components in Angular\nDESCRIPTION: Shows how to import the necessary Accordion components from the Radix NG Shadcn library in a TypeScript file.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/shadcn-docs/src/content/components/accordion/index.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  ShAccordionComponent,\n  ShAccordionContentComponent,\n  ShAccordionItemComponent,\n  ShAccordionTriggerComponent\n} from '@radix-ng/shadcn/accordion';\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Aspect Ratio Container in HTML\nDESCRIPTION: Basic HTML structure for implementing the aspect ratio component. Uses the rdxAspectRatio directive to constrain content (like images) to a specific ratio.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/primitives/components/aspect-ratio.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div rdxAspectRatio>\n    <img />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Portal Content Component\nDESCRIPTION: Example of a standalone component that will be rendered through the portal\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/portal/stories/portal.docs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'component-portal-content',\n  standalone: true,\n  template: `\n    <p>This is portal content!</p>\n  `\n})\nexport class PortalContentComponent {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Progress Bar in HTML\nDESCRIPTION: Demonstrates the basic implementation of a progress bar using the Progress directives. Shows how to bind progress value and apply dynamic styling to the indicator.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/progress/stories/progress.docs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"ProgressRoot\" rdxProgressRoot [value]=\"progress\">\n  <div class=\"ProgressIndicator\" rdxProgressIndicator [style.transform]=\"'translateX(-' + (100 - progress) +'%)'\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Tabs Module in TypeScript\nDESCRIPTION: Alternative approach showing how to import the complete Tabs module when using NgModule-based architecture.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/shadcn-docs/src/content/components/tabs/index.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ShTabsModule } from '@radix-ng/shadcn/tabs';\n```\n\n----------------------------------------\n\nTITLE: Consuming Context in a Child Component in Angular\nDESCRIPTION: Shows how a child component can inject and use the context provided by the parent directive. The component accesses shared data and methods from the injected context.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/primitives/overview/inject-context.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, inject } from '@angular/core';\nimport { MY_CONTEXT_TOKEN } from './my-context';\n\n@Component({\n  selector: 'child-component',\n  template: `\n    <p>Value: {{ context.value }}</p>\n    <button (click)=\"increment()\">Increment</button>\n  `\n})\nexport class ChildComponent {\n  readonly context = inject(MY_CONTEXT_TOKEN);\n\n  increment() {\n    this.context.increment();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Highlight Directive Implementation\nDESCRIPTION: Example of a highlight directive that adds background color to an element. Uses the rdxHighlight attribute directive with a color parameter.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/storybook-radix/docs/guides/naming-conventions.docs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p rdxHighlight=\"lightblue\">This text will be highlighted in light blue.</p>\n```\n\n----------------------------------------\n\nTITLE: Importing Collapsible Component Directives\nDESCRIPTION: TypeScript import statement for the necessary Collapsible component directives from the Radix-NG primitives package.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/collapsible/stories/collapsible.docs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  RdxCollapsibleRootDirective,\n  RdxCollapsibleTriggerDirective,\n  RdxCollapsibleContentDirective\n} from '@radix-ng/primitives/collapsible';\n```\n\n----------------------------------------\n\nTITLE: First/Last Navigation Buttons Implementation\nDESCRIPTION: Example showing how to add first and last page navigation buttons to the pagination component\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/pagination/stories/pagination.docs.mdx#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div rdxPaginationRoot>\n    <div rdxPaginationList #list=\"rdxPaginationList\">\n        <button rdxPaginationFirst></button>\n        ...\n        <button rdxPaginationLast></button>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Destructive Button Component Demo\nDESCRIPTION: Implementation example of a destructive style button\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/shadcn-docs/src/content/components/button/index.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{{ NgDocActions.demo(\"ButtonExampleDestructiveComponent\", { expanded: false}) }}\n```\n\n----------------------------------------\n\nTITLE: Angular Avatar Component with Fallback Text\nDESCRIPTION: Example showing how to use the Avatar component with a fallback text that displays when the image fails to load.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/avatar/README.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<avatar.Root className=\"AvatarRoot\">\n  <avatar.Image\n    className=\"AvatarImage\"\n    src=\"https://github.com/radix-ui.png\"\n    alt=\"Radix UI\"\n  />\n  <avatar.Fallback className=\"AvatarFallback\" delayMs={600}>\n    UI\n  </avatar.Fallback>\n</avatar.Root>\n```\n\n----------------------------------------\n\nTITLE: Importing Badge Directive in TypeScript\nDESCRIPTION: Shows how to import the ShBadgeDirective from the Radix-NG Shadcn badge module.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/shadcn-docs/src/content/components/badge/index.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ShBadgeDirective } from '@radix-ng/shadcn/badge';\n```\n\n----------------------------------------\n\nTITLE: Implementing Avatar Component Structure in HTML\nDESCRIPTION: Basic structure of the Avatar component showing the root element containing an image and fallback element. Uses Radix directives for functionality.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/primitives/components/avatar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<span rdxAvatarRoot>\n    <img rdxAvatarImage />\n    <span rdxAvatarFallback></span>\n</span>\n```\n\n----------------------------------------\n\nTITLE: Tooltip Directive Implementation\nDESCRIPTION: Example of a tooltip directive that displays additional information on hover. Uses the rdxTooltip attribute directive with tooltip text.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/storybook-radix/docs/guides/naming-conventions.docs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<button rdxTooltip=\"Click to submit\">Submit</button>\n```\n\n----------------------------------------\n\nTITLE: Basic Radix Directive Structure\nDESCRIPTION: Demonstrates the basic structure of a Radix directive element using the rdx prefix\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/storybook-radix/docs/guides/naming-conventions.docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<rdxDirectiveName></rdxDirectiveName>\n```\n\n----------------------------------------\n\nTITLE: Using Visually Hidden Class in HTML\nDESCRIPTION: Demonstrates practical implementation of the cdk-visually-hidden class on a checkbox input element. This example shows how to visually hide form controls while maintaining their accessibility.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/visually-hidden/stories/visually-hidden.docs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"custom-checkbox\">\n  <input class=\"cdk-visually-hidden\" type=\"checkbox\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Tabs Component Template in HTML\nDESCRIPTION: Demonstrates the HTML structure for implementing tabs with triggers and content areas using the radix-ng directives. Shows how to set default values and create multiple tab panels.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/shadcn-docs/src/content/components/tabs/index.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"w-[400px]\" shTabs shDefaultValue=\"account\">\n  <div shTabsList>\n    <div shTabsTrigger shValue=\"account\">Account</div>\n    <div shTabsTrigger shValue=\"password\">Password</div>\n  </div>\n  <div shTabsContent shValue=\"account\">Make changes to your account here.</div>\n  <div shTabsContent shValue=\"password\">Change your password here.</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Badge-Styled Link\nDESCRIPTION: Demonstrates how to create a link that looks like a badge using the badgeVariants helper function.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/shadcn-docs/src/content/components/badge/index.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<a [class]=\"badgeVariants({ variant: 'outline' })\">Secondary</a>\n```\n\n----------------------------------------\n\nTITLE: Basic Input Implementation with shInput Directive\nDESCRIPTION: Demonstrates the basic usage of the shInput directive on a standard HTML input element. This applies the shadcn styling to the input field.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/shadcn-docs/src/content/components/input/index.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<input shInput />\n```\n\n----------------------------------------\n\nTITLE: Styling Accordion Item with CSS in Angular\nDESCRIPTION: This snippet demonstrates how to style an Accordion Item component using CSS classes and data-state attributes in Angular.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/primitives/overview/styling.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div [defaultValue]=\"'item-1'\" rdxAccordionRoot>\n  <div class=\"AccordionItem\" [value]=\"'item-1'\" rdxAccordionItem>\n    <!-- ... -->\n  </div>\n</div>\n\n<style>\n.AccordionItem {\n  /* ... */\n}\n</style>\n```\n\nLANGUAGE: css\nCODE:\n```\n.AccordionItem {\n  border-bottom: 1px solid gainsboro;\n}\n\n.AccordionItem[data-state=\"open\"] {\n  border-bottom-width: 2px;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Separator Component in HTML\nDESCRIPTION: Demonstrates basic usage of the Separator component with decorative and orientation attributes.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/separator/stories/separator.docs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div rdxSeparatorRoot decorative=\"decorative\" orientation=\"vertical\"></div>\n```\n\n----------------------------------------\n\nTITLE: Importing Menubar Component in TypeScript\nDESCRIPTION: This snippet shows how to import the Menubar component and its related parts from the Radix Primitives library. It includes the main Menubar component and its subcomponents.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/menubar/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Menubar from '@radix-ui/react-menubar';\n```\n\n----------------------------------------\n\nTITLE: Configuring Avatar Defaults in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure default options for all avatars in an Angular application using the provideRdxAvatarConfig function. It sets a default delay of 1000ms for fallback rendering.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/avatar/stories/avatar.docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { provideRdxAvatarConfig } from '@radix-ng/primitives/avatar';\n\nbootstrapApplication(AppComponent, {\n  providers: [provideRdxAvatarConfig({ delayMs: 1000 })]\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Radix Themes CSS in global styles\nDESCRIPTION: Example of how to import the Radix Themes CSS file in a global.css file, including the Angular CDK overlay styles which are required for proper overlay functionality.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/storybook-radix/docs/overview/theming.docs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n@import '@radix-ui/themes/styles.css';\n@import '@angular/cdk/overlay-prebuilt.css';\n```\n\n----------------------------------------\n\nTITLE: Displaying Images with Next.js Image Component\nDESCRIPTION: Example of using the Next.js Image component to display responsive images on a blog. The component accepts properties for source, dimensions, and alt text to properly optimize images.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/showcase-taxonomy/src/content/dynamic-routing-static-regeneration.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<Image\n  src=\"/images/blog/blog-post-4.jpg\"\n  width=\"718\"\n  height=\"404\"\n  alt=\"Image\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Context Interface and Token in Angular\nDESCRIPTION: Creates an interface describing the desired context and an injection token that will provide it. This establishes the contract for what data and methods will be shared.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/primitives/overview/inject-context.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InjectionToken } from '@angular/core';\n\nexport interface MyContext {\n  value: number;\n  message: string;\n  increment: void;\n  // ... любые другие поля/методы\n}\n\nexport const MY_CONTEXT_TOKEN = new InjectionToken<MyContext>('MyContextToken');\n```\n\n----------------------------------------\n\nTITLE: Installing Radix Themes Package\nDESCRIPTION: Command to install Radix Themes package via npm\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/themes/overview/getting-started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnpm install @radix-ui/themes\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta for Accessibility Documentation\nDESCRIPTION: Sets up Storybook documentation metadata for the Accessibility section of Radix Primitives. Defines the title in the Storybook navigation structure and provides a description highlighting the WAI-ARIA compliance.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/storybook-radix/docs/overview/accessibility.docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta\n  title=\"Overview/Accessibility\"\n  description=\"Radix Primitives follow the WAI-ARIA authoring practices guidelines and are tested in a wide selection of modern browsers and commonly used assistive technologies.\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Alert Dialog with Custom Styling in React\nDESCRIPTION: Example demonstrating how to apply custom styling to Alert Dialog components using className props. Each component in the Alert Dialog composition can receive its own styling, allowing for complete visual customization.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/alert-dialog/README.md#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as AlertDialog from '@radix-ng/primitives/alert-dialog';\n\nexport default () => (\n  <AlertDialog.Root>\n    <AlertDialog.Trigger className=\"TriggerButton\" />\n    <AlertDialog.Portal>\n      <AlertDialog.Overlay className=\"DialogOverlay\" />\n      <AlertDialog.Content className=\"DialogContent\">\n        <AlertDialog.Title className=\"DialogTitle\">\n          Are you absolutely sure?\n        </AlertDialog.Title>\n        <AlertDialog.Description className=\"DialogDescription\">\n          This action cannot be undone.\n        </AlertDialog.Description>\n        <div style={{ display: 'flex', justifyContent: 'flex-end', gap: 15 }}>\n          <AlertDialog.Cancel className=\"Button gray\">\n            Cancel\n          </AlertDialog.Cancel>\n          <AlertDialog.Action className=\"Button red\">\n            Yes, delete account\n          </AlertDialog.Action>\n        </div>\n      </AlertDialog.Content>\n    </AlertDialog.Portal>\n  </AlertDialog.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Radix Themes with npm\nDESCRIPTION: Command to install the Radix Themes package using npm, which provides pre-built theming capabilities for Radix components.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/storybook-radix/docs/overview/theming.docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ui/themes\n```\n\n----------------------------------------\n\nTITLE: Setting Avatar Color in React\nDESCRIPTION: Illustrates the use of the 'color' prop to assign a specific color to the Avatar component.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/themes/components/avatar.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ComponentThemesPreview name=\"avatar\" file=\"avatar-color-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Radix-NG Primitives Packages\nDESCRIPTION: Command to install the required npm packages for Radix-NG Primitives and Angular CDK dependencies.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/storybook-radix/docs/overview/installation.docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @radix-ng/primitives @angular/cdk\n```\n\n----------------------------------------\n\nTITLE: Importing Switch Component Directives\nDESCRIPTION: Shows how to import the necessary Switch component directives from the Radix-ng primitives library.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/switch/stories/switch.docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RdxSwitchRootDirective, RdxSwitchThumbDirective, RdxSwitchInputDirective } from '@radix-ng/primitives/switch';\n```\n\n----------------------------------------\n\nTITLE: Using Context Directive in HTML Template\nDESCRIPTION: Demonstrates how to use the context directive in a template, attaching it to a parent element that contains child components. This allows all child components to share the same context.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/primitives/overview/inject-context.mdx#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div myContext>\n  <child-component />\n  <child-component />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Navigation Menu Animation in CSS\nDESCRIPTION: CSS animations for content transitions using keyframes and data attributes for motion direction.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/navigation-menu/stories/navigation-menu.docs.mdx#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@keyframes enterFromRight {\n  from {\n    opacity: 0;\n    transform: translateX(200px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n@keyframes exitToRight {\n  from {\n    opacity: 1;\n    transform: translateX(0);\n  }\n  to {\n    opacity: 0;\n    transform: translateX(200px);\n  }\n}\n\n/* Apply animations based on motion direction */\n.NavigationMenuContent[data-motion=\"from-end\"] {\n  animation-name: enterFromRight;\n}\n\n.NavigationMenuContent[data-motion=\"to-end\"] {\n  animation-name: exitToRight;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ShInputDirective in Angular\nDESCRIPTION: Shows how to import the ShInputDirective from the @radix-ng/shadcn/input module. This directive is used to style form input elements with the shadcn design system.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/shadcn-docs/src/content/components/input/index.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ShInputDirective } from '@radix-ng/shadcn/input';\n```\n\n----------------------------------------\n\nTITLE: Configuring NX build options for Radix Themes\nDESCRIPTION: Configuration for NX build options that includes Radix Themes styles and Angular CDK overlay styles. Also includes style preprocessor options to ensure node_modules are in the include paths.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/storybook-radix/docs/overview/theming.docs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n\"styles\": [\n    \"@radix-ui/themes/styles.css\",\n     // For styling overlay, `cdk-overlay-dark-backdrop`\n    \"@angular/cdk/overlay-prebuilt.css\"\n],\n\"stylePreprocessorOptions\": {\n    \"includePaths\": [\n        \"node_modules/\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Avatar Radius in React\nDESCRIPTION: Shows how to use the 'radius' prop to assign a specific radius value to the Avatar component.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/themes/components/avatar.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<ComponentThemesPreview name=\"avatar\" file=\"avatar-radius-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Label Directive from Radix-NG Primitives\nDESCRIPTION: Shows how to import the RdxLabelDirective from the Radix-NG Primitives library to use in your Angular applications.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/primitives/components/label.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RdxLabelDirective } from '@radix-ng/primitives/label';\n```\n\n----------------------------------------\n\nTITLE: Importing Toggle Directive in TypeScript\nDESCRIPTION: Shows how to import the Toggle directive from the Radix primitives package.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/toggle/stories/toggle.docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RdxToggleDirective } from '@radix-ng/primitives/toggle';\n```\n\n----------------------------------------\n\nTITLE: Using RdxLabelDirective in HTML\nDESCRIPTION: Demonstrates how to use the RdxLabelDirective in HTML. It shows how to associate a label with an input field using the 'htmlFor' attribute and the 'rdxLabel' directive.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/label/stories/label.docs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<label rdxLabel htmlFor=\"uniqId\">First name</label>\n<input class=\"Input\" id=\"uniqId\" type=\"text\" />\n```\n\n----------------------------------------\n\nTITLE: Angular Component Structure Example\nDESCRIPTION: Example showing the recommended structure for Angular components including dependency injection, inputs/outputs, computed properties, and lifecycle management\nSOURCE: https://github.com/radix-ng/primitives/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MyComponent {\n  // dependency injection first\n  private readonly myService = inject(MyService);\n\n  // inputs\n  readonly myInput = input();\n\n  // outputs\n  readonly myOutput = output();\n\n  // private members\n  private readonly shouldDoStuff = computed(() => {});\n\n  // public members\n  readonly ICQ_LINK = ICQ;\n  readonly MSN_LINK = MSN;\n\n  readonly computedStuff = computed(() => {});\n\n  form = new FormGroup(...);\n\n  stuff = useMyExternalUtilFunction();\n\n  // constructor\n  constructor(){\n    effect(() => console.log(this.computedStuff()));\n\n    // ngOnInit\n    afterNextRender(() => console.log('init'));\n\n    // ngOnDestroy\n    inject(DestroyRef).onDestroy(() => console.log('cleanup'));\n  }\n\n  // lifecycle hooks (avoid if possible)\n\n  // public methods\n  greet() {\n    console.log('hi mom');\n  }\n\n  // private methods\n  private calculateGreeting() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Toggle Group Directives in TypeScript\nDESCRIPTION: Shows how to import the required Toggle Group directives from the Radix NG primitives package\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/toggle-group/stories/toggle-group.docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  RdxToggleGroupDirective,\n  RdxToggleGroupItemDirective\n} from '@radix-ng/primitives/toggle-group';\n```\n\n----------------------------------------\n\nTITLE: Importing Progress Directives in TypeScript\nDESCRIPTION: Shows how to import the required Progress directives from the Radix-ng primitives package.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/progress/stories/progress.docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RdxProgressRootDirective, RdxProgressIndicatorDirective } from '@radix-ng/primitives/progress';\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS Dependencies\nDESCRIPTION: Installs Tailwind CSS core and supporting packages as development dependencies. These are required to process and generate the Tailwind utility classes.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/shadcn-docs/src/content/getting-started/installation/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D tailwindcss postcss autoprefixer\n```\n\n----------------------------------------\n\nTITLE: Importing Visually Hidden Component from Radix-ng Primitives\nDESCRIPTION: Demonstrates how to import the visually hidden component using its dedicated entry point in the Radix-ng primitives package.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/visually-hidden/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@radix-ng/primitives/visually-hidden\n```\n\n----------------------------------------\n\nTITLE: Importing Hover Card Module in TypeScript\nDESCRIPTION: Demonstrates how to import the entire Hover Card module from the Radix-ng primitives package.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/hover-card/stories/hover-card.docs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RdxHoverCardModule } from '@radix-ng/primitives/hover-card';\n```\n\n----------------------------------------\n\nTITLE: Importing Separator Directive in TypeScript\nDESCRIPTION: Shows how to import the Separator directive from the Radix-NG primitives package.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/separator/stories/separator.docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RdxSeparatorRootDirective } from '@radix-ng/primitives/separator';\n```\n\n----------------------------------------\n\nTITLE: Toggle Group Component Structure in HTML\nDESCRIPTION: Demonstrates the basic HTML structure for implementing a toggle group component using the Radix NG directives. Shows the parent container with the toggle group directive and child buttons with the toggle group item directive.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/primitives/components/toggle-group.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div rdxToggleGroup>\n  <button rdxToggleGroupItem></button>\n  <button rdxToggleGroupItem></button>\n  <button rdxToggleGroupItem></button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Portal in Main Component\nDESCRIPTION: Main component implementation showing portal setup with ViewChild decorators, portal outlet configuration, and portal attachment in the AfterViewInit lifecycle hook\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/portal/stories/portal.docs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// app.component.ts\nimport { Component, ViewChild, AfterViewInit, inject, ApplicationRef, Injector, ViewContainerRef } from '@angular/core';\nimport { CdkPortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport { PortalContentComponent } from './portal-content.component';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  template: `\n    <ng-template cdkPortal>\n      <app-portal-content></app-portal-content>\n    </ng-template>\n    <div #portalOutlet></div>\n  `\n})\nexport class AppComponent implements AfterViewInit {\n  private readonly appRef = inject(ApplicationRef);\n  private readonly injector = inject(Injector);\n\n  @ViewChild(CdkPortal) portal: CdkPortal;\n  @ViewChild('portalOutlet', { read: ViewContainerRef }) portalOutlet: ViewContainerRef;\n\n  private host: DomPortalOutlet;\n\n  ngAfterViewInit() {\n    this.host = new DomPortalOutlet(this.portalOutlet.element.nativeElement, this.injector, this.appRef);\n    this.host.attach(this.portal);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Select Component Directives\nDESCRIPTION: TypeScript import statement for Select component directives from the Radix-NG primitives package.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/select/stories/select.docs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  RdxAccordionRootDirective,\n  RdxAccordionItemDirective,\n  RdxAccordionTriggerDirective,\n  RdxAccordionContentDirective\n} from '@radix-ng/primitives/select';\n```\n\n----------------------------------------\n\nTITLE: Importing RdxLabelDirective in TypeScript\nDESCRIPTION: Shows how to import the RdxLabelDirective from the Radix-ng primitives library. This import is necessary to use the label directive in your Angular components.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/label/stories/label.docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RdxLabelDirective } from '@radix-ng/primitives/label';\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Metadata for Aspect Ratio Component\nDESCRIPTION: This JSX code sets up the metadata for the Aspect Ratio component in Storybook, defining its location in the documentation hierarchy.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/aspect-ratio/stories/aspect-ratio.docs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta title=\"Primitives/Aspect Ratio\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Individual Tooltip Directives\nDESCRIPTION: TypeScript import statement for individual tooltip directives and components from the Radix-ng primitives package.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/tooltip/stories/tooltip.docs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  RdxTooltipRootDirective,\n  RdxTooltipRootTrigger,\n  RdxTooltipContentDirective,\n  RdxTooltipArrowDirective,\n  RdxTooltipAnchorDirective,\n  RdxTooltipCloseDirective\n} from '@radix-ng/primitives/tooltip';\n```\n\n----------------------------------------\n\nTITLE: Importing Popover Module\nDESCRIPTION: Alternative TypeScript import statement for the complete Popover module from Radix-NG primitives.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/popover/stories/popover.docs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RdxPopoverModule } from '@radix-ng/primitives/popover';\n```\n\n----------------------------------------\n\nTITLE: Styling Accordion Item with Tailwind CSS in Angular\nDESCRIPTION: This example shows how to style an Accordion Item component using Tailwind CSS classes and data-state attributes in Angular.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/primitives/overview/styling.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div [defaultValue]=\"'item-1'\" rdxAccordionRoot>\n  <div class=\"border border-gray-400 rounded-2xl\" [value]=\"'item-1'\" rdxAccordionItem>\n    <!-- ... -->\n  </div>\n</div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div [defaultValue]=\"'item-1'\" rdxAccordionRoot>\n  <div class=\"\n        border border-gray-400 rounded-2xl\n        data-[state=open]:border-b-2 data-[state=open]:border-gray-800\n      \" [value]=\"'item-1'\" rdxAccordionItem>\n    <!-- ... -->\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Context Provider Directive in Angular\nDESCRIPTION: Creates a directive that implements the MyContext interface and registers itself as a provider for the MY_CONTEXT_TOKEN. This directive serves as the context root that child components can access.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/primitives/overview/inject-context.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Directive,\n  forwardRef\n} from '@angular/core';\nimport { MyContext, MY_CONTEXT_TOKEN } from './my-context';\n\n@Directive({\n  selector: '[myContext]',\n  providers: [\n    {\n      provide: MY_CONTEXT_TOKEN,\n      useExisting: forwardRef(() => MyContextDirective)\n    }\n  ]\n})\nexport class MyContextDirective implements MyContext {\n  value = 0;\n  message = 'Hello from directive';\n\n  increment() {\n    this.value++;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Avatar Component with Size Prop in React\nDESCRIPTION: Demonstrates how to use the 'size' prop to control the size of the Avatar component.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/themes/components/avatar.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ComponentThemesPreview name=\"avatar\" file=\"avatar-sizes-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Tooltip Module\nDESCRIPTION: Alternative TypeScript import statement for importing the complete Tooltip module from the Radix-ng primitives package.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/tooltip/stories/tooltip.docs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RdxTooltipModule } from '@radix-ng/primitives/tooltip';\n```\n\n----------------------------------------\n\nTITLE: HTML ARIA Attribute Example\nDESCRIPTION: Example showing the use of aria attributes in HTML, demonstrating basic accessibility markup.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/primitives/overview/accessibility.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\naria, role\n```\n\n----------------------------------------\n\nTITLE: Documenting Slider Component Path\nDESCRIPTION: Path specification for the Slider component within the Radix UI Next Generation primitives collection.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/slider/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @radix-ng/primitives/slider\n```\n\n----------------------------------------\n\nTITLE: Increasing Avatar Contrast in React\nDESCRIPTION: Demonstrates the use of the 'highContrast' prop to increase color contrast with the background for the Avatar component.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/themes/components/avatar.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ComponentThemesPreview name=\"avatar\" file=\"avatar-hc-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Avatar Variant in React\nDESCRIPTION: Shows how to use the 'variant' prop to control the visual style of the Avatar component.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/themes/components/avatar.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ComponentThemesPreview name=\"avatar\" file=\"avatar-variant-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind for Radix-NG Integration\nDESCRIPTION: Creates a tailwind.config.js configuration that integrates with Radix-NG components. It imports the shadcnUIPlugin and includes component paths to ensure Tailwind processes the necessary files.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/shadcn-docs/src/content/getting-started/installation/index.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/** @type {import('tailwindcss').Config} */\n\n// https://ui.shadcn.com/docs/installation/manual#configure-tailwindconfigjs\nconst { shadcnUIPlugin } = require('@radix-ng/shadcn/theme');\n\nmodule.exports = {\n  content: [\n    // yours config paths ...\n    // Added all components\n    './node_modules/@radix-ng/shadcn/**/*.{mjs,js}',\n    // OR\n    // to optimize the bundle size, add the components that you use\n    './node_modules/@radix-ng/shadcn/**/(button|label|checkbox)/*.{mjs,js}'\n  ],\n  theme: {\n    extend: {}\n  },\n  plugins: [shadcnUIPlugin()]\n};\n```\n\n----------------------------------------\n\nTITLE: Alert Dialog with TypeScript Props Interface\nDESCRIPTION: Example showing the TypeScript interface for an Alert Dialog component. This demonstrates how to properly type the component props when using the Alert Dialog in a TypeScript project, providing type safety for the component's properties.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/alert-dialog/README.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as AlertDialog from '@radix-ng/primitives/alert-dialog';\n\ntype DeleteAccountAlertProps = {\n  userName: string;\n  onDelete: () => void;\n};\n\nexport const DeleteAccountAlert = ({ userName, onDelete }: DeleteAccountAlertProps) => (\n  <AlertDialog.Root>\n    <AlertDialog.Trigger asChild>\n      <button>Delete account</button>\n    </AlertDialog.Trigger>\n    <AlertDialog.Portal>\n      <AlertDialog.Overlay className=\"overlay\" />\n      <AlertDialog.Content className=\"content\">\n        <AlertDialog.Title>Delete account</AlertDialog.Title>\n        <AlertDialog.Description>\n          Are you sure you want to delete {userName}'s account? This action cannot be undone.\n        </AlertDialog.Description>\n        <div className=\"button-container\">\n          <AlertDialog.Cancel>Cancel</AlertDialog.Cancel>\n          <AlertDialog.Action onClick={onDelete}>Delete</AlertDialog.Action>\n        </div>\n      </AlertDialog.Content>\n    </AlertDialog.Portal>\n  </AlertDialog.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Angular CDK Package\nDESCRIPTION: Command to install the Angular CDK package which provides portal functionality\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/portal/stories/portal.docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @angular/cdk\n```\n\n----------------------------------------\n\nTITLE: Importing the hover-card primitive from Radix UI\nDESCRIPTION: Shows how to import the hover-card primitive from the Radix UI primitives library as a secondary entry point.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/hover-card/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @radix-ng/primitives/hover-card\n\nSecondary entry point of `@radix-ng/primitives`. It can be used by importing from `@radix-ng/primitives/hover-card`.\n```\n\n----------------------------------------\n\nTITLE: Alert Dialog with Custom Portal Container in React\nDESCRIPTION: Example showing how to specify a custom container for the Alert Dialog portal. This allows developers to control where in the DOM the dialog is rendered, which can be useful for complex layouts or when working with nested contexts.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/alert-dialog/README.md#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as AlertDialog from '@radix-ng/primitives/alert-dialog';\n\nexport default () => (\n  <AlertDialog.Root>\n    <AlertDialog.Trigger />\n    <AlertDialog.Portal container={document.getElementById('page')}>\n      <AlertDialog.Overlay />\n      <AlertDialog.Content>\n        {/* ... */}\n      </AlertDialog.Content>\n    </AlertDialog.Portal>\n  </AlertDialog.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Radix Themes CSS\nDESCRIPTION: Global CSS import statement for Radix Themes styles\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/themes/overview/getting-started.mdx#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import '@radix-ui/themes/styles.css';\n```\n\n----------------------------------------\n\nTITLE: Importing Collapsible Component in React\nDESCRIPTION: Example showing how to import the Collapsible component from Radix UI primitives library.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/collapsible/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Collapsible from '@radix-ui/react-collapsible';\n```\n\n----------------------------------------\n\nTITLE: Importing Popover from Radix NG Primitives\nDESCRIPTION: Example showing how to import the popover component as a secondary entry point from the Radix NG Primitives library.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/popover/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@radix-ng/primitives/popover\n```\n\n----------------------------------------\n\nTITLE: Implementing Separator Component Structure in HTML\nDESCRIPTION: The basic HTML structure for implementing a Separator component using the Radix-ng primitives library. It uses the rdxSeparatorRoot directive to create a separator element.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/primitives/components/separator.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div rdxSeparatorRoot></div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Tailwind CSS Typography with HTML Article\nDESCRIPTION: Example of using the 'prose' class from @tailwindcss/typography plugin to format a block of vanilla HTML content into a well-formatted document. The snippet demonstrates how applying this class transforms plain text into styled content.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/showcase-taxonomy/src/content/dynamic-routing-static-regeneration.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<article class=\"prose\">\n  <h1>Garlic bread with cheese: What the science tells us</h1>\n  <p>\n    For years parents have espoused the health benefits of eating garlic bread with cheese to their children, with the\n    food earning such an iconic status in our culture that kids will often dress up as warm, cheesy loaf for Halloween.\n  </p>\n  <p>\n    But a recent study shows that the celebrated appetizer may be linked to a series of rabies cases springing up around\n    the country.\n  </p>\n</article>\n```\n\n----------------------------------------\n\nTITLE: Basic Menubar Usage in TypeScript/React\nDESCRIPTION: This code demonstrates a basic implementation of the Menubar component in a React application. It shows how to structure the menubar with root, trigger, and content components.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/menubar/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default () => (\n  <Menubar.Root>\n    <Menubar.Menu>\n      <Menubar.Trigger>File</Menubar.Trigger>\n      <Menubar.Content>\n        <Menubar.Item>New Tab</Menubar.Item>\n        <Menubar.Item>New Window</Menubar.Item>\n        <Menubar.Separator />\n        <Menubar.Item>Share</Menubar.Item>\n        <Menubar.Item>Print…</Menubar.Item>\n      </Menubar.Content>\n    </Menubar.Menu>\n  </Menubar.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Radix NG Toolbar Path\nDESCRIPTION: Package path reference for importing the Radix NG Primitives toolbar component as a secondary entry point.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/toolbar/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@radix-ng/primitives/toolbar\n```\n\n----------------------------------------\n\nTITLE: Content Data Attributes Example in HTML\nDESCRIPTION: Example showing how to manually control content data attributes for state and motion.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/navigation-menu/stories/navigation-menu.docs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div *rdxNavigationMenuContent\n     class=\"NavigationMenuContent\"\n     [attr.data-state]=\"'open'\"\n     [attr.data-motion]=\"'from-start'\">\n  <!-- Content -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Toggle Component Path - Markdown\nDESCRIPTION: Shows the package path for importing the toggle primitive component from Radix UI's Next Generation primitives package.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/toggle/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @radix-ng/primitives/toggle\n```\n\n----------------------------------------\n\nTITLE: Importing Separator Package Path\nDESCRIPTION: Package import path specification for the Separator component in Radix NG Primitives library.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/separator/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @radix-ng/primitives/separator\n```\n\n----------------------------------------\n\nTITLE: Pagination with Ellipsis Implementation\nDESCRIPTION: Example showing how to implement pagination with ellipsis for indicating additional pages\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/pagination/stories/pagination.docs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div rdxPaginationRoot>\n    <div rdxPaginationList #list=\"rdxPaginationList\">\n\n        @for (item of list.transformedRange(); track item) {\n            @if (item.type == 'page') {\n                <button rdxPaginationListItem [value]=\"item.value\">{{ item.value }}</button>\n            } @else {\n                <div rdxPaginationEllipsis>&#8230;</div>\n            }\n        }\n\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Article Typography with Tailwind CSS\nDESCRIPTION: Example showing how to apply typography styles to an HTML article using Tailwind's prose class. Demonstrates basic article structure with headings and paragraphs.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/showcase-taxonomy/src/content/preview-mode-headless-cms.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<article class=\"prose\">\n  <h1>Garlic bread with cheese: What the science tells us</h1>\n  <p>\n    For years parents have espoused the health benefits of eating garlic bread with cheese to their children, with the\n    food earning such an iconic status in our culture that kids will often dress up as warm, cheesy loaf for Halloween.\n  </p>\n  <p>\n    But a recent study shows that the celebrated appetizer may be linked to a series of rabies cases springing up around\n    the country.\n  </p>\n</article>\n```\n\n----------------------------------------\n\nTITLE: Importing Toggle Group Path Reference\nDESCRIPTION: Package path reference showing the toggle-group component as a secondary entry point of the Radix UI primitives library.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/toggle-group/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @radix-ng/primitives/toggle-group\n```\n\n----------------------------------------\n\nTITLE: Importing Progress Component Path - Radix UI\nDESCRIPTION: Demonstrates the package path for importing the Progress component from Radix UI primitives library.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/progress/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @radix-ng/primitives/progress\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS Default Settings\nDESCRIPTION: Basic configuration example for tailwind.config.js showing default settings including purge, theme, variants, and plugins properties.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/showcase-taxonomy/src/content/preview-mode-headless-cms.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  purge: [],\n  theme: {\n    extend: {}\n  },\n  variants: {},\n  plugins: []\n};\n```\n\n----------------------------------------\n\nTITLE: Package Import Path for Roving Focus Primitive\nDESCRIPTION: Shows the import path for accessing the roving focus primitive in the Radix UI primitives package\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/roving-focus/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @radix-ng/primitives/roving-focus\n```\n\n----------------------------------------\n\nTITLE: Rendering Default Toolbar Story\nDESCRIPTION: Displays the default Toolbar story example with hidden source code.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/toolbar/stories/toolbar.docs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas sourceState=\"hidden\" of={ToolbarStories.Default} />\n```\n\n----------------------------------------\n\nTITLE: Setting up Radix Themes CSS selectors on body element\nDESCRIPTION: HTML snippet showing how to set up the required CSS class selectors on the body element for Radix Themes to work properly. This enables the light theme by default.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/storybook-radix/docs/overview/theming.docs.mdx#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<body class=\"radix-themes light light-theme\">\n  ...\n</body>\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure - Angular\nDESCRIPTION: Displays the hierarchical folder structure of the Radix Angular project, showing the organization of apps and packages directories including documentation, testing, and component implementations.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n.\n├── apps\n│   ├── radix-docs         (documentation based on Astro)\n│   ├── radix-ssr-testing  (SSR test for unstyle primitives)\n│   ├── shadcn-docs        (docs for shadcn/ui, based on ng-doc, just for usage example)\n│   ├── showcase-taxonomy  (AnalogJS showcase Taxonomy app)\n│   └── storybook-radix\n│\n└── packages\n    ├── components         (components based on primitives with custom styling)\n    ├── shadcn             (shadcn/ui just for usage example)\n    └── primitives         (headless primitives UI without any styling)\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta Component for Sheet\nDESCRIPTION: Sets up the Meta component to define this documentation as part of the Sheet stories and specifies the title for the Storybook navigation.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/dialog/stories/sheet.docs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta of={SheetStories} title=\"Examples/Sheet\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Default Aspect Ratio Story in Storybook Canvas\nDESCRIPTION: This JSX code renders the default story for the Aspect Ratio component within a Storybook Canvas, hiding the source code by default.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/aspect-ratio/stories/aspect-ratio.docs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Canvas sourceState=\"hidden\" of={AspectRatioStories.Default} />\n```\n\n----------------------------------------\n\nTITLE: Starting Radix Documentation Server\nDESCRIPTION: Command to start the Radix documentation development server after building both the primitives and components.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm -w run radix-docs:dev\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Meta Title in JSX\nDESCRIPTION: This JSX code sets the title for the Storybook documentation page. It uses the Meta component to specify the title as 'Overview/Introduction'.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/storybook-radix/docs/overview/introduction.docs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"Overview/Introduction\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Sheet Component Example in Canvas\nDESCRIPTION: Displays the default Sheet component example in a Canvas with hidden source code by default.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/dialog/stories/sheet.docs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas sourceState=\"hidden\" of={SheetStories.Default} />\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Meta Information for Dropdown Menu in JSX\nDESCRIPTION: This code sets the title for the Storybook documentation page for the Dropdown Menu component.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/dropdown-menu/stories/dropdown.docs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"Primitives/Dropdown Menu\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Animation Styles in CSS\nDESCRIPTION: Shows the CSS code for animation styles used in the Hover Card component.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/hover-card/stories/hover-card.docs.mdx#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n${animationStylesOnly}\n```\n\n----------------------------------------\n\nTITLE: HTML Heading Element Reference\nDESCRIPTION: Example showing how to reference h4 elements in markdown context for styling discussions.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/showcase-taxonomy/src/content/server-client-components.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`h4`\n```\n\n----------------------------------------\n\nTITLE: Adding Component Controls\nDESCRIPTION: Includes the Controls component to allow interaction with the Sheet component's props in the Storybook UI.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/dialog/stories/sheet.docs.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Controls />\n```\n\n----------------------------------------\n\nTITLE: Rendering Context Menu Default Story in Storybook Canvas\nDESCRIPTION: This JSX snippet renders the default story of the Context Menu component in a Storybook Canvas. It hides the source code and sets a specific height for the preview.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/context-menu/stories/context-menu.docs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas sourceState=\"hidden\" of={ContextMenuStories.Default} height=\"300px\" />\n```\n\n----------------------------------------\n\nTITLE: Inline HTML Element References in Markdown\nDESCRIPTION: Example of referencing HTML heading elements and pseudo-elements in markdown using backticks for inline code.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/showcase-taxonomy/src/content/server-client-components.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`h4`, `h5`, `h6`, `before`\n```\n\n----------------------------------------\n\nTITLE: Directory Path Specification for Dialog Component\nDESCRIPTION: Specifies the file path location for the Dialog primitive component within the Radix-NG project structure.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/dialog/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @radix-ng/primitives/dialog\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Meta Title for Context Menu in JSX\nDESCRIPTION: This JSX snippet sets the Storybook meta title for the Context Menu component. It defines where the component will appear in the Storybook navigation structure.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/context-menu/stories/context-menu.docs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"Primitives/Context Menu\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind Base Styles\nDESCRIPTION: Adds the necessary Tailwind CSS imports to the global styles file. This includes the base, components, and utilities layers that Tailwind provides.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/shadcn-docs/src/content/getting-started/installation/index.md#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook and Context Menu Stories in JavaScript\nDESCRIPTION: This snippet imports necessary components from Storybook and the Context Menu stories for documentation purposes. It sets up the structure for displaying the Context Menu component in Storybook.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/context-menu/stories/context-menu.docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Canvas, Meta } from '@storybook/blocks';\nimport * as ContextMenuStories from './context-menu.stories';\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components and Stories for Dropdown Menu in JSX\nDESCRIPTION: This code snippet imports necessary components from Storybook and the dropdown stories for display in the documentation.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/dropdown-menu/stories/dropdown.docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Canvas, Meta } from '@storybook/blocks';\nimport * as DropdownStories from './dropdown.stories';\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components and Sheet Stories\nDESCRIPTION: Imports required components from Storybook blocks and the Sheet component stories for documentation purposes.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/dialog/stories/sheet.docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Canvas, Controls, Meta } from '@storybook/blocks';\nimport * as SheetStories from './sheet.stories';\n```\n\n----------------------------------------\n\nTITLE: HTML Label Element Reference\nDESCRIPTION: Reference to HTML label element usage in form controls for semantic meaning.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/primitives/overview/accessibility.mdx#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\nlabel, input\n```\n\n----------------------------------------\n\nTITLE: Markdown Inline Code Examples\nDESCRIPTION: Examples of inline code markers showing heading elements and markdown-related syntax\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/showcase-taxonomy/src/content/preview-mode-headless-cms.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nh4\nh5\nh6\nbefore\nh4\nh5\nremark-gfm\na\n```\n\n----------------------------------------\n\nTITLE: Ghost Button Component Demo\nDESCRIPTION: Implementation example of a ghost style button\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/shadcn-docs/src/content/components/button/index.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{{ NgDocActions.demo(\"ButtonExampleGhostComponent\", { expanded: false}) }}\n```\n\n----------------------------------------\n\nTITLE: Importing Meta from Storybook in TypeScript\nDESCRIPTION: This code snippet imports the Meta component from Storybook's addon-docs package. It's used to set metadata for the Storybook documentation.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/storybook-radix/docs/overview/introduction.docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\n```\n\n----------------------------------------\n\nTITLE: Implementing Prose Class for Article Styling with HTML\nDESCRIPTION: Example of using the @tailwindcss/typography plugin's prose class to style an article with proper typography. This demonstrates how to apply the class to vanilla HTML content to create well-formatted documents.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/showcase-taxonomy/src/content/server-client-components.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<article class=\"prose\">\n  <h1>Garlic bread with cheese: What the science tells us</h1>\n  <p>\n    For years parents have espoused the health benefits of eating garlic bread with cheese to their children, with the\n    food earning such an iconic status in our culture that kids will often dress up as warm, cheesy loaf for Halloween.\n  </p>\n  <p>\n    But a recent study shows that the celebrated appetizer may be linked to a series of rabies cases springing up around\n    the country.\n  </p>\n</article>\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components\nDESCRIPTION: Imports required components from Storybook blocks and local story files for documenting the Toolbar component.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/toolbar/stories/toolbar.docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ArgTypes, Canvas, Markdown, Meta } from '@storybook/blocks';\nimport * as ToolbarStories from './toolbar.stories';\n```\n\n----------------------------------------\n\nTITLE: Importing DropdownMenu Data Attributes\nDESCRIPTION: Import statement for dropdown menu trigger data attributes from a demo file.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/primitives/components/dropdown-menu.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    attrDataTrigger\n} from '../../../demos/primitives/dropdown-menu/attrs';\n```\n\n----------------------------------------\n\nTITLE: Markdown URL Autolink Examples\nDESCRIPTION: Examples of URLs and email addresses that get automatically converted to links by GitHub Flavored Markdown\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/showcase-taxonomy/src/content/preview-mode-headless-cms.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nwww.example.com\nhttps://example.com\ncontact@example.com\n```\n\n----------------------------------------\n\nTITLE: Markdown GFM Package Reference\nDESCRIPTION: Reference to the remark-gfm package used for enabling GitHub Flavored Markdown features.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/showcase-taxonomy/src/content/server-client-components.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n`remark-gfm`\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS with Default Configuration\nDESCRIPTION: Basic example of a default tailwind.config.js file with empty configuration. This demonstrates the starting point for customizing Tailwind CSS with empty purge array, theme extensions, variants, and plugins.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/showcase-taxonomy/src/content/dynamic-routing-static-regeneration.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  purge: [],\n  theme: {\n    extend: {}\n  },\n  variants: {},\n  plugins: []\n};\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entries\nDESCRIPTION: Changelog entries documenting version updates, features, fixes and dependencies for the Radix-NG primitives library\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/shadcn/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.11.8 (2025-04-23)\n\n### 🧱 Updated Dependencies\n\n- Updated primitives to 0.33.1\n\n## 0.11.7 (2025-04-12)\n\n### 🧱 Updated Dependencies\n\n- Updated primitives to 0.33.0\n\n[...additional changelog entries...]\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS with Default Settings\nDESCRIPTION: Basic example of a default tailwind.config.js configuration file. This shows the minimal setup required to get started with Tailwind CSS including empty arrays for purge, theme extensions, variants, and plugins.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/showcase-taxonomy/src/content/server-client-components.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  purge: [],\n  theme: {\n    extend: {}\n  },\n  variants: {},\n  plugins: []\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Alert Dialog Trigger Implementation in React\nDESCRIPTION: Example showing how to use the asChild prop to customize the trigger element. This allows developers to use their own button component while maintaining the accessibility and functionality of the Alert Dialog trigger.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/alert-dialog/README.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as AlertDialog from '@radix-ng/primitives/alert-dialog';\n\nexport default () => (\n  <AlertDialog.Root>\n    <AlertDialog.Trigger asChild>\n      <button className=\"button\">Delete account</button>\n    </AlertDialog.Trigger>\n    {/* ... */}\n  </AlertDialog.Root>\n);\n```\n\n----------------------------------------\n\nTITLE: Setting up Git Repository Commands\nDESCRIPTION: Series of bash commands for cloning and setting up the development environment\nSOURCE: https://github.com/radix-ng/primitives/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/your-username/primitives.git\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd primitives\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b my-new-branch\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access and Sitemap in robots.txt\nDESCRIPTION: Basic robots.txt configuration that allows all web crawlers to access the site and provides the sitemap location. Sets unrestricted access for all user agents and points to the XML sitemap.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/public/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nAllow: /\n\nSitemap: https://radix-ng.com/sitemap-index.xml\n```\n\n----------------------------------------\n\nTITLE: GitHub Flavored Markdown Extension Reference\nDESCRIPTION: Reference to the remark-gfm plugin that enables GitHub Flavored Markdown features including autolink literals for URLs and email addresses.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/showcase-taxonomy/src/content/dynamic-routing-static-regeneration.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nremark-gfm\n```\n\n----------------------------------------\n\nTITLE: Building Radix Primitives with pnpm\nDESCRIPTION: Command to build the Radix Primitives using pnpm workspace command. This is the first step in the build process.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm -w run primitives:build\n```\n\n----------------------------------------\n\nTITLE: Styling Radix Label Component\nDESCRIPTION: Adding custom styles to the Label component using Angular's component styles property\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/primitives/overview/getting-started.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n    selector: 'app-root',\n    standalone: true,\n    imports: [RdxLabelRootDirective],\n    template: `\n        <h1>Hello from {{ name }}!</h1>\n        <a target=\"_blank\" href=\"https://angular.dev/overview\">Learn more about Angular</a>\n        <div>\n            <label LabelRoot class=\"Label\" htmlFor=\"uniqId\">First Name</label>\n            <input type=\"text\" class=\"Input\" id=\"uniqId\" />\n        </div>\n    `,\n    styles: `\n        .Label {\n            color: white;\n            font-size: 15px;\n            line-height: 35px;\n            font-weight: 500;\n        }\n    `\n})\n```\n\n----------------------------------------\n\nTITLE: Event Handling Directive Example\nDESCRIPTION: Example of Angular directive implementation showing proper event handling method naming conventions in the host property\nSOURCE: https://github.com/radix-ng/primitives/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Directive({\n  selector: 'app-example',\n  host: {\n    role: 'role',\n    '(mouseenter)': 'onMouseEnter()',\n    '(mouseleave)': 'onMouseLeave()'\n  }\n})\nexport class ExampleDirective {\n  role = 'button';\n\n  onMouseEnter(): void {\n    console.log('Mouse entered!');\n  }\n\n  onMouseLeave(): void {\n    console.log('Mouse left!');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Themer Library with Nx\nDESCRIPTION: Command to build the themer library using Nx build system.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/themer/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnx build themer\n```\n\n----------------------------------------\n\nTITLE: Importing A11y Visually Hidden Mixin in SCSS\nDESCRIPTION: Shows how to import and include the CDK's a11y-visually-hidden mixin that creates the .cdk-visually-hidden CSS class. This mixin provides the necessary styles to hide content visually while keeping it accessible to screen readers.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/visually-hidden/stories/visually-hidden.docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@use '@angular/cdk';\n\n@include cdk.a11y-visually-hidden();\n```\n\n----------------------------------------\n\nTITLE: Configuring NX Build Options\nDESCRIPTION: NX build configuration for including Radix Themes styles and setting up style preprocessor options\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/themes/overview/getting-started.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"styles\": [\n        \"@radix-ui/themes/styles.css\"\n    ],\n    \"stylePreprocessorOptions\": {\n        \"includePaths\": [\n            \"node_modules/\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an InjectionToken in Angular\nDESCRIPTION: Demonstrates how to create a basic InjectionToken with a string type. The token is labeled 'MyToken' for debugging purposes.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/primitives/overview/inject-context.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const MY_TOKEN = new InjectionToken<string>('MyToken');\n```\n\n----------------------------------------\n\nTITLE: Importing Tabs Directives in TypeScript\nDESCRIPTION: Shows how to import the necessary directives for implementing tabs functionality from the Radix NG primitives package.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/tabs/stories/tabs.docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    RdxTabsRootDirective,\n    RdxTabsListDirective,\n    RdxTabsTriggerDirective,\n    RdxTabsContentDirective } from '@radix-ng/primitives/tabs';\n```\n\n----------------------------------------\n\nTITLE: Importing Radio Group Directives in TypeScript\nDESCRIPTION: Shows how to import the necessary Radio Group directives from the @radix-ng/primitives package.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/radio/stories/radio.docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RdxRadioIndicatorDirective, RadioItemDirective } from '@radix-ng/primitives/radio';\n```\n\n----------------------------------------\n\nTITLE: Importing Tabs Directives in TypeScript\nDESCRIPTION: Shows how to import individual tab-related directives for standalone components using the radix-ng library.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/shadcn-docs/src/content/components/tabs/index.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  ShTabsContentDirective,\n  ShTabsDirective,\n  ShTabsListDirective,\n  ShTabsTriggerDirective\n} from '@radix-ng/shadcn/tabs';\n```\n\n----------------------------------------\n\nTITLE: Importing Avatar Component in Angular\nDESCRIPTION: Shows how to import the Avatar component from the Radix Angular primitives library into an Angular application.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/avatar/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AvatarComponent } from '@radix-ng/primitives/avatar';\n```\n\n----------------------------------------\n\nTITLE: Importing Tooltip from Radix-ng Primitives\nDESCRIPTION: Example showing how to import the tooltip component from the Radix-ng primitives library as a secondary entry point.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/tooltip/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@radix-ng/primitives/tooltip\n```\n\n----------------------------------------\n\nTITLE: Importing Individual Popover Directives\nDESCRIPTION: TypeScript import statement for individual Popover directives from the Radix-NG primitives library.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/popover/stories/popover.docs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  RdxPopoverRootDirective,\n  RdxPopoverRootTrigger,\n  RdxPopoverContentDirective,\n  RdxPopoverArrowDirective,\n  RdxPopoverAnchorDirective,\n  RdxPopoverCloseDirective\n} from '@radix-ng/primitives/popover';\n```\n\n----------------------------------------\n\nTITLE: Importing Checkbox Directives in TypeScript\nDESCRIPTION: This snippet shows how to import the necessary directives for using the Checkbox primitive in a TypeScript environment.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/checkbox/stories/checkbox.docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RdxCheckboxDirective, RdxCheckboxInputDirective, RdxCheckboxIndicatorDirective } from '@radix-ng/primitives/checkbox';\n```\n\n----------------------------------------\n\nTITLE: Importing Radix-ng Pagination Module\nDESCRIPTION: Instructions for importing the pagination module into an Angular application\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/pagination/stories/pagination.docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RdxPaginationModule } from '@radix-ng/primitives/pagination';\n```\n\n----------------------------------------\n\nTITLE: Displaying Basic Button Component Demo\nDESCRIPTION: Example showing the basic button component implementation\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/shadcn-docs/src/content/components/button/index.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{{ NgDocActions.demo(\"ButtonExampleComponent\", { expanded: false}) }}\n```\n\n----------------------------------------\n\nTITLE: Secondary Button Component Demo\nDESCRIPTION: Implementation example of a secondary style button\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/shadcn-docs/src/content/components/button/index.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{{ NgDocActions.demo(\"ButtonExampleSecondaryComponent\", { expanded: false}) }}\n```\n\n----------------------------------------\n\nTITLE: Basic Badge Implementation in HTML\nDESCRIPTION: Demonstrates the basic usage of the badge directive with an outline variant.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/shadcn-docs/src/content/components/badge/index.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div shBadge variant=\"outline\">Badge</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Badge Variants Helper\nDESCRIPTION: Shows how to import the badgeVariants helper function for creating badge-styled links.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/shadcn-docs/src/content/components/badge/index.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { badgeVariants } from '@radix-ng/shadcn/badge';\n```\n\n----------------------------------------\n\nTITLE: Extending RadixNG Label Primitive with Angular Directive\nDESCRIPTION: This snippet shows how to extend the RadixNG Label primitive using an Angular directive with hostDirectives.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/primitives/overview/styling.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Directive } from '@angular/core';\nimport { RdxLabelDirective } from '@radix-ng/primitives/label';\n\n@Directive({\n    hostDirectives: [RdxLabelDirective],\n    selector: '[myLabel]',\n    standalone: true\n})\nexport class MyLabelDirective {}\n```\n\n----------------------------------------\n\nTITLE: Defining Package Path for Radix NG Select Primitive\nDESCRIPTION: Path specification for the Radix NG primitives select component package using markdown header syntax.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/select/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @radix-ng/primitives/select\n```\n\n----------------------------------------\n\nTITLE: Rendering Kbd Component Size Examples in Markdown\nDESCRIPTION: This snippet shows how to include a preview of the Kbd component with different sizes. It uses the ComponentThemesPreview element, specifying the component name and a file that demonstrates various sizes.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/themes/typography/kbd.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<ComponentThemesPreview name=\"kbd\" file=\"kbd-sizes-demo\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Kbd Component Preview in Markdown\nDESCRIPTION: This snippet demonstrates how to include a preview of the Kbd component using a custom ComponentThemesPreview element. It specifies the component name and the file to be used for the demo.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/themes/typography/kbd.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<ComponentThemesPreview name=\"kbd\" file=\"kbd-demo\" />\n```\n\n----------------------------------------\n\nTITLE: HTML Anchor Tag Reference\nDESCRIPTION: Reference to HTML anchor tag in markdown documentation context.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/showcase-taxonomy/src/content/server-client-components.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n`a`\n```\n\n----------------------------------------\n\nTITLE: Markdown Heading Element Reference\nDESCRIPTION: Examples of HTML heading elements (h4, h5, h6) used in Markdown context with recommendations for proper usage.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/showcase-taxonomy/src/content/dynamic-routing-static-regeneration.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nh4, h5, h6\n```\n\n----------------------------------------\n\nTITLE: Rendering Dropdown Menu Default Story in Storybook Canvas\nDESCRIPTION: This code renders the default story for the Dropdown Menu component in a Storybook Canvas with specific height and hidden source state.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/dropdown-menu/stories/dropdown.docs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Canvas sourceState=\"hidden\" of={DropdownStories.Default} height=\"300px\" />\n```\n\n----------------------------------------\n\nTITLE: Building Radix Components with pnpm\nDESCRIPTION: Command to build the Radix Components using pnpm workspace command. This step should be executed after building the primitives.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm -w run components:build\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components and Aspect Ratio Stories\nDESCRIPTION: This code snippet imports necessary components from Storybook and the Aspect Ratio stories for documentation purposes.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/aspect-ratio/stories/aspect-ratio.docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Canvas, Meta } from '@storybook/blocks';\nimport * as AspectRatioStories from './aspect-ratio.stories';\n```\n\n----------------------------------------\n\nTITLE: Injecting Data into a Dialog Component\nDESCRIPTION: Shows how to pass data to a dialog component when opening it with the DialogService.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/apps/radix-docs/src/content/primitives/components/dialog.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nthis.#dialog.open({\n  content: MyDialogContentComponent,\n  data: { name: 'Pedro Duarte' }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Meta Component\nDESCRIPTION: Defines the Storybook metadata for the Toolbar component documentation.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/primitives/toolbar/stories/toolbar.docs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"Primitives/Toolbar\" />\n```\n\n----------------------------------------\n\nTITLE: Running Themer Unit Tests with Jest\nDESCRIPTION: Command to execute unit tests for the themer library using Jest testing framework through Nx.\nSOURCE: https://github.com/radix-ng/primitives/blob/main/packages/themer/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnx test themer\n```"
  }
]