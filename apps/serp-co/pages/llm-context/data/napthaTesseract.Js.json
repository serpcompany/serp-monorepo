[
  {
    "owner": "naptha",
    "repo": "tesseract.js",
    "content": "TITLE: Basic OCR Recognition with Tesseract.js in JavaScript\nDESCRIPTION: This snippet demonstrates the fundamental usage of Tesseract.js to perform OCR on an image. It creates a worker with English language support, recognizes text from an image URL, and prints the extracted text to the console.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/docs/examples.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createWorker } = require('tesseract.js');\n\nconst worker = await createWorker('eng');\n\n(async () => {\n  const { data: { text } } = await worker.recognize('https://tesseract.projectnaptha.com/img/eng_bw.png');\n  console.log(text);\n  await worker.terminate();\n})();\n```\n\n----------------------------------------\n\nTITLE: Basic Text Recognition with Tesseract.js in JavaScript\nDESCRIPTION: Demonstrates the basic usage of Tesseract.js to recognize text from an image. It creates a worker, processes an image, logs the extracted text, and terminates the worker after completion.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWorker } from 'tesseract.js';\n\n(async () => {\n  const worker = await createWorker('eng');\n  const ret = await worker.recognize('https://tesseract.projectnaptha.com/img/eng_bw.png');\n  console.log(ret.data.text);\n  await worker.terminate();\n})();\n```\n\n----------------------------------------\n\nTITLE: Recognizing Text in an Image with Tesseract.js\nDESCRIPTION: Demonstrates how to use the worker.recognize method to perform OCR on an image. This is the core function of Tesseract.js that extracts text from images.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/docs/api.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createWorker } = Tesseract;\n(async () => {\n  const worker = await createWorker('eng');\n  const { data: { text } } = await worker.recognize(image);\n  console.log(text);\n})();\n```\n\n----------------------------------------\n\nTITLE: Creating a Tesseract Worker in JavaScript\nDESCRIPTION: Creates a Tesseract.js worker with specified language and options. The worker is used to manage an instance of Tesseract running in a web worker (browser) or worker thread (Node.js).\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/docs/api.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createWorker } = Tesseract;\nconst worker = await createWorker('eng', 1, {\n  langPath: '...',\n  logger: m => console.log(m),\n});\n```\n\n----------------------------------------\n\nTITLE: Multi-Language OCR Recognition with Tesseract.js\nDESCRIPTION: This snippet demonstrates how to use Tesseract.js with multiple languages for OCR. It creates a worker supporting both English and Traditional Chinese, which can recognize text in either of these languages from the provided image.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/docs/examples.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createWorker } = require('tesseract.js');\n\nconst worker = await createWorker(['eng', 'chi_tra']);\n\n(async () => {\n  const { data: { text } } = await worker.recognize('https://tesseract.projectnaptha.com/img/eng_bw.png');\n  console.log(text);\n  await worker.terminate();\n})();\n```\n\n----------------------------------------\n\nTITLE: OCR on a Specific Region with Tesseract.js\nDESCRIPTION: This example demonstrates how to perform OCR on only a specific rectangular region of an image. By providing coordinates that define a rectangle (left, top, width, height), Tesseract.js will process only that portion of the image, improving efficiency for targeted recognition tasks.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/docs/examples.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createWorker } = require('tesseract.js');\n\nconst worker = await createWorker('eng');\nconst rectangle = { left: 0, top: 0, width: 500, height: 250 };\n\n(async () => {\n  const { data: { text } } = await worker.recognize('https://tesseract.projectnaptha.com/img/eng_bw.png', { rectangle });\n  console.log(text);\n  await worker.terminate();\n})();\n```\n\n----------------------------------------\n\nTITLE: Using Scheduler with Multiple Workers for Parallel Processing in Tesseract.js\nDESCRIPTION: This code demonstrates how to use a scheduler with multiple workers to execute OCR jobs in parallel. It creates 4 workers and adds them to a scheduler, then processes 10 recognition jobs concurrently before terminating all resources. This approach is more efficient for processing multiple images.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/docs/workers_vs_schedulers.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst scheduler = Tesseract.createScheduler();\n\n// Creates worker and adds to scheduler\nconst workerGen = async () => {\n  const worker = await Tesseract.createWorker('eng');\n  scheduler.addWorker(worker);\n}\n\nconst workerN = 4;\n(async () => {\n  const resArr = Array(workerN);\n  for (let i=0; i<workerN; i++) {\n    resArr[i] = workerGen();\n  }\n  await Promise.all(resArr);\n  /** Add 10 recognition jobs */\n  const results = await Promise.all(Array(10).fill(0).map(() => (\n    scheduler.addJob('recognize', 'https://tesseract.projectnaptha.com/img/eng_bw.png').then((x) => console.log(x.data.text))\n  )))\n  await scheduler.terminate(); // It also terminates all workers.\n})();\n```\n\n----------------------------------------\n\nTITLE: Accelerating OCR with Multiple Workers in Tesseract.js\nDESCRIPTION: This snippet demonstrates how to speed up OCR operations by using multiple workers in parallel. It creates a scheduler with two workers and distributes 10 recognition jobs between them, significantly improving throughput for batch processing tasks.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/docs/examples.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createWorker, createScheduler } = require('tesseract.js');\n\nconst scheduler = createScheduler();\nconst worker1 = await createWorker('eng');\nconst worker2 = await createWorker('eng');\n\n(async () => {\n  scheduler.addWorker(worker1);\n  scheduler.addWorker(worker2);\n  /** Add 10 recognition jobs */\n  const results = await Promise.all(Array(10).fill(0).map(() => (\n    scheduler.addJob('recognize', 'https://tesseract.projectnaptha.com/img/eng_bw.png')\n  )))\n  console.log(results);\n  await scheduler.terminate(); // It also terminates all workers.\n})();\n```\n\n----------------------------------------\n\nTITLE: Recognizing Text with a Single Worker in Tesseract.js\nDESCRIPTION: This snippet demonstrates the basic workflow for recognizing text from an image using a single Tesseract.js worker. It creates a worker with English language data, processes an image URL, logs the extracted text, and properly terminates the worker to free memory.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/docs/workers_vs_schedulers.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n(async () => {\n    const worker = await Tesseract.createWorker('eng');\n    const { data: { text } } = await worker.recognize('https://tesseract.projectnaptha.com/img/eng_bw.png');\n    console.log(text);\n    await worker.terminate();\n})();\n```\n\n----------------------------------------\n\nTITLE: OCR with Character Whitelist in Tesseract.js\nDESCRIPTION: This example demonstrates how to restrict Tesseract.js to recognize only specific characters. It sets a whitelist parameter limiting recognition to digits 0-9, which is useful for applications requiring only numeric data extraction.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/docs/examples.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createWorker } = require('tesseract.js');\n\nconst worker = await createWorker('eng');\n\n(async () => {\n  await worker.setParameters({\n    tessedit_char_whitelist: '0123456789',\n  });\n  const { data: { text } } = await worker.recognize('https://tesseract.projectnaptha.com/img/eng_bw.png');\n  console.log(text);\n  await worker.terminate();\n})();\n```\n\n----------------------------------------\n\nTITLE: Setting Tesseract Parameters for OCR\nDESCRIPTION: Demonstrates how to set parameters for the Tesseract API using setParameters(). This example shows setting a character whitelist to constrain recognition to specific characters.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/docs/api.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n(async () => {\n  await worker.setParameters({\n    tessedit_char_whitelist: '0123456789',\n  });\n})\n```\n\n----------------------------------------\n\nTITLE: Recognizing Text in a Specific Region with Tesseract.js\nDESCRIPTION: Shows how to recognize text only in a specific rectangular region of an image by specifying coordinates and dimensions.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/docs/api.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createWorker } = Tesseract;\n(async () => {\n  const worker = await createWorker('eng');\n  const { data: { text } } = await worker.recognize(image, {\n    rectangle: { top: 0, left: 0, width: 100, height: 100 },\n  });\n  console.log(text);\n})();\n```\n\n----------------------------------------\n\nTITLE: Parallel OCR on Multiple Image Regions with Tesseract.js Scheduler\nDESCRIPTION: This example demonstrates how to process multiple image regions in parallel using Tesseract.js scheduler. It creates two workers and assigns recognition jobs for different image regions simultaneously, improving performance through parallelization.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/docs/examples.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createWorker, createScheduler } = require('tesseract.js');\n\nconst scheduler = createScheduler();\nconst worker1 = await createWorker('eng');\nconst worker2 = await createWorker('eng');\nconst rectangles = [\n  {\n    left: 0,\n    top: 0,\n    width: 500,\n    height: 250,\n  },\n  {\n    left: 500,\n    top: 0,\n    width: 500,\n    height: 250,\n  },\n];\n\n(async () => {\n  scheduler.addWorker(worker1);\n  scheduler.addWorker(worker2);\n  const results = await Promise.all(rectangles.map((rectangle) => (\n    scheduler.addJob('recognize', 'https://tesseract.projectnaptha.com/img/eng_bw.png', { rectangle })\n  )));\n  console.log(results.map(r => r.data.text));\n  await scheduler.terminate();\n})();\n```\n\n----------------------------------------\n\nTITLE: OCR on Multiple Image Regions Sequentially with Tesseract.js\nDESCRIPTION: This snippet shows how to recognize text from multiple regions of an image sequentially. It defines an array of rectangle coordinates and processes each region one after another, collecting the results into an array, which is useful for structured data extraction from complex images.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/docs/examples.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createWorker } = require('tesseract.js');\n\nconst worker = await createWorker('eng');\nconst rectangles = [\n  {\n    left: 0,\n    top: 0,\n    width: 500,\n    height: 250,\n  },\n  {\n    left: 500,\n    top: 0,\n    width: 500,\n    height: 250,\n  },\n];\n\n(async () => {\n  const values = [];\n  for (let i = 0; i < rectangles.length; i++) {\n    const { data: { text } } = await worker.recognize('https://tesseract.projectnaptha.com/img/eng_bw.png', { rectangle: rectangles[i] });\n    values.push(text);\n  }\n  console.log(values);\n  await worker.terminate();\n})();\n```\n\n----------------------------------------\n\nTITLE: Customizing Page Segmentation Mode in Tesseract.js\nDESCRIPTION: This snippet shows how to customize the page segmentation mode in Tesseract.js OCR operations. It sets the recognition mode to SINGLE_BLOCK, which treats the entire image as a single block of text, affecting how the engine processes layout elements.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/docs/examples.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createWorker, PSM } = require('tesseract.js');\n\nconst worker = await createWorker('eng');\n\n(async () => {\n  await worker.setParameters({\n    tessedit_pageseg_mode: PSM.SINGLE_BLOCK,\n  });\n  const { data: { text } } = await worker.recognize('https://tesseract.projectnaptha.com/img/eng_bw.png');\n  console.log(text);\n  await worker.terminate();\n})();\n```\n\n----------------------------------------\n\nTITLE: OCR with Progress Logging in Tesseract.js\nDESCRIPTION: This example shows how to add progress tracking to Tesseract.js OCR operations. It creates a worker with a logger callback that displays progress messages during recognition, allowing users to monitor the OCR process.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/docs/examples.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createWorker } = require('tesseract.js');\n\nconst worker = await createWorker('eng', 1, {\n  logger: m => console.log(m), // Add logger here\n});\n\n(async () => {\n  const { data: { text } } = await worker.recognize('https://tesseract.projectnaptha.com/img/eng_bw.png');\n  console.log(text);\n  await worker.terminate();\n})();\n```\n\n----------------------------------------\n\nTITLE: Detecting Orientation and Script in an Image\nDESCRIPTION: Demonstrates how to perform Orientation and Script Detection (OSD) on an image. Requires a worker with legacy core and language data support.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/docs/api.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createWorker } = Tesseract;\n(async () => {\n  const worker = await createWorker('eng', 1, {legacyCore: true, legacyLang: true});\n  const { data } = await worker.detect(image);\n  console.log(data);\n})();\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Paths for Tesseract.js Worker\nDESCRIPTION: Example of creating a Tesseract worker with custom paths for the worker file, language data, and core files. This allows for specifying custom CDN locations or local paths for all Tesseract.js dependencies.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/docs/local-installation.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst worker = await createWorker('eng', 1, {\n  workerPath: 'https://cdn.jsdelivr.net/npm/tesseract.js@v5.0.0/dist/worker.min.js',\n  langPath: 'https://tessdata.projectnaptha.com/4.0.0',\n  corePath: 'https://cdn.jsdelivr.net/npm/tesseract.js-core@v5.0.0',\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Core Path in Tesseract.js\nDESCRIPTION: This snippet demonstrates how to properly set the corePath in Tesseract.js. It's crucial to set it to a directory containing all four required .wasm.js files for optimal performance and compatibility.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/docs/performance.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncorePath: '/path/to/directory/containing/wasm/files/'\n```\n\n----------------------------------------\n\nTITLE: Reinitializing a Tesseract Worker with New Settings\nDESCRIPTION: Shows how to reinitialize an existing Tesseract.js worker with different language and OCR Engine Mode settings.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/docs/api.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait worker.reinitialize('eng', 1);\n```\n\n----------------------------------------\n\nTITLE: Setting Fast Language Data Path in Tesseract.js\nDESCRIPTION: This code shows how to set the langPath to use fast language data in Tesseract.js. This can potentially improve speed but may affect recognition accuracy.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/docs/performance.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlangPath: 'https://tessdata.projectnaptha.com/4.0.0_fast'\n```\n\n----------------------------------------\n\nTITLE: Adding Worker to Tesseract.js Scheduler\nDESCRIPTION: Shows how to add a worker to the scheduler's worker pool for parallel processing.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/docs/api.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createWorker, createScheduler } = Tesseract;\nconst scheduler = createScheduler();\nconst worker = await createWorker();\nscheduler.addWorker(worker);\n```\n\n----------------------------------------\n\nTITLE: Adding Jobs to Tesseract.js Scheduler\nDESCRIPTION: Demonstrates adding recognition and detection jobs to the scheduler's job queue.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/docs/api.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n(async () => {\n const { data: { text } } = await scheduler.addJob('recognize', image, options);\n const { data } = await scheduler.addJob('detect', image);\n})();\n```\n\n----------------------------------------\n\nTITLE: Creating Tesseract.js Scheduler\nDESCRIPTION: Demonstrates creation of a scheduler instance for managing multiple workers and job queues.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/docs/api.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createScheduler } = Tesseract;\nconst scheduler = createScheduler();\n```\n\n----------------------------------------\n\nTITLE: Terminating Tesseract.js Scheduler\nDESCRIPTION: Shows how to properly terminate all workers in a scheduler for cleanup.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/docs/api.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n(async () => {\n  await scheduler.terminate();\n})();\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Worker Path for Tesseract.js in Node.js\nDESCRIPTION: Example of how to manually set the workerPath argument to resolve module not found errors when using Tesseract.js in a Node.js environment. This solution helps when frameworks interfere with the automatic worker detection.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/docs/faq.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst worker = await createWorker(\"eng\", 1, {workerPath: \"./node_modules/tesseract.js/src/worker-script/node/index.js\"});\n```\n\n----------------------------------------\n\nTITLE: Terminating a Tesseract Worker\nDESCRIPTION: Shows how to properly terminate a Tesseract worker and clean up resources when they are no longer needed.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/docs/api.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n(async () => {\n  await worker.terminate();\n})();\n```\n\n----------------------------------------\n\nTITLE: Writing Text Files with Tesseract.js Worker\nDESCRIPTION: Demonstrates how to write text content to a file in MEMFS using the worker.writeText method. This is useful for features requiring Tesseract.js to read from the file system.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/docs/api.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n(async () => {\n  await worker.writeText('tmp.txt', 'Hi\\nTesseract.js\\n');\n})();\n```\n\n----------------------------------------\n\nTITLE: Reading Text Files with Tesseract.js Worker\nDESCRIPTION: Shows how to read text content from a file in MEMFS using the worker.readText method. Useful for verifying file contents.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/docs/api.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n(async () => {\n  const { data } = await worker.readText('tmp.txt');\n  console.log(data);\n})();\n```\n\n----------------------------------------\n\nTITLE: Removing Files with Tesseract.js Worker\nDESCRIPTION: Demonstrates file removal from MEMFS using worker.removeFile method to free up memory.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/docs/api.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n(async () => {\n  await worker.removeFile('tmp.txt');\n})();\n```\n\n----------------------------------------\n\nTITLE: Generic File System Operations with Tesseract.js Worker\nDESCRIPTION: Shows usage of the generic worker.FS method for custom file system operations using Emscripten's Filesystem API.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/docs/api.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n(async () => {\n  await worker.FS('writeFile', ['tmp.txt', 'Hi\\nTesseract.js\\n']);\n  // equal to:\n  // await worker.writeText('tmp.txt', 'Hi\\nTesseract.js\\n');\n})();\n```\n\n----------------------------------------\n\nTITLE: Disabling Cache for Testing in Tesseract.js\nDESCRIPTION: This code snippet shows how to disable caching in Tesseract.js for testing purposes. It's used to simulate the experience of a first-time user by setting the cacheMethod to 'none' in the createWorker options.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/docs/performance.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncacheMethod: 'none'\n```\n\n----------------------------------------\n\nTITLE: Configuring Tesseract.js Logging\nDESCRIPTION: Demonstrates how to enable detailed logging for debugging purposes.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/docs/api.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst { setLogging } = Tesseract;\nsetLogging(true);\n```\n\n----------------------------------------\n\nTITLE: Including Tesseract.js via CDN in HTML\nDESCRIPTION: Shows how to include Tesseract.js in a web page using a CDN script tag. This approach makes the Tesseract object globally available for use in browser environments.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- v5 -->\n<script src='https://cdn.jsdelivr.net/npm/tesseract.js@5/dist/tesseract.min.js'></script>\n```\n\n----------------------------------------\n\nTITLE: Installing Tesseract.js via npm or yarn\nDESCRIPTION: Command-line instructions for installing Tesseract.js using npm or yarn package managers. Includes commands for installing both the latest version and specific older versions.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# For latest version\nnpm install tesseract.js\nyarn add tesseract.js\n\n# For old versions\nnpm install tesseract.js@3.0.3\nyarn add tesseract.js@3.0.3\n```\n\n----------------------------------------\n\nTITLE: Development Setup for Tesseract.js Contributors\nDESCRIPTION: Instructions for setting up a development environment for Tesseract.js. Shows how to clone the repository, install dependencies, and start the development server.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# First we clone the repository\ngit clone https://github.com/naptha/tesseract.js.git\ncd tesseract.js\n\n# Then we install the dependencies\nnpm install\n\n# And finally we start the development server\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Building Static Files for Tesseract.js\nDESCRIPTION: Command for building the compiled static files for Tesseract.js. This produces distribution files in the dist directory.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Tesseract.js Development\nDESCRIPTION: Commands to run linting and tests for Tesseract.js. These should be executed before submitting a pull request to ensure code quality.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm run lint\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Defining Supported Image Format Regular Expression in Markdown\nDESCRIPTION: This code snippet defines a regular expression pattern for matching base64 encoded image strings. It is used to identify valid image input formats for Tesseract.js functions.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/docs/image-format.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ndata:image\\/([a-zA-Z]*);base64,([^\"]*)\n```\n\n----------------------------------------\n\nTITLE: Displaying Organization Logos for Tesseract.js Supporters\nDESCRIPTION: This HTML code creates a grid of linked images representing organizations supporting Tesseract.js. Each link directs to the organization's website, and the image is their avatar from OpenCollective.\nSOURCE: https://github.com/naptha/tesseract.js/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://opencollective.com/tesseractjs/organization/0/website\"><img src=\"https://opencollective.com/tesseractjs/organization/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/tesseractjs/organization/1/website\"><img src=\"https://opencollective.com/tesseractjs/organization/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/tesseractjs/organization/2/website\"><img src=\"https://opencollective.com/tesseractjs/organization/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/tesseractjs/organization/3/website\"><img src=\"https://opencollective.com/tesseractjs/organization/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/tesseractjs/organization/4/website\"><img src=\"https://opencollective.com/tesseractjs/organization/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/tesseractjs/organization/5/website\"><img src=\"https://opencollective.com/tesseractjs/organization/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/tesseractjs/organization/6/website\"><img src=\"https://opencollective.com/tesseractjs/organization/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/tesseractjs/organization/7/website\"><img src=\"https://opencollective.com/tesseractjs/organization/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/tesseractjs/organization/8/website\"><img src=\"https://opencollective.com/tesseractjs/organization/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/tesseractjs/organization/9/website\"><img src=\"https://opencollective.com/tesseractjs/organization/9/avatar.svg\"></a>\n```"
  }
]