[
  {
    "owner": "microsoft",
    "repo": "cswin32",
    "content": "TITLE: Using Generated P/Invoke Methods in C#\nDESCRIPTION: Example of how to use the generated P/Invoke methods in C# code, specifically calling the CreateFile function from the Windows.Win32.PInvoke class.\nSOURCE: https://github.com/microsoft/cswin32/blob/main/docfx/docs/getting-started.md#2025-04-22_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Windows.Win32;\n\nPInvoke.CreateFile(/*args*/);\n```\n\n----------------------------------------\n\nTITLE: Using Generated Win32 API Bindings in C#\nDESCRIPTION: Demonstrates how to use the generated Win32 API bindings in C# code. This example shows calling the CreateFile function through the PInvoke class, utilizing various Win32 constants and enums.\nSOURCE: https://github.com/microsoft/cswin32/blob/main/src/Microsoft.Windows.CsWin32/README.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing SafeHandle f = PInvoke.CreateFile(\n    \"some.txt\",\n    (uint)GENERIC_ACCESS_RIGHTS.GENERIC_READ,\n    FILE_SHARE_MODE.FILE_SHARE_READ,\n    lpSecurityAttributes: null,\n    FILE_CREATION_DISPOSITION.CREATE_ALWAYS,\n    FILE_FLAGS_AND_ATTRIBUTES.FILE_ATTRIBUTE_NORMAL,\n    hTemplateFile: null);\n```\n\n----------------------------------------\n\nTITLE: Installing CsWin32 Package with PowerShell\nDESCRIPTION: PowerShell command to add the Microsoft.Windows.CsWin32 package to your project using the dotnet CLI.\nSOURCE: https://github.com/microsoft/cswin32/blob/main/docfx/docs/getting-started.md#2025-04-22_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\ndotnet add package Microsoft.Windows.CsWin32\n```\n\n----------------------------------------\n\nTITLE: Configuring CsWin32 for Trimming and AOT Support\nDESCRIPTION: NativeMethods.json configuration that disables the runtime marshaler to support trimming, AOT compilation, and DisableRuntimeMarshalling.\nSOURCE: https://github.com/microsoft/cswin32/blob/main/docfx/docs/getting-started.md#2025-04-22_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"$schema\": \"https://aka.ms/CsWin32.schema.json\",\n  \"allowMarshaling\": false\n}\n```\n\n----------------------------------------\n\nTITLE: CsWin32 Configuration with JSON\nDESCRIPTION: Example NativeMethods.json configuration file with schema reference that controls code generation behavior. This example disables single file output.\nSOURCE: https://github.com/microsoft/cswin32/blob/main/docfx/docs/getting-started.md#2025-04-22_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"$schema\": \"https://aka.ms/CsWin32.schema.json\",\n  \"emitSingleFile\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Required Win32 APIs in NativeMethods.txt\nDESCRIPTION: Example content of a NativeMethods.txt file listing the required Win32 APIs. This file is used to specify which APIs should be generated for use in the C# project.\nSOURCE: https://github.com/microsoft/cswin32/blob/main/src/Microsoft.Windows.CsWin32/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCreateFile\nIUIRibbon\nS_OK\nNTSTATUS\nIsPwrHibernateAllowed\nISpellChecker\n```\n\n----------------------------------------\n\nTITLE: Installing Supporting Packages for .NET Framework/Standard Projects\nDESCRIPTION: PowerShell commands to add System.Memory and System.Runtime.CompilerServices.Unsafe packages, which improve the generated code when targeting .NET Framework 4.5+ or .NET Standard 2.0.\nSOURCE: https://github.com/microsoft/cswin32/blob/main/docfx/docs/getting-started.md#2025-04-22_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\ndotnet add package System.Memory\ndotnet add package System.Runtime.CompilerServices.Unsafe\n```\n\n----------------------------------------\n\nTITLE: Installing Newer Win32Metadata Package\nDESCRIPTION: PowerShell command to add the Microsoft.Windows.SDK.Win32Metadata package, which provides the metadata used as the source for code generation.\nSOURCE: https://github.com/microsoft/cswin32/blob/main/docfx/docs/getting-started.md#2025-04-22_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\ndotnet add package Microsoft.Windows.SDK.Win32Metadata --prerelease\n```\n\n----------------------------------------\n\nTITLE: Targeting x64 Architecture in C# Project\nDESCRIPTION: This XML snippet shows how to set the PlatformTarget property in a .csproj file to target the x64 architecture. This will produce an x64-specific assembly that will only load in x64 processes.\nSOURCE: https://github.com/microsoft/cswin32/blob/main/docfx/docs/ArchSpecificAPIs.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PlatformTarget>x64</PlatformTarget>\n```\n\n----------------------------------------\n\nTITLE: Defining CsWin32 Metadata Items in MSBuild XML\nDESCRIPTION: This XML snippet shows how to use MSBuild to specify the required metadata and native libraries for integrating a third-party native library with CsWin32. It defines items for the projection metadata WinMD file, as well as the allowed local native DLLs for deployment. Dependencies include the native WinMD file and the target .dll. The input parameters are the paths to these files, and the output is ready integration for consuming projects via package reference. This snippet should be included in the .props file of the NuGet package.\nSOURCE: https://github.com/microsoft/cswin32/blob/main/docfx/docs/3rdPartyMetadata.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Project>\\n  <ItemGroup>\\n    <ProjectionMetadataWinmd Include=\\\"$(MSBuildThisFileDirectory)yournativelib.winmd\\\" />\\n    <AppLocalAllowedLibraries Include=\\\"yournativelib.dll\\\" />\\n  </ItemGroup>\\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for CsWin32 in PowerShell\nDESCRIPTION: PowerShell commands to install the System.Memory and System.Runtime.CompilerServices.Unsafe packages needed for CsWin32 when targeting .NET Framework 4.5+ or .NET Standard 2.0. These packages provide APIs that improve the code generated by CsWin32.\nSOURCE: https://github.com/microsoft/cswin32/blob/main/src/Microsoft.Windows.CsWin32/readme.txt#2025-04-22_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\ndotnet add package System.Memory\ndotnet add package System.Runtime.CompilerServices.Unsafe\n```\n\n----------------------------------------\n\nTITLE: Configuring NuGet for Daily Builds\nDESCRIPTION: XML configuration to add to your nuget.config file for accessing daily builds of CsWin32 from the Azure DevOps feed.\nSOURCE: https://github.com/microsoft/cswin32/blob/main/docfx/docs/getting-started.md#2025-04-22_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<add key=\"winsdk\" value=\"https://pkgs.dev.azure.com/azure-public/winsdk/_packaging/CI/nuget/v3/index.json\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing the CsWin32 environment using PowerShell\nDESCRIPTION: The command to run the initialization script in the repository root for setting up dependencies. The script can be run with parameters such as -InstallLocality Machine for machine-wide installations.\nSOURCE: https://github.com/microsoft/cswin32/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ninit.ps1\n```\n\nLANGUAGE: powershell\nCODE:\n```\ninit.ps1 -InstallLocality Machine\n```\n\n----------------------------------------\n\nTITLE: Building documentation with DocFX for CsWin32\nDESCRIPTION: Commands to build and locally preview the documentation using DocFX. The first command builds and serves the documentation site, while the second rebuilds the site while the server is running.\nSOURCE: https://github.com/microsoft/cswin32/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet docfx --serve\n```\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet docfx\n```\n\n----------------------------------------\n\nTITLE: Restricted NormalizeWhitespace Extension Methods\nDESCRIPTION: Collection of NormalizeWhitespace extension methods that should be avoided due to performance concerns. Instead, whitespace trivia should be added manually.\nSOURCE: https://github.com/microsoft/cswin32/blob/main/src/Microsoft.Windows.CsWin32/BannedSymbols.txt#2025-04-22_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.CodeAnalysis.CSharp.SyntaxExtensions.NormalizeWhitespace(Microsoft.CodeAnalysis.SyntaxToken)\nMicrosoft.CodeAnalysis.CSharp.SyntaxExtensions.NormalizeWhitespace(Microsoft.CodeAnalysis.SyntaxTriviaList)\nMicrosoft.CodeAnalysis.SyntaxNodeExtensions.NormalizeWhitespace<T>\n```\n\n----------------------------------------\n\nTITLE: Restricted Syntax Node Extension Methods\nDESCRIPTION: Collection of syntax node extension methods that should be avoided due to implicit elastic trivia handling. This includes methods for adding base list types and accessor list accessors.\nSOURCE: https://github.com/microsoft/cswin32/blob/main/src/Microsoft.Windows.CsWin32/BannedSymbols.txt#2025-04-22_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.AddBaseListTypes()\nMicrosoft.CodeAnalysis.CSharp.Syntax.PropertyDeclarationSyntax.AddAccessorListAccessors()\nMicrosoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax.AddArgumentListArguments()\n```\n\n----------------------------------------\n\nTITLE: Restricted SyntaxFactory Methods\nDESCRIPTION: SyntaxFactory methods that should be avoided because they use implied or elastic trivia, which can cause unexpected behavior. This includes various Literal overloads for different data types and Block construction.\nSOURCE: https://github.com/microsoft/cswin32/blob/main/src/Microsoft.Windows.CsWin32/BannedSymbols.txt#2025-04-22_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.CodeAnalysis.CSharp.SyntaxFactory.Block()\nMicrosoft.CodeAnalysis.CSharp.SyntaxFactory.Token()\nMicrosoft.CodeAnalysis.CSharp.SyntaxFactory.Literal()\n```\n\n----------------------------------------\n\nTITLE: Using nbgv command for release tagging in CsWin32\nDESCRIPTION: Command to create a Git tag for a particular commit intended for release using the Nerdbank.GitVersioning tool.\nSOURCE: https://github.com/microsoft/cswin32/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nnbgv tag\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice (Text)\nDESCRIPTION: This text snippet provides the standard boilerplate notice recommended by the Apache License 2.0 appendix. It is intended to be included in the comments of source files, replacing bracketed placeholders like `[yyyy]` and `[name of copyright owner]` with specific project information. It asserts the copyright and the license (Apache 2.0) under which the code is distributed, pointing to the official license URL.\nSOURCE: https://github.com/microsoft/cswin32/blob/main/NOTICE.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Defining Artifact Categories in cswin32 Project Configuration\nDESCRIPTION: Configuration entries specifying handling rules for various project artifacts. It identifies signed SBOM (Software Bill of Materials) manifest files and marks YamlDotNet DLL as open-source software.\nSOURCE: https://github.com/microsoft/cswin32/blob/main/azure-pipelines/no_authenticode.txt#2025-04-22_snippet_0\n\nLANGUAGE: config\nCODE:\n```\nbin\\packages\\release\\vsix\\_manifest\\manifest.cat,sbom signed\nbin\\packages\\release\\vsix\\_manifest\\spdx_2.2\\manifest.cat,sbom signed\n*\\yamldotnet.dll,oss\n```\n\n----------------------------------------\n\nTITLE: Defining DocFX Layout in Markdown\nDESCRIPTION: A YAML front matter block that specifies the layout type as 'landing' for this DocFX documentation page.\nSOURCE: https://github.com/microsoft/cswin32/blob/main/docfx/index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n_layout: landing\n---\n```"
  }
]