[
  {
    "owner": "iconoir-icons",
    "repo": "iconoir",
    "content": "TITLE: Importing and Using Iconoir Icons in React\nDESCRIPTION: Basic example of importing and using the Iconoir component in a React application. This demonstrates the minimal implementation needed to add an Iconoir icon to your React component.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/packages/iconoir-react/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Iconoir } from 'iconoir-react';\nimport React from 'react';\n\nfunction App() {\n  return <Iconoir />;\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Importing Iconoir SVG in JavaScript\nDESCRIPTION: Example of importing an individual SVG icon from the Iconoir package in JavaScript after installing it via npm, yarn, pnpm, or Bun.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Iconoir from 'iconoir/icons/iconoir.svg';\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Iconoir Flutter Icons in a Flutter Application\nDESCRIPTION: Example code demonstrating how to import and use Iconoir icons in a Flutter application. Creates a simple app with a demo page that displays an Iconoir icon.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/packages/iconoir-flutter/README.md#2025-04-21_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\nimport 'package:iconoir_flutter/iconoir_flutter.dart';\n\nvoid main() {\n  runApp(const App());\n}\n\nclass App extends StatelessWidget {\n  const App({ super.key });\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      home: DemoPage(),\n    );\n  }\n}\n\nclass DemoPage extends StatelessWidget {\n  const DemoPage({ super.key });\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Container(\n        child: const Iconoir(),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Iconoir in React Native\nDESCRIPTION: A simple example showing how to import and use the Iconoir component in a React Native application. This demonstrates the most basic implementation within a View component.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/packages/iconoir-react-native/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Iconoir } from 'iconoir-react-native';\nimport React from 'react';\nimport { View } from 'react-native';\n\nfunction App() {\n  return (\n    <View>\n      <Iconoir />\n    </View>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Using Iconoir Component in Vue\nDESCRIPTION: Demonstrates how to import and use the Iconoir component in a Vue template. This basic example shows the simplest way to render an Iconoir icon.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/packages/iconoir-vue/README.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { Iconoir } from '@iconoir/vue';\n</script>\n\n<template>\n  <Iconoir />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Importing Iconoir CSS Library\nDESCRIPTION: Demonstrates how to import the Iconoir CSS library using a CDN link in HTML.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/css/README.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/iconoir-icons/iconoir@main/css/iconoir.css\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Iconoir Icons with Props\nDESCRIPTION: Example showing how to customize Iconoir icons by passing standard SVG properties as props. This allows for changing the icon's color, size, and other attributes.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/packages/iconoir-react/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Iconoir color=\"red\" height={36} width={36} />;\n```\n\n----------------------------------------\n\nTITLE: Using IconoirProvider for Default Icon Properties\nDESCRIPTION: Example of using the IconoirProvider component to set default properties for all Iconoir icons within its context. This eliminates the need to specify the same props for each icon instance.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/packages/iconoir-react/README.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Check, IconoirProvider } from 'iconoir-react';\n\nreturn (\n  <IconoirProvider\n    iconProps={{\n      color: '#AAAAAA',\n      strokeWidth: 1,\n      width: '1em',\n      height: '1em',\n    }}\n  >\n    <SomeOtherContainer>\n      <Check />\n    </SomeOtherContainer>\n  </IconoirProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Iconoir CSS in HTML\nDESCRIPTION: Example of importing the Iconoir CSS library using a CDN link in an HTML file, which provides access to all Iconoir icons through CSS classes.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/iconoir-icons/iconoir@main/css/iconoir.css\" />\n```\n\n----------------------------------------\n\nTITLE: Using Iconoir Icon with CSS Classes in HTML\nDESCRIPTION: Example of using an Iconoir icon in HTML by applying the appropriate CSS class. The class naming convention is 'iconoir-' followed by the icon name.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<i class=\"iconoir-hand-brake\"></i>\n```\n\n----------------------------------------\n\nTITLE: Installing Iconoir Flutter Package via Flutter CLI\nDESCRIPTION: Command to add the Iconoir Flutter package to your Flutter project using the pub package manager.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/packages/iconoir-flutter/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub add iconoir_flutter\n```\n\n----------------------------------------\n\nTITLE: Using Iconoir Icon in HTML\nDESCRIPTION: Shows how to implement an Iconoir icon using the iconoir- class prefix with a specific icon name. Icons are displayed inline-block and inherit font size.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/css/README.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<i class=\"iconoir-hand-brake\"></i>\n```\n\n----------------------------------------\n\nTITLE: Using Iconoir in UIKit (Swift)\nDESCRIPTION: Example of using Iconoir icons in a UIKit-based Swift application by creating a UIImageView with an Iconoir icon after importing the Iconoir-swift package.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nimport UIKit\nimport Iconoir\n\nlet imageView = UIImageView(image: Iconoir.bell.asUIImage)\n```\n\n----------------------------------------\n\nTITLE: Using Iconoir in SwiftUI\nDESCRIPTION: Example of using Iconoir icons in a SwiftUI-based Swift application, showing how to integrate an icon into a view with custom styling like color and size.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport SwiftUI\nimport Iconoir\n\nstruct ContentView: View {\n    var body: some View {\n        Iconoir.bell.asImage\n            .foregroundColor(.blue)\n            .font(.system(size: 24))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Iconoir Props in React Native\nDESCRIPTION: An example showing how to customize Iconoir components by passing props such as color, height, and width. This demonstrates how to modify the appearance of an icon instance.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/packages/iconoir-react-native/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Iconoir color=\"red\" height={36} width={36} />;\n```\n\n----------------------------------------\n\nTITLE: Using IconoirProvider for Default Props in React Native\nDESCRIPTION: An example demonstrating the IconoirProvider component which allows setting default props for all Iconoir icons within its scope. This is useful for maintaining consistent styling across multiple icon instances.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/packages/iconoir-react-native/README.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Check, IconoirProvider } from 'iconoir-react-native';\n\nreturn (\n  <IconoirProvider\n    iconProps={{\n      color: '#AAAAAA',\n      strokeWidth: 1,\n      width: '1em',\n      height: '1em',\n    }}\n  >\n    <SomeOtherContainer>\n      <Check />\n    </SomeOtherContainer>\n  </IconoirProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Iconoir Component Props\nDESCRIPTION: Shows how to customize the Iconoir component by passing SVG properties as props. This example sets the color, height, and width of the icon.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/packages/iconoir-vue/README.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<Iconoir color=\"red\" height=\"36\" width=\"36\" />\n```\n\n----------------------------------------\n\nTITLE: Using IconoirProvider for Default Props\nDESCRIPTION: Demonstrates the use of IconoirProvider to set default props for all Iconoir components within its scope. This example sets default color, stroke-width, width, and height for icons.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/packages/iconoir-vue/README.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import { IconoirProvider, Check } from '@iconoir/vue';\n</script>\n\n<template>\n  <IconoirProvider\n    :icon-props=\"{\n      'color': '#AAAAAA',\n      'stroke-width': 1,\n      'width': '1em',\n      'height': '1em',\n    }\"\n  >\n    <SomeOtherContainer>\n      <Check />\n    </SomeOtherContainer>\n  </IconoirProvider>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Icon Naming Pattern Structure\nDESCRIPTION: Defines the foundational naming pattern used for Iconoir icons, consisting of Object, Modifier, and Container components.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/NAMING_CONVENTION.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Object]-[Modifier]-[Container]\n```\n\n----------------------------------------\n\nTITLE: Formatting Markdown Document for Contribution Guidelines\nDESCRIPTION: Markdown formatted document that outlines the contribution guidelines for the Iconoir project, including sections for pull requests, icon requests and bug reports.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: How to contribute\n---\n\n# How to contribute\n\n✨ First off, thanks for taking the time to contribute! ✨\n\nThe following is a quick set of guidelines for contributing to Iconoir.\n\n## Pull Requests\n\n> **ℹ️ Note:** At the moment, to keep consistency, quality, and make the whole\n> process time-efficient, we are not accepting pull requests containing icons. You can open an issue\n> to request a new icon.\n\nPull requests for new features, bug fixes, etc. are often appreciated.\n\n> 👉 We're looking for help with fonts and libraries.\n\nGuidelines for pull requests:\n\n> **Make your commit messages as descriptive as possible.** Include as much information as you can.\n> Explain anything that the file diffs themselves won't make apparent.\n\n> **Target main.** Most of bugfixes or new features should go to the main branch.\n\n> **Include only related work.** If your pull request has unrelated commits, it won't be accepted.\n\n> **Packages and Libraries.** If you're adding or updating a package or React / Vue library, the\n> target folder is `/packages/iconoir-[LIBRARY_NAME]`.\n\n> **Fonts.** If you're adding or updating fonts, the target folder is `/fonts/`.\n\n## Icon Requests\n\nBefore creating an icon request, please search to see if someone has requested the icon already. If\nthere is an open request, please upvote it.\n\nIf the icon has not already been requested, [create an\nissue](https://github.com/iconoir-icons/iconoir/issues/new/choose) and add as much information as\npossible. Follow the rules you see when opening a new bug report.\n\n## Bug Reports\n\nBefore reporting an issue, please search to see if someone has filed a similar issue before. If\nthere is already an open issue, please upvote it and/or leave a comment with additional information.\nFollow the rules you see when opening a new bug report.\n```\n\n----------------------------------------\n\nTITLE: Icon List Format in Markdown\nDESCRIPTION: List of new icons added in version 7.11.0, formatted as a markdown bullet list with backtick-wrapped icon names\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/packages/iconoir-flutter/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `bug`  \n- `dots-grid-3x3`  \n- `whatsapp`  \n- `arrow-down-left-square`  \n- `arrow-left-tag`  \n- `arrow-right-tag`\n```\n\n----------------------------------------\n\nTITLE: Version Header Format in Markdown\nDESCRIPTION: Standard version header format used throughout the changelog, including version number, link, and date\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/packages/iconoir-flutter/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<a id=\"v7.11.0\"></a>\n# [v7.11.0](https://github.com/iconoir-icons/iconoir/releases/tag/v7.11.0) - 2025-04-12\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Project Configuration in CMake\nDESCRIPTION: Initializes the CMake project with minimum required version and languages, sets the binary name, and configures build options for Debug, Profile, and Release modes.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/packages/iconoir-flutter/example/windows/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(example LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"example\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Define build configuration option.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Profile Build Mode Settings in CMake\nDESCRIPTION: Defines settings for the Profile build mode, inheriting flags from Release mode but allowing for profiling-specific behaviors.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/packages/iconoir-flutter/example/windows/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Unicode Definitions for Windows Projects\nDESCRIPTION: Adds the Unicode and _UNICODE definitions required for proper Unicode support in Windows applications.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/packages/iconoir-flutter/example/windows/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings Function in CMake\nDESCRIPTION: Creates a function to apply standard compilation settings to targets, including C++17 support, warning levels, and exception handling configurations.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/packages/iconoir-flutter/example/windows/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Library and Application Build Rules\nDESCRIPTION: Configures paths for the Flutter managed directory, adds subdirectories for Flutter and runner code, and includes generated plugin build rules.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/packages/iconoir-flutter/example/windows/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Settings for Windows Flutter App\nDESCRIPTION: Sets up installation directories and default values for the build bundle, ensuring files are properly placed for Windows execution.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/packages/iconoir-flutter/example/windows/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Application Components\nDESCRIPTION: Defines installation rules for the binary executable, ICU data file, Flutter library, and plugin libraries, ensuring all components are properly installed.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/packages/iconoir-flutter/example/windows/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Managing Flutter Assets Installation\nDESCRIPTION: Ensures clean asset installation by removing previous assets and copying the current build's assets to the appropriate directory. Also configures AOT library installation for Profile and Release builds.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/packages/iconoir-flutter/example/windows/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library and Headers in CMake\nDESCRIPTION: Sets up the Flutter Windows DLL and associated header files, creating an interface library target that other components can link against.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/packages/iconoir-flutter/example/windows/flutter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Plugin Wrapper Library\nDESCRIPTION: Creates a static library for Flutter plugin wrapper functionality, including core implementations and plugin registrar components.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/packages/iconoir-flutter/example/windows/flutter/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter App Wrapper Library\nDESCRIPTION: Creates a static library for Flutter application wrapper functionality, including core implementations and app-specific components.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/packages/iconoir-flutter/example/windows/flutter/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Tool Backend Build Commands\nDESCRIPTION: Configures custom build commands to generate Flutter-related files and libraries using the Flutter tool backend.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/packages/iconoir-flutter/example/windows/flutter/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Application Build with CMake\nDESCRIPTION: Defines the CMake configuration for building a Flutter application on Windows. It specifies source files for compilation, applies standard settings, defines version information through preprocessor definitions, and links required libraries including Flutter dependencies.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/packages/iconoir-flutter/example/windows/runner/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add preprocessor definitions for the build version.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\n# Add dependency libraries and include directories. Add any application-specific\n# dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Linux Application\nDESCRIPTION: Sets up the CMake project with minimum version requirement, project name, and language. Defines the binary name and application ID for the Flutter app.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/packages/iconoir-flutter/example/linux/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"example\")\nset(APPLICATION_ID \"com.example.example\")\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Policies and Installation Settings\nDESCRIPTION: Sets CMake policies, defines installation paths, and configures cross-building settings if a sysroot is specified.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/packages/iconoir-flutter/example/linux/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration and Compilation Settings\nDESCRIPTION: Sets default build type to Debug and defines a function to apply standard compilation settings to targets.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/packages/iconoir-flutter/example/linux/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter and System Dependencies\nDESCRIPTION: Adds the Flutter library, sets up system-level dependencies like GTK, and defines the main application target.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/packages/iconoir-flutter/example/linux/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\napply_standard_settings(${BINARY_NAME})\n\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Rules for Flutter Application\nDESCRIPTION: Sets up installation rules for the application bundle, including executable, data files, libraries, and assets.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/packages/iconoir-flutter/example/linux/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing Flutter Linux CMake Configuration\nDESCRIPTION: Sets the minimum CMake version requirement and includes the generated configuration from Flutter tool.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/packages/iconoir-flutter/example/linux/flutter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# This file controls Flutter-level build steps. It should not be edited.\ncmake_minimum_required(VERSION 3.10)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Implementing List Prepend Function in CMake\nDESCRIPTION: Defines a function that prepends a prefix to each element in a list, functioning as a replacement for list(TRANSFORM ... PREPEND ...) which isn't available in CMake 3.10.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/packages/iconoir-flutter/example/linux/flutter/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Serves the same purpose as list(TRANSFORM ... PREPEND ...),\n# which isn't available in 3.10.\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Linux System Dependencies\nDESCRIPTION: Finds and configures required system-level dependencies for Flutter Linux integration, including GTK, GLIB, and GIO via PkgConfig.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/packages/iconoir-flutter/example/linux/flutter/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter Library ===\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Variables for Parent Scope\nDESCRIPTION: Publishes Flutter-related paths and variables to the parent scope for use in the install step and other CMake files.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/packages/iconoir-flutter/example/linux/flutter/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Headers and Interface Library\nDESCRIPTION: Configures the Flutter library headers list and creates an interface library for Flutter that includes necessary include directories and links to required libraries.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/packages/iconoir-flutter/example/linux/flutter/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend Build Command\nDESCRIPTION: Sets up a custom command and target to run the Flutter tool backend script. This ensures the Flutter library and headers are generated properly during the build process.\nSOURCE: https://github.com/iconoir-icons/iconoir/blob/main/packages/iconoir-flutter/example/linux/flutter/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```"
  }
]