[
  {
    "owner": "dubinc",
    "repo": "docs",
    "content": "TITLE: Base URL Configuration for Dub API\nDESCRIPTION: The base URL endpoint for all Dub API requests. All API calls must be made over HTTPS for security.\nSOURCE: https://github.com/dubinc/docs/blob/main/api-reference/introduction.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://api.dub.co\n```\n\n----------------------------------------\n\nTITLE: Authentication Header Format for Dub API\nDESCRIPTION: Example of the required Authorization header format using Bearer token authentication. The token must be included as shown for all authenticated API requests.\nSOURCE: https://github.com/dubinc/docs/blob/main/api-reference/introduction.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAuthorization: Bearer <Your-Token>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Link Analytics by Link ID in Next.js API Route\nDESCRIPTION: This code demonstrates how to retrieve analytics for a link using the link's ID. It gets timeseries analytics for the last 7 days and returns the data as a JSON response.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/nextjs.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ClicksTimeseries } from \"dub/models/components\";\n\nexport async function GET() {\n  try {\n    // Retrieve the timeseries analytics for the last 7 days for a link\n    const response = await dub.analytics.retrieve({\n      linkId: \"clv3o9p9q000au1h0mc7r6l63\",\n      interval: \"7d\",\n      groupBy: \"timeseries\",\n    });\n\n    const timeseries = response as ClicksTimeseries[];\n\n    return Response.json(timeseries);\n  } catch (error) {\n    return Response.json({ error }, { status: 500 });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Dub API Error Response in JSON\nDESCRIPTION: This snippet demonstrates the structure of an error response from the Dub API. It includes an error object with a code, message, and documentation URL for more information.\nSOURCE: https://github.com/dubinc/docs/blob/main/api-reference/errors.mdx#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": {\n    \"code\": \"not_found\",\n    \"message\": \"The requested resource was not found.\",\n    \"doc_url\": \"https://dub.co/docs/api-reference/errors#not-found\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Link with dub.links.create in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a new link using the dub.links.create method. It takes a URL as an argument and returns the created link object.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/links/create.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait dub.links.create({\n  url: \"https://www.google.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Dub SDK Usage in TypeScript\nDESCRIPTION: Example demonstrating how to initialize the Dub SDK with an API token and create a new shortened link. Requires a valid Dub API key that can be obtained from the Dub dashboard.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/overview.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Dub } from \"dub\";\n\nconst dub = new Dub({\n  token: \"DUB_API_KEY\",\n});\n\nawait dub.links.create({\n  url: \"https://google.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Total Clicks for a Link with dub.analytics.retrieve in TypeScript\nDESCRIPTION: This snippet demonstrates how to retrieve the total click count for a specific link using the dub.analytics.retrieve method. It specifies the event type as 'clicks', provides the domain and key for the link, and groups the results by count.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/analytics/retrieve.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait dub.analytics.retrieve({\n  event: \"clicks\",\n  domain: \"dub.sh\",\n  key: \"dummy\",\n  groupBy: \"count\",\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Analytics for a Link by ExternalId\nDESCRIPTION: Example of retrieving analytics for a link using its externalId. This demonstrates an alternative way to fetch analytics data.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/python.mdx#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nres = d.analytics.retrieve(request={\n  \"external_id\": \"ext_12345\",\n  \"interval\": \"7d\",\n  \"group_by\": \"timeseries\",\n})\n\nprint(res)\n```\n\n----------------------------------------\n\nTITLE: Creating a Dub Link in Node.js\nDESCRIPTION: This snippet demonstrates how to create a new Dub link using the Node.js SDK. It initializes the Dub client with an API key and creates a link with a specified URL.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/links/introduction.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dub } from \"dub\";\n\nexport const dub = new Dub({\n  token: process.env.DUB_API_KEY,\n});\n\nconst link = await dub.links.create({\n  url: \"https://google.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Link Analytics with Dub SDK in Nuxt\nDESCRIPTION: This snippet demonstrates how to retrieve timeseries analytics for a link using its linkId. It requests data for the last 7 days and groups the results by timeseries.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/nuxt.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ClicksTimeseries } from \"dub/models/components\";\n\nexport default defineEventHandler(async () => {\n  try {\n    // Retrieve the timeseries analytics for the last 7 days for a link\n    const response = await dub.analytics.retrieve({\n      linkId: \"clv3o9p9q000au1h0mc7r6l63\",\n      interval: \"7d\",\n      groupBy: \"timeseries\",\n    });\n\n    const timeseries = response as ClicksTimeseries[];\n\n    return timeseries;\n  } catch (error) {\n    console.error(error);\n    return error;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Dub Link in PHP\nDESCRIPTION: This snippet shows how to create a new Dub link using the PHP SDK. It initializes the Dub client with an API key and creates a link with a specified URL.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/links/introduction.mdx#2025-04-10_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Dub;\nuse Dub\\Models\\Operations;\n\n$sdk = Dub\\Dub::builder()->setSecurity('DUB_API_KEY')->build();\n\n$request = new Operations\\CreateLinkRequestBody(\n  url: 'https://google.com',\n);\n\n$response = $sdk->links->create(\n  request: $request\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Analytics for a Link with Dub Go SDK\nDESCRIPTION: Function to retrieve timeseries analytics for a specified link over the last 7 days, showing usage patterns and click data.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/go.mdx#2025-04-10_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\t// Retrieve the timeseries analytics for the last 7 days for a link\n\trequest := operations.RetrieveAnalyticsRequest{\n\t\tLinkId: \"clv3o9p9q000au1h0mc7r6l63\",\n\t\tInterval: \"7d\",\n\t\tGroupBy: \"timeseries\"\n\t}\n\n\tctx := context.Background()\n\tres, err := d.Analytics.Retrieve(ctx, request)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif res.OneOf != nil {\n\t\t// handle response\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Link Analytics\nDESCRIPTION: Fetching analytics data for a specific link with interval and grouping options.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/rails.mdx#2025-04-10_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\ndef analytics\n  req = ::OpenApiSDK::Operations::RetrieveAnalyticsRequest.new(\n    link_id: \"clx1gvi9o0005hf5momm6f7hj\",\n    interval: ::OpenApiSDK::Operations::Interval::SEVEND,\n    group_by: ::OpenApiSDK::Operations::GroupBy::TIMESERIES\n  )\n\n  res = @dub.analytics.retrieve(req)\n\n  render json: res.raw_response.body\nend\n```\n\n----------------------------------------\n\nTITLE: Retrieving Analytics for a Link with Dub Ruby SDK\nDESCRIPTION: Example of retrieving analytics for a link with specified interval and grouping parameters using the Dub Ruby SDK.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/ruby.mdx#2025-04-10_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nreq = ::OpenApiSDK::Operations::RetrieveAnalyticsRequest.new(\n  link_id: \"clmnr6jcc0005l308q9v56uz1\",\n  interval: ::OpenApiSDK::Operations::Interval::SEVEND,\n  group_by: ::OpenApiSDK::Operations::GroupBy::TIMESERIES\n)\n\nres = dub.analytics.retrieve(req)\n\nputs res.raw_response.body\n```\n\n----------------------------------------\n\nTITLE: Creating a Dub Link using cURL\nDESCRIPTION: This snippet demonstrates how to create a new Dub link using a cURL command. It sends a POST request to the Dub API with the necessary headers and JSON payload.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/links/introduction.mdx#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.dub.co/links \\\n  --header 'Authorization: Bearer <token>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\"url\": \"https://google.com\"}'\n```\n\n----------------------------------------\n\nTITLE: Creating a Short Link with Dub SDK in Laravel\nDESCRIPTION: PHP code showing how to create a short link using the Dub SDK in a Laravel controller with error handling.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/laravel.mdx#2025-04-10_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Dub\\Models\\Operations;\n\nclass LinkController extends Controller {\n  public function createLink() {\n    $dub = new Dub();\n\n    try {\n      $request = new Operations\\CreateLinkRequestBody(\n        url: 'https://google.com'\n      );\n\n      $response = $dub->links->create($request);\n\n      if ($response->linkSchema !== null) {\n        // handle response\n      }\n  } catch (Throwable $e) {\n    // handle exception\n  }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Link Analytics with Dub SDK\nDESCRIPTION: Sinatra route for retrieving analytics for a link using the Dub Ruby SDK. The example shows how to specify the link ID, time interval, and how to group the results.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/sinatra.mdx#2025-04-10_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nget \"/analytics\" do\n  req = ::OpenApiSDK::Operations::RetrieveAnalyticsRequest.new(\n    link_id: \"clx1gvi9o0005hf5momm6f7hj\",\n    interval: ::OpenApiSDK::Operations::Interval::SEVEND,\n    group_by: ::OpenApiSDK::Operations::GroupBy::TIMESERIES\n  )\n\n  res = dub.analytics.retrieve(req)\n\n  content_type :json\n  res.raw_response.body\nend\n```\n\n----------------------------------------\n\nTITLE: Upserting a Link in Next.js API Route\nDESCRIPTION: This code demonstrates how to upsert a link using the Dub TypeScript SDK. The upsert method updates an existing link if it exists, or creates a new one if it doesn't, eliminating the need to check if the link exists first.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/nextjs.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function PATCH() {\n  try {\n    const { shortLink } = await dub.links.upsert({\n      url: \"https://google.com\",\n    });\n\n    return Response.json({ shortLink }); // will always be the same short link\n  } catch (error) {\n    return Response.json({ error }, { status: 500 });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Link with Dub SDK in Next.js API Route\nDESCRIPTION: This code snippet demonstrates how to create a short link using the Dub TypeScript SDK in a Next.js API route. It creates a basic link with just a URL and returns the link object or an error response.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/nextjs.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function POST() {\n  try {\n    const link = await dub.links.create({\n      url: \"https://google.com\",\n    });\n\n    return Response.json(link);\n  } catch (error) {\n    return Response.json({ error }, { status: 500 });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Link Analytics\nDESCRIPTION: Fetches analytics data for a specific link with interval and grouping parameters.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/php.mdx#2025-04-10_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Dub\\Models\\Operations;\n\ntry {\n    $request = new Operations\\RetrieveAnalyticsRequest();\n    $request->linkId = 'clmnr6jcc0005l308q9v56uz1';\n    $request->interval = Operations\\Interval::SevenD;\n    $request->groupBy = Operations\\GroupBy::Timeseries;\n\n    $response = $dub->analytics->retrieve($request);\n\n    if ($response->oneOf !== null) {\n        // Handle the response\n        print_r($response->oneOf);\n    }\n} catch (Throwable $e) {\n    // handle exception\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Links\nDESCRIPTION: Shows how to update existing links using either the linkId or externalId. Demonstrates both methods of link identification for updates.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/typescript.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Update a link by its linkId\nawait dub.links.update(\"link_rWOKByP0bRMrstK8e4HPjprJ\", {\n  url: \"https://www.google.uk\", // new URL\n});\n\n// Update a link by its externalId\nawait dub.links.update(\"ext_12345\", {\n  url: \"https://www.google.uk\", // new URL\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Total Click Count with Dub Analytics API in Node.js\nDESCRIPTION: This code initializes the Dub client and retrieves the total click count for a specific link over a 30-day period. It requires a Dub API key stored in the environment variables and a Pro plan subscription or higher.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/analytics.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dub } from \"dub\";\n\nexport const dub = new Dub({\n  token: process.env.DUB_API_KEY,\n});\n\nconst result = await dub.analytics.retrieve({\n  event: \"clicks\",\n  groupBy: \"count\",\n  linkId: \"clux0rgak00011...\",\n  interval: \"30d\",\n});\n```\n\n----------------------------------------\n\nTITLE: Sample Response from dub.links.list in TypeScript\nDESCRIPTION: This code snippet illustrates the structure of the response returned by the dub.links.list function. It shows a single link object with all its properties, providing a comprehensive view of the data available for each link.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/links/list.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n[\n  {\n    id: \"clv3o9p9q000au1h0mc7r6l63\",\n    domain: \"dub.sh\",\n    key: \"e7qzMuI\",\n    externalId: \"123\",\n    url: \"https://www.google.com\",\n    archived: false,\n    expiresAt: null,\n    expiredUrl: null,\n    password: null,\n    proxy: false,\n    title: null,\n    description: null,\n    image: null,\n    rewrite: false,\n    ios: null,\n    android: null,\n    geo: null,\n    publicStats: false,\n    tagId: null,\n    tags: [],\n    comments: null,\n    shortLink: \"https://dub.sh/e7qzMuI\",\n    qrCode: \"https://api.dub.co/qr?url=https://dub.sh/e7qzMuI?qr=1\",\n    utmSource: null,\n    utmMedium: null,\n    utmCampaign: null,\n    utmTerm: null,\n    utmContent: null,\n    userId: \"cludszk1h0000wmd2e0ea2b0p\",\n    workspaceId: \"ws_clugls3tn000lwfotbpy30304\",\n    clicks: 0,\n    lastClicked: null,\n    createdAt: \"2024-04-17T10:31:00.398Z\",\n    updatedAt: \"2024-04-17T10:31:00.398Z\",\n    projectId: \"clugls3tn000lwfotbpy30304\",\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Retrieving Analytics by External ID with dub.analytics.retrieve in TypeScript\nDESCRIPTION: This snippet demonstrates how to retrieve analytics data using an external ID (prefixed with 'ext_'). It groups the results by top referrer URLs, showcasing the flexibility of the grouping options.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/analytics/retrieve.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait dub.analytics.retrieve({\n  event: \"clicks\",\n  externalId: \"ext_123\", // ID of the link in your database – must be prefixed with 'ext_'\n  groupBy: \"referer_urls\", // we support grouping by the top referer URLs\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Analytics by Tags with Dub API in Node.js\nDESCRIPTION: This snippet shows how to filter analytics data by tags. It initializes the Dub client and makes an API request to retrieve click data for links with specific tag IDs over a 30-day period, allowing for more targeted analytics.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/analytics.mdx#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dub } from \"dub\";\n\nexport const dub = new Dub({\n  token: process.env.DUB_API_KEY,\n});\n\nconst result = await dub.analytics.retrieve({\n  event: \"clicks\",\n  groupBy: \"top_links\",\n  tagIds: [\"tag_12345\", \"tag_67890\"],\n  interval: \"30d\",\n});\n```\n\n----------------------------------------\n\nTITLE: Response Structure for dub.links.create in TypeScript\nDESCRIPTION: This snippet shows the structure of the response object returned by the dub.links.create method. It includes various properties of the created link, such as ID, domain, key, URL, and associated metadata.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/links/create.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  id: 'clv3o9p9q000au1h0mc7r6l63',\n  domain: 'dub.sh',\n  key: 'e7qzMuI',\n  externalId: \"123\",\n  url: 'https://www.google.com',\n  archived: false,\n  expiresAt: null,\n  expiredUrl: null,\n  password: null,\n  proxy: false,\n  title: null,\n  description: null,\n  image: null,\n  rewrite: false,\n  ios: null,\n  android: null,\n  geo: null,\n  publicStats: false,\n  tagId: null,\n  tags: [],\n  comments: null,\n  shortLink: 'https://dub.sh/e7qzMuI',\n  qrCode: 'https://api.dub.co/qr?url=https://dub.sh/e7qzMuI?qr=1',\n  utmSource: null,\n  utmMedium: null,\n  utmCampaign: null,\n  utmTerm: null,\n  utmContent: null,\n  userId: 'cludszk1h0000wmd2e0ea2b0p',\n  workspaceId: 'ws_clugls3tn000lwfotbpy30304',\n  clicks: 0,\n  lastClicked: null,\n  createdAt: '2024-04-17T10:31:00.398Z',\n  updatedAt: '2024-04-17T10:31:00.398Z',\n  projectId: 'clugls3tn000lwfotbpy30304'\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Link Analytics by ExternalId\nDESCRIPTION: Demonstrates how to fetch analytics data using an external ID reference. Shows the same functionality as linkId but using the external identifier.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/typescript.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ClicksTimeseries } from \"dub/models/components\";\n\n// Retrieve the timeseries analytics for the last 7 days for a link\nconst response = await dub.analytics.retrieve({\n  externalId: \"ext_12345\",\n  interval: \"7d\",\n  groupBy: \"timeseries\",\n});\n\nconst timeseries = response as ClicksTimeseries[];\n```\n\n----------------------------------------\n\nTITLE: Creating Links with External ID in Dub API\nDESCRIPTION: Code examples demonstrating how to create a link with an externalId parameter in Dub across multiple programming languages. This allows for associating links with unique identifiers in your system.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/links/organization.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dub } from \"dub\";\n\nexport const dub = new Dub({\n  token: process.env.DUB_API_KEY,\n});\n\nconst link = await dub.links.create({\n  url: \"https://google.com\",\n  externalId: \"12345\",\n});\n```\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport(\n  \"context\"\n  dubgo \"github.com/dubinc/dub-go\"\n  \"github.com/dubinc/dub-go/models/operations\"\n  \"log\"\n  \"os\"\n)\n\nfunc main() {\n  ctx := context.Background()\n\n  s := dubgo.New(\n    dubgo.WithSecurity(os.Getenv(\"DUB_API_KEY\")),\n  )\n\n  res, err := s.Links.Create(ctx, &operations.CreateLinkRequestBody{\n    URL: \"https://google.com\",\n    ExternalId: \"12345\",\n  })\n\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  if res != nil {\n    // handle response\n  }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport dub\nfrom dub.models import operations\n\nd = dub.Dub(\n  token=os.environ['DUB_API_KEY'],\n)\n\nres = d.links.create(request={\n  \"url\": \"https://google.com\",\n  \"external_id\": \"12345\",\n})\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'dub'\n\ns = ::OpenApiSDK::Dub.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    token: \"DUB_API_KEY\",\n  )\n)\n\nreq = ::OpenApiSDK::Operations::CreateLinkRequestBody.new(\n  url: \"https://google.com\",\n  external_id: \"12345\",\n)\n```\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Dub;\nuse Dub\\Models\\Operations;\n\n$sdk = Dub\\Dub::builder()->setSecurity('DUB_API_KEY')->build();\n\n$request = new Operations\\CreateLinkRequestBody(\n  url: 'https://google.com',\n  externalId: '12345',\n);\n\n$response = $sdk->links->create(\n  request: $request\n);\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.dub.co/links \\\n  --header 'Authorization: Bearer <token>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\n    \"url\": \"https://google.com\",\n    \"external_id\": \"12345\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tag-based Analytics in PHP\nDESCRIPTION: This snippet demonstrates how to use the Dub PHP SDK to retrieve analytics for specific tags. It creates an SDK instance with security credentials and forms a request with tag IDs as parameters.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/links/organization.mdx#2025-04-10_snippet_11\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Dub;\nuse Dub\\Models\\Operations;\n\n$sdk = Dub\\Dub::builder()->setSecurity('DUB_API_KEY')->build();\n\n$request = new Operations\\RetrieveAnalyticsRequest(\n  tagIds: [\"tag_xxx\"],\n);\n\n$response = $sdk->analytics->retrieve(\n  request: $request\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Paginated List of Links with TypeScript\nDESCRIPTION: This example shows how to use the Dub TypeScript SDK to fetch the first page of 10 links. The pagination parameters are passed as an object to the links.list method.\nSOURCE: https://github.com/dubinc/docs/blob/main/api-reference/pagination.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst res = await dub.links.list({\n  page: 1,\n  pageSize: 10,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Short Links with Dub TypeScript SDK\nDESCRIPTION: Demonstrates how to create a basic short link using the Dub TypeScript SDK. Returns a shortened URL for the provided target URL.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/typescript.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { shortLink } = await dub.links.create({\n  url: \"https://google.com\",\n});\n\nconsole.log(shortLink); // e.g. https://dub.sh/abc123\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tag-based Analytics in Node.js\nDESCRIPTION: This snippet demonstrates how to use the Dub SDK in Node.js to retrieve analytics for specific tags. It initializes the Dub client with an API key and makes a request to retrieve analytics filtered by tag IDs.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/links/organization.mdx#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dub } from \"dub\";\n\nexport const dub = new Dub({\n  token: process.env.DUB_API_KEY,\n});\n\nconst analytics = await dub.analytics.retrieve({\n  tagIds: [\"tag_xxx\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Links with Dub API\nDESCRIPTION: Examples showing how to update links using either linkId or externalId. The update method accepts the identifier and an object containing the fields to update, like the URL.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/links/update.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Update a link by its linkId\nawait dub.links.update(\"link_rWOKByP0bRMrstK8e4HPjprJ\", {\n  url: \"https://www.google.com\",\n});\n\n// Update a link by its externalId\nawait dub.links.update(\"ext_123\", {\n  url: \"https://www.google.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Short Link with Dub Python SDK\nDESCRIPTION: Example of creating a short link using the Dub Python SDK. This snippet demonstrates the basic usage of the create method.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/python.mdx#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nres = d.links.create(request={\n  \"url\": \"https://google.com\",\n})\n\nprint(res.short_link)\n```\n\n----------------------------------------\n\nTITLE: Creating Links with External ID\nDESCRIPTION: Creates a short link with an external ID reference for easier link management and future updates. The external ID serves as a unique identifier in the client's database.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/express.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napp.post(\"/create-link\", async (req: Request, res: Response) => {\n  try {\n    const result = await dub.links.create({\n      url: \"https://www.google.com\",\n      externalId: \"12345\",\n    });\n\n    res.status(200).json(result);\n  } catch (error: any) {\n    res.status(400).json(error);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Upserting Links with Dub SDK\nDESCRIPTION: Demonstrates how to upsert a link using the Dub SDK, which either updates an existing link or creates a new one if it doesn't exist.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/express.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napp.post(\"/upsert-link\", async (req: Request, res: Response) => {\n  try {\n    // Update the link if same URL already exists or create a new link\n    const result = await dub.links.upsert({\n      url: \"https://www.google.com\",\n    });\n\n    res.status(200).json(result);\n  } catch (error: any) {\n    res.status(400).json(error);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Link with External ID in Next.js API Route\nDESCRIPTION: This snippet shows how to create a link with an external ID, which is a unique identifier in your database that associates it with the link in Dub's system. This makes it easier to update the link or retrieve analytics later.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/nextjs.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function POST() {\n  try {\n    const link = await dub.links.create({\n      url: \"https://google.com\",\n      externalId: \"12345\",\n    });\n\n    return Response.json(link);\n  } catch (error) {\n    return Response.json({ error }, { status: 500 });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Short Link with External ID in Django\nDESCRIPTION: Django view function that creates a short link with an external ID reference to associate it with records in your own database. Returns the short link as a JSON response.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/django.mdx#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef create_link(request):\n  res = d.links.create(request={\n    \"url\": \"https://google.com\",\n    \"external_id\": \"12345\",\n  })\n\n  return JsonResponse({\n    \"short_link\": res.short_link\n  })\n```\n\n----------------------------------------\n\nTITLE: Link Update API Response Structure\nDESCRIPTION: Example response object returned after successfully updating a link. Contains comprehensive link details including domain, key, URLs, statistics, and associated metadata.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/links/update.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  id: 'clv3o9p9q000au1h0mc7r6l63',\n  domain: 'dub.sh',\n  key: 'e7qzMuI',\n  externalId: \"123\",\n  url: 'https://www.google.com',\n  archived: false,\n  expiresAt: null,\n  expiredUrl: null,\n  password: null,\n  proxy: false,\n  title: null,\n  description: null,\n  image: null,\n  rewrite: false,\n  ios: null,\n  android: null,\n  geo: null,\n  publicStats: false,\n  tagId: 'clv3j1h7o00032u1ngo8luv84',\n  tags: [\n    {\n      id: 'clv3j1h7o00032u1ngo8luv84',\n      name: 'news',\n      color: 'blue'\n    }\n  ],\n  comments: null,\n  shortLink: 'https://dub.sh/e7qzMuI',\n  qrCode: 'https://api.dub.co/qr?url=https://dub.sh/e7qzMuI?qr=1',\n  utmSource: null,\n  utmMedium: null,\n  utmCampaign: null,\n  utmTerm: null,\n  utmContent: null,\n  userId: 'cludszk1h0000wmd2e0ea2b0p',\n  workspaceId: 'ws_clugls3tn000lwfotbpy30304',\n  clicks: 0,\n  lastClicked: null,\n  createdAt: '2024-04-17T10:31:00.398Z',\n  updatedAt: '2024-04-17T10:31:00.398Z',\n  projectId: 'clugls3tn000lwfotbpy30304'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Short Link with Dub Go SDK\nDESCRIPTION: Function to create a new short link by providing a URL and handling the response to obtain the generated short link.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/go.mdx#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\trequest := &operations.CreateLinkRequestBody{\n\t\tURL: \"https://google.com\",\n\t}\n\n\tctx := context.Background()\n\tres, err := d.Links.Create(ctx, request)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif res.LinkSchema != nil {\n\t\tfmt.Println(res.LinkSchema.ShortLink)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Response Structure from dub.links.upsert Method\nDESCRIPTION: This shows the response object structure returned by the dub.links.upsert method, including all properties of the created or updated link such as ID, domain, key, URL, and various configuration options.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/links/upsert.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  id: 'clv3o9p9q000au1h0mc7r6l63',\n  domain: 'dub.sh',\n  key: 'e7qzMuI',\n  externalId: \"123\",\n  url: 'https://www.google.com',\n  archived: false,\n  expiresAt: null,\n  expiredUrl: null,\n  password: null,\n  proxy: false,\n  title: null,\n  description: null,\n  image: null,\n  rewrite: false,\n  ios: null,\n  android: null,\n  geo: null,\n  publicStats: false,\n  tagId: null,\n  tags: [],\n  comments: null,\n  shortLink: 'https://dub.sh/e7qzMuI',\n  qrCode: 'https://api.dub.co/qr?url=https://dub.sh/e7qzMuI?qr=1',\n  utmSource: null,\n  utmMedium: null,\n  utmCampaign: null,\n  utmTerm: null,\n  utmContent: null,\n  userId: 'cludszk1h0000wmd2e0ea2b0p',\n  workspaceId: 'ws_clugls3tn000lwfotbpy30304',\n  clicks: 0,\n  lastClicked: null,\n  createdAt: '2024-04-17T10:31:00.398Z',\n  updatedAt: '2024-04-17T10:31:00.398Z',\n  projectId: 'clugls3tn000lwfotbpy30304'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Short Link with External ID\nDESCRIPTION: Example of creating a short link with an external ID using the Dub Python SDK. This allows associating the link with an identifier in your own database.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/python.mdx#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nres = d.links.create(request={\n  \"url\": \"https://google.com\",\n  \"external_id\": \"12345\",\n})\n\nprint(res.short_link)\n```\n\n----------------------------------------\n\nTITLE: Updating a Dub Link in Go\nDESCRIPTION: This snippet demonstrates how to update an existing Dub link using the Go SDK. It uses the link ID to identify the link and updates its URL.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/links/introduction.mdx#2025-04-10_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport(\n  \"context\"\n  dubgo \"github.com/dubinc/dub-go\"\n  \"github.com/dubinc/dub-go/models/operations\"\n  \"log\"\n  \"os\"\n)\n\nfunc main() {\n  ctx := context.Background()\n\n  s := dubgo.New(\n    dubgo.WithSecurity(os.Getenv(\"DUB_API_KEY\")),\n  )\n\n  res, err := s.Links.Update(ctx, \"link_eBKA4MT44XnI17hYLchkjUOd\", &operations.UpdateLinkRequestBody{\n    URL: \"https://www.google.uk\", // new URL\n  })\n\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  if res != nil {\n    // handle response\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Timeseries Analytics Data with Dub API in Node.js\nDESCRIPTION: This snippet shows how to get timeseries analytics data for link clicks over a 30-day period. It initializes the Dub client with an API key and specifies the groupBy parameter as 'timeseries' to get time-based data.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/analytics.mdx#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dub } from \"dub\";\n\nexport const dub = new Dub({\n  token: process.env.DUB_API_KEY,\n});\n\nconst result = await dub.analytics.retrieve({\n  event: \"clicks\",\n  groupBy: \"timeseries\",\n  linkId: \"clux0rgak00011...\",\n  interval: \"30d\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Short Link with Dub SDK in Nuxt Server API\nDESCRIPTION: This snippet demonstrates how to create a short link using the Dub TypeScript SDK in a Nuxt server API route. It creates a link for the Google homepage and returns the result or any error that occurs.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/nuxt.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler(async () => {\n  try {\n    const result = await dub.links.create({\n      url: \"https://www.google.com\",\n    });\n\n    return result;\n  } catch (error) {\n    console.error(error);\n    return error;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using dub.links.upsert Method in TypeScript SDK\nDESCRIPTION: This example demonstrates how to use the dub.links.upsert method to create or update a link based on its URL, returning a short link that can be used for redirects.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/links/upsert.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { shortLink } = await dub.links.upsert({\n  url: \"https://www.google.com\",\n});\n\nconsole.log(shortLink); // will always be https://dub.sh/xnjk23d\n```\n\n----------------------------------------\n\nTITLE: Upserting a Link with Dub SDK in Nuxt\nDESCRIPTION: This snippet demonstrates the link upsert functionality, which updates an existing link if it exists or creates a new one if it doesn't. This simplifies link management by eliminating the need to check if a link already exists.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/nuxt.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler(async () => {\n  try {\n    const result = await dub.links.upsert({\n      url: \"https://www.google.com\",\n    });\n\n    return result;\n  } catch (error) {\n    console.error(error);\n    return error;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Updating a Link by LinkId or ExternalId\nDESCRIPTION: Examples of updating an existing link using either the linkId or externalId. This demonstrates the flexibility in identifying links for updates.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/python.mdx#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Update a link by its linkId\nres = d.links.update(link_id=\"clx1gvi9o0005hf5momm6f7hj\", request_body={\n  \"url\": \"https://google.uk\",\n})\n\nprint(res.short_link)\n\n# Update a link by its externalId\nres = d.links.update(external_id=\"ext_12345\", request_body={\n  \"url\": \"https://google.uk\",\n})\n\nprint(res.short_link)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Analytics using External ID with Dub TypeScript SDK\nDESCRIPTION: Example of retrieving timeseries analytics for a link using the externalId instead of the linkId. This is useful when you want to retrieve analytics for a link that's associated with an ID in your own database.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/remix.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Retrieve the timeseries analytics for the last 7 days for a link\nconst response = await dub.analytics.retrieve({\n  externalId: \"ext_12345\",\n  interval: \"7d\",\n  groupBy: \"timeseries\",\n});\n\nconst timeseries = response as ClicksTimeseries[];\n```\n\n----------------------------------------\n\nTITLE: Upserting a Link with Dub in Django\nDESCRIPTION: Django view function that uses the upsert operation to either update an existing link or create a new one. This simplifies link management by eliminating the need to check if a link already exists.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/django.mdx#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef upsert_link(request):\n  res = d.links.upsert(request={\n    \"url\": \"https://google.com\",\n  })\n\n  return JsonResponse({\n    \"short_link\": res.short_link\n  })\n```\n\n----------------------------------------\n\nTITLE: Creating a Link with External ID in Remix using Dub TypeScript SDK\nDESCRIPTION: Example of creating a short link with an externalId parameter for associating the link with your own database. This allows for easier updating and analytics retrieval later using the externalId.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/remix.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const loader = async () => {\n  try {\n    const result = await dub.links.create({\n      url: \"https://www.google.com\",\n      externalId: \"12345\",\n    });\n\n    return json(result, 200);\n  } catch (error: any) {\n    console.error(error);\n    return json(error, 400);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Top Links Performance with Dub Analytics API in Node.js\nDESCRIPTION: This code demonstrates how to retrieve analytics data for top performing links. It uses the Dub client to make an API request with the 'top_links' groupBy parameter to see which links received the most clicks in the last 30 days.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/analytics.mdx#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dub } from \"dub\";\n\nexport const dub = new Dub({\n  token: process.env.DUB_API_KEY,\n});\n\nconst result = await dub.analytics.retrieve({\n  event: \"clicks\",\n  groupBy: \"top_links\",\n  linkId: \"clux0rgak00011...\",\n  interval: \"30d\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Domain with TypeScript SDK\nDESCRIPTION: Example of creating a new domain using the dub.domains.create method. Shows basic usage with required slug parameter.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/domains/create.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait dub.domains.create({\n  slug: \"acme.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Links Using dub.links.deleteMany in TypeScript\nDESCRIPTION: This example shows how to delete multiple links from a workspace by providing an array of link IDs. The method accepts a linkIds parameter containing up to 100 IDs, and returns the count of successfully deleted links.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/links/delete-many.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait dub.links.deleteMany({\n  linkIds: [\"clux0rgak00011...\", \"clux0rgak00022...\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Upserting Link with Dub SDK\nDESCRIPTION: Implementation of link upsert operation that either updates an existing link or creates a new one.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/rails.mdx#2025-04-10_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef upsert\n  req = ::OpenApiSDK::Operations::UpsertLinkRequest.new(\n    request_body: ::OpenApiSDK::Operations::UpsertLinkRequestBody.new(\n      url: \"https://google.com\",\n    ),\n  )\n\n  res = @dub.links.upsert(req)\n\n  render json: res.raw_response.body\nend\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Link with Dub SDK in Laravel\nDESCRIPTION: PHP code for updating an existing link using either linkId or externalId with the Dub SDK.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/laravel.mdx#2025-04-10_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Dub\\Models\\Operations;\n\nclass LinkController extends Controller\n{\n    public function updateLink()\n    {\n        $dub = new Dub();\n\n        try {\n            $request = new Operations\\UpdateLinkRequest();\n            $request->linkId = 'cly2p8onm000cym8200nfay7l';\n            $request->requestBody = new Operations\\UpdateLinkRequestBody();\n            $request->requestBody->url = 'https://google.us';\n\n            $response = $dub->links->update($request);\n\n            if ($response->linkSchema !== null) {\n                echo $response->linkSchema->shortLink;\n            }\n        } catch (Throwable $e) {\n            // handle exception\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Workspace-Level Analytics in Multiple Languages\nDESCRIPTION: Example code showing how to fetch workspace-level analytics instead of individual link data, helping to reduce API calls and stay within rate limits. This approach uses the Analytics API with grouping by top links.\nSOURCE: https://github.com/dubinc/docs/blob/main/api-reference/rate-limits.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait dub.analytics.retrieve({\n  groupBy: \"top_links\",\n  start: \"4 hours ago\", // we support natural language for start/end params\n});\n```\n\nLANGUAGE: python\nCODE:\n```\nres = d.analytics.retrieve(request={\n    \"groupBy\": \"top_links\",\n    \"start\": \"4 hours ago\", // we support natural language for start/end params\n})\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\t// Retrieve the timeseries analytics for the last 7 days for a link\n\trequest := operations.RetrieveAnalyticsRequest{\n        GroupBy: \"top_links\",\n        Start: \"4 hours ago\", // we support natural language for start/end params\n\t}\n\n\tctx := context.Background()\n\tres, err := d.Analytics.Retrieve(ctx, request)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif res.OneOf != nil {\n\t\t// handle response\n\t}\n}\n```\n\nLANGUAGE: ruby\nCODE:\n```\nreq = ::OpenApiSDK::Operations::RetrieveAnalyticsRequest.new(\n  group_by: ::OpenApiSDK::Operations::GroupBy::TOP_LINKS,\n  start: \"4 hours ago\", // we support natural language for start/end params\n)\n\nres = dub.analytics.retrieve(req)\n\nputs res.raw_response.body\n```\n\n----------------------------------------\n\nTITLE: Upserting a Link with Dub Python SDK\nDESCRIPTION: Demonstration of the upsert method in the Dub Python SDK. This method updates an existing link if it exists, or creates a new one if it doesn't.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/python.mdx#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nres = d.links.upsert(request={\n  \"url\": \"https://google.com\",\n})\n\nprint(res.short_link)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Timeseries Analytics for a Link with dub.analytics.retrieve in TypeScript\nDESCRIPTION: This example shows how to fetch timeseries analytics data for a link using its unique ID. It specifies a date range using natural language and groups the results as a timeseries.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/analytics/retrieve.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait dub.analytics.retrieve({\n  event: \"clicks\",\n  linkId: \"abc123\",\n  start: \"30 days ago\", // we support natural language for start and end dates\n  end: \"now\",\n  groupBy: \"timeseries\",\n});\n```\n\n----------------------------------------\n\nTITLE: Upserting a Link\nDESCRIPTION: Upsert a link to either update an existing one or create a new one if it doesn't exist.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/flask.mdx#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef upsert_link(request):\n  res = d.links.upsert(request={\n    \"url\": \"https://google.com\",\n  })\n\n  return res.short_link\n```\n\n----------------------------------------\n\nTITLE: Updating a Link with Dub SDK in Nuxt\nDESCRIPTION: This snippet shows how to update an existing link using either the linkId from Dub's system or an externalId from your database. It demonstrates changing the URL of an existing short link.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/nuxt.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler(async () => {\n  try {\n    // Update a link by its linkId\n    const { shortLink } = await dub.links.update(\n      \"link_rWOKByP0bRMrstK8e4HPjprJ\",\n      {\n        url: \"https://www.google.uk\", // new URL\n      }\n    );\n\n    // Update a link by its externalId\n    const { shortLink } = await dub.links.update(\"ext_12345\", {\n      url: \"https://www.google.uk\", // new URL\n    });\n\n    return { shortLink };\n  } catch (error) {\n    console.error(error);\n    return error;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Bulk Creating Links with Dub API\nDESCRIPTION: This snippet demonstrates how to create multiple links at once using Dub's API. It supports creating up to 100 links in a single request. Note that custom link previews are not supported, and webhook events are not triggered for bulk creation.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/links/bulk-actions.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dub } from \"dub\";\n\nexport const dub = new Dub({\n  token: process.env.DUB_API_KEY,\n});\n\nconst result = await dub.links.createMany([\n  {\n    url: \"https://google.com\",\n  },\n  {\n    url: \"https://google.uk\",\n  },\n]);\n```\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport(\n  \"context\"\n  dubgo \"github.com/dubinc/dub-go\"\n  \"github.com/dubinc/dub-go/models/operations\"\n  \"log\"\n  \"os\"\n)\n\nfunc main() {\n  ctx := context.Background()\n\n  s := dubgo.New(\n    dubgo.WithSecurity(os.Getenv(\"DUB_API_KEY\")),\n  )\n}\n\nres, err := s.Links.CreateMany(ctx, []operations.RequestBody{\n  operations.RequestBody{\n    URL: \"https://google.com\",\n  },\n  operations.RequestBody{\n    URL: \"https://google.uk\",\n  },\n})\n```\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport dub\nfrom dub.models import operations\n\nd = dub.Dub(\n  token=os.environ['DUB_API_KEY'],\n)\n\nres = dub.links.create_many(request=[\n  {\n     \"url\": \"https://google.com\",\n  },\n  {\n    \"url\": \"https://google.uk\",\n  },\n])\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'dub'\n\ns = ::OpenApiSDK::Dub.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    token: \"DUB_API_KEY\",\n  )\n)\n\nreq = [\n  ::OpenApiSDK::Operations::RequestBody.new(\n    url: \"https://google.com\",\n  ),\n  ::OpenApiSDK::Operations::RequestBody.new(\n    url: \"https://example.uk\"\n  ),\n]\n\nres = s.links.create_many(req)\n```\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Dub;\nuse Dub\\Models\\Operations;\n\n$sdk = Dub\\Dub::builder()->setSecurity('DUB_API_KEY')->build();\n\n$request = [\n  new Operations\\RequestBody(\n    url: 'https://google.com',\n  ),\n  new Operations\\RequestBody(\n    url: 'https://google.uk',\n  ),\n];\n\n$response = $sdk->links->createMany(\n  request: $request\n);\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url https://api.dub.co/links/bulk \\\n  --header 'Authorization: Bearer <token>' \\\n  --header 'Content-Type: application/json'\n  --data '[\n    {\n      \"url\": \"https://google.com\"\n    },\n    {\n      \"url\": \"https://google.uk\"\n    }\n  ]'\n```\n\n----------------------------------------\n\nTITLE: Upserting a Link with Dub Go SDK\nDESCRIPTION: Function to upsert a link, which either updates an existing link if it exists or creates a new one if it doesn't, simplifying link management.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/go.mdx#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\t// Update the link if same URL already exists or create a new link\n\trequest := &operations.UpsertLinkRequestBody{\n\t\tURL: \"https://google.com\",\n\t}\n\n\tctx := context.Background()\n\tres, err := d.Links.Upsert(ctx, request)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif res.LinkSchema != nil {\n\t\tfmt.Println(res.LinkSchema.ShortLink)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Link by ID with Dub Go SDK\nDESCRIPTION: Function to update an existing link by its linkId, changing the destination URL and handling the response.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/go.mdx#2025-04-10_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\trequest := &operations.UpdateLinkRequestBody{\n\t\tURL: \"https://google.us\",\n\t}\n\n\t// Update a link by its linkId\n\tctx := context.Background()\n\tres, err := d.Links.Update(ctx, \"clv3o9p9q000au1h0mc7r6l63\", request)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif res.LinkSchema != nil {\n\t\tfmt.Println(res.LinkSchema.ShortLink)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Link Updated Event Payload\nDESCRIPTION: Webhook payload for the link.updated event, triggered when an existing link is modified in a Dub workspace. Contains the complete updated link details.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/webhooks/event-types.mdx#2025-04-10_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"event_KleiO4HBwZFbO1vZLWIPZ2AtX\",\n  \"event\": \"link.updated\",\n  \"createdAt\": \"2024-08-26T16:41:52.346Z\",\n  \"data\": {\n    \"id\": \"cm0b87844000dismqhkviju54\",\n    \"domain\": \"dub.sh\",\n    \"key\": \"sOvvXDT\",\n    \"externalId\": null,\n    \"url\": \"https://github.com/stack-auth/stack\",\n    \"trackConversion\": false,\n    \"archived\": false,\n    \"expiresAt\": null,\n    \"expiredUrl\": null,\n    \"password\": null,\n    \"proxy\": false,\n    \"title\": null,\n    \"description\": null,\n    \"image\": null,\n    \"video\": null,\n    \"rewrite\": false,\n    \"doIndex\": false,\n    \"ios\": null,\n    \"android\": null,\n    \"geo\": null,\n    \"publicStats\": false,\n    \"tagId\": null,\n    \"tags\": [],\n    \"comments\": null,\n    \"shortLink\": \"https://dub.sh/sOvvXDT\",\n    \"qrCode\": \"https://api.dub.co/qr?url=https://dub.sh/sOvvXDT?qr=1\",\n    \"utm_source\": null,\n    \"utm_medium\": null,\n    \"utm_campaign\": null,\n    \"utm_term\": null,\n    \"utm_content\": null,\n    \"userId\": \"cm022rkcw0000ikt14mscg9sg\",\n    \"workspaceId\": \"ws_cm022sis60003ikt1syy7kfhl\",\n    \"clicks\": 0,\n    \"lastClicked\": null,\n    \"leads\": 0,\n    \"sales\": 0,\n    \"saleAmount\": 0,\n    \"createdAt\": \"2024-08-26T16:41:52.084Z\",\n    \"updatedAt\": \"2024-08-26T16:41:52.084Z\",\n    \"projectId\": \"cm022sis60003ikt1syy7kfhl\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Links by Tag IDs with dub.links.list in TypeScript\nDESCRIPTION: This example shows how to use the dub.links.list function to retrieve links filtered by one or more tag IDs. It demonstrates the usage of the tagIds parameter for more specific filtering.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/links/list.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Find links by tagIds\nconst { result } = await dub.links.list({\n  tagIds: [\"clv3mewk30001mq0rxl3j3frn\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Analytics for a Link by LinkId\nDESCRIPTION: Example of retrieving analytics for a link using its linkId. This snippet shows how to get timeseries analytics for the last 7 days.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/python.mdx#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nres = d.analytics.retrieve(request={\n  \"link_id\": \"clx1gvi9o0005hf5momm6f7hj\",\n  \"interval\": \"7d\",\n  \"group_by\": \"timeseries\",\n})\n\nprint(res)\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Link with Dub Ruby SDK\nDESCRIPTION: Example of updating an existing link by its linkId using the Dub Ruby SDK. This can also be done using an externalId prefixed with 'ext_'.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/ruby.mdx#2025-04-10_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nreq = ::OpenApiSDK::Operations::UpdateLinkRequest.new(\n  link_id: \"cly2p8onm000cym8200nfay7l\",\n  request_body: ::OpenApiSDK::Operations::UpdateLinkRequestBody.new(\n    url: \"https://google.us\",\n  ),\n)\n\nres = dub.links.update(req)\n\nputs res.raw_response.body\n```\n\n----------------------------------------\n\nTITLE: Initializing Dub PHP SDK in Laravel\nDESCRIPTION: PHP code to create an instance of the Dub class with your API key and use it to create links.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/laravel.mdx#2025-04-10_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Dub\\Dub;\nuse Dub\\Components\\Security;\n\n$dub = Dub::builder()->setSecurity(config('services.dub.api_key'))->build();\n\n// create a link\n$dub->links->create(...);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Link Analytics\nDESCRIPTION: Retrieve analytics data for links using either linkId or externalId.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/flask.mdx#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Retrieve the timeseries analytics for the last 7 days for a link\ndef analytics(request):\n  res = d.analytics.retrieve(request={\n    \"link_id\": \"clx1gvi9o0005hf5momm6f7hj\",\n    \"interval\": \"7d\",\n    \"group_by\": \"timeseries\",\n  })\n\n  return str(res)\n```\n\n----------------------------------------\n\nTITLE: Updating a Dub Link in PHP\nDESCRIPTION: This snippet demonstrates how to update an existing Dub link using the PHP SDK. It uses the link ID to identify the link and updates its URL.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/links/introduction.mdx#2025-04-10_snippet_10\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Dub;\nuse Dub\\Models\\Operations;\n\n$sdk = Dub\\Dub::builder()->setSecurity('DUB_API_KEY')->build();\n\n$requestBody = new Operations\\UpdateLinkRequestBody(\n  url: 'https://www.google.uk', // new URL\n);\n\n$response = $sdk->links->update(\n  linkId: 'link_eBKA4MT44XnI17hYLchkjUOd',\n  requestBody: $requestBody\n);\n```\n\n----------------------------------------\n\nTITLE: Handling link.clicked Event in Dub Webhooks (JSON)\nDESCRIPTION: This snippet shows the payload structure for the link.clicked event, which is triggered when a user clicks on a link. It includes detailed information about the click event and the associated link.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/webhooks/event-types.mdx#2025-04-10_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"evt_b9ywgxWqai2glUpCQjclB17kM\",\n  \"event\": \"link.clicked\",\n  \"createdAt\": \"2024-08-30T10:16:13.149Z\",\n  \"data\": {\n    \"click\": {\n      \"timestamp\": \"2024-08-30T10:16:12.124Z\",\n      \"clickId\": \"d0UtZqE0BZuBPrJS\",\n      \"url\": \"https://github.com/dubinc/dub\",\n      \"ip\": \"63.141.57.109\",\n      \"continent\": \"NA\",\n      \"country\": \"US\",\n      \"city\": \"San Francisco\",\n      \"device\": \"Desktop\",\n      \"browser\": \"Chrome\",\n      \"os\": \"Mac OS\",\n      \"ua\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36\",\n      \"bot\": false,\n      \"qr\": false,\n      \"referer\": \"(direct)\"\n    },\n    \"link\": {\n      \"id\": \"cm0faqkyn0001txvfwjfeq7gl\",\n      \"domain\": \"dub.sh\",\n      \"key\": \"79ys3WA\",\n      \"externalId\": null,\n      \"url\": \"https://github.com/dubinc/dub\",\n      \"trackConversion\": true,\n      \"archived\": false,\n      \"expiresAt\": null,\n      \"expiredUrl\": null,\n      \"password\": null,\n      \"proxy\": false,\n      \"title\": null,\n      \"description\": null,\n      \"image\": null,\n      \"video\": null,\n      \"rewrite\": false,\n      \"doIndex\": false,\n      \"ios\": null,\n      \"android\": null,\n      \"geo\": null,\n      \"publicStats\": false,\n      \"comments\": null,\n      \"shortLink\": \"https://dub.sh/79ys3WA\",\n      \"qrCode\": \"https://api.dub.co/qr?url=https://dub.sh/79ys3WA?qr=1\",\n      \"utm_source\": null,\n      \"utm_medium\": null,\n      \"utm_campaign\": null,\n      \"utm_term\": null,\n      \"utm_content\": null,\n      \"userId\": \"cm022rkcw0000ikt14mscg9sg\",\n      \"workspaceId\": \"ws_cm022sis60003ikt1syy7kfhl\",\n      \"clicks\": 11,\n      \"lastClicked\": \"2024-08-30T07:45:09.000Z\",\n      \"leads\": 6,\n      \"sales\": 10,\n      \"saleAmount\": 200000,\n      \"createdAt\": \"2024-08-29T13:03:59.098Z\",\n      \"updatedAt\": \"2024-08-30T10:16:12.126Z\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Dub Link in Go\nDESCRIPTION: This snippet shows how to create a new Dub link using the Go SDK. It sets up the Dub client with an API key and creates a link with a specified URL.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/links/introduction.mdx#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport(\n  \"context\"\n  dubgo \"github.com/dubinc/dub-go\"\n  \"github.com/dubinc/dub-go/models/operations\"\n  \"log\"\n  \"os\"\n)\n\nfunc main() {\n  ctx := context.Background()\n\n  s := dubgo.New(\n    dubgo.WithSecurity(os.Getenv(\"DUB_API_KEY\")),\n  )\n\n  res, err := s.Links.Create(ctx, &operations.CreateLinkRequestBody{\n    URL: \"https://google.com\",\n  })\n\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  if res != nil {\n    // handle response\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Dub SDK in Sinatra\nDESCRIPTION: Code to initialize the Dub Ruby SDK in a Sinatra application by creating a new instance of the Dub struct and configuring security with an API key.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/sinatra.mdx#2025-04-10_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"sinatra\"\nrequire \"dub\"\n\ndub = ::OpenApiSDK::Dub.new\ndub.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    token: ENV['DUB_API_KEY'],\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Link\nDESCRIPTION: Updates an existing link using either linkId or externalId with new URL parameters.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/php.mdx#2025-04-10_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Dub\\Models\\Operations;\n\ntry {\n    $request = new Operations\\UpdateLinkRequest();\n    $request->linkId = 'cly2p8onm000cym8200nfay7l';\n    $request->requestBody = new Operations\\UpdateLinkRequestBody();\n    $request->requestBody->url = 'https://google.us';\n\n    $response = $dub->links->update($request);\n\n    if ($response->linkSchema !== null) {\n        echo $response->linkSchema->shortLink;\n    }\n} catch (Throwable $e) {\n    // handle exception\n}\n```\n\n----------------------------------------\n\nTITLE: Upserting a Dub Link in Node.js\nDESCRIPTION: This snippet demonstrates how to upsert a Dub link using the Node.js SDK. It creates a new link if it doesn't exist, or updates an existing one with the same URL.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/links/introduction.mdx#2025-04-10_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dub } from \"dub\";\n\nexport const dub = new Dub({\n  token: process.env.DUB_API_KEY,\n});\n\nconst link = await dub.links.upsert({\n  url: \"https://google.com\", // will always be the same short link\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Short Link with Dub SDK\nDESCRIPTION: Sinatra route for creating a short link using the Dub Ruby SDK. It sets up a POST endpoint that accepts a URL and returns the created link details.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/sinatra.mdx#2025-04-10_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\npost \"/links\" do\n  req = ::OpenApiSDK::Operations::CreateLinkRequest.new(\n    request_body: ::OpenApiSDK::Operations::CreateLinkRequestBody.new(\n      url: 'https://google.com'\n    )\n  )\n\n  res = dub.links.create(req)\n\n  content_type :json\n  res.raw_response.body\nend\n```\n\n----------------------------------------\n\nTITLE: Verifying Webhook Signatures in Python\nDESCRIPTION: Python implementation of webhook verification using hmac and hashlib modules. Processes incoming webhook requests by validating HMAC-SHA256 signatures against the request body.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/webhooks/verify-webhook-requests.mdx#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport hmac\nimport hashlib\n\ndef webhook():\n    # Get the signature from the header\n    webhook_signature = request.headers.get('Dub-Signature')\n    if not webhook_signature:\n        abort(401, 'No signature provided.')\n\n    # Copy this from the webhook details page\n    secret = os.environ.get('DUB_WEBHOOK_SECRET')\n    if not secret:\n        abort(401, 'No secret provided.')\n\n    # Get the raw body of the request\n    raw_body = request.data\n\n    # Calculate the HMAC\n    computed_signature = hmac.new(\n        secret.encode('utf-8'),\n        raw_body,\n        hashlib.sha256\n    ).hexdigest()\n\n    if webhook_signature != computed_signature:\n        abort(400, 'Invalid signature')\n\n    # Handle the webhook event\n    # ...\n\n    return 'OK', 200\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Workspace Using dub.workspaces.get in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the dub.workspaces.get method to retrieve workspace information. It shows two examples: one retrieving by ID and another by slug. The method requires an idOrSlug parameter to identify the workspace.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/workspaces/get.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Retrieve a workspace by ID\nawait dub.workspaces.get({\n  idOrSlug: \"clv3mw4qb00008tvuw86c53db,\n});\n\n// Retrieve a workspace by slug\nawait dub.workspaces.get({\n  idOrSlug: \"acme\",\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Dub Go SDK Client\nDESCRIPTION: Code snippet to initialize the Dub Go SDK by creating a new instance of the Dub struct with an API key from environment variables.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/go.mdx#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\t\"context\"\n\tdub \"github.com/dubinc/dub-go\"\n)\n\nd := dub.New(\n\tdub.WithSecurity(os.Getenv(\"DUB_API_KEY\")),\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Links by Domain with dub.links.list in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the dub.links.list function to retrieve links filtered by a specific domain. It shows the basic usage of the function with a single query parameter.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/links/list.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Find links by domain\nconst { result } = await dub.links.list({\n  domain: \"dub.sh\",\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Metatags for a URL using dub.metatags.get in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the dub.metatags.get method to retrieve metatags for a specified URL. It requires the 'url' parameter as input and returns an object containing the title, description, and image metadata.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/metatags/get.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait dub.metatags.get({\n  url: \"https://dub.co\",\n});\n```\n\n----------------------------------------\n\nTITLE: Upserting a Link with Dub SDK\nDESCRIPTION: Sinatra route for upserting a link, which updates it if it exists or creates it if it doesn't. This eliminates the need to check for link existence before creation.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/sinatra.mdx#2025-04-10_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nput \"/links\" do\n  req = ::OpenApiSDK::Operations::UpsertLinkRequest.new(\n    request_body: ::OpenApiSDK::Operations::UpsertLinkRequestBody.new(\n      url: \"https://google.com\",\n    ),\n  )\n\n  res = dub.links.upsert(req)\n\n  content_type :json\n  res.raw_response.body\nend\n```\n\n----------------------------------------\n\nTITLE: Counting Links with Domain and Tag Filters in TypeScript SDK\nDESCRIPTION: Examples of using the dub.links.count method to count links filtered by domain or tag IDs. The method returns a simple integer representing the count of matching links.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/links/count.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Count links by domain\nawait dub.links.count({\n  domain: \"dub.sh\",\n});\n\n// Count links by tagIds\nawait dub.links.count({\n  tagIds: [\"clv3mewk30001mq0rxl3j3frn\"],\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\n2;\n```\n\n----------------------------------------\n\nTITLE: Exchanging OAuth Code for Access Token\nDESCRIPTION: POST request example for exchanging the authorization code for an access token. The request requires code, client_id, client_secret, redirect_uri, and grant_type parameters with the Content-Type set to application/x-www-form-urlencoded.\nSOURCE: https://github.com/dubinc/docs/blob/main/integrations/quickstart.mdx#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nPOST https://api.dub.co/oauth/token\n```\n\n----------------------------------------\n\nTITLE: Creating Links with Tenant ID in Dub API\nDESCRIPTION: Demonstrates how to create a new link with a tenant ID using the Dub API across different programming languages. Requires DUB_API_KEY for authentication and accepts URL and tenantId as parameters.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/links/organization.mdx#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dub } from \"dub\";\n\nexport const dub = new Dub({\n  token: process.env.DUB_API_KEY,\n});\n\nconst link = await dub.links.create({\n  url: \"https://google.com\",\n  tenantId: \"12345\",\n});\n```\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport(\n  \"context\"\n  dubgo \"github.com/dubinc/dub-go\"\n  \"github.com/dubinc/dub-go/models/operations\"\n  \"log\"\n  \"os\"\n)\n\nfunc main() {\n  ctx := context.Background()\n\n  s := dubgo.New(\n    dubgo.WithSecurity(os.Getenv(\"DUB_API_KEY\")),\n  )\n\n  res, err := s.Links.Create(ctx, &operations.CreateLinkRequestBody{\n    URL: \"https://google.com\",\n    TenantId: \"12345\",\n  })\n\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  if res != nil {\n    // handle response\n  }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport dub\nfrom dub.models import operations\n\nd = dub.Dub(\n  token=os.environ['DUB_API_KEY'],\n)\n\nres = d.links.create(request={\n  \"url\": \"https://google.com\",\n  \"tenant_id\": \"12345\",\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Link with External ID\nDESCRIPTION: Create a short link with an external ID for database association.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/flask.mdx#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef create_link(request):\n  res = d.links.create(request={\n    \"url\": \"https://google.com\",\n    \"external_id\": \"12345\",\n  })\n\n  return res.short_link\n```\n\n----------------------------------------\n\nTITLE: Updating Links by ID or External ID in Django\nDESCRIPTION: Django view functions that demonstrate how to update existing links using either the Dub-generated linkId or your own external ID. Both methods return the updated short link as a JSON response.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/django.mdx#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Update a link by its linkId\ndef update_link(request):\n  res = d.links.update(link_id=\"clx1gvi9o0005hf5momm6f7hj\", request_body={\n    \"url\": \"https://google.uk\",\n  })\n\n  return JsonResponse({\n    \"short_link\": res.short_link\n  })\n\n# Update a link by its externalId\ndef update_link(request):\n  res = d.links.update(external_id=\"ext_12345\", request_body={\n    \"url\": \"https://google.uk\",\n  })\n\n  return JsonResponse({\n    \"short_link\": res.short_link\n  })\n```\n\n----------------------------------------\n\nTITLE: Retrieving Links by Tenant ID in Dub API\nDESCRIPTION: Shows how to retrieve links associated with a specific tenant ID using the Dub API. Requires authentication and accepts tenantId as a query parameter.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/links/organization.mdx#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dub } from \"dub\";\n\nexport const dub = new Dub({\n  token: process.env.DUB_API_KEY,\n});\n\nconst result = await dub.links.list({\n  tenantId: \"12345\",\n});\n```\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport dub\nfrom dub.models import operations\n\nd = dub.Dub(\n  token=os.environ['DUB_API_KEY'],\n)\n\nres = s.links.list(request={\n  \"tenant_id\": \"12345\",\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Links with Tags in Dub API\nDESCRIPTION: Demonstrates how to create a new link with tags using the Dub API. Tags can be specified using either tag IDs or tag names to categorize and organize links.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/links/organization.mdx#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dub } from \"dub\";\n\nexport const dub = new Dub({\n  token: process.env.DUB_API_KEY,\n});\n\nconst link = await dub.links.create({\n  url: \"https://example.com\",\n  tagIds: [\"clux0rgak00011...\"],\n});\n```\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport dub\nfrom dub.models import operations\n\nd = dub.Dub(\n  token=os.environ['DUB_API_KEY'],\n)\n\nres = d.links.create(request={\n  \"url\": \"https://example.com\",\n  \"tag_ids\": [\"clux0rgak00011...\"],\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Links with Dub TypeScript SDK\nDESCRIPTION: JavaScript example showing how to initialize the Dub TypeScript SDK with an OAuth access token and create a link. This demonstrates practical usage of the access token to make authenticated API requests.\nSOURCE: https://github.com/dubinc/docs/blob/main/integrations/quickstart.mdx#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dub } from \"dub\";\n\nconst dub = new Dub({\n  token: <ACCESS_TOKEN>,\n});\n\nconst link = await dub.links.create({\n  url: \"https://google.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Viewing Workspace Credentials\nDESCRIPTION: Command to view your current workspace credentials in Dub CLI.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/cli/overview.mdx#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndub config\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Link\nDESCRIPTION: Updating an existing link using either linkId or externalId in the Dub system.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/rails.mdx#2025-04-10_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\ndef update\n  req = ::OpenApiSDK::Operations::UpdateLinkRequest.new(\n    link_id: 'clx1gvi9o0005hf5momm6f7hj',\n    request_body: ::OpenApiSDK::Operations::UpdateLinkRequestBody.new(\n      url: 'https://google.uk'\n    )\n  )\n\n  res = @dub.links.update(req)\n\n  render json: res.raw_response.body\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Tag Request - TypeScript\nDESCRIPTION: Example of creating a new tag using the Dub SDK. The request requires a tag name and optionally accepts a color parameter. If no color is specified, a random color will be selected from predefined options.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/tags/create.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait dub.tags.create({\n  tag: \"news\",\n});\n```\n\n----------------------------------------\n\nTITLE: Response Structure for dub.metatags.get in TypeScript\nDESCRIPTION: This snippet shows the structure of the response object returned by the dub.metatags.get method. It includes the title, description, and image URL extracted from the metatags of the specified URL.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/metatags/get.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  title: 'Dub - Link Management for Modern Marketing Teams',\n  description: 'Dub is the open-source link management infrastructure ...',\n  image: 'https://assets.dub.co/thumbnail.jpg'\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Dub to Laravel Service Container\nDESCRIPTION: PHP code to bind the Dub class to the Laravel service container for dependency injection in AppServiceProvider.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/laravel.mdx#2025-04-10_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$this->app->bind(Dub::class, function ($app) {\n  return Dub::builder()->setSecurity($app['config']->get('services.dub.api_key'))->build();\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting a Domain using dub.domains.delete in TypeScript\nDESCRIPTION: This code snippet demonstrates how to delete a domain from a workspace using the dub.domains.delete method. It requires the domain slug as an argument and returns an object containing the deleted domain's slug.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/domains/delete.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait dub.domains.delete(\"acme.com\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Dub Python SDK\nDESCRIPTION: Code snippet to initialize the Dub Python SDK by creating a new instance of the Dub class. It requires setting up the API key as an environment variable.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/python.mdx#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport dub\nfrom dub.models import operations\n\nd = dub.Dub(\n  token=os.environ['DUB_API_KEY'],\n)\n```\n\n----------------------------------------\n\nTITLE: Sample Response from dub.workspaces.get in TypeScript\nDESCRIPTION: This snippet shows an example of the response object returned by the dub.workspaces.get method. It includes various properties of the workspace such as ID, name, slug, usage limits, plan details, and user information.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/workspaces/get.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  id: 'clv3mw4qb00008tvuw86c53db',\n  name: 'Acme',\n  slug: 'acme',\n  logo: null,\n  usage: 0,\n  usageLimit: 1000,\n  linksUsage: 0,\n  linksLimit: 25,\n  domainsLimit: 3,\n  tagsLimit: 5,\n  usersLimit: 1,\n  plan: 'free',\n  stripeId: null,\n  billingCycleStart: 17,\n  createdAt: '2024-04-17T09:52:27.635Z',\n  users: [ { role: 'owner' } ],\n  domains: []\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Short Link with External ID\nDESCRIPTION: Creates a new short link with an external ID parameter for database association.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/php.mdx#2025-04-10_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Dub\\Models\\Operations;\n\ntry {\n  $request = new Operations\\CreateLinkRequestBody(\n    url: 'https://google.com',\n    externalId: '12345',\n  );\n\n  $response = $dub->links->create($request);\n\n  if ($response->linkSchema !== null) {\n    // handle response\n  }\n} catch (Throwable $e) {\n  // handle exception\n}\n```\n\n----------------------------------------\n\nTITLE: Making API Requests with OAuth Access Token\nDESCRIPTION: Shell example showing how to make an authenticated API request to create a link by passing the access token in the Authorization header with Bearer authentication scheme.\nSOURCE: https://github.com/dubinc/docs/blob/main/integrations/quickstart.mdx#2025-04-10_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl --request POST \\\n  --url https://api.dub.co/links \\\n  --header 'Authorization: Bearer <ACCESS_TOKEN>' \\\n  --header 'Content-Type: application/json'\n```\n\n----------------------------------------\n\nTITLE: Response Structure for dub.links.createMany in TypeScript\nDESCRIPTION: This snippet shows the expected response structure when using dub.links.createMany. It returns an array of link objects, each containing details such as ID, domain, key, URL, and various other properties for the created short links.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/links/create-many.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n[\n  {\n    id: \"clv3u86ej0008y9nm1f1yto2w\",\n    domain: \"dub.sh\",\n    key: \"FTC1AXj\",\n    externalId: \"123\",\n    url: \"https://www.google.com\",\n    archived: false,\n    expiresAt: null,\n    expiredUrl: null,\n    password: null,\n    proxy: false,\n    title: null,\n    description: null,\n    image: null,\n    rewrite: false,\n    ios: null,\n    android: null,\n    geo: null,\n    ...\n  },\n  {\n    id: \"clv3u86ej000ay9nm55qgbh5r\",\n    domain: \"dub.sh\",\n    key: \"B6qpMch\",\n    externalId: \"123\",\n    url: \"https://github.com\",\n    archived: false,\n    expiresAt: null,\n    expiredUrl: null,\n    password: null,\n    proxy: false,\n    title: null,\n    description: null,\n    image: null,\n    rewrite: false,\n    ios: null,\n    android: null,\n    geo: null,\n    ...\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for PUT /links/upsert Endpoint\nDESCRIPTION: YAML snippet defining the OpenAPI specification for the PUT /links/upsert endpoint. It includes the endpoint path, HTTP method, and metadata for the API documentation.\nSOURCE: https://github.com/dubinc/docs/blob/main/api-reference/endpoint/upsert-a-link.mdx#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: put /links/upsert\nog:title: \"Upsert a link with the Dub API - API Reference\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Short Link with Dub Ruby SDK\nDESCRIPTION: Example of creating a basic short link using the Dub Ruby SDK with just a URL.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/ruby.mdx#2025-04-10_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nreq = ::OpenApiSDK::Operations::CreateLinkRequest.new(\n  request_body: ::OpenApiSDK::Operations::CreateLinkRequestBody.new(\n    url: \"https://google.com\"\n  )\n)\n\nres = dub.links.create(req)\n\nputs res.raw_response.body\n```\n\n----------------------------------------\n\nTITLE: Updating Links\nDESCRIPTION: Update existing links using either linkId or externalId.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/flask.mdx#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Update a link by its linkId\ndef update_link(request):\n  res = d.links.update(link_id=\"clx1gvi9o0005hf5momm6f7hj\", request_body={\n    \"url\": \"https://google.uk\",\n  })\n\n  return res.short_link\n\n# Update a link by its externalId\ndef update_link(request):\n  res = d.links.update(external_id=\"ext_12345\", request_body={\n    \"url\": \"https://google.uk\",\n  })\n\n  return res.short_link\n```\n\n----------------------------------------\n\nTITLE: Defining Dub API Key Format in Bash Environment Variable\nDESCRIPTION: Shows the format of a Dub API key when stored as an environment variable. The key follows a specific pattern with a 'dub_' prefix followed by a unique identifier.\nSOURCE: https://github.com/dubinc/docs/blob/main/api-reference/tokens.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDUB_API_KEY=dub_xxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for GET /partners/analytics Endpoint\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the GET /partners/analytics endpoint. It includes the endpoint path and HTTP method, but the full details of the API are not provided in this snippet.\nSOURCE: https://github.com/dubinc/docs/blob/main/api-reference/endpoint/retrieve-partner-analytics.mdx#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /partners/analytics\n```\n\n----------------------------------------\n\nTITLE: Retrieving Domains List using dub.domains.list in TypeScript\nDESCRIPTION: This snippet demonstrates how to call the dub.domains.list method to retrieve a list of domains. It uses destructuring to extract the result from the returned object.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/domains/list.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { result } = await dub.domains.list();\n```\n\n----------------------------------------\n\nTITLE: Creating NextAuth.js Route Handler for App Router\nDESCRIPTION: Implementation of the NextAuth.js route handler for the App Router, exporting GET and POST handlers.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/leads/next-auth.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// app/api/auth/[...nextauth]/index.ts\nimport { authOptions } from \"./options\";\nimport NextAuth from \"next-auth\";\n\nconst handler = NextAuth(authOptions);\n\nexport { handler as GET, handler as POST };\n```\n\n----------------------------------------\n\nTITLE: Installing Dub SDK with pnpm\nDESCRIPTION: Command to install the Dub SDK package using pnpm package manager.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/overview.mdx#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add dub\n```\n\n----------------------------------------\n\nTITLE: Creating a Short Link with Dub PHP SDK\nDESCRIPTION: Creates a new short link using the Dub PHP SDK with basic URL parameter.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/php.mdx#2025-04-10_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Dub\\Models\\Operations;\n\ntry {\n  $request = new Operations\\CreateLinkRequestBody(\n    url: 'https://google.com',\n  );\n\n  $response = $dub->links->create($request);\n\n  if ($response->linkSchema !== null) {\n    // handle response\n  }\n} catch (Throwable $e) {\n  // handle exception\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dub CLI with yarn\nDESCRIPTION: Command to install the latest version of Dub CLI globally using yarn package manager.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/cli/overview.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn global add dub-cli@latest\n```\n\n----------------------------------------\n\nTITLE: Domain Update Response Structure\nDESCRIPTION: Example response object returned after updating a domain. Contains domain properties including ID, slug, verification status, URLs, and usage statistics.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/domains/update.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  id: \"clvcep2sn87jh8nf808x00005\",\n  slug: \"acme.com\",\n  verified: false,\n  primary: true,\n  archived: false,\n  placeholder: \"https://dub.co/help/article/what-is-dub\",\n  expiredUrl: \"https://acme.com/expired\",\n  target: \"https://acme.com/home\",\n  type: \"redirect\",\n  clicks: 0\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Dub Analytics with Clerk User Hook\nDESCRIPTION: This React component extends the @dub/analytics package to include lead tracking functionality. It uses Clerk's useUser hook to track new user sign-ups and send the data to Dub.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/leads/clerk.mdx#2025-04-10_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { trackLead } from \"@/actions/track-lead\";\nimport { useUser } from \"@clerk/nextjs\";\nimport { Analytics, AnalyticsProps } from \"@dub/analytics/react\";\nimport { useEffect } from \"react\";\n\nexport function DubAnalytics(props: AnalyticsProps) {\n  const { user } = useUser();\n\n  useEffect(() => {\n    if (!user || user.publicMetadata.dubClickId) return;\n\n    // if the user is loaded but hasn't been persisted to Dub yet, track the lead event\n    trackLead({\n      id: user.id,\n      name: user.fullName!,\n      email: user.primaryEmailAddress?.emailAddress,\n      avatar: user.imageUrl,\n    }).then(async (res) => {\n      if (res.ok) await user.reload();\n      else console.error(res.error);\n    });\n\n    // you can also use an API route instead of a server action\n    /*\n    fetch(\"/api/track-lead\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        id: user.id,\n        name: user.fullName,\n        email: user.primaryEmailAddress?.emailAddress,\n        avatar: user.imageUrl,\n      }),\n    }).then(res => {\n      if (res.ok) await user.reload();\n      else console.error(res.statusText);\n    });\n    */\n  }, [user]);\n\n  return <Analytics {...props} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dub PHP SDK with Composer\nDESCRIPTION: Command to install the Dub PHP SDK package using Composer package manager.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/laravel.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require dub/dub-php\n```\n\n----------------------------------------\n\nTITLE: Installing Dub Ruby SDK\nDESCRIPTION: Command to install the Dub Ruby SDK using the gem package manager.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/rails.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngem install dub\n```\n\n----------------------------------------\n\nTITLE: Retrieving Link Analytics by External ID\nDESCRIPTION: This snippet shows how to retrieve analytics for a link using the externalId field. It retrieves timeseries analytics for the last 7 days for a link identified by an external ID.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/nextjs.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Retrieve the timeseries analytics for the last 7 days for a link\nconst response = await dub.analytics.retrieve({\n  externalId: \"ext_12345\",\n  interval: \"7d\",\n  groupBy: \"timeseries\",\n});\n\nconst timeseries = response as ClicksTimeseries[];\n```\n\n----------------------------------------\n\nTITLE: Installing Dub Python SDK\nDESCRIPTION: Command to install the Dub Python SDK using pip. This is the first step in integrating Dub with a Python project.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/python.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install dub\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dub SDK for Lead Tracking\nDESCRIPTION: Create the Dub client and implement a function to send lead data to Dub using the track.lead() method.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/leads/appwrite.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Models } from 'node-appwrite';\nimport { Dub } from 'dub';\n\nconst dub = new Dub({\n  token: process.env.NEXT_DUB_API_KEY\n});\n\nexport function addDubLead(user: Models.User<Models.Preferences>, dub_id: string) {\n  dub.track.lead({\n    clickId: dub_id,\n    eventName: 'Sign Up',\n    externalId: user.$id,\n    customerName: user.name,\n    customerEmail: user.email\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dub SDK with yarn\nDESCRIPTION: Command to install Dub SDK and its peer dependency (zod) using yarn package manager\nSOURCE: https://github.com/dubinc/docs/blob/main/snippets/sdk-install-ts.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add dub zod # zod is a peer dependency\n```\n\n----------------------------------------\n\nTITLE: Installing Dub SDK with yarn\nDESCRIPTION: Command to install the Dub SDK package using yarn package manager. Note that zod is required as a peer dependency.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/overview.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add dub zod # zod is a peer dependency\n```\n\n----------------------------------------\n\nTITLE: Creating Stripe Customer with Dub Integration in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Stripe customer while integrating with Dub for conversion tracking. It includes passing the user's unique ID and click event ID in the metadata.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/sales/stripe.mdx#2025-04-10_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { stripe } from \"@/lib/stripe\";\n\nconst user = {\n  id: \"user_123\",\n  email: \"user@example.com\",\n  teamId: \"team_xxxxxxxxx\",\n};\n\nconst dub_id = req.headers.get(\"dub_id\");\n\nawait stripe.customers.create({\n  email: user.email,\n  name: user.name,\n  metadata: {\n    dubCustomerId: user.id,\n    dubClickId: dub_id,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Dub SDK Instance\nDESCRIPTION: TypeScript code to initialize the Dub SDK with an API key. The token can be provided directly or through the DUB_API_KEY environment variable\nSOURCE: https://github.com/dubinc/docs/blob/main/snippets/sdk-install-ts.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Dub } from \"dub\";\n\nexport const dub = new Dub({\n  token: process.env.DUB_API_KEY, // optional, defaults to DUB_API_KEY env variable\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Links with Dub SDK\nDESCRIPTION: Shows how to update existing links using either the linkId or externalId. Demonstrates both methods of link identification for updates.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/express.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napp.post(\"/update-link\", async (req: Request, res: Response) => {\n  try {\n    // Update a link by its linkId\n    const { shortLink } = await dub.links.update(\n      \"link_rWOKByP0bRMrstK8e4HPjprJ\",\n      {\n        url: \"https://www.google.uk\", // new URL\n      }\n    );\n\n    // Update a link by its externalId\n    const { shortLink } = await dub.links.update(\"ext_12345\", {\n      url: \"https://www.google.uk\", // new URL\n    });\n\n    res.status(200).json({ shortLink });\n  } catch (error: any) {\n    res.status(400).json(error);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Dub SDK Instance\nDESCRIPTION: TypeScript code showing how to import the initialized Dub instance for use in other files\nSOURCE: https://github.com/dubinc/docs/blob/main/snippets/sdk-install-ts.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { dub } from \"./lib/dub\";\n```\n\n----------------------------------------\n\nTITLE: Updating a Tag with dub.tags.update in TypeScript\nDESCRIPTION: Updates an existing tag by providing the tag ID, new name, and color. This example changes a tag's name to 'Jobs' and its color to 'red'.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/tags/update.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait dub.tags.update(\"cluibmjj5000975qol4hnx0t7\", {\n  name: \"Jobs\",\n  color: \"red\",\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Paginated List of Links with Ruby\nDESCRIPTION: This example demonstrates how to use the Ruby SDK to retrieve paginated links. It creates a request object with pagination parameters and passes it to the links.list method.\nSOURCE: https://github.com/dubinc/docs/blob/main/api-reference/pagination.mdx#2025-04-10_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nreq = ::OpenApiSDK::Operations::GetLinksRequest.new(\n  page: 1,\n  page_size: 10,\n)\n\nres = s.links.list(req)\n```\n\n----------------------------------------\n\nTITLE: Setting up Dub API key in Laravel .env file\nDESCRIPTION: Configuration for adding the Dub API key to the Laravel environment file.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/laravel.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDUB_API_KEY=your_api_key\n```\n\n----------------------------------------\n\nTITLE: Injecting Dub Instance in Laravel Controller\nDESCRIPTION: Example of dependency injection to use the Dub instance in a Laravel controller.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/laravel.mdx#2025-04-10_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Dub\\Laravel\\Dub;\n\nclass LinkController extends Controller {\n  public function createLink(Dub $dub) {\n    // Now you can use the SDK instance\n    $dub->links->create(...);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Dub SDK in Rails Controller\nDESCRIPTION: Setup code to initialize the Dub SDK in a Rails controller with API key configuration.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/rails.mdx#2025-04-10_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass LinksController < ApplicationController\n  require 'dub'\n\n  before_action :initialize_dub\n\n  def initialize_dub\n    @dub = ::OpenApiSDK::Dub.new\n    @dub.config_security(\n      ::OpenApiSDK::Shared::Security.new(\n        token: ENV['DUB_API_KEY']\n      )\n    )\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Link with Dub SDK\nDESCRIPTION: Basic implementation of creating a short link using the Dub Ruby SDK.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/rails.mdx#2025-04-10_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ndef create\n  req = ::OpenApiSDK::Operations::CreateLinkRequest.new(\n    request_body: ::OpenApiSDK::Operations::CreateLinkRequestBody.new(\n      url: 'https://google.com'\n    )\n  )\n\n  res = @dub.links.create(req)\n\n  render json: res.raw_response.body\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Short Link with Parameters\nDESCRIPTION: Command to create a shortened URL with specified URL and key parameters, bypassing the interactive prompts.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/cli/overview.mdx#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndub shorten [url] [key]\n```\n\n----------------------------------------\n\nTITLE: Initializing Dub Ruby SDK\nDESCRIPTION: Code to initialize the Dub Ruby SDK by creating a new instance of the Dub struct and configuring security with an API key from environment variables.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/ruby.mdx#2025-04-10_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'dub'\n\ndub = ::OpenApiSDK::Dub.new\ndub.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    token: ENV['DUB_API_KEY'],\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Click Events with Dub TypeScript SDK\nDESCRIPTION: Example of how to retrieve click events for a specific link using the Dub SDK. The request demonstrates filtering by linkId and using relative date ranges for the time period.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/events/list.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait dub.events.list({\n  event: \"clicks\",\n  linkId: \"abc123\",\n  start: \"a week ago\", // we support relative dates like \"a week ago\"\n  end: \"today\", // we support relative dates like \"today\"\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Domain for URL Shortening\nDESCRIPTION: Command to configure a domain for URL shortening in Dub CLI.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/cli/overview.mdx#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndub domains\n```\n\n----------------------------------------\n\nTITLE: Initializing Dub SDK\nDESCRIPTION: Initialize the Dub Python SDK by creating a new instance of the Dub class with API key authentication.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/flask.mdx#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport dub\nfrom dub.models import operations\n\nd = dub.Dub(\n  token=os.environ['DUB_API_KEY'],\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Dub Python SDK with pip\nDESCRIPTION: Command to install the Dub Python SDK using pip package manager.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/django.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install dub\n```\n\n----------------------------------------\n\nTITLE: Cloning the Dub Repository\nDESCRIPTION: Command to clone the Dub GitHub repository to your local machine. This is the first step in setting up the local development environment.\nSOURCE: https://github.com/dubinc/docs/blob/main/local-development.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/dubinc/dub.git\n```\n\n----------------------------------------\n\nTITLE: Creating Database Tables with Prisma in Bash\nDESCRIPTION: Command to create the database tables using Prisma. This should be run after generating the Prisma client.\nSOURCE: https://github.com/dubinc/docs/blob/main/self-hosting.mdx#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm run prisma:push\n```\n\n----------------------------------------\n\nTITLE: Checking Dub CLI Version\nDESCRIPTION: Command to check the installed version of Dub CLI in your system.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/cli/overview.mdx#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndub --version\n# => 0.0.12\n```\n\n----------------------------------------\n\nTITLE: Building Internal Packages\nDESCRIPTION: Command to compile all internal packages in the Dub monorepo, which is necessary before running the main application.\nSOURCE: https://github.com/dubinc/docs/blob/main/local-development.mdx#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm -r --filter \"./packages/**\" build\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the development server and build packages.\nSOURCE: https://github.com/dubinc/docs/blob/main/local-development.mdx#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Initializing Dub Python SDK in Django\nDESCRIPTION: Creates an instance of the Dub client using an API key stored in environment variables. This initializes the SDK for use in Django applications.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/django.mdx#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport dub\nfrom dub.models import operations\nfrom django.http import JsonResponse\n\nd = dub.Dub(\n  token=os.environ['DUB_API_KEY'],\n)\n```\n\n----------------------------------------\n\nTITLE: Removing Unnecessary Files in Bash\nDESCRIPTION: Command to remove the vercel.json file, which is not required for the self-hosted version of Dub.\nSOURCE: https://github.com/dubinc/docs/blob/main/self-hosting.mdx#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrm apps/web/vercel.json\n```\n\n----------------------------------------\n\nTITLE: Installing Dub CLI with pnpm\nDESCRIPTION: Command to install the latest version of Dub CLI globally using pnpm package manager.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/cli/overview.mdx#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm i -g dub-cli@latest\n```\n\n----------------------------------------\n\nTITLE: Creating an Ngrok Tunnel for Local Development\nDESCRIPTION: Command to start an Ngrok tunnel on port 8888, which is needed if you want to run Qstash-powered background jobs locally by exposing your local server to the internet.\nSOURCE: https://github.com/dubinc/docs/blob/main/local-development.mdx#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nngrok http 8888\n```\n\n----------------------------------------\n\nTITLE: Cloning Dub Repository in Bash\nDESCRIPTION: Command to clone the Dub repository from GitHub into a public repository. This is the first step in setting up a self-hosted instance of Dub.\nSOURCE: https://github.com/dubinc/docs/blob/main/self-hosting.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/dubinc/dub.git\n```\n\n----------------------------------------\n\nTITLE: Short Link Configuration Parameters in ParamField Format\nDESCRIPTION: Component markup showing all available parameters for configuring short links through the API, including basic URL settings, tracking options, metadata, social media customization, and UTM parameters.\nSOURCE: https://github.com/dubinc/docs/blob/main/snippets/link-arguments.mdx#2025-04-10_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n<ParamField body=\"url\" type=\"string\" required>\n  The destination URL of the short link.\n</ParamField>\n\n<ParamField body=\"domain\" type=\"string\">\n  The domain of the short link. If not provided, the primary domain for the\n  workspace will be used (or `dub.sh` if the workspace has no domains).\n</ParamField>\n\n<ParamField body=\"key\" type=\"string\">\n  The short link slug. If not provided, a random 7-character slug will be\n  generated.\n</ParamField>\n\n<ParamField body=\"externalId\" type=\"string | null\">\n  This is the ID of the link in your database. If set, it can be used to\n  identify the link in the future.\n</ParamField>\n\n<ParamField body=\"tenantId\" type=\"string | null\">\n  The ID of the tenant that created the link inside your system. If set, it can\n  be used to fetch all links for a tenant.\n</ParamField>\n\n<ParamField body=\"prefix\" type=\"string\">\n  The prefix of the short link slug for randomly-generated keys (e.g. if prefix\n  is `/c/`, generated keys will be in the `/c/:key` format). Will be ignored if\n  key is provided.\n</ParamField>\n\n<ParamField body=\"trackConversion\" type=\"boolean\" default={false}>\n  Whether to track conversions for the short link.\n</ParamField>\n\n<ParamField body=\"identifier\" type=\"string | null\">\n  The identifier of the short link that is unique across your workspace. If set,\n  it can be used to identify your short link for client-side click tracking.\n</ParamField>\n\n<ParamField body=\"archived\" type=\"boolean\" default={false}>\n  Whether the short link is archived.\n</ParamField>\n\n<ParamField body=\"publicStats\" type=\"boolean\" default={false}>\n  Whether the short link's stats are publicly accessible.\n</ParamField>\n\n<ParamField body=\"tagIds\" type=\"string\">\n  The unique IDs of the tags assigned to the short link.\n</ParamField>\n\n<ParamField body=\"tagNames\" type=\"string | string[]\">\n  The unique name of the tags assigned to the short link (case insensitive).\n</ParamField>\n\n<ParamField body=\"comments\" type=\"string | null\">\n  The comments for the short link.\n</ParamField>\n\n<ParamField body=\"expiresAt\" type=\"string | null\">\n  The date and time when the short link will expire at.\n</ParamField>\n\n<ParamField body=\"expiredUrl\" type=\"string | null\">\n  The URL to redirect to when the short link has expired.\n</ParamField>\n\n<ParamField body=\"password\" type=\"string | null\">\n  The password required to access the destination URL of the short link.\n</ParamField>\n\n<ParamField body=\"proxy\" type=\"boolean\" default={false}>\n  Whether the short link uses Custom Social Media Cards feature.\n</ParamField>\n\n<ParamField body=\"title\" type=\"string | null\">\n  The title of the short link generated via `api.dub.co/metatags`. Will be used\n  for Custom Social Media Cards if proxy is true.\n</ParamField>\n\n<ParamField body=\"description\" type=\"string | null\">\n  The description of the short link generated via `api.dub.co/metatags`. Will be\n  used for Custom Social Media Cards if proxy is true.\n</ParamField>\n\n<ParamField body=\"image\" type=\"string | null\">\n  The image of the short link generated via `api.dub.co/metatags`. Will be used\n  for Custom Social Media Cards if proxy is true.\n</ParamField>\n\n<ParamField body=\"video\" type=\"string | null\">\n  The custom link preview video (og:video). Will be used for Custom Social Media\n  Cards if `proxy` is true. Learn more: https://d.to/og\n</ParamField>\n\n<ParamField body=\"rewrite\" type=\"boolean\" default={false}>\n  Whether the short link uses link cloaking.\n</ParamField>\n\n<ParamField body=\"ios\" type=\"string | null\">\n  The iOS destination URL for the short link for iOS device targeting.\n</ParamField>\n\n<ParamField body=\"android\" type=\"string | null\">\n  The Android destination URL for the short link for Android device targeting.\n</ParamField>\n\n<ParamField body=\"doIndex\" type=\"boolean\" default={false}>\n  Allow search engines to index your short link. Defaults to `false` if not\n  provided. Learn more: https://d.to/noindex\n</ParamField>\n\n<ParamField body=\"utm_source\" type=\"string | null\">\n  The UTM source of the short link. If set, this will populate or override the\n  UTM source in the destination URL.\n</ParamField>\n\n<ParamField body=\"utm_medium\" type=\"string | null\">\n  The UTM medium of the short link. If set, this will populate or override the\n  UTM medium in the destination URL.\n</ParamField>\n\n<ParamField body=\"utm_campaign\" type=\"string | null\">\n  The UTM campaign of the short link. If set, this will populate or override the\n  UTM campaign in the destination URL.\n</ParamField>\n\n<ParamField body=\"utm_term\" type=\"string | null\">\n  The UTM term of the short link. If set, this will populate or override the UTM\n  term in the destination URL.\n</ParamField>\n\n<ParamField body=\"utm_content\" type=\"string | null\">\n  The UTM content of the short link. If set, this will populate or override the\n  UTM content in the destination URL.\n</ParamField>\n\n<ParamField body=\"ref\" type=\"string | null\">\n  The referral tag of the short link. If set, this will populate or override the\n  `ref` query parameter in the destination URL.\n</ParamField>\n\n<ParamField body=\"programId\" type=\"string | null\">\n  The ID of the program the short link is associated with.\n</ParamField>\n\n<ParamField body=\"webhookIds\" type=\"string[] | null\">\n  An array of webhook IDs to trigger when the link is clicked. These webhooks\n  will receive click event data.\n</ParamField>\n```\n\n----------------------------------------\n\nTITLE: Displaying Dub's Monorepo Structure\nDESCRIPTION: A directory structure showing Dub's monorepo organization with apps and packages folders. The apps directory contains the web application, while the packages directory contains various supporting libraries and configurations.\nSOURCE: https://github.com/dubinc/docs/blob/main/local-development.mdx#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\napps\n├── web\npackages\n├── cli\n├── email\n├── embeds\n├── prisma\n├── stripe-app\n├── tailwind-config\n├── tinybird\n├── tsconfig\n├── ui\n├── utils\n```\n\n----------------------------------------\n\nTITLE: Retrieving Analytics with External ID\nDESCRIPTION: Retrieve analytics data for a link using its external ID reference.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/flask.mdx#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Retrieve the timeseries analytics for the last 7 days for a link\ndef analytics(request):\n  res = d.analytics.retrieve(request={\n    \"external_id\": \"ext_12345\",\n    \"interval\": \"7d\",\n    \"group_by\": \"timeseries\",\n  })\n\n  return str(res)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Dub\nDESCRIPTION: Example of environment variables that need to be set in the .env file for Dub configuration. These include domain settings and Vercel-related tokens.\nSOURCE: https://github.com/dubinc/docs/blob/main/self-hosting.mdx#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# The domain that your app will be hosted on\nNEXT_PUBLIC_APP_DOMAIN=acme.com\n# The short domain that your app will be using (could be the same as the above)\nNEXT_PUBLIC_APP_SHORT_DOMAIN=ac.me\n# The ID of the Vercel team that your app will be deployed to: https://vercel.com/docs/accounts/create-a-team#find-your-team-id\nTEAM_ID_VERCEL=\n# The unique access token for your Vercel account: https://vercel.com/guides/how-do-i-use-a-vercel-api-access-token\nAUTH_BEARER_TOKEN=\n```\n\n----------------------------------------\n\nTITLE: Setting Tinybird API URL Environment Variable\nDESCRIPTION: Example of setting the Tinybird API base URL as an environment variable in the .env file. This URL is specific to the region of your Tinybird database.\nSOURCE: https://github.com/dubinc/docs/blob/main/self-hosting.mdx#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nTINYBIRD_API_URL=https://api.us-east.tinybird.co\n```\n\n----------------------------------------\n\nTITLE: Defining Workspace Response Fields using ResponseField Components\nDESCRIPTION: This code snippet defines the structure of a workspace response using ResponseField components. It includes fields for identification, usage metrics, limits, plan details, and timestamps. Some fields use nested Expandable components for additional properties.\nSOURCE: https://github.com/dubinc/docs/blob/main/snippets/workspace-response.mdx#2025-04-10_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n<ResponseField name=\"id\" type=\"string\" required>\n  The unique ID of the workspace.\n</ResponseField>\n\n<ResponseField name=\"name\" type=\"string\" required>\n  The name of the workspace.\n</ResponseField>\n\n<ResponseField name=\"slug\" type=\"string\" required>\n  The slug of the workspace.\n</ResponseField>\n\n<ResponseField name=\"logo\" type=\"string | null\" required>\n  The logo of the workspace.\n</ResponseField>\n\n<ResponseField name=\"usage\" type=\"number\" required>\n  The usage of the workspace.\n</ResponseField>\n\n<ResponseField name=\"usageLimit\" type=\"number\" required>\n  The usage limit of the workspace.\n</ResponseField>\n\n<ResponseField name=\"linksUsage\" type=\"number\" required>\n  The links usage of the workspace.\n</ResponseField>\n\n<ResponseField name=\"linksLimit\" type=\"number\" required>\n  The links limit of the workspace.\n</ResponseField>\n\n<ResponseField name=\"domainsLimit\" type=\"number\" required>\n  The domains limit of the workspace.\n</ResponseField>\n\n<ResponseField name=\"tagsLimit\" type=\"number\" required>\n  The tags limit of the workspace.\n</ResponseField>\n\n<ResponseField name=\"usersLimit\" type=\"number\" required>\n  The users limit of the workspace.\n</ResponseField>\n\n<ResponseField name=\"plan\" type=\"string\" required>\n  The plan of the workspace.\n</ResponseField>\n\n<ResponseField name=\"stripeId\" type=\"string | null\" required>\n  The Stripe ID of the workspace.\n</ResponseField>\n\n<ResponseField name=\"billingCycleStart\" type=\"number\" required>\n  The date and time when the billing cycle starts for the workspace.\n</ResponseField>\n\n<ResponseField name=\"createdAt\" type=\"string\" required>\n  The date and time when the workspace was created.\n</ResponseField>\n\n<ResponseField name=\"users\" type=\"object[]\" required>\nThe role of the authenticated user in the workspace.\n\n  <Expandable title=\"properties\">\n    <ResponseField name=\"users.role\" type=\"string\" required>\n      The role of the authenticated user in the workspace.\n    </ResponseField>\n  </Expandable>\n</ResponseField>\n\n<ResponseField name=\"domains\" type=\"object[]\" required>\nThe domains of the workspace.\n\n  <Expandable title=\"properties\">\n    <ResponseField name=\"domains.slug\" type=\"string\">\n      The domain of the workspace.\n    </ResponseField>\n\n    <ResponseField name=\"domains.primary\" type=\"string\">\n      Indicates if the domain is the primary domain.\n    </ResponseField>\n\n  </Expandable>\n</ResponseField>\n```\n\n----------------------------------------\n\nTITLE: Configuring R2 Storage Environment Variables in TypeScript\nDESCRIPTION: Environment variables configuration for Cloudflare R2 storage access, including access key ID, secret access key, and endpoint settings.\nSOURCE: https://github.com/dubinc/docs/blob/main/self-hosting.mdx#2025-04-10_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nSTORAGE_ACCESS_KEY_ID= // this is the Access Key ID value from Step 2\nSTORAGE_SECRET_ACCESS_KEY= // this is the Secret Access Key value from Step 2\nSTORAGE_ENDPOINT= // this is the S3 API value from Step 1\n```\n\n----------------------------------------\n\nTITLE: Installing Dub Analytics Script in WordPress Header\nDESCRIPTION: Script tag to be added to the WordPress header.php file for implementing Dub Analytics tracking. The script should be placed within the header area of the theme file and uses deferred loading for optimal performance.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/client-side/installation-guides/wordpress.mdx#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.dubcdn.com/analytics/script.js\" defer></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dub in Laravel services.php\nDESCRIPTION: PHP configuration to add Dub API key settings to the Laravel services configuration file.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/laravel.mdx#2025-04-10_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'dub' => [\n  'api_key' => env('DUB_API_KEY'),\n],\n```\n\n----------------------------------------\n\nTITLE: Modifying Prisma Schema for Custom Domain\nDESCRIPTION: Example of how to modify the Prisma schema file to use a custom short domain. This involves replacing the columns in the DefaultDomains model with the normalized version of your custom short domain.\nSOURCE: https://github.com/dubinc/docs/blob/main/self-hosting.mdx#2025-04-10_snippet_5\n\nLANGUAGE: prisma\nCODE:\n```\nmodel DefaultDomains {\n  id          String   @id @default(cuid())\n  acme        Boolean  @default(true)\n  projectId   String   @unique\n  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Domain Response Fields using JSX ResponseField Components\nDESCRIPTION: This code snippet defines the structure and properties of a domain object using JSX ResponseField components. It includes fields for the domain's ID, slug, verification status, primary status, archival status, placeholder URL, expired URL, not found URL, creation and update timestamps, and registered domain information.\nSOURCE: https://github.com/dubinc/docs/blob/main/snippets/domain-response.mdx#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ResponseField name=\"id\" type=\"string\" required>\n  The unique identifier of the domain.\n</ResponseField>\n\n<ResponseField name=\"slug\" type=\"string\" required>\n  The domain name.\n</ResponseField>\n\n<ResponseField name=\"verified\" type=\"boolean\" default={false} required>\n  Whether the domain is verified.\n</ResponseField>\n\n<ResponseField name=\"primary\" type=\"boolean\" default={false} required>\n  Whether the domain is the primary domain for the workspace.\n</ResponseField>\n\n<ResponseField name=\"archived\" type=\"boolean\" default={false} required>\n  Whether the domain is archived.\n</ResponseField>\n\n<ResponseField\n  name=\"placeholder\"\n  type=\"string\"\n  default=\"https://dub.co/help/article/what-is-dub\"\n  required\n>\n  Provide context to your teammates in the link creation modal by showing them\n  an example of a link to be shortened.\n</ResponseField>\n\n<ResponseField name=\"expiredUrl\" type=\"string | null\" required>\n  The URL to redirect to when a link under this domain has expired.\n</ResponseField>\n\n<ResponseField name=\"notFoundUrl\" type=\"string | null\" required>\n  The URL to redirect to when a link under this domain doesn't exist.\n</ResponseField>\n\n<ResponseField name=\"createdAt\" type=\"string\" required>\n  The date the domain was created.\n</ResponseField>\n\n<ResponseField name=\"updatedAt\" type=\"string\" required>\n  The date the domain was last updated.\n</ResponseField>\n\n<ResponseField name=\"registeredDomain\" type=\"object | null\" required>\n  The registered domain record.\n  <Expandable title=\"properties\">\n    <ResponseField name=\"id\" type=\"string\" required>\n      The ID of the registered domain record.\n    </ResponseField>\n    <ResponseField name=\"createdAt\" type=\"string\" required>\n      The date the domain was created.\n    </ResponseField>\n    <ResponseField name=\"expiresAt\" type=\"string\" required>\n      The date the domain expires.\n    </ResponseField>\n  </Expandable>\n</ResponseField>\n```\n\n----------------------------------------\n\nTITLE: Implementing Base Variant in React and HTML\nDESCRIPTION: Shows how to implement the base variant of @dub/analytics script which handles detecting the dub_id query parameter, tracking client-side click events, and supporting custom cookie windows and attribution models.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/client-side/variants.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<DubAnalytics />\n```\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.dubcdn.com/analytics/script.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with PNPM\nDESCRIPTION: Command to install all the dependencies required for the Dub project using PNPM package manager.\nSOURCE: https://github.com/dubinc/docs/blob/main/local-development.mdx#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Installing @dub/analytics Package with Package Managers\nDESCRIPTION: Commands for installing @dub/analytics package using different package managers including npm, pnpm, yarn, and bun.\nSOURCE: https://github.com/dubinc/docs/blob/main/snippets/dub-analytics-install.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @dub/analytics\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @dub/analytics\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @dub/analytics\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @dub/analytics\n```\n\n----------------------------------------\n\nTITLE: Implementing Combined Variant in React and HTML\nDESCRIPTION: Demonstrates how to combine multiple script variants (site-visit and outbound-domains) to leverage features from both variants simultaneously.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/client-side/variants.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// the DubAnalytics component automatically detects the `domainsConfig` prop\n// and applies the combined script variant for you\n<DubAnalytics\n  domainsConfig={{\n    site: \"site.dub.co\",\n    outbound: [\"example.com\", \"example.sh\"],\n  }}\n/>\n```\n\nLANGUAGE: html\nCODE:\n```\n<script\n  src=\"https://www.dubcdn.com/analytics/script.site-visit.outbound-domains.js\"\n  data-domains='{\"site\": \"site.dub.co\", \"outbound\": [\"example.com\", \"example.sh\"]}'\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Link with External ID in Laravel\nDESCRIPTION: PHP code to create a short link with an external ID for association with your own system identifiers.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/laravel.mdx#2025-04-10_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Dub\\Models\\Operations;\n\nclass LinkController extends Controller\n{\n    public function createLinkWithExternalId()\n    {\n        $dub = new Dub();\n\n        try {\n            $request = new Operations\\CreateLinkRequestBody(\n                url: 'https://google.com',\n                externalId: '12345'\n            );\n\n            $response = $dub->links->create($request);\n\n            if ($response->linkSchema !== null) {\n                // handle response\n            }\n        } catch (Throwable $e) {\n            // handle exception\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using DubAnalytics React Component with Outbound Domains\nDESCRIPTION: Example of using the DubAnalytics React component to automatically apply the correct script variant based on the provided configuration.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/client-side/variants.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<DubAnalytics domainsConfig={{ outbound: [\"example.com\", \"example.sh\"] }} />\n```\n\n----------------------------------------\n\nTITLE: Setting Up Mailhog Docker Container\nDESCRIPTION: Commands to pull and run Mailhog Docker container for email testing.\nSOURCE: https://github.com/dubinc/docs/blob/main/local-development.mdx#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull mailhog/mailhog\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 8025:8025 -p 1025:1025 mailhog/mailhog\n```\n\n----------------------------------------\n\nTITLE: Installing Dub SDK with pnpm\nDESCRIPTION: Command to install Dub SDK using pnpm package manager\nSOURCE: https://github.com/dubinc/docs/blob/main/snippets/sdk-install-ts.mdx#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add dub\n```\n\n----------------------------------------\n\nTITLE: Configuring Reverse Proxy in Vercel\nDESCRIPTION: This code snippet shows how to set up a reverse proxy in Vercel using the vercel.json configuration file. It defines a rewrite rule to route tracking requests through a proxy URL, helping to avoid ad-blockers from blocking click-tracking requests.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/clicks/introduction.mdx#2025-04-10_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n// vercel.json\n{\n  \"rewrites\": [\n    {\n      \"source\": \"/_proxy/dub/track/:path\",\n      \"destination\": \"https://api.dub.co/track/:path\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Dub Analytics with Reverse Proxy in React/Next.js\nDESCRIPTION: This code snippet demonstrates how to initialize the Dub Analytics component in a React or Next.js application with a custom reverse proxy URL. It includes setting up the custom domain for short links and specifying the query parameter for client-side click-tracking.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/clicks/introduction.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Analytics as DubAnalytics } from \"@dub/analytics/react\";\n\nexport default function App() {\n  return (\n    <Layout>\n      <DubAnalytics\n        apiHost=\"/_proxy/dub\" // the URL of your reverse proxy\n        domainsConfig={{\n          refer: \"go.example.com\", // the custom domain you're using on Dub for your short links\n        }}\n        queryParam=\"via\" // optional: query parameter to listen to for client-side click-tracking (default: \"via\")\n      />\n      {/* Your app code here */}\n    </Layout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Upserting a Link with Dub SDK in Laravel\nDESCRIPTION: PHP implementation for upserting a link (creating or updating) using the Dub SDK.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/laravel.mdx#2025-04-10_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Dub\\Models\\Operations;\n\nclass LinkController extends Controller\n{\n    public function upsertLink()\n    {\n        $dub = new Dub();\n\n        try {\n            $request = new Operations\\UpsertLinkRequestBody(\n                url: 'https://google.com'\n            );\n\n            $response = $dub->links->upsert($request);\n\n            if ($response->linkSchema !== null) {\n                // handle response\n            }\n        } catch (Throwable $e) {\n            // handle exception\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Database Setup Commands\nDESCRIPTION: Commands for generating Prisma client and creating database tables.\nSOURCE: https://github.com/dubinc/docs/blob/main/local-development.mdx#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm run prisma:generate\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm run prisma:push\n```\n\n----------------------------------------\n\nTITLE: Importing AuthProviders Component in JSX\nDESCRIPTION: This code snippet imports the AuthProviders component from a specific file path. The component is likely used to render authentication provider-specific instructions for lead conversion tracking setup.\nSOURCE: https://github.com/dubinc/docs/blob/main/snippets/sales-prerequisites.mdx#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport AuthProviders from \"/snippets/auth-providers.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Domains in JSX\nDESCRIPTION: This snippet defines the 'domainsConfig' parameter, which is used to configure the domains that Dub will track. It includes properties for referral tracking, site visits, and cross-domain tracking.\nSOURCE: https://github.com/dubinc/docs/blob/main/snippets/dub-analytics-params-react.mdx#2025-04-10_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ParamField body=\"domainsConfig\" type=\"JSON-stringified object\">\n  Configure the domains that Dub will track. The following properties are available:\n\n  <Expandable title=\"properties\">\n    <ParamField body=\"refer\" type=\"string\">\n      The Dub custom domain for [referral program client-side click tracking](http://d.to/clicks/refer)\n      (previously `shortDomain`).\n      Example: `refer.dub.co`\n    </ParamField>\n    <ParamField body=\"site\" type=\"string\">\n      The Dub short domain for tracking site visits.\n      Example: `site.dub.co`\n    </ParamField>\n    <ParamField body=\"outbound\" type=\"string | string[]\">\n      An array of domains for cross-domain tracking. When configured, the existing\n      `dub_id` cookie will be automatically appended to all outbound links\n      targeting these domains to enable cross-domain tracking across different\n      applications.\n      Example: `[\"dub.sh\", \"git.new\"]`\n    </ParamField>\n  </Expandable>\n</ParamField>\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Stack for MySQL and PlanetScale\nDESCRIPTION: Command to initialize the Docker Compose stack that runs MySQL database and PlanetScale simulator containers.\nSOURCE: https://github.com/dubinc/docs/blob/main/local-development.mdx#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Short Link Response Field Example - ID\nDESCRIPTION: Example of link ID field with prefix format\nSOURCE: https://github.com/dubinc/docs/blob/main/snippets/link-response.mdx#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nlink_\n```\n\n----------------------------------------\n\nTITLE: Defining Deprecated Short Domain Parameter in JSX\nDESCRIPTION: This snippet defines the deprecated 'shortDomain' parameter, which has been replaced by 'domainsConfig.refer'. It was previously used for referral program client-side click tracking.\nSOURCE: https://github.com/dubinc/docs/blob/main/snippets/dub-analytics-params-react.mdx#2025-04-10_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<ParamField body=\"shortDomain\" type=\"string\" deprecated>\n  [Deprecated: Use `domainsConfig.refer` instead] The Dub custom domain for\n  [referral program client-side click tracking](http://d.to/clicks/refer).\n</ParamField>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Analytics for a Link with Dub SDK in Laravel\nDESCRIPTION: PHP code to fetch analytics data for a link using the Dub SDK in Laravel with interval and grouping options.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/laravel.mdx#2025-04-10_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Dub\\Models\\Operations;\n\nclass LinkController extends Controller\n{\n    public function retrieveAnalytics()\n    {\n        $dub = new Dub();\n\n        try {\n            $request = new Operations\\RetrieveAnalyticsRequest();\n            $request->linkId = 'clmnr6jcc0005l308q9v56uz1';\n            $request->interval = Operations\\Interval::SevenD;\n            $request->groupBy = Operations\\GroupBy::Timeseries;\n\n            $response = $dub->analytics->retrieve($request);\n\n            if ($response->oneOf !== null) {\n                // Handle the response\n                print_r($response->oneOf);\n            }\n        } catch (Throwable $e) {\n            // handle exception\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing trackLead Server Action\nDESCRIPTION: This server-side action implements the trackLead functionality. It sends lead event data to Dub, updates the user's metadata in Clerk, and manages the dub_id cookie.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/leads/clerk.mdx#2025-04-10_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n\"use server\";\n\nimport { dub } from \"@/lib/dub\";\nimport { clerkClient } from \"@clerk/nextjs/server\";\nimport { cookies } from \"next/headers\";\n\nexport async function trackLead({\n  id,\n  name,\n  email,\n  avatar,\n}: {\n  id: string;\n  name?: string | null;\n  email?: string | null;\n  avatar?: string | null;\n}) {\n  try {\n    const cookieStore = await cookies();\n    const dubId = cookieStore.get(\"dub_id\")?.value;\n\n    if (dubId) {\n      // Send lead event to Dub\n      await dub.track.lead({\n        clickId: dubId,\n        eventName: \"Sign Up\",\n        externalId: id,\n        customerName: name,\n        customerEmail: email,\n        customerAvatar: avatar,\n      });\n\n      // Delete the dub_id cookie\n      cookieStore.set(\"dub_id\", \"\", {\n        expires: new Date(0),\n      });\n    }\n\n    const clerk = await clerkClient();\n    await clerk.users.updateUser(id, {\n      publicMetadata: {\n        dubClickId: dubId || \"n/a\",\n      },\n    });\n\n    return { ok: true };\n  } catch (error) {\n    console.error(\"Error in trackLead:\", error);\n    return { ok: false, error: (error as Error).message };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Environment Configuration\nDESCRIPTION: Environment variables configuration for connecting to local MySQL database and PlanetScale simulator.\nSOURCE: https://github.com/dubinc/docs/blob/main/local-development.mdx#2025-04-10_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nDATABASE_URL=\"mysql://root:@localhost:3306/planetscale\"\nPLANETSCALE_DATABASE_URL=\"http://root:unused@localhost:3900/planetscale\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Parameter in JSX\nDESCRIPTION: This snippet defines the 'queryParam' parameter, which specifies the query parameter to listen to for client-side click-tracking. It has a default value of 'via'.\nSOURCE: https://github.com/dubinc/docs/blob/main/snippets/dub-analytics-params-react.mdx#2025-04-10_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<ParamField body=\"queryParam\" type=\"string\" default=\"via\">\n  The query parameter to listen to for client-side click-tracking (e.g.\n  `?via=abc123`).\n</ParamField>\n```\n\n----------------------------------------\n\nTITLE: Implementing trackLead API Route\nDESCRIPTION: This Next.js API route provides an alternative implementation of the trackLead functionality. It handles POST requests to track lead events, update Clerk user metadata, and manage the dub_id cookie.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/leads/clerk.mdx#2025-04-10_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NextRequest, NextResponse } from \"next/server\";\n\nexport async function POST(req: NextRequest) {\n  // read dub_id from the request cookies\n  const dubId = req.cookies.get(\"dub_id\")?.value;\n  if (dubId) {\n    // Send lead event to Dub\n    await dub.track.lead({\n      clickId: dubId,\n      eventName: \"Sign Up\",\n      externalId: id,\n      customerName: name,\n      customerEmail: email,\n      customerAvatar: avatar,\n    });\n  }\n\n  const clerk = await clerkClient();\n  await clerk.users.updateUser(id, {\n    publicMetadata: {\n      dubClickId: dubId || \"n/a\",\n    },\n  });\n  const res = NextResponse.json({ ok: true });\n  // Delete the dub_id cookie\n  res.cookies.set(\"dub_id\", \"\", {\n    expires: new Date(0),\n  });\n  return res;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Claim to Clerk Session Token\nDESCRIPTION: This JSON snippet demonstrates how to add a custom claim to the Clerk session token. It includes the user's public metadata in the token.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/leads/clerk.mdx#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metadata\": \"{{user.public_metadata}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Link in Remix with Dub TypeScript SDK\nDESCRIPTION: Example showing how to update an existing link using either the linkId from Dub's system or the externalId from your own database. The example updates the URL of the link to a different domain.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/remix.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const loader = async () => {\n  try {\n    // Update a link by its linkId\n    const { shortLink } = await dub.links.update(\n      \"link_rWOKByP0bRMrstK8e4HPjprJ\",\n      {\n        url: \"https://www.google.uk\", // new URL\n      }\n    );\n\n    // Update a link by its externalId\n    const { shortLink } = await dub.links.update(\"ext_12345\", {\n      url: \"https://www.google.uk\", // new URL\n    });\n\n    return json({ shortLink }, 200);\n  } catch (error: any) {\n    console.error(error);\n    return json(error, 400);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables\nDESCRIPTION: Command to copy the example environment variables file to create a new .env file that will be configured with your own values for local development.\nSOURCE: https://github.com/dubinc/docs/blob/main/local-development.mdx#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncp ./apps/web/.env.example .env\n```\n\n----------------------------------------\n\nTITLE: Initializing DubAnalytics in Next.js Root Layout\nDESCRIPTION: Implementation of the DubAnalytics component in a Next.js root layout file. Shows how to import and implement the Analytics component for tracking conversions across the application.\nSOURCE: https://github.com/dubinc/docs/blob/main/snippets/dub-analytics-install.mdx#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Analytics as DubAnalytics } from '@dub/analytics/react';\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n      <DubAnalytics />\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Appwrite Session and Admin Clients\nDESCRIPTION: Set up Appwrite Session and Admin clients for server-side rendering, including a function to verify user login.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/leads/appwrite.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n'use server';\nimport { Client, Account } from 'node-appwrite';\nimport { cookies } from 'next/headers';\n\nexport async function createSessionClient() {\n  const client = new Client()\n    .setEndpoint(process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT as string)\n    .setProject(process.env.NEXT_PUBLIC_APPWRITE_PROJECT as string);\n\n  const session = (await cookies()).get('my-custom-session');\n  if (!session || !session.value) {\n    throw new Error('No session');\n  }\n\n  client.setSession(session.value);\n\n  return {\n    get account() {\n      return new Account(client);\n    }\n  };\n}\n\nexport async function createAdminClient() {\n  const client = new Client()\n    .setEndpoint(process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT as string)\n    .setProject(process.env.NEXT_PUBLIC_APPWRITE_PROJECT as string)\n    .setKey(process.env.NEXT_APPWRITE_KEY as string);\n\n  return {\n    get account() {\n      return new Account(client);\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Integration Cards in Markdown\nDESCRIPTION: This snippet demonstrates how to create a card group with two cards using Markdown and custom components. The cards provide links to the Dub and Stripe integration pages with their respective logos.\nSOURCE: https://github.com/dubinc/docs/blob/main/integrations/stripe.mdx#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<CardGroup cols={2}>\n  <Card\n    title=\"View on Dub\"\n    icon={\n      <div className=\"h-8 w-8\">\n        <img\n          src=\"https://assets.dub.co/logo.png\"\n          alt=\"Dub logo\"\n          className=\"h-full w-full\"\n        />\n      </div>\n    }\n    href=\"https://app.dub.co/integrations/stripe\"\n  >\n    Opens the integration page on Dub\n  </Card>\n  <Card\n    title=\"View on Stripe\"\n    icon={\n      <div className=\"h-8 w-8\">\n        <img\n          src=\"https://dubassets.com/integrations/clzra1ya60001wnj4a89zcg9h_jtyaGa7\"\n          alt=\"Stripe logo\"\n          className=\"h-full w-full rounded-full\"\n        />\n      </div>\n    }\n    href=\"https://d.to/stripe/app\"\n  >\n    Opens the integration page on Stripe\n  </Card>\n</CardGroup>\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client in Bash\nDESCRIPTION: Command to generate the Prisma client after modifying the schema. This should be run in the apps/web directory.\nSOURCE: https://github.com/dubinc/docs/blob/main/self-hosting.mdx#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm run prisma:generate\n```\n\n----------------------------------------\n\nTITLE: Implementing Lead Tracking in Next.js App Router with Supabase Auth Callback\nDESCRIPTION: This code demonstrates how to track lead conversion events when new users sign up using Supabase authentication in a Next.js App Router project. It captures user data from the authentication callback, checks if the user is new, and sends the lead event to Dub's tracking API if conditions are met.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/leads/supabase.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// app/api/auth/callback/route.ts\nimport { cookies } from \"next/headers\";\nimport { NextResponse } from \"next/server\";\nimport { createClient } from \"@/lib/supabase/server\";\nimport { waitUntil } from \"@vercel/functions\";\nimport { dub } from \"@/lib/dub\";\n\nexport async function GET(request: Request) {\n  const { searchParams, origin } = new URL(request.url);\n  const code = searchParams.get(\"code\");\n  // if \"next\" is in param, use it as the redirect URL\n  const next = searchParams.get(\"next\") ?? \"/\";\n\n  if (code) {\n    const supabase = createClient(cookies());\n    const { data, error } = await supabase.auth.exchangeCodeForSession(code);\n    if (!error) {\n      const { user } = data;\n      const dub_id = cookies().get(\"dub_id\")?.value;\n      // if the user is created in the last 10 minutes, consider them new\n      const isNewUser =\n        new Date(user.created_at) > new Date(Date.now() - 10 * 60 * 1000);\n      // if the user is new and has a dub_id cookie, track the lead\n      if (dub_id && isNewUser) {\n        waitUntil(\n          dub.track.lead({\n            clickId: dub_id,\n            eventName: \"Sign Up\",\n            externalId: user.id,\n            customerName: user.user_metadata.name,\n            customerEmail: user.email,\n            customerAvatar: user.user_metadata.avatar_url,\n          })\n        );\n        // delete the clickId cookie\n        cookies().delete(\"dub_id\");\n      }\n      return NextResponse.redirect(`${origin}${next}`);\n    }\n  }\n\n  // return the user to an error page with instructions\n  return NextResponse.redirect(`${origin}/auth/auth-code-error`);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dub Ruby SDK\nDESCRIPTION: Command to install the Dub Ruby SDK using the gem package manager.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/sinatra.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngem install dub\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 Callback for Lead Tracking with Dub in TypeScript\nDESCRIPTION: This code snippet demonstrates how to configure the Auth0 callback to track lead conversion events using Dub. It checks for new user sign-ups, handles the dub_id cookie, sends lead events to Dub, and manages the authentication flow.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/leads/auth0.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handleAuth, handleCallback, type Session } from \"@auth0/nextjs-auth0\";\nimport { cookies } from \"next/headers\";\nimport { dub } from \"@/lib/dub\";\n\nconst afterCallback = async (req: Request, session: Session) => {\n  const userExists = await getUser(session.user.email);\n\n  if (!userExists) {\n    createUser(session.user);\n    // check if dub_id cookie is present\n    const clickId = cookies().get(\"dub_id\")?.value;\n    if (clickId) {\n      // send lead event to Dub\n      await dub.track.lead({\n        clickId,\n        eventName: \"Sign Up\",\n        externalId: session.user.id,\n        customerName: session.user.name,\n        customerEmail: session.user.email,\n        customerAvatar: session.user.image,\n      });\n      // delete the dub_id cookie\n      cookies().set(\"dub_id\", \"\", {\n        expires: new Date(0),\n      });\n    }\n    return session;\n  }\n};\n\nexport default handleAuth({\n  callback: handleCallback({ afterCallback }),\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering GitHub Repository Card in Markdown\nDESCRIPTION: This snippet demonstrates how to create a card linking to the Dub Stripe Integration GitHub repository using Markdown and a custom Card component.\nSOURCE: https://github.com/dubinc/docs/blob/main/integrations/stripe.mdx#2025-04-10_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<Card\n  title=\"Dub Stripe Integration\"\n  icon=\"github\"\n  href=\"https://git.new/dub-stripe\"\n  horizontal\n>\n  See the full example on GitHub.\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Updating Workspace Properties with Dub SDK\nDESCRIPTION: Examples of updating a workspace using either a slug or workspace ID. Shows how to modify workspace name using the dub.workspaces.update() method.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/workspaces/update.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Update a workspace by its slug\nawait dub.workspaces.update(\"acme\", {\n  name: \"Acme Inc\",\n});\n\n// Update a workspace by its ID\nawait dub.workspaces.update(\"ws_clv3mw4qb00008tvuw86c53db\", {\n  name: \"Acme Inc\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth.js Options for App Router\nDESCRIPTION: Implementation of NextAuth.js configuration options for the App Router to track lead conversion events. Handles new sign-ups by detecting the dub_id cookie and sending lead events to Dub using the track.lead API.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/leads/next-auth.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// app/api/auth/[...nextauth]/options.ts\nimport type { NextAuthOptions } from \"next-auth\";\nimport { cookies } from \"next/headers\";\nimport { dub } from \"@/lib/dub\";\n\nexport const authOptions: NextAuthOptions = {\n  ...otherAuthOptions, // your other NextAuth options\n  events: {\n    async signIn(message) {\n      // if it's a new sign up\n      if (message.isNewUser) {\n        // check if dub_id cookie is present\n        const dub_id = cookies().get(\"dub_id\")?.value;\n        if (dub_id) {\n          // send lead event to Dub\n          await dub.track.lead({\n            clickId: dub_id,\n            eventName: \"Sign Up\",\n            externalId: user.id,\n            customerName: user.name,\n            customerEmail: user.email,\n            customerAvatar: user.image,\n          });\n          // delete the dub_id cookie\n          cookies().set(\"dub_id\", \"\", {\n            expires: new Date(0),\n          });\n        }\n      }\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Tracking Lead Events with TypeScript\nDESCRIPTION: Demonstrates how to track lead events using the Dub SDK in TypeScript. Includes retrieving the dub_id cookie, sending the event with customer information, and cleaning up the cookie afterward.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/leads/introduction.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Dub } from \"dub\";\n\nconst dub = new Dub();\n\nconst dubId = req.cookies[\"dub_id\"];\nif (dubId) {\n  await dub.track.lead({\n    clickId: dubId,\n    eventName: \"Sign Up\",\n    externalId: customer.id,\n    customerName: customer.name,\n    customerEmail: customer.email,\n    customerAvatar: customer.avatar,\n  });\n  // delete the dub_id cookie\n  res.cookies.set(\"dub_id\", \"\", {\n    expires: new Date(0),\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dub CLI with npm\nDESCRIPTION: Command to install the latest version of Dub CLI globally using npm package manager.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/cli/overview.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g dub-cli@latest\n```\n\n----------------------------------------\n\nTITLE: Rendering Integration Cards in JSX\nDESCRIPTION: This code snippet renders two cards using JSX, displaying information about the Dub and Slack integration. Each card includes a title, icon, and link to the respective integration page.\nSOURCE: https://github.com/dubinc/docs/blob/main/integrations/slack.mdx#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<CardGroup cols={2}>\n  <Card\n    title=\"View on Dub\"\n    icon={\n      <div className=\"h-8 w-8\">\n        <img\n          src=\"https://assets.dub.co/logo.png\"\n          alt=\"Dub logo\"\n          className=\"h-full w-full\"\n        />\n      </div>\n    }\n    href=\"https://app.dub.co/integrations/slack\"\n  >\n    Opens the integration page on Dub\n  </Card>\n  <Card\n    title=\"View on Slack\"\n    icon={\n      <div className=\"h-8 w-8\">\n        <img\n          src=\"https://dubassets.com/integrations/clzu59rx9000110bm5fnlzwuj_GigJCRt\"\n          alt=\"Slack logo\"\n          className=\"h-full w-full rounded-full\"\n        />\n      </div>\n    }\n    href=\"https://d.to/slack\"\n  >\n    Opens the integration page on Slack\n  </Card>\n</CardGroup>\n```\n\n----------------------------------------\n\nTITLE: Updating Domain Settings with dub.domains.update\nDESCRIPTION: Example of updating a domain's expired URL and target URL using the Dub SDK. The method takes a domain slug and an options object containing the properties to update.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/domains/update.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait dub.domains.update(\"acme.com\", {\n  expiredUrl: \"https://acme.com/expired\",\n  target: \"https://acme.com/home\",\n});\n```\n\n----------------------------------------\n\nTITLE: Tracking Sale Events with Dub SDK in TypeScript\nDESCRIPTION: Example of tracking sale events using the Dub SDK in TypeScript. The code initializes the Dub client and makes a track.sale call with purchase details including external ID, amount, payment processor, event name, invoice ID, and currency.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/sales/introduction.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Dub } from \"dub\";\n\nconst dub = new Dub();\n\nawait dub.track.sale({\n  externalId: \"cus_RBfbD57HDzPKpduI8elr5qHA\",\n  amount: 100,\n  paymentProcessor: \"stripe\",\n  eventName: \"E-book purchase\",\n  invoiceId: \"123456\",\n  currency: \"usd\",\n});\n```\n\n----------------------------------------\n\nTITLE: OAuth Access Token Response Structure\nDESCRIPTION: JSON response structure returned after successfully exchanging the authorization code for an access token. It includes the access_token, refresh_token, token_type, expires_in, and scope values.\nSOURCE: https://github.com/dubinc/docs/blob/main/integrations/quickstart.mdx#2025-04-10_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"access_token\": \"dub_access_token_ae8ebf6f97e6200d886ef48a5...\",\n  \"refresh_token\": \"7f5acfbe14bca0a20fe6e430ddb7bb494eed160bd...\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 7200,\n  \"scope\": \"links.write tags.write domains.read\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Links with dub.links.get in TypeScript\nDESCRIPTION: Examples of retrieving link information using different query parameters including domain/key combination, linkId, and externalId. The method returns detailed link information including metadata, statistics, and configuration.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/links/get.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Retrieve a link by domain and key\nawait dub.links.get({\n  domain: \"dub.sh\",\n  key: \"e7qzMuI\",\n});\n\n// Retrieve a link by linkId\nawait dub.links.get({\n  linkId: \"clv3o9p9q000au1h0mc7r6l63\",\n});\n\n// Retrieve a link by externalId\nawait dub.links.get({\n  externalId: \"ext_123\",\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  id: 'clv3o9p9q000au1h0mc7r6l63',\n  domain: 'dub.sh',\n  key: 'e7qzMuI',\n  externalId: \"123\",\n  url: 'https://www.google.com',\n  archived: false,\n  expiresAt: null,\n  expiredUrl: null,\n  password: null,\n  proxy: false,\n  title: null,\n  description: null,\n  image: null,\n  rewrite: false,\n  ios: null,\n  android: null,\n  geo: null,\n  publicStats: false,\n  tagId: null,\n  tags: [],\n  comments: null,\n  shortLink: 'https://dub.sh/e7qzMuI',\n  qrCode: 'https://api.dub.co/qr?url=https://dub.sh/e7qzMuI?qr=1',\n  utmSource: null,\n  utmMedium: null,\n  utmCampaign: null,\n  utmTerm: null,\n  utmContent: null,\n  userId: 'cludszk1h0000wmd2e0ea2b0p',\n  workspaceId: 'ws_clugls3tn000lwfotbpy30304',\n  clicks: 0,\n  lastClicked: null,\n  createdAt: '2024-04-17T10:31:00.398Z',\n  updatedAt: '2024-04-17T10:31:00.398Z',\n  projectId: 'clugls3tn000lwfotbpy30304'\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Sale Events with Dub SDK in Python\nDESCRIPTION: Example of tracking sale events using the Dub SDK in Python. The code initializes the Dub client with an API key from environment variables and tracks a sale with customer details including external ID, amount, payment processor, event name, invoice ID, and currency.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/sales/introduction.mdx#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dub import Dub\nimport os\n\ndub = Dub(token=os.environ['DUB_API_KEY'])\n\ndub.track.sale({\n    'external_id': 'cus_RBfbD57HDzPKpduI8elr5qHA',\n    'amount': 100,\n    'payment_processor': 'stripe',\n    'event_name': 'E-book purchase',\n    'invoice_id': '123456',\n    'currency': 'usd'\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Short Link\nDESCRIPTION: Command to create a shortened URL using Dub CLI. Can be used with interactive prompts or with direct parameters.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/cli/overview.mdx#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndub shorten\n```\n\n----------------------------------------\n\nTITLE: Tracking Sale Events with Dub SDK in Ruby\nDESCRIPTION: Example of tracking sale events using the Dub SDK in Ruby. The code initializes the Dub client with an API key from environment variables, creates a TrackSaleRequest object with sale details, and makes a sale tracking call.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/sales/introduction.mdx#2025-04-10_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'dub'\n\ndub = ::OpenApiSDK::Dub.new\ndub.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    token: ENV['DUB_API_KEY']\n  )\n)\n\nreq = ::OpenApiSDK::Operations::TrackSaleRequest.new(\n  external_id: 'cus_RBfbD57HDzPKpduI8elr5qHA',\n  amount: 100,\n  payment_processor: 'stripe',\n  event_name: 'E-book purchase',\n  invoice_id: '123456',\n  currency: 'usd'\n)\n\ndub.track.sale(req)\n```\n\n----------------------------------------\n\nTITLE: OAuth Token Refresh Response\nDESCRIPTION: JSON response structure returned after successfully refreshing an access token. It provides a new access_token, refresh_token, token_type, expires_in, and scope values, invalidating the previous tokens.\nSOURCE: https://github.com/dubinc/docs/blob/main/integrations/quickstart.mdx#2025-04-10_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"access_token\": \"dub_access_token_ae8ebf6f97e6200d886ef48a5...\",\n  \"refresh_token\": \"7f5acfbe14bca0a20fe6e430ddb7bb494eed160bd...\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 7200,\n  \"scope\": \"links.write tags.write domains.read\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Links with dub.links.delete in TypeScript\nDESCRIPTION: This snippet demonstrates how to delete a link using either the linkId or externalId. The method returns the id of the deleted link.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/links/delete.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Delete a link by linkId\nawait dub.links.delete(\"clv3o9p9q000au1h0mc7r6l63\");\n\n// Delete a link by externalId\nawait dub.links.delete(\"ext_123\");\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  id: \"clv3o9p9q000au1h0mc7r6l63\";\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Stripe Checkout Session with Dub ID in Go\nDESCRIPTION: Shows how to create a Stripe Checkout Session with a Dub client reference ID in Go.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/sales/stripe.mdx#2025-04-10_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nparams := &stripe.CheckoutSessionParams{\n  SuccessURL: stripe.String(\"https://example.com/success\"),\n  LineItems: []*stripe.CheckoutSessionLineItemParams{\n    &stripe.CheckoutSessionLineItemParams{\n      Price: stripe.String(\"price_xxxxxxxxxxxxxxxx\"),\n      Quantity: stripe.Int64(2),\n    },\n  },\n  Mode: stripe.String(string(stripe.CheckoutSessionModePayment)),\n  ClientReferenceID: stripe.String(\"dub_id_xxxxxxxxxxxxxx\"),\n};\nresult, err := session.New(params);\n```\n\n----------------------------------------\n\nTITLE: Creating Stripe Checkout Session with Dub ID in PHP\nDESCRIPTION: Demonstrates how to create a Stripe Checkout Session with a Dub client reference ID in PHP.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/sales/stripe.mdx#2025-04-10_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$stripe->checkout->sessions->create([\n  'success_url' => 'https://example.com/success',\n  'line_items' => [\n    [\n      'price' => 'price_xxxxxxxxxxxxxxxx',\n      'quantity' => 2,\n    ],\n  ],\n  'mode' => 'payment',\n  'client_reference_id' => \"dub_id_xxxxxxxxxxxxxx\",\n]);\n```\n\n----------------------------------------\n\nTITLE: Response Structure for dub.domains.delete in TypeScript\nDESCRIPTION: This code snippet shows the structure of the response received after deleting a domain using dub.domains.delete. The response is an object containing the slug of the deleted domain.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/domains/delete.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  slug: \"acme.com\";\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Integration Cards with Make.com and Dub Links\nDESCRIPTION: React/JSX component that renders a card group containing two cards - one linking to Dub's integration page and another to Make.com. Each card includes a logo, title, and description.\nSOURCE: https://github.com/dubinc/docs/blob/main/integrations/make.mdx#2025-04-10_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<CardGroup cols={2}>\n  <Card\n    title=\"View on Dub\"\n    icon={\n      <div className=\"h-8 w-8\">\n        <img\n          src=\"https://assets.dub.co/logo.png\"\n          alt=\"Dub logo\"\n          className=\"h-full w-full\"\n        />\n      </div>\n    }\n    href=\"https://app.dub.co/integrations/make\"\n  >\n    Opens the integration page on Dub\n  </Card>\n  <Card\n    title=\"View on Make.com\"\n    icon={\n      <div className=\"h-8 w-8\">\n        <img\n          src=\"https://dubassets.com/integrations/clzlmyxup0001jeqyaka3dvdd_GSp2tii\"\n          alt=\"Make.com logo\"\n          className=\"h-full w-full rounded-full\"\n        />\n      </div>\n    }\n    href=\"https://d.to/make\"\n  >\n    Opens the integration page on Make.com\n  </Card>\n</CardGroup>\n```\n\n----------------------------------------\n\nTITLE: Bulk Creating Links with dub.links.createMany in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the dub.links.createMany method to create multiple short links in a single API call. It creates two links for different URLs using an array of link objects.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/links/create-many.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait dub.links.createMany([\n  {\n    url: \"https://www.google.com\",\n  },\n  {\n    url: \"https://github.com\",\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating Stripe Checkout Session with Dub ID in Ruby\nDESCRIPTION: Shows how to create a Stripe Checkout Session with a Dub client reference ID in Ruby.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/sales/stripe.mdx#2025-04-10_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nStripe::Checkout::Session.create({\n  success_url: 'https://example.com/success',\n  line_items: [\n    {\n      price: 'price_xxxxxxxxxxxxxxxx',\n      quantity: 2,\n    },\n  ],\n  mode: 'payment',\n  client_reference_id: \"dub_id_xxxxxxxxxxxxxx\",\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Shortshare SVG Icon for Dub Integration\nDESCRIPTION: SVG code that renders the Shortshare app icon used in the integration card component. This SVG is displayed alongside the Shortshare integration option.\nSOURCE: https://github.com/dubinc/docs/blob/main/integrations.mdx#2025-04-10_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<svg\n  width=\"60px\"\n  height=\"32px\"\n  viewBox=\"0 0 85 45\"\n  version=\"1.1\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n>\n  <g\n    id=\"Page-1\"\n    stroke=\"#000000\"\n    stroke-width=\"1\"\n    fill=\"none\"\n    fill-rule=\"evenodd\"\n  >\n    <g\n      id=\"logo-white\"\n      transform=\"translate(9.000000, 5.000000)\"\n      fill=\"#FFFFFF\"\n      fill-rule=\"nonzero\"\n    >\n      <path\n        d=\"M57.6097244,32.1946043 L49.8119122,23.5652379 L53.5118193,19.4200627 L67.5862069,35 L63.9246255,35 C61.5200013,35.0007178 59.2267988,33.9819624 57.6097244,32.1946043 Z\"\n        id=\"Path\"\n      ></path>\n      <path\n        d=\"M34.9290895,34.8902821 L17.6963401,34.8902821 C8.08232654,34.8902821 0.0952999167,27.2215366 0,17.6156725 C-0.0391754929,12.9622274 1.78340246,8.48541294 5.06383055,5.17890966 C8.34425864,1.87240639 12.8111401,0.00976830213 17.4729991,0.00442938709 L34.9261314,0.00442938709 C35.6366282,0.00443423288 36.313429,0.306790968 36.7868128,0.835677698 L46.2529184,11.3923836 L42.5596581,15.4984254 L33.5772113,5.52196924 L17.6549258,5.52196924 C11.0981686,5.52196924 5.62853447,10.7191168 5.52647802,17.2613215 C5.48137766,20.4541587 6.71945592,23.531968 8.96406106,25.8070052 C11.2086662,28.0820424 14.2727085,29.3646813 17.4715201,29.3683129 L33.5757322,29.3683129 L57.3889042,2.84219005 C59.0114655,1.03357429 61.3286169,0 63.7607765,0 L67.3667712,0 L36.7882918,34.0605103 C36.314758,34.5881564 35.6387601,34.8898579 34.9290895,34.8902821 L34.9290895,34.8902821 Z\"\n        id=\"Path\"\n      ></path>\n    </g>\n  </g>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Link Analytics Using External ID\nDESCRIPTION: This snippet shows how to retrieve analytics for a link using its externalId instead of the Dub linkId. It demonstrates the same functionality as the previous snippet but with a different identifier method.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/nuxt.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Retrieve the timeseries analytics for the last 7 days for a link\nconst response = await dub.analytics.retrieve({\n  externalId: \"ext_12345\",\n  interval: \"7d\",\n  groupBy: \"timeseries\",\n});\n\nconst timeseries = response as ClicksTimeseries[];\n```\n\n----------------------------------------\n\nTITLE: Enabling Conversion Tracking via API in TypeScript\nDESCRIPTION: Creates a new link with conversion tracking enabled using the Dub TypeScript SDK.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/quickstart.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst link = await dub.links.create({\n  url: \"https://dub.co\",\n  trackConversion: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Tag Creation Response - TypeScript\nDESCRIPTION: Example response object returned after successfully creating a tag. Contains the tag's unique ID, name, and assigned color.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/tags/create.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  id: \"clv3j1h7o00032u1ngo8luv84\",\n  name: \"news\",\n  color: \"blue\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dub ID from Cookies in Remix with Cookie Library\nDESCRIPTION: Example for Remix framework users showing how to retrieve the dub_id cookie using the 'cookie' library to overcome a Remix-specific issue.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/quickstart.mdx#2025-04-10_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport cookie from \"cookie\";\n\nconst cookies = cookie.parse(request.headers.get(\"cookie\") ?? \"\");\nconst dubId = cookies.dub_id;\n```\n\n----------------------------------------\n\nTITLE: Rendering Dropshare SVG Icon for Dub Integration\nDESCRIPTION: SVG code that renders the Dropshare app icon used in the integration card component. This SVG is displayed alongside the Dropshare integration option.\nSOURCE: https://github.com/dubinc/docs/blob/main/integrations.mdx#2025-04-10_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<svg\n  enableBackground=\"new 0 0 192 192\"\n  version=\"1.1\"\n  viewBox=\"0 0 192 192\"\n  xmlSpace=\"preserve\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  className=\"h-8 w-8\"\n>\n  <path d=\"m116.79 161.25c-7.8555 0.43628-15.084-0.36078-22.154-2.6081-27.018-8.5872-40.897-32.967-33.371-60.333 7.1198-25.887 21.645-47.383 41.904-64.919 6.9466-6.0129 10.529-6.2819 17.175-0.56768 23.003 19.778 39.283 43.9 44.622 74.2 3.9883 22.633-12.605 45.743-36.448 52.036-3.6866 0.97296-7.5013 1.4603-11.728 2.1916m-27.913-23.617c4.471 3.2535 8.9669 6.4465 14.888 6.2448 3.0063-0.10246 5.2491-1.4134 5.7613-4.4785 0.48747-2.9174-1.2853-4.9677-3.8861-5.6374-8.279-2.132-13.581-7.1151-16.461-15.184-1.1455-3.2089-4.1126-5.0832-7.6864-3.491-3.4384 1.5319-4.8823 4.209-3.4146 8.1668 2.0992 5.661 5.902 9.9739 10.799 14.379z\" />\n  <path d=\"m69.528 52.549c7.0827-8.0213 14.148-15.547 22.636-22.382 0.50252 2.9362-1.2719 3.721-2.2755 4.8835-13.768 15.949-26.109 32.782-34.83 52.164-12.457 27.687-2.1361 51.367 18.137 67.354 1.4834 1.1697 3.6999 1.6931 4.1595 4.0898-2.3604 1.2021-4.244-0.30447-6.1145-1.0696-27.442-11.225-38.68-39.951-26.577-67.943 5.9541-13.771 14.856-25.598 24.865-37.097z\" />\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Creating a Short Link with External ID in Nuxt\nDESCRIPTION: This snippet shows how to create a short link with an external ID using the Dub TypeScript SDK. The external ID allows you to associate the link with an identifier in your own database for easier reference later.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/nuxt.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler(async () => {\n  try {\n    const result = await dub.links.create({\n      url: \"https://www.google.com\",\n      externalId: \"12345\",\n    });\n\n    return result;\n  } catch (error) {\n    console.error(error);\n    return error;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Searching for Links in Workspace\nDESCRIPTION: Command to search for links in your Dub workspace.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/cli/overview.mdx#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndub links\n```\n\n----------------------------------------\n\nTITLE: Searching for Links with Options\nDESCRIPTION: Command to search for links in your Dub workspace with additional options like search terms and result limits.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/cli/overview.mdx#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndub links [options]\n```\n\n----------------------------------------\n\nTITLE: Response Format for dub.tags.update in TypeScript\nDESCRIPTION: Example of the response structure returned when updating a tag. The response includes the tag's ID, name, and color.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/tags/update.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  id: \"clv3j1h7o00032u1ngo8luv84\",\n  name: \"news\",\n  color: \"blue\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Pipedream SVG Icon for Dub Integration\nDESCRIPTION: SVG code that renders the Pipedream app icon used in the integration card component. This SVG is displayed alongside the Pipedream integration option.\nSOURCE: https://github.com/dubinc/docs/blob/main/integrations.mdx#2025-04-10_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<svg\n  enableBackground=\"new 0 0 600 600\"\n  version=\"1.1\"\n  viewBox=\"0 0 600 600\"\n  xmlSpace=\"preserve\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  className=\"h-8 w-8\"\n>\n  <path\n    d=\"m413 601h-412v-600h600v600h-188m-249.49-374.5c2.13e-4 93.651 0.035782 187.3-0.10211 280.95-0.007019 4.7677 1.1727 6.2025 6.0619 6.152 24.327-0.25134 48.657-0.10834 72.987-0.12824 1.7477-0.001465 3.4952-0.19446 5.0492-0.28687v-105.64c0.7103 0.038513 1.1189-0.064697 1.3299 0.09433 0.79394 0.59842 1.5523 1.252 2.2729 1.9386 10.855 10.343 23.482 17.235 38.202 20.536 13.754 3.0848 27.621 4.5111 41.654 3.8274 41.472-2.0209 73.697-19.744 94.556-56.379 11.256-19.769 17.778-41.175 21.464-63.506 4.8599-29.442 4.9199-59.068 2.7362-88.712-1.6924-22.973-5.3217-45.622-13.603-67.302-10.566-27.662-27.689-49.597-56.101-60.187-33.964-12.66-68.366-13.049-102.57-0.19016-14.517 5.4573-27.194 13.949-39.095 24.427-4.8366-8.7217-9.6348-17.075-14.102-25.601-1.47-2.8053-3.1826-3.6822-6.2601-3.4362-11.125 0.88915-22.271 1.5068-33.407 2.2732-6.9087 0.4755-13.812 1.0345-21.073 1.5829 0 43.313 0 85.947 1.38e-4 129.58z\"\n    fill=\"#34D28B\"\n  />\n  <path\n    d=\"m163.51 226c-7.7e-5 -43.134-7.7e-5 -85.767-7.7e-5 -129.08 7.2617-0.5484 14.165-1.1074 21.073-1.5829 11.135-0.76641 22.282-1.3841 33.407-2.2732 3.0774-0.24596 4.7901 0.63092 6.2601 3.4362 4.4677 8.5261 9.2659 16.879 14.102 25.601 11.901-10.479 24.579-18.97 39.095-24.427 34.204-12.859 68.606-12.47 102.57 0.19016 28.412 10.59 45.535 32.525 56.101 60.187 8.2808 21.681 11.91 44.329 13.603 67.302 2.1837 29.644 2.1236 59.27-2.7362 88.712-3.6861 22.331-10.208 43.737-21.464 63.506-20.859 36.635-53.084 54.358-94.556 56.379-14.033 0.68375-27.899-0.74255-41.654-3.8274-14.72-3.3014-27.347-10.193-38.202-20.536-0.72058-0.68655-1.4789-1.3402-2.2729-1.9386-0.211-0.15903-0.61964-0.055817-1.3299-0.09433v105.64c-1.554 0.092408-3.3015 0.2854-5.0492 0.28687-24.329 0.019897-48.66-0.12311-72.987 0.12824-4.8892 0.050537-6.0689-1.3843-6.0619-6.152 0.13789-93.651 0.10232-187.3 0.10205-281.45m116.41-57.756c-11.344 4.0749-21.357 10.208-28.822 19.795-1.7525 2.2504-2.9519 5.5924-2.9638 8.4383-0.18326 43.805-0.013077 87.611-0.26497 131.42-0.033584 5.8413 1.8959 10.108 5.549 14.271 16.857 19.213 38.371 23.786 62.562 20.29 18.379-2.6563 30.69-13.119 37.316-30.036 3.3137-8.4608 5.9928-17.341 7.5757-26.277 4.6788-26.412 4.1864-53.067 1.8481-79.672-1.0942-12.45-3.4579-24.725-8.878-36.174-5.7627-12.173-15.005-20.134-28.25-23.214-15.049-3.4998-30.019-3.3802-45.672 1.1632z\"\n    fill=\"#fff\"\n  />\n  <path\n    d=\"m280.3 168.15c15.266-4.4467 30.236-4.5663 45.285-1.0665 13.244 3.0802 22.487 11.041 28.25 23.214 5.4201 11.449 7.7837 23.724 8.878 36.174 2.3383 26.605 2.8307 53.26-1.8481 79.672-1.5829 8.9356-4.262 17.816-7.5757 26.277-6.6257 16.917-18.937 27.38-37.316 30.036-24.191 3.4964-45.705-1.077-62.562-20.29-3.6531-4.1637-5.5826-8.4301-5.549-14.271 0.25189-43.804 0.081711-87.61 0.26497-131.42 0.011917-2.8459 1.2114-6.1879 2.9638-8.4383 7.4656-9.5867 17.479-15.72 29.209-19.892z\"\n    fill=\"#34D28B\"\n  />\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Link\nDESCRIPTION: Create a simple short link using the Dub SDK create method.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/flask.mdx#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef create_link():\n  res = d.links.create(request={\n    \"url\": \"https://google.com\",\n  })\n\n  return res.short_link\n```\n\n----------------------------------------\n\nTITLE: Logging into Dub Platform\nDESCRIPTION: Command to authenticate and log into the Dub platform via CLI.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/cli/overview.mdx#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndub login\n```\n\n----------------------------------------\n\nTITLE: Creating Stripe Checkout Session with Dub ID in Python\nDESCRIPTION: Demonstrates how to create a Stripe Checkout Session with a Dub client reference ID in Python.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/sales/stripe.mdx#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nstripe.checkout.Session.create(\n  success_url=\"https://example.com/success\",\n  line_items=[{\"price\": \"price_xxxxxxxxxxxxxxxx\", \"quantity\": 2}],\n  mode=\"payment\",\n  client_reference_id=\"dub_id_xxxxxxxxxxxxxx\",\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Dub Python SDK\nDESCRIPTION: Command to install the Dub Python SDK package using pip package manager.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/quickstart/flask.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install dub\n```\n\n----------------------------------------\n\nTITLE: Handling sale.created Event in Dub Webhooks (JSON)\nDESCRIPTION: This snippet demonstrates the payload structure for the sale.created event, which is triggered when a new sale is tracked via Dub Conversions. It includes details about the customer, click event, associated link, and sale information.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/webhooks/event-types.mdx#2025-04-10_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"evt_WHjyHhqsfYOrlJOOVJSoHXysD\",\n  \"event\": \"sale.created\",\n  \"createdAt\": \"2024-08-30T09:57:51.245Z\",\n  \"data\": {\n    \"eventName\": \"Purchased\",\n    \"customer\": {\n      \"id\": \"cm0gjdvr20001dkbha2n9gt2b\",\n      \"name\": \"John\",\n      \"email\": \"john@example.com\",\n      \"avatar\": \"https://example.com/john.jpeg\"\n    },\n    \"click\": {\n      \"id\": \"d0UtZqE0BZuBPrJS\",\n      \"url\": \"https://github.com/dubinc/dub\",\n      \"ip\": \"63.141.57.109\",\n      \"continent\": \"NA\",\n      \"country\": \"US\",\n      \"city\": \"San Francisco\",\n      \"device\": \"Desktop\",\n      \"browser\": \"Chrome\",\n      \"os\": \"Mac OS\",\n      \"ua\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36\",\n      \"bot\": false,\n      \"qr\": false,\n      \"referer\": \"(direct)\"\n    },\n    \"link\": {\n      \"id\": \"cm0faqkyn0001txvfwjfeq7gl\",\n      \"domain\": \"dub.sh\",\n      \"key\": \"79ys3WA\",\n      \"externalId\": null,\n      \"url\": \"https://github.com/dubinc/dub\",\n      \"trackConversion\": true,\n      \"archived\": false,\n      \"expiresAt\": null,\n      \"expiredUrl\": null,\n      \"password\": null,\n      \"proxy\": false,\n      \"title\": null,\n      \"description\": null,\n      \"image\": null,\n      \"video\": null,\n      \"rewrite\": false,\n      \"doIndex\": false,\n      \"ios\": null,\n      \"android\": null,\n      \"geo\": null,\n      \"publicStats\": false,\n      \"comments\": null,\n      \"shortLink\": \"https://dub.sh/79ys3WA\",\n      \"qrCode\": \"https://api.dub.co/qr?url=https://dub.sh/79ys3WA?qr=1\",\n      \"utm_source\": null,\n      \"utm_medium\": null,\n      \"utm_campaign\": null,\n      \"utm_term\": null,\n      \"utm_content\": null,\n      \"userId\": \"cm022rkcw0000ikt14mscg9sg\",\n      \"workspaceId\": \"ws_cm022sis60003ikt1syy7kfhl\",\n      \"clicks\": 10,\n      \"lastClicked\": \"2024-08-30T07:45:09.000Z\",\n      \"leads\": 5,\n      \"sales\": 1,\n      \"saleAmount\": 20000,\n      \"createdAt\": \"2024-08-29T13:03:59.098Z\",\n      \"updatedAt\": \"2024-08-30T09:57:50.891Z\"\n    },\n    \"sale\": {\n      \"amount\": 4500,\n      \"currency\": \"usd\",\n      \"paymentProcessor\": \"stripe\",\n      \"invoiceId\": null\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tags List in Dub Workspace using TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the dub.tags.list() method to retrieve a list of tags for the authenticated workspace. The method is called asynchronously and returns an array of tag objects.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/tags/list.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait dub.tags.list();\n```\n\n----------------------------------------\n\nTITLE: Link Deleted Event Payload\nDESCRIPTION: Webhook payload for the link.deleted event, triggered when a link is removed from a Dub workspace. Contains the details of the deleted link.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/webhooks/event-types.mdx#2025-04-10_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"evt_KleiO4HBwZFbO1vZLWIPZ2AtX\",\n  \"event\": \"link.deleted\",\n  \"createdAt\": \"2024-08-26T16:41:52.346Z\",\n  \"data\": {\n    \"id\": \"cm0b87844000dismqhkviju54\",\n    \"domain\": \"dub.sh\",\n    \"key\": \"sOvvXDT\",\n    \"externalId\": null,\n    \"url\": \"https://github.com/stack-auth/stack\",\n    \"trackConversion\": false,\n    \"archived\": false,\n    \"expiresAt\": null,\n    \"expiredUrl\": null,\n    \"password\": null,\n    \"proxy\": false,\n    \"title\": null,\n    \"description\": null,\n    \"image\": null,\n    \"video\": null,\n    \"rewrite\": false,\n    \"doIndex\": false,\n    \"ios\": null,\n    \"android\": null,\n    \"geo\": null,\n    \"publicStats\": false,\n    \"tagId\": null,\n    \"tags\": [],\n    \"comments\": null,\n    \"shortLink\": \"https://dub.sh/sOvvXDT\",\n    \"qrCode\": \"https://api.dub.co/qr?url=https://dub.sh/sOvvXDT?qr=1\",\n    \"utm_source\": null,\n    \"utm_medium\": null,\n    \"utm_campaign\": null,\n    \"utm_term\": null,\n    \"utm_content\": null,\n    \"userId\": \"cm022rkcw0000ikt14mscg9sg\",\n    \"workspaceId\": \"ws_cm022sis60003ikt1syy7kfhl\",\n    \"clicks\": 0,\n    \"lastClicked\": null,\n    \"leads\": 0,\n    \"sales\": 0,\n    \"saleAmount\": 0,\n    \"createdAt\": \"2024-08-26T16:41:52.084Z\",\n    \"updatedAt\": \"2024-08-26T16:41:52.084Z\",\n    \"projectId\": \"cm022sis60003ikt1syy7kfhl\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Stripe Pricing Table with Dub ID in React\nDESCRIPTION: Demonstrates how to include a Stripe Pricing Table in a React component with a Dub client reference ID.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/sales/stripe.mdx#2025-04-10_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from \"react\";\n\nfunction PricingPage() {\n  // Paste the stripe-pricing-table snippet in your React component\n  return (\n    <stripe-pricing-table\n      pricing-table-id=\"'{{PRICING_TABLE_ID}}'\"\n      publishable-key=\"pk_test_51ODHJvFacAXKeDpJsgWLQJSzBIDtCUFN6MoB4IIXKJDfWdFmiEO4JuvAU1A0Y2Ri4m4q1egIfwYy3s72cUBRCwXC00GQhEZuXa\"\n      client-reference-id=\"dub_id_xxxxxxxxxxxxxx\"\n    ></stripe-pricing-table>\n  );\n}\n\nexport default PricingPage;\n```\n\n----------------------------------------\n\nTITLE: Inserting @dub/analytics Script in Webflow HTML\nDESCRIPTION: This code snippet shows how to include the @dub/analytics script in the head section of a Webflow site. The script is loaded from a CDN and set to defer execution.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/client-side/installation-guides/webflow.mdx#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.dubcdn.com/analytics/script.js\" defer />\n```\n\n----------------------------------------\n\nTITLE: Verifying Webhook Signatures in Next.js\nDESCRIPTION: Implementation of webhook request verification in Next.js using crypto module. Validates incoming webhooks by comparing HMAC-SHA256 signatures generated from the request body and a secret key.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/webhooks/verify-webhook-requests.mdx#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const POST = async (req: Request) => {\n  const webhookSignature = req.headers.get(\"Dub-Signature\");\n  if (!webhookSignature) {\n    return new Response(\"No signature provided.\", { status: 401 });\n  }\n\n  // Copy this from the webhook details page\n  const secret = process.env.DUB_WEBHOOK_SECRET;\n  if (!secret) {\n    return new Response(\"No secret provided.\", { status: 401 });\n  }\n\n  // Make sure to get the raw body from the request\n  const rawBody = await req.text();\n\n  const computedSignature = crypto\n    .createHmac(\"sha256\", secret)\n    .update(rawBody)\n    .digest(\"hex\");\n\n  if (webhookSignature !== computedSignature) {\n    return new Response(\"Invalid signature\", { status: 400 });\n  }\n\n  // Handle the webhook event\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Paginated List of Links with Python\nDESCRIPTION: This example demonstrates how to use the Python SDK to retrieve paginated links. The pagination parameters are passed as a dictionary to the request parameter.\nSOURCE: https://github.com/dubinc/docs/blob/main/api-reference/pagination.mdx#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nres = s.links.list(request={\n  \"page\": 1,\n  \"page_size\": 10,\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Conversion Tracking via API in Python\nDESCRIPTION: Creates a new link with conversion tracking enabled using the Dub Python SDK.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/quickstart.mdx#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlink = d.links.create(url=\"https://dub.co\", track_conversion=True)\n```\n\n----------------------------------------\n\nTITLE: Implementing Stripe Pricing Table with Dub ID in HTML\nDESCRIPTION: Shows how to include a Stripe Pricing Table in HTML with a Dub client reference ID for conversion tracking.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/sales/stripe.mdx#2025-04-10_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <h1>We offer plans that help any business!</h1>\n  <!-- Paste your embed code script here. -->\n  <script async src=\"https://js.stripe.com/v3/pricing-table.js\"></script>\n  <stripe-pricing-table\n    pricing-table-id=\"{{PRICING_TABLE_ID}}\"\n    publishable-key=\"pk_test_51ODHJvFacAXKeDpJsgWLQJSzBIDtCUFN6MoB4IIXKJDfWdFmiEO4JuvAU1A0Y2Ri4m4q1egIfwYy3s72cUBRCwXC00GQhEZuXa\"\n    client-reference-id=\"dub_id_xxxxxxxxxxxxxx\"\n  >\n  </stripe-pricing-table>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Installing Dub Analytics Script in Framer HTML\nDESCRIPTION: The script tag that needs to be added to the head section of a Framer website to enable Dub Analytics tracking functionality. It should be placed in the 'Start of head tag' section in Framer's Project Settings under the Custom Code area.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/client-side/installation-guides/framer.mdx#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.dubcdn.com/analytics/script.js\" defer></script>\n```\n\n----------------------------------------\n\nTITLE: Embedding Image Frame in Documentation\nDESCRIPTION: HTML/Markdown markup for embedding image frames showing analytics visualizations including time-series charts, funnel charts, and events stream interface.\nSOURCE: https://github.com/dubinc/docs/blob/main/snippets/view-conversions.mdx#2025-04-10_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n<Frame>\n  <img\n    src=\"/images/conversions/timeseries-chart.png\"\n    alt=\"Time-series line chart\"\n  />\n</Frame>\n```\n\nLANGUAGE: markup\nCODE:\n```\n<Frame>\n  <img\n    src=\"/images/conversions/funnel-chart.png\"\n    alt=\"Funnel chart view showing the conversion & dropoff rates from clicks → leads → sales\"\n  />\n</Frame>\n```\n\nLANGUAGE: markup\nCODE:\n```\n<Frame>\n  <img\n    src=\"/images/conversions/events-table.png\"\n    alt=\"The Events Stream dashboard on Dub\"\n  />\n</Frame>\n```\n\n----------------------------------------\n\nTITLE: Tracking Lead Events with Python\nDESCRIPTION: Shows how to implement lead event tracking using the Dub SDK in Python. Handles cookie retrieval, event tracking, and cookie cleanup.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/leads/introduction.mdx#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dub import Dub\nimport os\n\ndub = Dub(token=os.environ['DUB_API_KEY'])\n\ndub_id = request.cookies.get('dub_id')\nif dub_id:\n    dub.track.lead({\n        'click_id': dub_id,\n        'event_name': 'Sign Up',\n        'external_id': customer.id,\n        'customer_name': customer.name,\n        'customer_email': customer.email,\n        'customer_avatar': customer.avatar\n    })\n    # delete the dub_id cookie\n    response.delete_cookie('dub_id')\n```\n\n----------------------------------------\n\nTITLE: Setting R2 Storage Base URL Configuration\nDESCRIPTION: Configuration for the base URL where R2 storage assets will be publicly accessible.\nSOURCE: https://github.com/dubinc/docs/blob/main/self-hosting.mdx#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nSTORAGE_BASE_URL={URL your assets as available at} # https://static.example.com\n```\n\n----------------------------------------\n\nTITLE: Rendering Image for Lead Event Conversion Funnel in JSX\nDESCRIPTION: This code snippet uses the Frame component to display an image that illustrates how lead events are tracked in the conversion funnel. The image is styled with rounded corners and a border.\nSOURCE: https://github.com/dubinc/docs/blob/main/snippets/leads-intro.mdx#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Frame>\n  <img\n    className=\"rounded-lg border border-gray-100\"\n    src=\"https://assets.dub.co/help/conversion-lead-event.png\"\n    alt=\"A diagram showing how lead events are tracked in the conversion funnel\"\n  />\n</Frame>\n```\n\n----------------------------------------\n\nTITLE: Enabling Conversion Tracking via API in Go\nDESCRIPTION: Creates a new link with conversion tracking enabled using the Dub Go SDK.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/quickstart.mdx#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nlink, err := d.Links.Create(ctx, &dub.CreateLinkRequest{\n    URL: \"https://dub.co\",\n    TrackConversion: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Short Link Response Field Example - QR Code\nDESCRIPTION: Example of QR code URL format for short links\nSOURCE: https://github.com/dubinc/docs/blob/main/snippets/link-response.mdx#2025-04-10_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://api.dub.co/qr?url=https://d.to/try\n```\n\n----------------------------------------\n\nTITLE: Tracking Lead Events with Go\nDESCRIPTION: Demonstrates lead event tracking implementation using the Dub SDK in Go. Includes API key configuration, cookie handling, and event tracking.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/leads/introduction.mdx#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    dub \"github.com/dubinc/dub-go\"\n    \"net/http\"\n)\n\nd := dub.New(\n    dub.WithSecurity(os.Getenv(\"DUB_API_KEY\")),\n)\n\ndubId, err := r.Cookie(\"dub_id\")\nif err == nil {\n    _, err = d.Track.Lead(context.Background(), &operations.TrackLeadRequest{\n        ClickId:         dubId.Value,\n        EventName:       \"Sign Up\",\n        ExternalId:      customer.ID,\n        CustomerName:    customer.Name,\n        CustomerEmail:   customer.Email,\n        CustomerAvatar:  customer.Avatar,\n    })\n    // delete the dub_id cookie\n    http.SetCookie(w, &http.Cookie{\n        Name:    \"dub_id\",\n        Value:   \"\",\n        Expires: time.Unix(0, 0),\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Initial Deployment\nDESCRIPTION: Series of Git commands to commit and push the repository to GitHub before Vercel deployment.\nSOURCE: https://github.com/dubinc/docs/blob/main/self-hosting.mdx#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -m \"Initial commit\"\ngit push origin main\n```\n\n----------------------------------------\n\nTITLE: Rendering Integration Cards in JSX\nDESCRIPTION: This code snippet renders a CardGroup component with two Card components, providing links to view the Dub-Raycast integration on both Dub and Raycast platforms. It includes icons and descriptions for each card.\nSOURCE: https://github.com/dubinc/docs/blob/main/integrations/raycast.mdx#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<CardGroup cols={2}>\n  <Card\n    title=\"View on Dub\"\n    icon={\n      <div className=\"h-8 w-8\">\n        <img\n          src=\"https://assets.dub.co/logo.png\"\n          alt=\"Dub logo\"\n          className=\"h-full w-full\"\n        />\n      </div>\n    }\n    href=\"https://app.dub.co/integrations/raycast\"\n  >\n    Opens the integration page on Dub\n  </Card>\n  <Card\n    title=\"View on Raycast\"\n    icon={\n      <div className=\"h-8 w-8\">\n        <img\n          src=\"https://dubassets.com/integrations/clzlmyzlx0005jeqy95pjrwbz_Yg767eU\"\n          alt=\"Raycast logo\"\n          className=\"h-full w-full rounded-full\"\n        />\n      </div>\n    }\n    href=\"https://d.to/ray\"\n  >\n    Opens the integration page on Raycast\n  </Card>\n</CardGroup>\n```\n\n----------------------------------------\n\nTITLE: Installing Mintlify CLI\nDESCRIPTION: Command to install Mintlify globally using npm package manager.\nSOURCE: https://github.com/dubinc/docs/blob/main/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g mintlify\n```\n\n----------------------------------------\n\nTITLE: Initializing Dub Analytics in React/Next.js\nDESCRIPTION: This code snippet demonstrates how to install and initialize the Dub Analytics component in a React or Next.js application. It includes setting up the custom domain for short links and specifying the query parameter for client-side click-tracking.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/clicks/introduction.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// install the package (e.g. npm install @dub/analytics)\nimport { Analytics as DubAnalytics } from \"@dub/analytics/react\";\n\nexport default function App() {\n  return (\n    <Layout>\n      <DubAnalytics\n        domainsConfig={{\n          refer: \"go.example.com\", // the custom domain you're using on Dub for your short links\n        }}\n        queryParam=\"via\" // optional: query parameter to listen to for client-side click-tracking (default: \"via\")\n      />\n      {/* Your app code here */}\n    </Layout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Lead Events with Ruby\nDESCRIPTION: Shows how to track lead events using the Dub SDK in Ruby. Includes SDK initialization, API key configuration, and event tracking implementation.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/leads/introduction.mdx#2025-04-10_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'dub'\n\ndub = ::OpenApiSDK::Dub.new\ndub.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    token: ENV['DUB_API_KEY']\n  )\n)\n\ndub_id = cookies[:dub_id]\nif dub_id\n  req = ::OpenApiSDK::Operations::TrackLeadRequest.new(\n    click_id: dub_id,\n    event_name: 'Sign Up',\n    external_id: customer.id,\n    customer_name: customer.name,\n    customer_email: customer.email,\n    customer_avatar: customer.avatar\n  )\n  dub.track.lead(req)\n  # delete the dub_id cookie\n  cookies.delete(:dub_id)\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Integration Cards using JSX/MDX\nDESCRIPTION: A card group component that displays two cards linking to the integration pages on Dub and Segment platforms. Each card includes a title, icon, and link.\nSOURCE: https://github.com/dubinc/docs/blob/main/integrations/segment.mdx#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<CardGroup cols={2}>\n  <Card\n    title=\"View on Dub\"\n    icon={\n      <div className=\"h-8 w-8\">\n        <img\n          src=\"https://assets.dub.co/logo.png\"\n          alt=\"Dub logo\"\n          className=\"h-full w-full\"\n        />\n      </div>\n    }\n    href=\"https://app.dub.co/integrations/segment\"\n  >\n    Opens the integration page on Dub\n  </Card>\n  <Card\n    title=\"View on Segment\"\n    icon={\n      <div className=\"h-8 w-8\">\n        <img\n          src=\"https://dubassets.com/integrations/int_zGnSElTzimbz20OWnXerPoKv_Noy3Xhk\"\n          alt=\"Segment logo\"\n          className=\"h-full w-full rounded-full\"\n        />\n      </div>\n    }\n    href=\"https://d.to/segment\"\n  >\n    Opens the integration page on Segment\n  </Card>\n</CardGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing User Signup and Lead Tracking\nDESCRIPTION: Create a signup page that uses Appwrite for user authentication and sends lead data to Dub when a new user signs up.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/leads/appwrite.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ID } from 'node-appwrite';\nimport { createAdminClient, getLoggedInUser } from '@/lib/server/appwrite';\nimport { cookies } from 'next/headers';\nimport { redirect } from 'next/navigation';\nimport { addDubLead } from '@/lib/server/dub';\n\nasync function signUpWithEmail(formData: any) {\n  'use server';\n\n  // Get sign up info from form\n  const email = formData.get('email');\n  const password = formData.get('password');\n  const name = formData.get('name');\n\n  // Create account and session using Appwrite\n  const { account } = await createAdminClient();\n\n  const user = await account.create(ID.unique(), email, password, name);\n  const session = await account.createEmailPasswordSession(email, password);\n\n  (await cookies()).set('my-custom-session', session.secret, {\n    path: '/',\n    httpOnly: true,\n    sameSite: 'strict',\n    secure: true\n  });\n\n  // Check if Dub ID is present in cookies and track lead if found\n  const dub_id = (await cookies()).get('dub_id')?.value;\n  if (dub_id) {\n    addDubLead(user, dub_id);\n    (await cookies()).delete('dub_id');\n  }\n\n  // Redirect to success page\n  redirect('/auth/success');\n}\n\nexport default async function SignUpPage() {\n\n  // Verify active user session and redirect to success page if found\n  const user = await getLoggedInUser();\n  if (user) redirect('/auth/success');\n\n  return (\n    <>\n      <form action={signUpWithEmail}>\n        <input id=\"email\" name=\"email\" placeholder=\"Email\" type=\"email\" required />\n        <input id=\"password\" name=\"password\" placeholder=\"Password\" minLength={8} type=\"password\" required />\n        <input id=\"name\" name=\"name\" placeholder=\"Name\" type=\"text\" required />\n        <button type=\"submit\">Sign up</button>\n      </form>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Card in Markdown\nDESCRIPTION: This snippet shows how to create a card linking to the Stripe and Dub Conversions documentation using Markdown and a custom Card component.\nSOURCE: https://github.com/dubinc/docs/blob/main/integrations/stripe.mdx#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Card\n  title=\"Stripe + Dub Conversions\"\n  icon=\"stripe\"\n  href=\"/conversions/sales/stripe\"\n  horizontal\n>\n  Tracking sale conversion events with Stripe and the Dub SDK\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Tracking Lead Events with PHP\nDESCRIPTION: Demonstrates lead event tracking using the Dub SDK in PHP. Covers SDK setup, cookie handling, and event tracking implementation.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/leads/introduction.mdx#2025-04-10_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nrequire 'vendor/autoload.php';\n\nuse Dub\\Dub;\nuse Dub\\Models\\Operations;\n\n$dub = Dub::builder()->setSecurity($_ENV[\"DUB_API_KEY\"])->build();\n\n$dubId = $_COOKIE['dub_id'] ?? null;\nif ($dubId) {\n    $request = new Operations\\TrackLeadRequest();\n    $request->clickId = $dubId;\n    $request->eventName = 'Sign Up';\n    $request->externalId = $customer->id;\n    $request->customerName = $customer->name;\n    $request->customerEmail = $customer->email;\n    $request->customerAvatar = $customer->avatar;\n\n    $dub->track->lead($request);\n    // delete the dub_id cookie\n    setcookie('dub_id', '', time() - 3600);\n}\n```\n\n----------------------------------------\n\nTITLE: Link Created Event Payload\nDESCRIPTION: Webhook payload for the link.created event, triggered when a new link is created in a Dub workspace. Contains complete details of the newly created link.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/webhooks/event-types.mdx#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"evt_KleiO4HBwZFbO1vZLWIPZ2AtX\",\n  \"event\": \"link.created\",\n  \"createdAt\": \"2024-08-26T16:41:52.346Z\",\n  \"data\": {\n    \"id\": \"cm0b87844000dismqhkviju54\",\n    \"domain\": \"dub.sh\",\n    \"key\": \"sOvvXDT\",\n    \"externalId\": null,\n    \"url\": \"https://github.com/stack-auth/stack\",\n    \"trackConversion\": false,\n    \"archived\": false,\n    \"expiresAt\": null,\n    \"expiredUrl\": null,\n    \"password\": null,\n    \"proxy\": false,\n    \"title\": null,\n    \"description\": null,\n    \"image\": null,\n    \"video\": null,\n    \"rewrite\": false,\n    \"doIndex\": false,\n    \"ios\": null,\n    \"android\": null,\n    \"geo\": null,\n    \"publicStats\": false,\n    \"tagId\": null,\n    \"tags\": [],\n    \"comments\": null,\n    \"shortLink\": \"https://dub.sh/sOvvXDT\",\n    \"qrCode\": \"https://api.dub.co/qr?url=https://dub.sh/sOvvXDT?qr=1\",\n    \"utm_source\": null,\n    \"utm_medium\": null,\n    \"utm_campaign\": null,\n    \"utm_term\": null,\n    \"utm_content\": null,\n    \"userId\": \"cm022rkcw0000ikt14mscg9sg\",\n    \"workspaceId\": \"ws_cm022sis60003ikt1syy7kfhl\",\n    \"clicks\": 0,\n    \"lastClicked\": null,\n    \"leads\": 0,\n    \"sales\": 0,\n    \"saleAmount\": 0,\n    \"createdAt\": \"2024-08-26T16:41:52.084Z\",\n    \"updatedAt\": \"2024-08-26T16:41:52.084Z\",\n    \"projectId\": \"cm022sis60003ikt1syy7kfhl\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Dub OAuth Authorization URL\nDESCRIPTION: Example of the GET request URL structure used to redirect users to the Dub OAuth authorization page. This request initiates the OAuth flow and requires client_id, redirect_uri, response_type, scope, and state parameters.\nSOURCE: https://github.com/dubinc/docs/blob/main/integrations/quickstart.mdx#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGET https://app.dub.co/oauth/authorize\n```\n\nLANGUAGE: shell\nCODE:\n```\nGET https://app.dub.co/oauth/authorize?client_id=YOUR_CLIENT_ID&redirect_uri=YOUR_REDIRECT_URI&response_type=code&scope=SOME_SCOPE&state=SOME_STATE\n```\n\n----------------------------------------\n\nTITLE: Configuring NextAuth.js Options for Pages Router\nDESCRIPTION: Implementation of NextAuth.js configuration options for the Pages Router to track lead conversion events. Similar to the App Router version but uses the Pages Router API structure.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/leads/next-auth.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// pages/api/auth/[...nextauth]/options.ts\nimport type { NextApiRequest } from \"next\";\nimport type { NextAuthOptions } from \"next-auth\";\nimport { dub } from \"@/lib/dub\";\n\nexport const getOptions = (req: NextApiRequest): NextAuthOptions => ({\n  ...otherAuthOptions, // your other NextAuth options\n  events: {\n    async signIn(message) {\n      // if it's a new sign up\n      if (message.isNewUser) {\n        // check if dub_id cookie is present\n        const { dub_id } = req.cookies;\n        if (dub_id) {\n          // send lead event to Dub\n          await dub.track.lead({\n            clickId: dub_id,\n            eventName: \"Sign Up\",\n            externalId: user.id,\n            customerName: user.name,\n            customerEmail: user.email,\n            customerAvatar: user.image,\n          });\n        }\n      }\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Processing partner.enrolled Event in Dub Webhooks (JSON)\nDESCRIPTION: This snippet illustrates the payload structure for the partner.enrolled event, triggered when a new partner is enrolled in the partner program. It contains details about the partner and an array of associated referral links.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/webhooks/event-types.mdx#2025-04-10_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"evt_ovabfqva8oqZzmLPN1JnwIfdt\",\n  \"event\": \"partner.enrolled\",\n  \"createdAt\": \"2025-04-08T17:11:56.492Z\",\n  \"data\": {\n    \"id\": \"pn_1JRB6678XHGBZE95R5PH5QVGS\",\n    \"name\": \"Asleep Pink Mammal\",\n    \"email\": \"chosen.blush.barracuda@dub-internal-test.com\",\n    \"image\": null,\n    \"description\": null,\n    \"country\": null,\n    \"payoutsEnabledAt\": null,\n    \"createdAt\": \"2025-04-08T17:11:56.446Z\",\n    \"status\": \"approved\",\n    \"programId\": \"prog_CYCu7IMAapjkRpTnr8F1azjN\",\n    \"tenantId\": null,\n    \"links\": [\n      {\n        \"id\": \"link_1JRB6677YXQB49RC1HKH7TPJE\",\n        \"domain\": \"getacme.link\",\n        \"key\": \"uvYO5pMIpctKdUVJlL3jIL4o\",\n        \"shortLink\": \"https://getacme.link/uvYO5pMIpctKdUVJlL3jIL4o\",\n        \"url\": \"https://acme.com\",\n        \"clicks\": 0,\n        \"leads\": 0,\n        \"sales\": 0,\n        \"saleAmount\": 0\n      }\n    ],\n    \"clicks\": 0,\n    \"leads\": 0,\n    \"sales\": 0,\n    \"saleAmount\": 0,\n    \"earnings\": 0,\n    \"applicationId\": null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Bubble SVG Icon for Dub Integration\nDESCRIPTION: SVG code that renders the Bubble app icon used in the integration card component. This SVG is displayed alongside the Bubble integration option.\nSOURCE: https://github.com/dubinc/docs/blob/main/integrations.mdx#2025-04-10_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<svg\n  width=\"256px\"\n  height=\"276px\"\n  viewBox=\"0 0 256 276\"\n  version=\"1.1\"\n  xmlns=\"http://www.w3.org/2000/svg\"\n  preserveAspectRatio=\"xMidYMid\"\n  className=\"h-8 w-8\"\n>\n  <title>Bubble</title>\n  <g>\n    <path\n      d=\"M156.687886,71.5306475 C131.928045,71.5306475 107.524298,82.1604077 88.8931172,103.059013 L88.8931172,0 L52.0240423,0 L52.0240423,173.506229 C52.0240423,173.510361 52.0240423,173.514494 52.0240423,173.519315 C52.0240423,229.845404 97.6852437,275.506605 154.012021,275.506605 C210.33811,275.506605 256,229.845404 256,173.519315 C256,117.193226 213.013974,71.5306475 156.687886,71.5306475 M154.012021,236.224775 C119.380066,236.224775 91.3051835,208.149893 91.3051835,173.518626 C91.3051835,138.886671 119.380066,110.811789 154.012021,110.811789 C188.643288,110.811789 216.71817,138.886671 216.71817,173.518626 C216.71817,208.150582 188.643288,236.224775 154.012021,236.224775\"\n      fill=\"#262626\"\n    ></path>\n    <path\n      d=\"M25.2199377,225.066041 C11.2909777,225.066041 1.0658141e-14,236.357707 1.0658141e-14,250.285979 C1.0658141e-14,264.21425 11.2909777,275.505916 25.2199377,275.505916 C39.1488977,275.505916 50.4398754,264.21425 50.4398754,250.285979 C50.4398754,236.357707 39.1488977,225.066041 25.2199377,225.066041\"\n      fill=\"#0000FF\"\n    ></path>\n  </g>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tag-based Analytics in Ruby\nDESCRIPTION: This snippet shows how to use the Dub Ruby SDK to retrieve analytics filtered by tag IDs. It initializes the SDK with security credentials and creates a request object with the tag IDs parameter.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/links/organization.mdx#2025-04-10_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'dub'\n\ns = ::OpenApiSDK::Dub.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    token: \"DUB_API_KEY\",\n  )\n)\n\nreq = ::OpenApiSDK::Operations::RetrieveAnalyticsRequest.new(\n  tag_ids: [\"tag_xxx\"],\n)\n\nres = s.analytics.retrieve(req)\n```\n\n----------------------------------------\n\nTITLE: Stripe Checkout Session Completed Event without Adaptive Pricing in JSON\nDESCRIPTION: This JSON snippet shows the structure of a Stripe checkout.session.completed event payload without Adaptive Pricing. It demonstrates how Dub handles currency conversion to the default USD.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/sales/stripe.mdx#2025-04-10_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"{{EVENT_ID}}\",\n  \"object\": \"event\",\n  \"type\": \"checkout.session.completed\",\n  \"data\": {\n    \"object\": {\n      \"id\": \"{{SESSION_ID}}\",\n      \"object\": \"checkout.session\",\n      \"currency\": \"cad\",\n      \"amount_subtotal\": 2055,\n      \"amount_total\": 2055 // this will be converted from CAD to USD\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating NextAuth.js Route Handler for Pages Router\nDESCRIPTION: Implementation of the NextAuth.js route handler for the Pages Router, using the traditional API route structure.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/leads/next-auth.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// pages/api/auth/[...nextauth]/index.ts\nimport type { NextApiRequest, NextApiResponse } from \"next\";\nimport NextAuth from \"next-auth\";\nimport { getOptions } from \"./options\";\n\nconst handler = (req: NextApiRequest, res: NextApiResponse) =>\n  NextAuth(req, res, getOptions(req));\n\nexport default handler;\n```\n\n----------------------------------------\n\nTITLE: Updating Links by External ID in Dub API\nDESCRIPTION: Code examples for updating a link using an externalId across multiple programming languages. Note that the externalId must be prefixed with 'ext_' when used for updates.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/links/organization.mdx#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dub } from \"dub\";\n\nexport const dub = new Dub({\n  token: process.env.DUB_API_KEY,\n});\n\nconst link = await dub.links.update(\"ext_12345\", {\n  url: \"https://www.google.uk\", // new URL\n});\n```\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport(\n  \"context\"\n  dubgo \"github.com/dubinc/dub-go\"\n  \"github.com/dubinc/dub-go/models/operations\"\n  \"log\"\n  \"os\"\n)\n\nfunc main() {\n  ctx := context.Background()\n\n  s := dubgo.New(\n    dubgo.WithSecurity(os.Getenv(\"DUB_API_KEY\")),\n  )\n\n  res, err := s.Links.Update(ctx, \"ext_12345\", &operations.UpdateLinkRequestBody{\n    URL: \"https://www.google.uk\", // new URL\n  })\n\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  if res != nil {\n    // handle response\n  }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport dub\nfrom dub.models import operations\n\nd = dub.Dub(\n  token=os.environ['DUB_API_KEY'],\n)\n\nres = dub.links.update(link_id=\"ext_12345\", request_body={\n  \"url\": \"https://www.google.uk\", // new URL\n})\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'dub'\n\ns = ::OpenApiSDK::Dub.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    token: \"DUB_API_KEY\",\n  )\n)\n\nres = s.links.update(link_id=\"ext_12345\", request_body={\n  \"url\": \"https://www.google.uk\", // new URL\n})\n```\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Dub;\nuse Dub\\Models\\Operations;\n\n$sdk = Dub\\Dub::builder()->setSecurity('DUB_API_KEY')->build();\n\n$requestBody = new Operations\\UpdateLinkRequestBody(\n  url: 'https://www.google.uk', // new URL\n);\n\n$response = $sdk->links->update(\n  linkId: 'ext_12345',\n  requestBody: $requestBody\n);\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request PATCH \\\n  --url https://api.dub.co/links/ext_12345 \\\n  --header 'Authorization: Bearer <token>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\"url\": \"https://www.google.uk\"}'\n```\n\n----------------------------------------\n\nTITLE: Stripe Checkout Session Completed Event with Adaptive Pricing in JSON\nDESCRIPTION: This JSON snippet illustrates the structure of a Stripe checkout.session.completed event payload when using Adaptive Pricing. It shows how Dub handles currency conversion for reporting.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/sales/stripe.mdx#2025-04-10_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"{{EVENT_ID}}\",\n  \"object\": \"event\",\n  \"type\": \"checkout.session.completed\",\n  \"data\": {\n    \"object\": {\n      \"id\": \"{{SESSION_ID}}\",\n      \"object\": \"checkout.session\",\n      \"currency\": \"cad\",\n      \"amount_subtotal\": 2055,\n      \"amount_total\": 2055,\n      \"currency_conversion\": {\n        \"amount_subtotal\": 1500,\n        \"amount_total\": 1500, // this is the amount that Dub will record\n        \"source_currency\": \"usd\", // the currency of your Stripe account\n        \"fx_rate\": \"1.37\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Appwrite Node.js SDK\nDESCRIPTION: Install the Appwrite Node.js SDK using npm in your Next.js application.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/leads/appwrite.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i node-appwrite\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tag-based Analytics with cURL\nDESCRIPTION: This snippet shows how to directly use the Dub REST API with cURL to retrieve analytics for specific tags. It makes a GET request to the analytics endpoint with the tagIds query parameter and includes authorization headers.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/links/organization.mdx#2025-04-10_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n  --url https://api.dub.co/analytics?tagIds=tag_xxx \\\n  --header 'Authorization: Bearer <token>' \\\n  --header 'Content-Type: application/json'\n```\n\n----------------------------------------\n\nTITLE: Adding Dub Client Reference ID to Stripe Payment Link\nDESCRIPTION: Demonstrates how to add a query parameter to a Stripe Payment Link for tracking with Dub Conversions.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/sales/stripe.mdx#2025-04-10_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nhttps://buy.stripe.com/xxxxxx?client_reference_id=dub_id_xxxxxxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Bulk Updating Links with Dub API\nDESCRIPTION: This snippet shows how to update multiple links simultaneously with the same data using Dub's API. It supports modifying up to 100 links at once. Use cases include tagging multiple links, setting expiration dates, or updating UTM parameters. Note that domain and key cannot be updated, and webhook events are not triggered.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/links/bulk-actions.mdx#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dub } from \"dub\";\n\nexport const dub = new Dub({\n  token: process.env.DUB_API_KEY,\n});\n\nconst result = await dub.links.updateMany({\n  linkIds: [\"clux0rgak00011...\", \"clux0rgak00022...\"],\n  data: {\n    utm_source: \"facebook\",\n    utm_medium: \"cpc\",\n  },\n});\n```\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport(\n  \"context\"\n  dubgo \"github.com/dubinc/dub-go\"\n  \"github.com/dubinc/dub-go/models/operations\"\n  \"log\"\n  \"os\"\n)\n\nfunc main() {\n  ctx := context.Background()\n\n  s := dubgo.New(\n    dubgo.WithSecurity(os.Getenv(\"DUB_API_KEY\")),\n  )\n\n  res, err := s.Links.UpdateMany(ctx, operations.BulkUpdateLinksRequestBody{\n    LinkIds: []string{\n      \"clux0rgak00011...\",\n      \"clux0rgak00022...\",\n    },\n    Data: map[string]string{\n      \"utm_source\": \"facebook\",\n      \"utm_medium\": \"cpc\",\n    },\n  })\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport dub\nfrom dub.models import operations\n\nd = dub.Dub(\n  token=os.environ['DUB_API_KEY'],\n)\n\nres = dub.links.update_many(request={\n  \"link_ids\": [\n    \"clux0rgak00011...\",\n    \"clux0rgak00022...\",\n  ],\n  \"data\": {\n    \"utm_source\": \"facebook\",\n    \"utm_medium\": \"cpc\",\n  },\n})\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'dub'\n\ns = ::OpenApiSDK::Dub.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    token: \"DUB_API_KEY\",\n  )\n)\n\nreq = ::OpenApiSDK::Operations::BulkUpdateLinksRequestBody.new(\n  link_ids: [\n    \"clux0rgak00011...\",\n    \"clux0rgak00022...\",\n  ],\n  data: {\n    \"utm_source\": \"facebook\",\n    \"utm_medium\": \"cpc\",\n  },\n)\n\nres = s.links.update_many(req)\n```\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Dub;\nuse Dub\\Models\\Operations;\n\n$sdk = Dub\\Dub::builder()->setSecurity('DUB_API_KEY')->build();\n\n$response = $sdk->links->updateMany(\n  linkIds: [\n    'clux0rgak00011...',\n    'clux0rgak00022...',\n  ],\n  data: {\n    \"utm_source\": \"facebook\",\n    \"utm_medium\": \"cpc\",\n  },\n);\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request PATCH \\\n  --url https://api.dub.co/links/bulk \\\n  --header 'Authorization: Bearer <token>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\"link_ids\": [\"clux0rgak00011...\", \"clux0rgak00022...\"], \"data\": {\"utm_source\": \"facebook\", \"utm_medium\": \"cpc\"}}'\n```\n\n----------------------------------------\n\nTITLE: Tracking Sale Events with Dub SDK in PHP\nDESCRIPTION: Example of tracking sale events using the Dub SDK in PHP. The code initializes the Dub client with an API key from environment variables, creates a TrackSaleRequest object with sale details, and makes a sale tracking call.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/sales/introduction.mdx#2025-04-10_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nrequire 'vendor/autoload.php';\n\nuse Dub\\Dub;\nuse Dub\\Models\\Operations;\n\n$dub = Dub::builder()->setSecurity($_ENV[\"DUB_API_KEY\"])->build();\n\n$request = new Operations\\TrackSaleRequest();\n$request->externalId = 'cus_RBfbD57HDzPKpduI8elr5qHA';\n$request->amount = 100;\n$request->paymentProcessor = 'stripe';\n$request->eventName = 'E-book purchase';\n$request->invoiceId = '123456';\n$request->currency = 'usd';\n\n$dub->track->sale($request);\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Appwrite and Dub\nDESCRIPTION: Add environment variables for Appwrite endpoint, project ID, API key, and Dub API key to your application.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/leads/appwrite.mdx#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_APPWRITE_ENDPOINT=https://cloud.appwrite.io/v1\nNEXT_PUBLIC_APPWRITE_PROJECT=<APPWRITE_PROJECT_ID>\nNEXT_APPWRITE_KEY=<APPWRITE_API_KEY>\nNEXT_DUB_API_KEY=<DUB_API_KEY>\n```\n\n----------------------------------------\n\nTITLE: Using Dub API Key in Authorization Header\nDESCRIPTION: Demonstrates how to include the Dub API key in the Authorization header of an API request. The key is used as a bearer token for authentication.\nSOURCE: https://github.com/dubinc/docs/blob/main/api-reference/tokens.mdx#2025-04-10_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nAuthorization: Bearer dub_xxxx\n```\n\n----------------------------------------\n\nTITLE: Tracking Sale Events with Dub SDK in Go\nDESCRIPTION: Example of tracking sale events using the Dub SDK in Go. The code initializes the Dub client with an API key from environment variables and calls the Track.Sale method with transaction details including external ID, amount, payment processor, event name, invoice ID, and currency.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/sales/introduction.mdx#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"context\"\n    dub \"github.com/dubinc/dub-go\"\n)\n\nd := dub.New(\n    dub.WithSecurity(os.Getenv(\"DUB_API_KEY\")),\n)\n\n_, err := d.Track.Sale(context.Background(), &operations.TrackSaleRequest{\n    ExternalId:       \"cus_RBfbD57HDzPKpduI8elr5qHA\",\n    Amount:          100,\n    PaymentProcessor: \"stripe\",\n    EventName:       \"E-book purchase\",\n    InvoiceId:       \"123456\",\n    Currency:        \"usd\",\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Lead Tracking in Next.js Pages Router with Supabase Auth Callback\nDESCRIPTION: This code shows how to track lead conversion events in a Next.js Pages Router project using Supabase authentication. It processes the auth callback, identifies new users, and tracks leads using Dub's API while managing cookies appropriately.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/leads/supabase.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// pages/api/auth/callback.ts\nimport { NextApiRequest, NextApiResponse } from \"next\";\nimport { createClient } from \"@supabase/supabase-js\";\nimport { dub } from \"@/lib/dub\";\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const { code, next = \"/\" } = req.query;\n  const origin = `${req.headers[\"x-forwarded-proto\"]}://${req.headers.host}`;\n\n  if (typeof code === \"string\") {\n    const supabase = createClient(\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\n      process.env.SUPABASE_SERVICE_ROLE_KEY!\n    );\n\n    const { data, error } = await supabase.auth.exchangeCodeForSession(code);\n\n    if (!error) {\n      const { user } = data;\n      const { dub_id } = req.cookies;\n\n      // if the user is created in the last 10 minutes, consider them new\n      const isNewUser =\n        new Date(user.created_at) > new Date(Date.now() - 10 * 60 * 1000);\n\n      // if the user is new and has a dub_id cookie, track the lead\n      if (dub_id && isNewUser) {\n        dub.track\n          .lead({\n            clickId: dub_id,\n            eventName: \"Sign Up\",\n            externalId: user.id,\n            customerName: user.user_metadata.name,\n            customerEmail: user.email,\n            customerAvatar: user.user_metadata.avatar_url,\n          })\n          .catch(console.error); // Handle any errors in tracking\n\n        // delete the clickId cookie\n        res.setHeader(\n          \"Set-Cookie\",\n          `dub_id=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT`\n        );\n      }\n\n      return res.redirect(`${origin}${next}`);\n    }\n  }\n\n  // return the user to an error page with instructions\n  return res.redirect(`${origin}/auth/auth-code-error`);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Paginated List of Links with Go\nDESCRIPTION: This example shows how to use the Go SDK to fetch paginated links. It creates a request object with pagination parameters and passes it to the Links.List method with a context.\nSOURCE: https://github.com/dubinc/docs/blob/main/api-reference/pagination.mdx#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nrequest := operations.GetLinksRequest{\n  Page: dubgo.Float64(1),\n  PageSize: dubgo.Float64(10),\n}\n\nctx := context.Background()\nres, err := s.Links.List(ctx, request)\n```\n\n----------------------------------------\n\nTITLE: Enabling Conversion Tracking via API in Ruby\nDESCRIPTION: Creates a new link with conversion tracking enabled using the Dub Ruby SDK.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/quickstart.mdx#2025-04-10_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ns.links.create_many(\n  ::OpenApiSDK::Operations::CreateLinkRequest.new(\n    url: \"https://dub.co\",\n    track_conversion: true,\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Paginated List of Links with cURL\nDESCRIPTION: This example demonstrates how to make a GET request to retrieve the first page of 10 links using cURL. It requires an authorization token for authentication.\nSOURCE: https://github.com/dubinc/docs/blob/main/api-reference/pagination.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n  --url https://api.dub.co/links?page=1&pageSize=10 \\\n  --header 'Authorization: Bearer <token>'\n```\n\n----------------------------------------\n\nTITLE: Adding Environment Variables for Clerk and Dub\nDESCRIPTION: This snippet shows how to add the necessary environment variables for Clerk authentication and Dub API integration. It includes the Clerk publishable key, Clerk secret key, and Dub API key.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/leads/clerk.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# get it here: https://dashboard.clerk.com/apps/new\nNEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=your_publishable_key\nCLERK_SECRET_KEY=your_secret_key\n\n# get it here: https://d.to/tokens\nDUB_API_KEY=your_api_key\n```\n\n----------------------------------------\n\nTITLE: Currency Conversion Example with Dub SDK in TypeScript\nDESCRIPTION: Example showing automatic currency conversion support in Dub. When tracking a sale with a non-USD currency (PLN in this case), Dub automatically converts the amount to USD using the latest foreign exchange rates for reporting consistency.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/sales/introduction.mdx#2025-04-10_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait dub.track.sale({\n  externalId: \"cus_RBfbD57HDzPKpduI8elr5qHA\",\n  amount: 15480, // this will be converted from PLN to USD\n  currency: \"pln\",\n  paymentProcessor: \"stripe\",\n  eventName: \"Purchase\",\n});\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for GET /workspaces/{idOrSlug} Endpoint\nDESCRIPTION: This OpenAPI specification defines the endpoint for retrieving workspace information using either a workspace ID or slug. The endpoint is part of the Dub API reference for workspace operations.\nSOURCE: https://github.com/dubinc/docs/blob/main/api-reference/endpoint/retrieve-a-workspace.mdx#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /workspaces/{idOrSlug}\n```\n\n----------------------------------------\n\nTITLE: Integrating Dub Analytics in Next.js Root Layout\nDESCRIPTION: Add the DubAnalytics component from the @dub/analytics package to the root layout of your Next.js application.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/leads/appwrite.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Metadata } from 'next';\nimport { Analytics as DubAnalytics } from '@dub/analytics/react';\n\nexport const metadata: Metadata = {\n  title: 'Appwrite Dub Leads Example',\n  description: 'Appwrite Dub Leads Tracking example app with Next.js'\n};\n\nexport default function RootLayout({\n  children\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n      <DubAnalytics />\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Stripe Checkout Session with Dub ID in TypeScript\nDESCRIPTION: Shows how to create a Stripe Checkout Session with a Dub client reference ID in TypeScript.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/sales/stripe.mdx#2025-04-10_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst session = await stripe.checkout.sessions.create({\n  success_url: \"https://example.com/success\",\n  line_items: [\n    {\n      price: \"price_xxxxxxxxxxxxxxxx\",\n      quantity: 2,\n    },\n  ],\n  mode: \"payment\",\n  client_reference_id: \"dub_id_xxxxxxxxxxxxxx\",\n});\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for GET /domains Endpoint\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the GET /domains endpoint of the Dub API. It specifies the path, method, and metadata for retrieving domains associated with a workspace.\nSOURCE: https://github.com/dubinc/docs/blob/main/api-reference/endpoint/retrieve-a-list-of-domains.mdx#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /domains\nog:title: \"Get list of domains associated with the workspace with the Dub API - API Reference\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dub Analytics Script with Reverse Proxy for Other Frameworks\nDESCRIPTION: This code snippet shows how to include the Dub Analytics script in the HTML head tag for frameworks other than React/Next.js, using a custom reverse proxy URL. It demonstrates setting up the custom domain for short links and the API host using data attributes.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/clicks/introduction.mdx#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// include this script tag in your HTML Head tag\n<script\n  src=\"https://www.dubcdn.com/analytics/script.js\"\n  data-api-host=\"/_proxy/dub\"\n  data-domains='{\"refer\": \"go.example.com\"}'\n  defer\n/>\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Endpoint Definition - Get Customer by ID\nDESCRIPTION: OpenAPI specification for retrieving a customer record by their unique identifier using a GET request.\nSOURCE: https://github.com/dubinc/docs/blob/main/api-reference/endpoint/retrieve-a-customer.mdx#2025-04-10_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: get /customers/{id}\n```\n\n----------------------------------------\n\nTITLE: Configuring Reverse Proxy in Next.js\nDESCRIPTION: This code snippet demonstrates how to set up a reverse proxy in Next.js to avoid ad-blockers from blocking click-tracking requests. It uses the rewrites configuration in next.config.js to route tracking requests through a proxy URL.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/clicks/introduction.mdx#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// next.config.js\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: \"/_proxy/dub/track/:path\",\n        destination: \"https://api.dub.co/track/:path\",\n      },\n    ];\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Tracking Lead Conversion with Dub in TypeScript\nDESCRIPTION: This snippet demonstrates how to track a lead conversion event using the Dub SDK. It associates a user's unique ID with the click event for future purchase tracking.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/sales/stripe.mdx#2025-04-10_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait dub.track.lead({\n  clickId,\n  eventName: \"Sign Up\",\n  externalId: user.id, // the unique user ID of the customer in your database\n  customerName: user.name,\n  customerEmail: user.email,\n  customerAvatar: user.image,\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Links with Dub API\nDESCRIPTION: OpenAPI specification for the DELETE endpoint to remove a link by its ID. The endpoint follows the pattern /links/{linkId} where linkId is the unique identifier of the link to be deleted.\nSOURCE: https://github.com/dubinc/docs/blob/main/api-reference/endpoint/delete-a-link.mdx#2025-04-10_snippet_0\n\nLANGUAGE: openapi\nCODE:\n```\nopenapi: delete /links/{linkId}\n```\n\n----------------------------------------\n\nTITLE: Installing Dub Analytics Script for Other Frameworks\nDESCRIPTION: This code snippet shows how to include the Dub Analytics script in the HTML head tag for frameworks other than React/Next.js. It demonstrates setting up the custom domain for short links using a data attribute.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/clicks/introduction.mdx#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// include this script tag in your HTML Head tag\n<script\n  src=\"https://www.dubcdn.com/analytics/script.js\"\n  data-domains='{\"refer\": \"go.example.com\"}'\n  defer\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Stripe Checkout Session with Dub Integration in TypeScript\nDESCRIPTION: This code snippet shows how to create a Stripe checkout session while integrating with Dub for conversion tracking. It includes passing the user's unique ID in the metadata for Dub to associate with the purchase.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/sales/stripe.mdx#2025-04-10_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { stripe } from \"@/lib/stripe\";\n\nconst user = {\n  id: \"user_123\",\n  email: \"user@example.com\",\n  teamId: \"team_xxxxxxxxx\",\n};\n\nconst priceId = \"price_xxxxxxxxx\";\n\nconst stripeSession = await stripe.checkout.sessions.create({\n  customer_email: user.email,\n  success_url: \"https://app.domain.com/success\",\n  line_items: [{ price: priceId, quantity: 1 }],\n  mode: \"subscription\",\n  client_reference_id: user.teamId,\n  metadata: {\n    dubCustomerId: user.id, // the unique user ID of the customer in your database\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for POST /tags Endpoint\nDESCRIPTION: YAML snippet defining the OpenAPI specification for the POST /tags endpoint. It includes the endpoint path, HTTP method, and metadata for documentation purposes.\nSOURCE: https://github.com/dubinc/docs/blob/main/api-reference/endpoint/create-a-new-tag.mdx#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /tags\nog:title: \"Create a new tag with the Dub API - API Reference\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Webhook Signatures in Go\nDESCRIPTION: Go implementation of webhook verification using crypto/hmac and crypto/sha256 packages. Handles webhook requests by computing and comparing HMAC-SHA256 signatures for security validation.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/webhooks/verify-webhook-requests.mdx#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"crypto/hmac\"\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"os\"\n)\n\nfunc webhookHandler(w http.ResponseWriter, r *http.Request) {\n\t// Get the signature from the header\n\twebhookSignature := r.Header.Get(\"Dub-Signature\")\n\tif webhookSignature == \"\" {\n\t\thttp.Error(w, \"No signature provided.\", http.StatusUnauthorized)\n\t\treturn\n\t}\n\n\t// Copy this from the webhook details page\n\tsecret := os.Getenv(\"DUB_WEBHOOK_SECRET\")\n\tif secret == \"\" {\n\t\thttp.Error(w, \"No secret provided.\", http.StatusUnauthorized)\n\t\treturn\n\t}\n\n\t// Read the raw body\n\tbody, err := ioutil.ReadAll(r.Body)\n\tif err != nil {\n\t\thttp.Error(w, \"Error reading request body\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\t// Calculate the HMAC\n\th := hmac.New(sha256.New, []byte(secret))\n\th.Write(body)\n\tcomputedSignature := hex.EncodeToString(h.Sum(nil))\n\n\tif webhookSignature != computedSignature {\n\t\thttp.Error(w, \"Invalid signature\", http.StatusBadRequest)\n\t\treturn\n\t}\n\n\t// Handle the webhook event\n\t// ...\n\n\tw.WriteHeader(http.StatusOK)\n\tw.Write([]byte(\"OK\"))\n}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Specification for POST /links Endpoint in YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the POST /links endpoint of the Dub API. It outlines the request body parameters, security requirements, and possible responses.\nSOURCE: https://github.com/dubinc/docs/blob/main/api-reference/endpoint/create-a-new-link.mdx#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /links\nog:title: \"Create a new link with the Dub API - API Reference\"\n```\n\n----------------------------------------\n\nTITLE: Lead Created Event Payload\nDESCRIPTION: Webhook payload for the lead.created event, triggered when a new lead is created via Dub Conversions. Contains customer details, click information, and associated link data.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/webhooks/event-types.mdx#2025-04-10_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"evt_P343bmyae40ALQYr5HT4vRXRd\",\n  \"event\": \"lead.created\",\n  \"createdAt\": \"2024-08-30T09:53:50.343Z\",\n  \"data\": {\n    \"eventName\": \"Sign up\",\n    \"customer\": {\n      \"id\": \"oU5P0SqI8fpwx5bxw1\",\n      \"name\": \"John\",\n      \"email\": \"john@example.com\",\n      \"avatar\": \"https://example.com/john.jpeg\"\n    },\n    \"click\": {\n      \"id\": \"d0UtZqE0BZuBPrJS\",\n      \"url\": \"https://github.com/dubinc/dub\",\n      \"ip\": \"63.141.57.109\",\n      \"continent\": \"NA\",\n      \"country\": \"US\",\n      \"city\": \"San Francisco\",\n      \"device\": \"Desktop\",\n      \"browser\": \"Chrome\",\n      \"os\": \"Mac OS\",\n      \"ua\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36\",\n      \"bot\": false,\n      \"qr\": false,\n      \"referer\": \"(direct)\"\n    },\n    \"link\": {\n      \"id\": \"cm0faqkyn0001txvfwjfeq7gl\",\n      \"domain\": \"dub.sh\",\n      \"key\": \"79ys3WA\",\n      \"externalId\": null,\n      \"url\": \"https://github.com/dubinc/dub\",\n      \"trackConversion\": true,\n      \"archived\": false,\n      \"expiresAt\": null,\n      \"expiredUrl\": null,\n      \"password\": null,\n      \"proxy\": false,\n      \"title\": null,\n      \"description\": null,\n      \"image\": null,\n      \"video\": null,\n      \"rewrite\": false,\n      \"doIndex\": false,\n      \"ios\": null,\n      \"android\": null,\n      \"geo\": null,\n      \"publicStats\": false,\n      \"comments\": null,\n      \"shortLink\": \"https://dub.sh/79ys3WA\",\n      \"qrCode\": \"https://api.dub.co/qr?url=https://dub.sh/79ys3WA?qr=1\",\n      \"utm_source\": null,\n      \"utm_medium\": null,\n      \"utm_campaign\": null,\n      \"utm_term\": null,\n      \"utm_content\": null,\n      \"userId\": \"cm022rkcw0000ikt14mscg9sg\",\n      \"workspaceId\": \"ws_cm022sis60003ikt1syy7kfhl\",\n      \"clicks\": 10,\n      \"lastClicked\": \"2024-08-30T07:45:09.000Z\",\n      \"leads\": 5,\n      \"sales\": 0,\n      \"saleAmount\": 0,\n      \"createdAt\": \"2024-08-29T13:03:59.098Z\",\n      \"updatedAt\": \"2024-08-30T09:53:49.505Z\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Stripe Customer with Dub Integration in TypeScript\nDESCRIPTION: This code shows how to update an existing Stripe customer with Dub integration metadata for conversion tracking. It includes passing the user's unique ID and click event ID.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/sales/stripe.mdx#2025-04-10_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { stripe } from \"@/lib/stripe\";\n\nconst user = {\n  id: \"user_123\",\n  email: \"user@example.com\",\n  teamId: \"team_xxxxxxxxx\",\n};\n\nconst dub_id = req.headers.get(\"dub_id\");\n\nawait stripe.customers.update(user.id, {\n  metadata: {\n    dubCustomerId: user.id,\n    dubClickId: dub_id,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dub SDK with npm\nDESCRIPTION: Command to install Dub SDK using npm package manager\nSOURCE: https://github.com/dubinc/docs/blob/main/snippets/sdk-install-ts.mdx#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install dub\n```\n\n----------------------------------------\n\nTITLE: Webhook Base Payload Structure\nDESCRIPTION: The standard format for all webhook payloads in Dub, showing the basic structure that includes event ID, type, timestamp, and data object.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/webhooks/event-types.mdx#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"evt_KleiO4HBwZFbO1vZLWIPZ2AtX\", // The event ID\n  \"event\": \"link.created\", // The event type\n  \"createdAt\": \"2024-08-26T16:41:52.346Z\", // The timestamp of when the event was created\n  \"data\": {\n    // Event payload\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Shopify Orders/Paid Event for Dub Conversion Tracking\nDESCRIPTION: This JSON snippet demonstrates how Dub processes the Shopify orders/paid event payload to record sales in the native currency of the Shopify store. It shows the structure of the current_subtotal_price_set object, which contains both the shop's currency and the customer's currency information.\nSOURCE: https://github.com/dubinc/docs/blob/main/conversions/sales/shopify.mdx#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"current_subtotal_price_set\": {\n    \"shop_money\": {\n      \"amount\": \"398.00\", // this is the amount that Dub will record\n      \"currency_code\": \"USD\" // this is the currency of your Shopify store\n    },\n    \"presentment_money\": {\n      \"amount\": \"572.25\",\n      \"currency_code\": \"CAD\"\n    }\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Short Link Response Field Example - Short Link\nDESCRIPTION: Example of full short link URL format\nSOURCE: https://github.com/dubinc/docs/blob/main/snippets/link-response.mdx#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://d.to/try\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tag-based Analytics in Python\nDESCRIPTION: This snippet demonstrates using the Dub Python SDK to retrieve analytics for specific tags. It creates a Dub client with an API key from environment variables and makes a request with tag IDs as a filter parameter.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/links/organization.mdx#2025-04-10_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport dub\nfrom dub.models import operations\n\nd = dub.Dub(\n  token=os.environ['DUB_API_KEY'],\n)\n\nres = dub.analytics.retrieve(request={\n  \"tag_ids\": [\"tag_xxx\"],\n})\n```\n\n----------------------------------------\n\nTITLE: Defining API Host Parameter in JSX\nDESCRIPTION: This snippet defines the 'apiHost' parameter for the Dub API, specifying its type, default value, and purpose. It's useful for setting up reverse proxies to avoid adblockers.\nSOURCE: https://github.com/dubinc/docs/blob/main/snippets/dub-analytics-params-react.mdx#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ParamField body=\"apiHost\" type=\"url\" default=\"https://api.dub.co\">\n  The base URL for the Dub API. This is useful for [setting up reverse\n  proxies](/conversions/clicks/introduction#step-4-optional-but-recommended-set-up-a-reverse-proxy)\n  to avoid adblockers.\n</ParamField>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tag-based Analytics in Go\nDESCRIPTION: This snippet shows how to use the Dub Go SDK to retrieve analytics for specific tags. It initializes the client with an API key from environment variables and makes a request using the tag IDs parameter.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/links/organization.mdx#2025-04-10_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport(\n  \"context\"\n  dubgo \"github.com/dubinc/dub-go\"\n  \"github.com/dubinc/dub-go/models/operations\"\n  \"log\"\n  \"os\"\n)\n\nfunc main() {\n  ctx := context.Background()\n\n  s := dubgo.New(\n    dubgo.WithSecurity(os.Getenv(\"DUB_API_KEY\")),\n  )\n\n  res, err := s.Analytics.Retrieve(ctx, operations.RetrieveAnalyticsRequest{\n    TagIds: []string{\"tag_xxx\"},\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Local Shortlink URL Format\nDESCRIPTION: URL structure for testing shortlinks in local development environment.\nSOURCE: https://github.com/dubinc/docs/blob/main/local-development.mdx#2025-04-10_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://dub.localhost:8888/<shortlink-key>\n```\n\n----------------------------------------\n\nTITLE: Defining Cookie Options in JSX\nDESCRIPTION: This snippet outlines the 'cookieOptions' parameter, which is an object containing various cookie-related settings such as domain, expiration, and path. It provides detailed information for each sub-property.\nSOURCE: https://github.com/dubinc/docs/blob/main/snippets/dub-analytics-params-react.mdx#2025-04-10_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ParamField body=\"cookieOptions\" type=\"CookieOption Object\">\n  <Expandable title=\"properties\">\n    <ParamField body=\"domain\" type=\"string\">\n      Specifies the value for the `Domain` Set-Cookie attribute. This is useful\n      for cross-domain tracking. Example: `.example.com`\n    </ParamField>\n    <ParamField body=\"expires\" type=\"integer\" default=\"90\">\n      Specifies the `Date` object to be the value for the `Expires` Set-Cookie\n      attribute. Example: `new Date('2024-12-31')`\n    </ParamField>\n    <ParamField body=\"expiresInDays\" type=\"integer\" default=\"90\">\n      Specifies the number (in days) to be the value for the `Expires`\n      Set-Cookie attribute. Example: `90`\n    </ParamField>\n    <ParamField body=\"path\" type=\"string\" default=\"/\">\n      Specifies the value for the `Path` Set-Cookie attribute. By default, the\n      path is considered the \"default path\". Example: `/`\n    </ParamField>\n  </Expandable>\n</ParamField>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Analytics by External ID in Dub API\nDESCRIPTION: Code examples for retrieving analytics data using an externalId across multiple programming languages. This allows for fetching analytics using your system's identifiers.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/links/organization.mdx#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dub } from \"dub\";\n\nexport const dub = new Dub({\n  token: process.env.DUB_API_KEY,\n});\n\nconst analytics = await dub.analytics.retrieve({\n  externalId: \"ext_12345\",\n});\n```\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport(\n  \"context\"\n  dubgo \"github.com/dubinc/dub-go\"\n  \"github.com/dubinc/dub-go/models/operations\"\n  \"log\"\n  \"os\"\n)\n\nfunc main() {\n  ctx := context.Background()\n\n  s := dubgo.New(\n    dubgo.WithSecurity(os.Getenv(\"DUB_API_KEY\")),\n  )\n\n  res, err := s.Analytics.Retrieve(ctx, operations.RetrieveAnalyticsRequest{\n    ExternalID: dubgo.String(\"ext_12345\"),\n  })\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport dub\nfrom dub.models import operations\n\nd = dub.Dub(\n  token=os.environ['DUB_API_KEY'],\n)\n\nres = dub.analytics.retrieve(request={\n  \"external_id\": \"ext_12345\",\n})\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'dub'\n\ns = ::OpenApiSDK::Dub.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    token: \"DUB_API_KEY\",\n  )\n)\n\nreq = ::OpenApiSDK::Operations::RetrieveAnalyticsRequest.new(\n  external_id: \"ext_12345\",\n)\n\nres = s.analytics.retrieve(req)\n```\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Dub;\nuse Dub\\Models\\Operations;\n\n$sdk = Dub\\Dub::builder()->setSecurity('DUB_API_KEY')->build();\n\n$request = new Operations\\RetrieveAnalyticsRequest(\n  externalId: \"ext_12345\",\n);\n\n$response = $sdk->analytics->retrieve(\n  request: $request\n);\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n  --url https://api.dub.co/analytics?external_id=ext_12345 \\\n  --header 'Authorization: Bearer <token>' \\\n  --header 'Content-Type: application/json'\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Tutorials for No-code Integration with Dub\nDESCRIPTION: An iframe element that embeds a YouTube video tutorial showing how to integrate with Dub using no-code tools like Make.com and Smartsuite.\nSOURCE: https://github.com/dubinc/docs/blob/main/integrations.mdx#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n  width=\"100%\"\n  className=\"aspect-video\"\n  src=\"https://www.youtube.com/embed/KQU3qqhuj3Q\"\n  title=\"YouTube video player\"\n  frameborder=\"0\"\n  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n  referrerpolicy=\"strict-origin-when-cross-origin\"\n  allowfullscreen\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Script Properties in JSX\nDESCRIPTION: This snippet defines the 'scriptProps' parameter, which allows passing custom properties to the script tag. It references MDN documentation for available options.\nSOURCE: https://github.com/dubinc/docs/blob/main/snippets/dub-analytics-params-react.mdx#2025-04-10_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<ParamField body=\"scriptProps\" type=\"HTMLScriptElement Object\">\n  Custom properties to pass to the script tag. Refer to\n  [MDN](https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement) for\n  all available options.\n</ParamField>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Links by External ID in Dub API\nDESCRIPTION: Code examples showing how to retrieve a link using an externalId across multiple programming languages. This allows for accessing link data using your system's identifiers rather than Dub's internal IDs.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/links/organization.mdx#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dub } from \"dub\";\n\nexport const dub = new Dub({\n  token: process.env.DUB_API_KEY,\n});\n\nconst link = await dub.links.get({\n  externalId: \"12345\",\n});\n```\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport(\n  \"context\"\n  dubgo \"github.com/dubinc/dub-go\"\n  \"github.com/dubinc/dub-go/models/operations\"\n  \"log\"\n  \"os\"\n)\n\nfunc main() {\n  ctx := context.Background()\n\n  s := dubgo.New(\n    dubgo.WithSecurity(os.Getenv(\"DUB_API_KEY\")),\n  )\n\n  res, err := s.Links.Get(ctx, operations.GetLinkInfoRequest{\n    ExternalID: dubgo.String(\"12345\"),\n  })\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport dub\nfrom dub.models import operations\n\nd = dub.Dub(\n  token=os.environ['DUB_API_KEY'],\n)\n\nres = d.links.get(request={\n  \"external_id\": \"12345\",\n})\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'dub'\n\ns = ::OpenApiSDK::Dub.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    token: \"DUB_API_KEY\",\n  )\n)\n\nreq = ::OpenApiSDK::Operations::GetLinkInfoRequest.new(\n  external_id: \"12345\",\n)\n\nres = s.links.get(req)\n```\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Dub;\nuse Dub\\Models\\Operations;\n\n$sdk = Dub\\Dub::builder()->setSecurity('DUB_API_KEY')->build();\n\n$response = $sdk->links->get(\n  externalId: '12345'\n);\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request GET \\\n  --url https://api.dub.co/links/info?external_id=12345 \\\n  --header 'Authorization: Bearer <token>' \\\n  --header 'Content-Type: application/json'\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie Expiration in Dub Analytics Script (HTML)\nDESCRIPTION: This snippet demonstrates how to set a custom cookie expiration time of 60 days for the Dub analytics script using the data-cookie-options attribute.\nSOURCE: https://github.com/dubinc/docs/blob/main/snippets/dub-analytics-params.mdx#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script\n  src=\"https://www.dubcdn.com/analytics/script.js\"\n  defer\n  data-cookie-options='{\"expiresInDays\": 60}'\n/>\n```\n\n----------------------------------------\n\nTITLE: Upserting a Dub Link in Python\nDESCRIPTION: This snippet illustrates how to upsert a Dub link using the Python SDK. It creates a new link if it doesn't exist, or updates an existing one with the same URL.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/links/introduction.mdx#2025-04-10_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport dub\nfrom dub.models import operations\n\nd = dub.Dub(\n  token=os.environ['DUB_API_KEY'],\n)\n\nres = d.links.upsert(request={\n  \"url\": \"https://google.com\",\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Card Group with Integration Links in JSX\nDESCRIPTION: This code snippet creates a card group with two cards, each representing a link to view the Dub-Zapier integration on different platforms. It uses JSX syntax and includes custom styling and icons.\nSOURCE: https://github.com/dubinc/docs/blob/main/integrations/zapier.mdx#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<CardGroup cols={2}>\n  <Card\n    title=\"View on Dub\"\n    icon={\n      <div className=\"h-8 w-8\">\n        <img\n          src=\"https://assets.dub.co/logo.png\"\n          alt=\"Dub logo\"\n          className=\"h-full w-full\"\n        />\n      </div>\n    }\n    href=\"https://app.dub.co/integrations/zapier\"\n  >\n    Opens the integration page on Dub\n  </Card>\n  <Card\n    title=\"View on Zapier\"\n    icon={\n      <div className=\"h-8 w-8\">\n        <img\n          src=\"https://dubassets.com/integrations/clzlmz336000fjeqynwhfv8vo_S4yz4ak\"\n          alt=\"Zapier logo\"\n          className=\"h-full w-full rounded-full\"\n        />\n      </div>\n    }\n    href=\"https://d.to/zapier\"\n  >\n    Opens the integration page on Zapier\n  </Card>\n</CardGroup>\n```\n\n----------------------------------------\n\nTITLE: Rendering Installation Options for Dub Analytics using React CardGroup Component\nDESCRIPTION: This code snippet uses a React CardGroup component to display installation options for Dub Analytics across various platforms. Each Card within the group represents a different installation method, including icons and links to specific guide pages.\nSOURCE: https://github.com/dubinc/docs/blob/main/snippets/dub-client-install.mdx#2025-04-10_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<CardGroup>\n  <Card\n    title=\"React\"\n    icon=\"react\"\n    href=\"/sdks/client-side/installation-guides/react\"\n  >\n    Add Dub Analytics to your React app.\n  </Card>\n  <Card\n    title=\"Manual installation\"\n    icon=\"browser\"\n    href=\"/sdks/client-side/installation-guides/manual\"\n  >\n    Add Dub Analytics to your website.\n  </Card>\n  <Card\n    title=\"Framer\"\n    icon={\n      <svg\n        width=\"74\"\n        height=\"111\"\n        viewBox=\"0 0 74 111\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        className=\"w-7 h-7\"\n      >\n        <path d=\"M0 0H73.8374V36.9892H36.9187L0 0Z\" fill=\"#eb5611\" />\n        <path d=\"M0 36.989H36.9187L73.8374 73.9796H0V36.989Z\" fill=\"#eb5611\" />\n        <path d=\"M0 73.9797H36.9187V110.97L0 73.9797Z\" fill=\"#eb5611\" />\n      </svg>\n    }\n    href=\"/sdks/client-side/installation-guides/framer\"\n  >\n    Add Dub Analytics to your Framer site.\n  </Card>\n  <Card\n    title=\"Shopify\"\n    icon=\"shopify\"\n    href=\"/sdks/client-side/installation-guides/shopify\"\n  >\n    Add Dub Analytics to your Shopify store.\n  </Card>\n  <Card\n    title=\"WordPress\"\n    icon=\"wordpress\"\n    href=\"/sdks/client-side/installation-guides/wordpress\"\n  >\n    Add Dub Analytics to your WordPress site.\n  </Card>\n  <Card\n    title=\"Webflow\"\n    icon=\"webflow\"\n    href=\"/sdks/client-side/installation-guides/webflow\"\n  >\n    Add Dub Analytics to your Webflow site.\n  </Card>\n</CardGroup>\n```\n\n----------------------------------------\n\nTITLE: Upserting a Dub Link in Go\nDESCRIPTION: This snippet shows how to upsert a Dub link using the Go SDK. It creates a new link if it doesn't exist, or updates an existing one with the same URL.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/links/introduction.mdx#2025-04-10_snippet_13\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport(\n  \"context\"\n  dubgo \"github.com/dubinc/dub-go\"\n  \"github.com/dubinc/dub-go/models/operations\"\n  \"log\"\n  \"os\"\n)\n\nfunc main() {\n  ctx := context.Background()\n\n  s := dubgo.New(\n    dubgo.WithSecurity(os.Getenv(\"DUB_API_KEY\")),\n  )\n\n  res, err := s.Links.Upsert(ctx, &operations.UpsertLinkRequestBody{\n    URL: \"https://google.com\",\n  })\n\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  if res != nil {\n    // handle response\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for POST /partners Endpoint\nDESCRIPTION: This snippet specifies the OpenAPI definition for the POST /partners endpoint. It indicates that this is part of the API documentation for creating or updating partner information.\nSOURCE: https://github.com/dubinc/docs/blob/main/api-reference/endpoint/create-a-partner.mdx#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nopenapi: post /partners\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing Site Visit Variant in React and HTML\nDESCRIPTION: Demonstrates how to implement the site visit variant which tracks the first entry page of a user in addition to base functionality. This is useful for measuring SEO and Google Ads performance.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/client-side/variants.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// the DubAnalytics component automatically detects the `domainsConfig.site` prop\n// and applies the site-visit script variant for you\n<DubAnalytics domainsConfig={{ site: \"site.dub.co\" }} />\n```\n\nLANGUAGE: html\nCODE:\n```\n<script\n  src=\"https://www.dubcdn.com/analytics/script.site-visit.js\"\n  data-domains='{\"site\": \"site.dub.co\"}'\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating a Dub Link using cURL\nDESCRIPTION: This snippet shows how to update an existing Dub link using a cURL command. It sends a PATCH request to the Dub API with the necessary headers and JSON payload.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/links/introduction.mdx#2025-04-10_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request PATCH \\\n  --url https://api.dub.co/links/link_eBKA4MT44XnI17hYLchkjUOd \\\n  --header 'Authorization: Bearer <token>' \\\n  --header 'Content-Type: application/json' \\\n  --data '{\"url\": \"https://www.google.uk\"}'\n```\n\n----------------------------------------\n\nTITLE: Adding @dub/analytics Script to HTML Head\nDESCRIPTION: Instructions for adding the @dub/analytics tracking script to a website by inserting it in the HTML head section. The script is loaded with the defer attribute to prevent blocking page rendering.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/client-side/installation-guides/manual.mdx#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://www.dubcdn.com/analytics/script.js\" defer />\n```\n\n----------------------------------------\n\nTITLE: Creating a Dub Link in Ruby\nDESCRIPTION: This snippet demonstrates how to create a new Dub link using the Ruby SDK. It sets up the Dub client with an API key and creates a link with a specified URL.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/links/introduction.mdx#2025-04-10_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'dub'\n\ns = ::OpenApiSDK::Dub.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    token: \"DUB_API_KEY\",\n  )\n)\n\nreq = ::OpenApiSDK::Operations::CreateLinkRequestBody.new(\n  url: \"https://google.com\",\n)\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for GET /metatags Endpoint in YAML\nDESCRIPTION: This YAML snippet specifies the OpenAPI definition for the GET /metatags endpoint. It includes details such as the HTTP method, endpoint path, and potentially other OpenAPI-specific information.\nSOURCE: https://github.com/dubinc/docs/blob/main/api-reference/endpoint/retrieve-metatags.mdx#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /metatags\n```\n\n----------------------------------------\n\nTITLE: Bulk Link Creation in Multiple Languages\nDESCRIPTION: Example code demonstrating how to create multiple links in a single API call using Dub's bulk link creation endpoint, which helps optimize API usage within rate limits. This approach allows creating up to 100 links in one API call.\nSOURCE: https://github.com/dubinc/docs/blob/main/api-reference/rate-limits.mdx#2025-04-10_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait dub.links.createMany([\n  {\n    url: \"https://google.com\",\n  },\n  {\n    url: \"https://twitter.com\",\n  },\n  {\n    url: \"https://linkedin.com\",\n  },\n]);\n```\n\nLANGUAGE: python\nCODE:\n```\nres = d.links.create_many(request=[\n  {\n    url: \"https://google.com\",\n  },\n  {\n    url: \"https://twitter.com\",\n  },\n  {\n    url: \"https://linkedin.com\",\n  },\n]);\n```\n\nLANGUAGE: go\nCODE:\n```\nvar request []operations.RequestBody =\n  []operations.RequestBody{\n    operations.RequestBody{\n        URL: \"https://google.com\",\n    },\n    operations.RequestBody{\n      URL: \"https://twitter.com\",\n    },\n    operations.RequestBody{\n      URL: \"https://linkedin.com\",\n    },\n  }\nctx := context.Background()\nres, err := s.Links.CreateMany(ctx, request)\n```\n\nLANGUAGE: ruby\nCODE:\n```\ns.links.create_many(\n  ::OpenApiSDK::Operations::BulkCreateLinksRequest.new(\n    request_body: [\n      ::OpenApiSDK::Operations::RequestBody.new(\n        url: \"https://google.com\",\n      ),\n      ::OpenApiSDK::Operations::RequestBody.new(\n        url: \"https://twitter.com\",\n      ),\n      ::OpenApiSDK::Operations::RequestBody.new(\n        url: \"https://linkedin.com\",\n      ),\n    ]\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering Authentication Provider Cards in React\nDESCRIPTION: A React component structure using CardGroup and Card elements to display authentication integration options. Each card represents a different auth provider (NextAuth.js, Clerk, Supabase, Auth0, Appwrite) with consistent styling including shield icons and horizontal layout.\nSOURCE: https://github.com/dubinc/docs/blob/main/snippets/auth-providers.mdx#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<CardGroup>\n  <Card\n    title=\"NextAuth.js\"\n    icon=\"shield-halved\"\n    iconType=\"solid\"\n    href=\"/conversions/leads/next-auth\"\n    horizontal\n  >\n    Tracking lead events with NextAuth.js\n  </Card>\n  <Card\n    title=\"Clerk\"\n    icon=\"shield-halved\"\n    iconType=\"solid\"\n    href=\"/conversions/leads/clerk\"\n    horizontal\n  >\n    Tracking lead events with Clerk\n  </Card>\n  <Card\n    title=\"Supabase\"\n    icon=\"shield-halved\"\n    iconType=\"solid\"\n    href=\"/conversions/leads/supabase\"\n    horizontal\n  >\n    Tracking lead events with Supabase\n  </Card>\n  <Card\n    title=\"Auth0\"\n    icon=\"shield-halved\"\n    iconType=\"solid\"\n    href=\"/conversions/leads/auth0\"\n    horizontal\n  >\n    Tracking lead events with Auth0\n  </Card>\n  <Card\n    title=\"Appwrite\"\n    icon=\"shield-halved\"\n    iconType=\"solid\"\n    href=\"/conversions/leads/appwrite\"\n    horizontal\n  >\n    Tracking lead events with Appwrite\n  </Card>\n</CardGroup>\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Domain Update Endpoint Definition\nDESCRIPTION: OpenAPI specification for the domain update endpoint, defining the path and og:title metadata.\nSOURCE: https://github.com/dubinc/docs/blob/main/api-reference/endpoint/update-a-domain.mdx#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: patch /domains/{slug}\nog:title: \"Update a domain with the Dub API - API Reference\"\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for GET /partners/links Endpoint\nDESCRIPTION: YAML snippet defining the OpenAPI specification for the GET /partners/links endpoint. It includes the endpoint path and a sidebar title for documentation purposes.\nSOURCE: https://github.com/dubinc/docs/blob/main/api-reference/endpoint/retrieve-a-partners-links.mdx#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: get /partners/links\nsidebarTitle: Retrieve a partner's links\n```\n\n----------------------------------------\n\nTITLE: Defining Tag Response Fields using Custom HTML Component\nDESCRIPTION: This snippet defines the response fields for a tag object using a custom <ResponseField> component. It includes the id, name, and color fields, each with their type and required status.\nSOURCE: https://github.com/dubinc/docs/blob/main/snippets/tag-response.mdx#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<ResponseField name=\"id\" type=\"string\" required>\n  The unique ID of the tag.\n</ResponseField>\n\n<ResponseField name=\"name\" type=\"string\" required>\n  The name of the tag.\n</ResponseField>\n\n<ResponseField name=\"color\" type=\"string\" required>\n  The color of the tag.\n</ResponseField>\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specification for Bulk Link Creation Endpoint in YAML\nDESCRIPTION: This YAML snippet defines the OpenAPI specification for the POST /links/bulk endpoint of the Dub API. It includes metadata such as the API title and OpenGraph title for documentation purposes.\nSOURCE: https://github.com/dubinc/docs/blob/main/api-reference/endpoint/bulk-create-links.mdx#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: post /links/bulk\nog:title: \"Bulk create links with the Dub API - API Reference\"\n```\n\n----------------------------------------\n\nTITLE: Importing ViewConversions Component in JSX/MDX\nDESCRIPTION: Imports the ViewConversions component from the snippets directory to display conversion tracking data visualizations in the documentation.\nSOURCE: https://github.com/dubinc/docs/blob/main/snippets/leads-outro.mdx#2025-04-10_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ViewConversions from \"/snippets/view-conversions.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Sample Response from dub.domains.list in TypeScript\nDESCRIPTION: This example shows the structure of the response returned by the dub.domains.list method. It includes details such as domain ID, slug, verification status, and other properties for each domain.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/domains/list.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n[\n  {\n    id: \"clvcep2sn87jh8nf808x00005\",\n    slug: \"acme.com\",\n    verified: false,\n    primary: true,\n    archived: false,\n    placeholder: \"https://dub.co/help/article/what-is-dub\",\n    expiredUrl: \"https://acme.com/expired\",\n    target: \"https://acme.com/home\",\n    type: \"redirect\",\n    clicks: 0,\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Response Format for dub.links.deleteMany Method\nDESCRIPTION: The response from the dub.links.deleteMany method contains a deletedCount property indicating how many links were successfully deleted. Non-existing IDs are ignored in the count.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/typescript/links/delete-many.mdx#2025-04-10_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  deletedCount: 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Attribution Model in JSX\nDESCRIPTION: This snippet defines the 'attributionModel' parameter, which specifies the attribution model for analytics events. It explains the available options: first-click and last-click models.\nSOURCE: https://github.com/dubinc/docs/blob/main/snippets/dub-analytics-params-react.mdx#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ParamField\n  body=\"attributionModel\"\n  type=\"first-click | last-click\"\n  default=\"last-click\"\n>\n  The attribution model to use for the analytics event. The following\n  attribution models are available:\n\n- `first-click`: The first click model\n  gives all the credit to the first touchpoint in the customer journey.\n- `last-click`: The last click model gives all the credit to the last\n  touchpoint in the customer journey.\n\n</ParamField>\n```\n\n----------------------------------------\n\nTITLE: Rendering ViewConversions Component in MDX\nDESCRIPTION: Renders the imported ViewConversions component in the documentation page to display the three different conversion tracking views available in the dashboard.\nSOURCE: https://github.com/dubinc/docs/blob/main/snippets/leads-outro.mdx#2025-04-10_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ViewConversions />\n```\n\n----------------------------------------\n\nTITLE: Bulk Deleting Links with Dub API\nDESCRIPTION: This snippet demonstrates how to delete multiple links at once using Dub's API. It supports deleting up to 100 links in a single request. This is a destructive action that cannot be undone, and webhook events are not triggered for bulk deletions.\nSOURCE: https://github.com/dubinc/docs/blob/main/concepts/links/bulk-actions.mdx#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Dub } from \"dub\";\n\nexport const dub = new Dub({\n  token: process.env.DUB_API_KEY,\n});\n\nconst result = await dub.links.deleteMany({\n  linkIds: [\"clux0rgak00011...\", \"clux0rgak00022...\"],\n});\n```\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport(\n  \"context\"\n  dubgo \"github.com/dubinc/dub-go\"\n  \"github.com/dubinc/dub-go/models/operations\"\n  \"log\"\n  \"os\"\n)\n\nfunc main() {\n  ctx := context.Background()\n\n  s := dubgo.New(\n    dubgo.WithSecurity(os.Getenv(\"DUB_API_KEY\")),\n  )\n\n   res, err := s.Links.DeleteMany(ctx, operations.BulkDeleteLinksRequest{\n    LinkIds: []string{\n      \"clux0rgak00011...\",\n      \"clux0rgak00022...\",\n    },\n  })\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport dub\nfrom dub.models import operations\n\nd = dub.Dub(\n  token=os.environ['DUB_API_KEY'],\n)\n\n res = dub.links.delete_many(request={\n  \"link_ids\": [\n    \"clux0rgak00011...\",\n    \"clux0rgak00022...\",\n  ],\n})\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'dub'\n\ns = ::OpenApiSDK::Dub.new\ns.config_security(\n  ::OpenApiSDK::Shared::Security.new(\n    token: \"DUB_API_KEY\",\n  )\n)\n\nreq = ::OpenApiSDK::Operations::BulkDeleteLinksRequest.new(\n  link_ids: [\n    \"clux0rgak00011...\",\n    \"clux0rgak00022...\",\n  ],\n)\n\nres = s.links.delete_many(req)\n```\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse Dub;\nuse Dub\\Models\\Operations;\n\n$sdk = Dub\\Dub::builder()->setSecurity('DUB_API_KEY')->build();\n\n\n$response = $sdk->links->deleteMany(\n  linkIds: [\n    'clux0rgak00011...',\n    'clux0rgak00022...',\n  ]\n);\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request DELETE \\\n  --url https://api.dub.co/links/bulk?linkIds=clux0rgak00011... \\\n  --header 'Authorization: Bearer <token>' \\\n  --header 'Content-Type: application/json'\n```\n\n----------------------------------------\n\nTITLE: Starting Mintlify Development Server\nDESCRIPTION: Command to start the local development server for Mintlify documentation in the repository root.\nSOURCE: https://github.com/dubinc/docs/blob/main/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Outbound Domains Variant in React and HTML\nDESCRIPTION: Shows how to implement the outbound domains variant which supports cross-domain tracking by appending the dub_id cookie to all outbound links targeting the specified domains.\nSOURCE: https://github.com/dubinc/docs/blob/main/sdks/client-side/variants.mdx#2025-04-10_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// the DubAnalytics component automatically detects the `domainsConfig.outbound` prop\n// and applies the outbound-domains script variant for you\n<DubAnalytics domainsConfig={{ outbound: [\"example.com\", \"example.sh\"] }} />\n```\n\nLANGUAGE: html\nCODE:\n```\n<script\n  src=\"https://www.dubcdn.com/analytics/script.outbound-domains.js\"\n  data-domains='{\"outbound\": [\"example.com\", \"example.sh\"]}'\n/>\n```"
  }
]