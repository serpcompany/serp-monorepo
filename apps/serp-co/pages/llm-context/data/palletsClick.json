[
  {
    "owner": "pallets",
    "repo": "click",
    "content": "TITLE: Creating a Simple CLI with Click in Python\nDESCRIPTION: This example demonstrates how to create a basic command-line interface using Click. It defines a 'hello' command with options for count and name, showcasing Click's decorators and echo function.\nSOURCE: https://github.com/pallets/click/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport click\n\n@click.command()\n@click.option(\"--count\", default=1, help=\"Number of greetings.\")\n@click.option(\"--name\", prompt=\"Your name\", help=\"The person to greet.\")\ndef hello(count, name):\n    \"\"\"Simple program that greets NAME for a total of COUNT times.\"\"\"\n    for _ in range(count):\n        click.echo(f\"Hello, {name}!\")\n\nif __name__ == '__main__':\n    hello()\n```\n\n----------------------------------------\n\nTITLE: Adding Parameters to Click Commands\nDESCRIPTION: Demonstrates how to add options and arguments to a Click command using decorators. Includes a help message and default value for the option, and shows parameter usage within the function.\nSOURCE: https://github.com/pallets/click/blob/main/docs/quickstart.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\n@click.option('--count', default=1, help='number of greetings')\n@click.argument('name')\ndef hello(count, name):\n    for x in range(count):\n        click.echo(f\"Hello {name}!\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Loading Group for Click Commands\nDESCRIPTION: Defines a custom Group subclass that implements lazy loading of subcommands to improve performance for large CLIs.\nSOURCE: https://github.com/pallets/click/blob/main/docs/complex.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport importlib\nimport click\n\nclass LazyGroup(click.Group):\n    def __init__(self, *args, lazy_subcommands=None, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.lazy_subcommands = lazy_subcommands or {}\n\n    def list_commands(self, ctx):\n        base = super().list_commands(ctx)\n        lazy = sorted(self.lazy_subcommands.keys())\n        return base + lazy\n\n    def get_command(self, ctx, cmd_name):\n        if cmd_name in self.lazy_subcommands:\n            return self._lazy_load(cmd_name)\n        return super().get_command(ctx, cmd_name)\n```\n\n----------------------------------------\n\nTITLE: Creating a Group and Adding Commands Later\nDESCRIPTION: Shows how to create a Click command group and register previously defined commands with it. This approach supports modular command organization.\nSOURCE: https://github.com/pallets/click/blob/main/docs/quickstart.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@click.group()\ndef group():\n    pass\n\ngroup.add_command(greet)\n```\n\n----------------------------------------\n\nTITLE: Nested Click Groups Implementation\nDESCRIPTION: Shows how to implement nested command groups in Click with multiple levels of commands.\nSOURCE: https://github.com/pallets/click/blob/main/docs/commands-and-groups.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@click.group()\ndef cli():\n    pass\n\n@cli.group()\ndef session():\n    click.echo('Starting session')\n\n@session.command()\ndef initdb():\n    click.echo('Initialized the database')\n\n@session.command()\ndef dropdb():\n    click.echo('Dropped the database')\n```\n\n----------------------------------------\n\nTITLE: Running a Click Command from Main\nDESCRIPTION: Shows how to invoke a Click command when the script is run directly. This is the traditional way to execute Python scripts from the command line.\nSOURCE: https://github.com/pallets/click/blob/main/docs/quickstart.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == '__main__':\n    hello()\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Plugin Group in Click Python\nDESCRIPTION: This code implements a custom Group subclass that loads commands from Python files in a specified folder. Commands are lazily loaded to improve startup performance, effectively creating a plugin system.\nSOURCE: https://github.com/pallets/click/blob/main/docs/advanced.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport importlib.util\nimport os\nimport click\n\nclass PluginGroup(click.Group):\n    def __init__(self, name=None, plugin_folder=\"commands\", **kwargs):\n        super().__init__(name=name, **kwargs)\n        self.plugin_folder = plugin_folder\n\n    def list_commands(self, ctx):\n        rv = []\n\n        for filename in os.listdir(self.plugin_folder):\n            if filename.endswith(\".py\"):\n                rv.append(filename[:-3])\n\n        rv.sort()\n        return rv\n\n    def get_command(self, ctx, name):\n        path = os.path.join(self.plugin_folder, f\"{name}.py\")\n        spec = importlib.util.spec_from_file_location(name, path)\n        module = importlib.util.module_from_spec(spec)\n        spec.loader.exec_module(module)\n        return module.cli\n\ncli = PluginGroup(\n    plugin_folder=os.path.join(os.path.dirname(__file__), \"commands\")\n)\n\nif __name__ == \"__main__\":\n    cli()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Click Command\nDESCRIPTION: Demonstrates how to create a simple Click command by decorating a function with @click.command(). The command echoes 'Hello World!' to the console.\nSOURCE: https://github.com/pallets/click/blob/main/docs/quickstart.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport click\n\n@click.command()\ndef hello():\n    click.echo('Hello World!')\n```\n\n----------------------------------------\n\nTITLE: Click Group with Environment Variables\nDESCRIPTION: Demonstrates using environment variables with Click command groups and nested commands.\nSOURCE: https://github.com/pallets/click/blob/main/docs/commands-and-groups.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@click.group()\n@click.option('--debug/--no-debug')\ndef cli(debug):\n    click.echo(f\"Debug mode is {'on' if debug else 'off'}\")\n\n@cli.command()\n@click.option('--username')\ndef greet(username):\n    click.echo(f\"Hello {username}!\")\n\nif __name__ == '__main__':\n    cli(auto_envvar_prefix='GREETER')\n```\n\n----------------------------------------\n\nTITLE: Implementing Click CLI with Decorator Default Values\nDESCRIPTION: Shows how to configure default values using the context_settings parameter in the Click group decorator, providing an alternative to runtime configuration.\nSOURCE: https://github.com/pallets/click/blob/main/docs/commands.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport click\n\nCONTEXT_SETTINGS = dict(\n    default_map={'runserver': {'port': 5000}}\n)\n\n@click.group(context_settings=CONTEXT_SETTINGS)\ndef cli():\n    pass\n\n@cli.command()\n@click.option('--port', default=8000)\ndef runserver(port):\n    click.echo(f\"Serving on http://127.0.0.1:{port}/\")\n\nif __name__ == '__main__':\n    cli()\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Command Line Interface with Click in Python\nDESCRIPTION: This snippet demonstrates how to create a basic CLI program using Click. It defines a 'hello' command with options for count and name, then greets the user a specified number of times.\nSOURCE: https://github.com/pallets/click/blob/main/docs/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport click\n\n@click.command()\n@click.option('--count', default=1, help='Number of greetings.')\n@click.option('--name', prompt='Your name',\n              help='The person to greet.')\ndef hello(count, name):\n    \"\"\"Simple program that greets NAME for a total of COUNT times.\"\"\"\n    for x in range(count):\n        click.echo(f\"Hello {name}!\")\n\nif __name__ == '__main__':\n    hello()\n```\n\n----------------------------------------\n\nTITLE: Using echo Function in Python Click\nDESCRIPTION: Demonstrates how to use Click's echo function to print text to the console. The echo function works consistently across different terminal environments and supports both text and binary data output.\nSOURCE: https://github.com/pallets/click/blob/main/docs/utils.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport click\n\nclick.echo('Hello World!')\n```\n\n----------------------------------------\n\nTITLE: Basic Click Command Implementation in Python\nDESCRIPTION: Demonstrates creating a simple CLI command using Click's command decorator with an option parameter for count.\nSOURCE: https://github.com/pallets/click/blob/main/docs/commands-and-groups.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\n@click.option('--count', default=1)\ndef hello(count):\n    for x in range(count):\n        click.echo(\"Hello!\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Option Prompts in Click\nDESCRIPTION: Example of creating a Click command with a required name parameter that will prompt the user if not provided via command line arguments.\nSOURCE: https://github.com/pallets/click/blob/main/docs/prompts.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\n@click.option('--name', prompt=True)\ndef hello(name):\n    click.echo(f\"Hello {name}!\")\n```\n\n----------------------------------------\n\nTITLE: Defining Click Command with Options and Arguments in Python\nDESCRIPTION: This snippet demonstrates how to create a Click command with both an argument and an option. It defines a function 'multi_echo' that takes a filename argument and a 'times' option to print the filename multiple times.\nSOURCE: https://github.com/pallets/click/blob/main/docs/parameters.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\n@click.argument('filename')\n@click.option('-t', '--times', type=int)\ndef multi_echo(filename, times):\n    \"\"\"Print value filename multiple times.\"\"\"\n    for x in range(times):\n        click.echo(filename)\n```\n\n----------------------------------------\n\nTITLE: Defining Basic String Argument in Click (Python)\nDESCRIPTION: Demonstrates how to define a simple string argument in a Click command. The argument 'filename' is passed to the function and echoed.\nSOURCE: https://github.com/pallets/click/blob/main/docs/arguments.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\n@click.argument('filename')\ndef touch(filename):\n    \"\"\"Print FILENAME.\"\"\"\n    click.echo(filename)\n```\n\n----------------------------------------\n\nTITLE: Passing Context Between Commands in Click\nDESCRIPTION: Example showing how to use Context to share data between parent and child commands. The parent command stores a debug flag in the context object, which the child command can then access.\nSOURCE: https://github.com/pallets/click/blob/main/docs/commands.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@click.group()\n@click.option('--debug/--no-debug', default=False)\n@click.pass_context\ndef cli(ctx, debug):\n    # ensure that ctx.obj exists and is a dict (in case `cli()` is called\n    # by means other than the `if` block below)\n    ctx.ensure_object(dict)\n\n    ctx.obj['DEBUG'] = debug\n\n@cli.command()\n@click.pass_context\ndef sync(ctx):\n    click.echo(f\"Debug is {'on' if ctx.obj['DEBUG'] else 'off'}\")\n\nif __name__ == '__main__':\n    cli(obj={})\n```\n\n----------------------------------------\n\nTITLE: Invoking a Click Group from Main\nDESCRIPTION: Shows how to invoke a Click command group when the script is run directly, allowing the group to handle subcommand dispatching.\nSOURCE: https://github.com/pallets/click/blob/main/docs/quickstart.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == '__main__':\n    cli()\n```\n\n----------------------------------------\n\nTITLE: Creating Command Pipelines with Shared State in Click\nDESCRIPTION: Implementation of a command pipeline where each command can modify a shared state object that's passed between commands using the make_pass_decorator helper.\nSOURCE: https://github.com/pallets/click/blob/main/docs/commands.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npass_ns = click.make_pass_decorator(dict, ensure=True)\n\n@click.group(chain=True)\n@click.argument(\"name\")\n@pass_ns\ndef cli(ns, name):\n    ns[\"name\"] = name\n\n@cli.command\n@pass_ns\ndef lower(ns):\n    ns[\"name\"] = ns[\"name\"].lower()\n\n@cli.command\n@pass_ns\ndef show(ns):\n    click.echo(ns[\"name\"])\n```\n\n----------------------------------------\n\nTITLE: Creating a Click Command Group with Subcommands\nDESCRIPTION: Defines a Click command group with a debug option and a sync subcommand for demonstration purposes.\nSOURCE: https://github.com/pallets/click/blob/main/docs/testing.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport click\n\n@click.group()\n@click.option('--debug/--no-debug', default=False)\ndef cli(debug):\n   click.echo(f\"Debug mode is {'on' if debug else 'off'}\")\n\n@cli.command()\ndef sync():\n   click.echo('Syncing')\n```\n\n----------------------------------------\n\nTITLE: Defining a Standalone Click Command\nDESCRIPTION: Creates a standalone Click command that can be registered with a group later. This allows splitting commands across multiple modules.\nSOURCE: https://github.com/pallets/click/blob/main/docs/quickstart.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\ndef greet():\n    click.echo(\"Hello, World!\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Parameter Type in Click Python\nDESCRIPTION: Demonstrates how to create a custom parameter type by subclassing ParamType. Implements a base-aware integer type that handles hexadecimal and octal input.\nSOURCE: https://github.com/pallets/click/blob/main/docs/parameter-types.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport click\n\nclass BasedIntParamType(click.ParamType):\n    name = \"integer\"\n\n    def convert(self, value, param, ctx):\n        if isinstance(value, int):\n            return value\n\n        try:\n            if value[:2].lower() == \"0x\":\n                return int(value[2:], 16)\n            elif value[:1] == \"0\":\n                return int(value, 8)\n            return int(value, 10)\n        except ValueError:\n            self.fail(f\"{value!r} is not a valid integer\", param, ctx)\n\nBASED_INT = BasedIntParamType()\n```\n\n----------------------------------------\n\nTITLE: Click Command Group Implementation\nDESCRIPTION: Shows how to create a command group with a nested command using Click's group decorator.\nSOURCE: https://github.com/pallets/click/blob/main/docs/commands-and-groups.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@click.group()\ndef greeting():\n    click.echo('Starting greeting ...')\n\n@greeting.command('say-hello')\n@click.option('--count', default=1)\ndef hello(count):\n    for x in range(count):\n        click.echo(\"Hello!\")\n```\n\n----------------------------------------\n\nTITLE: Basic Click Option Declaration\nDESCRIPTION: Demonstrates the basic usage of Click option decorator with explicit argument naming.\nSOURCE: https://github.com/pallets/click/blob/main/docs/options.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\n@click.option('--string-to-echo', 'string_to_echo')\ndef echo(string_to_echo):\n    click.echo(string_to_echo)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Command Group with Debug Option in Click\nDESCRIPTION: A simple example showing how Click groups work with callbacks. The group has a debug option that will be displayed when a subcommand runs, demonstrating how the parent command's callback fires when subcommands are executed.\nSOURCE: https://github.com/pallets/click/blob/main/docs/commands.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@click.group()\n@click.option('--debug/--no-debug', default=False)\ndef cli(debug):\n    click.echo(f\"Debug mode is {'on' if debug else 'off'}\")\n\n@cli.command()  # @cli, not @click!\ndef sync():\n    click.echo('Syncing')\n```\n\n----------------------------------------\n\nTITLE: Boolean Flag Option\nDESCRIPTION: Example of implementing a boolean flag option.\nSOURCE: https://github.com/pallets/click/blob/main/docs/options.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\n@click.option('--shout', is_flag=True)\ndef info(shout):\n    rv = sys.platform\n    if shout:\n        rv = rv.upper() + '!!!!111'\n    click.echo(rv)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation Callbacks in Click Python\nDESCRIPTION: This example shows how to use parameter callbacks for custom validation. It validates and converts a dice roll notation (NdM format) where N is the number of rolls and M is the number of sides on the dice.\nSOURCE: https://github.com/pallets/click/blob/main/docs/advanced.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef validate_rolls(ctx, param, value):\n    if isinstance(value, tuple):\n        return value\n\n    try:\n        rolls, _, dice = value.partition(\"d\")\n        return int(dice), int(rolls)\n    except ValueError:\n        raise click.BadParameter(\"format must be 'NdM'\")\n\n@click.command()\n@click.option(\n    \"--rolls\", type=click.UNPROCESSED, callback=validate_rolls,\n    default=\"1d6\", prompt=True,\n)\ndef roll(rolls):\n    sides, times = rolls\n    click.echo(f\"Rolling a {sides}-sided dice {times} time(s)\")\n```\n\n----------------------------------------\n\nTITLE: Counting Options\nDESCRIPTION: Shows how to implement a counter option, commonly used for verbosity levels.\nSOURCE: https://github.com/pallets/click/blob/main/docs/options.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\n@click.option('-v', '--verbose', count=True)\ndef log(verbose):\n    click.echo(f\"Verbosity: {verbose}\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Confirmation Prompts for Dangerous Operations\nDESCRIPTION: Creates a confirmation prompt for potentially dangerous operations using a callback function that aborts if the user doesn't confirm. This pattern is useful for destructive commands.\nSOURCE: https://github.com/pallets/click/blob/main/docs/option-decorators.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef abort_if_false(ctx, param, value):\n    if not value:\n        ctx.abort()\n\n@click.command()\n@click.option('--yes', is_flag=True, callback=abort_if_false,\n              expose_value=False,\n              prompt='Are you sure you want to drop the db?')\ndef dropdb():\n    click.echo('Dropped all tables!')\n```\n\n----------------------------------------\n\nTITLE: Multi-Value Option\nDESCRIPTION: Shows how to create an option that accepts multiple values using nargs parameter.\nSOURCE: https://github.com/pallets/click/blob/main/docs/options.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\n@click.option('--pos', nargs=2, type=float)\ndef findme(pos):\n    a, b = pos\n    click.echo(f\"{a} / {b}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Commands with Click Groups\nDESCRIPTION: Demonstrates how to create a command group with multiple subcommands using the @click.group() decorator and explicitly adding commands with add_command().\nSOURCE: https://github.com/pallets/click/blob/main/docs/quickstart.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@click.group()\ndef cli():\n    pass\n\n@click.command()\ndef initdb():\n    click.echo('Initialized the database')\n\n@click.command()\ndef dropdb():\n    click.echo('Dropped the database')\n\ncli.add_command(initdb)\ncli.add_command(dropdb)\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Option\nDESCRIPTION: Demonstrates reading option values from environment variables.\nSOURCE: https://github.com/pallets/click/blob/main/docs/options.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\n@click.option('--username', envvar='USERNAME')\ndef greet(username):\n   click.echo(f\"Hello {username}!\")\n```\n\n----------------------------------------\n\nTITLE: Reading Configuration with Click\nDESCRIPTION: A Python snippet demonstrating how to read configuration from a file using Click's app directory functionality, parsing with ConfigParser, and returning configuration values as a dictionary.\nSOURCE: https://github.com/pallets/click/blob/main/docs/utils.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ncfg = os.path.join(click.get_app_dir(APP_NAME), 'config.ini')\nparser = ConfigParser.RawConfigParser()\nparser.read([cfg])\nrv = {}\nfor section in parser.sections():\n    for key, value in parser.items(section):\n        rv[f\"{section}.{key}\"] = value\nreturn rv\n```\n\n----------------------------------------\n\nTITLE: Manual Input Prompting with Type Validation\nDESCRIPTION: Example of manually prompting for user input with type validation to ensure the input is an integer.\nSOURCE: https://github.com/pallets/click/blob/main/docs/prompts.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nvalue = click.prompt('Please enter a valid integer', type=int)\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Commands with Decorator Syntax\nDESCRIPTION: Shows an alternative way to create nested commands using the group's command decorator directly, simplifying the command registration process.\nSOURCE: https://github.com/pallets/click/blob/main/docs/quickstart.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@click.group()\ndef cli():\n    pass\n\n@cli.command()\ndef initdb():\n    click.echo('Initialized the database')\n\n@cli.command()\ndef dropdb():\n    click.echo('Dropped the database')\n```\n\n----------------------------------------\n\nTITLE: Using File Arguments with Click (Python)\nDESCRIPTION: Demonstrates how to work with file arguments using Click's File type. It handles file input/output, including support for stdin/stdout.\nSOURCE: https://github.com/pallets/click/blob/main/docs/arguments.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\n@click.argument('input', type=click.File('rb'))\n@click.argument('output', type=click.File('wb'))\ndef inout(input, output):\n    \"\"\"Copy contents of INPUT to OUTPUT.\"\"\"\n    while True:\n        chunk = input.read(1024)\n        if not chunk:\n            break\n        output.write(chunk)\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Map in Click CLI\nDESCRIPTION: Demonstrates how to set up a nested default_map dictionary to configure default values for CLI commands and options. Shows default values for both top-level options and subcommands.\nSOURCE: https://github.com/pallets/click/blob/main/docs/commands.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndefault_map = {\n    \"debug\": True,  # default for a top level option\n    \"runserver\": {\"port\": 5000}  # default for a subcommand\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Command with Help Documentation in Python Click\nDESCRIPTION: Demonstrates a simple Click command with an argument and option, showing how docstrings are automatically used for help text generation. The help parameter provides context for the option.\nSOURCE: https://github.com/pallets/click/blob/main/docs/documentation.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\n@click.argument('name')\n@click.option('--count', default=1, help='number of greetings')\ndef hello(name: str, count: int):\n    \"\"\"This script prints hello and a name one or more times.\"\"\"\n    for x in range(count):\n        if name:\n            click.echo(f\"Hello {name}!\")\n        else:\n            click.echo(\"Hello!\")\n```\n\n----------------------------------------\n\nTITLE: Testing a Basic Click Command\nDESCRIPTION: Demonstrates how to test a basic Click command using the CliRunner to invoke the command and verify its output.\nSOURCE: https://github.com/pallets/click/blob/main/docs/testing.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom click.testing import CliRunner\nfrom hello import hello\n\ndef test_hello_world():\n  runner = CliRunner()\n  result = runner.invoke(hello, ['Peter'])\n  assert result.exit_code == 0\n  assert result.output == 'Hello Peter!\\n'\n```\n\n----------------------------------------\n\nTITLE: Implementing Choice Parameter Type in Click Python\nDESCRIPTION: Demonstrates using Click's Choice type with an Enum to validate command line arguments. Shows how to create a hash type selector with case-insensitive matching.\nSOURCE: https://github.com/pallets/click/blob/main/docs/parameter-types.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport enum\n\nclass HashType(enum.Enum):\n    MD5 = 'MD5'\n    SHA1 = 'SHA1'\n\n@click.command()\n@click.option('--hash-type',\n              type=click.Choice(HashType, case_sensitive=False))\ndef digest(hash_type: HashType):\n    click.echo(hash_type)\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Chaining in Click\nDESCRIPTION: Example of command chaining where multiple subcommands can be invoked in a single command line. This is created by setting chain=True when defining a command group.\nSOURCE: https://github.com/pallets/click/blob/main/docs/commands.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@click.group(chain=True)\ndef cli():\n    pass\n\n@cli.command('validate')\ndef validate():\n    click.echo('validate')\n\n@cli.command('build')\ndef build():\n    click.echo('build')\n```\n\n----------------------------------------\n\nTITLE: Styling Text with ANSI Colors in Click\nDESCRIPTION: Shows how to use Click's style function to apply colors and formatting to text output. The examples demonstrate foreground colors, background colors, and text effects like bold and blink.\nSOURCE: https://github.com/pallets/click/blob/main/docs/utils.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport click\n\nclick.echo(click.style('Hello World!', fg='green'))\nclick.echo(click.style('Some more text', bg='blue', fg='white'))\nclick.echo(click.style('ATTENTION', blink=True, bold=True))\n```\n\n----------------------------------------\n\nTITLE: Option with Default Value\nDESCRIPTION: Demonstrates setting a default value for a Click option, which also infers the type.\nSOURCE: https://github.com/pallets/click/blob/main/docs/options.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\n@click.option('--n', default=1)\ndef dots(n):\n    click.echo('.' * n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Root CLI Command with Repository Context\nDESCRIPTION: Creates a root CLI command group that initializes a repository context object with home directory and debug settings. Uses environment variables and command options for configuration.\nSOURCE: https://github.com/pallets/click/blob/main/docs/complex.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport click\n\nclass Repo(object):\n    def __init__(self, home=None, debug=False):\n        self.home = os.path.abspath(home or '.')\n        self.debug = debug\n\n@click.group()\n@click.option('--repo-home', envvar='REPO_HOME', default='.repo')\n@click.option('--debug/--no-debug', default=False,\n              envvar='REPO_DEBUG')\n@click.pass_context\ndef cli(ctx, repo_home, debug):\n    ctx.obj = Repo(repo_home, debug)\n```\n\n----------------------------------------\n\nTITLE: Building Function-Based Command Pipelines in Click\nDESCRIPTION: Advanced implementation of a command pipeline where each command returns a function that processes data. The result_callback collects and applies these functions in sequence to process a stream of data.\nSOURCE: https://github.com/pallets/click/blob/main/docs/commands.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@click.group(chain=True, invoke_without_command=True)\n@click.argument(\"fin\", type=click.File(\"r\"))\ndef cli(fin):\n    pass\n\n@cli.result_callback()\ndef process_pipeline(processors, fin):\n    iterator = (x.rstrip(\"\\r\\n\") for x in input)\n\n    for processor in processors:\n        iterator = processor(iterator)\n\n    for item in iterator:\n        click.echo(item)\n\n@cli.command(\"upper\")\ndef make_uppercase():\n    def processor(iterator):\n        for line in iterator:\n            yield line.upper()\n    return processor\n\n@cli.command(\"lower\")\ndef make_lowercase():\n    def processor(iterator):\n        for line in iterator:\n            yield line.lower()\n    return processor\n\n@cli.command(\"strip\")\ndef make_strip():\n    def processor(iterator):\n        for line in iterator:\n            yield line.strip()\n    return processor\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Click Progress Bar\nDESCRIPTION: Example showing how to convert a basic loop to use Click's progress bar functionality, which automatically displays progress and calculates remaining time.\nSOURCE: https://github.com/pallets/click/blob/main/docs/utils.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport click\n\nwith click.progressbar(all_the_users_to_process) as bar:\n    for user in bar:\n        modify_the_user(user)\n```\n\n----------------------------------------\n\nTITLE: Testing Click Command Groups with Subcommands\nDESCRIPTION: Shows how to test a Click command group with subcommands by specifying the subcommand name in the invoke arguments.\nSOURCE: https://github.com/pallets/click/blob/main/docs/testing.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom click.testing import CliRunner\nfrom sync import cli\n\ndef test_sync():\n  runner = CliRunner()\n  result = runner.invoke(cli, ['--debug', 'sync'])\n  assert result.exit_code == 0\n  assert 'Debug mode is on' in result.output\n  assert 'Syncing' in result.output\n```\n\n----------------------------------------\n\nTITLE: Multiple Commands in Click Group\nDESCRIPTION: Demonstrates implementing multiple commands within a Click group with separate parameters.\nSOURCE: https://github.com/pallets/click/blob/main/docs/commands-and-groups.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@click.group()\ndef greeting():\n    pass\n\n@greeting.command()\n@click.option('--count', default=1)\ndef hello(count):\n    for x in range(count):\n        click.echo(\"Hello!\")\n\n@greeting.command()\n@click.option('--count', default=1)\ndef goodbye(count):\n    for x in range(count):\n        click.echo(\"Goodbye!\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Standard Streams in Click\nDESCRIPTION: Demonstrates how to get consistent access to standard input and output streams across different Python versions and terminal configurations using Click's stream helper functions.\nSOURCE: https://github.com/pallets/click/blob/main/docs/utils.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport click\n\nstdin_text = click.get_text_stream('stdin')\nstdout_binary = click.get_binary_stream('stdout')\n```\n\n----------------------------------------\n\nTITLE: Confirmation Prompts with Automatic Abort\nDESCRIPTION: Example of a confirmation prompt that automatically aborts program execution if the user does not confirm.\nSOURCE: https://github.com/pallets/click/blob/main/docs/prompts.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclick.confirm('Do you want to continue?', abort=True)\n```\n\n----------------------------------------\n\nTITLE: Manually Updating Click Progress Bar\nDESCRIPTION: Example demonstrating how to manually update a Click progress bar when working with external iterators or when progress needs to be advanced irregularly.\nSOURCE: https://github.com/pallets/click/blob/main/docs/utils.rst#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nwith click.progressbar(length=total_size,\n                       label='Unzipping archive') as bar:\n    for archive in zip_file:\n        archive.extract()\n        bar.update(archive.size)\n```\n\n----------------------------------------\n\nTITLE: Implementing Version Flag with Callbacks in Click Python\nDESCRIPTION: This snippet demonstrates how to create a --version flag using callbacks and eager parameters. The callback function prints the version and exits the application when the flag is used, with special handling for resilient parsing.\nSOURCE: https://github.com/pallets/click/blob/main/docs/advanced.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef print_version(ctx, param, value):\n    if not value or ctx.resilient_parsing:\n        return\n    click.echo('Version 1.0')\n    ctx.exit()\n\n@click.command()\n@click.option('--version', is_flag=True, callback=print_version,\n              expose_value=False, is_eager=True)\ndef hello():\n    click.echo('Hello World!')\n```\n\n----------------------------------------\n\nTITLE: Command Invocation and Forwarding in Click\nDESCRIPTION: Example demonstrating how to use Context.invoke and Context.forward to call one Click command from another. Shows the difference between invoking with specific arguments and forwarding current arguments.\nSOURCE: https://github.com/pallets/click/blob/main/docs/advanced.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ncli = click.Group()\n\n@cli.command()\n@click.option('--count', default=1)\ndef test(count):\n    click.echo(f'Count: {count}')\n\n@cli.command()\n@click.option('--count', default=1)\n@click.pass_context\ndef dist(ctx, count):\n    ctx.forward(test)\n    ctx.invoke(test, count=42)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Parameter Type with Shell Completion\nDESCRIPTION: Demonstrates how to create a custom ParamType in Click that provides shell completion for environment variables that match a prefix. It overrides the shell_complete method to return CompletionItem objects.\nSOURCE: https://github.com/pallets/click/blob/main/docs/shell-completion.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass EnvVarType(ParamType):\n    name = \"envvar\"\n\n    def shell_complete(self, ctx, param, incomplete):\n        return [\n            CompletionItem(name)\n            for name in os.environ if name.startswith(incomplete)\n        ]\n\n@click.command()\n@click.option(\"--ev\", type=EnvVarType())\ndef cli(ev):\n    click.echo(os.environ[ev])\n```\n\n----------------------------------------\n\nTITLE: Click Progress Bar with Time Delay Demonstration\nDESCRIPTION: A complete example showing how the progress bar updates after each iteration, with artificial delays to demonstrate the behavior visually.\nSOURCE: https://github.com/pallets/click/blob/main/docs/utils.rst#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\nwith click.progressbar([1, 2, 3]) as bar:\n    for x in bar:\n        print(f\"sleep({x})...\")\n        time.sleep(x)\n```\n\n----------------------------------------\n\nTITLE: Handling Variadic Arguments in Click (Python)\nDESCRIPTION: Shows how to use variadic arguments in Click. The 'src' argument accepts multiple inputs (nargs=-1), while 'dst' accepts only one (nargs=1).\nSOURCE: https://github.com/pallets/click/blob/main/docs/arguments.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\n@click.argument('src', nargs=-1)\n@click.argument('dst', nargs=1)\ndef copy(src, dst):\n    \"\"\"Move file SRC to DST.\"\"\"\n    for fn in src:\n        click.echo(f\"move {fn} to folder {dst}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Optional Prompts with Flag-Based Activation\nDESCRIPTION: Example of configuring an option to only prompt for input when the flag is explicitly provided, making the prompt optional with a default value.\nSOURCE: https://github.com/pallets/click/blob/main/docs/prompts.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\n@click.option('--name', prompt=True, prompt_required=False, default=\"Default\")\ndef hello(name):\n    click.echo(f\"Hello {name}!\")\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables for Arguments in Click (Python)\nDESCRIPTION: Demonstrates how to use environment variables to provide values for arguments in Click. The 'src' argument can be set using the 'SRC' environment variable.\nSOURCE: https://github.com/pallets/click/blob/main/docs/arguments.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\n@click.argument('src', envvar='SRC', type=click.File('r'))\ndef echo(src):\n    \"\"\"Print value of SRC environment variable.\"\"\"\n    click.echo(src.read())\n```\n\n----------------------------------------\n\nTITLE: Custom Named Click Command in Python\nDESCRIPTION: Shows how to create a Click command with a custom name 'say-hello' instead of using the function name.\nSOURCE: https://github.com/pallets/click/blob/main/docs/commands-and-groups.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@click.command('say-hello')\n@click.option('--count', default=1)\ndef hello(count):\n    for x in range(count):\n        click.echo(\"Hello!\")\n```\n\n----------------------------------------\n\nTITLE: Implementing IntRange Parameter Type in Click Python\nDESCRIPTION: Shows how to use Click's IntRange type to validate numeric input within specified bounds. Includes example of clamping values to the valid range.\nSOURCE: https://github.com/pallets/click/blob/main/docs/parameter-types.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\n@click.option(\"--count\", type=click.IntRange(0, 20, clamp=True))\n@click.option(\"--digit\", type=click.IntRange(0, 9))\ndef repeat(count, digit):\n    click.echo(str(digit) * count)\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Input with Click Options\nDESCRIPTION: Demonstrates how to create a password input prompt that hides the typed characters and requires confirmation. This example shows how to encode the password using the rot13 algorithm.\nSOURCE: https://github.com/pallets/click/blob/main/docs/option-decorators.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport codecs\n\n@click.command()\n@click.option(\n    \"--password\", prompt=True, hide_input=True,\n    confirmation_prompt=True\n)\ndef encode(password):\n    click.echo(f\"encoded: {codecs.encode(password, 'rot13')}\")\n```\n\n----------------------------------------\n\nTITLE: Handling File Path Arguments in Click (Python)\nDESCRIPTION: Shows how to use Click's Path type for file path arguments. It includes existence checking and proper filename formatting.\nSOURCE: https://github.com/pallets/click/blob/main/docs/arguments.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\n@click.argument('filename', type=click.Path(exists=True))\ndef touch(filename):\n    \"\"\"Print FILENAME if the file exists.\"\"\"\n    click.echo(click.format_filename(filename))\n```\n\n----------------------------------------\n\nTITLE: Using Click's confirmation_option Decorator\nDESCRIPTION: Demonstrates the simplified confirmation_option decorator that replaces the verbose option configuration. This shortcut handles the confirmation prompt and abort logic for dangerous operations.\nSOURCE: https://github.com/pallets/click/blob/main/docs/option-decorators.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\n@click.confirmation_option(prompt='Are you sure you want to drop the db?')\ndef dropdb():\n    click.echo('Dropped all tables!')\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Command Decorators in Click\nDESCRIPTION: Implementation of a custom decorator that passes the context object to a command. This example shows how to use Context.invoke to properly call functions with the right number of arguments depending on their decoration.\nSOURCE: https://github.com/pallets/click/blob/main/docs/commands.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import update_wrapper\n\ndef pass_obj(f):\n    @click.pass_context\n    def new_func(ctx, *args, **kwargs):\n        return ctx.invoke(f, ctx.obj, *args, **kwargs)\n    return update_wrapper(new_func, f)\n```\n\n----------------------------------------\n\nTITLE: Creating a Click Command with Optional Flag Values\nDESCRIPTION: Defines a command that has an option with an optional value. When the option is provided without a value, it uses a predefined flag_value; otherwise it uses the provided value or default.\nSOURCE: https://github.com/pallets/click/blob/main/docs/options.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\n@click.option(\"--name\", is_flag=False, flag_value=\"Flag\", default=\"Default\")\ndef hello(name):\n    click.echo(f\"Hello, {name}!\")\n```\n\n----------------------------------------\n\nTITLE: Using Click's password_option Decorator\nDESCRIPTION: Shows the simplified password_option decorator that replaces the more verbose option configuration for password input. This decorator handles prompting, hiding input, and confirmation.\nSOURCE: https://github.com/pallets/click/blob/main/docs/option-decorators.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\n@click.password_option()\ndef encrypt(password):\n    click.echo(f\"encoded: to {codecs.encode(password, 'rot13')}\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Click CLI with Runtime Default Values\nDESCRIPTION: Example of implementing a Click CLI application with a runserver command that accepts default values provided at runtime through default_map parameter.\nSOURCE: https://github.com/pallets/click/blob/main/docs/commands.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport click\n\n@click.group()\ndef cli():\n    pass\n\n@cli.command()\n@click.option('--port', default=8000)\ndef runserver(port):\n    click.echo(f\"Serving on http://127.0.0.1:{port}/\")\n\nif __name__ == '__main__':\n    cli(default_map={\n        'runserver': {\n            'port': 5000\n        }\n    })\n```\n\n----------------------------------------\n\nTITLE: Intelligent File Opening in Click\nDESCRIPTION: Shows how to use Click's open_file function to handle files, including special cases like stdin and stdout, with proper context manager support.\nSOURCE: https://github.com/pallets/click/blob/main/docs/utils.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport click\n\nstdout = click.open_file('-', 'w')\ntest_file = click.open_file('test.txt', 'w')\n```\n\n----------------------------------------\n\nTITLE: Customizing Command Short Help in Click Group Commands\nDESCRIPTION: Shows how to override the default short help text for a subcommand using the short_help parameter. By default, Click uses the first sentence of the docstring as short help.\nSOURCE: https://github.com/pallets/click/blob/main/docs/documentation.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@click.group()\ndef cli():\n    \"\"\"A simple command line tool.\"\"\"\n\n@cli.command('init', short_help='init the repo')\ndef init():\n    \"\"\"Initializes the repository.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Using Click Progress Bar with Specified Length\nDESCRIPTION: Example demonstrating how to use Click's progress bar with an explicitly provided length when the iterable doesn't have a length property.\nSOURCE: https://github.com/pallets/click/blob/main/docs/utils.rst#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nwith click.progressbar(all_the_users_to_process,\n                       length=number_of_users) as bar:\n    for user in bar:\n        modify_the_user(user)\n```\n\n----------------------------------------\n\nTITLE: Implementing Clone Command with Context Passing\nDESCRIPTION: Demonstrates two approaches to implementing a clone command - one using pass_context and another using pass_obj to access the repository object.\nSOURCE: https://github.com/pallets/click/blob/main/docs/complex.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@cli.command()\n@click.argument('src')\n@click.argument('dest', required=False)\n@click.pass_obj\ndef clone(repo, src, dest):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Using secho for Styled Text Output in Click\nDESCRIPTION: Demonstrates the secho function, which combines echo and style functionality for more concise code when outputting styled text.\nSOURCE: https://github.com/pallets/click/blob/main/docs/utils.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclick.secho('Hello World!', fg='green')\nclick.secho('Some more text', bg='blue', fg='white')\nclick.secho('ATTENTION', blink=True, bold=True)\n```\n\n----------------------------------------\n\nTITLE: Using Click Echo for Windows Console Output\nDESCRIPTION: Demonstrates the recommended way to output text in Click applications on Windows. Using click.echo ensures proper Unicode handling and avoids print-related issues.\nSOURCE: https://github.com/pallets/click/blob/main/docs/wincmd.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclick.echo(\"your_text\")  # Preferred over print()\n```\n\n----------------------------------------\n\nTITLE: User Confirmation Prompts in Click\nDESCRIPTION: Example of using Click's confirm function to ask for user confirmation before proceeding with an action, returning a boolean result.\nSOURCE: https://github.com/pallets/click/blob/main/docs/prompts.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nif click.confirm('Do you want to continue?'):\n    click.echo('Well done!')\n```\n\n----------------------------------------\n\nTITLE: Token Normalization for Case Insensitivity in Click Python\nDESCRIPTION: This example demonstrates token normalization in Click, which can be used to implement case-insensitive options. It uses a context setting that converts all tokens to lowercase.\nSOURCE: https://github.com/pallets/click/blob/main/docs/advanced.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nCONTEXT_SETTINGS = dict(token_normalize_func=lambda x: x.lower())\n\n@click.command(context_settings=CONTEXT_SETTINGS)\n@click.option('--name', default='Pete')\ndef cli(name):\n    click.echo(f\"Name: {name}\")\n```\n\n----------------------------------------\n\nTITLE: Using echo with Binary Data and Newline Control\nDESCRIPTION: Shows how to output binary data with Click's echo function while suppressing the default trailing newline using the nl parameter.\nSOURCE: https://github.com/pallets/click/blob/main/docs/utils.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclick.echo(b'\\xe2\\x98\\x83', nl=False)\n```\n\n----------------------------------------\n\nTITLE: Forwarding Unknown Options in Click Command\nDESCRIPTION: Creates a wrapper around Python's timeit command that handles its own options while forwarding unknown options to the wrapped command. Uses context settings to configure option handling behavior.\nSOURCE: https://github.com/pallets/click/blob/main/docs/advanced.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nfrom subprocess import call\n\n@click.command(context_settings=dict(\n    ignore_unknown_options=True,\n))\n@click.option('-v', '--verbose', is_flag=True, help='Enables verbose mode')\n@click.argument('timeit_args', nargs=-1, type=click.UNPROCESSED)\ndef cli(verbose, timeit_args):\n    \"\"\"A fake wrapper around Python's timeit.\"\"\"\n    cmdline = ['echo', 'python', '-mtimeit'] + list(timeit_args)\n    if verbose:\n        click.echo(f\"Invoking: {' '.join(cmdline)}\")\n    call(cmdline)\n```\n\n----------------------------------------\n\nTITLE: Using Pager for Long Text Output in Click\nDESCRIPTION: Shows how to use echo_via_pager to display long text content with scrolling capability. The example creates a command that outputs a large number of lines through a pager.\nSOURCE: https://github.com/pallets/click/blob/main/docs/utils.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\ndef less():\n    click.echo_via_pager(\"\\n\".join(f\"Line {idx}\" for idx in range(200)))\n```\n\n----------------------------------------\n\nTITLE: Testing Click Commands with Input Streams\nDESCRIPTION: Shows how to test prompts by providing input data to the CliRunner.invoke method's input parameter.\nSOURCE: https://github.com/pallets/click/blob/main/docs/testing.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom click.testing import CliRunner\nfrom prompt import prompt\n\ndef test_prompts():\n   runner = CliRunner()\n   result = runner.invoke(prompt, input='wau wau\\n')\n   assert not result.exception\n   assert result.output == 'Foo: wau wau\\nfoo=wau wau\\n'\n```\n\n----------------------------------------\n\nTITLE: Customizing Prompt Text in Click Options\nDESCRIPTION: Example of customizing the prompt message displayed to the user when requesting input for a required option parameter.\nSOURCE: https://github.com/pallets/click/blob/main/docs/prompts.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\n@click.option('--name', prompt='Your name please')\ndef hello(name):\n    click.echo(f\"Hello {name}!\")\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Pass Decorator for Repository Access\nDESCRIPTION: Shows how to create and use a custom decorator that finds repository objects in the context chain, with optional automatic object creation.\nSOURCE: https://github.com/pallets/click/blob/main/docs/complex.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npass_repo = click.make_pass_decorator(Repo)\n\n@cli.command()\n@click.argument('src')\n@click.argument('dest', required=False)\n@pass_repo\ndef clone(repo, src, dest):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Using Pager with Generator Function in Click\nDESCRIPTION: Demonstrates using echo_via_pager with a generator function to efficiently handle very large outputs without generating all content in advance.\nSOURCE: https://github.com/pallets/click/blob/main/docs/utils.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef _generate_output():\n    for idx in range(50000):\n        yield f\"Line {idx}\\n\"\n\n@click.command()\ndef less():\n    click.echo_via_pager(_generate_output())\n```\n\n----------------------------------------\n\nTITLE: Launching Text Editor for Multi-line Input in Click\nDESCRIPTION: Demonstrates how to use Click's edit function to open the user's default text editor for multi-line input, with a marker to define which part of the text to keep.\nSOURCE: https://github.com/pallets/click/blob/main/docs/utils.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport click\n\ndef get_commit_message():\n    MARKER = '# Everything below is ignored\\n'\n    message = click.edit('\\n\\n' + MARKER)\n    if message is not None:\n        return message.split(MARKER, 1)[0].rstrip('\\n')\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Aliases in Click Python\nDESCRIPTION: This code creates a custom Group subclass that supports command aliases by accepting command name prefixes. It allows users to type shortened versions of commands as long as they are unique.\nSOURCE: https://github.com/pallets/click/blob/main/docs/advanced.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass AliasedGroup(click.Group):\n    def get_command(self, ctx, cmd_name):\n        rv = super().get_command(ctx, cmd_name)\n\n        if rv is not None:\n            return rv\n\n        matches = [\n            x for x in self.list_commands(ctx)\n            if x.startswith(cmd_name)\n        ]\n\n        if not matches:\n            return None\n\n        if len(matches) == 1:\n            return click.Group.get_command(self, ctx, matches[0])\n\n        ctx.fail(f\"Too many matches: {', '.join(sorted(matches))}\")\n\n    def resolve_command(self, ctx, args):\n        # always return the full command name\n        _, cmd, args = super().resolve_command(ctx, args)\n        return cmd.name, cmd, args\n```\n\n----------------------------------------\n\nTITLE: Launching Applications with Click\nDESCRIPTION: Demonstrates Click's launch function for opening URLs in the default web browser or files with their associated applications. The locate parameter can open the file manager with the file selected.\nSOURCE: https://github.com/pallets/click/blob/main/docs/utils.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclick.launch(\"https://click.palletsprojects.com/\")\nclick.launch(\"/my/downloaded/file.txt\", locate=True)\n```\n\n----------------------------------------\n\nTITLE: Testing with Isolated Filesystem\nDESCRIPTION: Shows how to test file operations using CliRunner's isolated_filesystem context manager to create a temporary test environment.\nSOURCE: https://github.com/pallets/click/blob/main/docs/testing.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom click.testing import CliRunner\nfrom cat import cat\n\ndef test_cat():\n   runner = CliRunner()\n   with runner.isolated_filesystem():\n      with open('hello.txt', 'w') as f:\n          f.write('Hello World!')\n\n      result = runner.invoke(cat, ['hello.txt'])\n      assert result.exit_code == 0\n      assert result.output == 'Hello World!\\n'\n```\n\n----------------------------------------\n\nTITLE: Correct Stream Redirection in Python\nDESCRIPTION: Demonstrates the proper way to redirect standard input/output streams using binary streams wrapped in TextIOWrapper for Unicode support.\nSOURCE: https://github.com/pallets/click/blob/main/docs/unicode-support.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ninput = 'Input here'\nin_stream = io.BytesIO(input.encode('utf-8'))\nsys.stdin = io.TextIOWrapper(in_stream, encoding='utf-8')\nout_stream = io.BytesIO()\nsys.stdout = io.TextIOWrapper(out_stream, encoding='utf-8')\n```\n\n----------------------------------------\n\nTITLE: Using Aliased Group with Commands in Click Python\nDESCRIPTION: This example demonstrates how to use the AliasedGroup class to create a command group with support for command aliases. It defines two commands that can be called with shortened names.\nSOURCE: https://github.com/pallets/click/blob/main/docs/advanced.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@click.group(cls=AliasedGroup)\ndef cli():\n    pass\n\n@cli.command\ndef push():\n    pass\n\n@cli.command\ndef pop():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Using Context.with_resource for Click Command Groups\nDESCRIPTION: Demonstrates the proper way to manage resources across Click command groups by using the Context.with_resource method. The resource will be cleaned up after all commands finish.\nSOURCE: https://github.com/pallets/click/blob/main/docs/advanced.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n@click.group()\n@click.option(\"--repo-home\", default=\".repo\")\n@click.pass_context\ndef cli(ctx, repo_home):\n    ctx.obj = ctx.with_resource(Repo(repo_home))\n\n@cli.command()\n@click.pass_obj\ndef log(obj):\n    # obj is the repo opened in the cli group\n    for entry in obj.db.query(...):\n        click.echo(entry)\n```\n\n----------------------------------------\n\nTITLE: Command Object Import Logic in Python\nDESCRIPTION: Core logic for importing and validating a Click command object lazily. Handles importing the module, retrieving the command object, and validating it is a proper Click Command instance.\nSOURCE: https://github.com/pallets/click/blob/main/docs/complex.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmodname, cmd_object_name = import_path.rsplit(\".\", 1)\n# do the import\nmod = importlib.import_module(modname)\n# get the Command object from that module\ncmd_object = getattr(mod, cmd_object_name)\n# check the result to make debugging easier\nif not isinstance(cmd_object, click.Command):\n    raise ValueError(\n        f\"Lazy loading of {import_path} failed by returning \"\n        \"a non-command object\"\n    )\nreturn cmd_object\n```\n\n----------------------------------------\n\nTITLE: User Input Handling with Click Prompt\nDESCRIPTION: Demonstrates the proper way to handle user input in Click applications on Windows using click.prompt for Unicode-aware input processing.\nSOURCE: https://github.com/pallets/click/blob/main/docs/wincmd.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclick.prompt(\"Enter text\")\n```\n\n----------------------------------------\n\nTITLE: Parameter Modification with Callbacks in Click Python\nDESCRIPTION: This example shows how to modify parameters using callbacks in Click. The callback opens a URL and adds a file pointer to the context's params dictionary, making it available to the command function.\nSOURCE: https://github.com/pallets/click/blob/main/docs/advanced.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport urllib\n\ndef open_url(ctx, param, value):\n    if value is not None:\n        ctx.params['fp'] = urllib.urlopen(value)\n        return value\n\n@click.command()\n@click.option('--url', callback=open_url)\ndef cli(url, fp=None):\n    if fp is not None:\n        click.echo(f\"{url}: {fp.code}\")\n```\n\n----------------------------------------\n\nTITLE: Getting Text Stream in Click Windows Applications\nDESCRIPTION: Shows how to properly obtain text streams for input/output operations in Click applications on Windows using click.get_text_stream().\nSOURCE: https://github.com/pallets/click/blob/main/docs/wincmd.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclick.get_text_stream(\"stdout\")\n```\n\n----------------------------------------\n\nTITLE: Dynamic Default Values from Environment Variables\nDESCRIPTION: Example of using a callable as the default value to dynamically fetch values from environment variables while still allowing for interactive prompting.\nSOURCE: https://github.com/pallets/click/blob/main/docs/prompts.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\n@click.command()\n@click.option(\n    \"--username\", prompt=True,\n    default=lambda: os.environ.get(\"USER\", \"\")\n)\ndef hello(username):\n    click.echo(f\"Hello, {username}!\")\n```\n\n----------------------------------------\n\nTITLE: Using open_file with Context Manager in Click\nDESCRIPTION: Demonstrates the recommended way to use open_file with a context manager, which properly handles file resources even for special files like stdout.\nSOURCE: https://github.com/pallets/click/blob/main/docs/utils.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nwith click.open_file(filename, 'w') as f:\n    f.write('Hello World!\\n')\n```\n\n----------------------------------------\n\nTITLE: Parameter Modification with Object Wrappers in Click Python\nDESCRIPTION: This example shows a more recommended approach to parameter modification in Click using object wrappers. It creates a URL class that encapsulates both the URL string and the file pointer.\nSOURCE: https://github.com/pallets/click/blob/main/docs/advanced.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport urllib\n\nclass URL(object):\n\n    def __init__(self, url, fp):\n        self.url = url\n        self.fp = fp\n\ndef open_url(ctx, param, value):\n    if value is not None:\n        return URL(value, urllib.urlopen(value))\n\n@click.command()\n@click.option('--url', callback=open_url)\ndef cli(url):\n    if url is not None:\n        click.echo(f\"{url.url}: {url.fp.code}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Epilog Help to Click Commands\nDESCRIPTION: Demonstrates how to add an epilog to a command's help output, which is useful for showing example usages or referencing additional documentation resources.\nSOURCE: https://github.com/pallets/click/blob/main/docs/documentation.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@click.command(\n\tepilog='See https://example.com for more details',\n  )\ndef init():\n    \"\"\"Initializes the repository.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Shell Support with ShellComplete Class\nDESCRIPTION: Demonstrates how to add support for a new shell by subclassing ShellComplete and defining a source template for the completion script. This is used to integrate Click's completion with the shell's completion system.\nSOURCE: https://github.com/pallets/click/blob/main/docs/shell-completion.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom click.shell_completion import add_completion_class\nfrom click.shell_completion import ShellComplete\n\n_mysh_source = \"\"\"\\\n%(complete_func)s {\n    response=$(%(complete_var)s=mysh_complete %(foo_bar)s)\n    # parse response and set completions somehow\n}\ncall-on-complete %(foo_bar)s %(complete_func)s\n\"\"\"\n\n@add_completion_class\nclass MyshComplete(ShellComplete):\n    name = \"mysh\"\n    source_template = _mysh_source\n```\n\n----------------------------------------\n\nTITLE: Accessing CLI Structure in Python\nDESCRIPTION: Demonstrates how to access the structure of an entire CLI using the Context object's to_info_dict() method. This can be useful for generating user-facing documentation.\nSOURCE: https://github.com/pallets/click/blob/main/CHANGES.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nContext(cli).to_info_dict()\n```\n\n----------------------------------------\n\nTITLE: Auto Environment Variables in Click\nDESCRIPTION: Shows how to implement automatic environment variable support in Click commands.\nSOURCE: https://github.com/pallets/click/blob/main/docs/commands-and-groups.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\n@click.option('--username')\ndef greet(username):\n    click.echo(f'Hello {username}!')\n\nif __name__ == '__main__':\n    greet(auto_envvar_prefix='GREETER')\n```\n\n----------------------------------------\n\nTITLE: Controlling Default Value Display in Click Options\nDESCRIPTION: Shows how to control the visibility of default values in help text using the show_default parameter, which can be set to False to hide defaults.\nSOURCE: https://github.com/pallets/click/blob/main/docs/documentation.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\n@click.option('--n', default=1, show_default=False, help='number of dots')\ndef dots(n):\n    click.echo('.' * n)\n```\n\n----------------------------------------\n\nTITLE: Overriding Value Completion with a Custom Function\nDESCRIPTION: Shows how to customize completion for a parameter without creating a custom type by providing a shell_complete function. This example suggests environment variables that start with the user's input.\nSOURCE: https://github.com/pallets/click/blob/main/docs/shell-completion.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef complete_env_vars(ctx, param, incomplete):\n    return [k for k in os.environ if k.startswith(incomplete)]\n\n@click.command()\n@click.argument(\"name\", shell_complete=complete_env_vars)\ndef cli(name):\n    click.echo(f\"Name: {name}\")\n    click.echo(f\"Value: {os.environ[name]}\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Click Command with Alternative Prefix Characters\nDESCRIPTION: Demonstrates defining a Click command that uses '+' and '-' as option prefixes instead of the standard double-dash. The command toggles a writable flag.\nSOURCE: https://github.com/pallets/click/blob/main/docs/options.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\n@click.option('+w/-w')\ndef chmod(w):\n    click.echo(f\"writable={w}\")\n```\n\n----------------------------------------\n\nTITLE: Finding Application Config Directories with Click\nDESCRIPTION: Shows how to use Click's get_app_dir function to locate the appropriate directory for storing application configuration files based on the operating system.\nSOURCE: https://github.com/pallets/click/blob/main/docs/utils.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport click\nimport ConfigParser\n\nAPP_NAME = 'My Application'\n\ndef read_config():\n```\n\n----------------------------------------\n\nTITLE: Escaping Click's Text Wrapping with \\b Marker\nDESCRIPTION: Shows how to prevent Click from rewrapping specific paragraphs by adding a line with only '\\b', which preserves the original line breaks in code examples or other text where formatting is significant.\nSOURCE: https://github.com/pallets/click/blob/main/docs/documentation.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\ndef cli():\n    \"\"\"First paragraph.\n\n    \\b\n    This is\n    a paragraph\n    without rewrapping.\n\n    And this is a paragraph\n    that will be rewrapped again.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Printing to Standard Error with Click\nDESCRIPTION: Demonstrates how to redirect output to standard error using Click's echo function by setting the err parameter to True.\nSOURCE: https://github.com/pallets/click/blob/main/docs/utils.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclick.echo('Hello World!', err=True)\n```\n\n----------------------------------------\n\nTITLE: Invoking Click Command with Custom Environment Variables\nDESCRIPTION: Uses Click's invoke function to execute a command with custom environment variables, specifically setting the PATHS variable with OS-specific path separators.\nSOURCE: https://github.com/pallets/click/blob/main/docs/options.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport os\ninvoke(perform, env={\"PATHS\": f\"./foo/bar{os.path.pathsep}./test\"})\n```\n\n----------------------------------------\n\nTITLE: Documenting Arguments in Click Commands\nDESCRIPTION: Shows how to document command arguments in the docstring, following Unix command line convention of not using help parameters for arguments but documenting them in the help text.\nSOURCE: https://github.com/pallets/click/blob/main/docs/documentation.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\n@click.argument('filename')\ndef touch(filename):\n    \"\"\"Print FILENAME.\"\"\"\n    click.echo(filename)\n```\n\n----------------------------------------\n\nTITLE: Creating a File Reading Click Command\nDESCRIPTION: Defines a Click command that reads and outputs the contents of a file using Click's file handling.\nSOURCE: https://github.com/pallets/click/blob/main/docs/testing.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport click\n\n@click.command()\n@click.argument('f', type=click.File())\ndef cat(f):\n   click.echo(f.read())\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Click Command\nDESCRIPTION: A basic Click command implementation that prints a greeting when executed. This demonstrates the minimal code needed for a functional Click CLI application.\nSOURCE: https://github.com/pallets/click/blob/main/docs/entry-points.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport click\n\n@click.command()\ndef cli():\n    \"\"\"Prints a greeting.\"\"\"\n    click.echo(\"Hello, World!\")\n```\n\n----------------------------------------\n\nTITLE: Using Context.get_parameter_source with Click Commands\nDESCRIPTION: Demonstrates how to determine where a parameter value came from (argument, environment variable, or default) using the Context.get_parameter_source method. Returns a member of the ParameterSource enum.\nSOURCE: https://github.com/pallets/click/blob/main/docs/advanced.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\n@click.argument('port', nargs=1, default=8080, envvar=\"PORT\")\n@click.pass_context\ndef cli(ctx, port):\n    source = ctx.get_parameter_source(\"port\")\n    click.echo(f\"Port came from {source.name}\")\n```\n\n----------------------------------------\n\nTITLE: Documenting Arguments with Explicit Description in Click\nDESCRIPTION: Demonstrates a more detailed approach to documenting command arguments by providing explicit descriptions in the docstring, which appear in the generated help text.\nSOURCE: https://github.com/pallets/click/blob/main/docs/documentation.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\n@click.argument('filename')\ndef touch(filename):\n    \"\"\"Print FILENAME.\n\n    FILENAME is the name of the file to check.\n    \"\"\"\n    click.echo(filename)\n```\n\n----------------------------------------\n\nTITLE: Invoking a Command Example\nDESCRIPTION: Shows how to run a Click CLI command with the invoke function, passing the CLI group, program name, and a distribution command argument.\nSOURCE: https://github.com/pallets/click/blob/main/docs/advanced.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ninvoke(cli, prog_name='cli', args=['dist'])\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Click Command Group for Context Testing\nDESCRIPTION: Defines a minimal Click command group for demonstrating context settings in tests.\nSOURCE: https://github.com/pallets/click/blob/main/docs/testing.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport click\n\n@click.group()\ndef cli():\n   pass\n\n@cli.command()\ndef sync():\n   click.echo('Syncing')\n```\n\n----------------------------------------\n\nTITLE: Lazy Command Attachment in Click\nDESCRIPTION: Demonstrates how to lazily attach commands to a Click group using add_command().\nSOURCE: https://github.com/pallets/click/blob/main/docs/commands-and-groups.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@click.group()\ndef cli():\n    pass\n\n@cli.command()\ndef initdb():\n    click.echo('Initialized the database')\n\n@click.command()\ndef dropdb():\n    click.echo('Dropped the database')\n\ncli.add_command(dropdb)\n```\n\n----------------------------------------\n\nTITLE: Using Path Type with Pathlib in Python\nDESCRIPTION: Shows how to configure the Path parameter type to return a pathlib.Path object instead of a string, which can be useful for more advanced path operations.\nSOURCE: https://github.com/pallets/click/blob/main/CHANGES.rst#2025-04-21_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nclick.Path(path_type=pathlib.Path)\n```\n\n----------------------------------------\n\nTITLE: Customizing Help Parameters in Click Commands\nDESCRIPTION: Shows how to override the default help parameter names by defining custom context settings with alternative help_option_names. This example changes the default from just '--help' to both '-h' and '--help'.\nSOURCE: https://github.com/pallets/click/blob/main/docs/documentation.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nCONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])\n\n@click.command(context_settings=CONTEXT_SETTINGS)\ndef cli():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Using Context.call_on_close for Non-Context Manager Resources\nDESCRIPTION: Shows how to handle resources that aren't context managers by registering a cleanup function with Context.call_on_close. This function will be called when the CLI context exits.\nSOURCE: https://github.com/pallets/click/blob/main/docs/advanced.rst#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n@click.group()\n@click.option(\"--name\", default=\"repo.db\")\n@click.pass_context\ndef cli(ctx, repo_home):\n    ctx.obj = db = open_db(repo_home)\n\n    @ctx.call_on_close\n    def close_db():\n        db.record_use()\n        db.save()\n        db.close()\n```\n\n----------------------------------------\n\nTITLE: Custom Named Click Group Implementation\nDESCRIPTION: Demonstrates creating a Click group with a custom name and nested command.\nSOURCE: https://github.com/pallets/click/blob/main/docs/commands-and-groups.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@click.group('greet-someone')\ndef greeting():\n    click.echo('Starting greeting ...')\n\n@greeting.command('say-hello')\n@click.option('--count', default=1)\ndef hello(count):\n    for x in range(count):\n        click.echo(\"Hello!\")\n```\n\n----------------------------------------\n\nTITLE: Passing Context Metadata in Python\nDESCRIPTION: Demonstrates the use of the new pass_meta_key decorator to pass a specific key from the Context.meta dictionary, which can be useful for extensions storing information in meta.\nSOURCE: https://github.com/pallets/click/blob/main/CHANGES.rst#2025-04-21_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n@click.pass_meta_key('some_key')\ndef command(some_key):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using Custom Group Classes with Decorators in Click Python\nDESCRIPTION: This example shows how to use a custom Group subclass with Click decorators, providing an alternative way to configure a plugin system for commands.\nSOURCE: https://github.com/pallets/click/blob/main/docs/advanced.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@click.group(\n    cls=PluginGroup,\n    plugin_folder=os.path.join(os.path.dirname(__file__), \"commands\")\n)\ndef cli():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Creating a Click Command with Prompts\nDESCRIPTION: Defines a Click command that prompts the user for input using the prompt option.\nSOURCE: https://github.com/pallets/click/blob/main/docs/testing.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport click\n\n@click.command()\n@click.option('--foo', prompt=True)\ndef prompt(foo):\n   click.echo(f\"foo={foo}\")\n```\n\n----------------------------------------\n\nTITLE: Formatting Filenames in Click\nDESCRIPTION: Shows how to safely format filenames using Click's format_filename function, which handles the conversion of binary filenames to Unicode for display.\nSOURCE: https://github.com/pallets/click/blob/main/docs/utils.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nclick.echo(f\"Path: {click.format_filename(b'foo.txt')}\")\n```\n\n----------------------------------------\n\nTITLE: Customizing Placeholder Variables in Click Help\nDESCRIPTION: Demonstrates how to customize the meta variables (parameter placeholders) in help text using the options_metavar and metavar parameters for both options and arguments.\nSOURCE: https://github.com/pallets/click/blob/main/docs/documentation.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# This controls entry on the usage line.\n@click.command(options_metavar='[[options]]')\n@click.option('--count', default=1, help='number of greetings',\n              metavar='<int>')\n@click.argument('name', metavar='<name>')\ndef hello(name: str, count: int) -> None:\n    \"\"\"This script prints 'hello <name>' a total of <count> times.\"\"\"\n    for x in range(count):\n        click.echo(f\"Hello {name}!\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Fish Completion for a CLI Tool\nDESCRIPTION: Shows how to enable shell completion for Fish by creating a completion file in the Fish config directory. This uses the _FOO_BAR_COMPLETE environment variable with the program name.\nSOURCE: https://github.com/pallets/click/blob/main/docs/shell-completion.rst#2025-04-21_snippet_3\n\nLANGUAGE: fish\nCODE:\n```\n_FOO_BAR_COMPLETE=fish_source foo-bar | source\n```\n\n----------------------------------------\n\nTITLE: Clearing Terminal Screen with Click\nDESCRIPTION: Shows how to clear the terminal screen in a platform-agnostic way using Click's clear function.\nSOURCE: https://github.com/pallets/click/blob/main/docs/utils.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport click\nclick.clear()\n```\n\n----------------------------------------\n\nTITLE: Automatic Type Determination with Default Values\nDESCRIPTION: Example showing how Click automatically determines the expected type from the provided default value when prompting for input.\nSOURCE: https://github.com/pallets/click/blob/main/docs/prompts.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nvalue = click.prompt('Please enter a number', default=42.0)\n```\n\n----------------------------------------\n\nTITLE: Handling Option-Like Arguments in Click (Python)\nDESCRIPTION: Shows how to handle arguments that look like options in Click. It uses the '--' separator to distinguish between options and arguments.\nSOURCE: https://github.com/pallets/click/blob/main/docs/arguments.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\n@click.argument('files', nargs=-1, type=click.Path())\ndef touch(files):\n    \"\"\"Print all FILES file names.\"\"\"\n    for filename in files:\n        click.echo(filename)\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Command Name in Click\nDESCRIPTION: Demonstrates how to access the current context in Click and retrieve the command name using get_current_context function.\nSOURCE: https://github.com/pallets/click/blob/main/docs/advanced.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef get_current_command_name():\n    return click.get_current_context().info_name\n```\n\n----------------------------------------\n\nTITLE: Opening File in Editor with Click\nDESCRIPTION: Shows how to use Click's edit function to open a specific file in the user's default text editor. When editing files, the function always returns None.\nSOURCE: https://github.com/pallets/click/blob/main/docs/utils.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport click\nclick.edit(filename='/etc/passwd')\n```\n\n----------------------------------------\n\nTITLE: Waiting for Key Press with Click\nDESCRIPTION: Shows how to use Click's pause function to wait for any key press before continuing. This is particularly useful on Windows where the command window might close automatically.\nSOURCE: https://github.com/pallets/click/blob/main/docs/utils.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport click\nclick.pause()\n```\n\n----------------------------------------\n\nTITLE: Example of Shell Completion Output in CLI\nDESCRIPTION: Shows how tab completion displays available commands and options in a repository CLI tool, demonstrating the user experience when shell completion is enabled.\nSOURCE: https://github.com/pallets/click/blob/main/docs/shell-completion.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ repo <TAB><TAB>\nclone  commit  copy  delete  setuser\n$ repo clone -<TAB><TAB>\n--deep  --help  --rev  --shallow  -r\n```\n\n----------------------------------------\n\nTITLE: Thread-safe Context Access in Click\nDESCRIPTION: Shows how to properly use Click's context in a multi-threaded environment by passing the context to a thread and using it as a context manager to ensure proper access.\nSOURCE: https://github.com/pallets/click/blob/main/docs/advanced.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef spawn_thread(ctx, func):\n    def wrapper():\n        with ctx:\n            func()\n    t = threading.Thread(target=wrapper)\n    t.start()\n    return t\n```\n\n----------------------------------------\n\nTITLE: Adding Labels to Click Progress Bar\nDESCRIPTION: Example showing how to add descriptive labels to a Click progress bar to provide context about the operation being performed.\nSOURCE: https://github.com/pallets/click/blob/main/docs/utils.rst#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nwith click.progressbar(all_the_users_to_process,\n                       label='Modifying user accounts',\n                       length=number_of_users) as bar:\n    for user in bar:\n        modify_the_user(user)\n```\n\n----------------------------------------\n\nTITLE: Multiple Options Flag\nDESCRIPTION: Demonstrates using the multiple flag to allow repeated options.\nSOURCE: https://github.com/pallets/click/blob/main/docs/options.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\n@click.option('--message', '-m', multiple=True)\ndef commit(message):\n    click.echo('\\n'.join(message))\n```\n\n----------------------------------------\n\nTITLE: Implementing the format_completion Method for Custom Shell Support\nDESCRIPTION: Shows how to implement the format_completion method for a custom shell completion class, which formats CompletionItem objects into strings that the shell's completion system can use.\nSOURCE: https://github.com/pallets/click/blob/main/docs/shell-completion.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass MyshComplete(ShellComplete):\n    ...\n\n    def format_completion(self, item):\n        return f\"{item.type}\\t{item.value}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Resource as a Context Manager in Click\nDESCRIPTION: Defines a Repo class that works as a context manager to handle database connections. It automatically opens the database in __enter__ and closes it in __exit__.\nSOURCE: https://github.com/pallets/click/blob/main/docs/advanced.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nclass Repo:\n    def __init__(self, home=None):\n        self.home = os.path.abspath(home or \".\")\n        self.db = None\n\n    def __enter__(self):\n        path = os.path.join(self.home, \"repo.db\")\n        self.db = open_database(path)\n        return self\n\n    def __exit__(self, exc_type, exc_value, tb):\n        self.db.close()\n```\n\n----------------------------------------\n\nTITLE: Tuple Type Option\nDESCRIPTION: Example of using tuple types to accept multiple values of different types.\nSOURCE: https://github.com/pallets/click/blob/main/docs/options.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\n@click.option('--item', type=(str, int))\ndef putitem(item):\n    name, id = item\n    click.echo(f\"name={name} id={id}\")\n```\n\n----------------------------------------\n\nTITLE: Basic Single Argument Option\nDESCRIPTION: Simple example of Click option with a single optional text argument.\nSOURCE: https://github.com/pallets/click/blob/main/docs/options.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\n@click.option('--text')\ndef print_this(text):\n    click.echo(text)\n```\n\n----------------------------------------\n\nTITLE: Executing the Click-based CLI Example\nDESCRIPTION: This snippet shows how to run the Click-based CLI example from the command line. It demonstrates the interactive prompt for the name and the repeated greeting based on the count parameter.\nSOURCE: https://github.com/pallets/click/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python hello.py --count=3\nYour name: Click\nHello, Click!\nHello, Click!\nHello, Click!\n```\n\n----------------------------------------\n\nTITLE: Disabling Standalone Mode in Click Command Execution\nDESCRIPTION: Shows how to use the Command.main() method while disabling standalone mode. This disables exception handling and the implicit sys.exit() call, allowing for more control over execution.\nSOURCE: https://github.com/pallets/click/blob/main/docs/exceptions.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncommand.main(['command-name', 'args', 'go', 'here'],\n             standalone_mode=False)\n```\n\n----------------------------------------\n\nTITLE: Enabling Bash Completion for a CLI Tool\nDESCRIPTION: Shows how to enable shell completion for Bash by adding an evaluation line to the bashrc file. This uses the _FOO_BAR_COMPLETE environment variable with the program name.\nSOURCE: https://github.com/pallets/click/blob/main/docs/shell-completion.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\neval \"$(_FOO_BAR_COMPLETE=bash_source foo-bar)\"\n```\n\n----------------------------------------\n\nTITLE: Default Value Display for Boolean Flags in Click\nDESCRIPTION: Demonstrates how default values are displayed for different types of options, including boolean flags where the default remains hidden if the default value is False even with show_default=True.\nSOURCE: https://github.com/pallets/click/blob/main/docs/documentation.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\n@click.option('--n', default=1, show_default=True)\n@click.option(\"--gr\", is_flag=True, show_default=True, default=False, help=\"Greet the world.\")\n@click.option(\"--br\", is_flag=True, show_default=True, default=True, help=\"Add a thematic break\")\ndef dots(n, gr, br):\n    if gr:\n        click.echo('Hello world!')\n    click.echo('.' * n)\n    if br:\n        click.echo('-' * n)\n```\n\n----------------------------------------\n\nTITLE: Inferred Option Names\nDESCRIPTION: Shows how Click can infer function argument names from option names automatically.\nSOURCE: https://github.com/pallets/click/blob/main/docs/options.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\n@click.option('--string-to-echo')\ndef echo(string_to_echo):\n    click.echo(string_to_echo)\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Content Width for Click Help Text\nDESCRIPTION: Demonstrates how to change the maximum width of rendered help text by passing the max_content_width parameter when calling the command.\nSOURCE: https://github.com/pallets/click/blob/main/docs/documentation.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ncli(max_content_width=120)\n```\n\n----------------------------------------\n\nTITLE: Enabling Zsh Completion for a CLI Tool\nDESCRIPTION: Shows how to enable shell completion for Zsh by adding an evaluation line to the zshrc file. This uses the _FOO_BAR_COMPLETE environment variable with the program name.\nSOURCE: https://github.com/pallets/click/blob/main/docs/shell-completion.rst#2025-04-21_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\neval \"$(_FOO_BAR_COMPLETE=zsh_source foo-bar)\"\n```\n\n----------------------------------------\n\nTITLE: Ignoring Unknown Options for Arguments in Click (Python)\nDESCRIPTION: Demonstrates how to ignore unknown options when processing arguments in Click by setting 'ignore_unknown_options' to True in the context settings.\nSOURCE: https://github.com/pallets/click/blob/main/docs/arguments.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@click.command(context_settings={\"ignore_unknown_options\": True})\n@click.argument('files', nargs=-1, type=click.Path())\ndef touch(files):\n    \"\"\"Print all FILES file names.\"\"\"\n    for filename in files:\n        click.echo(filename)\n```\n\n----------------------------------------\n\nTITLE: Truncating Help Text with \\f Marker in Click\nDESCRIPTION: Shows how to truncate parts of the docstring in generated help text by adding the '\\f' escape marker, causing Click to ignore everything after it.\nSOURCE: https://github.com/pallets/click/blob/main/docs/documentation.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\ndef cli():\n    \"\"\"First paragraph.\n    \\f\n\n    Words to not be included.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Reading Single Character Input with getchar in Click\nDESCRIPTION: Demonstrates using Click's getchar function to read a single character from the terminal without requiring the user to press Enter. Useful for simple yes/no prompts.\nSOURCE: https://github.com/pallets/click/blob/main/docs/utils.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport click\n\nclick.echo('Continue? [yn] ', nl=False)\nc = click.getchar()\nclick.echo()\nif c == 'y':\n    click.echo('We will go on')\nelif c == 'n':\n    click.echo('Abort!')\nelse:\n    click.echo('Invalid input :(')\n```\n\n----------------------------------------\n\nTITLE: Manually Invoking Click Command in Python\nDESCRIPTION: Demonstrates how to manually invoke a Click command, bypassing the default exception handling. This approach allows exceptions to bubble up as expected.\nSOURCE: https://github.com/pallets/click/blob/main/docs/exceptions.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nctx = command.make_context('command-name', ['args', 'go', 'here'])\nwith ctx:\n    result = command.invoke(ctx)\n```\n\n----------------------------------------\n\nTITLE: Foo Subcommand Definition\nDESCRIPTION: Defines a simple subcommand group 'foo' that can be lazily loaded by the main CLI.\nSOURCE: https://github.com/pallets/click/blob/main/docs/complex.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# in foo.py\nimport click\n\n@click.group(help=\"foo command for lazy example\")\ndef cli():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Click Command Function\nDESCRIPTION: Defines a simple Click command that takes a name argument and outputs a greeting message.\nSOURCE: https://github.com/pallets/click/blob/main/docs/testing.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport click\n\n@click.command()\n@click.argument('name')\ndef hello(name):\n   click.echo(f'Hello {name}!')\n```\n\n----------------------------------------\n\nTITLE: Invoking Click Commands with Different Prefix Options\nDESCRIPTION: Shows how to invoke the chmod command with both the '+w' (positive) and '-w' (negative) option flags.\nSOURCE: https://github.com/pallets/click/blob/main/docs/options.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ninvoke(chmod, args=['+w'])\ninvoke(chmod, args=['-w'])\n```\n\n----------------------------------------\n\nTITLE: Bar Subcommand with Nested Lazy Loading\nDESCRIPTION: Defines the 'bar' subcommand group that also uses LazyGroup to lazily load its own subcommand 'baz'.\nSOURCE: https://github.com/pallets/click/blob/main/docs/complex.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# in bar.py\nimport click\nfrom lazy_group import LazyGroup\n\n@click.group(\n    cls=LazyGroup,\n    lazy_subcommands={\"baz\": \"baz.cli\"},\n    help=\"bar command for lazy example\",\n)\ndef cli():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Generating and Saving Zsh Completion Script\nDESCRIPTION: Shows a more efficient approach for Zsh completion by generating the completion script once and saving it to a file, then sourcing that file in the zshrc.\nSOURCE: https://github.com/pallets/click/blob/main/docs/shell-completion.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n_FOO_BAR_COMPLETE=zsh_source foo-bar > ~/.foo-bar-complete.zsh\n```\n\nLANGUAGE: bash\nCODE:\n```\n. ~/.foo-bar-complete.zsh\n```\n\n----------------------------------------\n\nTITLE: Help Command Invocation Example\nDESCRIPTION: Demonstrates running a CLI command with the --help flag using the invoke function.\nSOURCE: https://github.com/pallets/click/blob/main/docs/advanced.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ninvoke(cli, prog_name='cli', args=['--help'])\nprintln()\ninvoke(cli, prog_name='cli', args=['-n', '100', 'a = 1; b = 2; a * b'])\nprintln()\ninvoke(cli, prog_name='cli', args=['-v', 'a = 1; b = 2; a * b'])\n```\n\n----------------------------------------\n\nTITLE: Invoking Click Command with Different Option Configurations\nDESCRIPTION: Demonstrates three ways to invoke the hello command: without any arguments (uses default), with an explicit value for the option, and with just the option flag (uses flag_value).\nSOURCE: https://github.com/pallets/click/blob/main/docs/options.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ninvoke(hello, args=[])\ninvoke(hello, args=[\"--name\", \"Value\"])\ninvoke(hello, args=[\"--name\"])\n```\n\n----------------------------------------\n\nTITLE: Invoking a CLI Command with Arguments in Python's Click Framework\nDESCRIPTION: Demonstrates how to invoke a Click command with name arguments programmatically.\nSOURCE: https://github.com/pallets/click/blob/main/docs/advanced.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ninvoke(cli, prog_name='cli', args=['--NAME=Pete'])\n```\n\n----------------------------------------\n\nTITLE: Generating and Saving Bash Completion Script\nDESCRIPTION: Shows a more efficient approach for Bash completion by generating the completion script once and saving it to a file, then sourcing that file in the bashrc.\nSOURCE: https://github.com/pallets/click/blob/main/docs/shell-completion.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n_FOO_BAR_COMPLETE=bash_source foo-bar > ~/.foo-bar-complete.bash\n```\n\nLANGUAGE: bash\nCODE:\n```\n. ~/.foo-bar-complete.bash\n```\n\n----------------------------------------\n\nTITLE: Testing with Custom Isolated Filesystem Path\nDESCRIPTION: Demonstrates using an isolated filesystem with a specified path, which can be useful for integration with testing frameworks like pytest.\nSOURCE: https://github.com/pallets/click/blob/main/docs/testing.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom click.testing import CliRunner\nfrom cat import cat\n\ndef test_cat_with_path_specified():\n   runner = CliRunner()\n   with runner.isolated_filesystem('~/test_folder'):\n      with open('hello.txt', 'w') as f:\n          f.write('Hello World!')\n\n      result = runner.invoke(cat, ['hello.txt'])\n      assert result.exit_code == 0\n      assert result.output == 'Hello World!\\n'\n```\n\n----------------------------------------\n\nTITLE: Click Group with Subcommand Detection\nDESCRIPTION: Shows how to implement a Click group that can detect whether it was invoked with or without a subcommand.\nSOURCE: https://github.com/pallets/click/blob/main/docs/commands-and-groups.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@click.group(invoke_without_command=True)\n@click.pass_context\ndef cli(ctx):\n    if ctx.invoked_subcommand is None:\n        click.echo('I was invoked without subcommand')\n    else:\n        click.echo(f\"I am about to invoke {ctx.invoked_subcommand}\")\n\n@cli.command()\ndef sync():\n    click.echo('The subcommand')\n```\n\n----------------------------------------\n\nTITLE: Configuring pyproject.toml for Click Application Packaging\nDESCRIPTION: Configuration file that defines project metadata, dependencies, and entry points for a Click application. The project.scripts section maps the command name to the function that implements it.\nSOURCE: https://github.com/pallets/click/blob/main/docs/entry-points.rst#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nname = \"hello\"\nversion = \"1.0.0\"\ndescription = \"Hello CLI\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"click>=8.1\",\n]\n\n[project.scripts]\nhello = \"hello:cli\"\n\n[build-system]\nrequires = [\"flit_core<4\"]\nbuild-backend = \"flit_core.buildapi\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Virtualenv\nDESCRIPTION: Commands to create a new project folder and set up a Python virtual environment within it. This creates an isolated Python environment for your project.\nSOURCE: https://github.com/pallets/click/blob/main/docs/virtualenv.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir myproject\n$ cd myproject\n$ python3 -m venv .venv\n```\n\n----------------------------------------\n\nTITLE: Installing a Click Application in Development Mode\nDESCRIPTION: Terminal commands to create a virtual environment and install the Click application in editable mode for development purposes.\nSOURCE: https://github.com/pallets/click/blob/main/docs/entry-points.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ python -m venv .venv\n$ . .venv/bin/activate\n$ pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Main CLI Group Definition with LazyGroup\nDESCRIPTION: Defines the main CLI group using LazyGroup to enable lazy loading of subcommands. Specifies mappings for 'foo' and 'bar' subcommands to their respective modules.\nSOURCE: https://github.com/pallets/click/blob/main/docs/complex.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# in main.py\nimport click\nfrom lazy_group import LazyGroup\n\n@click.group(\n    cls=LazyGroup,\n    lazy_subcommands={\"foo\": \"foo.cli\", \"bar\": \"bar.cli\"},\n    help=\"main CLI command for lazy example\",\n)\ndef cli():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Creating a Project Directory Structure for a Click Application\nDESCRIPTION: Example of a basic project directory structure for a Click-based application, showing the organization of files needed for packaging.\nSOURCE: https://github.com/pallets/click/blob/main/docs/entry-points.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhello-project/\n    src/\n        hello/\n            __init__.py\n    pyproject.toml\n```\n\n----------------------------------------\n\nTITLE: Activating a Virtualenv on OSX/Linux\nDESCRIPTION: Command to activate a Python virtual environment on OSX or Linux systems. When activated, the shell prompt changes to indicate the active environment.\nSOURCE: https://github.com/pallets/click/blob/main/docs/virtualenv.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ . .venv/bin/activate\n(venv) $\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment for Click Development\nDESCRIPTION: Commands to create and activate a virtual environment for Click development on Unix/Linux and Windows systems.\nSOURCE: https://github.com/pallets/click/blob/main/CONTRIBUTING.rst#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ python3 -m venv env\n$ . env/bin/activate\n```\n\nLANGUAGE: text\nCODE:\n```\n> env\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Deferred Import Command Example\nDESCRIPTION: Demonstrates how to create a command that defers importing its implementation until execution time while maintaining Click's functionality for help text and usage info.\nSOURCE: https://github.com/pallets/click/blob/main/docs/complex.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\n@click.option(\"-n\", type=int)\n@click.option(\"-w\", type=str)\ndef foo(n, w):\n    from mylibrary import foo_concrete\n\n    foo_concrete(n, w)\n```\n\n----------------------------------------\n\nTITLE: Testing with Custom Context Settings\nDESCRIPTION: Demonstrates passing context settings like terminal_width to the CliRunner.invoke method.\nSOURCE: https://github.com/pallets/click/blob/main/docs/testing.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom click.testing import CliRunner\nfrom sync import cli\n\ndef test_sync():\n  runner = CliRunner()\n  result = runner.invoke(cli, ['sync'], terminal_width=60)\n  assert result.exit_code == 0\n  assert 'Debug mode is on' in result.output\n  assert 'Syncing' in result.output\n```\n\n----------------------------------------\n\nTITLE: Activating a Virtualenv on Windows\nDESCRIPTION: Command to activate a Python virtual environment on Windows systems. When activated, the command prompt changes to indicate the active environment.\nSOURCE: https://github.com/pallets/click/blob/main/docs/virtualenv.rst#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n> .venv\\scripts\\activate\n(venv) >\n```\n\n----------------------------------------\n\nTITLE: Creating a Branch for Bug or Documentation Fix\nDESCRIPTION: Git commands to create a branch for bug or documentation fixes based on the latest stable branch.\nSOURCE: https://github.com/pallets/click/blob/main/CONTRIBUTING.rst#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n$ git fetch origin\n$ git checkout -b your-branch-name origin/8.1.x\n```\n\n----------------------------------------\n\nTITLE: Dynamic Defaults with Custom Help Documentation\nDESCRIPTION: Example of using a dynamic default value with a descriptive label in help documentation to inform users about the default source.\nSOURCE: https://github.com/pallets/click/blob/main/docs/prompts.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\n@click.command()\n@click.option(\n    \"--username\", prompt=True,\n    default=lambda: os.environ.get(\"USER\", \"\"),\n    show_default=\"current user\"\n)\ndef hello(username):\n    click.echo(f\"Hello, {username}!\")\n```\n\n----------------------------------------\n\nTITLE: Generating and Saving Fish Completion Script\nDESCRIPTION: Shows how to generate and save the Fish completion script to the Fish completions directory in one step.\nSOURCE: https://github.com/pallets/click/blob/main/docs/shell-completion.rst#2025-04-21_snippet_6\n\nLANGUAGE: fish\nCODE:\n```\n_FOO_BAR_COMPLETE=fish_source foo-bar > ~/.config/fish/completions/foo-bar.fish\n```\n\n----------------------------------------\n\nTITLE: Deprecated Click Command Implementation\nDESCRIPTION: Demonstrates how to mark a Click command as deprecated using the deprecated parameter.\nSOURCE: https://github.com/pallets/click/blob/main/docs/commands-and-groups.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@click.command('say-hello', deprecated=True)\n@click.option('--count', default=1)\ndef hello(count):\n    for x in range(count):\n        click.echo(\"Hello!\")\n```\n\n----------------------------------------\n\nTITLE: Pushing Commits and Creating Pull Request\nDESCRIPTION: Git command to push changes to your fork on GitHub before creating a pull request.\nSOURCE: https://github.com/pallets/click/blob/main/CONTRIBUTING.rst#2025-04-21_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n$ git push --set-upstream fork your-branch-name\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Shell Completion in Python\nDESCRIPTION: Shows the updated signature for the shell_complete function used to provide custom completion suggestions for commands, groups, parameters, and types. The function takes ctx, param, and incomplete as arguments and returns a list of strings or CompletionItem objects.\nSOURCE: https://github.com/pallets/click/blob/main/CHANGES.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndef shell_complete(ctx, param, incomplete):\n    # Perform matching and return suggestions\n    return [...]  # List of strings or CompletionItem objects\n```\n\n----------------------------------------\n\nTITLE: Implementing the get_completion_args Method for Custom Shell Support\nDESCRIPTION: Shows how to implement the get_completion_args method for a custom shell completion class, which extracts command line arguments and the incomplete value from environment variables set by the shell.\nSOURCE: https://github.com/pallets/click/blob/main/docs/shell-completion.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom click.parser import split_arg_string\n\nclass MyshComplete(ShellComplete):\n    ...\n\n    def get_completion_args(self):\n        args = split_arg_string(os.environ[\"COMP_WORDS\"])\n\n        if os.environ[\"COMP_PARTIAL\"] == \"1\":\n            incomplete = args.pop()\n            return args, incomplete\n\n        return args, \"\"\n```\n\n----------------------------------------\n\nTITLE: Building Click Documentation with Sphinx\nDESCRIPTION: Commands to build the Click documentation using Sphinx in the docs directory.\nSOURCE: https://github.com/pallets/click/blob/main/CONTRIBUTING.rst#2025-04-21_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n$ cd docs\n$ make html\n```\n\n----------------------------------------\n\nTITLE: Installing Packages in a Virtualenv\nDESCRIPTION: Command to install Python packages within an activated virtual environment. This example installs the Click package which is isolated to this environment.\nSOURCE: https://github.com/pallets/click/blob/main/docs/virtualenv.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install click\n```\n\n----------------------------------------\n\nTITLE: Configuring Option Prompts in Python\nDESCRIPTION: Demonstrates how to configure an Option to only prompt for input if no value was passed, using the new prompt_required parameter.\nSOURCE: https://github.com/pallets/click/blob/main/CHANGES.rst#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nclick.option('--name', prompt_required=False)\n```\n\n----------------------------------------\n\nTITLE: Basic Command-Line Entry Point in Python\nDESCRIPTION: A simple Python entry point pattern that calls a 'perform' function when the script is executed directly.\nSOURCE: https://github.com/pallets/click/blob/main/docs/options.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == '__main__':\n    perform()\n```\n\n----------------------------------------\n\nTITLE: Creating a Branch for Feature Addition or Change\nDESCRIPTION: Git commands to create a branch for new features or changes based on the main branch.\nSOURCE: https://github.com/pallets/click/blob/main/CONTRIBUTING.rst#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n$ git fetch origin\n$ git checkout -b your-branch-name origin/main\n```\n\n----------------------------------------\n\nTITLE: Documentation Dependencies Requirements File\nDESCRIPTION: Comprehensive list of Python packages and their exact versions required for building Click documentation. Includes Sphinx and related packages for documentation generation, along with their transitive dependencies.\nSOURCE: https://github.com/pallets/click/blob/main/requirements/docs.txt#2025-04-21_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\nalabaster==1.0.0\nbabel==2.16.0\ncertifi==2024.8.30\ncharset-normalizer==3.4.0\ncolorama==0.4.6\ndocutils==0.21.2\nidna==3.10\nimagesize==1.4.1\njinja2==3.1.4\nmarkdown-it-py==3.0.0\nmarkupsafe==3.0.2\nmdit-py-plugins==0.4.2\nmdurl==0.1.2\nmyst-parser==4.0.1\npackaging==24.1\npallets-sphinx-themes==2.3.0\npygments==2.18.0\npyyaml==6.0.2\nrequests==2.32.3\nsnowballstemmer==2.2.0\nsphinx==8.1.3\nsphinx-notfound-page==1.0.4\nsphinx-tabs==3.4.7\nsphinxcontrib-applehelp==2.0.0\nsphinxcontrib-devhelp==2.0.0\nsphinxcontrib-htmlhelp==2.1.0\nsphinxcontrib-jsmath==1.0.1\nsphinxcontrib-log-cabinet==1.0.1\nsphinxcontrib-qthelp==2.0.0\nsphinxcontrib-serializinghtml==2.0.0\ntomli==2.2.1\nurllib3==2.2.3\n```\n\n----------------------------------------\n\nTITLE: Installing Click with pip\nDESCRIPTION: Shows how to install the Click package from PyPI using pip. Installing into a virtual environment is recommended.\nSOURCE: https://github.com/pallets/click/blob/main/docs/quickstart.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install click\n```\n\n----------------------------------------\n\nTITLE: Standard Context Manager Usage\nDESCRIPTION: Shows the typical way to use a context manager with the with statement, which isn't suitable for Click command groups because the context would exit before subcommands can use it.\nSOURCE: https://github.com/pallets/click/blob/main/docs/advanced.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nwith Repo() as repo:\n    repo.db.query(...)\n```\n\n----------------------------------------\n\nTITLE: Including External RST File in Sphinx Documentation\nDESCRIPTION: A Sphinx directive that includes the content of the CHANGES.rst file from the parent directory into the current document, allowing for modular documentation management.\nSOURCE: https://github.com/pallets/click/blob/main/docs/changes.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../CHANGES.rst\n```\n\n----------------------------------------\n\nTITLE: Pip Dependencies Configuration\nDESCRIPTION: Requirements file generated by pip-compile specifying build dependencies. The file defines exact versions of build, packaging, and pyproject-hooks packages needed for the Click project build process.\nSOURCE: https://github.com/pallets/click/blob/main/requirements/build.txt#2025-04-21_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\nbuild==1.2.2.post1\n    # via -r build.in\npackaging==24.1\n    # via build\npyproject-hooks==1.2.0\n    # via build\n```\n\n----------------------------------------\n\nTITLE: Baz Subcommand Definition\nDESCRIPTION: Defines the 'baz' subcommand group that can be lazily loaded by the 'bar' command.\nSOURCE: https://github.com/pallets/click/blob/main/docs/complex.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# in baz.py\nimport click\n\n@click.group(help=\"baz command for lazy example\")\ndef cli():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Basic Loop Example Before Progress Bar Implementation\nDESCRIPTION: A simple Python loop example showing code before implementing a progress bar, used as a reference point.\nSOURCE: https://github.com/pallets/click/blob/main/docs/utils.rst#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfor user in all_the_users_to_process:\n    modify_the_user(user)\n```\n\n----------------------------------------\n\nTITLE: Package Dependencies Requirements File\nDESCRIPTION: Comprehensive list of Python package dependencies with pinned versions and their relationships. Generated automatically by uv package manager from dev.in source file. Contains development, documentation, testing, and typing dependencies.\nSOURCE: https://github.com/pallets/click/blob/main/requirements/dev.txt#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n# This file was autogenerated by uv via the following command:\\n#    uv pip compile -o dev.txt dev.in\\nalabaster==1.0.0\\n    # via\\n    #   -r docs.txt\\n    #   sphinx\\nanyio==4.8.0\\n    # via\\n    #   starlette\\n    #   watchfiles\\nbabel==2.16.0\\n    # via\\n    #   -r docs.txt\\n    #   sphinx\\ncachetools==5.5.1\\n    # via tox\\ncertifi==2024.8.30\\n    # via\\n    #   -r docs.txt\\n    #   requests\\ncfgv==3.4.0\\n    # via pre-commit\\nchardet==5.2.0\\n    # via tox\\ncharset-normalizer==3.4.0\\n    # via\\n    #   -r docs.txt\\n    #   requests\\nclick==8.1.8\\n    # via uvicorn\\ncolorama==0.4.6\\n    # via\\n    #   click\\n    #   pytest\\n    #   sphinx\\n    #   sphinx-autobuild\\n    #   tox\\ndistlib==0.3.9\\n    # via virtualenv\\ndocutils==0.21.2\\n    # via\\n    #   -r docs.txt\\n    #   sphinx\\n    #   sphinx-tabs\\nexceptiongroup==1.2.2\\n    # via\\n    #   anyio\\n    #   pytest\\nfilelock==3.17.0\\n    # via\\n    #   tox\\n    #   virtualenv\\nh11==0.14.0\\n    # via uvicorn\\nidentify==2.6.7\\n    # via pre-commit\\nidna==3.10\\n    # via\\n    #   -r docs.txt\\n    #   anyio\\n    #   requests\\nimagesize==1.4.1\\n    # via\\n    #   -r docs.txt\\n    #   sphinx\\niniconfig==2.0.0\\n    # via\\n    #   -r tests.txt\\n    #   pytest\\njinja2==3.1.4\\n    # via\\n    #   -r docs.txt\\n    #   sphinx\\nmarkupsafe==3.0.2\\n    # via\\n    #   -r docs.txt\\n    #   jinja2\\nmypy==1.13.0\\n    # via -r typing.txt\\nmypy-extensions==1.0.0\\n    # via\\n    #   -r typing.txt\\n    #   mypy\\nnodeenv==1.9.1\\n    # via\\n    #   -r typing.txt\\n    #   pre-commit\\n    #   pyright\\npackaging==24.1\\n    # via\\n    #   -r docs.txt\\n    #   -r tests.txt\\n    #   pallets-sphinx-themes\\n    #   pyproject-api\\n    #   pytest\\n    #   sphinx\\n    #   tox\\npallets-sphinx-themes==2.3.0\\n    # via -r docs.txt\\nplatformdirs==4.3.6\\n    # via\\n    #   tox\\n    #   virtualenv\\npluggy==1.5.0\\n    # via\\n    #   -r tests.txt\\n    #   pytest\\n    #   tox\\npre-commit==4.1.0\\n    # via -r dev.in\\npygments==2.18.0\\n    # via\\n    #   -r docs.txt\\n    #   sphinx\\n    #   sphinx-tabs\\npyproject-api==1.8.0\\n    # via tox\\npyright==1.1.386\\n    # via -r typing.txt\\npytest==8.3.3\\n    # via -r tests.txt\\npyyaml==6.0.2\\n    # via pre-commit\\nrequests==2.32.3\\n    # via\\n    #   -r docs.txt\\n    #   sphinx\\nsniffio==1.3.1\\n    # via anyio\\nsnowballstemmer==2.2.0\\n    # via\\n    #   -r docs.txt\\n    #   sphinx\\nsphinx==8.1.3\\n    # via\\n    #   -r docs.txt\\n    #   pallets-sphinx-themes\\n    #   sphinx-autobuild\\n    #   sphinx-issues\\n    #   sphinx-notfound-page\\n    #   sphinx-tabs\\n    #   sphinxcontrib-log-cabinet\\nsphinx-autobuild==2024.10.3\\n    # via -r dev.in\\nsphinx-issues==5.0.0\\n    # via -r docs.txt\\nsphinx-notfound-page==1.0.4\\n    # via\\n    #   -r docs.txt\\n    #   pallets-sphinx-themes\\nsphinx-tabs==3.4.7\\n    # via -r docs.txt\\nsphinxcontrib-applehelp==2.0.0\\n    # via\\n    #   -r docs.txt\\n    #   sphinx\\nsphinxcontrib-devhelp==2.0.0\\n    # via\\n    #   -r docs.txt\\n    #   sphinx\\nsphinxcontrib-htmlhelp==2.1.0\\n    # via\\n    #   -r docs.txt\\n    #   sphinx\\nsphinxcontrib-jsmath==1.0.1\\n    # via\\n    #   -r docs.txt\\n    #   sphinx\\nsphinxcontrib-log-cabinet==1.0.1\\n    # via -r docs.txt\\nsphinxcontrib-qthelp==2.0.0\\n    # via\\n    #   -r docs.txt\\n    #   sphinx\\nsphinxcontrib-serializinghtml==2.0.0\\n    # via\\n    #   -r docs.txt\\n    #   sphinx\\nstarlette==0.45.3\\n    # via sphinx-autobuild\\ntomli==2.2.1\\n    # via\\n    #   mypy\\n    #   pyproject-api\\n    #   pytest\\n    #   sphinx\\n    #   tox\\ntox==4.23.2\\n    # via -r dev.in\\ntyping-extensions==4.12.2\\n    # via\\n    #   -r typing.txt\\n    #   anyio\\n    #   mypy\\n    #   pyright\\n    #   tox\\n    #   uvicorn\\nurllib3==2.2.3\\n    # via\\n    #   -r docs.txt\\n    #   requests\\nuvicorn==0.34.0\\n    # via sphinx-autobuild\\nvirtualenv==20.29.2\\n    # via\\n    #   pre-commit\\n    #   tox\\nwatchfiles==1.0.4\\n    # via sphinx-autobuild\\nwebsockets==15.0\\n    # via sphinx-autobuild\n```\n\n----------------------------------------\n\nTITLE: Text Wrapping Behavior in Click Help Documentation\nDESCRIPTION: Illustrates Click's default text wrapping behavior which ignores single newlines and rewraps text based on terminal width up to 80 characters maximum.\nSOURCE: https://github.com/pallets/click/blob/main/docs/documentation.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@click.command()\ndef cli():\n    \"\"\"\n    This is a very long paragraph and as you\n    can see wrapped very early in the source text\n    but will be rewrapped to the terminal width in\n    the final output.\n\n    This is\n    a paragraph\n    that is compacted.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing Click Development Dependencies\nDESCRIPTION: Commands for installing development dependencies and Click in editable mode, along with pre-commit hooks.\nSOURCE: https://github.com/pallets/click/blob/main/CONTRIBUTING.rst#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ pip install -r requirements/dev.txt && pip install -e .\n```\n\nLANGUAGE: text\nCODE:\n```\n$ pre-commit install\n```\n\n----------------------------------------\n\nTITLE: Incorrect Stream Redirection in Python\nDESCRIPTION: Shows the incorrect way to redirect standard input/output streams for testing command-line applications with Unicode support.\nSOURCE: https://github.com/pallets/click/blob/main/docs/unicode-support.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nsys.stdin = io.StringIO('Input here')\nsys.stdout = io.StringIO()\n```\n\n----------------------------------------\n\nTITLE: Deactivating a Virtualenv\nDESCRIPTION: Command to exit from an active virtual environment and return to the system's default Python environment. After deactivation, the shell prompt returns to normal.\nSOURCE: https://github.com/pallets/click/blob/main/docs/virtualenv.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ deactivate\n```\n\n----------------------------------------\n\nTITLE: Running Click Tests with Pytest\nDESCRIPTION: Commands for running the basic test suite with pytest and the full test suite with tox.\nSOURCE: https://github.com/pallets/click/blob/main/CONTRIBUTING.rst#2025-04-21_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n$ pytest\n```\n\nLANGUAGE: text\nCODE:\n```\n$ tox\n```\n\n----------------------------------------\n\nTITLE: Export German UTF-8 Locale Settings\nDESCRIPTION: Shell commands to set German UTF-8 locale settings to fix ASCII encoding restrictions.\nSOURCE: https://github.com/pallets/click/blob/main/docs/unicode-support.rst#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport LC_ALL=de_DE.utf-8\nexport LANG=de_DE.utf-8\n```\n\n----------------------------------------\n\nTITLE: Running Test Coverage for Click\nDESCRIPTION: Commands to install coverage, run pytest with coverage, and generate an HTML coverage report.\nSOURCE: https://github.com/pallets/click/blob/main/CONTRIBUTING.rst#2025-04-21_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n$ pip install coverage\n$ coverage run -m pytest\n$ coverage html\n```\n\n----------------------------------------\n\nTITLE: Specifying Test Dependencies for Click Project using pip-compile\nDESCRIPTION: This pip-compiled requirements file lists the exact versions of dependencies needed for running tests in the Click project. It includes pytest and its associated dependencies, ensuring consistent test environments.\nSOURCE: https://github.com/pallets/click/blob/main/requirements/tests.txt#2025-04-21_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n#\n# This file is autogenerated by pip-compile with Python 3.13\n# by the following command:\n#\n#    pip-compile tests.in\n#\niniconfig==2.0.0\n    # via pytest\npackaging==24.1\n    # via pytest\npluggy==1.5.0\n    # via pytest\npytest==8.3.3\n    # via -r tests.in\n```\n\n----------------------------------------\n\nTITLE: Configuring Git for Click Contribution\nDESCRIPTION: Commands to configure Git with your username and email for contributing to the Click project.\nSOURCE: https://github.com/pallets/click/blob/main/CONTRIBUTING.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ git config --global user.name 'your name'\n$ git config --global user.email 'your email'\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Click Repository\nDESCRIPTION: Instructions for cloning the Click repository and adding your fork as a remote.\nSOURCE: https://github.com/pallets/click/blob/main/CONTRIBUTING.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ git clone https://github.com/pallets/click\n$ cd click\n```\n\nLANGUAGE: text\nCODE:\n```\n$ git remote add fork https://github.com/{username}/click\n```\n\n----------------------------------------\n\nTITLE: Export Generic UTF-8 Locale Settings\nDESCRIPTION: Shell commands to set generic UTF-8 locale settings using C.UTF-8 locale.\nSOURCE: https://github.com/pallets/click/blob/main/docs/unicode-support.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexport LC_ALL=C.UTF-8\nexport LANG=C.UTF-8\n```\n\n----------------------------------------\n\nTITLE: Including License Text using reStructuredText Directive\nDESCRIPTION: Uses the literalinclude directive to embed the contents of LICENSE.txt file with text language highlighting\nSOURCE: https://github.com/pallets/click/blob/main/docs/license.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. literalinclude:: ../LICENSE.txt\n    :language: text\n```"
  }
]