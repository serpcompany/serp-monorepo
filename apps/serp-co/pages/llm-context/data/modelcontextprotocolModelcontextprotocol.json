[
  {
    "owner": "modelcontextprotocol",
    "repo": "modelcontextprotocol",
    "content": "TITLE: Creating and Using Synchronous MCP Client in Java\nDESCRIPTION: Demonstrates how to create, configure, and use a synchronous MCP client with custom capabilities. The example shows initializing a connection, listing and calling tools, managing resources and prompts, and working with roots functionality.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-client.mdx#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// Create a sync client with custom configuration\nMcpSyncClient client = McpClient.sync(transport)\n    .requestTimeout(Duration.ofSeconds(10))\n    .capabilities(ClientCapabilities.builder()\n        .roots(true)      // Enable roots capability\n        .sampling()       // Enable sampling capability\n        .build())\n    .sampling(request -> new CreateMessageResult(response))\n    .build();\n\n// Initialize connection\nclient.initialize();\n\n// List available tools\nListToolsResult tools = client.listTools();\n\n// Call a tool\nCallToolResult result = client.callTool(\n    new CallToolRequest(\"calculator\", \n        Map.of(\"operation\", \"add\", \"a\", 2, \"b\", 3))\n);\n\n// List and read resources\nListResourcesResult resources = client.listResources();\nReadResourceResult resource = client.readResource(\n    new ReadResourceRequest(\"resource://uri\")\n);\n\n// List and use prompts\nListPromptsResult prompts = client.listPrompts();\nGetPromptResult prompt = client.getPrompt(\n    new GetPromptRequest(\"greeting\", Map.of(\"name\", \"Spring\"))\n);\n\n// Add/remove roots\nclient.addRoot(new Root(\"file:///path\", \"description\"));\nclient.removeRoot(\"file:///path\");\n\n// Close client\nclient.closeGracefully();\n```\n\n----------------------------------------\n\nTITLE: Implementing Tools in Python MCP Server\nDESCRIPTION: This code shows how to implement a basic tool (calculate_sum) in a Python MCP server, including tool definition and execution handling.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/tools.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napp = Server(\"example-server\")\n\n@app.list_tools()\nasync def list_tools() -> list[types.Tool]:\n    return [\n        types.Tool(\n            name=\"calculate_sum\",\n            description=\"Add two numbers together\",\n            inputSchema={\n                \"type\": \"object\",\n                \"properties\": {\n                    \"a\": {\"type\": \"number\"},\n                    \"b\": {\"type\": \"number\"}\n                },\n                \"required\": [\"a\", \"b\"]\n            }\n        )\n    ]\n\n@app.call_tool()\nasync def call_tool(\n    name: str,\n    arguments: dict\n) -> list[types.TextContent | types.ImageContent | types.EmbeddedResource]:\n    if name == \"calculate_sum\":\n        a = arguments[\"a\"]\n        b = arguments[\"b\"]\n        result = a + b\n        return [types.TextContent(type=\"text\", text=str(result))]\n    raise ValueError(f\"Tool not found: {name}\")\n```\n\n----------------------------------------\n\nTITLE: Declaring Completions Capability in JSON\nDESCRIPTION: This snippet shows how servers must declare the 'completions' capability in their capabilities object.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/utilities/completion.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"capabilities\": {\n    \"completions\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MCP Core Components Architecture Diagram\nDESCRIPTION: Mermaid diagram showing the relationship between host process, clients, servers and resources in the MCP architecture. Illustrates how a single host can manage multiple clients connecting to different servers, both local and remote.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/architecture/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    subgraph \"Application Host Process\"\n        H[Host]\n        C1[Client 1]\n        C2[Client 2]\n        C3[Client 3]\n        H --> C1\n        H --> C2\n        H --> C3\n    end\n\n    subgraph \"Local machine\"\n        S1[Server 1<br>Files & Git]\n        S2[Server 2<br>Database]\n        R1[(\"Local<br>Resource A\")]\n        R2[(\"Local<br>Resource B\")]\n\n        C1 --> S1\n        C2 --> S2\n        S1 <--> R1\n        S2 <--> R2\n    end\n\n    subgraph \"Internet\"\n        S3[Server 3<br>External APIs]\n        R3[(\"Remote<br>Resource C\")]\n\n        C3 --> S3\n        S3 <--> R3\n    end\n```\n\n----------------------------------------\n\nTITLE: Implementing Weather Tools for MCP Server\nDESCRIPTION: TypeScript code implementing two MCP tools: 'get-alerts' for retrieving weather alerts for a state, and 'get-forecast' for getting weather forecasts for a specific location.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// Register weather tools\nserver.tool(\n  \"get-alerts\",\n  \"Get weather alerts for a state\",\n  {\n    state: z.string().length(2).describe(\"Two-letter state code (e.g. CA, NY)\"),\n  },\n  async ({ state }) => {\n    const stateCode = state.toUpperCase();\n    const alertsUrl = `${NWS_API_BASE}/alerts?area=${stateCode}`;\n    const alertsData = await makeNWSRequest<AlertsResponse>(alertsUrl);\n\n    if (!alertsData) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: \"Failed to retrieve alerts data\",\n          },\n        ],\n      };\n    }\n\n    const features = alertsData.features || [];\n    if (features.length === 0) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `No active alerts for ${stateCode}`,\n          },\n        ],\n      };\n    }\n\n    const formattedAlerts = features.map(formatAlert);\n    const alertsText = `Active alerts for ${stateCode}:\\n\\n${formattedAlerts.join(\"\\n\")}`;\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: alertsText,\n        },\n      ],\n    };\n  },\n);\n\nserver.tool(\n  \"get-forecast\",\n  \"Get weather forecast for a location\",\n  {\n    latitude: z.number().min(-90).max(90).describe(\"Latitude of the location\"),\n    longitude: z.number().min(-180).max(180).describe(\"Longitude of the location\"),\n  },\n  async ({ latitude, longitude }) => {\n    // Get grid point data\n    const pointsUrl = `${NWS_API_BASE}/points/${latitude.toFixed(4)},${longitude.toFixed(4)}`;\n    const pointsData = await makeNWSRequest<PointsResponse>(pointsUrl);\n\n    if (!pointsData) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: `Failed to retrieve grid point data for coordinates: ${latitude}, ${longitude}. This location may not be supported by the NWS API (only US locations are supported).`,\n          },\n        ],\n      };\n    }\n\n    const forecastUrl = pointsData.properties?.forecast;\n    if (!forecastUrl) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: \"Failed to get forecast URL from grid point data\",\n          },\n        ],\n      };\n    }\n\n    // Get forecast data\n    const forecastData = await makeNWSRequest<ForecastResponse>(forecastUrl);\n    if (!forecastData) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: \"Failed to retrieve forecast data\",\n          },\n        ],\n      };\n    }\n\n    const periods = forecastData.properties?.periods || [];\n    if (periods.length === 0) {\n      return {\n        content: [\n          {\n            type: \"text\",\n            text: \"No forecast periods available\",\n          },\n        ],\n      };\n    }\n\n    // Format forecast periods\n    const formattedForecast = periods.map((period: ForecastPeriod) =>\n      [\n        `${period.name || \"Unknown\"}:`,\n        `Temperature: ${period.temperature || \"Unknown\"}Â°${period.temperatureUnit || \"F\"}`,\n        `Wind: ${period.windSpeed || \"Unknown\"} ${period.windDirection || \"\"}`,\n        `${period.shortForecast || \"No forecast available\"}`,\n        \"---\",\n      ].join(\"\\n\"),\n    );\n\n    const forecastText = `Forecast for ${latitude}, ${longitude}:\\n\\n${formattedForecast.join(\"\\n\")}`;\n\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: forecastText,\n        },\n      ],\n    };\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Query Processing Implementation\nDESCRIPTION: Core logic for processing queries, handling tool calls, and managing conversation flow with Claude.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def process_query(self, query: str) -> str:\n    \"\"\"Process a query using Claude and available tools\"\"\"\n    messages = [\n        {\n            \"role\": \"user\",\n            \"content\": query\n        }\n    ]\n\n    response = await self.session.list_tools()\n    available_tools = [{\n        \"name\": tool.name,\n        \"description\": tool.description,\n        \"input_schema\": tool.inputSchema\n    } for tool in response.tools]\n\n    # Initial Claude API call\n    response = self.anthropic.messages.create(\n        model=\"claude-3-5-sonnet-20241022\",\n        max_tokens=1000,\n        messages=messages,\n        tools=available_tools\n    )\n\n    # Process response and handle tool calls\n    final_text = []\n\n    assistant_message_content = []\n    for content in response.content:\n        if content.type == 'text':\n            final_text.append(content.text)\n            assistant_message_content.append(content)\n        elif content.type == 'tool_use':\n            tool_name = content.name\n            tool_args = content.input\n\n            # Execute tool call\n            result = await self.session.call_tool(tool_name, tool_args)\n            final_text.append(f\"[Calling tool {tool_name} with args {tool_args}]\")\n\n            assistant_message_content.append(content)\n            messages.append({\n                \"role\": \"assistant\",\n                \"content\": assistant_message_content\n            })\n            messages.append({\n                \"role\": \"user\",\n                \"content\": [\n                    {\n                        \"type\": \"tool_result\",\n                        \"tool_use_id\": content.id,\n                        \"content\": result.content\n                    }\n                ]\n            })\n\n            # Get next response from Claude\n            response = self.anthropic.messages.create(\n                model=\"claude-3-5-sonnet-20241022\",\n                max_tokens=1000,\n                messages=messages,\n                tools=available_tools\n            )\n\n            final_text.append(response.content[0].text)\n\n    return \"\\n\".join(final_text)\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Completion Specification in Java\nDESCRIPTION: Shows how to create an asynchronous completion specification and configure a server with completion capabilities using the Model Context Protocol Java SDK. The specification includes a completion reference and an asynchronous handler function for processing completion requests.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#2025-04-23_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nvar asyncCompletionSpecification = new McpServerFeatures.AsyncCompletionSpecification(\n\t\t\tnew McpSchema.PromptReference(\"code_review\"), (exchange, request) -> {\n\n        // completion implementation ...\n\n        return Mono.just(new McpSchema.CompleteResult(\n            new CompleteResult.CompleteCompletion(\n              List.of(\"python\", \"pytorch\", \"pyside\"), \n              10, // total\n              false // hasMore\n            )));\n      }\n);\n\n// Create a async server with completion capabilities\nvar mcpServer = McpServer.async(mcpServerTransportProvider)\n  .capabilities(ServerCapabilities.builder()\n    .completions() // enable completions support\n      // ...\n    .build())\n  // ...\n  .completions(new McpServerFeatures.AsyncCompletionSpecification( // register completion specification\n      new McpSchema.PromptReference(\"code_review\"), asyncCompletionSpecification))\n  .build();\n```\n\n----------------------------------------\n\nTITLE: Implementing MCP Resource Support in TypeScript\nDESCRIPTION: A complete example showing how to implement resource support in an MCP server using TypeScript. Includes server initialization with resource capabilities, list handler, and read handler.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/resources.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new Server({\n  name: \"example-server\",\n  version: \"1.0.0\"\n}, {\n  capabilities: {\n    resources: {}\n  }\n});\n\n// List available resources\nserver.setRequestHandler(ListResourcesRequestSchema, async () => {\n  return {\n    resources: [\n      {\n        uri: \"file:///logs/app.log\",\n        name: \"Application Logs\",\n        mimeType: \"text/plain\"\n      }\n    ]\n  };\n});\n\n// Read resource contents\nserver.setRequestHandler(ReadResourceRequestSchema, async (request) => {\n  const uri = request.params.uri;\n\n  if (uri === \"file:///logs/app.log\") {\n    const logContents = await readLogFile();\n    return {\n      contents: [\n        {\n          uri,\n          mimeType: \"text/plain\",\n          text: logContents\n        }\n      ]\n    };\n  }\n\n  throw new Error(\"Resource not found\");\n});\n```\n\n----------------------------------------\n\nTITLE: Requesting LLM Generation in MCP (JSON)\nDESCRIPTION: Example of a sampling/createMessage request in the Model Context Protocol, including messages, model preferences, and system prompt.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/client/sampling.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"sampling/createMessage\",\n  \"params\": {\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": {\n          \"type\": \"text\",\n          \"text\": \"What is the capital of France?\"\n        }\n      }\n    ],\n    \"modelPreferences\": {\n      \"hints\": [\n        {\n          \"name\": \"claude-3-sonnet\"\n        }\n      ],\n      \"intelligencePriority\": 0.8,\n      \"speedPriority\": 0.5\n    },\n    \"systemPrompt\": \"You are a helpful assistant.\",\n    \"maxTokens\": 100\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Tool Specification in Java\nDESCRIPTION: Shows how to create an asynchronous tool specification for a basic calculator using the Model Context Protocol Java SDK. The specification includes a JSON schema for the tool's parameters and an asynchronous handler function to implement the tool's logic.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#2025-04-23_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nvar schema = \"\"\"\n            {\n              \"type\" : \"object\",\n              \"id\" : \"urn:jsonschema:Operation\",\n              \"properties\" : {\n                \"operation\" : {\n                  \"type\" : \"string\"\n                },\n                \"a\" : {\n                  \"type\" : \"number\"\n                },\n                \"b\" : {\n                  \"type\" : \"number\"\n                }\n              }\n            }\n            \"\"\";\nvar asyncToolSpecification = new McpServerFeatures.AsyncToolSpecification(\n    new Tool(\"calculator\", \"Basic calculator\", schema),\n    (exchange, arguments) -> {\n        // Tool implementation\n        return Mono.just(new CallToolResult(result, false));\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Integrating MCP Tool Annotations in Python Server Implementation\nDESCRIPTION: This snippet demonstrates how to integrate tool annotations in a Python server implementation using the FastMCP library to define a calculate_sum tool with specific annotations and docstring.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/tools.mdx#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom mcp.server.fastmcp import FastMCP\n\nmcp = FastMCP(\"example-server\")\n\n@mcp.tool(\n    annotations={\n        \"title\": \"Calculate Sum\",\n        \"readOnlyHint\": True,\n        \"openWorldHint\": False\n    }\n)\nasync def calculate_sum(a: float, b: float) -> str:\n    \"\"\"Add two numbers together.\n    \n    Args:\n        a: First number to add\n        b: Second number to add\n    \"\"\"\n    result = a + b\n    return str(result)\n```\n\n----------------------------------------\n\nTITLE: Configuring Servlet SSE Server Transport Provider in Java\nDESCRIPTION: This snippet shows how to create and configure a Servlet-based SSE server transport provider, including bean configuration and servlet registration for use with Spring Web applications.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@EnableWebMvc\npublic class McpServerConfig implements WebMvcConfigurer {\n\n    @Bean\n    public HttpServletSseServerTransportProvider servletSseServerTransportProvider() {\n        return new HttpServletSseServerTransportProvider(new ObjectMapper(), \"/mcp/message\");\n    }\n\n    @Bean\n    public ServletRegistrationBean customServletBean(HttpServletSseServerTransportProvider transportProvider) {\n        return new ServletRegistrationBean(transportProvider);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Responding to Initialize Request in MCP\nDESCRIPTION: JSON-RPC response from the server to the initialize request. It includes the protocol version, server capabilities, server information, and optional instructions for the client.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/lifecycle.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"protocolVersion\": \"2024-11-05\",\n    \"capabilities\": {\n      \"logging\": {},\n      \"prompts\": {\n        \"listChanged\": true\n      },\n      \"resources\": {\n        \"subscribe\": true,\n        \"listChanged\": true\n      },\n      \"tools\": {\n        \"listChanged\": true\n      }\n    },\n    \"serverInfo\": {\n      \"name\": \"ExampleServer\",\n      \"version\": \"1.0.0\"\n    },\n    \"instructions\": \"Optional instructions for the client\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MCP Tools for Weather Alerts and Forecast in Python\nDESCRIPTION: Python implementation of MCP tools for fetching weather alerts and forecasts using the National Weather Service API.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@mcp.tool()\nasync def get_alerts(state: str) -> str:\n    \"\"\"Get weather alerts for a US state.\n\n    Args:\n        state: Two-letter US state code (e.g. CA, NY)\n    \"\"\"\n    url = f\"{NWS_API_BASE}/alerts/active/area/{state}\"\n    data = await make_nws_request(url)\n\n    if not data or \"features\" not in data:\n        return \"Unable to fetch alerts or no alerts found.\"\n\n    if not data[\"features\"]:\n        return \"No active alerts for this state.\"\n\n    alerts = [format_alert(feature) for feature in data[\"features\"]]\n    return \"\\n---\\n\".join(alerts)\n\n@mcp.tool()\nasync def get_forecast(latitude: float, longitude: float) -> str:\n    \"\"\"Get weather forecast for a location.\n\n    Args:\n        latitude: Latitude of the location\n        longitude: Longitude of the location\n    \"\"\"\n    # First get the forecast grid endpoint\n    points_url = f\"{NWS_API_BASE}/points/{latitude},{longitude}\"\n    points_data = await make_nws_request(points_url)\n\n    if not points_data:\n        return \"Unable to fetch forecast data for this location.\"\n\n    # Get the forecast URL from the points response\n    forecast_url = points_data[\"properties\"][\"forecast\"]\n    forecast_data = await make_nws_request(forecast_url)\n\n    if not forecast_data:\n        return \"Unable to fetch detailed forecast.\"\n\n    # Format the periods into a readable forecast\n    periods = forecast_data[\"properties\"][\"periods\"]\n    forecasts = []\n    for period in periods[:5]:  # Only show next 5 periods\n        forecast = f\"\"\"\n{period['name']}:\nTemperature: {period['temperature']}Â°{period['temperatureUnit']}\nWind: {period['windSpeed']} {period['windDirection']}\nForecast: {period['detailedForecast']}\n\"\"\"\n        forecasts.append(forecast)\n\n    return \"\\n---\\n\".join(forecasts)\n```\n\n----------------------------------------\n\nTITLE: Using Tools with Asynchronous MCP Client in Java\nDESCRIPTION: Demonstrates how to discover and execute server-side tools using the asynchronous MCP client API with reactive programming patterns. Shows listing tools and executing them with parameters in a non-blocking way.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-client.mdx#2025-04-23_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n// List available tools asynchronously\nclient.listTools()\n    .doOnNext(tools -> tools.forEach(tool -> \n        System.out.println(tool.getName())))\n    .subscribe();\n\n// Execute a tool asynchronously\nclient.callTool(\"calculator\", Map.of(\n        \"operation\", \"add\",\n        \"a\", 1,\n        \"b\", 2\n    ))\n    .subscribe();\n```\n\n----------------------------------------\n\nTITLE: Using Tools with Synchronous MCP Client in Java\nDESCRIPTION: Demonstrates how to discover and execute server-side tools using the synchronous MCP client API. This example shows listing available tools and executing a calculator tool with specific parameters.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-client.mdx#2025-04-23_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n// List available tools and their names\nvar tools = client.listTools();\ntools.forEach(tool -> System.out.println(tool.getName()));\n\n// Execute a tool with parameters\nvar result = client.callTool(\"calculator\", Map.of(\n    \"operation\", \"add\",\n    \"a\", 1,\n    \"b\", 2\n));\n```\n\n----------------------------------------\n\nTITLE: Illustrating MCP Session Workflow and Capability Negotiation\nDESCRIPTION: A sequence diagram depicting the communication flow between Host, Client, and Server in the Model Context Protocol. Shows initialization with capability negotiation, client and server requests, and notification handling throughout an active session lifecycle.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/architecture/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Host\n    participant Client\n    participant Server\n\n    Host->>+Client: Initialize client\n    Client->>+Server: Initialize session with capabilities\n    Server-->>Client: Respond with supported capabilities\n\n    Note over Host,Server: Active Session with Negotiated Features\n\n    loop Client Requests\n        Host->>Client: User- or model-initiated action\n        Client->>Server: Request (tools/resources)\n        Server-->>Client: Response\n        Client-->>Host: Update UI or respond to model\n    end\n\n    loop Server Requests\n        Server->>Client: Request (sampling)\n        Client->>Host: Forward to AI\n        Host-->>Client: AI response\n        Client-->>Server: Response\n    end\n\n    loop Notifications\n        Server--)Client: Resource updates\n        Client--)Server: Status changes\n    end\n\n    Host->>Client: Terminate\n    Client->>-Server: End session\n    deactivate Server\n```\n\n----------------------------------------\n\nTITLE: Implementing Authorization Header for MCP Client in HTTP\nDESCRIPTION: Demonstrates the correct format for including the access token in the Authorization header of an HTTP request to an MCP server. This is a requirement for all client requests to conform with OAuth 2.1 standards.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/authorization.mdx#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nAuthorization: Bearer <access-token>\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Asynchronous MCP Client in Java\nDESCRIPTION: Demonstrates how to create, configure, and use an asynchronous MCP client with reactive programming patterns. Shows initialization, tool execution, resource and prompt management, and roots functionality with change listeners.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-client.mdx#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Create an async client with custom configuration\nMcpAsyncClient client = McpClient.async(transport)\n    .requestTimeout(Duration.ofSeconds(10))\n    .capabilities(ClientCapabilities.builder()\n        .roots(true)      // Enable roots capability\n        .sampling()       // Enable sampling capability\n        .build())\n    .sampling(request -> Mono.just(new CreateMessageResult(response)))\n    .toolsChangeConsumer(tools -> Mono.fromRunnable(() -> {\n        logger.info(\"Tools updated: {}\", tools);\n    }))\n    .resourcesChangeConsumer(resources -> Mono.fromRunnable(() -> {\n        logger.info(\"Resources updated: {}\", resources);\n    }))\n    .promptsChangeConsumer(prompts -> Mono.fromRunnable(() -> {\n        logger.info(\"Prompts updated: {}\", prompts);\n    }))\n    .build();\n\n// Initialize connection and use features\nclient.initialize()\n    .flatMap(initResult -> client.listTools())\n    .flatMap(tools -> {\n        return client.callTool(new CallToolRequest(\n            \"calculator\", \n            Map.of(\"operation\", \"add\", \"a\", 2, \"b\", 3)\n        ));\n    })\n    .flatMap(result -> {\n        return client.listResources()\n            .flatMap(resources -> \n                client.readResource(new ReadResourceRequest(\"resource://uri\"))\n            );\n    })\n    .flatMap(resource -> {\n        return client.listPrompts()\n            .flatMap(prompts ->\n                client.getPrompt(new GetPromptRequest(\n                    \"greeting\", \n                    Map.of(\"name\", \"Spring\")\n                ))\n            );\n    })\n    .flatMap(prompt -> {\n        return client.addRoot(new Root(\"file:///path\", \"description\"))\n            .then(client.removeRoot(\"file:///path\"));            \n    })\n    .doFinally(signalType -> {\n        client.closeGracefully().subscribe();\n    })\n    .subscribe();\n```\n\n----------------------------------------\n\nTITLE: Tool Interaction Sequence Diagram in Mermaid\nDESCRIPTION: Mermaid sequence diagram illustrating the message flow between LLM, Client, and Server for tool discovery, selection, invocation, and updates.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/tools.mdx#2025-04-23_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant LLM\n    participant Client\n    participant Server\n\n    Note over Client,Server: Discovery\n    Client->>Server: tools/list\n    Server-->>Client: List of tools\n\n    Note over Client,LLM: Tool Selection\n    LLM->>Client: Select tool to use\n\n    Note over Client,Server: Invocation\n    Client->>Server: tools/call\n    Server-->>Client: Tool result\n    Client->>LLM: Process result\n\n    Note over Client,Server: Updates\n    Server--)Client: tools/list_changed\n    Client->>Server: tools/list\n    Server-->>Client: Updated tools\n```\n\n----------------------------------------\n\nTITLE: Accessing Resources with MCP Java Client (Sync API)\nDESCRIPTION: Demonstrates how to list available resources and retrieve resource content using the synchronous API of the MCP Java client. It shows listing resources and their names, as well as retrieving resource content using a URI template.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-client.mdx#2025-04-23_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n// List available resources and their names\nvar resources = client.listResources();\nresources.forEach(resource -> System.out.println(resource.getName()));\n\n// Retrieve resource content using a URI template\nvar content = client.getResource(\"file\", Map.of(\n    \"path\", \"/path/to/file.txt\"\n));\n```\n\n----------------------------------------\n\nTITLE: Completion Response in JSON-RPC\nDESCRIPTION: This snippet shows the structure of a completion response, including an array of completion values, total number of matches, and a flag indicating if more results are available.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/utilities/completion.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"completion\": {\n      \"values\": [\"python\", \"pytorch\", \"pyside\"],\n      \"total\": 10,\n      \"hasMore\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Protocol Layer Implementation in Python\nDESCRIPTION: Python class definition for the Session class that handles request/response and notification messaging in the MCP protocol layer.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/architecture.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Session(BaseSession[RequestT, NotificationT, ResultT]):\n    async def send_request(\n        self,\n        request: RequestT,\n        result_type: type[Result]\n    ) -> Result:\n        \"\"\"Send request and wait for response. Raises McpError if response contains error.\"\"\"\n        # Request handling implementation\n\n    async def send_notification(\n        self,\n        notification: NotificationT\n    ) -> None:\n        \"\"\"Send one-way notification that doesn't expect response.\"\"\"\n        # Notification handling implementation\n\n    async def _received_request(\n        self,\n        responder: RequestResponder[ReceiveRequestT, ResultT]\n    ) -> None:\n        \"\"\"Handle incoming request from other side.\"\"\"\n        # Request handling implementation\n\n    async def _received_notification(\n        self,\n        notification: ReceiveNotificationT\n    ) -> None:\n        \"\"\"Handle incoming notification from other side.\"\"\"\n        # Notification handling implementation\n```\n\n----------------------------------------\n\nTITLE: Defining Data Processing Tool in TypeScript\nDESCRIPTION: This snippet illustrates how to define a tool for data processing, specifically for analyzing a CSV file with various operations.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/tools.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"analyze_csv\",\n  description: \"Analyze a CSV file\",\n  inputSchema: {\n    type: \"object\",\n    properties: {\n      filepath: { type: \"string\" },\n      operations: {\n        type: \"array\",\n        items: {\n          enum: [\"sum\", \"average\", \"count\"]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing MCP Capability Negotiation Sequence using Mermaid\nDESCRIPTION: Sequence diagram demonstrating the capability negotiation process between Host, Client, and Server components, including session initialization, request handling, and notification flows.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/architecture/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Host\n    participant Client\n    participant Server\n\n    Host->>+Client: Initialize client\n    Client->>+Server: Initialize session with capabilities\n    Server-->>Client: Respond with supported capabilities\n\n    Note over Host,Server: Active Session with Negotiated Features\n\n    loop Client Requests\n        Host->>Client: User- or model-initiated action\n        Client->>Server: Request (tools/resources)\n        Server-->>Client: Response\n        Client-->>Host: Update UI or respond to model\n    end\n\n    loop Server Requests\n        Server->>Client: Request (sampling)\n        Client->>Host: Forward to AI\n        Host-->>Client: AI response\n        Client-->>Server: Response\n    end\n\n    loop Notifications\n        Server--)Client: Resource updates\n        Client--)Server: Status changes\n    end\n\n    Host->>Client: Terminate\n    Client->>-Server: End session\n    deactivate Server\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Processing Logic\nDESCRIPTION: Sets up the chat client with Anthropic API integration, configures the chat options, and implements an interactive loop for processing user queries with streaming responses.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#2025-04-23_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\nusing var anthropicClient = new AnthropicClient(new APIAuthentication(builder.Configuration[\"ANTHROPIC_API_KEY\"]))\n    .Messages\n    .AsBuilder()\n    .UseFunctionInvocation()\n    .Build();\n\nvar options = new ChatOptions\n{\n    MaxOutputTokens = 1000,\n    ModelId = \"claude-3-5-sonnet-20241022\",\n    Tools = [.. tools]\n};\n\nConsole.ForegroundColor = ConsoleColor.Green;\nConsole.WriteLine(\"MCP Client Started!\");\nConsole.ResetColor();\n\nPromptForInput();\nwhile(Console.ReadLine() is string query && !\"exit\".Equals(query, StringComparison.OrdinalIgnoreCase))\n{\n    if (string.IsNullOrWhiteSpace(query))\n    {\n        PromptForInput();\n        continue;\n    }\n\n    await foreach (var message in anthropicClient.GetStreamingResponseAsync(query, options))\n    {\n        Console.Write(message);\n    }\n    Console.WriteLine();\n\n    PromptForInput();\n}\n\nstatic void PromptForInput()\n{\n    Console.WriteLine(\"Enter a command (or 'exit' to quit):\");\n    Console.ForegroundColor = ConsoleColor.Cyan;\n    Console.Write(\"> \");\n    Console.ResetColor();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WebFlux SSE Server Transport Provider in Java\nDESCRIPTION: This snippet shows how to create and configure a WebFlux-based SSE server transport provider using Spring Framework, including bean configuration and router function setup.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\nclass McpConfig {\n    @Bean\n    WebFluxSseServerTransportProvider webFluxSseServerTransportProvider(ObjectMapper mapper) {\n        return new WebFluxSseServerTransportProvider(mapper, \"/mcp/message\");\n    }\n\n    @Bean\n    RouterFunction<?> mcpRouterFunction(WebFluxSseServerTransportProvider transportProvider) {\n        return transportProvider.getRouterFunction();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: LLM Generation Response in MCP (JSON)\nDESCRIPTION: Example of a sampling/createMessage response in the Model Context Protocol, including the generated content, model used, and stop reason.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/client/sampling.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"role\": \"assistant\",\n    \"content\": {\n      \"type\": \"text\",\n      \"text\": \"The capital of France is Paris.\"\n    },\n    \"model\": \"claude-3-sonnet-20240307\",\n    \"stopReason\": \"endTurn\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing query processing logic for MCP Client\nDESCRIPTION: Method to process user queries, interact with Claude AI, and handle tool calls in the MCP client.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nasync processQuery(query: string) {\n  const messages: MessageParam[] = [\n    {\n      role: \"user\",\n      content: query,\n    },\n  ];\n\n  const response = await this.anthropic.messages.create({\n    model: \"claude-3-5-sonnet-20241022\",\n    max_tokens: 1000,\n    messages,\n    tools: this.tools,\n  });\n\n  const finalText = [];\n  const toolResults = [];\n\n  for (const content of response.content) {\n    if (content.type === \"text\") {\n      finalText.push(content.text);\n    } else if (content.type === \"tool_use\") {\n      const toolName = content.name;\n      const toolArgs = content.input as { [x: string]: unknown } | undefined;\n\n      const result = await this.mcp.callTool({\n        name: toolName,\n        arguments: toolArgs,\n      });\n      toolResults.push(result);\n      finalText.push(\n        `[Calling tool ${toolName} with args ${JSON.stringify(toolArgs)}]`\n      );\n\n      messages.push({\n        role: \"user\",\n        content: result.content as string,\n      });\n\n      const response = await this.anthropic.messages.create({\n        model: \"claude-3-5-sonnet-20241022\",\n        max_tokens: 1000,\n        messages,\n      });\n\n      finalText.push(\n        response.content[0].type === \"text\" ? response.content[0].text : \"\"\n      );\n    }\n  }\n\n  return finalText.join(\"\\n\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing main entry point for MCP Client\nDESCRIPTION: Main function to initialize the MCP client, connect to the server, and start the chat loop.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  if (process.argv.length < 3) {\n    console.log(\"Usage: node index.ts <path_to_server_script>\");\n    return;\n  }\n  const mcpClient = new MCPClient();\n  try {\n    await mcpClient.connectToServer(process.argv[2]);\n    await mcpClient.chatLoop();\n  } finally {\n    await mcpClient.cleanup();\n    process.exit(0);\n  }\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Defining System Operation Tool in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a tool for executing system commands, showcasing the structure for more complex tool definitions.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/tools.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"execute_command\",\n  description: \"Run a shell command\",\n  inputSchema: {\n    type: \"object\",\n    properties: {\n      command: { type: \"string\" },\n      args: { type: \"array\", items: { type: \"string\" } }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Initializing MCP Sync Server in Java\nDESCRIPTION: This snippet demonstrates how to create and configure a synchronous MCP server, including setting server info, capabilities, and registering tools, resources, and prompts.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// Create a server with custom configuration\nMcpSyncServer syncServer = McpServer.sync(transportProvider)\n    .serverInfo(\"my-server\", \"1.0.0\")\n    .capabilities(ServerCapabilities.builder()\n        .resources(true)     // Enable resource support\n        .tools(true)         // Enable tool support\n        .prompts(true)       // Enable prompt support\n        .logging()           // Enable logging support\n        .completions()      // Enable completions support\n        .build())\n    .build();\n\n// Register tools, resources, and prompts\nsyncServer.addTool(syncToolSpecification);\nsyncServer.addResource(syncResourceSpecification);\nsyncServer.addPrompt(syncPromptSpecification);\n\n// Close the server when done\nsyncServer.close();\n```\n\n----------------------------------------\n\nTITLE: Setting up MCP Client Connection\nDESCRIPTION: Initializes the MCP client with stdio transport and connects to the server to list available tools.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#2025-04-23_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\nvar (command, arguments) = GetCommandAndArguments(args);\n\nvar clientTransport = new StdioClientTransport(new()\n{\n    Name = \"Demo Server\",\n    Command = command,\n    Arguments = arguments,\n});\n\nawait using var mcpClient = await McpClientFactory.CreateAsync(clientTransport);\n\nvar tools = await mcpClient.ListToolsAsync();\nforeach (var tool in tools)\n{\n    Console.WriteLine($\"Connected to server with tools: {tool.Name}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Content Response Structure in TypeScript\nDESCRIPTION: Describes the TypeScript structure for resource content responses, including URI, MIME type, and either text content or base64-encoded binary data.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/resources.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  contents: [\n    {\n      uri: string;        // The URI of the resource\n      mimeType?: string;  // Optional MIME type\n\n      // One of:\n      text?: string;      // For text resources\n      blob?: string;      // For binary resources (base64 encoded)\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Complete OAuth Authorization Flow for MCP\nDESCRIPTION: Comprehensive sequence diagram illustrating the complete authorization flow for MCP, including server discovery, dynamic client registration, PKCE implementation, and token exchange process.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/authorization.mdx#2025-04-23_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant B as User-Agent (Browser)\n    participant C as Client\n    participant M as MCP Server\n\n    C->>M: GET /.well-known/oauth-authorization-server\n    alt Server Supports Discovery\n        M->>C: Authorization Server Metadata\n    else No Discovery\n        M->>C: 404 (Use default endpoints)\n    end\n\n    alt Dynamic Client Registration\n        C->>M: POST /register\n        M->>C: Client Credentials\n    end\n\n    Note over C: Generate PKCE Parameters\n    C->>B: Open browser with authorization URL + code_challenge\n    B->>M: Authorization Request\n    Note over M: User /authorizes\n    M->>B: Redirect to callback with authorization code\n    B->>C: Authorization code callback\n    C->>M: Token Request + code_verifier\n    M->>C: Access Token (+ Refresh Token)\n    C->>M: API Requests with Access Token\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Object Structure in TypeScript\nDESCRIPTION: Shows the TypeScript object structure for defining direct resources in MCP. Each resource includes a URI identifier, name, optional description, and MIME type.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/resources.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  uri: string;           // Unique identifier for the resource\n  name: string;          // Human-readable name\n  description?: string;  // Optional description\n  mimeType?: string;     // Optional MIME type\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Logging Notifications in MCP Server using Java\nDESCRIPTION: This snippet shows how to send structured log messages to clients with different severity levels using the MCP server's logging capabilities.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#2025-04-23_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n// Send a log message to clients\nserver.loggingNotification(LoggingMessageNotification.builder()\n    .level(LoggingLevel.INFO)\n    .logger(\"custom-logger\")\n    .data(\"Custom log message\")\n    .build());\n```\n\n----------------------------------------\n\nTITLE: MCP Server Implementation in Python\nDESCRIPTION: Example implementation of an MCP server in Python, demonstrating server creation, resource listing functionality, and running the server with stdio transport.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/architecture.mdx#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport mcp.types as types\nfrom mcp.server import Server\nfrom mcp.server.stdio import stdio_server\n\napp = Server(\"example-server\")\n\n@app.list_resources()\nasync def list_resources() -> list[types.Resource]:\n    return [\n        types.Resource(\n            uri=\"example://resource\",\n            name=\"Example Resource\"\n        )\n    ]\n\nasync def main():\n    async with stdio_server() as streams:\n        await app.run(\n            streams[0],\n            streams[1],\n            app.create_initialization_options()\n        )\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Implementing Helper Functions for Weather API in Python\nDESCRIPTION: Python helper functions for making API requests to the National Weather Service and formatting alert data.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync def make_nws_request(url: str) -> dict[str, Any] | None:\n    \"\"\"Make a request to the NWS API with proper error handling.\"\"\"\n    headers = {\n        \"User-Agent\": USER_AGENT,\n        \"Accept\": \"application/geo+json\"\n    }\n    async with httpx.AsyncClient() as client:\n        try:\n            response = await client.get(url, headers=headers, timeout=30.0)\n            response.raise_for_status()\n            return response.json()\n        except Exception:\n            return None\n\ndef format_alert(feature: dict) -> str:\n    \"\"\"Format an alert feature into a readable string.\"\"\"\n    props = feature[\"properties\"]\n    return f\"\"\"\nEvent: {props.get('event', 'Unknown')}\nArea: {props.get('areaDesc', 'Unknown')}\nSeverity: {props.get('severity', 'Unknown')}\nDescription: {props.get('description', 'No description available')}\nInstructions: {props.get('instruction', 'No specific instructions provided')}\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level Request in JSON-RPC\nDESCRIPTION: Demonstrates how clients can send a logging/setLevel request to configure the minimum log level. This allows clients to control the verbosity of log messages they receive.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/utilities/logging.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"logging/setLevel\",\n  \"params\": {\n    \"level\": \"info\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sampling Request Format in TypeScript\nDESCRIPTION: TypeScript interface defining the structure of MCP sampling requests. It includes message formats, model preferences, system prompt configuration, and various sampling parameters.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/sampling.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  messages: [\n    {\n      role: \"user\" | \"assistant\",\n      content: {\n        type: \"text\" | \"image\",\n\n        // For text:\n        text?: string,\n\n        // For images:\n        data?: string,             // base64 encoded\n        mimeType?: string\n      }\n    }\n  ],\n  modelPreferences?: {\n    hints?: [{\n      name?: string                // Suggested model name/family\n    }],\n    costPriority?: number,         // 0-1, importance of minimizing cost\n    speedPriority?: number,        // 0-1, importance of low latency\n    intelligencePriority?: number  // 0-1, importance of capabilities\n  },\n  systemPrompt?: string,\n  includeContext?: \"none\" | \"thisServer\" | \"allServers\",\n  temperature?: number,\n  maxTokens: number,\n  stopSequences?: string[],\n  metadata?: Record<string, unknown>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Prompts in MCP Server (TypeScript)\nDESCRIPTION: Provides a complete example of implementing prompts in an MCP server using TypeScript, including prompt definitions, list and get handlers.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/prompts.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Server } from \"@modelcontextprotocol/sdk/server\";\nimport {\n  ListPromptsRequestSchema,\n  GetPromptRequestSchema\n} from \"@modelcontextprotocol/sdk/types\";\n\nconst PROMPTS = {\n  \"git-commit\": {\n    name: \"git-commit\",\n    description: \"Generate a Git commit message\",\n    arguments: [\n      {\n        name: \"changes\",\n        description: \"Git diff or description of changes\",\n        required: true\n      }\n    ]\n  },\n  \"explain-code\": {\n    name: \"explain-code\",\n    description: \"Explain how code works\",\n    arguments: [\n      {\n        name: \"code\",\n        description: \"Code to explain\",\n        required: true\n      },\n      {\n        name: \"language\",\n        description: \"Programming language\",\n        required: false\n      }\n    ]\n  }\n};\n\nconst server = new Server({\n  name: \"example-prompts-server\",\n  version: \"1.0.0\"\n}, {\n  capabilities: {\n    prompts: {}\n  }\n});\n\n// List available prompts\nserver.setRequestHandler(ListPromptsRequestSchema, async () => {\n  return {\n    prompts: Object.values(PROMPTS)\n  };\n});\n\n// Get specific prompt\nserver.setRequestHandler(GetPromptRequestSchema, async (request) => {\n  const prompt = PROMPTS[request.params.name];\n  if (!prompt) {\n    throw new Error(`Prompt not found: ${request.params.name}`);\n  }\n\n  if (request.params.name === \"git-commit\") {\n    return {\n      messages: [\n        {\n          role: \"user\",\n          content: {\n            type: \"text\",\n            text: `Generate a concise but descriptive commit message for these changes:\\n\\n${request.params.arguments?.changes}`\n          }\n        }\n      ]\n    };\n  }\n\n  if (request.params.name === \"explain-code\") {\n    const language = request.params.arguments?.language || \"Unknown\";\n    return {\n      messages: [\n        {\n          role: \"user\",\n          content: {\n            type: \"text\",\n            text: `Explain how this ${language} code works:\\n\\n${request.params.arguments?.code}`\n          }\n        }\n      ]\n    };\n  }\n\n  throw new Error(\"Prompt implementation not found\");\n});\n```\n\n----------------------------------------\n\nTITLE: MCP Roots Message Flow (Mermaid)\nDESCRIPTION: Mermaid sequence diagram illustrating the message flow between server and client for listing roots and handling root list changes in the Model Context Protocol.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/client/roots.mdx#2025-04-23_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Server\n    participant Client\n\n    Note over Server,Client: Discovery\n    Server->>Client: roots/list\n    Client-->>Server: Available roots\n\n    Note over Server,Client: Changes\n    Client--)Server: notifications/roots/list_changed\n    Server->>Client: roots/list\n    Client-->>Server: Updated roots\n```\n\n----------------------------------------\n\nTITLE: Implementing server connection method for MCP Client\nDESCRIPTION: Method to connect the MCP client to a server, list available tools, and handle connection errors.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nasync connectToServer(serverScriptPath: string) {\n  try {\n    const isJs = serverScriptPath.endsWith(\".js\");\n    const isPy = serverScriptPath.endsWith(\".py\");\n    if (!isJs && !isPy) {\n      throw new Error(\"Server script must be a .js or .py file\");\n    }\n    const command = isPy\n      ? process.platform === \"win32\"\n        ? \"python\"\n        : \"python3\"\n      : process.execPath;\n\n    this.transport = new StdioClientTransport({\n      command,\n      args: [serverScriptPath],\n    });\n    this.mcp.connect(this.transport);\n\n    const toolsResult = await this.mcp.listTools();\n    this.tools = toolsResult.tools.map((tool) => {\n      return {\n        name: tool.name,\n        description: tool.description,\n        input_schema: tool.inputSchema,\n      };\n    });\n    console.log(\n      \"Connected to server with tools:\",\n      this.tools.map(({ name }) => name)\n    );\n  } catch (e) {\n    console.log(\"Failed to connect to MCP server: \", e);\n    throw e;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing interactive chat interface for MCP Client\nDESCRIPTION: Methods to create an interactive chat loop and handle cleanup for the MCP client.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nasync chatLoop() {\n  const rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n  });\n\n  try {\n    console.log(\"\\nMCP Client Started!\");\n    console.log(\"Type your queries or 'quit' to exit.\");\n\n    while (true) {\n      const message = await rl.question(\"\\nQuery: \");\n      if (message.toLowerCase() === \"quit\") {\n        break;\n      }\n      const response = await this.processQuery(message);\n      console.log(\"\\n\" + response);\n    }\n  } finally {\n    rl.close();\n  }\n}\n\nasync cleanup() {\n  await this.mcp.close();\n}\n```\n\n----------------------------------------\n\nTITLE: MCP Server Implementation in TypeScript\nDESCRIPTION: Example implementation of an MCP server in TypeScript, demonstrating server initialization, request handling, and transport connection using stdio.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/architecture.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Server } from \"@modelcontextprotocol/sdk/server/index.js\";\nimport { StdioServerTransport } from \"@modelcontextprotocol/sdk/server/stdio.js\";\n\nconst server = new Server({\n  name: \"example-server\",\n  version: \"1.0.0\"\n}, {\n  capabilities: {\n    resources: {}\n  }\n});\n\n// Handle requests\nserver.setRequestHandler(ListResourcesRequestSchema, async () => {\n  return {\n    resources: [\n      {\n        uri: \"example://resource\",\n        name: \"Example Resource\"\n      }\n    ]\n  };\n});\n\n// Connect transport\nconst transport = new StdioServerTransport();\nawait server.connect(transport);\n```\n\n----------------------------------------\n\nTITLE: Implementing Synchronous Resource Specification in Java\nDESCRIPTION: Demonstrates how to create a synchronous resource specification using the Model Context Protocol Java SDK. The specification includes a resource definition with name, description, and MIME type, along with a handler function for reading the resource.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#2025-04-23_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nvar syncResourceSpecification = new McpServerFeatures.SyncResourceSpecification(\n    new Resource(\"custom://resource\", \"name\", \"description\", \"mime-type\", null),\n    (exchange, request) -> {\n        // Resource read implementation\n        return new ReadResourceResult(contents);\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Managing Filesystem Roots with MCP Client in Java\nDESCRIPTION: Shows how to manage filesystem roots when the roots capability is enabled. Roots define the boundaries of where servers can operate within the filesystem, and can be dynamically added or removed.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-client.mdx#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// Add a root dynamically\nclient.addRoot(new Root(\"file:///path\", \"description\"));\n\n// Remove a root\nclient.removeRoot(\"file:///path\");\n\n// Notify server of roots changes\nclient.rootsListChangedNotification();\n```\n\n----------------------------------------\n\nTITLE: Receiving Initialize Response in JSON-RPC Format\nDESCRIPTION: An example of an initialize response sent by the server to the client. It includes the protocol version, server capabilities, and server information. This response confirms the negotiated protocol version and available features for the session.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/basic/lifecycle.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"protocolVersion\": \"2024-11-05\",\n    \"capabilities\": {\n      \"logging\": {},\n      \"prompts\": {\n        \"listChanged\": true\n      },\n      \"resources\": {\n        \"subscribe\": true,\n        \"listChanged\": true\n      },\n      \"tools\": {\n        \"listChanged\": true\n      }\n    },\n    \"serverInfo\": {\n      \"name\": \"ExampleServer\",\n      \"version\": \"1.0.0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Prompt Specification in Java\nDESCRIPTION: Shows how to create an asynchronous prompt specification using the Model Context Protocol Java SDK. The specification includes a prompt definition with name, description, and arguments, along with an asynchronous handler function for processing prompt requests.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#2025-04-23_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nvar asyncPromptSpecification = new McpServerFeatures.AsyncPromptSpecification(\n    new Prompt(\"greeting\", \"description\", List.of(\n        new PromptArgument(\"name\", \"description\", true)\n    )),\n    (exchange, request) -> {\n        // Prompt implementation\n        return Mono.just(new GetPromptResult(description, messages));\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Sending Log Messages in Python MCP Server\nDESCRIPTION: This Python code snippet demonstrates how to send log messages from an MCP server to the client. It's useful for providing logging information to the client application across all transport types.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/tools/debugging.mdx#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nserver.request_context.session.send_log_message(\n  level=\"info\",\n  data=\"Server started successfully\",\n)\n```\n\n----------------------------------------\n\nTITLE: Message Flow Diagram for Tool Operations\nDESCRIPTION: Mermaid sequence diagram illustrating the message flow between LLM, Client, and Server for tool discovery, selection, invocation, and updates.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/tools.mdx#2025-04-23_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant LLM\n    participant Client\n    participant Server\n\n    Note over Client,Server: Discovery\n    Client->>Server: tools/list\n    Server-->>Client: List of tools\n\n    Note over Client,LLM: Tool Selection\n    LLM->>Client: Select tool to use\n\n    Note over Client,Server: Invocation\n    Client->>Server: tools/call\n    Server-->>Client: Tool result\n    Client->>LLM: Process result\n\n    Note over Client,Server: Updates\n    Server--)Client: tools/list_changed\n    Client->>Server: tools/list\n    Server-->>Client: Updated tools\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Template Structure in TypeScript\nDESCRIPTION: Outlines the TypeScript object structure for resource templates in MCP, which are used for dynamic resource generation based on URI templates following RFC 6570.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/resources.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  uriTemplate: string;   // URI template following RFC 6570\n  name: string;          // Human-readable name for this type\n  description?: string;  // Optional description\n  mimeType?: string;     // Optional MIME type for all matching resources\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Resource Specification in Java\nDESCRIPTION: Shows how to create an asynchronous resource specification using the Model Context Protocol Java SDK. The specification includes a resource definition with name, description, and MIME type, along with an asynchronous handler function for reading the resource.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#2025-04-23_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nvar asyncResourceSpecification = new McpServerFeatures.AsyncResourceSpecification(\n    new Resource(\"custom://resource\", \"name\", \"description\", \"mime-type\", null),\n    (exchange, request) -> {\n        // Resource read implementation\n        return Mono.just(new ReadResourceResult(contents));\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Protocol Error Response in JSON-RPC\nDESCRIPTION: JSON-RPC error response for protocol-level errors, such as unknown tools or invalid arguments.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/tools.mdx#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"error\": {\n    \"code\": -32602,\n    \"message\": \"Unknown tool: invalid_tool_name\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running MCP Client with server script\nDESCRIPTION: Commands to build the TypeScript project and run the MCP client with a specified server script.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n# Build TypeScript\nnpm run build\n\n# Run the client\nnode build/index.js path/to/server.py # python server\nnode build/index.js path/to/build/index.js # node server\n```\n\n----------------------------------------\n\nTITLE: Implementing Tool Execution Handler\nDESCRIPTION: Kotlin implementation of the MCP tool execution handler for weather alerts and forecasts.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_30\n\nLANGUAGE: kotlin\nCODE:\n```\nval httpClient = HttpClient {\n    defaultRequest {\n        url(\"https://api.weather.gov\")\n        headers {\n            append(\"Accept\", \"application/geo+json\")\n            append(\"User-Agent\", \"WeatherApiClient/1.0\")\n        }\n        contentType(ContentType.Application.Json)\n    }\n    install(ContentNegotiation) { json(Json { ignoreUnknownKeys = true }) }\n}\n\nserver.addTool(\n    name = \"get_alerts\",\n    description = \"\"\"\n        Get weather alerts for a US state. Input is Two-letter US state code (e.g. CA, NY)\n    \"\"\".trimIndent(),\n    inputSchema = Tool.Input(\n        properties = buildJsonObject {\n            putJsonObject(\"state\") {\n                put(\"type\", \"string\")\n                put(\"description\", \"Two-letter US state code (e.g. CA, NY)\")\n            }\n        },\n        required = listOf(\"state\")\n    )\n) { request ->\n    val state = request.arguments[\"state\"]?.jsonPrimitive?.content\n    if (state == null) {\n        return@addTool CallToolResult(\n            content = listOf(TextContent(\"The 'state' parameter is required.\"))\n        )\n    }\n\n    val alerts = httpClient.getAlerts(state)\n\n    CallToolResult(content = alerts.map { TextContent(it) })\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing MCP Client-Server Architecture with Mermaid\nDESCRIPTION: This diagram illustrates the client-server architecture of MCP, showing how a host application can connect to multiple MCP servers which in turn connect to local and remote data sources.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/introduction.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    subgraph \"Your Computer\"\n        Host[\"Host with MCP Client\\n(Claude, IDEs, Tools)\"]\n        S1[\"MCP Server A\"]\n        S2[\"MCP Server B\"]\n        S3[\"MCP Server C\"]\n        Host <-->|\"MCP Protocol\"| S1\n        Host <-->|\"MCP Protocol\"| S2\n        Host <-->|\"MCP Protocol\"| S3\n        S1 <--> D1[(\"Local\\nData Source A\")]\n        S2 <--> D2[(\"Local\\nData Source B\")]\n    end\n    subgraph \"Internet\"\n        S3 <-->|\"Web APIs\"| D3[(\"Remote\\nService C\")]\n    end\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging Support for MCP Client in Java\nDESCRIPTION: Shows how to configure logging for an MCP client, allowing the client to receive and filter log messages from the server. The client can set the minimum logging level and provide a consumer for handling log notifications.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-client.mdx#2025-04-23_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nvar mcpClient = McpClient.sync(transport)\n        .loggingConsumer(notification -> {\n            System.out.println(\"Received log message: \" + notification.data());\n        })\n        .build();\n\nmcpClient.initialize();\n\nmcpClient.setLoggingLevel(McpSchema.LoggingLevel.INFO);\n\n// Call the tool that can sends logging notifications\nCallToolResult result = mcpClient.callTool(new McpSchema.CallToolRequest(\"logging-test\", Map.of()));\n```\n\n----------------------------------------\n\nTITLE: Adding Core MCP Gradle Dependency\nDESCRIPTION: Gradle configuration for including the core MCP functionality in a Java project.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-overview.mdx#2025-04-23_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  implementation platform(\"io.modelcontextprotocol.sdk:mcp\")\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Prompts in MCP Server (Python)\nDESCRIPTION: Demonstrates a complete implementation of prompts in an MCP server using Python, including prompt definitions and handlers for listing and retrieving prompts.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/prompts.mdx#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom mcp.server import Server\nimport mcp.types as types\n\n# Define available prompts\nPROMPTS = {\n    \"git-commit\": types.Prompt(\n        name=\"git-commit\",\n        description=\"Generate a Git commit message\",\n        arguments=[\n            types.PromptArgument(\n                name=\"changes\",\n                description=\"Git diff or description of changes\",\n                required=True\n            )\n        ],\n    ),\n    \"explain-code\": types.Prompt(\n        name=\"explain-code\",\n        description=\"Explain how code works\",\n        arguments=[\n            types.PromptArgument(\n                name=\"code\",\n                description=\"Code to explain\",\n                required=True\n            ),\n            types.PromptArgument(\n                name=\"language\",\n                description=\"Programming language\",\n                required=False\n            )\n        ],\n    )\n}\n\n# Initialize server\napp = Server(\"example-prompts-server\")\n\n@app.list_prompts()\nasync def list_prompts() -> list[types.Prompt]:\n    return list(PROMPTS.values())\n\n@app.get_prompt()\nasync def get_prompt(\n    name: str, arguments: dict[str, str] | None = None\n) -> types.GetPromptResult:\n    if name not in PROMPTS:\n        raise ValueError(f\"Prompt not found: {name}\")\n\n    if name == \"git-commit\":\n        changes = arguments.get(\"changes\") if arguments else \"\"\n        return types.GetPromptResult(\n            messages=[\n                types.PromptMessage(\n                    role=\"user\",\n                    content=types.TextContent(\n                        type=\"text\",\n                        text=f\"Generate a concise but descriptive commit message \"\n                        f\"for these changes:\\n\\n{changes}\"\n                    )\n                )\n            ]\n        )\n\n    if name == \"explain-code\":\n        code = arguments.get(\"code\") if arguments else \"\"\n        language = arguments.get(\"language\", \"Unknown\") if arguments else \"Unknown\"\n        return types.GetPromptResult(\n            messages=[\n                types.PromptMessage(\n                    role=\"user\",\n                    content=types.TextContent(\n                        type=\"text\",\n                        text=f\"Explain how this {language} code works:\\n\\n{code}\"\n                    )\n                )\n            ]\n        )\n\n    raise ValueError(\"Prompt implementation not found\")\n```\n\n----------------------------------------\n\nTITLE: MCP Prompts Message Flow Diagram\nDESCRIPTION: Mermaid sequence diagram illustrating the message flow for prompt discovery, usage, and list change notifications in the Model Context Protocol.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/prompts.mdx#2025-04-23_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Server\n\n    Note over Client,Server: Discovery\n    Client->>Server: prompts/list\n    Server-->>Client: List of prompts\n\n    Note over Client,Server: Usage\n    Client->>Server: prompts/get\n    Server-->>Client: Prompt content\n\n    opt listChanged\n      Note over Client,Server: Changes\n      Server--)Client: prompts/list_changed\n      Client->>Server: prompts/list\n      Server-->>Client: Updated prompts\n    end\n```\n\n----------------------------------------\n\nTITLE: Interactive Chat Loop Implementation\nDESCRIPTION: Implementation of the interactive chat interface and resource cleanup functionality.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync def chat_loop(self):\n    \"\"\"Run an interactive chat loop\"\"\"\n    print(\"\\nMCP Client Started!\")\n    print(\"Type your queries or 'quit' to exit.\")\n\n    while True:\n        try:\n            query = input(\"\\nQuery: \").strip()\n\n            if query.lower() == 'quit':\n                break\n\n            response = await self.process_query(query)\n            print(\"\\n\" + response)\n\n        except Exception as e:\n            print(f\"\\nError: {str(e)}\")\n\nasync def cleanup(self):\n    \"\"\"Clean up resources\"\"\"\n    await self.exit_stack.aclose()\n```\n\n----------------------------------------\n\nTITLE: Handling Dynamic Prompts with Embedded Context\nDESCRIPTION: Demonstrates how to handle a prompts/get request for a dynamic prompt with embedded resource context, including system logs and code files.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/prompts.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": {\n        \"type\": \"text\",\n        \"text\": \"Analyze these system logs and the code file for any issues:\"\n      }\n    },\n    {\n      \"role\": \"user\",\n      \"content\": {\n        \"type\": \"resource\",\n        \"resource\": {\n          \"uri\": \"logs://recent?timeframe=1h\",\n          \"text\": \"[2024-03-14 15:32:11] ERROR: Connection timeout in network.py:127\\n[2024-03-14 15:32:15] WARN: Retrying connection (attempt 2/3)\\n[2024-03-14 15:32:20] ERROR: Max retries exceeded\",\n          \"mimeType\": \"text/plain\"\n        }\n      }\n    },\n    {\n      \"role\": \"user\",\n      \"content\": {\n        \"type\": \"resource\",\n        \"resource\": {\n          \"uri\": \"file:///path/to/code.py\",\n          \"text\": \"def connect_to_service(timeout=30):\\n    retries = 3\\n    for attempt in range(retries):\\n        try:\\n            return establish_connection(timeout)\\n        except TimeoutError:\\n            if attempt == retries - 1:\\n                raise\\n            time.sleep(5)\\n\\ndef establish_connection(timeout):\\n    # Connection implementation\\n    pass\",\n          \"mimeType\": \"text/x-python\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Tool Errors in TypeScript\nDESCRIPTION: This code demonstrates proper error handling for tools in TypeScript, showing how to report errors within the result object.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/tools.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  // Tool operation\n  const result = performOperation();\n  return {\n    content: [\n      {\n        type: \"text\",\n        text: `Operation successful: ${result}`\n      }\n    ]\n  };\n} catch (error) {\n  return {\n    isError: true,\n    content: [\n      {\n        type: \"text\",\n        text: `Error: ${error.message}`\n      }\n    ]\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Tool Errors in Python\nDESCRIPTION: This code shows proper error handling for tools in Python, demonstrating how to report errors within the result object.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/tools.mdx#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    # Tool operation\n    result = perform_operation()\n    return types.CallToolResult(\n        content=[\n            types.TextContent(\n                type=\"text\",\n                text=f\"Operation successful: {result}\"\n            )\n        ]\n    )\nexcept Exception as error:\n    return types.CallToolResult(\n        isError=True,\n        content=[\n            types.TextContent(\n                type=\"text\",\n                text=f\"Error: {str(error)}\"\n            )\n        ]\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server Capabilities in Java\nDESCRIPTION: This snippet demonstrates how to configure various capabilities for an MCP server, including resource support, tool support, prompt support, and logging.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nvar capabilities = ServerCapabilities.builder()\n    .resources(false, true)  // Resource support with list changes notifications\n    .tools(true)            // Tool support with list changes notifications\n    .prompts(true)          // Prompt support with list changes notifications\n    .logging()              // Enable logging support (enabled by default with logging level INFO)\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Model Preferences Configuration with Hints\nDESCRIPTION: Example JSON configuration for model preferences in MCP, including model hints and priority values for cost, speed, and intelligence.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/client/sampling.mdx#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hints\": [\n    { \"name\": \"claude-3-sonnet\" }, // Prefer Sonnet-class models\n    { \"name\": \"claude\" } // Fall back to any Claude model\n  ],\n  \"costPriority\": 0.3, // Cost is less important\n  \"speedPriority\": 0.8, // Speed is very important\n  \"intelligencePriority\": 0.5 // Moderate capability needs\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sampling in Synchronous MCP Server (Java)\nDESCRIPTION: Demonstrates how to create a synchronous MCP server with a tool that uses sampling capabilities. It includes checking for client sampling support, creating a sampling request, and processing the result.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#2025-04-23_snippet_16\n\nLANGUAGE: java\nCODE:\n```\n// Create a server\nMcpSyncServer server = McpServer.sync(transportProvider)\n    .serverInfo(\"my-server\", \"1.0.0\")\n    .build();\n\n// Define a tool that uses sampling\nvar calculatorTool = new McpServerFeatures.SyncToolSpecification(\n    new Tool(\"ai-calculator\", \"Performs calculations using AI\", schema),\n    (exchange, arguments) -> {\n        // Check if client supports sampling\n        if (exchange.getClientCapabilities().sampling() == null) {\n            return new CallToolResult(\"Client does not support AI capabilities\", false);\n        }\n        \n        // Create a sampling request\n        McpSchema.CreateMessageRequest request = McpSchema.CreateMessageRequest.builder()\n            .messages(List.of(new McpSchema.SamplingMessage(McpSchema.Role.USER,\n                new McpSchema.TextContent(\"Calculate: \" + arguments.get(\"expression\")))\n            .modelPreferences(McpSchema.ModelPreferences.builder()\n                .hints(List.of(\n                    McpSchema.ModelHint.of(\"claude-3-sonnet\"),\n                    McpSchema.ModelHint.of(\"claude\")\n                ))\n                .intelligencePriority(0.8)  // Prioritize intelligence\n                .speedPriority(0.5)         // Moderate speed importance\n                .build())\n            .systemPrompt(\"You are a helpful calculator assistant. Provide only the numerical answer.\")\n            .maxTokens(100)\n            .build();\n        \n        // Request sampling from the client\n        McpSchema.CreateMessageResult result = exchange.createMessage(request);\n        \n        // Process the result\n        String answer = result.content().text();\n        return new CallToolResult(answer, false);\n    }\n);\n\n// Add the tool to the server\nserver.addTool(calculatorTool);\n```\n\n----------------------------------------\n\nTITLE: Calling Tools Response in JSON-RPC\nDESCRIPTION: JSON-RPC response containing the result of a tool invocation, including content and error status.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/tools.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"result\": {\n    \"content\": [\n      {\n        \"type\": \"text\",\n        \"text\": \"Current weather in New York:\\nTemperature: 72Â°F\\nConditions: Partly cloudy\"\n      }\n    ],\n    \"isError\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MCP Server\nDESCRIPTION: Kotlin code for creating and configuring an MCP server instance with standard IO transport.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nfun `run mcp server`() {\n    val server = Server(\n        Implementation(\n            name = \"weather\", \n            version = \"1.0.0\" \n        ),\n        ServerOptions(\n            capabilities = ServerCapabilities(tools = ServerCapabilities.Tools(listChanged = true))\n        )\n    )\n\n    val transport = StdioServerTransport(\n        System.`in`.asInput(),\n        System.out.asSink().buffered()\n    )\n\n    runBlocking {\n        server.connect(transport)\n        val done = Job()\n        server.onClose {\n            done.complete()\n        }\n        done.join()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Tools Response in JSON-RPC\nDESCRIPTION: JSON-RPC response containing a list of available tools, including tool metadata and pagination information.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/tools.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"tools\": [\n      {\n        \"name\": \"get_weather\",\n        \"description\": \"Get current weather information for a location\",\n        \"inputSchema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"location\": {\n              \"type\": \"string\",\n              \"description\": \"City name or zip code\"\n            }\n          },\n          \"required\": [\"location\"]\n        }\n      }\n    ],\n    \"nextCursor\": \"next-page-cursor\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Synchronous Tool Specification in Java\nDESCRIPTION: Demonstrates how to create a synchronous tool specification for a basic calculator using the Model Context Protocol Java SDK. The specification includes a JSON schema for the tool's parameters and a handler function to implement the tool's logic.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#2025-04-23_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nvar schema = \"\"\"\n            {\n              \"type\" : \"object\",\n              \"id\" : \"urn:jsonschema:Operation\",\n              \"properties\" : {\n                \"operation\" : {\n                  \"type\" : \"string\"\n                },\n                \"a\" : {\n                  \"type\" : \"number\"\n                },\n                \"b\" : {\n                  \"type\" : \"number\"\n                }\n              }\n            }\n            \"\"\";\nvar syncToolSpecification = new McpServerFeatures.SyncToolSpecification(\n    new Tool(\"calculator\", \"Basic calculator\", schema),\n    (exchange, arguments) -> {\n        // Tool implementation\n        return new CallToolResult(result, false);\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Resource URI Format in MCP\nDESCRIPTION: Demonstrates the standard format for Resource URIs in the Model Context Protocol, showing how protocols, hosts, and paths are structured.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/resources.mdx#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[protocol]://[host]/[path]\n```\n\n----------------------------------------\n\nTITLE: Defining MCP Tools with Annotations in TypeScript\nDESCRIPTION: This snippet demonstrates how to define tools with annotations for different scenarios in TypeScript, including a read-only search tool, a destructive file deletion tool, and a non-destructive database record creation tool.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/tools.mdx#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// A read-only search tool\n{\n  name: \"web_search\",\n  description: \"Search the web for information\",\n  inputSchema: {\n    type: \"object\",\n    properties: {\n      query: { type: \"string\" }\n    },\n    required: [\"query\"]\n  },\n  annotations: {\n    title: \"Web Search\",\n    readOnlyHint: true,\n    openWorldHint: true\n  }\n}\n\n// A destructive file deletion tool\n{\n  name: \"delete_file\",\n  description: \"Delete a file from the filesystem\",\n  inputSchema: {\n    type: \"object\",\n    properties: {\n      path: { type: \"string\" }\n    },\n    required: [\"path\"]\n  },\n  annotations: {\n    title: \"Delete File\",\n    readOnlyHint: false,\n    destructiveHint: true,\n    idempotentHint: true,\n    openWorldHint: false\n  }\n}\n\n// A non-destructive database record creation tool\n{\n  name: \"create_record\",\n  description: \"Create a new record in the database\",\n  inputSchema: {\n    type: \"object\",\n    properties: {\n      table: { type: \"string\" },\n      data: { type: \"object\" }\n    },\n    required: [\"table\", \"data\"]\n  },\n  annotations: {\n    title: \"Create Database Record\",\n    readOnlyHint: false,\n    destructiveHint: false,\n    idempotentHint: false,\n    openWorldHint: false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Logging in MCP Server Tool (Java)\nDESCRIPTION: Shows how to implement logging support in an MCP server tool, including creating a tool specification that sends log messages using different severity levels and building a server with logging capabilities.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#2025-04-23_snippet_19\n\nLANGUAGE: java\nCODE:\n```\nvar tool = new McpServerFeatures.AsyncToolSpecification(\n    new McpSchema.Tool(\"logging-test\", \"Test logging notifications\", emptyJsonSchema),\n    (exchange, request) -> {  \n\n      exchange.loggingNotification( // Use the exchange to send log messages\n          McpSchema.LoggingMessageNotification.builder()\n            .level(McpSchema.LoggingLevel.DEBUG)\n            .logger(\"test-logger\")\n            .data(\"Debug message\")\n            .build())\n        .block();\n\n      return Mono.just(new CallToolResult(\"Logging test completed\", false));\n    });\n\nvar mcpServer = McpServer.async(mcpServerTransportProvider)\n  .serverInfo(\"test-server\", \"1.0.0\")\n  .capabilities(\n    ServerCapabilities.builder()\n      .logging() // Enable logging support\n      .tools(true)\n      .build())\n  .tools(tool)\n  .build();\n```\n\n----------------------------------------\n\nTITLE: SSE Transport Implementation\nDESCRIPTION: Server-Sent Events transport implementation examples for both client and server using TypeScript and Python.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/transports.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from \"express\";\n\nconst app = express();\n\nconst server = new Server({\n  name: \"example-server\",\n  version: \"1.0.0\"\n}, {\n  capabilities: {}\n});\n\nlet transport: SSEServerTransport | null = null;\n\napp.get(\"/sse\", (req, res) => {\n  transport = new SSEServerTransport(\"/messages\", res);\n  server.connect(transport);\n});\n\napp.post(\"/messages\", (req, res) => {\n  if (transport) {\n    transport.handlePostMessage(req, res);\n  }\n});\n\napp.listen(3000);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new Client({\n  name: \"example-client\",\n  version: \"1.0.0\"\n}, {\n  capabilities: {}\n});\n\nconst transport = new SSEClientTransport(\n  new URL(\"http://localhost:3000/sse\")\n);\nawait client.connect(transport);\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom mcp.server.sse import SseServerTransport\nfrom starlette.applications import Starlette\nfrom starlette.routing import Route\n\napp = Server(\"example-server\")\nsse = SseServerTransport(\"/messages\")\n\nasync def handle_sse(scope, receive, send):\n    async with sse.connect_sse(scope, receive, send) as streams:\n        await app.run(streams[0], streams[1], app.create_initialization_options())\n\nasync def handle_messages(scope, receive, send):\n    await sse.handle_post_message(scope, receive, send)\n\nstarlette_app = Starlette(\n    routes=[\n        Route(\"/sse\", endpoint=handle_sse),\n        Route(\"/messages\", endpoint=handle_messages, methods=[\"POST\"]),\n    ]\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nasync with sse_client(\"http://localhost:8000/sse\") as streams:\n    async with ClientSession(streams[0], streams[1]) as session:\n        await session.initialize()\n```\n\n----------------------------------------\n\nTITLE: Listing Roots Response in MCP (JSON)\nDESCRIPTION: JSON-RPC response from the client containing the list of roots. Each root includes a URI and an optional display name.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/client/roots.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"roots\": [\n      {\n        \"uri\": \"file:///home/user/projects/myproject\",\n        \"name\": \"My Project\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding MCP BOM Maven Configuration\nDESCRIPTION: Maven configuration for including the Bill of Materials (BOM) to manage dependency versions consistently across the project.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-overview.mdx#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>io.modelcontextprotocol.sdk</groupId>\n            <artifactId>mcp-bom</artifactId>\n            <version>0.9.0</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Argument Parser\nDESCRIPTION: Parses command line arguments to determine the appropriate server type (Python, Node.js, or .NET) and returns the corresponding command and arguments.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#2025-04-23_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\nstatic (string command, string[] arguments) GetCommandAndArguments(string[] args)\n{\n    return args switch\n    {\n        [var script] when script.EndsWith(\".py\") => (\"python\", args),\n        [var script] when script.EndsWith(\".js\") => (\"node\", args),\n        [var script] when Directory.Exists(script) || (File.Exists(script) && script.EndsWith(\".csproj\")) => (\"dotnet\", [\"run\", \"--project\", script, \"--no-build\"]),\n        _ => throw new NotSupportedException(\"An unsupported server script was provided. Supported scripts are .py, .js, or .csproj\")\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Weather Service Implementation\nDESCRIPTION: Java implementation of a weather service using Spring's @Tool annotation for MCP integration.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_22\n\nLANGUAGE: java\nCODE:\n```\n@Service\npublic class WeatherService {\n\n\tprivate final RestClient restClient;\n\n\tpublic WeatherService() {\n\t\tthis.restClient = RestClient.builder()\n\t\t\t.baseUrl(\"https://api.weather.gov\")\n\t\t\t.defaultHeader(\"Accept\", \"application/geo+json\")\n\t\t\t.defaultHeader(\"User-Agent\", \"WeatherApiClient/1.0 (your@email.com)\")\n\t\t\t.build();\n\t}\n\n  @Tool(description = \"Get weather forecast for a specific latitude/longitude\")\n  public String getWeatherForecastByLocation(\n      double latitude,   // Latitude coordinate\n      double longitude   // Longitude coordinate\n  ) {\n      // Returns detailed forecast including:\n      // - Temperature and unit\n      // - Wind speed and direction\n      // - Detailed forecast description\n  }\n\t\n  @Tool(description = \"Get weather alerts for a US state\")\n  public String getAlerts(\n      @ToolParam(description = \"Two-letter US state code (e.g. CA, NY)\" String state\n  ) {\n      // Returns active alerts including:\n      // - Event type\n      // - Affected area\n      // - Severity\n      // - Description\n      // - Safety instructions\n  }\n\n  // ......\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing stdio Message Exchange with Mermaid Diagram\nDESCRIPTION: A sequence diagram illustrating the communication flow between a client and server using the stdio transport. The diagram shows the subprocess launch, message exchange through stdin/stdout, optional logging via stderr, and subprocess termination.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/transports.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Server Process\n\n    Client->>+Server Process: Launch subprocess\n    loop Message Exchange\n        Client->>Server Process: Write to stdin\n        Server Process->>Client: Write to stdout\n        Server Process--)Client: Optional logs on stderr\n    end\n    Client->>Server Process: Close stdin, terminate subprocess\n    deactivate Server Process\n```\n\n----------------------------------------\n\nTITLE: Running the MCP Server for Weather Information\nDESCRIPTION: TypeScript code for the main function to run the MCP server using stdio transport, including error handling and process exit on fatal errors.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  const transport = new StdioServerTransport();\n  await server.connect(transport);\n  console.error(\"Weather MCP Server running on stdio\");\n}\n\nmain().catch((error) => {\n  console.error(\"Fatal error in main():\", error);\n  process.exit(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Resources with MCP Java Client (Async API)\nDESCRIPTION: Illustrates how to list available resources and retrieve resource content using the asynchronous API of the MCP Java client. It demonstrates asynchronous listing of resources and their names, as well as asynchronous retrieval of resource content.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-client.mdx#2025-04-23_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n// List available resources asynchronously\nclient.listResources()\n    .doOnNext(resources -> resources.forEach(resource -> \n        System.out.println(resource.getName())))\n    .subscribe();\n\n// Retrieve resource content asynchronously\nclient.getResource(\"file\", Map.of(\n        \"path\", \"/path/to/file.txt\"\n    ))\n    .subscribe();\n```\n\n----------------------------------------\n\nTITLE: Visualizing OAuth 2.1 Authorization Code Flow with PKCE for MCP\nDESCRIPTION: Sequence diagram showing the OAuth 2.1 authorization code flow with PKCE for public clients in MCP. It illustrates the interaction between the User-Agent (Browser), MCP Client, and MCP Server during the authorization process.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/authorization.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant B as User-Agent (Browser)\n    participant C as Client\n    participant M as MCP Server\n\n    C->>M: MCP Request\n    M->>C: HTTP 401 Unauthorized\n    Note over C: Generate code_verifier and code_challenge\n    C->>B: Open browser with authorization URL + code_challenge\n    B->>M: GET /authorize\n    Note over M: User logs in and authorizes\n    M->>B: Redirect to callback URL with auth code\n    B->>C: Callback with authorization code\n    C->>M: Token Request with code + code_verifier\n    M->>C: Access Token (+ Refresh Token)\n    C->>M: MCP Request with Access Token\n    Note over C,M: Begin standard MCP message exchange\n```\n\n----------------------------------------\n\nTITLE: Defining API Integration Tool in TypeScript\nDESCRIPTION: This example shows how to define a tool that integrates with an external API (GitHub in this case) to create an issue.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/tools.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: \"github_create_issue\",\n  description: \"Create a GitHub issue\",\n  inputSchema: {\n    type: \"object\",\n    properties: {\n      title: { type: \"string\" },\n      body: { type: \"string\" },\n      labels: { type: \"array\", items: { type: \"string\" } }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Synchronous Prompt Specification in Java\nDESCRIPTION: Demonstrates how to create a synchronous prompt specification using the Model Context Protocol Java SDK. The specification includes a prompt definition with name, description, and arguments, along with a handler function for processing prompt requests.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#2025-04-23_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nvar syncPromptSpecification = new McpServerFeatures.SyncPromptSpecification(\n    new Prompt(\"greeting\", \"description\", List.of(\n        new PromptArgument(\"name\", \"description\", true)\n    )),\n    (exchange, request) -> {\n        // Prompt implementation\n        return new GetPromptResult(description, messages);\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: MCP Result Interface\nDESCRIPTION: TypeScript interface defining the structure of successful response messages to requests in MCP.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/architecture.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Result {\n  [key: string]: unknown;\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing MCP Lifecycle Phases with Mermaid Diagram\nDESCRIPTION: A sequence diagram illustrating the three phases of the Model Context Protocol lifecycle: Initialization, Operation, and Shutdown. It shows the exchange of messages between the Client and Server during each phase.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/basic/lifecycle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Server\n\n    Note over Client,Server: Initialization Phase\n    activate Client\n    Client->>+Server: initialize request\n    Server-->>Client: initialize response\n    Client--)Server: initialized notification\n\n    Note over Client,Server: Operation Phase\n    rect rgb(200, 220, 250)\n        note over Client,Server: Normal protocol operations\n    end\n\n    Note over Client,Server: Shutdown\n    Client--)-Server: Disconnect\n    deactivate Server\n    Note over Client,Server: Connection closed\n```\n\n----------------------------------------\n\nTITLE: MCP Connection Lifecycle Diagram\nDESCRIPTION: A sequence diagram illustrating the initialization process of an MCP connection between client and server, including initialize request/response and initialized notification.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/architecture.mdx#2025-04-23_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Server\n\n    Client->>Server: initialize request\n    Server->>Client: initialize response\n    Client->>Server: initialized notification\n\n    Note over Client,Server: Connection ready for use\n```\n\n----------------------------------------\n\nTITLE: Response Format for sampling/createMessage\nDESCRIPTION: JSON response format for the sampling/createMessage request, showing the assistant's reply with content, model information, and stop reason.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/client/sampling.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"role\": \"assistant\",\n    \"content\": {\n      \"type\": \"text\",\n      \"text\": \"The capital of France is Paris.\"\n    },\n    \"model\": \"claude-3-sonnet-20240307\",\n    \"stopReason\": \"endTurn\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating HTTP with SSE Communication Flow in MCP\nDESCRIPTION: This diagram demonstrates the sequence of communication between a client and server using the HTTP with Server-Sent Events (SSE) transport in MCP. It shows the SSE connection establishment, endpoint event, message exchange via HTTP POST and SSE events, and connection closure.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/basic/transports.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Server\n\n    Client->>Server: Open SSE connection\n    Server->>Client: endpoint event\n    loop Message Exchange\n        Client->>Server: HTTP POST messages\n        Server->>Client: SSE message events\n    end\n    Client->>Server: Close SSE connection\n```\n\n----------------------------------------\n\nTITLE: Configuring Sampling in Asynchronous MCP Server (Java)\nDESCRIPTION: Shows how to set up an asynchronous MCP server with a tool that utilizes sampling capabilities. It includes client support checking, sampling request creation, and result processing using reactive programming.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#2025-04-23_snippet_17\n\nLANGUAGE: java\nCODE:\n```\n// Create a server\nMcpAsyncServer server = McpServer.async(transportProvider)\n    .serverInfo(\"my-server\", \"1.0.0\")\n    .build();\n\n// Define a tool that uses sampling\nvar calculatorTool = new McpServerFeatures.AsyncToolSpecification(\n    new Tool(\"ai-calculator\", \"Performs calculations using AI\", schema),\n    (exchange, arguments) -> {\n        // Check if client supports sampling\n        if (exchange.getClientCapabilities().sampling() == null) {\n            return Mono.just(new CallToolResult(\"Client does not support AI capabilities\", false));\n        }\n        \n        // Create a sampling request\n        McpSchema.CreateMessageRequest request = McpSchema.CreateMessageRequest.builder()\n            .content(new McpSchema.TextContent(\"Calculate: \" + arguments.get(\"expression\")))\n            .modelPreferences(McpSchema.ModelPreferences.builder()\n                .hints(List.of(\n                    McpSchema.ModelHint.of(\"claude-3-sonnet\"),\n                    McpSchema.ModelHint.of(\"claude\")\n                ))\n                .intelligencePriority(0.8)  // Prioritize intelligence\n                .speedPriority(0.5)         // Moderate speed importance\n                .build())\n            .systemPrompt(\"You are a helpful calculator assistant. Provide only the numerical answer.\")\n            .maxTokens(100)\n            .build();\n        \n        // Request sampling from the client\n        return exchange.createMessage(request)\n            .map(result -> {\n                // Process the result\n                String answer = result.content().text();\n                return new CallToolResult(answer, false);\n            });\n    }\n);\n\n// Add the tool to the server\nserver.addTool(calculatorTool)\n    .subscribe();\n```\n\n----------------------------------------\n\nTITLE: C# MCP Server Program Setup\nDESCRIPTION: Main program setup for C# MCP server implementation. Configures dependency injection, HTTP client, and server transport.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_33\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing ModelContextProtocol;\nusing System.Net.Http.Headers;\n\nvar builder = Host.CreateEmptyApplicationBuilder(settings: null);\n\nbuilder.Services.AddMcpServer()\n    .WithStdioServerTransport()\n    .WithToolsFromAssembly();\n\nbuilder.Services.AddSingleton(_ => {\n    var client = new HttpClient() { BaseAddress = new Uri(\"https://api.weather.gov\") };\n    client.DefaultRequestHeaders.UserAgent.Add(new ProductInfoHeaderValue(\"weather-tool\", \"1.0\"));\n    return client;\n});\n\nvar app = builder.Build();\n\nawait app.RunAsync();\n```\n\n----------------------------------------\n\nTITLE: Listing Available Prompts Request in MCP\nDESCRIPTION: JSON-RPC request for retrieving the list of available prompts from a server. Supports pagination through an optional cursor parameter.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/prompts.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"prompts/list\",\n  \"params\": {\n    \"cursor\": \"optional-cursor-value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Initialize Response in JSON-RPC\nDESCRIPTION: Example of a server's response to the initialize request, containing the supported protocol version, server capabilities, and implementation information. This response completes the negotiation phase of the initialization process.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/lifecycle.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"protocolVersion\": \"2024-11-05\",\n    \"capabilities\": {\n      \"logging\": {},\n      \"prompts\": {\n        \"listChanged\": true\n      },\n      \"resources\": {\n        \"subscribe\": true,\n        \"listChanged\": true\n      },\n      \"tools\": {\n        \"listChanged\": true\n      }\n    },\n    \"serverInfo\": {\n      \"name\": \"ExampleServer\",\n      \"version\": \"1.0.0\"\n    },\n    \"instructions\": \"Optional instructions for the client\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting LLM Generation with sampling/createMessage\nDESCRIPTION: Example request for a language model generation using the sampling/createMessage method, including messages, model preferences, and system prompt parameters.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/client/sampling.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"sampling/createMessage\",\n  \"params\": {\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": {\n          \"type\": \"text\",\n          \"text\": \"What is the capital of France?\"\n        }\n      }\n    ],\n    \"modelPreferences\": {\n      \"hints\": [\n        {\n          \"name\": \"claude-3-sonnet\"\n        }\n      ],\n      \"intelligencePriority\": 0.8,\n      \"speedPriority\": 0.5\n    },\n    \"systemPrompt\": \"You are a helpful assistant.\",\n    \"maxTokens\": 100\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Prompts with Embedded Resource Context\nDESCRIPTION: Shows how to define a dynamic prompt that includes embedded resource context, such as project logs and code files.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/prompts.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"analyze-project\",\n  \"description\": \"Analyze project logs and code\",\n  \"arguments\": [\n    {\n      \"name\": \"timeframe\",\n      \"description\": \"Time period to analyze logs\",\n      \"required\": true\n    },\n    {\n      \"name\": \"fileUri\",\n      \"description\": \"URI of code file to review\",\n      \"required\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Weather Server Project (MacOS/Linux)\nDESCRIPTION: Bash commands to create a new project directory, set up a virtual environment, install dependencies, and create the server file for the Python implementation.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Create a new directory for our project\nuv init weather\ncd weather\n\n# Create virtual environment and activate it\nuv venv\nsource .venv/bin/activate\n\n# Install dependencies\nuv add \"mcp[cli]\" httpx\n\n# Create our server file\ntouch weather.py\n```\n\n----------------------------------------\n\nTITLE: Visualizing Cancellation Timing with Mermaid Sequence Diagram\nDESCRIPTION: A sequence diagram illustrating the potential race condition between request processing and cancellation notification arrival. It shows how the server should handle cancellation based on processing status.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/basic/utilities/cancellation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n   participant Client\n   participant Server\n\n   Client->>Server: Request (ID: 123)\n   Note over Server: Processing starts\n   Client--)Server: notifications/cancelled (ID: 123)\n   alt\n      Note over Server: Processing may have<br/>completed before<br/>cancellation arrives\n   else If not completed\n      Note over Server: Stop processing\n   end\n```\n\n----------------------------------------\n\nTITLE: Sending Initialized Notification in JSON-RPC Format\nDESCRIPTION: An example of an initialized notification sent by the client to the server. This notification indicates that the client is ready to begin normal operations after successful initialization.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/basic/lifecycle.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/initialized\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSE Transport with Standard HttpClient for MCP in Java\nDESCRIPTION: Creates a framework-agnostic Server-Sent Events (SSE) client transport using Java's built-in HttpClient. This implementation is included in the core MCP module and doesn't require additional dependencies.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-client.mdx#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nMcpTransport transport = new HttpClientSseClientTransport(\"http://your-mcp-server\");\n```\n\n----------------------------------------\n\nTITLE: MCP Sampling Message Flow Diagram\nDESCRIPTION: Mermaid sequence diagram illustrating the flow between Server, Client, User, and LLM during the sampling process, including human review steps.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/client/sampling.mdx#2025-04-23_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Server\n    participant Client\n    participant User\n    participant LLM\n\n    Note over Server,Client: Server initiates sampling\n    Server->>Client: sampling/createMessage\n\n    Note over Client,User: Human-in-the-loop review\n    Client->>User: Present request for approval\n    User-->>Client: Review and approve/modify\n\n    Note over Client,LLM: Model interaction\n    Client->>LLM: Forward approved request\n    LLM-->>Client: Return generation\n\n    Note over Client,User: Response review\n    Client->>User: Present response for approval\n    User-->>Client: Review and approve/modify\n\n    Note over Server,Client: Complete request\n    Client-->>Server: Return approved response\n```\n\n----------------------------------------\n\nTITLE: MCP Sampling Message Flow (Mermaid)\nDESCRIPTION: Sequence diagram illustrating the message flow for sampling in the Model Context Protocol, including server, client, user, and LLM interactions.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/client/sampling.mdx#2025-04-23_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Server\n    participant Client\n    participant User\n    participant LLM\n\n    Note over Server,Client: Server initiates sampling\n    Server->>Client: sampling/createMessage\n\n    Note over Client,User: Human-in-the-loop review\n    Client->>User: Present request for approval\n    User-->>Client: Review and approve/modify\n\n    Note over Client,LLM: Model interaction\n    Client->>LLM: Forward approved request\n    LLM-->>Client: Return generation\n\n    Note over Client,User: Response review\n    Client->>User: Present response for approval\n    User-->>Client: Review and approve/modify\n\n    Note over Server,Client: Complete request\n    Client-->>Server: Return approved response\n```\n\n----------------------------------------\n\nTITLE: Main Entry Point Implementation in Kotlin\nDESCRIPTION: Main execution function that handles command-line arguments and initializes the MCP client.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#2025-04-23_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main(args: Array<String>) = runBlocking {\n    if (args.isEmpty()) throw IllegalArgumentException(\"Usage: java -jar <your_path>/build/libs/kotlin-mcp-client-0.1.0-all.jar <path_to_server_script>\")\n    val serverPath = args.first()\n    val client = MCPClient()\n    client.use {\n        client.connectToServer(serverPath)\n        client.chatLoop()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Client Capabilities in Java\nDESCRIPTION: Demonstrates how to configure client capabilities for the MCP client, enabling optional protocol features like filesystem roots support and LLM sampling. These capabilities determine which protocol features will be available.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-client.mdx#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nvar capabilities = ClientCapabilities.builder()\n    .roots(true)      // Enable filesystem roots support with list changes notifications\n    .sampling()       // Enable LLM sampling support\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Interactive Chat Loop Implementation in Kotlin\nDESCRIPTION: Implementation of an interactive chat loop allowing continuous user interaction until explicitly terminated.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#2025-04-23_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun chatLoop() {\n    println(\"\\nMCP Client Started!\")\n    println(\"Type your queries or 'quit' to exit.\")\n\n    while (true) {\n        print(\"\\nQuery: \")\n        val message = readLine() ?: break\n        if (message.lowercase() == \"quit\") break\n        val response = processQuery(message)\n        println(\"\\n$response\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Read Operation\nDESCRIPTION: JSON-RPC request and response format for reading resource contents by URI.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/resources.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"method\": \"resources/read\",\n  \"params\": {\n    \"uri\": \"file:///project/src/main.rs\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"result\": {\n    \"contents\": [\n      {\n        \"uri\": \"file:///project/src/main.rs\",\n        \"mimeType\": \"text/x-rust\",\n        \"text\": \"fn main() {\\n    println!(\\\"Hello world!\\\");\\n}\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON-RPC Request Structure in TypeScript\nDESCRIPTION: This snippet defines the structure of a JSON-RPC 2.0 request message used in the Model Context Protocol. It specifies the required fields and their types, including the JSON-RPC version, request ID, method, and optional parameters.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  jsonrpc: \"2.0\";\n  id: string | number;\n  method: string;\n  params?: {\n    [key: string]: unknown;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Getting a Specific Prompt Request in MCP\nDESCRIPTION: JSON-RPC request for retrieving a specific prompt in the Model Context Protocol. It includes the prompt name and arguments for customization.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/prompts.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"method\": \"prompts/get\",\n  \"params\": {\n    \"name\": \"code_review\",\n    \"arguments\": {\n      \"code\": \"def hello():\\n    print('world')\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Request Structure in TypeScript for Model Context Protocol\nDESCRIPTION: This snippet defines the structure of a Request message in the Model Context Protocol. It includes required fields like jsonrpc version, id, method, and optional params. The id must be a string or number and cannot be null or previously used in the same session.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/basic/messages.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  jsonrpc: \"2.0\";\n  id: string | number;\n  method: string;\n  params?: {\n    [key: string]: unknown;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Text Content in MCP Messages (JSON)\nDESCRIPTION: Example of how text content is structured in MCP sampling messages.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/sampling.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"text\",\n  \"text\": \"The message content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Response Structure in TypeScript for Model Context Protocol\nDESCRIPTION: This snippet outlines the structure of a Response message in the Model Context Protocol. It includes the jsonrpc version, id matching the corresponding request, and either a result or an error object. The error object must contain a code (integer) and a message, with an optional data field.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/basic/messages.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  jsonrpc: \"2.0\";\n  id: string | number;\n  result?: {\n    [key: string]: unknown;\n  }\n  error?: {\n    code: number;\n    message: string;\n    data?: unknown;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Initialize Request in JSON-RPC\nDESCRIPTION: Example of a client initialize request that establishes protocol version compatibility, shares client capabilities, and provides implementation details. This is the mandatory first interaction in the MCP lifecycle that negotiates the session parameters.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/lifecycle.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"initialize\",\n  \"params\": {\n    \"protocolVersion\": \"2024-11-05\",\n    \"capabilities\": {\n      \"roots\": {\n        \"listChanged\": true\n      },\n      \"sampling\": {}\n    },\n    \"clientInfo\": {\n      \"name\": \"ExampleClient\",\n      \"version\": \"1.0.0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Tools Request in JSON-RPC\nDESCRIPTION: JSON-RPC request for invoking a tool, specifying the tool name and required arguments.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/tools.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"get_weather\",\n    \"arguments\": {\n      \"location\": \"New York\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Value Conversion Helper in Kotlin\nDESCRIPTION: Helper function to convert JsonObject to JsonValue format for Anthropic API compatibility.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#2025-04-23_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate fun JsonObject.toJsonValue(): JsonValue {\n    val mapper = ObjectMapper()\n    val node = mapper.readTree(this.toString())\n    return JsonValue.fromJsonNode(node)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Notification Structure in TypeScript for Model Context Protocol\nDESCRIPTION: This snippet defines the structure of a Notification message in the Model Context Protocol. It includes the jsonrpc version, method, and optional params. Notifications do not include an id field and do not expect a response.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/basic/messages.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  jsonrpc: \"2.0\";\n  method: string;\n  params?: {\n    [key: string]: unknown;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Resources Request in JSON-RPC\nDESCRIPTION: Shows the JSON-RPC request format for listing available resources, including optional pagination support.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/resources.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"resources/list\",\n  \"params\": {\n    \"cursor\": \"optional-cursor-value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Prompt List Changed Notification in MCP\nDESCRIPTION: JSON-RPC notification sent by servers when the list of available prompts changes in the Model Context Protocol.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/prompts.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/prompts/list_changed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON-RPC Response Structure in TypeScript\nDESCRIPTION: This snippet outlines the structure of a JSON-RPC 2.0 response message in the Model Context Protocol. It includes fields for the JSON-RPC version, response ID, optional result object, and an optional error object with code, message, and optional data.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  jsonrpc: \"2.0\";\n  id: string | number;\n  result?: {\n    [key: string]: unknown;\n  }\n  error?: {\n    code: number;\n    message: string;\n    data?: unknown;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Subscription Request in JSON-RPC\nDESCRIPTION: Illustrates the JSON-RPC request format for subscribing to changes in a specific resource identified by its URI.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/resources.mdx#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 4,\n  \"method\": \"resources/subscribe\",\n  \"params\": {\n    \"uri\": \"file:///project/src/main.rs\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sampling Response Format in TypeScript\nDESCRIPTION: TypeScript interface defining the structure of MCP sampling responses returned by the client. It includes model information, stop reason, role, and content details.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/sampling.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  model: string,  // Name of the model used\n  stopReason?: \"endTurn\" | \"stopSequence\" | \"maxTokens\" | string,\n  role: \"user\" | \"assistant\",\n  content: {\n    type: \"text\" | \"image\",\n    text?: string,\n    data?: string,\n    mimeType?: string\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Initialization Error in JSON-RPC\nDESCRIPTION: Example of an error response during initialization, specifically for a protocol version mismatch. The error includes the supported protocol versions and the requested version that wasn't supported.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/lifecycle.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"error\": {\n    \"code\": -32602,\n    \"message\": \"Unsupported protocol version\",\n    \"data\": {\n      \"supported\": [\"2024-11-05\"],\n      \"requested\": \"1.0.0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Completions in JSON-RPC\nDESCRIPTION: Example of a completion request message to get suggestions for a prompt argument. Shows the structure for requesting completions with a prompt reference type and argument details.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/utilities/completion.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"completion/complete\",\n  \"params\": {\n    \"ref\": {\n      \"type\": \"ref/prompt\",\n      \"name\": \"code_review\"\n    },\n    \"argument\": {\n      \"name\": \"language\",\n      \"value\": \"py\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Tools Request in JSON-RPC\nDESCRIPTION: JSON-RPC request for listing available tools, supporting pagination with an optional cursor parameter.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/tools.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/list\",\n  \"params\": {\n    \"cursor\": \"optional-cursor-value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Initialized Notification in JSON-RPC\nDESCRIPTION: Example of the client's initialized notification, sent after successful initialization to indicate readiness for normal operations. This notification completes the initialization phase of the MCP lifecycle.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/lifecycle.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/initialized\"\n}\n```\n\n----------------------------------------\n\nTITLE: Resource List Changed Notification in JSON-RPC\nDESCRIPTION: Shows the JSON-RPC notification format for informing clients that the list of available resources has changed.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/resources.mdx#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/resources/list_changed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Initialization Error in JSON-RPC Format\nDESCRIPTION: An example of an error response for initialization, specifically for an unsupported protocol version. It demonstrates how errors should be structured and includes additional data about supported versions.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/basic/lifecycle.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"error\": {\n    \"code\": -32602,\n    \"message\": \"Unsupported protocol version\",\n    \"data\": {\n      \"supported\": [\"2024-11-05\"],\n      \"requested\": \"1.0.0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Python MCP Weather Server\nDESCRIPTION: Python code to initialize and run the MCP weather server using stdio transport.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    # Initialize and run the server\n    mcp.run(transport='stdio')\n```\n\n----------------------------------------\n\nTITLE: Defining Prompt Structure in TypeScript\nDESCRIPTION: Demonstrates the structure of a prompt definition in TypeScript, including name, description, and optional arguments.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/prompts.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: string;              // Unique identifier for the prompt\n  description?: string;      // Human-readable description\n  arguments?: [              // Optional list of arguments\n    {\n      name: string;          // Argument identifier\n      description?: string;  // Argument description\n      required?: boolean;    // Whether argument is required\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Text Resource Content Representation in JSON\nDESCRIPTION: JSON representation of a text resource content, including URI, MIME type, and the actual text content.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/resources.mdx#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uri\": \"file:///example.txt\",\n  \"mimeType\": \"text/plain\",\n  \"text\": \"Resource content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Specific Prompt Request/Response\nDESCRIPTION: JSON-RPC messages for retrieving a specific prompt with arguments. Shows request format with prompt name and arguments, and response with prompt messages.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/prompts.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"method\": \"prompts/get\",\n  \"params\": {\n    \"name\": \"code_review\",\n    \"arguments\": {\n      \"code\": \"def hello():\\n    print('world')\"\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"result\": {\n    \"description\": \"Code review prompt\",\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": {\n          \"type\": \"text\",\n          \"text\": \"Please review this Python code:\\ndef hello():\\n    print('world')\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Packages and Setting Up FastMCP Instance in Python\nDESCRIPTION: Python code to import necessary packages and initialize the FastMCP server for the weather application.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Any\nimport httpx\nfrom mcp.server.fastmcp import FastMCP\n\n# Initialize FastMCP server\nmcp = FastMCP(\"weather\")\n\n# Constants\nNWS_API_BASE = \"https://api.weather.gov\"\nUSER_AGENT = \"weather-app/1.0\"\n```\n\n----------------------------------------\n\nTITLE: Tool Result with Image Content in JSON\nDESCRIPTION: JSON structure for a tool result containing image content with base64-encoded data.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/tools.mdx#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"image\",\n  \"data\": \"base64-encoded-data\",\n  \"mimeType\": \"image/png\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Resource Templates Request in JSON-RPC\nDESCRIPTION: JSON-RPC request for listing available resource templates, which allow servers to expose parameterized resources.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/resources.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"method\": \"resources/templates/list\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Weather Project\nDESCRIPTION: TypeScript configuration (tsconfig.json) specifying compiler options, include and exclude patterns for the weather information server project.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2022\",\n    \"module\": \"Node16\",\n    \"moduleResolution\": \"Node16\",\n    \"outDir\": \"./build\",\n    \"rootDir\": \"./src\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true\n  },\n  \"include\": [\"src/**/*\"],\n  \"exclude\": [\"node_modules\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Resources Response in JSON-RPC\nDESCRIPTION: Shows the JSON-RPC response format for reading resource contents, including the resource's URI, MIME type, and text content.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/resources.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"result\": {\n    \"contents\": [\n      {\n        \"uri\": \"file:///project/src/main.rs\",\n        \"mimeType\": \"text/x-rust\",\n        \"text\": \"fn main() {\\n    println!(\\\"Hello world!\\\");\\n}\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Ping-Pong Sequence with Mermaid\nDESCRIPTION: A Mermaid sequence diagram illustrating the ping request and response flow between a sender and receiver in the Model Context Protocol.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/basic/utilities/ping.mdx#2025-04-23_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Sender\n    participant Receiver\n\n    Sender->>Receiver: ping request\n    Receiver->>Sender: empty response\n```\n\n----------------------------------------\n\nTITLE: Ping Sequence Diagram\nDESCRIPTION: Mermaid sequence diagram showing the ping request/response flow between sender and receiver.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/utilities/ping.mdx#2025-04-23_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Sender\n    participant Receiver\n\n    Sender->>Receiver: ping request\n    Receiver->>Sender: empty response\n```\n\n----------------------------------------\n\nTITLE: Implementing MCP Client class structure in TypeScript\nDESCRIPTION: Basic structure of the MCPClient class, including imports, environment setup, and class constructor.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Anthropic } from \"@anthropic-ai/sdk\";\nimport {\n  MessageParam,\n  Tool,\n} from \"@anthropic-ai/sdk/resources/messages/messages.mjs\";\nimport { Client } from \"@modelcontextprotocol/sdk/client/index.js\";\nimport { StdioClientTransport } from \"@modelcontextprotocol/sdk/client/stdio.js\";\nimport readline from \"readline/promises\";\nimport dotenv from \"dotenv\";\n\ndotenv.config();\n\nconst ANTHROPIC_API_KEY = process.env.ANTHROPIC_API_KEY;\nif (!ANTHROPIC_API_KEY) {\n  throw new Error(\"ANTHROPIC_API_KEY is not set\");\n}\n\nclass MCPClient {\n  private mcp: Client;\n  private anthropic: Anthropic;\n  private transport: StdioClientTransport | null = null;\n  private tools: Tool[] = [];\n\n  constructor() {\n    this.anthropic = new Anthropic({\n      apiKey: ANTHROPIC_API_KEY,\n    });\n    this.mcp = new Client({ name: \"mcp-client-cli\", version: \"1.0.0\" });\n  }\n  // methods will go here\n}\n```\n\n----------------------------------------\n\nTITLE: Progress Notification Example - JSON RPC\nDESCRIPTION: Example of a JSON RPC progress notification message showing the structure for reporting progress updates, including current progress, total, and status message.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/utilities/progress.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/progress\",\n  \"params\": {\n    \"progressToken\": \"abc123\",\n    \"progress\": 50,\n    \"total\": 100,\n    \"message\": \"Reticulating splines...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Prompts with prompts/get Request\nDESCRIPTION: Illustrates how to use a prompt by making a prompts/get request, including the request parameters and expected response format.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/prompts.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Request\n{\n  method: \"prompts/get\",\n  params: {\n    name: \"analyze-code\",\n    arguments: {\n      language: \"python\"\n    }\n  }\n}\n\n// Response\n{\n  description: \"Analyze Python code for potential improvements\",\n  messages: [\n    {\n      role: \"user\",\n      content: {\n        type: \"text\",\n        text: \"Please analyze the following Python code for potential improvements:\\n\\n```python\\ndef calculate_sum(numbers):\\n    total = 0\\n    for num in numbers:\\n        total = total + num\\n    return total\\n\\nresult = calculate_sum([1, 2, 3, 4, 5])\\nprint(result)\\n```\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Tools Response in JSON-RPC\nDESCRIPTION: JSON-RPC response containing the result of a tool invocation, including content and error status.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/tools.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"result\": {\n    \"content\": [\n      {\n        \"type\": \"text\",\n        \"text\": \"Current weather in New York:\\nTemperature: 72Â°F\\nConditions: Partly cloudy\"\n      }\n    ],\n    \"isError\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tool Result with Audio Content in JSON\nDESCRIPTION: JSON structure for a tool result containing audio content with base64-encoded data.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/tools.mdx#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"audio\",\n  \"data\": \"base64-encoded-audio-data\",\n  \"mimeType\": \"audio/wav\"\n}\n```\n\n----------------------------------------\n\nTITLE: C# Weather Tools Implementation\nDESCRIPTION: Implementation of weather tools class containing methods for fetching weather alerts and forecasts from the National Weather Service API.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_34\n\nLANGUAGE: csharp\nCODE:\n```\nusing ModelContextProtocol.Server;\nusing System.ComponentModel;\nusing System.Net.Http.Json;\nusing System.Text.Json;\n\nnamespace QuickstartWeatherServer.Tools;\n\n[McpServerToolType]\npublic static class WeatherTools\n{\n    [McpServerTool, Description(\"Get weather alerts for a US state.\")]\n    public static async Task<string> GetAlerts(\n        HttpClient client,\n        [Description(\"The US state to get alerts for.\")] string state)\n    {\n        var jsonElement = await client.GetFromJsonAsync<JsonElement>($\"/alerts/active/area/{state}\");\n        var alerts = jsonElement.GetProperty(\"features\").EnumerateArray();\n\n        if (!alerts.Any())\n        {\n            return \"No active alerts for this state.\";\n        }\n\n        return string.Join(\"\\n--\\n\", alerts.Select(alert =>\n        {\n            JsonElement properties = alert.GetProperty(\"properties\");\n            return $\"\"\"\n                    Event: {properties.GetProperty(\"event\").GetString()}\n                    Area: {properties.GetProperty(\"areaDesc\").GetString()}\n                    Severity: {properties.GetProperty(\"severity\").GetString()}\n                    Description: {properties.GetProperty(\"description\").GetString()}\n                    Instruction: {properties.GetProperty(\"instruction\").GetString()}\n                    \"\"\";\n        }));\n    }\n\n    [McpServerTool, Description(\"Get weather forecast for a location.\")]\n    public static async Task<string> GetForecast(\n        HttpClient client,\n        [Description(\"Latitude of the location.\")] double latitude,\n        [Description(\"Longitude of the location.\")] double longitude)\n    {\n        var jsonElement = await client.GetFromJsonAsync<JsonElement>($\"/points/{latitude},{longitude}\");\n        var periods = jsonElement.GetProperty(\"properties\").GetProperty(\"periods\").EnumerateArray();\n\n        return string.Join(\"\\n---\\n\", periods.Select(period => $\"\"\"\n                {period.GetProperty(\"name\").GetString()}\n                Temperature: {period.GetProperty(\"temperature\").GetInt32()}Â°F\n                Wind: {period.GetProperty(\"windSpeed\").GetString()} {period.GetProperty(\"windDirection\").GetString()}\n                Forecast: {period.GetProperty(\"detailedForecast\").GetString()}\n                \"\"\"));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Tool Result with Text Content in JSON\nDESCRIPTION: JSON structure for a tool result containing text content.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/tools.mdx#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"text\",\n  \"text\": \"Tool result text\"\n}\n```\n\n----------------------------------------\n\nTITLE: Content Type Examples\nDESCRIPTION: JSON examples showing different content type structures for prompt messages including text, image, audio and embedded resources.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/prompts.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"text\",\n  \"text\": \"The text content of the message\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"image\",\n  \"data\": \"base64-encoded-image-data\",\n  \"mimeType\": \"image/png\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"audio\",\n  \"data\": \"base64-encoded-audio-data\",\n  \"mimeType\": \"audio/wav\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"resource\",\n  \"resource\": {\n    \"uri\": \"resource://example\",\n    \"mimeType\": \"text/plain\",\n    \"text\": \"Resource content\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MCP Error Interface\nDESCRIPTION: TypeScript interface defining the structure of error responses in MCP, indicating that a request failed.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/architecture.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Error {\n  code: number;\n  message: string;\n  data?: unknown;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Resource Templates Response in JSON-RPC\nDESCRIPTION: Demonstrates the JSON-RPC response format for listing resource templates, including URI templates and associated metadata.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/resources.mdx#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"result\": {\n    \"resourceTemplates\": [\n      {\n        \"uriTemplate\": \"file:///{path}\",\n        \"name\": \"Project Files\",\n        \"description\": \"Access files in the project directory\",\n        \"mimeType\": \"application/octet-stream\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Resource Templates Request in JSON-RPC\nDESCRIPTION: Illustrates the JSON-RPC request format for listing available resource templates, which allow parameterized resource access.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/resources.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"method\": \"resources/templates/list\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Prompt System with MCP Java Client (Sync API)\nDESCRIPTION: Shows how to interact with server-side prompt templates using the synchronous API of the MCP Java client. It covers listing available prompt templates and executing a prompt template with custom parameters.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-client.mdx#2025-04-23_snippet_13\n\nLANGUAGE: java\nCODE:\n```\n// List available prompt templates\nvar prompts = client.listPrompts();\nprompts.forEach(prompt -> System.out.println(prompt.getName()));\n\n// Execute a prompt template with parameters\nvar response = client.executePrompt(\"echo\", Map.of(\n    \"text\", \"Hello, World!\"\n));\n```\n\n----------------------------------------\n\nTITLE: Visualizing Pagination Flow in Model Context Protocol using Mermaid\nDESCRIPTION: This Mermaid sequence diagram illustrates the pagination flow between the client and server in MCP. It shows the initial request, the pagination loop, and subsequent requests with cursors.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/utilities/pagination.mdx#2025-04-23_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Server\n\n    Client->>Server: List Request (no cursor)\n    loop Pagination Loop\n      Server-->>Client: Page of results + nextCursor\n      Client->>Server: List Request (with cursor)\n    end\n```\n\n----------------------------------------\n\nTITLE: Requesting Roots List in MCP\nDESCRIPTION: JSON-RPC request format for servers to retrieve the list of roots from clients.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/client/roots.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"roots/list\"\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Tools Capability in JSON\nDESCRIPTION: JSON snippet showing how servers declare support for tools capability in MCP, including the listChanged flag.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/tools.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"capabilities\": {\n    \"tools\": {\n      \"listChanged\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Ping Request Format\nDESCRIPTION: Standard JSON-RPC request format for initiating a ping with no parameters. Used by either client or server to check connection status.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/utilities/ping.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"123\",\n  \"method\": \"ping\"\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Roots Capability in JSON\nDESCRIPTION: JSON snippet showing how clients declare support for roots during initialization. The 'listChanged' property indicates whether the client will emit notifications when the list of roots changes.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/roots.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"capabilities\": {\n    \"roots\": {\n      \"listChanged\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing MCP Core Component Architecture using Mermaid\nDESCRIPTION: Architecture diagram showing the relationship between Host, Clients, Servers, and Resources across local and remote environments. Illustrates how multiple clients connect to different servers accessing various resources.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/architecture/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    subgraph \"Application Host Process\"\n        H[Host]\n        C1[Client 1]\n        C2[Client 2]\n        C3[Client 3]\n        H --> C1\n        H --> C2\n        H --> C3\n    end\n\n    subgraph \"Local machine\"\n        S1[Server 1<br>Files & Git]\n        S2[Server 2<br>Database]\n        R1[(\"Local<br>Resource A\")]\n        R2[(\"Local<br>Resource B\")]\n\n        C1 --> S1\n        C2 --> S2\n        S1 <--> R1\n        S2 <--> R2\n    end\n\n    subgraph \"Internet\"\n        S3[Server 3<br>External APIs]\n        R3[(\"Remote<br>Resource C\")]\n\n        C3 --> S3\n        S3 <--> R3\n    end\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Repository Roots in JSON\nDESCRIPTION: Example JSON array showing root definitions for multiple repositories, each with a unique URI and name.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/roots.mdx#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"uri\": \"file:///home/user/repos/frontend\",\n    \"name\": \"Frontend Repository\"\n  },\n  {\n    \"uri\": \"file:///home/user/repos/backend\",\n    \"name\": \"Backend Repository\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Requesting Auto-completions with MCP Java Client (Sync API)\nDESCRIPTION: Illustrates how to request auto-completions for prompts and resource URIs using the synchronous API of the MCP Java client. It demonstrates creating a CompleteRequest object and using it to request completions.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-client.mdx#2025-04-23_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nCompleteRequest request = new CompleteRequest(\n        new PromptReference(\"code_review\"),\n        new CompleteRequest.CompleteArgument(\"language\", \"py\"));\n\nCompleteResult result = syncMcpClient.completeCompletion(request);\n```\n\n----------------------------------------\n\nTITLE: Tool Result with Embedded Resource in JSON\nDESCRIPTION: JSON structure for a tool result containing an embedded resource with URI and content.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/tools.mdx#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"resource\",\n  \"resource\": {\n    \"uri\": \"resource://example\",\n    \"mimeType\": \"text/plain\",\n    \"text\": \"Resource content\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python MCP Project Environment\nDESCRIPTION: Commands to initialize a new Python project using uv package manager, create virtual environment and install required dependencies.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Create project directory\nuv init mcp-client\ncd mcp-client\n\n# Create virtual environment\nuv venv\n\n# Activate virtual environment\n# On Windows:\n.venv\\Scripts\\activate\n# On Unix or MacOS:\nsource .venv/bin/activate\n\n# Install required packages\nuv add mcp anthropic python-dotenv\n\n# Remove boilerplate files\nrm main.py\n\n# Create our main file\ntouch client.py\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Ping Response Format\nDESCRIPTION: Standard JSON-RPC response format for responding to a ping request. Must contain an empty result object.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/utilities/ping.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"123\",\n  \"result\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Prompts Capability in MCP Initialization\nDESCRIPTION: JSON snippet showing how servers declare support for prompts during the Model Context Protocol initialization process. It includes the 'prompts' capability with a 'listChanged' flag.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/prompts.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"capabilities\": {\n    \"prompts\": {\n      \"listChanged\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: C# Project Setup Commands\nDESCRIPTION: Commands for creating a new .NET project and adding required dependencies.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#2025-04-23_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new console -n QuickstartClient\ncd QuickstartClient\n\ndotnet add package ModelContextProtocol --prerelease\ndotnet add package Anthropic.SDK\ndotnet add package Microsoft.Extensions.Hosting\n```\n\n----------------------------------------\n\nTITLE: JSON Request Format with Pagination Cursor\nDESCRIPTION: Shows how to format a JSON-RPC request to continue pagination. The client includes the previously received cursor in the params object to retrieve the next page of results.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/utilities/pagination.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"resources/list\",\n  \"params\": {\n    \"cursor\": \"eyJwYWdlIjogMn0=\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for MCP client project\nDESCRIPTION: JSON configuration for package.json, setting the project type to module and adding a build script.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"module\",\n  \"scripts\": {\n    \"build\": \"tsc && chmod 755 build/index.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Protocol Layer Implementation in TypeScript\nDESCRIPTION: TypeScript class definition for the Protocol layer, which handles message framing, request/response linking, and high-level communication patterns in MCP.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/architecture.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Protocol<Request, Notification, Result> {\n    // Handle incoming requests\n    setRequestHandler<T>(schema: T, handler: (request: T, extra: RequestHandlerExtra) => Promise<Result>): void\n\n    // Handle incoming notifications\n    setNotificationHandler<T>(schema: T, handler: (notification: T) => Promise<void>): void\n\n    // Send requests and await responses\n    request<T>(request: Request, schema: T, options?: RequestOptions): Promise<T>\n\n    // Send one-way notifications\n    notification(notification: Notification): Promise<void>\n}\n```\n\n----------------------------------------\n\nTITLE: Java MCP Client Implementation\nDESCRIPTION: Example of creating and using an MCP client to interact with the weather server.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_24\n\nLANGUAGE: java\nCODE:\n```\nvar stdioParams = ServerParameters.builder(\"java\")\n  .args(\"-jar\", \"/ABSOLUTE/PATH/TO/PARENT/FOLDER/mcp-weather-stdio-server-0.0.1-SNAPSHOT.jar\")\n  .build();\n\nvar stdioTransport = new StdioClientTransport(stdioParams);\n\nvar mcpClient = McpClient.sync(stdioTransport).build();\n\nmcpClient.initialize();\n\nListToolsResult toolsList = mcpClient.listTools();\n\nCallToolResult weather = mcpClient.callTool(\n  new CallToolRequest(\"getWeatherForecastByLocation\",\n      Map.of(\"latitude\", \"47.6062\", \"longitude\", \"-122.3321\")));\n\nCallToolResult alert = mcpClient.callTool(\n  new CallToolRequest(\"getAlerts\", Map.of(\"state\", \"NY\")));\n\nmcpClient.closeGracefully();\n```\n\n----------------------------------------\n\nTITLE: Handling Initialization Error in MCP\nDESCRIPTION: Example of a JSON-RPC error response for an initialization failure due to an unsupported protocol version. It includes the supported versions and the requested version that caused the error.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/lifecycle.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"error\": {\n    \"code\": -32602,\n    \"message\": \"Unsupported protocol version\",\n    \"data\": {\n      \"supported\": [\"2024-11-05\"],\n      \"requested\": \"1.0.0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Cancellation Notification in JSON-RPC 2.0 Format\nDESCRIPTION: Example of a JSON-RPC 2.0 notification message for cancelling an in-progress request. It includes the request ID to cancel and an optional reason string.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/basic/utilities/cancellation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/cancelled\",\n  \"params\": {\n    \"requestId\": \"123\",\n    \"reason\": \"User requested cancellation\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting JSON Response with Pagination in Model Context Protocol\nDESCRIPTION: This snippet demonstrates the JSON structure for a paginated response in MCP. It includes the current page of results and an optional nextCursor field for further pagination.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/utilities/pagination.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"123\",\n  \"result\": {\n    \"resources\": [...],\n    \"nextCursor\": \"eyJwYWdlIjogM30=\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Templates Operations\nDESCRIPTION: JSON-RPC messages for listing available resource templates with URI patterns.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/resources.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"method\": \"resources/templates/list\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"result\": {\n    \"resourceTemplates\": [\n      {\n        \"uriTemplate\": \"file:///{path}\",\n        \"name\": \"Project Files\",\n        \"description\": \"Access files in the project directory\",\n        \"mimeType\": \"application/octet-stream\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Request Format for Paginated Results in MCP\nDESCRIPTION: Example JSON-RPC 2.0 request format showing how to request the next page of results using a cursor token.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/utilities/pagination.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"resources/list\",\n  \"params\": {\n    \"cursor\": \"eyJwYWdlIjogMn0=\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting JSON Request with Cursor for Pagination in Model Context Protocol\nDESCRIPTION: This snippet shows how to structure a JSON request to continue pagination in MCP. It includes the method name and the cursor parameter received from the previous response.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/utilities/pagination.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"resources/list\",\n  \"params\": {\n    \"cursor\": \"eyJwYWdlIjogMn0=\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pagination Flow Sequence Diagram\nDESCRIPTION: A Mermaid sequence diagram illustrating the pagination flow between client and server. It shows the initial request without a cursor, followed by a loop where the server returns results with a nextCursor and the client uses that cursor for subsequent requests.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/utilities/pagination.mdx#2025-04-23_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Server\n\n    Client->>Server: List Request (no cursor)\n    loop Pagination Loop\n      Server-->>Client: Page of results + nextCursor\n      Client->>Server: List Request (with cursor)\n    end\n```\n\n----------------------------------------\n\nTITLE: Node.js MCP Server Configuration\nDESCRIPTION: JSON configuration for setting up a Node.js-based weather MCP server in Claude Desktop.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"mcpServers\": {\n        \"weather\": {\n            \"command\": \"node\",\n            \"args\": [\n                \"/ABSOLUTE/PATH/TO/PARENT/FOLDER/weather/build/index.js\"\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Initializing MCP Async Server in Java\nDESCRIPTION: This snippet shows how to create and configure an asynchronous MCP server, including setting server info, capabilities, and registering tools, resources, and prompts using reactive programming.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Create an async server with custom configuration\nMcpAsyncServer asyncServer = McpServer.async(transportProvider)\n    .serverInfo(\"my-server\", \"1.0.0\")\n    .capabilities(ServerCapabilities.builder()\n        .resources(true)     // Enable resource support\n        .tools(true)         // Enable tool support\n        .prompts(true)       // Enable prompt support\n        .logging()           // Enable logging support\n        .build())\n    .build();\n\n// Register tools, resources, and prompts\nasyncServer.addTool(asyncToolSpecification)\n    .doOnSuccess(v -> logger.info(\"Tool registered\"))\n    .subscribe();\n\nasyncServer.addResource(asyncResourceSpecification)\n    .doOnSuccess(v -> logger.info(\"Resource registered\"))\n    .subscribe();\n\nasyncServer.addPrompt(asyncPromptSpecification)\n    .doOnSuccess(v -> logger.info(\"Prompt registered\"))\n    .subscribe();\n\n// Close the server when done\nasyncServer.close()\n    .doOnSuccess(v -> logger.info(\"Server closed\"))\n    .subscribe();\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Weather Server Project (Windows)\nDESCRIPTION: PowerShell commands to create a new project directory, set up a virtual environment, install dependencies, and create the server file for the Python implementation on Windows.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n# Create a new directory for our project\nuv init weather\ncd weather\n\n# Create virtual environment and activate it\nuv venv\n.venv\\Scripts\\activate\n\n# Install dependencies\nuv add mcp[cli] httpx\n\n# Create our server file\nnew-item weather.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Boot MCP Client Dependencies\nDESCRIPTION: Maven dependency configuration for including the Spring AI MCP client starter in a Spring Boot application.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_25\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.springframework.ai</groupId>\n    <artifactId>spring-ai-starter-mcp-client</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Resource Listing Request and Response\nDESCRIPTION: JSON-RPC request and response format for listing available resources with pagination support.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/resources.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"resources/list\",\n  \"params\": {\n    \"cursor\": \"optional-cursor-value\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"resources\": [\n      {\n        \"uri\": \"file:///project/src/main.rs\",\n        \"name\": \"main.rs\",\n        \"description\": \"Primary application entry point\",\n        \"mimeType\": \"text/x-rust\"\n      }\n    ],\n    \"nextCursor\": \"next-page-cursor\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: List Changed Notification in JSON-RPC\nDESCRIPTION: JSON-RPC notification sent when the list of available tools changes, for servers with listChanged capability.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/tools.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/tools/list_changed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response for Unsupported Roots in MCP (JSON)\nDESCRIPTION: JSON-RPC error response example for when a client does not support roots, using the standard '-32601' error code for 'Method not found'.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/client/roots.mdx#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"error\": {\n    \"code\": -32601,\n    \"message\": \"Roots not supported\",\n    \"data\": {\n      \"reason\": \"Client does not have roots capability\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Completions in JSON-RPC\nDESCRIPTION: This example demonstrates how clients send a 'completion/complete' request to get completion suggestions, specifying what is being completed through a reference type.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/utilities/completion.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"completion/complete\",\n  \"params\": {\n    \"ref\": {\n      \"type\": \"ref/prompt\",\n      \"name\": \"code_review\"\n    },\n    \"argument\": {\n      \"name\": \"language\",\n      \"value\": \"py\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Packages and Setting Up MCP Server Instance\nDESCRIPTION: TypeScript code for importing required packages, defining constants, and creating an instance of the MCP server for the weather information application.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { McpServer } from \"@modelcontextprotocol/sdk/server/mcp.js\";\nimport { StdioServerTransport } from \"@modelcontextprotocol/sdk/server/stdio.js\";\nimport { z } from \"zod\";\n\nconst NWS_API_BASE = \"https://api.weather.gov\";\nconst USER_AGENT = \"weather-app/1.0\";\n\n// Create server instance\nconst server = new McpServer({\n  name: \"weather\",\n  version: \"1.0.0\",\n  capabilities: {\n    resources: {},\n    tools: {},\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Root List Change Notification in MCP\nDESCRIPTION: JSON-RPC notification format sent by clients to inform servers when the list of roots has changed.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/client/roots.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/roots/list_changed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Root List Changed Notification in JSON\nDESCRIPTION: JSON-RPC notification sent by clients to inform servers that the list of roots has changed.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/roots.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/roots/list_changed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Roots List Response in MCP\nDESCRIPTION: JSON-RPC response format returned by clients containing the list of available roots with their URIs and display names.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/client/roots.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"roots\": [\n      {\n        \"uri\": \"file:///home/user/projects/myproject\",\n        \"name\": \"My Project\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MCP Completion Message Flow Diagram\nDESCRIPTION: Mermaid sequence diagram showing the interaction flow between client and server during completion requests.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/utilities/completion.mdx#2025-04-23_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Server\n\n    Note over Client: User types argument\n    Client->>Server: completion/complete\n    Server-->>Client: Completion suggestions\n\n    Note over Client: User continues typing\n    Client->>Server: completion/complete\n    Server-->>Client: Refined suggestions\n```\n\n----------------------------------------\n\nTITLE: Error Response Example\nDESCRIPTION: JSON-RPC error response format for resource-related errors.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/resources.mdx#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 5,\n  \"error\": {\n    \"code\": -32002,\n    \"message\": \"Resource not found\",\n    \"data\": {\n      \"uri\": \"file:///nonexistent.txt\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Image Content Format in MCP Prompts\nDESCRIPTION: JSON structure for including image content in prompt messages, enabling multi-modal interactions with visual context.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/prompts.mdx#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"image\",\n  \"data\": \"base64-encoded-image-data\",\n  \"mimeType\": \"image/png\"\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration\nDESCRIPTION: TypeScript compiler configuration settings for the project.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/tutorials/building-a-client-node.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2022\",\n    \"module\": \"Node16\",\n    \"moduleResolution\": \"Node16\",\n    \"outDir\": \"./build\",\n    \"rootDir\": \"./src\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true\n  },\n  \"include\": [\"src/**/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Responding to Ping Request in JSON-RPC Format\nDESCRIPTION: This snippet demonstrates the required format for responding to a ping request. The response must be prompt and contain an empty result object. The 'id' field must match the request.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/utilities/ping.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"123\",\n  \"result\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Executing MCP CLI with Absolute Paths\nDESCRIPTION: Examples showing how to run the MCP CLI using absolute paths on both Unix/Linux and Windows systems. Demonstrates the supported path formats.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n# Absolute path\nnode build/index.js /Users/username/projects/mcp-server/build/index.js\n\n# Windows path (either format works)\nnode build/index.js C:/projects/mcp-server/build/index.js\nnode build/index.js C:\\\\projects\\\\mcp-server\\\\build\\\\index.js\n```\n\n----------------------------------------\n\nTITLE: Calling Tools Request in JSON-RPC\nDESCRIPTION: JSON-RPC request for invoking a specific tool, including the tool name and required arguments.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/tools.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"get_weather\",\n    \"arguments\": {\n      \"location\": \"New York\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Optional Spring Transport Gradle Dependencies\nDESCRIPTION: Gradle configuration for including Spring-specific transport implementations for WebFlux and WebMVC based SSE transport options.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-overview.mdx#2025-04-23_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\n// Optional: Spring WebFlux-based SSE client and server transport\ndependencies {\n  implementation platform(\"io.modelcontextprotocol.sdk:mcp-spring-webflux\")\n}\n\n// Optional: Spring WebMVC-based SSE server transport\ndependencies {\n  implementation platform(\"io.modelcontextprotocol.sdk:mcp-spring-webmvc\")\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Resources Request in JSON-RPC\nDESCRIPTION: Demonstrates the JSON-RPC request format for reading the contents of a specific resource using its URI.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/resources.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"method\": \"resources/read\",\n  \"params\": {\n    \"uri\": \"file:///project/src/main.rs\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Message Flow Diagram in Mermaid for Model Context Protocol Logging\nDESCRIPTION: Mermaid sequence diagram illustrating the message flow between client and server for setting log levels and sending log message notifications.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/utilities/logging.mdx#2025-04-23_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Server\n\n    Note over Client,Server: Configure Logging\n    Client->>Server: logging/setLevel (info)\n    Server-->>Client: Empty Result\n\n    Note over Client,Server: Server Activity\n    Server--)Client: notifications/message (info)\n    Server--)Client: notifications/message (warning)\n    Server--)Client: notifications/message (error)\n\n    Note over Client,Server: Level Change\n    Client->>Server: logging/setLevel (error)\n    Server-->>Client: Empty Result\n    Note over Server: Only sends error level<br/>and above\n```\n\n----------------------------------------\n\nTITLE: Initial Project Setup Commands\nDESCRIPTION: Shell commands for creating a new Node.js project and installing required dependencies.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/tutorials/building-a-client-node.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Create project directory\nmkdir mcp-client\ncd mcp-client\n\n# Initialize npm project\nnpm init -y\n\n# Install dependencies\nnpm install @modelcontextprotocol/sdk @anthropic-ai/sdk dotenv\nnpm install -D typescript @types/node\n\n# Create TypeScript config\nnpx tsc --init\n\n# Create necessary files\nmkdir src\ntouch src/client.ts\ntouch .env\n```\n\n----------------------------------------\n\nTITLE: Main Entry Point Implementation\nDESCRIPTION: Main execution logic and entry point for the MCP client application.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/tutorials/building-a-client-node.mdx#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Main execution\nasync function main() {\n  if (process.argv.length < 3) {\n    console.log(\"Usage: ts-node client.ts <path_to_server_script>\");\n    process.exit(1);\n  }\n\n  const client = new MCPClient();\n  try {\n    await client.connectToServer(process.argv[2]);\n    await client.chatLoop();\n  } catch (error) {\n    console.error(\"Error:\", error);\n    await client.cleanup();\n    process.exit(1);\n  }\n}\n\n// Run main if this is the main module\nif (import.meta.url === new URL(process.argv[1], \"file:\").href) {\n  main();\n}\n\nexport default MCPClient;\n```\n\n----------------------------------------\n\nTITLE: Adding MCP BOM Gradle Configuration\nDESCRIPTION: Gradle configuration for including the Bill of Materials (BOM) to manage dependency versions consistently across the project.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-overview.mdx#2025-04-23_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  implementation platform(\"io.modelcontextprotocol.sdk:mcp-bom:0.9.0\")\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Event Flow Diagram\nDESCRIPTION: Mermaid sequence diagram showing the flow of resource-related messages between client and server.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/resources.mdx#2025-04-23_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Server\n\n    Note over Client,Server: Resource Discovery\n    Client->>Server: resources/list\n    Server-->>Client: List of resources\n\n    Note over Client,Server: Resource Access\n    Client->>Server: resources/read\n    Server-->>Client: Resource contents\n\n    Note over Client,Server: Subscriptions\n    Client->>Server: resources/subscribe\n    Server-->>Client: Subscription confirmed\n\n    Note over Client,Server: Updates\n    Server--)Client: notifications/resources/updated\n    Client->>Server: resources/read\n    Server-->>Client: Updated contents\n```\n\n----------------------------------------\n\nTITLE: Stdio Transport Implementation\nDESCRIPTION: Implementation examples for stdio transport in both client and server configurations using TypeScript and Python.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/transports.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new Server({\n  name: \"example-server\",\n  version: \"1.0.0\"\n}, {\n  capabilities: {}\n});\n\nconst transport = new StdioServerTransport();\nawait server.connect(transport);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new Client({\n  name: \"example-client\",\n  version: \"1.0.0\"\n}, {\n  capabilities: {}\n});\n\nconst transport = new StdioClientTransport({\n  command: \"./server\",\n  args: [\"--option\", \"value\"]\n});\nawait client.connect(transport);\n```\n\nLANGUAGE: python\nCODE:\n```\napp = Server(\"example-server\")\n\nasync with stdio_server() as streams:\n    await app.run(\n        streams[0],\n        streams[1],\n        app.create_initialization_options()\n    )\n```\n\nLANGUAGE: python\nCODE:\n```\nparams = StdioServerParameters(\n    command=\"./server\",\n    args=[\"--option\", \"value\"]\n)\n\nasync with stdio_client(params) as streams:\n    async with ClientSession(streams[0], streams[1]) as session:\n        await session.initialize()\n```\n\n----------------------------------------\n\nTITLE: Tool Execution Error Response in JSON-RPC\nDESCRIPTION: JSON-RPC response for tool execution errors, indicated by isError flag and error message in content.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/tools.mdx#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 4,\n  \"result\": {\n    \"content\": [\n      {\n        \"type\": \"text\",\n        \"text\": \"Failed to fetch weather data: API rate limit exceeded\"\n      }\n    ],\n    \"isError\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Text Resource Content Representation in JSON\nDESCRIPTION: Shows the JSON format for representing text-based resource content, including URI, MIME type, and the actual text content.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/resources.mdx#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uri\": \"file:///example.txt\",\n  \"mimeType\": \"text/plain\",\n  \"text\": \"Resource content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Tool Result Content Types\nDESCRIPTION: JSON structures for different types of tool results including text, image, and embedded resources.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/tools.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"text\",\n  \"text\": \"Tool result text\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"image\",\n  \"data\": \"base64-encoded-data\",\n  \"mimeType\": \"image/png\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"resource\",\n  \"resource\": {\n    \"uri\": \"resource://example\",\n    \"mimeType\": \"text/plain\",\n    \"text\": \"Resource content\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Log Message Notification in JSON for Model Context Protocol\nDESCRIPTION: JSON-RPC notification format for log messages. Servers send these notifications to clients, including severity level, optional logger name, and arbitrary JSON-serializable data.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/utilities/logging.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/message\",\n  \"params\": {\n    \"level\": \"error\",\n    \"logger\": \"database\",\n    \"data\": {\n      \"error\": \"Connection failed\",\n      \"details\": {\n        \"host\": \"localhost\",\n        \"port\": 5432\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Describing MCP Server Requirements to Claude\nDESCRIPTION: Example of how to describe the desired MCP server functionality to Claude, including database connections, resource exposure, tools, and prompts.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/tutorials/building-mcp-with-llms.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nBuild an MCP server that:\n- Connects to my company's PostgreSQL database\n- Exposes table schemas as resources\n- Provides tools for running read-only SQL queries\n- Includes prompts for common data analysis tasks\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-step Workflows in TypeScript\nDESCRIPTION: Shows how to implement a multi-step workflow for debugging errors, demonstrating the use of asynchronous functions and multiple message exchanges.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/prompts.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst debugWorkflow = {\n  name: \"debug-error\",\n  async getMessages(error: string) {\n    return [\n      {\n        role: \"user\",\n        content: {\n          type: \"text\",\n          text: `Here's an error I'm seeing: ${error}`\n        }\n      },\n      {\n        role: \"assistant\",\n        content: {\n          type: \"text\",\n          text: \"I'll help analyze this error. What have you tried so far?\"\n        }\n      },\n      {\n        role: \"user\",\n        content: {\n          type: \"text\",\n          text: \"I've tried restarting the service, but the error persists.\"\n        }\n      }\n    ];\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Project Directory Root in JSON\nDESCRIPTION: Example JSON showing a root definition for a project directory, including a URI and a human-readable name.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/roots.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uri\": \"file:///home/user/projects/myproject\",\n  \"name\": \"My Project\"\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Message Flow with Mermaid\nDESCRIPTION: Mermaid sequence diagram illustrating the message flow between server and client for root discovery and changes.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/roots.mdx#2025-04-23_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Server\n    participant Client\n\n    Note over Server,Client: Discovery\n    Server->>Client: roots/list\n    Client-->>Server: Available roots\n\n    Note over Server,Client: Changes\n    Client--)Server: notifications/roots/list_changed\n    Server->>Client: roots/list\n    Client-->>Server: Updated roots\n```\n\n----------------------------------------\n\nTITLE: Protocol Error Response in JSON-RPC\nDESCRIPTION: JSON-RPC error response for protocol-level errors such as unknown tools or invalid arguments.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/tools.mdx#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"error\": {\n    \"code\": -32602,\n    \"message\": \"Unknown tool: invalid_tool_name\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Update Notification in JSON-RPC\nDESCRIPTION: Demonstrates the JSON-RPC notification format for informing clients about updates to a subscribed resource.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/resources.mdx#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/resources/updated\",\n  \"params\": {\n    \"uri\": \"file:///project/src/main.rs\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Installation\nDESCRIPTION: Command to verify Node.js installation by checking its version.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/user.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode --version\n```\n\n----------------------------------------\n\nTITLE: Responding to sampling/createMessage Request (JSON)\nDESCRIPTION: Example of a client's response to a sampling/createMessage request, containing the generated text, model used, and stop reason.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/sampling.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"role\": \"assistant\",\n    \"content\": {\n      \"type\": \"text\",\n      \"text\": \"The capital of France is Paris.\"\n    },\n    \"model\": \"claude-3-sonnet-20240307\",\n    \"stopReason\": \"endTurn\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Binary Resource Content Representation in JSON\nDESCRIPTION: Illustrates the JSON format for representing binary resource content, including URI, MIME type, and base64-encoded binary data.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/resources.mdx#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uri\": \"file:///example.png\",\n  \"mimeType\": \"image/png\",\n  \"blob\": \"base64-encoded-data\"\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Auto-completions with MCP Java Client (Async API)\nDESCRIPTION: Shows how to request auto-completions for prompts and resource URIs using the asynchronous API of the MCP Java client. It demonstrates creating a CompleteRequest object and using it to request completions asynchronously.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-client.mdx#2025-04-23_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nCompleteRequest request = new CompleteRequest(\n        new PromptReference(\"code_review\"),\n        new CompleteRequest.CompleteArgument(\"language\", \"py\"));\n\nMono<CompleteResult> result = mcpClient.completeCompletion(request);\n```\n\n----------------------------------------\n\nTITLE: Multiple Repositories Roots Example in MCP (JSON)\nDESCRIPTION: JSON example showing multiple root definitions for different repositories, each with its own URI and display name.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/client/roots.mdx#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"uri\": \"file:///home/user/repos/frontend\",\n    \"name\": \"Frontend Repository\"\n  },\n  {\n    \"uri\": \"file:///home/user/repos/backend\",\n    \"name\": \"Backend Repository\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Integrating MCP Tool Annotations in TypeScript Server Implementation\nDESCRIPTION: This snippet shows how to integrate tool annotations in a TypeScript server implementation using the setRequestHandler method to define a calculate_sum tool with specific annotations.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/tools.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nserver.setRequestHandler(ListToolsRequestSchema, async () => {\n  return {\n    tools: [{\n      name: \"calculate_sum\",\n      description: \"Add two numbers together\",\n      inputSchema: {\n        type: \"object\",\n        properties: {\n          a: { type: \"number\" },\n          b: { type: \"number\" }\n        },\n        required: [\"a\", \"b\"]\n      },\n      annotations: {\n        title: \"Calculate Sum\",\n        readOnlyHint: true,\n        openWorldHint: false\n      }\n    }]\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Resource Not Found Error Response in JSON-RPC\nDESCRIPTION: Demonstrates the JSON-RPC error response format for a resource not found scenario, including error code, message, and additional data.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/resources.mdx#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 5,\n  \"error\": {\n    \"code\": -32002,\n    \"message\": \"Resource not found\",\n    \"data\": {\n      \"uri\": \"file:///nonexistent.txt\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Progress Request Example - JSON RPC\nDESCRIPTION: Example of a JSON RPC request that includes a progress token in the request metadata to enable progress tracking.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/utilities/progress.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"some_method\",\n  \"params\": {\n    \"_meta\": {\n      \"progressToken\": \"abc123\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Claude Desktop Configuration with VS Code on Windows\nDESCRIPTION: Command to open the Claude for Desktop configuration file using VS Code on Windows systems. This file is used to configure MCP servers that Claude will connect to.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_36\n\nLANGUAGE: powershell\nCODE:\n```\ncode $env:AppData\\Claude\\claude_desktop_config.json\n```\n\n----------------------------------------\n\nTITLE: MCP Completion Request Example\nDESCRIPTION: JSON-RPC request format for requesting completion suggestions, demonstrating how to specify the reference type and current argument value.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/utilities/completion.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"completion/complete\",\n  \"params\": {\n    \"ref\": {\n      \"type\": \"ref/prompt\",\n      \"name\": \"code_review\"\n    },\n    \"argument\": {\n      \"name\": \"language\",\n      \"value\": \"py\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running MCP Inspector with npx\nDESCRIPTION: Basic usage of the MCP Inspector using npx without installation. Shows two command formats for running the inspector with different arguments.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/tools/inspector.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @modelcontextprotocol/inspector <command>\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @modelcontextprotocol/inspector <command> <arg1> <arg2>\n```\n\n----------------------------------------\n\nTITLE: Progress Notification Format in JSON-RPC\nDESCRIPTION: Example of a JSON-RPC notification message for progress updates. Contains the progress token, current progress value, and optional total value. Progress values must increase with each notification.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/basic/utilities/progress.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/progress\",\n  \"params\": {\n    \"progressToken\": \"abc123\",\n    \"progress\": 50,\n    \"total\": 100\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing npm project and installing dependencies for MCP client\nDESCRIPTION: Commands to create a new project directory, initialize an npm project, and install required dependencies for the MCP client.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Create project directory\nmkdir mcp-client-typescript\ncd mcp-client-typescript\n\n# Initialize npm project\nnpm init -y\n\n# Install dependencies\nnpm install @anthropic-ai/sdk @modelcontextprotocol/sdk dotenv\n\n# Install dev dependencies\nnpm install -D @types/node typescript\n\n# Create source file\ntouch index.ts\n```\n\nLANGUAGE: powershell\nCODE:\n```\n# Create project directory\nmd mcp-client-typescript\ncd mcp-client-typescript\n\n# Initialize npm project\nnpm init -y\n\n# Install dependencies\nnpm install @anthropic-ai/sdk @modelcontextprotocol/sdk dotenv\n\n# Install dev dependencies\nnpm install -D @types/node typescript\n\n# Create source file\nnew-item index.ts\n```\n\n----------------------------------------\n\nTITLE: Project Directory Root Example in MCP\nDESCRIPTION: JSON example showing a single project directory root definition with URI and display name.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/client/roots.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uri\": \"file:///home/user/projects/myproject\",\n  \"name\": \"My Project\"\n}\n```\n\n----------------------------------------\n\nTITLE: Claude Desktop Configuration - JSON Setup\nDESCRIPTION: Configuration JSON for setting up the weather server in Claude for Desktop. Specifies the server name and launch command with arguments.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"mcpServers\": {\n        \"weather\": {\n            \"command\": \"java\",\n            \"args\": [\n                \"-jar\",\n                \"/ABSOLUTE/PATH/TO/PARENT/FOLDER/weather/build/libs/weather-0.1.0-all.jar\"\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Available Prompts Response in MCP\nDESCRIPTION: JSON-RPC response containing available prompts with their names, descriptions, and required arguments. Includes pagination support through the nextCursor field.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/prompts.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"prompts\": [\n      {\n        \"name\": \"code_review\",\n        \"description\": \"Asks the LLM to analyze code quality and suggest improvements\",\n        \"arguments\": [\n          {\n            \"name\": \"code\",\n            \"description\": \"The code to review\",\n            \"required\": true\n          }\n        ]\n      }\n    ],\n    \"nextCursor\": \"next-page-cursor\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response Format with Pagination Cursor\nDESCRIPTION: Demonstrates the format of a JSON-RPC response that includes pagination. The response contains the current page of results and a nextCursor field when more results are available.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/utilities/pagination.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"123\",\n  \"result\": {\n    \"resources\": [...],\n    \"nextCursor\": \"eyJwYWdlIjogM30=\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging in MCP Client (Java)\nDESCRIPTION: Demonstrates how to set up logging support in an MCP client, including registering a logging consumer, initializing the client, setting the logging level, and calling a tool that sends logging notifications.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#2025-04-23_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nvar mcpClient = McpClient.sync(transport)\n        .loggingConsumer(notification -> {\n            System.out.println(\"Received log message: \" + notification.data());\n        })\n        .build();\n\nmcpClient.initialize();\n\nmcpClient.setLoggingLevel(McpSchema.LoggingLevel.INFO);\n\n// Call the tool that sends logging notifications\nCallToolResult result = mcpClient.callTool(new McpSchema.CallToolRequest(\"logging-test\", Map.of()));\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Weather Server in Claude Desktop Config on Windows\nDESCRIPTION: JSON configuration for Claude for Desktop that adds a weather MCP server on Windows. It specifies the command and arguments needed to run the .NET-based weather server with Windows path format.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"mcpServers\": {\n        \"weather\": {\n            \"command\": \"dotnet\",\n            \"args\": [\n                \"run\",\n                \"--project\",\n                \"C:\\\\ABSOLUTE\\\\PATH\\\\TO\\\\PROJECT\",\n                \"--no-build\"\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Windows Environment Configuration with APPDATA\nDESCRIPTION: JSON configuration showing how to set environment variables for Windows, specifically for handling APPDATA paths.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/user.mdx#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"brave-search\": {\n    \"command\": \"npx\",\n    \"args\": [\"-y\", \"@modelcontextprotocol/server-brave-search\"],\n    \"env\": {\n      \"APPDATA\": \"C:\\\\Users\\\\user\\\\AppData\\\\Roaming\\\\\",\n      \"BRAVE_API_KEY\": \"...\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Tools Capability in MCP\nDESCRIPTION: JSON structure for declaring tool support in server capabilities, indicating whether the server will notify clients of tool list changes.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/tools.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"capabilities\": {\n    \"tools\": {\n      \"listChanged\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MCP Sampling Error Response Format\nDESCRIPTION: Example JSON error response for MCP sampling requests, used when a sampling request fails such as when a user rejects the request.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/client/sampling.mdx#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"error\": {\n    \"code\": -1,\n    \"message\": \"User rejected sampling request\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response in MCP Sampling (JSON)\nDESCRIPTION: Example of an error response in the Model Context Protocol for sampling requests, including error code and message.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/client/sampling.mdx#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"error\": {\n    \"code\": -1,\n    \"message\": \"User rejected sampling request\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level Request in JSON for Model Context Protocol\nDESCRIPTION: JSON-RPC request for setting the minimum log level. Clients may send this request to configure logging verbosity.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/utilities/logging.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"logging/setLevel\",\n  \"params\": {\n    \"level\": \"info\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MCP Completion Response Example\nDESCRIPTION: JSON-RPC response format showing completion suggestions with pagination metadata.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/utilities/completion.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"completion\": {\n      \"values\": [\"python\", \"pytorch\", \"pyside\"],\n      \"total\": 10,\n      \"hasMore\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Completion Message Flow Diagram in Mermaid\nDESCRIPTION: This Mermaid sequence diagram illustrates the message flow between the client and server during the completion process, including initial and refined suggestion requests.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/utilities/completion.mdx#2025-04-23_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Server\n\n    Note over Client: User types argument\n    Client->>Server: completion/complete\n    Server-->>Client: Completion suggestions\n\n    Note over Client: User continues typing\n    Client->>Server: completion/complete\n    Server-->>Client: Refined suggestions\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Path Examples in Node.js\nDESCRIPTION: Demonstrates correct path formatting for server script execution across different operating systems, including relative paths, absolute paths, and Windows-specific path formats. Shows proper path syntax for both forward slashes and escaped backslashes.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/tutorials/building-a-client-node.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# Relative path\nnode build/client.js ./server/weather.js\n\n# Absolute path\nnode build/client.js /Users/username/projects/mcp-server/weather.js\n\n# Windows path (either format works)\nnode build/client.js C:/projects/mcp-server/weather.js\nnode build/client.js C:\\\\projects\\\\mcp-server\\\\weather.js\n```\n\n----------------------------------------\n\nTITLE: List Changed Notification in JSON-RPC\nDESCRIPTION: JSON-RPC notification sent by the server when the list of available tools changes.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/tools.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/tools/list_changed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring STDIO Transport for MCP Client in Java\nDESCRIPTION: Creates an in-process communication transport for connecting to an MCP server using standard input/output streams. This approach is suitable for scenarios where the server runs as a child process.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-client.mdx#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nServerParameters params = ServerParameters.builder(\"npx\")\n    .args(\"-y\", \"@modelcontextprotocol/server-everything\", \"dir\")\n    .build();\nMcpTransport transport = new StdioClientTransport(params);\n```\n\n----------------------------------------\n\nTITLE: Prompts List Changed Notification in MCP\nDESCRIPTION: JSON-RPC notification sent by the server when the list of available prompts changes. This notifies clients to refresh their prompt list.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/prompts.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/prompts/list_changed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Spring Boot MCP Application\nDESCRIPTION: Main Spring Boot application class that configures the MCP server and tools.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_23\n\nLANGUAGE: java\nCODE:\n```\n@SpringBootApplication\npublic class McpServerApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(McpServerApplication.class, args);\n\t}\n\n\t@Bean\n\tpublic ToolCallbackProvider weatherTools(WeatherService weatherService) {\n\t\treturn  MethodToolCallbackProvider.builder().toolObjects(weatherService).build();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Logging Capability in JSON\nDESCRIPTION: Shows how servers must declare the logging capability in their capabilities object. This is required for servers that emit log message notifications.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/utilities/logging.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"capabilities\": {\n    \"logging\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Logging Capability in JSON for Model Context Protocol\nDESCRIPTION: JSON snippet demonstrating how servers must declare the 'logging' capability in their capabilities object.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/utilities/logging.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"capabilities\": {\n    \"logging\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Workflow Diagram in Mermaid\nDESCRIPTION: Sequence diagram showing the interaction flow between user, client, Claude, MCP server, and tools.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#2025-04-23_snippet_23\n\nLANGUAGE: mermaid\nCODE:\n```\n---\nconfig:\n    theme: neutral\n---\nsequenceDiagram\n    actor User\n    participant Client\n    participant Claude\n    participant MCP_Server as MCP Server\n    participant Tools\n\n    User->>Client: Send query\n    Client<<->>MCP_Server: Get available tools\n    Client->>Claude: Send query with tool descriptions\n    Claude-->>Client: Decide tool execution\n    Client->>MCP_Server: Request tool execution\n    MCP_Server->>Tools: Execute chosen tools\n    Tools-->>MCP_Server: Return results\n    MCP_Server-->>Client: Send results\n    Client->>Claude: Send tool results\n    Claude-->>Client: Provide final response\n    Client-->>User: Display response\n```\n\n----------------------------------------\n\nTITLE: Installing UV Package Manager (MacOS/Linux)\nDESCRIPTION: Command to install the UV package manager on MacOS or Linux systems.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Declaring MCP Completion Capabilities in JSON\nDESCRIPTION: Server capability declaration to indicate support for completions functionality in MCP.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/utilities/completion.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"capabilities\": {\n    \"completions\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Weather Project in MacOS/Linux\nDESCRIPTION: Bash commands to create a new project directory, initialize an npm project, install dependencies, and create necessary files for the weather information server.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# Create a new directory for our project\nmkdir weather\ncd weather\n\n# Initialize a new npm project\nnpm init -y\n\n# Install dependencies\nnpm install @modelcontextprotocol/sdk zod\nnpm install -D @types/node typescript\n\n# Create our files\nmkdir src\ntouch src/index.ts\n```\n\n----------------------------------------\n\nTITLE: Creating STDIO Server Transport Provider in Java\nDESCRIPTION: This snippet demonstrates how to create an in-process based transport provider using STDIO for bidirectional JSON-RPC message handling.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nStdioServerTransportProvider transportProvider = new StdioServerTransportProvider(new ObjectMapper());\n```\n\n----------------------------------------\n\nTITLE: Audio Content Result in JSON\nDESCRIPTION: JSON representation of an audio content result from a tool invocation, including base64-encoded data and MIME type.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/tools.mdx#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"audio\",\n  \"data\": \"base64-encoded-audio-data\",\n  \"mimeType\": \"audio/wav\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Connection in Kotlin\nDESCRIPTION: Method to establish connection with an MCP server supporting multiple runtime environments (Node.js, Python, Java). Includes process management and tool listing functionality.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#2025-04-23_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun connectToServer(serverScriptPath: String) {\n    try {\n        val command = buildList {\n            when (serverScriptPath.substringAfterLast(\".\")) {\n                \"js\" -> add(\"node\")\n                \"py\" -> add(if (System.getProperty(\"os.name\").lowercase().contains(\"win\")) \"python\" else \"python3\")\n                \"jar\" -> addAll(listOf(\"java\", \"-jar\"))\n                else -> throw IllegalArgumentException(\"Server script must be a .js, .py or .jar file\")\n            }\n            add(serverScriptPath)\n        }\n\n        val process = ProcessBuilder(command).start()\n        val transport = StdioClientTransport(\n            input = process.inputStream.asSource().buffered(),\n            output = process.outputStream.asSink().buffered()\n        )\n\n        mcp.connect(transport)\n\n        val toolsResult = mcp.listTools()\n        tools = toolsResult?.tools?.map { tool ->\n            ToolUnion.ofTool(\n                Tool.builder()\n                    .name(tool.name)\n                    .description(tool.description ?: \"\")\n                    .inputSchema(\n                        Tool.InputSchema.builder()\n                            .type(JsonValue.from(tool.inputSchema.type))\n                            .properties(tool.inputSchema.properties.toJsonValue())\n                            .putAdditionalProperty(\"required\", JsonValue.from(tool.inputSchema.required))\n                            .build()\n                    )\n                    .build()\n            )\n        } ?: emptyList()\n        println(\"Connected to server with tools: ${tools.joinToString(\", \") { it.tool().get().name() }}\")\n    } catch (e: Exception) {\n        println(\"Failed to connect to MCP server: $e\")\n        throw e\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Weather Project in Windows\nDESCRIPTION: PowerShell commands to create a new project directory, initialize an npm project, install dependencies, and create necessary files for the weather information server on Windows.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\n# Create a new directory for our project\nmd weather\ncd weather\n\n# Initialize a new npm project\nnpm init -y\n\n# Install dependencies\nnpm install @modelcontextprotocol/sdk zod\nnpm install -D @types/node typescript\n\n# Create our files\nmd src\nnew-item src\\index.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude for Desktop with MCP Weather Server (MacOS/Linux)\nDESCRIPTION: JSON configuration for Claude for Desktop to include the MCP weather server on MacOS or Linux systems.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"mcpServers\": {\n        \"weather\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"/ABSOLUTE/PATH/TO/PARENT/FOLDER/weather\",\n                \"run\",\n                \"weather.py\"\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Filesystem MCP Server for Windows\nDESCRIPTION: JSON configuration for setting up the filesystem MCP server on Windows systems. Specifies the command, arguments and Windows-style file paths.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/user.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-filesystem\",\n        \"C:\\\\Users\\\\username\\\\Desktop\",\n        \"C:\\\\Users\\\\username\\\\Downloads\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedded Resource Result in JSON\nDESCRIPTION: JSON representation of an embedded resource result from a tool invocation, including URI, MIME type, and content.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/tools.mdx#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"resource\",\n  \"resource\": {\n    \"uri\": \"resource://example\",\n    \"mimeType\": \"text/plain\",\n    \"text\": \"Resource content\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Server with Absolute Paths in JSON\nDESCRIPTION: This JSON configuration example demonstrates how to properly set up an MCP server using absolute paths in the claude_desktop_config.json file. It ensures reliable operation by avoiding relative path issues.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/tools/debugging.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"command\": \"npx\",\n  \"args\": [\"-y\", \"@modelcontextprotocol/server-filesystem\", \"/Users/username/data\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Sampling Capability in MCP Initialization (JSON)\nDESCRIPTION: Example of how clients declare support for sampling during the initialization process of the Model Context Protocol.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/sampling.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"capabilities\": {\n    \"sampling\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON-RPC Request Message Structure in TypeScript\nDESCRIPTION: TypeScript interface defining the structure of JSON-RPC 2.0 request messages. Requests must include a unique ID (string or number), method name, and optional parameters object.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  jsonrpc: \"2.0\";\n  id: string | number;\n  method: string;\n  params?: {\n    [key: string]: unknown;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude for Desktop with MCP Weather Server (Windows)\nDESCRIPTION: JSON configuration for Claude for Desktop to include the MCP weather server on Windows systems.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"mcpServers\": {\n        \"weather\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"C:\\\\ABSOLUTE\\\\PATH\\\\TO\\\\PARENT\\\\FOLDER\\\\weather\",\n                \"run\",\n                \"weather.py\"\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Resources Request in JSON-RPC\nDESCRIPTION: JSON-RPC request for retrieving the contents of a specific resource identified by its URI.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/resources.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"method\": \"resources/read\",\n  \"params\": {\n    \"uri\": \"file:///project/src/main.rs\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MCP Server Connection Implementation\nDESCRIPTION: Method to establish connection with an MCP server, handling both Python and JavaScript servers.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def connect_to_server(self, server_script_path: str):\n    \"\"\"Connect to an MCP server\n\n    Args:\n        server_script_path: Path to the server script (.py or .js)\n    \"\"\"\n    is_python = server_script_path.endswith('.py')\n    is_js = server_script_path.endswith('.js')\n    if not (is_python or is_js):\n        raise ValueError(\"Server script must be a .py or .js file\")\n\n    command = \"python\" if is_python else \"node\"\n    server_params = StdioServerParameters(\n        command=command,\n        args=[server_script_path],\n        env=None\n    )\n\n    stdio_transport = await self.exit_stack.enter_async_context(stdio_client(server_params))\n    self.stdio, self.write = stdio_transport\n    self.session = await self.exit_stack.enter_async_context(ClientSession(self.stdio, self.write))\n\n    await self.session.initialize()\n\n    # List available tools\n    response = await self.session.list_tools()\n    tools = response.tools\n    print(\"\\nConnected to server with tools:\", [tool.name for tool in tools])\n```\n\n----------------------------------------\n\nTITLE: MCP Roots Message Flow Diagram\nDESCRIPTION: Mermaid sequence diagram illustrating the communication flow between server and client for discovery and handling of root changes.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/client/roots.mdx#2025-04-23_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Server\n    participant Client\n\n    Note over Server,Client: Discovery\n    Server->>Client: roots/list\n    Client-->>Server: Available roots\n\n    Note over Server,Client: Changes\n    Client--)Server: notifications/roots/list_changed\n    Server->>Client: roots/list\n    Client-->>Server: Updated roots\n```\n\n----------------------------------------\n\nTITLE: Sending Log Messages in TypeScript MCP Server\nDESCRIPTION: This TypeScript code snippet shows how to send log messages from an MCP server to the client. It allows servers to provide logging information to the client application across all transport types.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/tools/debugging.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nserver.sendLoggingMessage({\n  level: \"info\",\n  data: \"Server started successfully\",\n});\n```\n\n----------------------------------------\n\nTITLE: Embedded Resource Format in MCP Prompts\nDESCRIPTION: JSON structure for referencing server-side resources directly in prompt messages, allowing seamless incorporation of server-managed content.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/prompts.mdx#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"resource\",\n  \"resource\": {\n    \"uri\": \"resource://example\",\n    \"mimeType\": \"text/plain\",\n    \"text\": \"Resource content\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON-RPC Response Message Structure in TypeScript\nDESCRIPTION: TypeScript interface for JSON-RPC 2.0 response messages. Responses must include the corresponding request ID and either a result object or an error object with code and message.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  jsonrpc: \"2.0\";\n  id: string | number;\n  result?: {\n    [key: string]: unknown;\n  }\n  error?: {\n    code: number;\n    message: string;\n    data?: unknown;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for MCP Server in JSON\nDESCRIPTION: This JSON configuration example shows how to specify custom environment variables for an MCP server in the claude_desktop_config.json file. It allows overriding default variables or providing application-specific ones.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/tools/debugging.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"myserver\": {\n    \"command\": \"mcp-server-myapp\",\n    \"env\": {\n      \"MYAPP_API_KEY\": \"some_key\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Resources Capability in JSON\nDESCRIPTION: Example of how servers declare support for resources capability, including optional features like subscribe and listChanged.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/resources.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"capabilities\": {\n    \"resources\": {\n      \"subscribe\": true,\n      \"listChanged\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MCP Client Class Implementation\nDESCRIPTION: Core implementation of the MCP client class with imports and basic structure.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/tutorials/building-a-client-node.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Client } from \"@modelcontextprotocol/sdk/client/index.js\";\nimport { StdioClientTransport } from \"@modelcontextprotocol/sdk/client/stdio.js\";\nimport Anthropic from \"@anthropic-ai/sdk\";\nimport dotenv from \"dotenv\";\nimport {\n  CallToolResultSchema,\n  ListToolsResultSchema,\n} from \"@modelcontextprotocol/sdk/types.js\";\nimport * as readline from \"node:readline\";\n\ndotenv.config();\n\ninterface MCPClientConfig {\n  name?: string;\n  version?: string;\n}\n\nclass MCPClient {\n  private client: Client | null = null;\n  private anthropic: Anthropic;\n  private transport: StdioClientTransport | null = null;\n\n  constructor(config: MCPClientConfig = {}) {\n    this.anthropic = new Anthropic();\n  }\n\n  // Methods will go here\n}\n```\n\n----------------------------------------\n\nTITLE: Image Content Format in MCP Messages\nDESCRIPTION: JSON format for including image content in MCP sampling messages, with base64 encoding and MIME type specification.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/client/sampling.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"image\",\n  \"data\": \"base64-encoded-image-data\",\n  \"mimeType\": \"image/jpeg\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Resource Templates Response in JSON-RPC\nDESCRIPTION: JSON-RPC response containing available resource templates, including URI templates, names, descriptions, and MIME types.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/resources.mdx#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"result\": {\n    \"resourceTemplates\": [\n      {\n        \"uriTemplate\": \"file:///{path}\",\n        \"name\": \"Project Files\",\n        \"description\": \"Access files in the project directory\",\n        \"mimeType\": \"application/octet-stream\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing MCP Logs in Real-time using Bash\nDESCRIPTION: This command allows you to follow MCP logs in real-time, capturing the last 20 lines and continuously updating as new log entries are added. It's useful for monitoring server connection events, configuration issues, runtime errors, and message exchanges.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/tools/debugging.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntail -n 20 -F ~/Library/Logs/Claude/mcp*.log\n```\n\n----------------------------------------\n\nTITLE: MCP Error Code Enumeration\nDESCRIPTION: TypeScript enumeration defining standard error codes used in MCP, based on the JSON-RPC specification.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/architecture.mdx#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nenum ErrorCode {\n  // Standard JSON-RPC error codes\n  ParseError = -32700,\n  InvalidRequest = -32600,\n  MethodNotFound = -32601,\n  InvalidParams = -32602,\n  InternalError = -32603\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Local TypeScript MCP Server\nDESCRIPTION: Command to inspect a locally developed or downloaded TypeScript MCP server using the Inspector.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/tools/inspector.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx @modelcontextprotocol/inspector node path/to/server/index.js args...\n```\n\n----------------------------------------\n\nTITLE: Resource Update Notification in JSON-RPC\nDESCRIPTION: JSON-RPC notification sent by servers when a subscribed resource is updated, including the URI of the changed resource.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/resources.mdx#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/resources/updated\",\n  \"params\": {\n    \"uri\": \"file:///project/src/main.rs\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Claude Desktop MCP Logs for Troubleshooting\nDESCRIPTION: Bash command to display and continuously follow the most recent MCP-related log entries from Claude for Desktop. Useful for troubleshooting connection issues or server errors.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\n# Check Claude's logs for errors\ntail -n 20 -f ~/Library/Logs/Claude/mcp*.log\n```\n\n----------------------------------------\n\nTITLE: Visualizing Third-Party Authorization Flow for MCP using Mermaid\nDESCRIPTION: A sequence diagram illustrating the steps involved in the third-party authorization flow for MCP. This diagram shows the interactions between the user agent, MCP client, MCP server, and third-party authorization server during the OAuth process.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/authorization.mdx#2025-04-23_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant B as User-Agent (Browser)\n    participant C as MCP Client\n    participant M as MCP Server\n    participant T as Third-Party Auth Server\n\n    C->>M: Initial OAuth Request\n    M->>B: Redirect to Third-Party /authorize\n    B->>T: Authorization Request\n    Note over T: User authorizes\n    T->>B: Redirect to MCP Server callback\n    B->>M: Authorization code\n    M->>T: Exchange code for token\n    T->>M: Third-party access token\n    Note over M: Generate bound MCP token\n    M->>B: Redirect to MCP Client callback\n    B->>C: MCP authorization code\n    C->>M: Exchange code for token\n    M->>C: MCP access token\n```\n\n----------------------------------------\n\nTITLE: List Changed Notification in JSON-RPC\nDESCRIPTION: JSON-RPC notification sent by servers when the list of available resources changes, if the listChanged capability is supported.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/resources.mdx#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/resources/list_changed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WebMvc SSE Server Transport Provider in Java\nDESCRIPTION: This snippet demonstrates how to create and configure a WebMvc-based SSE server transport provider using Spring Framework, including bean configuration and router function setup.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@EnableWebMvc\nclass McpConfig {\n    @Bean\n    WebMvcSseServerTransportProvider webMvcSseServerTransportProvider(ObjectMapper mapper) {\n        return new WebMvcSseServerTransportProvider(mapper, \"/mcp/message\");\n    }\n\n    @Bean\n    RouterFunction<ServerResponse> mcpRouterFunction(WebMvcSseServerTransportProvider transportProvider) {\n        return transportProvider.getRouterFunction();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: MCP Request Interface\nDESCRIPTION: TypeScript interface defining the structure of request messages in MCP, which expect a response from the other side.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/architecture.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Request {\n  method: string;\n  params?: { ... };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Anthropic API Key using .NET User Secrets\nDESCRIPTION: Sets up user secrets for securely storing the Anthropic API key in a .NET application.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#2025-04-23_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\ndotnet user-secrets init\ndotnet user-secrets set \"ANTHROPIC_API_KEY\" \"<your key here>\"\n```\n\n----------------------------------------\n\nTITLE: MCP Authorization Decision Flow Overview\nDESCRIPTION: Flowchart depicting the decision-making process for MCP authorization, including checks for metadata discovery, endpoint availability, and the steps of the OAuth flow.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/authorization.mdx#2025-04-23_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A[Start Auth Flow] --> B{Check Metadata Discovery}\n    B -->|Available| C[Use Metadata Endpoints]\n    B -->|Not Available| D[Use Default Endpoints]\n\n    C --> G{Check Registration Endpoint}\n    D --> G\n\n    G -->|Available| H[Perform Dynamic Registration]\n    G -->|Not Available| I[Alternative Registration Required]\n\n    H --> J[Start OAuth Flow]\n    I --> J\n\n    J --> K[Generate PKCE Parameters]\n    K --> L[Request Authorization]\n    L --> M[User Authorization]\n    M --> N[Exchange Code for Tokens]\n    N --> O[Use Access Token]\n```\n\n----------------------------------------\n\nTITLE: Running Filesystem Server Manually on Windows\nDESCRIPTION: Command to manually run the filesystem server on Windows for troubleshooting.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/user.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx -y @modelcontextprotocol/server-filesystem C:\\Users\\username\\Desktop C:\\Users\\username\\Downloads\n```\n\n----------------------------------------\n\nTITLE: Running Filesystem Server Manually on MacOS/Linux\nDESCRIPTION: Command to manually run the filesystem server on MacOS/Linux for troubleshooting.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/user.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx -y @modelcontextprotocol/server-filesystem /Users/username/Desktop /Users/username/Downloads\n```\n\n----------------------------------------\n\nTITLE: Progress Flow Sequence Diagram - Mermaid\nDESCRIPTION: Sequence diagram illustrating the flow of progress tracking communication between sender and receiver, including initial request, progress updates, and completion.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/utilities/progress.mdx#2025-04-23_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Sender\n    participant Receiver\n\n    Note over Sender,Receiver: Request with progress token\n    Sender->>Receiver: Method request with progressToken\n\n    Note over Sender,Receiver: Progress updates\n    loop Progress Updates\n        Receiver-->>Sender: Progress notification (0.2/1.0)\n        Receiver-->>Sender: Progress notification (0.6/1.0)\n        Receiver-->>Sender: Progress notification (1.0/1.0)\n    end\n\n    Note over Sender,Receiver: Operation complete\n    Receiver->>Sender: Method response\n```\n\n----------------------------------------\n\nTITLE: Responding to a Ping Request in JSON-RPC\nDESCRIPTION: Example of a response to a ping request in JSON-RPC format. The response should be prompt and contain an empty result object.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/basic/utilities/ping.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"123\",\n  \"result\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Progress Tracking Sequence Diagram\nDESCRIPTION: Mermaid sequence diagram showing the flow of progress tracking between sender and receiver, including initial request, progress notifications, and completion.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/basic/utilities/progress.mdx#2025-04-23_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Sender\n    participant Receiver\n\n    Note over Sender,Receiver: Request with progress token\n    Sender->>Receiver: Method request with progressToken\n\n    Note over Sender,Receiver: Progress updates\n    loop Progress Updates\n        Receiver-->>Sender: Progress notification (0.2/1.0)\n        Receiver-->>Sender: Progress notification (0.6/1.0)\n        Receiver-->>Sender: Progress notification (1.0/1.0)\n    end\n\n    Note over Sender,Receiver: Operation complete\n    Receiver->>Sender: Method response\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Client Properties\nDESCRIPTION: Spring Boot property configuration for pointing to the Claude desktop configuration file.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_26\n\nLANGUAGE: properties\nCODE:\n```\nspring.ai.mcp.client.stdio.servers-configuration=file:PATH/TO/claude_desktop_config.json\n```\n\n----------------------------------------\n\nTITLE: Implementing Synchronous Completion Specification in Java\nDESCRIPTION: Demonstrates how to create a synchronous completion specification and configure a server with completion capabilities using the Model Context Protocol Java SDK. The specification includes a completion reference and a handler function for processing completion requests.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-server.mdx#2025-04-23_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nvar syncCompletionSpecification = new McpServerFeatures.SyncCompletionSpecification(\n\t\t\tnew McpSchema.PromptReference(\"code_review\"), (exchange, request) -> {\n        \n        // completion implementation ...\n        \n        return new McpSchema.CompleteResult(\n            new CompleteResult.CompleteCompletion(\n              List.of(\"python\", \"pytorch\", \"pyside\"), \n              10, // total\n              false // hasMore\n            ));\n      }\n);\n\n// Create a sync server with completion capabilities\nvar mcpServer = McpServer.sync(mcpServerTransportProvider)\n  .capabilities(ServerCapabilities.builder()\n    .completions() // enable completions support\n      // ...\n    .build())\n  // ...\n  .completions(new McpServerFeatures.SyncCompletionSpecification( // register completion specification\n      new McpSchema.PromptReference(\"code_review\"), syncCompletionSpecification))\n  .build();\n```\n\n----------------------------------------\n\nTITLE: Checking Claude Logs on MacOS/Linux\nDESCRIPTION: Command to view and follow Claude's MCP-related logs on MacOS/Linux systems.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/user.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntail -n 20 -f ~/Library/Logs/Claude/mcp*.log\n```\n\n----------------------------------------\n\nTITLE: Completion Response Format in JSON-RPC\nDESCRIPTION: Example of a completion response message showing suggested values. Demonstrates the structure of completion results including values array, total count, and hasMore flag.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/utilities/completion.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"completion\": {\n      \"values\": [\"python\", \"pytorch\", \"pyside\"],\n      \"total\": 10,\n      \"hasMore\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Ping Request in JSON-RPC Format\nDESCRIPTION: This snippet shows the standard JSON-RPC request format for sending a ping with no parameters. The 'id' field is used to match the response to the request.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/utilities/ping.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"123\",\n  \"method\": \"ping\"\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration Setup\nDESCRIPTION: Commands to create and configure environment files for API key storage and gitignore settings.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Create .env file\ntouch .env\n```\n\nLANGUAGE: bash\nCODE:\n```\nANTHROPIC_API_KEY=<your key here>\n```\n\nLANGUAGE: bash\nCODE:\n```\necho \".env\" >> .gitignore\n```\n\n----------------------------------------\n\nTITLE: Defining JSON-RPC Notification Message Structure in TypeScript\nDESCRIPTION: TypeScript interface for JSON-RPC 2.0 notification messages. Notifications are one-way messages that must include a method name and optional parameters, but no ID.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  jsonrpc: \"2.0\";\n  method: string;\n  params?: {\n    [key: string]: unknown;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Installing UV Package Manager (Windows)\nDESCRIPTION: PowerShell command to install the UV package manager on Windows systems.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n```\n\n----------------------------------------\n\nTITLE: MCP Capability Negotiation Sequence Diagram\nDESCRIPTION: Mermaid sequence diagram demonstrating the flow of capability negotiation between host, client, and server, including session initialization, request handling, and notification flow.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/architecture/index.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Host\n    participant Client\n    participant Server\n\n    Host->>+Client: Initialize client\n    Client->>+Server: Initialize session with capabilities\n    Server-->>Client: Respond with supported capabilities\n\n    Note over Host,Server: Active Session with Negotiated Features\n\n    loop Client Requests\n        Host->>Client: User- or model-initiated action\n        Client->>Server: Request (tools/resources)\n        Server-->>Client: Response\n        Client-->>Host: Update UI or respond to model\n    end\n\n    loop Server Requests\n        Server->>Client: Request (sampling)\n        Client->>Host: Forward to AI\n        Host-->>Client: AI response\n        Client-->>Server: Response\n    end\n\n    loop Notifications\n        Server--)Client: Resource updates\n        Client--)Server: Status changes\n    end\n\n    Host->>Client: Terminate\n    Client->>-Server: End session\n    deactivate Server\n```\n\n----------------------------------------\n\nTITLE: Verifying Node.js Installation in Bash\nDESCRIPTION: Commands to check the installed versions of Node.js and npm in a Unix-like environment.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnode --version\nnpm --version\n```\n\n----------------------------------------\n\nTITLE: Listing Tools Response in JSON-RPC\nDESCRIPTION: JSON-RPC response containing a list of available tools, including their names, descriptions, and input schemas. It also includes a cursor for pagination.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/tools.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"tools\": [\n      {\n        \"name\": \"get_weather\",\n        \"description\": \"Get current weather information for a location\",\n        \"inputSchema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"location\": {\n              \"type\": \"string\",\n              \"description\": \"City name or zip code\"\n            }\n          },\n          \"required\": [\"location\"]\n        }\n      }\n    ],\n    \"nextCursor\": \"next-page-cursor\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Prompts Message Flow Diagram in MCP\nDESCRIPTION: Mermaid sequence diagram illustrating the interaction flow between client and server for prompt discovery, usage, and handling list changes.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/prompts.mdx#2025-04-23_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Server\n\n    Note over Client,Server: Discovery\n    Client->>Server: prompts/list\n    Server-->>Client: List of prompts\n\n    Note over Client,Server: Usage\n    Client->>Server: prompts/get\n    Server-->>Client: Prompt content\n\n    opt listChanged\n      Note over Client,Server: Changes\n      Server--)Client: prompts/list_changed\n      Client->>Server: prompts/list\n      Server-->>Client: Updated prompts\n    end\n```\n\n----------------------------------------\n\nTITLE: Getting a Specific Prompt Response in MCP\nDESCRIPTION: JSON-RPC response containing the prompt content with messages formatted for the language model. Shows how arguments are integrated into the prompt template.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/prompts.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"result\": {\n    \"description\": \"Code review prompt\",\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": {\n          \"type\": \"text\",\n          \"text\": \"Please review this Python code:\\ndef hello():\\n    print('world')\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Client Execution Commands\nDESCRIPTION: Shell commands for building and running the MCP client with different server types.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew build\n\n# Run the client\njava -jar build/libs/<your-jar-name>.jar path/to/server.jar # jvm server\njava -jar build/libs/<your-jar-name>.jar path/to/server.py # python server\njava -jar build/libs/<your-jar-name>.jar path/to/build/index.js # node server\n```\n\n----------------------------------------\n\nTITLE: Getting a Specific Prompt Request in MCP\nDESCRIPTION: JSON-RPC request for retrieving a specific prompt by name with custom arguments. In this example, requesting the 'code_review' prompt with Python code as an argument.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/prompts.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"method\": \"prompts/get\",\n  \"params\": {\n    \"name\": \"code_review\",\n    \"arguments\": {\n      \"code\": \"def hello():\\n    print('world')\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pagination Flow Sequence Diagram\nDESCRIPTION: Mermaid sequence diagram illustrating the interaction flow between client and server during pagination.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/utilities/pagination.mdx#2025-04-23_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Server\n\n    Client->>Server: List Request (no cursor)\n    loop Pagination Loop\n      Server-->>Client: Page of results + nextCursor\n      Client->>Server: List Request (with cursor)\n    end\n```\n\n----------------------------------------\n\nTITLE: Server Connection Implementation\nDESCRIPTION: Method for establishing connection with an MCP server and listing available tools.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/tutorials/building-a-client-node.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n  async connectToServer(serverScriptPath: string): Promise<void> {\n    const isPython = serverScriptPath.endsWith(\".py\");\n    const isJs = serverScriptPath.endsWith(\".js\");\n\n    if (!isPython && !isJs) {\n      throw new Error(\"Server script must be a .py or .js file\");\n    }\n\n    const command = isPython ? \"python\" : \"node\";\n\n    this.transport = new StdioClientTransport({\n      command,\n      args: [serverScriptPath],\n    });\n\n    this.client = new Client(\n      {\n        name: \"mcp-client\",\n        version: \"1.0.0\",\n      },\n      {\n        capabilities: {},\n      }\n    );\n\n    await this.client.connect(this.transport);\n\n    // List available tools\n    const response = await this.client.request(\n      { method: \"tools/list\" },\n      ListToolsResultSchema\n    );\n\n    console.log(\n      \"\\nConnected to server with tools:\",\n      response.tools.map((tool: any) => tool.name)\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Request with Progress Token in JSON-RPC\nDESCRIPTION: Example of a JSON-RPC request containing a progress token in the metadata. The progress token must be unique across active requests and can be either a string or integer value.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/basic/utilities/progress.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"some_method\",\n  \"params\": {\n    \"_meta\": {\n      \"progressToken\": \"abc123\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Response Format for Paginated Results in MCP\nDESCRIPTION: Example JSON-RPC 2.0 response format showing paginated results with a nextCursor field indicating more results are available.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/utilities/pagination.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"123\",\n  \"result\": {\n    \"resources\": [...],\n    \"nextCursor\": \"eyJwYWdlIjogM30=\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Processing Implementation\nDESCRIPTION: Core logic for processing queries, handling tool calls, and managing conversations with Claude.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/tutorials/building-a-client-node.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n  async processQuery(query: string): Promise<string> {\n    if (!this.client) {\n      throw new Error(\"Client not connected\");\n    }\n\n    // Initialize messages array with user query\n    let messages: Anthropic.MessageParam[] = [\n      {\n        role: \"user\",\n        content: query,\n      },\n    ];\n\n    // Get available tools\n    const toolsResponse = await this.client.request(\n      { method: \"tools/list\" },\n      ListToolsResultSchema\n    );\n\n    const availableTools = toolsResponse.tools.map((tool: any) => ({\n      name: tool.name,\n      description: tool.description,\n      input_schema: tool.inputSchema,\n    }));\n\n    const finalText: string[] = [];\n    let currentResponse = await this.anthropic.messages.create({\n      model: \"claude-3-5-sonnet-20241022\",\n      max_tokens: 1000,\n      messages,\n      tools: availableTools,\n    });\n\n    // Process the response and any tool calls\n    while (true) {\n      // Add Claude's response to final text and messages\n      for (const content of currentResponse.content) {\n        if (content.type === \"text\") {\n          finalText.push(content.text);\n        } else if (content.type === \"tool_use\") {\n          const toolName = content.name;\n          const toolArgs = content.input;\n\n          // Execute tool call\n          const result = await this.client.request(\n            {\n              method: \"tools/call\",\n              params: {\n                name: toolName,\n                arguments: toolArgs,\n              },\n            },\n            CallToolResultSchema\n          );\n\n          finalText.push(\n            `[Calling tool ${toolName} with args ${JSON.stringify(toolArgs)}]`\n          );\n\n          // Add Claude's response (including tool use) to messages\n          messages.push({\n            role: \"assistant\",\n            content: currentResponse.content,\n          });\n\n          // Add tool result to messages\n          messages.push({\n            role: \"user\",\n            content: [\n              {\n                type: \"tool_result\",\n                tool_use_id: content.id,\n                content: [\n                  { type: \"text\", text: JSON.stringify(result.content) },\n                ],\n              },\n            ],\n          });\n\n          // Get next response from Claude with tool results\n          currentResponse = await this.anthropic.messages.create({\n            model: \"claude-3-5-sonnet-20241022\",\n            max_tokens: 1000,\n            messages,\n            tools: availableTools,\n          });\n\n          // Add Claude's interpretation of the tool results to final text\n          if (currentResponse.content[0]?.type === \"text\") {\n            finalText.push(currentResponse.content[0].text);\n          }\n\n          // Continue the loop to process any additional tool calls\n          continue;\n        }\n      }\n\n      // If we reach here, there were no tool calls in the response\n      break;\n    }\n\n    return finalText.join(\"\\n\");\n  }\n```\n\n----------------------------------------\n\nTITLE: Basic MCP Client Class Structure\nDESCRIPTION: Initial setup of the MCPClient class with imports and constructor initialization.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom typing import Optional\nfrom contextlib import AsyncExitStack\n\nfrom mcp import ClientSession, StdioServerParameters\nfrom mcp.client.stdio import stdio_client\n\nfrom anthropic import Anthropic\nfrom dotenv import load_dotenv\n\nload_dotenv()  # load environment variables from .env\n\nclass MCPClient:\n    def __init__(self):\n        # Initialize session and client objects\n        self.session: Optional[ClientSession] = None\n        self.exit_stack = AsyncExitStack()\n        self.anthropic = Anthropic()\n    # methods will go here\n```\n\n----------------------------------------\n\nTITLE: Tools List Request and Response\nDESCRIPTION: JSON-RPC messages for requesting and receiving the list of available tools, including pagination support.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/tools.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/list\",\n  \"params\": {\n    \"cursor\": \"optional-cursor-value\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"tools\": [\n      {\n        \"name\": \"get_weather\",\n        \"description\": \"Get current weather information for a location\",\n        \"inputSchema\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"location\": {\n              \"type\": \"string\",\n              \"description\": \"City name or zip code\"\n            }\n          },\n          \"required\": [\"location\"]\n        }\n      }\n    ],\n    \"nextCursor\": \"next-page-cursor\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a Cancellation Notification in JSON-RPC 2.0\nDESCRIPTION: Example JSON-RPC 2.0 notification message for cancelling an in-progress request. The message includes the ID of the request to cancel and an optional reason string that can be logged or displayed.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/utilities/cancellation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/cancelled\",\n  \"params\": {\n    \"requestId\": \"123\",\n    \"reason\": \"User requested cancellation\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Text Content Result in JSON\nDESCRIPTION: JSON representation of a text content result from a tool invocation.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/tools.mdx#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"text\",\n  \"text\": \"Tool result text\"\n}\n```\n\n----------------------------------------\n\nTITLE: Tool List Changed Notification\nDESCRIPTION: JSON-RPC notification message sent when the available tools list changes on the server.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/tools.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/tools/list_changed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Message Flow Sequence Diagram\nDESCRIPTION: Mermaid sequence diagram showing the interaction flow between client and server for logging configuration and message transmission.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/utilities/logging.mdx#2025-04-23_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Server\n\n    Note over Client,Server: Configure Logging\n    Client->>Server: logging/setLevel (info)\n    Server-->>Client: Empty Result\n\n    Note over Client,Server: Server Activity\n    Server--)Client: notifications/message (info)\n    Server--)Client: notifications/message (warning)\n    Server--)Client: notifications/message (error)\n\n    Note over Client,Server: Level Change\n    Client->>Server: logging/setLevel (error)\n    Server-->>Client: Empty Result\n    Note over Server: Only sends error level<br/>and above\n```\n\n----------------------------------------\n\nTITLE: Declaring Roots Capability in MCP Initialization (JSON)\nDESCRIPTION: JSON snippet showing how clients declare support for roots during the initialization process. It includes the 'roots' capability with a 'listChanged' property indicating whether the client will send notifications on root list changes.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/client/roots.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"capabilities\": {\n    \"roots\": {\n      \"listChanged\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing MCP Lifecycle Phases with Mermaid Diagram\nDESCRIPTION: A sequence diagram illustrating the three phases of the Model Context Protocol lifecycle: Initialization, Operation, and Shutdown. It shows the communication flow between the Client and Server.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/lifecycle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Server\n\n    Note over Client,Server: Initialization Phase\n    activate Client\n    Client->>+Server: initialize request\n    Server-->>Client: initialize response\n    Client--)Server: initialized notification\n\n    Note over Client,Server: Operation Phase\n    rect rgb(200, 220, 250)\n        note over Client,Server: Normal protocol operations\n    end\n\n    Note over Client,Server: Shutdown\n    Client--)-Server: Disconnect\n    deactivate Server\n    Note over Client,Server: Connection closed\n```\n\n----------------------------------------\n\nTITLE: Package.json Configuration\nDESCRIPTION: Configuration settings for package.json to enable TypeScript building and execution.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/tutorials/building-a-client-node.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"module\",\n  \"scripts\": {\n    \"build\": \"tsc\",\n    \"start\": \"node build/client.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Roots Request in MCP (JSON)\nDESCRIPTION: JSON-RPC request sent by servers to retrieve the list of roots from the client. This request uses the 'roots/list' method.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/client/roots.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"roots/list\"\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing MCP Communication Flow with Sequence Diagram\nDESCRIPTION: Mermaid sequence diagram illustrating the full communication lifecycle between client and server in an MCP session, including initialization, request/response patterns, SSE streaming, and session ID handling.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/transports.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Server\n\n    note over Client, Server: initialization\n\n    Client->>+Server: POST InitializeRequest\n    Server->>-Client: InitializeResponse<br>Mcp-Session-Id: 1868a90c...\n\n    Client->>+Server: POST InitializedNotification<br>Mcp-Session-Id: 1868a90c...\n    Server->>-Client: 202 Accepted\n\n    note over Client, Server: client requests\n    Client->>+Server: POST ... request ...<br>Mcp-Session-Id: 1868a90c...\n\n    alt single HTTP response\n      Server->>Client: ... response ...\n    else server opens SSE stream\n      loop while connection remains open\n          Server-)Client: ... SSE messages from server ...\n      end\n      Server-)Client: SSE event: ... response ...\n    end\n    deactivate Server\n\n    note over Client, Server: client notifications/responses\n    Client->>+Server: POST ... notification/response ...<br>Mcp-Session-Id: 1868a90c...\n    Server->>-Client: 202 Accepted\n\n    note over Client, Server: server requests\n    Client->>+Server: GET<br>Mcp-Session-Id: 1868a90c...\n    loop while connection remains open\n        Server-)Client: ... SSE messages from server ...\n    end\n    deactivate Server\n\n```\n\n----------------------------------------\n\nTITLE: Audio Content Format in MCP Sampling (JSON)\nDESCRIPTION: Example of audio content format used in sampling messages within the Model Context Protocol, including base64-encoded data and MIME type.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/client/sampling.mdx#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"audio\",\n  \"data\": \"base64-encoded-audio-data\",\n  \"mimeType\": \"audio/wav\"\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating stdio Communication Flow in MCP\nDESCRIPTION: This diagram shows the sequence of communication between a client and server process using the stdio transport in MCP. It illustrates the subprocess launch, message exchange through stdin/stdout, optional logging on stderr, and subprocess termination.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/basic/transports.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Server Process\n\n    Client->>+Server Process: Launch subprocess\n    loop Message Exchange\n        Client->>Server Process: Write to stdin\n        Server Process->>Client: Write to stdout\n        Server Process--)Client: Optional logs on stderr\n    end\n    Client->>Server Process: Close stdin, terminate subprocess\n    deactivate Server Process\n```\n\n----------------------------------------\n\nTITLE: Maven Dependencies Configuration\nDESCRIPTION: XML configuration for required Maven dependencies including Spring AI MCP server starter.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n      <dependency>\n          <groupId>org.springframework.ai</groupId>\n          <artifactId>spring-ai-starter-mcp-server</artifactId>\n      </dependency>\n\n      <dependency>\n          <groupId>org.springframework</groupId>\n          <artifactId>spring-web</artifactId>\n      </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Declaring Sampling Capability in MCP Initialization\nDESCRIPTION: JSON snippet showing how clients must declare the sampling capability during MCP initialization.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/client/sampling.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"capabilities\": {\n    \"sampling\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Message Flow Diagram\nDESCRIPTION: Mermaid sequence diagram showing the interaction flow between LLM, Client, and Server for tool discovery and invocation.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/tools.mdx#2025-04-23_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant LLM\n    participant Client\n    participant Server\n\n    Note over Client,Server: Discovery\n    Client->>Server: tools/list\n    Server-->>Client: List of tools\n\n    Note over Client,LLM: Tool Selection\n    LLM->>Client: Select tool to use\n\n    Note over Client,Server: Invocation\n    Client->>Server: tools/call\n    Server-->>Client: Tool result\n    Client->>LLM: Process result\n\n    Note over Client,Server: Updates\n    Server--)Client: tools/list_changed\n    Client->>Server: tools/list\n    Server-->>Client: Updated tools\n```\n\n----------------------------------------\n\nTITLE: Visualizing MCP Client-Server Interaction Sequence\nDESCRIPTION: A Mermaid sequence diagram illustrating the flow of communication between a client and server in an MCP session. It shows the initialization process, request-response patterns, and the use of Server-Sent Events (SSE) for streaming responses.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/transports.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Server\n\n    note over Client, Server: initialization\n\n    Client->>+Server: POST InitializeRequest\n    Server->>-Client: InitializeResponse<br>Mcp-Session-Id: 1868a90c...\n\n    Client->>+Server: POST InitializedNotification<br>Mcp-Session-Id: 1868a90c...\n    Server->>-Client: 202 Accepted\n\n    note over Client, Server: client requests\n    Client->>+Server: POST ... request ...<br>Mcp-Session-Id: 1868a90c...\n\n    alt single HTTP response\n      Server->>Client: ... response ...\n    else server opens SSE stream\n      loop while connection remains open\n          Server-)Client: ... SSE messages from server ...\n      end\n      Server-)Client: SSE event: ... response ...\n    end\n    deactivate Server\n\n    note over Client, Server: client notifications/responses\n    Client->>+Server: POST ... notification/response ...<br>Mcp-Session-Id: 1868a90c...\n    Server->>-Client: 202 Accepted\n\n    note over Client, Server: server requests\n    Client->>+Server: GET<br>Mcp-Session-Id: 1868a90c...\n    loop while connection remains open\n        Server-)Client: ... SSE messages from server ...\n    end\n    deactivate Server\n```\n\n----------------------------------------\n\nTITLE: Text Content Format in MCP Sampling (JSON)\nDESCRIPTION: Example of text content format used in sampling messages within the Model Context Protocol.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/client/sampling.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"text\",\n  \"text\": \"The message content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Model Preferences in MCP Sampling (JSON)\nDESCRIPTION: Example of model preferences used in sampling requests within the Model Context Protocol, including hints and priority values for cost, speed, and intelligence.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/client/sampling.mdx#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hints\": [\n    { \"name\": \"claude-3-sonnet\" },\n    { \"name\": \"claude\" }\n  ],\n  \"costPriority\": 0.3,\n  \"speedPriority\": 0.8,\n  \"intelligencePriority\": 0.5\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Resources Response in JSON-RPC\nDESCRIPTION: JSON-RPC response for listing available resources, including resource details and pagination information.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/resources.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"resources\": [\n      {\n        \"uri\": \"file:///project/src/main.rs\",\n        \"name\": \"main.rs\",\n        \"description\": \"Primary application entry point\",\n        \"mimeType\": \"text/x-rust\"\n      }\n    ],\n    \"nextCursor\": \"next-page-cursor\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Text Content Format in MCP Messages\nDESCRIPTION: JSON format for text content in MCP sampling messages, consisting of a type field and the text content.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/client/sampling.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"text\",\n  \"text\": \"The message content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Resources Response in JSON-RPC\nDESCRIPTION: JSON-RPC response containing the contents of a requested resource, including its URI, MIME type, and text content.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/resources.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"result\": {\n    \"contents\": [\n      {\n        \"uri\": \"file:///project/src/main.rs\",\n        \"mimeType\": \"text/x-rust\",\n        \"text\": \"fn main() {\\n    println!(\\\"Hello world!\\\");\\n}\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Project Directory Root Example in MCP (JSON)\nDESCRIPTION: JSON example of a root definition for a project directory, including a file URI and a display name.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/client/roots.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uri\": \"file:///home/user/projects/myproject\",\n  \"name\": \"My Project\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Helper Functions for Weather Data\nDESCRIPTION: TypeScript functions for making API requests to the National Weather Service, formatting alert data, and defining interfaces for API responses and forecast periods.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// Helper function for making NWS API requests\nasync function makeNWSRequest<T>(url: string): Promise<T | null> {\n  const headers = {\n    \"User-Agent\": USER_AGENT,\n    Accept: \"application/geo+json\",\n  };\n\n  try {\n    const response = await fetch(url, { headers });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return (await response.json()) as T;\n  } catch (error) {\n    console.error(\"Error making NWS request:\", error);\n    return null;\n  }\n}\n\ninterface AlertFeature {\n  properties: {\n    event?: string;\n    areaDesc?: string;\n    severity?: string;\n    status?: string;\n    headline?: string;\n  };\n}\n\n// Format alert data\nfunction formatAlert(feature: AlertFeature): string {\n  const props = feature.properties;\n  return [\n    `Event: ${props.event || \"Unknown\"}`,\n    `Area: ${props.areaDesc || \"Unknown\"}`,\n    `Severity: ${props.severity || \"Unknown\"}`,\n    `Status: ${props.status || \"Unknown\"}`,\n    `Headline: ${props.headline || \"No headline\"}`,\n    \"---\",\n  ].join(\"\\n\");\n}\n\ninterface ForecastPeriod {\n  name?: string;\n  temperature?: number;\n  temperatureUnit?: string;\n  windSpeed?: string;\n  windDirection?: string;\n  shortForecast?: string;\n}\n\ninterface AlertsResponse {\n  features: AlertFeature[];\n}\n\ninterface PointsResponse {\n  properties: {\n    forecast?: string;\n  };\n}\n\ninterface ForecastResponse {\n  properties: {\n    periods: ForecastPeriod[];\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response for Unsupported Roots in MCP\nDESCRIPTION: JSON-RPC error response example when a client does not support roots capability, showing standard error code and additional data.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/client/roots.mdx#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"error\": {\n    \"code\": -32601,\n    \"message\": \"Roots not supported\",\n    \"data\": {\n      \"reason\": \"Client does not have roots capability\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example HTTP GET Request with Authorization Header for MCP\nDESCRIPTION: Illustrates a complete HTTP GET request to an MCP server, including the required Authorization header with a Bearer token. This example shows how to properly structure the request to access MCP resources.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/authorization.mdx#2025-04-23_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nGET /v1/contexts HTTP/1.1\nHost: mcp.example.com\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIs...\n```\n\n----------------------------------------\n\nTITLE: Resource Content Examples\nDESCRIPTION: JSON examples showing text and binary resource content formats.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/resources.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uri\": \"file:///example.txt\",\n  \"mimeType\": \"text/plain\",\n  \"text\": \"Resource content\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uri\": \"file:///example.png\",\n  \"mimeType\": \"image/png\",\n  \"blob\": \"base64-encoded-data\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Examples\nDESCRIPTION: JSON-RPC error responses for both protocol-level errors and tool execution errors.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/tools.mdx#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"error\": {\n    \"code\": -32602,\n    \"message\": \"Unknown tool: invalid_tool_name\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 4,\n  \"result\": {\n    \"content\": [\n      {\n        \"type\": \"text\",\n        \"text\": \"Failed to fetch weather data: API rate limit exceeded\"\n      }\n    ],\n    \"isError\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Weather API Helper Functions\nDESCRIPTION: Kotlin helper functions and data classes for querying the National Weather Service API.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nsuspend fun HttpClient.getForecast(latitude: Double, longitude: Double): List<String> {\n    val points = this.get(\"/points/$latitude,$longitude\").body<Points>()\n    val forecast = this.get(points.properties.forecast).body<Forecast>()\n    return forecast.properties.periods.map { period ->\n        \"\"\"\n            ${period.name}:\n            Temperature: ${period.temperature} ${period.temperatureUnit}\n            Wind: ${period.windSpeed} ${period.windDirection}\n            Forecast: ${period.detailedForecast}\n        \"\"\".trimIndent()\n    }\n}\n\nsuspend fun HttpClient.getAlerts(state: String): List<String> {\n    val alerts = this.get(\"/alerts/active/area/$state\").body<Alert>()\n    return alerts.features.map { feature ->\n        \"\"\"\n            Event: ${feature.properties.event}\n            Area: ${feature.properties.areaDesc}\n            Severity: ${feature.properties.severity}\n            Description: ${feature.properties.description}\n            Instruction: ${feature.properties.instruction}\n        \"\"\".trimIndent()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing MCP Core Components with Network Architecture\nDESCRIPTION: A Mermaid diagram illustrating the relationship between the Host process (with multiple clients), local servers with their resources, and external servers. Shows the hierarchical structure and connection paths within the Model Context Protocol architecture.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/architecture/index.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    subgraph \"Application Host Process\"\n        H[Host]\n        C1[Client 1]\n        C2[Client 2]\n        C3[Client 3]\n        H --> C1\n        H --> C2\n        H --> C3\n    end\n\n    subgraph \"Local machine\"\n        S1[Server 1<br>Files & Git]\n        S2[Server 2<br>Database]\n        R1[(\"Local<br>Resource A\")]\n        R2[(\"Local<br>Resource B\")]\n\n        C1 --> S1\n        C2 --> S2\n        S1 <--> R1\n        S2 <--> R2\n    end\n\n    subgraph \"Internet\"\n        S3[Server 3<br>External APIs]\n        R3[(\"Remote<br>Resource C\")]\n\n        C3 --> S3\n        S3 <--> R3\n    end\n```\n\n----------------------------------------\n\nTITLE: Text Content Format in MCP Prompts\nDESCRIPTION: JSON structure for text content in prompt messages, used for natural language interactions.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/prompts.mdx#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"text\",\n  \"text\": \"The text content of the message\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up TypeScript configuration for MCP client\nDESCRIPTION: TypeScript configuration file (tsconfig.json) specifying compiler options for the MCP client project.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2022\",\n    \"module\": \"Node16\",\n    \"moduleResolution\": \"Node16\",\n    \"outDir\": \"./build\",\n    \"rootDir\": \"./\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true\n  },\n  \"include\": [\"index.ts\"],\n  \"exclude\": [\"node_modules\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Kotlin MCP Server - Main Function\nDESCRIPTION: Simple main function implementation to run the MCP server in Kotlin.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_31\n\nLANGUAGE: kotlin\nCODE:\n```\nfun main() = `run mcp server`()\n```\n\n----------------------------------------\n\nTITLE: Embedded Resource Example in MCP Prompts\nDESCRIPTION: JSON example of an embedded resource in a prompt message for the Model Context Protocol. It includes the resource type, URI, MIME type, and text content.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/prompts.mdx#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"resource\",\n  \"resource\": {\n    \"uri\": \"resource://example\",\n    \"mimeType\": \"text/plain\",\n    \"text\": \"Resource content\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Filesystem MCP Server for MacOS/Linux\nDESCRIPTION: JSON configuration for setting up the filesystem MCP server on MacOS/Linux systems. Specifies the command, arguments and file system paths to access.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/user.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-filesystem\",\n        \"/Users/username/Desktop\",\n        \"/Users/username/Downloads\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Client Execution Commands\nDESCRIPTION: Commands for building and running the MCP client with different server types.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/tutorials/building-a-client-node.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Build the TypeScript code. Make sure to rerun this every time you update `client.ts`!\nnpm run build\n\n# Run the client\nnode build/client.js path/to/server.py  # for Python servers\nnode build/client.js path/to/server.js  # for Node.js servers\n```\n\n----------------------------------------\n\nTITLE: Listing Prompts Response in MCP\nDESCRIPTION: JSON-RPC response for the prompts/list request in the Model Context Protocol. It includes an array of prompt objects and a nextCursor for pagination.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/prompts.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"prompts\": [\n      {\n        \"name\": \"code_review\",\n        \"description\": \"Asks the LLM to analyze code quality and suggest improvements\",\n        \"arguments\": [\n          {\n            \"name\": \"code\",\n            \"description\": \"The code to review\",\n            \"required\": true\n          }\n        ]\n      }\n    ],\n    \"nextCursor\": \"next-page-cursor\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Binary Resource Content Representation in JSON\nDESCRIPTION: JSON representation of a binary resource content, including URI, MIME type, and base64-encoded binary data.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/resources.mdx#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uri\": \"file:///example.png\",\n  \"mimeType\": \"image/png\",\n  \"blob\": \"base64-encoded-data\"\n}\n```\n\n----------------------------------------\n\nTITLE: Main Entry Point Implementation\nDESCRIPTION: Main execution logic for the MCP client application.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nasync def main():\n    if len(sys.argv) < 2:\n        print(\"Usage: python client.py <path_to_server_script>\")\n        sys.exit(1)\n\n    client = MCPClient()\n    try:\n        await client.connect_to_server(sys.argv[1])\n        await client.chat_loop()\n    finally:\n        await client.cleanup()\n\nif __name__ == \"__main__\":\n    import sys\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: MCP Architecture Diagram\nDESCRIPTION: A flowchart showing the relationship between MCP clients within a host application and MCP servers in separate server processes, connected via a transport layer.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/architecture.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    subgraph \"Host\"\n        client1[MCP Client]\n        client2[MCP Client]\n    end\n    subgraph \"Server Process\"\n        server1[MCP Server]\n    end\n    subgraph \"Server Process\"\n        server2[MCP Server]\n    end\n\n    client1 <-->|Transport Layer| server1\n    client2 <-->|Transport Layer| server2\n```\n\n----------------------------------------\n\nTITLE: Configuring SSE Transport with WebFlux for MCP in Java\nDESCRIPTION: Creates a WebFlux-based Server-Sent Events (SSE) client transport for MCP. This implementation requires the additional mcp-webflux-sse-transport dependency and is suitable for Spring applications.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-client.mdx#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nWebClient.Builder webClientBuilder = WebClient.builder()\n    .baseUrl(\"http://your-mcp-server\");\nMcpTransport transport = new WebFluxSseClientTransport(webClientBuilder);\n```\n\n----------------------------------------\n\nTITLE: Adding Optional Spring Transport Maven Dependencies\nDESCRIPTION: Maven configuration for including Spring-specific transport implementations, offering WebFlux and WebMVC based SSE transport options when using the Spring Framework.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-overview.mdx#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Optional: Spring WebFlux-based SSE client and server transport -->\n<dependency>\n    <groupId>io.modelcontextprotocol.sdk</groupId>\n    <artifactId>mcp-spring-webflux</artifactId>\n</dependency>\n\n<!-- Optional: Spring WebMVC-based SSE server transport -->\n<dependency>\n    <groupId>io.modelcontextprotocol.sdk</groupId>\n    <artifactId>mcp-spring-webmvc</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Declaring Logging Capability in JSON\nDESCRIPTION: Server configuration snippet showing how to declare the logging capability in the capabilities object.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/utilities/logging.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"capabilities\": {\n    \"logging\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tools in TypeScript MCP Server\nDESCRIPTION: This code demonstrates how to implement a basic tool (calculate_sum) in a TypeScript MCP server, including tool definition and execution handling.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/tools.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new Server({\n  name: \"example-server\",\n  version: \"1.0.0\"\n}, {\n  capabilities: {\n    tools: {}\n  }\n});\n\n// Define available tools\nserver.setRequestHandler(ListToolsRequestSchema, async () => {\n  return {\n    tools: [{\n      name: \"calculate_sum\",\n      description: \"Add two numbers together\",\n      inputSchema: {\n        type: \"object\",\n        properties: {\n          a: { type: \"number\" },\n          b: { type: \"number\" }\n        },\n        required: [\"a\", \"b\"]\n      }\n    }]\n  };\n});\n\n// Handle tool execution\nserver.setRequestHandler(CallToolRequestSchema, async (request) => {\n  if (request.params.name === \"calculate_sum\") {\n    const { a, b } = request.params.arguments;\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: String(a + b)\n        }\n      ]\n    };\n  }\n  throw new Error(\"Tool not found\");\n});\n```\n\n----------------------------------------\n\nTITLE: Inspecting Local Python MCP Server\nDESCRIPTION: Command to inspect a locally developed or downloaded Python MCP server using the Inspector.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/tools/inspector.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx @modelcontextprotocol/inspector \\\n    uv \\\n    --directory path/to/server \\\n    run \\\n    package-name \\\n    args...\n```\n\n----------------------------------------\n\nTITLE: Inspecting NPM Package Server with MCP Inspector\nDESCRIPTION: Command to inspect an MCP server package from NPM using the Inspector. Includes an example for a PostgreSQL server.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/tools/inspector.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx -y @modelcontextprotocol/inspector npx <package-name> <args>\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx -y @modelcontextprotocol/inspector npx server-postgres postgres://127.0.0.1/testdb\n```\n\n----------------------------------------\n\nTITLE: Visualizing MCP Lifecycle Flow with Mermaid Sequence Diagram\nDESCRIPTION: A sequence diagram illustrating the three phases of the Model Context Protocol lifecycle: initialization, operation, and shutdown. It shows the message flow between client and server including the initialize request, response, and initialized notification.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/lifecycle.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Server\n\n    Note over Client,Server: Initialization Phase\n    activate Client\n    Client->>+Server: initialize request\n    Server-->>Client: initialize response\n    Client--)Server: initialized notification\n\n    Note over Client,Server: Operation Phase\n    rect rgb(200, 220, 250)\n        note over Client,Server: Normal protocol operations\n    end\n\n    Note over Client,Server: Shutdown\n    Client--)-Server: Disconnect\n    deactivate Server\n    Note over Client,Server: Connection closed\n```\n\n----------------------------------------\n\nTITLE: Declaring Roots in MCP Client Configuration\nDESCRIPTION: This JSON snippet demonstrates how a typical MCP client might expose roots. It includes two root declarations: one for a local frontend repository and another for an API endpoint. Each root has a URI and a descriptive name.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/roots.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"roots\": [\n    {\n      \"uri\": \"file:///home/user/projects/frontend\",\n      \"name\": \"Frontend Repository\"\n    },\n    {\n      \"uri\": \"https://api.example.com/v1\",\n      \"name\": \"API Endpoint\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting PyPi Package Server with MCP Inspector\nDESCRIPTION: Command to inspect an MCP server package from PyPi using the Inspector. Includes an example for a Git-based server.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/tools/inspector.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @modelcontextprotocol/inspector uvx <package-name> <args>\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx @modelcontextprotocol/inspector uvx mcp-server-git --repository ~/code/mcp/servers.git\n```\n\n----------------------------------------\n\nTITLE: Requesting LLM Generation with sampling/createMessage (JSON)\nDESCRIPTION: Example of a server sending a sampling/createMessage request to generate text from a language model, including messages, model preferences, and system prompt.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/sampling.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"sampling/createMessage\",\n  \"params\": {\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": {\n          \"type\": \"text\",\n          \"text\": \"What is the capital of France?\"\n        }\n      }\n    ],\n    \"modelPreferences\": {\n      \"hints\": [\n        {\n          \"name\": \"claude-3-sonnet\"\n        }\n      ],\n      \"intelligencePriority\": 0.8,\n      \"speedPriority\": 0.5\n    },\n    \"systemPrompt\": \"You are a helpful assistant.\",\n    \"maxTokens\": 100\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing MCP Sampling Message Flow (Mermaid)\nDESCRIPTION: Sequence diagram illustrating the flow of messages between Server, Client, User, and LLM during a sampling request in the Model Context Protocol.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/sampling.mdx#2025-04-23_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Server\n    participant Client\n    participant User\n    participant LLM\n\n    Note over Server,Client: Server initiates sampling\n    Server->>Client: sampling/createMessage\n\n    Note over Client,User: Human-in-the-loop review\n    Client->>User: Present request for approval\n    User-->>Client: Review and approve/modify\n\n    Note over Client,LLM: Model interaction\n    Client->>LLM: Forward approved request\n    LLM-->>Client: Return generation\n\n    Note over Client,User: Response review\n    Client->>User: Present response for approval\n    User-->>Client: Review and approve/modify\n\n    Note over Server,Client: Complete request\n    Client-->>Server: Return approved response\n```\n\n----------------------------------------\n\nTITLE: Defining Tool Structure in TypeScript\nDESCRIPTION: This snippet shows the structure for defining a tool in the Model Context Protocol, including its name, description, input schema, and optional annotations.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/tools.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  name: string;          // Unique identifier for the tool\n  description?: string;  // Human-readable description\n  inputSchema: {         // JSON Schema for the tool's parameters\n    type: \"object\",\n    properties: { ... }  // Tool-specific parameters\n  },\n  annotations?: {        // Optional hints about tool behavior\n    title?: string;      // Human-readable title for the tool\n    readOnlyHint?: boolean;    // If true, the tool does not modify its environment\n    destructiveHint?: boolean; // If true, the tool may perform destructive updates\n    idempotentHint?: boolean;  // If true, repeated calls with same args have no additional effect\n    openWorldHint?: boolean;   // If true, tool interacts with external entities\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating stdio Communication Flow in MCP\nDESCRIPTION: This diagram shows the sequence of interactions between a client and a server process using the stdio transport in MCP. It illustrates the subprocess launch, message exchange through stdin/stdout, optional logging on stderr, and subprocess termination.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/transports.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Server Process\n\n    Client->>+Server Process: Launch subprocess\n    loop Message Exchange\n        Client->>Server Process: Write to stdin\n        Server Process->>Client: Write to stdout\n        Server Process--)Client: Optional logs on stderr\n    end\n    Client->>Server Process: Close stdin, terminate subprocess\n    deactivate Server Process\n```\n\n----------------------------------------\n\nTITLE: Query Processing Implementation in Kotlin\nDESCRIPTION: Core functionality for processing user queries and handling tool calls via the Anthropic API, including message management and tool execution.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#2025-04-23_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate val messageParamsBuilder: MessageCreateParams.Builder = MessageCreateParams.builder()\n    .model(Model.CLAUDE_3_5_SONNET_20241022)\n    .maxTokens(1024)\n\nsuspend fun processQuery(query: String): String {\n    val messages = mutableListOf(\n        MessageParam.builder()\n            .role(MessageParam.Role.USER)\n            .content(query)\n            .build()\n    )\n\n    val response = anthropic.messages().create(\n        messageParamsBuilder\n            .messages(messages)\n            .tools(tools)\n            .build()\n    )\n\n    val finalText = mutableListOf<String>()\n    response.content().forEach { content ->\n        when {\n            content.isText() -> finalText.add(content.text().getOrNull()?.text() ?: \"\")\n\n            content.isToolUse() -> {\n                val toolName = content.toolUse().get().name()\n                val toolArgs =\n                    content.toolUse().get()._input().convert(object : TypeReference<Map<String, JsonValue>>() {})\n\n                val result = mcp.callTool(\n                    name = toolName,\n                    arguments = toolArgs ?: emptyMap()\n                )\n                finalText.add(\"[Calling tool $toolName with args $toolArgs]\")\n\n                messages.add(\n                    MessageParam.builder()\n                        .role(MessageParam.Role.USER)\n                        .content(\n                            \"\"\"\n                                \"type\": \"tool_result\",\n                                \"tool_name\": $toolName,\n                                \"result\": ${result?.content?.joinToString(\"\\n\") { (it as TextContent).text ?: \"\" }}\n                            \"\"\".trimIndent()\n                        )\n                        .build()\n                )\n\n                val aiResponse = anthropic.messages().create(\n                    messageParamsBuilder\n                        .messages(messages)\n                        .build()\n                )\n\n                finalText.add(aiResponse.content().first().text().getOrNull()?.text() ?: \"\")\n            }\n        }\n    }\n\n    return finalText.joinToString(\"\\n\", prefix = \"\", postfix = \"\")\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Message Flow Diagram in Mermaid\nDESCRIPTION: A sequence diagram illustrating the flow of logging-related messages between a client and server. It shows setting log levels, receiving notifications, and changing log levels to filter messages.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/utilities/logging.mdx#2025-04-23_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Server\n\n    Note over Client,Server: Configure Logging\n    Client->>Server: logging/setLevel (info)\n    Server-->>Client: Empty Result\n\n    Note over Client,Server: Server Activity\n    Server--)Client: notifications/message (info)\n    Server--)Client: notifications/message (warning)\n    Server--)Client: notifications/message (error)\n\n    Note over Client,Server: Level Change\n    Client->>Server: logging/setLevel (error)\n    Server-->>Client: Empty Result\n    Note over Server: Only sends error level<br/>and above\n```\n\n----------------------------------------\n\nTITLE: Completion Message Flow Diagram\nDESCRIPTION: Mermaid sequence diagram showing the interaction flow between client and server during completion requests. Illustrates the back-and-forth communication as users type and receive suggestions.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/utilities/completion.mdx#2025-04-23_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Server\n\n    Note over Client: User types argument\n    Client->>Server: completion/complete\n    Server-->>Client: Completion suggestions\n\n    Note over Client: User continues typing\n    Client->>Server: completion/complete\n    Server-->>Client: Refined suggestions\n```\n\n----------------------------------------\n\nTITLE: Visualizing Progress Flow with Mermaid Sequence Diagram\nDESCRIPTION: Illustrates the sequence of events in a progress tracking scenario using a Mermaid sequence diagram. It shows the initial request with a progress token, multiple progress notifications, and the final method response.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/utilities/progress.mdx#2025-04-23_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Sender\n    participant Receiver\n\n    Note over Sender,Receiver: Request with progress token\n    Sender->>Receiver: Method request with progressToken\n\n    Note over Sender,Receiver: Progress updates\n    loop Progress Updates\n        Receiver-->>Sender: Progress notification (0.2/1.0)\n        Receiver-->>Sender: Progress notification (0.6/1.0)\n        Receiver-->>Sender: Progress notification (1.0/1.0)\n    end\n\n    Note over Sender,Receiver: Operation complete\n    Receiver->>Sender: Method response\n```\n\n----------------------------------------\n\nTITLE: Visualizing Cancellation Timing with Mermaid Sequence Diagram\nDESCRIPTION: A sequence diagram illustrating the potential race condition between a request, its processing, and a cancellation notification. It shows how the server should handle cancellation arriving after processing may have completed.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/utilities/cancellation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n   participant Client\n   participant Server\n\n   Client->>Server: Request (ID: 123)\n   Note over Server: Processing starts\n   Client--)Server: notifications/cancelled (ID: 123)\n   alt\n      Note over Server: Processing may have<br/>completed before<br/>cancellation arrives\n   else If not completed\n      Note over Server: Stop processing\n   end\n```\n\n----------------------------------------\n\nTITLE: Sending Initialize Request in JSON-RPC Format\nDESCRIPTION: An example of an initialize request sent by the client to the server. It includes the protocol version, client capabilities, and client information. This request is crucial for establishing protocol compatibility and negotiating features.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/basic/lifecycle.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"initialize\",\n  \"params\": {\n    \"protocolVersion\": \"2024-11-05\",\n    \"capabilities\": {\n      \"roots\": {\n        \"listChanged\": true\n      },\n      \"sampling\": {}\n    },\n    \"clientInfo\": {\n      \"name\": \"ExampleClient\",\n      \"version\": \"1.0.0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating OAuth 2.0 Server Metadata Discovery Process for MCP\nDESCRIPTION: Sequence diagram showing the server metadata discovery process for MCP clients and servers. It demonstrates the client requesting server metadata and handling both success and failure scenarios.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/authorization.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant C as Client\n    participant S as Server\n\n    C->>S: GET /.well-known/oauth-authorization-server\n    alt Discovery Success\n        S->>C: 200 OK + Metadata Document\n        Note over C: Use endpoints from metadata\n    else Discovery Failed\n        S->>C: 404 Not Found\n        Note over C: Fall back to default endpoints\n    end\n    Note over C: Continue with authorization flow\n```\n\n----------------------------------------\n\nTITLE: Configuring Sampling Support for MCP Client in Java\nDESCRIPTION: Demonstrates how to configure LLM sampling support for an MCP client, allowing servers to request language model interactions through the client. The sampling handler enables controlled AI model access without sharing API keys.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-client.mdx#2025-04-23_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n// Configure sampling handler\nFunction<CreateMessageRequest, CreateMessageResult> samplingHandler = request -> {\n    // Sampling implementation that interfaces with LLM\n    return new CreateMessageResult(response);\n};\n\n// Create client with sampling support\nvar client = McpClient.sync(transport)\n    .capabilities(ClientCapabilities.builder()\n        .sampling()\n        .build())\n    .sampling(samplingHandler)\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Implementing MCP Resource Support in Python\nDESCRIPTION: A complete example showing how to implement resource support in an MCP server using Python. Includes server initialization, list_resources and read_resource handler functions.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/resources.mdx#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\napp = Server(\"example-server\")\n\n@app.list_resources()\nasync def list_resources() -> list[types.Resource]:\n    return [\n        types.Resource(\n            uri=\"file:///logs/app.log\",\n            name=\"Application Logs\",\n            mimeType=\"text/plain\"\n        )\n    ]\n\n@app.read_resource()\nasync def read_resource(uri: AnyUrl) -> str:\n    if str(uri) == \"file:///logs/app.log\":\n        log_contents = await read_log_file()\n        return log_contents\n\n    raise ValueError(\"Resource not found\")\n\n# Start server\nasync with stdio_server() as streams:\n    await app.run(\n        streams[0],\n        streams[1],\n        app.create_initialization_options()\n    )\n```\n\n----------------------------------------\n\nTITLE: Log Message Notification in JSON-RPC\nDESCRIPTION: Shows the structure of a log message notification sent by servers using the notifications/message method. The example includes severity level, logger name, and structured data with error details.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/utilities/logging.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/message\",\n  \"params\": {\n    \"level\": \"error\",\n    \"logger\": \"database\",\n    \"data\": {\n      \"error\": \"Connection failed\",\n      \"details\": {\n        \"host\": \"localhost\",\n        \"port\": 5432\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Sampling Request in JSON\nDESCRIPTION: A complete JSON example of an MCP sampling request that asks about files in the current directory. It demonstrates the method name, messages array, system prompt, context inclusion, and token limits.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/sampling.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"method\": \"sampling/createMessage\",\n  \"params\": {\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": {\n          \"type\": \"text\",\n          \"text\": \"What files are in the current directory?\"\n        }\n      }\n    ],\n    \"systemPrompt\": \"You are a helpful file system assistant.\",\n    \"includeContext\": \"thisServer\",\n    \"maxTokens\": 100\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive Chat Interface Implementation\nDESCRIPTION: Implementation of the interactive chat loop and cleanup functionality.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/tutorials/building-a-client-node.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n  async chatLoop(): Promise<void> {\n    console.log(\"\\nMCP Client Started!\");\n    console.log(\"Type your queries or 'quit' to exit.\");\n\n    // Using Node's readline for console input\n    const rl = readline.createInterface({\n      input: process.stdin,\n      output: process.stdout,\n    });\n\n    const askQuestion = () => {\n      rl.question(\"\\nQuery: \", async (query: string) => {\n        try {\n          if (query.toLowerCase() === \"quit\") {\n            await this.cleanup();\n            rl.close();\n            return;\n          }\n\n          const response = await this.processQuery(query);\n          console.log(\"\\n\" + response);\n          askQuestion();\n        } catch (error) {\n          console.error(\"\\nError:\", error);\n          askQuestion();\n        }\n      });\n    };\n\n    askQuestion();\n  }\n\n  async cleanup(): Promise<void> {\n    if (this.transport) {\n      await this.transport.close();\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Sending Initialize Request in MCP\nDESCRIPTION: JSON-RPC request for initializing the Model Context Protocol. It includes the protocol version, client capabilities, and client information. This request must be the first interaction between client and server.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/lifecycle.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"initialize\",\n  \"params\": {\n    \"protocolVersion\": \"2024-11-05\",\n    \"capabilities\": {\n      \"roots\": {\n        \"listChanged\": true\n      },\n      \"sampling\": {}\n    },\n    \"clientInfo\": {\n      \"name\": \"ExampleClient\",\n      \"version\": \"1.0.0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Project Environment\nDESCRIPTION: Commands for creating and initializing a new Kotlin project directory.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n# Create a new directory for our project\nmkdir weather\ncd weather\n\n# Initialize a new kotlin project\ngradle init\n```\n\n----------------------------------------\n\nTITLE: Enabling Chrome DevTools for Claude Desktop using Bash\nDESCRIPTION: This command creates a developer_settings.json file that enables Chrome DevTools for Claude Desktop. It allows access to advanced debugging features like inspecting client-side errors and network traffic.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/tools/debugging.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho '{\"allowDevTools\": true}' > ~/Library/Application\\ Support/Claude/developer_settings.json\n```\n\n----------------------------------------\n\nTITLE: Using Prompt System with MCP Java Client (Async API)\nDESCRIPTION: Demonstrates interaction with server-side prompt templates using the asynchronous API of the MCP Java client. It shows asynchronous listing of available prompt templates and asynchronous execution of a prompt template with custom parameters.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-client.mdx#2025-04-23_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n// List available prompt templates asynchronously\nclient.listPrompts()\n    .doOnNext(prompts -> prompts.forEach(prompt -> \n        System.out.println(prompt.getName())))\n    .subscribe();\n\n// Execute a prompt template asynchronously\nclient.executePrompt(\"echo\", Map.of(\n        \"text\", \"Hello, World!\"\n    ))\n    .subscribe();\n```\n\n----------------------------------------\n\nTITLE: Getting a Specific Prompt Response in MCP\nDESCRIPTION: JSON-RPC response for the prompts/get request in the Model Context Protocol. It includes the prompt description and messages array with role and content.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/prompts.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"result\": {\n    \"description\": \"Code review prompt\",\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": {\n          \"type\": \"text\",\n          \"text\": \"Please review this Python code:\\ndef hello():\\n    print('world')\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Core MCP Maven Dependency\nDESCRIPTION: Maven configuration for including the core MCP functionality in a Java project. This dependency includes default STDIO and SSE transport implementations without requiring external web frameworks.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/sdk/java/mcp-overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.modelcontextprotocol.sdk</groupId>\n    <artifactId>mcp</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Weather Project\nDESCRIPTION: JSON configuration for package.json, including type module declaration, binary specification, build script, and files to include in the package.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"module\",\n  \"bin\": {\n    \"weather\": \"./build/index.js\"\n  },\n  \"scripts\": {\n    \"build\": \"tsc && chmod 755 build/index.js\"\n  },\n  \"files\": [\n    \"build\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Message Flow Sequence Diagram\nDESCRIPTION: Mermaid sequence diagram showing the interaction flow between client and server for prompt discovery, usage and changes.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/prompts.mdx#2025-04-23_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Client\n    participant Server\n\n    Note over Client,Server: Discovery\n    Client->>Server: prompts/list\n    Server-->>Client: List of prompts\n\n    Note over Client,Server: Usage\n    Client->>Server: prompts/get\n    Server-->>Client: Prompt content\n\n    opt listChanged\n      Note over Client,Server: Changes\n      Server--)Client: prompts/list_changed\n      Client->>Server: prompts/list\n      Server-->>Client: Updated prompts\n    end\n```\n\n----------------------------------------\n\nTITLE: Sending Progress Notification in JSON-RPC\nDESCRIPTION: Shows the structure of a progress notification in JSON-RPC format. It includes the original progress token, current progress value, optional total value, and an optional message for human-readable progress information.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/utilities/progress.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/progress\",\n  \"params\": {\n    \"progressToken\": \"abc123\",\n    \"progress\": 50,\n    \"total\": 100,\n    \"message\": \"Reticulating splines...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON-RPC Notification Structure in TypeScript\nDESCRIPTION: This snippet defines the structure of a JSON-RPC 2.0 notification message used in the Model Context Protocol. It specifies the required fields for the JSON-RPC version and method, along with optional parameters.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/index.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  jsonrpc: \"2.0\";\n  method: string;\n  params?: {\n    [key: string]: unknown;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Log Message Notification Format\nDESCRIPTION: JSON-RPC notification format used by servers to send log messages to clients, including severity level, logger name, and arbitrary data.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/utilities/logging.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/message\",\n  \"params\": {\n    \"level\": \"error\",\n    \"logger\": \"database\",\n    \"data\": {\n      \"error\": \"Connection failed\",\n      \"details\": {\n        \"host\": \"localhost\",\n        \"port\": 5432\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Roots Not Supported Error in JSON\nDESCRIPTION: Example JSON-RPC error response when the client does not support roots, using standard error codes and providing additional context.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/roots.mdx#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"error\": {\n    \"code\": -32601,\n    \"message\": \"Roots not supported\",\n    \"data\": {\n      \"reason\": \"Client does not have roots capability\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating Progress Tracking in JSON-RPC Request\nDESCRIPTION: Demonstrates how to include a progressToken in a JSON-RPC request to initiate progress tracking. The progressToken must be a unique string or integer value for each active request.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/utilities/progress.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"some_method\",\n  \"params\": {\n    \"_meta\": {\n      \"progressToken\": \"abc123\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Prompts Request/Response\nDESCRIPTION: JSON-RPC messages for retrieving available prompts with pagination support. Shows request format with optional cursor and response containing prompt definitions.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/prompts.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"prompts/list\",\n  \"params\": {\n    \"cursor\": \"optional-cursor-value\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"prompts\": [\n      {\n        \"name\": \"code_review\",\n        \"description\": \"Asks the LLM to analyze code quality and suggest improvements\",\n        \"arguments\": [\n          {\n            \"name\": \"code\",\n            \"description\": \"The code to review\",\n            \"required\": true\n          }\n        ]\n      }\n    ],\n    \"nextCursor\": \"next-page-cursor\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Resources Response in JSON-RPC\nDESCRIPTION: Illustrates the JSON-RPC response format for listing available resources, including resource metadata and pagination information.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/resources.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"resources\": [\n      {\n        \"uri\": \"file:///project/src/main.rs\",\n        \"name\": \"main.rs\",\n        \"description\": \"Primary application entry point\",\n        \"mimeType\": \"text/x-rust\"\n      }\n    ],\n    \"nextCursor\": \"next-page-cursor\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Initialized Notification in MCP\nDESCRIPTION: JSON-RPC notification sent by the client to indicate it is ready to begin normal operations after successful initialization. This must be sent before any other requests or notifications.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/basic/lifecycle.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/initialized\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch and Validating Changes\nDESCRIPTION: Steps to create a new feature branch, make changes, and validate them using npm scripts. Includes commands for schema validation and JSON schema generation.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b feature/your-feature-name\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run validate:schema    # validate schema\nnpm run generate:json     # generate JSON schema\n```\n\n----------------------------------------\n\nTITLE: Declaring Prompts Capability in MCP Initialization\nDESCRIPTION: JSON structure for declaring the prompts capability during the Model Context Protocol initialization. The listChanged field indicates whether the server will notify clients when the list of available prompts changes.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/prompts.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"capabilities\": {\n    \"prompts\": {\n      \"listChanged\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Weather Server in Claude Desktop Config on MacOS/Linux\nDESCRIPTION: JSON configuration for Claude for Desktop that adds a weather MCP server on MacOS/Linux. It specifies the command and arguments needed to run the .NET-based weather server.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"mcpServers\": {\n        \"weather\": {\n            \"command\": \"dotnet\",\n            \"args\": [\n                \"run\",\n                \"--project\",\n                \"/ABSOLUTE/PATH/TO/PROJECT\",\n                \"--no-build\"\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Tool Execution Error Response in JSON-RPC\nDESCRIPTION: JSON-RPC response for tool execution errors, reported within the tool result with isError set to true.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/tools.mdx#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 4,\n  \"result\": {\n    \"content\": [\n      {\n        \"type\": \"text\",\n        \"text\": \"Failed to fetch weather data: API rate limit exceeded\"\n      }\n    ],\n    \"isError\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Roots Response in JSON\nDESCRIPTION: JSON-RPC response from the client containing the list of available roots. Each root includes a URI and an optional name.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/roots.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"roots\": [\n      {\n        \"uri\": \"file:///home/user/projects/myproject\",\n        \"name\": \"My Project\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Transport Error Handling Implementation\nDESCRIPTION: Examples of error handling implementation in custom transports for both TypeScript and Python.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/transports.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass ExampleTransport implements Transport {\n  async start() {\n    try {\n      // Connection logic\n    } catch (error) {\n      this.onerror?.(new Error(`Failed to connect: ${error}`));\n      throw error;\n    }\n  }\n\n  async send(message: JSONRPCMessage) {\n    try {\n      // Sending logic\n    } catch (error) {\n      this.onerror?.(new Error(`Failed to send message: ${error}`));\n      throw error;\n    }\n  }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\n@contextmanager\nasync def example_transport(scope: Scope, receive: Receive, send: Send):\n    try:\n        # Create streams for bidirectional communication\n        read_stream_writer, read_stream = anyio.create_memory_object_stream(0)\n        write_stream, write_stream_reader = anyio.create_memory_object_stream(0)\n\n        async def message_handler():\n            try:\n                async with read_stream_writer:\n                    # Message handling logic\n                    pass\n            except Exception as exc:\n                logger.error(f\"Failed to handle message: {exc}\")\n                raise exc\n\n        async with anyio.create_task_group() as tg:\n            tg.start_soon(message_handler)\n            try:\n                # Yield streams for communication\n                yield read_stream, write_stream\n            except Exception as exc:\n                logger.error(f\"Transport error: {exc}\")\n                raise exc\n            finally:\n                tg.cancel_scope.cancel()\n                await write_stream.aclose()\n                await read_stream.aclose()\n    except Exception as exc:\n        logger.error(f\"Failed to initialize transport: {exc}\")\n        raise exc\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic .NET Client Structure\nDESCRIPTION: Sets up the basic client application structure with configuration and dependency injection using .NET Host builder.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/client.mdx#2025-04-23_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nusing Anthropic.SDK;\nusing Microsoft.Extensions.AI;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Hosting;\nusing ModelContextProtocol.Client;\nusing ModelContextProtocol.Protocol.Transport;\n\nvar builder = Host.CreateApplicationBuilder(args);\n\nbuilder.Configuration\n    .AddEnvironmentVariables()\n    .AddUserSecrets<Program>();\n```\n\n----------------------------------------\n\nTITLE: Opening Claude Desktop Configuration with VS Code on MacOS/Linux\nDESCRIPTION: Command to open the Claude for Desktop configuration file using VS Code on MacOS or Linux systems. This file is used to configure MCP servers that Claude will connect to.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\ncode ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n```\n\n----------------------------------------\n\nTITLE: Resource Not Found Error in JSON-RPC\nDESCRIPTION: Example of a JSON-RPC error response for a resource not found scenario, including error code, message, and additional data.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/resources.mdx#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 5,\n  \"error\": {\n    \"code\": -32002,\n    \"message\": \"Resource not found\",\n    \"data\": {\n      \"uri\": \"file:///nonexistent.txt\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tool Call Request and Response\nDESCRIPTION: JSON-RPC messages for invoking a tool and receiving its result, demonstrating parameter passing and response handling.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/tools.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"get_weather\",\n    \"arguments\": {\n      \"location\": \"New York\"\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"result\": {\n    \"content\": [\n      {\n        \"type\": \"text\",\n        \"text\": \"Current weather in New York:\\nTemperature: 72Â°F\\nConditions: Partly cloudy\"\n      }\n    ],\n    \"isError\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Cancellation Notification in JSON-RPC 2.0\nDESCRIPTION: Example of a JSON-RPC 2.0 notification message for cancelling an in-progress request. It includes the request ID to cancel and an optional reason.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/utilities/cancellation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/cancelled\",\n  \"params\": {\n    \"requestId\": \"123\",\n    \"reason\": \"User requested cancellation\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Discovering Prompts using prompts/list Endpoint\nDESCRIPTION: Shows the request and response format for discovering available prompts through the prompts/list endpoint.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/prompts.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Request\n{\n  method: \"prompts/list\"\n}\n\n// Response\n{\n  prompts: [\n    {\n      name: \"analyze-code\",\n      description: \"Analyze code for potential improvements\",\n      arguments: [\n        {\n          name: \"language\",\n          description: \"Programming language\",\n          required: true\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Ping-Pong Sequence with Mermaid Diagram\nDESCRIPTION: This Mermaid sequence diagram illustrates the ping-pong pattern between the sender and receiver. It shows the flow of the ping request and the empty response.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/basic/utilities/ping.mdx#2025-04-23_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant Sender\n    participant Receiver\n\n    Sender->>Receiver: ping request\n    Receiver->>Sender: empty response\n```\n\n----------------------------------------\n\nTITLE: Declaring Roots Capability in MCP Initialization\nDESCRIPTION: JSON snippet showing how clients must declare the 'roots' capability during initialization, indicating whether they support notifications for root list changes.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/client/roots.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"capabilities\": {\n    \"roots\": {\n      \"listChanged\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Root List Changed Notification in MCP (JSON)\nDESCRIPTION: JSON-RPC notification sent by clients to inform servers that the list of roots has changed. This uses the 'notifications/roots/list_changed' method.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/client/roots.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/roots/list_changed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Tools Capability in JSON\nDESCRIPTION: JSON snippet showing how servers declare support for tools in their capabilities, including whether they support notifications for tool list changes.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/tools.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"capabilities\": {\n    \"tools\": {\n      \"listChanged\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude Desktop Path - Command Line\nDESCRIPTION: Commands to open the Claude Desktop configuration file in VS Code for different operating systems.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/server.mdx#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncode ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n```\n\nLANGUAGE: powershell\nCODE:\n```\ncode $env:AppData\\Claude\\claude_desktop_config.json\n```\n\n----------------------------------------\n\nTITLE: Specifying Model Preferences in MCP (JSON)\nDESCRIPTION: Example of how servers express model preferences in MCP, including capability priorities and model hints.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/sampling.mdx#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hints\": [\n    { \"name\": \"claude-3-sonnet\" },\n    { \"name\": \"claude\" }\n  ],\n  \"costPriority\": 0.3,\n  \"speedPriority\": 0.8,\n  \"intelligencePriority\": 0.5\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MCP Prompts Capability\nDESCRIPTION: JSON structure declaring server support for prompts capability during initialization. Includes listChanged flag to indicate notification support for prompt list changes.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/prompts.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"capabilities\": {\n    \"prompts\": {\n      \"listChanged\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Message Format Definitions\nDESCRIPTION: Type definitions for the three JSON-RPC message formats used in MCP: requests, responses, and notifications.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/transports.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  jsonrpc: \"2.0\",\n  id: number | string,\n  method: string,\n  params?: object\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  jsonrpc: \"2.0\",\n  id: number | string,\n  result?: object,\n  error?: {\n    code: number,\n    message: string,\n    data?: unknown\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  jsonrpc: \"2.0\",\n  method: string,\n  params?: object\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Transport Interface Implementation\nDESCRIPTION: Interface definitions and implementation examples for custom transports in TypeScript and Python.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/transports.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Transport {\n  // Start processing messages\n  start(): Promise<void>;\n\n  // Send a JSON-RPC message\n  send(message: JSONRPCMessage): Promise<void>;\n\n  // Close the connection\n  close(): Promise<void>;\n\n  // Callbacks\n  onclose?: () => void;\n  onerror?: (error: Error) => void;\n  onmessage?: (message: JSONRPCMessage) => void;\n}\n```\n\nLANGUAGE: python\nCODE:\n```\n@contextmanager\nasync def create_transport(\n    read_stream: MemoryObjectReceiveStream[JSONRPCMessage | Exception],\n    write_stream: MemoryObjectSendStream[JSONRPCMessage]\n):\n    \"\"\"\n    Transport interface for MCP.\n\n    Args:\n        read_stream: Stream to read incoming messages from\n        write_stream: Stream to write outgoing messages to\n    \"\"\"\n    async with anyio.create_task_group() as tg:\n        try:\n            # Start processing messages\n            tg.start_soon(lambda: process_messages(read_stream))\n\n            # Send messages\n            async with write_stream:\n                yield write_stream\n\n        except Exception as exc:\n            # Handle errors\n            raise exc\n        finally:\n            # Clean up\n            tg.cancel_scope.cancel()\n            await write_stream.aclose()\n            await read_stream.aclose()\n```\n\n----------------------------------------\n\nTITLE: Image Content Example in MCP Prompts\nDESCRIPTION: JSON example of image content in a prompt message for the Model Context Protocol. It includes the content type, base64-encoded image data, and MIME type.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/prompts.mdx#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"image\",\n  \"data\": \"base64-encoded-image-data\",\n  \"mimeType\": \"image/png\"\n}\n```\n\n----------------------------------------\n\nTITLE: Image Content Format in MCP Sampling (JSON)\nDESCRIPTION: Example of image content format used in sampling messages within the Model Context Protocol, including base64-encoded data and MIME type.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/client/sampling.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"image\",\n  \"data\": \"base64-encoded-image-data\",\n  \"mimeType\": \"image/jpeg\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Prompts Request in MCP\nDESCRIPTION: JSON-RPC request for listing available prompts in the Model Context Protocol. It includes an optional cursor parameter for pagination support.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/prompts.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"prompts/list\",\n  \"params\": {\n    \"cursor\": \"optional-cursor-value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Audio Content in MCP Messages (JSON)\nDESCRIPTION: Example of how audio content is structured in MCP sampling messages, including base64-encoded data and MIME type.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/sampling.mdx#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"audio\",\n  \"data\": \"base64-encoded-audio-data\",\n  \"mimeType\": \"audio/wav\"\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Repositories Roots Example in MCP\nDESCRIPTION: JSON array example showing how multiple repository roots can be defined with their respective URIs and display names.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/client/roots.mdx#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"uri\": \"file:///home/user/repos/frontend\",\n    \"name\": \"Frontend Repository\"\n  },\n  {\n    \"uri\": \"file:///home/user/repos/backend\",\n    \"name\": \"Backend Repository\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Image Content in MCP Messages (JSON)\nDESCRIPTION: Example of how image content is structured in MCP sampling messages, including base64-encoded data and MIME type.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/sampling.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"image\",\n  \"data\": \"base64-encoded-image-data\",\n  \"mimeType\": \"image/jpeg\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in MCP Sampling Responses (JSON)\nDESCRIPTION: Example of an error response in MCP sampling, such as when a user rejects a sampling request.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/sampling.mdx#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"error\": {\n    \"code\": -1,\n    \"message\": \"User rejected sampling request\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: List Changed Notification\nDESCRIPTION: JSON-RPC notification message sent when available prompts list changes. Used by servers that support the listChanged capability.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/prompts.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/prompts/list_changed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Resource Capabilities in JSON\nDESCRIPTION: Demonstrates how to declare resource capabilities in the server's JSON response, including optional features like subscribe and listChanged.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/server/resources.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"capabilities\": {\n    \"resources\": {\n      \"subscribe\": true,\n      \"listChanged\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Tools Request in JSON-RPC\nDESCRIPTION: JSON-RPC request for listing available tools, supporting pagination with an optional cursor parameter.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/tools.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/list\",\n  \"params\": {\n    \"cursor\": \"optional-cursor-value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a Ping Request in JSON-RPC\nDESCRIPTION: Example of a ping request in JSON-RPC format. This request has no parameters and is used to initiate a ping to verify connection responsiveness.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/basic/utilities/ping.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"123\",\n  \"method\": \"ping\"\n}\n```\n\n----------------------------------------\n\nTITLE: Image Content Result in JSON\nDESCRIPTION: JSON representation of an image content result from a tool invocation, including base64-encoded data and MIME type.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/tools.mdx#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"image\",\n  \"data\": \"base64-encoded-data\",\n  \"mimeType\": \"image/png\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Model Context Protocol Repository\nDESCRIPTION: Instructions for forking, cloning the repository, and installing dependencies for the Model Context Protocol project. Requires Git and npm.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/YOUR-USERNAME/specification.git\ncd specification\n```\n\nLANGUAGE: bash\nCODE:\n```\nnvm install  # install correct Node version\nnpm install  # install dependencies\n```\n\n----------------------------------------\n\nTITLE: Resource Subscription Request in JSON-RPC\nDESCRIPTION: JSON-RPC request for subscribing to changes in a specific resource, identified by its URI.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/resources.mdx#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 4,\n  \"method\": \"resources/subscribe\",\n  \"params\": {\n    \"uri\": \"file:///project/src/main.rs\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Audio Content Format in MCP Prompts\nDESCRIPTION: JSON structure for including audio content in prompt messages, enabling multi-modal interactions with audio context.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/prompts.mdx#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"audio\",\n  \"data\": \"base64-encoded-audio-data\",\n  \"mimeType\": \"audio/wav\"\n}\n```\n\n----------------------------------------\n\nTITLE: Text Content Example in MCP Prompts\nDESCRIPTION: JSON example of text content in a prompt message for the Model Context Protocol. It includes the content type and the actual text.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/prompts.mdx#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"text\",\n  \"text\": \"The text content of the message\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Resources Request in JSON-RPC\nDESCRIPTION: JSON-RPC request for listing available resources, supporting pagination with an optional cursor parameter.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/resources.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"resources/list\",\n  \"params\": {\n    \"cursor\": \"optional-cursor-value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level Request Format\nDESCRIPTION: JSON-RPC request format for clients to set the minimum log level on the server.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2024-11-05/server/utilities/logging.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"logging/setLevel\",\n  \"params\": {\n    \"level\": \"info\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Sampling Capability in MCP Initialization (JSON)\nDESCRIPTION: Example of how clients declare support for sampling during the initialization process of the Model Context Protocol.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/client/sampling.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"capabilities\": {\n    \"sampling\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MCP Notification Interface\nDESCRIPTION: TypeScript interface defining the structure of one-way notification messages in MCP that don't expect a response.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/docs/concepts/architecture.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Notification {\n  method: string;\n  params?: { ... };\n}\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Locally\nDESCRIPTION: Command to serve the documentation locally for preview and testing. This step is optional and uses npm.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run serve:docs\n```\n\n----------------------------------------\n\nTITLE: Declaring Resource Capabilities in JSON-RPC\nDESCRIPTION: Example of declaring resource capabilities with both subscribe and listChanged features enabled.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/2025-03-26/server/resources.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"capabilities\": {\n    \"resources\": {\n      \"subscribe\": true,\n      \"listChanged\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Roots Request in JSON\nDESCRIPTION: JSON-RPC request sent by servers to retrieve the list of roots from the client.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/specification/draft/client/roots.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"roots/list\"\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Setup\nDESCRIPTION: Commands for setting up environment variables and gitignore configuration.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/tutorials/building-a-client-node.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nANTHROPIC_API_KEY=your_key_here\n```\n\nLANGUAGE: bash\nCODE:\n```\necho \".env\" >> .gitignore\n```\n\n----------------------------------------\n\nTITLE: Checking Claude Logs on Windows\nDESCRIPTION: Command to view Claude's MCP-related logs on Windows systems.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/user.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntype \"%APPDATA%\\Claude\\logs\\mcp*.log\"\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Globally\nDESCRIPTION: Command to install NPM globally on Windows systems.\nSOURCE: https://github.com/modelcontextprotocol/modelcontextprotocol/blob/main/docs/quickstart/user.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g npm\n```"
  }
]