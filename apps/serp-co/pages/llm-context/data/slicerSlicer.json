[
  {
    "owner": "slicer",
    "repo": "slicer",
    "content": "TITLE: Plotting Average Intensity Over Time (Python)\nDESCRIPTION: This snippet plots the average intensity of segments within a volume sequence over time in 3D Slicer. It retrieves a volume sequence proxy node and a segmentation node. It calculates the mean intensity within each visible segment for each time point in the sequence. Finally, it generates a plot showing the intensity variation over time for each segment.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/sequences.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# inputs\nvolumeSequenceProxyNode = slicer.mrmlScene.GetFirstNodeByClass(\"vtkMRMLScalarVolumeNode\")\nsegmentationNode = slicer.mrmlScene.GetFirstNodeByClass(\"vtkMRMLSegmentationNode\")\n\n# get volume sequence as numpy array\nvolumeSequenceBrowserNode = slicer.modules.sequences.logic().GetFirstBrowserNodeForProxyNode(volumeSequenceProxyNode)\nvolumeSequenceNode = volumeSequenceBrowserNode.GetSequenceNode(volumeSequenceProxyNode)\n\n# get voxels of visible segments as numpy arrays\nsegmentNames = []\nsegmentArrays = []\nvisibleSegmentIds = vtk.vtkStringArray()\nsegmentationNode.GetDisplayNode().GetVisibleSegmentIDs(visibleSegmentIds)\nfor segmentIdIndex in range(visibleSegmentIds.GetNumberOfValues()):\n    segmentId = visibleSegmentIds.GetValue(segmentIdIndex)\n    segmentArrays.append(slicer.util.arrayFromSegmentBinaryLabelmap(segmentationNode, segmentId, volumeSequenceProxyNode))\n    segmentNames.append(segmentationNode.GetSegmentation().GetSegment(segmentId).GetName())\n\n# Create table that will contain time values and mean intensity value for each segment for each time point\nimport numpy as np\nintensityTable = np.zeros([volumeSequenceNode.GetNumberOfDataNodes(), len(segmentArrays)+1])\nintensityTableTimeColumn = 0\nintensityTableColumnNames = [volumeSequenceNode.GetIndexName()] + segmentNames\nfor volumeIndex in range(volumeSequenceNode.GetNumberOfDataNodes()):\n    intensityTable[volumeIndex, intensityTableTimeColumn] = volumeSequenceNode.GetNthIndexValue(volumeIndex)\n    for segmentIndex, segmentArray in enumerate(segmentArrays):\n        voxelArray = slicer.util.arrayFromVolume(volumeSequenceNode.GetNthDataNode(volumeIndex))\n        intensityTable[volumeIndex, segmentIndex+1] = voxelArray[segmentArray>0].mean()\n\n# Plot results\nplotNodes = {}\nslicer.util.plot(intensityTable, intensityTableTimeColumn, intensityTableColumnNames, \"Intensity\", nodes=plotNodes)\n# Set color and name of plots to match segment names and colors\nfor segmentIdIndex in range(visibleSegmentIds.GetNumberOfValues()):\n    segment = segmentationNode.GetSegmentation().GetSegment(visibleSegmentIds.GetValue(segmentIdIndex))\n    seriesNode = plotNodes['series'][segmentIdIndex]\n    seriesNode.SetColor(segment.GetColor())\n    seriesNode.SetName(segment.GetName())\n```\n\n----------------------------------------\n\nTITLE: Using the Custom Parameter Node (Python)\nDESCRIPTION: This snippet demonstrates how to use the `CustomParameterNode` class. It creates a `vtkMRMLScriptedModuleNode`, instantiates `CustomParameterNode` with it, sets the properties, and uses the properties in a loop.  It shows setting the int, list, and vtkMRMLModelNode properties.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/parameter_nodes/overview.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nparameterNode = slicer.mrmlScene.AddNewNodeByClass('vtkMRMLScriptedModuleNode')\nparam = CustomParameterNode(parameterNode)\n\n# can set the property directly with an appropriate type\nparam.numIterations = 500\nparam.inputs = [slicer.mrmlScene.AddNewNodeByClass('vtkMRMLModelNode') for _ in range(5)]\nparam.output = slicer.mrmlScene.AddNewNodeByClass('vtkMRMLModelNode')\n\n# pythonic list usage\nfor inputModel in param.inputs:\n  mesh = inputModel.GetMesh()\n  # ...\n\nfor iteration in range(param.numIterations):\n  # run iteration\n\nparam.output.SetAndObserveMesh(...)\n```\n\n----------------------------------------\n\nTITLE: Change Default Slice View Orientation in Slicer (Python)\nDESCRIPTION: This code modifies the default slice view orientation presets in 3D Slicer. It flips the left-right orientation of axial and coronal slice views by adjusting the `vtkMatrix3x3` orientation presets. The script modifies both existing slice nodes and the default slice node in the scene.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_47\n\nLANGUAGE: python\nCODE:\n```\n# Axial slice axes:\n#  1 0 0\n#  0 1 0\n#  0 0 1\naxialSliceToRas=vtk.vtkMatrix3x3()\n\n# Coronal slice axes:\n#  1 0 0\n#  0 0 -1\n#  0 1 0\ncoronalSliceToRas=vtk.vtkMatrix3x3()\ncoronalSliceToRas.SetElement(1,1, 0)\ncoronalSliceToRas.SetElement(1,2, -1)\ncoronalSliceToRas.SetElement(2,1, 1)\ncoronalSliceToRas.SetElement(2,2, 0)\n\n# Replace orientation presets in all existing slice nodes and in the default slice node\nsliceNodes = slicer.util.getNodesByClass(\"vtkMRMLSliceNode\")\nsliceNodes.append(slicer.mrmlScene.GetDefaultNodeByClass(\"vtkMRMLSliceNode\"))\nfor sliceNode in sliceNodes:\n  orientationPresetName = sliceNode.GetOrientation()\n  sliceNode.RemoveSliceOrientationPreset(\"Axial\")\n  sliceNode.AddSliceOrientationPreset(\"Axial\", axialSliceToRas)\n  sliceNode.RemoveSliceOrientationPreset(\"Coronal\")\n  sliceNode.AddSliceOrientationPreset(\"Coronal\", coronalSliceToRas)\n  sliceNode.SetOrientation(orientationPresetName)\n```\n\n----------------------------------------\n\nTITLE: Importing Labelmap to Segmentation with Custom Mapping - Python\nDESCRIPTION: This code demonstrates how to import a labelmap volume into a segmentation node using a custom label value mapping. It retrieves the labelmap volume, creates a new segmentation node, retrieves or creates a color table node, associates the color table with the labelmap volume's display node, and then imports the labelmap into the segmentation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nlabelmapVolumeNode = getNode('Volume-label')\nsegmentationNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLSegmentationNode\")  # import into new segmentation node\ncolorTableNode = ...  # created from scratch or loaded from file\n\nlabelmapVolumeNode.GetDisplayNode().SetAndObserveColorNodeID(colorTableNode.GetID())  # just in case the custom color table has not been already associated with the labelmap volume\nslicer.modules.segmentations.logic().ImportLabelmapToSegmentationNode(labelmapVolumeNode, segmentationNode)\n```\n\n----------------------------------------\n\nTITLE: Rasterizing a Model and Saving Images (Python)\nDESCRIPTION: This Python code rasterizes a 3D model into a series of 2D image slices and saves them as TIFF files.  It loads the model, creates a reference volume with specified spacing and margin, converts the model to a labelmap, and then exports the labelmap volume to an array. Finally, it iterates through the array, saving each slice as a TIFF image to the specified output directory. It uses libraries such as `vtk`, `numpy`, and `imageio`, installing `imageio` if it's missing.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/models.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ninputModelFile = \"/some/input/folder/SomeShape.stl\"\noutputDir = \"/some/output/folder\"\noutputVolumeLabelValue = 100\noutputVolumeSpacingMm = [0.5, 0.5, 0.5]\noutputVolumeMarginMm = [10.0, 10.0, 10.0]\n\n# Read model\ninputModel = slicer.util.loadModel(inputModelFile)\n\n# Determine output volume geometry and create a corresponding reference volume\nimport math\nimport numpy as np\nbounds = np.zeros(6)\ninputModel.GetBounds(bounds)\nimageData = vtk.vtkImageData()\nimageSize = [ int((bounds[axis*2+1]-bounds[axis*2]+outputVolumeMarginMm[axis]*2.0)/outputVolumeSpacingMm[axis]) for axis in range(3) ]\nimageOrigin = [ bounds[axis*2]-outputVolumeMarginMm[axis] for axis in range(3) ]\nimageData.SetDimensions(imageSize)\nimageData.AllocateScalars(vtk.VTK_UNSIGNED_CHAR, 1)\nimageData.GetPointData().GetScalars().Fill(0)\nreferenceVolumeNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLScalarVolumeNode\")\nreferenceVolumeNode.SetOrigin(imageOrigin)\nreferenceVolumeNode.SetSpacing(outputVolumeSpacingMm)\nreferenceVolumeNode.SetAndObserveImageData(imageData)\nreferenceVolumeNode.CreateDefaultDisplayNodes()\n\n# Convert model to labelmap\nseg = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLSegmentationNode\")\nseg.SetReferenceImageGeometryParameterFromVolumeNode(referenceVolumeNode)\nslicer.modules.segmentations.logic().ImportModelToSegmentationNode(inputModel, seg)\nseg.CreateBinaryLabelmapRepresentation()\noutputLabelmapVolumeNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLLabelMapVolumeNode\")\nslicer.modules.segmentations.logic().ExportVisibleSegmentsToLabelmapNode(seg, outputLabelmapVolumeNode, referenceVolumeNode)\noutputLabelmapVolumeArray = (slicer.util.arrayFromVolume(outputLabelmapVolumeNode) * outputVolumeLabelValue).astype(\"int8\")\n\n# Install dependencies\ntry:\n  import imageio\nexcept ModuleNotFoundError:\n  slicer.util.pip_install(\"imageio\")\n  import imageio\n\n# Write labelmap volume to series of TIFF files\nfor i in range(len(outputLabelmapVolumeArray)):\n  imageio.imwrite(f\"{outputDir}/image_{i:03}.tiff\", outputLabelmapVolumeArray[i])\n```\n\n----------------------------------------\n\nTITLE: Read/Write Segment as NumPy Array\nDESCRIPTION: This snippet shows how to read and write voxels of a segment's binary labelmap representation as a NumPy array. It demonstrates clearing the segmentation, creating a segment by thresholding an image, and filling a rectangular region. It requires a volume node named 'MRHead' and a segmentation node named 'Segmentation'.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nvolumeNode = getNode('MRHead')\nsegmentationNode = getNode('Segmentation')\nsegmentId = segmentationNode.GetSegmentation().GetSegmentIdBySegmentName('Segment_1')\n\n# Get segment as numpy array\nsegmentArray = slicer.util.arrayFromSegmentBinaryLabelmap(segmentationNode, segmentId, volumeNode)\n\n# Modify the segmentation\nsegmentArray[:] = 0  # clear the segmentation\nsegmentArray[ slicer.util.arrayFromVolume(volumeNode) > 80 ] = 1  # create segment by simple thresholding of an image\nsegmentArray[20:80, 40:90, 30:70] = 1  # fill a rectangular region using numpy indexing\nslicer.util.updateSegmentBinaryLabelmapFromArray(segmentArray, segmentationNode, segmentId, volumeNode)\n```\n\n----------------------------------------\n\nTITLE: Set Crosshair Jump Mode to Centered in Slicer (Python)\nDESCRIPTION: This snippet changes the default slice jump mode to centered for the crosshair in 3D Slicer. It retrieves the first crosshair node in the scene and sets its behavior to `CenteredJumpSlice`, ensuring that the crosshair jumps to the center of the slice.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_49\n\nLANGUAGE: python\nCODE:\n```\ncrosshair=slicer.mrmlScene.GetFirstNodeByClass(\"vtkMRMLCrosshairNode\")\ncrosshair.SetCrosshairBehavior(crosshair.CenteredJumpSlice)\n```\n\n----------------------------------------\n\nTITLE: Loading and Adding Volume Rendering Presets (Slicer)\nDESCRIPTION: This Python script loads custom volume rendering presets from an external MRML file (MyPresets.mrml) into the 3D Slicer application. It reads the scene, registers the VolumeProperty node class, and connects to the MRML file. Then, it retrieves volume property nodes from the custom scene and adds them as presets to the volume rendering logic using the `AddPreset()` method.  Requires the `slicer` module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_49\n\nLANGUAGE: python\nCODE:\n```\npresetsScenePath = \"MyPresets.mrml\"\n\n# Read presets scene\ncustomPresetsScene = slicer.vtkMRMLScene()\nvrPropNode = slicer.vtkMRMLVolumePropertyNode()\ncustomPresetsScene.RegisterNodeClass(vrPropNode)\ncustomPresetsScene.SetURL(presetsScenePath)\ncustomPresetsScene.Connect()\n\n# Add presets to volume rendering logic\nvrLogic = slicer.modules.volumerendering.logic()\npresetsScene = vrLogic.GetPresetsScene()\nvrNodes = customPresetsScene.GetNodesByClass(\"vtkMRMLVolumePropertyNode\")\nvrNodes.UnRegister(None)\nfor itemNum in range(vrNodes.GetNumberOfItems()):\n  node = vrNodes.GetItemAsObject(itemNum)\n  vrLogic.AddPreset(node)\n\n```\n\n----------------------------------------\n\nTITLE: Downloading Volume with Progress - Slicer - Python\nDESCRIPTION: Downloads a volume from a remote server with interruptible progress reporting. It uses `SampleData.SampleDataLogic().downloadFromURL` along with a custom progress reporting function that updates a progress dialog and allows canceling the download. The function downloads, reports progress, and loads the volume node.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport SampleData\n\ndef reportProgress(msg, level=None):\n  # Print progress in the console\n  print(\"Loading... {0}%\".format(sampleDataLogic.downloadPercent))\n  # Abort download if cancel is clicked in progress bar\n  if slicer.progressWindow.wasCanceled:\n    raise Exception(\"download aborted\")\n  # Update progress window\n  slicer.progressWindow.show()\n  slicer.progressWindow.activateWindow()\n  slicer.progressWindow.setValue(int(sampleDataLogic.downloadPercent))\n  slicer.progressWindow.setLabelText(\"Downloading...\")\n  # Process events to allow screen to refresh\n  slicer.app.processEvents()\n\ntry:\n  volumeNode = None\n  slicer.progressWindow = slicer.util.createProgressDialog()\n  sampleDataLogic = SampleData.SampleDataLogic()\n  sampleDataLogic.logMessage = reportProgress\n  loadedNodes = sampleDataLogic.downloadFromURL(\n    nodeNames=\"MRHead\",\n    fileNames=\"MR-head25.nrrd\",\n    uris=\"https://github.com/Slicer/SlicerTestingData/releases/download/SHA256/cc211f0dfd9a05ca3841ce1141b292898b2dd2d3f08286affadf823a7e58df93\",\n    checksums=\"SHA256:cc211f0dfd9a05ca3841ce1141b292898b2dd2d3f08286affadf823a7e58df93\")\n  volumeNode = loadedNodes[0]\nfinally:\n  slicer.progressWindow.close()\n```\n\n----------------------------------------\n\nTITLE: Auto-generating GUI with Parameter Node Wrapper in Slicer (Python)\nDESCRIPTION: This snippet demonstrates how to auto-generate a GUI for a parameter node wrapper using the createGui method. It defines a Point parameter pack and a ParameterNodeWrapper class with various data types and annotations, then creates a GUI for the wrapper.  The GUI creation takes into account the validators used when choosing which type of widget to generate for a type. It assumes the availability of slicer and related modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/parameter_nodes/gui_creation.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Annotated\n\nfrom slicer.parameterNodeWrapper import (\n  createGui,\n  parameterNodeWrapper,\n  parameterPack,\n)\n\n@parameterPack\nclass Point:\n    x: float\n    y: float\n\n@parameterNodeWrapper\nclass ParameterNodeWrapper:\n    point: Point\n    reduction: Annotated[float, WithinRange(0, 1)]\n    text: str\n\nparameterNodeWidget = createGui(ParameterNodeWrapper)\n```\n\n----------------------------------------\n\nTITLE: Thresholding volume with numpy array operations in Slicer (Python)\nDESCRIPTION: This snippet demonstrates how to threshold a volume in Slicer by accessing its voxel data as a NumPy array, modifying the array based on a threshold value, and updating the volume in Slicer. It retrieves voxels as a numpy array, modifies voxel values, and notifies slicer about the image modification.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nnodeName = \"MRHead\"\nthresholdValue = 100\nvoxelArray = array(nodeName) # get voxels as numpy array\nvoxelArray[voxelArray < thresholdValue] = 0 # modify voxel values\ngetNode(nodeName).Modified() # at the end of all processing, notify Slicer that the image modification is completed\n```\n\n----------------------------------------\n\nTITLE: Get Markups Control Point Modification Notification - Python\nDESCRIPTION: This code snippet demonstrates how to get notifications when a markup control point position is modified. It defines callback functions for `PointModifiedEvent`, `PointStartInteractionEvent`, and `PointEndInteractionEvent` and adds observers to the point list node.  It includes preview states during point interaction. This allows you to react to changes in the markups in real-time.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ndef onMarkupChanged(caller,event):\n  markupsNode = caller\n  sliceView = markupsNode.GetAttribute(slicer.vtkMRMLMarkupsDisplayNode.GetMovingInSliceViewAttributeName())\n  movingMarkupIndex = markupsNode.GetDisplayNode().GetActiveControlPoint()\n  if movingMarkupIndex >= 0:\n    pos = [0,0,0]\n    markupsNode.GetNthControlPointPosition(movingMarkupIndex, pos)\n    isPreview = markupsNode.GetNthControlPointPositionStatus(movingMarkupIndex) == slicer.vtkMRMLMarkupsNode.PositionPreview\n    if isPreview:\n      logging.info(\"Point {0} is previewed at {1} in slice view {2}\".format(movingMarkupIndex, pos, sliceView))\n    else:\n      logging.info(\"Point {0} was moved {1} in slice view {2}\".format(movingMarkupIndex, pos, sliceView))\n  else:\n    logging.info(\"Points modified: slice view = {0}\".format(sliceView))\n\ndef onMarkupStartInteraction(caller, event):\n  markupsNode = caller\n  sliceView = markupsNode.GetAttribute(slicer.vtkMRMLMarkupsDisplayNode.GetMovingInSliceViewAttributeName())\n  movingMarkupIndex = markupsNode.GetDisplayNode().GetActiveControlPoint()\n  logging.info(\"Start interaction: point ID = {0}, slice view = {1}\".format(movingMarkupIndex, sliceView))\n\ndef onMarkupEndInteraction(caller, event):\n  markupsNode = caller\n  sliceView = markupsNode.GetAttribute(slicer.vtkMRMLMarkupsDisplayNode.GetMovingInSliceViewAttributeName())\n  movingMarkupIndex = markupsNode.GetDisplayNode().GetActiveControlPoint()\n  logging.info(\"End interaction: point ID = {0}, slice view = {1}\".format(movingMarkupIndex, sliceView))\n\npointListNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLMarkupsFiducialNode\")\npointListNode.AddControlPoint([0,0,0])\npointListNode.AddObserver(slicer.vtkMRMLMarkupsNode.PointModifiedEvent, onMarkupChanged)\npointListNode.AddObserver(slicer.vtkMRMLMarkupsNode.PointStartInteractionEvent, onMarkupStartInteraction)\npointListNode.AddObserver(slicer.vtkMRMLMarkupsNode.PointEndInteractionEvent, onMarkupEndInteraction)\n```\n\n----------------------------------------\n\nTITLE: Convert DICOM to NRRD on Command Line\nDESCRIPTION: Converts a DICOM file to NRRD format using the Slicer command-line interface. This snippet shows how to load a DICOM volume, save it as an NRRD file, and exit Slicer, all within a single command.  It's important to use forward slashes for paths on Windows.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/dicom.md#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n/Applications/Slicer-4.6.2.app/Contents/MacOS/Slicer --no-main-window --python-code \"node=slicer.util.loadVolume('/tmp/series/im0.dcm'); slicer.util.saveNode(node, '/tmp/output.nrrd'); exit()\"\n```\n\n----------------------------------------\n\nTITLE: Loading Segmentation Data - Python\nDESCRIPTION: This snippet demonstrates how to load segmentation data from different file formats (NRRD, NIFTI, STL) using `slicer.util.loadSegmentation`. It showcases loading directly from a `.seg.nrrd` file, using a color table for NIFTI images, and loading from an STL file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Load segmentation from .seg.nrrd file (includes segment names and colors)\nslicer.util.loadSegmentation(\"c:/tmp/tmp/Segmentation.nrrd\")\n\n# Create segmentation from a NIFTI + color table file\ncolorNode = slicer.util.loadColorTable('c:/tmp/tmp/Segmentation-label_ColorTable.ctbl')\nslicer.util.loadSegmentation(\"c:/tmp/tmp/Segmentation.nii\", {'colorNodeID': colorNode.GetID()})\n\n# Create segmentation from a STL file\nslicer.util.loadSegmentation(\"c:/tmp/Segment_1.stl\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Histogram Plot using Slicer Utility Function in Python\nDESCRIPTION: This code snippet demonstrates how to create a histogram plot of a volume using the `slicer.util.plot()` utility function. It imports the SampleData module to load a sample volume, computes the histogram using NumPy, and then uses the `slicer.util.plot()` function to create a chart node. The Y-axis range of the chart is then set manually.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/plots.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Get a volume from SampleData and compute its histogram\nimport SampleData\nimport numpy as np\nvolumeNode = SampleData.SampleDataLogic().downloadMRHead()\nhistogram = np.histogram(arrayFromVolume(volumeNode), bins=50)\n\nchartNode = slicer.util.plot(histogram, xColumnIndex = 1)\nchartNode.SetYAxisRangeAuto(False)\nchartNode.SetYAxisRange(0, 4e5)\n```\n\n----------------------------------------\n\nTITLE: Auto Volume Rendering on Load - Slicer - Python\nDESCRIPTION: Automatically shows volume rendering when a volume is loaded by adding an observer to the `slicer.mrmlScene.NodeAddedEvent`. The `onNodeAdded` function triggers `showVolumeRendering` when a new volume node is added.  `showVolumeRendering` creates and configures volume rendering nodes, and applies preset based on scalar range.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@vtk.calldata_type(vtk.VTK_OBJECT)\ndef onNodeAdded(caller, event, calldata):\n  node = calldata\n  if isinstance(node, slicer.vtkMRMLVolumeNode):\n    # Call showVolumeRendering using a timer instead of calling it directly\n    # to allow the volume loading to fully complete.\n    qt.QTimer.singleShot(0, lambda: showVolumeRendering(node))\n\ndef showVolumeRendering(volumeNode):\n  print(\"Show volume rendering of node \" + volumeNode.GetName())\n  volRenLogic = slicer.modules.volumerendering.logic()\n  displayNode = volRenLogic.CreateDefaultVolumeRenderingNodes(volumeNode)\n  displayNode.SetVisibility(True)\n  scalarRange = volumeNode.GetImageData().GetScalarRange()\n  if scalarRange[1]-scalarRange[0] < 1500:\n    # Small dynamic range, probably MRI\n    displayNode.GetVolumePropertyNode().Copy(volRenLogic.GetPresetByName(\"MR-Default\"))\n  else:\n    # Larger dynamic range, probably CT\n    displayNode.GetVolumePropertyNode().Copy(volRenLogic.GetPresetByName(\"CT-Chest-Contrast-Enhanced\"))\n\nslicer.mrmlScene.AddObserver(slicer.vtkMRMLScene.NodeAddedEvent, onNodeAdded)\n```\n\n----------------------------------------\n\nTITLE: Modify Segmentation Display Options\nDESCRIPTION: This snippet demonstrates how to modify the display options of a segmentation, including setting the overall opacity, setting the opacity of a single segment, setting the segment color, and overriding the segment color in the display node. It assumes a segmentation node named 'Segmentation' and a segment with ID 'Segment_1' exist.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nsegmentation = getNode('Segmentation')\nsegmentID = 'Segment_1'\n\ndisplayNode = segmentation.GetDisplayNode()\ndisplayNode.SetOpacity3D(0.4)  # Set overall opacity of the segmentation\ndisplayNode.SetSegmentOpacity3D(segmentID, 0.2)  # Set opacity of a single segment\n\n# Segment color is not just a display property, but it is stored in the segment itself (and stored in the segmentation file)\nsegment = segmentation.GetSegmentation().GetSegment(segmentID)\nsegment.SetColor(1, 0, 0)  # red\n\n# In very special cases (for example, when a segment's color only need to be changed in a specific view)\n# the segment color can be overridden in the display node.\n# This is not recommended for general use.\ndisplayNode.SetSegmentOverrideColor(segmentID, 0, 0, 1)  # blue\n```\n\n----------------------------------------\n\nTITLE: Installing Slicer dependencies on Debian 12/11\nDESCRIPTION: This command updates the package list and installs the necessary development tools and support libraries for building Slicer on Debian 12 Bookworm (Stable) and Bullseye 11 (OldStable). It uses `apt` to install packages such as `git`, `build-essential`, `cmake`, CMake GUI tools, Qt5 development libraries, and `libxt-dev`. The CMake version included with Debian 12 may not be compatible, requiring manual installation of a newer version.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/linux.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nsudo apt update && sudo apt install git build-essential cmake cmake-curses-gui cmake-qt-gui \\\n  qtmultimedia5-dev qttools5-dev libqt5xmlpatterns5-dev libqt5svg5-dev qtwebengine5-dev qtscript5-dev \\\n  qtbase5-private-dev libqt5x11extras5-dev libxt-dev libssl-dev\n```\n\n----------------------------------------\n\nTITLE: Volume NumPy Operations in Segmentation\nDESCRIPTION: This snippet shows how segment arrays can be used in numpy operations to read/write the corresponding region of a volume. It demonstrates how to get voxels of a volume within the segmentation, compute statistics, and modify the volume based on the segmentation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n# Get voxels of a volume within the segmentation and compute some statistics\nvolumeArray = slicer.util.arrayFromVolume(volumeNode)\nvolumeVoxelsInSegmentArray = volumeArray[ segmentArray > 0 ]\nprint(f\"Lowest voxel value in segment: {volumeVoxelsInSegmentArray.min()}\")\nprint(f\"Highest voxel value in segment: {volumeVoxelsInSegmentArray.max()}\")\n\n# Modify the volume\n# For example, increase the contrast inside the selected segment by a factor of 4x:\nvolumeArray[ segmentArray > 0 ] = volumeArray[ segmentArray > 0 ] * 4\n# Indicate that we have completed modifications on the volume array\nslicer.util.arrayFromVolumeModified(volumeNode)\n```\n\n----------------------------------------\n\nTITLE: Running CLI in Background with Status Updates in Slicer (Python)\nDESCRIPTION: This code demonstrates how to execute a CLI module in the background and monitor its progress. It defines functions to start the CLI execution and a callback function to handle status updates. It creates a simple callback `onProcessingStatusUpdate` that will be called whenever the cliNode is modified.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/python_faq.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef startProcessing(inputVolumeNode):\n  \"\"\"Create surface mesh from volume node using CLI module\"\"\"\n  # Set parameters\n  parameters = {}\n  parameters[\"InputVolume\"] = inputVolumeNode\n  outputModelNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLModelNode\")\n  parameters[\"OutputGeometry\"] = outputModelNode\n  # Start execution in the background\n  grayMaker = slicer.modules.grayscalemodelmaker\n  cliNode = slicer.cli.run(grayMaker, None, parameters)\n  return cliNode\n\ndef onProcessingStatusUpdate(cliNode, event):\n  print(\"Got a %s from a %s\" % (event, cliNode.GetClassName()))\n  if cliNode.IsA('vtkMRMLCommandLineModuleNode'):\n    print(\"Status is %s\" % cliNode.GetStatusString())\n  if cliNode.GetStatus() & cliNode.Completed:\n    if cliNode.GetStatus() & cliNode.ErrorsMask:\n      # error\n      errorText = cliNode.GetErrorText()\n      print(\"CLI execution failed: \" + errorText)\n    else:\n      # success\n      print(\"CLI execution succeeded. Output model node ID: \"+cliNode.GetParameterAsString(\"OutputGeometry\"))\n\nvolumeNode = getNode('MRHead')\ncliNode = startProcessing(volumeNode)\ncliNode.AddObserver('ModifiedEvent', onProcessingStatusUpdate)\n\n# If you need to cancel the CLI, call\n# cliNode.Cancel()\n```\n\n----------------------------------------\n\nTITLE: Creating Model from Volume using CLI Module in Slicer (Python)\nDESCRIPTION: This function creates a surface mesh from a volume node using a CLI module (Grayscale Model Maker). It sets the input volume, creates an output model node, executes the CLI module, and processes the results, handling potential errors.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/python_faq.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ndef createModelFromVolume(inputVolumeNode):\n  \"\"\"Create surface mesh from volume node using CLI module\"\"\"\n  # Set parameters\n  parameters = {}\n  parameters[\"InputVolume\"] = inputVolumeNode\n  outputModelNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLModelNode\")\n  parameters[\"OutputGeometry\"] = outputModelNode\n  # Execute\n  grayMaker = slicer.modules.grayscalemodelmaker\n  cliNode = slicer.cli.runSync(grayMaker, None, parameters)\n  # Process results\n  if cliNode.GetStatus() & cliNode.ErrorsMask:\n    # error\n    errorText = cliNode.GetErrorText()\n    slicer.mrmlScene.RemoveNode(cliNode)\n    raise ValueError(\"CLI execution failed: \" + errorText)\n  # success\n  slicer.mrmlScene.RemoveNode(cliNode)\n  return outputModelNode\n```\n\n----------------------------------------\n\nTITLE: Creating a New Volume - Python\nDESCRIPTION: This Python script demonstrates how to create a new, empty volume in 3D Slicer. It defines the volume's size, voxel type, origin, spacing, and directions. It uses the vtkImageData class to create the image data and then creates a vtkMRMLScalarVolumeNode to represent the volume in the scene. It depends on the `vtk` module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nnodeName = \"MyNewVolume\"\nimageSize = [512, 512, 512]\nvoxelType=vtk.VTK_UNSIGNED_CHAR\nimageOrigin = [0.0, 0.0, 0.0]\nimageSpacing = [1.0, 1.0, 1.0]\nimageDirections = [[1,0,0], [0,1,0], [0,0,1]]\nfillVoxelValue = 0\n\n# Create an empty image volume, filled with fillVoxelValue\nimageData = vtk.vtkImageData()\nimageData.SetDimensions(imageSize)\nimageData.AllocateScalars(voxelType, 1)\nimageData.GetPointData().GetScalars().Fill(fillVoxelValue)\n# Create volume node\nvolumeNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLScalarVolumeNode\", nodeName)\nvolumeNode.SetOrigin(imageOrigin)\nvolumeNode.SetSpacing(imageSpacing)\nvolumeNode.SetIJKToRASDirections(imageDirections)\nvolumeNode.SetAndObserveImageData(imageData)\nvolumeNode.CreateDefaultDisplayNodes()\nvolumeNode.CreateDefaultStorageNode()\n```\n\n----------------------------------------\n\nTITLE: Fit Sphere to Markups Points - Python\nDESCRIPTION: This snippet fits a sphere to a set of markups points using a least-squares approach. It calculates the center and radius of the sphere and then creates a VTK sphere source and adds it to the scene as a model. The initial guess for the sphere's center is the mean of the markups positions, and the initial radius is half the norm of the difference between the minimum and maximum markups positions.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# initial guess\ncenter0 = np.mean(markupsPositions, 0)\nradius0 = np.linalg.norm(np.amin(markupsPositions,0)-np.amax(markupsPositions,0))/2.0\nfittingResult = fit_sphere_least_squares(markupsPositions[:,0], markupsPositions[:,1], markupsPositions[:,2], [center0[0], center0[1], center0[2], radius0])\n[centerX, centerY, centerZ, radius] = fittingResult[\"x\"]\n\n# Create a sphere using the fitted parameters\nsphere = vtk.vtkSphereSource()\nsphere.SetPhiResolution(30)\nsphere.SetThetaResolution(30)\nsphere.SetCenter(centerX, centerY, centerZ)\nsphere.SetRadius(radius)\nsphere.Update()\n\n# Add the sphere to the scene\nmodelsLogic = slicer.modules.models.logic()\nmodel = modelsLogic.AddModel(sphere.GetOutput())\nmodel.GetDisplayNode().SetSliceIntersectionVisibility(True)\nmodel.GetDisplayNode().SetSliceIntersectionThickness(3)\nmodel.GetDisplayNode().SetColor(1,1,0)\n```\n\n----------------------------------------\n\nTITLE: Exporting Segmentation to Models - Python\nDESCRIPTION: This snippet exports all segments from a segmentation node to model nodes. It retrieves the segmentation node, creates a folder in the subject hierarchy to store the models, and then exports all segments to models within that folder.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsegmentationNode = getNode(\"Segmentation\")\nshNode = slicer.mrmlScene.GetSubjectHierarchyNode()\nexportFolderItemId = shNode.CreateFolderItem(shNode.GetSceneItemID(), \"Segments\")\nslicer.modules.segmentations.logic().ExportAllSegmentsToModels(segmentationNode, exportFolderItemId)\n```\n\n----------------------------------------\n\nTITLE: Add Button to Layout Selector Toolbar (Python)\nDESCRIPTION: This code snippet demonstrates how to add a button to the layout selector toolbar for a custom layout. It finds the ViewToolBar, retrieves the layout menu, and adds an action to switch to the custom layout when the button is clicked.  Requires the definition of a custom layout via its ID, in this case `customLayoutId`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_39\n\nLANGUAGE: python\nCODE:\n```\n# Add button to layout selector toolbar for this custom layout\nviewToolBar = mainWindow().findChild(\"QToolBar\", \"ViewToolBar\")\nlayoutMenu = viewToolBar.widgetForAction(viewToolBar.actions()[0]).menu()\nlayoutSwitchActionParent = layoutMenu  # use `layoutMenu` to add inside layout list, use `viewToolBar` to add next the standard layout list\nlayoutSwitchAction = layoutSwitchActionParent.addAction(\"My view\") # add inside layout list\nlayoutSwitchAction.setData(customLayoutId)\nlayoutSwitchAction.setIcon(qt.QIcon(\":Icons/Go.png\"))\nlayoutSwitchAction.setToolTip(\"3D and slice view\")\n```\n\n----------------------------------------\n\nTITLE: Accessing 4D Volume Voxels as Numpy Array in Slicer (Python)\nDESCRIPTION: This snippet demonstrates how to access the voxels of a specific volume within a 4D volume sequence as a NumPy array in 3D Slicer. It retrieves a sequence node and then extracts the voxel data from a specified item index using `slicer.util.arrayFromVolume`. The resulting NumPy array `voxelArray` contains the image data.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/sequences.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Get sequence node\nimport SampleData\nsequenceNode = SampleData.SampleDataLogic().downloadSample(\"CTPCardioSeq\")\n# Alternatively, get the first sequence node in the scene:\n# sequenceNode = slicer.util.getNodesByClass(\"vtkMRMLSequenceNode\")\n\n# Get voxels of itemIndex'th volume as numpy array\nitemIndex = 5\nvoxelArray = slicer.util.arrayFromVolume(sequenceNode.GetNthDataNode(itemIndex))\n```\n\n----------------------------------------\n\nTITLE: Install Python Package - Python\nDESCRIPTION: This code snippet demonstrates how to install a Python package using `slicer.util.pip_install` if it is not already installed. It prompts the user for confirmation before installing the package to adhere to best practices.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_73\n\nLANGUAGE: python\nCODE:\n```\ntry:\n  import flywheel\nexcept ModuleNotFoundError:\n  if slicer.util.confirmOkCancelDisplay(\"This module requires 'flywheel-sdk' Python package. Click OK to install it now.\"):\n    slicer.util.pip_install(\"flywheel-sdk\")\n    import flywheel\n```\n\n----------------------------------------\n\nTITLE: Manipulate Subject Hierarchy Item - Python\nDESCRIPTION: This snippet demonstrates how to manipulate subject hierarchy items, including setting item name, parent, and display visibility. It also shows how to trigger the creation of a folder display node from Python.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/subjecthierarchy.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n# Set item name\nshNode.SetItemName(itemID, \"NewName\")\n# Set item parent (reparent)\nshNode.SetItemParent(itemID, newParentItemID)\n# Set visibility of data node associated to an item\nshNode.SetItemDisplayVisibility(itemID, 1)\n# Set visibility of whole branch\n# Note: Folder-type items (fodler, subject, study, etc.) create their own display nodes when show/hiding from UI.\n#       The displayable managers use SH information to determine visibility of an item, so no need to show/hide individual leaf nodes any more.\n#       Once the folder display node is created, it can be shown hidden simply using shNode.SetItemDisplayVisibility\n# From python, this is how to trigger creating a folder display node\npluginHandler = slicer.qSlicerSubjectHierarchyPluginHandler().instance()\nfolderPlugin = pluginHandler.pluginByName(\"Folder\")\nfolderPlugin.setDisplayVisibility(folderItemID, 1)\n```\n\n----------------------------------------\n\nTITLE: Define Circular ROI in Slice Viewer (Python)\nDESCRIPTION: Defines and updates a circular region of interest (ROI) in a slice viewer based on the positions of two markup control points. The first control point defines the center of the sphere, and the second defines a point on the circumference. Moving the control points updates the sphere's position and radius. It requires the `vtk` module and two existing markup control points.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Update the sphere from the control points\ndef UpdateSphere(param1, param2):\n  \"\"\"Update the sphere from the control points\n  \"\"\"\n  import math\n  pointListNode = slicer.util.getNode(\"F\")\n  centerPointCoord = [0.0, 0.0, 0.0]\n  pointListNode.GetNthControlPointPosition(0,centerPointCoord)\n  circumferencePointCoord = [0.0, 0.0, 0.0]\n  pointListNode.GetNthControlPointPosition(1,circumferencePointCoord)\n  sphere.SetCenter(centerPointCoord)\n  radius=math.sqrt((centerPointCoord[0]-circumferencePointCoord[0])**2+(centerPointCoord[1]-circumferencePointCoord[1])**2+(centerPointCoord[2]-circumferencePointCoord[2])**2)\n  sphere.SetRadius(radius)\n  sphere.SetPhiResolution(30)\n  sphere.SetThetaResolution(30)\n  sphere.Update()\n\n# Get point list node from scene\npointListNode = slicer.util.getNode(\"F\")\nsphere = vtk.vtkSphereSource()\nUpdateSphere(0,0)\n\n# Create model node and add to scene\nmodelsLogic = slicer.modules.models.logic()\nmodel = modelsLogic.AddModel(sphere.GetOutput())\nmodel.GetDisplayNode().SetSliceIntersectionVisibility(True)\nmodel.GetDisplayNode().SetSliceIntersectionThickness(3)\nmodel.GetDisplayNode().SetColor(1,1,0)\n\n# Call UpdateSphere whenever the control points are changed\npointListNode.AddObserver(slicer.vtkMRMLMarkupsNode.PointModifiedEvent, UpdateSphere, 2)\n```\n\n----------------------------------------\n\nTITLE: Creating Segmentation from Labelmap - Python\nDESCRIPTION: This code creates a segmentation node from an existing labelmap volume. It retrieves a labelmap volume, creates a new segmentation node, imports the labelmap into the segmentation, and creates a closed surface representation. Optionally, it removes the original labelmap volume.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlabelmapVolumeNode = getNode(\"label\")\nseg = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLSegmentationNode\")\nslicer.modules.segmentations.logic().ImportLabelmapToSegmentationNode(labelmapVolumeNode, seg)\nseg.CreateClosedSurfaceRepresentation()\nslicer.mrmlScene.RemoveNode(labelmapVolumeNode)\n```\n\n----------------------------------------\n\nTITLE: Displaying a Surface Mesh as a Model Node in Slicer (Python)\nDESCRIPTION: This snippet demonstrates how to create a simple surface mesh (a box) using VTK, display it as a model node in 3D Slicer, and adjust its display properties such as color and opacity. It relies on the `vtkCubeSource` to generate the mesh and the `slicer.modules.models.logic().AddModel()` function to add it to the scene. The `GetDisplayNode()` method is used to access and modify the model's visual attributes.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/models.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Create and set up polydata source\nbox = vtk.vtkCubeSource()\nbox.SetXLength(30)\nbox.SetYLength(20)\nbox.SetZLength(15)\nbox.SetCenter(10,20,5)\n\n# Create a model node that displays output of the source\nboxNode = slicer.modules.models.logic().AddModel(box.GetOutputPort())\n\n# Adjust display properties\nboxNode.GetDisplayNode().SetColor(1,0,0)\nboxNode.GetDisplayNode().SetOpacity(0.8)\n```\n\n----------------------------------------\n\nTITLE: Creating Segmentation from Model - Python\nDESCRIPTION: This snippet shows how to create a segmentation from an existing model node. It creates a sphere model, adds it to the scene, creates a new segmentation node, creates default display nodes for the segmentation, and imports the model into the segmentation node.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Create some model that will be added to a segmentation node\nsphere = vtk.vtkSphereSource()\nsphere.SetCenter(-6, 30, 28)\nsphere.SetRadius(10)\nmodelNode = slicer.modules.models.logic().AddModel(sphere.GetOutputPort())\n\n# Create segmentation\nsegmentationNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLSegmentationNode\")\nsegmentationNode.CreateDefaultDisplayNodes() # only needed for display\n\n# Import the model into the segmentation node\nslicer.modules.segmentations.logic().ImportModelToSegmentationNode(modelNode, segmentationNode)\n```\n\n----------------------------------------\n\nTITLE: Creating VTK Objects using vtkNew (Recommended)\nDESCRIPTION: This C++ code snippet shows the recommended way of creating VTK objects using `vtkNew`. This method simplifies syntax and is preferred in the Slicer core source code, preventing memory leaks by automatically managing object deletion. Note the need to use `GetPointer()` when passing the raw pointer to a method that expects it.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/advanced_topics.md#_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nvtkNew<MRMLScalarVolumeNode> vol;\n//... do something, such as vol->GetImageData(), someObject->SetVolume(vol.GetPointer())...\n```\n\n----------------------------------------\n\nTITLE: Get Segments Visible at Position (Python)\nDESCRIPTION: This snippet retrieves and prints the names of segments visible at a specific position in a slice view. It gets the segmentation and markups nodes, then defines a function printSegmentNames that retrieves the segment IDs visible at a given RAS coordinate and prints their names to the console. An observer is added to the markup node to track changes, and the function is initially called to show the segments.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nsegmentationNode = slicer.mrmlScene.GetFirstNodeByClass(\"vtkMRMLSegmentationNode\")\npointListNode = slicer.mrmlScene.GetFirstNodeByClass(\"vtkMRMLMarkupsFiducialNode\")\nsliceViewLabel = \"Red\"  # any slice view where segmentation node is visible works\n\ndef printSegmentNames(unused1=None, unused2=None):\n\n  sliceViewWidget = slicer.app.layoutManager().sliceWidget(sliceViewLabel)\n  segmentationsDisplayableManager = sliceViewWidget.sliceView().displayableManagerByClassName(\"vtkMRMLSegmentationsDisplayableManager2D\")\n  ras = [0,0,0]\n  pointListNode.GetNthControlPointPositionWorld(0, ras)\n  segmentIds = vtk.vtkStringArray()\n  segmentationsDisplayableManager.GetVisibleSegmentsForPosition(ras, segmentationNode.GetDisplayNode(), segmentIds)\n  for idIndex in range(segmentIds.GetNumberOfValues()):\n    segment = segmentationNode.GetSegmentation().GetSegment(segmentIds.GetValue(idIndex))\n    print(\"Segment found at position {0}: {1}\".format(ras, segment.GetName()))\n\n# Observe markup node changes\npointListNode.AddObserver(slicer.vtkMRMLMarkupsPlaneNode.PointModifiedEvent, printSegmentNames)\nprintSegmentNames()\n```\n\n----------------------------------------\n\nTITLE: Mask volume using segmentation - Python\nDESCRIPTION: Masks a volume using a segmentation by blanking out voxels outside the segments. Requires the volume and segmentation nodes to be present in the scene. It exports the segmentation to a labelmap, applies the mask to the volume, and displays the masked volume in the slice viewer.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_39\n\nLANGUAGE: Python\nCODE:\n```\n# Input nodes\nvolumeNode = getNode(\"MRHead\")\nsegmentationNode = getNode(\"Segmentation\")\n\n# Write segmentation to labelmap volume node with a geometry that matches the volume node\nlabelmapVolumeNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLLabelMapVolumeNode\")\nslicer.modules.segmentations.logic().ExportVisibleSegmentsToLabelmapNode(segmentationNode, labelmapVolumeNode, volumeNode)\n\n# Masking\nimport numpy as np\nvoxels = slicer.util.arrayFromVolume(volumeNode)\nmask = slicer.util.arrayFromVolume(labelmapVolumeNode)\nmaskedVoxels = np.copy(voxels)  # we don't want to modify the original volume\nmaskedVoxels[mask==0] = 0\n\n# Write masked volume to volume node and show it\nmaskedVolumeNode = slicer.modules.volumes.logic().CloneVolume(volumeNode, \"Masked\")\nslicer.util.updateVolumeFromArray(maskedVolumeNode, maskedVoxels)\nslicer.util.setSliceViewerLayers(maskedVolumeNode)\n```\n\n----------------------------------------\n\nTITLE: Export FiberBundle to PLY with Color in Slicer (Python)\nDESCRIPTION: This script exports a tractography FiberBundleNode to a PLY file. It uses vtkTubeFilter to create tubes from lines, vtkTriangleFilter to create triangles, and vtkPLYWriter to write the data to a file. It allows choosing between RAS and LPS coordinate systems. The color is also exported by making a lookup table based on the color node attached to the line display node.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/tractography.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nlineDisplayNode = getNode(\"*LineDisplay*\")\nplyFilePath = \"/tmp/fibers.ply\"\noutputCoordinateSystem = \"RAS\"  # can be \"RAS\" (still used in neuroimaging) or \"LPS\" (most commonly used coordinate system in medical image computing)\n\ntuber = vtk.vtkTubeFilter()\ntuber.SetInputData(lineDisplayNode.GetOutputPolyData())\ntuber.Update()\ntubes = tuber.GetOutputDataObject(0)\nscalars = tubes.GetPointData().GetArray(0)\nscalars.SetName(\"scalars\")\n\ntriangles = vtk.vtkTriangleFilter()\ntriangles.SetInputData(tubes)\ntriangles.Update()\n\ncolorNode = lineDisplayNode.GetColorNode()\nlookupTable = vtk.vtkLookupTable()\nlookupTable.DeepCopy(colorNode.GetLookupTable())\nlookupTable.SetTableRange(0,1)\n\nplyWriter = vtk.vtkPLYWriter()\n\nif outputCoordinateSystem == \"RAS\":\n    plyWriter.SetInputData(triangles.GetOutput())\nelif outputCoordinateSystem == \"LPS\":\n    transformRasToLps = vtk.vtkTransformPolyDataFilter()\n    rasToLps = vtk.vtkTransform()\n    rasToLps.Scale(-1, -1, 1)\n    transformRasToLps.SetTransform(rasToLps)\n    transformRasToLps.SetInputData(triangles.GetOutput())\n    plyWriter.SetInputConnection(transformRasToLps.GetOutputPort())\nelse:\n    raise RuntimeError(\"Invalid output coordinate system\")\n\nplyWriter.SetLookupTable(lookupTable)\nplyWriter.SetArrayName(\"scalars\")\n\nplyWriter.SetFileName(plyFilePath)\nplyWriter.Write()\n```\n\n----------------------------------------\n\nTITLE: Set Slice Position From Markups - Python\nDESCRIPTION: This snippet dynamically updates a slice view's position and orientation based on three markups control points. It defines a function `UpdateSlicePlane` that calculates the plane's position and normal from the control point positions and sets the slice-to-RAS transform accordingly. An observer is added to the point list node to trigger updates whenever the control points are changed.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n# Update plane from control points\ndef UpdateSlicePlane(param1=None, param2=None):\n  # Get control point positions as numpy array\n  import numpy as np\n  nOfControlPoints = pointListNode.GetNumberOfControlPoints()\n  if nOfControlPoints < 3:\n    return  # not enough control points\n  points = np.zeros([3,nOfControlPoints])\n  for i in range(0, nOfControlPoints):\n    pointListNode.GetNthControlPointPosition(i, points[:,i])\n  # Compute plane position and normal\n  planePosition = points.mean(axis=1)\n  planeNormal = np.cross(points[:,1] - points[:,0], points[:,2] - points[:,0])\n  planeX = points[:,1] - points[:,0]\n  sliceNode.SetSliceToRASByNTP(planeNormal[0], planeNormal[1], planeNormal[2],\n    planeX[0], planeX[1], planeX[2],\n    planePosition[0], planePosition[1], planePosition[2], 0)\n\n# Get point list node from scene\nsliceNode = slicer.app.layoutManager().sliceWidget(\"Red\").mrmlSliceNode()\npointListNode = slicer.util.getNode(\"F\")\n\n# Update slice plane manually\nUpdateSlicePlane()\n\n# Update slice plane automatically whenever points are changed\npointListObservation = [pointListNode, pointListNode.AddObserver(slicer.vtkMRMLMarkupsNode.PointModifiedEvent, UpdateSlicePlane, 2)]\n```\n\nLANGUAGE: python\nCODE:\n```\npointListObservation[0].RemoveObserver(pointListObservation[1])\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This code snippet sets the minimum required CMake version and enforces version constraints, preventing builds with unsupported CMake versions. It checks against specific versions and ranges using `VERSION_EQUAL`, `VERSION_GREATER_EQUAL`, and `VERSION_LESS_EQUAL` and issues a fatal error if the CMake version is outside the allowed range.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16.3...3.19.7 FATAL_ERROR)\n\nif(\"${CMAKE_VERSION}\" VERSION_EQUAL \"3.21.0\")\n  message(FATAL_ERROR \"CMake version is ${CMAKE_VERSION} and using CMake==3.21.0 is not supported.\\nSee https://gitlab.kitware.com/cmake/cmake/-/issues/22476\")\nendif()\n\nif(\"${CMAKE_VERSION}\" VERSION_GREATER_EQUAL \"3.25.0\" AND \"${CMAKE_VERSION}\" VERSION_LESS_EQUAL \"3.25.2\")\n  message(FATAL_ERROR \"CMake version is ${CMAKE_VERSION} and using CMake >=3.25.0,<=3.25.2 is not supported.\\nSee https://gitlab.kitware.com/cmake/cmake/-/issues/24567\")\nendif()\n\nif(\"${CMAKE_VERSION}\" VERSION_GREATER_EQUAL \"4.0\")\n  message(FATAL_ERROR \"CMake version is ${CMAKE_VERSION} and using CMake >=4.0 is not supported.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Browsing Sequence and Accessing Displayed Nodes (Python)\nDESCRIPTION: This snippet demonstrates how to browse a sequence in 3D Slicer and access the currently displayed nodes. It retrieves a sequence node and its corresponding sequence browser node. Then, it prints sequence information, jumps to a selected item, and extracts the voxel data from the currently displayed volume node using `slicer.util.arrayFromVolume`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/sequences.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Get a sequence node\nimport SampleData\nsequenceNode = SampleData.SampleDataLogic().downloadSample(\"CTPCardioSeq\")\n\n# Find corresponding sequence browser node\nbrowserNode = slicer.modules.sequences.logic().GetFirstBrowserNodeForSequenceNode(sequenceNode)\n\n# Print sequence information\nprint(\"Number of items in the sequence: {0}\".format(browserNode.GetNumberOfItems()))\nprint(\"Index name: {0}\".format(browserNode.GetMasterSequenceNode().GetIndexName()))\n\n# Jump to a selected sequence item\nbrowserNode.SetSelectedItemNumber(5)\n\n# Get currently displayed volume node voxels as numpy array\nvolumeNode = browserNode.GetProxyNode(sequenceNode)\nvoxelArray = slicer.util.arrayFromVolume(volumeNode)\n```\n\n----------------------------------------\n\nTITLE: Running an ITK filter with SimpleITK in Slicer (Python)\nDESCRIPTION: This code snippet demonstrates how to run an ITK filter within Slicer using SimpleITK. It loads a sample volume, applies a Signed Maurer Distance Map filter, and displays the result in a new volume node. It needs SampleData and SimpleITK modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_33\n\nLANGUAGE: Python\nCODE:\n```\nimport SampleData\nimport SimpleITK as sitk\nimport sitkUtils\n\n# Get input volume node\ninputVolumeNode = SampleData.SampleDataLogic().downloadMRHead()\n# Create new volume node for output\noutputVolumeNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLScalarVolumeNode\", \"MRHeadFiltered\")\n\n# Run processing\ninputImage = sitkUtils.PullVolumeFromSlicer(inputVolumeNode)\nfilter = sitk.SignedMaurerDistanceMapImageFilter()\noutputImage = filter.Execute(inputImage)\nsitkUtils.PushVolumeToSlicer(outputImage, outputVolumeNode)\n```\n\n----------------------------------------\n\nTITLE: Customizing DICOM Browser Columns - Python\nDESCRIPTION: This code snippet customizes the columns displayed in the Slicer DICOM browser. It retrieves the DICOM browser and database, prints the available column names, and then modifies the column order, visibility, name, and width. Finally, it updates the database views to reflect the changes.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/dicom.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# Get browser and database\ndicomBrowser = slicer.modules.dicom.widgetRepresentation().self().browserWidget.dicomBrowser\ndicomDatabase = dicomBrowser.database()\n\n# Print list of available columns\nprint(dicomDatabase.patientFieldNames)\nprint(dicomDatabase.studyFieldNames)\nprint(dicomDatabase.seriesFieldNames)\n\n# Change column order\ndicomDatabase.setWeightForField(\"Series\", \"SeriesDescription\", 7)\ndicomDatabase.setWeightForField(\"Studies\", \"StudyDescription\", 6)\n# Change column visibility\ndicomDatabase.setVisibilityForField(\"Patients\", \"PatientsBirthDate\", False)\ndicomDatabase.setVisibilityForField(\"Patients\", \"PatientsComments\", True)\ndicomDatabase.setWeightForField(\"Patients\", \"PatientsComments\", 8)\n# Change column name\ndicomDatabase.setDisplayedNameForField(\"Series\", \"DisplayedCount\", \"Number of images\")\n# Change column width to manual\ndicomDatabase.setFormatForField(\"Series\", \"SeriesDescription\", '{\"resizeMode\":\"interactive\"}')\n# Customize table manager in DICOM browser\ndicomTableManager = dicomBrowser.dicomTableManager()\ndicomTableManager.selectionMode = qt.QAbstractItemView.SingleSelection\ndicomTableManager.autoSelectSeries = False\n\n# Force database views update\ndicomDatabase.closeDatabase()\ndicomDatabase.openDatabase(dicomBrowser.database().databaseFilename)\n```\n\n----------------------------------------\n\nTITLE: Get voxel values for a label in a volume in Slicer (Python)\nDESCRIPTION: This snippet shows how to retrieve the values of all voxels for a specific label value within a volume, using NumPy. It depends on numpy. It loads two volumes, one being the original and the other being the labelmap. The point array is where label is equal to 1. The values array retrieves the voxel values at those positions from the original volume.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\nimport numpy\nvolume = array(\"Volume\")\nlabel = array(\"Volume-label\")\npoints  = numpy.where( label == 1 )  # or use another label number depending on what you segmented\nvalues  = volume[points] # this will be a list of the label values\nvalues.mean() # should match the mean value of LabelStatistics calculation as a double-check\nnumpy.savetxt(\"values.txt\", values)\n```\n\n----------------------------------------\n\nTITLE: Exporting Segmentation to Labelmap with Shortcut - Python\nDESCRIPTION: This snippet demonstrates how to export a segmentation to a labelmap volume and save it to a file using a keyboard shortcut. It defines a function to perform the export and save, then creates a Qt shortcut that triggers the function when Ctrl+Shift+S is pressed. It also cleans up the created labelmap volume and its color node.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\noutputPath = \"c:/tmp\"\n\ndef exportLabelmap():\n  segmentationNode = slicer.mrmlScene.GetFirstNodeByClass(\"vtkMRMLSegmentationNode\")\n  referenceVolumeNode = slicer.mrmlScene.GetFirstNodeByClass(\"vtkMRMLScalarVolumeNode\")\n  labelmapVolumeNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLLabelMapVolumeNode\")\n  slicer.modules.segmentations.logic().ExportVisibleSegmentsToLabelmapNode(segmentationNode, labelmapVolumeNode, referenceVolumeNode)\n  filepath = outputPath + \"/\" + referenceVolumeNode.GetName() + \"-label.nrrd\"\n  slicer.util.saveNode(labelmapVolumeNode, filepath)\n  slicer.mrmlScene.RemoveNode(labelmapVolumeNode.GetDisplayNode().GetColorNode())\n  slicer.mrmlScene.RemoveNode(labelmapVolumeNode)\n  slicer.util.delayDisplay(\"Segmentation saved to \" + filepath)\n\nshortcut = qt.QShortcut(slicer.util.mainWindow())\nshortcut.setKey(qt.QKeySequence(\"Ctrl+Shift+s\"))\nshortcut.connect( \"activated()\", exportLabelmap)\n```\n\n----------------------------------------\n\nTITLE: Customize Segment Editor Effect List\nDESCRIPTION: This snippet shows how to customize the list of displayed Segment editor effects. It demonstrates how to show only specific effects (Paint and Erase) and how to show a list of all available effect names.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nsegmentEditorWidget = slicer.modules.segmenteditor.widgetRepresentation().self().editor\nsegmentEditorWidget.setEffectNameOrder([\"Paint\", \"Erase\"])\nsegmentEditorWidget.unorderedEffectsVisible = False\n```\n\nLANGUAGE: python\nCODE:\n```\nsegmentEditorWidget = slicer.modules.segmenteditor.widgetRepresentation().self().editor\nprint(segmentEditorWidget.availableEffectNames())\n```\n\n----------------------------------------\n\nTITLE: Access DICOM Tag of a Scalar Volume in Python\nDESCRIPTION: Accesses a DICOM tag associated with a scalar volume loaded from DICOM data. It retrieves the SOP Instance UIDs from the volume node's DICOM.instanceUIDs attribute, then uses the DICOM database to retrieve the filename and access the desired tag value (e.g., patient position).\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/dicom.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nvolumeName = \"2: ENT IMRT\"\nvolumeNode = slicer.util.getNode(volumeName)\ninstUids = volumeNode.GetAttribute(\"DICOM.instanceUIDs\").split()\nfilename = slicer.dicomDatabase.fileForInstance(instUids[0])\nprint(slicer.dicomDatabase.fileValue(filename, \"0018,5100\"))  # patient position\n```\n\n----------------------------------------\n\nTITLE: Querying and Retrieving DICOM Data from PACS - Python\nDESCRIPTION: This code snippet demonstrates querying and retrieving DICOM data from a PACS using classic DIMSE DICOM networking. It sets up a DICOM query with specific filters (Name and Modalities), executes the query against a temporary database, and then retrieves the found series using either C-GET or C-MOVE, based on the `useCGET` variable. Finally, the displayed fields in the Slicer DICOM database are updated.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/dicom.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# Query\ndicomQuery = ctk.ctkDICOMQuery()\ndicomQuery.callingAETitle = \"SLICER\"\ndicomQuery.calledAETitle = \"ANYAE\"\ndicomQuery.host = \"dicomserver.co.uk\"\ndicomQuery.port = 11112\n# Change filter parameters in the next line if\n# query does not find any series (try to use a different letter for \"Name\", such as \"E\")\n# or there are too many hits (try to make \"Name\" more specific, such as \"An\").\ndicomQuery.setFilters({\"Name\":\"A\", \"Modalities\":\"MR\"})\n# temporary in-memory database for storing query results\ntempDb = ctk.ctkDICOMDatabase()\ntempDb.openDatabase(\"\")\ndicomQuery.query(tempDb)\n\n# Retrieve\n# Enable useCGET to retrieve using the query's connection (using C-GET).\n# C-GET is simple, as it does not require configuring a DICOM receiver\n# but C-GET is rarely allowed in clinical PACS.\n# If useCGET is disabled then retrieve requests the PACS to send the data (using C-STORE)\n# to Slicer. Slicer's AE title must be configured in the PACS settings. Slicer must have its\n# DICOM receiver (C-STORE SCP) running.\nuseCGET = True\ndicomRetrieve = ctk.ctkDICOMRetrieve()\ndicomRetrieve.callingAETitle = dicomQuery.callingAETitle\ndicomRetrieve.calledAETitle = dicomQuery.calledAETitle\ndicomRetrieve.host = dicomQuery.host\ndicomRetrieve.port = dicomQuery.port\ndicomRetrieve.setDatabase(slicer.dicomDatabase)\nfor study, series in dicomQuery.studyAndSeriesInstanceUIDQueried:\n  print(f\"ctkDICOMRetrieveTest: Retrieving {study} - {series}\")\n  slicer.app.processEvents()\n  if useCGET:\n    success = dicomRetrieve.getSeries(study, series)\n  else:\n    dicomRetrieve.moveDestinationAETitle = dicomQuery.callingAETitle\n    success = dicomRetrieve.moveSeries(study, series)\n  print(f\"  - {'success' if success else 'failed'}\")\n\nslicer.dicomDatabase.updateDisplayedFields()\n```\n\n----------------------------------------\n\nTITLE: Getting MRML node from scene (Python)\nDESCRIPTION: Retrieves a MRML node from the scene using its name. The example demonstrates getting a markups point list and removing a control point. Also shows how to get the first volume node.  Requires the `slicer` module to be available within the Slicer Python environment.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npointListNode = getNode('F')\n# do something with the node... let's remove the first control point in it\npointListNode.RemoveNthControlPoint(0)\n```\n\nLANGUAGE: python\nCODE:\n```\nvolumeNode = slicer.mrmlScene.GetFirstNodeByClass(\"vtkMRMLScalarVolumeNode\")\n# do something with the node... let's change its display window/level\nvolumeNode.GetDisplayNode().SetAutoWindowLevel(False)\nvolumeNode.GetDisplayNode().SetWindowLevelMinMax(100, 200)\n```\n\n----------------------------------------\n\nTITLE: Filter Items in TreeView/ComboBox - Python\nDESCRIPTION: This snippet shows how to filter displayed items in a TreeView or ComboBox using the `setAttributeFilter` method. It demonstrates filtering based on the presence of an attribute, and based on the attribute's value.  The `removeAttributeFilter()` function clears the filter.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/subjecthierarchy.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nprint(shTreeView.displayedItemCount()) # 5\nshTreeView.setAttributeFilter(\"DICOM.Modality\") # Nodes must have this attribute\nprint(shTreeView.displayedItemCount()) # 3\nshTreeView.setAttributeFilter(\"DICOM.Modality\",\"CT\") # Have attribute and equal ``CT``\nprint(shTreeView.displayedItemCount()) # 1\nshTreeView.removeAttributeFilter()\nprint(shTreeView.displayedItemCount()) # 5\n```\n\n----------------------------------------\n\nTITLE: Importing custom Python modules in Slicer\nDESCRIPTION: This example demonstrates how to import custom Python modules that are located within a subfolder of a Slicer module. The subfolder is named `MySlicerModuleLib`, and it contains Python files like `utils.py` and `cool_maths.py`.  The `from` statement allows importing specific modules from this library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/python_faq.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom MySlicerModuleLib import utils, cool_maths\n```\n\n----------------------------------------\n\nTITLE: Change Slice Offset (Python)\nDESCRIPTION: This code snippet changes the slice offset (position) of the Red slice view. It retrieves the Red slice logic, prints the current slice offset, and then sets a new offset value (20 in this example). This is equivalent to moving the slice offset slider in the slice view controller.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nlayoutManager = slicer.app.layoutManager()\nred = layoutManager.sliceWidget(\"Red\")\nredLogic = red.sliceLogic()\n# Print current slice offset position\nprint(redLogic.GetSliceOffset())\n# Change slice position\nredLogic.SetSliceOffset(20)\n```\n\n----------------------------------------\n\nTITLE: Accessing 4D Volume Voxels as Single Numpy Array (Python)\nDESCRIPTION: This snippet demonstrates how to access all voxels of a 4D volume sequence (3D volume sequence) as a single NumPy array in 3D Slicer. It preallocates a 4D NumPy array `voxelArray` with dimensions `k`, `j`, `i`, `t` (voxel coordinates and volume index). The snippet then iterates through the sequence nodes and populates the 4D array with voxel data from each volume using `slicer.util.arrayFromVolume`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/sequences.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsequenceNode = slicer.mrmlScene.GetFirstNodeByClass(\"vtkMRMLSequenceNode\")\n\n# Preallocate a 4D numpy array that will hold the entire sequence\nimport numpy as np\ndims = slicer.util.arrayFromVolume(sequenceNode.GetNthDataNode(0)).shape\nvoxelArray = np.zeros([dims[0], dims[1], dims[2], sequenceNode.GetNumberOfDataNodes()])\n# Fill in the 4D array from the sequence node\nfor volumeIndex in range(sequenceNode.GetNumberOfDataNodes()):\n    voxelArray[:, :, :, volumeIndex] = slicer.util.arrayFromVolume(sequenceNode.GetNthDataNode(volumeIndex))\n```\n\n----------------------------------------\n\nTITLE: Compute Segment Centroid - Slicer Python\nDESCRIPTION: This snippet computes the centroid of each segment in a segmentation node and places a markups control point at each centroid. It initializes SegmentStatisticsLogic, enables centroid computation, computes the statistics, and then adds a fiducial point at the centroid of each segment using a markups fiducial node.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nsegmentationNode = getNode(\"Segmentation\")\n\n# Compute centroids\nimport SegmentStatistics\nsegStatLogic = SegmentStatistics.SegmentStatisticsLogic()\nsegStatLogic.getParameterNode().SetParameter(\"Segmentation\", segmentationNode.GetID())\nsegStatLogic.getParameterNode().SetParameter(\"LabelmapSegmentStatisticsPlugin.centroid_ras.enabled\", str(True))\nsegStatLogic.computeStatistics()\nstats = segStatLogic.getStatistics()\n\n# Place a markup point in each centroid\npointListNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLMarkupsFiducialNode\")\npointListNode.CreateDefaultDisplayNodes()\nfor segmentId in stats[\"SegmentIDs\"]:\n  centroid_ras = stats[segmentId,\"LabelmapSegmentStatisticsPlugin.centroid_ras\"]\n  segmentName = segmentationNode.GetSegmentation().GetSegment(segmentId).GetName()\n  pointListNode.AddFiducialFromArray(centroid_ras, segmentName)\n```\n\n----------------------------------------\n\nTITLE: Loop and Get Control Point Coordinates (Python)\nDESCRIPTION: Iterates over the control points in a markup list and retrieves their RAS (Right-Anterior-Superior) and world coordinates. It utilizes the `vtkVector3d` class to store the RAS coordinates and prints the index, RAS, and world coordinates for each control point. Requires a valid markups node.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\npointListNode = slicer.util.getNode(\"F\")\nnumControlPoints = pointListNode.GetNumberOfControlPoints()\nfor i in range(numControlPoints):\n  ras = vtk.vtkVector3d(0,0,0)\n  pointListNode.GetNthControlPointPosition(i,ras)\n  # the world position is the RAS position with any transform matrices applied\n  world = [0.0, 0.0, 0.0]\n  pointListNode.GetNthControlPointPositionWorld(i,world)\n  print(i,\": RAS =\",ras,\", world =\",world)\n```\n\n----------------------------------------\n\nTITLE: Loading and Showing Models in Slicer Views (Python)\nDESCRIPTION: This snippet iterates through a list of model files, loads each model into the Slicer scene, and associates it with a specific view. It utilizes `slicer.util.loadModel` to load the model and `modelNode.GetDisplayNode().AddViewNodeID` to link the model to the view, ensuring it's displayed in the desired layout. It pauses and resumes rendering using `slicer.app.setRenderPaused` to optimize performance during loading.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/models.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Load and show each model in a view\nfor modelIndex, modelFile in enumerate(modelFiles):\n  # Show only one model in each view\n  name = os.path.basename(modelFile)\n  viewNode = slicer.mrmlScene.GetSingletonNode(name, \"vtkMRMLViewNode\")\n  viewNode.LinkedControlOn()\n  modelNode = slicer.util.loadModel(modelDir + \"/\" + modelFile)\n  modelNode.GetDisplayNode().AddViewNodeID(viewNode.GetID())\n\nslicer.app.setRenderPaused(False)\n```\n\n----------------------------------------\n\nTITLE: Reading Markups JSON into Pandas DataFrame (Python)\nDESCRIPTION: This code reads a markups JSON file and extracts control point labels and positions into a Pandas DataFrame. It uses `pd.read_json` to parse the JSON and then accesses the 'markups' and 'controlPoints' keys to construct the DataFrame.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\ncontrolPointsTable = pd.DataFrame.from_dict(pd.read_json(input_json_filename)['markups'][0]['controlPoints'])\n```\n\n----------------------------------------\n\nTITLE: Add Control Point Placement Button to GUI (Python)\nDESCRIPTION: Creates a toggle button within a module GUI that activates control point placement when pressed and deactivates when released. Leverages the qSlicerMarkupsPlaceWidget to manage the placement interaction.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nw=slicer.qSlicerMarkupsPlaceWidget()\nw.setMRMLScene(slicer.mrmlScene)\nmarkupsNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLMarkupsCurveNode\")\nw.setCurrentNode(slicer.mrmlScene.GetNodeByID(markupsNode.GetID()))\n# Hide all buttons and only show place button\nw.buttonsVisible=False\nw.placeButton().show()\nw.show()\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Transforms (C++)\nDESCRIPTION: This snippet shows how to combine multiple transforms by setting one transform node as the parent transform of another, and then applying the combined transform to a transformable node. This effectively concatenates the transformations. This example uses C++.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/transforms.md#_snippet_11\n\nLANGUAGE: C++\nCODE:\n```\nvtkMRMLTransformNode* transformNode1 = ...;\nvtkMRMLTransformNode* transformNode2 = ...;\ntransformNode2->SetAndObserveTransformNodeID(transformNode1->GetID());\ntransformable->SetAndObserveTransformNodeID(transformNode2->GetID());\n```\n\n----------------------------------------\n\nTITLE: Measure Angle Between Two Markup Lines - Python\nDESCRIPTION: This snippet measures the angle between two markup line nodes that are already added to the scene and have the names `L` and `L_1`. Whenever either line is moved, the updated angle is printed on the console. It calculates the direction vectors of the lines from their endpoints and uses `vtkMath.AngleBetweenVectors` to compute the angle. Observers are added to the line nodes to trigger updates upon modification.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nlineNodeNames = [\"L\", \"L_1\"]\n\n# Print angles between slice nodes\ndef ShowAngle(unused1=None, unused2=None):\n  import numpy as np\n  lineDirectionVectors = []\n  for lineNodeName in lineNodeNames:\n    lineNode = slicer.util.getFirstNodeByClassByName(\"vtkMRMLMarkupsLineNode\", lineNodeName)\n    lineStartPos = np.zeros(3)\n    lineEndPos = np.zeros(3)\n    lineNode.GetNthControlPointPositionWorld(0, lineStartPos)\n    lineNode.GetNthControlPointPositionWorld(1, lineEndPos)\n    lineDirectionVector = (lineEndPos-lineStartPos)/np.linalg.norm(lineEndPos-lineStartPos)\n    lineDirectionVectors.append(lineDirectionVector)\n  angleRad = vtk.vtkMath.AngleBetweenVectors(lineDirectionVectors[0], lineDirectionVectors[1])\n  angleDeg = vtk.vtkMath.DegreesFromRadians(angleRad)\n  print(\"Angle between lines {0} and {1} = {2:0.3f}\".format(lineNodeNames[0], lineNodeNames[1], angleDeg))\n\n# Observe line node changes\nfor lineNodeName in lineNodeNames:\n  lineNode = slicer.util.getFirstNodeByClassByName(\"vtkMRMLMarkupsLineNode\", lineNodeName)\n  lineNode.AddObserver(slicer.vtkMRMLMarkupsLineNode.PointModifiedEvent, ShowAngle)\n\n# Print current angle\nShowAngle()\n```\n\n----------------------------------------\n\nTITLE: Update Segmentation Geometry - Slicer Python\nDESCRIPTION: This snippet updates the geometry of the internal binary labelmap representation in a segmentation node. It first sets the reference image geometry and then resamples the labelmaps. This ensures the segmentation aligns correctly with the reference image after geometry changes.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nsegmentationGeometryLogic.SetReferenceImageGeometryInSegmentationNode()\nsegmentationGeometryLogic.ResampleLabelmapsInSegmentationNode()\n```\n\n----------------------------------------\n\nTITLE: Get Subject Hierarchy Node - Python\nDESCRIPTION: This snippet retrieves the pseudo-singleton subject hierarchy node, which manages the entire hierarchy and provides functions for access and manipulation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/subjecthierarchy.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nshNode = slicer.mrmlScene.GetSubjectHierarchyNode()\n```\n\n----------------------------------------\n\nTITLE: Rotate a Node Around a Specified Line (Python)\nDESCRIPTION: This Python code rotates a node around a specified line. It requires setting up the scene with a markup line node for the rotation axis, a rotation transform node for specifying rotation angle, and a final transform node to be applied to the target nodes. The `updateFinalTransform` function calculates the transform matrix by aligning the coordinate system with the rotation axis and applies it to the finalTransformNode.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/transforms.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# This markups point list node specifies the center of rotation\nrotationAxisMarkupsNode = getNode(\"L\")\n# This transform can be edited in Transforms module (Edit / Rotation / IS slider)\nrotationTransformNode = getNode(\"LinearTransform_3\")\n# This transform has to be applied to the image, model, etc.\nfinalTransformNode = getNode(\"LinearTransform_4\")\n\ndef updateFinalTransform(unusedArg1=None, unusedArg2=None, unusedArg3=None):\n  import numpy as np\n  rotationAxisPoint1_World = np.zeros(3)\n  rotationAxisMarkupsNode.GetNthControlPointPositionWorld(0, rotationAxisPoint1_World)\n  rotationAxisPoint2_World = np.zeros(3)\n  rotationAxisMarkupsNode.GetNthControlPointPositionWorld(1, rotationAxisPoint2_World)\n  axisDirectionZ_World = rotationAxisPoint2_World-rotationAxisPoint1_World\n  axisDirectionZ_World = axisDirectionZ_World/np.linalg.norm(axisDirectionZ_World)\n  # Get transformation between world coordinate system and rotation axis aligned coordinate system\n  worldToRotationAxisTransform = vtk.vtkMatrix4x4()\n  p=vtk.vtkPlaneSource()\n  p.SetNormal(axisDirectionZ_World)\n  axisOrigin = np.array(p.GetOrigin())\n  axisDirectionX_World = np.array(p.GetPoint1())-axisOrigin\n  axisDirectionY_World = np.array(p.GetPoint2())-axisOrigin\n  rotationAxisToWorldTransform = np.row_stack((np.column_stack((axisDirectionX_World, axisDirectionY_World, axisDirectionZ_World, rotationAxisPoint1_World)), (0, 0, 0, 1)))\n  rotationAxisToWorldTransformMatrix = slicer.util.vtkMatrixFromArray(rotationAxisToWorldTransform)\n  worldToRotationAxisTransformMatrix = slicer.util.vtkMatrixFromArray(np.linalg.inv(rotationAxisToWorldTransform))\n  # Compute transformation chain\n  rotationMatrix = vtk.vtkMatrix4x4()\n  rotationTransformNode.GetMatrixTransformToParent(rotationMatrix)\n  finalTransform = vtk.vtkTransform()\n  finalTransform.Concatenate(rotationAxisToWorldTransformMatrix)\n  finalTransform.Concatenate(rotationMatrix)\n  finalTransform.Concatenate(worldToRotationAxisTransformMatrix)\n  finalTransformNode.SetAndObserveMatrixTransformToParent(finalTransform.GetMatrix())\n\n# Manual initial update\nupdateFinalTransform()\n\n# Automatic update when point is moved or transform is modified\nrotationTransformNodeObserver = rotationTransformNode.AddObserver(slicer.vtkMRMLTransformNode.TransformModifiedEvent, updateFinalTransform)\nrotationAxisMarkupsNodeObserver = rotationAxisMarkupsNode.AddObserver(slicer.vtkMRMLMarkupsNode.PointModifiedEvent, updateFinalTransform)\n\n# Execute these lines to stop automatic updates:\n# rotationTransformNode.RemoveObserver(rotationTransformNodeObserver)\n# rotationAxisMarkupsNode.RemoveObserver(rotationAxisMarkupsNodeObserver)\n```\n\n----------------------------------------\n\nTITLE: Exporting Warped Nodes by Transform Sequence (Python)\nDESCRIPTION: This snippet warps a segmentation node with a sequence of transforms and saves each transformed segmentation as a PLY file in 3D Slicer. It iterates through the transforms in the sequence, applies each transform to a copy of the segmentation, and writes the transformed model to a file. A temporary model node is created to avoid modifying the original segmentation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/sequences.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Inputs\ntransformSequenceNode = getNode(\"OutputTransforms\")\nsegmentationNode = getNode(\"Segmentation\")\nsegmentIndex = 0\noutputFilePrefix = r\"c:/tmp/20220312/seg\"\n\n# Ensure the segmentation contains closed surface representation\nsegmentationNode.CreateClosedSurfaceRepresentation()\n# Create temporary node that will be warped\nsegmentModelNode = slicer.mrmlScene.AddNewNodeByClass('vtkMRMLModelNode')\n\nfor itemIndex in range(transformSequenceNode.GetNumberOfDataNodes()):\n  # Get a copy of the segment that will be transformed\n  segment = segmentationNode.GetSegmentation().GetNthSegment(segmentIndex)\n  slicer.modules.segmentations.logic().ExportSegmentToRepresentationNode(segment, segmentModelNode)\n  # Apply the transform\n  transform = transformSequenceNode.GetNthDataNode(itemIndex).GetTransformToParent()\n  segmentModelNode.ApplyTransform(transform)\n  # Write to file\n  outputFileName = f\"{outputFilePrefix}_{itemIndex:03}.ply\"\n  print(outputFileName)\n  slicer.util.saveNode(segmentModelNode, outputFileName)\n\n# Delete temporary node\nslicer.mrmlScene.RemoveNode(segmentModelNode)\n```\n\n----------------------------------------\n\nTITLE: Get voxel coordinates from markup RAS coordinates in Slicer (Python)\nDESCRIPTION: This snippet demonstrates how to obtain the voxel coordinates of a volume corresponding to a markup control point's position in RAS coordinates. It involves transforming the point from RAS to volume RAS coordinates and then to IJK coordinates. It depends on vtk and numpy.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\n# Inputs\nvolumeNode = getNode(\"MRHead\")\npointListNode = getNode(\"F\")\nmarkupsIndex = 0\n\n# Get point coordinate in RAS\npoint_Ras = [0, 0, 0]\npointListNode.GetNthControlPointPositionWorld(markupsIndex, point_Ras)\n\n# If volume node is transformed, apply that transform to get volume's RAS coordinates\ntransformRasToVolumeRas = vtk.vtkGeneralTransform()\nslicer.vtkMRMLTransformNode.GetTransformBetweenNodes(None, volumeNode.GetParentTransformNode(), transformRasToVolumeRas)\npoint_VolumeRas = transformRasToVolumeRas.TransformPoint(point_Ras)\n\n# Get voxel coordinates from physical coordinates\nvolumeRasToIjk = vtk.vtkMatrix4x4()\nvolumeNode.GetRASToIJKMatrix(volumeRasToIjk)\npoint_Ijk = [0, 0, 0, 1]\nvolumeRasToIjk.MultiplyPoint(np.append(point_VolumeRas,1.0), point_Ijk)\npoint_Ijk = [ int(round(c)) for c in point_Ijk[0:3] ]\n\n# Print output\nprint(point_Ijk)\n```\n\n----------------------------------------\n\nTITLE: Saving Volume with Hardened Transforms - Slicer - Python\nDESCRIPTION: Saves a volume to a file with all transforms hardened, exporting the node in the world coordinate system. The `world=True` parameter ensures that parent transforms are applied before saving. Compression is disabled for demonstration. The function saves the volume node in the world coordinate system.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nslicer.util.exportNode(volumeNode, imagePath, {\"useCompression\": 0}, world=True)\n```\n\n----------------------------------------\n\nTITLE: Copying Line Measurements to Clipboard (Python)\nDESCRIPTION: This script copies all line measurements from the scene to the clipboard in a tab-separated format suitable for pasting into Excel. It retrieves all line nodes, iterates through them, extracts the length measurement, and formats the output string, finally copying the formatted string to the clipboard when Ctrl+M is pressed.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\ndef copyLineMeasurementsToClipboard():\n  measurements = []\n  # Collect all line measurements from the scene\n  lineNodes = getNodesByClass('vtkMRMLMarkupsLineNode')\n  for lineNode in lineNodes:\n    if lineNode.GetNumberOfDefinedControlPoints() < 2:\n      # incomplete line, skip it\n      continue\n    # Get node filename that the length was measured on\n    try:\n      volumeNode = slicer.mrmlScene.GetNodeByID(lineNode.GetNthControlPointAssociatedNodeID(0))\n      imagePath = volumeNode.GetStorageNode().GetFileName()\n    except:\n      imagePath = '(unknown)'\n    # Get line node n\n    measurementName = lineNode.GetName()\n    # Get length measurement\n    lineNode.GetMeasurement('length').SetEnabled(True)\n    length = str(lineNode.GetMeasurement('length').GetValue())\n    # Add fields to results\n    measurements.append('\\t'.join([imagePath, measurementName, length]))\n  # Copy all measurements to clipboard (to be pasted into Excel)\n  outputText = \"\\n\".join(measurements) + \"\\n\"\n  slicer.app.clipboard().setText(outputText)\n  slicer.util.delayDisplay(f\"Copied {len(measurements)} length measurements to the clipboard.\")\n\nshortcut2 = qt.QShortcut(slicer.util.mainWindow())\nshortcut2.setKey(qt.QKeySequence(\"Ctrl+m\"))\nshortcut2.connect( 'activated()', copyLineMeasurementsToClipboard)\n```\n\n----------------------------------------\n\nTITLE: BRAINSFit Image Registration with 3D Slicer in Python\nDESCRIPTION: This snippet demonstrates how to perform image registration using the BRAINSFit module within 3D Slicer. It involves downloading sample data, creating necessary nodes (volumes and transforms), setting parameters for the BRAINSFit CLI module (including fixed and moving volumes, output volume, and transform), running the registration, and visualizing the registered result using a fused display.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/registration.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# Get sample input data\nimport SampleData\nsampleDataLogic = SampleData.SampleDataLogic()\nfixedVolumeNode = sampleDataLogic.downloadMRBrainTumor1()\nmovingVolumeNode = sampleDataLogic.downloadMRBrainTumor2()\n# Create new nodes for output\ntransformedMovingVolumeNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLScalarVolumeNode\")\ntransformNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLTransformNode\")\n\n# Run registration\nparameters = {}\nparameters[\"fixedVolume\"] = fixedVolumeNode.GetID()\nparameters[\"movingVolume\"] = movingVolumeNode.GetID()\nparameters[\"outputVolume\"] = transformedMovingVolumeNode.GetID()\nparameters[\"linearTransform\"] = transformNode.GetID()\nparameters[\"useRigid\"] = True  # options include: \"useRigid\", \"useAffine\", \"useBSpline\"\nparameters[\"initializeTransformMode\"] = \"useGeometryAlign\"\nparameters[\"samplingPercentage\"] = 0.02\ncliBrainsFitRigidNode = slicer.cli.run(slicer.modules.brainsfit, None, parameters, wait_for_completion=True)\n\n# Display fused result. Computed transformNode is automatically applied to the movingVolumeNode.\n# Ctrl + left-click-and-drag up/down to change opacity in slice views.\nslicer.util.setSliceViewerLayers(fixedVolumeNode, movingVolumeNode, foregroundOpacity=0.5)\n```\n\n----------------------------------------\n\nTITLE: Parameter Pack with Date Invariant - Python\nDESCRIPTION: This Python code defines a `Date` class using `parameterPack` that enforces an invariant: a valid date. Private parameters `_month`, `_day`, and `_year` store the date components.  Public properties with setters validate the date using `checkDate` before updating the private parameters. The `checkDate` method raises a `BadDateException` if the date is invalid.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/parameter_nodes/supported_types.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Annotated\nfrom slicer.parameterNodeWrapper import (\n    parameterPack,\n    Default,\n)\n\n\nclass BadDateException(ValueError):\n    pass\n\n\n@parameterPack\nclass Date:\n    # Private parameters that will be written to the scene.\n    # Can still set defaults on the private parameters.\n    _month: int = 1\n    _day: int = 1\n    _year: int = 1970\n\n    # A checker for the multi-parameter invariant\n    @staticmethod\n    def checkDate(month, day, year):\n        # note: this is assuming leap years don't exist and negative years are allowable\n        if month < 1 or month > 12 or day < 1 or day > 31:\n            raise BadDateException(f\"Bad date: {month}/{day}/{year}\")\n        if month == 2 and day > 28:\n            raise BadDateException(f\"Bad date: {month}/{day}/{year}\")\n        if month in (4, 6, 9, 11) and day > 30:\n            raise BadDateException(f\"Bad date: {month}/{day}/{year}\")\n\n    # override the __init__ function to enforce the invariant\n    def __init__(self, month=None, day=None, year=None) -> None:\n        if month is not None:\n            self._month = month\n        if day is not None:\n            self._day = day\n        if year is not None:\n            self._year = year\n        self.checkDate(self._month, self._day, self._year)\n\n    def __str__(self) -> str:\n        return f\"Date(month={self.month}, day={self.day}, year={self.year})\"\n\n    # Add properties that access the private parameters and enforces the invariant.\n    @property\n    def month(self):\n        return self._month\n\n    @month.setter\n    def month(self, value):\n        self.checkDate(value, self.day, self.year)\n        self._month = value\n\n    @property\n    def day(self):\n        return self._day\n\n    @day.setter\n    def day(self, value):\n        self.checkDate(self.month, value, self.year)\n        self._day = value\n\n    @property\n    def year(self):\n        return self._year\n\n    @year.setter\n    def year(self, value):\n        self._year = value\n\n    # Can even add helper functions for a nicer interface.\n    def setDate(self, month: int, day: int, year: int) -> None:\n        self.checkDate(month, day, year)\n        self._month = month\n        self._day = day\n        self._year = year\n```\n\n----------------------------------------\n\nTITLE: Apply VTK Filter to Model Node in Slicer (Python)\nDESCRIPTION: This snippet applies a VTK filter (specifically, `vtkCurvatures`) to a model node in 3D Slicer. It computes the curvature of the model and then sets up coloring based on the Gaussian curvature, utilizing a Viridis color map.  Requires a model node named \"tip\".\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/models.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmodelNode = getNode(\"tip\")\n\n# Compute curvature\ncurv = vtk.vtkCurvatures()\ncurv.SetInputData(modelNode.GetPolyData())\nmodelNode.SetPolyDataConnection(curv.GetOutputPort())\n\n# Set up coloring by Curvature\nmodelNode.GetDisplayNode().SetActiveScalar(\"Gauss_Curvature\", vtk.vtkAssignAttribute.POINT_DATA)\nmodelNode.GetDisplayNode().SetAndObserveColorNodeID(\"Viridis\")\nmodelNode.GetDisplayNode().SetScalarVisibility(True)\n```\n\n----------------------------------------\n\nTITLE: Associating Segmentation with Reference Volume - Python\nDESCRIPTION: This code snippet associates a segmentation node with a reference volume node within the Slicer scene's subject hierarchy. It finds the items corresponding to the reference volume and segmentation, then sets the parent of the segmentation item to the parent of the reference volume item.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/dicom.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nshNode = slicer.vtkMRMLSubjectHierarchyNode.GetSubjectHierarchyNode(slicer.mrmlScene)\nreferenceVolumeShItem = shNode.GetItemByDataNode(referenceVolumeNode)\nstudyShItem = shNode.GetItemParent(referenceVolumeShItem)\nsegmentationShItem = shNode.GetItemByDataNode(segmentationNode)\nshNode.SetItemParent(segmentationShItem, studyShItem)\n```\n\n----------------------------------------\n\nTITLE: Access DICOM Tags Nested in a Sequence in Python\nDESCRIPTION: Accesses DICOM tags that are nested within a sequence. It uses the pydicom library to read the full DICOM header, as the database cache only stores top-level tags. It retrieves a specific element from a sequence (e.g., CTExposureSequence) and prints its value.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/dicom.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndb = slicer.dicomDatabase\npatientList = db.patients()\nstudyList = db.studiesForPatient(patientList[0])\nseriesList = db.seriesForStudy(studyList[0])\nfileList = db.filesForSeries(seriesList[0])\n# Use pydicom to access the full header, which requires\n# re-reading the dataset instead of using the database cache\nimport pydicom\nds = pydicom.dcmread(fileList[0])\nds.CTExposureSequence[0].ExposureModulationType\n```\n\n----------------------------------------\n\nTITLE: Capture all views to file (Python)\nDESCRIPTION: Captures all the views currently displayed in Slicer and saves them to a PNG file. It utilizes the `ScreenCapture` module.  `showViewControllers` is used to hide and restore view controllers. The image is saved to `c:/tmp/test.png`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/screencapture.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport ScreenCapture\ncap = ScreenCapture.ScreenCaptureLogic()\ncap.showViewControllers(False)\ncap.captureImageFromView(None, \"c:/tmp/test.png\")\ncap.showViewControllers(True)\n```\n\n----------------------------------------\n\nTITLE: Get Histogram of Segmented Region (Python)\nDESCRIPTION: This snippet demonstrates how to compute and plot a histogram of voxel values within a segmented region. It first loads a sample volume and creates a segmentation with a single segment.  Then, it extracts voxel values from the volume that fall within the segment, computes a histogram of these values using NumPy, and plots the histogram using Slicer's plotting utility.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n# Generate example input data (volumeNode, segmentationNode, segmentId)\n################################################\n\n# Load source volume\nimport SampleData\nsampleDataLogic = SampleData.SampleDataLogic()\nvolumeNode = sampleDataLogic.downloadMRBrainTumor1()\n\n# Create segmentation\nsegmentationNode = slicer.vtkMRMLSegmentationNode()\nslicer.mrmlScene.AddNode(segmentationNode)\nsegmentationNode.CreateDefaultDisplayNodes() # only needed for display\nsegmentationNode.SetReferenceImageGeometryParameterFromVolumeNode(volumeNode)\n\n# Create segment\ntumorSeed = vtk.vtkSphereSource()\ntumorSeed.SetCenter(-6, 30, 28)\ntumorSeed.SetRadius(25)\ntumorSeed.Update()\nsegmentId = segmentationNode.AddSegmentFromClosedSurfaceRepresentation(tumorSeed.GetOutput(), \"Segment A\", [1.0,0.0,0.0])\n\n# Compute histogram\n################################################\n\n# Get voxel values of volume in the segmented region\nimport numpy as np\nvolumeArray = slicer.util.arrayFromVolume(volumeNode)\nsegmentArray = slicer.util.arrayFromSegmentBinaryLabelmap(segmentationNode, segmentId, volumeNode)\nsegmentVoxels = volumeArray[segmentArray != 0]\n\n# Compute histogram\nimport numpy as np\nhistogram = np.histogram(segmentVoxels, bins=50)\n\n# Plot histogram\n################################################\n\nslicer.util.plot(histogram, xColumnIndex = 1)\n```\n\n----------------------------------------\n\nTITLE: Change window/level or colormap of volume in Slicer (Python)\nDESCRIPTION: This example shows how to adjust the window/level (brightness/contrast) and colormap of a volume in Slicer. The first snippet demonstrates setting specific window and level values. The second snippet sets and observes a rainbow colormap. It needs an existing MRHead volume.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nvolumeNode = getNode(\"MRHead\")\ndisplayNode = volumeNode.GetDisplayNode()\ndisplayNode.AutoWindowLevelOff()\ndisplayNode.SetWindow(50)\ndisplayNode.SetLevel(100)\n```\n\nLANGUAGE: Python\nCODE:\n```\ndisplayNode.SetAndObserveColorNodeID(\"vtkMRMLColorTableNodeRainbow\")\n```\n\n----------------------------------------\n\nTITLE: Load Markups Node from JSON File (Python)\nDESCRIPTION: Loads a markup node from a markups JSON file. This file format stores all markup properties. Requires a valid file path to a markups JSON file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmarkupsNode = slicer.util.loadMarkups(\"/path/to/MyMarkups.mkp.json\")\n```\n\n----------------------------------------\n\nTITLE: Iterate through 3D views in Slicer (Python)\nDESCRIPTION: This snippet iterates through all 3D views in the current Slicer layout, accessing the view node and camera node for each view. It prints the name, ID, and camera ID of each 3D view.  Requires the `slicer` module to be available in the Python environment.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_57\n\nLANGUAGE: python\nCODE:\n```\nlayoutManager = slicer.app.layoutManager()\nfor threeDViewIndex in range(layoutManager.threeDViewCount) :\n  view = layoutManager.threeDWidget(threeDViewIndex).threeDView()\n  threeDViewNode = view.mrmlViewNode()\n  cameraNode = slicer.modules.cameras.logic().GetViewActiveCameraNode(threeDViewNode)\n  print(\"View node for 3D widget \" + str(threeDViewIndex))\n  print(\"  Name: \" + threeDViewNode .GetName())\n  print(\"  ID: \" + threeDViewNode .GetID())\n  print(\"  Camera ID: \" + cameraNode.GetID())\n```\n\n----------------------------------------\n\nTITLE: Saving Volume with Compression - Slicer - Python\nDESCRIPTION: Saves a volume to a file with compression control. The `useCompression` parameter is set to 0 to disable compression, potentially increasing file size but improving saving speed. The function saves the volume node with specified compression option.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nslicer.util.exportNode(volumeNode, imagePath, {\"useCompression\": 0})\n```\n\n----------------------------------------\n\nTITLE: Create Custom Color Table (Python)\nDESCRIPTION: This code snippet demonstrates how to create a custom color table with an inverted color range, based on the default Ocean color table. It creates a new vtkMRMLColorTableNode, sets its type to user-defined, defines the number of colors, and assigns inverted color values for each entry in the table. The new color table is then added to the Slicer scene.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_35\n\nLANGUAGE: python\nCODE:\n```\ninvertedocean = slicer.vtkMRMLColorTableNode()\ninvertedocean.SetTypeToUser()\ninvertedocean.SetNumberOfColors(256)\ninvertedocean.SetName(\"InvertedOcean\")\n\nfor i in range(0,255):\n  invertedocean.SetColor(i, 0.0, 1 - (i+1e-16)/255.0, 1.0, 1.0)\n\nslicer.mrmlScene.AddNode(invertedocean)\n```\n\n----------------------------------------\n\nTITLE: Export Nodes to Subject Hierarchy Folders - Python\nDESCRIPTION: This function `exportNodes` recursively traverses the subject hierarchy, creating folders mirroring the hierarchy's structure and saving storable nodes (volumes, transforms, markups, etc.) within them. It utilizes the 3D Slicer's MRML scene to access subject hierarchy and node information. It depends on vtk, os and slicer modules. It requires a folder item ID and an output folder path as input and saves storable nodes to the specified directory structure.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/subjecthierarchy.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\ndef exportNodes(shFolderItemId, outputFolder):\n    # Get items in the folder\n    childIds = vtk.vtkIdList()\n    shNode = slicer.vtkMRMLSubjectHierarchyNode.GetSubjectHierarchyNode(slicer.mrmlScene)\n    shNode.GetItemChildren(shFolderItemId, childIds)\n    if childIds.GetNumberOfIds() == 0:\n        return\n    # Create output folder\n    import os\n    os.makedirs(outputFolder, exist_ok=True)\n    # Write each child item to file\n    for itemIdIndex in range(childIds.GetNumberOfIds()):\n        shItemId = childIds.GetId(itemIdIndex)\n        # Write node to file (if storable)\n        dataNode = shNode.GetItemDataNode(shItemId)\n        if dataNode and dataNode.IsA(\"vtkMRMLStorableNode\") and dataNode.GetStorageNode():\n            storageNode = dataNode.GetStorageNode()\n            filename = os.path.basename(storageNode.GetFileName())\n            filepath = outputFolder + \"/\" + filename\n            slicer.util.exportNode(dataNode, filepath)\n        # Write all children of this child item\n        grandChildIds = vtk.vtkIdList()\n        shNode.GetItemChildren(shItemId, grandChildIds)\n        if grandChildIds.GetNumberOfIds() > 0:\n            exportNodes(shItemId, outputFolder+\"/\"+shNode.GetItemName(shItemId))\n\nshNode = slicer.vtkMRMLSubjectHierarchyNode.GetSubjectHierarchyNode(slicer.mrmlScene)\noutputFolder = \"c:/tmp/test20211123\"\nslicer.app.ioManager().addDefaultStorageNodes()\nexportNodes(shNode.GetSceneItemID(), outputFolder)\n```\n\n----------------------------------------\n\nTITLE: C++ Member Variable Example\nDESCRIPTION: This example demonstrates the C++ naming convention for member variables in Slicer. Member variables should start with a capital letter and be used with `this->` in the implementation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/style_guide.md#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nclass Node\n{\n  Object &Foo();\n  Object Bla;\n};\nObject& Node::Foo()\n{\n  return this->Bla;\n}\n```\n\n----------------------------------------\n\nTITLE: Capture slice view sweep to files (Python)\nDESCRIPTION: Captures a series of images representing a sweep of a slice view, saving each image as a separate PNG file. It requires the `ScreenCapture` module.  Parameters include the slice node (`vtkMRMLSliceNodeRed`), start and end positions, the number of images, the output directory, and the filename pattern. The slice view will sweep from -125.0 to 75.0, capturing 30 images with file names like `image_00001.png` in `c:/tmp`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/screencapture.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport ScreenCapture\nScreenCapture.ScreenCaptureLogic().captureSliceSweep(getNode(\"vtkMRMLSliceNodeRed\"), -125.0, 75.0, 30, \"c:/tmp\", \"image_%05d.png\")\n```\n\n----------------------------------------\n\nTITLE: Get markup RAS coordinates from voxel coordinates in Slicer (Python)\nDESCRIPTION: This snippet explains how to obtain the position of a volume's maximum intensity voxel (determined by numpy, in IJK coordinates) in RAS coordinates, allowing it to be marked with a markup control point. It depends on vtk and numpy.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\n# Inputs\nvolumeNode = getNode(\"MRHead\")\npointListNode = getNode(\"F\")\n\n# Get voxel position in IJK coordinate system\nimport numpy as np\nvolumeArray = slicer.util.arrayFromVolume(volumeNode)\n# Get position of highest voxel value\npoint_Kji = np.where(volumeArray == volumeArray.max())\npoint_Ijk = [point_Kji[2][0], point_Kji[1][0], point_Kji[0][0]]\n\n# Get physical coordinates from voxel coordinates\nvolumeIjkToRas = vtk.vtkMatrix4x4()\nvolumeNode.GetIJKToRASMatrix(volumeIjkToRas)\npoint_VolumeRas = [0, 0, 0, 1]\nvolumeIjkToRas.MultiplyPoint(np.append(point_Ijk,1.0), point_VolumeRas)\n\n# If volume node is transformed, apply that transform to get volume's RAS coordinates\ntransformVolumeRasToRas = vtk.vtkGeneralTransform()\nslicer.vtkMRMLTransformNode.GetTransformBetweenNodes(volumeNode.GetParentTransformNode(), None, transformVolumeRasToRas)\npoint_Ras = transformVolumeRasToRas.TransformPoint(point_VolumeRas[0:3])\n\n# Add a markup at the computed position and print its coordinates\npointListNode.AddControlPoint((point_Ras[0], point_Ras[1], point_Ras[2]), \"max\")\nprint(point_Ras)\n```\n\n----------------------------------------\n\nTITLE: Creating a Histogram Plot using MRML Classes in Python\nDESCRIPTION: This snippet shows how to create a histogram plot using the MRML classes in 3D Slicer. It loads a sample volume, computes the histogram, saves the results to a new table node, creates a plot series node, a plot chart node, and then displays the chart in the layout. It relies on the `SampleData` module to retrieve the volume and `numpy` for computation of the histogram.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/plots.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Get a volume from SampleData\nimport SampleData\nvolumeNode = SampleData.SampleDataLogic().downloadMRHead()\n\n# Compute histogram values\nimport numpy as np\nhistogram = np.histogram(arrayFromVolume(volumeNode), bins=50)\n\n# Save results to a new table node\ntableNode=slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLTableNode\")\nupdateTableFromArray(tableNode, histogram)\ntableNode.GetTable().GetColumn(0).SetName(\"Count\")\ntableNode.GetTable().GetColumn(1).SetName(\"Intensity\")\n\n# Create plot\nplotSeriesNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLPlotSeriesNode\", volumeNode.GetName() + \" histogram\")\nplotSeriesNode.SetAndObserveTableNodeID(tableNode.GetID())\nplotSeriesNode.SetXColumnName(\"Intensity\")\nplotSeriesNode.SetYColumnName(\"Count\")\nplotSeriesNode.SetPlotType(plotSeriesNode.PlotTypeScatterBar)\nplotSeriesNode.SetColor(0, 0.6, 1.0)\n\n# Create chart and add plot\nplotChartNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLPlotChartNode\")\nplotChartNode.AddAndObservePlotSeriesNodeID(plotSeriesNode.GetID())\nplotChartNode.YAxisRangeAutoOff()\nplotChartNode.SetYAxisRange(0, 500000)\n\n# Show plot in layout\nslicer.modules.plots.logic().ShowChartInLayout(plotChartNode)\n```\n\n----------------------------------------\n\nTITLE: Creating Hollow Model from Segment Boundary (VTK Filters) - Python\nDESCRIPTION: This example demonstrates creating a hollow model from a segment's boundary using VTK filters directly. It retrieves the closed surface representation of a segment, then uses `vtkLinearExtrusionFilter` to extrude the surface and create a shell with a specified thickness.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Get closed surface representation of the segment\nshellThickness = 3.0  # mm\nsegmentationNode = getNode(\"Segmentation\")\nsegmentationNode.CreateClosedSurfaceRepresentation()\npolyData = segmentationNode.GetClosedSurfaceInternalRepresentation(\"Segment_1\")\n\n# Create shell\nextrude = vtk.vtkLinearExtrusionFilter()\nextrude.SetInputData(polyData)\nextrude.SetExtrusionTypeToNormalExtrusion()\nextrude.SetScaleFactor(shellThickness)\n```\n\n----------------------------------------\n\nTITLE: Convert Transform to Grid Transform\nDESCRIPTION: This snippet demonstrates how to convert a linear transform to a grid transform, also known as a displacement field transform. It requires a transform node and a reference volume node. It is useful when inverse transforms or other software limitations exist.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/transforms.md#_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\ntransformNode=slicer.util.getNode('LinearTransform_3')\nreferenceVolumeNode=slicer.util.getNode('MRHead')\nslicer.modules.transforms.logic().ConvertToGridTransform(transformNode, referenceVolumeNode)\n```\n\n----------------------------------------\n\nTITLE: Access Referenced Instance UIDs from Structure Set in Python\nDESCRIPTION: Retrieves the content time tag of a structure set by using referenced instance UIDs. It fetches the ReferencedInstanceUIDs attribute from the subject hierarchy item associated with the structure set, then retrieves the filename, and finally prints the content time tag.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/dicom.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nrtStructName = \"3: RTSTRUCT: PROS\"\nrtStructNode = slicer.util.getNode(rtStructName)\nshNode = slicer.vtkMRMLSubjectHierarchyNode.GetSubjectHierarchyNode(slicer.mrmlScene)\nrtStructShItemID = shNode.GetItemByDataNode(rtStructNode)\nctSliceInstanceUids = shNode.GetItemAttribute(rtStructShItemID, \"DICOM.ReferencedInstanceUIDs\").split()\nfilename = slicer.dicomDatabase.fileForInstance(ctSliceInstanceUids[0])\nprint(slicer.dicomDatabase.fileValue(filename, \"0008,0033\"))  # content time\n```\n\n----------------------------------------\n\nTITLE: Setting up settings.json for debugging Slicer in VS Code\nDESCRIPTION: This JSON configuration sets up the `settings.json` file for debugging the Slicer application in Visual Studio Code. It defines the launch configuration, specifying the program path, arguments, working directory, and debugger settings.  Key parameters include `program` (path to Slicer executable), `MIMode` (set to gdb for Linux debugging), and `miDebuggerPath` (path to GDB executable).\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/debugging/vscodecpp.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"launch\": {\n        \"configurations\": [\n                  {\n                    \"name\": \"Slicer debug\",\n                    \"type\": \"cppdbg\",\n                    \"request\": \"launch\",\n                    \"program\": \"/home/perklab/D/Slicer-SuperBuild-Debug/Slicer-build/bin/SlicerApp-real\",\n                    \"args\": [],\n                    \"stopAtEntry\": false,\n                    \"cwd\": \".\",\n                    \"environment\": [],\n                    \"externalConsole\": false,\n                    \"MIMode\": \"gdb\",\n                    \"setupCommands\": [\n                      {\n                        \"description\": \"Enable pretty-printing for gdb\",\n                        \"text\": \"-enable-pretty-printing\",\n                        \"ignoreFailures\": true\n                      }\n                    ],\n                    \"miDebuggerPath\": \"/usr/bin/gdb\"\n                  }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Monitoring Folder for New Volumes - Python\nDESCRIPTION: This Python script demonstrates how to monitor a folder for new volume files and automatically load them into 3D Slicer. It uses a timer to periodically check the specified folder and loads any new files found. The script depends on the `os`, `qt`, `slicer`, and `logging` modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nincomingVolumeFolder = \"c:/tmp/incoming\"\nincomingVolumesProcessed = []\n\ndef checkForNewVolumes():\n  # Check if there is a new file in the\n  from os import listdir\n  from os.path import isfile, join\n  for f in listdir(incomingVolumeFolder):\n    if f in incomingVolumesProcessed:\n      # This is an incoming file, it was already there\n      continue\n    filePath = join(incomingVolumeFolder, f)\n    if not isfile(filePath):\n      # ignore directories\n      continue\n    logging.info(\"Loading new file: \" + f)\n    incomingVolumesProcessed.append(f)\n    slicer.util.loadVolume(filePath)\n  # Check again in 3000ms\n  qt.QTimer.singleShot(3000, checkForNewVolumes)\n\n# Start monitoring\ncheckForNewVolumes()\n```\n\n----------------------------------------\n\nTITLE: Analyze a segmentation fault (Bash)\nDESCRIPTION: This section shows how to analyze segmentation faults in Slicer using GDB and core dumps. It includes commands for both build tree and installed Slicer versions, setting ulimit, running Slicer, attaching GDB to the core dump, and printing a backtrace.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/debugging/linuxcpp.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ ulimit -c unlimited\n$ ./Slicer\n... make it crash\n$ ./Slicer --gdb ./bin/SlicerApp-real\n(gdb) core core\n(gdb) backtrace\n...\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ ulimit -c unlimited\n$ ./Slicer\n... make it crash\n$ ./Slicer --launch bash\n$ gdb ./bin/SlicerApp-real\n(gdb) core core\n(gdb) backtrace\n...\n```\n\n----------------------------------------\n\nTITLE: Cloning a Volume - Python\nDESCRIPTION: This Python script demonstrates how to clone an existing volume in 3D Slicer, including its pixel data and display settings. It uses the `CloneVolume` function from the `slicer.modules.volumes.logic()` module to create a copy of the specified volume node.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nsourceVolumeNode = slicer.util.getNode(\"MRHead\")\nvolumesLogic = slicer.modules.volumes.logic()\nclonedVolumeNode = volumesLogic.CloneVolume(slicer.mrmlScene, sourceVolumeNode, \"Cloned volume\")\n```\n\n----------------------------------------\n\nTITLE: Toggle Segment Visibility Keyboard Shortcut\nDESCRIPTION: This snippet creates a keyboard shortcut (Ctrl+k) to toggle the visibility of segments with a specific status ('completed', 'inprogress', or 'flagged'). It assumes a segmentation node named 'Segmentation' exists and defines a function to toggle the visibility of segments based on their 'Segmentation.Status' tag.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nslicer.segmentationNode = getNode('Segmentation')\nslicer.toggledSegmentState=\"completed\"  # it could be \"inprogress\", \"completed\", \"flagged\"\nslicer.visibility = True\n\ndef toggleSegmentVisibility():\n    slicer.visibility = not slicer.visibility\n    segmentation = slicer.segmentationNode.GetSegmentation()\n    for segmentIndex in range(segmentation.GetNumberOfSegments()):\n        segmentId = segmentation.GetNthSegmentID(segmentIndex)\n        segmentationStatus = vtk.mutable(\"\")\n        if not segmentation.GetSegment(segmentId).GetTag(\"Segmentation.Status\", segmentationStatus):\n            continue\n        if segmentationStatus != slicer.toggledSegmentState:\n            continue\n        slicer.segmentationNode.GetDisplayNode().SetSegmentVisibility(segmentId, slicer.visibility)\n\nshortcut = qt.QShortcut(slicer.util.mainWindow())\nshortcut.setKey(qt.QKeySequence(\"Ctrl+k\"))\nshortcut.connect( \"activated()\", toggleSegmentVisibility)\n```\n\n----------------------------------------\n\nTITLE: Create Closed Surface Representation\nDESCRIPTION: This snippet creates a closed surface representation for a segmentation, which is required for displaying the segmentation in 3D. The segmentation node must already exist.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nsegmentation.CreateClosedSurfaceRepresentation()\n```\n\n----------------------------------------\n\nTITLE: Connecting Widgets from .ui File - Python\nDESCRIPTION: This code demonstrates connecting widgets defined in a `.ui` file to a parameter node wrapper using dynamic properties. It shows how to load the UI, initialize the parameter node, connect the GUI elements to the parameter node wrapper using `connectGui`, and disconnect them using `disconnectGui` when exiting the module. The example also shows that setting the \"SlicerParameterName\" dynamic property on widgets will automatically update the parameters based on the widget's values.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/parameter_nodes/gui_connection.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport slicer\nfrom slicer.parameterNodeWrapper import parameterNodeWrapper\n\n@parameterNodeWrapper\nclass MyModuleParameterNode:\n  textValue: str\n  iterations: int\n\nclass MyModuleWidget(ScriptedLoadableModuleWidget, VTKObservationMixin):\n  def setup(self):\n    ...\n\n    # assuming the image above is in MyModule.ui\n    uiWidget = slicer.util.loadUI(self.resourcePath('UI/MyModule.ui'))\n    self.layout.addWidget(uiWidget)\n    self.ui = slicer.util.childWidgetVariables(uiWidget)\n\n    ...\n\n  def enter(self):\n    self.initializeParameterNode()\n    # the connectGui call sets up the bindings and returns a tag that can be\n    # used to disconnect the GUI from the parameter node wrapper.\n    self._parameterNodeConnectionTag = self._parameterNode.connectGui(self.ui)\n\n  def exit(self):\n    # Do not react to parameter node changes (GUI will be updated when the user enters into the module)\n    self._parameterNode.disconnectGui(self._parameterNodeConnectionTag)\n    self._parameterNodeConnectionTag = None\n\n  def onApply(self):\n    # Because the \"SlicerParameterName\" properties were set in the .ui file, textValue\n    # and iterations are updated whenever their corresponding widgets are updated.\n    self.logic.run(self._parameterNode.textValue, self._parameterNode.iterations)\n```\n\n----------------------------------------\n\nTITLE: Customize Slice View Crosshair Movement (Python)\nDESCRIPTION: This snippet customizes the way the crosshair is moved in a slice view.  It sets the crosshair position by left-click and moves it by Alt+left-click-and-drag. Requires the `slicer` and `vtk` modules to be available in the Python environment.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_64\n\nLANGUAGE: python\nCODE:\n```\n# Red slice view\nsliceViewLabel = \"Red\"\nsliceViewWidget = slicer.app.layoutManager().sliceWidget(sliceViewLabel)\ndisplayableManager = sliceViewWidget.sliceView().displayableManagerByClassName(\"vtkMRMLCrosshairDisplayableManager\")\nwidget = displayableManager.GetSliceIntersectionWidget()\n\n# Set crosshair position by left-click\nwidget.SetEventTranslation(widget.WidgetStateIdle, slicer.vtkMRMLInteractionEventData.LeftButtonClickEvent, vtk.vtkEvent.NoModifier, widget.WidgetEventSetCrosshairPosition)\nwidget.SetEventTranslation(widget.WidgetStateIdle, slicer.vtkMRMLInteractionEventData.LeftButtonClickEvent, vtk.vtkEvent.NoModifier, widget.WidgetEventSetCrosshairPosition)\n\n# Move crosshair by Alt+left-click-and-drag\nwidget.SetEventTranslationClickAndDrag(widget.WidgetStateIdle, vtk.vtkCommand.LeftButtonPressEvent, vtk.vtkEvent.AltModifier,\n  widget.WidgetStateMoveCrosshair, widget.WidgetEventMoveCrosshairStart, widget.WidgetEventMoveCrosshairEnd)\n```\n\n----------------------------------------\n\nTITLE: Add Keyboard Shortcut - Python\nDESCRIPTION: This snippet adds a keyboard shortcut (Ctrl+e) to jump slice views to the (0,0,0) coordinate in Slicer. It utilizes `qt.QShortcut` to define the shortcut and connects it to the `JumpSlicesToLocation` function.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_70\n\nLANGUAGE: python\nCODE:\n```\nshortcut = qt.QShortcut(qt.QKeySequence(\"Ctrl+e\"), slicer.util.mainWindow())\nshortcut.connect(\"activated()\",\n  lambda: slicer.modules.markups.logic().JumpSlicesToLocation(0,0,0, True))\n```\n\n----------------------------------------\n\nTITLE: Connecting Signals to Python Methods in Slicer\nDESCRIPTION: This code snippet demonstrates how to connect a Qt signal to a Python method in Slicer.  It defines a function `someFunction` that prints \"clicked!\" and connects it to the `clicked()` signal of a `QPushButton`. When the button is clicked, `someFunction` will be executed.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/api.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef someFunction():\n  print(\"clicked!\")\n\nb = qt.QPushButton(\"MyButton\")\nb.connect(\"clicked()\", someFunction)  # someFunction will be called when the button is clicked\nb.show()\n```\n\n----------------------------------------\n\nTITLE: Extracting Slice from Volume - Python\nDESCRIPTION: This Python script extracts an arbitrarily oriented slice from a 3D volume using a markup plane node to define the slice's position, orientation, and size.  It requires the `vtk` and `numpy` libraries.  The script creates a new volume node representing the extracted slice and resamples the original volume to populate it.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\n# Inputs\nvolumeNode = slicer.mrmlScene.GetFirstNodeByClass(\"vtkMRMLScalarVolumeNode\")  # input 3D volume\nplaneNode = slicer.mrmlScene.GetFirstNodeByClass(\"vtkMRMLMarkupsPlaneNode\")  # input markup plane\nspacing = [0.5, 0.5, 1.0]  # spacing of the extracted image slice\n\n# Create slice image node\nsliceImageNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLScalarVolumeNode\")\nsliceImageNode.CreateDefaultDisplayNodes()\nimageData = vtk.vtkImageData()\nsliceImageNode.SetAndObserveImageData(imageData)\n# Set image size\nsizeWorld = planeNode.GetSizeWorld()\nimageData.SetExtent(0, int(sizeWorld[0]/spacing[0]-1), 0, int(sizeWorld[1]/spacing[1]-1), 0, 0)\nimageData.AllocateScalars(vtk.VTK_UNSIGNED_CHAR, 1)\n# Set spacing\nsliceImageNode.SetSpacing(spacing)\n# Set directions\nimport numpy as np\nijkToRASDirections = np.eye(3)\nplaneNode.GetAxesWorld(ijkToRASDirections[0:3, 0], ijkToRASDirections[0:3, 1], ijkToRASDirections[0:3, 2])\nsliceImageNode.SetIJKToRASDirections(ijkToRASDirections)\n# Set origin\norigin = np.array(planeNode.GetCenter()) - ijkToRASDirections[0:3, 0] * sizeWorld[0] / 2 - ijkToRASDirections[0:3, 1] * sizeWorld[1] / 2\nsliceImageNode.SetOrigin(origin)\n\n# Resample the volume to the slice image node\nreferenceVolumeNode = sliceImageNode\nparameters = {\n    \"inputVolume\": volumeNode.GetID(),\n    \"outputVolume\": sliceImageNode.GetID(),\n    \"referenceVolume\": sliceImageNode.GetID(),\n    \"interpolationType\": \"linear\"\n}\nparameterNode = slicer.cli.run(slicer.modules.resamplescalarvectordwivolume, None, parameters, wait_for_completion=True, update_display=False)\nslicer.mrmlScene.RemoveNode(parameterNode)\n```\n\n----------------------------------------\n\nTITLE: MRML Scene Undo\nDESCRIPTION: The `vtkMRMLScene::Undo()` method restores the previously saved state of the MRML scene, reverting the changes made since the last `SaveStateForUndo()` call.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/mrml_overview.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Set Default Volume Storage to Uncompressed - Python\nDESCRIPTION: This snippet sets the default volume storage to not use compression. It creates a 'vtkMRMLVolumeArchetypeStorageNode', disables compression, and adds it as a default node to the scene. This setting will apply to all new volume nodes created in the session.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# Set the default volume storage to not compress by default\ndefaultVolumeStorageNode = slicer.vtkMRMLVolumeArchetypeStorageNode()\ndefaultVolumeStorageNode.SetUseCompression(0)\nslicer.mrmlScene.AddDefaultNode(defaultVolumeStorageNode)\nlogging.info(\"Volume nodes will be stored uncompressed by default\")\n```\n\n----------------------------------------\n\nTITLE: Import DICOM Files using DICOMweb in Python\nDESCRIPTION: Downloads and imports DICOM data using DICOMweb from a Picture Archiving and Communications System (PACS). It requires a DICOMweb endpoint and a study instance UID. Ensure the DICOM module is initialized before executing the import.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/dicom.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nslicer.util.selectModule(\"DICOM\")  # ensure DICOM database is initialized\nslicer.app.processEvents()\nfrom DICOMLib import DICOMUtils\nDICOMUtils.importFromDICOMWeb(\n  dicomWebEndpoint=\"https://demo.kheops.online/api\",\n  studyInstanceUID=\"1.3.6.1.4.1.14519.5.2.1.8421.4009.985792766370191766692237040819\")\n```\n\n----------------------------------------\n\nTITLE: Project Line to Plane - Python\nDESCRIPTION: This snippet creates a new line (`projectedLineNode`) by projecting a line (`lineNode`) onto a plane (`planeNode`). It gets the transformations between the plane and world coordinate systems and projects each control point of the line onto the plane. Homogeneous coordinates are used to handle the transformations.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nlineNode = getNode('L')\nplaneNode = getNode('P')\n\n# Create new node for storing the projected line node\nprojectedLineNode = slicer.mrmlScene.AddNewNodeByClass(lineNode.GetClassName(), lineNode.GetName()+\" projected\")\n\n# Get transforms\nplaneToWorld = vtk.vtkMatrix4x4()\nplaneNode.GetObjectToWorldMatrix(planeToWorld)\nworldToPlane = vtk.vtkMatrix4x4()\nvtk.vtkMatrix4x4.Invert(planeToWorld, worldToPlane)\n\n# Project each point\nfor pointIndex in range(2):\n    point_World = [*lineNode.GetNthControlPointPositionWorld(pointIndex), 1.0]\n    point_Plane = worldToPlane.MultiplyPoint(point_World)\n    projectedPoint_Plane = [point_Plane[0], point_Plane[1], 0.0, 1.0]\n    projectedPoint_World = planeToWorld.MultiplyPoint(projectedPoint_Plane)\n    projectedLineNode.AddControlPoint(projectedPoint_World[0:3])\n```\n\n----------------------------------------\n\nTITLE: Changing Markups Display Properties - Python\nDESCRIPTION: This code snippet shows how to change the display properties of a markup point list. It retrieves the point list and its display node, then modifies properties such as visibility, color, and view node IDs. This allows you to customize the appearance of the markups in different views.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\npointListNode = getNode(\"F\")\npointListDisplayNode = pointListNode.GetDisplayNode()\npointListDisplayNode.SetVisibility(False) # Hide all points\npointListDisplayNode.SetVisibility(True) # Show all points\npointListDisplayNode.SetSelectedColor(1,1,0) # Set color to yellow\npointListDisplayNode.SetViewNodeIDs([\"vtkMRMLSliceNodeRed\", \"vtkMRMLViewNode1\"]) # Only show in red slice view and first 3D view\n```\n\n----------------------------------------\n\nTITLE: Python Scripts: Avoiding Factory Methods\nDESCRIPTION: This Python code snippet demonstrates a preferred approach to avoid factory methods and manual `UnRegister` calls. Instead of using `CreateNodeByClass` and `UnRegister`, the snippet recommends using `AddNewNodeByClass`, which handles the object creation and registration automatically.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/advanced_topics.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nn = slicer.mrmlScene.CreateNodeByClass('vtkMRMLLinearTransformNode')\nslicer.mrmlScene.AddNode(n)\nn.UnRegister(slicer.mrmlScene)\n```\n\nLANGUAGE: python\nCODE:\n```\nn = slicer.mrmlScene.AddNewNodeByClass('vtkMRMLLinearTransformNode')\n```\n\n----------------------------------------\n\nTITLE: Initializing Markups Placement Widget - Python\nDESCRIPTION: This code snippet demonstrates how to use the *qSlicerMarkupsPlaceWidget* widget to initiate markup placement. It creates a temporary markups point list node, sets up a widget containing a \"place control point\" button, and connects a function to handle changes in the active placement mode. This allows you to easily add a placement button to your module's GUI.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n# Temporary markups point list node\npointListNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLMarkupsFiducialNode\")\n\ndef placementModeChanged(active):\n  print(\"Placement: \" +(\"active\" if active else \"inactive\"))\n  # You can inspect what is in the markups node here, delete the temporary markup point list node, etc.\n\n# Create and set up widget that contains a single \"place control point\" button. The widget can be placed in the module GUI.\nplaceWidget = slicer.qSlicerMarkupsPlaceWidget()\nplaceWidget.setMRMLScene(slicer.mrmlScene)\nplaceWidget.setCurrentNode(pointListNode)\nplaceWidget.buttonsVisible=False\nplaceWidget.placeButton().show()\nplaceWidget.connect(\"activeMarkupsFiducialPlaceModeChanged(bool)\", placementModeChanged)\nplaceWidget.show()\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Transforms (Python)\nDESCRIPTION: This snippet shows how to combine multiple transforms by setting one transform node as the parent transform of another, and then applying the combined transform to a transformable node. This effectively concatenates the transformations.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/transforms.md#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\ntransformNode2.SetAndObserveTransformNodeID(transformNode1.GetID())\ntransformableNode.SetAndObserveTransformNodeID(transformNode2.GetID())\n```\n\n----------------------------------------\n\nTITLE: Capture 3D view with transparent background (Python)\nDESCRIPTION: Captures the 3D view with a transparent background and saves it to a PNG file. This snippet sets the background color to black, configures the render window for alpha bit planes, and utilizes `vtkWindowToImageFilter` and `vtkPNGWriter` to capture and save the image to `c:/tmp/screenshot.png`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/screencapture.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Set background to black (required for transparent background)\nview = slicer.app.layoutManager().threeDWidget(0).threeDView()\nview.mrmlViewNode().SetBackgroundColor(0,0,0)\nview.mrmlViewNode().SetBackgroundColor2(0,0,0)\nview.forceRender()\n# Capture RGBA image\nrenderWindow = view.renderWindow()\nrenderWindow.SetAlphaBitPlanes(1)\nwti = vtk.vtkWindowToImageFilter()\nwti.SetInputBufferTypeToRGBA()\nwti.SetInput(renderWindow)\nwriter = vtk.vtkPNGWriter()\nwriter.SetFileName(\"c:/tmp/screenshot.png\")\nwriter.SetInputConnection(wti.GetOutputPort())\nwriter.Write()\n```\n\n----------------------------------------\n\nTITLE: Fit Markups Plane to Model - Python\nDESCRIPTION: This snippet fits a plane to a model node named `InputModel` and creates a new markups plane node to display the best-fit plane. It computes the best-fitting plane using vtkPlane.ComputeBestFittingPlane, extracting the center and normal vectors. Then, it creates a new markups plane node and sets its center and normal to the computed values.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ninputModel = getNode('InputModel')\n\n# Compute best fit plane\ncenter = [0.0, 0.0, 0.0]\nnormal = [0.0, 0.0, 1.0]\nvtk.vtkPlane.ComputeBestFittingPlane(inputModel.GetPolyData().GetPoints(), center, normal)\n\n# Display best fit plane as a markups plane\nplaneNode = slicer.mrmlScene.AddNewNodeByClass('vtkMRMLMarkupsPlaneNode')\nplaneNode.SetCenter(center)\nplaneNode.SetNormal(normal)\n```\n\n----------------------------------------\n\nTITLE: Setting custom macros - CMake\nDESCRIPTION: This snippet includes several CMake macros for building different types of modules, such as Qt libraries, VTK libraries, and logic, MRML, and widgets modules. These macros encapsulate the common steps required to build these module types and simplify the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_72\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(SlicerMacroBuildModuleQtLibrary)\ninclude(SlicerMacroBuildModuleVTKLibrary)\ninclude(SlicerMacroPythonWrapModuleVTKLibrary)\ninclude(SlicerMacroBuildModuleLogic)\ninclude(SlicerMacroBuildModuleMRML)\ninclude(SlicerMacroBuildModuleWidgets)\n```\n\n----------------------------------------\n\nTITLE: Get Binary Labelmap Representation\nDESCRIPTION: This snippet retrieves the binary labelmap representation of a segment from a segmentation node. If the representation does not exist, it returns None. It requires the segmentation node and segment ID as input.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimage = slicer.vtkOrientedImageData()\nsegmentationNode.GetBinaryLabelmapRepresentation(segmentID, image)\n```\n\n----------------------------------------\n\nTITLE: Using CustomClass in ParameterNodeWrapper\nDESCRIPTION: Demonstrates how to use the `CustomClass` with the `parameterNodeWrapper`.  It defines a class `CustomClassParameterNode` decorated with `@parameterNodeWrapper` and includes `CustomClass` as a type hint for a field, as well as a list of custom classes.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/parameter_nodes/advanced/custom_classes.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@parameterNodeWrapper\nclass CustomClassParameterNode(object):\n    # can now use CustomClass like any other type for building parameterNodeWrappers\n    custom: CustomClass = CustomClass(1,2,3)\n    listOfCustom: list[CustomClass]\n```\n\n----------------------------------------\n\nTITLE: Display volume using volume rendering - C++\nDESCRIPTION: Creates and sets up a volume rendering display node for a volume node using C++. It requires the volume rendering module and accesses the volume rendering logic. Updates the display node based on the volume node's properties.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_43\n\nLANGUAGE: C++\nCODE:\n```\nqSlicerAbstractCoreModule* volumeRenderingModule =\n  qSlicerCoreApplication::application()->moduleManager()->module(\"VolumeRendering\");\nvtkSlicerVolumeRenderingLogic* volumeRenderingLogic =\n  volumeRenderingModule ? vtkSlicerVolumeRenderingLogic::SafeDownCast(volumeRenderingModule->logic()) : 0;\nvtkMRMLVolumeNode* volumeNode = mrmlScene->GetNodeByID(\"vtkMRMLScalarVolumeNode1\");\nif (volumeRenderingLogic)\n  {\n  vtkSmartPointer<vtkMRMLVolumeRenderingDisplayNode> displayNode =\n    vtkSmartPointer<vtkMRMLVolumeRenderingDisplayNode>::Take(volumeRenderingLogic->CreateVolumeRenderingDisplayNode());\n  mrmlScene->AddNode(displayNode);\n  volumeNode->AddAndObserveDisplayNodeID(displayNode->GetID());\n  volumeRenderingLogic->UpdateDisplayNodeFromVolumeNode(displayNode, volumeNode);\n  }\n```\n\n----------------------------------------\n\nTITLE: Mapping Slicer RAS to NIfTI Voxel Space in MATLAB\nDESCRIPTION: This MATLAB code snippet demonstrates how to convert coordinates from Slicer's RAS coordinate system to the voxel space of a NIfTI image.  It extracts the \"voxel to world\" transformation matrix from a NIFTI file's header and uses it to transform RAS coordinates to voxel coordinates. The inverse of the transformation matrix `M` is used to convert the RAS coordinates `[R A S 1]` to voxel coordinates `d`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/coordinate_systems.md#_snippet_0\n\nLANGUAGE: Matlab\nCODE:\n```\nd = inv(M) * [ R A S 1 ]'\n```\n\n----------------------------------------\n\nTITLE: Exporting DICOM Database to NRRD/NIFTI - Python\nDESCRIPTION: This code snippet exports the entire Slicer DICOM database content to nrrd (or nifti, etc.) file format. It iterates through patients, studies, and series, saving each scalar volume node to a file named according to DICOM tags. It uses DICOMLib and slicer.util to achieve this.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/dicom.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\noutputFolder = \"c:/tmp/exptest/\"\n\nfrom DICOMLib import DICOMUtils\npatientUIDs = slicer.dicomDatabase.patients()\nfor patientUID in patientUIDs:\n    loadedNodeIDs = DICOMUtils.loadPatientByUID(patientUID)\n    for loadedNodeID in loadedNodeIDs:\n        # Check if we want to save this node\n        node = slicer.mrmlScene.GetNodeByID(loadedNodeID)\n        # Only export images\n        if not node or not node.IsA('vtkMRMLScalarVolumeNode'):\n            continue\n        # Construct filename\n        shNode = slicer.mrmlScene.GetSubjectHierarchyNode()\n        seriesItem = shNode.GetItemByDataNode(node)\n        studyItem = shNode.GetItemParent(seriesItem)\n        patientItem = shNode.GetItemParent(studyItem)\n        filename = shNode.GetItemAttribute(patientItem, 'DICOM.PatientID')\n        filename += '_' + shNode.GetItemAttribute(studyItem, 'DICOM.StudyDate')\n        filename += '_' + shNode.GetItemAttribute(seriesItem, 'DICOM.SeriesNumber')\n        filename += '_' + shNode.GetItemAttribute(seriesItem, 'DICOM.Modality')\n        filename = slicer.app.ioManager().forceFileNameValidCharacters(filename) + \".nrrd\"\n        # Save node\n        print(f'Write {node.GetName()} to {filename}')\n        success = slicer.util.saveNode(node, outputFolder+filename)\n    slicer.mrmlScene.Clear()\n```\n\n----------------------------------------\n\nTITLE: Building Loadable Module - CMake\nDESCRIPTION: Uses the `slicerMacroBuildLoadableModule` macro to automate the process of building the module. This macro takes the module name, export directive, include directories, source files, and other properties as arguments, streamlining the build configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Texts/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroBuildLoadableModule(\n  NAME ${MODULE_NAME}\n  EXPORT_DIRECTIVE ${MODULE_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${MODULE_INCLUDE_DIRECTORIES}\n  SRCS ${MODULE_SRCS}\n  MOC_SRCS ${MODULE_MOC_SRCS}\n  UI_SRCS ${MODULE_UI_SRCS}\n  TARGET_LIBRARIES ${MODULE_TARGET_LIBRARIES}\n  RESOURCES ${MODULE_RESOURCES}\n  WITH_GENERIC_TESTS\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Color Table Node - Python\nDESCRIPTION: This code demonstrates how to create a custom color table node in Slicer, which is used for custom label value mapping. It creates a new color table node, sets its type to user, hides it from the editors outside the Colors module, adds it to the scene, and then populates it with colors based on a list of segment names and their corresponding label values.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsegment_names_to_labels = [(\"ribs\", 10), (\"right lung\", 12), (\"left lung\", 6)]\n\ncolorTableNode = slicer.mrmlScene.CreateNodeByClass(\"vtkMRMLColorTableNode\")\ncolorTableNode.SetTypeToUser()\ncolorTableNode.HideFromEditorsOff()  # make the color table selectable in the GUI outside Colors module\nslicer.mrmlScene.AddNode(colorTableNode); colorTableNode.UnRegister(None)\nlargestLabelValue = max([name_value[1] for name_value in segment_names_to_labels])\ncolorTableNode.SetNumberOfColors(largestLabelValue + 1)\nimport random\nfor segmentName, labelValue in segment_names_to_labels:\n    r = random.uniform(0.0, 1.0)\n    g = random.uniform(0.0, 1.0)\n    b = random.uniform(0.0, 1.0)\n    a = 1.0\n    success = colorTableNode.SetColor(labelValue, segmentName, r, g, b, a)\n```\n\n----------------------------------------\n\nTITLE: Saving a Plot as Vector Graphics in Python\nDESCRIPTION: This snippet demonstrates how to save a plot displayed in a Slicer plot widget as a vector graphics (.svg) file. It retrieves the plot view from the first plot widget in the layout manager and then calls the `saveAsSVG()` method to save the plot to a specified file path.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/plots.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nplotView = slicer.app.layoutManager().plotWidget(0).plotView()\nplotView.saveAsSVG(\"c:/tmp/test.svg\")\n```\n\n----------------------------------------\n\nTITLE: Launch External Process - Python\nDESCRIPTION: This code demonstrates how to launch an external process (Python3 script) from within Slicer, ensuring it runs in Slicer's startup environment to avoid library conflicts. It uses `subprocess.check_output` with the `startupEnvironment` to execute the command.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_71\n\nLANGUAGE: python\nCODE:\n```\ncommand_to_execute = [\"/usr/bin/python3\", \"-c\", \"print(\\\"hola\\\")\"]\nfrom subprocess import check_output\ncheck_output(\n  command_to_execute,\n  env=slicer.util.startupEnvironment()\n  )\n```\n\nLANGUAGE: python\nCODE:\n```\n\"hola\\n\"\n```\n\n----------------------------------------\n\nTITLE: Setting Module Python Scripts in CMakeLists.txt\nDESCRIPTION: This example shows how to modify the `CMakeLists.txt` file to include additional Python scripts located in a subfolder. This ensures that all necessary files, including `__init__.py`, `cool_maths.py`, and `utils.py` within the `MySlicerModuleLib` folder, are included when the extension is packaged for distribution.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/python_faq.md#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_PYTHON_SCRIPTS\n  ${MODULE_NAME}.py\n  ${MODULE_NAME}Lib/__init__.py\n  ${MODULE_NAME}Lib/cool_maths.py\n  ${MODULE_NAME}Lib/utils.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Access Markups Point List Properties (Python)\nDESCRIPTION: Accesses and modifies properties of control points within a markup fiducial node. Demonstrates how to add points, set labels, IDs, positions, selection status, and visibility using the node's methods. It requires an existing markups fiducial node in the scene.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\npointListNode = getNode(\"vtkMRMLMarkupsFiducialNode1\")\nn = pointListNode.AddControlPoint([4.0, 5.5, -6.0])\npointListNode.SetNthControlPointLabel(n, \"new label\")\n# each control point is given a unique id which can be accessed from the superclass level\nid1 = pointListNode.GetNthControlPointID(n)\n# manually set the position\npointListNode.SetNthControlPointPosition(n, 6.0, 7.0, 8.0)\n# set the label\npointListNode.SetNthControlPointLabel(n, \"New label\")\n# set the selected flag, only selected = 1 control points will be passed to CLIs\npointListNode.SetNthControlPointSelected(n, 1)\n# set the visibility flag\npointListNode.SetNthControlPointVisibility(n, 0)\n```\n\n----------------------------------------\n\nTITLE: Plotting with Matplotlib in Slicer Jupyter Notebook in Python\nDESCRIPTION: This example shows how to create plots within a Slicer Jupyter notebook using Matplotlib. It first checks for Matplotlib installation, sets the backend to 'Agg', generates a plot with subplots, and then uses `JupyterNotebooksLib.MatplotlibDisplay` to display the plot in the notebook output. It leverages the JupyterNotebooksLib extension for Slicer.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/plots.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport JupyterNotebooksLib as slicernb\ntry:\n  import matplotlib\nexcept ModuleNotFoundError:\n  pip_install(\"matplotlib\")\n  import matplotlib\n\nmatplotlib.use(\"Agg\")\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef f(t):\n  s1 = np.cos(2*np.pi*t)\n  e1 = np.exp(-t)\n  return s1 * e1\n\nt1 = np.arange(0.0, 5.0, 0.1)\nt2 = np.arange(0.0, 5.0, 0.02)\nt3 = np.arange(0.0, 2.0, 0.01)\n\n\nfig, axs = plt.subplots(2, 1, constrained_layout=True)\naxs[0].plot(t1, f(t1), \"o\", t2, f(t2), \"-\")\naxs[0].set_title(\"subplot 1\")\naxs[0].set_xlabel(\"distance (m)\")\naxs[0].set_ylabel(\"Damped oscillation\")\nfig.suptitle(\"This is a somewhat long figure title\", fontsize=16)\n\naxs[1].plot(t3, np.cos(2*np.pi*t3), \"--\")\naxs[1].set_xlabel(\"time (s)\")\naxs[1].set_title(\"subplot 2\")\naxs[1].set_ylabel(\"Undamped\")\n\nslicernb.MatplotlibDisplay(matplotlib.pyplot)\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Parameter Node with Wrapper (Python)\nDESCRIPTION: This snippet defines a custom parameter node class `CustomParameterNode` using the `@parameterNodeWrapper` decorator. It specifies the types of the member properties: `numIterations` (int), `inputs` (list of vtkMRMLModelNode), and `output` (vtkMRMLModelNode). The decorator generates a constructor that accepts a `vtkMRMLScriptedModuleNode`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/parameter_nodes/overview.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport slicer\nfrom slicer import vtkMRMLModelNode\nfrom slicer.parameterNodeWrapper import *\n\n@parameterNodeWrapper\nclass CustomParameterNode:\n  numIterations: int\n  inputs: list[vtkMRMLModelNode]\n  output: vtkMRMLModelNode\n```\n\n----------------------------------------\n\nTITLE: Setting software renderer environment variables on Windows\nDESCRIPTION: This code snippet shows how to set environment variables to configure a software renderer on Windows for Slicer. It sets the GALLIUM_DRIVER to llvmpipe and MESA_GL_VERSION_OVERRIDE to 3.3COMPAT before launching Slicer. This is useful for running Slicer on machines without a dedicated GPU, such as virtual machines on cloud computing providers.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/get_help.md#_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nset GALLIUM_DRIVER=llvmpipe\nset MESA_GL_VERSION_OVERRIDE=3.3COMPAT\nSlicer.exe\n```\n\n----------------------------------------\n\nTITLE: Export Entire Scene as glTF in Slicer (Python)\nDESCRIPTION: This script exports the entire scene currently displayed in the 3D Slicer render window to a glTF file. glTF is a modern file format for surface meshes that is supported by many web viewers. This snippet sets up a `vtkGLTFExporter`, specifies the render window and output file name, and then writes the scene to the file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/models.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nexporter = vtk.vtkGLTFExporter()\nexporter.SetRenderWindow(slicer.app.layoutManager().threeDWidget(0).threeDView().renderWindow())\nexporter.SetFileName(\"c:/tmp/newfolder/mymodel.gltf\")\nexporter.Write()\n```\n\n----------------------------------------\n\nTITLE: Select Cells of Model using Markups Point List in Slicer (Python)\nDESCRIPTION: This script allows selecting cells of a model node that are closest to the positions of markups control points. It creates a scalar array to store the selection state and colors the model based on this selection. The script uses `vtkCellLocator` to find the closest cell to each markup point. It updates the selection whenever the markups node is modified. Requires a model node named \"Segment_1\" and a markups node named \"F\".\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/models.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Get input nodes\nmodelNode = slicer.util.getNode(\"Segment_1\") # select cells in this model\npointListNode = slicer.util.getNode(\"F\") # points will be selected at positions specified by this markups point list node\n\n# Create scalar array that will store selection state\ncellScalars = modelNode.GetMesh().GetCellData()\nselectionArray = cellScalars.GetArray(\"selection\")\nif not selectionArray:\n  selectionArray = vtk.vtkIntArray()\n  selectionArray.SetName(\"selection\")\n  selectionArray.SetNumberOfValues(modelNode.GetMesh().GetNumberOfCells())\n  selectionArray.Fill(0)\n  cellScalars.AddArray(selectionArray)\n\n# Set up coloring by selection array\nmodelNode.GetDisplayNode().SetActiveScalar(\"selection\", vtk.vtkAssignAttribute.CELL_DATA)\nmodelNode.GetDisplayNode().SetAndObserveColorNodeID(\"vtkMRMLColorTableNodeWarm1\")\nmodelNode.GetDisplayNode().SetScalarVisibility(True)\n\n# Initialize cell locator\ncell = vtk.vtkCellLocator()\ncell.SetDataSet(modelNode.GetMesh())\ncell.BuildLocator()\n\ndef onPointsModified(observer=None, eventid=None):\n  global pointListNode, selectionArray\n  selectionArray.Fill(0) # set all cells to non-selected by default\n  markupPoints = slicer.util.arrayFromMarkupsControlPoints(pointListNode)\n  closestPoint = [0.0, 0.0, 0.0]\n  cellObj = vtk.vtkGenericCell()\n  cellId = vtk.mutable(0)\n  subId = vtk.mutable(0)\n  dist2 = vtk.mutable(0.0)\n  for markupPoint in markupPoints:\n    cell.FindClosestPoint(markupPoint, closestPoint, cellObj, cellId, subId, dist2)\n    closestCell = cellId.get()\n    if closestCell >=0:\n      selectionArray.SetValue(closestCell, 100) # set selected cell's scalar value to non-zero\n  selectionArray.Modified()\n\n# Initial update\nonPointsModified()\n# Automatic update each time when a markup point is modified\npointListNodeObserverTag = markupsNode.AddObserver(slicer.vtkMRMLMarkupsFiducialNode.PointModifiedEvent, onPointsModified)\n\n# To stop updating selection, run this:\n# pointListNode.RemoveObserver(pointListNodeObserverTag)\n```\n\n----------------------------------------\n\nTITLE: Finding and including Teem package - CMake\nDESCRIPTION: This snippet finds the Teem package using `find_package` and includes the Teem use file.  This step is crucial for ensuring the correct linking of Teem libraries and avoiding potential conflicts. It assumes that Teem is a required dependency for the project.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_68\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Teem REQUIRED)\ninclude(${Teem_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Display Crosshair at a 3D Position - Python\nDESCRIPTION: This code snippet displays the crosshair at a specified 3D position. It retrieves the crosshair node, sets the crosshair position, centers the position in all slice views, and makes the crosshair visible.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nposition_RAS = [23.4, 5.6, 78.9]\ncrosshairNode = slicer.util.getNode(\"Crosshair\")\n# Set crosshair position\ncrosshairNode.SetCrosshairRAS(position_RAS)\n# Center the position in all slice views\nslicer.vtkMRMLSliceNode.JumpAllSlices(slicer.mrmlScene, *position_RAS, slicer.vtkMRMLSliceNode.CenteredJumpSlice)\n# Make the crosshair visible\ncrosshairNode.SetCrosshairMode(slicer.vtkMRMLCrosshairNode.ShowBasic)\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Wrapping (CMake)\nDESCRIPTION: This snippet configures the Python wrapping process for the MRMLCore library. It uses the `vtkMacroKitPythonWrap` macro to generate Python bindings if `VTK_WRAP_PYTHON` is enabled. It also configures the installation directories and target folder for the generated Python module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Core/CMakeLists.txt#_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\nif(VTK_WRAP_PYTHON)\n  vtkMacroKitPythonWrap(\n    KIT_NAME ${lib_name}\n    KIT_SRCS ${MRMLCore_SRCS}\n    KIT_INSTALL_BIN_DIR ${${PROJECT_NAME}_INSTALL_BIN_DIR}\n    KIT_INSTALL_LIB_DIR ${${PROJECT_NAME}_INSTALL_LIB_DIR}\n    )\n  # Export target\n  export(TARGETS ${lib_name}Python APPEND FILE ${${PROJECT_NAME}_EXPORT_FILE})\n  # Folder\n  if(NOT \"${${PROJECT_NAME}_FOLDER}\" STREQUAL \"\")\n    set_target_properties(${lib_name}Python PROPERTIES FOLDER ${${PROJECT_NAME}_FOLDER})\n    if(TARGET ${lib_name}Hierarchy)\n      set_target_properties(${lib_name}Hierarchy PROPERTIES FOLDER ${${PROJECT_NAME}_FOLDER})\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Create Subject Hierarchy Item - Python\nDESCRIPTION: This snippet demonstrates how to create different types of subject hierarchy items, including items associated with data nodes, subject items, folder items, and hierarchy items with manually set levels.  `parentItemID` specifies the parent item's ID, `dataNode` is the MRML node to associate with the item, and `name` is the item's name.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/subjecthierarchy.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n# If it is for a data node, it is automatically created, but the create function can be used to set parent:\nshNode.CreateItem(parentItemID, dataNode)\n# If it is a hierarchy item without a data node, then the create function must be used:\nshNode.CreateSubjectItem(parentItemID, name)\nshNode.CreateFolderItem(parentItemID, name)\nshNode.CreateHierarchyItem(parentItemID, name, level) # Advanced method to set level attribute manually (usually subject, study, or folder, but it can be a virtual branch for example)\n```\n\n----------------------------------------\n\nTITLE: Customize Widgets in View Controller Bars - Python\nDESCRIPTION: This code snippet customizes the widgets within a slice view controller bar. It retrieves the slice controller, hides specific widgets (pin button, fit-to-window button, and slice offset slider), and adds a custom button. Requires qt.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nsliceController = slicer.app.layoutManager().sliceWidget(\"Red\").sliceController()\n\n# hide what is not needed\nsliceController.pinButton().hide()\n#sliceController.viewLabel().hide()\nsliceController.fitToWindowToolButton().hide()\nsliceController.sliceOffsetSlider().hide()\n\n# add custom widgets\nmyButton = qt.QPushButton(\"My custom button\")\nsliceController.barLayout().addWidget(myButton)\n```\n\n----------------------------------------\n\nTITLE: Access VTK Render Window, Renderer, Camera (Python)\nDESCRIPTION: This snippet demonstrates how to access the VTK render window, renderers, and camera from a Slicer view.  It assumes a `view` and `cameraNode` variable is already defined. Requires the `slicer` module to be available in the Python environment.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_59\n\nLANGUAGE: python\nCODE:\n```\nrenderWindow = view.renderWindow()\nrenderers = renderWindow.GetRenderers()\nrenderer = renderers.GetItemAsObject(0)\ncamera = cameraNode.GetCamera()\n```\n\n----------------------------------------\n\nTITLE: Capture single view to file (Python)\nDESCRIPTION: Captures a specific view in Slicer, identified by its node ID, and saves it to a PNG file. It requires the `ScreenCapture` module.  The `viewNodeID` parameter specifies the view to capture. Example values include `vtkMRMLSliceNodeRed`, `vtkMRMLSliceNodeYellow`, `vtkMRMLSliceNodeGreen`, `vtkMRMLViewNode1`, `vtkMRMLViewNode2`. The captured image is saved as `c:/tmp/test.png`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/screencapture.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nviewNodeID = \"vtkMRMLViewNode1\"\nimport ScreenCapture\ncap = ScreenCapture.ScreenCaptureLogic()\nview = cap.viewFromNode(slicer.mrmlScene.GetNodeByID(viewNodeID))\ncap.captureImageFromView(view, \"c:/tmp/test.png\")\n```\n\n----------------------------------------\n\nTITLE: Assigning Custom Actions to Markups (Python)\nDESCRIPTION: This script assigns custom actions to markups in Slicer, triggered by double-clicking and keyboard shortcuts. It defines functions to toggle label visibility, shrink control points, and grow control points. Observers are added to the markup display node to trigger these actions on specified events.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_37\n\nLANGUAGE: python\nCODE:\n```\n# This example adds an action to the default double-click action on a markup\n# and defines two new custom actions. It is done for all existing markups in the first 3D view.\n#\n# How to use:\n# 1. Create markups nodes.\n# 2. Run the script below.\n# 3. Double-click on the markup -> this triggers toggleLabelVisibilty.\n# 4. Hover the mouse over a markup then pressing `q` and `w` keys -> this triggers shrinkControlPoints and growControlPoints.\n\nthreeDViewWidget = slicer.app.layoutManager().threeDWidget(0)\nmarkupsDisplayableManager = threeDViewWidget.threeDView().displayableManagerByClassName('vtkMRMLMarkupsDisplayableManager')\n\ndef shrinkControlPoints(caller, eventId):\n  markupsDisplayNode = caller\n  markupsDisplayNode.SetGlyphScale(markupsDisplayNode.GetGlyphScale()/1.1)\n\ndef growControlPoints(caller, eventId):\n  markupsDisplayNode = caller\n  markupsDisplayNode.SetGlyphScale(markupsDisplayNode.GetGlyphScale()*1.1)\n\ndef toggleLabelVisibility(caller, eventId):\n  markupsDisplayNode = caller\n  markupsDisplayNode.SetPointLabelsVisibility(not markupsDisplayNode.GetPointLabelsVisibility())\n\nobservations = []  # store the observations so that later can be removed\nmarkupsDisplayNodes = slicer.util.getNodesByClass(\"vtkMRMLMarkupsDisplayNode\")\nfor markupsDisplayNode in markupsDisplayNodes:\n  # Assign keyboard shortcut to trigger custom actions\n  markupsWidget = markupsDisplayableManager.GetWidget(markupsDisplayNode)\n  # Left double-click interaction event is translated to markupsWidget.WidgetEventAction by default,\n  # therefore we don't need to add an event translation for that. We just add two keyboard event translation for two custom actions\n  markupsWidget.SetKeyboardEventTranslation(markupsWidget.WidgetStateOnWidget, vtk.vtkEvent.NoModifier, '\\0', 0, \"q\", markupsWidget.WidgetEventCustomAction1)\n  markupsWidget.SetKeyboardEventTranslation(markupsWidget.WidgetStateOnWidget, vtk.vtkEvent.NoModifier, '\\0', 0, \"w\", markupsWidget.WidgetEventCustomAction2)\n  # Add observer to custom actions\n  observations.append([markupsDisplayNode, markupsDisplayNode.AddObserver(markupsDisplayNode.ActionEvent, toggleLabelVisibility)])\n  observations.append([markupsDisplayNode, markupsDisplayNode.AddObserver(markupsDisplayNode.CustomActionEvent1, shrinkControlPoints)])\n  observations.append([markupsDisplayNode, markupsDisplayNode.AddObserver(markupsDisplayNode.CustomActionEvent2, growControlPoints)])\n\n# Remove observations when custom actions are not needed anymore by uncommenting these lines:\n# for observedNode, observation in observations:\n#   observedNode.RemoveObserver(observation)\n```\n\n----------------------------------------\n\nTITLE: Display Node in Specific Views - Python\nDESCRIPTION: This code snippet shows how to display a node in only a predefined set of slice views (Red+, Green+, Yellow+). It retrieves the displayable node (named \"L\"), gets the IDs of the specified slice view nodes, and sets the 'ViewNodeIDs' property of the display node.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\ndisplayableNode = getNode(\"L\")\n\nviewNodeIDs = [\n  slicer.app.layoutManager().sliceWidget(viewName).mrmlSliceNode().GetID()\n  for viewName in [\"Red+\", \"Green+\", \"Yellow+\"]\n]\n\ndisplayableNode.GetDisplayNode().SetViewNodeIDs(viewNodeIDs)\n```\n\n----------------------------------------\n\nTITLE: Concatenating Sequences into a New Sequence (Python)\nDESCRIPTION: This snippet demonstrates how to concatenate all sequence nodes in the scene into a new sequence node in 3D Slicer.  It retrieves all sequence nodes, creates a new sequence node and sequence browser node, then copies the data from each existing sequence node into the new one. Finally, it deletes the original sequence nodes to avoid data sharing issues. It sets the slice viewer to show the merged sequence.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/sequences.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Get all sequence nodes in the scene\nsequenceNodes = slicer.util.getNodesByClass(\"vtkMRMLSequenceNode\")\nmergedSequenceNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLSequenceNode\", \"Merged sequence\")\n\n# Merge all sequence nodes into a new sequence node\nmergedIndexValue = 0\nfor sequenceNode in sequenceNodes:\n  for itemIndex in range(sequenceNode.GetNumberOfDataNodes()):\n    dataNode = sequenceNode.GetNthDataNode(itemIndex)\n    mergedSequenceNode.SetDataNodeAtValue(dataNode, str(mergedIndexValue))\n    mergedIndexValue += 1\n  # Delete the sequence node we copied the data from, to prevent sharing of the same\n  # node by multiple sequences\n  slicer.mrmlScene.RemoveNode(sequenceNode)\n\n# Create a sequence browser node for the new merged sequence\nmergedSequenceBrowserNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLSequenceBrowserNode\", \"Merged\")\nmergedSequenceBrowserNode.AddSynchronizedSequenceNode(mergedSequenceNode)\nslicer.modules.sequences.toolBar().setActiveBrowserNode(mergedSequenceBrowserNode)\n# Show proxy node in slice viewers\nmergedProxyNode = mergedSequenceBrowserNode.GetProxyNode(mergedSequenceNode)\nslicer.util.setSliceViewerLayers(background=mergedProxyNode)\n```\n\n----------------------------------------\n\nTITLE: Export Volume to DICOM Format in Python\nDESCRIPTION: Exports a volume to DICOM file format. It creates a patient and study in the subject hierarchy, sets the volume's parent to the study, and uses the DICOMScalarVolumePlugin to export the volume to the specified output folder. It also sets the DICOM PatientID and StudyID tags.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/dicom.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nvolumeNode = getNode(\"CTChest\")\noutputFolder = \"c:/tmp/dicom-output\"\n\n# Create patient and study and put the volume under the study\nshNode = slicer.vtkMRMLSubjectHierarchyNode.GetSubjectHierarchyNode(slicer.mrmlScene)\n# set IDs. Note: these IDs are not specifying DICOM tags, but only the names that appear in the hierarchy tree\npatientItemID = shNode.CreateSubjectItem(shNode.GetSceneItemID(), \"test patient\")\nstudyItemID = shNode.CreateStudyItem(patientItemID, \"test study\")\nvolumeShItemID = shNode.GetItemByDataNode(volumeNode)\nshNode.SetItemParent(volumeShItemID, studyItemID)\n\nimport DICOMScalarVolumePlugin\nexporter = DICOMScalarVolumePlugin.DICOMScalarVolumePluginClass()\nexportables = exporter.examineForExport(volumeShItemID)\nfor exp in exportables:\n  # set output folder\n  exp.directory = outputFolder\n  # here we set DICOM PatientID and StudyID tags\n  exp.setTag('PatientID', \"test patient\")\n  exp.setTag('StudyID', \"test study\")\n\nexporter.export(exportables)\n```\n\n----------------------------------------\n\nTITLE: Python Scripts: Releasing Ownership of Factory Method Results\nDESCRIPTION: This Python code snippet illustrates the need to call `UnRegister` when using factory methods. It explains that Python adds an additional reference to the VTK object returned by the factory method. Therefore, the `UnRegister` call removes this extra reference, ensuring that the object is properly deleted when the Python variable is deleted.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/advanced_topics.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nnodes = slicer.mrmlScene.GetNodesByClass('vtkMRMLLinearTransformNode')\nnodes.UnRegister(slicer.mrmlScene) # reference count is increased by both the factory method and the python reference; unregister to keep only the python reference\n# ...\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for the Module\nDESCRIPTION: Defines lists of source files (.cxx, .h), meta-object compiler (MOC) generated files (.h), and UI files (.ui) for the module. These lists are used by the SlicerMacroBuildModuleWidgets macro to compile and link the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Plots/Widgets/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  qMRMLPlotSeriesPropertiesWidget_p.h\n  qMRMLPlotSeriesPropertiesWidget.h\n  qMRMLPlotSeriesPropertiesWidget.cxx\n  qMRMLPlotChartPropertiesWidget_p.h\n  qMRMLPlotChartPropertiesWidget.h\n  qMRMLPlotChartPropertiesWidget.cxx\n  )\n\nset(${KIT}_MOC_SRCS\n  qMRMLPlotSeriesPropertiesWidget.h\n  qMRMLPlotChartPropertiesWidget.h\n  qMRMLPlotChartPropertiesWidget_p.h\n qMRMLPlotSeriesPropertiesWidget_p.h\n  )\n\nset(${KIT}_UI_SRCS\n  Resources/UI/qMRMLPlotSeriesPropertiesWidget.ui\n  Resources/UI/qMRMLPlotChartPropertiesWidget.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Center Views on a Segment\nDESCRIPTION: This snippet demonstrates how to center all slice views and 3D views on a specified segment. It retrieves the segment's center (centroid of the largest island), and centers the slice views and cameras on this position. It assumes a segmentation node named 'Segmentation' and a segment with ID 'Segment_2' exist.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nsegmentationNode = getNode(\"Segmentation\")\nsegmentId = \"Segment_2\"\n\nposition = segmentationNode.GetSegmentCenterRAS(segmentId)\nprint(position)\n\n# Center slice views and cameras on this position\nfor sliceNode in slicer.util.getNodesByClass('vtkMRMLSliceNode'):\n    sliceNode.JumpSliceByCentering(*position)\nfor camera in slicer.util.getNodesByClass('vtkMRMLCameraNode'):\n    camera.SetFocalPoint(position)\n```\n\n----------------------------------------\n\nTITLE: Passing Markups Point List to CLI in Slicer (Python)\nDESCRIPTION: This example demonstrates how to pass a markups point list (fiducials) to a CLI module. It downloads the MRHead dataset, creates a label volume, adds a fiducial, and then runs the Simple Region Growing Segmentation module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/python_faq.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport SampleData\nsampleDataLogic = SampleData.SampleDataLogic()\nhead = sampleDataLogic.downloadMRHead()\nvolumesLogic = slicer.modules.volumes.logic()\nheadLabel = volumesLogic.CreateLabelVolume(slicer.mrmlScene, head, 'head-label')\n\npointListNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLMarkupsFiducialNode\")\npointListNode.AddControlPoint(vtk.vtkVector3d(1,0,5))\npointListNode.SetName('Seed Point')\n\nparams = {'inputVolume': head.GetID(), 'outputVolume': headLabel.GetID(), 'seed' : pointListNode.GetID(), 'iterations' : 2}\n\ncliNode = slicer.cli.runSync(slicer.modules.simpleregiongrowingsegmentation, None, params)\n```\n\n----------------------------------------\n\nTITLE: Saving scene to single MRB file (Python)\nDESCRIPTION: Saves the current scene into a single .mrb file in a temporary directory. The filename includes a timestamp. Requires `slicer` and `time` modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Generate file name\nimport time\nsceneSaveFilename = slicer.app.temporaryPath + \"/saved-scene-\" + time.strftime(\"%Y%m%d-%H%M%S\") + \".mrb\"\n\n# Save scene\nif slicer.util.saveScene(sceneSaveFilename):\n  logging.info(\"Scene saved to: {0}\".format(sceneSaveFilename))\nelse:\n  logging.error(\"Scene saving failed\")\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Validators with ParameterNodeWrapper (Python)\nDESCRIPTION: This snippet demonstrates using the `parameterNodeWrapper` with built-in validators like `Minimum` and `Choice` to enforce constraints on parameter values. If a parameter value violates the specified constraint, a `ValueError` is raised.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/parameter_nodes/validators.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom typing import Annotated\nfrom slicer.parameterNodeWrapper import parameterNodeWrapper, Minimum, Default\n\n@parameterNodeWrapper\nclass CustomParameterNode:\n  numIterations: Annotated[int, Minimum(0)] = 500\n\n  # To have a list where the values in the list need to be validated\n  chosenFeatures: list[Annotated[str, Choice([\"feat1\", \"feat2\", \"feat3\"])]]\n```\n\n----------------------------------------\n\nTITLE: Save series of images from slice view (Python)\nDESCRIPTION: Captures a series of images from a specified slice view as the slice is swept through a range of positions.  It iterates through a given number of steps, sets the slice offset for each step, forces a render, and saves the resulting image to a file. The layout is specified by `layoutName` (e.g., \"Green\"), the image path by `imagePathPattern` (e.g., \"/tmp/image-%03d.png\"), and the number of steps by `steps` (e.g. 10).\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/screencapture.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nlayoutName = \"Green\"\nimagePathPattern = \"/tmp/image-%03d.png\"\nsteps = 10\n\nwidget = slicer.app.layoutManager().sliceWidget(layoutName)\nview = widget.sliceView()\nlogic = widget.sliceLogic()\nbounds = [0,]*6\nlogic.GetSliceBounds(bounds)\n\nfor step in range(steps):\n  offset = bounds[4] + step/(1.*steps) * (bounds[5]-bounds[4])\n  logic.SetSliceOffset(offset)\n  view.forceRender()\n  image = qt.QPixmap.grabWidget(view).toImage()\n  image.save(imagePathPattern % step)\n```\n\n----------------------------------------\n\nTITLE: Adding a Texture Mapped Plane to Scene in Slicer (Python)\nDESCRIPTION: This code snippet demonstrates how to create a plane, apply a texture to it using VTK, and add it as a model in the 3D Slicer scene. It creates a `vtkPlaneSource`, defines its origin and corner points, adds a texture from a `vtkImageEllipsoidSource`, and sets the color to yellow. Note that model textures are not exposed in the GUI and are not saved in the scene.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/models.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Create model node\nplaneSource = vtk.vtkPlaneSource()\nplaneSource.SetOrigin(-50.0, -50.0, 0.0)\nplaneSource.SetPoint1(50.0, -50.0, 0.0)\nplaneSource.SetPoint2(-50.0, 50.0, 0.0)\nmodel = slicer.modules.models.logic().AddModel(planeSource.GetOutputPort())\n\n# Tune display properties\nmodelDisplay = model.GetDisplayNode()\nmodelDisplay.SetColor(1,1,0) # yellow\nmodelDisplay.SetBackfaceCulling(0)\n\n# Add texture (just use image of an ellipsoid)\ne = vtk.vtkImageEllipsoidSource()\nmodelDisplay.SetTextureImageDataConnection(e.GetOutputPort())\n```\n\n----------------------------------------\n\nTITLE: Creating a Non-Interactive Plot with Matplotlib in Python\nDESCRIPTION: This code shows how to create a non-interactive plot using Matplotlib within 3D Slicer. It first checks if Matplotlib is installed and installs it if not.  It then sets the Matplotlib backend to 'Agg' to avoid Tk backend conflicts, generates a plot using pylab functions, and saves it as a PNG image. Finally, it displays the saved image in a static image view using Qt.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/plots.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntry:\n  import matplotlib\nexcept ModuleNotFoundError:\n  slicer.util.pip_install(\"matplotlib\")\n  import matplotlib\n\nmatplotlib.use(\"Agg\")\nfrom pylab import *\n\nt1 = arange(0.0, 5.0, 0.1)\nt2 = arange(0.0, 5.0, 0.02)\nt3 = arange(0.0, 2.0, 0.01)\n\nsubplot(211)\nplot(t1, cos(2*pi*t1)*exp(-t1), \"bo\", t2, cos(2*pi*t2)*exp(-t2), \"k\")\ngrid(True)\ntitle(\"A tale of 2 subplots\")\nylabel(\"Damped\")\n\nsubplot(212)\nplot(t3, cos(2*pi*t3), \"r--\")\ngrid(True)\nxlabel(\"time (s)\")\nylabel(\"Undamped\")\nsavefig(\"MatplotlibExample.png\")\n\n# Static image view\npm = qt.QPixmap(\"MatplotlibExample.png\")\nimageWidget = qt.QLabel()\nimageWidget.setPixmap(pm)\nimageWidget.setScaledContents(True)\nimageWidget.show()\n```\n\n----------------------------------------\n\nTITLE: Configuring CropVolumeSelfTest module in CMake\nDESCRIPTION: This snippet configures the building and testing of the `CropVolumeSelfTest` module. It leverages the `slicerMacroBuildScriptedModule` macro to build the module using `CropVolumeSelfTest.py` and uses `slicer_add_python_unittest` to create a Python unit test associated with `CropVolumeSelfTest.py`. The configuration is conditional, requiring both `Slicer_USE_QtTesting` and `Slicer_USE_PYTHONQT` to be true.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/CropVolume/Testing/Python/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(Slicer_USE_QtTesting AND Slicer_USE_PYTHONQT)\n  slicerMacroBuildScriptedModule(\n    NAME CropVolumeSelfTest\n    SCRIPTS CropVolumeSelfTest.py\n    )\n  slicer_add_python_unittest(SCRIPT CropVolumeSelfTest.py)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Downloading Volume - Slicer - Python\nDESCRIPTION: Downloads a volume from a remote server using a URL via `SampleData.SampleDataLogic().downloadFromURL`. The function downloads the specified file, verifies its checksum, and loads it into the scene. It returns a list containing the loaded node.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport SampleData\nsampleDataLogic = SampleData.SampleDataLogic()\nloadedNodes = sampleDataLogic.downloadFromURL(\n  nodeNames=\"MRHead\",\n  fileNames=\"MR-head25.nrrd\",\n  uris=\"https://github.com/Slicer/SlicerTestingData/releases/download/SHA256/cc211f0dfd9a05ca3841ce1141b292898b2dd2d3f08286affadf823a7e58df93\",\n  checksums=\"SHA256:cc211f0dfd9a05ca3841ce1141b292898b2dd2d3f08286affadf823a7e58df93\")[0]\n```\n\n----------------------------------------\n\nTITLE: Saving scene to new directory (Python)\nDESCRIPTION: Saves the current scene into a new directory. A timestamp is included in the directory name. Requires `slicer`, `time` and `os` modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Create a new directory where the scene will be saved into\nimport time\nsceneSaveDirectory = slicer.app.temporaryPath + \"/saved-scene-\" + time.strftime(\"%Y%m%d-%H%M%S\")\nif not os.access(sceneSaveDirectory, os.F_OK):\n  os.makedirs(sceneSaveDirectory)\n\n# Save the scene\nif slicer.app.applicationLogic().SaveSceneToSlicerDataBundleDirectory(sceneSaveDirectory, None):\n  logging.info(\"Scene saved to: {0}\".format(sceneSaveDirectory))\nelse:\n  logging.error(\"Scene saving failed\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Transform Matrix (NumPy)\nDESCRIPTION: This snippet creates a 4x4 transformation matrix using NumPy. It initializes the matrix with specific values representing translation and rotation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/transforms.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\ntransformNode = ...\ntransformMatrixNP = np.array(\n  [[0.92979,-0.26946,-0.25075,52.64097],\n  [0.03835, 0.74845, -0.66209, -46.12696],\n  [0.36608, 0.60599, 0.70623, -0.48185],\n  [0, 0, 0, 1]])\n\n# Update matrix in transform node\ntransformNode.SetAndObserveMatrixTransformToParent(slicer.util.vtkMatrixFromArray(transformMatrixNP))\n```\n\n----------------------------------------\n\nTITLE: Write Markups ROI to JSON - Python\nDESCRIPTION: This code snippet demonstrates how to write the data of a markup ROI to a JSON file. It retrieves the ROI node, gets its center and size, and saves them in a JSON format using the `json` module. Requires the `json` module.  The output is a dictionary containing the center and size of the ROI.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nroiNode = getNode(\"R\")\noutputFileName = \"c:/tmp/test.json\"\n\n# Get ROI data\ncenter = [0,0,0]\nsize = [0,0,0]\nroiNode.GetCenterWorld(center)\nroiNode.GetSizeWorld(size)\ndata = {\"center\": center, \"size\": size}\n\n# Write to json file\nimport json\nwith open(outputFileName, \"w\") as outfile:\n  json.dump(data, outfile)\n```\n\n----------------------------------------\n\nTITLE: Setting Export Directive - CMake\nDESCRIPTION: Defines the export directive for the module, which controls the visibility of symbols when building shared libraries. It sets the export directive macro based on the module name.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Widgets/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_EXPORT_DIRECTIVE \"Q_SLICER_MODULE_${MODULE_NAME_UPPER}_WIDGETS_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Remote Slicer control via curl\nDESCRIPTION: This example demonstrates how to use `curl` to execute Python code remotely on the Slicer instance through the `/slicer/exec` endpoint.  The code downloads sample data, changes the layout, and returns a dictionary containing the volume node ID by setting `__execResult`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/modules/webserver.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST localhost:2016/slicer/exec --data \"import SampleData; volumeNode = SampleData.SampleDataLogic().downloadMRHead(); slicer.app.layoutManager().setLayout(slicer.vtkMRMLLayoutNode.SlicerLayoutOneUpRedSliceView); __execResult = {'volumeNodeID': volumeNode.GetID()}\"\n```\n\n----------------------------------------\n\nTITLE: Finding Slicer Package and Including Use File\nDESCRIPTION: This CMake snippet uses `find_package` to locate the Slicer package, ensuring that the necessary Slicer libraries and headers are available.  `include(${Slicer_USE_FILE})` includes the Slicer's use file, which sets up important variables and functions required for building Slicer extensions.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/ScriptedSegmentEditorEffectExtensionTemplate/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Slicer REQUIRED)\ninclude(${Slicer_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Defining No-Warning Tests Macro\nDESCRIPTION: Defines a macro `nowarning_test` to create tests that check for warnings during Slicer execution. The tests use various command-line options and verify that no specific warning messages are displayed. This helps ensure the application runs cleanly under different configurations.\nSOURCE: https://github.com/slicer/slicer/blob/main/Applications/SlicerApp/Testing/Python/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nmacro(nowarning_test test_name)\n  add_test(\n    NAME py_nowarning_${test_name}Test\n    COMMAND ${Slicer_LAUNCH_COMMAND} $<TARGET_FILE:${APP_TARGET_NAME}>\n    ${ARGN} --testing --python-code \"exit(slicer.util.EXIT_SUCCESS)\"\n    )\n  set(fail_regexp)\n  list(APPEND fail_regexp \"Failed to obtain reference to\")\n  list(APPEND fail_regexp \"Exception AttributeError: .* instance has no attribute\")\n  set_tests_properties(py_nowarning_${test_name}Test PROPERTIES FAIL_REGULAR_EXPRESSION \"${fail_regexp}\")\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Building CLI with SEMMacroBuildCLI - CMake\nDESCRIPTION: Uses the SEMMacroBuildCLI macro to configure the build process for the module. This macro simplifies the creation of command-line interfaces (CLIs) by automating common build steps. It specifies the module name, logo header, target libraries (MRMLCore, vtkSlicerMarkupsModuleMRML), and include directories required for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ExecutionModelTour/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/BillsLogo.h\n  TARGET_LIBRARIES\n    # ${VTK_LIBRARIES} # Not needed: All dependencies are transitively satisfied by other targets\n    MRMLCore\n    vtkSlicerMarkupsModuleMRML\n  INCLUDE_DIRECTORIES\n    ${MRMLCore_INCLUDE_DIRS}\n    ${vtkSlicerMarkupsModuleMRML_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Loading files into Slicer using slicerio\nDESCRIPTION: This code snippet demonstrates how to load files into a Slicer instance using the `slicerio.server.file_load` function. It utilizes the `slicerio` Python package to interact with the Slicer REST API. The function can load both image and segmentation files into the same Slicer instance, and if Slicer is not running, it will start a new instance.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/modules/webserver.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport slicerio.server\nslicerio.server.file_load(\"c:/tmp/MRHead.nrrd\")\nslicerio.server.file_load(\"c:/tmp/Segmentation.nrrd\", \"SegmentationFile\")\n```\n\n----------------------------------------\n\nTITLE: Maximum intensity projection - Python\nDESCRIPTION: Configures the 'red' slice viewer to display a maximum intensity projection (MIP) of the volume.  A large number of slices is used to cover the entire volume and super-sampling is applied to reduce interpolation artifacts.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_41\n\nLANGUAGE: Python\nCODE:\n```\nsliceNode = slicer.mrmlScene.GetNodeByID(\"vtkMRMLSliceNodeRed\")\nappLogic = slicer.app.applicationLogic()\nsliceLogic = appLogic.GetSliceLogic(sliceNode)\nsliceLayerLogic = sliceLogic.GetBackgroundLayer()\nreslice = sliceLayerLogic.GetReslice()\nreslice.SetSlabModeToMax()\nreslice.SetSlabNumberOfSlices(600) # use a large number of slices (600) to cover the entire volume\nreslice.SetSlabSliceSpacingFraction(0.5) # spacing between slices are 0.5 pixel (supersampling is useful to reduce interpolation artifacts)\nsliceNode.Modified()\n```\n\n----------------------------------------\n\nTITLE: ExternalData Object Stores Configuration CMake\nDESCRIPTION: Configures the location of the ExternalData object stores. It sets a default location and allows overriding it using an environment variable. The `ExternalData_OBJECT_STORES` variable is then set, and a message is printed to the console. The `Slicer_ExternalData_DATA_MANAGEMENT_TARGET` is also set.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_50\n\nLANGUAGE: cmake\nCODE:\n```\nset(ExternalData_OBJECT_STORES_DEFAULT \"${Slicer_BINARY_DIR}/ExternalData/Objects\")\nif(DEFINED \"ENV{ExternalData_OBJECT_STORES}\")\n  set(ExternalData_OBJECT_STORES_DEFAULT $ENV{ExternalData_OBJECT_STORES})\nendif()\nif(NOT DEFINED ExternalData_OBJECT_STORES)\n  set(ExternalData_OBJECT_STORES \"${ExternalData_OBJECT_STORES_DEFAULT}\")\nendif()\nmessage(STATUS \"Setting ExternalData_OBJECT_STORES to '${ExternalData_OBJECT_STORES}'\")\n\nset(Slicer_ExternalData_DATA_MANAGEMENT_TARGET ${PROJECT_NAME}Data)\n```\n\n----------------------------------------\n\nTITLE: Handling Request Endpoints with WebServer in Python\nDESCRIPTION: This snippet shows how to create a custom web server to handle specific request endpoints.  It defines a custom `ExampleRequestHandler` that inherits from `WebServerLib.BaseRequestHandler`. This handler checks if the URI starts with `/example` and responds with \"pong\" if the path is `/example/ping`, otherwise returns an \"Unhandled\" message. The server is initialized on port 2042 with logging enabled and Slicer/DICOM/StaticPages features disabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/webserver.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport urllib\nimport WebServer\nimport WebServerLib\n\nclass ExampleRequestHandler(WebServerLib.BaseRequestHandler):\n\n    def __init__(self, logMessage = None):\n        \"\"\"\n        Initialize a new Example request handler instance.\n        :param logMessage: An optional external handle for message logging.\n        \"\"\"\n        self.logMessage = logMessage\n\n    def canHandleRequest(self, uri: bytes, **_kwargs) -> float:\n        \"\"\"\n        Whether the given request is a Example request.\n        :param uri: The request URI to parse.\n        :return: 0.5 confidence if the request is an Example request, else 0.0\n        \"\"\"\n        parsedURL = urllib.parse.urlparse(uri)\n        return 0.5 if parsedURL.path.startswith(b\"/example\") else 0.0\n\n    def handleRequest(self, method: str, uri: bytes, requestBody: bytes, **_kwargs) -> tuple[bytes, bytes]:\n        \"\"\"\n        Dispatches various example requests.\n        :param method: The HTTP request method. 'GET', 'POST', etc.\n        :param uri: The request URI to parse.\n        :param requestBody: the binary that came with the request\n        :return: tuple of content type (based on file ext) and request body binary (contents of file)\n        \"\"\"\n        parsedURL = urllib.parse.urlparse(uri)\n        contentType = b\"text/plain\"\n        responseBody = None\n        splitPath = parsedURL.path.split(b\"/\")\n        if len(splitPath) > 2 and splitPath[2] == b\"ping\":\n            self.logMessage(\"handling collections\")\n            responseBody = b\"pong\"\n        else:\n            self.logMessage(\"Unhandled Example request path: %s\" % parsedURL.path)\n            responseBody = b\"Unhandled Example request path\"\n\n        return contentType, responseBody\n\n# create a server with a custom handler class - here it does nothing, but it\n# can access and use anything from the Slicer python environment\nPORT = 2042\nimport WebServer\nlogMessage = WebServer.WebServerLogic.defaultLogMessage\nrequestHandlers = [ExampleRequestHandler()]\nlogic = WebServer.WebServerLogic(port=PORT, logMessage=logMessage, enableSlicer=False, enableStaticPages=False, enableDICOM=False, requestHandlers=requestHandlers)\n\nlogic.start()\nprint(f\"Open 'http://localhost:{logic.port}/example/ping'\")\n# stop later with logic.stop()\n```\n\n----------------------------------------\n\nTITLE: Creating a New MRML Data Node\nDESCRIPTION: This snippet demonstrates how to declare the CreateNodeInstance() override and the static New() method for a custom MRML data node.  The implementations are generated by using the macro vtkMRMLNodeNewMacro in the cxx file. It uses VTK's factory function pattern for object creation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/mrml_overview.md#_snippet_13\n\nLANGUAGE: C++\nCODE:\n```\nvtkMRMLNode* CreateNodeInstance() override\n```\n\n----------------------------------------\n\nTITLE: Setting Qt Property Value in Slicer using Python\nDESCRIPTION: This code demonstrates how to access and modify a Qt property in Slicer using Python.  It creates a `qSlicerMarkupsPlaceWidget` instance and then changes the `deleteAllControlPointsOptionVisible` property from True to False and verifies this change.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/api.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> w = slicer.qSlicerMarkupsPlaceWidget()\n>>> w.deleteAllControlPointsOptionVisible\nTrue\n>>> w.deleteAllControlPointsOptionVisible=False\n>>> w.deleteAllControlPointsOptionVisible\nFalse\n```\n\n----------------------------------------\n\nTITLE: Set Default Segmentation Storage to Uncompressed - Python\nDESCRIPTION: This snippet sets the default segmentation storage to not use compression. It creates a 'vtkMRMLSegmentationStorageNode', disables compression, and adds it as a default node to the scene.  This will affect all new segmentation nodes created in the session.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# Set the default segmentation storage to not compress by default\ndefaultSegmentationStorageNode = slicer.vtkMRMLSegmentationStorageNode()\ndefaultSegmentationStorageNode.SetUseCompression(0)\nslicer.mrmlScene.AddDefaultNode(defaultSegmentationStorageNode)\nlogging.info(\"Segmentation nodes will be stored uncompressed by default\")\n```\n\n----------------------------------------\n\nTITLE: Set Transform Matrix From Numpy Array (Python)\nDESCRIPTION: This Python code snippet demonstrates setting a transformation matrix, using a numpy array.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/transforms.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Fit Slice Plane to Markups Control Points - Python\nDESCRIPTION: This code snippet demonstrates how to fit a slice plane to markup control points. It retrieves the slice node and point list node, calculates the plane's normal and transverse directions using the positions of three control points, and sets the slice plane's orientation and position accordingly. Requires the `numpy` module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nsliceNode = slicer.mrmlScene.GetNodeByID(\"vtkMRMLSliceNodeRed\")\npointListNode = slicer.mrmlScene.GetFirstNodeByName(\"F\")\n# Get markup point positions as numpy arrays\nimport numpy as np\np1 = np.zeros(3)\np2 = np.zeros(3)\np3 = np.zeros(3)\npointListNode.GetNthControlPointPosition(0, p1)\npointListNode.GetNthControlPointPosition(1, p2)\npointListNode.GetNthControlPointPosition(2, p3)\n# Get plane axis directions\nn = np.cross(p2-p1, p2-p3) # plane normal direction\nn = n/np.linalg.norm(n)\nt = np.cross([0.0, 0.0, 1], n) # plane transverse direction\nt = t/np.linalg.norm(t)\n# Set slice plane orientation and position\nsliceNode.SetSliceToRASByNTP(n[0], n[1], n[2], t[0], t[1], t[2], p1[0], p1[1], p1[2], 0)\n```\n\n----------------------------------------\n\nTITLE: Transform Modification Notification in Slicer (Python)\nDESCRIPTION: This Python code snippet demonstrates how to register an observer that gets notified whenever a transform node is modified in Slicer. It extracts the position from the transform matrix and prints it to the console.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/transforms.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef onTransformNodeModified(transformNode, unusedArg2=None, unusedArg3=None):\n   transformMatrix = vtk.vtkMatrix4x4()\n   transformNode.GetMatrixTransformToWorld(transformMatrix)\n   print(\"Position: [{0}, {1}, {2}]\".format(transformMatrix.GetElement(0,3), transformMatrix.GetElement(1,3), transformMatrix.GetElement(2,3)))\n\ntransformNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLTransformNode\")\ntransformNode.AddObserver(slicer.vtkMRMLTransformNode.TransformModifiedEvent, onTransformNodeModified)\n```\n\n----------------------------------------\n\nTITLE: Visualize Displacement Magnitude as Color Volume\nDESCRIPTION: This snippet visualizes the displacement magnitude of a transform as a color volume. It takes a transform node and a reference volume node as input.  The `True` parameter indicates that a color volume should be created.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/transforms.md#_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\ntransformNode=slicer.util.getNode('LinearTransform_3')\nreferenceVolumeNode=slicer.util.getNode('MRHead')\nslicer.modules.transforms.logic().CreateDisplacementVolumeFromTransform(transformNode, referenceVolumeNode, True)\n```\n\n----------------------------------------\n\nTITLE: Process Segment Using VTK Filter (Python)\nDESCRIPTION: This snippet demonstrates how to apply a VTK filter to a segment. It exports the segment as a vtkImageData object using a temporary labelmap volume node, applies the vtkImageDilateErode3D filter for dilation, and then imports the processed image data back into the segmentation. Finally, it cleans up the temporary nodes.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nsegmentationNode = getNode(\"Segmentation\")\nsegmentId = \"Segment_1\"\nkernelSize = [3,1,5]\n\n# Export segment as vtkImageData (via temporary labelmap volume node)\nsegmentIds = vtk.vtkStringArray()\nsegmentIds.InsertNextValue(segmentId)\nlabelmapVolumeNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLLabelMapVolumeNode\")\nslicer.modules.segmentations.logic().ExportSegmentsToLabelmapNode(segmentationNode, segmentIds, labelmapVolumeNode)\n\n# Process segmentation\nsegmentImageData = labelmapVolumeNode.GetImageData()\nerodeDilate = vtk.vtkImageDilateErode3D()\nerodeDilate.SetInputData(segmentImageData)\nerodeDilate.SetDilateValue(1)\nerodeDilate.SetErodeValue(0)\nerodeDilate.SetKernelSize(*kernelSize)\nerodeDilate.Update()\nsegmentImageData.DeepCopy(erodeDilate.GetOutput())\n\n# Import segment from vtkImageData\nslicer.modules.segmentations.logic().ImportLabelmapToSegmentationNode(labelmapVolumeNode, segmentationNode, segmentIds)\n\n# Cleanup temporary nodes\nslicer.mrmlScene.RemoveNode(labelmapVolumeNode.GetDisplayNode().GetColorNode())\nslicer.mrmlScene.RemoveNode(labelmapVolumeNode)\n```\n\n----------------------------------------\n\nTITLE: Loading Volume Stack - Slicer - Python\nDESCRIPTION: Loads a volume stack from a directory by specifying the first file and disabling the `singleFile` option. This allows the loader to find and load all similar files in the same folder as a single 3D volume. The function returns the loaded volume node.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nloadedVolumeNode = slicer.util.loadVolume(\"c:/Users/abc/Documents/SomeImage/file001.png\", {\"singleFile\": False})\n```\n\n----------------------------------------\n\nTITLE: Get Path and Filename of Scalar Volume Node in Python\nDESCRIPTION: Retrieves the path and filename of a scalar volume node loaded from DICOM data.  It checks if the volume was loaded via drag-and-drop (storage node exists) or via the DICOM browser (storage node doesn't exist), and gets the path accordingly.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/dicom.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef pathFromNode(node):\n  storageNode = node.GetStorageNode()\n  if storageNode is not None: # loaded via drag-drop\n    filepath = storageNode.GetFullNameFromFileName()\n  else: # Loaded via DICOM browser\n    instanceUIDs = node.GetAttribute(\"DICOM.instanceUIDs\").split()\n    filepath = slicer.dicomDatabase.fileForInstance(instUids[0])\n  return filepath\n\n# Example:\nnode = slicer.util.getNode(\"volume1\")\npath = self.pathFromNode(node)\nprint(\"DICOM path=%s\" % path)\n```\n\n----------------------------------------\n\nTITLE: Building Loadable Module with slicerMacroBuildLoadableModule\nDESCRIPTION: Calls the `slicerMacroBuildLoadableModule` macro to build the module. This macro encapsulates the common steps for building a Slicer loadable module, using the previously defined variables. The WITH_GENERIC_TESTS option includes a standard testing setup.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroBuildLoadableModule(\n  NAME ${MODULE_NAME}\n  EXPORT_DIRECTIVE ${MODULE_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${MODULE_INCLUDE_DIRECTORIES}\n  SRCS ${MODULE_SRCS}\n  MOC_SRCS ${MODULE_MOC_SRCS}\n  UI_SRCS ${MODULE_UI_SRCS}\n  TARGET_LIBRARIES ${MODULE_TARGET_LIBRARIES}\n  RESOURCES ${MODULE_RESOURCES}\n  WITH_GENERIC_TESTS\n  )\n```\n\n----------------------------------------\n\nTITLE: Find ITK Package and Components - CMake\nDESCRIPTION: Finds the ITK (Insight Toolkit) package, specifying required components such as ITKIOImageBase, ITKImageFunction, ITKImageGrid, ITKImageIntensity, and ITKThresholding.  It includes the ITK use file to make the ITK library available for linking.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MaskScalarVolume/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKIOImageBase\n  ITKImageFunction\n  ITKImageGrid\n  ITKImageIntensity\n  ITKThresholding\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Get Scalar Values at Model Surface in Slicer (Python)\nDESCRIPTION: This script retrieves scalar values at a selected position on a model's surface. It uses mouse movements while holding down the Shift key to update the position. It utilizes `vtkPointLocator` to find the closest point on the model's surface to the cursor position and updates the position of the markups fiducial 'F'. The value is printed to the console. Requires a model node named \"sphere\".\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/models.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmodelNode = getNode(\"sphere\")\nmodelPointValues = modelNode.GetPolyData().GetPointData().GetArray(\"Normals\")\npointListNode = slicer.mrmlScene.GetFirstNodeByName(\"F\")\n\nif not pointListNode:\n  pointListNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLMarkupsFiducialNode\",\"F\")\n\npointsLocator = vtk.vtkPointLocator() # could try using vtk.vtkStaticPointLocator() if need to optimize\npointsLocator.SetDataSet(modelNode.GetPolyData())\npointsLocator.BuildLocator()\n\ndef onMouseMoved(observer,eventid):\n  ras=[0,0,0]\n  crosshairNode.GetCursorPositionRAS(ras)\n  closestPointId = pointsLocator.FindClosestPoint(ras)\n  ras = modelNode.GetPolyData().GetPoint(closestPointId)\n  closestPointValue = modelPointValues.GetTuple(closestPointId)\n  if pointListNode.GetNumberOfControlPoints() == 0:\n    pointListNode.AddControlPoint(ras)\n  else:\n    pointListNode.SetNthControlPointPosition(0,*ras)\n  print(f\"RAS={ras}  value={closestPointValue}\")\n\ncrosshairNode=slicer.util.getNode(\"Crosshair\")\nobservationId = crosshairNode.AddObserver(slicer.vtkMRMLCrosshairNode.CursorPositionModifiedEvent, onMouseMoved)\n\n# To stop printing of values run this:\n# crosshairNode.RemoveObserver(observationId)\n```\n\n----------------------------------------\n\nTITLE: Get Subject Hierarchy Item - Python\nDESCRIPTION: This snippet shows how to retrieve subject hierarchy items using different methods, including getting by scene item ID, child name, data node, UID, and UID list.  It also demonstrates how to obtain an invalid item ID for validity checks.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/subjecthierarchy.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# Get scene item ID first because it is the root item:\nsceneItemID = shNode.GetSceneItemID()\n# Get direct child by name\nsubjectItemID = shNode.GetItemChildWithName(sceneItemID, \"Subject_1\")\n# Get item for data node\nitemID = shNode.GetItemByDataNode(dataNode)\n# Get item by UID (such as DICOM)\nitemID = shNode.GetItemByUID(slicer.vtkMRMLSubjectHierarchyConstants.GetDICOMUIDName(), seriesInstanceUid)\nitemID = shNode.GetItemByUIDList(slicer.vtkMRMLSubjectHierarchyConstants.GetDICOMInstanceUIDName(), instanceUID)\n# Invalid item ID for checking validity of a given ID (most functions return the invalid ID when item is not found)\ninvalidItemID = slicer.vtkMRMLSubjectHierarchyNode.GetInvalidItemID()\n```\n\n----------------------------------------\n\nTITLE: Saving Volume to File - Slicer - Python\nDESCRIPTION: Saves the first volume node found in the scene to a specified file path using `slicer.util.exportNode`. The output file format is determined by the file extension provided in the path.  The function saves the volume node.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nvolumeNode = slicer.mrmlScene.GetFirstNodeByClass('vtkMRMLScalarVolumeNode')\nslicer.util.exportNode(volumeNode, \"c:/tmp/test.nrrd\")\n```\n\n----------------------------------------\n\nTITLE: Set and Observe MRML Scene Events\nDESCRIPTION: The `SetAndObserveMRMLScene()` and `SetAndObserveMRMLSceneEvents()` methods are used in GUI and Logic objects to observe Modified, NewScene, NodeAdded, etc. events. This allows GUI and logic components to synchronize with changes in the overall MRML scene.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/mrml_overview.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Setting UI Source Files\nDESCRIPTION: Defines the MODULE_UI_SRCS variable containing the list of Qt Designer UI files (.ui) that define the user interface layouts for the Volumes module. These files are used to generate the C++ code for the UI.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_UI_SRCS\n  Resources/UI/qSlicer${MODULE_NAME}IOOptionsWidget.ui\n  Resources/UI/qSlicer${MODULE_NAME}ModuleWidget.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating Volume from ROI - Python\nDESCRIPTION: This Python function creates a new volume based on the extents, axis directions, and voxel size specified by a markups ROI node. It allows setting a fill value for the voxels. The function depends on `math` and requires a valid ROI node as input. Requires `vtk`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\ndef createVolumeFromRoi(exportRoi, spacingMm, fillValue=0, numberOfComponents=1):\n    import math\n    roiDiameter = exportRoi.GetSize()\n    roiOrigin_Roi = [-roiDiameter[0]/2, -roiDiameter[1]/2, -roiDiameter[2]/2, 1]\n    roiToRas = exportRoi.GetObjectToWorldMatrix()\n    exportVolumeSize = [int(math.ceil(diameterComponent/spacingMm)) for diameterComponent in roiDiameter]\n    # Create image data\n    exportImageData = vtk.vtkImageData()\n    exportImageData.SetExtent(0, exportVolumeSize[0]-1, 0, exportVolumeSize[1]-1, 0, exportVolumeSize[2]-1)\n    exportImageData.AllocateScalars(vtk.VTK_DOUBLE, numberOfComponents)\n    exportImageData.GetPointData().GetScalars().Fill(fillValue)\n    # Create volume node\n    exportVolume = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLScalarVolumeNode\" if numberOfComponents==1 else \"vtkMRMLVectorVolumeNode\")\n    exportVolume.SetAndObserveImageData(exportImageData)\n    exportVolume.SetIJKToRASDirections(roiToRas.GetElement(0,0), roiToRas.GetElement(0,1), roiToRas.GetElement(0,2), roiToRas.GetElement(1,0), roiToRas.GetElement(1,1), roiToRas.GetElement(1,2), roiToRas.GetElement(2,0), roiToRas.GetElement(2,1), roiToRas.GetElement(2,2))\n    exportVolume.SetSpacing(spacingMm, spacingMm, spacingMm)\n    roiOrigin_Ras = roiToRas.MultiplyPoint(roiOrigin_Roi)\n    exportVolume.SetOrigin(roiOrigin_Ras[0:3])\n    return exportVolume\n\n# Create volume node from ROI node \"R\"\nroiNode = getNode('R')\nvolumeNode = createVolumeFromRoi(roiNode, 0.5, 120)\n# Show in slice views and set its window/level\nslicer.util.setSliceViewerLayers(background=volumeNode)\nvolumeNode.GetScalarVolumeDisplayNode().AutoWindowLevelOff()\nvolumeNode.GetScalarVolumeDisplayNode().SetWindowLevel(110,130)\n```\n\n----------------------------------------\n\nTITLE: Build Module Logic using Slicer Macro\nDESCRIPTION: Uses the `SlicerMacroBuildModuleLogic` macro to build the module logic component. This macro encapsulates the common steps for building a Slicer module logic, including setting up compiler flags, linking libraries, and generating build targets.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/CropVolume/Logic/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleLogic(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Jump to Mean Position in Slice Viewers (Python)\nDESCRIPTION: This snippet calculates the mean position (mean_Ras) and then uses the slicer.modules.markups.logic().JumpSlicesToLocation function to center all slice viewers at that calculated point. The fourth parameter 'True' ensures that the jump occurs immediately.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nprint(mean_Ras)\nslicer.modules.markups.logic().JumpSlicesToLocation(mean_Ras[0], mean_Ras[1], mean_Ras[2], True)\n```\n\n----------------------------------------\n\nTITLE: Customize 3D View Crosshair Movement (Python)\nDESCRIPTION: This snippet customizes how the crosshair is moved within a 3D view.  It sets the crosshair position by left-click and enables movement via Alt+left-click-and-drag. Requires the `slicer` and `vtk` modules to be available in the Python environment.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_65\n\nLANGUAGE: python\nCODE:\n```\n# 3D view\nthreeDViewWidget = slicer.app.layoutManager().threeDWidget(0)\ncameraDisplayableManager = threeDViewWidget.threeDView().displayableManagerByClassName(\"vtkMRMLCameraDisplayableManager\")\nwidget = cameraDisplayableManager.GetCameraWidget()\n\n# Set crosshair position by left-click\nwidget.SetEventTranslation(widget.WidgetStateIdle, slicer.vtkMRMLInteractionEventData.LeftButtonClickEvent, vtk.vtkEvent.NoModifier, widget.WidgetEventSetCrosshairPosition)\n\n# Move crosshair by Alt+left-click-and-drag\nwidget.SetEventTranslationClickAndDrag(widget.WidgetStateIdle, vtk.vtkCommand.LeftButtonPressEvent, vtk.vtkEvent.AltModifier,\n  widget.WidgetStateMoveCrosshair, widget.WidgetEventMoveCrosshairStart, widget.WidgetEventMoveCrosshairEnd)\n```\n\n----------------------------------------\n\nTITLE: Enable CMake Folders CMake\nDESCRIPTION: Sets the `USE_FOLDERS` global property based on the value of `Slicer_USE_FOLDERS`. This enables or disables the use of folders in the IDE for organizing the project.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_55\n\nLANGUAGE: cmake\nCODE:\n```\nset_property(GLOBAL PROPERTY USE_FOLDERS ${Slicer_USE_FOLDERS})\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Parameter Packs in Python\nDESCRIPTION: This code demonstrates how to define and use `@parameterPack` classes with the `@parameterNodeWrapper` decorator. It defines a `Point` and `BoundingBox` parameter pack, then uses the `BoundingBox` pack in a custom parameter node. This shows how to group related information in structures and use them in parameter nodes.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/parameter_nodes/supported_types.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom slicer.parameterNodeWrapper import *\n\n\n@parameterPack\nclass Point:\n    x: float\n    y: float\n\n\n@parameterPack\nclass BoundingBox:\n    # can nest parameterPacks\n    topLeft: Point\n    bottomRight: Point\n\n\n@parameterNodeWrapper\nclass ParameterNodeType:\n    # Can add them to a @parameterNodeWrapper like any other type.\n    # Will be stored in the underlying parameter node as\n    #  - box.topLeft.x (default value is 0)\n    #  - box.topLeft.y (default value is 1)\n    #  - box.bottomRight.x (default value is 1)\n    #  - box.bottomRight.y (default value is 0)\n    box: BoundingBox = BoundingBox(Point(0, 1), Point(1, 0))\n\n\nparameterNode = slicer.mrmlScene.AddNewNodeByClass('vtkMRMLScriptedModuleNode')\nparam = ParameterNodeType(parameterNode)\n\n# can set wholesale\nparam.box.topLeft = Point(-4, 5)\n\n# or can set piecewise\nparam.box.bottomRight.x = 4\nparam.box.bottomRight.y = -5\n```\n\n----------------------------------------\n\nTITLE: Apply Transform to Transformable Node (C++)\nDESCRIPTION: This C++ code snippet shows how to apply a transform to a transformable node in Slicer. It creates a transform node, sets the transformation matrix to the transform node, and then sets the transformable node to observe the transform node.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/transforms.md#_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nvtkNew<vtkMRMLTransformNode> transformNode;\nscene->AddNode(transformNode.GetPointer());\n...\nvtkNew<vtkMatrix4x4> matrix;\n...\ntransform->SetMatrixTransformToParent( matrix.GetPointer() );\n...\nvtkMRMLVolumeNode* transformableNode = ...; // or vtkMRMLModelNode*...\ntransformableNode->SetAndObserveTransformNodeID( transformNode->GetID() );\n```\n\n----------------------------------------\n\nTITLE: Set Module Source Files in CMake\nDESCRIPTION: Specifies the source files that make up the module. These files contain the implementation of the module's functionality, including module class, widget class, and reader class. These files are the core of the module's implementation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Sequences/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_SRCS\n  qSlicer${MODULE_NAME}Module.cxx\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.cxx\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  qSlicer${MODULE_NAME}Reader.cxx\n  qSlicer${MODULE_NAME}Reader.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Get Mouse Coordinates in Slice View - Python\nDESCRIPTION: This code snippet shows how to get the current mouse coordinates (RAS) in a slice view using the crosshair node. It defines a function that retrieves the cursor position from the crosshair node and prints it. The function is registered as an observer to the 'CursorPositionModifiedEvent' of the crosshair node.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\ndef onMouseMoved(observer,eventid):\n  ras=[0,0,0]\n  crosshairNode.GetCursorPositionRAS(ras)\n  print(ras)\n\ncrosshairNode=slicer.util.getNode(\"Crosshair\")\ncrosshairNode.AddObserver(slicer.vtkMRMLCrosshairNode.CursorPositionModifiedEvent, onMouseMoved)\n```\n\n----------------------------------------\n\nTITLE: Taking Ownership of Factory Method Results in C++\nDESCRIPTION: This C++ code snippet demonstrates how to use a smart pointer to take ownership of a raw pointer returned by a factory method (`GetNodesByClass`). This is essential to prevent memory leaks, as the caller is responsible for releasing the object returned by the factory method.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/advanced_topics.md#_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n// GetNodesByClass is a factory method, therefore a smart pointer is used to take the ownership of the returned object\nvtkSmartPointer<vtkCollection> nodes = vtkSmartPointer<vtkCollection>::Take(scene->GetNodesByClass(\"vtkMRMLModelNode\"));\n```\n\n----------------------------------------\n\nTITLE: Get reformatted image from slice viewer - Python\nDESCRIPTION: Retrieves a reformatted image from a slice viewer and converts it to a NumPy array. Requires `vtk` and Slicer modules. It sets up the `red` slice viewer to show a thick slab reconstructed from 3 slices, creates a new volume node using the resliced image, and fetches the voxels as a NumPy array.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_36\n\nLANGUAGE: Python\nCODE:\n```\nsliceNodeID = \"vtkMRMLSliceNodeRed\"\n\n# Get image data from slice view\nsliceNode = slicer.mrmlScene.GetNodeByID(sliceNodeID)\nappLogic = slicer.app.applicationLogic()\nsliceLogic = appLogic.GetSliceLogic(sliceNode)\nsliceLayerLogic = sliceLogic.GetBackgroundLayer()\nreslice = sliceLayerLogic.GetReslice()\nreslicedImage = vtk.vtkImageData()\nreslicedImage.DeepCopy(reslice.GetOutput())\n\n# Create new volume node using resliced image\nvolumeNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLScalarVolumeNode\")\nvolumeNode.SetIJKToRASMatrix(sliceNode.GetXYToRAS())\nvolumeNode.SetAndObserveImageData(reslicedImage)\nvolumeNode.CreateDefaultDisplayNodes()\nvolumeNode.CreateDefaultStorageNode()\n\n# Get voxels as a numpy array\nvoxels = slicer.util.arrayFromVolume(volumeNode)\nprint(voxels.shape)\n```\n\n----------------------------------------\n\nTITLE: Including Teem Include Directories\nDESCRIPTION: Includes the include directories for the Teem library. This ensures that the Teem headers are available during compilation, which is often a necessary prerequisite for modules interacting with volume data. This is done before the other include directories.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/MRML/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(BEFORE ${vtkTeem_INCLUDE_DIRS})\n```\n\n----------------------------------------\n\nTITLE: Building Loadable Module using CMake Macro\nDESCRIPTION: This uses the custom `slicerMacroBuildLoadableModule` macro to build the module. It passes the module name, export directive, include directories, source files, MOC sources, UI sources, target libraries, and resources as arguments.  The `WITH_GENERIC_TESTS` option indicates that generic tests should be included.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroBuildLoadableModule(\n  NAME ${MODULE_NAME}\n  EXPORT_DIRECTIVE ${MODULE_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${MODULE_INCLUDE_DIRECTORIES}\n  SRCS ${MODULE_SRCS}\n  MOC_SRCS ${MODULE_MOC_SRCS}\n  UI_SRCS ${MODULE_UI_SRCS}\n  TARGET_LIBRARIES ${MODULE_TARGET_LIBRARIES}\n  RESOURCES ${MODULE_RESOURCES}\n  WITH_GENERIC_TESTS\n  )\n```\n\n----------------------------------------\n\nTITLE: Building CLI Module using SEMMacroBuildCLI\nDESCRIPTION: This snippet uses the SEMMacroBuildCLI macro to define and build the CLI module. It sets the name of the module, the logo header file, the target libraries (ITK), and the include directories. The macro automates the process of creating the necessary build targets and configurations for a Slicer CLI module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MultiplyScalarVolumes/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/ITKLogo.h\n  TARGET_LIBRARIES ${ITK_LIBRARIES}\n  INCLUDE_DIRECTORIES\n    ${vtkITK_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Connecting QProgressBar Signal to Python Function - Slicer\nDESCRIPTION: This code snippet demonstrates how to connect the `valueChanged` signal of a `QProgressBar` Qt widget to a Python function in Slicer. It defines a function `printMyNewValue` that prints the new value of the progress bar. It then creates a `QProgressBar`, sets its maximum value, connects the `valueChanged` signal to the function, and sets the progress bar's value, triggering the signal and the function call.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/python_faq.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\ndef printMyNewValue(value):\n  print(\"The progress bar value is now: {}\".format(value))\n\nimport qt\nprogress_bar = qt.QProgressBar()\nprogress_bar.setMaximum(10)\nprogress_bar.valueChanged.connect(printMyNewValue)\nprogress_bar.setValue(4)  # will then print \"The progress bar value is now: 4\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Build Options (CMake)\nDESCRIPTION: This snippet shows how to define options that depend on other options. `Slicer_BUILD_QTSCRIPTEDMODULES` depends on `Slicer_USE_PYTHONQT`, and `Slicer_BUILD_CLI` depends on `Slicer_BUILD_CLI_SUPPORT`.  `CMAKE_DEPENDENT_OPTION` is used for this purpose.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\noption(Slicer_USE_PYTHONQT \"Integrate a Python-Qt interpreter into Slicer.\" ON)\nmark_as_superbuild(Slicer_USE_PYTHONQT)\n\nCMAKE_DEPENDENT_OPTION(\n  Slicer_BUILD_QTSCRIPTEDMODULES \"Build Slicer Python Qt Modules\" ON\n  \"Slicer_USE_PYTHONQT\" OFF)\nmark_as_advanced(Slicer_BUILD_QTSCRIPTEDMODULES)\nmark_as_superbuild(Slicer_BUILD_QTSCRIPTEDMODULES)\n\noption(Slicer_BUILD_CLI_SUPPORT \"Build Slicer with CLI support\" ON)\nmark_as_superbuild(Slicer_BUILD_CLI_SUPPORT)\nCMAKE_DEPENDENT_OPTION(\n  Slicer_BUILD_CLI \"Build Slicer CLI Plugins\" ON\n  \"Slicer_BUILD_CLI_SUPPORT\" OFF\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring DICOMweb servers for OHIF Viewer\nDESCRIPTION: This code snippet shows the configuration needed in the OHIF Viewer's `default.js` file to connect to the DICOMweb endpoints exposed by the Slicer WebServer module.  It specifies the server name, wadoUriRoot, qidoRoot, wadoRoot, and other settings for DICOM communication.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/modules/webserver.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n  servers: {\n    dicomWeb: [\n      {\n        name: 'DCM4CHEE',\n        wadoUriRoot: 'http://localhost:2016/dicom',\n        qidoRoot: 'http://localhost:2016/dicom',\n        wadoRoot: 'http://localhost:2016/dicom',\n        qidoSupportsIncludeField: true,\n        imageRendering: 'wadouri',\n        thumbnailRendering: 'wadouri',\n        enableStudyLazyLoad: true,\n        supportsFuzzyMatching: true,\n      },\n    ],\n  }\n```\n\n----------------------------------------\n\nTITLE: Apply Transform to Transformable Node (Python)\nDESCRIPTION: This Python code snippet shows how to apply a transform to a transformable node in Slicer. It sets the transformation matrix to the transform node and then sets the transformable node to observe the transform node.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/transforms.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntransformToParentMatrix = vtk.vtkMatrix4x4()\n...\ntransformNode.SetMatrixTransformToParent(matrix)\ntransformableNode.SetAndObserveTransformNodeID(transformNode.GetID())\n```\n\n----------------------------------------\n\nTITLE: Override application close behavior (Python)\nDESCRIPTION: This snippet demonstrates how to override the default application close behavior by installing an event filter. This can be used to allow the application to close without displaying the default confirmation popup. Requires the `slicer` and `qt` modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass CloseApplicationEventFilter(qt.QWidget):\n  def eventFilter(self, object, event):\n    if event.type() == qt.QEvent.Close:\n      event.accept()\n      return True\n    return False\n\nfilter = CloseApplicationEventFilter()\nslicer.util.mainWindow().installEventFilter(filter)\n```\n\n----------------------------------------\n\nTITLE: Accessing Slice Logic in Slicer (Python)\nDESCRIPTION: This code snippet demonstrates how to access a slice logic object in Slicer using Python.  It retrieves the slice logic associated with a specific layout name ('Red'). This provides access to MRML nodes and operations related to the slice.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/mrml_overview.md#_snippet_33\n\nLANGUAGE: Python\nCODE:\n```\nsliceLogic = slicer.app.applicationLogic().GetSliceLogicByLayoutName('Red')\n```\n\n----------------------------------------\n\nTITLE: Build CLI with SEMMacroBuildCLI\nDESCRIPTION: This snippet uses the SEMMacroBuildCLI macro to build the command-line interface (CLI) for the module. It specifies the module name, logo header file, and target libraries (ITK_LIBRARIES).\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CurvatureAnisotropicDiffusion/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/ITKLogo.h\n  TARGET_LIBRARIES ${ITK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Volume Rendering Presets in MRML\nDESCRIPTION: This XML snippet defines two custom volume rendering presets (MyPreset1 and MyPreset2) within an MRML scene file. Each preset includes VolumeProperty, VectorVolume, and VolumeArchetypeStorage nodes. The VolumeProperty nodes define rendering parameters like interpolation, shading, and color/opacity transfer functions. VectorVolume and VolumeArchetypeStorage nodes are used for storing the volume data and associated thumbnails. The file names for the thumbnails are MyPreset1.png and MyPreset2.png and are assumed to be located in the same directory as the MRML file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_48\n\nLANGUAGE: xml\nCODE:\n```\n<MRML version=\"Slicer4.4.0\">\n  <VolumeProperty id=\"vtkMRMLVolumeProperty1\" name=\"MyPreset1\"     references=\"IconVolume:vtkMRMLVectorVolumeNode1;\" interpolation=\"1\" shade=\"1\" diffuse=\"0.66\" ambient=\"0.1\" specular=\"0.62\" specularPower=\"14\" scalarOpacity=\"10 -3.52844023704529 0 56.7852325439453 0 79.2550277709961 0.428571432828903 415.119384765625 1 641 1\" gradientOpacity=\"4 0 1 160.25 1\" colorTransfer=\"16 0 0 0 0 98.7223 0.196078431372549 0.945098039215686 0.956862745098039 412.406 0 0.592157 0.807843 641 1 1 1\" />\n  <VectorVolume id=\"vtkMRMLVectorVolumeNode1\" references=\"storage:vtkMRMLVolumeArchetypeStorageNode1;\" />\n  <VolumeArchetypeStorage id=\"vtkMRMLVolumeArchetypeStorageNode1\" fileName=\"MyPreset1.png\"  fileListMember0=\"MyPreset1.png\" />\n\n  <VolumeProperty id=\"vtkMRMLVolumeProperty2\" name=\"MyPreset2\"     references=\"IconVolume:vtkMRMLVectorVolumeNode2;\" interpolation=\"1\" shade=\"1\" diffuse=\"0.66\" ambient=\"0.1\" specular=\"0.62\" specularPower=\"14\" scalarOpacity=\"10 -3.52844023704529 0 56.7852325439453 0 79.2550277709961 0.428571432828903 415.119384765625 1 641 1\" gradientOpacity=\"4 0 1 160.25 1\" colorTransfer=\"16 0 0 0 0 98.7223 0.196078431372549 0.945098039215686 0.956862745098039 412.406 0 0.592157 0.807843 641 1 1 1\" />\n  <VectorVolume id=\"vtkMRMLVectorVolumeNode2\" references=\"storage:vtkMRMLVolumeArchetypeStorageNode2;\" />\n  <VolumeArchetypeStorage id=\"vtkMRMLVolumeArchetypeStorageNode2\" fileName=\"MyPreset2.png\"  fileListMember0=\"MyPreset2.png\" />\n</MRML>\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Predefined Line Markups in Slicer (Python)\nDESCRIPTION: This script creates a set of predefined line markups (A, B, C, D) when the user presses Ctrl+N in Slicer. It iterates through a list of names, creates a line node for each, sets the display node to use a crosshair glyph, and disables the length measurement display during markup. A keyboard shortcut is then created to trigger this function.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\ndef createMeasurements():\n  for nodeName in ['A', 'B', 'C', 'D']:\n    lineNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLMarkupsLineNode\", nodeName)\n    lineNode.CreateDefaultDisplayNodes()\n    dn = lineNode.GetDisplayNode()\n    # Use crosshair glyph to allow more accurate point placement\n    dn.SetGlyphTypeFromString(\"CrossDot2D\")\n    # Hide measurement result while markup up\n    lineNode.GetMeasurement('length').SetEnabled(False)\n\nshortcut1 = qt.QShortcut(slicer.util.mainWindow())\nshortcut1.setKey(qt.QKeySequence(\"Ctrl+n\"))\nshortcut1.connect( 'activated()', createMeasurements)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries - CMake\nDESCRIPTION: Sets the target libraries for the module, including other Slicer modules (Logic and MRML), MRML libraries, ITK libraries, and the specified VTK libraries. It relies on variables like MRML_LIBRARIES, ITK_LIBRARIES, and vtkSlicer${MODULE_NAME}ModuleLogic to be defined earlier.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/MRMLDM/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  vtkSlicer${MODULE_NAME}ModuleMRML\n  ${MRML_LIBRARIES}\n  ${ITK_LIBRARIES}\n  ${${KIT}_VTK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Accessing Scalar Bar Actor in Slicer (Python)\nDESCRIPTION: This Python snippet demonstrates how to access the scalar bar VTK actor in a Red slice view within 3D Slicer. It retrieves the color legend display node, slice view, displayable manager, and finally the color legend actor. It then shows how to adjust the actor's `BarRatio` parameter and forces a render of the slice view to reflect the change.  This is useful for debugging and experimenting with new features related to color legends.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/modules/colors.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndisplayableNode = getNode('Model')\ncolorLegendDisplayNode = slicer.modules.colors.logic().GetColorLegendDisplayNode(displayableNode)\nsliceView = slicer.app.layoutManager().sliceWidget('Red').sliceView()\ndisplayableManager = sliceView.displayableManagerByClassName(\"vtkMRMLColorLegendDisplayableManager\")\ncolorLegendActor = displayableManager.GetColorLegendActor(colorLegendDisplayNode)\n\n# Experimental adjustment of a parameter that is not exposed via the colorLegendDisplayNode\ncolorLegendActor.SetBarRatio(0.2)\nsliceView.forceRender()\n```\n\n----------------------------------------\n\nTITLE: Segment Statistics Plugin Base Class (Python)\nDESCRIPTION: This snippet refers to the base class for creating custom statistics plugins in Python. Developers can subclass `SegmentStatisticsPluginBase.py` and register their plugin with `SegmentStatisticsLogic`. This allows extending the module with custom statistical measurements. The base class provides the necessary framework for implementing and integrating custom calculations.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/modules/segmentstatistics.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n[SegmentStatisticsPluginBase.py](https://github.com/Slicer/Slicer/blob/main/Modules/Scripted/SegmentStatistics/SegmentStatisticsPlugins/SegmentStatisticsPluginBase.py)\n```\n\n----------------------------------------\n\nTITLE: Hide Slice View Controllers - Python\nDESCRIPTION: This snippet hides all slice view controllers within the Slicer application. It iterates through all slice view names and sets the visibility of their corresponding slice controllers to False, effectively hiding the controls from the user.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_68\n\nLANGUAGE: python\nCODE:\n```\nlm = slicer.app.layoutManager()\nfor sliceViewName in lm.sliceViewNames():\n  lm.sliceWidget(sliceViewName).sliceController().setVisible(False)\n```\n\n----------------------------------------\n\nTITLE: Setting Module Target Libraries in CMake\nDESCRIPTION: This defines the target libraries that the module depends on. It includes VTK and Qt libraries related to the module's logic, MRML interaction, display management, widgets, and subject hierarchy plugins.  These libraries provide the necessary functionalities for the module to operate.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleVTKWidgets\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  vtkSlicer${MODULE_NAME}ModuleMRML\n  vtkSlicer${MODULE_NAME}ModuleMRMLDisplayableManager\n  qSlicer${MODULE_NAME}ModuleWidgets\n  qSlicer${MODULE_NAME}SubjectHierarchyPlugins\n  )\n```\n\n----------------------------------------\n\nTITLE: Display Mouse Coordinates in Alternative Coordinate System (MNI)\nDESCRIPTION: This code snippet demonstrates how to display mouse pointer coordinates in an alternative coordinate system, specifically MNI space. It retrieves the current RAS (Right-Anterior-Superior) coordinates of the mouse pointer using the crosshair node, transforms them to MNI coordinates using a specified linear transform, and displays both RAS and MNI coordinates in the Slicer status message. Requires a 'LinearTransform_3' node (or equivalent transform node) representing the MNI to world transform and a 'Crosshair' node.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\ndef onMouseMoved(observer,eventid):\n  mniToWorldTransformNode = getNode(\"LinearTransform_3\")  # replace this by the name of your actual MNI to world transform\n  worldToMniTransform = vtk.vtkGeneralTransform()\n  mniToWorldTransformNode.GetTransformToWorld(worldToMniTransform)\n  ras=[0,0,0]\n  mni=[0,0,0]\n  crosshairNode.GetCursorPositionRAS(ras)\n  worldToMniTransform.TransformPoint(ras, mni)\n  _ras = \"; \".join([str(k) for k in ras])\n  _mni = \"; \".join([str(k) for k in mni])\n  slicer.util.showStatusMessage(f\"RAS={_ras}   MNI={_mni}\")\n\ncrosshairNode=slicer.util.getNode(\"Crosshair\")\nobservationId = crosshairNode.AddObserver(slicer.vtkMRMLCrosshairNode.CursorPositionModifiedEvent, onMouseMoved)\n\n# Run this to stop displaying values:\n# crosshairNode.RemoveObserver(observationId)\n```\n\n----------------------------------------\n\nTITLE: Listen to Subject Hierarchy Item Events - Python\nDESCRIPTION: This snippet demonstrates how to listen to subject hierarchy item events.  It defines a class that inherits from `VTKObservationMixin` and adds an observer to the subject hierarchy node. The `shItemModifiedEvent` method is called when a subject hierarchy item is modified, and it prints the item ID. Note that the calldata type must be specified as vtk.VTK_LONG.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/subjecthierarchy.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nclass MyListenerClass(VTKObservationMixin):\n  def __init__(self):\n    VTKObservationMixin.__init__(self)\n\n    shNode = slicer.vtkMRMLSubjectHierarchyNode.GetSubjectHierarchyNode(slicer.mrmlScene)\n    self.addObserver(shNode, shNode.SubjectHierarchyItemModifiedEvent, self.shItemModifiedEvent)\n\n  @vtk.calldata_type(vtk.VTK_LONG)\n  def shItemModifiedEvent(self, caller, eventId, callData):\n    print(\"SH Node modified\")\n    print(\"SH item ID: {0}\".format(callData))\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet sets the include directories for the module. These directories contain the header files that are needed to compile the module. It includes the source and binary directories of the MRML module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/VTKWidgets/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSlicer${MODULE_NAME}ModuleMRML_SOURCE_DIR}\n  ${vtkSlicer${MODULE_NAME}ModuleMRML_BINARY_DIR}\n  )\n```\n\n----------------------------------------\n\nTITLE: Capture slice view with white background (Python)\nDESCRIPTION: Captures a specific slice view with a white background and saves it to a PNG file. It first sets the background color of the specified slice view (e.g., \"Red\") to white and then uses the `ScreenCapture` module to capture the image to `c:/tmp/screenshot.png`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/screencapture.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsliceViewName = \"Red\"\nfilename = \"c:/tmp/screenshot.png\"\n\n# Set view background to white\nview = slicer.app.layoutManager().sliceWidget(sliceViewName).sliceView()\nview.setBackgroundColor(qt.QColor.fromRgbF(1,1,1))\nview.forceRender()\n\n# Capture a screenshot\nimport ScreenCapture\ncap = ScreenCapture.ScreenCaptureLogic()\ncap.captureImageFromView(view, filename)\n```\n\n----------------------------------------\n\nTITLE: Adding UTF-8 Executable with Target Linking\nDESCRIPTION: This snippet adds an executable target with UTF-8 support using `ctk_add_executable_utf8`. It links the executable against the module's libraries (`${KIT}`). Then sets the folder property for the target within the IDE. The `vtkSlicer${MODULE_NAME}LogicTest2.cxx` is used as a source file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/Testing/Cxx/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nctk_add_executable_utf8(vtkSlicer${MODULE_NAME}LogicTest2 vtkSlicer${MODULE_NAME}LogicTest2.cxx)\ntarget_link_libraries(vtkSlicer${MODULE_NAME}LogicTest2 ${KIT})\nset_target_properties(vtkSlicer${MODULE_NAME}LogicTest2 PROPERTIES FOLDER \"Module-${MODULE_NAME}\")\n```\n\n----------------------------------------\n\nTITLE: Display volume using volume rendering - Python\nDESCRIPTION: Creates and sets up a volume rendering display node for a volume node. Requires the volume rendering module.  Updates the display node to reflect the volume node's properties.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_42\n\nLANGUAGE: Python\nCODE:\n```\nlogic = slicer.modules.volumerendering.logic()\nvolumeNode = slicer.mrmlScene.GetNodeByID('vtkMRMLScalarVolumeNode1')\ndisplayNode = logic.CreateVolumeRenderingDisplayNode()\ndisplayNode.UnRegister(logic)\nslicer.mrmlScene.AddNode(displayNode)\nvolumeNode.AddAndObserveDisplayNodeID(displayNode.GetID())\nlogic.UpdateDisplayNodeFromVolumeNode(displayNode, volumeNode)\n```\n\n----------------------------------------\n\nTITLE: Adjust Window/Level with Mouse Gesture (Python)\nDESCRIPTION: This snippet adds a shortcut (Ctrl + Right-click-and-drag) to adjust the window/level in the red slice view, even when the mouse is not in \"Adjust window/level\" mode. Requires the `slicer` and `vtk` modules to be available in the Python environment.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_66\n\nLANGUAGE: python\nCODE:\n```\nsliceViewLabel = \"Red\"\nsliceViewWidget = slicer.app.layoutManager().sliceWidget(sliceViewLabel)\ndisplayableManager = sliceViewWidget.sliceView().displayableManagerByClassName(\"vtkMRMLScalarBarDisplayableManager\")\nw = displayableManager.GetWindowLevelWidget()\nw.SetEventTranslationClickAndDrag(w.WidgetStateIdle,\n  vtk.vtkCommand.RightButtonPressEvent, vtk.vtkEvent.ControlModifier,\n  w.WidgetStateAdjustWindowLevel, w.WidgetEventAlwaysOnAdjustWindowLevelStart, w.WidgetEventAlwaysOnAdjustWindowLevelEnd)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories in CMake\nDESCRIPTION: Sets the MODULE_INCLUDE_DIRECTORIES variable, listing the directories where the compiler should search for header files. Includes source and binary directories for various subcomponents (MRML, Logic, Widgets, and SubjectHierarchyPlugins) along with include directories for other Slicer modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_INCLUDE_DIRECTORIES\n  ${CMAKE_CURRENT_SOURCE_DIR}/MRML\n  ${CMAKE_CURRENT_BINARY_DIR}/MRML\n  ${CMAKE_CURRENT_SOURCE_DIR}/Logic\n  ${CMAKE_CURRENT_BINARY_DIR}/Logic\n  ${CMAKE_CURRENT_SOURCE_DIR}/Widgets\n  ${CMAKE_CURRENT_BINARY_DIR}/Widgets\n  ${CMAKE_CURRENT_SOURCE_DIR}/SubjectHierarchyPlugins\n  ${CMAKE_CURRENT_BINARY_DIR}/SubjectHierarchyPlugins\n  ${qSlicerSubjectHierarchyModuleWidgets_INCLUDE_DIRS}\n  ${qSlicerMarkupsModuleWidgets_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Authenticate DICOMweb Import with Username/Password in Python\nDESCRIPTION: Imports DICOM data using DICOMweb, authenticating with a username and password. This uses the requests.HTTPBasicAuth method for authentication. This approach provides more control over how the authentication is handled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/dicom.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nDICOMUtils.importFromDICOMWeb(\n  dicomWebEndpoint=\"https://demo.kheops.online/api\",\n  studyInstanceUID=\"1.3.6.1.4.1.14519.5.2.1.8421.4009.985792766370191766692237040819\",\n  auth=requests.HTTPBasicAuth('<user>','<password>'))\n```\n\n----------------------------------------\n\nTITLE: Building CLI Module\nDESCRIPTION: Uses the SEMMacroBuildCLI macro to build the Command Line Interface (CLI) module.  It configures the module name, logo header, target libraries, and include directories. It depends on ITK, VTK, and MRMLCore libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ModelToLabelMap/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/NAMICLogo.h\n  TARGET_LIBRARIES ${ITK_LIBRARIES} ${VTK_LIBRARIES} MRMLCore\n  INCLUDE_DIRECTORIES ${MRMLCore_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Building CLI Module using SEMMacroBuildCLI - CMake\nDESCRIPTION: Uses the SEMMacroBuildCLI macro to build the CLI module. It specifies the module name, target libraries, include directories, and additional source files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/CLIExtensionTemplate/CLIModuleTemplate/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  TARGET_LIBRARIES ${MODULE_TARGET_LIBRARIES}\n  INCLUDE_DIRECTORIES ${MODULE_INCLUDE_DIRECTORIES}\n  ADDITIONAL_SRCS ${MODULE_SRCS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Qt Library using Slicer Macro\nDESCRIPTION: Uses the `SlicerMacroBuildModuleQtLibrary` CMake macro to build the Qt library for the subject hierarchy plugin module. It passes in various parameters like the name, export directive, folder, include directories, source files, target libraries, and resources.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nSlicerMacroBuildModuleQtLibrary(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  FOLDER \"Module-${MODULE_NAME}\"\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  UI_SRCS ${${KIT}_UI_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  RESOURCES ${${KIT}_RESOURCES}\n  WRAP_PYTHONQT\n  )\n```\n\n----------------------------------------\n\nTITLE: Saving a volume using curl\nDESCRIPTION: This code snippet demonstrates how to save a volume from Slicer to a local file using `curl`. It utilizes the Slicer REST API endpoint `/slicer/volume` to retrieve the volume data. The example saves the volume with the ID 'MRHead' to the `/tmp/local.nrrd` file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/modules/webserver.md#_snippet_5\n\nLANGUAGE: curl\nCODE:\n```\ncurl -v http://localhost:2016/slicer/volume\\&id='MRHead' -o /tmp/local.nrrd\n```\n\n----------------------------------------\n\nTITLE: Measure Angle Between Two Markup Planes - Python\nDESCRIPTION: This snippet measures the angle between two markup plane nodes. It defines a function `ShowAngle` that calculates the angle between the normals of two plane nodes and prints it to the console. The snippet also sets up observers on the plane nodes to automatically update the angle whenever the planes are moved.  The plane nodes are assumed to be named \"P\" and \"P_1\".\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nplaneNodeNames = [\"P\", \"P_1\"]\n\n# Print angles between slice nodes\ndef ShowAngle(unused1=None, unused2=None):\n  planeNormalVectors = []\n  for planeNodeName in planeNodeNames:\n    planeNode = slicer.util.getFirstNodeByClassByName(\"vtkMRMLMarkupsPlaneNode\", planeNodeName)\n    planeNormalVector = [0.0, 0.0, 0.0]\n    planeNode.GetNormalWorld(planeNormalVector)\n    planeNormalVectors.append(planeNormalVector)\n  angleRad = vtk.vtkMath.AngleBetweenVectors(planeNormalVectors[0], planeNormalVectors[1])\n  angleDeg = vtk.vtkMath.DegreesFromRadians(angleRad)\n  print(\"Angle between planes {0} and {1} = {2:0.3f}\".format(planeNodeNames[0], planeNodeNames[1], angleDeg))\n\n# Observe plane node changes\nfor planeNodeName in planeNodeNames:\n  planeNode = slicer.util.getFirstNodeByClassByName(\"vtkMRMLMarkupsPlaneNode\", planeNodeName)\n  planeNode.AddObserver(slicer.vtkMRMLMarkupsPlaneNode.PointModifiedEvent, ShowAngle)\n\n# Print current angle\nShowAngle()\n```\n\n----------------------------------------\n\nTITLE: Building Scripted Module\nDESCRIPTION: This macro builds the scripted module using the specified name, scripts, and resources. The `slicerMacroBuildScriptedModule` handles the creation of necessary build targets and installation rules for the module. It takes the module name, scripts, and resources as arguments.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/SegmentEditor/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nslicerMacroBuildScriptedModule(\n  NAME ${MODULE_NAME}\n  SCRIPTS ${MODULE_PYTHON_SCRIPTS}\n  RESOURCES ${MODULE_PYTHON_RESOURCES}\n#  WITH_GENERIC_TESTS\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Meta-Information\nDESCRIPTION: This CMake snippet defines various metadata attributes for the Slicer extension.  These attributes include the extension's homepage, contributors, description, icon URL, screenshot URLs, and dependencies. This information is used for displaying extension details within the Slicer application and extension manager.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/ScriptedSegmentEditorEffectExtensionTemplate/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EXTENSION_HOMEPAGE \"https://www.slicer.org/wiki/Documentation/Nightly/Extensions/ScriptedSegmentEditorEffectExtensionTemplate\")\nset(EXTENSION_CONTRIBUTORS \"John Doe (AnyWare Corp.)\")\nset(EXTENSION_DESCRIPTION \"This is an example of a simple extension\")\nset(EXTENSION_ICONURL \"https://www.example.com/Slicer/Extensions/ScriptedSegmentEditorEffectExtensionTemplate.png\")\nset(EXTENSION_SCREENSHOTURLS \"https://www.example.com/Slicer/Extensions/ScriptedSegmentEditorEffectExtensionTemplate/Screenshots/1.png\")\nset(EXTENSION_DEPENDS \"NA\") # Specified as a list or \"NA\" if no dependencies\n```\n\n----------------------------------------\n\nTITLE: Create Custom Color Map and Display Color Legend (Python)\nDESCRIPTION: This snippet creates a custom color map and displays a color legend associated with a model node.  It creates a procedural color node, defines a color transfer function with specific RGB points, and then links the color node to the model's display node.  Finally, it adds a default color legend display node, customizing the title and label format. Requires a model node named 'MyModel'.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nmodelNode = getNode('MyModel')  # color legend requires a displayable node\ncolorTableRangeMm = 40\ntitle =\"Radial\\nCompression\\n\"\nlabelFormat = \"%4.1f mm\"\n\n# Create color node\ncolorNode = slicer.mrmlScene.CreateNodeByClass(\"vtkMRMLProceduralColorNode\")\ncolorNode.UnRegister(None)  # to prevent memory leaks\ncolorNode.SetName(slicer.mrmlScene.GenerateUniqueName(\"MyColormap\"))\ncolorNode.SetAttribute(\"Category\", \"MyModule\")\n# The color node is a procedural color node, which is saved using a storage node.\n# Hidden nodes are not saved if they use a storage node, therefore\n# the color node must be visible.\ncolorNode.SetHideFromEditors(False)\nslicer.mrmlScene.AddNode(colorNode)\n\n# Specify colormap\ncolorMap = colorNode.GetColorTransferFunction()\ncolorMap.RemoveAllPoints()\ncolorMap.AddRGBPoint(colorTableRangeMm * 0.0, 0.0, 0.0, 1.0)\ncolorMap.AddRGBPoint(colorTableRangeMm * 0.2, 0.0, 1.0, 1.0)\ncolorMap.AddRGBPoint(colorTableRangeMm * 0.5, 1.0, 1.0, 0.0)\ncolorMap.AddRGBPoint(colorTableRangeMm * 1.0, 1.0, 0.0, 0.0)\n\n# Display color legend\nmodelNode.GetDisplayNode().SetAndObserveColorNodeID(colorNode.GetID())\ncolorLegendDisplayNode = slicer.modules.colors.logic().AddDefaultColorLegendDisplayNode(modelNode)\ncolorLegendDisplayNode.SetTitleText(title)\ncolorLegendDisplayNode.SetLabelFormat(labelFormat)\n```\n\n----------------------------------------\n\nTITLE: Defining Default Parameter Values in Python\nDESCRIPTION: This code demonstrates how to define default values for parameters within a `parameterNodeWrapper` class using Python.  It shows assigning default values to integer, string, and tuple types. These defaults are used when the parameter node does not already have a value set. Dependencies include `typing.Annotated` and `slicer.parameterNodeWrapper.parameterNodeWrapper`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/parameter_nodes/defaults.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Annotated\nfrom slicer.parameterNodeWrapper import parameterNodeWrapper\n\n\n@parameterNodeWrapper\nclass ParameterNodeWrapper:\n    iterations: int = 50\n    text: str = \"abc\"\n    tup: tuple[int, bool] = (7, True)\n```\n\n----------------------------------------\n\nTITLE: Generating List of Include Directories\nDESCRIPTION: This snippet iterates over the list of directories (`dirs`), retrieves the corresponding include directories from the `${dir_noslash}_INCLUDE_DIRS` variable, and appends them to the `include_dirs` list. Finally, it sets the `Slicer_Libs_INCLUDE_DIRS` variable with the collected include directories.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\n# Generate list of include directories\n#-----------------------------------------------------------------------------\nset(include_dirs)\nforeach(dir ${dirs})\n  string(REPLACE \"/\" \"\" dir_noslash ${dir})\n  if(dir_noslash MATCHES \"Widgets$\")\n    set(dir_noslash \"q${dir_noslash}\")\n  endif()\n  list(APPEND include_dirs ${${dir_noslash}_INCLUDE_DIRS})\nendforeach()\n\n# Set variable Slicer_Libs_INCLUDE_DIRS\nset(Slicer_Libs_INCLUDE_DIRS ${include_dirs} CACHE INTERNAL \"Slicer Libs includes\" FORCE)\n```\n\n----------------------------------------\n\nTITLE: Adding Unit Test\nDESCRIPTION: Registers the unittest subclass in the main script as a ctest. This makes the test available at build time and runtime. It calls the slicer_add_python_unittest macro.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/SegmentStatistics/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nslicer_add_python_unittest(SCRIPT ${MODULE_NAME}.py)\n```\n\n----------------------------------------\n\nTITLE: Load DICOM Files from Folder in Python\nDESCRIPTION: Loads all DICOM objects from a specified folder into the Slicer scene. It leverages registered plugins to determine the best method for loading the data. This approach imports files into a temporary DICOM database, preventing modifications to the main Slicer DICOM database.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/dicom.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndicomDataDir = \"c:/my/folder/with/dicom-files\"  # input folder with DICOM files\nloadedNodeIDs = []  # this list will contain the list of all loaded node IDs\n\nfrom DICOMLib import DICOMUtils\nwith DICOMUtils.TemporaryDICOMDatabase() as db:\n  DICOMUtils.importDicom(dicomDataDir, db)\n  patientUIDs = db.patients()\n  for patientUID in patientUIDs:\n    loadedNodeIDs.extend(DICOMUtils.loadPatientByUID(patientUID))\n```\n\n----------------------------------------\n\nTITLE: Convert All Segments (Default)\nDESCRIPTION: This snippet converts all segments in a segmentation node to a binary labelmap representation using default parameters.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nsegmentationNode.CreateBinaryLabelmapRepresentation()\n```\n\n----------------------------------------\n\nTITLE: Building CLI with SEMMacroBuildCLI CMake\nDESCRIPTION: This snippet uses the `SEMMacroBuildCLI` macro to define the build process for the command-line interface (CLI) module. It specifies the module name, logo header, and target libraries (ITK_LIBRARIES). The macro simplifies the process of building CLI modules within Slicer.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GrayscaleFillHoleImageFilter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/ITKLogo.h\n  TARGET_LIBRARIES ${ITK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Loadable Module\nDESCRIPTION: Uses the slicerMacroBuildLoadableModule macro to build the loadable module. This macro takes the module name, export directive, include directories, source files, target libraries, and resources as input, and configures the build process accordingly. It also specifies to include generic tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/CropVolume/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroBuildLoadableModule(\n  NAME ${MODULE_NAME}\n  EXPORT_DIRECTIVE ${MODULE_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${MODULE_INCLUDE_DIRECTORIES}\n  SRCS ${MODULE_SRCS}\n  MOC_SRCS ${MODULE_MOC_SRCS}\n  UI_SRCS ${MODULE_UI_SRCS}\n  TARGET_LIBRARIES ${MODULE_TARGET_LIBRARIES}\n  RESOURCES ${MODULE_RESOURCES}\n  WITH_GENERIC_TESTS\n  )\n```\n\n----------------------------------------\n\nTITLE: Displaying Slicer User Settings File Path (Python)\nDESCRIPTION: This Python code snippet displays the exact location of the user-specific settings file within the Slicer Python console. This file contains settings applying to all versions of Slicer installed by the current user.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/settings.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nslicer.app.slicerUserSettingsFilePath\n```\n\n----------------------------------------\n\nTITLE: Get Fiducials Info\nDESCRIPTION: Retrieves basic information about all markup point lists (formerly called fiducial lists) in the scene. Returns names, colors, scales, and markup point information.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/modules/webserver.md#_snippet_9\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /fiducials\n```\n\n----------------------------------------\n\nTITLE: Source Files Definition\nDESCRIPTION: Defines the source files (.cxx and .h) that make up the module's logic component.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/Logic/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  vtkSlicer${MODULE_NAME}ModuleLogic.cxx\n  vtkSlicer${MODULE_NAME}ModuleLogic.h\n  vtkSlicerSegmentationGeometryLogic.cxx\n  vtkSlicerSegmentationGeometryLogic.h\n  vtkImageGrowCutSegment.cxx\n  vtkImageGrowCutSegment.h\n  FibHeap.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Qt Plugin Directories CMake\nDESCRIPTION: Defines the installation directories for Qt plugins used by Slicer. It sets the `Slicer_QtPlugins_DIR` variable to specify the relative path and `Slicer_INSTALL_QtPlugins_DIR` for the absolute installation path based on the `Slicer_INSTALL_ROOT`.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_45\n\nLANGUAGE: cmake\nCODE:\n```\nset(Slicer_QtPlugins_DIR \"${CMAKE_INSTALL_LIBDIR}/QtPlugins\")\nset(Slicer_INSTALL_QtPlugins_DIR \"${Slicer_INSTALL_ROOT}${Slicer_QtPlugins_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Layout in Slicer (Python)\nDESCRIPTION: This code snippet creates a custom layout in 3D Slicer by defining a layout string and setting it as the current layout. It calculates the number of rows required based on the number of models and columns, then constructs a layout string with horizontal and vertical arrangements of views. It uses `slicer.app.layoutManager` to apply the custom layout configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/models.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nnumberOfRows = int(math.ceil(len(modelFiles)/numberOfColumns))\ncustomLayoutId=567  # we pick a random id that is not used by others\nslicer.app.setRenderPaused(True)\ncustomLayout = '<layout type=\"vertical\">'\nviewIndex = 0\nfor rowIndex in range(numberOfRows):\n  customLayout += '<item><layout type=\"horizontal\">'\n  for colIndex in range(numberOfColumns):\n    name = os.path.basename(modelFiles[viewIndex]) if viewIndex < len(modelFiles) else \"compare \" + str(viewIndex)\n    customLayout += '<item><view class=\"vtkMRMLViewNode\" singletontag=\"'+name\n    customLayout += '\"><property name=\"viewlabel\" action=\"default\">'+name+'</property></view></item>'\n    viewIndex += 1\n  customLayout += '</layout></item>'\n\ncustomLayout += '</layout>'\nif not slicer.app.layoutManager().layoutLogic().GetLayoutNode().SetLayoutDescription(customLayoutId, customLayout):\n    slicer.app.layoutManager().layoutLogic().GetLayoutNode().AddLayoutDescription(customLayoutId, customLayout)\n\nslicer.app.layoutManager().setLayout(customLayoutId)\n```\n\n----------------------------------------\n\nTITLE: Updating Volume Storage Nodes - Python\nDESCRIPTION: This code snippet updates existing volume storage nodes to use a new file extension while preserving other parameters. It iterates through all 'vtkMRMLScalarVolumeNode' nodes, retrieves their storage node, and replaces the original file extension with the required file extension in the filename. If the volume node doesn't have storage node then it creates a default storage node.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nrequiredFileExtension = \".nia\"\noriginalFileExtension = \".nrrd\"\nvolumeNodes = slicer.util.getNodesByClass(\"vtkMRMLScalarVolumeNode\")\nfor volumeNode in volumeNodes:\n  volumeStorageNode = volumeNode.GetStorageNode()\n  if not volumeStorageNode:\n    volumeNode.AddDefaultStorageNode()\n    volumeStorageNode = volumeNode.GetStorageNode()\n    volumeStorageNode.SetFileName(volumeNode.GetName()+requiredFileExtension)\n  else:\n    volumeStorageNode.SetFileName(volumeStorageNode.GetFileName().replace(originalFileExtension, requiredFileExtension))\n```\n\n----------------------------------------\n\nTITLE: Change opacity of foreground volume in Slicer (Python)\nDESCRIPTION: This code demonstrates how to change the opacity of the foreground volume in slice views, both globally and in a selected view. It shows how to change the foreground opacity of the slice viewer layers and to modify opacity in a specific slice view.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\nslicer.util.setSliceViewerLayers(foregroundOpacity=0.4)\n```\n\nLANGUAGE: Python\nCODE:\n```\nlm = slicer.app.layoutManager()\nsliceLogic = lm.sliceWidget(\"Red\").sliceLogic()\ncompositeNode = sliceLogic.GetSliceCompositeNode()\ncompositeNode.SetForegroundOpacity(0.4)\n```\n\n----------------------------------------\n\nTITLE: Module Logic Build Macro - CMake\nDESCRIPTION: This snippet uses the `SlicerMacroBuildModuleLogic` macro to automate the build process of the module's logic component. It passes the previously defined variables such as name, export directive, include directories, source files and target libraries as arguments to the macro. This macro handles the creation of the build target and linking of the necessary libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/Logic/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleLogic(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Customize View Layout (Python)\nDESCRIPTION: This code snippet demonstrates how to customize the view layout in 3D Slicer by creating a new layout with a 3D view on top of the red slice view. It defines a custom layout XML, adds it to the layout logic, and then switches the current layout to the newly created one. Built-in layout IDs are below 100, therefore customLayoutId is defined to be greater than 100.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_38\n\nLANGUAGE: python\nCODE:\n```\ncustomLayout = \"\"\"\n<layout type=\"vertical\" split=\"true\">\n  <item>\n  <view class=\"vtkMRMLViewNode\" singletontag=\"1\">\n    <property name=\"viewlabel\" action=\"default\">1</property>\n  </view>\n  </item>\n  <item>\n  <view class=\"vtkMRMLSliceNode\" singletontag=\"Red\">\n    <property name=\"orientation\" action=\"default\">Axial</property>\n    <property name=\"viewlabel\" action=\"default\">R</property>\n    <property name=\"viewcolor\" action=\"default\">#F34A33</property>\n  </view>\n  </item>\n</layout>\n\"\"\"\n\n# Built-in layout IDs are all below 100, so you can choose any large random number\n# for your custom layout ID.\ncustomLayoutId=501\n\nlayoutManager = slicer.app.layoutManager()\nlayoutManager.layoutLogic().GetLayoutNode().AddLayoutDescription(customLayoutId, customLayout)\n\n# Switch to the new custom layout\nlayoutManager.setLayout(customLayoutId)\n```\n\n----------------------------------------\n\nTITLE: Show Orientation Marker in All Views - Python\nDESCRIPTION: This code snippet iterates through all view nodes in the scene and sets the orientation marker type to 'Axes'. This will display the orientation axes (X, Y, Z) in each view.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nviewNodes = slicer.util.getNodesByClass(\"vtkMRMLAbstractViewNode\")\nfor viewNode in viewNodes:\n  viewNode.SetOrientationMarkerType(slicer.vtkMRMLAbstractViewNode.OrientationMarkerTypeAxes)\n```\n\n----------------------------------------\n\nTITLE: Building Module Widgets with Custom Macro\nDESCRIPTION: This snippet utilizes a custom CMake macro `SlicerMacroBuildModuleWidgets` to handle the building of module widgets. It passes various defined variables such as source files, include directories, target libraries, and resources to the macro. The `WRAP_PYTHONQT` option suggests PythonQt wrapping is enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Sequences/Widgets/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleWidgets(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  UI_SRCS ${${KIT}_UI_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  RESOURCES ${${KIT}_RESOURCES}\n  WRAP_PYTHONQT\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Loadable Module\nDESCRIPTION: Uses the `slicerMacroBuildLoadableModule` macro to build the loadable module. This macro simplifies the process of building Slicer modules by handling common tasks like MOC processing, UI compilation, and linking. It takes several parameters including sources, headers, and resource files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Cameras/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroBuildLoadableModule(\n  NAME ${MODULE_NAME}\n  EXPORT_DIRECTIVE ${MODULE_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${MODULE_INCLUDE_DIRECTORIES}\n  SRCS ${MODULE_SRCS}\n  MOC_SRCS ${MODULE_MOC_SRCS}\n  UI_SRCS ${MODULE_UI_SRCS}\n  TARGET_LIBRARIES ${MODULE_TARGET_LIBRARIES}\n  RESOURCES ${MODULE_RESOURCES}\n  WITH_GENERIC_TESTS\n  )\n```\n\n----------------------------------------\n\nTITLE: Separating Control Point Positions into Columns (Python)\nDESCRIPTION: This script takes the 'position' column of a Pandas DataFrame (containing x, y, z coordinates) and separates it into individual 'x', 'y', and 'z' columns. It then deletes the original 'position' column.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_35\n\nLANGUAGE: python\nCODE:\n```\ncontrolPointsTable[['x','y','z']] = pd.DataFrame(controlPointsTable['position'].to_list())\ndel controlPointsTable['position']\n```\n\n----------------------------------------\n\nTITLE: Building Module Logic - CMake\nDESCRIPTION: This snippet uses the `SlicerMacroBuildModuleLogic` macro to automate the build process for the module's logic component. The macro takes several parameters, including the module's name, export directive, include directories, source files, and target libraries. This streamlines the build process and ensures consistency across modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Logic/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleLogic(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Limit volume rendering to ROI - Python\nDESCRIPTION: Limits volume rendering to a specified region of interest (ROI). Requires an existing ROI node and volume rendering display node.  The cropping flag must also be enabled for the ROI to take effect.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_45\n\nLANGUAGE: Python\nCODE:\n```\ndisplayNode.SetAndObserveROINodeID(roiNode.GetID())\ndisplayNode.CroppingEnabled = True\n```\n\n----------------------------------------\n\nTITLE: Set Default Segmentation Options (Python)\nDESCRIPTION: This snippet sets the default overwrite mode for segmentations to 'OverwriteNone', which allows segments to overlap. It creates a default segment editor node, sets the overwrite mode, and adds the node to the scene.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\ndefaultSegmentEditorNode = slicer.vtkMRMLSegmentEditorNode()\ndefaultSegmentEditorNode.SetOverwriteMode(slicer.vtkMRMLSegmentEditorNode.OverwriteNone)\nslicer.mrmlScene.AddDefaultNode(defaultSegmentEditorNode)\n```\n\n----------------------------------------\n\nTITLE: Exporting Segmentation to Labelmap - Python\nDESCRIPTION: These snippets demonstrate different ways to export a segmentation to a labelmap volume. They cover exporting with reference geometry matching, exporting the smallest possible labelmap, exporting with a chosen reference volume, and exporting a selection of segments identified by their names.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsegmentationNode = getNode(\"Segmentation\")\nlabelmapVolumeNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLLabelMapVolumeNode\")\nslicer.modules.segmentations.logic().ExportAllSegmentsToLabelmapNode(segmentationNode, labelmapVolumeNode, slicer.vtkSegmentation.EXTENT_REFERENCE_GEOMETRY)\n```\n\nLANGUAGE: python\nCODE:\n```\nsegmentationNode = getNode(\"Segmentation\")\nlabelmapVolumeNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLLabelMapVolumeNode\")\nslicer.modules.segmentations.logic().ExportAllSegmentsToLabelmapNode(segmentationNode, labelmapVolumeNode)\n```\n\nLANGUAGE: python\nCODE:\n```\nsegmentationNode = getNode(\"Segmentation\")\nlabelmapVolumeNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLLabelMapVolumeNode\")\nslicer.modules.segmentations.logic().ExportVisibleSegmentsToLabelmapNode(segmentationNode, labelmapVolumeNode, referenceVolumeNode)\n```\n\nLANGUAGE: python\nCODE:\n```\nsegmentNames = [\"Prostate\", \"Urethra\"]\nsegmentIds = vtk.vtkStringArray()\nfor segmentName in segmentNames:\n  segmentId = segmentationNode.GetSegmentation().GetSegmentIdBySegmentName(segmentName)\n  segmentIds.InsertNextValue(segmentId)\nslicer.vtkSlicerSegmentationsModuleLogic.ExportSegmentsToLabelmapNode(segmentationNode, segmentIds, labelmapVolumeNode, referenceVolumeNode)\n```\n\n----------------------------------------\n\nTITLE: Finding ITK Package with Components\nDESCRIPTION: This snippet finds the ITK (Insight Toolkit) package, specifying required components such as ITKIOImageBase, ITKImageFunction, and ITKImageGrid. The REQUIRED keyword ensures that the build fails if ITK or any specified component is not found. The version is required to be at least 4.6. It then includes the ITK usage file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MultiplyScalarVolumes/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKIOImageBase\n  ITKImageFunction\n  ITKImageGrid\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Include Binary Directory CMake\nDESCRIPTION: Adds the current binary directory to the include path.  This allows the test code to find generated header files or other necessary files created during the build process. CMAKE_CURRENT_BINARY_DIR is a CMake variable that holds the path to the current binary directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/Testing/Cxx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: Restore Scene View Test\nDESCRIPTION: This snippet defines a test case that uses the Slicer launcher to execute Python code. The Python code restores a scene view and processes events within the Slicer application. It verifies the functionality of restoring a scene view from a MRML file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SceneViews/Testing/Python/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input)\n\nset(testname \"py_mainwindow_RestoreSceneViewWithoutCamera\")\nadd_test(\n  NAME ${testname}\n  COMMAND ${Slicer_LAUNCHER_EXECUTABLE}\n  --disable-cli-modules --disable-scripted-loadable-modules\n  --testing --python-code \"slicer.modules.sceneviews.logic().RestoreSceneView(0); slicer.app.processEvents()\"\n  ${INPUT}/SceneViewWithoutCamera.mrml\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${MODULE_NAME})\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries in CMake\nDESCRIPTION: This snippet defines the target libraries that the module's logic component depends on. It includes MRMLCore and vtkSlicerMarkupsModuleMRML, which are essential for the module's functionality.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Texts/Logic/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  MRMLCore\n  vtkSlicerMarkupsModuleMRML\n  )\n```\n\n----------------------------------------\n\nTITLE: Subject Hierarchy Plugin Offering View Context Menu - Python\nDESCRIPTION: This snippet demonstrates how to create a subject hierarchy plugin that offers a custom action in the view context menu. It includes the necessary changes compared to regular initialization, such as removing the `AbstractScriptedSubjectHierarchyPlugin.__init__` line from the constructor and manually registering the plugin.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/subjecthierarchy.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nimport vtk, qt, ctk, slicer\nfrom slicer.ScriptedLoadableModule import *\nfrom slicer.util import VTKObservationMixin\n\nfrom SubjectHierarchyPlugins import AbstractScriptedSubjectHierarchyPlugin\n\nclass ViewContextMenu(ScriptedLoadableModule):\n\n  def __init__(self, parent):\n    ScriptedLoadableModule.__init__(self, parent)\n    self.parent.title = \"Context menu example\"\n    self.parent.categories = [\"Examples\"]\n    self.parent.contributors = [\"Steve Pieper (Isomics, Inc.)\"]\n    slicer.app.connect(\"startupCompleted()\", self.onStartupCompleted)\n\n  def onStartupCompleted(self):\n    \"\"\"register subject hierarchy plugin once app is initialized\"\"\"\n    import SubjectHierarchyPlugins\n    from ViewContextMenu import ViewContextMenuSubjectHierarchyPlugin\n    scriptedPlugin = slicer.qSlicerSubjectHierarchyScriptedPlugin(None)\n    scriptedPlugin.setPythonSource(ViewContextMenuSubjectHierarchyPlugin.filePath)\n    pluginHandler = slicer.qSlicerSubjectHierarchyPluginHandler.instance()\n    pluginHandler.registerPlugin(scriptedPlugin)\n    print(\"ViewContextMenuSubjectHierarchyPlugin loaded\")\n\nclass ViewContextMenuSubjectHierarchyPlugin(AbstractScriptedSubjectHierarchyPlugin):\n\n  # Necessary static member to be able to set python source to scripted subject hierarchy plugin\n  filePath = __file__\n\n  def __init__(self, scriptedPlugin):\n    self.viewAction = qt.QAction(\"CUSTOM VIEW...\", scriptedPlugin)\n    self.viewAction.objectName = \"CustomViewAction\"\n    # Set the action's position in the menu: by using `SectionNode+5` we place the action in a new section, after \"node actions\" section.\n    slicer.qSlicerSubjectHierarchyAbstractPlugin.setActionPosition(self.viewAction, slicer.qSlicerSubjectHierarchyAbstractPlugin.SectionNode+5)\n    self.viewAction.connect(\"triggered()\", self.onViewAction)\n\n  def viewContextMenuActions(self):\n    return [self.viewAction]\n\n  def showViewContextMenuActionsForItem(self, itemID, eventData=None):\n    # We can decide here if we want to show this action based on the itemID or eventData (ViewNodeID, ...).\n    print(f\"itemID: {itemID}\")\n    print(f\"eventData: {eventData}\")\n    self.viewAction.visible = True\n\n  def onViewAction(self):\n    print(\"Custom view action is called\")\n    slicer.util.messageBox(\"This works!\")\n```\n\n----------------------------------------\n\nTITLE: Set Python Resources (CMake)\nDESCRIPTION: Defines a list of resource files associated with the module, specifically a DICOM configuration file. This is typically used to configure DICOM behavior.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOMLib/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_PYTHON_RESOURCES\n  Resources/DICOM/dcmtk/storescu-seg.cfg\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Scripted Module\nDESCRIPTION: Uses the slicerMacroBuildScriptedModule macro to build the scripted module. This macro handles building the module, including setting up dependencies and generating necessary files. The macro takes the module NAME, SCRIPTS, RESOURCES and the WITH_GENERIC_TESTS option as input.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/SegmentStatistics/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroBuildScriptedModule(\n  NAME ${MODULE_NAME}\n  SCRIPTS ${MODULE_PYTHON_SCRIPTS}\n  RESOURCES ${MODULE_PYTHON_RESOURCES}\n  WITH_GENERIC_TESTS\n  )\n```\n\n----------------------------------------\n\nTITLE: Access and Modify VTK Actor Properties (Python)\nDESCRIPTION: This snippet demonstrates how to access and modify VTK actor properties, specifically to experiment with physically-based rendering (PBR).  It retrieves a model node, accesses its actor's property, and sets PBR parameters like metallic, roughness, and color.  Requires the `slicer` module to be available in the Python environment and a model node named \"MyModel\" to be loaded.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_61\n\nLANGUAGE: python\nCODE:\n```\nmodelNode = slicer.util.getNode(\"MyModel\")\n\nthreeDViewWidget = slicer.app.layoutManager().threeDWidget(0)\nmodelDisplayableManager = threeDViewWidget.threeDView().displayableManagerByClassName(\"vtkMRMLModelDisplayableManager\")\nactor=modelDisplayableManager.GetActorByID(modelNode.GetDisplayNode().GetID())\nproperty=actor.GetProperty()\nproperty.SetInterpolationToPBR()\nproperty.SetMetallic(0.5)\nproperty.SetRoughness(0.5)\nproperty.SetColor(0.5,0.5,0.9)\nslicer.util.forceRenderAllViews()\n```\n\n----------------------------------------\n\nTITLE: Finding Package: SlicerExecutionModel\nDESCRIPTION: This snippet uses the `find_package` command to locate the SlicerExecutionModel package.  It is only included if `Slicer_BUILD_CLI_SUPPORT` is enabled. This is a dependency for building command-line interface (CLI) support in Slicer.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/Logic/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_BUILD_CLI_SUPPORT)\n  find_package(SlicerExecutionModel REQUIRED ModuleDescriptionParser)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding ITK Package\nDESCRIPTION: This snippet finds the ITK package with specified components (ITKIOImageBase, ITKLabelVoting). The `REQUIRED` keyword makes the configuration fail if ITK is not found. It also sets `ITK_NO_IO_FACTORY_REGISTER_MANAGER` based on the ITK version to avoid issues with factory registration. Finally, it includes the ITK use file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/VotingBinaryHoleFillingImageFilter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKIOImageBase\n  ITKLabelVoting\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Finding ITK with Components\nDESCRIPTION: Finds the ITK (Insight Toolkit) package with specified components. It defines required ITK components and then uses find_package to locate ITK. It also sets ITK_NO_*_FACTORY_REGISTER_MANAGER properties to prevent issues with factory registration in ITK versions 5.3 and later.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ModelToLabelMap/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKBinaryMathematicalMorphology\n  ITKCommon\n  ITKIOImageBase\n  ITKImageFunction\n  ITKMathematicalMorphology\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Updating CMake Module Path\nDESCRIPTION: This code snippet updates the CMake module path to include the project's extensions directory. This ensures that custom CMake modules within the project's extension directories are available during the build process. It also sets variables pointing to the project's CMake directories.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_MODULE_PATH\n  ${Slicer_SOURCE_DIR}/Extensions/CMake\n  ${CMAKE_MODULE_PATH}\n  )\n\nset(Slicer_CMAKE_DIR ${Slicer_SOURCE_DIR}/CMake)\nset(Slicer_EXTENSIONS_CMAKE_DIR ${Slicer_SOURCE_DIR}/Extensions/CMake)\n```\n\n----------------------------------------\n\nTITLE: Building Slicer Extension on Linux/macOS (Bash)\nDESCRIPTION: This bash script outlines the steps to build a Slicer extension on Linux or macOS. It involves creating a build directory, navigating into it, using CMake to configure the build, and then using make to compile the extension. It depends on CMake and Make being installed and configured correctly.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/extensions.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir MyExtension-debug\n$ cd MyExtension-debug\n$ cmake -DCMAKE_BUILD_TYPE:STRING=Debug -DSlicer_DIR:PATH=/path/to/Slicer-SuperBuild-Debug/Slicer-build ../MyExtension\n$ make\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom BoundingBoxWidget in Slicer (Python)\nDESCRIPTION: This code defines a custom `BoundingBoxWidget` using PyQt. It creates widgets for the `topLeft` and `bottomRight` points, each containing `QDoubleSpinBox` widgets for x and y coordinates. The `SlicerPackParameterName` property is set on intermediate QWidget elements to match the nesting structure of the parameter packs. Requires the `qt` module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/parameter_nodes/advanced/custom_widgets_for_parameter_packs.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass BoundingBoxWidget(qt.QWidget):\n    def __init__(self, parent=None):\n        super().__init__(parent)\n\n        self.setLayout(qt.QVBoxLayout(self))\n\n        # Making a widget for the topLeft point. This particular QWidget doesn't\n        # do anything special for the UI, but it parents the x and y widgets for the\n        # top left points\n        topLeftWidget = qt.QWidget()\n        self.layout.addWidget(topLeftWidget)\n        topLeftWidget.setProperty(\"SlicerPackParameterName\", \"topLeft\")\n        topLeftWidget.setLayout(qt.QHBoxLayout())\n\n        topLeftXWidget = qt.QDoubleSpinBox()\n        topLeftXWidget.setProperty(\"SlicerPackParameterName\", \"x\")\n        topLeftYWidget = qt.QDoubleSpinBox()\n        topLeftYWidget.setProperty(\"SlicerPackParameterName\", \"y\")\n\n        topLeftWidget.layout().addWidget(topLeftXWidget)\n        topLeftWidget.layout().addWidget(topLeftYWidget)\n\n        # Making a widget for the bottomRight point. This particular QWidget doesn't\n        # do anything special for the UI, but it parents the x and y widgets for the\n        # top left points\n        bottomRightWidget = qt.QWidget()\n        self.layout.addWidget(bottomRightWidget)\n        bottomRightWidget.setProperty(\"SlicerPackParameterName\", \"bottomRight\")\n        bottomRightWidget.setLayout(qt.QHBoxLayout())\n\n        bottomRightXWidget = qt.QDoubleSpinBox()\n        bottomRightXWidget.setProperty(\"SlicerPackParameterName\", \"x\")\n        bottomRightYWidget = qt.QDoubleSpinBox()\n        bottomRightYWidget.setProperty(\"SlicerPackParameterName\", \"y\")\n\n        bottomRightWidget.layout().addWidget(bottomRightXWidget)\n        bottomRightWidget.layout().addWidget(bottomRightYWidget)\n```\n\n----------------------------------------\n\nTITLE: Finding ITK package with components\nDESCRIPTION: This snippet configures ITK dependencies by specifying required components and finding the ITK package. It handles disabling IO factory registration depending on ITK version and then includes the ITK use file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/PETStandardUptakeValueComputation/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKCommon\n  ITKIODCMTK\n  ITKIOGDCM\n  ITKIOImageBase\n  ${ModuleDescriptionParser_ITK_COMPONENTS}\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Set Slice Pose from Normal and Position in Slicer (Python)\nDESCRIPTION: This function, `setSlicePoseFromSliceNormalAndPosition`, sets the slice pose based on a provided normal vector and position. It automatically determines the view-up direction to align with the specified anatomical axis. The function utilizes the `vtkMath.AngleBetweenVectors` function from the VTK library to determine the correct orientation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_45\n\nLANGUAGE: python\nCODE:\n```\ndef setSlicePoseFromSliceNormalAndPosition(sliceNode, sliceNormal, slicePosition, defaultViewUpDirection=None, backupViewRightDirection=None):\n  \"\"\"\n  Set slice pose from the provided plane normal and position. View up direction is determined automatically,\n  to make view up point towards defaultViewUpDirection.\n  :param defaultViewUpDirection Slice view will be spinned in-plane to match point approximately this up direction. Default: patient superior.\n  :param backupViewRightDirection Slice view will be spinned in-plane to match point approximately this right direction\n    if defaultViewUpDirection is too similar to sliceNormal. Default: patient left.\n  \"\"\"\n  # Fix up input directions\n  if defaultViewUpDirection is None:\n    defaultViewUpDirection = [0,0,1]\n  if backupViewRightDirection is None:\n    backupViewRightDirection = [-1,0,0]\n  if sliceNormal[1]>=0:\n    sliceNormalStandardized = sliceNormal\n  else:\n    sliceNormalStandardized = [-sliceNormal[0], -sliceNormal[1], -sliceNormal[2]]\n  # Compute slice axes\n  sliceNormalViewUpAngle = vtk.vtkMath.AngleBetweenVectors(sliceNormalStandardized, defaultViewUpDirection)\n  angleTooSmallThresholdRad = 0.25 # about 15 degrees\n  if sliceNormalViewUpAngle > angleTooSmallThresholdRad and sliceNormalViewUpAngle < vtk.vtkMath.Pi() - angleTooSmallThresholdRad:\n    viewUpDirection = defaultViewUpDirection\n    sliceAxisY = viewUpDirection\n    sliceAxisX = [0, 0, 0]\n    vtk.vtkMath.Cross(sliceAxisY, sliceNormalStandardized, sliceAxisX)\n  else:\n    sliceAxisX = backupViewRightDirection\n  # Set slice axes\n  sliceNode.SetSliceToRASByNTP(sliceNormalStandardized[0], sliceNormalStandardized[1], sliceNormalStandardized[2],\n    sliceAxisX[0], sliceAxisX[1], sliceAxisX[2],\n    slicePosition[0], slicePosition[1], slicePosition[2], 0)\n\n# Example usage:\nsliceNode = getNode(\"vtkMRMLSliceNodeRed\")\ntransformNode = getNode(\"Transform_3\")\ntransformMatrix = vtk.vtkMatrix4x4()\ntransformNode.GetMatrixTransformToParent(transformMatrix)\nsliceNormal = [transformMatrix.GetElement(0,2), transformMatrix.GetElement(1,2), transformMatrix.GetElement(2,2)]\nslicePosition = [transformMatrix.GetElement(0,3), transformMatrix.GetElement(1,3), transformMatrix.GetElement(2,3)]\nsetSlicePoseFromSliceNormalAndPosition(sliceNode, sliceNormal, slicePosition)\n```\n\n----------------------------------------\n\nTITLE: Setting ITK Dependencies (CMake)\nDESCRIPTION: This snippet finds the ITK package, sets required ITK components, handles ITK factory registration to avoid conflicts, and appends necessary ITK libraries and include directories.  It checks the ITK version to conditionally set `ITK_NO_IO_FACTORY_REGISTER_MANAGER` and includes the ITK use file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/Testing/Cxx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}Testing_ITK_COMPONENTS\n  ITKCommon\n  )\nfind_package(ITK 4.6 COMPONENTS ${${KIT}Testing_ITK_COMPONENTS} REQUIRED)\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\nlist(APPEND ITK_LIBRARIES ITKFactoryRegistration)\nlist(APPEND ITK_INCLUDE_DIRS\n  ${ITKFactoryRegistration_INCLUDE_DIRS}\n  )\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Building Loadable Module\nDESCRIPTION: This snippet uses the slicerMacroBuildLoadableModule macro to build the module. This macro takes care of all the details of building a loadable module, such as compiling the source code, linking the libraries, and generating the user interface. This macro simplifies the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Plots/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroBuildLoadableModule(\n  NAME ${MODULE_NAME}\n  EXPORT_DIRECTIVE ${MODULE_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${MODULE_INCLUDE_DIRECTORIES}\n  SRCS ${MODULE_SRCS}\n  MOC_SRCS ${MODULE_MOC_SRCS}\n  UI_SRCS ${MODULE_UI_SRCS}\n  TARGET_LIBRARIES ${MODULE_TARGET_LIBRARIES}\n  RESOURCES ${MODULE_RESOURCES}\n  WITH_GENERIC_TESTS\n  )\n```\n\n----------------------------------------\n\nTITLE: Install Extension - Python\nDESCRIPTION: This snippet demonstrates how to download and install a Slicer extension from a server using `slicer.app.installExtensionFromServer()`.  It sets the `interactive` flag to False to prevent popups and allows a restart of Slicer if needed.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_72\n\nLANGUAGE: python\nCODE:\n```\nextensionName = 'SlicerIGT'\nem = slicer.app.extensionsManagerModel()\nem.interactive = False  # prevent display of popups\nrestart = True\nif not em.installExtensionFromServer(extensionName, restart):\n  raise ValueError(f\"Failed to install {extensionName} extension\")\n```\n\n----------------------------------------\n\nTITLE: Qt Library Build Macro\nDESCRIPTION: This snippet invokes the SlicerMacroBuildBaseQtLibrary macro, passing in all the previously defined properties such as name, export directive, include directories, source files, and target libraries. It configures the Qt library build process and also specifies that PythonQt wrapping should be enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCLI/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nSlicerMacroBuildBaseQtLibrary(\n  NAME ${PROJECT_NAME}\n  EXPORT_DIRECTIVE ${KIT_export_directive}\n  INCLUDE_DIRECTORIES ${KIT_include_directories}\n  SRCS ${KIT_SRCS}\n  MOC_SRCS ${KIT_MOC_SRCS}\n  UI_SRCS ${KIT_UI_SRCS}\n  TARGET_LIBRARIES ${KIT_target_libraries}\n  RESOURCES ${KIT_resources}\n  WRAP_PYTHONQT\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Source Files in CMake\nDESCRIPTION: This snippet defines the main source files for the Annotations module, combining the GUI source files with the core module source files. It includes the C++ source and header files for both the GUI and the module itself. It depends on the GUI_SRCS variable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Annotations/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_SRCS\n  ${GUI_SRCS}\n  qSlicerAnnotationsModule.cxx\n  qSlicerAnnotationsModule.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Required Python Version (CMake)\nDESCRIPTION: This snippet sets the required Python version for the Slicer build. It checks if the provided version string is valid (X.Y.Z format) and extracts the major, minor, and patch components. It also handles ABI flags for older Python versions (< 3.8).\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED Slicer_REQUIRED_PYTHON_VERSION)\n  set(Slicer_REQUIRED_PYTHON_VERSION \"3.9.10\")\nendif()\nmark_as_superbuild(Slicer_REQUIRED_PYTHON_VERSION)\n\nif(NOT Slicer_REQUIRED_PYTHON_VERSION MATCHES \"([0-9]+)\\.([0-9]+)\\.([0-9]+)\")\n  message(FATAL_ERROR \"Slicer_REQUIRED_PYTHON_VERSION [${Slicer_REQUIRED_PYTHON_VERSION}] is invalid. Value expected to be formatted as X.Y.Z\")\nendif()\n\nset(Slicer_REQUIRED_PYTHON_VERSION_MAJOR ${CMAKE_MATCH_1})\nset(Slicer_REQUIRED_PYTHON_VERSION_MINOR ${CMAKE_MATCH_2})\nset(Slicer_REQUIRED_PYTHON_VERSION_PATCH ${CMAKE_MATCH_3})\n\nset(Slicer_REQUIRED_PYTHON_VERSION_DOT ${Slicer_REQUIRED_PYTHON_VERSION_MAJOR}.${Slicer_REQUIRED_PYTHON_VERSION_MINOR})\n\nset(Slicer_REQUIRED_PYTHON_ABIFLAGS \"\")\nif(Slicer_REQUIRED_PYTHON_VERSION_DOT VERSION_LESS \"3.8\")\n  set(Slicer_REQUIRED_PYTHON_ABIFLAGS \"m\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Customize Keyboard Shortcuts in Slicer (Python)\nDESCRIPTION: This snippet shows how to create custom keyboard shortcuts to trigger specific actions in Slicer. It provides examples for switching between different view layouts and cycling through Segment Editor effects.  Requires the `slicer` and `qt` modules to be available in the Python environment. The script must be executed within the Slicer application to access its specific functionalities.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_62\n\nLANGUAGE: python\nCODE:\n```\nshortcuts = [\n  (\"Ctrl+b\", lambda: slicer.app.layoutManager().setLayout(slicer.vtkMRMLLayoutNode.SlicerLayoutOneUpRedSliceView)),\n  (\"Ctrl+n\", lambda: slicer.app.layoutManager().setLayout(slicer.vtkMRMLLayoutNode.SlicerLayoutOneUpYellowSliceView)),\n  (\"Ctrl+m\", lambda: slicer.app.layoutManager().setLayout(slicer.vtkMRMLLayoutNode.SlicerLayoutOneUpGreenSliceView)),\n  (\"Ctrl+,\", lambda: slicer.app.layoutManager().setLayout(slicer.vtkMRMLLayoutNode.SlicerLayoutFourUpView))\n  ]\n\nfor (shortcutKey, callback) in shortcuts:\n  shortcut = qt.QShortcut(slicer.util.mainWindow())\n  shortcut.setKey(qt.QKeySequence(shortcutKey))\n  shortcut.connect( \"activated()\", callback)\n```\n\nLANGUAGE: python\nCODE:\n```\ndef cycleEffect(delta=1):\n  try:\n    orderedNames = list(slicer.modules.SegmentEditorWidget.editor.effectNameOrder())\n    allNames = slicer.modules.SegmentEditorWidget.editor.availableEffectNames()\n    for name in allNames:\n      try:\n        orderedNames.index(name)\n      except ValueError:\n        orderedNames.append(name)\n    orderedNames.insert(0, None)\n    activeEffect = slicer.modules.SegmentEditorWidget.editor.activeEffect()\n    if activeEffect:\n      activeName = slicer.modules.SegmentEditorWidget.editor.activeEffect().name\n    else:\n      activeName = None\n    newIndex = (orderedNames.index(activeName) + delta) % len(orderedNames)\n    slicer.modules.SegmentEditorWidget.editor.setActiveEffectByName(orderedNames[newIndex])\n  except AttributeError:\n    # module not active\n    pass\n\nshortcuts = [\n  (\"`\", lambda: cycleEffect(-1)),\n  (\"~\", lambda: cycleEffect(1)),\n  ]\n\nfor (shortcutKey, callback) in shortcuts:\n  shortcut = qt.QShortcut(slicer.util.mainWindow())\n  shortcut.setKey(qt.QKeySequence(shortcutKey))\n  shortcut.connect( \"activated()\", callback)\n```\n\n----------------------------------------\n\nTITLE: Export Control Points to CSV (Python)\nDESCRIPTION: Exports control point information (name, position, state) from a markup node to a CSV file.  This is a basic export format, suitable for position data only. Requires a valid markup node and file path.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nslicer.modules.markups.logic().ExportControlPointsToCSV(markupsNode, \"/path/to/MyControlPoints.csv\")\n```\n\n----------------------------------------\n\nTITLE: Setting Project and Export Directives\nDESCRIPTION: This snippet sets the project name, export directive, include directories, source files, and target libraries for the module logic. It defines how the module will be built and linked with other parts of the VTK Slicer application.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/Logic/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleLogic)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_LOGIC_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSlicer${MODULE_NAME}ModuleMRML_SOURCE_DIR}\n  ${vtkSlicer${MODULE_NAME}ModuleMRML_BINARY_DIR}\n  )\n\nset(${KIT}_SRCS\n  vtkSlicer${MODULE_NAME}Logic.cxx\n  vtkSlicer${MODULE_NAME}Logic.h\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleMRML\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Module Widgets using SlicerMacroBuildModuleWidgets\nDESCRIPTION: This snippet utilizes the `SlicerMacroBuildModuleWidgets` macro to build the module widgets. It passes the defined variables, such as source files, include directories, and target libraries, to the macro to automate the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/Widgets/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleWidgets(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  UI_SRCS ${${KIT}_UI_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  RESOURCES ${${KIT}_RESOURCES}\n  WRAP_PYTHONQT\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Loadable Module using Macro in CMake\nDESCRIPTION: Uses a custom macro 'slicerMacroBuildLoadableModule' to build the module. This macro encapsulates common build steps for Slicer modules, simplifying the configuration process. It takes parameters such as module name, source files, include directories, and target libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SceneViews/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nslicerMacroBuildLoadableModule(\n  NAME ${MODULE_NAME}\n  EXPORT_DIRECTIVE ${MODULE_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${MODULE_INCLUDE_DIRECTORIES}\n  SRCS ${MODULE_SRCS}\n  MOC_SRCS ${MODULE_MOC_SRCS}\n  UI_SRCS ${MODULE_UI_SRCS}\n  TARGET_LIBRARIES ${MODULE_TARGET_LIBRARIES}\n  RESOURCES ${MODULE_RESOURCES}\n  WITH_GENERIC_TESTS\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding and Including Git\nDESCRIPTION: This snippet uses `find_package` to locate the Git executable. It requires Git to be present. It then marks the Git executable as a SuperBuild dependency, making sure Git is available during the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Git REQUIRED)\nmark_as_superbuild(GIT_EXECUTABLE)\n```\n\n----------------------------------------\n\nTITLE: Finding ITK Package in CMake\nDESCRIPTION: This snippet finds the ITK (Insight Toolkit) package with specified components. It defines required ITK components and then uses `find_package` to locate ITK. Version 4.6 or greater is required.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/OrientScalarVolume/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKIOImageBase\n  ITKImageGrid\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Building library\nDESCRIPTION: This snippet defines the source files and libraries for the SlicerBaseCLI library. It adds a library target, links the target with the specified libraries, sets properties such as labels and folder, and applies user-defined properties if provided.  The VTK integration is conditional on VTK being found.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/CLI/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(SlicerBaseCLI_SRCS\n  )\nset(SlicerBaseCLI_LIBS\n  ModuleDescriptionParser ${ITK_LIBRARIES}\n  )\n\n#find_package(VTK)\nif(VTK_FOUND)\n  #include(${VTK_USE_FILE})\n  list(APPEND SlicerBaseCLI_SRCS vtkPluginFilterWatcher.cxx)\n  list(APPEND SlicerBaseCLI_LIBS ${VTK_LIBRARIES})\nendif()\n\nif(SlicerBaseCLI_SRCS)\n  # --------------------------------------------------------------------------\n  # Build library\n  # --------------------------------------------------------------------------\n  set(lib_name \"SlicerBaseCLI\")\n\n  add_library(${lib_name} ${SlicerBaseCLI_SRCS})\n  target_link_libraries(${lib_name} ${SlicerBaseCLI_LIBS})\n  set_target_properties(${lib_name} PROPERTIES LABELS ${lib_name})\n  set_target_properties(${lib_name} PROPERTIES FOLDER \"Core-Base\")\n\n  # Apply user-defined properties to the library target.\n  if(Slicer_LIBRARY_PROPERTIES)\n    set_target_properties(${lib_name} PROPERTIES ${Slicer_LIBRARY_PROPERTIES})\n  endif()\n\n  # --------------------------------------------------------------------------\n  # Install library\n  # --------------------------------------------------------------------------\n  install(TARGETS ${lib_name}\n    RUNTIME DESTINATION ${Slicer_INSTALL_BIN_DIR} COMPONENT RuntimeLibraries\n    LIBRARY DESTINATION ${Slicer_INSTALL_LIB_DIR} COMPONENT RuntimeLibraries\n    ARCHIVE DESTINATION ${Slicer_INSTALL_LIB_DIR} COMPONENT Development\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Python Scripts for DICOM Plugins\nDESCRIPTION: This CMake snippet defines a list of Python scripts that implement the DICOM plugins.  These scripts handle different DICOM types such as enhanced ultrasound volumes, GE ABUS data, image sequences, scalar volumes, volume sequences, and slicer data bundles.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOMPlugins/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_PYTHON_SCRIPTS\n  DICOMEnhancedUSVolumePlugin.py\n  DICOMGeAbusPlugin.py\n  DICOMImageSequencePlugin.py\n  DICOMScalarVolumePlugin.py\n  DICOMVolumeSequencePlugin.py\n  DICOMSlicerDataBundlePlugin.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Module Tests with Pixel Type Variations\nDESCRIPTION: This CMake function `add_module_test` adds a test for a given pixel type. It uses `ExternalData_add_test` to create a test that compares the output of the module with a baseline image. The test runs the `${CLP}Test` executable with the specified pixel type.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CastScalarVolume/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_module_test pixeltype)\n  set(testname ${CLP}Test_${pixeltype})\n  ExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n    NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n    --compare DATA{${BASELINE}/${CLP}Test${pixeltype}.nrrd}\n              ${TEMP}/${CLP}Test${pixeltype}.nrrd\n    ModuleEntryPoint --type ${pixeltype}\n    DATA{${INPUT}/${CLP}Test.nrrd} ${TEMP}/${CLP}Test${pixeltype}.nrrd\n    )\n  set_property(TEST ${testname} PROPERTY LABELS ${CLP})\nendfunction()\nadd_module_test( UnsignedChar )\nadd_module_test( Char )\nadd_module_test( Short )\nadd_module_test( UnsignedShort )\nadd_module_test( Int )\nadd_module_test( UnsignedInt )\nadd_module_test( Float )\nadd_module_test( Double )\n```\n\n----------------------------------------\n\nTITLE: Setting Test Properties\nDESCRIPTION: This snippet sets the LABELS property for the test. It allows grouping and filtering tests based on these labels.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/FiducialRegistration/Testing/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Configures the MODULE_INCLUDE_DIRECTORIES variable with paths to header files required by the Volumes module. This ensures the compiler can find necessary headers during compilation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_INCLUDE_DIRECTORIES\n  ${CMAKE_CURRENT_SOURCE_DIR}/Logic\n  ${CMAKE_CURRENT_BINARY_DIR}/Logic\n  ${CMAKE_CURRENT_SOURCE_DIR}/SubjectHierarchyPlugins\n  ${CMAKE_CURRENT_BINARY_DIR}/SubjectHierarchyPlugins\n  ${qSlicerSubjectHierarchyModuleWidgets_INCLUDE_DIRS}\n  ${CMAKE_CURRENT_SOURCE_DIR}/Widgets\n  ${CMAKE_CURRENT_BINARY_DIR}/Widgets\n  ${qSlicerColorsModuleWidgets_INCLUDE_DIRS}\n  ${vtkSlicerColorsModuleMRML_INCLUDE_DIRS}\n  ${vtkSlicerColorsModuleLogic_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Python Unit Test for Slicer Module (CMake)\nDESCRIPTION: This CMake command adds a Python unit test for a Slicer module. It uses the `slicer_add_python_unittest` macro, which is specific to the Slicer build environment. The `SCRIPT` argument specifies the Python script to execute for the unit test. The `${MODULE_NAME}` variable likely contains the name of the module being tested and resolves to the complete file path.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/CropVolumeSequence/Testing/Python/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n#slicer_add_python_unittest(SCRIPT ${MODULE_NAME}ModuleTest.py)\n```\n\n----------------------------------------\n\nTITLE: Adding subdirectories - CMake\nDESCRIPTION: This snippet adds several subdirectories to the build process using the `add_subdirectory` command. This is a fundamental step in organizing the project structure and building its various components. The conditional `add_subdirectory` relies on `Slicer_BUILD_EXTENSIONMANAGER_SUPPORT`.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_71\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Libs)\nadd_subdirectory(Base)\nadd_subdirectory(Resources)\nadd_subdirectory(Utilities/Scripts)\nif(Slicer_BUILD_EXTENSIONMANAGER_SUPPORT)\n  add_subdirectory(Utilities/Scripts/SlicerWizard)\nendif()\n\nadd_subdirectory(Modules/Core)\nadd_subdirectory(Base/QTApp)\nadd_subdirectory(Modules)\nadd_subdirectory(\n  ${Slicer_APPLICATIONS_DIR}\n  ${CMAKE_CURRENT_BINARY_DIR}/Applications\n  )\n\nif(Slicer_BUILD_EXTENSIONMANAGER_SUPPORT)\n  add_subdirectory(Utilities/Templates)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Export Entire Scene as VRML in Slicer (Python)\nDESCRIPTION: This code snippet exports all surface meshes displayed in the Slicer scene (models, markups, etc.) to a VRML file. It preserves solid colors and coloring by scalar values but does not support textures. It sets up a `vtkVRMLExporter`, specifies the render window and output file name, and then writes the scene to the file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/models.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nexporter = vtk.vtkVRMLExporter()\nexporter.SetRenderWindow(slicer.app.layoutManager().threeDWidget(0).threeDView().renderWindow())\nexporter.SetFileName(\"C:/tmp/something.wrl\")\nexporter.Write()\n```\n\n----------------------------------------\n\nTITLE: Setting Python Interpreter Path in CMake\nDESCRIPTION: This CMake code snippet determines the path to the Python interpreter. If Slicer is configured to use the system Python, it sets the PYTHON variable to 'python'. Otherwise, it searches for the Python executable within the Slicer superbuild directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Scripts/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(Slicer_BUILD_EXTENSIONMANAGER_SUPPORT AND Slicer_USE_PYTHONQT)\n  # Determine name of Python interpreter\n  #\n  # NOTE: Do NOT use ${PYTHON_EXECUTABLE}; when using our own Python, it is set\n  #       to a ctkAppLauncher wrapper, and we don't want that!\n  if(Slicer_USE_SYSTEM_python)\n    set(PYTHON python)\n  else()\n    find_program(PYTHON python\n      PATHS ${Slicer_SUPERBUILD_DIR}/python-install/bin\n      NO_DEFAULT_PATH\n      )\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Building Loadable Module\nDESCRIPTION: Uses the `slicerMacroBuildLoadableModule` macro to build the module. This macro simplifies the build process by handling common tasks such as creating the library, linking dependencies, and generating documentation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/GeneralizedReformat/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nslicerMacroBuildLoadableModule(\n  NAME ${MODULE_NAME}\n  EXPORT_DIRECTIVE ${MODULE_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${MODULE_INCLUDE_DIRECTORIES}\n  SRCS ${MODULE_SRCS}\n  MOC_SRCS ${MODULE_MOC_SRCS}\n  UI_SRCS ${MODULE_UI_SRCS}\n  TARGET_LIBRARIES ${MODULE_TARGET_LIBRARIES}\n  RESOURCES ${MODULE_RESOURCES}\n  WITH_GENERIC_TESTS\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Module Logic with Slicer Macro (CMake)\nDESCRIPTION: This snippet utilizes the `SlicerMacroBuildModuleLogic` macro to configure the build process for the module logic.  It passes the module name, export directive, include directories, source files, and target libraries as parameters. This macro automates the generation of the necessary CMake commands to build the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/LoadableExtensionTemplate/LoadableModuleTemplate/Logic/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleLogic(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding ITK Components in CMake\nDESCRIPTION: Finds the ITK library and specifies the required ITK components for the N4ITKBiasFieldCorrection module. It includes the ITK use file to set up include paths and library definitions.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/N4ITKBiasFieldCorrection/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKBiasCorrection\n  ITKCommon\n  ITKIOImageBase\n  ITKImageGrid\n  ITKOptimizers\n  ITKThresholding\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Finding ITK Package with CMake\nDESCRIPTION: This snippet finds the ITK package and specifies required components like ITKIOImageBase and ITKSmoothing.  It then includes the ITK use file, making ITK libraries and definitions available.  `ITK_VERSION` is checked to handle differences in factory registration between ITK versions.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MedianImageFilter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKIOImageBase\n  ITKSmoothing\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files CMake\nDESCRIPTION: This snippet defines the C++ source and header files that make up the module. These files implement the core functionality of the qSlicerDICOMModuleWidgets.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOMLib/Widgets/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_SRCS\n  qSlicerDICOMExportDialog.cxx\n  qSlicerDICOMExportDialog.h\n  qSlicerDICOMLoadable.cxx\n  qSlicerDICOMLoadable.h\n  qSlicerDICOMExportable.cxx\n  qSlicerDICOMExportable.h\n  qSlicerDICOMTagEditorWidget.cxx\n  qSlicerDICOMTagEditorWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: CTest Configuration CMake\nDESCRIPTION: Configures CTest for running tests. It disables the addition of default CTest targets, includes the CTest module, and adds a custom target for running experimental tests.  Relies on the `CMAKE_CTEST_COMMAND` variable and configuration types.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_48\n\nLANGUAGE: cmake\nCODE:\n```\nset_property(GLOBAL PROPERTY CTEST_TARGETS_ADDED 1) # Do not add CTest default targets\ninclude(CTest)\n\n# Add Experimental target - Adapted from CTestTargets.cmake\nset(__conf_types \"\")\nif(CMAKE_CONFIGURATION_TYPES)\n  # We need to pass the configuration type on the test command line.\n  set(__conf_types -C \"$<CONFIG>\")\nendif()\nadd_custom_target(Experimental ${CMAKE_CTEST_COMMAND} ${__conf_types} -D Experimental)\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory\nDESCRIPTION: Conditionally adds the Testing subdirectory to the build if the BUILD_TESTING option is enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTApp/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Run DCMTK Command-Line Tool (Python)\nDESCRIPTION: This snippet executes a DCMTK command-line tool (img2dcm) to convert a PNG image to a DICOM file. It uses the DICOMCommand class from the DICOMLib module, passing the command and its arguments. The start() method runs the command synchronously, blocking until it returns.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/dicom.md#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom DICOMLib import DICOMCommand\ncommand = DICOMCommand('img2dcm',['image.png','output.dcm'])\nstdout = command.start() # run synchronously, block until img2dcm returns\n```\n\n----------------------------------------\n\nTITLE: SlicerMacroBuildModuleWidgets Macro Call\nDESCRIPTION: Calls a custom CMake macro `SlicerMacroBuildModuleWidgets` to handle the actual building of the module widgets.  It passes the defined variables as arguments, including name, export directive, include directories, sources, UI files, target libraries and resources. It also sets the WRAP_PYTHONQT option. This macro likely encapsulates the common steps required to build a Slicer module's widgets.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/Widgets/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nSlicerMacroBuildModuleWidgets(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  UI_SRCS ${${KIT}_UI_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  RESOURCES ${${KIT}_RESOURCES}\n  WRAP_PYTHONQT\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Module Widgets with SlicerMacroBuildModuleWidgets\nDESCRIPTION: This snippet uses the `SlicerMacroBuildModuleWidgets` macro to configure the build process for the module's widgets. It passes the defined variables, such as source files, include directories, and target libraries, to the macro for processing. The `WRAP_PYTHONQT` option indicates that PythonQt wrappers should be generated.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/Widgets/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleWidgets(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  UI_SRCS ${${KIT}_UI_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  RESOURCES ${${KIT}_RESOURCES}\n  WRAP_PYTHONQT\n  )\n```\n\n----------------------------------------\n\nTITLE: Add Testing Subdirectory - CMake\nDESCRIPTION: This snippet adds a subdirectory named `Testing` to the build process if the `BUILD_TESTING` option is enabled. This allows for including and running tests for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GradientAnisotropicDiffusion/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Compiling Python Scripts for Tests (CMake)\nDESCRIPTION: Compiles Python scripts into a loadable module using the `ctkMacroCompilePythonScript` macro.  This macro takes a list of Python scripts (`VolumeRenderingSceneClose.py`) and bundles them into a Python module for use in the application's self-tests. It specifies the target name, scripts to compile, destination directory, install directory, and other options.  The macro requires that the CTK (Common Toolkit) library is available.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/Testing/Python/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT_PYTHON_SCRIPTS\n    VolumeRenderingSceneClose.py\n     )\n  ctkMacroCompilePythonScript(\n    TARGET_NAME ApplicationSelfTests\n    SCRIPTS \"${KIT_PYTHON_SCRIPTS}\"\n    DESTINATION_DIR ${Slicer_BINARY_DIR}/${Slicer_QTSCRIPTEDMODULES_LIB_DIR}\n    INSTALL_DIR ${Slicer_INSTALL_QTSCRIPTEDMODULES_LIB_DIR}\n    NO_INSTALL_SUBDIR\n    )\n```\n\n----------------------------------------\n\nTITLE: Extracting volume patches around segments in 3D Slicer (Python)\nDESCRIPTION: This script extracts volume patches around segments in a segmentation node. It computes the oriented bounding box (OBB) for each segment, creates a ROI node aligned with the OBB, crops the volume using the ROI, and saves the cropped volume and labelmap. Requires the SegmentStatistics module. `labelFiles` is a glob pattern.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/batch.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport glob\nimport os\n\ndef segROI(segmentationNode):\n  # Compute bounding boxes\n  import SegmentStatistics\n  segStatLogic = SegmentStatistics.SegmentStatisticsLogic()\n  segStatLogic.getParameterNode().SetParameter(\"Segmentation\", segmentationNode.GetID())\n  segStatLogic.getParameterNode().SetParameter(\"LabelmapSegmentStatisticsPlugin.obb_origin_ras.enabled\",str(True))\n  segStatLogic.getParameterNode().SetParameter(\"LabelmapSegmentStatisticsPlugin.obb_diameter_mm.enabled\",str(True))\n  segStatLogic.getParameterNode().SetParameter(\"LabelmapSegmentStatisticsPlugin.obb_direction_ras_x.enabled\",str(True))\n  segStatLogic.getParameterNode().SetParameter(\"LabelmapSegmentStatisticsPlugin.obb_direction_ras_y.enabled\",str(True))\n  segStatLogic.getParameterNode().SetParameter(\"LabelmapSegmentStatisticsPlugin.obb_direction_ras_z.enabled\",str(True))\n  segStatLogic.computeStatistics()\n  stats = segStatLogic.getStatistics()\n\n  # Draw ROI for each oriented bounding box\n  import numpy as np\n  for segmentId in stats[\"SegmentIDs\"]:\n    # Get bounding box\n    obb_origin_ras = np.array(stats[segmentId,\"LabelmapSegmentStatisticsPlugin.obb_origin_ras\"])\n    obb_diameter_mm = np.array(stats[segmentId,\"LabelmapSegmentStatisticsPlugin.obb_diameter_mm\"])\n    obb_direction_ras_x = np.array(stats[segmentId,\"LabelmapSegmentStatisticsPlugin.obb_direction_ras_x\"])\n    obb_direction_ras_y = np.array(stats[segmentId,\"LabelmapSegmentStatisticsPlugin.obb_direction_ras_y\"])\n    obb_direction_ras_z = np.array(stats[segmentId,\"LabelmapSegmentStatisticsPlugin.obb_direction_ras_z\"])\n    # Create ROI\n    segment = segmentationNode.GetSegmentation().GetSegment(segmentId)\n    roi=slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLMarkupsROINode\")\n    roi.SetName(segment.GetName() + \" OBB\")\n    roi.GetDisplayNode().SetHandlesInteractive(False)  # do not let the user resize the box\n    roi.SetSize(obb_diameter_mm * 2) # make the ROI twice the size of the segmentation\n    # Position and orient ROI using a transform\n    obb_center_ras = obb_origin_ras+0.5*(obb_diameter_mm[0] * obb_direction_ras_x + obb_diameter_mm[1] * obb_direction_ras_y + obb_diameter_mm[2] * obb_direction_ras_z)\n    boundingBoxToRasTransform = np.row_stack((np.column_stack(((1,0,0), (0,1,0), (0,0,1), obb_center_ras)), (0, 0, 0, 1)))\n    boundingBoxToRasTransformMatrix = slicer.util.vtkMatrixFromArray(boundingBoxToRasTransform)\n    roi.SetAndObserveObjectToNodeMatrix(boundingBoxToRasTransformMatrix)\n    return roi\n\nlabelFiles = glob.glob(\"/data/imagesTr/labels/final/*.nii.gz\")\n\nfor labelFile in labelFiles:\n  slicer.mrmlScene.Clear()\n  print(labelFile)\n  baseName = os.path.basename(labelFile)\n  ctFile = os.path.join(\"/data/imagesTr\", baseName)\n  print(ctFile)\n  ct = slicer.util.loadVolume(ctFile)\n  seg = slicer.util.loadSegmentation(labelFile)\n  roi = segROI(seg)\n  cropVolumeParameters = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLCropVolumeParametersNode\")\n  cropVolumeParameters.SetInputVolumeNodeID(ct.GetID())\n  cropVolumeParameters.SetROINodeID(roi.GetID())\n  slicer.modules.cropvolume.logic().Apply(cropVolumeParameters)\n  croppedCT = cropVolumeParameters.GetOutputVolumeNode()\n  seg.SetReferenceImageGeometryParameterFromVolumeNode(croppedCT)\n  segLogic = slicer.modules.segmentations.logic()\n  labelmap = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLLabelMapVolumeNode\")\n  segLogic.ExportAllSegmentsToLabelmapNode(seg, labelmap, slicer.vtkSegmentation.EXTENT_REFERENCE_GEOMETRY)\n  slicer.util.saveNode(croppedCT, f\"/data/crops/{baseName}\")\n  slicer.util.saveNode(labelmap, f\"/data/crops/labels/final/{baseName}\")\n  slicer.app.processEvents() # to watch progress\n```\n\n----------------------------------------\n\nTITLE: Building CLI with SEMMacroBuildCLI\nDESCRIPTION: This snippet uses the `SEMMacroBuildCLI` macro to build the CLI for the ModelMaker module. It specifies the module name, logo header, target libraries, and include directories.  vtkITK, MRMLCore, SlicerBaseLogic, SlicerBaseCLI, and VTK are included as target libraries. Include directories for vtkITK, MRMLCore, and SlicerBaseLogic are also added. SlicerBaseLogic's source and binary directories are included.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ModelMaker/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/NAMICLogo.h\n  TARGET_LIBRARIES vtkITK ModuleDescriptionParser MRMLCore SlicerBaseLogic SlicerBaseCLI ${VTK_LIBRARIES}\n  INCLUDE_DIRECTORIES\n    ${vtkITK_INCLUDE_DIRS}\n    ${MRMLCore_INCLUDE_DIRS}\n    ${SlicerBaseLogic_SOURCE_DIR} ${SlicerBaseLogic_BINARY_DIR}\n  )\n```\n\n----------------------------------------\n\nTITLE: Add Data Target\nDESCRIPTION: This adds an ExternalData target named `${CLP}Data` and sets its folder property within the Slicer build system.  This manages the download and availability of required test data.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ExtractSkeleton/Testing/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nExternalData_add_target(${CLP}Data)\nset_target_properties(${CLP}Data PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: itkTestMainExtended Failed Test - CMake\nDESCRIPTION: Defines a test case which is expected to fail.  This ensures the test infrastructure can handle failing tests correctly.  Comparison with a baseline is performed, but marked as WILL_FAIL.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleDTIVolume/Testing/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nset(TransformedImage6 ${TEMP}/dt-helix-transformed6.nrrd )\nset(testname itkTestMainExtendedFailedTest)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  --compare\n    DATA{${BASELINE}/dt-helix-ref-HField.nrrd}\n    ${TransformedImage6}\n  --compareIntensityTolerance 0\n  ModuleEntryPoint\n    --interpolation nn\n    ${OriginalImage}\n    ${TransformedImage6}\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\nset_tests_properties( itkTestMainExtendedFailedTest PROPERTIES WILL_FAIL true)\n```\n\n----------------------------------------\n\nTITLE: Disable interpolation for new volumes in Slicer (Python)\nDESCRIPTION: This script disables interpolation for newly loaded volumes by observing the `NodeAddedEvent` of the scene and setting the `Interpolate` property of any newly added `vtkMRMLScalarVolumeDisplayNode` to 0. This can be placed in the slicerrc.py file for persistent change.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_32\n\nLANGUAGE: Python\nCODE:\n```\ndef NoInterpolate(caller,event):\n  for node in slicer.util.getNodes(\"*\").values():\n    if node.IsA(\"vtkMRMLScalarVolumeDisplayNode\"):\n      node.SetInterpolate(0)\n\nslicer.mrmlScene.AddObserver(slicer.mrmlScene.NodeAddedEvent, NoInterpolate)\n```\n\n----------------------------------------\n\nTITLE: Specify a Sphere by Multiple Control Points (Python)\nDESCRIPTION: Fits a sphere to multiple markup control points using a least squares optimization method from the `scipy` library. Requires a minimum of 4 control points for accurate fitting. The control points should be placed far away from each other on the boundary of the spherical object.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# Get markup node from scene\npointListNode = slicer.util.getNode(\"F\")\n\nfrom scipy.optimize import least_squares\nimport numpy\n\ndef fit_sphere_least_squares(x_values, y_values, z_values, initial_parameters, bounds=((-numpy.inf, -numpy.inf, -numpy.inf, -numpy.inf),(numpy.inf, numpy.inf, numpy.inf, numpy.inf))):\n  \"\"\"\n  Source: https://github.com/thompson318/scikit-surgery-sphere-fitting/blob/master/sksurgeryspherefitting/algorithms/sphere_fitting.py\n  Uses scipy's least squares optimisor to fit a sphere to a set\n  of 3D Points\n  :return: x: an array containing the four fitted parameters\n  :return: ier: int An integer flag. If it is equal to 1, 2, 3 or 4, the\n          solution was found.\n  :param: (x,y,z) three arrays of equal length containing the x, y, and z\n          coordinates.\n  :param: an array containing four initial values (centre, and radius)\n  \"\"\"\n  return least_squares(_calculate_residual_sphere, initial_parameters, bounds=bounds, method=\"trf\", jac=\"3-point\", args=(x_values, y_values, z_values))\n\ndef _calculate_residual_sphere(parameters, x_values, y_values, z_values):\n  \"\"\"\n  Source: https://github.com/thompson318/scikit-surgery-sphere-fitting/blob/master/sksurgeryspherefitting/algorithms/sphere_fitting.py\n  Calculates the residual error for an x,y,z coordinates, fitted\n  to a sphere with centre and radius defined by the parameters tuple\n  :return: The residual error\n  :param: A tuple of the parameters to be optimised, should contain [x_centre, y_centre, z_centre, radius]\n  :param: arrays containing the x,y, and z coordinates.\n  \"\"\"\n  #extract the parameters\n  x_centre, y_centre, z_centre, radius = parameters\n  #use numpy's sqrt function here, which works by element on arrays\n  distance_from_centre = numpy.sqrt((x_values - x_centre)**2 + (y_values - y_centre)**2 + (z_values - z_centre)**2)\n  return distance_from_centre - radius\n\n# Fit a sphere to the markups fidicual points\nmarkupsPositions = slicer.util.arrayFromMarkupsControlPoints(pointListNode)\nimport numpy as np\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel Package with CMake\nDESCRIPTION: This snippet uses the `find_package` command to locate the SlicerExecutionModel package. It then includes the package's use file, which contains necessary definitions and configurations. The SlicerExecutionModel is required for the module to integrate correctly with the Slicer environment.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MedianImageFilter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Building CLI using SEMMacroBuildCLI\nDESCRIPTION: Uses the SEMMacroBuildCLI macro to build the CLI (Command Line Interface) for the module. Specifies the module name, logo header, and target libraries. Depends on ITK.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/SubtractScalarVolumes/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/ITKLogo.h\n  TARGET_LIBRARIES ${ITK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Installing Python Scripts Using ctkMacroCompilePythonScript in CMake\nDESCRIPTION: This CMake code snippet uses the ctkMacroCompilePythonScript macro to compile and install Python scripts related to the Extension Wizard. It specifies the target name, the list of scripts to compile, the destination directory in the build tree, and the installation directory. The NO_INSTALL_SUBDIR option prevents the creation of a subdirectory within the installation directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Scripts/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n  # Install Python libexec scripts\n  set(Slicer_LIBEXEC_PYTHON_SCRIPTS\n    ExtensionWizard.py\n    )\n\n  ctkMacroCompilePythonScript(\n    TARGET_NAME ExecScripts\n    SCRIPTS \"${Slicer_LIBEXEC_PYTHON_SCRIPTS}\"\n    DESTINATION_DIR ${Slicer_BINARY_DIR}/libexec\n    INSTALL_DIR ${Slicer_INSTALL_LIBEXEC_DIR}\n    NO_INSTALL_SUBDIR\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Output Directories CMake\nDESCRIPTION: Sets the output directories for different types of build artifacts. It defines where executables, libraries, and archives are placed after the build process.  Uses `Slicer_BIN_DIR` and `Slicer_LIB_DIR`.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_57\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${Slicer_BINARY_DIR}/${Slicer_BIN_DIR})\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${Slicer_BINARY_DIR}/${Slicer_BIN_DIR})\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${Slicer_BINARY_DIR}/${Slicer_LIB_DIR})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Documentation Building\nDESCRIPTION: This snippet configures the build process for documentation using Doxygen. It defines an option to enable or disable documentation building and sets up related variables and dependencies if Doxygen is found.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_29\n\nLANGUAGE: cmake\nCODE:\n```\noption(Slicer_BUILD_DOCUMENTATION \"Build documentation (Doxygen, sphinx, ...)\" ON)\nmark_as_advanced(Slicer_BUILD_DOCUMENTATION)\nmark_as_superbuild(Slicer_BUILD_DOCUMENTATION)\n\nif(Slicer_BUILD_DOCUMENTATION)\n  find_package(Doxygen QUIET)\n\n  if(DOXYGEN_DOT_FOUND)\n    mark_as_superbuild(DOXYGEN_EXECUTABLE)\n\n    set(DOCUMENTATION_ARCHIVES_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}\n     CACHE PATH \"Where documentation archives should be stored\")\n    mark_as_advanced(DOCUMENTATION_ARCHIVES_OUTPUT_DIRECTORY)\n    mark_as_superbuild(DOCUMENTATION_ARCHIVES_OUTPUT_DIRECTORY)\n\n    option(DOCUMENTATION_TARGET_IN_ALL \"Include the custom target for building documentation in 'all'\" OFF)\n    mark_as_advanced(DOCUMENTATION_TARGET_IN_ALL)\n    mark_as_superbuild(DOCUMENTATION_TARGET_IN_ALL)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories in CMake\nDESCRIPTION: Adds subdirectories for Logic, SubjectHierarchyPlugins, and Widgets, which are likely to contain the source code and CMakeLists.txt files for these components of the module. These are essential for organizing the module's structure.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Logic)\nadd_subdirectory(SubjectHierarchyPlugins)\nadd_subdirectory(Widgets)\n```\n\n----------------------------------------\n\nTITLE: Iterate FiberBundle Streamline Points in Slicer (Python)\nDESCRIPTION: This code snippet demonstrates how to access and iterate over the points of each streamline in a FiberBundle using numpy arrays within 3D Slicer. It retrieves the point data and line cell IDs from the FiberBundle's PolyData, then iterates through each line, extracting the corresponding point indices and the 3D coordinates for those points. `slicer.util.arrayFromModelPoints` is used to create a numpy array from the model points.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/tractography.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom vtk.util.numpy_support import vtk_to_numpy\n\nfb = getNode(\"FiberBundle_F\") # <- fill in node ID here\n\n# get point data as 1d array\npoints = slicer.util.arrayFromModelPoints(fb)\n\n# get line cell ids as 1d array\nline_ids = vtk_to_numpy(fb.GetPolyData().GetLines().GetData())\n\n# VTK cell ids are stored as\n#   [ N0 c0_id0 ... c0_id0\n#     N1 c1_id0 ... c1_idN1 ]\n# so we need to\n# - read point count for each line (cell)\n# - grab the ids in that range from `line_ids` array defined above\n# - index the `points` array by those ids\ncur_idx = 1\nfor _ in range(pd.GetLines().GetNumberOfCells()):\n  # - read point count for this line (cell)\n  count = lines[cur_idx - 1]\n  # - grab the ids in that range from `lines`\n  index_array = line_ids[ cur_idx : cur_idx + count]\n  # update to the next range\n  cur_idx += count + 1\n  # - index the point array by those ids\n  line_points = points[index_array]\n  # do work here\n```\n\n----------------------------------------\n\nTITLE: Defining target libraries for the module in CMake\nDESCRIPTION: This snippet defines the list of target libraries that the module depends on. These libraries are linked with the module during the build process. Includes ITK, JsonCpp, MRML and vtkSlicerMarkupsModuleMRML.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/MRML/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  ${ITK_LIBRARIES}\n  ${JsonCpp_LIBRARY}\n  ${MRML_LIBRARIES}\n  vtkSlicerMarkupsModuleMRML\n  )\n```\n\n----------------------------------------\n\nTITLE: Hanging Protocol for PET/CT - Python\nDESCRIPTION: This code defines a function to set up a hanging protocol for PET/CT images using Python in 3D Slicer. It hardens transforms on the images, sets window/level and colormap, fuses PET/CT images in slice views, and displays PET/CT images in 3D.  It then registers a keyboard shortcut (Ctrl+9) to activate the function. Requires qt.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ndef useHangingProtocolPetCt():\n    ctImage = None\n    petImage = None\n\n    shNode = slicer.vtkMRMLSubjectHierarchyNode.GetSubjectHierarchyNode(slicer.mrmlScene)\n    petColor = slicer.mrmlScene.GetFirstNodeByName('PET-Heat')\n    for imageNode in slicer.util.getNodesByClass('vtkMRMLScalarVolumeNode'):\n        # Harden any transform (in case the image is stored non-uniform spacing, etc.\n        # hardening the acquisition transforms creates a single Cartesian volume)\n        imageNode.HardenTransform()\n\n        # Set window/level and colormap for recognized image types\n        imageItem = shNode.GetItemByDataNode(imageNode)\n        modality = shNode.GetItemAttribute(imageItem, 'DICOM.Modality')\n        if modality == \"CT\":\n            ctImage = imageNode\n            ctImage.GetVolumeDisplayNode().SetAndObserveColorNodeID(petColor.GetID())\n            slicer.modules.volumes.logic().ApplyVolumeDisplayPreset(ctImage.GetVolumeDisplayNode(), \"CT_ABDOMEN\")\n        elif modality == \"PT\":\n            petImage = imageNode\n            petImage.GetVolumeDisplayNode().SetAndObserveColorNodeID(petColor.GetID())\n            petImage.GetVolumeDisplayNode().SetWindowLevelMinMax(0, 20)\n\n    # Set up view layout and content\n    slicer.app.layoutManager().setLayout(slicer.vtkMRMLLayoutNode.SlicerLayoutFourUpView)\n    slicer.util.setSliceViewerLayers(background=ctImage, foreground=petImage, foregroundOpacity=0.3, fit=True)\n\n    # Show the PET image in 3D view using volume rendering\n    vrLogic = slicer.modules.volumerendering.logic()\n    vrDisplayNode = vrLogic.CreateDefaultVolumeRenderingNodes(petImage)\n    vrDisplayNode.SetVisibility(True)\n    # Use the same window/level and colormap settings for volume rendering as for slice display\n    vrDisplayNode.SetFollowVolumeDisplayNode(True)\n\n    # Show slice views in 3D view\n    layoutManager = slicer.app.layoutManager()\n    for sliceViewName in layoutManager.sliceViewNames():\n        controller = layoutManager.sliceWidget(sliceViewName).sliceController()\n        controller.setSliceVisible(True)\n\n    # Center and fit displayed content in 3D view\n    layoutManager = slicer.app.layoutManager()\n    threeDWidget = layoutManager.threeDWidget(0)\n    threeDView = threeDWidget.threeDView()\n    threeDView.rotateToViewAxis(3)  # look from anterior direction\n    threeDView.resetFocalPoint()  # reset the 3D view cube size and center it\n    threeDView.resetCamera()  # reset camera zoom\n\n    return [ctImage, petImage]\n\n# Register keyboard shortcut\nshortcut = qt.QShortcut(slicer.util.mainWindow())\nshortcut.setKey(qt.QKeySequence(\"Ctrl+9\"))\nshortcut.connect( \"activated()\", useHangingProtocolPetCt)\n```\n\n----------------------------------------\n\nTITLE: Building Scripted Module - DICOM - CMake\nDESCRIPTION: This snippet uses the `slicerMacroBuildScriptedModule` macro to build the DICOM module. It passes the module name, Python scripts, and resources as arguments.  `WITH_GENERIC_TESTS` enables generic testing for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOM/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroBuildScriptedModule(\n  NAME ${MODULE_NAME}\n  SCRIPTS ${MODULE_PYTHON_SCRIPTS}\n  RESOURCES ${MODULE_PYTHON_RESOURCES}\n  WITH_GENERIC_TESTS\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Python Subdirectory with CMake\nDESCRIPTION: This CMake command includes the specified subdirectory, 'Python', into the current CMake project.  It enables CMake to process the CMakeLists.txt file found within the 'Python' directory, incorporating any defined targets, variables, and functions into the overall build system.  This is essential for organizing projects with modular components.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/ScriptedSegmentEditorEffect/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Python)\n```\n\n----------------------------------------\n\nTITLE: Change View Axis Labels - Python\nDESCRIPTION: This snippet changes the axis labels of a 3D view. It retrieves the 'vtkMRMLViewNode' for the first 3D view and then iterates through a list of labels, setting each label for the corresponding axis. The labels list must be in the order +X, -X, +Y, -Y, +Z, -Z.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nlabels = [\"x\", \"X\", \"y\", \"Y\", \"z\", \"Z\"]\nviewNode = slicer.app.layoutManager().threeDWidget(0).mrmlViewNode()\n# for slice view:\n# viewNode = slicer.app.layoutManager().sliceWidget(\"Red\").mrmlSliceNode()\nfor index, label in enumerate(labels):\n  viewNode.SetAxisLabel(index, label)\n```\n\n----------------------------------------\n\nTITLE: Compiling Python Scripts and Resources\nDESCRIPTION: Compiles the Python scripts and resources into a Qt scripted module using the `ctkMacroCompilePythonScript` macro. This macro likely handles the details of packaging the Python scripts and UI files into a format that can be loaded and executed by the Slicer application.  It specifies the target name, the scripts and resources to include, and the destination directory for the compiled module. The destination is within the binary directory and the installation directory for Qt scripted modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Applications/SlicerApp/Testing/Python/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nctkMacroCompilePythonScript(\n    TARGET_NAME ApplicationSelfTests\n    SCRIPTS \"${KIT_PYTHON_SCRIPTS}\"\n    RESOURCES \"${KIT_PYTHON_RESOURCES}\"\n    DESTINATION_DIR ${Slicer_BINARY_DIR}/${Slicer_QTSCRIPTEDMODULES_LIB_DIR}\n    INSTALL_DIR ${Slicer_INSTALL_QTSCRIPTEDMODULES_LIB_DIR}\n    NO_INSTALL_SUBDIR\n    )\n```\n\n----------------------------------------\n\nTITLE: Building CLI with SEMMacroBuildCLI\nDESCRIPTION: Uses the SEMMacroBuildCLI macro to build the command-line interface (CLI) for the module. The macro takes the module name, logo header, and target libraries as arguments. Requires the SlicerExecutionModel package.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CastScalarVolume/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/ITKLogo.h\n  TARGET_LIBRARIES ${ITK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Executing Python script from file in 3D Slicer console\nDESCRIPTION: This snippet demonstrates how to execute a Python script from a file within the 3D Slicer console.  It reads the content of the file specified by `filePath` and executes it in the current environment, allowing interaction with global variables defined in the script.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/batch.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\nfilePath = \"/data/myscript.py\"\n\nexec(open(filePath).read())\n\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Performing Sanity Checks\nDESCRIPTION: This code snippet performs several sanity checks to prevent common build errors. It includes modules to prevent directories with too many characters on Windows, prevent in-source builds, prevent in-build installs, and prevent directories with spaces.  The checks are conditioned on the platform.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n  set(${PROJECT_NAME}_ROOT_DIR_MAX_LENGTH 40)\n  if(NOT ${PROJECT_NAME}_SUPERBUILD)\n    string(LENGTH ${Slicer_BINARY_INNER_SUBDIR} _inner_subdir_length)\n    math(EXPR ${PROJECT_NAME}_ROOT_DIR_MAX_LENGTH \"${${PROJECT_NAME}_ROOT_DIR_MAX_LENGTH} + ${_inner_subdir_length}\")\n  endif()\n  include(PreventDirWithTooManyChars)\nendif()\ninclude(PreventInSourceBuilds)\ninclude(PreventInBuildInstalls)\ninclude(PreventDirWithSpaces)\nmark_as_superbuild(${PROJECT_NAME}_SKIP_DIR_WITH_SPACES_CHECK:BOOL)\n```\n\n----------------------------------------\n\nTITLE: Set Up Custom Units in Slice View Ruler in Slicer (Python)\nDESCRIPTION: This script configures custom units, specifically for microscopy or micro-CT images, in the slice view ruler in 3D Slicer. It removes existing ruler scale presets and adds new presets for nanometers and micrometers. This allows users to display and measure distances in appropriate units for high-resolution imaging.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nlm = slicer.app.layoutManager()\nfor sliceViewName in lm.sliceViewNames():\n  sliceView = lm.sliceWidget(sliceViewName).sliceView()\n  displayableManager = sliceView.displayableManagerByClassName(\"vtkMRMLRulerDisplayableManager\")\n  displayableManager.RemoveAllRulerScalePresets()\n  displayableManager.AddRulerScalePreset(   0.001, 5, 2, \"nm\", 1000.0)\n  displayableManager.AddRulerScalePreset(   0.010, 5, 2, \"nm\", 1000.0)\n  displayableManager.AddRulerScalePreset(   0.100, 5, 2, \"nm\", 1000.0)\n  displayableManager.AddRulerScalePreset(   0.500, 5, 1, \"nm\", 1000.0)\n  displayableManager.AddRulerScalePreset(   1.0,   5, 2, \"um\",    1.0)\n  displayableManager.AddRulerScalePreset(   5.0,   5, 1, \"um\",    1.0)\n  displayableManager.AddRulerScalePreset(  10.0,   5, 2, \"um\",    1.0)\n  displayableManager.AddRulerScalePreset(  50.0,   5, 1, \"um\",    1.0)\n  displayableManager.AddRulerScalePreset( 100.0,   5, 2, \"um\",    1.0)\n  displayableManager.AddRulerScalePreset( 500.0,   5, 1, \"um\",    1.0)\n  displayableManager.AddRulerScalePreset(1000.0,   5, 2, \"mm\",    0.001)\n```\n\n----------------------------------------\n\nTITLE: Conditional Installation of Development Files using CMake\nDESCRIPTION: This CMake snippet conditionally installs development files based on the value of `${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT`. If the variable is not set or is false, it installs the `Testing` directory, excluding specific file patterns such as `.cxx`, `.svn`, `.tcl`, and `CMakeLists.txt` files.  The installation is done to `share/${PROJECT_NAME}` under the `Development` component.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Core/CMakeLists.txt#_snippet_26\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT)\n  set(${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT ON)\nendif()\nif(NOT ${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT)\n  install(DIRECTORY\n    Testing\n    DESTINATION share/${PROJECT_NAME} COMPONENT Development\n    PATTERN \"*.cxx\" EXCLUDE\n    PATTERN \".svn\" EXCLUDE\n    PATTERN \"*.tcl\" EXCLUDE\n    PATTERN \"CMakeLists.txt\" EXCLUDE\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configure CPack Installation\nDESCRIPTION: Configures the CPack installation process by appending the extension's binary directory and the external projects to the list of projects to install. It then includes the Slicer extension configuration and CPack scripts to generate the installation package.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Extensions/SuperBuild/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPACK_INSTALL_CMAKE_PROJECTS \"${CMAKE_BINARY_DIR};${EXTENSION_NAME};ALL;/\")\nlist(APPEND CPACK_INSTALL_CMAKE_PROJECTS \"${${EXTENSION_NAME}_CPACK_INSTALL_CMAKE_PROJECTS}\")\ninclude(${Slicer_EXTENSION_GENERATE_CONFIG})\ninclude(${Slicer_EXTENSION_CPACK})\n```\n\n----------------------------------------\n\nTITLE: Set Module MOC Source Files in CMake\nDESCRIPTION: Specifies the header files that need to be processed by the Meta-Object Compiler (MOC). MOC generates code that is needed for Qt's signals and slots mechanism. These header files define the Qt classes used within the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Sequences/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_MOC_SRCS\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  qSlicer${MODULE_NAME}Reader.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Python Unittest\nDESCRIPTION: This command adds a Python unittest to the Slicer build system. It takes the script path and optional Slicer arguments as input. The `SCRIPT` parameter specifies the Python script to execute as a test. The `SLICER_ARGS` parameter allows passing command-line arguments to the Slicer application when running the test.  `--disable-cli-modules` argument disables loading CLI modules to speed up the test.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Testing/Python/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nslicer_add_python_unittest(SCRIPT AddManyMarkupsFiducialTest.py\n                           SLICER_ARGS --disable-cli-modules)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nslicer_add_python_unittest(SCRIPT NeurosurgicalPlanningTutorialMarkupsSelfTest.py)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nslicer_add_python_unittest(SCRIPT MarkupsInCompareViewersSelfTest.py)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nslicer_add_python_unittest(SCRIPT MarkupsInViewsSelfTest.py\n                           SLICER_ARGS --disable-cli-modules)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nslicer_add_python_test(SCRIPT MarkupsCurveMeasurementsTest.py\n                       SLICER_ARGS --disable-cli-modules)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nslicer_add_python_test(SCRIPT MarkupsCurveCoordinateFrameTest.py\n                       SLICER_ARGS --disable-cli-modules)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nslicer_add_python_test(SCRIPT MarkupsMeasurementsTest.py\n                       SLICER_ARGS --disable-cli-modules)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nslicer_add_python_unittest(SCRIPT PluggableMarkupsSelfTest.py)\n```\n\n----------------------------------------\n\nTITLE: Building the Library CMake\nDESCRIPTION: This snippet builds the MRMLLogic library. It sets the library name, defines the source files, creates the library using `add_library`, specifies the libraries to link against using `target_link_libraries`, and applies any user-defined properties to the library target.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Logic/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(lib_name ${PROJECT_NAME})\n\nset(srcs ${MRMLLogic_SRCS})\nadd_library(${lib_name} ${srcs})\n\nset(libs\n  MRMLCore\n  vtkTeem\n  RemoteIO\n  ${VTK_LIBRARIES}\n  )\n\ntarget_link_libraries(${lib_name} ${libs})\n\n# Apply user-defined properties to the library target.\nif(Slicer_LIBRARY_PROPERTIES)\n  set_target_properties(${lib_name} PROPERTIES ${Slicer_LIBRARY_PROPERTIES})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Module Widgets\nDESCRIPTION: This snippet uses the `SlicerMacroBuildModuleWidgets` macro to build the module's widgets. It passes the previously defined variables (NAME, EXPORT_DIRECTIVE, INCLUDE_DIRECTORIES, SRCS, MOC_SRCS, UI_SRCS, TARGET_LIBRARIES, RESOURCES) to the macro, which then performs the necessary steps to compile and link the widgets.  `WRAP_PYTHONQT` option will trigger the wrapping of the classes for Python usage.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/Widgets/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nSlicerMacroBuildModuleWidgets(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  UI_SRCS ${${KIT}_UI_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  RESOURCES ${${KIT}_RESOURCES}\n  WRAP_PYTHONQT\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Function to Add Module Tests in CMake\nDESCRIPTION: This function `add_module_test` defines a standardized test setup using `ExternalData_add_test`. It creates tests with names incorporating orientation (Axial, Coronal, Sagittal). Each test runs the module executable and compares the output with a baseline file.  The `${SEM_LAUNCH_COMMAND}` and `--compare` are used for running and comparing the module output. Input is taken from `${INPUT}/fixed.nrrd` and the output is written to `${TEMP}/${testname}.nrrd`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/OrientScalarVolume/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(add_module_test orientation)\n  set(testname ${CLP}Test${orientation})\n  ExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n    NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n    --compare DATA{${BASELINE}/${testname}.nrrd}\n    ${TEMP}/${testname}.nrrd\n    ModuleEntryPoint\n    --orientation ${orientation} DATA{${INPUT}/fixed.nrrd} ${TEMP}/${testname}.nrrd\n    )\n  set_property(TEST ${testname} PROPERTY LABELS ${CLP})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Build Module Widgets - CMake\nDESCRIPTION: Calls the SlicerMacroBuildModuleWidgets macro to configure and build the module widgets.  This macro encapsulates the standard steps for building a Slicer module's widgets.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/Widgets/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nSlicerMacroBuildModuleWidgets(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  UI_SRCS ${${KIT}_UI_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  RESOURCES ${${KIT}_RESOURCES}\n  WRAP_PYTHONQT\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files and Target Libraries in CMake\nDESCRIPTION: This snippet defines the source files and target libraries needed for the module.  It concatenates the instantiator source files and displayable manager source files into a single list of source files. It also specifies the target libraries, including MRML libraries and the vtkSlicerSegmentationsModuleMRML library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/MRMLDM/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  ${displayable_manager_instantiator_SRCS}\n  ${displayable_manager_SRCS}\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  ${MRML_LIBRARIES}\n  vtkSlicerSegmentationsModuleMRML\n  )\n```\n\n----------------------------------------\n\nTITLE: Set Test Sources in CMake\nDESCRIPTION: This snippet defines the source files used for testing the Slicer module.  The `set` command assigns a list of C++ source files (e.g., `vtkSlicerColorLogicTest1.cxx`) to the variable `KIT_TEST_SRCS`.  These sources are used by subsequent testing macros.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/Logic/Testing/Cxx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT_TEST_SRCS\n  vtkSlicerColorLogicTest1.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Building CLI with SEMMacroBuildCLI CMake\nDESCRIPTION: This snippet uses the `SEMMacroBuildCLI` macro to build a command-line interface for the module. It specifies the module name, logo header, and target libraries (ITK).\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/HistogramMatching/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/ITKLogo.h\n  TARGET_LIBRARIES ${ITK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Using a Default Generator for Path Values in Python\nDESCRIPTION: This code snippet illustrates how to use a generator function to provide a default value for a `Path` parameter within a `parameterNodeWrapper` class. The `defaultIcon` function dynamically creates a path based on the module's location within the Slicer environment. Dependencies include `os`, `typing.Annotated`, `slicer`, `slicer.parameterNodeWrapper` and `pathlib`. The `Default` class from `slicer.parameterNodeWrapper` is used to specify the generator.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/parameter_nodes/defaults.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom typing import Annotated\nimport slicer\nfrom slicer.parameterNodeWrapper import parameterNodeWrapper, Default\n\ndef defaultIcon():\n    # this will not change, but it can't be queried until this module is loaded\n    return pathlib.Path(os.path.join(\n        os.path.dirname(slicer.util.modulePath(MyModule.__name__)),\n        'Resources',\n        'Icons',\n        'defaultIcon.png')\n    )\n\n\n@parameterNodeWrapper\nclass PipelineCreatorMk2ParameterNode:\n    icon: Annotated[pathlib.Path, Default(generator=defaultIcon)]\n```\n\n----------------------------------------\n\nTITLE: Setting Project Name and Export Directive in CMake\nDESCRIPTION: This snippet sets the project name, defines the export directive used to control symbol visibility, and sets include directories based on another module. This ensures correct linking and usage of the module's classes.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/Logic/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleLogic)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_COLORS_MODULE_LOGIC_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSlicer${MODULE_NAME}ModuleMRML_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Building C++ CLI Module\nDESCRIPTION: Uses the `SEMMacroBuildCLI` macro to build a C++ CLI module named `CLIModule4Test`. It specifies the module's folder, logo header, and indicates that it should not be installed.  `SlicerExecutionModel` is a dependency.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCLI/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME CLIModule4Test\n  FOLDER \"Core-Base\"\n  LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/ITKLogo.h\n  NO_INSTALL\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenGL Preference (Unix)\nDESCRIPTION: This snippet configures the OpenGL preference on Unix systems (excluding macOS) to use the legacy OpenGL implementation. This is done by setting the `OpenGL_GL_PREFERENCE` variable.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_39\n\nLANGUAGE: cmake\nCODE:\n```\nif(UNIX AND NOT APPLE)\n  set(OpenGL_GL_PREFERENCE \"LEGACY\")\n  mark_as_superbuild(OpenGL_GL_PREFERENCE:STRING)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Measuring Distance of Points from Surface in Slicer (Python)\nDESCRIPTION: This example calculates the shortest distance between a set of points (defined by a markups point list node named 'F') and a surface (defined by a model node named 'mymodel'). It transforms the model's polydata to world coordinates, computes distances using `vtkImplicitPolyDataDistance`, and stores the results in a table. The result table is then displayed in the 3D Slicer layout.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/models.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npointListNode = getNode(\"F\")\nmodelNode = getNode(\"mymodel\")\n\n# Transform model polydata to world coordinate system\nif modelNode.GetParentTransformNode():\n  transformModelToWorld = vtk.vtkGeneralTransform()\n  slicer.vtkMRMLTransformNode.GetTransformBetweenNodes(modelNode.GetParentTransformNode(), None, transformModelToWorld)\n  polyTransformToWorld = vtk.vtkTransformPolyDataFilter()\n  polyTransformToWorld.SetTransform(transformModelToWorld)\n  polyTransformToWorld.SetInputData(modelNode.GetPolyData())\n  polyTransformToWorld.Update()\n  surface_World = polyTransformToWorld.GetOutput()\nelse:\n  surface_World = modelNode.GetPolyData()\n\n# Create arrays to store results\nindexCol = vtk.vtkIntArray()\nindexCol.SetName(\"Index\")\nlabelCol = vtk.vtkStringArray()\nlabelCol.SetName(\"Name\")\ndistanceCol = vtk.vtkDoubleArray()\ndistanceCol.SetName(\"Distance\")\n\ndistanceFilter = vtk.vtkImplicitPolyDataDistance()\ndistanceFilter.SetInput(surface_World)\nnOfControlPoints = pointListNode.GetNumberOfControlPoints()\nfor i in range(0, nOfControlPoints):\n  point_World = [0,0,0]\n  pointListNode.GetNthControlPointPositionWorld(i, point_World)\n  closestPointOnSurface_World = [0,0,0]\n  closestPointDistance = distanceFilter.EvaluateFunctionAndGetClosestPoint(point_World, closestPointOnSurface_World)\n  indexCol.InsertNextValue(i)\n  labelCol.InsertNextValue(pointListNode.GetNthControlPointLabel(i))\n  distanceCol.InsertNextValue(closestPointDistance)\n\n# Create a table from result arrays\nresultTableNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLTableNode\", \"Points from surface distance\")\nresultTableNode.AddColumn(indexCol)\nresultTableNode.AddColumn(labelCol)\nresultTableNode.AddColumn(distanceCol)\n\n# Show table in view layout\nslicer.app.layoutManager().setLayout(slicer.vtkMRMLLayoutNode.SlicerLayoutFourUpTableView)\nslicer.app.applicationLogic().GetSelectionNode().SetReferenceActiveTableID(resultTableNode.GetID())\nslicer.app.applicationLogic().PropagateTableSelection()\n```\n\n----------------------------------------\n\nTITLE: Query and Retrieve DICOM data using ctkDICOMScheduler (Python)\nDESCRIPTION: This snippet demonstrates how to query and retrieve data from a PACS using classic DIMSE DICOM networking with the experimental ctkDICOMScheduler. It sets up a receiver class to handle job progress, success, and failure events, defining methods to query patients and studies, and retrieve study data based on specified parameters.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/dicom.md#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nclass Receiver(qt.QObject):\n  def __init__(self, scheduler):\n    super().__init__()\n    self.scheduler = scheduler\n    self.scheduler.progressJobDetail.connect(self.onProgressDetails)\n    self.scheduler.jobFinished.connect(self.onJobFinished)\n    self.scheduler.jobFailed.connect(self.onJobFailed)\n\n  def startQueryRetrieve(self, parameters):\n    self.scheduler.setFilters(parameters)\n    self.scheduler.queryPatients()\n\n  def onJobFinished(self, details):\n    for detail in details:\n      if detail.jobType() == ctk.ctkDICOMJobResponseSet.QueryPatients:\n        print (\"Query patients success. Connection : \", detail.connectionName())\n      elif detail.jobType() == ctk.ctkDICOMJobResponseSet.QueryStudies:\n        patientID = detail.patientID()\n        print (\"Query studies success for patientID: \", patientID, \". Connection : \", detail.connectionName())\n      elif detail.jobType() == ctk.ctkDICOMJobResponseSet.RetrieveStudy:\n        patientID = detail.patientID()\n        studyInstanceUID = detail.studyInstanceUID()\n        print (\"Retrieve studies success for studyInstanceUID: \", studyInstanceUID, \" (patientID: \",patientID, \"). Connection : \", detail.connectionName())\n\n  def onJobFailed(self, details):\n    for detail in details:\n      if detail.jobType() == ctk.ctkDICOMJobResponseSet.QueryPatients:\n        print (\"Query patients failed. Connection : \", detail.connectionName())\n      elif detail.jobType() == ctk.ctkDICOMJobResponseSet.QueryStudies:\n        patientID = detail.patientID()\n        print (\"Query studies failed for patientID: \", patientID, \". Connection : \", detail.connectionName())\n      elif detail.jobType() == ctk.ctkDICOMJobResponseSet.RetrieveStudy:\n        patientID = detail.patientID()\n        studyInstanceUID = detail.studyInstanceUID()\n        print (\"Retrieve studies failed for studyInstanceUID: \", studyInstanceUID, \" (patientID: \", patientID, \"). Connection : \", detail.connectionName())\n\n  def onProgressDetails(self, details):\n    for detail in details:\n      if detail.jobType() == ctk.ctkDICOMJobResponseSet.QueryPatients:\n        patientIDs = detail.queriedPatientIDs()\n        for patientID in patientIDs:\n          print (\"Starting studies query for patient: \", patientID, \". Connection : \", detail.connectionName())\n          scheduler.queryStudies(patientID)\n      elif detail.jobType() == ctk.ctkDICOMJobResponseSet.QueryStudies:\n        studyInstanceUIDs = detail.queriedStudyInstanceUIDs()\n        for studyInstanceUID in studyInstanceUIDs:\n          patientItem = slicer.dicomDatabase.patientForStudy(studyInstanceUID)\n          patientID = slicer.dicomDatabase.fieldForPatient(\"PatientID\", patientItem)\n          print (\"Starting studies retrieve for studyInstanceUID: \", studyInstanceUID, \" (patientID: \",patientID, \"). Connection : \", detail.connectionName())\n          scheduler.retrieveStudy(patientID, studyInstanceUID)\n\n\n# Add a new DICOM server\nserver = ctk.ctkDICOMServer()\nserver.connectionName = \"test\"\nserver.callingAETitle = \"SLICER\"\nserver.calledAETitle = \"ANYAE\"\nserver.host = \"dicomserver.co.uk\"\nserver.port = 104\nserver.retrieveProtocol = ctk.ctkDICOMServer.CGET\n\nscheduler = ctk.ctkDICOMScheduler()\nscheduler.setDicomDatabase(slicer.dicomDatabase)\nscheduler.addServer(server)\n\nreceiver = Receiver(scheduler)\n\n# Set the filters for the query\nnDays = 325\nendDate = qt.QDate().currentDate()\nstartDate = endDate.addDays(-nDays)\nparameters = {\n  \"ID\": \"PAT020\",\n  #\"Name\": \"Name\",\n  #\"Study\": \"Study description\",\n  #\"Series\": \"Series description\",\n  #\"Modalities\": [\"CT\", \"MR\"],\n  \"StartDate\": startDate.toString(\"yyyyMMdd\"),\n  \"EndDate\": endDate.toString(\"yyyyMMdd\")\n}\n\nreceiver.startQueryRetrieve(parameters)\n```\n\n----------------------------------------\n\nTITLE: Create Markups Plane JSON (Outside Slicer) - Python\nDESCRIPTION: This code snippet demonstrates how to create a markup plane JSON file outside of Slicer. It defines the plane's center, normal vector, and bounds, then uses the `numpy` and `json` modules to construct the JSON data. Requires the `numpy` and `json` modules. The output is a JSON file containing the plane's properties, suitable for loading into Slicer.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\noutputFileName = \"path/to/MyPlane.mrk.json\"\ncenter = [3.6764886856933536, -52.2593679682938, 41.715845278879044]\nnormal = [-0.9552783445937983, 0.2957081066696218, 0.0]\nplane_bounds = [-50.0, 50.0, -50.0, 50.0]\n\nimport numpy as np\nimport json\n\nnormal /= np.linalg.norm(normal)\n\n# Choose an arbitrary vector direction (x) that is not parallel to the normal\naxis1 = np.array([1, 0, 0])\nif np.linalg.norm(np.cross(normal, axis1)) < 0.1:\n  # Almost parallel to the x axis, use another direction (y)\n  axis1 = np.array([0, 1, 0])\n\n# Calculate a third axis of the plane coordinate system (orthogonal to the other two)\naxis2 = np.cross(normal, axis1)\naxis2 /= np.linalg.norm(axis2)\n\n# Get axis1 that is orthogonal to axis2 and normal\naxis1 = np.cross(axis2, normal)\naxis1 /= np.linalg.norm(axis1)\n\n# Construct the rotation-translation matrix baseToNode\nbase_to_node_matrix = np.eye(4)\nbase_to_node_matrix[0:3, 0] = axis1\nbase_to_node_matrix[0:3, 1] = axis2\nbase_to_node_matrix[0:3, 2] = normal\n\ndata = {\n    \"@schema\": \"https://raw.githubusercontent.com/slicer/slicer/master/Modules/Loadable/Markups/Resources/Schema/markups-schema-v1.0.3.json#\",\n    \"markups\": [\n        {\n            \"type\": \"Plane\",\n            \"coordinateSystem\": \"LPS\",\n            \"coordinateUnits\": \"mm\",\n            \"planeType\": \"pointNormal\",\n            \"sizeMode\": \"auto\",\n            \"baseToNode\": list(base_to_node_matrix.reshape(16)),\n            \"planeBounds\": plane_bounds,\n            \"controlPoints\": [{ \"id\": \"1\", \"position\": center }]\n        }\n    ]\n}\n\nwith open(outputFileName, \"w\") as outfile:\n  json.dump(data, outfile)\n```\n\n----------------------------------------\n\nTITLE: Compute Oriented Bounding Box - Slicer Python\nDESCRIPTION: This snippet computes the oriented bounding box (OBB) for each segment in a segmentation node and displays the OBB using a markups ROI node. It initializes SegmentStatisticsLogic, enables OBB computation parameters, computes the statistics, and then creates and positions a ROI node for each segment's OBB using the calculated origin, diameter, and direction vectors.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nsegmentationNode = getNode(\"Segmentation\")\n\n# Compute bounding boxes\nimport SegmentStatistics\nsegStatLogic = SegmentStatistics.SegmentStatisticsLogic()\nsegStatLogic.getParameterNode().SetParameter(\"Segmentation\", segmentationNode.GetID())\nsegStatLogic.getParameterNode().SetParameter(\"LabelmapSegmentStatisticsPlugin.obb_origin_ras.enabled\",str(True))\nsegStatLogic.getParameterNode().SetParameter(\"LabelmapSegmentStatisticsPlugin.obb_diameter_mm.enabled\",str(True))\nsegStatLogic.getParameterNode().SetParameter(\"LabelmapSegmentStatisticsPlugin.obb_direction_ras_x.enabled\",str(True))\nsegStatLogic.getParameterNode().SetParameter(\"LabelmapSegmentStatisticsPlugin.obb_direction_ras_y.enabled\",str(True))\nsegStatLogic.getParameterNode().SetParameter(\"LabelmapSegmentStatisticsPlugin.obb_direction_ras_z.enabled\",str(True))\nsegStatLogic.computeStatistics()\nstats = segStatLogic.getStatistics()\n\n# Draw ROI for each oriented bounding box\nimport numpy as np\nfor segmentId in stats[\"SegmentIDs\"]:\n  # Get bounding box\n  obb_origin_ras = np.array(stats[segmentId,\"LabelmapSegmentStatisticsPlugin.obb_origin_ras\"])\n  obb_diameter_mm = np.array(stats[segmentId,\"LabelmapSegmentStatisticsPlugin.obb_diameter_mm\"])\n  obb_direction_ras_x = np.array(stats[segmentId,\"LabelmapSegmentStatisticsPlugin.obb_direction_ras_x\"])\n  obb_direction_ras_y = np.array(stats[segmentId,\"LabelmapSegmentStatisticsPlugin.obb_direction_ras_y\"])\n  obb_direction_ras_z = np.array(stats[segmentId,\"LabelmapSegmentStatisticsPlugin.obb_direction_ras_z\"])\n  # Create ROI\n  segment = segmentationNode.GetSegmentation().GetSegment(segmentId)\n  roi=slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLMarkupsROINode\")\n  roi.SetName(segment.GetName() + \" OBB\")\n  roi.GetDisplayNode().SetHandlesInteractive(False)  # do not let the user resize the box\n  roi.SetSize(obb_diameter_mm)\n  # Position and orient ROI using a transform\n  obb_center_ras = obb_origin_ras+0.5*(obb_diameter_mm[0] * obb_direction_ras_x + obb_diameter_mm[1] * obb_direction_ras_y + obb_diameter_mm[2] * obb_direction_ras_z)\n  boundingBoxToRasTransform = np.row_stack((np.column_stack((obb_direction_ras_x, obb_direction_ras_y, obb_direction_ras_z, obb_center_ras)), (0, 0, 0, 1)))\n  boundingBoxToRasTransformMatrix = slicer.util.vtkMatrixFromArray(boundingBoxToRasTransform)\n  roi.SetAndObserveObjectToNodeMatrix(boundingBoxToRasTransformMatrix)\n```\n\n----------------------------------------\n\nTITLE: Defining RGBA Color Gradient\nDESCRIPTION: Defines a colormap with specific RGBA values. Each line represents a color associated with an index. The format is index, Red, Green, Blue, Alpha.  Alpha is typically 255 for full opacity. These colors are intended to be used for mapping scalar values to a color gradient for visualization purposes.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/Logic/Resources/ColorFiles/DivergingBlueRed.txt#_snippet_0\n\nLANGUAGE: plain text\nCODE:\n```\n0 0 6 50 99 255\n1 1 7 52 102 255\n2 2 8 54 105 255\n3 3 9 56 108 255\n4 4 10 58 111 255\n5 5 11 60 114 255\n6 6 12 62 117 255\n7 7 13 64 120 255\n8 8 14 67 123 255\n9 9 15 69 126 255\n10 10 17 71 129 255\n11 11 18 73 132 255\n12 12 19 75 135 255\n13 13 20 77 138 255\n14 14 21 79 141 255\n15 15 22 81 144 255\n16 16 23 84 147 255\n17 17 24 86 149 255\n18 18 25 88 152 255\n19 19 26 90 155 255\n20 20 28 92 158 255\n21 21 29 94 161 255\n22 22 30 96 164 255\n23 23 31 98 167 255\n24 24 32 100 170 255\n25 25 33 102 172 255\n26 26 35 104 173 255\n27 27 36 106 174 255\n28 28 37 108 175 255\n29 29 39 109 176 255\n30 30 40 111 176 255\n31 31 41 113 177 255\n32 32 43 115 178 255\n33 33 44 117 179 255\n34 34 45 118 180 255\n35 35 47 120 181 255\n36 36 48 122 182 255\n37 37 49 124 183 255\n38 38 51 125 184 255\n39 39 52 127 185 255\n40 40 53 129 185 255\n41 41 55 131 186 255\n42 42 56 132 187 255\n43 43 57 134 188 255\n44 44 59 136 189 255\n45 45 60 138 190 255\n46 46 61 139 191 255\n47 47 63 141 192 255\n48 48 64 143 193 255\n49 49 65 145 194 255\n50 50 67 147 195 255\n51 51 70 148 196 255\n52 52 73 150 197 255\n53 53 76 152 198 255\n54 54 79 154 199 255\n55 55 82 156 200 255\n56 56 85 158 201 255\n57 57 88 160 202 255\n58 58 91 162 203 255\n59 59 94 164 204 255\n60 60 97 166 205 255\n61 61 101 168 206 255\n62 62 104 170 207 255\n63 63 107 172 208 255\n64 64 110 174 209 255\n65 65 113 176 210 255\n66 66 116 178 211 255\n67 67 119 180 213 255\n68 68 122 182 214 255\n69 69 125 184 215 255\n70 70 128 186 216 255\n71 71 132 188 217 255\n72 72 135 190 218 255\n73 73 138 192 219 255\n74 74 141 194 220 255\n75 75 144 196 221 255\n76 76 147 197 222 255\n77 77 149 198 223 255\n78 78 152 200 223 255\n79 79 154 201 224 255\n80 80 157 202 225 255\n81 81 159 203 225 255\n82 82 162 205 226 255\n83 83 164 206 227 255\n84 84 167 207 228 255\n85 85 169 208 228 255\n86 86 171 210 229 255\n87 87 174 211 230 255\n88 88 176 212 230 255\n89 89 179 213 231 255\n90 90 181 215 232 255\n91 91 184 216 232 255\n92 92 186 217 233 255\n93 93 189 218 234 255\n94 94 191 220 235 255\n95 95 194 221 235 255\n96 96 196 222 236 255\n97 97 199 223 237 255\n98 98 201 225 237 255\n99 99 204 226 238 255\n100 100 206 227 239 255\n101 101 209 229 240 255\n102 102 210 229 240 255\n103 103 211 230 240 255\n104 104 213 231 240 255\n105 105 214 231 241 255\n106 106 216 232 241 255\n107 107 217 233 241 255\n108 108 219 233 241 255\n109 109 220 234 242 255\n110 110 222 235 242 255\n111 111 223 236 242 255\n112 112 225 236 243 255\n113 113 226 237 243 255\n114 114 228 238 243 255\n115 115 229 238 243 255\n116 116 231 239 244 255\n117 117 232 240 244 255\n118 118 234 241 244 255\n119 119 235 241 244 255\n120 120 237 242 245 255\n121 121 238 243 245 255\n122 122 240 243 245 255\n123 123 241 244 246 255\n124 124 243 245 246 255\n125 125 244 245 246 255\n126 126 246 246 246 255\n127 127 247 246 246 255\n128 128 247 245 244 255\n129 129 247 244 242 255\n130 130 247 243 240 255\n131 131 248 242 238 255\n132 132 248 240 236 255\n133 133 248 239 234 255\n134 134 248 238 232 255\n135 135 249 237 231 255\n136 136 249 236 229 255\n137 137 249 235 227 255\n138 138 249 234 225 255\n139 139 249 233 223 255\n140 140 250 232 221 255\n141 141 250 231 219 255\n142 142 250 229 217 255\n143 143 250 228 215 255\n144 144 251 227 214 255\n145 145 251 226 212 255\n146 146 251 225 210 255\n147 147 251 224 208 255\n148 148 252 223 206 255\n149 149 252 222 204 255\n150 150 252 221 202 255\n151 151 252 220 200 255\n152 152 253 219 199 255\n153 153 252 216 196 255\n154 154 252 214 193 255\n155 155 251 212 190 255\n156 156 251 210 188 255\n157 157 251 208 185 255\n158 158 250 206 182 255\n159 159 250 204 180 255\n160 160 250 202 177 255\n161 161 249 199 174 255\n162 162 249 197 171 255\n163 163 249 195 169 255\n164 164 248 193 166 255\n165 165 248 191 163 255\n166 166 248 189 161 255\n167 167 247 187 158 255\n168 168 247 185 155 255\n169 169 247 183 153 255\n170 170 246 180 150 255\n171 171 246 178 147 255\n172 172 245 176 144 255\n173 173 245 174 142 255\n174 174 245 172 139 255\n175 175 244 170 136 255\n176 176 244 168 134 255\n177 177 244 166 131 255\n178 178 243 163 128 255\n179 179 242 160 126 255\n180 180 241 158 124 255\n181 181 239 155 122 255\n182 182 238 152 120 255\n183 183 237 150 118 255\n184 184 236 147 116 255\n185 185 235 144 114 255\n186 186 234 142 112 255\n187 187 232 139 110 255\n188 188 231 136 108 255\n189 189 230 133 106 255\n190 190 229 131 104 255\n191 191 228 128 101 255\n192 192 226 125 99 255\n193 193 225 123 97 255\n194 194 224 120 95 255\n195 195 223 117 93 255\n196 196 222 114 91 255\n197 197 221 112 89 255\n198 198 219 109 87 255\n199 199 218 106 85 255\n200 200 217 104 83 255\n201 201 216 101 81 255\n202 202 215 98 79 255\n203 203 214 96 77 255\n204 204 212 93 75 255\n205 205 211 90 74 255\n206 206 209 87 73 255\n207 207 208 84 71 255\n208 208 206 81 70 255\n209 209 205 79 69 255\n210 210 204 76 67 255\n211 211 202 73 66 255\n212 212 201 70 65 255\n213 213 199 67 63 255\n214 214 198 64 62 255\n215 215 197 62 61 255\n216 216 195 59 59 255\n217 217 194 56 58 255\n218 218 192 53 57 255\n219 219 191 50 55 255\n220 220 190 48 54 255\n221 221 188 45 53 255\n222 222 187 42 51 255\n223 223 185 39 50 255\n224 224 184 36 49 255\n225 225 182 33 47 255\n226 226 181 31 46 255\n227 227 180 28 45 255\n228 228 178 25 43 255\n229 229 176 23 42 255\n230 230 173 22 42 255\n231 231 170 21 41 255\n232 232 167 20 41 255\n233 233 164 19 40 255\n234 234 161 18 40 255\n235 235 158 17 39 255\n236 236 155 16 39 255\n237 237 153 16 39 255\n238 238 150 15 38 255\n239 239 147 14 38 255\n240 240 144 13 37 255\n241 241 141 12 37 255\n242 242 138 11 36 255\n243 243 135 10 36 255\n244 244 132 9 35 255\n245 245 129 8 35 255\n246 246 126 7 34 255\n247 247 123 6 34 255\n248 248 120 5 33 255\n249 249 117 4 33 255\n250 250 114 3 32 255\n251 251 111 2 32 255\n252 252 108 1 31 255\n253 253 105 0 31 255\n254 254 103 0 31 255\n```\n\n----------------------------------------\n\nTITLE: Adding MRMLWidgets Library CMake\nDESCRIPTION: This snippet adds the MRMLWidgets library as a target. It specifies the source files, generated files (MOC, UI, QRC), and translation files to be included in the library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/CMakeLists.txt#_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nset(lib_name ${PROJECT_NAME})\nset(targets_to_export ${lib_name})\n\nadd_library(${lib_name}\n  ${MRMLWidgets_SRCS}\n  ${MRMLWidgets_MOC_CXX}\n  ${MRMLWidgets_UI_CXX}\n  ${MRMLWidgets_QRC_CXX}\n  ${QM_OUTPUT_FILES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Resources\nDESCRIPTION: Defines the resource files (.qrc) that contain embedded resources used by the module, such as icons and other assets.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/CropVolume/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_RESOURCES\n  Resources/qSlicer${MODULE_NAME}Module.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Override default scene save dialog (Python)\nDESCRIPTION: This snippet defines a class that can be placed in a scripted module file to override the default scene save dialog. It implements a custom scene save operation. Requires the `slicer` and `qt` modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass MyModuleFileDialog ():\n  \"\"\"This specially named class is detected by the scripted loadable\n  module and is the target for optional drag and drop operations.\n  See: Base/QTGUI/qSlicerScriptedFileDialog.h.\n\n  This class is used for overriding default scene save dialog\n  with simple saving the scene without asking anything.\n  \"\"\"\n\n  def __init__(self,qSlicerFileDialog ):\n    self.qSlicerFileDialog = qSlicerFileDialog\n    qSlicerFileDialog.fileType = \"NoFile\"\n    qSlicerFileDialog.description = \"Save scene\"\n    qSlicerFileDialog.action = slicer.qSlicerFileDialog.Write\n\n  def execDialog(self):\n    # Implement custom scene save operation here.\n    # Return True if saving completed successfully,\n    # return False if saving was cancelled.\n    ...\n    return saved\n```\n\n----------------------------------------\n\nTITLE: Setting ITK Components & Dependencies\nDESCRIPTION: This snippet defines the required ITK components, finds the ITK package, and handles version-specific settings for ITKFactoryRegistration. It also appends ITK libraries and include directories and includes the ITK use file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT ${PROJECT_NAME})\n\n#-----------------------------------------------------------------------------\nset(${KIT}Testing_ITK_COMPONENTS\n  ITKCommon\n  )\nfind_package(ITK 4.6 COMPONENTS ${${KIT}Testing_ITK_COMPONENTS} REQUIRED)\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\nlist(APPEND ITK_LIBRARIES ITKFactoryRegistration)\nlist(APPEND ITK_INCLUDE_DIRS\n  ${ITKFactoryRegistration_INCLUDE_DIRS}\n  )\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files and Resources\nDESCRIPTION: This snippet defines the source files (C++, header), MOC sources (header), UI sources, and resources required to build the module widgets. It specifies the files that need to be compiled, processed by the meta-object compiler, and included in the final build.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/Widgets/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  qMRMLModelDisplayNodeWidget.cxx\n  qMRMLModelDisplayNodeWidget.h\n  )\n\nset(${KIT}_MOC_SRCS\n  qMRMLModelDisplayNodeWidget.h\n  )\n\nset(${KIT}_UI_SRCS\n  Resources/UI/qMRMLModelDisplayNodeWidget.ui\n  )\n\nset(${KIT}_RESOURCES\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Loadable Module - CMake\nDESCRIPTION: This snippet uses the `slicerMacroBuildLoadableModule` macro to build the loadable module. It passes the module name, export directive, include directories, source files, MOC sources, UI sources, target libraries, and resources as arguments. It also enables generic tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nslicerMacroBuildLoadableModule(\n  NAME ${MODULE_NAME}\n  EXPORT_DIRECTIVE ${MODULE_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${MODULE_INCLUDE_DIRECTORIES}\n  SRCS ${MODULE_SRCS}\n  MOC_SRCS ${MODULE_MOC_SRCS}\n  UI_SRCS ${MODULE_UI_SRCS}\n  TARGET_LIBRARIES ${MODULE_TARGET_LIBRARIES}\n  RESOURCES ${MODULE_RESOURCES}\n  WITH_GENERIC_TESTS\n  )\n```\n\n----------------------------------------\n\nTITLE: Exporting the Library Target (CMake)\nDESCRIPTION: This snippet exports the MRMLCore library target for use in other projects or modules.  It defines the export file using `${PROJECT_NAME}_EXPORT_FILE` and then uses the `export` command to write the target information to that file.  This file will be used by other projects to find and link against the MRMLCore library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Core/CMakeLists.txt#_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_EXPORT_FILE)\n  set(${PROJECT_NAME}_EXPORT_FILE ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Targets.cmake)\nendif()\nexport(TARGETS ${lib_name} APPEND FILE ${${PROJECT_NAME}_EXPORT_FILE})\n```\n\n----------------------------------------\n\nTITLE: Initializing Markups Placement Mode - Python\nDESCRIPTION: This code snippet shows how to switch to control point placement mode for a point list using the interaction and selection nodes. It sets the active place node class name, creates a new fiducial node, sets the active place node ID, and sets the current interaction mode to Place. This activates the placement tool for fiducial markers.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ninteractionNode = slicer.app.applicationLogic().GetInteractionNode()\nselectionNode = slicer.app.applicationLogic().GetSelectionNode()\nselectionNode.SetReferenceActivePlaceNodeClassName(\"vtkMRMLMarkupsFiducialNode\")\npointListNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLMarkupsFiducialNode\")\nselectionNode.SetActivePlaceNodeID(pointListNode.GetID())\ninteractionNode.SetCurrentInteractionMode(interactionNode.Place)\n```\n\n----------------------------------------\n\nTITLE: Documenting Slicer ScriptedLoadableModule\nDESCRIPTION: This snippet uses the `automodule` directive within reStructuredText to generate API documentation for the `slicer.ScriptedLoadableModule` module. It includes all members, even those not explicitly documented, and displays inheritance information.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/slicer.md#_snippet_3\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: slicer.ScriptedLoadableModule\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Adding a Python Unit Test using CMake in Slicer\nDESCRIPTION: This CMake command adds a Python unit test to the Slicer project. It uses the `slicer_add_python_unittest` macro, which takes the `SCRIPT` argument specifying the Python test script. The MODULE_NAME variable should contain the name of the associated module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/ScriptedSegmentEditorEffectExtensionTemplate/ScriptedSegmentEditorEffectModuleTemplate/Testing/Python/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n#slicer_add_python_unittest(SCRIPT ${MODULE_NAME}ModuleTest.py)\n```\n\n----------------------------------------\n\nTITLE: Show Color Legend for a Volume Node (Python)\nDESCRIPTION: This code snippet displays the color legend for a given volume node in the slice views (and in 3D views if the slice is displayed in 3D). It retrieves the volume node by name ('MRHead' in this example) and then utilizes the colors logic to add a default color legend display node associated with the volume node.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nvolumeNode = getNode('MRHead')\ncolorLegendDisplayNode = slicer.modules.colors.logic().AddDefaultColorLegendDisplayNode(volumeNode)\n```\n\n----------------------------------------\n\nTITLE: Creating Test Executable\nDESCRIPTION: This snippet creates the test executable using ctk_add_executable_utf8, links it against the module's library and SlicerExecutionModel libraries. It also sets the properties for labels and folder of the test executable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/FiducialRegistration/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nctk_add_executable_utf8(${CLP}Test ${CLP}Test.cxx)\ntarget_link_libraries(${CLP}Test ${CLP}Lib ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES})\nset_target_properties(${CLP}Test PROPERTIES LABELS ${CLP})\nset_target_properties(${CLP}Test PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Add Subdirectories in CMake\nDESCRIPTION: Adds subdirectories for MRML, Logic, and Widgets to the build process. These subdirectories likely contain code related to data representation, core logic, and user interface elements for the Sequences module. Each subdirectory will have its own CMakeLists.txt.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Sequences/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(MRML)\nadd_subdirectory(Logic)\nadd_subdirectory(Widgets)\n```\n\n----------------------------------------\n\nTITLE: Change default output file type (Python)\nDESCRIPTION: This script demonstrates how to change the default output file format for new nodes. It sets the default file extension for model nodes to PLY. Requires `slicer`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndefaultModelStorageNode = slicer.vtkMRMLModelStorageNode()\ndefaultModelStorageNode.SetDefaultWriteFileExtension(\"ply\")\nslicer.mrmlScene.AddDefaultNode(defaultModelStorageNode)\n```\n\n----------------------------------------\n\nTITLE: Get 3D Coordinates from 2D Display Coordinates (Python)\nDESCRIPTION: This snippet retrieves the 3D coordinates (in the world coordinate system) of a model's surface point from its 2D display position (in pixels).  It uses the model displayable manager to pick the point and obtain its RAS (Right-Anterior-Superior) coordinates. Requires a model to be visible in the 3D view. The displayPosition variable defines the pixel coordinates where the model's surface point is located.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n# Display position is in pixels, origin is top-left corner\ndisplayPosition = [10, 12]\n\n# Get model displayable manager\nthreeDViewWidget = slicer.app.layoutManager().threeDWidget(0)\nmodelDisplayableManager = threeDViewWidget.threeDView().displayableManagerByClassName(\"vtkMRMLModelDisplayableManager\")\n\n# Use model displayable manager's point picker\nif modelDisplayableManager.Pick(displayPosition[0], displayPosition[1]) and modelDisplayableManager.GetPickedNodeID():\n    rasPosition = modelDisplayableManager.GetPickedRAS()\n    print(rasPosition)\nelse:\n    print(f\"No model is visible at {displayPosition}\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Build and Release Type\nDESCRIPTION: This code snippet includes CMake modules to initialize the build type and release type.  These modules would set the `CMAKE_BUILD_TYPE` variable and potentially other related variables. This allows for consistent management of build configurations across platforms.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(SlicerInitializeBuildType)\ninclude(SlicerInitializeReleaseType)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries in CMake\nDESCRIPTION: Defines the MODULE_TARGET_LIBRARIES variable, listing the libraries that the module depends on. These include libraries from the VolumeRendering module, as well as other Slicer modules like Markups.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  vtkSlicer${MODULE_NAME}ModuleMRML\n  vtkSlicer${MODULE_NAME}ModuleMRMLDisplayableManager\n  qSlicer${MODULE_NAME}ModuleWidgets\n  qSlicer${MODULE_NAME}SubjectHierarchyPlugins\n  qSlicerMarkupsModuleWidgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name\nDESCRIPTION: Sets the MODULE_NAME variable to \"Volumes\" and converts it to uppercase for use in other variables. This defines the name of the Slicer module being configured.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME Volumes)\n\nstring(TOUPPER ${MODULE_NAME} MODULE_NAME_UPPER)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet sets the include directories for the project, including source and binary directories, as well as the include directories for vtkAddon, vtkITK, vtkSegmentationCore, and LibArchive. If `MRML_USE_vtkTeem` is enabled, the vtkTeem include directories are also added.  The `include_directories` command adds these directories to the include path.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Core/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(include_dirs\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  ${CMAKE_CURRENT_BINARY_DIR}\n  ${vtkAddon_INCLUDE_DIRS}\n  ${vtkITK_INCLUDE_DIRS}\n  ${vtkSegmentationCore_INCLUDE_DIRS}\n  ${LibArchive_INCLUDE_DIR}\n  )\nif(MRML_USE_vtkTeem)\n  list(APPEND include_dirs ${vtkTeem_INCLUDE_DIRS})\nendif()\ninclude_directories(BEFORE ${include_dirs})\n```\n\n----------------------------------------\n\nTITLE: Creating the MRMLCore Library (CMake)\nDESCRIPTION: This snippet defines and creates the MRMLCore library.  It first combines source files and header files into the `srcs` variable. Then, it uses `add_library` to create a shared library named `${PROJECT_NAME}` (which is likely `MRMLCore`) from these sources. This library contains the compiled code from the specified source files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Core/CMakeLists.txt#_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nset(srcs ${MRMLCore_SRCS} ${MRMLCore_SRCS_HEADERS})\n\nset(lib_name ${PROJECT_NAME})\nadd_library(${lib_name} ${srcs})\n```\n\n----------------------------------------\n\nTITLE: Setting UI Source Files\nDESCRIPTION: Specifies the UI files (.ui) created with Qt Designer. These files define the module's graphical user interface. These UI files are converted to C++ code during the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Cameras/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_UI_SRCS\n  Resources/UI/qSlicer${MODULE_NAME}ModuleWidget.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Simple Tests\nDESCRIPTION: Adds simple tests using the `simple_test` macro. This is likely a custom macro defined elsewhere. It takes the name of the test to add. The `simple_test` macro likely creates a standard test definition using `add_test` internally.\nSOURCE: https://github.com/slicer/slicer/blob/main/Applications/SlicerApp/Testing/Cpp/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nsimple_test( qSlicerAppMainWindowTest1 )\nsimple_test( qSlicerModuleFactoryManagerTest1 )\n```\n\n----------------------------------------\n\nTITLE: Setting CMake flags - CMake\nDESCRIPTION: This code sets various CMake flags, including C and CXX flags, using predefined variables such as `Slicer_REQUIRED_C_FLAGS`, `ITK_REQUIRED_C_FLAGS`, and `COVERAGE_C_FLAGS`. These flags are concatenated to create the final `CMAKE_C_FLAGS` and `CMAKE_CXX_FLAGS`, which are then cached and forced to be used in the build process.  It uses the `SlicerBlockCXXCoverageFlags` and `ITKPlatformSpecificChecks` modules to determine the appropriate flags.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_69\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS_INIT} ${Slicer_REQUIRED_C_FLAGS} ${ITK_REQUIRED_C_FLAGS} ${COVERAGE_C_FLAGS} ${ADDITIONAL_C_FLAGS}\" CACHE STRING \"CMake C Flags\" FORCE)\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS_INIT} ${Slicer_REQUIRED_CXX_FLAGS} ${ITK_REQUIRED_CXX_FLAGS} ${COVERAGE_CXX_FLAGS} ${ADDITIONAL_CXX_FLAGS}\" CACHE STRING \"CMake CXX Flags\" FORCE)\n```\n\n----------------------------------------\n\nTITLE: Installing the Library CMake\nDESCRIPTION: This snippet handles the installation of the MRMLLogic library. It defines the installation directories for runtime binaries and libraries, then uses the `install` command to copy the library and its associated files to the specified destinations under different components (RuntimeLibraries and Development).\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Logic/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_INSTALL_BIN_DIR)\n  set(${PROJECT_NAME}_INSTALL_BIN_DIR bin)\nendif()\nif(NOT DEFINED ${PROJECT_NAME}_INSTALL_LIB_DIR)\n  set(${PROJECT_NAME}_INSTALL_LIB_DIR lib/${PROJECT_NAME})\nendif()\n\ninstall(TARGETS ${lib_name}\n  RUNTIME DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DIR} COMPONENT RuntimeLibraries\n  LIBRARY DESTINATION ${${PROJECT_NAME}_INSTALL_LIB_DIR} COMPONENT RuntimeLibraries\n  ARCHIVE DESTINATION ${${PROJECT_NAME}_INSTALL_LIB_DIR} COMPONENT Development\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Cxx subdirectory to CMake project\nDESCRIPTION: This CMake command adds the directory named 'Cxx' to the build process. CMake will look for a CMakeLists.txt file inside the Cxx directory and process it, effectively including that subdirectory's build instructions in the main project.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Sequences/Widgets/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Setting Export Header Template and Logos Resource\nDESCRIPTION: This code snippet sets the paths to the export header template and the logos resource file.  The export header template (`qSlicerExport.h.in`) is used to generate header files for shared libraries, defining export/import macros. The logos resource file (`qSlicer.qrc`) likely contains application icons and other resources.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nset(Slicer_EXPORT_HEADER_TEMPLATE \"${Slicer_SOURCE_DIR}/CMake/qSlicerExport.h.in\")\nset(Slicer_LOGOS_RESOURCE \"${Slicer_SOURCE_DIR}/Resources/qSlicer.qrc\")\n```\n\n----------------------------------------\n\nTITLE: Adding ExternalData Test\nDESCRIPTION: This snippet adds a test using CMake's `ExternalData_add_test` command. The test compares the output of the module against a baseline, using input data.  The ${SEM_LAUNCH_COMMAND} variable is assumed to define how the test executable should be launched.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleScalarVolume/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(testname ${CLP}Test)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  --compare DATA{${BASELINE}/${CLP}Test.nhdr,ResampleScalarVolumeTest.raw.gz}\n            ${TEMP}/${CLP}Test.nhdr\n  ModuleEntryPoint\n    --spacing 5,5,5\n    --interpolation linear\n   DATA{${INPUT}/MRHeadResampled.nhdr,MRHeadResampled.raw.gz}\n   ${TEMP}/${CLP}Test.nhdr\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Copy and Install Color Files with CMake\nDESCRIPTION: This snippet uses CMake commands to locate color files, copy them to the binary directory, and then install them to the installation directory. It iterates through each color file, configures it for copying, and uses the `install` command to place it in the `ColorFiles` subdirectory of the share directory within the install prefix. The `GLOB` command finds all `.txt` files in the `ColorFiles` directory relative to the current source directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/Logic/Resources/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfile(GLOB COLORFILES RELATIVE \"${CMAKE_CURRENT_SOURCE_DIR}\" \"ColorFiles/*.txt\")\n\nforeach(colorfile ${COLORFILES})\n  configure_file(\n    ${CMAKE_CURRENT_SOURCE_DIR}/${colorfile}\n    ${CMAKE_BINARY_DIR}/${Slicer_SHARE_DIR}/${colorfile}\n    COPYONLY\n    )\nendforeach()\ninstall(\n  FILES ${COLORFILES}\n  DESTINATION ${Slicer_INSTALL_SHARE_DIR}/ColorFiles\n  COMPONENT Runtime\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting INCLUDE_DIRS Variable\nDESCRIPTION: This snippet sets the `${PROJECT_NAME}_INCLUDE_DIRS` variable. This variable contains the source and binary directories, which are used for include paths. It sets the variable as an internal cache variable, forcing its value.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkTeem/CMakeLists.txt#_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nset(${PROJECT_NAME}_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR}\n  CACHE INTERNAL \"${PROJECT_NAME} include dirs\" FORCE)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files (SRCS, MOC_SRCS, UI_SRCS, RESOURCES)\nDESCRIPTION: Defines lists of source files, including C++ source files, header files for moc processing, UI files created with Qt Designer, and resource files. These lists are used by CMake to compile and link the project.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/Widgets/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  qMRMLColorLegendDisplayNodeWidget.cxx\n  qMRMLColorLegendDisplayNodeWidget.h\n  qMRMLColorListView.cxx\n  qMRMLColorListView.h\n  qMRMLColorPickerWidget.cxx\n  qMRMLColorPickerWidget.h\n  qMRMLColorTableView.cxx\n  qMRMLColorTableView.h\n  qSlicerColorTableTerminologyDelegate.cxx\n  qSlicerColorTableTerminologyDelegate.h\n  qSlicerTerminologyEditorWidget.cxx\n  qSlicerTerminologyEditorWidget.h\n  qSlicerTerminologyEditorButton.cxx\n  qSlicerTerminologyEditorButton.h\n  qSlicerTerminologyEditorDialog.cxx\n  qSlicerTerminologyEditorDialog.h\n  )\n\nset(${KIT}_MOC_SRCS\n  qMRMLColorLegendDisplayNodeWidget.h\n  qMRMLColorListView.h\n  qMRMLColorPickerWidget.h\n  qMRMLColorTableView.h\n  qSlicerColorTableTerminologyDelegate.h\n  qSlicerTerminologyEditorWidget.h\n  qSlicerTerminologyEditorButton.h\n  qSlicerTerminologyEditorDialog.h\n  )\n\nset(${KIT}_UI_SRCS\n  Resources/UI/qMRMLColorLegendDisplayNodeWidget.ui\n  Resources/UI/qMRMLColorPickerWidget.ui\n  Resources/UI/qSlicerTerminologyEditorWidget.ui\n  )\n\nset(${KIT}_RESOURCES\n  ../Resources/qSlicer${MODULE_NAME}Module.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Project Setup & Variable Definitions (CMake)\nDESCRIPTION: This snippet sets up the CMake project, defines key variables related to the VTK Slicer module logic, including the project name, export directive, include directories, source files, and target libraries. These variables are later used in the `SlicerMacroBuildModuleLogic` macro.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/Loadable/Logic/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleLogic)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_LOGIC_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  )\n\nset(${KIT}_SRCS\n  vtkSlicer${MODULE_NAME}Logic.cxx\n  vtkSlicer${MODULE_NAME}Logic.h\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  ${ITK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Build Loadable Module in CMake\nDESCRIPTION: Uses the slicerMacroBuildLoadableModule macro to build the module. This macro takes care of generating the necessary build rules, linking the module against its dependencies, and installing the module. It simplifies the build process for loadable modules in Slicer.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Sequences/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nslicerMacroBuildLoadableModule(\n  NAME ${MODULE_NAME}\n  EXPORT_DIRECTIVE ${MODULE_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${MODULE_INCLUDE_DIRECTORIES}\n  SRCS ${MODULE_SRCS}\n  MOC_SRCS ${MODULE_MOC_SRCS}\n  UI_SRCS ${MODULE_UI_SRCS}\n  TARGET_LIBRARIES ${MODULE_TARGET_LIBRARIES}\n  RESOURCES ${MODULE_RESOURCES}\n  WITH_GENERIC_TESTS\n  )\n```\n\n----------------------------------------\n\nTITLE: Building CLI with SEMMacroBuildCLI - CMake\nDESCRIPTION: Uses the SEMMacroBuildCLI macro to build the command-line interface (CLI) for the module.  It defines the module name, logo header, and links the ITK libraries to the target.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GaussianBlurImageFilter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/ITKLogo.h\n  TARGET_LIBRARIES ${ITK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: Defines the source files (.cxx and .h) that will be compiled to build the module's library. It also specifies the files that require meta-object compilation (MOC) for Qt signals and slots. UI source and resources are also defined, even if empty.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  qSlicerSubjectHierarchyVolumeRenderingPlugin.cxx\n  qSlicerSubjectHierarchyVolumeRenderingPlugin.h\n  )\n\nset(${KIT}_MOC_SRCS\n  qSlicerSubjectHierarchyVolumeRenderingPlugin.h\n  )\n\nset(${KIT}_UI_SRCS\n  )\n\nset(${KIT}_RESOURCES\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Loadable Module\nDESCRIPTION: Uses the `slicerMacroBuildLoadableModule` macro to build the Volumes module. This macro takes various parameters, including the module name, export directive, include directories, source files, UI files, target libraries, and resources.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroBuildLoadableModule(\n  NAME ${MODULE_NAME}\n  EXPORT_DIRECTIVE ${MODULE_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${MODULE_INCLUDE_DIRECTORIES}\n  SRCS ${MODULE_SRCS}\n  MOC_SRCS ${MODULE_MOC_SRCS}\n  UI_SRCS ${MODULE_UI_SRCS}\n  TARGET_LIBRARIES ${MODULE_TARGET_LIBRARIES}\n  RESOURCES ${MODULE_RESOURCES}\n  WITH_GENERIC_TESTS\n  )\n```\n\n----------------------------------------\n\nTITLE: Conditional Testing (CMake)\nDESCRIPTION: Conditionally adds a Testing subdirectory if BUILD_TESTING is enabled. This allows for including tests only when the BUILD_TESTING CMake option is enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOMLib/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n#  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Module Logic with CMake Macro\nDESCRIPTION: This snippet utilizes a custom CMake macro, `SlicerMacroBuildModuleLogic`, to build the module logic component. It passes the name, export directive, include directories, source files, and target libraries as arguments to the macro, which handles the compilation and linking process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/ViewControllers/Logic/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleLogic(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Manual Widget Connection - Python\nDESCRIPTION: This code demonstrates how to manually connect GUI widgets to parameters within a parameter node wrapper. It involves creating `parameterPack` classes, defining a `parameterNodeWrapper`, instantiating GUI elements (e.g., `QDoubleSpinBox`, `QSlider`), creating a mapping dictionary between parameter names and widget objects, and using `connectParametersToGui` to establish the connections. It also shows how to disconnect the GUI from the parameter node using `disconnectGui`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/parameter_nodes/gui_connection.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Annotated\nfrom slicer.parameterNodeWrapper import (\n  parameterNodeWrapper,\n  parameterPack,\n  Validator,\n)\n\n@parameterPack\nclass Point:\n  x: float\n  y: float\n\n@parameterPack\nclass BoundingBox:\n  topLeft: Point\n  bottomRight: Point\n\n@parameterNodeWrapper\nclass CustomParameterNode:\n  iterations: int\n  box: BoundingBox\n\nparam = CustomParameterNode(slicer.mrmlScene.AddNewNodeByClass('vtkMRMLScriptedModuleNode'))\n\ntopLeftXSpinbox = qt.QDoubleSpinBox()\ntopLeftYSpinbox = qt.QDoubleSpinBox()\nbottomRightXSpinbox = qt.QDoubleSpinBox()\nbottomRightYSpinbox = qt.QDoubleSpinBox()\niterationsSlider = qt.QSlider()\n\nmapping = {\n  # Key is parameter name, value is widget object\n  \"iterations\", iterationsSlider,\n\n  # For parameterPacks, can access nested parameter items through dot syntax\n  \"box.topLeft.x\": topLeftXSpinbox,\n  \"box.topLeft.y\": topLeftYSpinbox,\n  \"box.bottomRight.x\": bottomRightXSpinbox,\n  \"box.bottomRight.y\": bottomRightYSpinbox,\n}\n\nconnectionTag = param.connectParametersToGui(mapping)\n\n# When the GUI items are updated, it will automatically update the value\n# in the parameter node wrapper.\n# Also, when the parameter node wrapper is updated, it will automatically\n# update the GUI.\nparam.box.topLeft.x = 4.2\n# Now topLeftXSpinbox.value == 4.2 because of the connections\n\n# can use the disconnectGui method to break the connection\nparam.disconnectGui(connectionTag)\n```\n\n----------------------------------------\n\nTITLE: Building CLI with SEMMacroBuildCLI\nDESCRIPTION: This snippet uses the `SEMMacroBuildCLI` macro to define the build process for a command-line interface (CLI). It takes the module name, target libraries, include directories, and additional source files as input. This macro likely generates the necessary CMake commands to create an executable CLI application.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/CLI/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  TARGET_LIBRARIES ${MODULE_TARGET_LIBRARIES}\n  INCLUDE_DIRECTORIES ${MODULE_INCLUDE_DIRECTORIES}\n  ADDITIONAL_SRCS ${MODULE_SRCS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Module Logic with SlicerMacroBuildModuleLogic in CMake\nDESCRIPTION: This snippet uses the `SlicerMacroBuildModuleLogic` macro to build the module logic component. It passes the name of the project, the export directive, include directories, source files, and target libraries to the macro.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Plots/Logic/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleLogic(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining CLP Target and Data Management Target in CMake\nDESCRIPTION: This snippet sets the module name and defines the data management target, defaulting to the module name if not already defined. This configuration ensures that data is managed and associated with the correct module target.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/OrientScalarVolume/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(CLP ${MODULE_NAME})\n\nif(NOT DEFINED SEM_DATA_MANAGEMENT_TARGET)\n  set(SEM_DATA_MANAGEMENT_TARGET ${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel Package\nDESCRIPTION: This snippet locates the SlicerExecutionModel package, which provides infrastructure for creating CLI modules within Slicer. The REQUIRED keyword ensures that the build fails if the package is not found. It also includes the usage file for the package.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MultiplyScalarVolumes/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Exporting Segmentation to DICOM - Python\nDESCRIPTION: This code snippet exports a segmentation node to DICOM format using the DICOMSegmentationPlugin. It examines the segmentation item for exportables, sets the output directory for each exportable, and then exports them.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/dicom.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport DICOMSegmentationPlugin\nexporter = DICOMSegmentationPlugin.DICOMSegmentationPluginClass()\nexportables = exporter.examineForExport(segmentationShItem)\nfor exp in exportables:\n  exp.directory = outputFolder\n\nexporter.export(exportables)\n```\n\n----------------------------------------\n\nTITLE: Setting Module Resources\nDESCRIPTION: Defines the resources (e.g., icons, images) that are embedded into the module.  These resources are typically accessed at runtime.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Reformat/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_RESOURCES\n  Resources/qSlicer${MODULE_NAME}Module.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Build Module CMake\nDESCRIPTION: Calls the `SlicerMacroBuildModuleMRML` macro to configure the module's build process. It passes in the module name, export directive, include directories, source files, and target libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Annotations/MRML/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nSlicerMacroBuildModuleMRML(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Measure Point Distances from Plane - Python\nDESCRIPTION: This snippet calculates the distances of points from a plane. It retrieves a point list node (`F`) and a plane node (`P`) and then transforms the point positions into the plane's coordinate system. The absolute value of the third coordinate in the plane's coordinate system represents the distance from the plane.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\npointListNode = getNode('F')\nplaneNode = getNode('P')\n\n# Get transformation that gets point coordinates relative to the plane\nplaneToWorld = vtk.vtkMatrix4x4()\nplaneNode.GetObjectToWorldMatrix(planeToWorld)\nworldToPlane = vtk.vtkMatrix4x4()\nvtk.vtkMatrix4x4.Invert(planeToWorld, worldToPlane)\n\nfor pointIndex in range(pointListNode.GetNumberOfControlPoints()):\n    # Get point position in world coordinate system\n    point_World = [*pointListNode.GetNthControlPointPositionWorld(pointIndex), 1.0]\n    # Get point position in the plane coordinate system\n    point_Plane = worldToPlane.MultiplyPoint(point_World)\n    # Third axis in the plane coordinate system is the plane normal direction, therefore the third coordinate\n    # value is the distance from the plane\n    distanceFromPlane = abs(point_Plane[2])\n    print(f\"Distance of point {pointListNode.GetNthControlPointLabel(pointIndex)} from plane: {distanceFromPlane:.2f}\")\n```\n\n----------------------------------------\n\nTITLE: Building Loadable Module\nDESCRIPTION: This macro call orchestrates the build process for the Slicer module. It takes all previously defined variables as inputs and creates the necessary build targets. Includes options to build generic tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Reformat/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroBuildLoadableModule(\n  NAME ${MODULE_NAME}\n  EXPORT_DIRECTIVE ${MODULE_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${MODULE_INCLUDE_DIRECTORIES}\n  SRCS ${MODULE_SRCS}\n  MOC_SRCS ${MODULE_MOC_SRCS}\n  UI_SRCS ${MODULE_UI_SRCS}\n  TARGET_LIBRARIES ${MODULE_TARGET_LIBRARIES}\n  RESOURCES ${MODULE_RESOURCES}\n  WITH_GENERIC_TESTS\n  )\n```\n\n----------------------------------------\n\nTITLE: Configure C++ Test Driver\nDESCRIPTION: This snippet utilizes a custom CMake macro called `slicerMacroConfigureModuleCxxTestDriver` to configure the C++ test driver. It passes the `KIT` variable (project name), `KIT_TEST_SRCS` (source files), and flags to enable VTK debug and error output checks. This macro likely handles the compilation and linking of the test executable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Plots/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nslicerMacroConfigureModuleCxxTestDriver(\n  NAME ${KIT}\n  SOURCES ${KIT_TEST_SRCS}\n  WITH_VTK_DEBUG_LEAKS_CHECK\n  WITH_VTK_ERROR_OUTPUT_CHECK\n  )\n```\n\n----------------------------------------\n\nTITLE: Add Python Unit Test with CMake\nDESCRIPTION: This CMake snippet adds a Python unit test for the `MarkupsWidgetsSelfTest` module. It uses the `slicer_add_python_unittest` macro, specifying the Python script containing the unit tests. This is conditional on `Slicer_USE_QtTesting` and `Slicer_USE_PYTHONQT` being enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Widgets/Testing/Python/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nslicer_add_python_unittest(SCRIPT MarkupsWidgetsSelfTest.py)\n```\n\n----------------------------------------\n\nTITLE: Creating Test Sourcelist\nDESCRIPTION: The `create_test_sourcelist` macro creates a sourcelist for the test executable named `Tests`. It combines the provided C++ tests source file (`${KIT}CppTests.cxx`) along with the `KIT_TEST_SOURCES`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncreate_test_sourcelist(Tests ${KIT}CppTests.cxx\n  ${KIT_TEST_SOURCES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Set Include Directories - CMake\nDESCRIPTION: Specifies the include directories required for compiling the source files. These directories contain header files needed for the project's dependencies.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/Widgets/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSlicerSegmentationsModuleMRML_INCLUDE_DIRS}\n  ${vtkSlicerSegmentationsModuleLogic_INCLUDE_DIRS}\n  ${qSlicerSegmentationsEditorEffects_INCLUDE_DIRS}\n  ${qSlicerTerminologiesModuleWidgets_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Plugin Variables - CMake\nDESCRIPTION: This code snippet sets CMake variables related to the Qt Designer plugin. It defines the kit name, export directive, source files, moc files, and target libraries. These variables are later used by the `ctkMacroBuildQtDesignerPlugin` macro.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Sequences/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT ${PROJECT_NAME}Plugins)\n\nset(${KIT}_EXPORT \"Q_SLICER_MODULE_${MODULE_NAME_UPPER}_WIDGETS_PLUGINS_EXPORT\")\n\nset(${KIT}_SRCS\n  qSlicer${MODULE_NAME}ModuleWidgetsAbstractPlugin.cxx\n  qSlicer${MODULE_NAME}ModuleWidgetsAbstractPlugin.h\n  qSlicer${MODULE_NAME}ModuleWidgetsPlugin.cxx\n  qSlicer${MODULE_NAME}ModuleWidgetsPlugin.h\n\n  qMRMLSequenceBrowserPlayWidgetPlugin.cxx\n  qMRMLSequenceBrowserPlayWidgetPlugin.h\n  qMRMLSequenceBrowserSeekWidgetPlugin.cxx\n  qMRMLSequenceBrowserSeekWidgetPlugin.h\n  qMRMLSequenceBrowserToolBarPlugin.cxx\n  qMRMLSequenceBrowserToolBarPlugin.h\n  qMRMLSequenceEditWidgetPlugin.cxx\n  qMRMLSequenceEditWidgetPlugin.h\n  )\n\nset(${KIT}_MOC_SRCS\n  qSlicer${MODULE_NAME}ModuleWidgetsPlugin.h\n\n  qMRMLSequenceBrowserPlayWidgetPlugin.h\n  qMRMLSequenceBrowserSeekWidgetPlugin.h\n  qMRMLSequenceBrowserToolBarPlugin.h\n  qMRMLSequenceEditWidgetPlugin.h\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  qSlicer${MODULE_NAME}ModuleWidgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Generating MOC sources for Qt tests\nDESCRIPTION: This snippet defines the source files that require Meta-Object Compiler (MOC) processing for Qt integration. It conditionally appends additional source files based on Slicer build options, similar to the test source files. These source files are added to the `KIT_TEST_GENERATE_MOC_SRCS` variable, and then the `QT5_GENERATE_MOCS` command is used to generate the necessary MOC files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/Testing/Cxx/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n  set(KIT_TEST_GENERATE_MOC_SRCS\n    qSlicerSslTest.cxx\n    )\n\n  if(Slicer_BUILD_EXTENSIONMANAGER_SUPPORT)\n    list(APPEND KIT_TEST_GENERATE_MOC_SRCS\n      qSlicerExtensionsManagerModelTest.cxx\n      qSlicerPersistentCookieJarTest.cxx\n      )\n  endif()\n\n  if(Slicer_BUILD_APPLICATIONUPDATE_SUPPORT)\n  list(APPEND KIT_TEST_GENERATE_MOC_SRCS\n    qSlicerApplicationUpdateManagerTest.cxx\n    )\n  endif()\n\n  if(Slicer_USE_PYTHONQT)\n    list(APPEND KIT_TEST_GENERATE_MOC_SRCS\n      qSlicerCorePythonManagerWithoutApplicationTest.cxx\n      )\n  endif()\n\n    QT5_GENERATE_MOCS(${KIT_TEST_GENERATE_MOC_SRCS})\n```\n\n----------------------------------------\n\nTITLE: Setting Export Directive in CMake\nDESCRIPTION: This snippet sets the module export directive, which is used for managing symbol visibility when building the module as a shared library.  It creates a macro named Q_SLICER_QTMODULES_${MODULE_NAME_UPPER}_EXPORT.  It depends on the MODULE_NAME_UPPER variable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Annotations/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_EXPORT_DIRECTIVE \"Q_SLICER_QTMODULES_${MODULE_NAME_UPPER}_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory\nDESCRIPTION: Adds the Testing subdirectory if BUILD_TESTING is enabled. This allows the module to include unit tests. BUILD_TESTING is usually a CMake variable set by the top-level project.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Cameras/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building DICOM Plugins Module with Macro\nDESCRIPTION: This CMake snippet invokes the slicerMacroBuildScriptedModule macro to build the DICOMPlugins module. It passes the module's name, Python scripts, and resources as parameters to the macro. The macro likely handles the compilation, linking, and installation of the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOMPlugins/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroBuildScriptedModule(\n  NAME ${MODULE_NAME}\n  SCRIPTS ${MODULE_PYTHON_SCRIPTS}\n  RESOURCES ${MODULE_PYTHON_RESOURCES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Color Gradient Data\nDESCRIPTION: This snippet defines a set of RGBA (Red, Green, Blue, Alpha) color values corresponding to an index. Each line represents a color stop in the gradient, with values ranging from 0 to 255 for each component. These values can be used for generating color maps in visualization tools.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/Logic/Resources/ColorFiles/Plasma.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n0 0 12 7 134 255\n1 1 16 7 135 255\n2 2 19 6 137 255\n3 3 21 6 138 255\n4 4 24 6 139 255\n5 5 27 6 140 255\n6 6 29 6 141 255\n7 7 31 5 142 255\n8 8 33 5 143 255\n9 9 35 5 144 255\n10 10 37 5 145 255\n11 11 39 5 146 255\n12 12 41 5 147 255\n13 13 43 5 148 255\n14 14 45 4 148 255\n15 15 47 4 149 255\n16 16 49 4 150 255\n17 17 51 4 151 255\n18 18 52 4 152 255\n19 19 54 4 152 255\n20 20 56 4 153 255\n21 21 58 4 154 255\n22 22 59 3 154 255\n23 23 61 3 155 255\n24 24 63 3 156 255\n25 25 64 3 156 255\n26 26 66 3 157 255\n27 27 68 3 158 255\n28 28 69 3 158 255\n29 29 71 2 159 255\n30 30 73 2 159 255\n31 31 74 2 160 255\n32 32 76 2 161 255\n33 33 78 2 161 255\n34 34 79 2 162 255\n35 35 81 1 162 255\n36 36 82 1 163 255\n37 37 84 1 163 255\n38 38 86 1 163 255\n39 39 87 1 164 255\n40 40 89 1 164 255\n41 41 90 0 165 255\n42 42 92 0 165 255\n43 43 94 0 165 255\n44 44 95 0 166 255\n45 45 97 0 166 255\n46 46 98 0 166 255\n47 47 100 0 167 255\n48 48 101 0 167 255\n49 49 103 0 167 255\n50 50 104 0 167 255\n51 51 106 0 167 255\n52 52 108 0 168 255\n53 53 109 0 168 255\n54 54 111 0 168 255\n55 55 112 0 168 255\n56 56 114 0 168 255\n57 57 115 0 168 255\n58 58 117 0 168 255\n59 59 118 1 168 255\n60 60 120 1 168 255\n61 61 121 1 168 255\n62 62 123 2 168 255\n63 63 124 2 167 255\n64 64 126 3 167 255\n65 65 127 3 167 255\n66 66 129 4 167 255\n67 67 130 4 167 255\n68 68 132 5 166 255\n69 69 133 6 166 255\n70 70 134 7 166 255\n71 71 136 7 165 255\n72 72 137 8 165 255\n73 73 139 9 164 255\n74 74 140 10 164 255\n75 75 142 12 164 255\n76 76 143 13 163 255\n77 77 144 14 163 255\n78 78 146 15 162 255\n79 79 147 16 161 255\n80 80 149 17 161 255\n81 81 150 18 160 255\n82 82 151 19 160 255\n83 83 153 20 159 255\n84 84 154 21 158 255\n85 85 155 23 158 255\n86 86 157 24 157 255\n87 87 158 25 156 255\n88 88 159 26 155 255\n89 89 160 27 155 255\n90 90 162 28 154 255\n91 91 163 29 153 255\n92 92 164 30 152 255\n93 93 165 31 151 255\n94 94 167 33 151 255\n95 95 168 34 150 255\n96 96 169 35 149 255\n97 97 170 36 148 255\n98 98 172 37 147 255\n99 99 173 38 146 255\n100 100 174 39 145 255\n101 101 175 40 144 255\n102 102 176 42 143 255\n103 103 177 43 143 255\n104 104 178 44 142 255\n105 105 180 45 141 255\n106 106 181 46 140 255\n107 107 182 47 139 255\n108 108 183 48 138 255\n109 109 184 50 137 255\n110 110 185 51 136 255\n111 111 186 52 135 255\n112 112 187 53 134 255\n113 113 188 54 133 255\n114 114 189 55 132 255\n115 115 190 56 131 255\n116 116 191 57 130 255\n117 117 192 59 129 255\n118 118 193 60 128 255\n119 119 194 61 128 255\n120 120 195 62 127 255\n121 121 196 63 126 255\n122 122 197 64 125 255\n123 123 198 65 124 255\n124 124 199 66 123 255\n125 125 200 68 122 255\n126 126 201 69 121 255\n127 127 202 70 120 255\n128 128 203 71 119 255\n129 129 204 72 118 255\n130 130 205 73 117 255\n131 131 206 74 117 255\n132 132 207 75 116 255\n133 133 208 77 115 255\n134 134 209 78 114 255\n135 135 209 79 113 255\n136 136 210 80 112 255\n137 137 211 81 111 255\n138 138 212 82 110 255\n139 139 213 83 109 255\n140 140 214 85 109 255\n141 141 215 86 108 255\n142 142 215 87 107 255\n143 143 216 88 106 255\n144 144 217 89 105 255\n145 145 218 90 104 255\n146 146 219 91 103 255\n147 147 220 93 102 255\n148 148 220 94 102 255\n149 149 221 95 101 255\n150 150 222 96 100 255\n151 151 223 97 99 255\n152 152 223 98 98 255\n153 153 224 100 97 255\n154 154 225 101 96 255\n155 155 226 102 96 255\n156 156 227 103 95 255\n157 157 227 104 94 255\n158 158 228 106 93 255\n159 159 229 107 92 255\n160 160 229 108 91 255\n161 161 230 109 90 255\n162 162 231 110 90 255\n163 163 232 112 89 255\n164 164 232 113 88 255\n165 165 233 114 87 255\n166 166 234 115 86 255\n167 167 234 116 85 255\n168 168 235 118 84 255\n169 169 236 119 84 255\n170 170 236 120 83 255\n171 171 237 121 82 255\n172 172 237 123 81 255\n173 173 238 124 80 255\n174 174 239 125 79 255\n175 175 239 126 78 255\n176 176 240 128 77 255\n177 177 240 129 77 255\n178 178 241 130 76 255\n179 179 242 132 75 255\n180 180 242 133 74 255\n181 181 243 134 73 255\n182 182 243 135 72 255\n183 183 244 137 71 255\n184 184 244 138 71 255\n185 185 245 139 70 255\n186 186 245 141 69 255\n187 187 246 142 68 255\n188 188 246 143 67 255\n189 189 246 145 66 255\n190 190 247 146 65 255\n191 191 247 147 65 255\n192 192 248 149 64 255\n193 193 248 150 63 255\n194 194 248 152 62 255\n195 195 249 153 61 255\n196 196 249 154 60 255\n197 197 250 156 59 255\n198 198 250 157 58 255\n199 199 250 159 58 255\n200 200 250 160 57 255\n201 201 251 162 56 255\n202 202 251 163 55 255\n203 203 251 164 54 255\n204 204 252 166 53 255\n205 205 252 167 53 255\n206 206 252 169 52 255\n207 207 252 170 51 255\n208 208 252 172 50 255\n209 209 252 173 49 255\n210 210 253 175 49 255\n211 211 253 176 48 255\n212 212 253 178 47 255\n213 213 253 179 46 255\n214 214 253 181 45 255\n215 215 253 182 45 255\n216 216 253 184 44 255\n217 217 253 185 43 255\n218 218 253 187 43 255\n219 219 253 188 42 255\n220 220 253 190 41 255\n221 221 253 192 41 255\n222 222 253 193 40 255\n223 223 253 195 40 255\n224 224 253 196 39 255\n225 225 253 198 38 255\n226 226 252 199 38 255\n227 227 252 201 38 255\n228 228 252 203 37 255\n229 229 252 204 37 255\n230 230 252 206 37 255\n231 231 251 208 36 255\n232 232 251 209 36 255\n233 233 251 211 36 255\n234 234 250 213 36 255\n235 235 250 214 36 255\n236 236 250 216 36 255\n237 237 249 217 36 255\n238 238 249 219 36 255\n239 239 248 221 36 255\n240 240 248 223 36 255\n241 241 247 224 36 255\n242 242 247 226 37 255\n243 243 246 228 37 255\n244 244 246 229 37 255\n245 245 245 231 38 255\n246 246 245 233 38 255\n247 247 244 234 38 255\n248 248 243 236 38 255\n249 249 243 238 38 255\n250 250 242 240 38 255\n251 251 242 241 38 255\n252 252 241 243 38 255\n253 253 240 245 37 255\n254 254 240 246 35 255\n255 255 239 248 33 255\n```\n\n----------------------------------------\n\nTITLE: Exporting the Target\nDESCRIPTION: Exports the library target for use by other projects.  It defines the export file if it's not already defined, and then exports the target to that file using the `export` command.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/IDImageIO/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_EXPORT_FILE)\n  set(${PROJECT_NAME}_EXPORT_FILE ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Targets.cmake)\nendif()\nexport(TARGETS ${lib_name} APPEND FILE ${${PROJECT_NAME}_EXPORT_FILE})\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files CMake\nDESCRIPTION: This snippet defines a list of source files for the MRMLLogic library. It creates a variable `MRMLLogic_SRCS` containing the names of the C++ source files that make up the library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Logic/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(MRMLLogic_SRCS\n  vtkMRMLAbstractLogic.cxx\n  vtkMRMLApplicationLogic.cxx\n  vtkMRMLColorLogic.cxx\n  vtkMRMLDisplayableHierarchyLogic.cxx\n  vtkMRMLRemoteIOLogic.cxx\n  vtkMRMLLayoutLogic.cxx\n  vtkMRMLSliceLayerLogic.cxx\n  vtkMRMLSliceLogic.cxx\n  vtkMRMLSliceLinkLogic.cxx\n  vtkMRMLViewLogic.cxx\n  vtkMRMLViewLinkLogic.cxx\n\n  # slicer's vtk extensions (filters)\n  vtkImageLabelOutline.cxx\n  vtkImageNeighborhoodFilter.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Find VTK Package CMake\nDESCRIPTION: Finds the VTK package using `find_package`. The first call checks for VTK. The second call specifies minimum version and components. If VTK is found but not configured to use Qt, an error is raised.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_62\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(VTK REQUIRED)\nset(VTK_LIBRARIES \"\")\nfind_package(VTK ${Slicer_VTK_MINIMUM_SUPPORTED_VERSION} COMPONENTS ${Slicer_VTK_COMPONENTS} REQUIRED)\nset(VTK_GUI_SUPPORT_QT_TARGET_NAME \"VTK::GUISupportQt\")\n\nif(NOT TARGET ${VTK_GUI_SUPPORT_QT_TARGET_NAME})\n  message(FATAL_ERROR \"error: VTK was not configured to use Qt, you probably need \"\n                    \"to recompile it with VTK_USE_GUISUPPORT ON, VTK_Group_Qt ON, \"\n                    \"Note that Qt >= ${Slicer_REQUIRED_QT_VERSION} is *required*\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name in CMake\nDESCRIPTION: Sets the module name to 'Models' and converts it to uppercase for use in other variables. This defines the core identifier for the module throughout the CMake configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME Models)\n\nstring(TOUPPER ${MODULE_NAME} MODULE_NAME_UPPER)\n```\n\n----------------------------------------\n\nTITLE: Defining Module Target Libraries\nDESCRIPTION: Sets the MODULE_TARGET_LIBRARIES CMake variable. This lists the libraries that the module depends on. These libraries will be linked with the module during the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/LoadableCustomMarkups/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleMRML\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  qSlicer${MODULE_NAME}ModuleWidgets\n  vtkSlicerMarkupsModuleLogic\n  qSlicerMarkupsModuleWidgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Module Logic (CMake)\nDESCRIPTION: Uses the SlicerMacroBuildModuleLogic macro to automate the build process. This macro simplifies the configuration by handling common tasks such as creating the library target and setting dependencies.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Annotations/Logic/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleLogic(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Including Slicer Block CXX Required Flags\nDESCRIPTION: This snippet includes a CMake module that defines required C++ flags for the Slicer build. This module likely sets compiler flags necessary for specific features or libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_35\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(SlicerBlockCXXRequiredFlags)\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel in CMake\nDESCRIPTION: This snippet finds the SlicerExecutionModel package, which is required for Slicer modules. It includes the SlicerExecutionModel_USE_FILE to make its functions and variables available.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GrayscaleGrindPeakImageFilter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Setting Variables for Module Widgets Plugins\nDESCRIPTION: This snippet sets CMake variables to manage the components of module widgets plugins.  It defines the kit name, export directive, source files, header files that need moc processing, and the target libraries to link against. These variables are later used in a macro call to build the plugin.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT ${PROJECT_NAME}Plugins)\n\nset(${KIT}_EXPORT \"Q_SLICER_MODULE_${MODULE_NAME_UPPER}_WIDGETS_PLUGINS_EXPORT\")\n\nset(${KIT}_SRCS\n  qSlicer${MODULE_NAME}ModuleWidgetsAbstractPlugin.cxx\n  qSlicer${MODULE_NAME}ModuleWidgetsAbstractPlugin.h\n  qSlicer${MODULE_NAME}ModuleWidgetsPlugin.cxx\n  qSlicer${MODULE_NAME}ModuleWidgetsPlugin.h\n\n  qSlicerDiffusionTensorVolumeDisplayWidgetPlugin.cxx\n  qSlicerDiffusionTensorVolumeDisplayWidgetPlugin.h\n  qSlicerDiffusionWeightedVolumeDisplayWidgetPlugin.cxx\n  qSlicerDiffusionWeightedVolumeDisplayWidgetPlugin.h\n  qSlicerDTISliceDisplayWidgetPlugin.cxx\n  qSlicerDTISliceDisplayWidgetPlugin.h\n  qSlicerLabelMapVolumeDisplayWidgetPlugin.cxx\n  qSlicerLabelMapVolumeDisplayWidgetPlugin.h\n  qSlicerScalarVolumeDisplayWidgetPlugin.cxx\n  qSlicerScalarVolumeDisplayWidgetPlugin.h\n  qSlicerVolumeDisplayWidgetPlugin.cxx\n  qSlicerVolumeDisplayWidgetPlugin.h\n  )\n\nset(${KIT}_MOC_SRCS\n  qSlicer${MODULE_NAME}ModuleWidgetsPlugin.h\n  qSlicerDiffusionTensorVolumeDisplayWidgetPlugin.h\n  qSlicerDiffusionWeightedVolumeDisplayWidgetPlugin.h\n  qSlicerDTISliceDisplayWidgetPlugin.h\n  qSlicerLabelMapVolumeDisplayWidgetPlugin.h\n  qSlicerScalarVolumeDisplayWidgetPlugin.h\n  qSlicerVolumeDisplayWidgetPlugin.h\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  qSlicer${MODULE_NAME}ModuleWidgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Module (CMake)\nDESCRIPTION: Uses the SlicerMacroBuildModuleMRML macro to build the module. This macro encapsulates the common steps involved in building a Slicer module, such as compiling the source files, linking the target libraries, and setting the export directive. The macro takes several parameters, including the module name, export directive, include directories, source files, and target libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/CropVolume/MRML/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nSlicerMacroBuildModuleMRML(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Required Qt Modules\nDESCRIPTION: This snippet defines the list of required Qt modules for the Slicer build. Modules are added based on features like multimedia, web engine, extension manager, i18n support, and testing. It also handles platform-specific modules like X11Extras for Linux. Finally, `find_package(Qt5)` is called.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_42\n\nLANGUAGE: cmake\nCODE:\n```\nset(Slicer_REQUIRED_QT_MODULES\n    Core Widgets\n    Network OpenGL\n    PrintSupport\n    UiTools #no dll\n    Xml XmlPatterns\n    Svg Sql\n    )\n\n  if(Slicer_BUILD_MULTIMEDIA_SUPPORT)\n    list(APPEND Slicer_REQUIRED_QT_MODULES\n      Multimedia\n      MultimediaWidgets\n      )\n  endif()\n\n  # Add the Qt5X11Extras component for Linux systems\n  # This component is needed for building VTK\n  if(UNIX AND NOT APPLE)\n    list(APPEND Slicer_REQUIRED_QT_MODULES X11Extras)\n  endif()\n\n  find_package(Qt5 COMPONENTS Core QUIET)\n  if(Slicer_BUILD_WEBENGINE_SUPPORT)\n    list(APPEND Slicer_REQUIRED_QT_MODULES\n      WebEngine\n      WebEngineWidgets\n      WebChannel\n      )\n  endif()\n  # Both \"extension manager\" and \"application update\" require qRestApi external\n  # project itself depending on Qt's Qml module\n  if(Slicer_BUILD_EXTENSIONMANAGER_SUPPORT OR Slicer_BUILD_APPLICATIONUPDATE_SUPPORT)\n    list(APPEND Slicer_REQUIRED_QT_MODULES Qml)\n  endif()\n  if(Slicer_BUILD_I18N_SUPPORT)\n    list(APPEND Slicer_REQUIRED_QT_MODULES LinguistTools) # no dll\n  endif()\n  if(BUILD_TESTING)\n    list(APPEND Slicer_REQUIRED_QT_MODULES Test)\n  endif()\nlist(APPEND Slicer_REQUIRED_QT_MODULES ${Slicer_ADDITIONAL_REQUIRED_QT_MODULES})\n```\n\n----------------------------------------\n\nTITLE: Setting Module Target Libraries - CMake\nDESCRIPTION: This snippet defines the libraries that the module depends on. These libraries are linked with the module during the build process to provide necessary functionalities.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  qMRMLWidgets\n  qSlicer${MODULE_NAME}SubjectHierarchyPlugins\n  qSlicer${MODULE_NAME}ModuleWidgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Example wrapper script (Bash)\nDESCRIPTION: This bash script provides an example of how to create a wrapper script for launching Slicer with the correct environment variables. It sets up `LD_LIBRARY_PATH`, `QT_PLUGIN_PATH`, `SLICER_HOME`, `PYTHONHOME`, `PYTHONPATH`, `TCL_LIBRARY`, `TK_LIBRARY`, and `TCLLIBPATH` based on the values in `SlicerLaunchSettings.ini` or by using the `--launch` argument.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/debugging/linuxcpp.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\nBASE_DIR=/cmn/git/Slicer4-sb/\nAPPLAUNCHER_DIR=$BASE_DIR/Slicer-build\n\nLD_PATHS=\"\n/cmn/git/Slicer4-sb/VTK-build/bin/.\n/cmn/git/Slicer4-sb/CTK-build/CTK-build/bin/.\n/usr/lib\n/cmn/git/Slicer4-sb/ITKv3-build/bin/.\n/cmn/git/Slicer4-sb/SlicerExecutionModel-build/ModuleDescriptionParser/bin/.\n/cmn/git/Slicer4-sb/teem-build/bin/.\n/cmn/git/Slicer4-sb/LibArchive-install/lib\n$APPLAUNCHER_DIR/bin/.\n../lib/Slicer-4.0/qt-loadable-modules\n$APPLAUNCHER_DIR/lib/Slicer-4.0/cli-modules/.\n$APPLAUNCHER_DIR/lib/Slicer-4.0/qt-loadable-modules/.\n/cmn/git/Slicer4-sb/tcl-build/lib\n/cmn/git/Slicer4-sb/OpenIGTLink-build\n/cmn/git/Slicer4-sb/OpenIGTLink-build/bin/.\n/cmn/git/Slicer4-sb/CTK-build/PythonQt-build/.\n/cmn/git/Slicer4-sb/python-build/lib\n/cmn/git/Slicer4-sb/python-build/lib/python2.6/site-packages/numpy/core\n/cmn/git/Slicer4-sb/python-build/lib/python2.6/site-packages/numpy/lib\n\"\nfor STR in $LD_PATHS; do LD_LIBRARY_PATH=\"${STR}:${LD_LIBRARY_PATH}\"; done\n\nQT_PLUGIN_PATH=$APPLAUNCHER_DIR/bin:/cmn/git/Slicer4-sb/CTK-build/CTK-build/bin:/usr/lib/qt4/plugins\nSLICER_HOME=/cmn/git/Slicer4-sb/Slicer-build\nPYTHONHOME=/cmn/git/Slicer4-sb/python-build\nPYTHONPATH=$APPLAUNCHER_DIR:/bin:$APPLAUNCHER_DIR:/bin/Python:/cmn/git/Slicer4-sb/python-build/lib/python2.6/site-packages:$APPLAUNCHER_DIR/lib/Slicer-4.0/qt-loadable-modules/.:$APPLAUNCHER_DIR/lib/Slicer-4.0/qt-loadable-modules/Python\nTCL_LIBRARY=/cmn/git/Slicer4-sb/tcl-build/lib/tcl8.4\nTK_LIBRARY=/cmn/git/Slicer4-sb/tcl-build/lib/tk8.4\nTCLLIBPATH=/cmn/git/Slicer4-sb/tcl-build/lib/itcl3.2:/cmn/git/Slicer4-sb/tcl-build/lib/itk3.2\n\nexport QTPLUGIN_PATH=$QT_PLUGIN_PATH\nexport SLICER_HOME=$SLICER_HOME\nexport PYTHONHOME=$PYTHONHOME\nexport PYTHONPATH=$PYTHONPATH\nexport TCL_LIBRARY=$TCL_LIBRARY\nexport TK_LIBRARY=$TK_LIBRARY\nexport TCLLIBPATH=$TCLLIBPATH\nexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH\n\nexec \"$@\"\n```\n\n----------------------------------------\n\nTITLE: Associating Remote URL with Local Git Repository (Bash)\nDESCRIPTION: This snippet shows how to associate a remote URL (e.g., a GitHub repository) with a local Git repository. This allows you to push and pull changes between your local extension's source code and the remote repository.  Replace `<username>/MyExtension` with the correct GitHub username and repository name.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/extensions.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add origin https://github.com/<username>/MyExtension\n```\n\n----------------------------------------\n\nTITLE: Set Module Resources in CMake\nDESCRIPTION: Specifies the resource file(s) that contain additional data like icons, translations, etc. These resources are packaged with the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperLoadableModuleTemplate/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_RESOURCES\n  Resources/qSlicer${MODULE_NAME}Module.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Resources in CMake\nDESCRIPTION: Sets the list of resource files (.qrc) used by the Segmentations module. These files contain images, icons, and other resources that are embedded into the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_RESOURCES\n  Resources/qSlicer${MODULE_NAME}Module.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Create Curve from Numpy Array (Python)\nDESCRIPTION: Creates a curve node from a numpy array of point positions.  It requires the numpy library and creates a vtkMRMLMarkupsCurveNode. The input numpy array should have a shape of (N, 3) where N is the number of points.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Create random numpy array to use as input\nimport numpy as np\npointPositions = np.random.uniform(-50,50,size=[15,3])\n\n# Create curve from numpy array\ncurveNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLMarkupsCurveNode\")\nslicer.util.updateMarkupsControlPointsFromArray(curveNode, pointPositions)\n```\n\n----------------------------------------\n\nTITLE: Building CLI using SEMMacroBuildCLI\nDESCRIPTION: This snippet uses the SEMMacroBuildCLI macro to generate the Command Line Interface (CLI) for the module. It specifies the module name, logo header, target libraries, and include directories. `EXECUTABLE_ONLY` indicates that only the executable should be built, not any shared libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/PETStandardUptakeValueComputation/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/NAMICLogo.h\n  # LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/CTSCLogo.h\n  TARGET_LIBRARIES ${${MODULE_NAME}_TARGET_LIBRARIES}\n  INCLUDE_DIRECTORIES\n    ${vtkITK_INCLUDE_DIRS}\n    ${MRMLCore_INCLUDE_DIRS}\n    ${SlicerBaseLogic_SOURCE_DIR}  ${SlicerBaseLogic_BINARY_DIR}\n  EXECUTABLE_ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Python Wrapping\nDESCRIPTION: Wraps the library for Python if VTK_WRAP_PYTHON is enabled.  It uses vtkMacroKitPythonWrap to handle the wrapping.  It also sets the folder property for the Python module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkITK/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif(VTK_WRAP_PYTHON)\n  vtkMacroKitPythonWrap(\n    KIT_NAME ${lib_name}\n    KIT_SRCS ${vtkITK_SRCS}\n    KIT_INSTALL_BIN_DIR ${${PROJECT_NAME}_INSTALL_BIN_DIR}\n    KIT_INSTALL_LIB_DIR ${${PROJECT_NAME}_INSTALL_LIB_DIR}\n    )\n  # Export target\n  export(TARGETS ${lib_name}Python APPEND FILE ${${PROJECT_NAME}_EXPORT_FILE})\n  # Folder\n  if(NOT \"${${PROJECT_NAME}_FOLDER}\" STREQUAL \"\")\n    set_target_properties(${lib_name}Python PROPERTIES FOLDER ${${PROJECT_NAME}_FOLDER})\n    if(TARGET ${lib_name}Hierarchy)\n      set_target_properties(${lib_name}Hierarchy PROPERTIES FOLDER ${${PROJECT_NAME}_FOLDER})\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Module Logic with Macro\nDESCRIPTION: This snippet uses the `SlicerMacroBuildModuleLogic` macro to build the module.  It passes the module name, export directive, include directories, source files, and target libraries as arguments to the macro. This macro encapsulates the common steps for building a Slicer module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/MRMLDM/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleLogic(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Unit Tests with Arguments (CMake)\nDESCRIPTION: Iterates through the `EXTENSION_TEST_PYTHON_SCRIPTS` list and adds a Python unit test for each script.  It specifies arguments such as disabling CLI modules, suppressing the main window, and including additional module paths for the test to run correctly.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/Testing/Python/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(scriptName ${EXTENSION_TEST_PYTHON_SCRIPTS})\n  slicer_add_python_unittest(\n    SCRIPT ${scriptName}\n    SLICER_ARGS --disable-cli-modules\n                --no-main-window\n                --additional-module-paths\n                  ${MODULE_BUILD_DIR}\n                  ${CMAKE_BINARY_DIR}/${Slicer_QTSCRIPTEDMODULES_LIB_DIR}\n    TESTNAME_PREFIX nomainwindow_\n    )\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Adding testing subdirectory\nDESCRIPTION: This snippet conditionally adds a testing subdirectory to the build process if testing is enabled and the operating system is not Windows. It allows tests to be executed to ensure the module's functionality.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/PETStandardUptakeValueComputation/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  if(NOT WIN32)\n    add_subdirectory(Testing)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting UI Source Files CMake\nDESCRIPTION: Defines the UI files that are used to create the module's user interface. These `.ui` files are typically created using Qt Designer and are used to generate C++ code that creates the UI elements. The filename relies on the MODULE_NAME variable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/ViewControllers/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_UI_SRCS\n  Resources/UI/qSlicer${MODULE_NAME}ModuleWidget.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Building CLI using SEMMacroBuildCLI\nDESCRIPTION: Builds the command-line interface (CLI) for the SimpleRegionGrowingSegmentation module using the SEMMacroBuildCLI macro.  It specifies the module name, logo header, and target libraries. Requires SlicerExecutionModel.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/SimpleRegionGrowingSegmentation/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/ITKLogo.h\n  TARGET_LIBRARIES ${ITK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Documentation Subdirectories (CMake)\nDESCRIPTION: Adds subdirectories related to documentation if `Slicer_BUILD_DOCUMENTATION` is enabled. It also creates custom targets for documentation generation and tarball creation.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_81\n\nLANGUAGE: CMake\nCODE:\n```\nif(Slicer_BUILD_DOCUMENTATION)\n  # Automatically generate documentation at build time\n  set(all_arg)\n  if(DOCUMENTATION_TARGET_IN_ALL)\n    set(all_arg \"ALL\")\n  endif()\n  add_custom_target(doc ${all_arg})\n  add_custom_target(doc-tarballs ${all_arg})\n\n  add_subdirectory(Utilities/Doxygen)\n  add_subdirectory(Utilities/Scripts/SlicerWizard/doc)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Export Displacement Magnitude as Volume\nDESCRIPTION: This snippet exports the displacement magnitude of a transform as a volume. It takes a transform node and a reference volume node as input. The `False` parameter prevents creating a color volume.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/transforms.md#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\ntransformNode=slicer.util.getNode('LinearTransform_3')\nreferenceVolumeNode=slicer.util.getNode('MRHead')\nslicer.modules.transforms.logic().CreateDisplacementVolumeFromTransform(transformNode, referenceVolumeNode, False)\n```\n\n----------------------------------------\n\nTITLE: Defining Resources - CMake\nDESCRIPTION: This snippet defines the resource files (.qrc) for the module. Resource files contain embedded resources like images, icons, and other data that the module needs at runtime.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_RESOURCES\n  Resources/${KIT}.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory for Designer Plugins\nDESCRIPTION: This snippet conditionally adds the `DesignerPlugins` subdirectory to the build process if `Slicer_BUILD_QT_DESIGNER_PLUGINS` is enabled. This allows building Qt Designer plugins as part of the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/Widgets/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_BUILD_QT_DESIGNER_PLUGINS)\n  add_subdirectory(DesignerPlugins)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Re-convert Segmentation with Modified Params\nDESCRIPTION: This snippet demonstrates how to re-convert a segmentation using a modified conversion parameter, specifically the smoothing factor for closed surface generation. It turns off surface smoothing and recreates the representation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport vtkSegmentationCorePython as vtkSegmentationCore\nsegmentation = getNode(\"Segmentation\").GetSegmentation()\n\n# Turn of surface smoothing\nsegmentation.SetConversionParameter(\"Smoothing factor\",\"0.0\")\n\n# Recreate representation using modified parameters (and default conversion path)\nsegmentation.RemoveRepresentation(vtkSegmentationCore.vtkSegmentationConverter.GetSegmentationClosedSurfaceRepresentationName())\nsegmentation.CreateRepresentation(vtkSegmentationCore.vtkSegmentationConverter.GetSegmentationClosedSurfaceRepresentationName())\n```\n\n----------------------------------------\n\nTITLE: Setting Module MOC Source Files\nDESCRIPTION: This snippet lists the header files that need to be processed by the Meta-Object Compiler (MOC). MOC generates code for Qt's signals and slots mechanism. MOC source files are .h files that use Qt's meta object system.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Plots/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_MOC_SRCS\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Extract Randomly Oriented Slabs - Python\nDESCRIPTION: This Python function extracts a specified number of randomly oriented slabs of a given shape from a volume. It returns a NumPy array containing the voxel data of the extracted slabs. It utilizes 3D Slicer's layout manager and slice logic to manipulate slice planes and resample the volume. Requires `numpy`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\ndef randomSlices(volume, sliceCount, sliceShape):\n  layoutManager = slicer.app.layoutManager()\n  redWidget = layoutManager.sliceWidget(\"Red\")\n  sliceNode = redWidget.mrmlSliceNode()\n  sliceNode.SetDimensions(*sliceShape, 1)\n  sliceNode.SetFieldOfView(*sliceShape, 1)\n  bounds = [0]*6\n  volume.GetRASBounds(bounds)\n  imageReslice = redWidget.sliceLogic().GetBackgroundLayer().GetReslice()\n\n  sliceSize = sliceShape[0] * sliceShape[1]\n  X = numpy.zeros([sliceCount, sliceSize])\n\n  for sliceIndex in range(sliceCount):\n    position = numpy.random.rand(3) * 2 - 1\n    position = [bounds[0] + bounds[1]-bounds[0] * position[0],\n      bounds[2] + bounds[3]-bounds[2] * position[1],\n      bounds[4] + bounds[5]-bounds[4] * position[2]]\n    normal = numpy.random.rand(3) * 2 - 1\n    normal = normal / numpy.linalg.norm(normal)\n    transverse = numpy.cross(normal, [0,0,1])\n    orientation = 0\n    sliceNode.SetSliceToRASByNTP( normal[0], normal[1], normal[2],\n      transverse[0], transverse[1], transverse[2],\n      position[0], position[1], position[2],\n      orientation)\n    if sliceIndex % 100 == 0:\n      slicer.app.processEvents()\n    imageReslice.Update()\n    imageData = imageReslice.GetOutputDataObject(0)\n    array = vtk.util.numpy_support.vtk_to_numpy(imageData.GetPointData().GetScalars())\n    X[sliceIndex] = array\n  return X\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries - CMake\nDESCRIPTION: This snippet specifies the target libraries that the module logic component depends on. It includes ITK libraries, essential for medical image analysis tasks.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Data/Logic/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  ${ITK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Conditionally Include Python Subdirectory (CMake)\nDESCRIPTION: This CMake code conditionally adds the `Python` directory to the build process based on the value of the `Slicer_USE_PYTHONQT` variable. If `Slicer_USE_PYTHONQT` is true, the `Python` directory (containing its own CMakeLists.txt) will be included. The assumption is that building the `Python` component is dependent on PythonQt support being enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(Slicer_USE_PYTHONQT)\n  add_subdirectory(Python)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Python Unit Test\nDESCRIPTION: This snippet adds a Python unit test for the PerformanceTests module using the 'slicer_add_python_unittest' function. It specifies the script to be used for testing, which is 'PerformanceTests.py'.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/PerformanceTests/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nslicer_add_python_unittest(SCRIPT PerformanceTests.py)\n```\n\n----------------------------------------\n\nTITLE: Defining a Layout Containing Two Viewports in XML\nDESCRIPTION: This XML defines a layout containing two viewports. The first viewport (default viewport) arranges a `vtkMRMLSliceNode` (Red, Axial) and a `vtkMRMLViewNode` horizontally. The second viewport (dockable) also arranges a `vtkMRMLSliceNode` and a `vtkMRMLViewNode` horizontally, and is configured to be dockable at the bottom, labeled as \"Views+\".\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/advanced_topics.md#_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<viewports>\n <!--default viewport-->\n <layout type=\"horizontal\">\n  <item>\n   <view class=\"vtkMRMLSliceNode\" singletontag=\"Red\">\n    <property name=\"orientation\" action=\"default\">Axial</property>\n    <property name=\"viewlabel\" action=\"default\">R</property>\n    <property name=\"viewcolor\" action=\"default\">#F34A33</property>\n   </view>\n  </item>\n  <item>\n   <view class=\"vtkMRMLViewNode\" singletontag=\"1\">\n    <property name=\"viewlabel\" action=\"default\">1</property>\n   </view>\n  </item>\n </layout>\n <!--second dockable viewport-->\n <layout name=\"views+\" type=\"horizontal\" label=\"Views+\" dockable=\"true\" dockPosition=\"bottom\">>\n  <item>\n   <view class=\"vtkMRMLSliceNode\" singletontag=\"Red+\">\n    <property name=\"orientation\" action=\"default\">Axial</property>\n    <property name=\"viewlabel\" action=\"default\">R+</property>\n    <property name=\"viewcolor\" action=\"default\">#f9a99f</property>\n    <property name=\"viewgroup\" action=\"default\">1</property>\n   </view>\n  </item>\n  <item>\n   <view class=\"vtkMRMLViewNode\" singletontag=\"1+\" type=\"secondary\">\n    <property name=\"viewlabel\" action=\"default\">1+</property>\n    <property name=\"viewgroup\" action=\"default\">1</property>\n   </view>\n  </item>\n </layout>\n</viewports>\n```\n\n----------------------------------------\n\nTITLE: VTK Python Wrapping Check\nDESCRIPTION: This snippet checks if Python wrapping is enabled for VTK when Slicer_USE_PYTHONQT is ON. If Slicer_USE_PYTHONQT is enabled but VTK_WRAP_PYTHON is not, a fatal error is raised, indicating a configuration problem.  This ensures that VTK has Python wrapping enabled when Python Qt is used.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCLI/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(Slicer_USE_PYTHONQT AND NOT VTK_WRAP_PYTHON)\n  message(FATAL_ERROR \"Since Slicer_USE_PYTHONQT is ON, VTK_WRAP_PYTHON is expected to be ON. \"\n                      \"Re-configure VTK with python wrapping.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Excluding Files from Wrapping (CMake)\nDESCRIPTION: This snippet excludes certain header files from being processed by the wrapper tool. This is typically done for abstract classes or other files that should not be exposed directly.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTGUI/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Since the wrapper doesn't consider hierarchy of classes, let's exclude\n# classes deriving from pure abstract class and remaining abstract pure\nset_source_files_properties(\n  qSlicerAbstractModule.h\n  qSlicerAbstractModulePanel.h\n  qSlicerAbstractModuleWidget.h\n  qSlicerFileDialog.h\n  qSlicerLoadableModule.h\n  WRAP_EXCLUDE\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Target Libraries\nDESCRIPTION: Defines the target libraries that the project depends on.  It includes qSlicerModulesCore and conditionally adds qSlicerBaseQTCLI based on the Slicer_BUILD_CLI_SUPPORT option.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTApp/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT_target_libraries\n  # ${QT_LIBRARIES} # Not needed: All dependencies are transitively satisfied by other targets\n  qSlicerModulesCore\n  )\n\nif(Slicer_BUILD_CLI_SUPPORT)\n  list(APPEND KIT_target_libraries\n    qSlicerBaseQTCLI\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Module UI Sources in CMake\nDESCRIPTION: Defines the UI files (created with Qt Designer) for the module's widgets. These files are converted into C++ code during the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_UI_SRCS\n  Resources/UI/qSlicer${MODULE_NAME}ModuleWidget.ui\n  Resources/UI/qSlicer${MODULE_NAME}IOOptionsWidget.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Export Directive\nDESCRIPTION: Defines the export directive used for the module. This directive is used when building the module as a shared library to ensure proper symbol visibility and is crucial for linking against the module from other parts of Slicer.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/GeneralizedReformat/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_EXPORT_DIRECTIVE \"Q_SLICER_QTMODULES_${MODULE_NAME_UPPER}_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Setting Module UI Source Files in CMake\nDESCRIPTION: This specifies the Qt Designer UI files (.ui) used by the module. In this case, it includes the UI file for the module widget, which defines the visual layout and components of the widget.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_UI_SRCS\n  Resources/UI/qSlicer${MODULE_NAME}ModuleWidget.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Resource Files in CMake\nDESCRIPTION: This snippet defines resource files for the module, such as Qt resource files (.qrc).  These files can contain images, stylesheets, and other resources used by the module's user interface.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOMLib/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_RESOURCES\n  )\n```\n\n----------------------------------------\n\nTITLE: Build Module Widgets (CMake)\nDESCRIPTION: This snippet uses the `SlicerMacroBuildModuleWidgets` macro to build the module widgets. It passes in the previously defined variables for name, export directive, include directories, source files, UI files, target libraries, and resources. The `WRAP_PYTHONQT` option indicates that PythonQt wrappers should be generated.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Units/Widgets/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSlicerMacroBuildModuleWidgets(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  UI_SRCS ${${KIT}_UI_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  RESOURCES ${${KIT}_RESOURCES}\n  WRAP_PYTHONQT\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Resources\nDESCRIPTION: This snippet lists the resource files for the module. These files contain data such as images and translations that the module needs. This .qrc file is an XML file that lists other resource files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Plots/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_RESOURCES\n  Resources/qSlicer${MODULE_NAME}Module.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: ParameterPack Attributes and Constructor Usage\nDESCRIPTION: This code demonstrates the features of auto-generated methods and attributes of `@parameterPack` classes, including construction with and without arguments, validation, equality comparison, and string representation.  It also shows the use of `Annotated` types with validation annotations.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/parameter_nodes/supported_types.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n>>> from typing import Annotated\n>>> from slicer.parameterNodeWrapper import *\n>>>\n>>> @parameterPack\n>>> class ParameterPack:\n>>>     # if the type is Annotated, it will treat the annotations the same as @parameterNodeWrapper\n>>>     x: Annotated[float, WithinRange(0, 10)]\n>>>     option: Annotated[str, Choice([\"a\",\"b\"])] = \"b\"\n>>>\n>>> # with no arguments the constructor will use the given (or implied) defaults.\n>>> p1 = ParameterPack()  # == ParameterPack(x=0.0, option=\"b\")\n>>>\n>>> # positional arguments are accepted in the order the members are declared in\n>>> p2 = ParameterPack(3.0, \"a\")\n>>>\n>>> # keyword arguments are accepted with the keyword being the member names\n>>> p3 = ParameterPack(option=\"a\", x=3.0)\n>>>\n>>> # unspecified arguments use their default\n>>> p4 = ParameterPack(4.5)  # == ParameterPack(x=4.5, option=\"b\")\n>>> p5 = ParameterPack(option=\"a\")  # == ParameterPack(x=0.0, option=\"a\")\n>>>\n>>> # validators are run on construction\n>>> p6 = ParameterPack(-1, \"a\")\nValueError: Value must be within range [0, 10], is -1\n>>>\n>>> # validators are run on set attribute\n>>> p4.option = \"c\"\nParameterPack(x=4.5, option=b)\n>>>\n>>> # the classes automatically have __eq__ added to them\n>>> p1 == p2\nFalse\n>>> p2 == p3\nTrue\n>>>\n>>> # the classes are also given a __repr__ and a __str__ that describes their attributes\n>>> print(p4)\nParameterPack(x=4.5, option=\"b\")\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries in CMake\nDESCRIPTION: This snippet defines the target libraries that the Annotations module depends on. It lists the Qt and VTK libraries, as well as the MRML and Logic libraries specific to the module. It ensures that the module is linked against these libraries during the build process. It depends on the MODULE_NAME variable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Annotations/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_TARGET_LIBRARIES\n  qSlicerBaseQTCore\n  qMRMLWidgets\n  vtkSlicer${MODULE_NAME}ModuleMRML\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  )\n```\n\n----------------------------------------\n\nTITLE: Overwriting Default Options\nDESCRIPTION: This code snippet includes a file that overwrites default CMake options. If the specified file exists, it's included, allowing for customization of build settings. This allows for a specific set of options to be applied based on the environment or desired build configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(_overwrite_options_file ${Slicer_CMAKE_DIR}/SlicerOverwriteDefaultOptions.cmake)\nif(EXISTS ${_overwrite_options_file})\n  include(${_overwrite_options_file})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Define Original Image - CMake\nDESCRIPTION: Defines the variable `OriginalImage` which points to the input image used for transformations. This image is then passed as input to the transformation tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleDTIVolume/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(OriginalImage DATA{${INPUT}/dt-helix.nrrd})\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Validator with ParameterNodeWrapper (Python)\nDESCRIPTION: This snippet shows how to create a custom validator class that inherits from `Validator` and implements a `validate` method. The `validate` method raises a `ValueError` if the provided value does not meet the specified criteria (in this case, matching a regex pattern).  The custom validator is then used with `parameterNodeWrapper` to validate a string parameter.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/parameter_nodes/validators.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport re\nfrom typing import Annotated\nfrom slicer.parameterNodeWrapper import parameterNodeWrapper, Validator\n\n# Custom validators must derive from the Validator class.\nclass MatchesRegex(Validator):\n  def __init__(self, regex):\n    self.regex = regex\n  # Custom validators must implement a validate function that raises an Exception\n  # if the given value is invalid.\n  def validate(self, value):\n    if re.match(self.regex, value) is None:\n      raise ValueError(\"Did not match regex\")\n\n@parameterNodeWrapper\nclass CustomParameterNode:\n  value: Annotated[str, MatchesRegex(\"[abc]+\")] = \"abcba\"\n\n\nparam = CustomParameterNode(slicer.mrmlScene.AddNewNodeByClass('vtkMRMLScriptedModuleNode'))\n\nparam.value = \"abcabc\" # ok\nparam.value = \"d\" # ValueError raised\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name\nDESCRIPTION: This snippet sets the module name to 'SegmentEditor'. This name is used throughout the CMake configuration to identify the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/SegmentEditor/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_NAME SegmentEditor)\n```\n\n----------------------------------------\n\nTITLE: Setting Module Target Libraries - CMake\nDESCRIPTION: Specifies the libraries that the module depends on. These libraries provide additional functionality required by the module, such as widget components, logic implementations, and subject hierarchy plugins.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Texts/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_TARGET_LIBRARIES\n  qSlicer${MODULE_NAME}ModuleWidgets\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  qSlicer${MODULE_NAME}SubjectHierarchyPlugins\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories (Conditional) - CMake\nDESCRIPTION: Conditionally adds subdirectories for designer plugins and testing if the corresponding build options are enabled.  This allows for modular builds with optional components.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Widgets/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_BUILD_QT_DESIGNER_PLUGINS)\n  add_subdirectory(DesignerPlugins)\nendif()\n\n#-----------------------------------------------------------------------------\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Add Python Unit Test with Args\nDESCRIPTION: This command adds a Python script as a unit test with specified arguments for Slicer. The arguments, such as `--disable-cli-modules`, are passed to the Slicer application when the test script is executed.  The test script being added is VolumesLogicCompareVolumeGeometry.py.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/Testing/Python/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nslicer_add_python_unittest(SLICER_ARGS --disable-cli-modules SCRIPT VolumesLogicCompareVolumeGeometry.py)\n```\n\n----------------------------------------\n\nTITLE: Building the library\nDESCRIPTION: This snippet builds the MRMLCLI library. It sets the library name to `MRMLCLI` and uses the source files defined in `MRMLCLI_SRCS`. It then adds the library using `add_library` and links it against `MRMLCore`, `ModuleDescriptionParser`, and the ITK libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/CLI/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(lib_name ${PROJECT_NAME})\nset(srcs ${MRMLCLI_SRCS})\n\nadd_library(${lib_name} ${srcs})\n\nset(libs\n  MRMLCore\n  ModuleDescriptionParser ${ITK_LIBRARIES}\n  )\ntarget_link_libraries(${lib_name} ${libs})\n```\n\n----------------------------------------\n\nTITLE: Get Closed Surface Representation (Explicit)\nDESCRIPTION: This snippet retrieves the closed surface representation of a segment using slicer.vtkSlicerSegmentationsModuleLogic. If it does not exist, it will create it.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\noutputPolyData = vtk.vtkPolyData()\nslicer.vtkSlicerSegmentationsModuleLogic.GetSegmentClosedSurfaceRepresentation(segmentationNode, segmentID, outputPolyData)\n```\n\n----------------------------------------\n\nTITLE: Overriding XML Read/Write for MRML Attributes\nDESCRIPTION: These snippets demonstrate how to override the `ReadXMLAttributes()` and `WriteXML()` methods to handle the saving and loading of custom attributes for a MRML data node that are not automatically saved by the writer. This allows for persisting node-specific data.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/mrml_overview.md#_snippet_16\n\nLANGUAGE: C++\nCODE:\n```\nvoid ReadXMLAttributes(const char** atts)\n```\n\nLANGUAGE: C++\nCODE:\n```\nvoid WriteXML(ostream& of, int indent)\n```\n\n----------------------------------------\n\nTITLE: Building Loadable Module with slicerMacroBuildLoadableModule\nDESCRIPTION: Uses the custom `slicerMacroBuildLoadableModule` macro to simplify the module build process. This macro takes various parameters like source files, include directories, and dependencies to create the module target.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Data/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nslicerMacroBuildLoadableModule(\n  NAME ${MODULE_NAME}\n  EXPORT_DIRECTIVE ${MODULE_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${MODULE_INCLUDE_DIRECTORIES}\n  SRCS ${MODULE_SRCS}\n  MOC_SRCS ${MODULE_MOC_SRCS}\n  UI_SRCS ${MODULE_UI_SRCS}\n  TARGET_LIBRARIES ${MODULE_TARGET_LIBRARIES}\n  RESOURCES ${MODULE_RESOURCES}\n  WITH_GENERIC_TESTS\n  )\n```\n\n----------------------------------------\n\nTITLE: Set Module MOC Source Files - CMake\nDESCRIPTION: Defines the header files that need to be processed by the Meta-Object Compiler (MOC). MOC is used to generate code for Qt's signals and slots mechanism.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_MOC_SRCS\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  qSlicer${MODULE_NAME}Reader.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding ITK with Required Components - CMake\nDESCRIPTION: Finds the ITK (Insight Toolkit) package with specific components (ITKIOImageBase, ITKSmoothing). The ITK version must be 4.6 or greater. A compatibility workaround is included for ITK versions >= 5.3 to disable factory registration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/CLIExtensionTemplate/CLIModuleTemplate/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKIOImageBase\n  ITKSmoothing\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Adding an Observation Using the EventBroker in C++\nDESCRIPTION: This C++ code demonstrates adding an observation to a vtkObject (`node`) using the EventBroker. It observes the `vtkCommand::ModifiedEvent` on the `node` and calls `callbackCommand` on `this` object when the event is triggered. The EventBroker automatically manages the observation, including removal upon object destruction.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/advanced_topics.md#_snippet_16\n\nLANGUAGE: cpp\nCODE:\n```\nbroker->AddObservation(node, vtkCommand::ModifiedEvent, this, callbackCommand);\n```\n\n----------------------------------------\n\nTITLE: Adding Python Unit Tests\nDESCRIPTION: Adds a Python script as a unit test using the `slicer_add_python_unittest` macro. This makes the script runnable as part of the build/test process.  The macro likely handles setting up the necessary environment and running the Python script within a test framework. This is conditionally executed based on `Slicer_USE_QtTesting` and `Slicer_USE_PYTHONQT` being enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Applications/SlicerApp/Testing/Python/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif(Slicer_USE_QtTesting AND Slicer_USE_PYTHONQT)\n  slicer_add_python_unittest(SCRIPT AtlasTests.py)\n  slicer_add_python_unittest(SCRIPT DICOMReaders.py)\n  slicer_add_python_unittest(SCRIPT KneeAtlasTest.py)\n  slicer_add_python_unittest(SCRIPT sceneImport2428.py)\n  slicer_add_python_unittest(SCRIPT SlicerDisplayNodeSequenceTest.py)\n  slicer_add_python_unittest(SCRIPT SlicerMRBMultipleSaveRestoreLoopTest.py)\n  slicer_add_python_unittest(SCRIPT SlicerMRBMultipleSaveRestoreTest.py)\n  slicer_add_python_unittest(SCRIPT SlicerMRBSaveRestoreCheckPathsTest.py)\n  slicer_add_python_unittest(SCRIPT Slicer4Minute.py)\n  slicer_add_python_unittest(SCRIPT SlicerBoundsTest.py)\n  if(Slicer_BUILD_WEBENGINE_SUPPORT)\n    slicer_add_python_unittest(SCRIPT WebEngine.py)\n  endif()\n  slicer_add_python_unittest(SCRIPT SliceLinkLogic.py)\n  slicer_add_python_unittest(SCRIPT ScenePerformance.py)\n  slicer_add_python_unittest(SCRIPT SlicerRestoreSceneViewCrashIssue3445.py)\n  slicer_add_python_unittest(SCRIPT RSNAVisTutorial.py)\n  slicer_add_python_unittest(SCRIPT RSNAQuantTutorial.py)\n  slicer_add_python_unittest(SCRIPT SlicerOrientationSelectorTest.py)\n  # Currently needs to be updated for new widget. PR-7562: https://github.com/Slicer/Slicer/pull/7562\n  #slicer_add_python_unittest(SCRIPT SlicerTransformInteractionTest1.py)\n  slicer_add_python_unittest(SCRIPT UtilTest.py)\n  slicer_add_python_unittest(SCRIPT ViewControllersSliceInterpolationBug1926.py)\n  slicer_add_python_unittest(SCRIPT RSNA2012ProstateDemo.py)\n  slicer_add_python_unittest(SCRIPT JRC2013Vis.py)\n  slicer_add_python_unittest(SCRIPT FiducialLayoutSwitchBug1914.py)\n  slicer_add_python_unittest(SCRIPT ShaderProperties.py)\n  slicer_add_python_unittest(SCRIPT SlicerScriptedFileReaderWriterTest.py)\n  slicer_add_python_unittest(SCRIPT CurvedPlanarReformation.py)\n```\n\n----------------------------------------\n\nTITLE: Building Loadable Module in CMake\nDESCRIPTION: This snippet uses the slicerMacroBuildLoadableModule macro to build the Annotations module. It passes various parameters, including the module name, export directive, include directories, source files, and target libraries. It also enables generic tests. This macro handles the details of compiling and linking the module. It depends on MODULE_NAME, MODULE_EXPORT_DIRECTIVE, MODULE_INCLUDE_DIRECTORIES, MODULE_SRCS, MODULE_MOC_SRCS, MODULE_UI_SRCS, MODULE_TARGET_LIBRARIES and MODULE_RESOURCES variables.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Annotations/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroBuildLoadableModule(\n  NAME ${MODULE_NAME}\n  EXPORT_DIRECTIVE ${MODULE_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${MODULE_INCLUDE_DIRECTORIES}\n  SRCS ${MODULE_SRCS}\n  MOC_SRCS ${MODULE_MOC_SRCS}\n  UI_SRCS ${MODULE_UI_SRCS}\n  TARGET_LIBRARIES ${MODULE_TARGET_LIBRARIES}\n  RESOURCES ${MODULE_RESOURCES}\n  WITH_GENERIC_TESTS\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Python Resources - CMake\nDESCRIPTION: This snippet defines a list of resources (icons, HTML files, stylesheets, etc.) used by the WebServer module.  These resources are used to provide the user interface and other static content for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/WebServer/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_PYTHON_RESOURCES\n  Resources/Icons/WebServer.svg  # source: Google Material Icon set (api_black_24dp.svg)\n  Resources/docroot/index.html\n  Resources/docroot/browse.html\n  Resources/docroot/favicon.ico\n  Resources/docroot/package.json\n  Resources/docroot/images/3DSlicer-DesktopIcon.png\n  Resources/docroot/ServerTests/glMatrix-0.9.5.min.js\n  Resources/docroot/ServerTests/index.html\n  Resources/docroot/ServerTests/threeDCube.html\n  Resources/docroot/ServerTests/timecube.html\n  Resources/docroot/ServerTests/threejs.html\n  Resources/docroot/ServerTests/threejs.css\n  Resources/docroot/ServerTests/modelviewer.html\n  Resources/docroot/ServerTests/webgl-utils.js\n  Resources/docroot/stylesheets/application.css\n  )\n```\n\n----------------------------------------\n\nTITLE: Access DTI tensor volume values in Slicer (Python)\nDESCRIPTION: This example demonstrates how to access individual tensors at the voxel level in a DTI tensor volume using both NumPy and VTK commands.  It assumes a DTI volume named 'Output DTI Volume' is already loaded. It uses numpy and vtk. The first snippet accesses the tensor array using numpy. The second accesses the tensor data using vtk commands to iterate through voxels.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\ntensors = array(\"Output DTI Volume\")\n```\n\nLANGUAGE: Python\nCODE:\n```\nvolumeNode=slicer.util.getNode(\"Output DTI Volume\")\nimagedata=volumeNode.GetImageData()\ntensors = imageData.GetPointData().GetTensors()\nextent = imageData.GetExtent()\nidx = 0\nfor k in range(extent[4], extent[5]+1):\n  for j in range(extent[2], extent[3]+1):\n    for i in range(extent[0], extent[1]+1):\n      tensors.GetTuple9(idx)\n      idx += 1\n```\n\n----------------------------------------\n\nTITLE: Building module widgets using macro - CMake\nDESCRIPTION: This snippet invokes the `SlicerMacroBuildModuleWidgets` macro to build the module widgets. It passes in the `NAME`, `EXPORT_DIRECTIVE`, `INCLUDE_DIRECTORIES`, `SRCS`, `MOC_SRCS`, `UI_SRCS`, `TARGET_LIBRARIES`, `RESOURCES` and `WRAP_PYTHONQT` parameters.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/Widgets/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nSlicerMacroBuildModuleWidgets(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  UI_SRCS ${${KIT}_UI_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  RESOURCES ${${KIT}_RESOURCES}\n  WRAP_PYTHONQT\n  )\n```\n\n----------------------------------------\n\nTITLE: macOS Specific Settings\nDESCRIPTION: This snippet includes a CMake module to initialize macOS-specific variables and configures settings related to installation names and runtime paths. It includes `SlicerInitializeOSXVariables` and then clears `CMAKE_INSTALL_NAME_TOOL` which can be set by some external projects.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(APPLE)\n  # Note: By setting CMAKE_OSX_* variables before any enable_language() or project() calls,\n  #       we ensure that the bitness, and C++ standard library will be properly detected.\n  include(SlicerInitializeOSXVariables)\n  mark_as_superbuild(\n    VARS CMAKE_OSX_ARCHITECTURES:STRING CMAKE_OSX_SYSROOT:PATH CMAKE_OSX_DEPLOYMENT_TARGET:STRING\n    ALL_PROJECTS\n    )\n\n  set(CMAKE_INSTALL_NAME_TOOL \"\" CACHE FILEPATH \"\" FORCE)\n  # Due to the possibility of external projects (e.g., LibFFI) enabling languages (e.g., ASM)\n  # that necessitate `install_name_tool` via the \"CMakeFindBinUtils\" module, we opt to clear\n  # CMAKE_INSTALL_NAME_TOOL on a per-project basis.\n  # mark_as_superbuild(VARS CMAKE_INSTALL_NAME_TOOL:FILEPATH ALL_PROJECTS)\n\n  set(CMAKE_MACOSX_RPATH 0)\n  mark_as_superbuild(VARS CMAKE_MACOSX_RPATH:BOOL ALL_PROJECTS)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel Package\nDESCRIPTION: This snippet finds the SlicerExecutionModel package, which is essential for Slicer modules, and includes its use file to access necessary functions and macros.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CreateDICOMSeries/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Setting Export Directive - CMake\nDESCRIPTION: Defines the export directive for the module, which is used to control symbol visibility. The export directive is set to Q_SLICER_${MODULE_NAME_UPPER}_SUBJECT_HIERARCHY_PLUGINS_EXPORT.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_EXPORT_DIRECTIVE \"Q_SLICER_${MODULE_NAME_UPPER}_SUBJECT_HIERARCHY_PLUGINS_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Building and Linking Executable with Image Spacing On - CMake\nDESCRIPTION: This snippet is similar to the previous one, but it builds and links the executable `${CLP}TestWithImageSpacingOn`. The key difference is the addition of the `--useImageSpacing` flag in the `ExternalData_add_test` command, enabling image spacing during the test. It creates an executable from `${CLP}Test.cxx`, links it to libraries, sets properties, and establishes an external data test.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GradientAnisotropicDiffusion/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nctk_add_executable_utf8(${CLP}TestWithImageSpacingOn ${CLP}Test.cxx)\ntarget_link_libraries(${CLP}TestWithImageSpacingOn ${CLP}Lib ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES})\nset_target_properties(${CLP}TestWithImageSpacingOn PROPERTIES LABELS ${CLP})\nset_target_properties(${CLP}TestWithImageSpacingOn PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n\nset(testname ${CLP}TestWithImageSpacingOn)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}TestWithImageSpacingOn>\n  --compare DATA{${BASELINE}/GradientAnisotropicDiffusionTestWithImageSpacingOn.nhdr,GradientAnisotropicDiffusionTestWithImageSpacingOn.raw.gz}\n            ${TEMP}/GradientAnisotropicDiffusionTestWithImageSpacingOn.nhdr\n  ModuleEntryPoint\n    --conductance 2\n    --timeStep 0.0625\n    --iterations 2\n    --useImageSpacing\n    DATA{${INPUT}/MRHeadResampled.nhdr,MRHeadResampled.raw.gz}\n    ${TEMP}/GradientAnisotropicDiffusionTestWithImageSpacingOn.nhdr\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel\nDESCRIPTION: Finds the SlicerExecutionModel package, which provides necessary macros and functions for building Slicer modules. It requires the package and includes its use file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ModelToLabelMap/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Building Qt Designer Plugin with Macro (CMake)\nDESCRIPTION: This snippet invokes the `ctkMacroBuildQtDesignerPlugin` macro to automate the build process of a Qt Designer plugin.  It passes the pre-defined variables such as plugin name, export directive, source files, MOC files and target libraries as arguments. This macro is assumed to handle the generation of build rules for creating the plugin library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Units/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nctkMacroBuildQtDesignerPlugin(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT}\n  FOLDER \"Module-${MODULE_NAME}\"\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Set Module Resources in CMake\nDESCRIPTION: Specifies the resources that the module uses, such as icons and other data files. These resources are compiled into a Qt resource file (QRC) that is linked into the module. This resource file makes the icons and other resources available during runtime.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Sequences/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_RESOURCES\n  Resources/qSlicer${MODULE_NAME}Module.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name\nDESCRIPTION: Sets the name of the module and converts it to uppercase for use in other CMake variables. This allows for dynamic configuration of module-specific settings and ensures consistency throughout the build process. The `string(TOUPPER)` command is a standard CMake function for string manipulation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Units/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME Units)\n\nstring(TOUPPER ${MODULE_NAME} MODULE_NAME_UPPER)\n```\n\n----------------------------------------\n\nTITLE: Building Module Logic\nDESCRIPTION: This snippet uses the SlicerMacroBuildModuleLogic macro to build the module logic. This macro takes the name of the module, the export directive, the include directories, the source files, and the target libraries as input.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/VTKWidgets/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nSlicerMacroBuildModuleLogic(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Application Tests with Command Line Options\nDESCRIPTION: Adds application tests that check command-line options for disabling modules. It utilizes the `add_test` command to define these tests, specifying the test name and the command to execute. It checks if the application starts correctly with specified command-line options. Slicer_LAUNCH_COMMAND is used to launch the application executable with various parameters.\nSOURCE: https://github.com/slicer/slicer/blob/main/Applications/SlicerApp/Testing/Cpp/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_HAS_CONSOLE_IO_SUPPORT)\n  add_test(\n    NAME slicer_nomainwindow_DisableModulesCommandLineOptionsTest\n    COMMAND ${Slicer_LAUNCH_COMMAND} $<TARGET_FILE:${APP_TARGET_NAME}>\n    ${ARGN} --testing --verbose-module-discovery --disable-modules\n    )\n  add_test(\n    NAME slicer_nomainwindow_DisableModulesCommandLineOptionsTest2\n    COMMAND ${Slicer_LAUNCH_COMMAND} $<TARGET_FILE:${APP_TARGET_NAME}>\n    ${ARGN} --testing --verbose-module-discovery --disable-cli-modules --disable-loadable-modules --disable-scripted-loadable-modules\n    )\n  set_tests_properties(\n    slicer_nomainwindow_DisableModulesCommandLineOptionsTest\n    slicer_nomainwindow_DisableModulesCommandLineOptionsTest2\n    PROPERTIES PASS_REGULAR_EXPRESSION \"Number of loaded modules: 1\"\n    )\n\n  add_test(\n    NAME slicer_nomainwindow_NoApplicationInformationOptionTest\n    COMMAND ${Slicer_LAUNCH_COMMAND} $<TARGET_FILE:${APP_TARGET_NAME}>\n    --disable-modules --ignore-slicerrc --exit-after-startup\n    )\n  set_tests_properties(\n    slicer_nomainwindow_NoApplicationInformationOptionTest\n    PROPERTIES FAIL_REGULAR_EXPRESSION \"Session start time\"\n    )\n  add_test(\n    NAME slicer_nomainwindow_ApplicationInformationOptionTest\n    COMMAND ${Slicer_LAUNCH_COMMAND} $<TARGET_FILE:${APP_TARGET_NAME}>\n    --disable-modules --ignore-slicerrc --exit-after-startup --application-information\n    )\n  set_tests_properties(\n    slicer_nomainwindow_ApplicationInformationOptionTest\n    PROPERTIES PASS_REGULAR_EXPRESSION \"Session start time\"\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding PythonQt Resources and Compile Targets (CMake)\nDESCRIPTION: Adds targets to copy Python resource and script files and compile Python scripts, if `Slicer_USE_PYTHONQT` is enabled, using `slicerFunctionAddPythonQtResourcesTargets` and `ctkFunctionAddCompilePythonScriptTargets` respectively. It also handles compilation of python standard library and site-packages modules, excluding test directories.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_84\n\nLANGUAGE: CMake\nCODE:\n```\nif(Slicer_USE_PYTHONQT)\n  slicerFunctionAddPythonQtResourcesTargets(SlicerPythonResources)\n  ctkFunctionAddCompilePythonScriptTargets(\n    ${CTK_COMPILE_PYTHON_SCRIPTS_GLOBAL_TARGET_NAME}\n    DEPENDS SlicerPythonResources\n    )\n\n  set(_python_dir ${Slicer_SUPERBUILD_DIR}/python-install)\n  if(NOT Slicer_USE_SYSTEM_python OR NOT EXISTS ${_python_dir})\n    # Custom target to ensure there are cached byte-code files for all the python\n    # standard library and site-packages modules.\n    #\n    # Considering (1) some of the tests purposefully include invalid code\n    # that would lead the compilation to fail and (2) test directories are\n    # explicitly excluded from packages in \"CMake/SlicerBlockInstallPython.cmake\",\n    # the corresponding files are excluded from the compilation passing the \"-x\"\n    # argument.\n    add_custom_command(\n      COMMAND ${PYTHON_EXECUTABLE} -m compileall -q -x \"[\\/\\\\]test[s]?[\\/\\\\]\" ${_python_dir}/${PYTHON_STDLIB_SUBDIR}\n      OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/python_compile_stdlib_and_sitepackages_complete\n      COMMENT \"Compiling python stdlib and site-packages modules: ${_python_dir}/${PYTHON_STDLIB_SUBDIR}\"\n      VERBATIM\n      )\n    add_custom_target(CompileStdLibAndSitePackagesPythonFiles ALL\n      DEPENDS\n        ${CMAKE_CURRENT_BINARY_DIR}/python_compile_stdlib_and_sitepackages_complete\n      )\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Slicer Directories Configuration\nDESCRIPTION: This snippet includes a CMake module that defines and configures the directory structure for the Slicer project. This module is responsible for setting up the standard directory layout used throughout the project.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_36\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(SlicerDirectories)\n```\n\n----------------------------------------\n\nTITLE: Rotate a Node Around a Specified Point (Python)\nDESCRIPTION: This Python code rotates a node around a specified point. It requires setting up the scene with a markup point list node for the center of rotation, a rotation transform node for specifying rotation angles, and a final transform node to be applied to the target nodes. The `updateFinalTransform` function calculates the final transform matrix and applies it to the finalTransformNode.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/transforms.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# This markups point list node specifies the center of rotation\ncenterOfRotationMarkupsNode = getNode(\"F\")\n# This transform can be  edited in Transforms module\nrotationTransformNode = getNode(\"LinearTransform_3\")\n# This transform has to be applied to the image, model, etc.\nfinalTransformNode = getNode(\"LinearTransform_4\")\n\ndef updateFinalTransform(unusedArg1=None, unusedArg2=None, unusedArg3=None):\n  rotationMatrix = vtk.vtkMatrix4x4()\n  rotationTransformNode.GetMatrixTransformToParent(rotationMatrix)\n  rotationCenterPointCoord = [0.0, 0.0, 0.0]\n  centerOfRotationMarkupsNode.GetNthControlPointPositionWorld(0, rotationCenterPointCoord)\n  finalTransform = vtk.vtkTransform()\n  finalTransform.Translate(rotationCenterPointCoord)\n  finalTransform.Concatenate(rotationMatrix)\n  finalTransform.Translate(-rotationCenterPointCoord[0], -rotationCenterPointCoord[1], -rotationCenterPointCoord[2])\n  finalTransformNode.SetAndObserveMatrixTransformToParent(finalTransform.GetMatrix())\n\n# Manual initial update\nupdateFinalTransform()\n\n# Automatic update when point is moved or transform is modified\nrotationTransformNodeObserver = rotationTransformNode.AddObserver(slicer.vtkMRMLTransformNode.TransformModifiedEvent, updateFinalTransform)\ncenterOfRotationMarkupsNodeObserver = centerOfRotationMarkupsNode.AddObserver(slicer.vtkMRMLMarkupsNode.PointModifiedEvent, updateFinalTransform)\n\n# Execute these lines to stop automatic updates:\n# rotationTransformNode.RemoveObserver(rotationTransformNodeObserver)\n# centerOfRotationMarkupsNode.RemoveObserver(centerOfRotationMarkupsNodeObserver)\n```\n\n----------------------------------------\n\nTITLE: Adding Slicer Python Code Tests\nDESCRIPTION: Adds several tests to check if the '--python-code' option works as expected. It verifies both successful and failed exits using `slicer.util.EXIT_SUCCESS` and `slicer.util.EXIT_FAILURE`. The tests are run in a no-main-window mode.\nSOURCE: https://github.com/slicer/slicer/blob/main/Applications/SlicerApp/Testing/Python/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(\n  NAME py_nomainwindow_SlicerPythonCodeExitSuccessTest\n  COMMAND ${Slicer_LAUNCH_COMMAND} $<TARGET_FILE:${APP_TARGET_NAME}>\n  --disable-modules --ignore-slicerrc --no-main-window\n  --python-code \"exit(slicer.util.EXIT_SUCCESS)\"\n  )\nadd_test(\n  NAME py_nomainwindow_testing_SlicerPythonCodeExitSuccessTest\n  COMMAND ${Slicer_LAUNCH_COMMAND} $<TARGET_FILE:${APP_TARGET_NAME}>\n  --testing --disable-modules --no-main-window\n  --python-code \"exit(slicer.util.EXIT_SUCCESS)\"\n  )\n\nadd_test(\n  NAME py_nomainwindow_SlicerPythonCodeExitFailureTest\n  COMMAND ${Slicer_LAUNCH_COMMAND} $<TARGET_FILE:${APP_TARGET_NAME}>\n  --disable-modules --ignore-slicerr --no-main-windowc\n  --python-code \"exit(slicer.util.EXIT_FAILURE)\"\n  )\nadd_test(\n  NAME py_nomainwindow_testing_SlicerPythonCodeExitFailureTest\n  COMMAND ${Slicer_LAUNCH_COMMAND} $<TARGET_FILE:${APP_TARGET_NAME}>\n  --testing --disable-modules --no-main-window\n  --python-code \"exit(slicer.util.EXIT_FAILURE)\"\n  )\nset_tests_properties(\n    py_nomainwindow_SlicerPythonCodeExitFailureTest\n    py_nomainwindow_testing_SlicerPythonCodeExitFailureTest\n  PROPERTIES WILL_FAIL TRUE\n  )\n\nadd_test(\n  NAME py_nomainwindow_SlicerPythonCodeTest3\n  COMMAND ${Slicer_LAUNCH_COMMAND} $<TARGET_FILE:${APP_TARGET_NAME}>\n  --testing --disable-modules --no-main-window\n  --python-code \"import slicer.testing; slicer.testing.exitSuccess()\"\n  )\n\nadd_test(\n  NAME py_nomainwindow_SlicerPythonCodeTest4\n  COMMAND ${Slicer_LAUNCH_COMMAND} $<TARGET_FILE:${APP_TARGET_NAME}>\n  --testing --disable-modules --no-main-window\n  --python-code \"import slicer.testing; slicer.testing.exitFailure('Should fail !')\"\n  )\nset_tests_properties(py_nomainwindow_SlicerPythonCodeTest4 PROPERTIES WILL_FAIL TRUE\n\nadd_test(\n  NAME py_nomainwindow_SlicerPythonCodeTest5\n  COMMAND ${Slicer_LAUNCH_COMMAND} $<TARGET_FILE:${APP_TARGET_NAME}>\n  --testing --disable-modules --no-main-window\n  --python-code \"raise Exception('Should fail !')\"\n  )\nset_tests_properties(py_nomainwindow_SlicerPythonCodeTest5 PROPERTIES WILL_FAIL TRUE)\n```\n\n----------------------------------------\n\nTITLE: ITK to Slicer Transform Conversion (Python)\nDESCRIPTION: This Python code snippet converts an ITK affine transform to a Slicer transform. ITK transforms store the resampling transform in LPS coordinate system, while Slicer displays the modeling transform in RAS coordinate system. The code reads an ITK transform file, parses the transform parameters, and converts it to the Slicer coordinate system.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/transforms.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nimport re\n\ndef read_itk_affine_transform(filename):\n    with open(filename) as f:\n        tfm_file_lines = f.readlines()\n    # parse the transform parameters\n    match = re.match(\"Transform: AffineTransform_[a-z]+_([0-9]+)_([0-9]+)\", tfm_file_lines[2])\n    if not match or match.group(1) != '3' or match.group(2) != '3':\n        raise ValueError(f\"{filename} is not an ITK 3D affine transform file\")\n    p = np.array( tfm_file_lines[3].split()[1:], dtype=np.float64 )\n    # assemble 4x4 matrix from ITK transform parameters\n    itk_transform = np.array([\n        [p[0], p[1], p[2], p[9]],\n        [p[3], p[4], p[5], p[10]],\n        [p[6], p[7], p[8], p[11]],\n        [0, 0, 0, 1]])\n    return itk_transform\n\ndef itk_to_slicer_transform(itk_transform):\n    # ITK transform: from parent, using LPS coordinate system\n    # Transform displayed in Slicer: to parent, using RAS coordinate system\n    transform_from_parent_LPS = itk_transform\n    ras2lps = np.diag([-1, -1, 1, 1])\n    transform_from_parent_RAS = ras2lps @ transform_from_parent_LPS @ ras2lps\n    transform_to_parent_RAS = np.linalg.inv(transform_from_parent_RAS)\n    return transform_to_parent_RAS\n\nfilename = \"path/to/LinearTransform.tfm\"\nitk_tfm = read_itk_affine_transform(filename)\nslicer_tfm = itk_to_slicer_transform(itk_tfm)\nwith np.printoptions(precision=6, suppress=True):\n    print(slicer_tfm)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries\nDESCRIPTION: This snippet specifies the target libraries that the module depends on. These libraries will be linked against the module during the build process, providing access to necessary functionality.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/Widgets/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  qSlicerSubjectHierarchyModuleWidgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Parameter Pack with List Length Invariant - Python\nDESCRIPTION: This Python code defines an `InvariantTestPack` class using `parameterPack` with two lists, `listA` and `listB`. The invariant enforced is that the length of `listA` must be less than or equal to the length of `listB`. The `checkInvariant` method raises a `ValueError` if the invariant is violated.  The example also shows a common pitfall of directly modifying the list via `append`, bypassing the setter and breaking the invariant.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/parameter_nodes/supported_types.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom slicer.parameterNodeWrapper import (\n    parameterPack,\n)\n\n\n@parameterPack\nclass InvariantTestPack:\n    _listA: list[int]\n    _listB: list[int]\n\n    @staticmethod\n    def checkInvariant(listA, listB):\n        if not len(listA) <= len(listB):\n            raise ValueError(\"Invariant failed\")\n\n    def __init__(self, listA=None, listB=None) -> None:\n        if listA is not None:\n            self._listA = listA\n        if listB is not None:\n            self._listB = listB\n        self.checkInvariant(self._listA, self._listB)\n\n    @property\n    def listA(self):\n        return self._listA\n\n    @listA.setter\n    def listA(self, value):\n        self.checkInvariant(value, self.listB)\n        self._listA = value\n\n    @property\n    def listB(self):\n        return self._listB\n\n    @listB.setter\n    def listB(self, value):\n        self.checkInvariant(self.listA, value)\n        self._listB = value\n```\n\nLANGUAGE: python\nCODE:\n```\npack = InvariantTestPack(listA=[], listB=[])\n\npack.listA = [1]  # raises ValueError\n\npack.listA.append(1)  # BAD: does not raise ValueError\n```\n\n----------------------------------------\n\nTITLE: Finding ITK dependency\nDESCRIPTION: This snippet finds the ITK library using `find_package`. It sets the required ITK components based on the `ModuleDescriptionParser_ITK_COMPONENTS` variable and specifies a minimum ITK version of 4.6.  The ITK library is required for image processing functionalities.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/CLI/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ${ModuleDescriptionParser_ITK_COMPONENTS}\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: Sets the `${KIT}_SRCS` variable to a list of source files (.cxx and .h). These files constitute the main source code for the library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_SRCS\n  qSlicerSubjectHierarchy${MODULE_NAME}Plugin.cxx\n  qSlicerSubjectHierarchy${MODULE_NAME}Plugin.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Test Sources\nDESCRIPTION: This snippet defines a list of C++ source files for tests using the `set` command. These sources will be compiled into a test executable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/Widgets/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(TEST_SOURCES\n  qMRMLColorListViewTest1.cxx\n  qMRMLColorPickerWidgetTest1.cxx\n  qMRMLColorPickerWidgetTest2.cxx\n  qMRMLColorPickerWidgetTest3.cxx\n  qMRMLColorTableViewTest1.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Addition for Testing and Designer Plugins\nDESCRIPTION: Conditionally adds subdirectories for testing (if BUILD_TESTING is enabled) and designer plugins (if Slicer_BUILD_QT_DESIGNER_PLUGINS is enabled). This allows for building these components only when specified by the build configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/Widgets/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n\nif(Slicer_BUILD_QT_DESIGNER_PLUGINS)\n  add_subdirectory(DesignerPlugins)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Python Resources - DICOM - CMake\nDESCRIPTION: This snippet defines the Python resources associated with the DICOM module.  It sets the `MODULE_PYTHON_RESOURCES` variable to a list containing 'DICOMExtensions.json' and 'Resources/UI/DICOM.ui'. These resources likely include configuration files and UI definitions.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOM/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_PYTHON_RESOURCES\n  DICOMExtensions.json\n  Resources/UI/${MODULE_NAME}.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting MOC Source Files in CMake\nDESCRIPTION: Defines the MODULE_MOC_SRCS variable, listing the header files that require processing by the Meta-Object Compiler (MOC) to generate Qt meta-object code. These headers use Qt's signal and slot mechanism.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_MOC_SRCS\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  qSlicer${MODULE_NAME}Reader.h\n  qSlicerShaderPropertyReader.h\n  qSlicer${MODULE_NAME}SettingsPanel.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Executable, Linking Libraries, and Setting Properties (CMake)\nDESCRIPTION: This snippet adds an executable target named `${CLP}Test` using `ctk_add_executable_utf8`, links it against `${CLP}Lib` and `${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES}`, and sets various properties such as labels and folder location.  `${CLP}` represents the module name.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MaskScalarVolume/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nctk_add_executable_utf8(${CLP}Test ${CLP}Test.cxx)\ntarget_link_libraries(${CLP}Test ${CLP}Lib ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES})\nset_target_properties(${CLP}Test PROPERTIES LABELS ${CLP})\nset_target_properties(${CLP}Test PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Test with Rotation and NN Interpolation\nDESCRIPTION: This snippet adds a test case to evaluate the impact of applying a rotation transform with nearest neighbor interpolation. It sets the transform file, interpolation method, and other module parameters to resample the input volume and compares it against a known good output.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleScalarVectorDWIVolume/Testing/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(TransformFile ${ResampleDTIVolume_INPUT}/rotation.tfm)\nset(testname ${CLP}RotationNNTest)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  --compare\n    DATA{${INPUT}/MRHeadResampledRotationNN.nrrd}\n    ${TEMP}/${testname}.nrrd\n  ModuleEntryPoint\n    -f ${TransformFile}\n    --interpolation nn\n    -c\n    DATA{${INPUT}/MRHeadResampled.nhdr,MRHeadResampled.raw.gz}\n    ${TEMP}/${testname}.nrrd\n    -n 8\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Test in CMake\nDESCRIPTION: This snippet adds an external data test using `ExternalData_add_test`.  It compares the output of the module with a baseline, providing command line arguments for the module execution.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ThresholdScalarVolume/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(testname ${CLP}Test)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  --compare DATA{${BASELINE}/${CLP}Test.nhdr,ThresholdScalarVolumeTest.raw.gz}\n  ${TEMP}/${CLP}Test.nhdr\n  ModuleEntryPoint --upper 3800 --lower 1400 --outsidevalue 0 --thresholdtype Outside\n  DATA{${INPUT}/CTHeadAxial.nhdr,CTHeadAxial.raw.gz} ${TEMP}/${CLP}Test.nhdr\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: This snippet sets the source files for the module. These files contain the C++ code that implements the module's functionality. It lists both the .cxx and .h files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/VTKWidgets/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  vtk${MODULE_NAME}GlyphSource2D.cxx\n  vtk${MODULE_NAME}GlyphSource2D.h\n  vtkFastSelectVisiblePoints.cxx\n  vtkFastSelectVisiblePoints.h\n  vtkSlicerMarkupsWidgetRepresentation.cxx\n  vtkSlicerMarkupsWidgetRepresentation.h\n  vtkSlicerMarkupsWidgetRepresentation3D.cxx\n  vtkSlicerMarkupsWidgetRepresentation3D.h\n  vtkSlicerMarkupsWidgetRepresentation2D.cxx\n  vtkSlicerMarkupsWidgetRepresentation2D.h\n  vtkSlicerMarkupsWidget.cxx\n  vtkSlicerMarkupsWidget.h\n  vtkSlicerAngleRepresentation2D.cxx\n  vtkSlicerAngleRepresentation2D.h\n  vtkSlicerAngleRepresentation3D.cxx\n  vtkSlicerAngleRepresentation3D.h\n  vtkSlicerAngleWidget.cxx\n  vtkSlicerAngleWidget.h\n  vtkSlicerCurveRepresentation2D.cxx\n  vtkSlicerCurveRepresentation2D.h\n  vtkSlicerCurveRepresentation3D.cxx\n  vtkSlicerCurveRepresentation3D.h\n  vtkSlicerCurveWidget.cxx\n  vtkSlicerCurveWidget.h\n  vtkSlicerLineRepresentation3D.cxx\n  vtkSlicerLineRepresentation3D.h\n  vtkSlicerLineRepresentation2D.cxx\n  vtkSlicerLineRepresentation2D.h\n  vtkSlicerLineWidget.cxx\n  vtkSlicerLineWidget.h\n  vtkSlicerPointsRepresentation3D.cxx\n  vtkSlicerPointsRepresentation3D.h\n  vtkSlicerPointsRepresentation2D.cxx\n  vtkSlicerPointsRepresentation2D.h\n  vtkSlicerPointsWidget.cxx\n  vtkSlicerPointsWidget.h\n  vtkSlicerPlaneRepresentation2D.cxx\n  vtkSlicerPlaneRepresentation2D.h\n  vtkSlicerPlaneRepresentation3D.cxx\n  vtkSlicerPlaneRepresentation3D.h\n  vtkSlicerPlaneWidget.cxx\n  vtkSlicerPlaneWidget.h\n  vtkSlicerROIRepresentation2D.cxx\n  vtkSlicerROIRepresentation2D.h\n  vtkSlicerROIRepresentation3D.cxx\n  vtkSlicerROIRepresentation3D.h\n  vtkSlicerROIWidget.cxx\n  vtkSlicerROIWidget.h\n  vtkSlicerMarkupsInteractionWidget.cxx\n  vtkSlicerMarkupsInteractionWidget.h\n  vtkSlicerMarkupsInteractionWidgetRepresentation.cxx\n  vtkSlicerMarkupsInteractionWidgetRepresentation.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Qt Testing Tests\nDESCRIPTION: This CMake snippet defines multiple Qt-based tests using the QtTesting_TEST macro. These tests cover various MRML-related widgets and event translators. Some tests also specify scene files and data dependencies.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/Testing/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nQtTesting_TEST(qMRMLCheckableNodeComboBoxEventTranslatorPlayerTest1)\nQtTesting_TEST(qMRMLClipNodeWidgetEventTranslatorPlayerTest1)\nQtTesting_TEST(qMRMLCollapsibleButtonEventTranslatorPlayerTest1)\nQtTesting_TEST(qMRMLColorTableComboBoxEventTranslatorPlayerTest1)\nQtTesting_TEST(qMRMLDisplayNodeWidgetEventTranslatorPlayerTest1)\nQtTesting_TEST(qMRMLLabelComboBoxEventTranslatorPlayerTest1)\nQtTesting_TEST(qMRMLLinearTransformSliderEventTranslatorPlayerTest1)\nQtTesting_TEST(qMRMLListWidgetEventTranslatorPlayerTest1)\nQtTesting_TEST(qMRMLMatrixWidgetEventTranslatorPlayerTest1)\nQtTesting_TEST(qMRMLNavigationViewEventTranslatorPlayerTest1)\nQtTesting_TEST(qMRMLNodeComboBoxEventTranslatorPlayerTest1)\nQtTesting_TEST(qMRMLRangeWidgetEventTranslatorPlayerTest1)\nQtTesting_TEST(qMRMLROIWidgetEventTranslatorPlayerTest1)\nQtTesting_TEST(qMRMLScalarInvariantComboBoxEventTranslatorPlayerTest1)\nQtTesting_TEST(qMRMLSliceControllerWidgetEventTranslatorPlayerTest1)\nQtTesting_TEST(qMRMLSliceWidgetEventTranslatorPlayerTest1 vol_and_cube.mrml|DATA{${INPUT}/fixed.nrrd,cube.vtk})\nQtTesting_TEST(qMRMLThreeDViewControllerWidgetEventTranslatorPlayerTest1)\nQtTesting_TEST(qMRMLThreeDWidgetEventTranslatorPlayerTest1)\nQtTesting_TEST(qMRMLTransformSlidersEventTranslatorPlayerTest1)\nQtTesting_TEST(qMRMLTreeViewEventTranslatorPlayerTest1 vol_and_cube.mrml|DATA{${INPUT}/fixed.nrrd,cube.vtk})\nQtTesting_TEST(qMRMLVolumeInfoWidgetEventTranslatorPlayerTest1)\nQtTesting_TEST(qMRMLVolumeThresholdWidgetEventTranslatorPlayerTest1 vol_and_cube.mrml|DATA{${INPUT}/fixed.nrrd,cube.vtk})\nQtTesting_TEST(qMRMLWindowLevelWidgetEventTranslatorPlayerTest1 vol_and_cube.mrml|DATA{${INPUT}/fixed.nrrd,cube.vtk})\n```\n\n----------------------------------------\n\nTITLE: Creating 4D Volume Outside Slicer (Python)\nDESCRIPTION: This snippet shows how to create a 4D volume sequence file (seq.nrrd) outside of 3D Slicer using the pynrrd library.  It constructs a NRRD header specifying the dimensions, spacing, origin, and other metadata. It then writes the NumPy array `img` and the header information to a seq.nrrd file that Slicer can load as a volume sequence.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/sequences.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport nrrd\nheader = {\n    'type': 'int',\n    'dimension': 4,\n    'space': 'right-anterior-superior',\n    'space directions': [[float('nan'), float('nan'), float('nan')], [1.953125, 0., 0.], [0., 1.953125, 0.], [0., 0., 1.953125]],\n    'kinds': ['list', 'domain', 'domain', 'domain'],\n    'labels': ['frame', '', '', ''],\n    'endian': 'little',\n    'encoding': 'raw',\n    'space origin': [-137.16099548,  -36.80649948, -309.71899414],\n    'measurement frame': [[1., 0., 0.], [0., 1., 0.], [0., 0., 1.]],\n    'axis 0 index type': 'numeric',\n    'axis 0 index values': '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25'\n}\nnrrd.write(\"c:/tmp/test.seq.nrrd\", img, header)\n```\n\n----------------------------------------\n\nTITLE: List Source Files CMake\nDESCRIPTION: Defines the source files for the module using the `${KIT}_SRCS` variable. These files contain the C++ code that implements the module's functionality. It includes various vtkMRML node definitions, such as annotation, storage, and display nodes.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Annotations/MRML/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_SRCS\n  vtkMRMLAnnotationSnapshotNode.cxx\n  vtkMRMLAnnotationSnapshotNode.h\n  vtkMRMLAnnotationSnapshotStorageNode.cxx\n  vtkMRMLAnnotationSnapshotStorageNode.h\n  vtkMRMLAnnotationHierarchyNode.cxx\n  vtkMRMLAnnotationHierarchyNode.h\n  vtkMRMLAnnotationNode.cxx\n  vtkMRMLAnnotationNode.h\n  vtkMRMLAnnotationStorageNode.cxx\n  vtkMRMLAnnotationStorageNode.h\n  vtkMRMLAnnotationDisplayNode.cxx\n  vtkMRMLAnnotationDisplayNode.h\n  vtkMRMLAnnotationTextDisplayNode.cxx\n  vtkMRMLAnnotationTextDisplayNode.h\n  vtkMRMLAnnotationControlPointsNode.cxx\n  vtkMRMLAnnotationControlPointsNode.h\n  vtkMRMLAnnotationControlPointsStorageNode.cxx\n  vtkMRMLAnnotationControlPointsStorageNode.h\n  vtkMRMLAnnotationPointDisplayNode.cxx\n  vtkMRMLAnnotationPointDisplayNode.h\n  vtkMRMLAnnotationLinesNode.cxx\n  vtkMRMLAnnotationLinesNode.h\n  vtkMRMLAnnotationLinesStorageNode.cxx\n  vtkMRMLAnnotationLinesStorageNode.h\n  vtkMRMLAnnotationLineDisplayNode.cxx\n  vtkMRMLAnnotationLineDisplayNode.h\n  vtkMRMLAnnotationRulerNode.cxx\n  vtkMRMLAnnotationRulerNode.h\n  vtkMRMLAnnotationRulerStorageNode.cxx\n  vtkMRMLAnnotationRulerStorageNode.h\n  vtkMRMLAnnotationFiducialNode.cxx\n  vtkMRMLAnnotationFiducialNode.h\n  vtkMRMLAnnotationFiducialsStorageNode.cxx\n  vtkMRMLAnnotationFiducialsStorageNode.h\n  vtkMRMLAnnotationROINode.cxx\n  vtkMRMLAnnotationROINode.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding ITK package in CMake\nDESCRIPTION: Finds the ITK (Insight Toolkit) package with specific components required by the module. These components include ITKIOImageBase, ITKImageCompare, and ITKImageGrid. It specifies ITK version 4.6 or higher as a requirement.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CheckerBoardFilter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKIOImageBase\n  ITKImageCompare\n  ITKImageGrid\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory\nDESCRIPTION: Conditionally adds the Testing subdirectory to the build if the BUILD_TESTING variable is enabled. This allows for running tests for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CastScalarVolume/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files\nDESCRIPTION: This snippet defines a list of source files (`.cxx` and `.h`) that comprise the Qt Designer plugin. The source files include various widgets and display node implementations specific to the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  qSlicer${MODULE_NAME}ModuleWidgetsAbstractPlugin.cxx\n  qSlicer${MODULE_NAME}ModuleWidgetsAbstractPlugin.h\n  qSlicer${MODULE_NAME}ModuleWidgetsPlugin.cxx\n  qSlicer${MODULE_NAME}ModuleWidgetsPlugin.h\n  qMRML${MODULE_NAME}DisplayNodeWidgetPlugin.cxx\n  qMRML${MODULE_NAME}DisplayNodeWidgetPlugin.h\n  qMRML${MODULE_NAME}FiducialProjectionPropertyWidgetPlugin.cxx\n  qMRML${MODULE_NAME}FiducialProjectionPropertyWidgetPlugin.h\n  qMRML${MODULE_NAME}InteractionHandleWidgetPlugin.cxx\n  qMRML${MODULE_NAME}InteractionHandleWidgetPlugin.h\n  qMRML${MODULE_NAME}ROIWidgetPlugin.cxx\n  qMRML${MODULE_NAME}ROIWidgetPlugin.h\n  qSlicer${MODULE_NAME}PlaceWidgetPlugin.cxx\n  qSlicer${MODULE_NAME}PlaceWidgetPlugin.h\n  qSlicerSimpleMarkupsWidgetPlugin.cxx\n  qSlicerSimpleMarkupsWidgetPlugin.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Import Control Points from CSV (Python)\nDESCRIPTION: Imports control points from a CSV file into a new markup curve node. Requires a valid CSV file path and creates a new markup node to store the imported points.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmarkupsNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLMarkupsCurveNode\")\nslicer.modules.markups.logic().ImportControlPointsFromCSV(markupsNode, \"/path/to/MyControlPoints.csv\")\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name CMake\nDESCRIPTION: Sets the MODULE_NAME variable to \"Markups\" and converts it to uppercase for use in other variable definitions. This is the core identifier for the module within the build system.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME \"Markups\")\n\nstring(TOUPPER ${MODULE_NAME} MODULE_NAME_UPPER)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Sets the include directories required for compiling the module. It gathers include directories from various dependent modules like vtkSlicerVolumeRenderingModuleMRML, qSlicerSubjectHierarchyModuleWidgets, MRMLCore etc. These paths are necessary for finding header files of the dependent libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSlicerVolumeRenderingModuleMRML_INCLUDE_DIRS}\n  ${vtkSlicerVolumeRenderingModuleLogic_INCLUDE_DIRS}\n  ${qSlicerSubjectHierarchyModuleWidgets_INCLUDE_DIRS}\n  ${vtkSlicerSubjectHierarchyModuleLogic_INCLUDE_DIRS}\n  ${qSlicerVolumesSubjectHierarchyPlugins_INCLUDE_DIRS}\n  ${qMRMLWidgets_INCLUDE_DIRS}\n  ${MRMLLogic_INCLUDE_DIRS}\n  ${MRMLCore_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory\nDESCRIPTION: Conditionally adds the 'Testing' subdirectory to the build process if testing is enabled (BUILD_TESTING is true). This subdirectory contains the module's unit tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/CropVolume/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Testing Slicer Command Line Options\nDESCRIPTION: Adds tests to verify the behavior of specific Slicer command-line options. These tests utilize Python scripts to interact with Slicer and assert the expected outcomes. Includes tests for disabling settings, ignoring slicerrc, and ignoring specific modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Applications/SlicerApp/Testing/Python/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(\n  NAME py_nomainwindow_SlicerOptionDisableSettingsTest\n  COMMAND ${PYTHON_EXECUTABLE}\n    ${CMAKE_CURRENT_SOURCE_DIR}/SlicerOptionDisableSettingsTest.py\n    ${Slicer_LAUNCHER_EXECUTABLE}\n  )\n\nadd_test(\n  NAME py_nomainwindow_SlicerOptionIgnoreSlicerRCTest\n  COMMAND ${PYTHON_EXECUTABLE}\n    ${CMAKE_CURRENT_SOURCE_DIR}/SlicerOptionIgnoreSlicerRCTest.py\n    ${Slicer_LAUNCHER_EXECUTABLE}\n  )\n\nif(UNIX)\n  add_test(\n    NAME py_nomainwindow_SlicerOptionModulesToIgnoreTest\n    COMMAND ${PYTHON_EXECUTABLE}\n      ${CMAKE_CURRENT_SOURCE_DIR}/SlicerOptionModulesToIgnoreTest.py\n      ${Slicer_LAUNCHER_EXECUTABLE}\n      ${Slicer_BINARY_DIR}/bin/slicerExtensionWizard\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding ITK Package with Required Components\nDESCRIPTION: This snippet uses the `find_package` command to locate the ITK library, requiring version 4.6 or greater. It specifies a list of ITK components that are necessary for the module. The `REQUIRED` keyword ensures that the configuration will fail if ITK is not found with the specified components.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/Testing/Cxx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}Testing_ITK_COMPONENTS\n  ITKCommon\n  )\nfind_package(ITK 4.6 COMPONENTS ${${KIT}Testing_ITK_COMPONENTS} REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Configuring CxxTestDriver with CMake Macro\nDESCRIPTION: Configures a CxxTestDriver using the `slicerMacroConfigureModuleCxxTestDriver` macro. This macro automates the setup of a test driver, including specifying the test sources, enabling memory leak checking, and enabling error output checking.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Cameras/Testing/Cxx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nslicerMacroConfigureModuleCxxTestDriver(\n  NAME ${KIT}\n  SOURCES ${KIT_TEST_SRCS}\n  WITH_VTK_DEBUG_LEAKS_CHECK\n  WITH_VTK_ERROR_OUTPUT_CHECK\n  )\n```\n\n----------------------------------------\n\nTITLE: Python Wrapping Configuration\nDESCRIPTION: This snippet configures Python wrapping for the `SlicerBaseLogic` library if `VTK_WRAP_PYTHON` is enabled. It includes the `vtkMacroKitPythonWrap` macro and uses it to generate the Python wrapper code. It defines where the Python libraries will be installed.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/Logic/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(VTK_WRAP_PYTHON)\n  include(vtkMacroKitPythonWrap)\n\n  set(_python_wrapped_libraries\n    )\n\n  vtkMacroKitPythonWrap(\n    KIT_NAME ${lib_name}\n    KIT_SRCS ${SlicerBaseLogic_SRCS}\n    KIT_PYTHON_LIBRARIES ${_python_wrapped_libraries}\n    KIT_INSTALL_BIN_DIR ${Slicer_INSTALL_BIN_DIR}\n    KIT_INSTALL_LIB_DIR ${Slicer_INSTALL_LIB_DIR}\n    )\n  # Export target\n  set_property(GLOBAL APPEND PROPERTY Slicer_TARGETS ${lib_name}Python)\n  set_target_properties(${lib_name}Python PROPERTIES FOLDER \"Core-Base\")\n  if(TARGET ${lib_name}Hierarchy)\n    set_target_properties(${lib_name}Hierarchy PROPERTIES FOLDER \"Core-Base\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Get axial slice as numpy array - Python\nDESCRIPTION: Downloads a sample volume and extracts an axial slice as a NumPy array using array indexing. It requires the SampleData module and slicer.util for accessing the volume data as a NumPy array.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_35\n\nLANGUAGE: Python\nCODE:\n```\nimport SampleData\nvolumeNode = SampleData.SampleDataLogic().downloadMRHead()\nsliceIndex = 12\n\nvoxels = slicer.util.arrayFromVolume(volumeNode)  # Get volume as numpy array\nslice = voxels[sliceIndex:,:]  # Get one slice of the volume as numpy array\n```\n\n----------------------------------------\n\nTITLE: Building Module Logic with SlicerMacroBuildModuleLogic\nDESCRIPTION: This snippet uses the `SlicerMacroBuildModuleLogic` macro to configure and build the module logic. It takes the module name, export directive, include directories, source files, and target libraries as input.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/Logic/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleLogic(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel Package\nDESCRIPTION: This snippet finds the SlicerExecutionModel package, which provides macros and functions for building Slicer executables. The `REQUIRED` keyword ensures that the configuration fails if the package is not found. It also includes the package's use file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/VotingBinaryHoleFillingImageFilter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Selecting a Different Module - Python\nDESCRIPTION: This code snippet demonstrates how to switch to a different module within 3D Slicer programmatically. It utilizes the `slicer.util.selectModule` function, passing the name of the desired module as an argument.  For example, to switch to the \"DICOM\" module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nslicer.util.selectModule(\"DICOM\")\n```\n\n----------------------------------------\n\nTITLE: Building Loadable Module Macro in CMake\nDESCRIPTION: Calls the `slicerMacroBuildLoadableModule` macro to build the Segmentations module. This macro takes various parameters, including source files, include directories, target libraries, and resources.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroBuildLoadableModule(\n  NAME ${MODULE_NAME}\n  EXPORT_DIRECTIVE ${MODULE_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${MODULE_INCLUDE_DIRECTORIES}\n  SRCS ${MODULE_SRCS}\n  MOC_SRCS ${MODULE_MOC_SRCS}\n  UI_SRCS ${MODULE_UI_SRCS}\n  TARGET_LIBRARIES ${MODULE_TARGET_LIBRARIES}\n  RESOURCES ${MODULE_RESOURCES}\n  WITH_GENERIC_TESTS\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Test Driver\nDESCRIPTION: This snippet uses the slicerMacroConfigureModuleCxxTestDriver macro to configure the C++ test driver for the module. It specifies the module name (KIT), the source files (KIT_TEST_SRCS), and enables leak and error output checking.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/Testing/Cxx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nslicerMacroConfigureModuleCxxTestDriver(\n  NAME ${KIT}\n  SOURCES ${KIT_TEST_SRCS}\n  WITH_VTK_DEBUG_LEAKS_CHECK\n  WITH_VTK_ERROR_OUTPUT_CHECK\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Standard\nDESCRIPTION: This code snippet sets the C++ standard to be used for the project, defaulting to C++17 if not already defined. It ensures that the C++ standard is explicitly set, extensions are disabled, and the standard is either 17 or 20. It uses `set` to define variables and `message` to display status and error messages.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\n# Setting C++ Standard\n#-----------------------------------------------------------------------------\nset(_msg \"Setting C++ standard\")\nmessage(STATUS \"${_msg}\")\nif(NOT CMAKE_CXX_STANDARD)\n  set(CMAKE_CXX_STANDARD 17)\nendif()\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\nmessage(STATUS \"${_msg} - C++${CMAKE_CXX_STANDARD}\")\nif(NOT CMAKE_CXX_STANDARD MATCHES \"^(17|20)$\")\n  message(FATAL_ERROR \"CMAKE_CXX_STANDARD must be set to 17 or 20\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Python Resources\nDESCRIPTION: Specifies the resources (e.g., icons) used by the Python scripts.  These resources are deployed alongside the Python scripts.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/SegmentStatistics/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_PYTHON_RESOURCES\n  Resources/Icons/${MODULE_NAME}.png\n  )\n```\n\n----------------------------------------\n\nTITLE: Conditional VTK Python Wrapping Check CMake\nDESCRIPTION: This snippet checks if Slicer is using PythonQt and if VTK is not configured for Python wrapping. If both conditions are true, it throws a fatal error, prompting the user to reconfigure VTK with Python wrapping enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Logic/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_USE_PYTHONQT AND NOT VTK_WRAP_PYTHON)\n  message(FATAL_ERROR \"Since Slicer_USE_PYTHONQT is ON, VTK_WRAP_PYTHON is expected to be ON. \"\n                      \"Re-configure VTK with python wrapping.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Slicer in Debug Mode using CMake CLI (Windows)\nDESCRIPTION: This snippet shows how to configure and build Slicer in Debug mode using the command line with CMake on Windows. It sets the Qt path and specifies the generator and architecture.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/windows.md#_snippet_1\n\nLANGUAGE: bat\nCODE:\n```\ncd C:\\D\n\n\"C:\\Program Files\\CMake\\bin\\cmake.exe\" ^\n  -G \"Visual Studio 17 2022\" -A x64 ^\n  -DQt5_DIR:PATH=C:/Qt/5.15.2/msvc2019_64/lib/cmake/Qt5 ^\n  -S C:\\D\\S -B C:\\D\\SD\n\n\"C:\\Program Files\\CMake\\bin\\cmake.exe\" --build C:\\D\\SD --config Debug\n```\n\n----------------------------------------\n\nTITLE: Finding ITK Package\nDESCRIPTION: This snippet finds the ITK package with specified components (ITKCommon, ITKIOImageBase). It sets the ITK_NO_IO_FACTORY_REGISTER_MANAGER variable to prevent factory registration issues depending on ITK versions. It includes the ITK use file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/DiffusionTensorTest/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKCommon\n  ITKIOImageBase\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Set Target Libraries in CMake\nDESCRIPTION: Specifies the target libraries that the plugin depends on. Here it's qMRMLWidgets.  These libraries will be linked with the plugin during the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  qMRMLWidgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel package in CMake\nDESCRIPTION: Finds the SlicerExecutionModel package, which provides macros and functions for building Slicer executables. It is a required dependency for building Slicer modules with a CLI.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CheckerBoardFilter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Building Loadable Module in CMake\nDESCRIPTION: Uses the `slicerMacroBuildLoadableModule` macro to build the module. This macro encapsulates the common steps for building a Slicer loadable module, using the previously defined variables for source files, include directories, libraries, and resources. Also enables generic tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroBuildLoadableModule(\n  NAME ${MODULE_NAME}\n  EXPORT_DIRECTIVE ${MODULE_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${MODULE_INCLUDE_DIRECTORIES}\n  SRCS ${MODULE_SRCS}\n  MOC_SRCS ${MODULE_MOC_SRCS}\n  UI_SRCS ${MODULE_UI_SRCS}\n  TARGET_LIBRARIES ${MODULE_TARGET_LIBRARIES}\n  RESOURCES ${MODULE_RESOURCES}\n  WITH_GENERIC_TESTS\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Export Directive in CMake\nDESCRIPTION: Defines the MODULE_EXPORT_DIRECTIVE variable, likely used for controlling symbol visibility when building the module as a shared library. The value is based on the module name in uppercase.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_EXPORT_DIRECTIVE \"Q_SLICER_QTMODULES_${MODULE_NAME_UPPER}_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Using vtkMRMLNodeNewMacro for MRML Node Creation\nDESCRIPTION: This snippet illustrates the use of the `vtkMRMLNodeNewMacro` macro for generating the implementation of `New()` method for vtkMRML node. It simplifies the process of creating new instances of MRML nodes within the Slicer environment.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/mrml_overview.md#_snippet_14\n\nLANGUAGE: C++\nCODE:\n```\nvtkMRMLNodeNewMacro(vtkMRMLYourNodeType);\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking Test Executable\nDESCRIPTION: Creates an executable target for testing the module. Links the test executable to the module's library and any extra libraries specified by `SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES`. Sets the target properties such as LABELS and FOLDER.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GrayscaleGrindPeakImageFilter/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nctk_add_executable_utf8(${CLP}Test ${CLP}Test.cxx)\ntarget_link_libraries(${CLP}Test ${CLP}Lib ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES})\nset_target_properties(${CLP}Test PROPERTIES LABELS ${CLP})\nset_target_properties(${CLP}Test PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Set Include Directories\nDESCRIPTION: Sets the include directories for the project, including the current source directory, current binary directory, MRMLCore include directories, and CURL include directories.  These are then passed to `include_directories` to be used by the compiler.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/RemoteIO/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(include_dirs\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  ${CMAKE_CURRENT_BINARY_DIR}\n  ${MRMLCore_INCLUDE_DIRS}\n  ${CURL_INCLUDE_DIRS}\n  )\ninclude_directories(${include_dirs})\n```\n\n----------------------------------------\n\nTITLE: Set Target Libraries\nDESCRIPTION: Defines the target libraries that this module depends on.  This ensures that the linker includes these libraries when building the module executable or library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/VTKWidgets/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding ModuleDescriptionParser dependency\nDESCRIPTION: This snippet uses the `find_package` command to locate the ModuleDescriptionParser library, which is a required dependency for SlicerBaseCLI. The `REQUIRED` keyword ensures that the build will fail if the package is not found.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/CLI/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED ModuleDescriptionParser)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries\nDESCRIPTION: Defines the list of target libraries that the project depends on. These libraries are linked with the project during the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT_target_libraries\n  ${QT_LIBRARIES}\n  SlicerBaseLogic\n  MRMLDisplayableManager\n  ${CTKAppLauncherLib_LIBRARIES}\n  CTKCore\n  CTKImageProcessingITKCore\n  CTKVisualizationVTKCore\n  ${ITK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: This snippet sets the source files for the `SlicerBaseLogic` library. It includes a list of `.cxx` files that implement the core logic, data management, calculations, and VTK extensions within Slicer.  An additional source file for scripted loadable modules is conditionally included if `Slicer_USE_PYTHONQT` is enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/Logic/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(SlicerBaseLogic_SRCS\n  # Logic classes (data management and calculation)\n  vtkSlicerApplicationLogic.cxx\n  vtkSlicerModuleLogic.cxx\n  vtkSlicerTask.cxx\n  vtkDataIOManagerLogic.cxx\n  # slicer's vtk extensions (filters)\n  vtkTransformVisualizerGlyph3D.cxx\n  vtkImageRectangularSource.cxx\n  vtkSystemInformation.cxx\n  vtkImageFillROI.cxx\n  )\n\nif(Slicer_USE_PYTHONQT)\n  list(APPEND SlicerBaseLogic_SRCS\n    vtkSlicerScriptedLoadableModuleLogic.cxx\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files (CMake)\nDESCRIPTION: This snippet defines the list of source files that are part of the qSlicerBaseQTGUI library. These files implement the functionality of the library, including GUI elements, modules, and dialogs.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTGUI/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Source files\nset(KIT_SRCS\n  qSlicerAbstractModule.cxx\n  qSlicerAbstractModule.h\n  qSlicerAbstractModulePanel.cxx\n  qSlicerAbstractModulePanel.h\n  qSlicerAbstractModuleWidget.cxx\n  qSlicerAbstractModuleWidget.h\n  qSlicerActionsDialog.cxx\n  qSlicerActionsDialog.h\n  qSlicerApplication.cxx\n  qSlicerApplication.h\n  qSlicerCommandOptions.cxx\n  qSlicerCommandOptions.h\n  qSlicerDarkStyle.cxx\n  qSlicerDarkStyle.h\n  qSlicerDataDialog.cxx\n  qSlicerDataDialog.h\n  qSlicerDirectoryListView.cxx\n  qSlicerDirectoryListView.h\n  qSlicerExportNodeDialog.cxx\n  qSlicerExportNodeDialog.h\n\n  qSlicerFileDialog.cxx\n  qSlicerFileDialog.h\n  qSlicerFileWriterOptionsWidget.cxx\n  qSlicerFileWriterOptionsWidget.h\n  qSlicerIOManager.cxx\n  qSlicerIOManager.h\n  qSlicerIOOptionsWidget.cxx\n  qSlicerIOOptionsWidget.h\n  qSlicerLayoutManager.cxx\n  qSlicerLayoutManager.h\n  qSlicerLightStyle.cxx\n  qSlicerLightStyle.h\n  qSlicerLoadableModule.cxx\n  qSlicerLoadableModule.h\n\n  qSlicerModelsDialog.cxx\n  qSlicerModelsDialog.h\n  qSlicerModelsDialog_p.h\n\n  qSlicerModuleFactoryFilterModel.cxx\n  qSlicerModuleFactoryFilterModel.h\n  qSlicerModuleFinderDialog.cxx\n  qSlicerModuleFinderDialog.h\n  qSlicerModulesListView.cxx\n  qSlicerModulesListView.h\n  qSlicerModulesMenu.cxx\n  qSlicerModulesMenu.h\n\n  qSlicerModulePanel.cxx\n  qSlicerModulePanel.h\n\n  qSlicerModuleSelectorToolBar.cxx\n  qSlicerModuleSelectorToolBar.h\n  qSlicerMouseModeToolBar.cxx\n  qSlicerMouseModeToolBar.h\n  qSlicerMouseModeToolBar_p.h\n  qSlicerNodeWriter.cxx\n  qSlicerNodeWriter.h\n  qSlicerNodeWriterOptionsWidget.cxx\n  qSlicerNodeWriterOptionsWidget.h\n  qSlicerNodeWriterOptionsWidget_p.h\n  qSlicerQListQVariantMapMetaType.h\n  qSlicerSaveDataDialog.cxx\n  qSlicerSaveDataDialog.h\n  qSlicerSettingsCachePanel.cxx\n  qSlicerSettingsCachePanel.h\n  qSlicerSettingsGeneralPanel.cxx\n  qSlicerSettingsGeneralPanel.h\n  qSlicerSettingsModulesPanel.cxx\n  qSlicerSettingsModulesPanel.h\n  qSlicerSettingsStylesPanel.cxx\n  qSlicerSettingsStylesPanel.h\n  qSlicerSettingsViewsPanel.cxx\n  qSlicerSettingsViewsPanel.h\n  qSlicerSettingsDeveloperPanel.cxx\n  qSlicerSettingsDeveloperPanel.h\n  qSlicerSettingsUserInformationPanel.cxx\n  qSlicerSettingsUserInformationPanel.h\n  qSlicerStyle.cxx\n  qSlicerStyle.h\n  qSlicerViewersToolBar.cxx\n  qSlicerViewersToolBar.h\n  qSlicerViewersToolBar_p.h\n  qSlicerWidget.cxx\n  qSlicerWidget.h\n\n  qSlicerSingletonViewFactory.cxx\n  qSlicerSingletonViewFactory.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries (CMake)\nDESCRIPTION: Defines the target libraries that the module depends on. These libraries, such as ITK and MRML, provide the necessary functionality for the module to operate correctly. The module will be linked against these libraries during the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/CropVolume/MRML/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  ${ITK_LIBRARIES}\n  ${MRML_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Source Files CMake\nDESCRIPTION: Defines the list of source files that make up the module.  These source files contain the implementation of the module's functionality including reader, writer and settings panel.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_SRCS\n  qSlicer${MODULE_NAME}Module.cxx\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.cxx\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  qSlicer${MODULE_NAME}Reader.cxx\n  qSlicer${MODULE_NAME}Reader.h\n  qSlicer${MODULE_NAME}SettingsPanel.cxx\n  qSlicer${MODULE_NAME}SettingsPanel.h\n  qSlicer${MODULE_NAME}Writer.cxx\n  qSlicer${MODULE_NAME}Writer.h\n  qSlicerAnnotationsReader.cxx  # for reading legacy annotation files\n  qSlicerAnnotationsReader.h\n  qSlicerAnnotationsIOOptionsWidget.cxx\n  qSlicerAnnotationsIOOptionsWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Project Initialization and Variable Definition\nDESCRIPTION: This snippet initializes the project, defines a kit name based on the project name, sets an export directive for the module, and populates lists of include directories based on dependent modules and libraries.  It also sets up variables used later in the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/EditorEffects/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(qSlicer${MODULE_NAME}EditorEffects)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"Q_SLICER_${MODULE_NAME_UPPER}_EFFECTS_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSlicerSegmentationsModuleMRML_INCLUDE_DIRS}\n  ${vtkSlicerSegmentationsModuleMRMLDisplayableManager_INCLUDE_DIRS}\n  ${vtkSlicerSegmentationsModuleLogic_INCLUDE_DIRS}\n  ${Slicer_Base_INCLUDE_DIRS}\n  ${qMRMLWidgets_INCLUDE_DIRS}\n  ${MRMLLogic_INCLUDE_DIRS}\n  ${MRMLCore_INCLUDE_DIRS}\n  ${MRMLDisplayableManager_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories in CMake\nDESCRIPTION: Defines the include directories for the project. These are the locations where the compiler will search for header files during compilation. It includes directories from qSlicerBaseQTGUI, MRMLLogic, and the current source directory's EventBroker subdirectory. These directories are essential for accessing required classes and functions during the compilation process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Core/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT_include_directories\n  ${qSlicerBaseQTGUI_SOURCE_DIR}\n  ${qSlicerBaseQTGUI_BINARY_DIR}\n  ${MRMLLogic_INCLUDE_DIRS}\n  ${CMAKE_CURRENT_SOURCE_DIR}/EventBroker\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting SimpleITK Shared Library Usage\nDESCRIPTION: This snippet configures whether to build SimpleITK with shared libraries. It defaults to OFF, but is set to ON for MSVC or Debug builds. A CMake dependent option is then created, allowing users to control the shared library usage.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_27\n\nLANGUAGE: cmake\nCODE:\n```\nset( Slicer_USE_SimpleITK_SHARED_DEFAULT OFF)\nstring(TOUPPER \"${CMAKE_BUILD_TYPE}\" _CMAKE_BUILD_TYPE)\nif(MSVC OR _CMAKE_BUILD_TYPE MATCHES \"DEBUG\")\n  set(Slicer_USE_SimpleITK_SHARED_DEFAULT ON)\nendif()\nCMAKE_DEPENDENT_OPTION(Slicer_USE_SimpleITK_SHARED \"Build SimpleITK with shared libraries. Reduces linking time, increases run-time load time.\" ${Slicer_USE_SimpleITK_SHARED_DEFAULT} \"Slicer_USE_SimpleITK\" OFF )\nmark_as_superbuild(Slicer_USE_SimpleITK_SHARED)\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory\nDESCRIPTION: This snippet adds the Testing subdirectory if BUILD_TESTING is enabled. This allows the module's tests to be built and run. This conditional inclusion of tests depends on CMake variable BUILD_TESTING.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Plots/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Connecting PointWidgets to Parameters in Slicer\nDESCRIPTION: This snippet demonstrates how to connect instances of the custom `PointWidget` to the `topLeft` parameters of `box1` and `box2` within a `ParameterNodeType`. It creates instances of `PointWidget`, a `ParameterNodeType`, and uses the `connectParametersToGui` method to establish the connection. Requires `slicer.mrmlScene` to be available.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/parameter_nodes/advanced/custom_widgets_for_parameter_packs.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntopLeft1Widget = PointWidget()\ntopLeft2Widget = PointWidget()\n\nparam = ParameterNodeType(slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLScriptedModuleNode\"))\n\nparam.connectParametersToGui({\n    \"box1.topLeft\": topLeft1Widget,\n    \"box2.topLeft\": topLeft2Widget,\n})\n```\n\n----------------------------------------\n\nTITLE: Setting the Module Name\nDESCRIPTION: This snippet sets the name of the module being built to \"MultiplyScalarVolumes\". This variable is later used to name the target and other related elements.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MultiplyScalarVolumes/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME MultiplyScalarVolumes)\n```\n\n----------------------------------------\n\nTITLE: Get Segment Centroid in RAS Coordinates\nDESCRIPTION: This snippet demonstrates how to get the centroid of a segment in world (RAS) coordinates and show that position in all slice views. It assumes a segmentation node named 'Segmentation' and a segment with ID 'Segment_1' exist. It uses numpy and vtk to transform voxel coordinates to RAS coordinates.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nsegmentationNode = getNode(\"Segmentation\")\nsegmentId = \"Segment_1\"\n\n# Get array voxel coordinates\nimport numpy as np\nseg=arrayFromSegment(segmentation_node, segmentId)\n# numpy array has voxel coordinates in reverse order (KJI instead of IJK)\n# and the array is cropped to minimum size in the segmentation\nmean_KjiCropped = [coords.mean() for coords in np.nonzero(seg)]\n\n# Get segmentation voxel coordinates\nsegImage = segmentationNode.GetBinaryLabelmapRepresentation(segmentId)\nsegImageExtent = segImage.GetExtent()\n# origin of the array in voxel coordinates is determined by the start extent\nmean_Ijk = [mean_KjiCropped[2], mean_KjiCropped[1], mean_KjiCropped[0]] + np.array([segImageExtent[0], segImageExtent[2], segImageExtent[4]])\n\n# Get segmentation physical coordinates\nijkToWorld = vtk.vtkMatrix4x4()\nsegImage.GetImageToWorldMatrix(ijkToWorld)\nmean_World = [0, 0, 0, 1]\nijkToRas.MultiplyPoint(np.append(mean_Ijk,1.0), mean_World)\nmean_World = mean_World[0:3]\n\n# If segmentation node is transformed, apply that transform to get RAS coordinates\ntransformWorldToRas = vtk.vtkGeneralTransform()\nslicer.vtkMRMLTransformNode.GetTransformBetweenNodes(segmentationNode.GetParentTransformNode(), None, transformWorldToRas)\nmean_Ras = transformWorldToRas.TransformPoint(mean_World)\n```\n\n----------------------------------------\n\nTITLE: Setting Module Export Directive in CMake\nDESCRIPTION: This snippet sets the MODULE_EXPORT_DIRECTIVE, which is used for defining export macros for the module. This ensures proper symbol visibility when the module is used by other parts of the application.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_EXPORT_DIRECTIVE \"Q_SLICER_QTMODULES_${MODULE_NAME_UPPER}_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Setting Library Properties\nDESCRIPTION: This snippet sets various properties for the library, including the export directive (KIT_export_directive), include directories (KIT_include_directories), source files (KIT_SRCS, KIT_VTK_SRCS), headers to run through moc (KIT_MOC_SRCS), UI files (KIT_UI_SRCS), resources (KIT_resources), and target libraries (KIT_target_libraries). It also appends SlicerBaseLogic to the list of target libraries when VTK_WRAP_PYTHON is enabled and VTK version is greater than or equal to 8.90.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCLI/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT_export_directive \"Q_SLICER_BASE_QTCLI_EXPORT\")\n\n# Additional directories to include\nset(KIT_include_directories\n  ${qSlicerBaseQTCore_SOURCE_DIR}\n  ${qSlicerBaseQTCore_BINARY_DIR}\n  ${qSlicerBaseQTGUI_SOURCE_DIR}\n  ${qSlicerBaseQTGUI_BINARY_DIR}\n  ${ModuleDescriptionParser_INCLUDE_DIRS}\n  ${MRMLCLI_INCLUDE_DIRS}\n  ${MRMLLogic_INCLUDE_DIRS}\n  )\n\n# Source files\nset(KIT_VTK_SRCS\n  vtkSlicerCLIModuleLogic.cxx\n  vtkSlicerCLIModuleLogic.h\n  )\n\n# Source files\nset(KIT_SRCS\n  ${KIT_VTK_SRCS}\n  qSlicerCLIExecutableModuleFactory.cxx\n  qSlicerCLIExecutableModuleFactory.h\n  qSlicerCLILoadableModuleFactory.cxx\n  qSlicerCLILoadableModuleFactory.h\n  qSlicerCLIModule.cxx\n  qSlicerCLIModule.h\n  qSlicerCLIModuleFactoryHelper.cxx\n  qSlicerCLIModuleFactoryHelper.h\n  qSlicerCLIModuleUIHelper.cxx\n  qSlicerCLIModuleUIHelper.h\n  qSlicerCLIModuleWidget.cxx\n  qSlicerCLIModuleWidget.h\n  qSlicerCLIModuleWidget_p.h\n  qSlicerCLIProgressBar.cxx\n  qSlicerCLIProgressBar.h\n  )\n\n# Headers that should run through moc\nset(KIT_MOC_SRCS\n  qSlicerCLIModule.h\n  qSlicerCLIModuleWidget.h\n  qSlicerCLIModuleWidget_p.h\n  qSlicerCLIModuleUIHelper.h\n  qSlicerCLIProgressBar.h\n  )\n\n# UI files\nset(KIT_UI_SRCS\n  Resources/UI/qSlicerCLIModuleWidget.ui\n  )\n\n# Resources\nset(KIT_resources\n  )\n\n# Additional Target libraries (Qt libs already included)\nset(KIT_target_libraries\n  # ${QT_LIBRARIES} # Not needed: All dependencies are transitively satisfied by other targets\n  qSlicerBaseQTCore\n  qSlicerBaseQTGUI\n  ModuleDescriptionParser ${ITK_LIBRARIES}\n  MRMLCLI\n  )\nif(VTK_WRAP_PYTHON AND ${VTK_VERSION} VERSION_GREATER_EQUAL \"8.90\")\n  # HACK Explicitly list transitive VTK dependencies because _get_dependencies_recurse\n  # used in vtkAddon/CMake/vtkMacroKitPythonWrap.cmake only recurses over dependencies\n  # that are VTK python wrapped.\n  list(APPEND KIT_target_libraries\n    SlicerBaseLogic\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for the Module in CMake\nDESCRIPTION: This snippet defines the source files (C++ source and header files) that will be compiled and linked to create the module's logic component. These source files implement the core functionality of the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/Logic/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  vtkSlicerColorLogic.cxx\n  vtkSlicerColorLogic.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Hide Slice View Annotations (Python)\nDESCRIPTION: This script hides node name and patient information displayed in the corners of slice views, which is managed by the DataProbe module.  It disables the slice annotations both immediately and persistently (after Slicer restarts) by modifying the DataProbe settings.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_41\n\nLANGUAGE: python\nCODE:\n```\n# Disable slice annotations immediately\nsliceAnnotations = slicer.modules.DataProbeInstance.infoWidget.sliceAnnotations\nsliceAnnotations.sliceViewAnnotationsEnabled=False\nsliceAnnotations.updateSliceViewFromGUI()\n# Disable slice annotations persistently (after Slicer restarts)\nsettings = qt.QSettings()\nsettings.setValue(\"DataProbe/sliceViewAnnotations.enabled\", 0)\n```\n\n----------------------------------------\n\nTITLE: Creating Test Sourcelist\nDESCRIPTION: This snippet uses the `create_test_sourcelist` macro to generate a combined source file (`${KIT}CppTests.cxx`) from the list of individual test source files (`${TEST_SOURCES}`). This combined file is then used for compilation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/Widgets/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncreate_test_sourcelist(Tests ${KIT}CppTests.cxx\n  ${TEST_SOURCES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Qt Testing Function Definition\nDESCRIPTION: This snippet defines a CMake function called `QtTesting_TEST` for running Qt-based tests. It handles optional scene files, including downloading external data files associated with those scenes.  The function also configures the test to run serially.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/Widgets/Testing/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_USE_QtTesting)\n  function(QtTesting_TEST testname)\n    if(${ARGC} GREATER 1)\n      set(SCENEFILENAME ${ARGV1})\n\n      # Extract list of external files to download. Note that the ${_externalfiles} variable\n      # is only specified to trigger download of data files used in the scene, the arguments\n      # are NOT explicitly used in ${KIT}CxxTests test executable.\n      string(REPLACE \"|\" \";\" scenefilename_and_externalfiles ${SCENEFILENAME})\n      list(GET scenefilename_and_externalfiles 0 SCENEFILENAME)\n      list(LENGTH scenefilename_and_externalfiles _length)\n      if(_length EQUAL 2)\n        configure_file(\n          ${MRMLCore_SOURCE_DIR}/Testing/${SCENEFILENAME}\n          ${MRMLCore_BINARY_DIR}/Testing/${SCENEFILENAME}\n          COPYONLY\n          )\n        set(_scenefile ${MRMLCore_BINARY_DIR}/Testing/${SCENEFILENAME})\n        list(GET scenefilename_and_externalfiles 1 _externalfiles)\n      else()\n        set(_scenefile ${MRMLCore_SOURCE_DIR}/Testing/${SCENEFILENAME})\n        set(_externalfiles \"\")\n      endif()\n\n    else()\n      set(_scenefile \"\")\n    endif()\n    simple_test(${testname} ${Slicer_SOURCE_DIR} ${_scenefile})\n    set_tests_properties(${testname} PROPERTIES RUN_SERIAL ON)\n  endfunction()\n  QtTesting_TEST(qMRMLColorListViewEventTranslatorPlayerTest1)\n  QtTesting_TEST(qMRMLColorPickerWidgetEventTranslatorPlayerTest1)\n  QtTesting_TEST(qMRMLColorTableViewEventTranslatorPlayerTest1)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Module Export Directive in CMake\nDESCRIPTION: Defines the export directive used for exporting symbols from the module. This is crucial for building shared libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Data/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_EXPORT_DIRECTIVE \"Q_SLICER_QTMODULES_${MODULE_NAME_UPPER}_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Find CURL Package\nDESCRIPTION: Finds the CURL library using CMake's `find_package` command.  The `REQUIRED` keyword ensures that the build process will stop if CURL is not found.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/RemoteIO/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(CURL REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Generating Qt Meta-Object Code\nDESCRIPTION: Identifies C++ source files that require Qt's meta-object compiler (moc) to be run. QT5_GENERATE_MOCS generates the necessary moc files for these classes.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/Testing/Cxx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT_TEST_GENERATE_MOC_SRCS\n  qSlicer${MODULE_NAME}ModuleWidgetTest.cxx\n  )\n  QT5_GENERATE_MOCS(${KIT_TEST_GENERATE_MOC_SRCS})\n```\n\n----------------------------------------\n\nTITLE: Building CLI with SEMMacroBuildCLI\nDESCRIPTION: This CMake code block utilizes the SEMMacroBuildCLI macro to build the command line interface (CLI) for the ProbeVolumeWithModel module. It specifies the name, logo header, target libraries, and include directories.  The EXECUTABLE_ONLY option indicates that only the executable should be built.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ProbeVolumeWithModel/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/ITKLogo.h\n  TARGET_LIBRARIES ${${MODULE_NAME}_TARGET_LIBRARIES}\n  INCLUDE_DIRECTORIES\n    ${vtkITK_INCLUDE_DIRS}\n    ${MRMLCore_INCLUDE_DIRS}\n  EXECUTABLE_ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Commit Count Offset (CMake)\nDESCRIPTION: This snippet calculates and sets the `Slicer_WC_COMMIT_COUNT_OFFSET` variable, used to maintain revision continuity. It concatenates a list of commit count offsets and uses `math(EXPR)` to compute the sum. This offset is then stored in a cache variable.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\nset(_commit_count_offsets\n  # Value is chosen to provide continuity of revisions when switching from SVN to git\n  # at SVN revision=28825 / git hash 47deb76d7556e40de4e25e585c4b24a63a153da5 in official Slicer repository\n  # (https://github.com/Slicer/Slicer.git).\n  \"3037\"\n  # Allocate revisions for patch releases between v5.0.0 and v5.1.0\n  \"100\"\n  # Allocate revisions for patch releases between v5.2.0 and v5.3.0\n  \"100\"\n  # Allocate revisions for patch releases between v5.4.0 and v5.5.0\n  \"200\"\n  # Allocate revisions for patch releases between v5.6.0 and v5.7.0\n  \"200\"\n  # Allocate revisions for patch releases between v5.8.0 and v5.9.0\n  \"200\"\n  )\nlist(JOIN _commit_count_offsets \"+\" _commit_count_offsets_expr)\nmath(EXPR _commit_count_offset \"${_commit_count_offsets_expr}\")\nset(Slicer_WC_COMMIT_COUNT_OFFSET \"${_commit_count_offset}\" CACHE INTERNAL\n  \"This value is added to commit count to compute Slicer_COMMIT_COUNT (that may be used to set Slicer_REVISION).\")\n```\n\n----------------------------------------\n\nTITLE: Adding Cxx subdirectory in CMake\nDESCRIPTION: This CMake command includes the Cxx subdirectory in the current CMake project build process.  It allows the CMakeLists.txt file in the Cxx subdirectory to be processed and its targets added to the overall project. No dependencies are explicitly specified, but the Cxx subdirectory should contain a valid CMakeLists.txt file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Adding Slicer Python Unit Tests\nDESCRIPTION: Adds tests that execute Python unit tests using `slicer_add_python_unittest`. These tests verify the functionality of individual components of Slicer's Python interface. It tests both successful execution and cases where errors are expected.\nSOURCE: https://github.com/slicer/slicer/blob/main/Applications/SlicerApp/Testing/Python/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nslicer_add_python_unittest(\n  SCRIPT SlicerUnitTestTest.py\n  SLICER_ARGS --no-main-window --disable-modules\n  TESTNAME_PREFIX nomainwindow_\n  )\n\nslicer_add_python_unittest(\n  SCRIPT SlicerUnitTestWithErrorsTest.py\n  SLICER_ARGS --no-main-window --disable-modules\n  TESTNAME_PREFIX nomainwindow_\n  )\nset_tests_properties(py_nomainwindow_SlicerUnitTestWithErrorsTest PROPERTIES WILL_FAIL TRUE)\n```\n\n----------------------------------------\n\nTITLE: Find ITK CMake\nDESCRIPTION: Finds the ITK package with specific components.  ITKIOImageBase, ITKImageFunction, ITKImageGrid, and ITKImageIntensity are specified as required components. It also manages ITK IO factory registration based on the ITK version.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/AddScalarVolumes/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKIOImageBase\n  ITKImageFunction\n  ITKImageGrid\n  ITKImageIntensity\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Setting Project Variables\nDESCRIPTION: Sets various project variables used throughout the CMake configuration, including the kit name, export directive, include directories, source files, and target libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Units/Logic/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_LOGIC_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  )\n\nset(${KIT}_SRCS\n  vtkSlicer${MODULE_NAME}Logic.cxx\n  vtkSlicer${MODULE_NAME}Logic.h\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining export directive for the module in CMake\nDESCRIPTION: This snippet defines an export directive, a macro that controls symbol visibility when building shared libraries. It ensures proper linking of the module with other parts of the Slicer application.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/MRML/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_MRML_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Text in 3D View - Python\nDESCRIPTION: This snippet shows how to display text overlaid in a 3D view in 3D Slicer. It retrieves the 3D view, sets the text to \"Something\" using corner annotations, sets the text color to red, and forces the view to render. Requires vtk.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nview=slicer.app.layoutManager().threeDWidget(0).threeDView()\n# Set text to \"Something\"\nview.cornerAnnotation().SetText(vtk.vtkCornerAnnotation.UpperRight,\"Something\")\n# Set color to red\nview.cornerAnnotation().GetTextProperty().SetColor(1,0,0)\n# Update the view\nview.forceRender()\n```\n\n----------------------------------------\n\nTITLE: Set Module Target Libraries in CMake\nDESCRIPTION: Specifies the libraries that the module depends on. These libraries provide functionality that is used by the module's code, such as logic and widget functionality. The module will link against these target libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Sequences/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  qSlicer${MODULE_NAME}ModuleWidgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating Test Source List\nDESCRIPTION: This snippet utilizes `create_test_sourcelist` to generate a source list for the MRML C++ tests. It specifies the C++ files to be included in the test suite, along with any extra include files, contributing to the overall test compilation process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Logic/Testing/Cxx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncreate_test_sourcelist(Tests ${KIT}CxxTests.cxx\n  vtkMRMLAbstractLogicSceneEventsTest.cxx\n  vtkMRMLColorLogicTest1.cxx\n  vtkMRMLDisplayableHierarchyLogicTest1.cxx\n  vtkMRMLLayoutLogicCompareTest.cxx\n  vtkMRMLLayoutLogicTest1.cxx\n  vtkMRMLLayoutLogicTest2.cxx\n  vtkMRMLSliceLayerLogicTest.cxx\n  vtkMRMLSliceLogicTest1.cxx\n  vtkMRMLSliceLogicTest2.cxx\n  vtkMRMLSliceLogicTest3.cxx\n  vtkMRMLSliceLogicTest4.cxx\n  vtkMRMLSliceLogicTest5.cxx\n  vtkMRMLApplicationLogicTest1.cxx\n  EXTRA_INCLUDE ${EXTRA_INCLUDE}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Resources in CMake\nDESCRIPTION: Defines the MODULE_RESOURCES variable, listing the Qt resource files (.qrc) that contain images, icons, and other resources used by the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_RESOURCES\n  Resources/qSlicer${MODULE_NAME}Module.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding ExternalData Target (CMake)\nDESCRIPTION: This snippet conditionally adds an ExternalData target based on whether `${SEM_DATA_MANAGEMENT_TARGET}` is equal to `${CLP}Data`. This allows the data to be downloaded as part of a specific target in the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MaskScalarVolume/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Icon Engine Plugin (CMake)\nDESCRIPTION: This snippet defines the build configuration for the qSlicerIconEnginePlugin, which provides custom icon engines for Slicer. It uses the `ctkMacroBuildQtIconEnginesPlugin` macro to build the plugin, specifying the name, export directive, source files, MOC sources, and target libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTGUI/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\n#-----------------------------------------------------------------------------\n# Slicer icon engine\n#-----------------------------------------------------------------------------\n\nset(CTK_LIBRARIES CTKWidgets)\nctkMacroBuildQtIconEnginesPlugin(\n  NAME qSlicerIconEnginePlugin\n  EXPORT_DIRECTIVE \"Q_SLICER_BASE_QTGUI_ICON_ENGINE_EXPORT\"\n  FOLDER \"Core-Base\"\n  SRCS qSlicerIconEnginePlugin.cxx qSlicerIconEnginePlugin.h\n  MOC_SRCS qSlicerIconEnginePlugin.h\n  TARGET_LIBRARIES ${QT_LIBRARIES} ${CTK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Target Libraries CMake\nDESCRIPTION: Defines the list of target libraries that the module depends on.  These libraries provide functionality such as MRML, Logic, and Widgets.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleMRML\n  vtkSlicer${MODULE_NAME}ModuleMRMLDisplayableManager\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  qSlicer${MODULE_NAME}ModuleWidgets\n  qSlicer${MODULE_NAME}SubjectHierarchyPlugins\n  qSlicerColorsModuleWidgets\n  vtkSlicerColorsModuleLogic\n  vtkSlicerColorsModuleMRML\n  )\n```\n\n----------------------------------------\n\nTITLE: Add Testing Subdirectory - CMake\nDESCRIPTION: Conditionally adds a subdirectory for testing if the BUILD_TESTING variable is enabled. This allows for including testing code within the module's build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MaskScalarVolume/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting MOC Source Files\nDESCRIPTION: Specifies the header files that require the Qt Meta Object Compiler (MOC) to generate meta-object code. These headers typically contain Qt signals and slots.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/CropVolume/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_MOC_SRCS\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries CMake\nDESCRIPTION: This snippet specifies the libraries that the module depends on, including other Slicer modules (qSlicerSubjectHierarchyModuleWidgets, vtkSlicerDICOMLibModuleLogic, MRMLCore, MRMLLogic) and Qt libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOMLib/Widgets/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  qSlicerSubjectHierarchyModuleWidgets\n  vtkSlicerDICOMLibModuleLogic\n  MRMLCore\n  MRMLLogic\n  ${QT_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries CMake\nDESCRIPTION: Specifies the libraries that the module depends on. These libraries will be linked to the module during the build process. vtkSlicer${MODULE_NAME}ModuleLogic is required.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/ViewControllers/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring CxxTest Driver\nDESCRIPTION: Configures a C++ test driver using the slicerMacroConfigureModuleCxxTestDriver macro. This sets up the test executable with leak checking and error output capturing.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/Testing/Cxx/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroConfigureModuleCxxTestDriver(\n  NAME ${KIT}\n  SOURCES ${KIT_TEST_SRCS}\n  WITH_VTK_DEBUG_LEAKS_CHECK\n  WITH_VTK_ERROR_OUTPUT_CHECK\n  )\n```\n\n----------------------------------------\n\nTITLE: Build Module Qt Library\nDESCRIPTION: Uses a custom CMake macro (SlicerMacroBuildModuleQtLibrary) to build the Qt library for the module. This macro handles the details of compiling the source files, linking the target libraries, and generating the necessary Qt meta-object code.  It specifies the module name, export directive, folder, include directories, source files, MOC files, UI files, target libraries, resources and indicates to wrap the module in Python Qt bindings.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nSlicerMacroBuildModuleQtLibrary(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  FOLDER \"Module-${MODULE_NAME}\"\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  UI_SRCS ${${KIT}_UI_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  RESOURCES ${${KIT}_RESOURCES}\n  WRAP_PYTHONQT\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Python Resources Variable - CMake\nDESCRIPTION: This snippet sets the variable `SegmentEditorEffects_PYTHON_RESOURCES` to a list of resource file paths (icons) used by the Python scripts in the SegmentEditorEffects module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/EditorEffects/Python/SegmentEditorEffects/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SegmentEditorEffects_PYTHON_RESOURCES\n  Resources/Icons/Draw.png\n  Resources/Icons/FillBetweenSlices.png\n  Resources/Icons/GrowFromSeeds.png\n  Resources/Icons/Hollow.png\n  Resources/Icons/Islands.png\n  Resources/Icons/LevelTracing.png\n  Resources/Icons/Logical.png\n  Resources/Icons/Margin.png\n  Resources/Icons/MaskVolume.png\n  Resources/Icons/Smoothing.png\n  Resources/Icons/Threshold.png\n  )\n```\n\n----------------------------------------\n\nTITLE: Building CLI with SEMMacroBuildCLI in CMake\nDESCRIPTION: Uses the SEMMacroBuildCLI macro to build the command line interface for the module. It specifies the module name, logo header, and target libraries. The macro handles compiling, linking, and generating necessary files for the CLI.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/N4ITKBiasFieldCorrection/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/NAMICLogo.h\n  TARGET_LIBRARIES ${ITK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Source File Definitions\nDESCRIPTION: This snippet defines the source files (.cxx and .h) for the module. It includes various editor effect implementations and abstract base classes.  It conditionally includes PythonQt-specific source files based on the `Slicer_USE_PYTHONQT` flag.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/EditorEffects/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  qSlicerSegmentEditorEffectFactory.cxx\n  qSlicerSegmentEditorEffectFactory.h\n  qSlicerSegmentEditorAbstractEffect.cxx\n  qSlicerSegmentEditorAbstractEffect.h\n  qSlicerSegmentEditorAbstractEffect_p.h\n  qSlicerSegmentEditorAbstractLabelEffect.cxx\n  qSlicerSegmentEditorAbstractLabelEffect.h\n  qSlicerSegmentEditorAbstractLabelEffect_p.h\n  qSlicerSegmentEditorPaintEffect.cxx\n  qSlicerSegmentEditorPaintEffect.h\n  qSlicerSegmentEditorPaintEffect_p.h\n  qSlicerSegmentEditorEraseEffect.cxx\n  qSlicerSegmentEditorEraseEffect.h\n  qSlicerSegmentEditorScissorsEffect.cxx\n  qSlicerSegmentEditorScissorsEffect.h\n  )\nif(Slicer_USE_PYTHONQT)\n  list(APPEND ${KIT}_SRCS\n    qSlicerSegmentEditorScriptedEffect.cxx\n    qSlicerSegmentEditorScriptedEffect.h\n    qSlicerSegmentEditorScriptedLabelEffect.cxx\n    qSlicerSegmentEditorScriptedLabelEffect.h\n    qSlicerSegmentEditorScriptedPaintEffect.cxx\n    qSlicerSegmentEditorScriptedPaintEffect.h\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Resource Files in CMake\nDESCRIPTION: Defines the resource files (.qrc) used by the module, which can include images, icons, and other data files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Data/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_RESOURCES\n  Resources/qSlicer${MODULE_NAME}Module.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel package\nDESCRIPTION: This snippet uses `find_package` to locate the SlicerExecutionModel package, ensuring that it is required. It then includes the package's use file to make its functions and variables available.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/PETStandardUptakeValueComputation/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Build Module Logic\nDESCRIPTION: Uses a macro, `SlicerMacroBuildModuleLogic`, to automate the build process for the module. This macro takes the module name, export directive, include directories, source files, and target libraries as input, and configures the build process accordingly.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/VTKWidgets/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nSlicerMacroBuildModuleLogic(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Scripted Module (CMake)\nDESCRIPTION: Builds the ColorLegendSelfTest scripted module using the slicerMacroBuildScriptedModule macro. The script specifies the module name, associated Python scripts (ColorLegendSelfTest.py), and any required resources.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/Testing/Python/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroBuildScriptedModule(\n  NAME ColorLegendSelfTest\n  SCRIPTS ColorLegendSelfTest.py\n  RESOURCES ${MARKUPS_PYTHON_RESOURCES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel Package in CMake\nDESCRIPTION: This snippet uses the find_package command to locate the SlicerExecutionModel package, which is a dependency for building Slicer modules. It also includes the USE file associated with the package.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/OrientScalarVolume/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Volume Rendering with MIP - Slicer - Python\nDESCRIPTION: Renders a volume using maximum intensity projection (MIP).  It retrieves or creates a volume rendering display node, applies either a generic MIP preset or one based on slice view colors, and sets the raycast technique to MaximumIntensityProjection. The function configures the volume rendering for MIP.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef showVolumeRenderingMIP(volumeNode, useSliceViewColors=True):\n  \"\"\"Render volume using maximum intensity projection\n  :param useSliceViewColors: use the same colors as in slice views.\n  \"\"\"\n  # Get/create volume rendering display node\n  volRenLogic = slicer.modules.volumerendering.logic()\n  displayNode = volRenLogic.GetFirstVolumeRenderingDisplayNode(volumeNode)\n  if not displayNode:\n    displayNode = volRenLogic.CreateDefaultVolumeRenderingNodes(volumeNode)\n  # Choose MIP volume rendering preset\n  if useSliceViewColors:\n    volRenLogic.CopyDisplayToVolumeRenderingDisplayNode(displayNode)\n  else:\n    scalarRange = volumeNode.GetImageData().GetScalarRange()\n    if scalarRange[1]-scalarRange[0] < 1500:\n      # Small dynamic range, probably MRI\n      displayNode.GetVolumePropertyNode().Copy(volRenLogic.GetPresetByName(\"MR-MIP\"))\n    else:\n      # Larger dynamic range, probably CT\n      displayNode.GetVolumePropertyNode().Copy(volRenLogic.GetPresetByName(\"CT-MIP\"))\n  # Switch views to MIP mode\n  for viewNode in slicer.util.getNodesByClass(\"vtkMRMLViewNode\"):\n    viewNode.SetRaycastTechnique(slicer.vtkMRMLViewNode.MaximumIntensityProjection)\n  # Show volume rendering\n  displayNode.SetVisibility(True)\n\nvolumeNode = slicer.mrmlScene.GetFirstNodeByClass(\"vtkMRMLScalarVolumeNode\")\nshowVolumeRenderingMIP(volumeNode)\n```\n\n----------------------------------------\n\nTITLE: Define MOC Source Files in CMake\nDESCRIPTION: Specifies the header files that need to be processed by the Meta-Object Compiler (moc).  Moc generates meta-object code required for Qt's signals and slots mechanism. Includes all .h files related to plugins.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_MOC_SRCS\n  qMRMLWidgetsPlugin.h\n\n  qMRMLCheckableNodeComboBoxPlugin.h\n  qMRMLClipNodeDisplayWidgetPlugin.h\n  qMRMLClipNodeWidgetPlugin.h\n  qMRMLCollapsibleButtonPlugin.h\n  qMRMLColorTableComboBoxPlugin.h\n  qMRMLCoordinatesWidgetPlugin.h\n  qMRMLDisplayNodeViewComboBoxPlugin.h\n  qMRMLDisplayNodeWidgetPlugin.h\n  qMRMLEventBrokerWidgetPlugin.h\n  qMRMLLabelComboBoxPlugin.h\n  qMRMLLayoutWidgetPlugin.h\n  qMRMLLinearTransformSliderPlugin.h\n  qMRMLListWidgetPlugin.h\n  qMRMLMatrixWidgetPlugin.h\n  qMRMLModelInfoWidgetPlugin.h\n  qMRMLNavigationViewPlugin.h\n  qMRMLNodeAttributeTableViewPlugin.h\n  qMRMLNodeAttributeTableWidgetPlugin.h\n  qMRMLNodeComboBoxPlugin.h\n  qMRMLPlotViewControllerWidgetPlugin.h\n  qMRMLPlotWidgetPlugin.h\n  qMRMLRangeWidgetPlugin.h\n  qMRMLROIWidgetPlugin.h\n  qMRMLScalarInvariantComboBoxPlugin.h\n  qMRMLScalarsDisplayWidgetPlugin.h\n  qMRMLSceneFactoryWidgetPlugin.h\n  qMRMLSliceControllerWidgetPlugin.h\n  qMRMLSliceInformationWidgetPlugin.h\n  qMRMLSliceVerticalControllerWidgetPlugin.h\n  qMRMLSliceWidgetPlugin.h\n  qMRMLSliderWidgetPlugin.h\n  qMRMLSpinBoxPlugin.h\n  qMRMLTableViewPlugin.h\n  qMRMLThreeDViewInformationWidgetPlugin.h\n  qMRMLThreeDViewPlugin.h\n  qMRMLTransformSlidersPlugin.h\n  qMRMLTreeViewPlugin.h\n  qMRMLVolumeInfoWidgetPlugin.h\n  qMRMLVolumeThresholdWidgetPlugin.h\n  qMRMLWidgetPlugin.h\n  qMRMLWindowLevelWidgetPlugin.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding Package: LibArchive\nDESCRIPTION: This snippet uses the `find_package` command to locate the LibArchive library. The `REQUIRED MODULE` keywords ensure that CMake will stop with an error if the package cannot be found.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/Logic/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(LibArchive REQUIRED MODULE)\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory in CMake\nDESCRIPTION: Conditionally adds a subdirectory for testing if the `BUILD_TESTING` variable is enabled. This allows the module to include unit tests that are built and run as part of the overall build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Specifies the include directories required for compiling the module, incorporating dependencies like Slicer's module widgets and SubjectHierarchy-specific widgets. These directories provide access to necessary header files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_INCLUDE_DIRECTORIES\n  ${Slicer_ModuleWidgets_INCLUDE_DIRS}\n  ${qSlicerSubjectHierarchyModuleWidgets_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Include Cxx Subdirectory - CMake\nDESCRIPTION: This command adds the 'Cxx' subdirectory to the CMake build process. It instructs CMake to process the CMakeLists.txt file within the 'Cxx' directory and incorporate its build targets into the main project.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories CMake\nDESCRIPTION: This snippet defines and sets include directories for the project. It first creates a list of directories in the `include_dirs` variable, including the current source directory, current binary directory, and include directories from other modules like MRMLCore, vtkTeem, and RemoteIO. It then uses the `include_directories` command to add these directories to the project's include path.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Logic/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(include_dirs\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  ${CMAKE_CURRENT_BINARY_DIR}\n  ${MRMLCore_INCLUDE_DIRS}\n  ${vtkTeem_INCLUDE_DIRS}\n  ${RemoteIO_INCLUDE_DIRS}\n  )\ninclude_directories(${include_dirs})\n```\n\n----------------------------------------\n\nTITLE: Exporting Slicer Targets using CMake\nDESCRIPTION: This CMake code snippet retrieves the `Slicer_TARGETS` global property and exports the targets listed within to the `SlicerTargets.cmake` file in the binary directory. The `APPEND` option ensures that subsequent calls append to the file instead of overwriting it.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMake/LastConfigureStep/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(Slicer_TARGETS GLOBAL PROPERTY Slicer_TARGETS)\nexport(TARGETS ${Slicer_TARGETS} APPEND FILE ${Slicer_BINARY_DIR}/SlicerTargets.cmake)\n```\n\n----------------------------------------\n\nTITLE: Add Subdirectories for Module Components\nDESCRIPTION: These lines add subdirectories for different components of the module: Logic, QTCore, QTGUI. The order of adding subdirectories can be important because it dictates build dependencies.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Logic)\nadd_subdirectory(QTCore)\nadd_subdirectory(QTGUI)\n```\n\n----------------------------------------\n\nTITLE: Enable Undo\nDESCRIPTION: The `vtkMRMLScene::SetUndoOn()` method enables following SaveStateForUndo calls, allowing the scene to save the state for undo/redo operations.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/mrml_overview.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Setting Module Export Directive\nDESCRIPTION: Defines the export directive for the module.  This directive is used to properly export symbols when building shared libraries on different platforms.  It uses the uppercase module name defined earlier.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Reformat/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_EXPORT_DIRECTIVE \"Q_SLICER_QTMODULES_${MODULE_NAME_UPPER}_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Target - CMake\nDESCRIPTION: This snippet conditionally adds an external data target. It checks if `${SEM_DATA_MANAGEMENT_TARGET}` is equal to `${CLP}Data`. If it is, it adds the target `${CLP}Data` for external data management using `ExternalData_add_target`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GradientAnisotropicDiffusion/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional External Project Options (CMake)\nDESCRIPTION: This snippet demonstrates setting options to control the integration of external projects like PythonQt with OpenSSL, DCMTK with OpenSSL, NumPy, and SimpleITK. The options depend on other options, such as `Slicer_USE_PYTHONQT`.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\nCMAKE_DEPENDENT_OPTION(\n  Slicer_USE_PYTHONQT_WITH_OPENSSL \"Enable PythonQt SSL support\" ON\n  \"Slicer_USE_PYTHONQT\" OFF)\nmark_as_superbuild(Slicer_USE_PYTHONQT_WITH_OPENSSL)\n\nCMAKE_DEPENDENT_OPTION(\n  Slicer_USE_DCMTK_WITH_OPENSSL \"Enable DCMTK SSL support\" OFF\n  \"Slicer_USE_PYTHONQT_WITH_OPENSSL\" OFF)\nmark_as_superbuild(Slicer_USE_DCMTK_WITH_OPENSSL)\n\nCMAKE_DEPENDENT_OPTION(\n  Slicer_USE_NUMPY \"Build Slicer with NumPy\" ON\n  \"Slicer_USE_PYTHONQT\" OFF)\nmark_as_superbuild(Slicer_USE_NUMPY)\n\nCMAKE_DEPENDENT_OPTION(\n  Slicer_USE_SCIPY \"Build Slicer with SciPy\" ON\n  \"Slicer_USE_PYTHONQT;Slicer_USE_NUMPY\" OFF)\nmark_as_superbuild(Slicer_USE_SCIPY)\n\nCMAKE_DEPENDENT_OPTION(\n  Slicer_USE_SimpleITK \"Build Slicer with SimpleITK support\" ON\n  \"Slicer_USE_PYTHONQT\" OFF)\nmark_as_superbuild(Slicer_USE_SimpleITK)\n```\n\n----------------------------------------\n\nTITLE: Creating Hollow Model from Segment Boundary (Dynamic Modeler) - Python\nDESCRIPTION: This example shows how to create a hollow model from the boundary of a solid segment using the Dynamic Modeler module. It exports the segment to a model, sets up the Hollow tool in Dynamic Modeler, and configures parameters such as shell thickness and continuous update.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nsegmentationNode = getNode(\"Segmentation\")\n\n# Export segments to models\nshNode = slicer.mrmlScene.GetSubjectHierarchyNode()\nexportFolderItemId = shNode.CreateFolderItem(shNode.GetSceneItemID(), \"Segments\")\nslicer.modules.segmentations.logic().ExportAllSegmentsToModels(segmentationNode, exportFolderItemId)\nsegmentModels = vtk.vtkCollection()\nshNode.GetDataNodesInBranch(exportFolderItemId, segmentModels)\n# Get exported model of first segment\nmodelNode = segmentModels.GetItemAsObject(0)\n\n# Set up Hollow tool\nhollowModeler = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLDynamicModelerNode\")\nhollowModeler.SetToolName(\"Hollow\")\nhollowModeler.SetNodeReferenceID(\"Hollow.InputModel\", modelNode.GetID())\nhollowedModelNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLModelNode\")  # this node will store the hollow model\nhollowModeler.SetNodeReferenceID(\"Hollow.OutputModel\", hollowedModelNode.GetID())\nhollowModeler.SetAttribute(\"ShellThickness\", \"2.5\")  # grow outside\nhollowModeler.SetContinuousUpdate(True)  # auto-update output model if input parameters are changed\n\n# Hide inputs, show output\nsegmentation.GetDisplayNode().SetVisibility(False)\nmodelNode.GetDisplayNode().SetVisibility(False)\nhollowedModelNode.GetDisplayNode().SetOpacity(0.5)\n```\n\n----------------------------------------\n\nTITLE: Extract Segments by Terminology (Python)\nDESCRIPTION: This snippet extracts specific segments from a segmentation file (.seg.nrrd) based on standard terminology codes (SCT). It reads the segmentation, extracts segments matching the specified categories and types, assigns them new label values, and writes the resulting segmentation to a new file. The slicerio library is used for reading, extracting, and writing the segmentation data. It requires the `slicerio` package to be installed.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n# pip install slicerio\n\nimport slicerio\n\ninput_filename = \"path/to/Segmentation.seg.nrrd\"\noutput_filename = \"path/to/SegmentationExtracted.seg.nrrd\"\nsegments_to_labels = [\n   ({\"category\": [\"SCT\", \"123037004\", \"Anatomical Structure\"], \"type\": [\"SCT\", \"113197003\", \"Ribs\"]}, 1),\n   ({\"category\": [\"SCT\", \"123037004\", \"Anatomical Structure\"], \"type\": [\"SCT\", \"39607008\", \"Lung\"], \"typeModifier\": [\"SCT\", \"24028007\", \"Right\"]}, 3)\n   ]\n\nsegmentation = slicerio.read_segmentation(input_filename)\nextracted_segmentation = slicerio.extract_segments(segmentation, segments_to_labels)\nslicerio.write_segmentation(output_filename, extracted_segmentation)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files\nDESCRIPTION: Lists all the source files (.cxx and .h) that make up the qMRMLWidgets library. These files are compiled and linked to create the library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(MRMLWidgets_SRCS\n  qMRMLAbstractViewWidget.cxx\n  qMRMLAbstractViewWidget.h\n  qMRMLCheckableNodeComboBox.cxx\n  qMRMLCheckableNodeComboBox.h\n  qMRMLClipNodeWidget.cxx\n  qMRMLClipNodeWidget.h\n  qMRMLClipNodeDisplayWidget.cxx\n  qMRMLClipNodeDisplayWidget.h\n  qMRMLCollapsibleButton.cxx\n  qMRMLCollapsibleButton.h\n  qMRMLColorModel.cxx\n  qMRMLColorModel.h\n  qMRMLColorModel_p.h\n  qMRMLColors.cxx\n  qMRMLColors.h\n  qMRMLColorTableComboBox.cxx\n  qMRMLColorTableComboBox.h\n  qMRMLCoordinatesWidget.cxx\n  qMRMLCoordinatesWidget.h\n  qMRMLDisplayNodeWidget.cxx\n  qMRMLDisplayNodeWidget.h\n  qMRMLDisplayNodeViewComboBox.cxx\n  qMRMLDisplayNodeViewComboBox.h\n  qMRMLLabelComboBox.h\n  qMRMLLabelComboBox.cxx\n  qMRMLEventBrokerConnection.cxx\n  qMRMLEventBrokerConnection.h\n  qMRMLEventBrokerWidget.cxx\n  qMRMLEventBrokerWidget.h\n  qMRMLEventLogger.cxx\n  qMRMLEventLogger.h\n  qMRMLEventLoggerWidget.cxx\n  qMRMLEventLoggerWidget.h\n  qMRMLItemDelegate.cxx\n  qMRMLItemDelegate.h\n  qMRMLLayoutManager.cxx\n  qMRMLLayoutManager.h\n  qMRMLLayoutManager_p.h\n  qMRMLLayoutViewFactory.cxx\n  qMRMLLayoutViewFactory.h\n  qMRMLLayoutWidget.cxx\n  qMRMLLayoutWidget.h\n  qMRMLLinearTransformSlider.cxx\n  qMRMLLinearTransformSlider.h\n  qMRMLListWidget.cxx\n  qMRMLListWidget.h\n  qMRMLMatrixWidget.cxx\n  qMRMLMatrixWidget.h\n  qMRMLModelInfoWidget.cxx\n  qMRMLModelInfoWidget.h\n  qMRMLNavigationView.cxx\n  qMRMLNavigationView.h\n  qMRMLNodeAttributeTableView.cxx\n  qMRMLNodeAttributeTableView.h\n  qMRMLNodeAttributeTableWidget.cxx\n  qMRMLNodeAttributeTableWidget.h\n  qMRMLNodeComboBox.cxx\n  qMRMLNodeComboBox.h\n  qMRMLNodeComboBoxDelegate.cxx\n  qMRMLNodeComboBoxDelegate.h\n  qMRMLNodeComboBoxMenuDelegate.cxx\n  qMRMLNodeComboBoxMenuDelegate.h\n  qMRMLNodeComboBox_p.h\n  qMRMLNodeFactory.cxx\n  qMRMLNodeFactory.h\n  qMRMLPlotWidget.cxx\n  qMRMLPlotWidget.h\n  qMRMLPlotView.cxx\n  qMRMLPlotView_p.h\n  qMRMLPlotView.h\n  qMRMLPlotViewControllerWidget.cxx\n  qMRMLPlotViewControllerWidget.h\n  qMRMLPlotViewControllerWidget_p.h\n  qMRMLRangeWidget.cxx\n  qMRMLRangeWidget.h\n  qMRMLROIWidget.cxx\n  qMRMLROIWidget.h\n  qMRMLScalarInvariantComboBox.cxx\n  qMRMLScalarInvariantComboBox.h\n  qMRMLScalarsDisplayWidget.cxx\n  qMRMLScalarsDisplayWidget.h\n  qMRMLSceneCategoryModel.cxx\n  qMRMLSceneCategoryModel.h\n  qMRMLSceneColorTableModel.cxx\n  qMRMLSceneColorTableModel.h\n  qMRMLSceneFactoryWidget.cxx\n  qMRMLSceneFactoryWidget.h\n  qMRMLSceneModel.cxx\n  qMRMLSceneModel.h\n  qMRMLSceneTransformModel.cxx\n  qMRMLSceneTransformModel.h\n  qMRMLSceneHierarchyModel.cxx\n  qMRMLSceneHierarchyModel.h\n  qMRMLSceneDisplayableModel.cxx\n  qMRMLSceneDisplayableModel.h\n  qMRMLScreenShotDialog.cxx\n  qMRMLScreenShotDialog.h\n  qMRMLSegmentSelectorWidget.cxx\n  qMRMLSegmentSelectorWidget.h\n  qMRMLSliceControllerWidget.cxx\n  qMRMLSliceControllerWidget.h\n  qMRMLSliceControllerWidget_p.h\n  qMRMLSliceInformationWidget.cxx\n  qMRMLSliceInformationWidget.h\n  qMRMLSliceInformationWidget_p.h\n  qMRMLSliceVerticalControllerWidget.cxx\n  qMRMLSliceVerticalControllerWidget.h\n  qMRMLSliceView.cxx\n  qMRMLSliceView.h\n  qMRMLSliceView_p.h\n  qMRMLSliceWidget.cxx\n  qMRMLSliceWidget.h\n  qMRMLSliceWidget_p.h\n  qMRMLSliderWidget.cxx\n  qMRMLSliderWidget.h\n  qMRMLSortFilterColorProxyModel.cxx\n  qMRMLSortFilterColorProxyModel.h\n  qMRMLSortFilterHierarchyProxyModel.cxx\n  qMRMLSortFilterHierarchyProxyModel.h\n  qMRMLSortFilterProxyModel.cxx\n  qMRMLSortFilterProxyModel.h\n  qMRMLSpinBox.cxx\n  qMRMLSpinBox.h\n  qMRMLTableModel.cxx\n  qMRMLTableModel.h\n  qMRMLTableView.cxx\n  qMRMLTableView.h\n  qMRMLTableView_p.h\n  qMRMLTableViewControllerWidget.cxx\n  qMRMLTableViewControllerWidget.h\n  qMRMLTableViewControllerWidget_p.h\n  qMRMLTableWidget.cxx\n  qMRMLTableWidget.h\n  qMRMLThreeDView.cxx\n  qMRMLThreeDView.h\n  qMRMLThreeDView_p.h\n  qMRMLThreeDViewControllerWidget.cxx\n  qMRMLThreeDViewControllerWidget.h\n  qMRMLThreeDViewControllerWidget_p.h\n  qMRMLThreeDViewInformationWidget.cxx\n  qMRMLThreeDViewInformationWidget.h\n  qMRMLThreeDViewInformationWidget_p.h\n  qMRMLThreeDWidget.cxx\n  qMRMLThreeDWidget.h\n  qMRMLTransformSliders.cxx\n  qMRMLTransformSliders.h\n  qMRMLTreeView.cxx\n  qMRMLTreeView.h\n  qMRMLTreeView_p.h\n  qMRMLUtils.cxx\n  qMRMLUtils.h\n  qMRMLViewControllerBar.cxx\n  qMRMLViewControllerBar.h\n  qMRMLViewControllerBar_p.h\n  qMRMLVolumeInfoWidget.cxx\n  qMRMLVolumeInfoWidget.h\n  qMRMLVolumeThresholdWidget.cxx\n  qMRMLVolumeThresholdWidget.h\n  qMRMLVolumeWidget.cxx\n  qMRMLVolumeWidget.h\n  qMRMLWidget.cxx\n  qMRMLWidget.h\n  qMRMLWindowLevelWidget.cxx\n  qMRMLWindowLevelWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting KIT Variable for qSlicer Module\nDESCRIPTION: This snippet sets the KIT variable, which likely represents the name of the module being configured. It's setting the KIT to `qSlicer${MODULE_NAME}Module`, where `${MODULE_NAME}` would be replaced by the actual module name during CMake processing. This variable is later used in other CMake functions.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Data/Testing/Cxx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT qSlicer${MODULE_NAME}Module)\n```\n\n----------------------------------------\n\nTITLE: Setting Module UI Sources\nDESCRIPTION: Defines the UI files for the module. These files describe the user interface of the module and are compiled into UI objects.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/GeneralizedReformat/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_UI_SRCS\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Module Source Files\nDESCRIPTION: Sets the MODULE_SRCS CMake variable. This lists the C++ source files that make up the module.  These files will be compiled and linked into the module library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/LoadableCustomMarkups/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_SRCS\n  qSlicer${MODULE_NAME}Module.cxx\n  qSlicer${MODULE_NAME}Module.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Include Directories CMake\nDESCRIPTION: Sets the include directories for the module, allowing the compiler to find necessary header files. These include directories point to source and binary directories of Logic, MRML, SubjectHierarchyPlugins and Widgets and other modules of slicer. \nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_INCLUDE_DIRECTORIES\n  ${CMAKE_CURRENT_SOURCE_DIR}/Logic\n  ${CMAKE_CURRENT_BINARY_DIR}/Logic\n  ${CMAKE_CURRENT_SOURCE_DIR}/MRML\n  ${CMAKE_CURRENT_BINARY_DIR}/MRML\n  ${CMAKE_CURRENT_SOURCE_DIR}/SubjectHierarchyPlugins\n  ${CMAKE_CURRENT_BINARY_DIR}/SubjectHierarchyPlugins\n  ${qSlicerSubjectHierarchyModuleWidgets_INCLUDE_DIRS}\n  ${CMAKE_CURRENT_SOURCE_DIR}/Widgets\n  ${CMAKE_CURRENT_BINARY_DIR}/Widgets\n  ${qSlicerColorsModuleWidgets_INCLUDE_DIRS}\n  ${vtkSlicerColorsModuleMRML_INCLUDE_DIRS}\n  ${vtkSlicerColorsModuleLogic_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting MOC Source Files\nDESCRIPTION: Specifies the header files that require meta-object compiler (MOC) processing, necessary for Qt-based classes with signals and slots. This step generates additional code required for Qt's signal-slot mechanism.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_MOC_SRCS\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}SettingsPanel.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Building CLI Module using SEMMacroBuildCLI in CMake\nDESCRIPTION: Uses the SEMMacroBuildCLI macro to configure and build the CLI module. It specifies the module name, logo header, and target libraries (ITK).\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/LabelMapSmoothing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/ITKLogo.h\n  TARGET_LIBRARIES ${ITK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining source files for the module in CMake\nDESCRIPTION: This snippet defines the list of source files (.cxx and .h) that make up the module. These files contain the implementation of the module's functionality.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/MRML/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  vtkMRMLCPURayCast${MODULE_NAME}DisplayNode.cxx\n  vtkMRMLCPURayCast${MODULE_NAME}DisplayNode.h\n  vtkMRMLGPURayCast${MODULE_NAME}DisplayNode.cxx\n  vtkMRMLGPURayCast${MODULE_NAME}DisplayNode.h\n  vtkMRMLMulti${MODULE_NAME}DisplayNode.cxx\n  vtkMRMLMulti${MODULE_NAME}DisplayNode.h\n  vtkMRMLShaderPropertyNode.cxx\n  vtkMRMLShaderPropertyNode.h\n  vtkMRMLShaderPropertyStorageNode.cxx\n  vtkMRMLShaderPropertyStorageNode.h\n  vtkMRMLVolumePropertyNode.cxx\n  vtkMRMLVolumePropertyNode.h\n  vtkMRMLVolumePropertyStorageNode.cxx\n  vtkMRMLVolumePropertyStorageNode.h\n  vtkMRML${MODULE_NAME}DisplayNode.cxx\n  vtkMRML${MODULE_NAME}DisplayNode.h\n  )\n```\n\n----------------------------------------\n\nTITLE: HField Transformation Test - CMake\nDESCRIPTION: Defines a test case that applies a transformation defined by a hfield (displacement field) to an image. Compares result to baseline.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleDTIVolume/Testing/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nset(HFieldFile DATA{${INPUT}/deformationField.nrrd})\nset(TransformedImage5 ${TEMP}/dt-helix-transformed5.nrrd )\nset(testname ${CLP}HFieldTest)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  --compare\n    DATA{${BASELINE}/dt-helix-ref-HField.nrrd}\n    ${TransformedImage5}\n  --compareIntensityTolerance 0\n  ModuleEntryPoint\n    -H ${HFieldFile}\n    ${OriginalImage}\n    ${TransformedImage5}\n    -n 8\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Installing ITK Plugin\nDESCRIPTION: Installs the `MRMLIDIOPlugin` library to the directory designated for ITK plugins.  This allows ITK to find and load the plugin at runtime. `MRMLIDIO` and `MRMLIDIOPlugin` are installed in different locations.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/IDImageIO/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS MRMLIDIOPlugin\n  RUNTIME DESTINATION ${MRMLIDImageIO_INSTALL_ITKFACTORIES_DIR} COMPONENT RuntimeLibraries\n  LIBRARY DESTINATION ${MRMLIDImageIO_INSTALL_ITKFACTORIES_DIR} COMPONENT RuntimeLibraries\n  ARCHIVE DESTINATION ${${PROJECT_NAME}_INSTALL_LIB_DIR} COMPONENT Development\n  )\n```\n\n----------------------------------------\n\nTITLE: Set Module Export Directive in CMake\nDESCRIPTION: Sets the module export directive, used for controlling symbol visibility when building shared libraries.  This directive uses a naming convention based on the module name.  It assumes the presence of a macro `Q_SLICER_QTMODULES_${MODULE_NAME_UPPER}_EXPORT` which needs to be defined elsewhere.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperLoadableModuleTemplate/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_EXPORT_DIRECTIVE \"Q_SLICER_QTMODULES_${MODULE_NAME_UPPER}_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Initializing project and setting variables in CMake\nDESCRIPTION: This snippet initializes the CMake project for the module logic and sets key variables such as the module name (KIT), export directive, include directories, source files, and target libraries. These variables are later used by the SlicerMacroBuildModuleLogic macro.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Reformat/Logic/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleLogic)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_LOGIC_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  )\n\nset(${KIT}_SRCS\n  vtkSlicer${MODULE_NAME}Logic.cxx\n  vtkSlicer${MODULE_NAME}Logic.h\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  ${ITK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding a Simple Test\nDESCRIPTION: This snippet adds a simple test using the `simple_test` CMake function. The test being added is `vtkSlicerDataLogicAutoRemoveTest`. This function is responsible for adding the test to the CMake testing infrastructure, which will allow CTest to discover and run the test executable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Data/Testing/Cxx/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nsimple_test(vtkSlicerDataLogicAutoRemoveTest)\n```\n\n----------------------------------------\n\nTITLE: Finding ITK with specific components\nDESCRIPTION: Finds the ITK library with specified components (ITKCommon, ITKIOTransformBase, ITKTransform). It requires ITK version 4.6 or higher and includes its use file. It also handles a conditional setting to disable ITK IO factory register managers based on the ITK version. Specifically, it checks for ITK versions greater or equal to 5.3 and if it is, iterates through \"IMAGEIO\", \"MESHIO\", and \"TRANSFORMIO\" to set the ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER to 1. Otherwise, it sets ITK_NO_IO_FACTORY_REGISTER_MANAGER to 1.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/FiducialRegistration/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKCommon\n  ITKIOTransformBase\n  ITKTransform\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Defining Target Libraries - CMake\nDESCRIPTION: This snippet defines the target libraries that the module depends on. It lists the libraries that need to be linked with the module during the build process. These libraries include MRML, segmentation, subject hierarchy, and terminology modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  vtkSlicerSegmentationsModuleMRML\n  vtkSlicerSegmentationsModuleLogic\n  qSlicerSubjectHierarchyModuleWidgets\n  vtkSlicerSubjectHierarchyModuleLogic\n  qSlicerTerminologiesModuleWidgets\n  qMRMLWidgets\n  MRMLLogic\n  MRMLCore\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Valgrind Script (CMake)\nDESCRIPTION: Configures a Valgrind script for dynamic analysis by setting up the necessary variables and using the `configure_file` command. The configured script is placed in the binary directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_80\n\nLANGUAGE: CMake\nCODE:\n```\nset(Slicer_VALGRIND_SUPPRESSIONS_FILE \"${Slicer_SOURCE_DIR}/CMake/SlicerValgrind.supp\")\nget_property(Slicer_MAIN_PROJECT_APPLICATION_EXECUTABLE GLOBAL PROPERTY \"${Slicer_MAIN_PROJECT_APPLICATION_NAME}_EXECUTABLE\")\nset(script \"Utilities/Scripts/runValgrind.sh\")\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/${script}.in\n  ${CMAKE_CURRENT_BINARY_DIR}/${script}\n  @ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Configure PlotsSelfTest module with CMake\nDESCRIPTION: This CMake code snippet configures the PlotsSelfTest module. It uses the `slicerMacroBuildScriptedModule` macro to define the module, specifying the name and the Python scripts. It then adds a Python unit test using the `slicer_add_python_unittest` macro.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Plots/Testing/Python/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(Slicer_USE_QtTesting AND Slicer_USE_PYTHONQT)\n  slicerMacroBuildScriptedModule(\n    NAME PlotsSelfTest\n    SCRIPTS PlotsSelfTest.py\n    )\n  slicer_add_python_unittest(SCRIPT PlotsSelfTest.py)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Resource Files\nDESCRIPTION: Specifies the resource files (.qrc) for the module. These files contain images, icons, and other resources used by the module. The .qrc file is processed by Qt's resource compiler.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Cameras/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_RESOURCES\n  Resources/qSlicer${MODULE_NAME}Module.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Profiling Python Code in Slicer\nDESCRIPTION: This snippet profiles Python code within Slicer using the cProfile module and visualizes the results using snakeviz. It requires the cProfile and snakeviz libraries. If snakeviz is not found, it attempts to install it using pip. The profiling results are displayed in a web browser. If detailed profiling is disabled, it calculates and prints the elapsed time of the tested code.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/debugging/python.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Start profiling\ndetailedProfiling = True  # set to False to just get elapsed time\nif detailedProfiling:\n    import cProfile\n    cp=cProfile.Profile()\n    cp.enable()\nelse:\n    startTime = time.time()\n\n# --------------------------------------------\n# Put the tested code here, for example:\nimport SampleData\nsampleDataLogic = SampleData.SampleDataLogic()\nmrHead = sampleDataLogic.downloadMRHead()\nimport SegmentStatistics\nsegStatLogic = SegmentStatistics.SegmentStatisticsLogic()\n# --------------------------------------------\n\n# Finish profiling and display result\nif detailedProfiling:\n    profileFilePath = os.path.join(slicer.app.temporaryPath, 'profile.prof')\n    cp.disable()\n    cp.dump_stats(profileFilePath)\n    # Import visualization tool\n    try:\n      import snakeviz\n    except ImportError:\n      pip_install(\"snakeviz\")\n    # Show profiling results in the web browser\n    import shutil\n    pythonSlicerExecutablePath = shutil.which(\"PythonSlicer\")\n    commandLine = [pythonSlicerExecutablePath, \"-m\", \"snakeviz\", profileFilePath]\n    proc = slicer.util.launchConsoleProcess(commandLine, useStartupEnvironment=False)\n    # proc.kill()\nelse:\n    stopTime = time.time()\n    print(f\"Elapsed time: {stopTime-startTime} s\")\n```\n\n----------------------------------------\n\nTITLE: Setting Plugin Variables\nDESCRIPTION: This snippet defines CMake variables for the Qt Designer plugin, including the plugin's name (`KIT`), export directive, source files (`_SRCS`), moc source files (`_MOC_SRCS`), and target libraries. These variables are used later by the `ctkMacroBuildQtDesignerPlugin` macro to configure the plugin's build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT ${PROJECT_NAME}Plugins)\n\nset(${KIT}_EXPORT \"Q_SLICER_QTMODULES_${MODULE_NAME_UPPER}_WIDGETS_PLUGINS_EXPORT\")\n\nset(${KIT}_SRCS\n  qSlicer${MODULE_NAME}WidgetsAbstractPlugin.cxx\n  qSlicer${MODULE_NAME}WidgetsAbstractPlugin.h\n  qSlicer${MODULE_NAME}WidgetsPlugin.cxx\n  qSlicer${MODULE_NAME}WidgetsPlugin.h\n\n  qMRMLModelDisplayNodeWidgetPlugin.cxx\n  qMRMLModelDisplayNodeWidgetPlugin.h\n  )\n\nset(${KIT}_MOC_SRCS\n  qSlicer${MODULE_NAME}WidgetsPlugin.h\n\n  qMRMLModelDisplayNodeWidgetPlugin.h\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  qSlicer${MODULE_NAME}ModuleWidgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Target Libraries\nDESCRIPTION: Specifies the libraries that the module depends on.  These libraries will be linked with the module during the build process. The libraries include other modules of Slicer and MRML widgets.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/Widgets/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  vtkSlicer${MODULE_NAME}ModuleMRML\n  qSlicerTerminologiesModuleWidgets\n  qMRMLWidgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Python Scripts for Module\nDESCRIPTION: This snippet defines the Python scripts associated with the module. In this case, it specifies that the 'PerformanceTests.py' script is part of the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/PerformanceTests/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_PYTHON_SCRIPTS\n  ${MODULE_NAME}.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Include Directories - CMake\nDESCRIPTION: This snippet defines the include directories required for compiling the module. It aggregates include directories from various dependent modules, ensuring that the compiler can find the necessary header files. The include directories point to the MRML, Segmentations, Terminologies and Subject Hierarchy related modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSlicerSegmentationsModuleMRML_INCLUDE_DIRS}\n  ${vtkSlicerSegmentationsModuleLogic_INCLUDE_DIRS}\n  ${qSlicerSegmentationsModule_INCLUDE_DIRS}\n  ${qSlicerSubjectHierarchyModuleWidgets_INCLUDE_DIRS}\n  ${vtkSlicerSubjectHierarchyModuleLogic_INCLUDE_DIRS}\n  ${vtkSlicerTerminologiesModuleLogic_INCLUDE_DIRS}\n  ${qSlicerTerminologiesModuleWidgets_INCLUDE_DIRS}\n  ${qMRMLWidgets_INCLUDE_DIRS}\n  ${MRMLLogic_INCLUDE_DIRS}\n  ${MRMLCore_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Scripted Module with Macro\nDESCRIPTION: This snippet uses the 'slicerMacroBuildScriptedModule' macro to build the PerformanceTests module. It specifies the module name, scripts, resources, and enables generic tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/PerformanceTests/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroBuildScriptedModule(\n  NAME ${MODULE_NAME}\n  SCRIPTS ${MODULE_PYTHON_SCRIPTS}\n  RESOURCES ${MODULE_PYTHON_RESOURCES}\n  WITH_GENERIC_TESTS\n  )\n```\n\n----------------------------------------\n\nTITLE: Project Definition\nDESCRIPTION: This snippet defines the project name for the qSlicer module widgets using the `project()` command. The `MODULE_NAME` variable likely contains the specific module name, which is incorporated into the overall project name.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/Widgets/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(qSlicer${MODULE_NAME}ModuleWidgets)\n```\n\n----------------------------------------\n\nTITLE: Define Module Export Directive in CMake\nDESCRIPTION: Defines the module export directive, which is used to specify symbols that should be exported from the module's shared library. It is defined as Q_SLICER_QTMODULES_${MODULE_NAME_UPPER}_EXPORT and helps control the module's public API.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Sequences/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_EXPORT_DIRECTIVE \"Q_SLICER_QTMODULES_${MODULE_NAME_UPPER}_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Set Python Scripts for Module\nDESCRIPTION: Defines the Python scripts associated with the module. In this case, it's a single script named 'SelfTests.py'. These scripts are used by `slicerMacroBuildScriptedModule` to build the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/SelfTests/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_PYTHON_SCRIPTS\n  ${MODULE_NAME}.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Enabling Modules - CMake\nDESCRIPTION: This code snippet iterates through the `modules` list and uses the `slicer_is_scripted_builtin_module_enabled` function to check if each module is enabled. If a module is enabled, the `add_subdirectory` command includes the module's directory in the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(SlicerCheckModuleEnabled)\n\nforeach(module ${modules})\n  slicer_is_scripted_builtin_module_enabled(${module} _build_module)\n  if(_build_module)\n    add_subdirectory(${module})\n  endif()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Add Test with ExternalData (CMake)\nDESCRIPTION: This snippet adds a test using `ExternalData_add_test`.  It defines the test name, command to execute (including the executable target), and uses `--compare` to compare the output with a baseline.  It also specifies the entry point and input data. The output file is placed in a temporary directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ModelToLabelMap/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(testname ${CLP}Test)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  --compare DATA{${BASELINE}/OAS10001-255.mha}\n            ${TEMP}/${CLP}TestOutput.mha\n  ModuleEntryPoint\n    DATA{${INPUT}/OAS10001.nii.gz}\n    DATA{${INPUT}/OAS10001-Transformed.vtp}\n    ${TEMP}/${CLP}TestOutput.mha\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Using SlicerMacroBuildModuleLogic Macro in CMake\nDESCRIPTION: This snippet uses a custom CMake macro called `SlicerMacroBuildModuleLogic` to automate the process of building the module's logic. It passes the module's name, export directive, include directories, source files, and target libraries as arguments to the macro. The macro encapsulates the standard steps of building a module within the Slicer environment.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/Logic/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleLogic(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Measure Angle Between Two Slice Planes (Python)\nDESCRIPTION: This script measures the angle between the red and yellow slice planes. It retrieves the slice-to-RAS matrices for both slice nodes, extracts the normal vectors from these matrices, calculates the angle between the normal vectors using vtkMath, and prints the angle in degrees to the console. The angle is updated whenever either slice node is moved by observing the ModifiedEvent.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nsliceNodeIds = [\"vtkMRMLSliceNodeRed\", \"vtkMRMLSliceNodeYellow\"]\n\n# Print angles between slice nodes\ndef ShowAngle(unused1=None, unused2=None):\n  sliceNormalVector = []\n  for sliceNodeId in sliceNodeIds:\n    sliceToRAS = slicer.mrmlScene.GetNodeByID(sliceNodeId).GetSliceToRAS()\n    sliceNormalVector.append([sliceToRAS.GetElement(0,2), sliceToRAS.GetElement(1,2), sliceToRAS.GetElement(2,2)])\n  angleRad = vtk.vtkMath.AngleBetweenVectors(sliceNormalVector[0], sliceNormalVector[1])\n  angleDeg = vtk.vtkMath.DegreesFromRadians(angleRad)\n  print(\"Angle between slice planes = {0:0.3f}\".format(angleDeg))\n\n# Observe slice node changes\nfor sliceNodeId in sliceNodeIds:\n  slicer.mrmlScene.GetNodeByID(sliceNodeId).AddObserver(vtk.vtkCommand.ModifiedEvent, ShowAngle)\n\n# Print current angle\nShowAngle()\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking Test Executable\nDESCRIPTION: This snippet creates an executable test named `${CLP}Test` using `ctk_add_executable_utf8`. It links the executable to the `${CLP}Lib` and `${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES}` libraries.  Properties such as LABELS and FOLDER are also set for the target.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CastScalarVolume/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nctk_add_executable_utf8(${CLP}Test ${CLP}Test.cxx)\ntarget_link_libraries(${CLP}Test ${CLP}Lib ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES})\nset_target_properties(${CLP}Test PROPERTIES LABELS ${CLP})\nset_target_properties(${CLP}Test PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Setting Library Properties Conditionally\nDESCRIPTION: This snippet sets the `ModuleDescriptionParser_USE_PYTHON` option to `OFF` if `Slicer_BUILD_CLI_SUPPORT` is enabled.  This disables Python support within `ModuleDescriptionParser` to remove Python as a dependency.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_BUILD_CLI_SUPPORT)\n  # Python support within ModuleDescriptionParser is used only within ModuleFactory.cxx\n  # Considering the ModuleFactory isn't used anymore to discover modules, let's disable the\n  # associated python support so that the python library aren't a dependency of\n  # either ModuleDescriptionParser or program/library depending on ModuleDescriptionParser.\n  set(ModuleDescriptionParser_USE_PYTHON OFF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Executable and Linking Libraries - CMake\nDESCRIPTION: Adds an executable target named ${CLP}Test from the source file ${CLP}Test.cxx and links it against ${CLP}Lib and other libraries. It sets target properties such as labels and folder location.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MultiplyScalarVolumes/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nctk_add_executable_utf8(${CLP}Test ${CLP}Test.cxx)\ntarget_link_libraries(${CLP}Test ${CLP}Lib ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES})\nset_target_properties(${CLP}Test PROPERTIES LABELS ${CLP})\nset_target_properties(${CLP}Test PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories\nDESCRIPTION: Adds the MRML and Logic subdirectories to the build process. These subdirectories likely contain code related to data representation and module logic, respectively, and are necessary for the module's functionality.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/GeneralizedReformat/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(MRML)\nadd_subdirectory(Logic)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Test and Linking Libraries\nDESCRIPTION: This snippet adds an executable test named `${CLP}Test` using `ctk_add_executable_utf8`. It then specifies dependencies for the test, links necessary libraries (`${CLP}Lib` and `${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES}`), and sets properties such as labels and folder for the test target. This ensures the test executable is built correctly and linked with the required libraries for proper execution.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/VotingBinaryHoleFillingImageFilter/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nctk_add_executable_utf8(${CLP}Test ${CLP}Test.cxx)\nadd_dependencies(${CLP}Test ${CLP})\ntarget_link_libraries(${CLP}Test ${CLP}Lib ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES})\nset_target_properties(${CLP}Test PROPERTIES LABELS ${CLP})\nset_target_properties(${CLP}Test PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel Package\nDESCRIPTION: This snippet uses the find_package command to locate the SlicerExecutionModel package. The REQUIRED keyword ensures that the configuration fails if the package is not found.  It then includes the use file associated with this package, making its definitions available.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/CLI/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Build Module Widgets\nDESCRIPTION: Uses the SlicerMacroBuildModuleWidgets macro to build the module widgets. This macro handles the compilation, linking, and installation of the widgets, using the variables defined earlier in the file. It also configures wrapping for PythonQt, enabling Python scripting access to the widgets.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/LoadableCustomMarkups/Widgets/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nSlicerMacroBuildModuleWidgets(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  UI_SRCS ${${KIT}_UI_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  RESOURCES ${${KIT}_RESOURCES}\n  WRAP_PYTHONQT\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries and Resources\nDESCRIPTION: Specifies the target libraries that the module depends on (vtkSlicer${MODULE_NAME}ModuleLogic) and any resources. These are used during the linking phase of the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Plots/Widgets/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_RESOURCES\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  )\n```\n\n----------------------------------------\n\nTITLE: Including Slicer use file\nDESCRIPTION: Includes the Slicer use file, which defines variables and functions necessary for building Slicer extensions. It depends on the `Slicer_USE_FILE` variable being set by the `find_package(Slicer)` command.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/CLIExtensionTemplate/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${Slicer_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Setting Export Directive\nDESCRIPTION: Defines the export directive for the module, used for managing symbol visibility during linking, particularly important for Qt modules. It ensures that necessary symbols are available to other modules that depend on this one.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_EXPORT_DIRECTIVE \"Q_SLICER_QTMODULES_${MODULE_NAME_UPPER}_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Add Test with Different Label Value (CMake)\nDESCRIPTION: This snippet adds another test using `ExternalData_add_test`, similar to the previous one, but with a different label value specified using the `--labelValue` argument. The output file is also different to accommodate the change in label value.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ModelToLabelMap/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# With a different output label\nset(testname ${CLP}TestLabelValue)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  --compare DATA{${BASELINE}/OAS10001-128.mha}\n            ${TEMP}/${CLP}TestLabelValueOutput.mha\n  ModuleEntryPoint\n    --labelValue 128\n    DATA{${INPUT}/OAS10001.nii.gz}\n    DATA{${INPUT}/OAS10001-Transformed.vtp}\n    ${TEMP}/${CLP}TestLabelValueOutput.mha\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: ExternalData Test Configuration\nDESCRIPTION: This snippet configures an ExternalData test. It defines the test name, the command to execute (including the target executable and input/output file paths), and parameters for the module. The test compares the output file to a baseline file.  `${SEM_LAUNCH_COMMAND}` and `DATA{...}` are used to handle platform-specific execution and data management. The radius, majorityThreshold, background, and foreground parameters customize the filter operation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/VotingBinaryHoleFillingImageFilter/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(testname ${CLP}Test)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  --compare DATA{${BASELINE}/VotingBinaryHoleFillingImageFilterTest.nhdr,VotingBinaryHoleFillingImageFilterTest.raw.gz}\n            ${TEMP}/VotingBinaryHoleFillingImageFilterTest.nhdr\n  ModuleEntryPoint\n    --radius 3,3,3\n    --majorityThreshold 1\n    --background 0\n    --foreground 1\n   DATA{${INPUT}/CTHeadResampledOtsuSegmented.nhdr,CTHeadResampledOtsuSegmented.raw.gz}\n   ${TEMP}/VotingBinaryHoleFillingImageFilterTest.nhdr\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Finding ITK Package with Components\nDESCRIPTION: This code block configures the ITK (Insight Toolkit) package search and inclusion. It defines a list of ITK components required by the module, then uses `find_package` to locate ITK version 4.6 or later, failing if not found. It disables ITK's factory register manager for newer ITK versions (>= 5.3) to avoid conflicts and includes the ITK use file to provide ITK definitions.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/CLI/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKIOImageBase\n  ITKSmoothing\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Exporting the target\nDESCRIPTION: This snippet exports the library target. It checks if `${PROJECT_NAME}_EXPORT_FILE` is defined, and if not, it sets it to `${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Targets.cmake`. It then uses the `export` command to add the library to the export file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/CLI/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_EXPORT_FILE)\n  set(${PROJECT_NAME}_EXPORT_FILE ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Targets.cmake)\nendif()\nexport(TARGETS ${lib_name} APPEND FILE ${${PROJECT_NAME}_EXPORT_FILE})\n```\n\n----------------------------------------\n\nTITLE: Defining UI Source Files\nDESCRIPTION: This snippet defines the UI files (.ui) created with Qt Designer, which describe the layout and visual appearance of the widgets. These files are used to generate the corresponding C++ code.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/Widgets/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_UI_SRCS\n  Resources/UI/qMRMLTransformDisplayNodeWidget.ui\n  Resources/UI/qMRMLTransformInfoWidget.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Generating MOC files with Qt5\nDESCRIPTION: This uses `QT5_GENERATE_MOCS` to automatically generate MOC files for the source files listed in `KIT_TEST_GENERATE_MOC_SRCS`.  It handles the dependency tracking and compilation of MOC files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nQT5_GENERATE_MOCS(${KIT_TEST_GENERATE_MOC_SRCS})\n```\n\n----------------------------------------\n\nTITLE: Target Library Definitions\nDESCRIPTION: This snippet defines the target libraries that the module depends on. These libraries provide the necessary functionality for the module to operate, including MRML and Qt components.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/EditorEffects/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nset(${KIT}_TARGET_LIBRARIES\n  vtkSlicerSegmentationsModuleMRML\n  vtkSlicerSegmentationsModuleMRMLDisplayableManager\n  vtkSlicerSegmentationsModuleLogic\n  qMRMLWidgets\n  MRMLLogic\n  MRMLCore\n  qSlicerBaseQTGUI # required for access to qSlicerApplication singletons\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Application Executable CMake\nDESCRIPTION: This snippet defines the source files for the application executable (`APP_SRCS`) and then uses the `slicerMacroBuildApplication` macro to build the executable. It configures the executable with the given name, application name, launcher splash screen file, icon files, license file, folder, source files, target libraries, and target name variable. The `extra_args` are also passed to the macro.\nSOURCE: https://github.com/slicer/slicer/blob/main/Applications/SlicerApp/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(APP_SRCS\n  Main.cxx\n  )\n\nslicerMacroBuildApplication(\n  NAME ${PROJECT_NAME}\n  APPLICATION_NAME ${${PROJECT_NAME}_APPLICATION_NAME}\n  LAUNCHER_SPLASHSCREEN_FILE ${SlicerApp_LAUNCHER_SPLASHSCREEN_FILE}\n  APPLE_ICON_FILE ${SlicerApp_APPLE_ICON_FILE}\n  WIN_ICON_FILE ${SlicerApp_WIN_ICON_FILE}\n  LICENSE_FILE ${SlicerApp_LICENSE_FILE}\n  FOLDER ${${PROJECT_NAME}_FOLDER}\n  SRCS ${APP_SRCS}\n  TARGET_LIBRARIES ${APPLIB_NAME}\n  TARGET_NAME_VAR \"APP_TARGET_NAME\"\n  ${extra_args}\n  )\n```\n\n----------------------------------------\n\nTITLE: Add Subdirectories (CMake)\nDESCRIPTION: Adds subdirectories for Logic, Widgets, and SubjectHierarchyPlugins to the build process. This directs CMake to process the CMakeLists.txt files within each of these subdirectories, effectively including their targets in the overall build.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOMLib/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Logic)\nadd_subdirectory(Widgets)\nadd_subdirectory(SubjectHierarchyPlugins)\n```\n\n----------------------------------------\n\nTITLE: Adding Simple Tests\nDESCRIPTION: These snippets use the simple_test macro to add individual tests to the test suite. Each test is defined by its name (e.g., vtkDataIOManagerLogicTest1).\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/Logic/Testing/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nsimple_test( vtkDataIOManagerLogicTest1 )\nsimple_test( vtkSlicerApplicationLogicTest1 )\nsimple_test( vtkSlicerVersionConfigureTest1 )\n```\n\n----------------------------------------\n\nTITLE: Configuring Cxx Test Driver - CMake\nDESCRIPTION: Configures a C++ test driver using the slicerMacroConfigureModuleCxxTestDriver macro. This macro likely handles compiling the test sources and setting up the test environment. It also includes options for VTK debug leak checks and error output checks.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nslicerMacroConfigureModuleCxxTestDriver(\n  NAME ${KIT}\n  SOURCES ${KIT_TEST_SRCS}\n  WITH_VTK_DEBUG_LEAKS_CHECK\n  WITH_VTK_ERROR_OUTPUT_CHECK\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding ITK Package - CMake\nDESCRIPTION: This snippet finds the ITK (Insight Toolkit) package with specified components. The `find_package` command searches for the ITK package with the listed components (ITKIOImageBase, ITKImageFunction, ITKImageGrid) and includes its use file for linking.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleScalarVolume/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKIOImageBase\n  ITKImageFunction\n  ITKImageGrid\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Building Loadable Module CMake\nDESCRIPTION: Uses the slicerMacroBuildLoadableModule macro to build the loadable module.  This macro automates the build process based on the defined variables such as source files, include directories and target libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroBuildLoadableModule(\n  NAME ${MODULE_NAME}\n  EXPORT_DIRECTIVE ${MODULE_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${MODULE_INCLUDE_DIRECTORIES}\n  SRCS ${MODULE_SRCS}\n  MOC_SRCS ${MODULE_MOC_SRCS}\n  UI_SRCS ${MODULE_UI_SRCS}\n  TARGET_LIBRARIES ${MODULE_TARGET_LIBRARIES}\n  RESOURCES ${MODULE_RESOURCES}\n  WITH_GENERIC_TESTS\n  )\n```\n\n----------------------------------------\n\nTITLE: Compiling Python Scripts - CMake\nDESCRIPTION: This snippet uses the `ctkMacroCompilePythonScript` macro to compile the Python scripts listed in `SlicerWizard_PYTHON_SCRIPTS`. This compilation occurs if both `Slicer_BUILD_EXTENSIONMANAGER_SUPPORT` and `Slicer_USE_PYTHONQT` are enabled. The compiled scripts are placed in the specified destination and install directories.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Scripts/SlicerWizard/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_BUILD_EXTENSIONMANAGER_SUPPORT AND Slicer_USE_PYTHONQT)\n  ctkMacroCompilePythonScript(\n    TARGET_NAME SlicerWizard\n    SCRIPTS \"${SlicerWizard_PYTHON_SCRIPTS}\"\n    DESTINATION_DIR ${Slicer_BINARY_DIR}/bin/Python/SlicerWizard\n    INSTALL_DIR ${Slicer_INSTALL_BIN_DIR}/Python\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Module Logic with SlicerMacroBuildModuleLogic (CMake)\nDESCRIPTION: This code uses the `SlicerMacroBuildModuleLogic` macro to build the module logic. It passes the name, export directive, include directories, source files, and target libraries as arguments. This macro encapsulates the standard build process for Slicer modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/Logic/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleLogic(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting up resources directory for Slicer tests\nDESCRIPTION: This snippet sets the `resources_dir` variable to the directory where test resources will be stored, and then creates that directory using CMake's `file(MAKE_DIRECTORY)` command. This ensures that the directory exists before subsequent steps attempt to write files into it.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/Testing/Cxx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n  set(resources_dir ${CMAKE_CURRENT_BINARY_DIR}/Resources)\n  file(MAKE_DIRECTORY ${resources_dir})\n```\n\n----------------------------------------\n\nTITLE: Query/Retrieve with ctkDICOMVisualBrowser - Python\nDESCRIPTION: This code snippet demonstrates querying and retrieving DICOM data using the (experimental) ctkDICOMVisualBrowser in Slicer. It adds a new DICOM server with specified connection parameters, sets the filters for the query (e.g., PatientID, Date), and then initiates the query at the patient level. Note:  Requires `ctk` and `qt`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/dicom.md#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# Get visual browser instance\nvisualBrowser = slicer.modules.dicom.widgetRepresentation().self().browserWidget.dicomVisualBrowser\ndicomDatabase = visualBrowser.dicomDatabase()\n\n# Disable query/retrieve for all existing servers\nfor index in range (0, visualBrowser.serversCount()):\n  server = visualBrowser.server(index)\n  server.queryRetrieveEnabled = False\n\n# Add a new DICOM server\nserver = ctk.ctkDICOMServer()\nserver.connectionName = \"test\"\nserver.callingAETitle = \"SLICER\"\nserver.calledAETitle = \"ANYAE\"\nserver.host = \"dicomserver.co.uk\"\nserver.port = 104\nserver.retrieveProtocol = ctk.ctkDICOMServer.CGET\n\nif visualBrowser.addServer(server) == -1:\n  raise RuntimeError(\"Failed to add server\")\n\n# Set the filters for the query\nvisualBrowser.filteringPatientID = \"PAT020\"\n#visualBrowser.filteringPatientName = \"Name\"\n#visualBrowser.filteringStudyDescription = \"Study description\"\nvisualBrowser.filteringDate = ctk.ctkDICOMPatientItemWidget.LastYear\n#Date options:\n#Any,\n#Today,\n#Yesterday,\n#LastWeek,\n#LastMonth,\n#LastYear\n#visualBrowser.filteringSeriesDescription = \"Series description\"\n#visualBrowser.filteringModalities = [\"CT\", \"MR\"]\n\n# Run patient query.\n# NOTE: this will automatically also start query/retrieve jobs at study and series levels\nvisualBrowser.onQueryRetrieveOptionToggled(True)\nvisualBrowser.onQueryPatients()\n```\n\n----------------------------------------\n\nTITLE: Build Scripted Module (CMake)\nDESCRIPTION: Uses the `slicerMacroBuildScriptedModule` macro to build the module.  It specifies the module name, scripts, and resources. The `WITH_SUBDIR` option indicates that the module's source code is located in a subdirectory.  This macro is responsible for generating the necessary build targets and dependencies to create a Slicer module from the Python scripts and resources specified.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOMLib/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nslicerMacroBuildScriptedModule(\n  NAME ${MODULE_NAME}\n  SCRIPTS ${MODULE_PYTHON_SCRIPTS}\n  RESOURCES ${MODULE_PYTHON_RESOURCES}\n  WITH_SUBDIR\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Export Directive for Widgets\nDESCRIPTION: This snippet defines the export directive for the module widgets, which is used to control the visibility of classes and functions when the module is used as a library. This ensures proper linking and access to the widget's API. The MODULE_NAME_UPPER variable is transformed into upper case.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/Widgets/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_EXPORT_DIRECTIVE \"Q_SLICER_MODULE_${MODULE_NAME_UPPER}_WIDGETS_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Installing Slicer dependencies on Ubuntu 21.10\nDESCRIPTION: This command updates the package list and installs the required development tools and support libraries for building Slicer on Ubuntu 21.10 (Impish Indri) using `apt`. It includes packages such as `git`, `build-essential`, `cmake`, CMake GUI tools, and Qt5 development libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/linux.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nsudo apt update && sudo apt install git build-essential \\\n  cmake cmake-curses-gui cmake-qt-gui \\\n  libqt5x11extras5-dev qtmultimedia5-dev libqt5svg5-dev qtwebengine5-dev libqt5xmlpatterns5-dev qttools5-dev qtbase5-private-dev \\\n  libxt-dev libssl-dev\n```\n\n----------------------------------------\n\nTITLE: Setting CLP and Data Management Target - CMake\nDESCRIPTION: Sets the module name (${CLP}) and defines the data management target (${SEM_DATA_MANAGEMENT_TARGET}). If the data management target is not defined, it defaults to the module name plus 'Data'.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MultiplyScalarVolumes/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(CLP ${MODULE_NAME})\n\nif(NOT DEFINED SEM_DATA_MANAGEMENT_TARGET)\n  set(SEM_DATA_MANAGEMENT_TARGET ${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Scripted Module\nDESCRIPTION: Uses the slicerMacroBuildScriptedModule macro to build the scripted module. This macro takes the module's name, scripts, and resources as input, and also enables generic tests for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/CropVolumeSequence/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroBuildScriptedModule(\n  NAME ${MODULE_NAME}\n  SCRIPTS ${MODULE_PYTHON_SCRIPTS}\n  RESOURCES ${MODULE_PYTHON_RESOURCES}\n  WITH_GENERIC_TESTS\n  )\n```\n\n----------------------------------------\n\nTITLE: Include CTK CMake Functions and Macros CMake\nDESCRIPTION: Includes CTK functions and macros, such as `ctkFunctionAddExecutableUtf8`.  These provide commonly used build functionalities.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_65\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(ctkFunctionAddExecutableUtf8)\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name\nDESCRIPTION: This snippet sets the module name using the `set` command. The module name is stored in the variable `KIT` and is derived from the project name.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/Logic/Testing/Cxx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Defining Build Options\nDESCRIPTION: Defines CMake options for controlling the build process. These include BUILD_SHARED_LIBS for building shared libraries and MRML_BUILD_QT_DESIGNER_PLUGINS for building Qt designer plugins.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED BUILD_SHARED_LIBS)\n  option(BUILD_SHARED_LIBS \"Build with shared libraries.\" ON)\nendif()\n\nif(NOT DEFINED MRML_BUILD_QT_DESIGNER_PLUGINS)\n  option(MRML_BUILD_QT_DESIGNER_PLUGINS \"Build Qt designer plugins.\" ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Module Widgets - CMake\nDESCRIPTION: Uses the custom CMake macro `SlicerMacroBuildModuleWidgets` to build the module's widgets. This macro handles the compilation, linking, and installation of the widgets component, utilizing variables defined in the previous steps.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Widgets/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nSlicerMacroBuildModuleWidgets(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  UI_SRCS ${${KIT}_UI_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  RESOURCES ${${KIT}_RESOURCES}\n  WRAP_PYTHONQT\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries (CMake)\nDESCRIPTION: Specifies the target libraries that the module depends on. These libraries will be linked with the module during the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Annotations/Logic/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  vtkSlicerAnnotationsModuleMRML\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel Package\nDESCRIPTION: Finds the SlicerExecutionModel package, which provides necessary infrastructure for Slicer modules. It ensures the package is required for the build to proceed and includes its use file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/SimpleRegionGrowingSegmentation/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Access DICOMweb Study\nDESCRIPTION: Accesses a DICOMweb server to download a requested study, add it to Slicer's DICOM database, and load it into the scene. Requires a JSON body with `dicomWEBPrefix`, `dicomWEBStore`, `studyUID`, and `accessToken` properties.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/modules/webserver.md#_snippet_11\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /accessDICOMwebStudy\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation with Sphinx\nDESCRIPTION: This snippet creates a custom target named `SlicerWizard-doc` that uses the Sphinx build executable to generate the documentation. The command passes version information (`-Dversion` and `-Dwikidoc_version`) to Sphinx.  The `add_dependencies` command ensures that the `doc` target depends on the successful completion of `SlicerWizard-doc`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Scripts/SlicerWizard/doc/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(SlicerWizard-doc\n  COMMAND \"${CMAKE_COMMAND}\" -E make_directory \"${docdir}\"\n  COMMAND \"${SPHINX_BUILD_EXECUTABLE}\"\n          \"-Dversion=${doc_version}\"\n          \"-Dwikidoc_version=${wiki_version}\"\n          \"${CMAKE_CURRENT_SOURCE_DIR}\"\n          \"${docdir}\"\n  )\nadd_dependencies(doc SlicerWizard-doc)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Specifies the include directories required to build the module. This includes the module's Logic directory and the corresponding binary output directory. This allows the compiler to find necessary header files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Cameras/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_INCLUDE_DIRECTORIES\n  ${CMAKE_CURRENT_SOURCE_DIR}/Logic\n  ${CMAKE_CURRENT_BINARY_DIR}/Logic\n  )\n```\n\n----------------------------------------\n\nTITLE: Include Directories Definition\nDESCRIPTION: Sets the include directories needed to compile the module's logic. It includes directories from other Slicer modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/Logic/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSlicerSegmentationsModuleMRML_INCLUDE_DIRS}\n  ${vtkSlicerTerminologiesModuleLogic_INCLUDE_DIRS}\n  ${vtkSlicerMarkupsModuleMRML_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Add Testing Subdirectory - CMake\nDESCRIPTION: Conditionally adds the Testing subdirectory if the BUILD_TESTING variable is enabled. This allows for building and running unit tests for the Transforms module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name\nDESCRIPTION: This snippet sets the MODULE_NAME variable to CreateDICOMSeries, which likely serves as an identifier for the module throughout the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CreateDICOMSeries/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_NAME CreateDICOMSeries)\n```\n\n----------------------------------------\n\nTITLE: Set Module UI Source Files - CMake\nDESCRIPTION: Defines the UI files for the Transforms module. These files are created using Qt Designer and describe the user interface of the module's widgets.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_UI_SRCS\n  Resources/UI/qSlicer${MODULE_NAME}ModuleWidget.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Add External Data Target in CMake\nDESCRIPTION: This snippet checks if the `SEM_DATA_MANAGEMENT_TARGET` is equal to `${CLP}Data`. If true, it adds an external data target named `${CLP}Data` using `ExternalData_add_target`. This is likely for managing external data dependencies for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/AddScalarVolumes/Testing/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Folder Property\nDESCRIPTION: Sets the folder property for the library target, which helps organize the project in IDEs. It uses the `${PROJECT_NAME}_FOLDER` variable to determine the folder name.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkSegmentationCore/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_FOLDER)\n  set(${PROJECT_NAME}_FOLDER ${PROJECT_NAME})\nendif()\nif(NOT \"${${PROJECT_NAME}_FOLDER}\" STREQUAL \"\")\n  set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER ${${PROJECT_NAME}_FOLDER})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries (CMake)\nDESCRIPTION: This snippet specifies the target libraries that the VTK widgets module depends on. These libraries provide the functionality needed by the widgets, such as MRML interaction and other module-specific features.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/LoadableCustomMarkups/VTKWidgets/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleMRML\n  vtkSlicerMarkupsModuleVTKWidgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory\nDESCRIPTION: Conditionally adds the Testing subdirectory if the BUILD_TESTING option is enabled. This allows the inclusion of unit tests for the Volumes module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories\nDESCRIPTION: Adds the Logic and Widgets subdirectories to the build process, allowing for modular organization of the module's components. These subdirectories likely contain source code and CMakeLists.txt files for building the respective logic and widget parts of the Units module. `add_subdirectory` is a core CMake command for incorporating external directories into the build.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Units/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Logic)\nadd_subdirectory(Widgets)\n```\n\n----------------------------------------\n\nTITLE: Building Application Library CMake\nDESCRIPTION: This snippet uses the `slicerMacroBuildAppLibrary` macro to build the application library. It configures the library with the given name, application name, description, export directive, folder, source files, moc files, UI files, and resources.\nSOURCE: https://github.com/slicer/slicer/blob/main/Applications/SlicerApp/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroBuildAppLibrary(\n  NAME ${APPLIB_NAME}\n  APPLICATION_NAME ${SlicerApp_APPLICATION_NAME}\n  DESCRIPTION_SUMMARY ${SlicerApp_DESCRIPTION_SUMMARY}\n  DESCRIPTION_FILE ${SlicerApp_DESCRIPTION_FILE}\n  EXPORT_DIRECTIVE \"Q_SLICER_APP_EXPORT\"\n  FOLDER ${${PROJECT_NAME}_FOLDER}\n  SRCS ${APPLIB_SRCS}\n  MOC_SRCS ${APPLIB_MOC_SRCS}\n  UI_SRCS ${APPLIB_UI_SRCS}\n  RESOURCES ${APPLIB_RESOURCES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Including SlicerCPack CMake module\nDESCRIPTION: This CMake code snippet includes the `SlicerCPack.cmake` module, located within the source directory. The module likely configures CPack settings used for creating installers and packages for Slicer.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMake/LastConfigureStep/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${Slicer_SOURCE_DIR}/CMake/SlicerCPack.cmake)\n```\n\n----------------------------------------\n\nTITLE: Install PNG files with CMake\nDESCRIPTION: This CMake snippet finds all PNG files (`.png`) in the current source directory and installs them into the `${Slicer_INSTALL_SHARE_DIR}/Resources` directory. It first configures the files to copy them to the binary directory. The files are designated as part of the 'Development' component. This section is skipped if `Slicer_INSTALL_NO_DEVELOPMENT` is set.\nSOURCE: https://github.com/slicer/slicer/blob/main/Resources/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT Slicer_INSTALL_NO_DEVELOPMENT)\n  file(GLOB PNGFILES RELATIVE \"${CMAKE_CURRENT_SOURCE_DIR}\" \"*.png\")\n  foreach(pngfile ${PNGFILES})\n    configure_file(\n      ${CMAKE_CURRENT_SOURCE_DIR}/${pngfile}\n      \"${CMAKE_BINARY_DIR}/${Slicer_SHARE_DIR}/Resources/${pngfile}\"\n      COPYONLY\n      )\n  endforeach()\n\n  install(\n    FILES ${PNGFILES}\n    DESTINATION ${Slicer_INSTALL_SHARE_DIR}/Resources\n    COMPONENT Development\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories CMake\nDESCRIPTION: Adds subdirectories to the build process. Each subdirectory likely contains its own CMakeLists.txt file defining further build steps for specific parts of the module. These include MRML, VTKWidgets, Logic, MRMLDM, SubjectHierarchyPlugins and Widgets.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(MRML)\nadd_subdirectory(VTKWidgets)\nadd_subdirectory(Logic)\nadd_subdirectory(MRMLDM)\nadd_subdirectory(SubjectHierarchyPlugins)\nadd_subdirectory(Widgets)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Options (CMake)\nDESCRIPTION: This code snippet demonstrates setting various build options for Slicer using CMake's `option` command. Options include building with DICOM support, diffusion support, internationalization, usage logging, Qt WebEngine, Qt Loadable Modules, CLI support, extension manager, and application update support.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\noption(Slicer_BUILD_DICOM_SUPPORT \"Build Slicer with DICOM support\" ON)\nmark_as_superbuild(Slicer_BUILD_DICOM_SUPPORT)\n\noption(Slicer_BUILD_DIFFUSION_SUPPORT \"Build Slicer with diffusion (DWI, DTI) support\" ON)\nmark_as_superbuild(Slicer_BUILD_DIFFUSION_SUPPORT)\n\noption(Slicer_BUILD_I18N_SUPPORT \"Build Slicer with Internationalization support\" ON)\nmark_as_superbuild(Slicer_BUILD_I18N_SUPPORT)\n\noption(Slicer_BUILD_USAGE_LOGGING_SUPPORT \"Build Slicer with support for software usage logging\" ON)\nmark_as_superbuild(Slicer_BUILD_USAGE_LOGGING_SUPPORT)\n\noption(Slicer_BUILD_WEBENGINE_SUPPORT \"Build Slicer with Qt WebEngine support\" ON)\nmark_as_superbuild(Slicer_BUILD_WEBENGINE_SUPPORT)\n\noption(Slicer_BUILD_QTLOADABLEMODULES \"Build Slicer Qt Loadable Modules\" ON)\nmark_as_advanced(Slicer_BUILD_QTLOADABLEMODULES)\nmark_as_superbuild(Slicer_BUILD_QTLOADABLEMODULES)\n\noption(Slicer_BUILD_EXTENSIONMANAGER_SUPPORT \"Build Slicer extensions manager\" ON)\nmark_as_superbuild(Slicer_BUILD_EXTENSIONMANAGER_SUPPORT)\n\noption(Slicer_BUILD_APPLICATIONUPDATE_SUPPORT \"Build Slicer with application update support\" ON)\nmark_as_superbuild(Slicer_BUILD_APPLICATIONUPDATE_SUPPORT)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries in CMake\nDESCRIPTION: Specifies the libraries that the project depends on.  These libraries will be linked with the project when it is built. Qt libraries are transitively included, explicitly listing qSlicerBaseQTGUI as a dependency.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Core/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT_target_libraries\n  # ${QT_LIBRARIES} # Not needed: All dependencies are transitively satisfied by other targets\n  qSlicerBaseQTGUI\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Executable and Linking Libraries\nDESCRIPTION: Adds an executable target named ${CLP}Test. Links the target to the module library ${CLP}Lib and other necessary ITK and Slicer libraries. Sets target properties, including labels and folder.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MergeModels/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nctk_add_executable_utf8(${CLP}Test ${CLP}Test.cxx)\nadd_dependencies(${CLP}Test ${CLP})\ntarget_link_libraries(${CLP}Test ${CLP}Lib ${ITK_LIBRARIES} ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES})\nset_target_properties(${CLP}Test PROPERTIES LABELS ${CLP})\nset_target_properties(${CLP}Test PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Target Libraries Configuration\nDESCRIPTION: Specifies the libraries that the module widgets depend on. Here it depends on the logic part of the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/Loadable/Widgets/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name in CMake\nDESCRIPTION: Sets the KIT variable to the name of the module, which is qSlicer${MODULE_NAME}Module. This variable is later used to refer to the module in other CMake commands.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/Testing/Cxx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT qSlicer${MODULE_NAME}Module)\n```\n\n----------------------------------------\n\nTITLE: Determining Endian Type\nDESCRIPTION: This code snippet determines the endianness of the target architecture. It includes the `TestBigEndian` module and calls the `test_big_endian` function to set the `CMAKE_WORDS_BIGENDIAN` variable, which indicates whether the system is big-endian.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(TestBigEndian)\ntest_big_endian(CMAKE_WORDS_BIGENDIAN)\n```\n\n----------------------------------------\n\nTITLE: Including Slicer Use File\nDESCRIPTION: Includes the Slicer use file, which provides access to Slicer's CMake functions and variables. `${Slicer_USE_FILE}` variable contains the path to the Slicer use file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Extensions/Default/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${Slicer_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Set Module Name in CMake\nDESCRIPTION: Sets the module name to 'SelfTests' using the CMake `set` command. This variable is later used in the `slicerMacroBuildScriptedModule` macro.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/SelfTests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_NAME SelfTests)\n```\n\n----------------------------------------\n\nTITLE: Setting Python Scripts Variable in CMake\nDESCRIPTION: Defines a CMake variable `${MODULE_NAME}SubjectHierarchyPlugins_PYTHON_SCRIPTS` containing a list of Python scripts associated with the SubjectHierarchyPlugins module. This list is used later in the script to compile and install these scripts.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/SegmentEditor/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(${MODULE_NAME}SubjectHierarchyPlugins_PYTHON_SCRIPTS\n  ${MODULE_NAME}SubjectHierarchyPlugin\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Wizard Launcher Scripts in CMake\nDESCRIPTION: This CMake code snippet configures the slicerExtensionWizard.sh.in and slicerExtensionWizard-install.sh.in scripts using the configure_file command. The @ONLY option ensures that only variables defined in CMake are expanded in the input files. The slicerExtensionWizard-install.sh script is then installed to the Slicer installation bin directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Scripts/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n  # Configure and Extension Wizard launcher scripts\n  configure_file(\n    slicerExtensionWizard.sh.in\n    ${Slicer_BINARY_DIR}/bin/slicerExtensionWizard @ONLY\n    )\n\n  configure_file(\n    slicerExtensionWizard-install.sh.in\n    ${CMAKE_CURRENT_BINARY_DIR}/slicerExtensionWizard-install.sh @ONLY\n    )\n\n  install(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/slicerExtensionWizard-install.sh\n    DESTINATION ${Slicer_INSTALL_BIN_DIR}\n    COMPONENT Runtime\n    RENAME slicerExtensionWizard\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet defines a list of include directories that are used when compiling the SlicerBaseLogic library. The directories include source and binary directories of the current project, as well as include directories for MRMLCore, MRMLLogic, vtkTeem, RemoteIO, and LibArchive.  Conditional inclusion of MRMLCLI and Python is also managed.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/Logic/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(include_dirs\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  ${CMAKE_CURRENT_BINARY_DIR}\n  ${MRMLCore_INCLUDE_DIRS}\n  ${MRMLLogic_INCLUDE_DIRS}\n  ${vtkTeem_INCLUDE_DIRS}\n  ${RemoteIO_INCLUDE_DIRS}\n  ${LibArchive_INCLUDE_DIR}\n  )\n\nif(Slicer_BUILD_CLI_SUPPORT)\n  list(APPEND include_dirs\n    ${MRMLCLI_INCLUDE_DIRS}\n    ${ModuleDescriptionParser_INCLUDE_DIRS}\n    )\nendif()\n\nif(Slicer_USE_PYTHONQT)\n  list(APPEND include_dirs\n    ${PYTHON_INCLUDE_DIR}\n    )\nendif()\n\ninclude_directories(${include_dirs})\n```\n\n----------------------------------------\n\nTITLE: Adding simple tests using simple_test macro\nDESCRIPTION: This snippet adds individual tests using a custom CMake macro `simple_test`.  Each test is added by specifying its name, and optionally a temporary directory.  Test labels are set to LIBRARY_NAME. This macro likely creates a test target and registers it with the CTest test runner.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/Testing/Cxx/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\n  set(TEMP \"${CMAKE_BINARY_DIR}/Testing/Temporary\")\n\n  simple_test( qSlicerCoreApplicationTest1)\n  set_property(TEST qSlicerCoreApplicationTest1 PROPERTY LABELS ${LIBRARY_NAME})\n  simple_test( qSlicerCoreIOManagerTest1 ${TEMP})\n  set_property(TEST qSlicerCoreIOManagerTest1 PROPERTY LABELS ${LIBRARY_NAME})\n  simple_test( qSlicerAbstractCoreModuleTest1 )\n  simple_test( qSlicerLoadableModuleFactoryTest1 )\n  simple_test( qSlicerUtilsTest1 )\n\n  if(Slicer_BUILD_EXTENSIONMANAGER_SUPPORT)\n    simple_test( qSlicerExtensionsManagerModelTest )\n    simple_test( qSlicerPersistentCookieJarTest )\n  endif()\n\n  if(Slicer_BUILD_APPLICATIONUPDATE_SUPPORT)\n    simple_test( qSlicerApplicationUpdateManagerTest )\n  endif()\n\n  if(Slicer_USE_PYTHONQT)\n    simple_test( qSlicerCorePythonManagerWithoutApplicationTest )\n    simple_test( qSlicerScriptedUtilsTest1 )\n  endif()\n\n  if(Slicer_USE_PYTHONQT_WITH_OPENSSL)\n    simple_test( qSlicerSslTest )\n  endif()\n```\n\n----------------------------------------\n\nTITLE: CMake: Removing Slicer_SOURCE_DIR Check\nDESCRIPTION: This snippet demonstrates removing the `if(NOT Slicer_SOURCE_DIR)` check when using `find_package(Slicer)` in an extension's CMakeLists.txt. This change simplifies the code and makes it easier to maintain by removing unnecessary conditional logic. It assumes that the Slicer environment is always set when building the extension.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/extensions.md#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 2.8.9)\n\nif(NOT Slicer_SOURCE_DIR)\n  find_package(Slicer COMPONENTS ConfigurePrerequisites)\nendif()\n\nif(NOT Slicer_SOURCE_DIR)\n  set(EXTENSION_NAME EmptyExtensionTemplate)\n  set(EXTENSION_HOMEPAGE \"https://www.slicer.org/wiki/Documentation/Nightly/Extensions/EmptyExtensionTemplate\")\n  set(EXTENSION_CONTRIBUTORS \"Jean-Christophe Fillion-Robin (Kitware)\")\n  set(EXTENSION_DESCRIPTION \"This is an example of extension bundling N module(s)\")\n  set(EXTENSION_ICONURL \"http://viewvc.slicer.org/viewvc.cgi/Slicer4/trunk/Extensions/Testing/EmptyExtensionTemplate/EmptyExtensionTemplate.png?revision=21746&view=co\")\n  set(EXTENSION_SCREENSHOTURLS \"https://www.slicer.org/w/img_auth.php/4/42/Slicer-r19441-EmptyExtensionTemplate-screenshot.png\")\nendif()\n\nif(NOT Slicer_SOURCE_DIR)\n  find_package(Slicer REQUIRED)\n  include(${Slicer_USE_FILE})\nendif()\n\nadd_subdirectory(ModuleA)\n\nif(NOT Slicer_SOURCE_DIR)\n  include(${Slicer_EXTENSION_CPACK})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding ITK Package with Components\nDESCRIPTION: This snippet first defines the ITK components required by the project. Then, it uses `find_package` to locate the ITK package, requiring version 4.6 or higher and specifying the necessary components. Afterwards, it handles ITK factory registration based on the ITK version. Finally, it appends ITK libraries and include directories, and includes the ITK use file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Core/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKCommon\n  ITKIOImageBase\n  ITKIOSpatialObjects\n  ITKIOTransformBase\n  ITKMesh\n  ITKTransform\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\nlist(APPEND ITK_LIBRARIES ITKFactoryRegistration)\nlist(APPEND ITK_INCLUDE_DIRS ${ITKFactoryRegistration_INCLUDE_DIRS})\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Add and Configure Test Executable\nDESCRIPTION: This snippet adds a test executable named '${CLP}Test' using `ctk_add_executable_utf8`, links it to necessary libraries, and sets target properties like LABELS and FOLDER. It depends on `ctk_add_executable_utf8` function and Slicer's build environment.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GrayscaleFillHoleImageFilter/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nctk_add_executable_utf8(${CLP}Test ${CLP}Test.cxx)\ntarget_link_libraries(${CLP}Test ${CLP}Lib ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES})\nset_target_properties(${CLP}Test PROPERTIES LABELS ${CLP})\nset_target_properties(${CLP}Test PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties\nDESCRIPTION: This snippet sets target properties for the '${KIT}CxxTests' executable. It assigns the label '${KIT}' and sets the folder property to 'Core-Base', which helps organize the tests within the IDE.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/Logic/Testing/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(${KIT}CxxTests PROPERTIES LABELS ${KIT})\nset_target_properties(${KIT}CxxTests PROPERTIES FOLDER \"Core-Base\")\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files in CMake\nDESCRIPTION: Defines the source files (.cxx and .h) that make up the module. These source files include the module's main class, widget, and scene I/O functionalities.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Data/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_SRCS\n  qSlicer${MODULE_NAME}Module.cxx\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.cxx\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  qSlicerSceneIOOptionsWidget.cxx\n  qSlicerSceneIOOptionsWidget.h\n  qSlicerSceneReader.cxx\n  qSlicerSceneReader.h\n  qSlicerSceneWriter.cxx\n  qSlicerSceneWriter.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories in CMake\nDESCRIPTION: This snippet adds the MRML and Logic subdirectories to the build process. These subdirectories likely contain source code and CMakeLists.txt files for the corresponding MRML and Logic components of the Annotations module. No external dependencies are required.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Annotations/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(MRML)\nadd_subdirectory(Logic)\n```\n\n----------------------------------------\n\nTITLE: Including Slicer Macro Build Scripted Module (CMake)\nDESCRIPTION: Includes the CMake macro for building Slicer scripted modules. This macro provides a standardized way to build and configure scripted modules within the Slicer environment.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/Testing/Python/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(SlicerMacroBuildScriptedModule)\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Test for MRHeadResampled\nDESCRIPTION: This snippet uses `ExternalData_add_test` to create a test case named '${CLP}Test'. The test compares the output of the executable with a reference dataset. It specifies the command to execute, which includes the executable itself along with various command-line arguments. These arguments control the resampling process, including the reference volume, number of threads, transform matrix, interpolation method, window function, spline order, spacing, size, and direction matrix.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleScalarVectorDWIVolume/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(testname ${CLP}Test)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  --compare\n    DATA{${INPUT}/MRHeadResampled.nhdr,MRHeadResampled.raw.gz}\n    ${TEMP}/${testname}.nrrd\n  ModuleEntryPoint\n    --Reference DATA{${INPUT}/MRHeadResampled.nhdr,MRHeadResampled.raw.gz}\n    --number_of_thread 0\n    --transform_matrix 1,0,0,0,1,0,0,0,1,0,0,0\n    --transform rt\n    --interpolation linear\n    --window_function c\n    --spline_order 3\n    --spacing 0,0,0\n    --size 0,0,0\n    --direction_matrix 0,0,0,0,0,0,0,0,0\n    DATA{${INPUT}/MRHeadResampled.nhdr,MRHeadResampled.raw.gz}\n    ${TEMP}/${testname}.nrrd\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Setting UI Source Files in CMake\nDESCRIPTION: Defines the MODULE_UI_SRCS variable, listing the Qt Designer UI files that define the module's user interface. These files are compiled into C++ code during the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_UI_SRCS\n  Resources/UI/qSlicer${MODULE_NAME}ModuleWidget.ui\n  Resources/UI/qSlicer${MODULE_NAME}SettingsPanel.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Set Module Source Files - CMake\nDESCRIPTION: Defines the source files for the Transforms module, including CXX and header files. These files contain the main implementation of the module's functionality.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_SRCS\n  qSlicer${MODULE_NAME}Module.cxx\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.cxx\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  qSlicer${MODULE_NAME}Reader.cxx\n  qSlicer${MODULE_NAME}Reader.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining RGBA Color Values\nDESCRIPTION: This snippet defines a color using RGBA values (Red, Green, Blue, Alpha). Each number represents the intensity of each color component, ranging from 0 to 255. The alpha value controls the opacity of the color (255 is fully opaque).\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/Logic/Resources/ColorFiles/GenericColors.txt#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n0 0 0 0 0 0\n```\n\nLANGUAGE: txt\nCODE:\n```\n1 1 128 174 128 255\n```\n\nLANGUAGE: txt\nCODE:\n```\n2 2 241 214 145 255\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing Terminology Files\nDESCRIPTION: This snippet configures and installs JSON terminology files.  It copies the files from the Resources directory to the binary directory, then installs them to the appropriate destination for runtime use. Multiple configure_file and install commands are repeated for different files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Terminologies/Logic/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/../Resources/SegmentationCategoryTypeModifier-DICOM-Master.json\n  ${CMAKE_BINARY_DIR}/${Slicer_QTLOADABLEMODULES_SHARE_DIR}/${MODULE_NAME}/SegmentationCategoryTypeModifier-DICOM-Master.term.json\n  COPYONLY)\ninstall(\n  FILES ${CMAKE_BINARY_DIR}/${Slicer_QTLOADABLEMODULES_SHARE_DIR}/${MODULE_NAME}/SegmentationCategoryTypeModifier-DICOM-Master.term.json\n  DESTINATION ${Slicer_INSTALL_QTLOADABLEMODULES_SHARE_DIR}/${MODULE_NAME} COMPONENT Runtime)\n\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/../Resources/SegmentationCategoryTypeModifier-SlicerGeneralAnatomy.json\n  ${CMAKE_BINARY_DIR}/${Slicer_QTLOADABLEMODULES_SHARE_DIR}/${MODULE_NAME}/SegmentationCategoryTypeModifier-SlicerGeneralAnatomy.term.json\n  COPYONLY)\ninstall(\n  FILES ${CMAKE_BINARY_DIR}/${Slicer_QTLOADABLEMODULES_SHARE_DIR}/${MODULE_NAME}/SegmentationCategoryTypeModifier-SlicerGeneralAnatomy.term.json\n  DESTINATION ${Slicer_INSTALL_QTLOADABLEMODULES_SHARE_DIR}/${MODULE_NAME} COMPONENT Runtime)\n\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/../Resources/AnatomicRegionAndModifier-DICOM-Master.json\n  ${CMAKE_BINARY_DIR}/${Slicer_QTLOADABLEMODULES_SHARE_DIR}/${MODULE_NAME}/AnatomicRegionAndModifier-DICOM-Master.term.json\n  COPYONLY)\ninstall(\n  FILES ${CMAKE_BINARY_DIR}/${Slicer_QTLOADABLEMODULES_SHARE_DIR}/${MODULE_NAME}/AnatomicRegionAndModifier-DICOM-Master.term.json\n  DESTINATION ${Slicer_INSTALL_QTLOADABLEMODULES_SHARE_DIR}/${MODULE_NAME} COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Python Wrapping Configuration CMake\nDESCRIPTION: Configures Python wrapping using the vtkMacroKitPythonWrap macro. Includes the Python subdirectory. Configures export target and folder properties for the Python wrapped library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/DisplayableManager/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nif(MRMLDisplayableManager_USE_PYTHON)\n  include(vtkMacroKitPythonWrap)\n\n  set(_python_wrapped_libraries)\n\n  vtkMacroKitPythonWrap(\n    KIT_NAME ${lib_name}\n    KIT_SRCS ${KIT_SRCS}\n    KIT_PYTHON_LIBRARIES ${_python_wrapped_libraries}\n    KIT_INSTALL_BIN_DIR ${${PROJECT_NAME}_INSTALL_BIN_DIR}\n    KIT_INSTALL_LIB_DIR ${${PROJECT_NAME}_INSTALL_LIB_DIR}\n    )\n  # Export target\n  export(TARGETS ${lib_name}Python APPEND FILE ${${PROJECT_NAME}_EXPORT_FILE})\n  # Folder\n  if(NOT \"${${PROJECT_NAME}_FOLDER}\" STREQUAL \"\")\n    set_target_properties(${lib_name}Python PROPERTIES FOLDER ${${PROJECT_NAME}_FOLDER})\n    if(TARGET ${lib_name}Hierarchy)\n      set_target_properties(${lib_name}Hierarchy PROPERTIES FOLDER ${${PROJECT_NAME}_FOLDER})\n    endif()\n  endif()\n\n  add_subdirectory(Python)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake to use ccache compilers\nDESCRIPTION: This snippet shows how to configure the Slicer build using CMake to use the c++ and cc compilers which are symbolic links to `ccache`. This allows `ccache` to be used for caching compilations, speeding up subsequent builds.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/linux.md#_snippet_15\n\nLANGUAGE: console\nCODE:\n```\ncmake \\\n  -DCMAKE_BUILD_TYPE:STRING=Release \\\n  -DCMAKE_CXX_COMPILER:STRING=$HOME/.local/bin/c++ \\\n  -DCMAKE_C_COMPILER:STRING=$HOME/.local/bin/cc \\\n  ../Slicer\n```\n\n----------------------------------------\n\nTITLE: Setting Meta Object Compiler (MOC) Sources CMake\nDESCRIPTION: Identifies the header files that require processing by Qt's Meta Object Compiler (MOC). MOC generates code for Qt's signal and slot mechanism.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_MOC_SRCS\n  qSlicerSubjectHierarchy${MODULE_NAME}Plugin.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Simple Tests (CMake)\nDESCRIPTION: This snippet defines a series of simple tests using the `simple_test` macro. Each line creates a test that runs the specified executable, potentially passing arguments for custom testing scenarios including data input. This macro defines and registers individual tests, some with data arguments, that will be run during the testing phase.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/Testing/Cxx/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nsimple_test(qMRMLVolumePropertyNodeWidgetTest1)\nsimple_test(qSlicerPresetComboBoxTest)\nsimple_test(qSlicer${MODULE_NAME}ModuleWidgetTest1)\nsimple_test(qSlicer${MODULE_NAME}ModuleWidgetTest2 DATA{${MRML_CORE_INPUT}/fixed.nrrd})\nsimple_test(vtkMRMLShaderPropertyStorageNodeTest1 ${TEMP})\nsimple_test(vtkMRMLVolumePropertyNodeTest1 ${INPUT}/volRender.mrml)\nsimple_test(vtkMRMLVolumePropertyStorageNodeTest1)\nsimple_test(vtkMRMLVolumeRenderingDisplayableManagerTest1 ${CMAKE_BINARY_DIR}/${Slicer_QTLOADABLEMODULES_SHARE_DIR}/VolumeRendering)\nsimple_test(vtkMRMLVolumeRenderingMultiVolumeTest)\n```\n\n----------------------------------------\n\nTITLE: Setting VTK Libraries - CMake\nDESCRIPTION: Sets the VTK libraries required for this module. Includes VTK::RenderingVolume and VTK::RenderingVolumeOpenGL2.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/MRMLDM/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_VTK_LIBRARIES\n  VTK::RenderingVolume\n  VTK::RenderingVolumeOpenGL2\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring User Documentation with Doxygen\nDESCRIPTION: This snippet configures Doxygen for generating user documentation. It sets variables for the Doxyfile path, the output tarball, whether user documentation is enabled, and exclusion patterns. It then configures the Doxyfile, creates a custom target to run Doxygen, and defines dependencies.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Doxygen/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif( DOXYGEN_FOUND )\n  if( DOXYGEN_DOT_FOUND )\n    #\n    # User documentation\n    #\n    set(userdoc_doxyfile ${CMAKE_CURRENT_BINARY_DIR}/UserDoxyfile.txt)\n    set(userdoc_tarball\n      ${DOCUMENTATION_ARCHIVES_OUTPUT_DIRECTORY}/Slicer-cpp.tar.gz\n      )\n\n    set( Slicer_USER_DOCUMENTATION \"NO\" )\n    set( Slicer_ADDITIONAL_EXCLUDE_PATTERN \"*_p.h\\  *Private.*\" )\n\n    configure_file(Doxyfile.txt.in ${userdoc_doxyfile})\n\n    # Generate doxygen documentation\n    add_custom_target(cpp-doc\n      COMMAND ${DOXYGEN_EXECUTABLE} ${userdoc_doxyfile}\n      WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n      )\n    add_dependencies(doc cpp-doc)\n\n    # Create documentation tarball\n    add_custom_target(cpp-doc-tarball-clean\n      COMMAND ${CMAKE_COMMAND} -E remove ${userdoc_tarball}\n      )\n\n    add_custom_target(cpp-doc-tarball\n      DEPENDS cpp-doc cpp-doc-tarball-clean\n      COMMAND ${CMAKE_COMMAND} -E tar cfz ${userdoc_tarball} html\n      WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n      )\n    add_dependencies(doc-tarballs cpp-doc-tarball)\n\n    set_target_properties(cpp-doc cpp-doc-tarball\n      PROPERTIES LABELS Documentation)\n\n    # Need to add EXCLUDE_FROM_DEFAULT_BUILD otherwise these targets would be built each time when build is started\n    # in the Visual Studio IDE (regardless of DOCUMENTATION_TARGET_IN_ALL setting).\n    set_target_properties(cpp-doc PROPERTIES EXCLUDE_FROM_DEFAULT_BUILD 1)\n    set_target_properties(cpp-doc-tarball-clean PROPERTIES EXCLUDE_FROM_DEFAULT_BUILD 1)\n    set_target_properties(cpp-doc-tarball PROPERTIES EXCLUDE_FROM_DEFAULT_BUILD 1)\n```\n\n----------------------------------------\n\nTITLE: File Includes Example\nDESCRIPTION: This example shows the preferred file layout for includes in Slicer.  Includes are grouped per library, sorted alphabetically within groups, and ordered from local to global (module, MRML, CTK, Qt, VTK, ITK, STL). Implementation files include the header file first.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/style_guide.md#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n // header\n // ...\n // end header\n\n #include \"qSlicerMyModule.h\"\n\n // MyModule includes\n #include \"qSlicerMyModuleWidget.h\"\n #include \"vtkSlicerMyModuleLogic.h\"\n\n // MRML includes\n #include \"vtkMRMLScene.h\"\n\n // Qt includes\n #include <QDialog>\n\n // VTK includes\n #include <vtkSmartPointer.h>\n\n // STD includes\n #include <vector>\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel CMake\nDESCRIPTION: This snippet uses `find_package` to locate the SlicerExecutionModel package. It is marked as `REQUIRED`, meaning that the build will fail if the package is not found. The `${SlicerExecutionModel_USE_FILE}` is then included to set up the necessary variables.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/HistogramMatching/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Setting Module Include Directories\nDESCRIPTION: Specifies the include directories that the compiler should search for header files. This ensures that the compiler can find the necessary header files for the module and its dependencies, including those in MRML and Logic subdirectories.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/GeneralizedReformat/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_INCLUDE_DIRECTORIES\n  ${CMAKE_CURRENT_SOURCE_DIR}/MRML\n  ${CMAKE_CURRENT_BINARY_DIR}/MRML\n  ${CMAKE_CURRENT_SOURCE_DIR}/Logic\n  ${CMAKE_CURRENT_BINARY_DIR}/Logic\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name\nDESCRIPTION: Defines the module's name and its uppercase version for consistent use throughout the build process. This facilitates referencing the module within other CMake commands and variables.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME \"SubjectHierarchy\")\n\nstring(TOUPPER ${MODULE_NAME} MODULE_NAME_UPPER)\n```\n\n----------------------------------------\n\nTITLE: Building CLI using SEMMacroBuildCLI\nDESCRIPTION: Uses the SEMMacroBuildCLI macro to configure and build the command-line interface (CLI) for the ExtractSkeleton module. It defines the module's name, source files, target libraries, and include directories. This macro simplifies the process of creating a CLI application within the Slicer environment.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ExtractSkeleton/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  #LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/NAMICLogo.h\n  ADDITIONAL_SRCS\n    SkelGraph.h\n    SkelGraph.cxx\n    tilg_iso_3D.h\n    tilg_iso_3D.cxx\n    coordTypes.h\n    misc.h\n    misc.cxx\n  TARGET_LIBRARIES ${ITK_LIBRARIES}\n    MRMLCore\n    vtkSlicerMarkupsModuleMRML\n  INCLUDE_DIRECTORIES\n    ${MRMLCore_INCLUDE_DIRS}\n    ${vtkSlicerMarkupsModuleMRML_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Including Extension Configuration and Packaging\nDESCRIPTION: These CMake commands include files that generate configuration and packaging scripts for the extension. `Slicer_EXTENSION_GENERATE_CONFIG` includes configuration settings, and `Slicer_EXTENSION_CPACK` includes commands for generating installation packages.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/ScriptedLoadableExtensionTemplate/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${Slicer_EXTENSION_GENERATE_CONFIG})\ninclude(${Slicer_EXTENSION_CPACK})\n```\n\n----------------------------------------\n\nTITLE: Setting Module List - CMake\nDESCRIPTION: This snippet defines a list of Slicer modules. It initializes the `modules` variable with a set of core module names. This list is later iterated through to determine which modules should be included in the build.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(modules\n  CropVolumeSequence\n  DataProbe\n  ImportItkSnapLabel\n  PerformanceTests\n  SampleData\n  ScreenCapture\n  SegmentEditor\n  SegmentStatistics\n  SelfTests\n  VectorToScalarVolume\n  WebServer\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name and Export Directive - CMake\nDESCRIPTION: This code snippet sets the module name to \"Tables\" and defines the export directive using the module name in uppercase. The export directive is used to control symbol visibility when building shared libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_NAME Tables)\n\nstring(TOUPPER ${MODULE_NAME} MODULE_NAME_UPPER)\n\nset(MODULE_EXPORT_DIRECTIVE \"Q_SLICER_QTMODULES_${MODULE_NAME_UPPER}_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Handling Sphinx Not Found\nDESCRIPTION: This snippet provides a fallback mechanism if the Sphinx build executable is not found.  It prints a warning message indicating that Python documentation will not be created. This allows the build process to continue without halting, albeit without the documentation component.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Scripts/SlicerWizard/doc/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nelse()\n  message(WARNING \"Warning: sphinx-build not found:\"\n                  \" Python documentation will not be created\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Disabling MSVC Warnings (Windows)\nDESCRIPTION: Defines a compiler flag to disable deprecated CRT function warnings in Microsoft Visual C++ (MSVC) on Windows systems. This is a common practice to suppress specific warnings related to security features.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ExtractSkeleton/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n  add_definitions(-D_CRT_SECURE_NO_DEPRECATE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Module Target Libraries - CMake\nDESCRIPTION: Defines the target libraries that the Transforms module depends on. These libraries provide additional functionality and resources required by the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleMRMLDisplayableManager\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  qSlicer${MODULE_NAME}ModuleWidgets\n  qSlicer${MODULE_NAME}SubjectHierarchyPlugins\n  )\n```\n\n----------------------------------------\n\nTITLE: Module Logic Build Macro (CMake)\nDESCRIPTION: This snippet uses the `SlicerMacroBuildModuleLogic` macro to configure and build the module logic component. It passes the previously defined variables, such as name, export directive, include directories, source files, and target libraries, as arguments to the macro, which handles the actual build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/Loadable/Logic/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleLogic(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Qt Styles Plugin\nDESCRIPTION: This snippet uses the `ctkMacroBuildQtStylesPlugin` macro to build the Qt styles plugin. It passes in the plugin name, export directive, source files, header files for moc, and target libraries. This macro handles the details of compiling the source files, running moc, linking the libraries, and creating the plugin's shared library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTGUI/StylePlugins/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nctkMacroBuildQtStylesPlugin(\n  NAME ${PROJECT_NAME}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT}\n  FOLDER \"Core-Base\"\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding subdirectory for testing - CMake\nDESCRIPTION: This snippet conditionally adds the `Testing` subdirectory to the build process if the `BUILD_TESTING` option is enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/Widgets/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Module Export Directive\nDESCRIPTION: This snippet defines the export directive for the module, which is used when other modules depend on this module. It ensures proper symbol visibility when the module is built as a shared library. This directive is crucial for cross-module communication.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Plots/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_EXPORT_DIRECTIVE \"Q_SLICER_QTMODULES_${MODULE_NAME_UPPER}_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Source Files Configuration\nDESCRIPTION: Specifies the C++ source and header files for the module widgets, likely including the main widget class definition.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/Loadable/Widgets/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  qSlicer${MODULE_NAME}FooBarWidget.cxx\n  qSlicer${MODULE_NAME}FooBarWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation based on CLI Support\nDESCRIPTION: This CMake snippet conditionally includes additional source files and libraries based on whether Slicer's CLI support is enabled. If `Slicer_BUILD_CLI_SUPPORT` is true, it appends `vtkMRMLScalarVectorDWIVolumeResampler.cxx` and `vtkMRMLScalarVectorDWIVolumeResampler.h` to the source list, and `qSlicerBaseQTCLI` to the target libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/GeneralizedReformat/Logic/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_BUILD_CLI_SUPPORT)\n  list(APPEND ${KIT}_SRCS\n    vtkMRMLScalarVectorDWIVolumeResampler.cxx\n    vtkMRMLScalarVectorDWIVolumeResampler.h\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding ITK with Specific Components CMake\nDESCRIPTION: This snippet defines a list of ITK components required by the module and then uses `find_package` to locate ITK with those components. The minimum required version is 4.6. `${ITK_USE_FILE}` is included to provide access to ITK variables.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/HistogramMatching/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKIOImageBase\n  ITKImageIntensity\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Conditional Source File Inclusion (CMake)\nDESCRIPTION: This snippet demonstrates how to conditionally include source files based on CMake variables.  It checks for `Slicer_BUILD_EXTENSIONMANAGER_SUPPORT`, `Slicer_BUILD_WEBENGINE_SUPPORT`, `Slicer_BUILD_I18N_SUPPORT`, and `Slicer_USE_PYTHONQT` to include relevant source files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTGUI/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(Slicer_BUILD_EXTENSIONMANAGER_SUPPORT)\n  list(APPEND KIT_SRCS\n    qSlicerExtensionsLocalWidget.cxx\n    qSlicerExtensionsLocalWidget.h\n    qSlicerExtensionsManagerDialog.cxx\n    qSlicerExtensionsManagerDialog.h\n    qSlicerExtensionsManagerWidget.cxx\n    qSlicerExtensionsManagerWidget.h\n    qSlicerSettingsExtensionsPanel.cxx\n    qSlicerSettingsExtensionsPanel.h\n    )\n  if(Slicer_BUILD_WEBENGINE_SUPPORT)\n    list(APPEND KIT_SRCS\n      qSlicerExtensionsServerWidget.cxx\n      qSlicerExtensionsServerWidget.h\n      qSlicerExtensionsServerWidget_p.h\n      )\n  endif()\nendif()\n\nif(Slicer_BUILD_I18N_SUPPORT)\n  list(APPEND KIT_SRCS\n    qSlicerSettingsInternationalizationPanel.cxx\n    qSlicerSettingsInternationalizationPanel.h\n    )\nendif()\n\nif(Slicer_BUILD_WEBENGINE_SUPPORT)\n  list(APPEND KIT_SRCS\n    qSlicerWebPythonProxy.cxx\n    qSlicerWebPythonProxy.h\n    qSlicerWebDownloadWidget.cxx\n    qSlicerWebDownloadWidget.h\n    qSlicerWebWidget.cxx\n    qSlicerWebWidget.h\n    qSlicerWebWidget_p.h\n    )\nendif()\n\nif(Slicer_USE_PYTHONQT)\n  list(APPEND KIT_SRCS\n    qSlicerScriptedLoadableModuleFactory.cxx\n    qSlicerScriptedLoadableModuleFactory.h\n    qSlicerScriptedLoadableModuleWidget.cxx\n    qSlicerScriptedLoadableModuleWidget.h\n    qSlicerScriptedLoadableModule.cxx\n    qSlicerScriptedLoadableModule.h\n    qSlicerScriptedFileDialog.cxx\n    qSlicerScriptedFileDialog.h\n    )\nendif()\n\nif(Slicer_USE_PYTHONQT)\n  list(APPEND KIT_SRCS\n    qSlicerSettingsPythonPanel.cxx\n    qSlicerSettingsPythonPanel.h\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting MOC Source Files in CMake\nDESCRIPTION: This snippet defines the header files that need to be processed by the Meta-Object Compiler (MOC). MOC generates code that provides Qt's signal and slot mechanism.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/Loadable/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_MOC_SRCS\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding ITK CMake\nDESCRIPTION: This snippet configures and finds the ITK library (version 4.6 or later) along with the specific ITK components required by the module (ITKIOImageBase, ITKMathematicalMorphology). It sets flags to disable factory registration managers for certain ITK versions and then includes the ITK use file to make the ITK library available.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GrayscaleFillHoleImageFilter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKIOImageBase\n  ITKMathematicalMorphology\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory\nDESCRIPTION: Adds the 'Testing' subdirectory to the build process if the BUILD_TESTING variable is enabled. This allows for the inclusion of unit tests for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ModelToLabelMap/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Tests CMake\nDESCRIPTION: This snippet defines a series of simple tests using the `SIMPLE_TEST` macro. Each test corresponds to a specific class or functionality within the Markups module. Some tests take input files or temporary directories as arguments.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Testing/Cxx/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nSIMPLE_TEST( vtkMRMLMarkupsDisplayNodeTest1 )\nSIMPLE_TEST( vtkMRMLMarkupsFiducialNodeTest1 )\nSIMPLE_TEST( vtkMRMLMarkupsNodeTest1 )\nSIMPLE_TEST( vtkMRMLMarkupsNodeTest2 )\nSIMPLE_TEST( vtkMRMLMarkupsNodeTest3 )\nSIMPLE_TEST( vtkMRMLMarkupsNodeTest4 )\nSIMPLE_TEST( vtkMRMLMarkupsNodeTest5 )\nSIMPLE_TEST( vtkMRMLMarkupsNodeTest6 )\nSIMPLE_TEST( vtkMRMLMarkupsNodeEventsTest )\n\n# test legacy Slicer3 fcsv file\nSIMPLE_TEST( vtkMRMLMarkupsFiducialStorageNodeTest2 ${INPUT}/slicer3.fcsv )\n\n# test Slicer4 annotation acsv file\nSIMPLE_TEST( vtkMRMLMarkupsFiducialStorageNodeTest3 ${INPUT}/slicer4.acsv )\n\nSIMPLE_TEST( vtkMRMLMarkupsStorageNodeTest1 )\nSIMPLE_TEST( vtkMRMLMarkupsStorageNodeTest2 ${TEMP} )\n\n# logic tests\nSIMPLE_TEST( vtkSlicerMarkupsLogicTest1 )\nSIMPLE_TEST( vtkSlicerMarkupsLogicTest2 ${TEMP} )\nSIMPLE_TEST( vtkSlicerMarkupsLogicTest3 )\nSIMPLE_TEST( vtkSlicerMarkupsLogicTest4 )\n\n# test Slicer4 annotation fiducials in a mrml file\nif(_build_scene_views_module)\n  SIMPLE_TEST( vtkMarkupsAnnotationSceneTest ${INPUT}/AnnotationTest/AnnotationFiducialsTest.mrml )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding ITK dependency\nDESCRIPTION: This code snippet locates the ITK library and specifies required ITK components. It first sets the ITK components needed by ModuleDescriptionParser, then uses `find_package` to locate ITK version 4.6, including specified components. The `REQUIRED` keyword ensures the build fails if ITK is not found.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/CLI/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ${ModuleDescriptionParser_ITK_COMPONENTS}\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name\nDESCRIPTION: Sets the KIT variable to define the module name, which is used throughout the CMake configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/Testing/Cxx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT qSlicer${MODULE_NAME}Module)\n```\n\n----------------------------------------\n\nTITLE: Finding and linking PythonQt - CMake\nDESCRIPTION: This snippet finds the PythonQt package and links the necessary directories. It also includes CMake macros for wrapping PythonQt and compiling Python scripts. Enabling `MRMLWidgets_WRAP_PYTHON` indicates that qMRMLWidgets should have Python wrappers generated. It relies on `Slicer_USE_PYTHONQT` being enabled and PythonQt being installed.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_67\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_USE_PYTHONQT)\n  # Find PythonQt package so that PYTHONQT_USE_RELEASE_PYTHON_FALLBACK is defined\n  # See https://github.com/commontk/PythonQt/issues/7\n  # and https://github.com/commontk/PythonQt/issues/8\n  find_package(PythonQt REQUIRED)\n  link_directories(${PYTHONQT_INSTALL_DIR}/lib)\n  include(ctkMacroWrapPythonQt)\n  include(ctkMacroCompilePythonScript)\n\n  # Enable qMRMLWidgets python wrapping\n  set(MRMLWidgets_WRAP_PYTHON ON)\n\n  # See vtkAddon/CMake/vtkMacroKitPythonWrap.cmake\n  set(Slicer_VTK_WRAP_HIERARCHY_DIR ${Slicer_BINARY_DIR})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Module Name in CMake\nDESCRIPTION: This snippet sets the module name for the Slicer project using the `set` command in CMake.  The `${PROJECT_NAME}` variable is expanded to the name of the current CMake project, assigning it to the `KIT` variable. This variable can be used later to reference the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/Logic/Testing/Cxx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Set MOC Files\nDESCRIPTION: This snippet lists the header files that require processing by the Meta-Object Compiler (MOC). These headers contain Qt-specific macros like `Q_OBJECT`, enabling signals, slots, and other meta-object features.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Plots/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_MOC_SRCS\n  qSlicer${MODULE_NAME}ModuleWidgetsPlugin.h\n  qMRMLPlotSeriesPropertiesWidgetPlugin.h\n  qMRMLPlotChartPropertiesWidgetPlugin.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Loadable Module using slicerMacroBuildLoadableModule\nDESCRIPTION: Uses the `slicerMacroBuildLoadableModule` CMake macro to build the loadable module.  This macro encapsulates the common steps required to build a Slicer module, including setting up the build targets, dependencies, and installation rules. The `NO_INSTALL` option prevents the module from being installed, which is useful for testing modules that shouldn't be part of the final Slicer distribution.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/LoadableCustomMarkups/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroBuildLoadableModule(\n  NAME ${MODULE_NAME}\n  EXPORT_DIRECTIVE ${MODULE_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${MODULE_INCLUDE_DIRECTORIES}\n  SRCS ${MODULE_SRCS}\n  MOC_SRCS ${MODULE_MOC_SRCS}\n  TARGET_LIBRARIES ${MODULE_TARGET_LIBRARIES}\n  # Important: remove NO_INSTALL option below when this template is used for implementing a new module.\n  # Installation is disabled here because this template is used for testing custom markups in Slicer core\n  # and we don't want this testing module to appear in the Slicer installation package.\n  NO_INSTALL\n  )\n```\n\n----------------------------------------\n\nTITLE: CMake: Simplified Slicer Extension Configuration\nDESCRIPTION: This snippet illustrates a simplified CMake configuration for a Slicer extension, removing the `if(NOT Slicer_SOURCE_DIR)` checks. This assumes that the Slicer environment is properly set up. It directly uses `find_package(Slicer)` and other Slicer-related CMake commands.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/extensions.md#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 2.8.9)\n\nfind_package(Slicer COMPONENTS ConfigurePrerequisites)\n\nproject(EmptyExtensionTemplate)\n\nset(EXTENSION_HOMEPAGE \"https://www.slicer.org/wiki/Documentation/Nightly/Extensions/EmptyExtensionTemplate\")\nset(EXTENSION_CONTRIBUTORS \"Jean-Christophe Fillion-Robin (Kitware)\")\nset(EXTENSION_DESCRIPTION \"This is an example of empty extension\")\nset(EXTENSION_ICONURL \"http://viewvc.slicer.org/viewvc.cgi/Slicer4/trunk/Extensions/Testing/EmptyExtensionTemplate/EmptyExtensionTemplate.png?revision=21746&view=co\")\nset(EXTENSION_SCREENSHOTURLS \"https://www.slicer.org/w/img_auth.php/4/42/Slicer-r19441-EmptyExtensionTemplate-screenshot.png\")\n\nfind_package(Slicer REQUIRED)\ninclude(${Slicer_USE_FILE})\n\nadd_subdirectory(ModuleA)\n\ninclude(${Slicer_EXTENSION_CPACK})\n```\n\n----------------------------------------\n\nTITLE: Defining SCENE_TEST Function\nDESCRIPTION: This CMake function `SCENE_TEST` simplifies the creation of tests that rely on scene files.  It takes the test name and scene filename as input. It extracts external files to download, configures the scene file, and uses `simple_test` to create the test.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/Testing/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nfunction(SCENE_TEST TESTNAME SCENEFILENAME)\n  # Extract list of external files to download. Note that the ${_externalfiles} variable\n  # is only specified to trigger download of data files used in the scene, the arguments\n  # are NOT explicitly used in ${KIT}CxxTests test executable.\n  string(REPLACE \"|\" \";\" scenefilename_and_externalfiles ${SCENEFILENAME})\n  list(GET scenefilename_and_externalfiles 0 SCENEFILENAME)\n  list(LENGTH scenefilename_and_externalfiles _length)\n  if(_length EQUAL 2)\n    configure_file(\n      ${MRMLCore_SOURCE_DIR}/Testing/${SCENEFILENAME}\n      ${MRMLCore_BINARY_DIR}/Testing/${SCENEFILENAME}\n      COPYONLY\n      )\n    set(_scenefile ${MRMLCore_BINARY_DIR}/Testing/${SCENEFILENAME})\n    list(GET scenefilename_and_externalfiles 1 _externalfiles)\n  else()\n    set(_scenefile ${MRMLCore_SOURCE_DIR}/Testing/${SCENEFILENAME})\n    set(_externalfiles \"\")\n  endif()\n  simple_test(${TESTNAME}_${SCENEFILENAME} DRIVER_TESTNAME ${TESTNAME} ${_scenefile} ${_externalfiles})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Moving Volume Along Trajectory\nDESCRIPTION: This snippet demonstrates how to move a volume along a defined trajectory by updating a transform node and applying it to the volume. It uses a loop to iterate through x positions, calculates the y position as a sine function, and sets the transform matrix accordingly. The slicer.app.processEvents() ensures the visualization updates and time.sleep introduces a delay for visualization purposes.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/transforms.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n# Load sample volume\nimport SampleData\nsampleDataLogic = SampleData.SampleDataLogic()\nmrHead = sampleDataLogic.downloadMRHead()\n\n# Create transform and apply to sample volume\ntransformNode = slicer.vtkMRMLTransformNode()\nslicer.mrmlScene.AddNode(transformNode)\nmrHead.SetAndObserveTransformNodeID(transformNode.GetID())\n\n# How to move a volume along a trajectory using a transform:\nimport time\nimport math\ntransformMatrix = vtk.vtkMatrix4x4()\nfor xPos in range(-30,30):\n  transformMatrix.SetElement(0,3, xPos)\n  transformMatrix.SetElement(1,3, math.sin(xPos)*10)\n  transformNode.SetMatrixTransformToParent(transformMatrix)\n  slicer.app.processEvents()\n  time.sleep(0.02)\n# Note: for longer animations use qt.QTimer.singleShot(100, callbackFunction)\n# instead of a for loop.\n```\n\n----------------------------------------\n\nTITLE: Copy and Install Orientation Markers with CMake\nDESCRIPTION: This CMake snippet copies and installs orientation marker files (specifically `Human.vtp`) to the appropriate directory within the Slicer installation. It iterates through the list of marker filenames, configures the files for copying to the binary directory, and then installs them to the `OrientationMarkers` subdirectory within the share directory of the install prefix. The `configure_file` command with the `COPYONLY` option copies the files without modification. The `install` command places the files in the specified destination.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/Logic/Resources/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(orientation_markers_dir \"OrientationMarkers\")\nset(orientation_marker_filenames\n  Human.vtp\n  )\nforeach(filename ${orientation_marker_filenames})\n  set(orientation_marker_filepath ${CMAKE_CURRENT_SOURCE_DIR}/${orientation_markers_dir}/${filename})\n  configure_file(\n    ${orientation_marker_filepath}\n    ${CMAKE_BINARY_DIR}/${Slicer_SHARE_DIR}/${orientation_markers_dir}/${filename}\n    COPYONLY\n    )\n  install(\n    FILES ${orientation_marker_filepath}\n    DESTINATION ${Slicer_INSTALL_SHARE_DIR}/${orientation_markers_dir}\n    COMPONENT Runtime\n    )\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Extract Segments by Name (Python)\nDESCRIPTION: This snippet extracts segments from a segmentation file based on their segment names. It reads the segmentation data using the `nrrd` library, extracts segments based on a list of segment names and corresponding labels using the `slicerio.extract_segments` function, and then writes the extracted segments to a new `.seg.nrrd` file. It relies on the `slicerio` and `nrrd` libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_34\n\nLANGUAGE: python\nCODE:\n```\n# pip install slicerio\n\nimport slicerio\nimport nrrd\n\ninput_filename = \"path/to/Segmentation.seg.nrrd\"\noutput_filename = \"path/to/SegmentationExtracted.seg.nrrd\"\nsegment_names_to_labels = [(\"ribs\", 10), (\"right lung\", 12), (\"left lung\", 6)]\n\n# Read voxels and metadata from a .seg.nrrd file\nvoxels, header = nrrd.read(input_filename)\n# Get selected segments in a 3D numpy array and updated segment metadata\nextracted_voxels, extracted_header = slicerio.extract_segments(voxels, header, segmentation_info, segment_names_to_labels)\n# Write extracted segments and metadata to .seg.nrrd file\nnrrd.write(output_filename, extracted_voxels, extracted_header)\n```\n\n----------------------------------------\n\nTITLE: Copying JSON files using configure_file(COPYONLY)\nDESCRIPTION: This snippet copies JSON files from a source directory to the build's resources directory. It iterates through a list of filenames and uses the `configure_file` command with the `COPYONLY` option to copy each file. This is used to include data files needed by the tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/Testing/Cxx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n  foreach(filename IN ITEMS\n      \"30987_imagemaker_linux_amd64_6293f99.json\"\n      \"30987_markupstomodel_linux_amd64_835453f.json\"\n      \"30987_curvemaker_linux_amd64_5619cf5.json\"\n      \"30987_imagemaker_macosx_amd64_6293f99.json\"\n      \"30987_markupstomodel_macosx_amd64_835453f.json\"\n      \"30987_curvemaker_macosx_amd64_5619cf5.json\"\n      \"30338_slicerheart_win_amd64_1db3627.json\"\n      \"application_30893_slicer_linux_amd64.json\"\n      \"application_30893_slicer_macosx_amd64.json\"\n      \"application_30893_slicer_win_amd64.json\"\n      )\n    configure_file(\n      ../Data/Input/${filename}\n      ${resources_dir}/${filename}\n      COPYONLY\n      )\n  endforeach()\n```\n\n----------------------------------------\n\nTITLE: Set Slicer Upload Options\nDESCRIPTION: Defines options related to building, testing, packaging, and uploading extensions to CDash. Includes setting the CTEST_DROP_SITE and CDASH_PROJECT_NAME.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/CMake/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\noption(Slicer_UPLOAD_EXTENSIONS \"Build, test, package and upload extensions\" OFF)\nset(CTEST_DROP_SITE \"slicer.cdash.org\" CACHE STRING \"Dashboard results are uploaded to this URL.\")\nset(CDASH_PROJECT_NAME \"SlicerPreview\" CACHE STRING \"Name of the dashboard project.\")\n```\n\n----------------------------------------\n\nTITLE: Defining Test Sources\nDESCRIPTION: This snippet defines the list of C++ source files that comprise the test suite. These source files contain the actual test cases for the module's functionality.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Units/Testing/Cxx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT_TEST_SRCS\n  vtkSlicerUnitsLogicTest1.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory in CMake\nDESCRIPTION: Conditionally adds the Testing subdirectory to the build process if the BUILD_TESTING variable is enabled.  This allows tests to be included in the build when desired.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/LabelMapSmoothing/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Developer Documentation with Doxygen\nDESCRIPTION: This snippet configures Doxygen for generating developer documentation. It sets the `Slicer_USER_DOCUMENTATION` to \"YES\", clears `Slicer_ADDITIONAL_EXCLUDE_PATTERN`, and sets `Slicer_ADDITIONAL_FILE_PATTERN`. It then configures the Doxyfile.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Doxygen/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n    #\n    # Dev documentation\n    #\n    set( Slicer_USER_DOCUMENTATION \"YES\" )\n    set( Slicer_ADDITIONAL_EXCLUDE_PATTERN \"\" )\n    set( Slicer_ADDITIONAL_FILE_PATTERN \"*.c \\  *.cc \\  *.cxx \\  *.cpp \\  *.c++ \\  *.hxx \\  *.hpp \\  *.h++ \\  *.txx \\  *.C \\  *.CC \\  *.C++ \\  *.moc\" )\n\n\n    configure_file( Doxyfile.txt.in\n      ${CMAKE_CURRENT_BINARY_DIR}/DevDoxyfile.txt\n      )\n```\n\n----------------------------------------\n\nTITLE: Setting GUI Source Files in CMake\nDESCRIPTION: This snippet defines the source files related to the GUI of the Annotations module. It lists the C++ source and header files for the qSlicerAnnotationModuleSnapShotDialog. This helps organize the source files and includes them in the build process. No external dependencies are required.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Annotations/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(GUI_SRCS\n  GUI/qSlicerAnnotationModuleSnapShotDialog.cxx\n  GUI/qSlicerAnnotationModuleSnapShotDialog.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Add Python Unit Test Script\nDESCRIPTION: This command registers a Python script to be executed as a unit test in the Slicer project. The `slicer_add_python_unittest` command is specifically for unit tests. It accepts the script's filename as the SCRIPT argument.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/Testing/Python/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nslicer_add_python_unittest(SCRIPT LoadVolumeDisplaybleSceneModelClose.py)\n```\n\n----------------------------------------\n\nTITLE: Configuring Cxx Test Driver with CMake\nDESCRIPTION: This snippet configures a C++ test driver using the `slicerMacroConfigureModuleCxxTestDriver` macro. It specifies the module name (KIT), the test source files (KIT_TEST_SRCS), and enables debug leak checking and error output checking. This macro sets up the necessary build targets and dependencies for the C++ tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/CropVolume/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroConfigureModuleCxxTestDriver(\n  NAME ${KIT}\n  SOURCES ${KIT_TEST_SRCS}\n  WITH_VTK_DEBUG_LEAKS_CHECK\n  WITH_VTK_ERROR_OUTPUT_CHECK\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Export Directive in CMake\nDESCRIPTION: Defines the export directive for the Segmentations module. This directive controls how symbols are exported when the module is built as a shared library, allowing other modules or applications to access its functionality.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_EXPORT_DIRECTIVE \"Q_SLICER_QTMODULES_${MODULE_NAME_UPPER}_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Including Slicer Use File\nDESCRIPTION: This CMake command includes the specified file, usually named `SlicerUse.cmake`, which contains definitions and settings provided by the Slicer package. The `Slicer_USE_FILE` variable provides the path to this file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/ScriptedLoadableExtensionTemplate/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${Slicer_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries\nDESCRIPTION: Specifies the libraries that the module depends on. These libraries provide additional functionality, such as MRML support, logic implementation, and volume manipulation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/CropVolume/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleMRML\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  vtkSlicerVolumesModuleLogic\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Slicer Python Script Tests\nDESCRIPTION: Adds tests that execute Python scripts using `slicer_add_python_test`. It checks if '--python-scripts' and 'testing' work correctly. Includes a test to handle native path separators on Windows.\nSOURCE: https://github.com/slicer/slicer/blob/main/Applications/SlicerApp/Testing/Python/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nslicer_add_python_test(\n  SCRIPT SlicerTestingExitSuccessTest.py\n  SCRIPT_ARGS --no-main-window TESTNAME_PREFIX nomainwindow_\n  )\n\nif (WIN32)\n  # Test script execution with native path separator character (backslash)\n  string(REPLACE \"/\" \"\\\\\" nativeFilePath \"${CMAKE_CURRENT_SOURCE_DIR}/bSlicerTestingExitSuccessTest.py\")\n  slicer_add_python_test(\n    SCRIPT ${nativeFilePath}\n    SCRIPT_ARGS --no-main-window TESTNAME_PREFIX nomainwindow_nativePath_\n    )\nendif()\n\nslicer_add_python_test(\n  SCRIPT SlicerTestingExitFailureTest.py\n  SCRIPT_ARGS --no-main-window TESTNAME_PREFIX nomainwindow_\n  )\nset_tests_properties(py_nomainwindow_SlicerTestingExitFailureTest PROPERTIES WILL_FAIL TRUE\n\nslicer_add_python_test(SCRIPT SlicerTestingExitSuccessTest.py)\n\nslicer_add_python_test(SCRIPT SlicerTestingExitFailureTest.py)\nset_tests_properties(py_SlicerTestingExitFailureTest PROPERTIES WILL_FAIL TRUE)\n```\n\n----------------------------------------\n\nTITLE: Defining Target Libraries\nDESCRIPTION: Defines the target libraries required for the module. It specifies that the MRML_LIBRARIES are necessary. MRML_LIBRARIES likely contains the required MRML core libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/MRML/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  ${MRML_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Source Files\nDESCRIPTION: Defines the list of C++ source and header files that make up the module. This list is used by CMake to compile and link the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Reformat/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_SRCS\n  qSlicer${MODULE_NAME}Module.cxx\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.cxx\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting MOC Sources\nDESCRIPTION: Defines the list of header files that need to be processed by the Meta-Object Compiler (MOC). This is necessary for Qt classes that use signals and slots.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT_MOC_SRCS\n  qSlicerAbstractCoreModule.h\n  qSlicerAbstractModuleFactoryManager.h\n  qSlicerCoreCommandOptions.h\n  qSlicerCoreApplication.h\n  qSlicerCoreIOManager.h\n  qSlicerFileReader.h\n  qSlicerFileWriter.h\n  qSlicerIO.h\n  qSlicerModuleFactoryManager.h\n  qSlicerModuleManager.h\n  qSlicerRelativePathMapper.h\n  qSlicerSceneBundleReader.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Python Wrapping Inclusion\nDESCRIPTION: This snippet includes Python wrapping if VTK_WRAP_PYTHON is enabled.  It checks if VTK_WRAP_PYTHON is true and includes the vtkMacroKitPythonWrap module to generate Python wrappers for the library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkTeem/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nif(VTK_WRAP_PYTHON)\n  include(vtkMacroKitPythonWrap)\n\n  vtkMacroKitPythonWrap(\n    KIT_NAME ${lib_name}\n    KIT_SRCS ${vtkTeem_SRCS}\n    KIT_INSTALL_BIN_DIR ${${PROJECT_NAME}_INSTALL_BIN_DIR}\n    KIT_INSTALL_LIB_DIR ${${PROJECT_NAME}_INSTALL_LIB_DIR}\n    )\n  # Export target\n  export(TARGETS ${lib_name}Python APPEND FILE ${${PROJECT_NAME}_EXPORT_FILE})\n  # Folder\n  if(NOT \"${${PROJECT_NAME}_FOLDER}\" STREQUAL \"\")\n    set_target_properties(${lib_name}Python PROPERTIES FOLDER ${${PROJECT_NAME}_FOLDER})\n    if(TARGET ${lib_name}Hierarchy)\n      set_target_properties(${lib_name}Hierarchy PROPERTIES FOLDER ${${PROJECT_NAME}_FOLDER})\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Call Add Module Test for Various Pixel Types in CMake\nDESCRIPTION: This snippet calls the `add_module_test` function multiple times for different pixel types including CHAR, UCHAR, SHORT, USHORT, INT, UINT, LONG, ULONG, FLOAT and DOUBLE. This generates individual tests for each pixel type.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/AddScalarVolumes/Testing/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_module_test( CHAR )\nadd_module_test( UCHAR )\nadd_module_test( SHORT )\nadd_module_test( USHORT )\nadd_module_test( INT )\nadd_module_test( UINT )\nadd_module_test( LONG )\nadd_module_test( ULONG )\nadd_module_test( FLOAT )\nadd_module_test( DOUBLE )\n```\n\n----------------------------------------\n\nTITLE: Adding ExternalData Target (Conditional) - CMake\nDESCRIPTION: This snippet adds an ExternalData target named `${CLP}Data` only if `${SEM_DATA_MANAGEMENT_TARGET}` is equal to `${CLP}Data`. This is likely to manage test data downloading and updating.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/DiffusionTensorTest/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n#-----------------------------------------------------------------------------\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: Defines the list of source files that make up the module. This includes both C++ source files (.cxx) and header files (.h), as well as MOC (Meta-Object Compiler) files generated from Qt headers. The MOC files are required for Qt's signal and slot mechanism to work correctly.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Units/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_SRCS\n  qSlicer${MODULE_NAME}Module.cxx\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}SettingsPanel.cxx\n  qSlicer${MODULE_NAME}SettingsPanel.h\n  )\n\nset(MODULE_MOC_SRCS\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}SettingsPanel.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Library Building and Linking\nDESCRIPTION: This snippet defines the source files for the library and builds the library using `add_library`. It also links the library against the necessary ITK libraries using `target_link_libraries`.  It also applies any user-defined properties to the library target specified by `Slicer_LIBRARY_PROPERTIES`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/ITKFactoryRegistration/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# --------------------------------------------------------------------------\n# Sources\n# --------------------------------------------------------------------------\nset(srcs\n  itkFactoryRegistration.cxx\n  )\n\n# --------------------------------------------------------------------------\n# Build library\n# --------------------------------------------------------------------------\nset(lib_name ${PROJECT_NAME})\n\nadd_library(${lib_name} SHARED ${srcs})\n\nset(libs\n  ${ITK_LIBRARIES}\n  )\ntarget_link_libraries(${lib_name} ${libs})\n\n# Apply user-defined properties to the library target.\nif(Slicer_LIBRARY_PROPERTIES)\n  set_target_properties(${lib_name} PROPERTIES ${Slicer_LIBRARY_PROPERTIES})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building CLI with SEMMacroBuildCLI - CMake\nDESCRIPTION: This snippet uses the SEMMacroBuildCLI macro to configure the build for a command-line interface (CLI). It specifies the module name, logo header, and target libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleScalarVolume/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/ITKLogo.h\n  TARGET_LIBRARIES ${ITK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Initializing Project and Setting Variables (CMake)\nDESCRIPTION: This code initializes the CMake project and defines variables for export directives, include directories, source files, and target libraries. These variables are used later to configure the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/Logic/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleLogic)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_LOGIC_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSlicerMarkupsModuleMRML_INCLUDE_DIRS}\n  )\n\nset(${KIT}_SRCS\n  vtkSlicerTransformLogic.cxx\n  vtkSlicerTransformLogic.h\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  MRMLCore\n  vtkSlicerMarkupsModuleMRML\n  )\n```\n\n----------------------------------------\n\nTITLE: Installing FFmpeg on Linux\nDESCRIPTION: This code snippet demonstrates how to install FFmpeg on Linux by cloning the FFmpeg repository, installing necessary dependencies, configuring the build, and installing it to the user's home directory. The FFmpeg executable will be located at `${HOME}/bin/ffmpeg`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/modules/screencapture.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://git.ffmpeg.org/ffmpeg.git ffmpeg\ncd ffmpeg\nsudo apt-get install libx264-dev\n./configure --enable-gpl --enable-libx264 --prefix=${HOME}\nmake install\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: Defines the MODULE_SRCS variable containing the list of C++ source files (.cxx and .h) that make up the Volumes module. These files contain the implementation of the module's logic and user interface.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_SRCS\n  qSlicer${MODULE_NAME}IOOptionsWidget.cxx\n  qSlicer${MODULE_NAME}IOOptionsWidget.h\n  qSlicer${MODULE_NAME}Module.cxx\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.cxx\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  qSlicer${MODULE_NAME}Reader.cxx\n  qSlicer${MODULE_NAME}Reader.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding ExternalData Test - CMake\nDESCRIPTION: This snippet adds an ExternalData test that runs the `${CLP}Test` executable. It specifies input data files (`helix-DTI.nhdr`, `helix-DTI.raw.gz`), an expected output file (`DiffusionTensorTestTest.nhdr`), and sets labels for the test. It depends on the ExternalData module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/DiffusionTensorTest/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(testname ${CLP}Test)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  ModuleEntryPoint\n    DATA{${INPUT}/helix-DTI.nhdr,helix-DTI.raw.gz}\n    ${TEMP}/DiffusionTensorTestTest.nhdr\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Adding Executable and Linking Libraries (CMake)\nDESCRIPTION: This snippet adds an executable target named '${CLP}Test' using `ctk_add_executable_utf8`. It links the executable to the '${CLP}Lib' and other necessary libraries defined in `${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES}`. It also sets properties like LABELS and FOLDER for the target.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/TestGridTransformRegistration/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nctk_add_executable_utf8(${CLP}Test ${CLP}Test.cxx)\ntarget_link_libraries(${CLP}Test ${CLP}Lib ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES})\nset_target_properties(${CLP}Test PROPERTIES LABELS ${CLP})\nset_target_properties(${CLP}Test PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory in CMake\nDESCRIPTION: This snippet conditionally adds the Testing subdirectory to the build if BUILD_TESTING is enabled. This allows for including unit tests for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GrayscaleGrindPeakImageFilter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Python Unit Test with CMake Macro\nDESCRIPTION: This snippet uses the `slicer_add_python_unittest` CMake macro to register a Python script as a unit test. The macro takes the `SCRIPT` keyword followed by the path to the Python test script, named `${MODULE_NAME}ModuleTest.py`. The `${MODULE_NAME}` variable likely represents the name of the module being tested.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/ScriptedSegmentEditorEffect/Testing/Python/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n#slicer_add_python_unittest(SCRIPT ${MODULE_NAME}ModuleTest.py)\n```\n\n----------------------------------------\n\nTITLE: Defining target libraries (CMake)\nDESCRIPTION: This snippet defines the target libraries that the module depends on. These libraries will be linked with the module during the build process.  The list includes modules like qSlicerSubjectHierarchyModuleWidgets, vtkSlicerSubjectHierarchyModuleLogic, vtkSlicerColorsModuleLogic, qMRMLWidgets, MRMLLogic, and MRMLCore.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nset(${KIT}_TARGET_LIBRARIES\n  qSlicerSubjectHierarchyModuleWidgets\n  vtkSlicerSubjectHierarchyModuleLogic\n  vtkSlicerColorsModuleLogic\n  qMRMLWidgets\n  MRMLLogic\n  MRMLCore\n  )\n```\n\n----------------------------------------\n\nTITLE: Build Qt Designer Plugin using CTK Macro\nDESCRIPTION: Uses the ctkMacroBuildQtDesignerPlugin macro to build the Qt Designer plugin.  It passes the project name, export directive, source files, moc source files, and target libraries as arguments to the macro. This macro encapsulates the logic for building Qt Designer plugins using CMake.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nctkMacroBuildQtDesignerPlugin(\n  NAME ${PROJECT_NAME}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT}\n  FOLDER \"${${KIT}_FOLDER}\"\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Build Scripted Module with Macro\nDESCRIPTION: Uses the `slicerMacroBuildScriptedModule` macro to build the scripted module.  It takes the module name, scripts, and resources as input, and also enables generic tests. This macro is a Slicer-specific function that automates the module build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/SelfTests/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nslicerMacroBuildScriptedModule(\n  NAME ${MODULE_NAME}\n  SCRIPTS ${MODULE_PYTHON_SCRIPTS}\n  RESOURCES ${MODULE_PYTHON_RESOURCES}\n  WITH_GENERIC_TESTS\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name in CMake\nDESCRIPTION: Sets the module name and converts it to uppercase for use in defining export directives.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Data/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_NAME Data)\n\nstring(TOUPPER ${MODULE_NAME} MODULE_NAME_UPPER)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet sets the include directories for the module, which are used to find the necessary header files during compilation. It includes both source and binary directories of the logic component to enable widget development.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/Widgets/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSlicer${MODULE_NAME}ModuleLogic_SOURCE_DIR}\n  ${vtkSlicer${MODULE_NAME}ModuleLogic_BINARY_DIR}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries\nDESCRIPTION: Defines the target libraries that the module depends on. These libraries are linked with the module during the build process. `MRMLCore`, `vtkSegmentationCore`, and `vtkSlicerSubjectHierarchyModuleLogic` are specified as target libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/MRML/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  MRMLCore\n  vtkSegmentationCore\n  vtkSlicerSubjectHierarchyModuleLogic\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Qt Library - CMake\nDESCRIPTION: Uses the SlicerMacroBuildModuleQtLibrary macro to build the Qt library for the module. It takes parameters such as NAME, EXPORT_DIRECTIVE, FOLDER, INCLUDE_DIRECTORIES, SRCS, MOC_SRCS, UI_SRCS, TARGET_LIBRARIES, RESOURCES, and WRAP_PYTHONQT to configure the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nSlicerMacroBuildModuleQtLibrary(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  FOLDER \"Module-${MODULE_NAME}\"\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  UI_SRCS ${${KIT}_UI_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  RESOURCES ${${KIT}_RESOURCES}\n  WRAP_PYTHONQT\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name\nDESCRIPTION: Sets the module name for the KIT variable. This is used to define the target name for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Sequences/Testing/Cxx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT qSlicer${MODULE_NAME}Module)\n```\n\n----------------------------------------\n\nTITLE: Setting Install Directories and Variables\nDESCRIPTION: This snippet defines several installation directories and environment variables used within the project. It sets paths for ITK factories, the application home directory environment variable (`SLICER_HOME`), the OpenGL profile environment variable (`SLICER_OPENGL_PROFILE`), the shared files subdirectory, and the MRML test data directory.  It also propagates build-related options such as `Slicer_BUILD_WEBENGINE_SUPPORT`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Qt designer plugins\nset(MRML_BUILD_QT_DESIGNER_PLUGINS ${Slicer_BUILD_QT_DESIGNER_PLUGINS})\n\n# ITKFactories directories\nset(MRMLIDImageIO_ITKFACTORIES_DIR ${Slicer_ITKFACTORIES_DIR})\nset(MRMLIDImageIO_INSTALL_ITKFACTORIES_DIR ${Slicer_INSTALL_ITKFACTORIES_DIR})\n\n# Name of the environment variable that contains the application home directory.\nset(MRML_APPLICATION_HOME_DIR_ENV \"SLICER_HOME\")\n\n# Name of the environment variable that contains the requested OpenGL profile.\n# Accepted values are \"default\" (same as not specifying a value) or\n# to force a specific profile: \"no\", \"core\", or  \"compatibility\".\nset(MRML_APPLICATION_OPENGL_PROFILE_ENV \"SLICER_OPENGL_PROFILE\")\n\n# Name of the subdirectory within the application directory where shared files are stored.\nset(MRML_APPLICATION_SHARE_SUBDIR ${Slicer_SHARE_DIR})\n\n# vtkITK contains tests that uses MRML's test data.\nset(MRML_TEST_DATA_DIR ${CMAKE_CURRENT_SOURCE_DIR}/MRML/Core/Testing/TestData)\n\nset(VTKITK_BUILD_DICOM_SUPPORT ${Slicer_BUILD_DICOM_SUPPORT})\n\nset(MRML_WIDGETS_HAVE_WEBENGINE_SUPPORT ${Slicer_BUILD_WEBENGINE_SUPPORT})\n```\n\n----------------------------------------\n\nTITLE: Slicer SequencesSelfTest Module Definition\nDESCRIPTION: This CMake code block defines the SequencesSelfTest module using `slicerMacroBuildScriptedModule` and adds a Python unit test. It is conditionally included based on the `Slicer_USE_QtTesting` and `Slicer_USE_PYTHONQT` flags being set to true. The module's build is scripted using `SequencesSelfTest.py`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Sequences/Testing/Python/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(Slicer_USE_QtTesting AND Slicer_USE_PYTHONQT)\n  slicerMacroBuildScriptedModule(\n    NAME SequencesSelfTest\n    SCRIPTS SequencesSelfTest.py\n    )\n  slicer_add_python_unittest(SCRIPT SequencesSelfTest.py)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Handling Plot Data Selection in Slicer (Python)\nDESCRIPTION: This Python snippet demonstrates how to connect to the `dataSelected` signal of a qMRMLPlotView in Slicer to respond to user interactions with the plot canvas. The `onDataSelected` function prints the IDs of the selected data points and their corresponding series.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/modules/plots.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Switch to a layout that contains a plot view to create a plot widget\nlayoutManager = slicer.app.layoutManager()\nlayoutWithPlot = slicer.modules.plots.logic().GetLayoutWithPlot(layoutManager.layout)\nlayoutManager.setLayout(layoutWithPlot)\n\n# Select chart in plot view\nplotWidget = layoutManager.plotWidget(0)\nplotViewNode = plotWidget.mrmlPlotViewNode()\n\n# Add a PlotCharNode\n# plotViewNode.SetPlotChartNodeID(''PlotChartNode''.GetID())\n\n# Print selected point IDs\ndef onDataSelected(mrmlPlotDataIDs, selectionCol):\n    print(\"Selection changed:\")\n    for selectionIndex in range(mrmlPlotDataIDs.GetNumberOfValues()):\n        pointIdList = []\n        pointIds = selectionCol.GetItemAsObject(selectionIndex)\n        for pointIndex in range(pointIds.GetNumberOfValues()):\n            pointIdList.append(pointIds.GetValue(pointIndex))\n        print(\"  {0}: {1}\".format(mrmlPlotDataIDs.GetValue(selectionIndex), pointIdList))\n\n\n# Connect the signal with a slot ''onDataSelected''\nplotView = plotWidget.plotView()\nplotView.connect(\"dataSelected(vtkStringArray*, vtkCollection*)\", self.onDataSelected)\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple 4-up View Layout in XML\nDESCRIPTION: This XML snippet defines a simple 4-up view layout in 3D Slicer using the `<layout>` tag with `type=\"vertical\"` and `split=\"true\"`.  It creates two items, each containing a view: one `vtkMRMLViewNode` and one `vtkMRMLSliceNode`. The `vtkMRMLSliceNode` is configured for Axial orientation, Red color, and is labelled as \"R\".\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/advanced_topics.md#_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<layout type=\"vertical\" split=\"true\">\n  <item>\n  <view class=\"vtkMRMLViewNode\" singletontag=\"1\">\n    <property name=\"viewlabel\" action=\"default\">1</property>\n  </view>\n  </item>\n  <item>\n  <view class=\"vtkMRMLSliceNode\" singletontag=\"Red\">\n    <property name=\"orientation\" action=\"default\">Axial</property>\n    <property name=\"viewlabel\" action=\"default\">R</property>\n    <property name=\"viewcolor\" action=\"default\">#F34A33</property>\n  </view>\n  </item>\n</layout>\n```\n\n----------------------------------------\n\nTITLE: Modifying voxel values based on RAS coordinates in Slicer (Python)\nDESCRIPTION: This snippet shows how to modify voxel values based on their RAS coordinates using a function. It gets the IJKToRAS matrix, iterates through the voxels, computes the function value based on RAS coordinates, and sets the scalar component of the image data. Dependencies include vtk.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\nvolumeNode=slicer.util.getNode(\"MRHead\")\nijkToRas = vtk.vtkMatrix4x4()\nvolumeNode.GetIJKToRASMatrix(ijkToRas)\nimagedata=volumeNode.GetImageData()\nextent = imageData.GetExtent()\nfor k in range(extent[4], extent[5]+1):\n  for j in range(extent[2], extent[3]+1):\n    for i in range(extent[0], extent[1]+1):\n      position_Ijk=[i, j, k, 1]\n      position_Ras=ijkToRas.MultiplyPoint(position_Ijk)\n      r=position_Ras[0]\n      a=position_Ras[1]\n      s=position_Ras[2]\n      functionValue=(r-10)*(r-10)+(a+15)*(a+15)+s*s\n      imageData.SetScalarComponentFromDouble(i,j,k,0,functionValue)\nimagedata.Modified()\n```\n\n----------------------------------------\n\nTITLE: Volume Property File Format Example\nDESCRIPTION: This snippet shows an example of the volume property (.vp) file format used by Slicer for volume rendering. It defines interpolation type, shading parameters, and scalar, gradient, and color opacity transfer functions.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/modules/volumerendering.md#_snippet_0\n\nLANGUAGE: plain text\nCODE:\n```\n1 => interpolation type\n1 => shading enabled\n0.9 => diffuse reflection\n0.1 => ambient reflection\n0.2 => specular reflection\n10 => specular reflection power\n14 -3024 0 -86.9767 0 45.3791 0.169643 139.919 0.589286 347.907 0.607143 1224.16 0.607143 3071 0.616071 => scalar opacity transfer function (total number of values, each control point is defined by a pair of values: intensity and opacity)\n4 0 1 255 1 => gradient opacity transfer function (total number of values, each control point is defined by a pair of values: intensity gradient and opacity)\n28 -3024 0 0 0 -86.9767 0 0.25098 1 45.3791 1 0 0 139.919 1 0.894893 0.894893 347.907 1 1 0.25098 1224.16 1 1 1 3071 0.827451 0.658824 1 => color transfer function (total number of values, each control point is defined by 4 of values: intensity and R, G, B color components)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Append Source Files in CMake\nDESCRIPTION: Conditionally appends source files to the source list based on the value of the `MRML_WIDGETS_HAVE_WEBENGINE_SUPPORT` variable. This allows for including or excluding web engine support depending on the build configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(MRML_WIDGETS_HAVE_WEBENGINE_SUPPORT)\n  list(APPEND ${KIT}_SRCS\n    qMRMLExpandingWebViewPlugin.cxx\n    qMRMLExpandingWebViewPlugin.h\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Target Libraries - CMake\nDESCRIPTION: This snippet defines the target libraries that the module's logic component depends on.  These libraries provide pre-built functionality that the module uses.  Linking to these libraries ensures that the necessary code is available at runtime.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Logic/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleMRML\n  vtkSlicer${MODULE_NAME}ModuleVTKWidgets\n  vtkSlicerAnnotationsModuleMRML\n  )\n```\n\n----------------------------------------\n\nTITLE: Set Module Name in CMake\nDESCRIPTION: Sets the module name and its uppercase version for use in other CMake variables. The uppercase version is generated using the `string(TOUPPER)` command.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperLoadableModuleTemplate/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME SuperLoadableModuleTemplate)\n\nstring(TOUPPER ${MODULE_NAME} MODULE_NAME_UPPER)\n```\n\n----------------------------------------\n\nTITLE: Setting BUILD_SHARED_LIBS Option\nDESCRIPTION: This snippet defines an option to control whether shared libraries are built. If `BUILD_SHARED_LIBS` is not already defined, it sets the option to ON by default.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Core/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED BUILD_SHARED_LIBS)\n  option(BUILD_SHARED_LIBS \"Build with shared libraries.\" ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Test in CMake\nDESCRIPTION: This snippet adds an external data test using `ExternalData_add_test`. It defines the test name, command to execute (including input data, output paths, and module entry point), and comparison data. The test also includes a label property.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CheckerBoardFilter/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(testname ${CLP}Test)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  --compare DATA{${BASELINE}/${CLP}Test.nhdr,CheckerBoardFilterTest.raw}\n  ${TEMP}/${CLP}Test.nhdr\n  ModuleEntryPoint --checkerPattern 5,3,2\n  DATA{${INPUT}/CTHeadAxial.nhdr,CTHeadAxial.raw.gz} DATA{${INPUT}/CTHeadAxialDoubled.nhdr,CTHeadAxialDoubled.raw.gz} ${TEMP}/${CLP}Test.nhdr\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Setting Kit Variable with Project Name\nDESCRIPTION: This snippet sets the CMake variable `KIT` to the name of the project followed by 'Plugins'.  This variable is used to group related variables and manage the plugin build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT ${PROJECT_NAME}Plugins)\n```\n\n----------------------------------------\n\nTITLE: Setting Module Include Directories in CMake\nDESCRIPTION: This section defines the include directories needed to compile the module.  It includes source and binary directories for MRML, Logic, Widgets, SubjectHierarchyPlugins, and directories from the qSlicerSubjectHierarchyModuleWidgets module, ensuring that all necessary headers are available during compilation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_INCLUDE_DIRECTORIES\n  ${CMAKE_CURRENT_SOURCE_DIR}/MRML\n  ${CMAKE_CURRENT_BINARY_DIR}/MRML\n  ${CMAKE_CURRENT_SOURCE_DIR}/Logic\n  ${CMAKE_CURRENT_BINARY_DIR}/Logic\n  ${CMAKE_CURRENT_SOURCE_DIR}/Widgets\n  ${CMAKE_CURRENT_BINARY_DIR}/Widgets\n  ${CMAKE_CURRENT_SOURCE_DIR}/SubjectHierarchyPlugins\n  ${CMAKE_CURRENT_BINARY_DIR}/SubjectHierarchyPlugins\n  ${qSlicerSubjectHierarchyModuleWidgets_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Python Resources\nDESCRIPTION: Defines the Python resources used by the module, which includes icons. Sets the MODULE_PYTHON_RESOURCES variable to the icon file located at Resources/Icons/CropVolumeSequence.png.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/CropVolumeSequence/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_PYTHON_RESOURCES\n  Resources/Icons/${MODULE_NAME}.png\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories in CMake\nDESCRIPTION: Specifies the include directories required for compiling the module. These include directories point to the module's logic, and other dependent modules like Cameras and SubjectHierarchy.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Data/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_INCLUDE_DIRECTORIES\n  ${CMAKE_CURRENT_SOURCE_DIR}/Logic\n  ${CMAKE_CURRENT_BINARY_DIR}/Logic\n  ${vtkSlicerCamerasModuleLogic_SOURCE_DIR}\n  ${vtkSlicerCamerasModuleLogic_BINARY_DIR}\n  ${qSlicerSubjectHierarchyModuleWidgets_INCLUDE_DIRS}\n  ${qMRMLWidgets_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting UI sources for the KIT - CMake\nDESCRIPTION: This snippet defines the UI files for the `KIT`. These files are created using Qt Designer and describe the graphical user interface of the widgets.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/Widgets/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_UI_SRCS\n  Resources/UI/qSlicerTableColumnPropertiesWidget.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Appending `kits.py` to Scripts (CMake)\nDESCRIPTION: This CMake snippet appends the generated `kits.py` file (located in the binary directory) to the list of Python scripts (`Slicer_PYTHON_SCRIPTS`). This ensures that the configured `kits.py` file is included in the Python environment at runtime.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/Python/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND Slicer_PYTHON_SCRIPTS ${CMAKE_CURRENT_BINARY_DIR}/slicer/kits.py)\n```\n\n----------------------------------------\n\nTITLE: Getting Voxel Value - Python\nDESCRIPTION: This Python script demonstrates how to retrieve the voxel value at a specific set of IJK coordinates within a volume. It uses the slicer.util.arrayFromVolume function to access the volume data as a NumPy array. Note that the NumPy array's indexing order is KJI, which is the reverse of the IJK coordinate order. Depends on `numpy`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nvolumeNode = slicer.util.getNode(\"MRHead\")\nijk = [20,40,30]  # volume voxel coordinates\n\nvoxels = slicer.util.arrayFromVolume(volumeNode)  # get voxels as a numpy array\nvoxelValue = voxels[ijk[2], ijk[1], ijk[0]]  # note that numpy array index order is kji (not ijk)\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Target\nDESCRIPTION: This conditional statement checks if 'SEM_DATA_MANAGEMENT_TARGET' is equal to '${CLP}Data'. If true, it adds a target named '${CLP}Data' using `ExternalData_add_target`, presumably to download and manage external data required for the tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleScalarVectorDWIVolume/Testing/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Module Resources CMake\nDESCRIPTION: Specifies the resource files for the module. The resource file includes icons and other assets needed by the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_RESOURCES\n  Resources/qSlicer${MODULE_NAME}Module.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Show 3D View Outside View Layout in Slicer (Python)\nDESCRIPTION: This code demonstrates how to create and display a 3D view outside the standard 3D Slicer layout. It creates MRML nodes for the 3D view and logic, and then creates a `qMRMLThreeDWidget` to display the view. A scripted module node is used to manage this view.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_56\n\nLANGUAGE: python\nCODE:\n```\n# layout name is used to create and identify the underlying view node and  should be set to a value that is not used in any of the layouts owned by the layout manager\nlayoutName = \"Test3DView\"\nlayoutLabel = \"T3\"\nlayoutColor = [1.0, 1.0, 0.0]\n# ownerNode manages this view instead of the layout manager (it can be any node in the scene)\nviewOwnerNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLScriptedModuleNode\")\n\n# Create MRML node\nviewLogic = slicer.vtkMRMLViewLogic()\nviewLogic.SetMRMLScene(slicer.mrmlScene)\nviewNode = viewLogic.AddViewNode(layoutName)\nviewNode.SetLayoutLabel(layoutLabel)\nviewNode.SetLayoutColor(layoutColor)\nviewNode.SetAndObserveParentLayoutNodeID(viewOwnerNode.GetID())\n\n# Create widget\nviewWidget = slicer.qMRMLThreeDWidget()\nviewWidget.setMRMLScene(slicer.mrmlScene)\nviewWidget.setMRMLViewNode(viewNode)\nviewWidget.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Plugin Kit Variables in CMake\nDESCRIPTION: This snippet defines CMake variables related to a Qt Designer plugin kit. It sets the kit name, export directive, source files, header files for moc processing, and target libraries required for the plugin. These variables are later used by the `ctkMacroBuildQtDesignerPlugin` macro.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT ${PROJECT_NAME}Plugins)\n\nset(${KIT}_EXPORT \"Q_SLICER_MODULE_${MODULE_NAME_UPPER}_WIDGETS_PLUGINS_EXPORT\")\n\nset(${KIT}_SRCS\n  qSlicer${MODULE_NAME}ModuleWidgetsAbstractPlugin.cxx\n  qSlicer${MODULE_NAME}ModuleWidgetsAbstractPlugin.h\n  qSlicer${MODULE_NAME}ModuleWidgetsPlugin.cxx\n  qSlicer${MODULE_NAME}ModuleWidgetsPlugin.h\n\n  qMRMLTransformDisplayNodeWidgetPlugin.cxx\n  qMRMLTransformDisplayNodeWidgetPlugin.h\n  qMRMLTransformInfoWidgetPlugin.cxx\n  qMRMLTransformInfoWidgetPlugin.h\n  )\n\nset(${KIT}_MOC_SRCS\n  qSlicer${MODULE_NAME}ModuleWidgetsPlugin.h\n\n  qMRMLTransformDisplayNodeWidgetPlugin.h\n  qMRMLTransformInfoWidgetPlugin.h\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  qSlicer${MODULE_NAME}ModuleWidgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for Designer Plugins and Testing\nDESCRIPTION: This snippet conditionally adds subdirectories for building Qt designer plugins and running tests, based on the `Slicer_BUILD_QT_DESIGNER_PLUGINS` and `BUILD_TESTING` variables. This allows for optional features and testing components to be included in the build.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/Widgets/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nif(Slicer_BUILD_QT_DESIGNER_PLUGINS)\n  add_subdirectory(DesignerPlugins)\nendif()\n\n#-----------------------------------------------------------------------------\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting CMake minimum required version\nDESCRIPTION: Specifies the minimum required CMake version for the project. This ensures that the CMake version used to build the project is compatible with the features and syntax used in the CMakeLists.txt file.  Using FATAL_ERROR will stop execution if the version is not met.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/CLIExtensionTemplate/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16.3...3.19.7 FATAL_ERROR)\n```\n\n----------------------------------------\n\nTITLE: Conditional Translation Support CMake\nDESCRIPTION: This snippet conditionally configures translation support for the MRMLWidgets library. If `Slicer_BUILD_I18N_SUPPORT` is enabled, it includes the `SlicerMacroTranslation` macro to generate translation files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\n  if(Slicer_BUILD_I18N_SUPPORT)\n    set(TS_DIR\n      \"${CMAKE_CURRENT_SOURCE_DIR}/Resources/Translations/\"\n    )\n\n    include(SlicerMacroTranslation)\n    SlicerMacroTranslation(\n      SRCS ${MRMLWidgets_SRCS}\n      UI_SRCS ${MRMLWidgets_UI_SRCS}\n      TS_DIR ${TS_DIR}\n      TS_BASEFILENAME ${PROJECT_NAME}\n      TS_LANGUAGES ${Slicer_LANGUAGES}\n      QM_OUTPUT_DIR_VAR QM_OUTPUT_DIR\n      QM_OUTPUT_FILES_VAR QM_OUTPUT_FILES\n      )\n\n    set_property(GLOBAL APPEND PROPERTY Slicer_QM_OUTPUT_DIRS ${QM_OUTPUT_DIR})\n  else()\n    set(QM_OUTPUT_FILES )\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Setting UI Source Files in CMake\nDESCRIPTION: Sets the list of Qt Designer UI files (.ui) that define the user interface elements of the Segmentations module. These files are used to generate C++ code for creating and managing the UI.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_UI_SRCS\n  Resources/UI/qSlicer${MODULE_NAME}IOOptionsWidget.ui\n  Resources/UI/qSlicer${MODULE_NAME}Module.ui\n  Resources/UI/qSlicer${MODULE_NAME}SettingsPanel.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Target Libraries in CMake\nDESCRIPTION: Defines the target libraries that the module depends on. These libraries are linked with the module during the linking phase.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_TARGET_LIBRARIES\n  qSlicer${MODULE_NAME}ModuleWidgets\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  qSlicer${MODULE_NAME}SubjectHierarchyPlugins\n  qSlicerColorsModuleWidgets\n  vtkSlicerColorsModuleLogic\n  vtkSlicerColorsModuleMRML\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Export Directive\nDESCRIPTION: Sets the export directive for the library. This directive controls the visibility of symbols when the library is built and linked against other projects.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTApp/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT_export_directive \"Q_SLICER_BASE_QTAPP_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Defining Target Libraries\nDESCRIPTION: This snippet specifies the target libraries that the plugin depends on. These libraries provide the necessary functionality for the plugin to operate correctly.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  qSlicer${MODULE_NAME}ModuleWidgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting UI Source Files CMake\nDESCRIPTION: This snippet lists the Qt Designer UI files (.ui) that define the graphical user interface elements of the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOMLib/Widgets/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_UI_SRCS\n  Resources/UI/qSlicerDICOMExportDialog.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Kit Variables with CMake\nDESCRIPTION: This snippet defines CMake variables for the plugin kit, including the export directive, source files, moc source files, and target libraries.  It configures the necessary components for building the Qt Designer plugin.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT ${PROJECT_NAME}Plugins)\n\nset(${KIT}_EXPORT \"Q_SLICER_MODULE_${MODULE_NAME_UPPER}_WIDGETS_PLUGINS_EXPORT\")\n\nset(${KIT}_SRCS\n  qSlicerSegmentationsModuleWidgetsAbstractPlugin.cxx\n  qSlicerSegmentationsModuleWidgetsAbstractPlugin.h\n  qSlicerSegmentationsModuleWidgetsPlugin.cxx\n  qSlicerSegmentationsModuleWidgetsPlugin.h\n  qMRMLSegmentsTableViewPlugin.cxx\n  qMRMLSegmentsTableViewPlugin.h\n  qMRMLSegmentationRepresentationsListViewPlugin.cxx\n  qMRMLSegmentationRepresentationsListViewPlugin.h\n  qMRMLSegmentationConversionParametersWidgetPlugin.cxx\n  qMRMLSegmentationConversionParametersWidgetPlugin.h\n  qMRMLSegmentationShow3DButtonPlugin.cxx\n  qMRMLSegmentationShow3DButtonPlugin.h\n  qMRMLSegmentSelectorWidgetPlugin.cxx\n  qMRMLSegmentSelectorWidgetPlugin.h\n  qMRMLSegmentEditorWidgetPlugin.cxx\n  qMRMLSegmentEditorWidgetPlugin.h\n  qMRMLSegmentationDisplayNodeWidgetPlugin.cxx\n  qMRMLSegmentationDisplayNodeWidgetPlugin.h\n  qMRMLSegmentationFileExportWidgetPlugin.cxx\n  qMRMLSegmentationFileExportWidgetPlugin.h\n  )\n\nset(${KIT}_MOC_SRCS\n  qSlicerSegmentationsModuleWidgetsPlugin.h\n  qMRMLSegmentsTableViewPlugin.h\n  qMRMLSegmentationRepresentationsListViewPlugin.h\n  qMRMLSegmentationConversionParametersWidgetPlugin.h\n  qMRMLSegmentSelectorWidgetPlugin.h\n  qMRMLSegmentEditorWidgetPlugin.h\n  qMRMLSegmentationDisplayNodeWidgetPlugin.h\n  qMRMLSegmentationFileExportWidgetPlugin.h\n  qMRMLSegmentationShow3DButtonPlugin.h\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  qSlicerSegmentationsModuleWidgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Project Definition with CMake\nDESCRIPTION: This snippet defines the CMake project for the logic component of a vtkSlicer module. It sets the project name, export directive, include directories, source files, and target libraries.  The `MODULE_NAME` and `MODULE_NAME_UPPER` variables are assumed to be defined elsewhere, likely in a parent CMakeLists.txt file. The export directive controls symbol visibility when building shared libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Sequences/Logic/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleLogic)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_LOGIC_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  )\n\nset(${KIT}_SRCS\n  vtkSlicer${MODULE_NAME}Logic.cxx\n  vtkSlicer${MODULE_NAME}Logic.h\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleMRML\n  )\n```\n\n----------------------------------------\n\nTITLE: Include Directories Variable Set CMake\nDESCRIPTION: Sets the ${PROJECT_NAME}_INCLUDE_DIRS variable, including source and binary directories. This is an internal cache variable forced to be set.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/DisplayableManager/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nset(${PROJECT_NAME}_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR}\n  CACHE INTERNAL \"${PROJECT_NAME} include dirs\" FORCE)\n```\n\n----------------------------------------\n\nTITLE: Module Logic Build Macro\nDESCRIPTION: Uses the SlicerMacroBuildModuleLogic macro to build the module's logic component. It passes the previously defined variables as arguments.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/Logic/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nSlicerMacroBuildModuleLogic(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: BRAINSFit Longitudinal Registration\nDESCRIPTION: This snippet demonstrates a BRAINSFit command for longitudinal registration of a follow-up T1 scan to a baseline T1 scan of the same subject.  It sets fixed and moving volumes, output volume and transform, transform type, histogram matching, initialization mode, mask processing mode, dilation size, and interpolation mode.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/modules/brainsfit.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nBRAINSFit --fixedVolume test.nii.gz \\\n    --movingVolume test2.nii.gz \\\n    --outputVolume testT1LongRegFixed.nii.gz \\\n    --outputTransform longToBase.xform \\\n    --transformType Rigid \\\n    --histogramMatch \\\n    --initializeTransformMode useCenterOfHeadAlign \\\n    --maskProcessingMode ROIAUTO \\\n    --ROIAutoDilateSize 3 \\\n    --interpolationMode Linear\n```\n\n----------------------------------------\n\nTITLE: Conditional VTK Python Wrapping Check\nDESCRIPTION: This snippet checks if Python wrapping is enabled for VTK when `Slicer_USE_PYTHONQT` is also enabled. If `Slicer_USE_PYTHONQT` is ON and `VTK_WRAP_PYTHON` is OFF, it generates a fatal error, requiring VTK to be reconfigured with Python wrapping support. This ensures compatibility between Qt and Python interfaces within Slicer.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/Logic/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_USE_PYTHONQT AND NOT VTK_WRAP_PYTHON)\n  message(FATAL_ERROR \"Since Slicer_USE_PYTHONQT is ON, VTK_WRAP_PYTHON is expected to be ON. \"\n                      \"Re-configure VTK with python wrapping.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Module Logic in CMake\nDESCRIPTION: This snippet utilizes the `SlicerMacroBuildModuleLogic` custom macro to build the module's logic.  It passes essential parameters such as the module name, export directive, include directories, source files, and target libraries to configure the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/MRMLDM/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nSlicerMacroBuildModuleLogic(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting source files\nDESCRIPTION: This snippet defines the source files for the MRMLCLI library. It sets the variable `MRMLCLI_SRCS` to contain the list of source files, which in this case is `vtkMRMLCommandLineModuleNode.cxx`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/CLI/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(MRMLCLI_SRCS\n  vtkMRMLCommandLineModuleNode.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding ITK Package\nDESCRIPTION: This snippet finds the ITK package, specifying required components like ITKCommon, ITKIOGDCM, ITKIOImageBase, and ITKImageIntensity. It ensures ITK version 4.6 or higher is found. The include statement provides access to ITK functionality.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CreateDICOMSeries/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKCommon\n  ITKIOGDCM\n  ITKIOImageBase\n  ITKImageIntensity\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories in CMake\nDESCRIPTION: Adds subdirectories for the module's components: MRML, Logic, MRMLDM, Widgets and SubjectHierarchyPlugins. These subdirectories presumably contain their own CMakeLists.txt files to define build processes for the individual components.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(MRML)\nadd_subdirectory(Logic)\nadd_subdirectory(MRMLDM)\nadd_subdirectory(Widgets)\nadd_subdirectory(SubjectHierarchyPlugins)\n```\n\n----------------------------------------\n\nTITLE: Configuring header file\nDESCRIPTION: This snippet configures a header file (`vtkSlicerBaseCLIConfigure.h`) from a template.  The `configure_file` command copies the `.in` file to the binary directory, substituting any CMake variables used within the template.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/CLI/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(configure_header_file vtkSlicerBaseCLIConfigure.h)\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/${configure_header_file}.in\n  ${CMAKE_CURRENT_BINARY_DIR}/${configure_header_file}\n  )\n```\n\n----------------------------------------\n\nTITLE: Find OpenSSL Package\nDESCRIPTION: Finds the OpenSSL library using CMake's `find_package` command, but only if the `Slicer_USE_PYTHONQT_WITH_OPENSSL` variable is set. The `REQUIRED` keyword ensures that the build process will stop if OpenSSL is not found when needed.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/RemoteIO/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_USE_PYTHONQT_WITH_OPENSSL)\n  find_package(OpenSSL REQUIRED)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Resources\nDESCRIPTION: Specifies the resource files (.qrc) that define the module's resources, such as icons and other assets. The resource compiler processes these files to embed the resources into the application.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_RESOURCES\n  Resources/qSlicer${MODULE_NAME}Module.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Compiling Python Scripts for Displayable Manager (CMake)\nDESCRIPTION: This CMake macro compiles the Python scripts defined in `displayableManager_PYTHON_SCRIPTS` into executables.  It defines the target name, specifies the destination directory for the generated executables within the build directory, and sets the installation directory where the executables will be placed after installation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/DisplayableManager/Python/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nctkMacroCompilePythonScript(\n  TARGET_NAME mrmlDisplayableManager\n  SCRIPTS \"${displayableManager_PYTHON_SCRIPTS}\"\n  DESTINATION_DIR ${Slicer_BINARY_DIR}/bin/Python\n  INSTALL_DIR ${Slicer_INSTALL_BIN_DIR}\n  )\n```\n\n----------------------------------------\n\nTITLE: Building CLI using SEMMacroBuildCLI (CMake)\nDESCRIPTION: This snippet uses the SEMMacroBuildCLI macro to configure the build process for the command-line interface (CLI) of the ResampleDTIVolume module. It specifies the module name, logo header, additional source files, target libraries, and include directories. The macro handles generating the CLI executable and associated files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleDTIVolume/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/NAMICLogo.h\n  ADDITIONAL_SRCS\n    dtiprocessFiles/deformationfieldio.h\n    dtiprocessFiles/deformationfieldio.cxx\n    dtiprocessFiles/itkHFieldToDeformationFieldImageFilter.h\n    dtiprocessFiles/itkHFieldToDeformationFieldImageFilter.txx\n  TARGET_LIBRARIES ModuleDescriptionParser ${ITK_LIBRARIES}\n  INCLUDE_DIRECTORIES\n    ${SlicerBaseCLI_SOURCE_DIR} ${SlicerBaseCLI_BINARY_DIR}\n  )\n```\n\n----------------------------------------\n\nTITLE: Set Module UI Source Files in CMake\nDESCRIPTION: Specifies the user interface files (UI files) that define the module's graphical interface. These files are created using Qt Designer and are used to generate C++ code for the module's widgets. The UI files define the layout and widgets of the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Sequences/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_UI_SRCS\n  Resources/UI/qSlicer${MODULE_NAME}ModuleWidget.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Module Logic with SlicerMacro in CMake\nDESCRIPTION: This snippet utilizes the `SlicerMacroBuildModuleLogic` macro to build the module logic component. It passes the module name, export directive, include directories, source files, and target libraries as arguments to the macro.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Texts/Logic/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleLogic(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Build Scripted Module (CMake)\nDESCRIPTION: This snippet uses the slicerMacroBuildScriptedModule macro to configure the build process for the VectorToScalarVolume module. It passes the module's name, scripts, and resources to the macro, and also enables generic tests. The macro handles tasks such as generating necessary build files and linking dependencies.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/VectorToScalarVolume/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroBuildScriptedModule(\n  NAME ${MODULE_NAME}\n  SCRIPTS ${MODULE_PYTHON_SCRIPTS}\n  RESOURCES ${MODULE_PYTHON_RESOURCES}\n  WITH_GENERIC_TESTS\n  )\n```\n\n----------------------------------------\n\nTITLE: Registering Simple Tests in CMake\nDESCRIPTION: Registers simple tests using the `simple_test` command in CMake. This command creates test targets for each specified test name, allowing them to be executed as part of the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Cameras/Testing/Cxx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nsimple_test(qSlicerCamerasModuleWidgetTest1)\nsimple_test(vtkSlicerCamerasModuleLogicCopyImportedCamerasTest)\n```\n\n----------------------------------------\n\nTITLE: Setting module Python scripts\nDESCRIPTION: This snippet defines the Python scripts associated with the module.  It creates a list of Python files to be included in the module's build process. In this case, it contains ${MODULE_NAME}.py which corresponds to ScriptedLoadableModuleTemplate.py.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/ScriptedLoadableExtensionTemplate/ScriptedLoadableModuleTemplate/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_PYTHON_SCRIPTS\n  ${MODULE_NAME}.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Building the module using a Slicer macro in CMake\nDESCRIPTION: This snippet uses a custom CMake macro (`SlicerMacroBuildModuleMRML`) to build the module. The macro takes the module's name, export directive, include directories, source files, and target libraries as input.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/MRML/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nSlicerMacroBuildModuleMRML(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Including Python Subdirectory in CMake\nDESCRIPTION: This CMake command adds the 'Python' subdirectory to the build process. It allows CMake to locate and process the CMakeLists.txt file within the 'Python' directory, incorporating its build instructions into the main project's build.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Plots/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Python)\n```\n\n----------------------------------------\n\nTITLE: Defining Test Source Files (CMake)\nDESCRIPTION: This snippet defines a list of C++ source files that constitute the tests for the module. The `KIT_TEST_SRCS` variable stores the names of these source files, which are later compiled and linked into test executables. These are the source files that implement the test cases.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/Testing/Cxx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT_TEST_SRCS\n  qMRMLVolumePropertyNodeWidgetTest1.cxx\n  qSlicerPresetComboBoxTest.cxx\n  qSlicer${MODULE_NAME}ModuleWidgetTest1.cxx\n  qSlicer${MODULE_NAME}ModuleWidgetTest2.cxx\n  vtkMRMLShaderPropertyStorageNodeTest1.cxx\n  vtkMRMLVolumePropertyNodeTest1.cxx\n  vtkMRMLVolumePropertyStorageNodeTest1.cxx\n  vtkMRMLVolumeRenderingDisplayableManagerTest1.cxx\n  vtkMRMLVolumeRenderingMultiVolumeTest.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Build CLI with SEMMacroBuildCLI CMake\nDESCRIPTION: Uses the SEMMacroBuildCLI macro to configure the build process for the command-line interface (CLI). It specifies the module name, logo header, and target libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/AddScalarVolumes/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/ITKLogo.h\n  TARGET_LIBRARIES ${ITK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting UI Source Files CMake\nDESCRIPTION: This snippet defines a CMake variable `MRMLWidgets_UI_SRCS` containing a list of UI files (``.ui``) used in the MRMLWidgets library. These files describe the user interface elements and their layout.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nset(MRMLWidgets_UI_SRCS\n  Resources/UI/qMRMLClipNodeWidget.ui\n  Resources/UI/qMRMLClipNodeDisplayWidget.ui\n  Resources/UI/qMRMLDisplayNodeWidget.ui\n  Resources/UI/qMRMLEventLoggerWidget.ui\n  Resources/UI/qMRMLModelInfoWidget.ui\n  Resources/UI/qMRMLNodeAttributeTableView.ui\n  Resources/UI/qMRMLNodeAttributeTableWidget.ui\n  Resources/UI/qMRMLPlotViewControllerWidget.ui\n  Resources/UI/qMRMLROIWidget.ui\n  Resources/UI/qMRMLScalarsDisplayWidget.ui\n  Resources/UI/qMRMLSceneFactoryWidget.ui\n  Resources/UI/qMRMLScreenShotDialog.ui\n  Resources/UI/qMRMLSegmentSelectorWidget.ui\n  Resources/UI/qMRMLSliceControllerWidget.ui\n  Resources/UI/qMRMLSliceInformationWidget.ui\n  Resources/UI/qMRMLSliceVerticalControllerWidget.ui\n  Resources/UI/qMRMLSliceWidget.ui\n  Resources/UI/qMRMLTableViewControllerWidget.ui\n  Resources/UI/qMRMLThreeDViewControllerWidget.ui\n  Resources/UI/qMRMLThreeDViewInformationWidget.ui\n  Resources/UI/qMRMLTransformSliders.ui\n  Resources/UI/qMRMLVolumeInfoWidget.ui\n  Resources/UI/qMRMLVolumeThresholdWidget.ui\n  Resources/UI/qMRMLWindowLevelWidget.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Checking Linker Symbol Resolution\nDESCRIPTION: This code snippet checks if the linker will resolve symbols of underlinked libraries on Unix-like systems (excluding Apple). If the `Slicer_LINKER_NO_AS_NEEDED_FLAG_REQUIRED` variable is set, it adds the `-Wl,--no-as-needed` flag to the linker flags, forcing the linker to resolve all symbols.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nif(UNIX AND NOT APPLE)\n  include(SlicerLinkerAsNeededFlagCheck)\n  if(Slicer_LINKER_NO_AS_NEEDED_FLAG_REQUIRED)\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -Wl,--no-as-needed\"\n      CACHE STRING \"Flags used by the linker\"\n      FORCE)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Cxx Test Driver CMake\nDESCRIPTION: This snippet uses a macro, `slicerMacroConfigureModuleCxxTestDriver`, to configure the test driver.  It specifies the module name (`KIT`), source files (`KIT_TEST_SRCS`), include directories, target libraries (including logic and module libraries), and enables debug leak and error output checks.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SceneViews/Testing/Cxx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nslicerMacroConfigureModuleCxxTestDriver(\n  NAME ${KIT}\n  SOURCES ${KIT_TEST_SRCS}\n  INCLUDE_DIRECTORIES ${vtkSlicerSequencesModuleLogic_INCLUDE_DIRS}\n  TARGET_LIBRARIES vtkSlicer${MODULE_NAME}ModuleLogic qSlicer${MODULE_NAME}Module vtkSlicerSequencesModuleLogic\n  WITH_VTK_DEBUG_LEAKS_CHECK\n  WITH_VTK_ERROR_OUTPUT_CHECK\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Executable\nDESCRIPTION: This snippet adds an executable named `${KIT}CxxTests` using the `ctk_add_executable_utf8` command. It specifies the source files to be included in the executable, including those defined by the `Tests`, `DisplayableManagerTest_SRCS`, and `DisplayableManagerInstantiatorTest_SRCS` variables.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/DisplayableManager/Testing/Cxx/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nctk_add_executable_utf8(${KIT}CxxTests\n  ${Tests}\n  ${DisplayableManagerTest_SRCS}\n  ${DisplayableManagerInstantiatorTest_SRCS})\n```\n\n----------------------------------------\n\nTITLE: Set Module Export Directive - CMake\nDESCRIPTION: Sets the module export directive, which is used to control the visibility of symbols exported from the module. The directive is based on the uppercase module name.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_EXPORT_DIRECTIVE \"Q_SLICER_QTMODULES_${MODULE_NAME_UPPER}_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for Designer Plugins and Testing\nDESCRIPTION: Conditionally adds subdirectories for building Qt Designer plugins and running tests. The DesignerPlugins subdirectory is included only if Slicer_BUILD_QT_DESIGNER_PLUGINS is enabled, and the Testing subdirectory is included only if BUILD_TESTING is enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Plots/Widgets/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_BUILD_QT_DESIGNER_PLUGINS)\n  add_subdirectory(DesignerPlugins)\nendif()\n\n#-----------------------------------------------------------------------------\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name and Data Management Target\nDESCRIPTION: Defines the module name and sets the data management target. If `SEM_DATA_MANAGEMENT_TARGET` is not defined, it defaults to the module name plus \"Data\".\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GrayscaleGrindPeakImageFilter/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(CLP ${MODULE_NAME})\n\nif(NOT DEFINED SEM_DATA_MANAGEMENT_TARGET)\n  set(SEM_DATA_MANAGEMENT_TARGET ${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Export Directive - CMake\nDESCRIPTION: Defines the export directive for the library. The export directive (Q_SLICER_MODULE_${MODULE_NAME_UPPER}_WIDGETS_EXPORT) is used to control symbol visibility when building shared libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/Widgets/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_EXPORT_DIRECTIVE \"Q_SLICER_MODULE_${MODULE_NAME_UPPER}_WIDGETS_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Setting Qt Requirements\nDESCRIPTION: This code snippet sets the required Qt version for the project. It defaults to Qt 5.15 on Windows and macOS, but relaxes the requirement to Qt 5.12 on Linux to accommodate older systems. The `Slicer_REQUIRED_QT_VERSION` variable is marked as a superbuild variable.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED Slicer_REQUIRED_QT_VERSION)\n  # Official builds and tests are performed with Qt-5.15 on all platforms,\n  # but since it is not easy to get latest Qt versions on Linux, the version\n  # requirement is relaxed on Linux so that it builds on Ubuntu-20.04.\n  # See https://github.com/Slicer/Slicer/issues/5804 for more details.\n  if(UNIX AND NOT APPLE)\n    # Linux\n    set(_required_qt_version \"5.12\")\n  else()\n    # Windows and macOS\n    set(_required_qt_version \"5.15\")\n  endif()\n  set(Slicer_REQUIRED_QT_VERSION ${_required_qt_version} CACHE STRING \"Minimum required Qt version\" FORCE)\nendif()\nmark_as_superbuild(Slicer_REQUIRED_QT_VERSION)\n```\n\n----------------------------------------\n\nTITLE: Module Logic CMake Configuration\nDESCRIPTION: This CMake snippet configures the build settings for a vtkSlicer module's logic component. It defines the project name, export directive, include directories, source files, and target libraries. The `SlicerMacroBuildModuleLogic` macro is then called to build the module using the defined settings.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SceneViews/Logic/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleLogic)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_LOGIC_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSlicerSequencesModuleMRML_INCLUDE_DIRS}\n  ${vtkSlicerSequencesModuleLogic_INCLUDE_DIRS}\n  ${CMAKE_CURRENT_SOURCE_DIR}/../GUI\n  ${CMAKE_CURRENT_BINARY_DIR}/..\n  )\n\nset(${KIT}_SRCS\n  vtkSlicer${MODULE_NAME}ModuleLogic.cxx\n  vtkSlicer${MODULE_NAME}ModuleLogic.h\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  vtkSlicerSequencesModuleLogic\n  )\n\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleLogic(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting MRML Scene Filename\nDESCRIPTION: This CMake snippet sets the SCENEFILENAME variable from the first argument provided. It then extracts external files to download, using the '|' delimiter. The code configures the scene file path and assigns external files to the _externalfiles variable if they exist.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/Testing/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(SCENEFILENAME ${ARGV1})\n\n# Extract list of external files to download. Note that the ${_externalfiles} variable\n# is only specified to trigger download of data files used in the scene, the arguments\n# are NOT explicitly used in ${KIT}CxxTests test executable.\nstring(REPLACE \"|\" \";\" scenefilename_and_externalfiles ${SCENEFILENAME})\nlist(GET scenefilename_and_externalfiles 0 SCENEFILENAME)\nlist(LENGTH scenefilename_and_externalfiles _length)\nif(_length EQUAL 2)\n  configure_file(\n    ${MRMLCore_SOURCE_DIR}/Testing/${SCENEFILENAME}\n    ${MRMLCore_BINARY_DIR}/Testing/${SCENEFILENAME}\n    COPYONLY\n    )\n  set(_scenefile ${MRMLCore_BINARY_DIR}/Testing/${SCENEFILENAME})\n  list(GET scenefilename_and_externalfiles 1 _externalfiles)\nelse()\n  set(_scenefile ${MRMLCore_SOURCE_DIR}/Testing/${SCENEFILENAME})\n  set(_externalfiles \"\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Wrapping with Python\nDESCRIPTION: This snippet handles Python wrapping for the library if `VTK_WRAP_PYTHON` is enabled. It includes the `vtkMacroKitPythonWrap` module, defines a placeholder for wrapped libraries, and calls `vtkMacroKitPythonWrap` to generate the Python wrapping code. It then exports the Python target and sets the folder property for the Python module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/CLI/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif(VTK_WRAP_PYTHON)\n  include(vtkMacroKitPythonWrap)\n\n  set(_python_wrapped_libraries)\n\n  vtkMacroKitPythonWrap(\n    KIT_NAME ${lib_name}\n    KIT_SRCS ${MRMLCLI_SRCS}\n    KIT_PYTHON_LIBRARIES ${_python_wrapped_libraries}\n    KIT_INSTALL_BIN_DIR ${${PROJECT_NAME}_INSTALL_BIN_DIR}\n    KIT_INSTALL_LIB_DIR ${${PROJECT_NAME}_INSTALL_LIB_DIR}\n    )\n  # Export target\n  export(TARGETS ${lib_name}Python APPEND FILE ${${PROJECT_NAME}_EXPORT_FILE})\n  # Folder\n  if(NOT \"${${PROJECT_NAME}_FOLDER}\" STREQUAL \"\")\n    set_target_properties(${lib_name}Python PROPERTIES FOLDER ${${PROJECT_NAME}_FOLDER})\n    if(TARGET ${lib_name}Hierarchy)\n      set_target_properties(${lib_name}Hierarchy PROPERTIES FOLDER ${${PROJECT_NAME}_FOLDER})\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Iterating through DICOM series using slicer.dicomDatabase (Python)\nDESCRIPTION: This script iterates through all patients, studies, and series in the DICOM database. For each series, it copies the DICOM instances to a temporary directory and performs an operation. Note that `convertedPath` should be defined.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/batch.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndb = slicer.dicomDatabase\npatients = db.patients()\npatientCount = 0\nfor patient in patients:\n  patientCount += 1\n  print(f\"Patient {patient} ({patientCount} of {len(patients)})\")\n  for study in db.studiesForPatient(patient):\n    print(f\"Study {study}\")\n    for series in db.seriesForStudy(study):\n      print(f\"Series {series}\")\n      temporaryDir = qt.QTemporaryDir()\n      for instanceUID in db.instancesForSeries(series):\n        qt.QFile.copy(db.fileForInstance(instanceUID), f\"{temporaryDir.path()}/{instanceUID}.dcm\")\n      patientID = slicer.dicomDatabase.instanceValue(instanceUID, '0010,0020')\n      outputPath = os.path.join(convertedPath, patientID, study, series, \"BatchResult\")\n      if not os.path.exists(outputPath):\n        os.makedirs(outputPath)\n      # do an operation here that processes the series into the outputPath\n```\n\n----------------------------------------\n\nTITLE: Setting Variables for Data Paths\nDESCRIPTION: This snippet sets the baseline and input data directories used in the module's tests. It uses CMake's `set` command to define variables `BASELINE` and `INPUT` based on relative paths to the `Data` directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/SubtractScalarVolumes/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(BASELINE ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Baseline)\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input)\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory in CMake\nDESCRIPTION: This snippet adds the Testing subdirectory to the build if the BUILD_TESTING variable is enabled. This allows to build and run the module's unit tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/Loadable/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: External Data Target Definition\nDESCRIPTION: This snippet conditionally defines an external data target using `ExternalData_add_target` if ${SEM_DATA_MANAGEMENT_TARGET} is equal to ${CLP}Data. This creates a target for downloading and managing external data required for the module. Dependency: ExternalData module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/N4ITKBiasFieldCorrection/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Test (CMake)\nDESCRIPTION: This snippet adds a test using `ExternalData_add_test`. The test compares a baseline label map with the result of smoothing an input label map using the module's entry point. Parameters such as `labelToSmooth`, `numberOfIterations`, `maxRMSError`, and `gaussianSigma` are passed to the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/LabelMapSmoothing/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(testname ${CLP}Test)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  --compare DATA{${BASELINE}/LabelMapSmoothingTest.nhdr,LabelMapSmoothingTest.raw.gz}\n            ${TEMP}/LabelMapSmoothingTest.nhdr\n  ModuleEntryPoint\n    --labelToSmooth 1\n    --numberOfIterations 50\n    --maxRMSError 0.01\n    --gaussianSigma 3\n   DATA{${INPUT}/CTHeadResampledOtsuSegmented.nhdr,CTHeadResampledOtsuSegmented.raw.gz}\n   ${TEMP}/LabelMapSmoothingTest.nhdr\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Installing header files\nDESCRIPTION: This snippet installs the header files. It first checks if `${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT` is defined and sets it to ON if not. If installation for development is enabled (i.e., `${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT` is OFF), it globs all `.h` files in the current source directory and installs them along with the configured header file to the `include/${PROJECT_NAME}` directory under the `Development` component.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/CLI/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT)\n  set(${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT ON)\nendif()\nif(NOT ${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT)\n  file(GLOB headers \"${CMAKE_CURRENT_SOURCE_DIR}/*.h\")\n  install(\n    FILES ${headers} ${CMAKE_CURRENT_BINARY_DIR}/${configure_header_file}\n    DESTINATION include/${PROJECT_NAME} COMPONENT Development)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Test Source Files CMake\nDESCRIPTION: This snippet defines the `KIT_TEST_SRCS` variable, which lists the C++ source files for the module's tests. It includes tests for various classes and functionalities related to markups nodes and logic. It also conditionally includes a test related to scene views if the corresponding module is enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Testing/Cxx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT_TEST_SRCS\n  vtkMRMLMarkupsDisplayNodeTest1.cxx\n  vtkMRMLMarkupsFiducialNodeTest1.cxx\n  vtkMRMLMarkupsNodeTest1.cxx\n  vtkMRMLMarkupsNodeTest2.cxx\n  vtkMRMLMarkupsNodeTest3.cxx\n  vtkMRMLMarkupsNodeTest4.cxx\n  vtkMRMLMarkupsNodeTest5.cxx\n  vtkMRMLMarkupsNodeTest6.cxx\n  vtkMRMLMarkupsFiducialStorageNodeTest2.cxx\n  vtkMRMLMarkupsFiducialStorageNodeTest3.cxx\n  vtkMRMLMarkupsStorageNodeTest1.cxx\n  vtkMRMLMarkupsStorageNodeTest2.cxx\n  vtkSlicerMarkupsLogicTest1.cxx\n  vtkSlicerMarkupsLogicTest2.cxx\n  vtkSlicerMarkupsLogicTest3.cxx\n  vtkSlicerMarkupsLogicTest4.cxx\n  vtkMRMLMarkupsNodeEventsTest.cxx\n  )\nif(_build_scene_views_module)\n  list(APPEND KIT_TEST_SRCS\n    vtkMarkupsAnnotationSceneTest.cxx\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name\nDESCRIPTION: This snippet sets the module name using the `set` command in CMake. The module is named `qSlicer${MODULE_NAME}Module`. The variable `MODULE_NAME` is intended to be replaced with the actual module name when the CMake script is processed.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperLoadableModuleTemplate/Testing/Cxx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT qSlicer${MODULE_NAME}Module)\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking Executable Target (CMake)\nDESCRIPTION: This snippet creates an executable target named `${CLP}Test` (e.g., `HistogramMatchingTest`) using `ctk_add_executable_utf8` and links it against the `${CLP}Lib` library and other libraries specified by `SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES`. It also sets properties such as labels and folder for the target.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/HistogramMatching/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nctk_add_executable_utf8(${CLP}Test ${CLP}Test.cxx)\ntarget_link_libraries(${CLP}Test ${CLP}Lib ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES})\nset_target_properties(${CLP}Test PROPERTIES LABELS ${CLP})\nset_target_properties(${CLP}Test PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Build Library\nDESCRIPTION: Builds the RemoteIO library using the specified source files.  It uses `add_library` to create the library target, specifying the library name and source files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/RemoteIO/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(lib_name ${PROJECT_NAME})\nset(srcs ${RemoteIO_SRCS})\n\nadd_library(${lib_name} ${srcs})\n```\n\n----------------------------------------\n\nTITLE: Setting include directories for the module in CMake\nDESCRIPTION: This snippet sets the include directories for the module. These directories contain header files required to compile the module's source code. It includes JsonCpp headers and source directory of another module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/MRML/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${JsonCpp_INCLUDE_DIR}\n  ${vtkSlicerMarkupsModuleMRML_SOURCE_DIR}\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Plot with Matplotlib and wxWidgets in Python\nDESCRIPTION: This snippet demonstrates how to create an interactive plot using Matplotlib with the wxAgg backend in 3D Slicer. It checks for matplotlib and wxPython installation. It downloads a sample volume, computes its histogram, sets Matplotlib to use the WXAgg backend to allow interactive plots within Slicer, and displays the plot using `matplotlib.pyplot.show(block=False)`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/plots.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntry:\n  import matplotlib\n  import wx\nexcept ModuleNotFoundError:\n  pip_install(\"matplotlib wxPython\")\n  import matplotlib\n\n# Get a volume from SampleData and compute its histogram\nimport SampleData\nimport numpy as np\nvolumeNode = SampleData.SampleDataLogic().downloadMRHead()\nhistogram = np.histogram(arrayFromVolume(volumeNode), bins=50)\n\n# Set matplotlib to use WXAgg backend\nimport matplotlib\nmatplotlib.use(\"WXAgg\")\n\n# Show an interactive plot\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots()\nax.plot(histogram[1][1:], histogram[0].astype(float()))\nax.grid(True)\nax.set_ylim((0, 4e5))\nplt.show(block=False)\n```\n\n----------------------------------------\n\nTITLE: Creating VTK Objects using vtkSmartPointer (Also Good)\nDESCRIPTION: This C++ code snippet presents another correct way to create VTK objects, this time using `vtkSmartPointer`. It automatically handles object deletion, preventing memory leaks. The smart pointer can also be used to take ownership of existing raw pointers. Use `vtkNew` when possible, as it has simpler syntax.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/advanced_topics.md#_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nvtkSmartPointer<MRMLScalarVolumeNode> vol=vtkSmartPointer<MRMLScalarVolumeNode>::New();\n///... do something, such as vol->GetImageData(), someObject->SetVolume(vol)...\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Test with Rotation and Affine Transform\nDESCRIPTION: This snippet defines a test case involving both rotation and affine transformations, using linear interpolation. The test assesses the module's capability to handle combined transformations and compares the resampled volume against the expected output.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleScalarVectorDWIVolume/Testing/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(RotationAndAffineFile ${ResampleDTIVolume_INPUT}/rotationAndAffine.tfm)\nset(testname ${CLP}RotationAndAffineTest)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  --compare\n    DATA{${INPUT}/MRHeadResampledRotationAndAffine.nrrd}\n    ${TEMP}/${testname}.nrrd\n  ModuleEntryPoint\n    -f ${RotationAndAffineFile}\n    --interpolation linear\n    -c\n    DATA{${INPUT}/MRHeadResampled.nhdr,MRHeadResampled.raw.gz}\n    ${TEMP}/${testname}.nrrd\n    --transform_order input-to-output\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Serving Static Content with WebServer in Python\nDESCRIPTION: This snippet demonstrates how to create a web server instance to serve static content from a specified directory. It uses the `StaticPagesRequestHandler` from `WebServerLib` to handle requests for files within the given document root.  The server is started on port 9916, and the logMessage parameter enables printing of messages.  Remember to stop the server using `logic.stop()` when done.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/webserver.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport WebServer\nimport WebServerLib\n# serve content from the temp directory on port 9916 and print all messages\nhandler = WebServerLib.StaticPagesRequestHandler(docroot=b\"/tmp\", logMessage=print)\nlogic = WebServer.WebServerLogic(port=9916, requestHandlers=[handler], logMessage=print)\nlogic.start()\nprint(f\"Open 'http://localhost:{logic.port}'\")\n# stop later with logic.stop()\n```\n\n----------------------------------------\n\nTITLE: Testing Scripted Module Discovery\nDESCRIPTION: Adds a test to check if scripted module import works as expected.  It verifies that Slicer can discover and load scripted modules from a specified directory. The test checks for the correct finalization of the module and ensures that Python exceptions are handled correctly.\nSOURCE: https://github.com/slicer/slicer/blob/main/Applications/SlicerApp/Testing/Python/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nset(testname ScriptedModuleDiscoveryTest)\nslicer_add_python_test(\n  SCRIPT ${testname}.py\n  SLICER_ARGS --no-main-window --disable-builtin-modules --additional-module-path ${CMAKE_CURRENT_SOURCE_DIR}/ScriptedModuleDiscoveryTest\n  TESTNAME_PREFIX nomainwindow_\n  )\nif(UNIX)\nset_tests_properties(py_nomainwindow_${testname} PROPERTIES\n  PASS_REGULAR_EXPRESSION \"ModuleAWidget finalized\"\n  # Workaround the fact using PASS_REGULAR_EXPRESSION ignores return code\n  # by checking for output characteristics of Python exceptions.\n  #\n  # This is needed because the message \"ModuleAWidget finalized\" is displayed\n  # early on before potential python exceptions.\n  #\n  # Note this is a partial workaround as non-python errors would not cause\n  # the test to fail.\n  #\n  # See https://github.com/jcfr/cmake-add_test-PASS_REGULAR_EXPRESSION\n  FAIL_REGULAR_EXPRESSION \"Traceback\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: External Data Test Configuration\nDESCRIPTION: This snippet configures an external data test using `ExternalData_add_test`. The test compares the output of the module with a baseline image. It takes an input mask image and volume, and produces a bias field and corrected volume. It defines the command to execute the test, specifying input and output files. Dependencies: ExternalData module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/N4ITKBiasFieldCorrection/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(testname ${CLP}Test)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  --compare DATA{${BASELINE}/he3corrected.nii.gz} ${TEMP}/he3corrected.nii.gz\n  ModuleEntryPoint\n  --maskimage DATA{${INPUT}/he3mask.nii.gz}\n  --outputbiasfield ${TEMP}/he3biasfield.nii.gz\n  DATA{${INPUT}/he3volume.nii.gz} ${TEMP}/he3corrected.nii.gz\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Fit Markups ROI to Volume - Python\nDESCRIPTION: This snippet creates a new markups ROI and fits it to a volume node. It retrieves a volume node named 'MRHead', creates a new ROI node, and then uses the Crop Volume module to snap and fit the ROI to the volume. The `SnapROIToVoxelGrid` is optional and rotates the ROI to match the volume axis directions. Finally, it removes the temporary crop volume parameters node.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nvolumeNode = getNode('MRHead')\n\n# Create a new ROI that will be fit to volumeNode\nroiNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLMarkupsROINode\")\n\ncropVolumeParameters = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLCropVolumeParametersNode\")\ncropVolumeParameters.SetInputVolumeNodeID(volumeNode.GetID())\ncropVolumeParameters.SetROINodeID(roiNode.GetID())\nslicer.modules.cropvolume.logic().SnapROIToVoxelGrid(cropVolumeParameters)  # optional (rotates the ROI to match the volume axis directions)\nslicer.modules.cropvolume.logic().FitROIToInputVolume(cropVolumeParameters)\nslicer.mrmlScene.RemoveNode(cropVolumeParameters)\n```\n\n----------------------------------------\n\nTITLE: Adding Remote Module using Slicer_Remote_Add CMake macro\nDESCRIPTION: This code snippet demonstrates how to add a remote module to Slicer using the `Slicer_Remote_Add` CMake macro within the `SuperBuild.cmake` file. The macro configures the external project build, specifying the Git repository, tag, option name, and labels for the remote module. This allows Slicer to incorporate external modules into its build process without requiring them to be part of the core Slicer repository.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/module_overview.md#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nSlicer_Remote_Add(Foo\n  GIT_REPOSITORY ${git_protocol}://github.com/awesome/foo\n  GIT_TAG abcdef\n  OPTION_NAME Slicer_BUILD_Foo\n  LABELS REMOTE_MODULE\n  )\nlist_conditional_append(Slicer_BUILD_Foo Slicer_REMOTE_DEPENDENCIES Foo)\n```\n\n----------------------------------------\n\nTITLE: Defining source and header files for Qt CLI plugins using CMake\nDESCRIPTION: This snippet defines the source files (SRCS) and headers (MOC_SRCS) that constitute the Qt CLI plugins.  The source files include the implementation of abstract plugins and progress bar plugins. Headers marked for MOC processing (using `set(${KIT}_MOC_SRCS ...)` are preprocessed to generate Qt meta-object code which enables features like signals and slots.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCLI/DesignerPlugins/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Source files\nset(${KIT}_SRCS\n  qSlicerQTCLIAbstractPlugin.cxx\n  qSlicerQTCLIAbstractPlugin.h\n  qSlicerQTCLIPlugins.cxx\n  qSlicerQTCLIPlugins.h\n\n  qSlicerCLIProgressBarPlugin.cxx\n  qSlicerCLIProgressBarPlugin.h\n  )\n\n# Headers that should run through moc\nset(${KIT}_MOC_SRCS\n  qSlicerQTCLIPlugins.h\n  qSlicerCLIProgressBarPlugin.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Connecting Widgets Piecewise using Dot Syntax - Python\nDESCRIPTION: This code snippet illustrates how widgets can be connected piecewise to parameter packs using dot syntax in the `SlicerParameterName` property. This allows binding specific sub-pieces of parameter packs within a parameter node wrapper to individual GUI elements, such as QDoubleSpinBoxes for x and y coordinates of points within a bounding box.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/parameter_nodes/gui_connection.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@parameterPack\nclass Point:\n  x: float\n  y: float\n\n@parameterPack\nclass BoundingBox:\n  topLeft: Point\n  bottomRight: Point\n\n@parameterNodeWrapper\nclass CustomParameterNode:\n  box: BoundingBox\n\n# In the .ui file, there could be 4 QDoubleSpinBoxes that had the following \"SlicerParameterName\"s\n#   box.topLeft.x\n#   box.topLeft.y\n#   box.bottomRight.x\n#   box.bottomRight.y\n#\n# Each of the QDoubleSpinBoxes would be bound to the appropriate sub-piece of the parameterPacks in\n# the parameterNodeWrapper\n```\n\n----------------------------------------\n\nTITLE: Building Qt Library\nDESCRIPTION: Calls the SlicerMacroBuildBaseQtLibrary macro to build the Qt library. This macro handles the compilation, linking, and moc processing steps.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTApp/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nSlicerMacroBuildBaseQtLibrary(\n  NAME ${PROJECT_NAME}\n  EXPORT_DIRECTIVE ${KIT_export_directive}\n  INCLUDE_DIRECTORIES ${KIT_include_directories}\n  SRCS ${KIT_SRCS}\n  MOC_SRCS ${KIT_MOC_SRCS}\n  UI_SRCS ${KIT_UI_SRCS}\n  TARGET_LIBRARIES ${KIT_target_libraries}\n  RESOURCES ${KIT_resources}\n  WRAP_PYTHONQT\n  )\n```\n\n----------------------------------------\n\nTITLE: Enabling system OpenSSL with CMake\nDESCRIPTION: This snippet demonstrates how to use the system OpenSSL library instead of the default one included with Slicer. This is useful for resolving compatibility issues with OpenSSL versions on certain systems like Debian 12.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/linux.md#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\ncmake -DSlicer_USE_SYSTEM_OpenSSL=ON ../Slicer\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Tests CMake\nDESCRIPTION: This snippet uses a macro, `simple_test`, to define individual tests. It takes the name of the test and, optionally, arguments such as a temporary directory. These tests are automatically executed as part of the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SceneViews/Testing/Cxx/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nsimple_test(vtkSceneViewEventsTest)\nsimple_test(vtkSceneViewImportSceneTest ${TEMP})\nsimple_test(vtkSceneViewStoreSceneTest)\nsimple_test(vtkSceneViewTest1)\nsimple_test(vtkSceneViewRestoreSceneTest)\n```\n\n----------------------------------------\n\nTITLE: Finding DCMTK package\nDESCRIPTION: This snippet uses `find_package` to locate the DCMTK package, making it a required dependency. This ensures DCMTK is available for DICOM-related operations.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/PETStandardUptakeValueComputation/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(DCMTK REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files\nDESCRIPTION: Defines the source files and header files for the MRML module. These source files likely contain the implementation of MRML nodes and related classes. Includes source and header files for JSON storage nodes.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/MRML/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  vtkMRML${MODULE_NAME}JsonElement.cxx\n  vtkMRML${MODULE_NAME}JsonElement.h\n  vtkMRML${MODULE_NAME}JsonStorageNode.cxx\n  vtkMRML${MODULE_NAME}JsonStorageNode.h\n  vtkMRML${MODULE_NAME}PlaneJsonStorageNode.cxx\n  vtkMRML${MODULE_NAME}PlaneJsonStorageNode.h\n  vtkMRML${MODULE_NAME}ROIJsonStorageNode.cxx\n  vtkMRML${MODULE_NAME}ROIJsonStorageNode.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Configure Header File\nDESCRIPTION: Configures a header file from a template file (vtkRemoteIOConfigure.h.in) to the binary directory (vtkRemoteIOConfigure.h).  This allows CMake to inject configuration values into the header file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/RemoteIO/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(configure_header_file vtkRemoteIOConfigure.h)\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/${configure_header_file}.in\n  ${CMAKE_CURRENT_BINARY_DIR}/${configure_header_file}\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding ExternalData Target (CMake)\nDESCRIPTION: This snippet conditionally adds an ExternalData target named `${CLP}Data` if `SEM_DATA_MANAGEMENT_TARGET` is equal to `${CLP}Data`. This likely manages the download of required external data files for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/HistogramMatching/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Header File CMake\nDESCRIPTION: This snippet configures a header file (`vtkMRMLLogicConfigure.h`) from a template (`vtkMRMLLogicConfigure.h.in`). It uses the `configure_file` command to process the template and generate the configured header file in the binary directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Logic/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(configure_header_file vtkMRMLLogicConfigure.h)\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/${configure_header_file}.in\n  ${CMAKE_CURRENT_BINARY_DIR}/${configure_header_file}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Input Data Directory\nDESCRIPTION: This snippet defines the INPUT variable, which specifies the directory containing test data for the module. It points to the Testing/TestData directory within the MRMLCore source directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/Testing/Cxx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INPUT \"${MRMLCore_SOURCE_DIR}/Testing/TestData/\")\n```\n\n----------------------------------------\n\nTITLE: Add Library and Link\nDESCRIPTION: Adds the vtkSegmentationCore library using the defined source files and links it with the specified libraries. Also includes compile flags for x86_64 architecture, if it is not WIN32\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkSegmentationCore/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories( ${vtkSegmentationCore_INCLUDE_DIRS} )\nadd_library(${PROJECT_NAME} ${vtkSegmentationCore_SRCS})\ntarget_link_libraries( ${PROJECT_NAME} ${vtkSegmentationCore_LIBS} )\n\nif (CMAKE_SYSTEM_PROCESSOR STREQUAL \"x86_64\" AND NOT WIN32)\n  set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS \"-fPIC\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Target Folder\nDESCRIPTION: Sets the folder property for the library target.  If ${PROJECT_NAME}_FOLDER is defined, it's used as the folder name in the IDE.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkITK/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_FOLDER)\n  set(${PROJECT_NAME}_FOLDER ${PROJECT_NAME})\nendif()\nif(NOT \"${${PROJECT_NAME}_FOLDER}\" STREQUAL \"\")\n  set_target_properties(${lib_name} PROPERTIES FOLDER ${${PROJECT_NAME}_FOLDER})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Driver\nDESCRIPTION: This snippet configures the module's test driver using the `slicerMacroConfigureModuleCxxTestDriver` macro. This macro handles the compilation, linking, and setup of the test executable. It sets the name, sources, and various flags such as memory leak checks and error output checks.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nslicerMacroConfigureModuleCxxTestDriver(\n  NAME ${KIT}\n  SOURCES ${KIT_TEST_SRCS}\n  WITH_VTK_DEBUG_LEAKS_CHECK\n  WITH_VTK_ERROR_OUTPUT_CHECK\n  )\n```\n\n----------------------------------------\n\nTITLE: BRAINSFit Mouse Registration\nDESCRIPTION: This snippet presents a BRAINSFit command for registering two different mouse brains.  It defines fixed and moving volumes, output volume and transform, transform type (including multiple transforms), histogram matching, initialization mode, mask processing mode, closing and dilation sizes, and interpolation mode.  The initialization transform mode is set to useMomentsAlign as it is for mouse brains and not human heads.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/modules/brainsfit.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nBRAINSFit --fixedVolume mouseFixed.nii.gz \\\n    --movingVolume mouseMoving.nii.gz \\\n    --outputVolume movingRegFixed.nii.gz \\\n    --outputTransform movingToFixed.xform \\\n    --transformType Rigid,ScaleVersor3D,ScaleSkewVersor3D,Affine,BSpline \\\n    --histogramMatch \\\n    --initializeTransformMode useMomentsAlign \\\n    --maskProcessingMode ROIAUTO \\\n    --ROIAutoClosingSize 0.9 \\\n    --ROIAutoDilateSize 0.9 \\\n    --interpolationMode Linear\n```\n\n----------------------------------------\n\nTITLE: Defining Include Directories\nDESCRIPTION: Defines the include directories required for the project. It includes source and binary directories of dependent modules like qSlicerBaseQTCore, qSlicerBaseQTGUI, and qSlicerModulesCore.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTApp/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT_include_directories\n  ${qSlicerBaseQTCore_SOURCE_DIR}\n  ${qSlicerBaseQTCore_BINARY_DIR}\n  ${qSlicerBaseQTGUI_SOURCE_DIR}\n  ${qSlicerBaseQTGUI_BINARY_DIR}\n  ${qSlicerModulesCore_SOURCE_DIR}\n  ${qSlicerModulesCore_BINARY_DIR}\n  )\n```\n\n----------------------------------------\n\nTITLE: Project Definition & Variable Setup - CMake\nDESCRIPTION: This snippet defines the project name and sets up various CMake variables used throughout the build process. It sets the export directive, include directories (currently empty), source files, meta-object compiler (MOC) sources, UI sources, resources, and target libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/Widgets/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(qSlicer${MODULE_NAME}ModuleWidgets)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"Q_SLICER_QTMODULES_${MODULE_NAME_UPPER}_WIDGETS_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  )\n\nset(${KIT}_SRCS\n  qSlicerDiffusionTensorVolumeDisplayWidget.cxx\n  qSlicerDiffusionTensorVolumeDisplayWidget.h\n  qSlicerDiffusionWeightedVolumeDisplayWidget.cxx\n  qSlicerDiffusionWeightedVolumeDisplayWidget.h\n  qSlicerLabelMapVolumeDisplayWidget.cxx\n  qSlicerLabelMapVolumeDisplayWidget.h\n  qSlicerScalarVolumeDisplayWidget.cxx\n  qSlicerScalarVolumeDisplayWidget.h\n  qSlicerVolumeDisplayWidget.cxx\n  qSlicerVolumeDisplayWidget.h\n  qSlicerDTISliceDisplayWidget.cxx\n  qSlicerDTISliceDisplayWidget.h\n  )\n\nset(${KIT}_MOC_SRCS\n  qSlicerDiffusionTensorVolumeDisplayWidget.h\n  qSlicerDiffusionWeightedVolumeDisplayWidget.h\n  qSlicerLabelMapVolumeDisplayWidget.h\n  qSlicerScalarVolumeDisplayWidget.h\n  qSlicerVolumeDisplayWidget.h\n  qSlicerDTISliceDisplayWidget.h\n  )\n\nset(${KIT}_UI_SRCS\n  Resources/UI/qSlicerDiffusionTensorVolumeDisplayWidget.ui\n  Resources/UI/qSlicerDiffusionWeightedVolumeDisplayWidget.ui\n  Resources/UI/qSlicerDTISliceDisplayWidget.ui\n  Resources/UI/qSlicerLabelMapVolumeDisplayWidget.ui\n  Resources/UI/qSlicerScalarVolumeDisplayWidget.ui\n  )\n\nset(${KIT}_RESOURCES\n  Resources/qSlicer${MODULE_NAME}WidgetsModule.qrc\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  vtkSlicerVolumesModuleLogic\n  )\n```\n\n----------------------------------------\n\nTITLE: Find CTK Package CMake\nDESCRIPTION: Finds the CTK package using `find_package` and includes the CTK use file. CTK is the Common Toolkit.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_63\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(CTK REQUIRED)\ninclude(${CTK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories Variable\nDESCRIPTION: Sets the `${PROJECT_NAME}_INCLUDE_DIRS` variable to include the source and binary directories. This variable is used to provide include directories to dependent projects.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/IDImageIO/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nset(${PROJECT_NAME}_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR}\n  CACHE INTERNAL \"${PROJECT_NAME} include dirs\" FORCE)\n```\n\n----------------------------------------\n\nTITLE: Set Module Resources - CMake\nDESCRIPTION: Defines the resource files for the Transforms module. These files contain images, icons, and other resources used by the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_RESOURCES\n  Resources/qSlicer${MODULE_NAME}Module.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Qt Designer Plugin using CMake Macro\nDESCRIPTION: This snippet utilizes the `ctkMacroBuildQtDesignerPlugin` macro to build the Qt Designer plugin. It passes in the plugin's name, export directive, folder, source files, moc source files, and target libraries as parameters. The macro handles the necessary build steps for creating the plugin.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n#-----------------------------------------------------------------------------\nctkMacroBuildQtDesignerPlugin(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT}\n  FOLDER \"Module-${MODULE_NAME}\"\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Set Resources - CMake\nDESCRIPTION: Specifies the resource files (.qrc) that contain images, translations, and other resources used by the module.  These resources are embedded into the application executable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/Widgets/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_RESOURCES\n  Resources/${KIT}.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name\nDESCRIPTION: This snippet sets the module name using the `qSlicer${MODULE_NAME}Module` format and assigns it to the `KIT` variable. This variable is likely used throughout the file for referencing the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Units/Testing/Cxx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT qSlicer${MODULE_NAME}Module)\n```\n\n----------------------------------------\n\nTITLE: Finding qRestAPI Package\nDESCRIPTION: Conditionally finds the qRestAPI package if either Slicer's Extension Manager or Application Update support is enabled. This allows the project to use RESTful API functionalities for extension management and application updates.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_BUILD_EXTENSIONMANAGER_SUPPORT OR Slicer_BUILD_APPLICATIONUPDATE_SUPPORT)\n  find_package(qRestAPI REQUIRED)\n  include(${qRestAPI_USE_FILE})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting MRML Application Properties\nDESCRIPTION: This snippet sets various MRML application properties such as name, version, revision, and supported version using CMake's `set` command and `math` and `string` commands to compute the version in hexadecimal format. These properties are also cached for later use.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(MRML_APPLICATION_NAME \"${Slicer_MAIN_PROJECT_APPLICATION_NAME}\" CACHE STRING \"Current MRML scene creator application name\" FORCE)\n\n# Convert version to 0xXXYYZZ format where XX=major, YY=minor, ZZ=patch version in hexadecimal.\n# Add a leading 1 (256*256*256*1) to force having a leading 0 for major version (e.g., 04 instead of just 4)\nmath(EXPR MRML_APPLICATION_VERSION_HEX \"1 << 24\n  | ${Slicer_MAIN_PROJECT_VERSION_MAJOR} << 16\n  | ${Slicer_MAIN_PROJECT_VERSION_MINOR} << 8\n  | ${Slicer_MAIN_PROJECT_VERSION_PATCH}\"\n  OUTPUT_FORMAT HEXADECIMAL)\n\n# Remove leading 1 (remove 0x1 and add back just 0x)\nstring(SUBSTRING \"${MRML_APPLICATION_VERSION_HEX}\" 3 6 MRML_APPLICATION_VERSION_HEX)\nset(MRML_APPLICATION_VERSION \"0x${MRML_APPLICATION_VERSION_HEX}\" CACHE STRING \"Current MRML application version\" FORCE)\n\nset(MRML_APPLICATION_REVISION \"${Slicer_MAIN_PROJECT_REVISION}\" CACHE STRING \"Current MRML application revision number\" FORCE)\n\n# MRML supports Slicer3 and Slicer4 scenes\nset(MRML_APPLICATION_SUPPORT_VERSION \"0x030000\" CACHE STRING \"MRML application version to support\" FORCE)\n\nmessage(STATUS \"Configuring MRML\")\nmessage(STATUS \"  MRML_APPLICATION_NAME is ${MRML_APPLICATION_NAME}\")\nmessage(STATUS \"  MRML_APPLICATION_VERSION is ${MRML_APPLICATION_VERSION}\")\nmessage(STATUS \"  MRML_APPLICATION_REVISION is ${MRML_APPLICATION_REVISION}\")\nmessage(STATUS \"  MRML_APPLICATION_SUPPORT_VERSION is ${MRML_APPLICATION_SUPPORT_VERSION}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Test Executable\nDESCRIPTION: Creates an executable for the tests using `create_test_sourcelist` and `ctk_add_executable_utf8`. It links the executable against the project's library and sets properties such as labels and folder.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCLI/Testing/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_TESTDRIVER_BEFORE_TESTMAIN \"DEBUG_LEAKS_ENABLE_EXIT_ERROR();\" )\ncreate_test_sourcelist(Tests ${KIT}CxxTests.cxx\n  ${KIT_TEST_SRCS}\n  EXTRA_INCLUDE vtkMRMLDebugLeaksMacro.h\n  )\n\nctk_add_executable_utf8(${KIT}CxxTests ${Tests})\ntarget_link_libraries(${KIT}CxxTests ${KIT})\nset_target_properties(${KIT}CxxTests PROPERTIES LABELS ${KIT})\nset_target_properties(${KIT}CxxTests PROPERTIES FOLDER \"Core-Base\")\n```\n\n----------------------------------------\n\nTITLE: Creating Executable with ctk_add_executable_utf8 in CMake\nDESCRIPTION: This snippet uses `ctk_add_executable_utf8` to create the SFLSRobustStat3DTestConsole executable from SFLSRobustStat3DTestConsole.cxx. It then links the executable against the ${CLP}Lib and SlicerExecutionModel libraries.  Properties such as LABELS and FOLDER are also set for the target.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/RobustStatisticsSegmenter/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(${CMAKE_CURRENT_SOURCE_DIR}/..)\nctk_add_executable_utf8(SFLSRobustStat3DTestConsole SFLSRobustStat3DTestConsole.cxx)\ntarget_link_libraries(SFLSRobustStat3DTestConsole ${CLP}Lib ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES})\nset_target_properties(SFLSRobustStat3DTestConsole PROPERTIES LABELS ${CLP})\nset_target_properties(SFLSRobustStat3DTestConsole PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Setting MOC Source Files in CMake\nDESCRIPTION: Specifies the header files that require processing by the Meta-Object Compiler (MOC). These header files typically contain Qt-specific features like signals and slots.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Data/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_MOC_SRCS\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  qSlicerSceneReader.h\n  qSlicerSceneIOOptionsWidget.h\n  qSlicerSceneWriter.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Header File Configuration\nDESCRIPTION: This snippet configures a header file using `configure_file`. It takes an input header file (`itkFactoryRegistrationConfigure.h.in`) and generates an output header file (`itkFactoryRegistrationConfigure.h`) in the binary directory.  This allows CMake to inject configuration values into the header file. Dependencies: CMAKE_CURRENT_SOURCE_DIR, CMAKE_CURRENT_BINARY_DIR.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/ITKFactoryRegistration/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# --------------------------------------------------------------------------\n# Configure headers\n# --------------------------------------------------------------------------\nset(configure_header_file itkFactoryRegistrationConfigure.h)\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/${configure_header_file}.in\n  ${CMAKE_CURRENT_BINARY_DIR}/${configure_header_file}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting CLP Module Name and Data Management Target\nDESCRIPTION: This snippet sets the CLP variable to the module name and initializes the SEM_DATA_MANAGEMENT_TARGET variable. If SEM_DATA_MANAGEMENT_TARGET is not already defined, it's set to the value of CLP with \"Data\" appended. This controls the target responsible for managing external data dependencies.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleScalarVectorDWIVolume/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(CLP ${MODULE_NAME})\n\nif(NOT DEFINED SEM_DATA_MANAGEMENT_TARGET)\n  set(SEM_DATA_MANAGEMENT_TARGET ${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory\nDESCRIPTION: This CMake code block checks if the BUILD_TESTING variable is enabled. If it is, it adds the 'Testing' subdirectory to the build process, which includes the tests for the ProbeVolumeWithModel module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ProbeVolumeWithModel/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Resources\nDESCRIPTION: Defines the MODULE_RESOURCES variable containing a list of resource files (.qrc) used by the Volumes module. These files can include images, icons, and other non-code assets.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_RESOURCES\n  Resources/qSlicer${MODULE_NAME}Module.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Compiling Python Scripts (CMake)\nDESCRIPTION: This CMake snippet invokes a custom macro, `ctkMacroCompilePythonScript`, to compile the Python scripts listed in `Slicer_PYTHON_SCRIPTS`.  It takes several parameters including the target name, script list, resource list, destination directory for the compiled scripts, and installation directory. This macro likely handles the creation of executables or shared libraries from the Python scripts, embedding the Python interpreter and dependencies within them.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/Python/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nctkMacroCompilePythonScript(\n  TARGET_NAME SlicerBase\n  SCRIPTS \"${Slicer_PYTHON_SCRIPTS}\"\n  RESOURCES \"${Slicer_PYTHON_RESOURCES}\"\n  DESTINATION_DIR ${Slicer_BINARY_DIR}/bin/Python\n  INSTALL_DIR ${Slicer_INSTALL_BIN_DIR}\n  )\n```\n\n----------------------------------------\n\nTITLE: Generating Meta-Object Code (MOC) for Qt\nDESCRIPTION: This snippet specifies the header files that require MOC processing and generates the necessary MOC files using the QT5_WRAP_CPP and QT5_GENERATE_MOCS commands. It also sets compiler options for MOC.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/Testing/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(Tests_MOC_SRCS qMRMLNodeObject.h)\nset(Tests_UtilityFiles\n  qMRMLNodeObject.cxx\n  qMRMLNodeObject.h\n  )\n\nset(KIT_TEST_GENERATE_MOC_SRCS\n  qMRMLCheckableNodeComboBoxTest.cxx\n  qMRMLCollapsibleButtonTest.cxx\n  qMRMLColorModelTest.cxx\n  qMRMLDisplayNodeViewComboBoxTest.cxx\n  qMRMLLabelComboBoxTest.cxx\n  qMRMLLayoutManagerWithCustomFactoryTest.cxx\n  qMRMLNodeAttributeTableViewTest.cxx\n  qMRMLNodeAttributeTableWidgetTest.cxx\n  qMRMLSceneModelTest.cxx\n  qMRMLSliceControllerWidgetTest.cxx\n  )\n  set(_moc_options OPTIONS -DMRML_WIDGETS_HAVE_QT5)\n  QT5_WRAP_CPP(Tests_MOC_CXX ${Tests_MOC_SRCS} ${_moc_options})\n  QT5_GENERATE_MOCS(${KIT_TEST_GENERATE_MOC_SRCS})\n```\n\n----------------------------------------\n\nTITLE: Building Module Widgets - CMake\nDESCRIPTION: This snippet uses the `SlicerMacroBuildModuleWidgets` macro to build the module widgets. It passes the defined variables (name, export directive, include directories, sources, MOC sources, UI sources, target libraries, and resources) as arguments. It also specifies to wrap the module with PythonQt bindings.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/Widgets/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSlicerMacroBuildModuleWidgets(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  UI_SRCS ${${KIT}_UI_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  RESOURCES ${${KIT}_RESOURCES}\n  WRAP_PYTHONQT\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Kit Name\nDESCRIPTION: This snippet sets the `KIT` variable to the project name. This is likely used as a base name for other variables related to the build configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/Widgets/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Setting MRML Application Name and Version\nDESCRIPTION: This snippet sets the MRML application name, version, revision, and supported version using CMake's `set` command with the `CACHE STRING` option. The `mark_as_advanced` command is used to hide these variables from the user in the CMake GUI by default.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Core/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(MRML_APPLICATION_NAME \"Slicer\" CACHE STRING \"Current MRML scene creator application name\" )\nmark_as_advanced(MRML_APPLICATION_NAME)\n\n# The format is: 0xXXYYZZ where XX is the major version, YY the minor and\n# ZZ the patch version.\n# This format is chosen to allow easy comparison in C++ precompiler macros.\nset(MRML_APPLICATION_VERSION 0x040000 CACHE STRING \"Current MRML application version\" )\nmark_as_advanced(MRML_APPLICATION_VERSION)\n\n# Revision can be used to identify version with finer granularity than version.\n# It is an integer number that is incremented with each new software revision.\nset(MRML_APPLICATION_REVISION 0 CACHE STRING \"Current MRML application revision number\" )\nmark_as_advanced(MRML_APPLICATION_REVISION)\n\n# MRML scenes that are older than MRML_APPLICATION_SUPPORT_VERSION won't be supported.\n# Or said differently, MRML_APPLICATION_SUPPORT_VERSION is the earliest version supported\n# for a MRML scene.\n# The format is: 0xXXYYZZ where XX is the major version, YY the minor and\n# ZZ the patch version.\n# For example, set MRML_APPLICATION_SUPPORT_VERSION to 0x040000 if you don't want to\n# support scenes of Slicer 3.\n# Supports Slicer3 and Slicer4 scenes by default.\nset(MRML_APPLICATION_SUPPORT_VERSION 0x030000 CACHE STRING \"MRML application version to support\" )\nmark_as_advanced(MRML_APPLICATION_SUPPORT_VERSION)\n```\n\n----------------------------------------\n\nTITLE: Defining Scene List (CMake)\nDESCRIPTION: This CMake code defines a list of scenes to be tested, including data dependencies. Each scene entry consists of the scene's filename and optionally a DATA section specifying external files required for the scene.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Core/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset( ScenesToTest\n  clipCube.mrml\n  cube.mrml\n  diffusionEditor.mrml|DATA{${INPUT}/helix-DTI.nhdr,helix-DTI.raw.gz,helix-DWI.nhdr,helix-DWI.raw.gz}\n  helixGlyphs.mrml|DATA{${INPUT}/helix-DTI.nhdr,helix-DTI.raw.gz}\n  hier_test.mrml\n  multi_display.mrml|DATA{${INPUT}/cube.vtk}\n  name.mrml|DATA{${INPUT}/cube.vtk,fixed.nrrd,moving.nrrd}\n  SlicePipeline.mrml|DATA{${INPUT}/fixed.nrrd}\n  volumetric_mesh.mrml\n  vol_and_cube_camera.mrml|DATA{${INPUT}/fixed.nrrd,cube.vtk}\n  vol_and_cube.mrml|DATA{${INPUT}/fixed.nrrd,cube.vtk}\n  vol.mrml|DATA{${INPUT}/fixed.nrrd}\n  volScene.mrml|DATA{${INPUT}/fixed.nrrd,moving.nrrd}\n  )\n```\n\n----------------------------------------\n\nTITLE: ITK to Slicer Transform Conversion (C++)\nDESCRIPTION: This C++ code snippet converts a transform from ITK's LPS coordinate system to Slicer's RAS coordinate system. It also converts the sense of the transform from ITK's resampling convention to Slicer's modeling transform convention.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/transforms.md#_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n// Convert from LPS (ITK) to RAS (Slicer)\n// input: transformVtk_LPS matrix in vtkMatrix4x4 in resampling convention in LPS\n// output: transformVtk_RAS matrix in vtkMatri4x4 in modeling convention in RAS\n\n// Tras = lps2ras * Tlps * ras2lps\nvtkSmartPointer<vtkMatrix4x4> lps2ras = vtkSmartPointer<vtkMatrix4x4>::New();\nlps2ras->SetElement(0,0,-1);\nlps2ras->SetElement(1,1,-1);\nvtkMatrix4x4* ras2lps = lps2ras; // lps2ras is diagonal therefore the inverse is identical\nvtkMatrix4x4::Multiply4x4(lps2ras, transformVtk_LPS, transformVtk_LPS);\nvtkMatrix4x4::Multiply4x4(transformVtk_LPS, ras2lps, transformVtk_RAS);\n\n// Convert the sense of the transform (from ITK resampling to Slicer modeling transform)\nvtkMatrix4x4::Invert(transformVtk_RAS);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom PointWidget in Slicer (Python)\nDESCRIPTION: This code defines a custom `PointWidget` using PyQt.  It creates two `QDoubleSpinBox` widgets for x and y coordinates and sets the `SlicerPackParameterName` property on each to link them to the corresponding parameters in the `Point` parameter pack. The `QHBoxLayout` is used for a horizontal layout. It depends on the `qt` module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/parameter_nodes/advanced/custom_widgets_for_parameter_packs.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass PointWidget(qt.QWidget):\n    def __init__(self, parent=None):\n        super().__init__(parent)\n\n        self.setLayout(qt.QHBoxLayout(self))\n\n        self.xWidget = qt.QDoubleSpinBox()\n        # set the parameterPack parameter this widget corresponds to\n        self.xWidget.setProperty(\"SlicerPackParameterName\", \"x\")\n        self.yWidget = qt.QDoubleSpinBox()\n        # set the parameterPack parameter this widget corresponds to\n        self.yWidget.setProperty(\"SlicerPackParameterName\", \"y\")\n\n        self.layout().addWidget(self.xWidget)\n        self.layout().addWidget(self.yWidget)\n```\n\n----------------------------------------\n\nTITLE: Defining Test Source Files\nDESCRIPTION: This snippet defines a list of C++ source files (`KIT_TEST_SRCS`) that are part of the displayable manager tests. These files contain the actual test implementations for various displayable manager classes. The `create_test_sourcelist` macro creates a combined source file used by the executable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/DisplayableManager/Testing/Cxx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT_TEST_SRCS\n  vtkMRMLCameraDisplayableManagerTest1.cxx\n  vtkMRMLCameraWidgetTest1.cxx\n  vtkMRMLModelClipDisplayableManagerTest.cxx\n  vtkMRMLModelDisplayableManagerTest.cxx\n  vtkMRMLModelSliceDisplayableManagerTest.cxx\n  vtkMRMLThreeDReformatDisplayableManagerTest1.cxx\n  vtkMRMLThreeDViewDisplayableManagerFactoryTest1.cxx\n  vtkMRMLDisplayableManagerFactoriesTest1.cxx\n  vtkMRMLSliceViewDisplayableManagerFactoryTest.cxx\n  )\ncreate_test_sourcelist(Tests ${KIT}CxxTests.cxx\n  ${KIT_TEST_SRCS}\n  EXTRA_INCLUDE vtkMRMLDebugLeaksMacro.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name in CMake\nDESCRIPTION: This snippet sets the module name to \"Annotations\" and converts it to uppercase.  It's used as a base name throughout the CMake configuration file. No external dependencies are required.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Annotations/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME \"Annotations\")\n\nstring(TOUPPER ${MODULE_NAME} MODULE_NAME_UPPER)\n```\n\n----------------------------------------\n\nTITLE: Add Data Target - CMake\nDESCRIPTION: Adds a target for managing external data dependencies. If the SEM_DATA_MANAGEMENT_TARGET is equal to `${CLP}Data`, an external data target with the same name will be added.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleDTIVolume/Testing/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including External Projects and Modules\nDESCRIPTION: This code snippet configures the CMake module path and includes several CMake modules for managing external projects and their dependencies.  It sets the module path to include custom CMake modules, defines the top-level project, appends additional directories for external projects, and includes modules for external project management.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nset(CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/CMake\" ${CMAKE_MODULE_PATH})\nset(SUPERBUILD_TOPLEVEL_PROJECT Slicer)\nlist(APPEND EXTERNAL_PROJECT_ADDITIONAL_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/SuperBuild)\ninclude(ExternalProject)\ninclude(ExternalProjectDependency)\ninclude(ExternalProjectDependencyForPython)\ninclude(ExternalProjectGenerateProjectDescription)\n```\n\n----------------------------------------\n\nTITLE: Define Simple Test\nDESCRIPTION: This snippet uses the `simple_test` CMake command to define a test case. It specifies the name of the test as `qMRMLPlotPropertiesWidgetTest1`. This command registers the test with CTest, allowing it to be executed as part of the test suite.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Plots/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nsimple_test(qMRMLPlotPropertiesWidgetTest1)\n```\n\n----------------------------------------\n\nTITLE: Project Declaration CMake\nDESCRIPTION: Defines the project name as `vtkSlicer${MODULE_NAME}ModuleMRML`. The variable `MODULE_NAME` is expected to be predefined, likely representing the specific annotation module being configured.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Annotations/MRML/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleMRML)\n```\n\n----------------------------------------\n\nTITLE: Finding Doxygen Package using CMake\nDESCRIPTION: This code snippet uses CMake's `find_package` command to locate the Doxygen package. The `QUIET` keyword suppresses status messages. Requires Doxygen to be installed and available in the system's PATH or CMake's module path.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Doxygen/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Doxygen 1.10.0 QUIET)\n```\n\n----------------------------------------\n\nTITLE: Adding Simple Tests\nDESCRIPTION: Iterates through the `KIT_TEST_NAMES` list and adds simple tests using the `simple_test` macro for each test name. It also adds `qSlicerCoreModuleTest1`, `qSlicerCoreModuleFactoryTest1`, and `qSlicerModulePanelTest2` as simple tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Core/Testing/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(testname ${KIT_TEST_NAMES})\n  simple_test( ${testname} )\nendforeach()\nsimple_test( qSlicerCoreModuleTest1 )\nsimple_test( qSlicerCoreModuleFactoryTest1 )\nsimple_test( qSlicerModulePanelTest2 )\n```\n\n----------------------------------------\n\nTITLE: Layout XML DTD Definition\nDESCRIPTION: This XML Document Type Definition (DTD) defines the structure and allowed elements/attributes for Slicer layout XML files. These files describe pre-defined or custom layouts including element arrangements, view classes, and properties.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/mrml_overview.md#_snippet_34\n\nLANGUAGE: XML\nCODE:\n```\n<!DOCTYPE layout SYSTEM \"https://slicer.org/layout.dtd\"\n[\n<!ELEMENT layout (item+)>\n<!ELEMENT item (layout*, view)>\n<!ELEMENT view (property*)>\n<!ELEMENT property (#PCDATA)>\n\n<!ATTLIST layout\ntype (horizontal|grid|tab|vertical) #IMPLIED \"horizontal\"\nsplit (true|false) #IMPLIED \"true\" >\n\n<!ATTLIST item\nmultiple (true|false) #IMPLIED \"false\"\nsplitSize CDATA #IMPLIED \"0\"\nrow CDATA #IMPLIED \"0\"\ncolumn CDATA #IMPLIED \"0\"\nrowspan CDATA #IMPLIED \"1\"\ncolspan CDATA #IMPLIED \"1\"\n>\n\n<!ATTLIST view\nclass CDATA #REQUIRED\nsingletontag CDATA #IMPLIED\nhorizontalStretch CDATA #IMPLIED \"-1\"\nverticalStretch CDATA #IMPLIED \"-1\" >\n\n<!ATTLIST property\nname CDATA #REQUIRED\naction (default|relayout) #REQUIRED >\n\n]>\n```\n\n----------------------------------------\n\nTITLE: Setting KIT Variable\nDESCRIPTION: Sets the KIT variable to the project name. This is a common pattern in CMake to create a shorter, more manageable name for the project.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/Loadable/Widgets/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Get DataProbe Text (Python)\nDESCRIPTION: This code snippet enables displaying DataProbe information (pixel coordinates and values) in the console by pressing the '.' (period) key in a slice view. It retrieves the information from the DataProbe's infoWidget and prints the layer names, IJK coordinates, and pixel values for each layer (B, F, L). Requires the DataProbe module to be loaded and active.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_34\n\nLANGUAGE: python\nCODE:\n```\ndef printDataProbe():\n  infoWidget = slicer.modules.DataProbeInstance.infoWidget\n  for layer in (\"B\", \"F\", \"L\"):\n    print(infoWidget.layerNames[layer].text, infoWidget.layerIJKs[layer].text, infoWidget.layerValues[layer].text)\n\ns = qt.QShortcut(qt.QKeySequence(\".\"), mainWindow())\ns.connect(\"activated()\", printDataProbe)\n```\n\n----------------------------------------\n\nTITLE: Setting Python Scripts\nDESCRIPTION: Defines the Python scripts associated with the SegmentStatistics module.  These scripts are used for module functionality and are deployed with the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/SegmentStatistics/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_PYTHON_SCRIPTS\n  ${MODULE_NAME}.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: Defines the list of source files for the project. These files are compiled to create the library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT_SRCS\n  qSlicerAbstractCoreModule.cxx\n  qSlicerAbstractCoreModule.h\n  qSlicerAbstractModuleFactoryManager.cxx\n  qSlicerAbstractModuleFactoryManager.h\n  qSlicerAbstractModuleRepresentation.cxx\n  qSlicerAbstractModuleRepresentation.h\n  qSlicerCoreApplication.cxx\n  qSlicerCoreApplication.h\n  qSlicerCoreApplication_p.h\n  qSlicerCoreCommandOptions.cxx\n  qSlicerCoreCommandOptions.h\n  qSlicerCoreIOManager.cxx\n  qSlicerCoreIOManager.h\n  qSlicerFileReader.cxx\n  qSlicerFileReader.h\n  qSlicerFileWriter.cxx\n  qSlicerFileWriter.h\n  qSlicerIO.cxx\n  qSlicerIO.h\n  qSlicerIOOptions.cxx\n  qSlicerIOOptions.h\n  qSlicerIOOptions_p.h\n  qSlicerLoadableModuleFactory.cxx\n  qSlicerLoadableModuleFactory.h\n  qSlicerModuleFactoryManager.cxx\n  qSlicerModuleFactoryManager.h\n  qSlicerModuleManager.cxx\n  qSlicerModuleManager.h\n  qSlicerObject.cxx\n  qSlicerObject.h\n  qSlicerPersistentCookieJar.cxx\n  qSlicerPersistentCookieJar.h\n  qSlicerRelativePathMapper.cxx\n  qSlicerRelativePathMapper.h\n  qSlicerSceneBundleReader.cxx\n  qSlicerSceneBundleReader.h\n  qSlicerUtils.cxx\n  qSlicerUtils.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Resample Segmentation (Python)\nDESCRIPTION: This snippet demonstrates how to resample the binary labelmap representation of a segmentation to a higher resolution. It retrieves the volume and segmentation nodes, sets the oversampling factor to control the new resolution, and optionally enables isotropic spacing. Higher oversampling leads to finer details but increases memory usage and computation time.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n# Set inputs\nvolumeNode = getNode(\"MRHead\")\nsegmentationNode = getNode(\"Segmentation\")\n\n# The higher the oversampling factor is the finer resolution the segmentation will be,\n# at the cost of more memory usage and longer computation times.\n# Note that oversampling by a factor of 2 increases memory usage by a factor of 2 * 2 * 2 = 8.\noversamplingFactor = 2.0\n\n# Make spacing value uniform for all axes.\n# It is useful for removing staircase artifacts in 3D reconstructions but may increase\n# memory usage and computation time.\nisotropicSpacing = True\n```\n\n----------------------------------------\n\nTITLE: Building Qt Library - CMake\nDESCRIPTION: Uses the SlicerMacroBuildModuleQtLibrary macro to build the Qt library for the module. This macro handles the compilation, linking, and moc generation.  It takes various parameters like include directories, source files, target libraries, and resource files. WRAP_PYTHONQT indicates whether python wrapping should be done.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Texts/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleQtLibrary(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  FOLDER \"Module-${MODULE_NAME}\"\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  UI_SRCS ${${KIT}_UI_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  RESOURCES ${${KIT}_RESOURCES}\n  WRAP_PYTHONQT\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Executable and Linking Libraries in CMake\nDESCRIPTION: This snippet adds an executable target named `${CLP}Test` using `ctk_add_executable_utf8` and links it with `${CLP}Lib` and `${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES}`. It also sets the target properties for labels and folder.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CheckerBoardFilter/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nctk_add_executable_utf8(${CLP}Test ${CLP}Test.cxx)\ntarget_link_libraries(${CLP}Test ${CLP}Lib ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES})\nset_target_properties(${CLP}Test PROPERTIES LABELS ${CLP})\nset_target_properties(${CLP}Test PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files - CMake\nDESCRIPTION: This snippet defines the list of source files and headers that constitute the plugin.  These files implement the various plugins like directory list view, module panel, modules list view, mouse mode toolbar, and widget plugins.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTGUI/DesignerPlugins/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_SRCS\n  qSlicerQTGUIAbstractPlugin.cxx\n  qSlicerQTGUIAbstractPlugin.h\n  qSlicerQTGUIPlugins.cxx\n  qSlicerQTGUIPlugins.h\n\n  qSlicerDirectoryListViewPlugin.cxx\n  qSlicerDirectoryListViewPlugin.h\n  qSlicerModulePanelPlugin.cxx\n  qSlicerModulePanelPlugin.h\n  qSlicerModulesListViewPlugin.cxx\n  qSlicerModulesListViewPlugin.h\n  qSlicerMouseModeToolBarPlugin.cxx\n  qSlicerMouseModeToolBarPlugin.h\n  qSlicerWidgetPlugin.cxx\n  qSlicerWidgetPlugin.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Running CTest on Linux/macOS (Bash)\nDESCRIPTION: This bash command is used to run automatic tests of a Slicer extension on Linux or macOS. It uses the `ctest` command with the `-j` option to specify the number of cores to use for parallel testing. It requires CTest to be installed and configured correctly.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/extensions.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ctest -j<NUMBEROFCORES>\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name in CMake\nDESCRIPTION: Sets the module name to 'DataProbe'. This variable is used throughout the build process to identify the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DataProbe/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME DataProbe)\n```\n\n----------------------------------------\n\nTITLE: Header Configuration CMake\nDESCRIPTION: Configures the vtkMRMLDisplayableManagerConfigure.h header file from its .in template using the configure_file command.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/DisplayableManager/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(configure_header_file vtkMRMLDisplayableManagerConfigure.h)\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/${configure_header_file}.in\n  ${CMAKE_CURRENT_BINARY_DIR}/${configure_header_file}\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Slicer Scripted Module in CMake\nDESCRIPTION: Uses the `slicerMacroBuildScriptedModule` macro to build the DataProbe module. This macro automates the build process for scripted modules within Slicer, specifying the module name, scripts, resources, and enabling generic tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DataProbe/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroBuildScriptedModule(\n  NAME ${MODULE_NAME}\n  SCRIPTS ${MODULE_PYTHON_SCRIPTS}\n  RESOURCES ${MODULE_PYTHON_RESOURCES}\n  WITH_GENERIC_TESTS\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting MRMLCore Source Files (CMake)\nDESCRIPTION: This snippet defines the source files that constitute the MRMLCore library. It lists both C++ source (.cxx) and header (.h) files.  These files represent the core components of the MRMLCore module in 3D Slicer. No external dependencies beyond the standard C++ library are explicitly listed here.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Core/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nset(MRMLCore_SRCS\n  vtkArchive.cxx\n  vtkArchive.h\n  vtkCacheManager.cxx\n  vtkCapPolyData.cxx\n  vtkCodedEntry.cxx\n  vtkCurveMeasurementsCalculator.cxx\n  vtkCurveMeasurementsCalculator.h\n  vtkDataFileFormatHelper.cxx\n  vtkDataIOManager.cxx\n  vtkDataTransfer.cxx\n  vtkEventBroker.cxx\n  vtkImageMathematicsAddon.cxx\n  vtkImplicitInvertableBoolean.cxx\n  vtkMRMLAbstractLayoutNode.cxx\n  vtkMRMLAbstractViewNode.cxx\n  vtkMRMLBSplineTransformNode.cxx\n  vtkMRMLCameraNode.cxx\n  vtkMRMLClipModelsNode.cxx\n  vtkMRMLClipNode.cxx\n  vtkMRMLColorNode.cxx\n  vtkMRMLColorTableNode.cxx\n  vtkMRMLColorTableStorageNode.cxx\n  vtkMRMLColors.cxx\n  vtkMRMLCoreTestingUtilities.cxx\n  vtkMRMLCrosshairNode.cxx\n  vtkMRMLDiffusionTensorDisplayPropertiesNode.cxx\n  vtkMRMLDiffusionWeightedVolumeDisplayNode.cxx\n  vtkMRMLDiffusionWeightedVolumeNode.cxx\n  vtkMRMLDisplayNode.cxx\n  vtkMRMLDisplayableHierarchyNode.cxx\n  vtkMRMLDisplayableNode.cxx\n  vtkMRMLFolderDisplayNode.cxx\n  vtkMRMLGlyphableVolumeDisplayNode.cxx\n  vtkMRMLGlyphableVolumeSliceDisplayNode.cxx\n  vtkMRMLGridTransformNode.cxx\n  vtkMRMLHierarchyNode.cxx\n  vtkMRMLHierarchyStorageNode.cxx\n  vtkMRMLI18N.cxx\n  vtkMRMLI18N.h\n  vtkMRMLInteractionEventData.cxx\n  vtkMRMLInteractionEventData.h\n  vtkMRMLInteractionNode.cxx\n  vtkMRMLLabelMapVolumeDisplayNode.cxx\n  vtkMRMLLabelMapVolumeNode.cxx\n  vtkMRMLLayoutNode.cxx\n  vtkMRMLLinearTransformNode.cxx\n  vtkMRMLLinearTransformSequenceStorageNode.cxx\n  vtkMRMLLinearTransformSequenceStorageNode.h\n  vtkMRMLLogic.cxx\n  vtkMRMLMarkupsAngleNode.cxx\n  vtkMRMLMarkupsAngleNode.h\n  vtkMRMLMarkupsClosedCurveNode.cxx\n  vtkMRMLMarkupsClosedCurveNode.h\n  vtkMRMLMarkupsCurveNode.cxx\n  vtkMRMLMarkupsCurveNode.h\n  vtkMRMLMarkupsDisplayNode.cxx\n  vtkMRMLMarkupsDisplayNode.h\n  vtkMRMLMarkupsFiducialDisplayNode.cxx\n  vtkMRMLMarkupsFiducialDisplayNode.h\n  vtkMRMLMarkupsFiducialNode.cxx\n  vtkMRMLMarkupsFiducialNode.h\n  vtkMRMLMarkupsFiducialStorageNode.cxx\n  vtkMRMLMarkupsFiducialStorageNode.h\n  vtkMRMLMarkupsLineNode.cxx\n  vtkMRMLMarkupsLineNode.h\n  vtkMRMLMarkupsNode.cxx\n  vtkMRMLMarkupsNode.h\n  vtkMRMLMarkupsPlaneDisplayNode.cxx\n  vtkMRMLMarkupsPlaneDisplayNode.h\n  vtkMRMLMarkupsPlaneNode.cxx\n  vtkMRMLMarkupsPlaneNode.h\n  vtkMRMLMarkupsROIDisplayNode.cxx\n  vtkMRMLMarkupsROIDisplayNode.h\n  vtkMRMLMarkupsROINode.cxx\n  vtkMRMLMarkupsROINode.h\n  vtkMRMLMarkupsStorageNode.cxx\n  vtkMRMLMeasurement.cxx\n  vtkMRMLMeasurementAngle.cxx\n  vtkMRMLMeasurementAngle.h\n  vtkMRMLMeasurementArea.cxx\n  vtkMRMLMeasurementArea.h\n  vtkMRMLMeasurementLength.cxx\n  vtkMRMLMeasurementLength.h\n  vtkMRMLMeasurementVolume.cxx\n  vtkMRMLMeasurementVolume.h\n  vtkMRMLMessageCollection.cxx\n  vtkMRMLModelDisplayNode.cxx\n  vtkMRMLModelHierarchyNode.cxx\n  vtkMRMLModelNode.cxx\n  vtkMRMLModelStorageNode.cxx\n  vtkMRMLNode.cxx\n  vtkMRMLPETProceduralColorNode.cxx\n  vtkMRMLParser.cxx\n  vtkMRMLPlotChartNode.cxx\n  vtkMRMLPlotSeriesNode.cxx\n  vtkMRMLPlotViewNode.cxx\n  vtkMRMLProceduralColorNode.cxx\n  vtkMRMLProceduralColorStorageNode.cxx\n  vtkMRMLROIListNode.cxx\n  vtkMRMLROINode.cxx\n  vtkMRMLScalarVolumeDisplayNode.cxx\n  vtkMRMLScalarVolumeNode.cxx\n  vtkMRMLScene.cxx\n  vtkMRMLSceneViewNode.cxx\n  vtkMRMLSceneViewStorageNode.cxx\n  vtkMRMLScriptedModuleNode.cxx\n  vtkMRMLScriptedModuleNode.h\n  vtkMRMLSegmentationDisplayNode.cxx\n  vtkMRMLSegmentationDisplayNode.h\n  vtkMRMLSegmentationNode.cxx\n  vtkMRMLSegmentationNode.h\n  vtkMRMLSegmentationStorageNode.cxx\n  vtkMRMLSegmentationStorageNode.h\n  vtkMRMLSelectionNode.cxx\n  vtkMRMLSequenceNode.cxx\n  vtkMRMLSequenceNode.h\n  vtkMRMLSequenceStorageNode.cxx\n  vtkMRMLSequenceStorageNode.h\n  vtkMRMLSliceCompositeNode.cxx\n  vtkMRMLSliceDisplayNode.cxx\n  vtkMRMLSliceNode.cxx\n  vtkMRMLSnapshotClipNode.cxx\n  vtkMRMLStaticMeasurement.cxx\n  vtkMRMLStorableNode.cxx\n  vtkMRMLStorageNode.cxx\n  vtkMRMLSubjectHierarchyConstants.h\n  vtkMRMLSubjectHierarchyLegacyNode.cxx\n  vtkMRMLSubjectHierarchyLegacyNode.h\n  vtkMRMLSubjectHierarchyNode.cxx\n  vtkMRMLSubjectHierarchyNode.h\n  vtkMRMLTableNode.cxx\n  vtkMRMLTableSQLiteStorageNode.cxx\n  vtkMRMLTableStorageNode.cxx\n  vtkMRMLTableViewNode.cxx\n  vtkMRMLTextNode.cxx\n  vtkMRMLTextStorageNode.cxx\n  vtkMRMLTransformDisplayNode.cxx\n  vtkMRMLTransformNode.cxx\n  vtkMRMLTransformStorageNode.cxx\n  vtkMRMLTransformableNode.cxx\n  vtkMRMLTranslator.h\n  vtkMRMLUnitNode.cxx\n  vtkMRMLVectorVolumeDisplayNode.cxx\n  vtkMRMLViewNode.cxx\n  vtkMRMLVolumeArchetypeStorageNode.cxx\n  vtkMRMLVolumeDisplayNode.cxx\n  vtkMRMLVolumeHeaderlessStorageNode.cxx\n  vtkMRMLVolumeNode.cxx\n  vtkMRMLVolumeSequenceStorageNode.cxx\n  vtkMRMLVolumeSequenceStorageNode.h\n  vtkMRMLdGEMRICProceduralColorNode.cxx\n  vtkObservation.cxx\n  vtkObserverManager.cxx\n  vtkPermissionPrompter.cxx\n  vtkProjectMarkupsCurvePointsFilter.cxx\n  vtkProjectMarkupsCurvePointsFilter.h\n  vtkTagTable.cxx\n  vtkTagTableCollection.cxx\n  vtkURIHandler.cxx\n  # Note: when you add new node types, add\n  # register code to the vtkMRMLScene constructor\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Slicer Home CMake\nDESCRIPTION: Sets the `Slicer_HOME` variable to the binary directory. This variable likely represents the root directory of the Slicer installation.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_58\n\nLANGUAGE: cmake\nCODE:\n```\nset(Slicer_HOME \"${Slicer_BINARY_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Project Name\nDESCRIPTION: This snippet defines the project name for the module. The project name is assigned to the KIT variable for later use.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/VTKWidgets/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleVTKWidgets)\n\nset(KIT ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Adding Test\nDESCRIPTION: Adds a test named '${CLP}Test' using ExternalData_add_test, which executes the '${CLP}Test' executable with specified arguments and adds a label. This integrates the test executable with Slicer's testing infrastructure. The test relies on SEM_LAUNCH_COMMAND and the target file of the '${CLP}Test' executable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/PETStandardUptakeValueComputation/Testing/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(testname ${CLP}Test)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  ${CLP}Test\n  --xml\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Variables for Directories\nDESCRIPTION: This snippet sets CMake variables for the baseline data directory, input data directory, and the module name.  It also defines the SEM_DATA_MANAGEMENT_TARGET variable if it's not already defined, defaulting to the module name with \"Data\" appended. This configuration is crucial for locating resources and naming targets within the CMake build system.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/VotingBinaryHoleFillingImageFilter/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(BASELINE ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Baseline)\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input)\n\nset(CLP ${MODULE_NAME})\n\nif(NOT DEFINED SEM_DATA_MANAGEMENT_TARGET)\n  set(SEM_DATA_MANAGEMENT_TARGET ${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Define Slicer CLI Module using CMake\nDESCRIPTION: This code snippet defines a Slicer CLI module named TemplateKey using the SlicerMacroBuildScriptedCLI macro. The NAME parameter specifies the module's name, which is set to the value of the MODULE_NAME variable. This macro is part of the Slicer build system for creating command line interface modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/ScriptedCLI/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n#-----------------------------------------------------------------------------\nset(MODULE_NAME TemplateKey)\n\nSlicerMacroBuildScriptedCLI(\n  NAME ${MODULE_NAME}\n  )\n```\n\n----------------------------------------\n\nTITLE: Conditional MOC Sources Inclusion (CMake)\nDESCRIPTION: Similar to source files, this snippet demonstrates how to conditionally include header files for moc processing based on CMake variables like `Slicer_BUILD_EXTENSIONMANAGER_SUPPORT`, `Slicer_BUILD_WEBENGINE_SUPPORT`, `Slicer_BUILD_I18N_SUPPORT`, and `Slicer_USE_PYTHONQT`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTGUI/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(Slicer_BUILD_EXTENSIONMANAGER_SUPPORT)\n  list(APPEND KIT_MOC_SRCS\n    qSlicerExtensionsLocalWidget.h\n    qSlicerExtensionsManagerDialog.h\n    qSlicerExtensionsManagerWidget.h\n    qSlicerSettingsExtensionsPanel.h\n    )\n  if(Slicer_BUILD_WEBENGINE_SUPPORT)\n    list(APPEND KIT_MOC_SRCS\n      qSlicerExtensionsServerWidget.h\n      qSlicerExtensionsServerWidget_p.h\n      )\n  endif()\nendif()\n\nif(Slicer_BUILD_I18N_SUPPORT)\n  list(APPEND KIT_MOC_SRCS\n    qSlicerSettingsInternationalizationPanel.h\n    )\nendif()\n\nif(Slicer_BUILD_WEBENGINE_SUPPORT)\n  list(APPEND KIT_MOC_SRCS\n    qSlicerWebDownloadWidget.h\n    qSlicerWebPythonProxy.h\n    qSlicerWebWidget.h\n    qSlicerWebWidget_p.h\n    )\nendif()\n\nif(Slicer_USE_PYTHONQT)\n  list(APPEND KIT_MOC_SRCS\n    qSlicerScriptedLoadableModule.h\n    qSlicerScriptedLoadableModuleWidget.h\n    qSlicerScriptedFileDialog.h\n    )\nendif()\n\n# PythonQt decorator\nif(Slicer_USE_PYTHONQT)\n  list(APPEND KIT_MOC_SRCS\n    qSlicerSettingsPythonPanel.h\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel Package\nDESCRIPTION: This snippet uses the find_package command to locate the SlicerExecutionModel package, which is a required dependency.  It then includes the use file provided by the package.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperCLIModuleTemplate/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Loadable Modules: Taking Ownership in C++ (New Variable)\nDESCRIPTION: This C++ code snippet shows how to take ownership of a VTK object returned by `GetNodesByClass` when assigning it to a newly created `vtkSmartPointer`. It uses `vtkSmartPointer::Take` to transfer ownership of the raw pointer to the smart pointer.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/advanced_topics.md#_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nvtkSmartPointer<vtkCollection> nodes = vtkSmartPointer<vtkCollection>::Take(mrmlScene->GetNodesByClass(\"vtkMRMLLinearTransformNode\"));\n```\n\n----------------------------------------\n\nTITLE: Setting Module UI Source Files\nDESCRIPTION: Defines the UI files (created with Qt Designer) for the module.  These files are converted to C++ code during the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Reformat/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_UI_SRCS\n  Resources/UI/qSlicer${MODULE_NAME}ModuleWidget.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files (CMake)\nDESCRIPTION: This snippet defines the source files (header and implementation files) that are part of the VTK widgets module. These files contain the code for custom widgets and representations used in the Slicer application.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/LoadableCustomMarkups/VTKWidgets/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  vtkSlicerTestLineWidget.h\n  vtkSlicerTestLineWidget.cxx\n  vtkSlicerTestLineRepresentation3D.h\n  vtkSlicerTestLineRepresentation3D.cxx\n  vtkSlicerTestLineRepresentation2D.h\n  vtkSlicerTestLineRepresentation2D.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel - CMake\nDESCRIPTION: This snippet finds the SlicerExecutionModel package, which provides necessary functions and macros for building Slicer modules. The `find_package` command searches for the package, and `include` incorporates its use file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleScalarVolume/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories in CMake\nDESCRIPTION: Sets the include directories required for compiling the Segmentations module. These directories contain the header files needed to build the module and its dependencies.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_INCLUDE_DIRECTORIES\n  ${vtkSlicerSegmentationsModuleMRML_INCLUDE_DIRS}\n  ${vtkSlicerSegmentationsModuleLogic_INCLUDE_DIRS}\n  ${vtkSlicerSegmentationsModuleMRMLDisplayableManager_INCLUDE_DIRS}\n  ${qSlicerSegmentationsModuleWidgets_INCLUDE_DIRS}\n  ${qSlicerSegmentationsEditorEffects_INCLUDE_DIRS}\n  ${qSlicerSegmentationsSubjectHierarchyPlugins_INCLUDE_DIRS}\n  ${qSlicerSubjectHierarchyModuleWidgets_INCLUDE_DIRS}\n  ${qSlicerTerminologiesModuleWidgets_INCLUDE_DIRS}\n  ${vtkSlicerTerminologiesModuleLogic_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Preventing Unnecessary Relinking on Linux\nDESCRIPTION: This code snippet prevents unnecessary relinking on Linux systems by setting the `CMAKE_LINK_DEPENDS_NO_SHARED` variable. This optimization reduces build times by avoiding relinking shared libraries when only implementation files are modified. The check is only performed if the variable is not already defined, the system is UNIX-based, and it's not an Apple system.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED CMAKE_LINK_DEPENDS_NO_SHARED AND UNIX AND NOT APPLE)\n  set(CMAKE_LINK_DEPENDS_NO_SHARED ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Access Displayable Manager by Class (Python)\nDESCRIPTION: This code snippet retrieves a specific displayable manager (e.g., `vtkMRMLModelDisplayableManager`) for a given 3D view in Slicer.  It's useful for accessing low-level VTK actors and properties. Requires the `slicer` module to be available in the Python environment.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_60\n\nLANGUAGE: python\nCODE:\n```\nthreeDViewWidget = slicer.app.layoutManager().threeDWidget(0)\nmodelDisplayableManager = threeDViewWidget.threeDView().displayableManagerByClassName(\"vtkMRMLModelDisplayableManager\")\nif modelDisplayableManager is None:\n  logging.error(\"Failed to find the model displayable manager\")\n```\n\n----------------------------------------\n\nTITLE: Configure Header File\nDESCRIPTION: Configures the header file vtkITKConfigure.h from the .in template.  This allows CMake to substitute variables in the header file during configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkITK/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(configure_header_file vtkITKConfigure.h)\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/${configure_header_file}.in\n  ${CMAKE_CURRENT_BINARY_DIR}/${configure_header_file}\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Tests\nDESCRIPTION: This snippet defines a series of simple tests using the `simple_test` and `SCENE_TEST` macros. These tests cover various MRML widgets and functionalities.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/Testing/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nsimple_test( qMRMLCheckableNodeComboBoxTest )\nsimple_test( qMRMLCheckableNodeComboBoxTest1 )\nsimple_test( qMRMLClipNodeWidgetTest1 )\nsimple_test( qMRMLCollapsibleButtonTest)\nsimple_test( qMRMLColorModelTest )\nsimple_test( qMRMLColorModelTest1 )\nsimple_test( qMRMLColorTableComboBoxTest1 )\nsimple_test( qMRMLDisplayNodeViewComboBoxTest )\nsimple_test( qMRMLDisplayNodeWidgetTest1 )\nsimple_test( qMRMLLayoutManagerTest1 )\nsimple_test( qMRMLLayoutManagerTest2 )\nsimple_test( qMRMLLayoutManagerTest3 )\nsimple_test( qMRMLLayoutManagerTest4 )\nsimple_test( qMRMLLayoutManagerVisibilityTest )\nsimple_test( qMRMLLayoutManagerWithCustomFactoryTest )\nsimple_test( qMRMLLinearTransformSliderTest1 )\nsimple_test( qMRMLListWidgetTest1 )\nsimple_test( qMRMLMatrixWidgetTest1 )\nsimple_test( qMRMLModelInfoWidgetTest1 )\nsimple_test( qMRMLModelTest1 )\nsimple_test( qMRMLModelTreeViewTest1 )\nsimple_test( qMRMLLabelComboBoxTest )\nsimple_test( qMRMLNavigationViewTest1 )\nsimple_test( qMRMLNodeAttributeTableViewTest )\nsimple_test( qMRMLNodeAttributeTableWidgetTest )\nsimple_test( qMRMLNodeComboBoxTest1 )\nsimple_test( qMRMLNodeComboBoxTest2 )\nSCENE_TEST(  qMRMLNodeComboBoxTest3 diffusionEditor.mrml|DATA{${INPUT}/helix-DTI.nhdr,helix-DTI.raw.gz,helix-DWI.nhdr,helix-DWI.raw.gz} )\nsimple_test( qMRMLNodeComboBoxTest4 )\nsimple_test( qMRMLNodeComboBoxTest5 )\nsimple_test( qMRMLNodeComboBoxTest6 )\nsimple_test( qMRMLNodeComboBoxTest7 )\nsimple_test( qMRMLNodeComboBoxTest8 )\nsimple_test( qMRMLNodeComboBoxTest9 )\nsimple_test( qMRMLNodeComboBoxLazyUpdateTest1 )\nsimple_test( qMRMLNodeFactoryTest1 )\nsimple_test( qMRMLPlotViewTest1 )\nsimple_test( qMRMLScalarInvariantComboBoxTest1 )\nsimple_test( qMRMLSceneCategoryModelTest1 )\nsimple_test( qMRMLSceneColorTableModelTest1 )\nsimple_test( qMRMLSceneFactoryWidgetTest1 )\nsimple_test( qMRMLSceneModelTest )\nsimple_test( qMRMLSceneModelTest1 )\nsimple_test( qMRMLSceneTransformModelTest1 )\nSCENE_TEST(  qMRMLSceneTransformModelTest2 vol_and_cube.mrml|DATA{${INPUT}/fixed.nrrd,cube.vtk} )\nsimple_test( qMRMLSceneDisplayableModelTest1 )\nSCENE_TEST(  qMRMLSceneDisplayableModelTest2 vol_and_cube.mrml|DATA{${INPUT}/fixed.nrrd,cube.vtk} )\nsimple_test( qMRMLSliceControllerWidgetTest )\nSCENE_TEST( qMRMLSliceWidgetTest1 vol_and_cube.mrml|DATA{${INPUT}/fixed.nrrd,cube.vtk})\nsimple_test( qMRMLSliceWidgetTest2_fixed.nrrd DRIVER_TESTNAME qMRMLSliceWidgetTest2 DATA{${INPUT}/fixed.nrrd})\nsimple_test( qMRMLTableViewTest1 )\nsimple_test( qMRMLTransformSlidersTest1 )\nsimple_test( qMRMLThreeDViewTest1 )\nsimple_test( qMRMLThreeDWidgetTest1 )\nSCENE_TEST(  qMRMLTreeViewTest1 vol_and_cube.mrml|DATA{${INPUT}/fixed.nrrd,cube.vtk} )\nSCENE_TEST(  qMRMLUtf8Test1 cube-utf8.mrml|DATA{${INPUT}/fixed.nrrd} )\nsimple_test( qMRMLUtilsTest1 )\nsimple_test( qMRMLVolumeInfoWidgetTest1 )\nSCENE_TEST( qMRMLVolumeThresholdWidgetTest1 vol_and_cube.mrml|DATA{${INPUT}/fixed.nrrd,cube.vtk})\nSCENE_TEST( qMRMLVolumeThresholdWidgetTest2 vol_and_cube.mrml|DATA{${INPUT}/fixed.nrrd,cube.vtk})\nsimple_test( qMRMLWidgetsExportTest1 )\nSCENE_TEST( qMRMLWindowLevelWidgetTest1 vol_and_cube.mrml|DATA{${INPUT}/fixed.nrrd,cube.vtk})\n```\n\n----------------------------------------\n\nTITLE: Building Loadable Module\nDESCRIPTION: Calls a macro to build the loadable module using the specified configurations.  This macro handles compiling source files, linking libraries, and setting other build properties. It also includes generic tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroBuildLoadableModule(\n  NAME ${MODULE_NAME}\n  EXPORT_DIRECTIVE ${MODULE_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${MODULE_INCLUDE_DIRECTORIES}\n  SRCS ${MODULE_SRCS}\n  MOC_SRCS ${MODULE_MOC_SRCS}\n  UI_SRCS ${MODULE_UI_SRCS}\n  TARGET_LIBRARIES ${MODULE_TARGET_LIBRARIES}\n  RESOURCES ${MODULE_RESOURCES}\n  WITH_GENERIC_TESTS\n  )\n```\n\n----------------------------------------\n\nTITLE: Markups Fiducial Point List FCSV Format Example\nDESCRIPTION: This example illustrates the FCSV file format used by vtkMRMLMarkupsFiducialStorageNode for storing control points. The file begins with a header containing version, coordinate system, and column definitions, followed by comma-separated data for each control point, including position, orientation, visibility, selection, lock status, label, description, and associated node ID. The coordinate system is LPS.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/modules/markups.md#_snippet_1\n\nLANGUAGE: CSV\nCODE:\n```\n# Markups fiducial file version = 4.13\n# CoordinateSystem = LPS\n# columns = id,x,y,z,ow,ox,oy,oz,vis,sel,lock,label,desc,associatedNodeID\n0,-19.906699999999987,13.9347,29.442970822281154,0,0,0,1,1,1,0,F-1,,\n1,-7.3939,-76.94990495817181,17.552540297898375,0,0,0,1,1,1,0,F-2,,\n2,81.73332450520303,-42.9415,9.625586614976527,0,0,0,1,1,1,0,F-3,,\n```\n\n----------------------------------------\n\nTITLE: Configuring Slicer with CMake - console\nDESCRIPTION: This set of commands creates a build directory, navigates into it, and then uses CMake to configure the build. Key CMake variables are set, including the macOS deployment target, build type, and Qt5 directory. The last argument is the path to the Slicer source code.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/macos.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nmkdir /opt/s\ncd /opt/s\ncmake \\\n  -DCMAKE_OSX_DEPLOYMENT_TARGET:STRING=13.0 \\\n  -DCMAKE_BUILD_TYPE:STRING=Debug \\\n  -DQt5_DIR:PATH=/path/to/Qt/lib/cmake/Qt5 \\\n  /path/to/source/code/of/Slicer\n```\n\n----------------------------------------\n\nTITLE: Adding Simple Test CMake\nDESCRIPTION: Adds a simple test to the CMake project. The simple_test macro registers the test with the CMake test runner, allowing it to be executed via commands like 'ctest'.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/Testing/Cxx/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nsimple_test(vtkSlicerSubjectHierarchyModuleLogicTest)\n```\n\n----------------------------------------\n\nTITLE: Defining MOC Source Files\nDESCRIPTION: Lists the header files that need to be processed by the Meta-Object Compiler (moc) to generate meta-object code for Qt's signal and slot mechanism. These are typically Qt classes with the Q_OBJECT macro.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(MRMLWidgets_MOC_SRCS\n  qMRMLAbstractViewWidget.h\n  qMRMLCheckableNodeComboBox.h\n  qMRMLClipNodeWidget.h\n  qMRMLClipNodeDisplayWidget.h\n  qMRMLCollapsibleButton.h\n  qMRMLColorModel.h\n  qMRMLColorTableComboBox.h\n  qMRMLCoordinatesWidget.h\n  qMRMLDisplayNodeViewComboBox.h\n  qMRMLDisplayNodeWidget.h\n  qMRMLEventBrokerConnection.h\n  qMRMLEventBrokerWidget.h\n  qMRMLEventLogger.h\n  qMRMLEventLoggerWidget.h\n  qMRMLItemDelegate.h\n  qMRMLLabelComboBox.h\n  qMRMLLayoutManager.h\n  qMRMLLayoutManager_p.h\n  qMRMLLayoutViewFactory.h\n  qMRMLLayoutWidget.h\n  qMRMLLinearTransformSlider.h\n  qMRMLListWidget.h\n  qMRMLMatrixWidget.h\n  qMRMLModelInfoWidget.h\n  qMRMLNavigationView.h\n  qMRMLNodeAttributeTableView.h\n  qMRMLNodeAttributeTableWidget.h\n  qMRMLNodeComboBox.h\n  qMRMLNodeComboBoxDelegate.h\n  qMRMLNodeComboBoxMenuDelegate.h\n  qMRMLNodeFactory.h\n  qMRMLPlotWidget.h\n  qMRMLPlotViewControllerWidget.h\n  qMRMLPlotViewControllerWidget_p.h\n  qMRMLPlotView_p.h\n  qMRMLPlotView.h\n  qMRMLRangeWidget.h\n  qMRMLROIWidget.h\n  qMRMLScalarInvariantComboBox.h\n  qMRMLScalarsDisplayWidget.h\n  qMRMLSceneCategoryModel.h\n  qMRMLSceneColorTableModel.h\n  qMRMLSceneFactoryWidget.h\n  qMRMLSceneModel.h\n  qMRMLSceneTransformModel.h\n  qMRMLSceneHierarchyModel.h\n  qMRMLSceneDisplayableModel.h\n  qMRMLScreenShotDialog.h\n  qMRMLSegmentSelectorWidget.h\n  qMRMLSliceControllerWidget.h\n  qMRMLSliceControllerWidget_p.h\n  qMRMLSliceInformationWidget.h\n  qMRMLSliceInformationWidget_p.h\n  qMRMLSliceVerticalControllerWidget.h\n  qMRMLSliceView.h\n  qMRMLSliceView_p.h\n  qMRMLSliceWidget.h\n  qMRMLSliceWidget_p.h\n  qMRMLSliderWidget.h\n  qMRMLSortFilterColorProxyModel.h\n  qMRMLSortFilterHierarchyProxyModel.h\n  qMRMLSortFilterProxyModel.h\n  qMRMLSpinBox.h\n  qMRMLTableModel.h\n  qMRMLTableView.h\n  qMRMLTableView_p.h\n  qMRMLTableViewControllerWidget.h\n  qMRMLTableViewControllerWidget_p.h\n  qMRMLTableWidget.h\n  qMRMLThreeDView.h\n  qMRMLThreeDView_p.h\n  qMRMLThreeDViewControllerWidget.h\n  qMRMLThreeDViewInformationWidget.h\n  qMRMLThreeDViewInformationWidget_p.h\n  qMRMLThreeDWidget.h\n  qMRMLTransformSliders.h\n  qMRMLTreeView.h\n  qMRMLUtils.h\n  qMRMLViewControllerBar.h\n  qMRMLViewControllerBar_p.h\n  qMRMLVolumeInfoWidget.h\n  qMRMLVolumeThresholdWidget.h\n  qMRMLVolumeWidget.h\n  qMRMLVolumeWidget_p.h\n  qMRMLWidget.h\n  qMRMLWindowLevelWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Python unit tests\nDESCRIPTION: This snippet adds a Python unit test for the module if BUILD_TESTING is enabled. It uses the slicer_add_python_unittest macro to register the test script for execution during the build process and at runtime.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/ScriptedLoadableExtensionTemplate/ScriptedLoadableModuleTemplate/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nslicer_add_python_unittest(SCRIPT ${MODULE_NAME}.py)\n```\n\n----------------------------------------\n\nTITLE: Building Module Logic with CMake Macro\nDESCRIPTION: This snippet uses a custom CMake macro, `SlicerMacroBuildModuleLogic`, to simplify the build process of the module logic. It passes the defined variables such as name, export directive, include directories, source files, and target libraries as arguments to the macro. The macro is assumed to handle the actual compilation and linking of the module's logic component.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Sequences/Logic/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleLogic(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: Defines the source files for the module. These are the C++ implementation files that will be compiled and linked to create the module. `vtkMRMLSegmentEditorNode.cxx` and `vtkMRMLSegmentEditorNode.h` are listed as source files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/MRML/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  vtkMRMLSegmentEditorNode.cxx\n  vtkMRMLSegmentEditorNode.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting VTK Wrapping Hints CMake\nDESCRIPTION: This snippet sets hints for Tcl and Python wrapping by defining the `VTK_WRAP_HINTS` variable to point to the directory containing the wrapping hints file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Logic/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(VTK_WRAP_HINTS ${CMAKE_CURRENT_SOURCE_DIR}/Wrapping/Tcl/hints)\n```\n\n----------------------------------------\n\nTITLE: Find ITK with Components\nDESCRIPTION: This snippet finds the ITK library, specifying the required components (ITKAnisotropicSmoothing, ITKIOImageBase, ITKImageFilterBase). It then includes the ITK USE file to make the found package available. ITK version 4.6 or higher is required.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CurvatureAnisotropicDiffusion/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKAnisotropicSmoothing\n  ITKIOImageBase\n  ITKImageFilterBase\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Adding a Simple Test with CMake\nDESCRIPTION: This snippet adds a simple test using the `simple_test` command. It specifies the name of the test executable, which corresponds to a C++ class or program to be tested. This command creates a test target that can be executed as part of the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/CropVolume/Testing/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nsimple_test(vtkMRMLCropVolumeParametersNodeTest1)\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Test Driver\nDESCRIPTION: This snippet uses the `slicerMacroConfigureModuleCxxTestDriver` macro to configure the C++ test driver. It specifies the module name, source files, and enables memory leak and error output checks. This macro likely generates the necessary CMake code to build and run the tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Units/Testing/Cxx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroConfigureModuleCxxTestDriver(\n  NAME ${KIT}\n  SOURCES ${KIT_TEST_SRCS}\n  WITH_VTK_DEBUG_LEAKS_CHECK\n  WITH_VTK_ERROR_OUTPUT_CHECK\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries in CMake\nDESCRIPTION: Specifies the libraries that the module depends on. These include logic libraries from the module itself and other modules, as well as Qt widgets libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Data/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  vtkSlicerCamerasModuleLogic\n  qSlicerSubjectHierarchyModuleWidgets\n  qMRMLWidgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module MOC Source Files\nDESCRIPTION: Specifies the header files that need to be processed by Qt's Meta Object Compiler (MOC). MOC generates code for Qt's signal and slot mechanism. Only header files that use Qt's meta-object system are included.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Reformat/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_MOC_SRCS\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Slicer Development Installation\nDESCRIPTION: This snippet configures the installation of Slicer extension development files. It uses an option to enable or disable the installation of development files and sets a variable (`Slicer_INSTALL_NO_DEVELOPMENT`) accordingly.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_28\n\nLANGUAGE: cmake\nCODE:\n```\noption(Slicer_INSTALL_DEVELOPMENT \"Install Slicer extension development files.\" OFF)\nmark_as_advanced(Slicer_INSTALL_DEVELOPMENT)\n\nif(NOT Slicer_INSTALL_DEVELOPMENT)\n  set(Slicer_INSTALL_NO_DEVELOPMENT 1)\nelse()\n  set(Slicer_INSTALL_NO_DEVELOPMENT 0)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Source Files\nDESCRIPTION: Defines the source files for the module, including both header and source files. These files will be compiled into the module's library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/LoadableCustomMarkups/MRML/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  vtkMRMLMarkupsTestLineNode.h\n  vtkMRMLMarkupsTestLineNode.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Building the Qt Library (CMake)\nDESCRIPTION: This snippet calls the `SlicerMacroBuildBaseQtLibrary` macro to build the Qt library. It passes the project name, export directive, include directories, source files, MOC sources, UI files, target libraries, and resources as parameters. It also enables PythonQt wrapping if `Slicer_USE_PYTHONQT` is enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTGUI/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nSlicerMacroBuildBaseQtLibrary(\n  NAME ${PROJECT_NAME}\n  EXPORT_DIRECTIVE ${KIT_export_directive}\n  INCLUDE_DIRECTORIES ${KIT_include_directories}\n  SRCS ${KIT_SRCS}\n  MOC_SRCS ${KIT_MOC_SRCS}\n  UI_SRCS ${KIT_UI_SRCS}\n  TARGET_LIBRARIES ${KIT_target_libraries}\n  RESOURCES ${KIT_resources}\n  WRAP_PYTHONQT\n  )\n```\n\n----------------------------------------\n\nTITLE: Conditional CLI Support (CMake)\nDESCRIPTION: This CMake snippet conditionally appends CLI-related scripts and modules to the existing lists if `Slicer_BUILD_CLI_SUPPORT` is enabled.  It utilizes `list(APPEND)` to add 'slicer/cli' to `Slicer_PYTHON_SCRIPTS` and extends the `Slicer_PYTHON_MODULES_CONFIG` string. This ensures that Command Line Interface (CLI) functionalities are included in the build only when specified.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/Python/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_BUILD_CLI_SUPPORT)\n  list(APPEND Slicer_PYTHON_SCRIPTS\n    slicer/cli\n    )\n  set(Slicer_PYTHON_MODULES_CONFIG \"${Slicer_PYTHON_MODULES_CONFIG},\n# CLI logic (Slicer_BUILD_CLI_SUPPORT:ON)\n'qSlicerBaseQTCLIPython',\n'qSlicerBaseQTCLIPythonQt',\n\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding Package: ITK\nDESCRIPTION: This snippet uses `find_package` to locate the ITK library, specifying required components. It appends additional components if `Slicer_BUILD_CLI_SUPPORT` is enabled via `ModuleDescriptionParser_ITK_COMPONENTS`. It also handles ITK Factory Registration based on ITK version.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/Logic/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKCommon\n  ITKIOTransformBase\n  ITKTransform\n  )\nif(Slicer_BUILD_CLI_SUPPORT)\n  list(APPEND ${PROJECT_NAME}_ITK_COMPONENTS ${ModuleDescriptionParser_ITK_COMPONENTS})\nendif()\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\nlist(APPEND ITK_LIBRARIES ITKFactoryRegistration)\nlist(APPEND ITK_INCLUDE_DIRS\n  ${ITKFactoryRegistration_INCLUDE_DIRS}\n  )\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files - CMake\nDESCRIPTION: This snippet defines the source files for the module's widgets, including C++ source and header files, moc files (Meta-Object Compiler generated from Qt headers), UI files (created with Qt Designer), and resource files. These variables will be used by the SlicerMacroBuildModuleWidgets macro to compile and link the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/LoadableExtensionTemplate/LoadableModuleTemplate/Widgets/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_SRCS\n  qSlicer${MODULE_NAME}FooBarWidget.cxx\n  qSlicer${MODULE_NAME}FooBarWidget.h\n  )\n\nset(${KIT}_MOC_SRCS\n  qSlicer${MODULE_NAME}FooBarWidget.h\n  )\n\nset(${KIT}_UI_SRCS\n  ../Resources/UI/qSlicer${MODULE_NAME}FooBarWidget.ui\n  )\n\nset(${KIT}_RESOURCES\n  ../Resources/qSlicer${MODULE_NAME}Module.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Write Markups Control Points to JSON - Python\nDESCRIPTION: This code snippet demonstrates how to write the positions of markup control points to a JSON file. It iterates through the control points, retrieves their positions and labels, and saves them in a JSON format using the `json` module. Requires the `json` module. The output is an array of dictionaries, where each dictionary contains the label and position of a control point.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\npointListNode = getNode(\"F\")\noutputFileName = \"c:/tmp/test.json\"\n\n# Get markup positions\ndata = []\nfor fidIndex in range(pointListNode.GetNumberOfControlPoints()):\n  coords=[0,0,0]\n  pointListNode.GetNthControlPointPosition(fidIndex,coords)\n  data.append({\"label\": pointListNode.GetNthControlPointLabel(), \"position\": coords})\n\nimport json\nwith open(outputFileName, \"w\") as outfile:\n  json.dump(data, outfile)\n```\n\n----------------------------------------\n\nTITLE: Building Loadable Module\nDESCRIPTION: Invokes a custom macro, `slicerMacroBuildLoadableModule`, to build the loadable module. This macro handles the complexities of building a Slicer module, including generating the necessary build targets and linking the module with its dependencies. It takes several parameters including module name, export directive, include directories, sources, MOC sources, UI sources, target libraries, and resources.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/LoadableExtensionTemplate/LoadableModuleTemplate/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroBuildLoadableModule(\n  NAME ${MODULE_NAME}\n  EXPORT_DIRECTIVE ${MODULE_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${MODULE_INCLUDE_DIRECTORIES}\n  SRCS ${MODULE_SRCS}\n  MOC_SRCS ${MODULE_MOC_SRCS}\n  UI_SRCS ${MODULE_UI_SRCS}\n  TARGET_LIBRARIES ${MODULE_TARGET_LIBRARIES}\n  RESOURCES ${MODULE_RESOURCES}\n  WITH_GENERIC_TESTS\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting VTK Version (CMake)\nDESCRIPTION: This snippet sets the VTK major and minor versions. It enforces that the major version must be 9, and the minor version must be 2 or 4. If the specified versions do not match these constraints, a fatal error is raised.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_26\n\nLANGUAGE: cmake\nCODE:\n```\nset(_default_vtk_major_version \"9\")\nset(Slicer_VTK_VERSION_MAJOR ${_default_vtk_major_version} CACHE STRING \"VTK major version (9)\")\nset_property(CACHE Slicer_VTK_VERSION_MAJOR PROPERTY STRINGS \"9\")\nif(NOT \"${Slicer_VTK_VERSION_MAJOR}\" MATCHES \"^(9)$\")\n  message(FATAL_ERROR \"error: Slicer_VTK_VERSION_MAJOR must be 9.\")\nendif()\nmark_as_superbuild(Slicer_VTK_VERSION_MAJOR)\n\nset(_default_vtk_minor_version \"4\")\nset(Slicer_VTK_VERSION_MINOR ${_default_vtk_minor_version} CACHE STRING \"VTK minor version (2 or 4)\")\nset_property(CACHE Slicer_VTK_VERSION_MINOR PROPERTY STRINGS \"2\" \"4\")\nif(NOT \"${Slicer_VTK_VERSION_MINOR}\" MATCHES \"^(2|4)$\")\n  message(FATAL_ERROR \"error: Slicer_VTK_VERSION_MINOR must be 2 or 4.\")\nendif()\nmark_as_superbuild(Slicer_VTK_VERSION_MINOR)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable and Linking Libraries in CMake\nDESCRIPTION: This code adds an executable target named ${CLP}Test using `ctk_add_executable_utf8` and links it against ${CLP}Lib and other libraries specified in `SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES`. It also sets properties like LABELS and FOLDER for the test target to ensure proper categorization and organization within the project's build system.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GaussianBlurImageFilter/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nctk_add_executable_utf8(${CLP}Test ${CLP}Test.cxx)\ntarget_link_libraries(${CLP}Test ${CLP}Lib ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES})\nset_target_properties(${CLP}Test PROPERTIES LABELS ${CLP})\nset_target_properties(${CLP}Test PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Modules (CMake)\nDESCRIPTION: This CMake snippet defines a configuration string for Python modules.  It includes a list of module names, presumably used for runtime module loading or dependency management. The string contains module names such as 'mrml', 'vtkAddon', and various Slicer-specific modules. The single quotes surrounding each module name suggest that this string is intended for use in a Python context.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/Python/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(Slicer_PYTHON_MODULES_CONFIG \"\n# slicer libs\n'mrml',\n'vtkAddon',\n'vtkSegmentationCore',\n'qMRMLWidgetsPythonQt',\n# slicer base libs\n'logic',\n'qSlicerBaseQTCorePythonQt',\n'qSlicerBaseQTGUIPythonQt',\n'qSlicerBaseQTAppPythonQt'\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Compiling Python Scripts using ctkMacroCompilePythonScript\nDESCRIPTION: Uses the `ctkMacroCompilePythonScript` CMake macro to compile the Python scripts and resources defined earlier. The macro takes the target name, script list, resource list, destination directory for the binary, and installation directory as arguments. `NO_INSTALL_SUBDIR` specifies that scripts should be installed directly to the installation directory without creating a subdirectory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/SegmentEditor/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nctkMacroCompilePythonScript(\n  TARGET_NAME ${MODULE_NAME}SubjectHierarchyPlugins\n  SCRIPTS \"${${MODULE_NAME}SubjectHierarchyPlugins_PYTHON_SCRIPTS}\"\n  RESOURCES \"${${MODULE_NAME}SubjectHierarchyPlugins_PYTHON_RESOURCES}\"\n  DESTINATION_DIR ${Slicer_BINARY_DIR}/${Slicer_QTSCRIPTEDMODULES_LIB_DIR}/SubjectHierarchyPlugins\n  INSTALL_DIR ${Slicer_INSTALL_QTSCRIPTEDMODULES_LIB_DIR}/SubjectHierarchyPlugins\n  NO_INSTALL_SUBDIR\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries\nDESCRIPTION: This snippet sets the target libraries for the module. These libraries are linked with the module when it is built. It depends on the MRML module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/VTKWidgets/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleMRML\n  )\n```\n\n----------------------------------------\n\nTITLE: Project Definition in CMake\nDESCRIPTION: Defines the project name as qSlicerModulesCore. This is a fundamental step in any CMake project, setting the root context for subsequent configurations.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Core/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(qSlicerModulesCore)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Files (CMake)\nDESCRIPTION: Configures a list of header files (`vtkSlicerConfigure.h`, `vtkSlicerVersionConfigureMinimal.h`) by using the `configure_file` command. It also includes `SlicerConfigureVersionHeaderTarget` and adds dependencies to `SlicerBaseLogic` and `MRMLCore`.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_76\n\nLANGUAGE: CMake\nCODE:\n```\nset(files\n  vtkSlicerConfigure.h\n  vtkSlicerVersionConfigureMinimal.h\n  )\nforeach(f ${files})\n  configure_file(\n    ${CMAKE_CURRENT_SOURCE_DIR}/CMake/${f}.in\n    ${CMAKE_CURRENT_BINARY_DIR}/${f}\n    )\nendforeach()\n\n# Add target configuring 'vtkSlicerVersionConfigure.h' at build time.\ninclude(SlicerConfigureVersionHeaderTarget)\nadd_dependencies(SlicerBaseLogic SlicerConfigureVersionHeader)\nadd_dependencies(MRMLCore SlicerConfigureVersionHeader)\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name\nDESCRIPTION: Sets the module name and converts it to uppercase for use in other variables. This is crucial for consistent naming throughout the module's build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/GeneralizedReformat/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_NAME GeneralizedReformat)\n\nstring(TOUPPER ${MODULE_NAME} MODULE_NAME_UPPER)\n```\n\n----------------------------------------\n\nTITLE: Setting module name in CMake\nDESCRIPTION: Sets the module name using the `set` command. This variable is likely used later in the CMake configuration to define targets and other module-specific settings.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/SubtractScalarVolumes/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_NAME SubtractScalarVolumes)\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory\nDESCRIPTION: Conditionally adds the 'Testing' subdirectory to the build process if testing is enabled (BUILD_TESTING is true). This includes the testing-related CMakeLists.txt and source files for running unit tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ExtractSkeleton/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Segmentation developer information\nDESCRIPTION: Information for developers on creating and modifying segmentation nodes and using segment editor effects from custom modules.  It refers to the Developer guide and the Slicer script repository.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/modules/segmenteditor.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Set Module Name - CMake\nDESCRIPTION: This snippet sets the module name using the `set` command. The module name is then used in other parts of the CMake configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GradientAnisotropicDiffusion/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_NAME GradientAnisotropicDiffusion)\n```\n\n----------------------------------------\n\nTITLE: Define CMake Macro for Adding Script Tests\nDESCRIPTION: This CMake macro, `add_cmakescript_test`, simplifies the process of adding CMake script tests. It takes a test name and script path as input, creates a test using `add_test`, sets the `LABELS` property to `CMake`, and defines a `PASS_REGULAR_EXPRESSION` for successful test execution. The macro uses `${CMAKE_COMMAND}` to execute the script.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMake/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(add_cmakescript_test testname script)\n  add_test(cmake_${testname} ${CMAKE_COMMAND}\n    -DTEST_${testname}:BOOL=ON\n    -P ${CMAKE_SOURCE_DIR}/${script})\n  set_tests_properties(cmake_${testname} PROPERTIES\n    LABELS CMake\n    PASS_REGULAR_EXPRESSION \"SUCCESS\")\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Setting Kit Name - CMake\nDESCRIPTION: Sets the KIT variable to the project name. This variable is used to define other module-specific variables.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Disabling ITK Factory Registration\nDESCRIPTION: Conditionally disables ITK's automatic IO factory registration based on the ITK version. For ITK versions 5.3 and later, it disables IMAGEIO, MESHIO, and TRANSFORMIO factory registration. For older versions, it disables general IO factory registration. This is followed by appending ITKFactoryRegistration to ITK libraries and include directories, and including the ITK use file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/IDImageIO/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\nlist(APPEND ITK_LIBRARIES ITKFactoryRegistration)\nlist(APPEND ITK_INCLUDE_DIRS ${ITKFactoryRegistration_INCLUDE_DIRS})\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Defining Resources in CMake\nDESCRIPTION: Defines the Qt resource collection (.qrc) file, which bundles resources such as images and other data files required by the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SlicerWelcome/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_RESOURCES\n  Resources/qSlicer${MODULE_NAME}Module.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding ITK with Required Components\nDESCRIPTION: This section configures the ITK dependency by first defining the required ITK components and then uses find_package to locate ITK. It also sets ITK macro to disable IO factory registration for ITK versions >= 5.3. It also includes ITK_USE_FILE.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleScalarVectorDWIVolume/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKCommon\n  ITKIOImageBase\n  ITKIOTransformBase\n  ITKImageFunction\n  ITKImageGrid\n  ITKTransform\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Building Slicer Extensions Manually (Windows)\nDESCRIPTION: This snippet provides instructions for building, testing, and packaging Slicer extensions on Windows using CMake. It sets the necessary CMake variables, including paths to the Slicer build tree and extension description files, and then builds the extensions using the CMake build command.  It demonstrates building using the command line in Windows, and assumes that CMake is installed.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/extensions.md#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ncd /d C:\\D\\ExtensionsIndexR\n\n\"c:\\Program Files\\CMake\\bin\\cmake.exe\" -DSlicer_DIR:PATH=C:/D/SR/Slicer-build ^\n -DSlicer_EXTENSION_DESCRIPTION_DIR:PATH=C:/D/ExtensionsIndex ^\n -DCMAKE_BUILD_TYPE:STRING=Release ^\n C:/D/S/Extensions/CMake\n\n\"c:\\Program Files\\CMake\\bin\\cmake.exe\" --build . --config Release\n```\n\n----------------------------------------\n\nTITLE: Set CLI Modules List\nDESCRIPTION: Defines the list of CLI modules to be built by Slicer. The order of modules is topologically significant due to dependencies. The list includes modules for scalar volume manipulation, filtering, model creation, and image processing.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(cli_modules\n  AddScalarVolumes\n  CastScalarVolume\n  CheckerBoardFilter\n  CurvatureAnisotropicDiffusion\n  ExecutionModelTour\n  ExtractSkeleton\n  GaussianBlurImageFilter\n  GradientAnisotropicDiffusion\n  GrayscaleFillHoleImageFilter\n  GrayscaleGrindPeakImageFilter\n  GrayscaleModelMaker\n  HistogramMatching\n  ImageLabelCombine\n  LabelMapSmoothing\n  MaskScalarVolume\n  MedianImageFilter\n  MergeModels\n  ModelMaker\n  ModelToLabelMap\n  MultiplyScalarVolumes\n  N4ITKBiasFieldCorrection\n  OrientScalarVolume\n  ProbeVolumeWithModel\n  ResampleDTIVolume # Needed by ResampleScalarVectorDWIVolume (compile time dependency)\n  ResampleScalarVectorDWIVolume # Depends on DiffusionApplications, needed by CropVolume (runtime dependency)\n  RobustStatisticsSegmenter\n  SimpleRegionGrowingSegmentation\n  SubtractScalarVolumes\n  ThresholdScalarVolume\n  VotingBinaryHoleFillingImageFilter\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting MRML Libraries Variable\nDESCRIPTION: This snippet defines the MRML libraries that will be grouped together. It initializes a list `_mrml_libraries` with `MRMLCore`, `MRMLLogic`, and `MRMLDisplayableManager`. If `Slicer_BUILD_CLI_SUPPORT` is enabled, `MRMLCLI` is added to the list.  Finally, the `MRML_LIBRARIES` variable is set with the collected MRML libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\n# Set MRML_LIBRARIES\n#-----------------------------------------------------------------------------\n# Anticipating the move of MRML related libraries to a standalone project,\n# let's group these libraries.\n# Note also that since MRMLIDImageIO is an ITK plugin it is NOT added to that list.\nset(_mrml_libraries MRMLCore MRMLLogic MRMLDisplayableManager)\nif(Slicer_BUILD_CLI_SUPPORT)\n  list(APPEND _mrml_libraries MRMLCLI)\nendif()\nset(MRML_LIBRARIES ${_mrml_libraries} CACHE INTERNAL \"MRML libraries\" FORCE)\n```\n\n----------------------------------------\n\nTITLE: Building Qt Library - CMake\nDESCRIPTION: This snippet utilizes a custom CMake macro, `SlicerMacroBuildModuleQtLibrary`, to build the Qt library for the module. It passes various parameters, including the module's name, export directive, include directories, source files, MOC source files, UI source files, target libraries, and resources. It also enables PythonQt wrapping.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nSlicerMacroBuildModuleQtLibrary(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  FOLDER \"Module-${MODULE_NAME}\"\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  UI_SRCS ${${KIT}_UI_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  RESOURCES ${${KIT}_RESOURCES}\n  WRAP_PYTHONQT\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Qt Designer Plugin using ctkMacroBuildQtDesignerPlugin\nDESCRIPTION: This snippet utilizes the `ctkMacroBuildQtDesignerPlugin` macro to simplify the process of building a Qt Designer plugin. It passes in the plugin name, export directive, folder name, source files, MOC source files, and target libraries as arguments. The macro handles the creation of necessary build rules and configurations.  It relies on previously defined `${KIT}_*` variables.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nctkMacroBuildQtDesignerPlugin(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT}\n  FOLDER \"Module-${MODULE_NAME}\"\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory\nDESCRIPTION: This snippet adds the Testing subdirectory if the `BUILD_TESTING` variable is enabled. This allows for running unit tests for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/VotingBinaryHoleFillingImageFilter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Project Initialization and Variable Setting\nDESCRIPTION: Initializes the CMake project and defines several CMake variables used throughout the build process. These variables specify the project name, export directive, include directories, source files, and resources.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(qSlicer${MODULE_NAME}SubjectHierarchyPlugins)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"Q_SLICER_${MODULE_NAME_UPPER}_SUBJECT_HIERARCHY_PLUGINS_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSlicerSubjectHierarchyModuleLogic_INCLUDE_DIRS}\n  ${qSlicerSubjectHierarchyModuleWidgets_INCLUDE_DIRS}\n  ${MRMLCore_INCLUDE_DIRS}\n  ${MRMLLogic_INCLUDE_DIRS}\n  ${qMRMLWidgets_INCLUDE_DIRS}\n  ${vtkSlicer${MODULE_NAME}ModuleLogic_INCLUDE_DIRS}\n  )\n\nset(${KIT}_SRCS\n  qSlicerSubjectHierarchy${MODULE_NAME}Plugin.cxx\n  qSlicerSubjectHierarchy${MODULE_NAME}Plugin.h\n  )\n\nset(${KIT}_MOC_SRCS\n  qSlicerSubjectHierarchy${MODULE_NAME}Plugin.h\n  )\n\nset(${KIT}_UI_SRCS\n  )\n\nset(${KIT}_RESOURCES\n  Resources/${KIT}.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name in CMake\nDESCRIPTION: Sets the module name to 'Welcome' and converts it to uppercase for use in defining export directives.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SlicerWelcome/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME Welcome)\n\nstring(TOUPPER ${MODULE_NAME} MODULE_NAME_UPPER)\n```\n\n----------------------------------------\n\nTITLE: Build Loadable Module - CMake\nDESCRIPTION: Calls the `slicerMacroBuildLoadableModule` macro to build the Transforms module. This macro handles the details of compiling and linking the module, including setting up dependencies and generating the necessary build files. It configures a loadable module within the Slicer application.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroBuildLoadableModule(\n  NAME ${MODULE_NAME}\n  EXPORT_DIRECTIVE ${MODULE_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${MODULE_INCLUDE_DIRECTORIES}\n  SRCS ${MODULE_SRCS}\n  MOC_SRCS ${MODULE_MOC_SRCS}\n  UI_SRCS ${MODULE_UI_SRCS}\n  TARGET_LIBRARIES ${MODULE_TARGET_LIBRARIES}\n  RESOURCES ${MODULE_RESOURCES}\n  WITH_GENERIC_TESTS\n  )\n```\n\n----------------------------------------\n\nTITLE: Header Installation\nDESCRIPTION: This snippet installs the header files. If the `PROJECT_NAME_INSTALL_NO_DEVELOPMENT` variable is not defined or is OFF, it will install all header files from the source directory and the configured header file to the include directory under the project name. It uses GLOB to identify header files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/ITKFactoryRegistration/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# --------------------------------------------------------------------------\n# Install headers\n# --------------------------------------------------------------------------\nif(NOT DEFINED ${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT)\n  set(${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT ON)\nendif()\nif(NOT ${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT)\n  file(GLOB headers \"${CMAKE_CURRENT_SOURCE_DIR}/*.(h|txx)\")\n  install(\n    FILES ${headers} ${CMAKE_CURRENT_BINARY_DIR}/${configure_header_file}\n    DESTINATION include/${PROJECT_NAME} COMPONENT Development)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name in CMake\nDESCRIPTION: Sets the module name to 'SceneViews' and converts it to uppercase for use in defining export directives. This ensures consistency in naming conventions throughout the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SceneViews/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_NAME SceneViews)\n\nstring(TOUPPER ${MODULE_NAME} MODULE_NAME_UPPER)\n```\n\n----------------------------------------\n\nTITLE: Setting Kit Name\nDESCRIPTION: Sets the KIT variable to the project name. This variable is likely used later to reference the module in other CMake commands.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Setting Python Test Scripts List\nDESCRIPTION: This CMake snippet defines a list of Python scripts to be used as unit tests for the Slicer extension. These scripts are typically located within the source tree of the extension.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/Testing/Python/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(EXTENSION_TEST_PYTHON_SCRIPTS\n  SegmentationsModuleTest1.py\n  SegmentationsModuleTest2.py\n  SegmentationWidgetsTest1.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Add Python Unittest (CMake)\nDESCRIPTION: This snippet conditionally adds a Python unittest to the build process if the BUILD_TESTING variable is enabled. It uses the slicer_add_python_unittest macro to register the unittest script (\"VectorToScalarVolume.py\") as a ctest.  This allows the test to be run during the build process and at runtime.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/VectorToScalarVolume/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n\n  # Register the unittest subclass in the main script as a ctest.\n  # Note that the test will also be available at runtime.\n  slicer_add_python_unittest(SCRIPT ${MODULE_NAME}.py)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Linked Slice Views by Default in Slicer (Python)\nDESCRIPTION: This code snippet configures slice views to be linked by default when the application starts or when the scene is cleared. It modifies all existing slice composite nodes and the default slice composite node to enable linked control, ensuring that slice views are synchronized.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_48\n\nLANGUAGE: python\nCODE:\n```\n# Set linked slice views  in all existing slice composite nodes and in the default node\nsliceCompositeNodes = slicer.util.getNodesByClass(\"vtkMRMLSliceCompositeNode\")\ndefaultSliceCompositeNode = slicer.mrmlScene.GetDefaultNodeByClass(\"vtkMRMLSliceCompositeNode\")\nif not defaultSliceCompositeNode:\n  defaultSliceCompositeNode = slicer.mrmlScene.CreateNodeByClass(\"vtkMRMLSliceCompositeNode\")\n  defaultSliceCompositeNode.UnRegister(None)  # CreateNodeByClass is factory method, need to unregister the result to prevent memory leaks\n  slicer.mrmlScene.AddDefaultNode(defaultSliceCompositeNode)\nsliceCompositeNodes.append(defaultSliceCompositeNode)\nfor sliceCompositeNode in sliceCompositeNodes:\n  sliceCompositeNode.SetLinkedControl(True)\n```\n\n----------------------------------------\n\nTITLE: Setting Baseline and Input Data Directories (CMake)\nDESCRIPTION: This snippet defines variables for the baseline and input data directories, used later in the testing process. It sets the `BASELINE` variable to point to the directory containing baseline data and the `INPUT` variable to point to the directory containing input data. These paths are relative to the current source directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/LabelMapSmoothing/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(BASELINE ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Baseline)\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input)\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory in CMake\nDESCRIPTION: Conditionally adds a subdirectory for testing if the `BUILD_TESTING` variable is enabled. This allows for running unit tests or other tests related to the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name in CMake\nDESCRIPTION: Sets the module name for the ThresholdScalarVolume module.  This name is used throughout the CMake configuration process. No dependencies.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ThresholdScalarVolume/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME ThresholdScalarVolume)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries\nDESCRIPTION: Specifies the target libraries that the module depends on, including the logic and widget libraries specific to the SubjectHierarchy module. Linking against these libraries provides the module with access to their functionality.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  qSlicer${MODULE_NAME}ModuleWidgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Excluding Header File from Wrapping\nDESCRIPTION: This snippet uses `set_source_files_properties` to exclude `qSlicerSubjectHierarchyAbstractPlugin.h` from being wrapped by a wrapping tool (likely PythonQt). This is often done for abstract classes or other headers that shouldn't be directly exposed to scripting languages.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/Widgets/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset_source_files_properties( qSlicerSubjectHierarchyAbstractPlugin.h WRAP_EXCLUDE )\n```\n\n----------------------------------------\n\nTITLE: Setting Extension Metadata\nDESCRIPTION: Defines various metadata properties associated with the 3D Slicer extension. These include the extension's homepage, contributors, description, icon URL, screenshot URLs, and dependencies.  This information is used by the Slicer Extension Manager.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Extensions/Default/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(EXTENSION_HOMEPAGE \"https://www.slicer.org/wiki/Documentation/Nightly/Extensions/TemplateKey\")\nset(EXTENSION_CONTRIBUTORS \"John Doe (AnyWare Corp.)\")\nset(EXTENSION_DESCRIPTION \"This is an example of a simple extension\")\nset(EXTENSION_ICONURL \"https://www.example.com/Slicer/Extensions/TemplateKey.png\")\nset(EXTENSION_SCREENSHOTURLS \"https://www.example.com/Slicer/Extensions/TemplateKey/Screenshots/1.png\")\nset(EXTENSION_DEPENDS \"NA\") # Specified as a list or \"NA\" if no dependencies\n```\n\n----------------------------------------\n\nTITLE: Building Module Logic Using a CMake Macro\nDESCRIPTION: This CMake snippet uses a macro, `SlicerMacroBuildModuleLogic`, to build the module logic component. It passes the name, export directive, include directories, source files, and target libraries as arguments to the macro. This macro likely handles the creation of the library or executable for the module logic.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/GeneralizedReformat/Logic/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleLogic(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Module Logic - CMake\nDESCRIPTION: This snippet utilizes a custom CMake macro, `SlicerMacroBuildModuleLogic`, to build the module logic. It passes the previously defined variables such as the module name, export directive, include directories, source files, and target libraries to the macro for configuration and building.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/Logic/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleLogic(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for Module in CMake\nDESCRIPTION: This snippet specifies the source files (.cxx and .h) that constitute the module. These files contain the implementation of the module's classes and functions. In this case it includes source files related to a sequence browser node.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Sequences/MRML/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_SRCS\n  vtkMRMLSequenceBrowserNode.cxx\n  vtkMRMLSequenceBrowserNode.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Target Libraries in CMake\nDESCRIPTION: This snippet defines the target libraries that the module depends on. It lists the Slicer modules, MRML libraries, and Qt libraries required for linking. These libraries provide the necessary functionality for the module to operate.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOMLib/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  vtkSlicerSubjectHierarchyModuleLogic\n  qSlicerSubjectHierarchyModuleWidgets\n  qSlicerDICOMLibModuleWidgets\n  MRMLCore\n  MRMLLogic\n  qMRMLWidgets\n  ${QT_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining MOC Source Files\nDESCRIPTION: Specifies the header files that need to be processed by the Meta-Object Compiler (moc) to generate Qt meta-object code.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTApp/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT_MOC_SRCS\n  qSlicerAboutDialog.h\n  qSlicerApplicationHelper.h\n  qSlicerErrorReportDialog.h\n  qSlicerMainWindow.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Append Modules for DICOM Support\nDESCRIPTION: Conditionally appends the 'CreateDICOMSeries' and 'PETStandardUptakeValueComputation' modules to the list of CLI modules if DICOM support is enabled (Slicer_BUILD_DICOM_SUPPORT is true).\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_BUILD_DICOM_SUPPORT)\n  list(APPEND cli_modules CreateDICOMSeries)\n  list(APPEND cli_modules PETStandardUptakeValueComputation)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding CTKAppLauncherLib Package\nDESCRIPTION: Finds the CTKAppLauncherLib package. This library is required and used for launching applications.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(CTKAppLauncherLib REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Define Project and Set Variables (CMake)\nDESCRIPTION: This snippet initializes the CMake project, sets the kit name, defines the export directive for the module's logic, and specifies include directories for the build process. It's crucial for setting up the basic build environment for the Slicer module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/LoadableCustomMarkups/Logic/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleLogic)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_LOGIC_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n   ${CMAKE_CURRENT_BINARY_DIR}\n  )\n```\n\n----------------------------------------\n\nTITLE: Register and Observe MRML Node Events\nDESCRIPTION: The `vtkSetAndObserveMRMLObjectEventsMacro` registers a MRML node and adds an observer for a specified set of events. This allows the registered object to react to a variety of changes in the observed node, providing more granular control over event handling.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/mrml_overview.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Building Qt Library with Slicer Macro - CMake\nDESCRIPTION: This snippet uses the SlicerMacroBuildModuleQtLibrary macro to build the Qt library for the module. It specifies the name, export directive, folder, include directories, source files, meta-object compiler sources, user interface sources, target libraries, and resources. It also enables PythonQt wrapping.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Plots/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleQtLibrary(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  FOLDER \"Module-${MODULE_NAME}\"\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  UI_SRCS ${${KIT}_UI_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  RESOURCES ${${KIT}_RESOURCES}\n  WRAP_PYTHONQT\n  )\n```\n\n----------------------------------------\n\nTITLE: Set Slicer Build Options\nDESCRIPTION: Defines options for building Slicer extensions, the extension description directory, and the local extensions directory. These options are stored in the CMake cache and can be configured by the user.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/CMake/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(Slicer_BUILD_EXTENSIONS ON CACHE INTERNAL \"Build Slicer extensions.\")\nset(Slicer_EXTENSION_DESCRIPTION_DIR \"${default_extension_description_dir}\" CACHE PATH \"Path to folder containing *.json files to consider.\")\nset(Slicer_LOCAL_EXTENSIONS_DIR \"${default_local_extension_dir}\" CACHE STRING \"Path to extension sources locally available\")\noption(BUILD_TESTING \"Test extensions.\" ${Slicer_BUILD_TESTING})\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel in CMake\nDESCRIPTION: Finds the SlicerExecutionModel package, which provides necessary utilities for building Slicer modules. It requires the SlicerExecutionModel package to be present. Includes the use file to set relevant variables.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ThresholdScalarVolume/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Finding Slicer Execution Model\nDESCRIPTION: This snippet uses the find_package command to locate the SlicerExecutionModel package, which is required for building Slicer CLI modules.  It also includes the necessary use file for incorporating the found package into the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleScalarVectorDWIVolume/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Defining MOC Source Files in CMake\nDESCRIPTION: Specifies the header files that need to be processed by the Meta-Object Compiler (MOC) to generate Qt meta-object code.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SlicerWelcome/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_MOC_SRCS\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries\nDESCRIPTION: Defines the MODULE_TARGET_LIBRARIES variable containing a list of libraries that the Volumes module depends on. These libraries need to be linked with the module during the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_TARGET_LIBRARIES\n  qSlicer${MODULE_NAME}ModuleWidgets\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  qSlicer${MODULE_NAME}SubjectHierarchyPlugins\n  qSlicerColorsModuleWidgets\n  vtkSlicerColorsModuleLogic\n  vtkSlicerColorsModuleMRML\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting project name and export directive using CMake\nDESCRIPTION: This snippet initializes the project name and defines the export directive for the Qt CLI plugins. The project name is derived from the `${PROJECT_NAME}` variable and the export directive `${KIT}_EXPORT` is defined for use in header files to manage symbol visibility during compilation and linking.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCLI/DesignerPlugins/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT ${PROJECT_NAME}Plugins)\nproject(${KIT})\n\n#\n# See CTK/CMake/ctkMacroBuildQtPlugin.cmake for details\n#\n\n# The header '${KIT}Export.h' will be automatically configured.\nset(${KIT}_EXPORT \"Q_SLICER_BASE_QTCLI_PLUGINS_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Python Wrapping\nDESCRIPTION: Configures Python wrapping for the library if `VTK_WRAP_PYTHON` is enabled and `BUILD_SHARED_LIBS` is also enabled. It uses the `vtkMacroKitPythonWrap` macro to generate the Python wrapper.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkSegmentationCore/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif(VTK_WRAP_PYTHON AND BUILD_SHARED_LIBS)\n\n  set(Slicer_Wrapped_LIBRARIES\n    )\n\n  include(vtkMacroKitPythonWrap)\n\n  vtkMacroKitPythonWrap(\n    KIT_NAME ${PROJECT_NAME}\n    KIT_SRCS ${vtkSegmentationCore_SRCS}\n    KIT_INSTALL_BIN_DIR ${${PROJECT_NAME}_INSTALL_BIN_DIR}\n    KIT_INSTALL_LIB_DIR ${${PROJECT_NAME}_INSTALL_LIB_DIR}\n    )\n\n  # Export target\n  export(TARGETS ${PROJECT_NAME}Python APPEND FILE ${${PROJECT_NAME}_EXPORT_FILE})\n  # Folder\n  if(NOT \"${${PROJECT_NAME}_FOLDER}\" STREQUAL \"\")\n    set_target_properties(${PROJECT_NAME}Python PROPERTIES FOLDER ${${PROJECT_NAME}_FOLDER})\n    if(TARGET ${PROJECT_NAME}Hierarchy)\n      set_target_properties(${PROJECT_NAME}Hierarchy PROPERTIES FOLDER ${${PROJECT_NAME}_FOLDER})\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Test - CMake\nDESCRIPTION: Adds an external data test that executes the ${CLP}Test executable and compares its output against baseline data. It uses the ExternalData module to manage the data dependencies and comparison. It also defines the entry point and input data required for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MultiplyScalarVolumes/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(testname ${CLP}Test)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  --compare DATA{${BASELINE}/${CLP}Test.nrrd,:}\n            ${TEMP}/${CLP}Test.nrrd\n  ModuleEntryPoint\n    --order 1\n    DATA{${INPUT}/CTHeadAxial.nhdr,CTHeadAxial.raw.gz}\n    DATA{${INPUT}/CTHeadAxial.nhdr,CTHeadAxial.raw.gz}\n    ${TEMP}/${CLP}Test.nrrd\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Excluding Source Files from Wrapping\nDESCRIPTION: Excludes specific header files from the wrapping process. This is typically used for abstract classes or headers that should not be exposed through the wrapping interface.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset_source_files_properties(\n  qSlicerFileReader.h\n  qSlicerFileWriter.h\n  WRAP_EXCLUDE\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Project and Setting Variables (CMake)\nDESCRIPTION: This snippet initializes the CMake project and sets several variables used throughout the build configuration. It sets the project name, export directive, include directories, and source files for the module logic.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/Logic/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleLogic)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_LOGIC_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${MRMLCore_INCLUDE_DIRS}\n  )\n\nset(${KIT}_SRCS\n  vtkSlicer${MODULE_NAME}ModuleLogic.cxx\n  vtkSlicer${MODULE_NAME}ModuleLogic.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Installing prerequisites on CentOS 7\nDESCRIPTION: This command installs the packages `patch`, `mesa-libGL-devel`, and `libuuid-devel` using `yum` on CentOS 7. These packages provide necessary components for building Slicer.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/linux.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nsudo yum install patch mesa-libGL-devel libuuid-devel\n```\n\n----------------------------------------\n\nTITLE: Defining Project Version\nDESCRIPTION: This code snippet defines the project version using `Slicer_VERSION_MAJOR`, `Slicer_VERSION_MINOR`, and `Slicer_VERSION_PATCH` variables. If these variables are not already defined, it sets them to default values. Finally, it calls the `project()` command with the project name and version.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED Slicer_VERSION_MAJOR)\n  set(Slicer_VERSION_MAJOR \"5\")\nendif()\nif(NOT DEFINED Slicer_VERSION_MINOR)\n  set(Slicer_VERSION_MINOR \"9\")\nendif()\nif(NOT DEFINED Slicer_VERSION_PATCH)\n  set(Slicer_VERSION_PATCH \"0\")\nendif()\nproject(Slicer VERSION \"${Slicer_VERSION_MAJOR}.${Slicer_VERSION_MINOR}.${Slicer_VERSION_PATCH}\")\n```\n\n----------------------------------------\n\nTITLE: Finding ITK Package and Setting Components\nDESCRIPTION: Finds the ITK package with specific components (ITKCommon, ITKIOImageBase). Sets the required version to 4.6 or greater. Includes handling for ITK versions >= 5.3 to disable factory register managers.  Includes the ITK use file to link the ITK library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ImageLabelCombine/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKCommon\n  ITKIOImageBase\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Test with Affine Transform and BS Interpolation\nDESCRIPTION: This test case makes use of an affine transform coupled with BSpline ('bs') interpolation. Parameter -o 3 presumably represents the BSpline order, important when assessing BSpline resampling.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleScalarVectorDWIVolume/Testing/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(AffineFile ${ResampleDTIVolume_INPUT}/affine.tfm)\nset(testname ${CLP}BSplineInterpolationTest)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  --compare\n    DATA{${INPUT}/MRHeadResampledBSplineInterpolationTest.nrrd}\n    ${TEMP}/${testname}.nrrd\n  ModuleEntryPoint\n    -f ${AffineFile}\n    --interpolation bs\n    -o 3\n    DATA{${INPUT}/MRHeadResampled.nhdr,MRHeadResampled.raw.gz}\n    ${TEMP}/${testname}.nrrd\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Building Qt Designer Plugin with ctkMacroBuildQtDesignerPlugin\nDESCRIPTION: This snippet uses the `ctkMacroBuildQtDesignerPlugin` macro to automate the build process for a Qt Designer plugin. It takes the plugin's name, export directive, output folder, source files, moc source files, and target libraries as input. The macro handles the generation of necessary build rules, such as moc compilation and linking.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nctkMacroBuildQtDesignerPlugin(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT}\n  FOLDER \"Module-${MODULE_NAME}\"\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Exporting Segmentation to Labelmap with Custom Mapping - Python\nDESCRIPTION: This snippet demonstrates how to export a segmentation to a labelmap volume using a custom label value mapping defined in a color table node. It retrieves the segmentation node, creates a new labelmap volume, retrieves or creates a color table node, and then exports the segmentation using the custom color table.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsegmentationNode = getNode('Segmentation')  # source segmentation node\nlabelmapVolumeNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLLabelMapVolumeNode\")  # export to new labelmap volume\nreferenceVolumeNode = None # it could be set to the master volume\nsegmentIds = segmentationNode.GetSegmentation().GetSegmentIDs()  # export all segments\ncolorTableNode = ...  # created from scratch or loaded from file\n\nslicer.modules.segmentations.logic().ExportSegmentsToLabelmapNode(segmentationNode, segmentIds, labelmapVolumeNode, referenceVolumeNode, slicer.vtkSegmentation.EXTENT_REFERENCE_GEOMETRY, colorTableNode)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Unit Tests\nDESCRIPTION: This CMake snippet iterates through the list of Python scripts and adds each one as a unit test using the `slicer_add_python_unittest` macro. The macro configures the test to run with specific arguments, such as disabling CLI modules and the main window. It adds module paths to find the built modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/Testing/Python/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(scriptName ${EXTENSION_TEST_PYTHON_SCRIPTS})\n  slicer_add_python_unittest(\n    SCRIPT ${scriptName}\n    SLICER_ARGS --disable-cli-modules\n                --no-main-window\n                --additional-module-paths\n                  ${MODULE_BUILD_DIR}\n                  ${CMAKE_BINARY_DIR}/${Slicer_QTSCRIPTEDMODULES_LIB_DIR}\n    TESTNAME_PREFIX nomainwindow_\n    )\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Project Setup & Variable Definitions (CMake)\nDESCRIPTION: This snippet initializes the CMake project, defines a base name for the target (KIT), sets up the export directive, and initializes variables to store include directories, source files, and target libraries. These variables are later used in the module build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/LoadableExtensionTemplate/LoadableModuleTemplate/Logic/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleLogic)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_LOGIC_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  )\n\nset(${KIT}_SRCS\n  vtkSlicer${MODULE_NAME}Logic.cxx\n  vtkSlicer${MODULE_NAME}Logic.h\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  ${ITK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Define Project and Set Variables (CMake)\nDESCRIPTION: This snippet defines the project name, sets the export directive for the module's logic component, and initializes variables for include directories, source files, and target libraries. These variables are later used in the SlicerMacroBuildModuleLogic macro to configure the build.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperLoadableModuleTemplate/Logic/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleLogic)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_LOGIC_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  )\n\nset(${KIT}_SRCS\n  vtkSlicer${MODULE_NAME}Logic.cxx\n  vtkSlicer${MODULE_NAME}Logic.h\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  ${ITK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Executable and Dependencies (CMake)\nDESCRIPTION: This snippet creates an executable named `${CLP}Test` from `${CLP}Test.cxx`. It then adds dependencies, links libraries, and sets target properties, including labels and folder location for the executable. The required libraries are `${CLP}Lib` and `${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES}`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ModelMaker/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nctk_add_executable_utf8(${CLP}Test ${CLP}Test.cxx)\nadd_dependencies(${CLP}Test ${CLP})\ntarget_link_libraries(${CLP}Test ${CLP}Lib ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES})\nset_target_properties(${CLP}Test PROPERTIES LABELS ${CLP})\nset_target_properties(${CLP}Test PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Adding Slicer Extension Metadata Default Tests\nDESCRIPTION: This uses the `add_cmakescript_test` macro to add a test for setting default values on slicer extension metadata. It calls `Extensions/CMake/SlicerExtensionDescriptionSpec.cmake` to verify its behavior.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/CMake/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_cmakescript_test(\n  slicer_extension_metadata_set_defaults_test\n  Extensions/CMake/SlicerExtensionDescriptionSpec.cmake)\n```\n\n----------------------------------------\n\nTITLE: Extension Catalog Entry File JSON Schema\nDESCRIPTION: This JSON schema defines the structure and validation rules for an extension catalog entry file, which describes how to build and package a Slicer extension. It specifies the required and optional fields, such as category, scm_url, scm_revision, scm_type, build_dependencies, build_subdirectory and enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/extensions.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{jsonschema} ../../Schema/slicer-extension-catalog-entry-schema-v1.0.0.json\n```\n\n----------------------------------------\n\nTITLE: Defining Project and Setting Variables - CMake\nDESCRIPTION: This snippet initializes a CMake project, defines the kit name, sets an export directive for the module logic, and initializes variables for include directories, source files, and target libraries.  The `${MODULE_NAME}` and `${MODULE_NAME_UPPER}` variables are assumed to be defined elsewhere, likely in a parent CMakeLists.txt.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/Logic/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleLogic)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_LOGIC_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  )\n\nset(${KIT}_SRCS\n  vtkSlicer${MODULE_NAME}Logic.cxx\n  vtkSlicer${MODULE_NAME}Logic.h\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  ${ITK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Include Module Enabled Check\nDESCRIPTION: This line includes a CMake file that provides a function (slicer_is_loadable_builtin_module_enabled) to check if a specific module is enabled for building. This allows for selective building of modules based on configuration options.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(SlicerCheckModuleEnabled)\n```\n\n----------------------------------------\n\nTITLE: Defining Test Sources in CMake\nDESCRIPTION: Defines a list of C++ source files for testing the qSlicerCamerasModule. The `KIT_TEST_SRCS` variable holds the paths to these test files, which are later used in the CxxTestDriver configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Cameras/Testing/Cxx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT_TEST_SRCS\n  qSlicerCamerasModuleWidgetTest1.cxx\n  vtkSlicerCamerasModuleLogicCopyImportedCamerasTest.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries\nDESCRIPTION: Sets the `${KIT}_TARGET_LIBRARIES` variable to a list of target libraries. These libraries are linked to the current library during the build process. They represent the dependencies of the library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  vtkSlicerTablesModuleLogic\n  qSlicerSubjectHierarchyModuleWidgets\n  vtkSlicerSubjectHierarchyModuleLogic\n  qMRMLWidgets\n  MRMLLogic\n  MRMLCore\n  )\n```\n\n----------------------------------------\n\nTITLE: MOC Source Files Definition CMake\nDESCRIPTION: Specifies the header files that require Meta-Object Compiler (MOC) processing.  In this case, it includes the header file for the `FooBarWidget` which uses Qt's signals and slots.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperLoadableModuleTemplate/Widgets/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_MOC_SRCS\n  qSlicer${MODULE_NAME}FooBarWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Show Slice View Outside View Layout in Slicer (Python)\nDESCRIPTION: This code creates and displays a slice view outside the standard 3D Slicer layout.  It involves creating MRML nodes for the slice view and logic, and then creating a `qMRMLSliceWidget` to display the slice. A scripted module node is used to manage the view instead of the layout manager.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_55\n\nLANGUAGE: python\nCODE:\n```\n# layout name is used to create and identify the underlying slice node and  should be set to a value that is not used in any of the layouts owned by the layout manager\nlayoutName = \"TestSlice1\"\nlayoutLabel = \"TS1\"\nlayoutColor = [1.0, 1.0, 0.0]\n# ownerNode manages this view instead of the layout manager (it can be any node in the scene)\nviewOwnerNode = slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLScriptedModuleNode\")\n\n# Create MRML nodes\nviewLogic = slicer.vtkMRMLSliceLogic()\nviewLogic.SetMRMLScene(slicer.mrmlScene)\nviewNode = viewLogic.AddSliceNode(layoutName)\nviewNode.SetLayoutLabel(layoutLabel)\nviewNode.SetLayoutColor(layoutColor)\nviewNode.SetAndObserveParentLayoutNodeID(viewOwnerNode.GetID())\n\n# Create widget\nviewWidget = slicer.qMRMLSliceWidget()\nviewWidget.setMRMLScene(slicer.mrmlScene)\nviewWidget.setMRMLSliceNode(viewNode)\nsliceLogics = slicer.app.applicationLogic().GetSliceLogics()\nviewWidget.setSliceLogics(sliceLogics)\nsliceLogics.AddItem(viewWidget.sliceLogic())\nviewWidget.show()\n```\n\n----------------------------------------\n\nTITLE: Building Qt Designer Plugin using CMake Macro\nDESCRIPTION: This snippet uses the custom `ctkMacroBuildQtDesignerPlugin` CMake macro to automate the build process of the Qt Designer plugin. It takes various parameters such as the plugin name, export directive, source files, headers for MOC, and target libraries as inputs. The macro likely handles the generation of necessary build artifacts, including the plugin library and associated metadata.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCLI/DesignerPlugins/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nctkMacroBuildQtDesignerPlugin(\n  NAME ${PROJECT_NAME}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT}\n  FOLDER \"Core-Base\"\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name\nDESCRIPTION: This snippet sets the module name to 'TemplateKey'. This variable is used throughout the CMake configuration to identify the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/CLI/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME TemplateKey)\n```\n\n----------------------------------------\n\nTITLE: MOC Source Files Configuration\nDESCRIPTION: Specifies the header files that need to be processed by the Meta Object Compiler (MOC).  This is necessary for classes that use Qt's signals and slots mechanism.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/Loadable/Widgets/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_MOC_SRCS\n  qSlicer${MODULE_NAME}FooBarWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Register a new Volume Rendering mapper - C++\nDESCRIPTION: Registers a custom volume rendering displayable manager within the vtkSlicerVolumeRenderingLogic. This involves deriving from vtkMRMLVolumeRenderingDisplayNode and registering the class. It also handles registering control widgets for the rendering method.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_47\n\nLANGUAGE: C++\nCODE:\n```\nvoid qSlicerMyABCVolumeRenderingModule::setup()\n{\n  vtkMRMLThreeDViewDisplayableManagerFactory::GetInstance()->\n    RegisterDisplayableManager(\"vtkMRMLMyABCVolumeRenderingDisplayableManager\");\n\n  this->Superclass::setup();\n\n  qSlicerAbstractCoreModule* volumeRenderingModule =\n    qSlicerCoreApplication::application()->moduleManager()->module(\"VolumeRendering\");\n  if (volumeRenderingModule)\n    {\n    vtkNew<vtkMRMLMyABCVolumeRenderingDisplayNode> displayNode;\n    vtkSlicerVolumeRenderingLogic* volumeRenderingLogic =\n      vtkSlicerVolumeRenderingLogic::SafeDownCast(volumeRenderingModule->logic());\n    volumeRenderingLogic->RegisterRenderingMethod(\n      \"My ABC Volume Rendering\", displayNode->GetClassName());\n    }\n  else\n    {\n    qWarning() << \"Volume Rendering module is not found\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Volume (VTK) - C++\nDESCRIPTION: This C++ code snippet demonstrates how to create a new VTK volume. It creates a vtkImageData object, sets its dimensions and voxel type, and then creates a vtkMRMLScalarVolumeNode to represent the volume.  It also sets the origin and spacing of the volume.  Requires the VTK library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_16\n\nLANGUAGE: C++\nCODE:\n```\nvtkNew<vtkImageData> imageData;\nimageData->SetDimensions(10,10,10); // image size\nimageData->AllocateScalars(VTK_UNSIGNED_CHAR, 1); // image type and number of components\n// initialize the pixels here\n\nvtkNew<vtkMRMLScalarVolumeNode> volumeNode;\nvolumeNode->SetAndObserveImageData(imageData);\nvolumeNode->SetOrigin( -10., -10., -10.);\nvolumeNode->SetSpacing( 2., 2., 2. );\nmrmlScene->AddNode( volumeNode.GetPointer() );\n\nvolumeNode->CreateDefaultDisplayNodes()\n```\n\n----------------------------------------\n\nTITLE: Adding Executable for Test\nDESCRIPTION: This snippet adds an executable target named '${CLP}Test' using `ctk_add_executable_utf8`. It links this target with '${CLP}Lib' and libraries from 'SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES'. Properties such as 'LABELS' and 'FOLDER' are set to categorize and organize the target within the build system.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleScalarVectorDWIVolume/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nctk_add_executable_utf8(${CLP}Test ${CLP}Test.cxx)\ntarget_link_libraries(${CLP}Test ${CLP}Lib ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES})\nset_target_properties(${CLP}Test PROPERTIES LABELS ${CLP})\nset_target_properties(${CLP}Test PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Finding ITK with Components in CMake\nDESCRIPTION: Finds the ITK package with specific components required by the module, like ITKIOImageBase, ITKImageIntensity, ITKImageLabel, and ITKThresholding. Requires ITK to be installed. Includes conditional logic to avoid IO factory registration issues related to ITK versions.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ThresholdScalarVolume/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKIOImageBase\n  ITKImageIntensity\n  ITKImageLabel\n  ITKThresholding\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Access DICOM Tag of Subject Hierarchy Item in Python\nDESCRIPTION: Accesses a DICOM tag associated with an item in the Subject Hierarchy tree. It retrieves the Series Instance UID from the subject hierarchy and then fetches the SOP Instance UIDs. Finally, it accesses the DICOM tag (e.g., patient name) from the DICOM database using the instance UID.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/dicom.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nvolumeName = \"2: ENT IMRT\"\nvolumeNode = slicer.util.getNode(volumeName)\n\n# Get series instance UID from subject hierarchy\nshNode = slicer.vtkMRMLSubjectHierarchyNode.GetSubjectHierarchyNode(slicer.mrmlScene)\nvolumeItemId = shNode.GetItemByDataNode(volumeNode)\nseriesInstanceUID = shNode.GetItemUID(volumeItemId, 'DICOM')\n\n# Get patient name (0010,0010) from the first file of the series\ninstUids = slicer.dicomDatabase.instancesForSeries(seriesInstanceUID)\nprint(slicer.dicomDatabase.instanceValue(instUids[0], '0010,0010')) # patient name\n```\n\n----------------------------------------\n\nTITLE: Adding and Linking Executable Test\nDESCRIPTION: This snippet adds an executable test named ${CLP}Test using `ctk_add_executable_utf8` and links it against ${CLP}Lib and ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES}. It then sets properties for the target, including LABELS and FOLDER. Dependencies: ctk_add_executable_utf8, ${CLP}Lib, ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES}.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/N4ITKBiasFieldCorrection/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nctk_add_executable_utf8(${CLP}Test ${CLP}Test.cxx)\ntarget_link_libraries(${CLP}Test ${CLP}Lib ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES})\nset_target_properties(${CLP}Test PROPERTIES LABELS ${CLP})\nset_target_properties(${CLP}Test PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Add Executable and Link Libraries (CMake)\nDESCRIPTION: This snippet adds an executable target named `${CLP}Test` using `ctk_add_executable_utf8`. It then links the executable to the `${CLP}Lib` library and any extra executable target libraries defined by `SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES`. Finally, it sets properties for the target, including LABELS and FOLDER.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ModelToLabelMap/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nctk_add_executable_utf8(${CLP}Test ${CLP}Test.cxx)\ntarget_link_libraries(${CLP}Test ${CLP}Lib ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES})\nset_target_properties(${CLP}Test PROPERTIES LABELS ${CLP})\nset_target_properties(${CLP}Test PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Configuring `kits.py` (CMake)\nDESCRIPTION: This CMake snippet configures the `slicer/kits.py.in` file to generate `slicer/kits.py` in the binary directory.  The `configure_file` command replaces variables within the input file (`slicer/kits.py.in`) with their CMake values. The `@ONLY` option restricts variable replacement to only those variables explicitly marked for replacement (e.g., @VARIABLE@).\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/Python/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(\n  slicer/kits.py.in\n  ${CMAKE_CURRENT_BINARY_DIR}/slicer/kits.py\n  @ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name in CMake\nDESCRIPTION: Defines the module name as ImageLabelCombine. This variable is used throughout the configuration file for naming targets and specifying related paths.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ImageLabelCombine/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_NAME ImageLabelCombine)\n```\n\n----------------------------------------\n\nTITLE: Setting CTK Libraries\nDESCRIPTION: Defines the CTK libraries required for the project, including CTKVisualizationVTKWidgets and optionally CTKScriptingPythonWidgets and CTKQtTesting based on Slicer_USE_PYTHONQT and Slicer_USE_QtTesting.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(CTK_LIBRARIES CTKVisualizationVTKWidgets)\nif(Slicer_USE_PYTHONQT)\n  list(APPEND CTK_LIBRARIES\n    CTKScriptingPythonWidgets\n    )\nendif()\nif(Slicer_USE_QtTesting)\n  list(APPEND CTK_LIBRARIES\n    CTKQtTesting\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Testing Infrastructure Configuration CMake\nDESCRIPTION: Includes various macros for configuring tests, including C++ and Python tests. The `BUILD_TESTING` variable controls whether testing is enabled.  Macros configure CxxTest drivers, simple tests, Python testing, and generic module tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_61\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(SlicerMacroConfigureModuleCxxTestDriver)\ninclude(SlicerMacroSimpleTest)\ninclude(SlicerMacroPythonTesting)\ninclude(SlicerMacroConfigureGenericCxxModuleTests)\ninclude(SlicerMacroConfigureGenericPythonModuleTests)\n\nif(BUILD_TESTING)\n  # The variable CXX_TEST_PATH should *NOT* be used when adding tests.\n  # Instead the the $<TARGET_FILE:...> generator expression should be\n  # considered. See r16586 for more details.\n  set(CXX_TEST_PATH ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}) # XXX\n\n  configure_file(\n    ${Slicer_SOURCE_DIR}/CTestConfig.cmake\n    ${Slicer_BINARY_DIR}/${Slicer_BIN_DIR}/CTestConfig.cmake\n    COPYONLY)\n\n  add_subdirectory(CMake/Testing)\n  add_subdirectory(Extensions/CMake/Testing)\n\n  if(Slicer_BUILD_CLI_SUPPORT)\n    set(SEM_LAUNCH_COMMAND ${Slicer_LAUNCH_COMMAND})\n    set(SEM_DATA_MANAGEMENT_TARGET ${Slicer_ExternalData_DATA_MANAGEMENT_TARGET})\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Qt Designer Plugin - CMake\nDESCRIPTION: The ctkMacroBuildQtDesignerPlugin macro is used to generate the necessary build rules for a Qt Designer plugin. It takes the plugin's name, export directive, folder, source files, MOC source files, and target libraries as parameters, creating the required build targets.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n#-----------------------------------------------------------------------------\nctkMacroBuildQtDesignerPlugin(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT}\n  FOLDER \"Module-${MODULE_NAME}\"\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Find vtkAddon Package\nDESCRIPTION: Finds the required `vtkAddon` package if `Slicer_BUILD_vtkAddon` is not enabled. This ensures that the necessary dependencies are available for building the library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkSegmentationCore/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT Slicer_BUILD_vtkAddon)\n  find_package(vtkAddon REQUIRED)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Module Logic (CMake)\nDESCRIPTION: This snippet uses the SlicerMacroBuildModuleLogic macro to simplify the process of building the module's logic component. It passes the defined variables, such as the module name, export directive, source files, and target libraries, to the macro.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOMLib/Logic/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleLogic(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: This snippet defines the include directories needed for the module's logic component. In this example, it's an empty list, which might be populated based on project requirements.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Data/Logic/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_INCLUDE_DIRECTORIES\n  )\n```\n\n----------------------------------------\n\nTITLE: Exporting the Library Target CMake\nDESCRIPTION: This snippet exports the library target for use in other CMake projects. It checks if `${PROJECT_NAME}_EXPORT_FILE` is defined, and if not, sets it to a default value in the binary directory. Then, it uses the `export` command to add the library target to the specified export file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Logic/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_EXPORT_FILE)\n  set(${PROJECT_NAME}_EXPORT_FILE ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Targets.cmake)\nendif()\nexport(TARGETS ${lib_name} APPEND FILE ${${PROJECT_NAME}_EXPORT_FILE})\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory for Logic\nDESCRIPTION: Adds the 'Logic' subdirectory to the build, allowing for modular organization of the source code. This assumes a CMakeLists.txt exists within the Logic subdirectory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Reformat/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Logic)\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory CMake\nDESCRIPTION: Adds the Testing subdirectory to the build if BUILD_TESTING is enabled. This ensures that unit tests are built and executed if testing is enabled in the build configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Source Directory Function (CMake)\nDESCRIPTION: Defines a CMake function `_add_extension_source_dir` that configures an extension's source directory. It takes the extension source directory and a description as input, resolves the path, sets relevant variables, and adds the directory as a subdirectory in the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_74\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(_add_extension_source_dir extension_source_dir what)\n  get_filename_component(extension_source_dir ${extension_source_dir} REALPATH)\n  get_filename_component(extension_source_dirname ${extension_source_dir} NAME_WE)\n  message(STATUS \"--------------------------------------------------\")\n  message(STATUS \"Configuring ${what}: ${extension_source_dirname}\")\n  set(ExternalData_SOURCE_ROOT ${extension_source_dir})\n  set(${extension_source_dirname}_SOURCE_DIR ${extension_source_dir})\n  set(${extension_source_dirname}_BINARY_DIR ${extensions_build_dir}/${extension_source_dirname})\n  add_subdirectory(\n    ${${extension_source_dirname}_SOURCE_DIR}\n    ${${extension_source_dirname}_BINARY_DIR}\n    )\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory in CMake\nDESCRIPTION: This conditionally adds the `Testing` subdirectory if the `BUILD_TESTING` variable is enabled.  This allows for including unit tests and integration tests as part of the module build process when testing is enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Module Name (CMake)\nDESCRIPTION: This snippet sets the name of the module being built to \"VectorToScalarVolume\". This variable is later used in other build commands and macro calls to refer to the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/VectorToScalarVolume/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME VectorToScalarVolume)\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name in CMake\nDESCRIPTION: This snippet sets the MODULE_NAME variable to \"Colors\" and converts it to uppercase for use in other variable definitions. It ensures consistency in naming conventions throughout the CMake configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME Colors)\n\nstring(TOUPPER ${MODULE_NAME} MODULE_NAME_UPPER)\n```\n\n----------------------------------------\n\nTITLE: Creating build directory and generating project files using CMake\nDESCRIPTION: This snippet shows how to create a build directory and generate the default Slicer build project files using CMake. It initializes the build configuration using the source code located in the parent directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/linux.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\nmkdir Slicer-SuperBuild-Debug\ncd Slicer-SuperBuild-Debug\ncmake ../Slicer\n```\n\n----------------------------------------\n\nTITLE: Add Main Module Test\nDESCRIPTION: This uses `ExternalData_add_test` to add a test that executes the `${CLP}Test` executable with input data and compares the output image against a baseline image. The test command specifies input data, number of points, full tree option, and the output image path.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ExtractSkeleton/Testing/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(testname ${CLP}Test)\nExternalData_add_test(${CLP}Data\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  --compare DATA{${BASELINE}/${CLP}Test.mha}\n            ${TEMP}/${CLP}Test.mha\n  ModuleEntryPoint\n  DATA{${INPUT}/${CLP}.mha}\n  --numPoints 100\n  --fullTree\n  --outputImage ${TEMP}/${CLP}Test.mha\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Testing Scripted Module Cleanup\nDESCRIPTION: Adds tests to ensure that exceptions raised during scripted module cleanup correctly set the exit code. Two tests are added, one with the `--with-testing` option and one without it, to verify different execution scenarios.\nSOURCE: https://github.com/slicer/slicer/blob/main/Applications/SlicerApp/Testing/Python/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nset(testname ScriptedModuleCleanupTest_with_testing)\nadd_test(\n  NAME py_${testname}\n  COMMAND ${PYTHON_EXECUTABLE}\n    ${CMAKE_CURRENT_SOURCE_DIR}/ScriptedModuleCleanupTest.py ${Slicer_LAUNCHER_EXECUTABLE} --with-testing\n  )\n\nset(testname ScriptedModuleCleanupTest_without_testing)\nadd_test(\n  NAME py_${testname}\n  COMMAND ${PYTHON_EXECUTABLE}\n    ${CMAKE_CURRENT_SOURCE_DIR}/ScriptedModuleCleanupTest.py ${Slicer_LAUNCHER_EXECUTABLE}\n  )\n```\n\n----------------------------------------\n\nTITLE: Building CLI using SEMMacroBuildCLI\nDESCRIPTION: Uses the SEMMacroBuildCLI macro to build a command-line interface (CLI) target. This macro takes the module name, logo header path, and target libraries as input. The macro is part of the SlicerExecutionModel.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ImageLabelCombine/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/ITKLogo.h\n  TARGET_LIBRARIES ${ITK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Conditional ITK Factory Registration - CMake\nDESCRIPTION: This snippet conditionally sets the ITK_NO_IO_FACTORY_REGISTER_MANAGER variable based on the ITK version. It iterates through the factories IMAGEIO, MESHIO and TRANSFORMIO to disable factory registration if the ITK version is >= 5.3. Otherwise, it disables the general IO factory registration for older versions.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleScalarVolume/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\n```\n\n----------------------------------------\n\nTITLE: Warning Logging in Python\nDESCRIPTION: This snippet demonstrates logging a warning message in Python using the `logging.warning()` function. It prints the message to standard error and the application log.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/style_guide.md#_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nlogging.warning(\"This is a warning message. It is printed on the console (to standard error) and to the application log.\")\n```\n\n----------------------------------------\n\nTITLE: Setting Abstract Class Properties (CMake)\nDESCRIPTION: This snippet marks several classes as abstract.  This information is used by VTK during the build process, mainly to avoid issues from trying to instantiate abstract base classes.  The classes affected are display nodes, transform nodes, and volume nodes.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Core/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nset_source_files_properties(\n  vtkMRMLDisplayNode.cxx\n  vtkMRMLDisplayableNode.cxx\n  vtkMRMLNode.cxx\n  vtkMRMLTransformNode.cxx\n  vtkMRMLVolumeDisplayNode.cxx\n  vtkMRMLVolumeNode.cxx\n  ABSTRACT\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Export Directive - CMake\nDESCRIPTION: Defines the export directive for the module, which is used to control symbol visibility when the module is built as a shared library. This directive is crucial for ensuring proper linking and preventing symbol collisions.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Texts/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_EXPORT_DIRECTIVE \"Q_SLICER_QTMODULES_${MODULE_NAME_UPPER}_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Sets the include directories for the project.  It includes the current source and binary directories, as well as the include directories for vtkAddon.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkITK/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(include_dirs\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  ${CMAKE_CURRENT_BINARY_DIR}\n  ${vtkAddon_INCLUDE_DIRS}\n  )\ninclude_directories(${include_dirs})\n```\n\n----------------------------------------\n\nTITLE: Building Qt Library with Slicer Macro in CMake\nDESCRIPTION: This invokes a custom CMake macro to build the Qt library, using all the defined variables for source files, include directories, and target libraries. The macro `SlicerMacroBuildBaseQtLibrary` encapsulates the necessary steps to build a Qt library within the Slicer build system. It uses the previously defined variables such as `KIT_SRCS`, `KIT_MOC_SRCS`, etc.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Core/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nSlicerMacroBuildBaseQtLibrary(\n  NAME ${PROJECT_NAME}\n  EXPORT_DIRECTIVE ${KIT_export_directive}\n  INCLUDE_DIRECTORIES ${KIT_include_directories}\n  SRCS ${KIT_SRCS}\n  MOC_SRCS ${KIT_MOC_SRCS}\n  UI_SRCS ${KIT_UI_SRCS}\n  TARGET_LIBRARIES ${KIT_target_libraries}\n  RESOURCES ${KIT_resources}\n  )\n```\n\n----------------------------------------\n\nTITLE: Building ITK Plugin\nDESCRIPTION: Builds a shared library to be used as an ITK plugin, responsible for adding `MRMLIDImageIO` as an `ImageIOFactory`. It creates `MRMLIDIOPlugin` as a SHARED library and links it against the `MRMLIDIO` library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/IDImageIO/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED MRMLIDImageIO_ITKFACTORIES_DIR)\n  set(MRMLIDImageIO_ITKFACTORIES_DIR lib/ITKFactories)\nendif()\nif(NOT DEFINED MRMLIDImageIO_INSTALL_ITKFACTORIES_DIR)\n  set(MRMLIDImageIO_INSTALL_ITKFACTORIES_DIR ${MRMLIDImageIO_ITKFACTORIES_DIR})\nendif()\n\nadd_library(MRMLIDIOPlugin SHARED\n  itkMRMLIDIOPlugin.cxx\n  )\n\nset_target_properties(MRMLIDIOPlugin PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/${MRMLIDImageIO_ITKFACTORIES_DIR}\"\n  LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/${MRMLIDImageIO_ITKFACTORIES_DIR}\"\n  ARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/${MRMLIDImageIO_ITKFACTORIES_DIR}\"\n  )\ntarget_link_libraries(MRMLIDIOPlugin ${lib_name})\n\n# Folder\nif(NOT \"${${PROJECT_NAME}_FOLDER}\" STREQUAL \"\")\n  set_target_properties(MRMLIDIOPlugin PROPERTIES FOLDER ${${PROJECT_NAME}_FOLDER})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Input and CLP Variables\nDESCRIPTION: This snippet sets the input data directory and the module name as variables for use in the CMake configuration. It also sets a default value for SEM_DATA_MANAGEMENT_TARGET if it is not already defined.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GrayscaleModelMaker/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input)\n\nset(CLP ${MODULE_NAME})\n\nif(NOT DEFINED SEM_DATA_MANAGEMENT_TARGET)\n  set(SEM_DATA_MANAGEMENT_TARGET ${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing the Library (CMake)\nDESCRIPTION: This snippet configures the installation process for the MRMLCore library. It defines the installation directories for runtime binaries, libraries, and archives using `${PROJECT_NAME}_INSTALL_BIN_DIR` and `${PROJECT_NAME}_INSTALL_LIB_DIR`. The `install` command copies the library to the specified directories during the installation process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Core/CMakeLists.txt#_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_INSTALL_BIN_DIR)\n  set(${PROJECT_NAME}_INSTALL_BIN_DIR bin)\nendif()\nif(NOT DEFINED ${PROJECT_NAME}_INSTALL_LIB_DIR)\n  set(${PROJECT_NAME}_INSTALL_LIB_DIR lib/${PROJECT_NAME})\nendif()\n\ninstall(TARGETS ${lib_name}\n  RUNTIME DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DIR} COMPONENT RuntimeLibraries\n  LIBRARY DESTINATION ${${PROJECT_NAME}_INSTALL_LIB_DIR} COMPONENT RuntimeLibraries\n  ARCHIVE DESTINATION ${${PROJECT_NAME}_INSTALL_LIB_DIR} COMPONENT Development\n  )\n```\n\n----------------------------------------\n\nTITLE: Conditional Qt Testing CMake\nDESCRIPTION: This snippet conditionally includes additional source files and header files for Qt testing if the `Slicer_USE_QtTesting` option is enabled. It appends these files to the `MRMLWidgets_SRCS` and `MRMLWidgets_MOC_SRCS` lists.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif(Slicer_USE_QtTesting)\n  list(APPEND MRMLWidgets_SRCS\n    qMRMLCheckableNodeComboBoxEventPlayer.cpp\n    qMRMLCheckableNodeComboBoxEventPlayer.h\n    qMRMLNodeComboBoxEventPlayer.cpp\n    qMRMLNodeComboBoxEventPlayer.h\n    qMRMLNodeComboBoxEventTranslator.cpp\n    qMRMLNodeComboBoxEventTranslator.h\n    qMRMLTreeViewEventPlayer.cpp\n    qMRMLTreeViewEventPlayer.h\n    qMRMLTreeViewEventTranslator.cpp\n    qMRMLTreeViewEventTranslator.h\n    )\n\n  list(APPEND MRMLWidgets_MOC_SRCS\n    qMRMLCheckableNodeComboBoxEventPlayer.h\n    qMRMLNodeComboBoxEventPlayer.h\n    qMRMLNodeComboBoxEventTranslator.h\n    qMRMLTreeViewEventPlayer.h\n    qMRMLTreeViewEventTranslator.h\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Test Scripts and Resources (CMake)\nDESCRIPTION: Defines variables to store lists of Python scripts and resources used in the extension's tests. These lists are later used when building the tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/Testing/Python/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(EXTENSION_TEST_PYTHON_SCRIPTS\n  SubjectHierarchyFoldersTest1.py\n  )\n\nset(EXTENSION_TEST_PYTHON_RESOURCES\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Export Directive\nDESCRIPTION: Defines the module's export directive, which is used to control symbol visibility when building shared libraries. This ensures proper linking and avoids symbol conflicts.  The export directive uses the uppercase module name.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Cameras/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_EXPORT_DIRECTIVE \"Q_SLICER_QTMODULES_${MODULE_NAME_UPPER}_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Setting Baseline and Input Data Paths\nDESCRIPTION: Defines variables for the baseline and input data directories used in testing. These variables are used to locate the expected output and input data for the module's tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GrayscaleGrindPeakImageFilter/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(BASELINE ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Baseline)\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input)\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel Package\nDESCRIPTION: Conditionally finds the SlicerExecutionModel package (which includes ModuleDescriptionParser) if Slicer's CLI support is enabled. It also finds ITK and sets ITK components required by ModuleDescriptionParser and CTKImageProcessingITKCore.  It handles ITK version differences related to IO factory registration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_BUILD_CLI_SUPPORT)\n  find_package(SlicerExecutionModel REQUIRED ModuleDescriptionParser)\n\n  #\n  # ITK\n  #\n  set(${PROJECT_NAME}_ITK_COMPONENTS\n    # Import ITK targets required by ModuleDescriptionParser\n    ${ModuleDescriptionParser_ITK_COMPONENTS}\n    # Import ITK targets required by CTKImageProcessingITKCore\n    ITKCommon\n    )\n  find_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\n  if(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n    foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n      set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n    endforeach()\n  else()\n    set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\n  endif()\n  include(${ITK_USE_FILE})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Module Export Directive\nDESCRIPTION: Defines the MODULE_EXPORT_DIRECTIVE CMake variable.  This is used to specify the preprocessor definition for exporting symbols from the module, allowing them to be used by other modules or applications. The directive is based on the module name in uppercase.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/LoadableCustomMarkups/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_EXPORT_DIRECTIVE \"Q_SLICER_QTMODULES_${MODULE_NAME_UPPER}_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Installing Slicer dependencies on Ubuntu 22.04\nDESCRIPTION: This command updates the package list and installs the required development tools and support libraries for building Slicer on Ubuntu 22.04 (Jammy Jellyfish) using `apt`. It includes packages such as `git`, `build-essential`, `cmake`, CMake GUI tools, and Qt5 development libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/linux.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nsudo apt update && sudo apt install git build-essential \\\n  cmake cmake-curses-gui cmake-qt-gui \\\n  libqt5x11extras5-dev qtmultimedia5-dev libqt5svg5-dev qtwebengine5-dev libqt5xmlpatterns5-dev qttools5-dev qtbase5-private-dev \\\n  qtbase5-dev qt5-qmake\n```\n\n----------------------------------------\n\nTITLE: Setting Resources\nDESCRIPTION: Lists the resource files (.qrc) that the module uses. Resource files can contain images, icons, and other data used by the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/LoadableExtensionTemplate/LoadableModuleTemplate/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_RESOURCES\n  Resources/qSlicer${MODULE_NAME}Module.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Test Sources\nDESCRIPTION: Specifies the source files for the module's unit tests. These tests cover widget functionality, scene loading, and logic for adding files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/Testing/Cxx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT_TEST_SRCS\n  qSlicerModelsModuleWidgetTest.cxx\n  qSlicerModelsModuleWidgetTest1.cxx\n  qSlicerModelsModuleWidgetTestScene.cxx\n  vtkSlicerModelsLogicAddFileTest.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Include Directories in CMake\nDESCRIPTION: This snippet defines include directories for the module.  Currently, it is empty, but it is intended to hold paths to header files required by the module's logic component. These paths are used to correctly compile the source code.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Cameras/Logic/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_INCLUDE_DIRECTORIES\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Headers\nDESCRIPTION: Defines variables and configures the qMRMLWidgetsConfigure.h header file based on CMake settings. This allows the code to adapt to different build configurations.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(MRML_WIDGETS_HAVE_QT5 1)\nif(NOT DEFINED MRML_WIDGETS_HAVE_WEBENGINE_SUPPORT)\n  set(MRML_WIDGETS_HAVE_WEBENGINE_SUPPORT 1)\nendif()\n\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/qMRMLWidgetsConfigure.h.in\n  ${CMAKE_CURRENT_BINARY_DIR}/qMRMLWidgetsConfigure.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating Qt Library List\nDESCRIPTION: This snippet creates a list of Qt libraries based on the modules defined in `Slicer_REQUIRED_QT_MODULES`. It iterates through the list and appends the corresponding `Qt5::<module>` target to the `QT_LIBRARIES` variable. It skips `LinguistTools` which does not have a dll.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_43\n\nLANGUAGE: cmake\nCODE:\n```\nset(QT_LIBRARIES)\n  foreach(lib IN LISTS Slicer_REQUIRED_QT_MODULES)\n    if(lib MATCHES \"^(LinguistTools)$\")\n      continue()\n    endif()\n    list(APPEND QT_LIBRARIES Qt5::${lib})\n  endforeach()\n```\n\n----------------------------------------\n\nTITLE: Adding Python Subdirectory using CMake\nDESCRIPTION: This CMake command adds the 'Python' subdirectory to the current build process. This allows CMake to find and process the CMakeLists.txt file within the 'Python' directory, incorporating its targets and configurations into the overall project.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/SegmentStatistics/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Python)\n```\n\n----------------------------------------\n\nTITLE: Setting Module MOC Source Files - CMake\nDESCRIPTION: This section defines the header files that need to be processed by the Meta-Object Compiler (MOC).  The MOC generates code required for Qt's signals and slots mechanism. The headers listed are `qSlicer${MODULE_NAME}Module.h`, `qSlicer${MODULE_NAME}ModuleWidget.h`, and `qSlicer${MODULE_NAME}Reader.h`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Terminologies/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_MOC_SRCS\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  qSlicer${MODULE_NAME}Reader.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Scripted Module\nDESCRIPTION: This macro builds a scripted module in Slicer. It takes the module name, script files, and resources as input.  The `NAME` parameter specifies the module's name. The `SCRIPTS` parameter lists the Python scripts associated with the module. The `RESOURCES` parameter is a list of resource files, which can include UI description files, icons, etc.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Testing/Python/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nslicerMacroBuildScriptedModule(\n  NAME AddManyMarkupsFiducialTest\n  SCRIPTS AddManyMarkupsFiducialTest.py\n  RESOURCES ${MARKUPS_PYTHON_RESOURCES}\n  )\n```\n\nLANGUAGE: CMake\nCODE:\n```\nslicerMacroBuildScriptedModule(\n  NAME NeurosurgicalPlanningTutorialMarkupsSelfTest\n  SCRIPTS NeurosurgicalPlanningTutorialMarkupsSelfTest.py\n  RESOURCES ${MARKUPS_PYTHON_RESOURCES}\n  )\n```\n\nLANGUAGE: CMake\nCODE:\n```\nslicerMacroBuildScriptedModule(\n  NAME MarkupsInCompareViewersSelfTest\n  SCRIPTS MarkupsInCompareViewersSelfTest.py\n  RESOURCES ${MARKUPS_PYTHON_RESOURCES}\n  )\n```\n\nLANGUAGE: CMake\nCODE:\n```\nslicerMacroBuildScriptedModule(\n  NAME MarkupsInViewsSelfTest\n  SCRIPTS MarkupsInViewsSelfTest.py\n  RESOURCES ${MARKUPS_PYTHON_RESOURCES}\n  )\n```\n\nLANGUAGE: CMake\nCODE:\n```\nslicerMacroBuildScriptedModule(\n  NAME PluggableMarkupsSelfTest\n  SCRIPTS PluggableMarkupsSelfTest.py\n  RESOURCES ${MARKUPS_PYTHON_RESOURCES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Test Driver in CMake\nDESCRIPTION: This snippet configures a C++ test driver for the Slicer module using the `slicerMacroConfigureModuleCxxTestDriver` macro. It specifies the module name, test sources, and enables VTK debug leaks and error output checks. The `NAME` parameter specifies the module, `SOURCES` the test files, `WITH_VTK_DEBUG_LEAKS_CHECK` and `WITH_VTK_ERROR_OUTPUT_CHECK` enable memory leak and error output checks respectively.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/GeneralizedReformat/Testing/Cxx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroConfigureModuleCxxTestDriver(\n  NAME ${KIT}\n  SOURCES ${KIT_TEST_SRCS}\n  WITH_VTK_DEBUG_LEAKS_CHECK\n  WITH_VTK_ERROR_OUTPUT_CHECK\n  )\n```\n\n----------------------------------------\n\nTITLE: Add Executable and Test - CMake\nDESCRIPTION: This snippet adds an executable target named ${CLP}Test and links it to the necessary libraries.  It also adds a test using ExternalData_add_test to run the executable and verify its output. Requires the SlicerExecutionModel module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ImageLabelCombine/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nctk_add_executable_utf8(${CLP}Test ${CLP}Test.cxx)\nadd_dependencies(${CLP}Test ${CLP})\ntarget_link_libraries(${CLP}Test ${CLP}Lib ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES})\nset_target_properties(${CLP}Test PROPERTIES LABELS ${CLP})\nset_target_properties(${CLP}Test PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n\nset(testname ${CLP}Test)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  ModuleEntryPoint --help\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Install Test Templates (CMake)\nDESCRIPTION: This snippet installs the `qSlicerModuleGenericTest.py.in` file to the `${Slicer_INSTALL_SHARE_DIR}/test-templates` directory if `Slicer_INSTALL_NO_DEVELOPMENT` is not set.  The file is installed as part of the `Development` component, intended for use during the development process against an 'installed tree'. It depends on `Slicer_INSTALL_SHARE_DIR` being defined and not being a non-development installation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/Testing/Python/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT Slicer_INSTALL_NO_DEVELOPMENT)\n  install(FILES\n    ${CMAKE_CURRENT_BINARY_DIR}/qSlicerModuleGenericTest.py.in\n    DESTINATION ${Slicer_INSTALL_SHARE_DIR}/test-templates COMPONENT Development\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Customizing Labels in Parameter Node Wrapper GUI (Python)\nDESCRIPTION: This code snippet shows how to customize the user-facing label of a parameter in a parameter node wrapper using the Label annotation. It demonstrates defining a ParameterNodeWrapper with an inputVolume parameter and applying the Label annotation to set the label to \"Input Volume\". It requires the slicer and vtkMRMLScalarVolumeNode modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/parameter_nodes/gui_creation.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Annotated\nfrom slicer import vtkMRMLScalarVolumeNode\nfrom slicer.parameterNodeWrapper import (\n  createGui,\n  parameterNodeWrapper,\n  Label,\n)\n\n@parameterNodeWrapper\nclass ParameterNodeWrapper:\n    inputVolume: Annotated[vtkMRMLScalarVolumeNode, Label(\"Input Volume\")]\n\nwidget = createGui(ParameterNodeWrapper)\n# the label is now \"Input Volume\" instead of \"inputVolume\".\n```\n\n----------------------------------------\n\nTITLE: Adding ExternalData Test\nDESCRIPTION: Adds an external data test using the `ExternalData_add_test` command. This test runs the module and compares its output to a baseline dataset. It specifies the command to run the test, input data files, and the expected output data files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GrayscaleGrindPeakImageFilter/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(testname ${CLP}Test)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  --compare DATA{${BASELINE}/GrayscaleGrindPeakTest.nhdr,GrayscaleGrindPeakTest.raw.gz}\n            ${TEMP}/GrayscaleGrindPeakTest.nhdr\n  ModuleEntryPoint\n    DATA{${INPUT}/MRHeadResampled.nhdr,MRHeadResampled.raw.gz}\n    ${TEMP}/GrayscaleGrindPeakTest.nhdr\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Add Executable Target\nDESCRIPTION: This adds an executable target named `${CLP}Test` from the source file `${CLP}Test.cxx`. It links the target with `${CLP}Lib` and any extra libraries defined by `SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES`. It also sets properties for labels and folder organization within the Slicer build system.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ExtractSkeleton/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nctk_add_executable_utf8(${CLP}Test ${CLP}Test.cxx)\ntarget_link_libraries(${CLP}Test ${CLP}Lib ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES})\nset_target_properties(${CLP}Test PROPERTIES LABELS ${CLP})\nset_target_properties(${CLP}Test PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Installing Slicer dependencies on Ubuntu 23.04\nDESCRIPTION: This command updates the package list and installs the necessary development tools and support libraries for building Slicer on Ubuntu 23.04 (Lunar Lobster) using `apt`.  It installs `git`, `git-lfs`, `build-essential`, Qt5 development libraries and `libxt-dev`. Note that CMake version might need to be updated manually.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/linux.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nsudo apt update && sudo apt install git git-lfs build-essential \\\n  libqt5x11extras5-dev qtmultimedia5-dev libqt5svg5-dev qtwebengine5-dev libqt5xmlpatterns5-dev qttools5-dev qtbase5-private-dev \\\n  libxt-dev\n```\n\n----------------------------------------\n\nTITLE: Handling File Paths with Backslashes - Python\nDESCRIPTION: This code snippet demonstrates three different ways to handle file paths in Python that contain backslash characters on Windows.  The first uses a raw string (prefixed with `r`), the second uses double backslashes, and the third uses forward slashes.  It explains the importance of using raw strings or escaping backslashes because backslashes are escape characters in Python.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/python_faq.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nsomePath = r\"F:\\someFolder\\myfile.nrrd\"\n\n```\n\nLANGUAGE: Python\nCODE:\n```\nsomePath = \"F:\\\\someFolder\\\\myfile.nrrd\"\n\n```\n\nLANGUAGE: Python\nCODE:\n```\nsomePath = \"F:/someFolder/myfile.nrrd\"\n```\n\n----------------------------------------\n\nTITLE: Loading Volume from .vti File - Slicer - Python\nDESCRIPTION: Loads a volume from a VTK XML image data file (.vti) using `vtk.vtkXMLImageDataReader`.  It reads the image data, spacing, and origin from the file and creates a new `vtkMRMLScalarVolumeNode` in the scene, setting the image data and metadata. The function creates and configures the volume node.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nreader=vtk.vtkXMLImageDataReader()\nreader.SetFileName(\"/path/to/file.vti\")\nreader.Update()\nimageData = reader.GetOutput()\nspacing = imageData.GetSpacing()\norigin = imageData.GetOrigin()\nimageData.SetOrigin(0,0,0)\nimageData.SetSpacing(1,1,1)\nvolumeNode=slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLScalarVolumeNode\")\nvolumeNode.SetAndObserveImageData(imageData)\nvolumeNode.SetSpacing(spacing)\nvolumeNode.SetOrigin(origin)\nslicer.util.setSliceViewerLayers(volumeNode, fit=True)\n```\n\n----------------------------------------\n\nTITLE: Building Qt Designer Plugin\nDESCRIPTION: This snippet uses the `ctkMacroBuildQtDesignerPlugin` CMake macro to build a Qt Designer plugin.  It configures the plugin's name, export directive, installation folder, source files, header files for moc processing, and target libraries. The plugin is built based on the provided configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nctkMacroBuildQtDesignerPlugin(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT}\n  FOLDER \"Module-${MODULE_NAME}\"\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Affine BSpline Interpolation Test - CMake\nDESCRIPTION: Defines a test case that applies an affine transformation to an image using BSpline interpolation. The result is compared to a baseline image, and the `correction` parameter is set to `none`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleDTIVolume/Testing/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(AffineFile ${INPUT}/affine.tfm)\nset(TransformedImage4 ${TEMP}/dt-helix-transformed4.nrrd )\nset(testname ${CLP}BSplineInterpolationTest)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  --compare\n    DATA{${BASELINE}/dt-helix-ref-BSInterpolation.nrrd}\n    ${TransformedImage4}\n  --compareIntensityTolerance 1e-10\n  ModuleEntryPoint\n    -f ${AffineFile}\n    --interpolation bs\n    ${OriginalImage}\n    ${TransformedImage4}\n    --correction none\n    -o 3\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Setting Module Meta Object Compiler Sources\nDESCRIPTION: Specifies the header files that need to be processed by the Meta Object Compiler (MOC). This is required for Qt-based modules that use signals and slots.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/GeneralizedReformat/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_MOC_SRCS\n  qSlicer${MODULE_NAME}Module.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Installing Headers CMake\nDESCRIPTION: This snippet handles the installation of header files. It checks if `${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT` is defined and ON. If not, it finds all header files in the current source directory and installs them along with the configured header file to the `include/${PROJECT_NAME}` directory under the `Development` component.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Logic/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT)\n  set(${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT ON)\nendif()\nif(NOT ${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT)\n  file(GLOB headers \"${CMAKE_CURRENT_SOURCE_DIR}/*.h\")\n  install(\n    FILES ${headers} ${CMAKE_CURRENT_BINARY_DIR}/${configure_header_file}\n    DESTINATION include/${PROJECT_NAME} COMPONENT Development)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Cxx Subdirectory in CMake\nDESCRIPTION: This line includes the Cxx subdirectory in the current CMake project.  The Cxx directory must contain its own CMakeLists.txt file for proper integration.  This allows for modular project structure and build management.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/Loadable/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Sets the `${KIT}_INCLUDE_DIRECTORIES` variable to a list of include directories. These directories are added to the compiler's include path when building the library. They specify the locations of header files required by the source code.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSlicerTablesModuleLogic_INCLUDE_DIRS}\n  ${qSlicerSubjectHierarchyModuleWidgets_INCLUDE_DIRS}\n  ${vtkSlicerSubjectHierarchyModuleLogic_INCLUDE_DIRS}\n  ${qMRMLWidgets_INCLUDE_DIRS}\n  ${MRMLLogic_INCLUDE_DIRS}\n  ${MRMLCore_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name in CMake\nDESCRIPTION: This line sets the MODULE_NAME variable to ResampleScalarVectorDWIVolume. This variable is used throughout the CMake file to define the module's identity.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleScalarVectorDWIVolume/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME ResampleScalarVectorDWIVolume)\n```\n\n----------------------------------------\n\nTITLE: Update CMake Module Path CMake\nDESCRIPTION: Updates the `CMAKE_MODULE_PATH` variable to include additional directories where CMake modules are located. This allows CMake to find custom modules and functions used by Slicer. Specifically, it includes the `vtkAddon_CMAKE_DIR` and other relevant directories.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_54\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_MODULE_PATH\n  ${vtkAddon_CMAKE_DIR}\n  ${CMAKE_MODULE_PATH}\n  )\n```\n\n----------------------------------------\n\nTITLE: Show Slice Views in 3D Slicer (Python)\nDESCRIPTION: This code snippet demonstrates how to programmatically show slice views in the 3D Slicer window, mimicking the action of clicking the 'eye' icon in the slice view controller. It iterates through all slice view names and sets the slice visibility to true for each.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nlayoutManager = slicer.app.layoutManager()\nfor sliceViewName in layoutManager.sliceViewNames():\n  controller = layoutManager.sliceWidget(sliceViewName).sliceController()\n  controller.setSliceVisible(True)\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Test\nDESCRIPTION: This snippet adds an external data test using `ExternalData_add_test`. The test compares the output of `${CLP}Test` with a baseline image. It uses `SEM_LAUNCH_COMMAND` to run the test executable with specific input data and parameters. The test is configured to write its output to a temporary directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/CLI/Testing/Cxx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(testname ${CLP}Test)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET} NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  --compare DATA{${BASELINE}/${CLP}Test.nrrd}\n  ${TEMP}/${CLP}Test.nrrd\n  ModuleEntryPoint\n  --sigma 2.5 DATA{${INPUT}/CTHeadAxial.nhdr,CTHeadAxial.raw.gz} ${TEMP}/${CLP}Test.nrrd\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Installing CMake Modules (CMake)\nDESCRIPTION: Installs CMake module files from the source directory and generated CMake configuration files from the binary directory to `${Slicer_INSTALL_LIB_DIR}` as part of the Development component, but only if `Slicer_INSTALL_NO_DEVELOPMENT` is not set.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_82\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT Slicer_INSTALL_NO_DEVELOPMENT)\n  file(GLOB cmake_files \"${CMAKE_CURRENT_SOURCE_DIR}/CMake/*.cmake\")\n  install(\n    FILES ${cmake_files}\n    DESTINATION ${Slicer_INSTALL_LIB_DIR}/CMake COMPONENT Development\n    )\n\n  install(FILES\n    ${Slicer_BINARY_DIR}/UseSlicer.cmake\n    ${Slicer_BINARY_DIR}/SlicerConfig.cmake\n    ${Slicer_BINARY_DIR}/SlicerConfigVersion.cmake\n    DESTINATION ${Slicer_INSTALL_LIB_DIR}\n    COMPONENT Development\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Testing CLI Serialization\nDESCRIPTION: Adds a test for CLI serialization functionality, contingent on `Slicer_BUILD_PARAMETERSERIALIZER_SUPPORT` being enabled. This test executes a Python script that utilizes CLI serialization, providing input data and specifying the output directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Applications/SlicerApp/Testing/Python/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(Slicer_BUILD_PARAMETERSERIALIZER_SUPPORT)\n  ExternalData_add_test(${Slicer_ExternalData_DATA_MANAGEMENT_TARGET}\n    NAME py_nomainwindow_CLISerializationTest\n    COMMAND ${PYTHON_EXECUTABLE}\n      ${CMAKE_CURRENT_SOURCE_DIR}/CLISerializationTest.py\n      ${Slicer_LAUNCHER_EXECUTABLE}\n      ${Slicer_SOURCE_DIR}/Testing/Data/Input\n      DATA{${INPUT}/MRHeadResampled.nhdr,MRHeadResampled.raw.gz}\n      DATA{${INPUT}/CTHeadAxial.nhdr,CTHeadAxial.raw.gz}\n      ${Slicer_BINARY_DIR}/Testing/Temporary\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name in CMake\nDESCRIPTION: This snippet sets the module name to \"HistogramMatching\". This variable is later used in other CMake commands to refer to the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/HistogramMatching/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME HistogramMatching)\n```\n\n----------------------------------------\n\nTITLE: Compiling Python Scripts - CMake\nDESCRIPTION: This snippet uses the `ctkMacroCompilePythonScript` macro to compile the Python scripts and resources defined in the previous snippets. It specifies the target name, scripts, resources, destination directory, and installation directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/EditorEffects/Python/SegmentEditorEffects/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nctkMacroCompilePythonScript(\n  TARGET_NAME SegmentEditorEffects\n  SCRIPTS \"${SegmentEditorEffects_PYTHON_SCRIPTS}\"\n  RESOURCES \"${SegmentEditorEffects_PYTHON_RESOURCES}\"\n  DESTINATION_DIR ${Slicer_BINARY_DIR}/${Slicer_QTSCRIPTEDMODULES_LIB_DIR}/SegmentEditorEffects\n  INSTALL_DIR ${Slicer_INSTALL_QTSCRIPTEDMODULES_LIB_DIR}/SegmentEditorEffects\n  NO_INSTALL_SUBDIR\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Test with Command and Arguments\nDESCRIPTION: This snippet adds a test using the `add_test` command. It specifies the command to execute the test, including the `Slicer_LAUNCH_COMMAND` (likely used to launch the Slicer application) and the path to the executable.  Arguments are passed to the executable, including the temporary directory `${TEMP}`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/Testing/Cxx/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_test(NAME vtkSlicer${MODULE_NAME}LogicTest2\n  COMMAND ${Slicer_LAUNCH_COMMAND} $<TARGET_FILE:vtkSlicer${MODULE_NAME}LogicTest2>\n  vtkSlicer${MODULE_NAME}LogicTest2 ${TEMP}\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Volume Info Widget in Python - Slicer\nDESCRIPTION: This code snippet demonstrates how to add and display a volume information widget from the Volumes module in Slicer using Python. It retrieves a volume node, creates a `qMRMLVolumeInfoWidget`, sets the MRML scene and volume node for the widget, and then displays the widget. This is helpful for displaying volume properties in a custom module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/python_faq.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nvolumeNode = getNode('MRHead')\nw = slicer.qMRMLVolumeInfoWidget()\nw.setMRMLScene(slicer.mrmlScene)\nw.setVolumeNode(volumeNode)\nw.show()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: This snippet sets the `${KIT}_SRCS` variable, which lists the C++ source files that make up the module's widgets. These files contain the implementation of the UI components and related logic.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/Widgets/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  qMRMLSubjectHierarchyModel.cxx\n  qMRMLSubjectHierarchyModel.h\n  qMRMLSubjectHierarchyModel_p.h\n  qMRMLSortFilterSubjectHierarchyProxyModel.cxx\n  qMRMLSortFilterSubjectHierarchyProxyModel.h\n  qMRMLSubjectHierarchyTreeView.cxx\n  qMRMLSubjectHierarchyTreeView.h\n  qMRMLSubjectHierarchyComboBox.cxx\n  qMRMLSubjectHierarchyComboBox.h\n  qSlicerSubjectHierarchyPluginLogic.cxx\n  qSlicerSubjectHierarchyPluginLogic.h\n  qSlicerSubjectHierarchyAbstractPlugin.cxx\n  qSlicerSubjectHierarchyAbstractPlugin.h\n  qSlicerSubjectHierarchyPluginHandler.cxx\n  qSlicerSubjectHierarchyPluginHandler.h\n  qSlicerSubjectHierarchyDefaultPlugin.cxx\n  qSlicerSubjectHierarchyDefaultPlugin.h\n  qSlicerSubjectHierarchyCloneNodePlugin.cxx\n  qSlicerSubjectHierarchyCloneNodePlugin.h\n  qSlicerSubjectHierarchyParseLocalDataPlugin.cxx\n  qSlicerSubjectHierarchyParseLocalDataPlugin.h\n  qSlicerSubjectHierarchyRegisterPlugin.cxx\n  qSlicerSubjectHierarchyRegisterPlugin.h\n  qSlicerSubjectHierarchyFolderPlugin.cxx\n  qSlicerSubjectHierarchyFolderPlugin.h\n  qSlicerSubjectHierarchyOpacityPlugin.cxx\n  qSlicerSubjectHierarchyOpacityPlugin.h\n  qSlicerSubjectHierarchyViewContextMenuPlugin.cxx\n  qSlicerSubjectHierarchyViewContextMenuPlugin.h\n  qSlicerSubjectHierarchyVisibilityPlugin.cxx\n  qSlicerSubjectHierarchyVisibilityPlugin.h\n  qSlicerSubjectHierarchyExportPlugin.cxx\n  qSlicerSubjectHierarchyExportPlugin.h\n  qSlicerSubjectHierarchyExpandToDepthPlugin.cxx\n  qSlicerSubjectHierarchyExpandToDepthPlugin.h\n  )\nif(Slicer_USE_PYTHONQT)\n  list(APPEND ${KIT}_SRCS\n    qSlicerSubjectHierarchyScriptedPlugin.cxx\n    qSlicerSubjectHierarchyScriptedPlugin.h\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Build Module Logic using SlicerMacro (CMake)\nDESCRIPTION: This snippet uses the `SlicerMacroBuildModuleLogic` macro to build the module logic, passing in the name, export directive, include directories, source files, and target libraries defined previously. This macro handles the actual compilation and linking process based on the specified parameters.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/LoadableCustomMarkups/Logic/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleLogic(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Project and Export Directives in CMake\nDESCRIPTION: This snippet sets the project name, export directive, include directories, and source files for the VTK slicer module logic. The export directive is used to control the visibility of symbols from the module's DLL or shared library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/GeneralizedReformat/Logic/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleLogic)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_LOGIC_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSlicer${MODULE_NAME}ModuleMRML_SOURCE_DIR}\n  ${vtkSlicer${MODULE_NAME}ModuleMRML_BINARY_DIR}\n  )\n\nset(${KIT}_SRCS\n  vtkSlicer${MODULE_NAME}Logic.cxx\n  vtkSlicer${MODULE_NAME}Logic.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Compute Segment Volume - Slicer Python\nDESCRIPTION: This snippet calculates the volume of each segment in a segmentation node using the SegmentStatistics module. It retrieves the segmentation node, initializes the SegmentStatisticsLogic, computes the statistics, and then iterates through the segments to display the volume of each segment in cubic centimeters.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nsegmentationNode = getNode(\"Segmentation\")\n\n# Compute segment statistics\nimport SegmentStatistics\nsegStatLogic = SegmentStatistics.SegmentStatisticsLogic()\nsegStatLogic.getParameterNode().SetParameter(\"Segmentation\", segmentationNode.GetID())\nsegStatLogic.computeStatistics()\nstats = segStatLogic.getStatistics()\n\n# Display volume of each segment\nfor segmentId in stats[\"SegmentIDs\"]:\n  volume_cm3 = stats[segmentId,\"LabelmapSegmentStatisticsPlugin.volume_cm3\"]\n  segmentName = segmentationNode.GetSegmentation().GetSegment(segmentId).GetName()\n  print(f\"{segmentName} volume = {volume_cm3} cm3\")\n```\n\n----------------------------------------\n\nTITLE: Thick slab reconstruction - Python\nDESCRIPTION: Sets up the 'red' slice viewer to display a thick slab reconstructed from multiple slices by averaging the intensities. This is done by modifying the reslice parameters of the slice node. Modifying the slice node is required for the changes to take effect.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_40\n\nLANGUAGE: Python\nCODE:\n```\nsliceNode = slicer.mrmlScene.GetNodeByID(\"vtkMRMLSliceNodeRed\")\nappLogic = slicer.app.applicationLogic()\nsliceLogic = appLogic.GetSliceLogic(sliceNode)\nsliceLayerLogic = sliceLogic.GetBackgroundLayer()\nreslice = sliceLayerLogic.GetReslice()\nreslice.SetSlabModeToMean()\nreslice.SetSlabNumberOfSlices(10) # mean of 10 slices will computed\nreslice.SetSlabSliceSpacingFraction(0.3) # spacing between each slice is 0.3 pixel (total 10 * 0.3 = 3 pixel neighborhood)\nsliceNode.Modified()\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking Test Executable\nDESCRIPTION: This snippet creates an executable target for the module's tests and links it against the module's library and any extra libraries required by the Slicer Execution Model. It then sets properties like labels and folder for the test target to organize it within the build system.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/CLIExtensionTemplate/CLIModuleTemplate/Testing/Cxx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nctk_add_executable_utf8(${CLP}Test ${CLP}Test.cxx)\ntarget_link_libraries(${CLP}Test ${CLP}Lib ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES})\nset_target_properties(${CLP}Test PROPERTIES LABELS ${CLP})\nset_target_properties(${CLP}Test PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Including Custom CMake Modules\nDESCRIPTION: This snippet includes various custom CMake modules that provide functions and macros specific to the Slicer build process. These modules include utilities for parsing arguments, building scripted CLIs and modules, getting OS architecture, handling translations, installing libraries, and adding Python Qt resources.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_32\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(CMakeParseArguments)\ninclude(SlicerMacroBuildScriptedCLI)\ninclude(SlicerMacroBuildScriptedModule)\ninclude(SlicerMacroGetOperatingSystemArchitectureBitness)\nif(Slicer_BUILD_I18N_SUPPORT)\n  include(SlicerMacroTranslation)\nendif()\ninclude(SlicerFunctionInstallLibrary)\ninclude(SlicerFunctionAddPythonQtResources)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target in CMake\nDESCRIPTION: This snippet uses `ctk_add_executable_utf8` to create an executable target named `${CLP}Test`. It then links this target to `${CLP}Lib` and additional libraries specified by `SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES`. Finally, it sets the target properties for labels and folder for organizational purposes within the build system.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/SimpleRegionGrowingSegmentation/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nctk_add_executable_utf8(${CLP}Test ${CLP}Test.cxx)\ntarget_link_libraries(${CLP}Test ${CLP}Lib ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES})\nset_target_properties(${CLP}Test PROPERTIES LABELS ${CLP})\nset_target_properties(${CLP}Test PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Change Slice Orientation (Python)\nDESCRIPTION: This script rotates the 'Red' slice node around the X and Y axes. It retrieves the slice-to-RAS (Right-Anterior-Superior) matrix of the slice node, creates a vtkTransform, applies the rotations, and updates the slice node's matrix. The rotations are performed relative to the RAS coordinate system.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nsliceNode = slicer.app.layoutManager().sliceWidget(\"Red\").mrmlSliceNode()\nsliceToRas = sliceNode.GetSliceToRAS()\ntransform=vtk.vtkTransform()\ntransform.SetMatrix(sliceToRas)\ntransform.RotateX(20)\ntransform.RotateY(15)\nsliceToRas.DeepCopy(transform.GetMatrix())\nsliceNode.UpdateMatrices()\n```\n\n----------------------------------------\n\nTITLE: Setting Project Name and Export Directive in CMake\nDESCRIPTION: This snippet sets the project name, defines an export directive for the module, which is crucial for managing symbol visibility and ensuring proper linking when the module is used by other parts of the application. The export directive controls which symbols (classes, functions, variables) are visible outside the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/MRML/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleMRML)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_MRML_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Rotation Nearest Neighbor Test - CMake\nDESCRIPTION: Defines a test case that applies a rotation transformation to an image using nearest neighbor interpolation and compares the result to a baseline image. It uses ExternalData_add_test to define the test.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleDTIVolume/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(TransformFile ${INPUT}/rotation.tfm )\nset(TransformedImage1 ${TEMP}/dt-helix-transformed1.nrrd )\nset(testname ${CLP}RotationNNTest)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  --compare\n    DATA{${BASELINE}/dt-helix-ref-Rotated.nrrd}\n    ${TransformedImage1}\n  --compareIntensityTolerance 0\n  ModuleEntryPoint\n    -f ${TransformFile}\n    --interpolation nn\n    -c\n    ${OriginalImage}\n    ${TransformedImage1}\n    -n 8\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Specifies the include directories for the module, allowing the compiler to find the necessary header files. This includes both source and binary directories for Logic and Widgets, ensuring that all required headers are accessible during compilation. This is crucial for resolving dependencies between different parts of the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Units/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_INCLUDE_DIRECTORIES\n  ${CMAKE_CURRENT_SOURCE_DIR}/Logic\n  ${CMAKE_CURRENT_BINARY_DIR}/Logic\n  ${CMAKE_CURRENT_SOURCE_DIR}/Widgets\n  ${CMAKE_CURRENT_BINARY_DIR}/Widgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to MRMLCore (CMake)\nDESCRIPTION: This snippet specifies the libraries that the MRMLCore library depends on.  These are external libraries that provide functionalities used by MRMLCore. The `target_link_libraries` command links these libraries to the `MRMLCore` target. Dependencies include VTK, ITK, LibArchive, and optional vtkTeem.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Core/CMakeLists.txt#_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nset(libs\n  vtkAddon\n  vtkITK\n  vtkSegmentationCore\n  ${ITK_LIBRARIES}\n  ${VTK_LIBRARIES}\n  VTK::IOInfovis\n  ${LibArchive_LIBRARY}\n  )\nif(MRML_USE_vtkTeem)\n  list(APPEND libs vtkTeem)\nendif()\ntarget_link_libraries(${lib_name} ${libs})\n```\n\n----------------------------------------\n\nTITLE: Configure Displayable Manager Object Factory - CMake\nDESCRIPTION: Configures the displayable manager object factory using a custom CMake macro. It sets the target name, source files, export macro, export header, and output sources variable. The macro SlicerConfigureDisplayableManagerObjectFactory is responsible for generating the necessary code for instantiating the displayable manager.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/MRMLDM/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nSlicerConfigureDisplayableManagerObjectFactory(\n  TARGET_NAME ${KIT}\n  SRCS \"${displayable_manager_SRCS}\"\n  EXPORT_MACRO \"${${KIT}_EXPORT_DIRECTIVE}\"\n  EXPORT_HEADER \"${KIT}Export.h\"\n  OUTPUT_SRCS_VAR displayable_manager_instantiator_SRCS\n  )\n```\n\n----------------------------------------\n\nTITLE: Set Variables for Baseline, Input and Module Name\nDESCRIPTION: This snippet sets CMake variables for directory paths (BASELINE, INPUT) and the module name (CLP).  It also defines SEM_DATA_MANAGEMENT_TARGET if it's not already defined, defaulting to the module name plus 'Data'.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GrayscaleFillHoleImageFilter/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(BASELINE ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Baseline)\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input)\n\nset(CLP ${MODULE_NAME})\n\nif(NOT DEFINED SEM_DATA_MANAGEMENT_TARGET)\n  set(SEM_DATA_MANAGEMENT_TARGET ${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Source Files\nDESCRIPTION: Defines the source files for the MRMLIDImageIO library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/IDImageIO/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(MRMLIDImageIO_SRCS\n  itkMRMLIDImageIO.cxx\n  itkMRMLIDImageIOFactory.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Qt Designer Plugin with ctkMacroBuildQtDesignerPlugin - CMake\nDESCRIPTION: This snippet uses the ctkMacroBuildQtDesignerPlugin macro to automate the building of a Qt Designer plugin. It specifies the plugin's name, export directive, folder, source files, moc source files, and target libraries. This macro handles the necessary steps to create a functional Qt Designer plugin, including moc processing and linking against required libraries. Requires the CTK library to be available.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Texts/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nctkMacroBuildQtDesignerPlugin(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT}\n  FOLDER \"Module-${MODULE_NAME}\"\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Resources CMake\nDESCRIPTION: Defines the resource files that should be included in the module. These can include images, icons, and other data files that are used by the module. qSlicer${MODULE_NAME}Module.qrc is included.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/ViewControllers/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_RESOURCES\n  Resources/qSlicer${MODULE_NAME}Module.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting folder property\nDESCRIPTION: This snippet sets the folder property for the library target. It checks if `${PROJECT_NAME}_FOLDER` is defined and not empty, and if so, it uses `set_target_properties` to set the `FOLDER` property to the value of `${PROJECT_NAME}_FOLDER`. This helps organize the project in IDEs like Visual Studio.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/CLI/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_FOLDER)\n  set(${PROJECT_NAME}_FOLDER ${PROJECT_NAME})\nendif()\nif(NOT \"${${PROJECT_NAME}_FOLDER}\" STREQUAL \"\")\n  set_target_properties(${lib_name} PROPERTIES FOLDER ${${PROJECT_NAME}_FOLDER})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Directories\nDESCRIPTION: Adds the current binary directory to the include path. This allows the compiled moc files to be found during compilation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/Testing/Cxx/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories( ${CMAKE_CURRENT_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries\nDESCRIPTION: Defines the target libraries that the module depends on. In this case, it depends on the Cameras Module Logic library. These libraries will be linked to the module during the linking stage.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Cameras/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Project and Export Directive (CMake)\nDESCRIPTION: This snippet sets the project name and defines the export directive for the library. The export directive is used for managing symbol visibility when building shared libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTGUI/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(qSlicerBaseQTGUI)\n\n#\n# See CMake/SlicerMacroBuildBaseQtLibrary.cmake for details\n#\n\nset(KIT_export_directive \"Q_SLICER_BASE_QTGUI_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Add Help Parameter Test\nDESCRIPTION: This uses `ExternalData_add_test` to add a test that executes the `${CLP}Test` executable with the `--help` parameter. The test verifies that the module's help message is displayed correctly.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ExtractSkeleton/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(testname ${CLP}Test-HelpParameter)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  ModuleEntryPoint\n  --help\n  )\n```\n\n----------------------------------------\n\nTITLE: Python Subdirectory Handling\nDESCRIPTION: This snippet conditionally adds the `Python` subdirectory to the build, if PythonQt support is enabled. This allows the module to include Python bindings and related functionality.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/EditorEffects/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nif(Slicer_USE_PYTHONQT)\n  add_subdirectory(Python)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory CMake\nDESCRIPTION: Adds the 'Logic' subdirectory to the build process. This indicates that the module likely has a separate directory containing logic-related source files and CMakeLists.txt for building that part of the module. It helps in modularizing the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/ViewControllers/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Logic)\n```\n\n----------------------------------------\n\nTITLE: Conditional UI Files Inclusion (CMake)\nDESCRIPTION: This snippet demonstrates how to conditionally include UI files based on CMake variables. It checks for `Slicer_BUILD_EXTENSIONMANAGER_SUPPORT` and `Slicer_USE_PYTHONQT` to include relevant UI files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTGUI/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(Slicer_BUILD_EXTENSIONMANAGER_SUPPORT)\n  list(APPEND KIT_UI_SRCS\n    Resources/UI/qSlicerExtensionsActionsWidget.ui\n    Resources/UI/qSlicerExtensionsButtonBox.ui\n    Resources/UI/qSlicerExtensionsManagerDialog.ui\n    Resources/UI/qSlicerExtensionsManagerWidget.ui\n    Resources/UI/qSlicerExtensionsToolsWidget.ui\n    Resources/UI/qSlicerSettingsExtensionsPanel.ui\n    )\nendif()\n\n# PythonQt decorator\nif(Slicer_USE_PYTHONQT)\n  list(APPEND KIT_UI_SRCS\n    Resources/UI/qSlicerSettingsPythonPanel.ui\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting MRML Data Paths (CMake)\nDESCRIPTION: This snippet defines paths to MRML core test data, module input data, and temporary directories. These paths are later used in the test suite for accessing data required for running tests. The paths are used by test executables to access test data files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/Testing/Cxx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(MRML_CORE_INPUT \"${MRMLCore_SOURCE_DIR}/Testing/TestData/\")\nset(INPUT \"${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input\")\nset(TEMP \"${CMAKE_BINARY_DIR}/Testing/Temporary\")\n```\n\n----------------------------------------\n\nTITLE: Setting MOC Source Files in CMake\nDESCRIPTION: Sets the list of header files that require processing by the Meta-Object Compiler (MOC). MOC generates C++ code for Qt's signals and slots mechanism.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_MOC_SRCS\n  qSlicer${MODULE_NAME}IOOptionsWidget.h\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  qSlicer${MODULE_NAME}NodeWriter.h\n  qSlicer${MODULE_NAME}NodeWriterOptionsWidget.h\n  qSlicer${MODULE_NAME}Reader.h\n  qSlicer${MODULE_NAME}SettingsPanel.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Include Directories in CMake\nDESCRIPTION: Specifies the include directories required for compiling the module. This includes directories for GUI, logic, and external dependencies. Proper include directories are essential for finding header files during compilation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SceneViews/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_INCLUDE_DIRECTORIES\n  ${CMAKE_CURRENT_SOURCE_DIR}/GUI\n  ${CMAKE_CURRENT_BINARY_DIR}/GUI\n  ${CMAKE_CURRENT_SOURCE_DIR}/Logic\n  ${CMAKE_CURRENT_BINARY_DIR}/Logic\n  ${qSlicerSubjectHierarchyModuleWidgets_INCLUDE_DIRS}\n  ${vtkSlicerSequencesModuleMRML_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Add Designer Plugins - CMake\nDESCRIPTION: Conditionally adds the DesignerPlugins subdirectory to the build process if Slicer_BUILD_QT_DESIGNER_PLUGINS is enabled.  This allows building custom Qt Designer plugins for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/Widgets/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_BUILD_QT_DESIGNER_PLUGINS)\n  add_subdirectory(DesignerPlugins)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Module Resources in CMake\nDESCRIPTION: Defines the resource file containing images, icons, and other resources used by the module. These resources are packaged with the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SceneViews/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_RESOURCES\n  Resources/qSlicer${MODULE_NAME}Module.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Module Logic with SlicerMacro in CMake\nDESCRIPTION: This snippet uses the `SlicerMacroBuildModuleLogic` macro to build the module logic. It passes the name of the kit, export directive, include directories, source files, and target libraries as arguments to the macro. This macro handles the compilation and linking steps.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Cameras/Logic/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleLogic(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Iterating and Adding Extension Source Directories (CMake)\nDESCRIPTION: Iterates through lists of extension source directories (`Slicer_EP_LABEL_REMOTE_MODULE`, `Slicer_EP_LABEL_REMOTE_EXTENSION`, `Slicer_EXTENSION_SOURCE_DIRS`) and calls the `_add_extension_source_dir` function for each directory, configuring each as either a 'remote module', 'remote extension', or 'extension directory'.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_75\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(varname ${Slicer_EP_LABEL_REMOTE_MODULE})\n  _add_extension_source_dir(${${varname}} \"remote module\")\nendforeach()\nforeach(varname ${Slicer_EP_LABEL_REMOTE_EXTENSION})\n  _add_extension_source_dir(${${varname}} \"remote extension\")\nendforeach()\nforeach(extension_source_dir ${Slicer_EXTENSION_SOURCE_DIRS})\n  _add_extension_source_dir(${extension_source_dir} \"extension directory\")\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Set Source Files and Target Libraries (CMake)\nDESCRIPTION: This snippet defines the source files (`.cxx` and `.h`) that constitute the module's logic and lists the target libraries the module depends on, including other Slicer modules. These dependencies are essential for resolving symbols during compilation and linking.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/LoadableCustomMarkups/Logic/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_SRCS\n  vtkSlicer${MODULE_NAME}Logic.cxx\n  vtkSlicer${MODULE_NAME}Logic.h\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleMRML\n  vtkSlicer${MODULE_NAME}ModuleVTKWidgets\n  vtkSlicerMarkupsModuleLogic\n  vtkSlicerMarkupsModuleVTKWidgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel Package\nDESCRIPTION: Finds the SlicerExecutionModel package, which is required for building Slicer modules. It also includes the use file to make the package's variables available.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CastScalarVolume/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Setting Variables in CMake\nDESCRIPTION: This snippet sets several CMake variables that define paths and targets for the build process. BASELINE and INPUT point to data directories, CLP represents the module name, and SEM_DATA_MANAGEMENT_TARGET specifies the data management target, defaulting to ${CLP}Data if not defined.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GaussianBlurImageFilter/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(BASELINE ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Baseline)\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input)\n\nset(CLP ${MODULE_NAME})\n\nif(NOT DEFINED SEM_DATA_MANAGEMENT_TARGET)\n  set(SEM_DATA_MANAGEMENT_TARGET ${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting GUI Source Files in CMake\nDESCRIPTION: Lists the source files that make up the GUI component of the module. These files are compiled and linked to create the module's user interface.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SceneViews/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(GUI_SRCS\n  GUI/qMRMLCaptureToolBar.cxx\n  GUI/qMRMLCaptureToolBar.h\n  GUI/qMRMLSceneViewMenu.cxx\n  GUI/qMRMLSceneViewMenu.h\n  GUI/qMRMLSceneViewMenu_p.h\n  GUI/qSlicer${MODULE_NAME}ModuleWidget.cxx\n  GUI/qSlicer${MODULE_NAME}ModuleWidget.h\n  GUI/qSlicer${MODULE_NAME}ModuleDialog.cxx\n  GUI/qSlicer${MODULE_NAME}ModuleDialog.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Variables for File Paths in CMake\nDESCRIPTION: This snippet defines CMake variables for the baseline, input, and module name. These variables are used to specify file paths and the module name for subsequent build and test configurations. The SEM_DATA_MANAGEMENT_TARGET variable is also defined if it's not already.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CheckerBoardFilter/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(BASELINE ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Baseline)\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input)\n\nset(CLP ${MODULE_NAME})\n\nif(NOT DEFINED SEM_DATA_MANAGEMENT_TARGET)\n  set(SEM_DATA_MANAGEMENT_TARGET ${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Test Sources\nDESCRIPTION: This section defines the source files used for the tests.  The variable `KIT_TEST_SOURCES` lists the C++ source files to be compiled into the test executable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT_TEST_SOURCES\n  qMRMLMarkupsOptionsWidgetsFactoryTest.cxx\n  qMRMLSimpleMarkupsWidgetTest1.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Test (VTP)\nDESCRIPTION: Adds an external data test that utilizes VTP data files. It executes the ${CLP}Test executable with input sphere and cube VTP files and produces a combined output VTP file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MergeModels/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(testname ${CLP}TestVtp)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  ModuleEntryPoint\n    DATA{${INPUT}/sphere.vtp}\n    DATA{${INPUT}/cube.vtp}\n    ${TEMP}/sphereCube.vtp\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Include Directories Configuration CMake\nDESCRIPTION: Sets include directories, including source, binary, MRMLCore, and MRMLLogic directories.  Conditionally appends Python include directory if MRMLDisplayableManager_USE_PYTHON is enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/DisplayableManager/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(include_dirs\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  ${CMAKE_CURRENT_BINARY_DIR}\n  ${MRMLCore_INCLUDE_DIRS}\n  ${MRMLLogic_INCLUDE_DIRS}\n  )\nif(MRMLDisplayableManager_USE_PYTHON)\n  list(APPEND include_dirs ${PYTHON_INCLUDE_DIR})\nendif()\ninclude_directories(${include_dirs})\n```\n\n----------------------------------------\n\nTITLE: Disable Undo\nDESCRIPTION: The `vtkMRMLScene::SetUndoOff()` method ignores following SaveStateForUndo calls, preventing the scene from saving the state for undo/redo operations.  This is useful when making multiple changes that don't need to be undone separately.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/mrml_overview.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Build the vtkITK Library\nDESCRIPTION: Builds the vtkITK library using the defined source files.  It links against ITK and VTK libraries.  It applies user-defined properties if Slicer_LIBRARY_PROPERTIES is defined.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkITK/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(lib_name ${PROJECT_NAME})\n\nset(srcs ${vtkITK_SRCS})\nadd_library(${lib_name} ${srcs})\n\nset(libs\n  ${ITK_LIBRARIES}\n  ${VTK_LIBRARIES}\n  )\ntarget_link_libraries(${lib_name} ${libs})\n\n# Apply user-defined properties to the library target.\nif(Slicer_LIBRARY_PROPERTIES)\n  set_target_properties(${lib_name} PROPERTIES ${Slicer_LIBRARY_PROPERTIES})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Minimum CMake Version\nDESCRIPTION: Specifies the minimum required CMake version for the project.  This ensures that the CMake version used is compatible with the commands and features used in the script.  Using FATAL_ERROR ensures that CMake will stop processing if the version is too low.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/RemoteIO/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16.3...3.19.7 FATAL_ERROR)\n```\n\n----------------------------------------\n\nTITLE: Install Library Configuration CMake\nDESCRIPTION: Installs the library targets (RUNTIME, LIBRARY, ARCHIVE) to the specified destination directories. The destination directories are configured by the ${PROJECT_NAME}_INSTALL_BIN_DIR and ${PROJECT_NAME}_INSTALL_LIB_DIR variables.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/DisplayableManager/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_INSTALL_BIN_DIR)\n  set(${PROJECT_NAME}_INSTALL_BIN_DIR bin)\nendif()\nif(NOT DEFINED ${PROJECT_NAME}_INSTALL_LIB_DIR)\n  set(${PROJECT_NAME}_INSTALL_LIB_DIR lib/${PROJECT_NAME})\nendif()\n\ninstall(TARGETS ${lib_name}\n  RUNTIME DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DIR} COMPONENT RuntimeLibraries\n  LIBRARY DESTINATION ${${PROJECT_NAME}_INSTALL_LIB_DIR} COMPONENT RuntimeLibraries\n  ARCHIVE DESTINATION ${${PROJECT_NAME}_INSTALL_LIB_DIR} COMPONENT Development\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory in CMake\nDESCRIPTION: Conditionally adds the 'Testing' subdirectory to the build if testing is enabled. This subdirectory likely contains unit tests for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Data/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Test Executable\nDESCRIPTION: This snippet uses `target_link_libraries` to link the `${KIT}CxxTests` executable against the libraries specified in the `target_libraries` variable, which is just `${KIT}` (or slicer).\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTApp/Testing/Cxx/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${KIT}CxxTests  ${target_libraries})\n```\n\n----------------------------------------\n\nTITLE: Authenticate DICOMweb Import with Access Token in Python\nDESCRIPTION: Imports DICOM data using DICOMweb, authenticating with an access token. This is applicable to PACS solutions requiring token-based authentication. The example shows how to include the access token in the importFromDICOMWeb function call.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/dicom.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nslicer.util.selectModule(\"DICOM\")  # ensure DICOM database is initialized and\nslicer.app.processEvents()\nfrom DICOMLib import DICOMUtils\nDICOMUtils.importFromDICOMWeb(\n  dicomWebEndpoint=\"https://demo.kheops.online/api\",\n  studyInstanceUID=\"1.3.6.1.4.1.14519.5.2.1.8421.4009.985792766370191766692237040819\",\n  accessToken=\"TfYXwbKAW7JYbAgZ7MyISf\")\n```\n\n----------------------------------------\n\nTITLE: Set Include Dirs Variable\nDESCRIPTION: Sets the `${PROJECT_NAME}_INCLUDE_DIRS` variable to the current source and binary directories. This variable is used to specify the include directories for the library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkSegmentationCore/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nset(${PROJECT_NAME}_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR}\n  CACHE INTERNAL \"${PROJECT_NAME} include dirs\" FORCE)\n```\n\n----------------------------------------\n\nTITLE: Setting Plugin Name and Project\nDESCRIPTION: This snippet sets the name of the plugin to \"SlicerStylePlugins\" using the `set` command and then defines the project using the `project` command.  The `${PROJECT_NAME}` variable likely comes from an upper-level CMake configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTGUI/StylePlugins/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT ${PROJECT_NAME}StylePlugins)\nproject(${KIT})\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory CMake\nDESCRIPTION: This snippet conditionally adds the \"Testing\" subdirectory to the build if the `BUILD_TESTING` variable is enabled. This allows building and running unit tests for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/HistogramMatching/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Build CLI using SEMMacroBuildCLI - CMake\nDESCRIPTION: This snippet uses the `SEMMacroBuildCLI` macro to build the command-line interface (CLI) for the module. It specifies the module name, logo header, and target libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GradientAnisotropicDiffusion/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/ITKLogo.h\n  TARGET_LIBRARIES ${ITK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Extension Meta-Information\nDESCRIPTION: Sets meta-information for the extension. This information includes the extension's homepage, contributors, description, icon URL, screenshot URLs, and dependencies. These are used for displaying information about the extension within Slicer.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/LoadableExtensionTemplate/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(EXTENSION_HOMEPAGE \"https://www.slicer.org/wiki/Documentation/Nightly/Extensions/LoadableExtensionTemplate\")\nset(EXTENSION_CONTRIBUTORS \"John Doe (AnyWare Corp.)\")\nset(EXTENSION_DESCRIPTION \"This is an example of a simple extension\")\nset(EXTENSION_ICONURL \"https://www.example.com/Slicer/Extensions/LoadableExtensionTemplate.png\")\nset(EXTENSION_SCREENSHOTURLS \"https://www.example.com/Slicer/Extensions/LoadableExtensionTemplate/Screenshots/1.png\")\nset(EXTENSION_DEPENDS \"NA\") # Specified as a list or \"NA\" if no dependencies\n```\n\n----------------------------------------\n\nTITLE: Installing Qt components using online installer\nDESCRIPTION: This command installs the required Qt components (qt.qt5.5152.gcc_64, qt.qt5.5152.qtwebengine, qt.qt5.5152.qtwebengine.gcc_64) using the Qt online installer. It requires a Qt account login and password, specified via environment variables. The installation is performed in the `/opt/qt` directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/linux.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nexport QT_ACCOUNT_LOGIN=<set your qt.io account email here>\nexport QT_ACCOUNT_PASSWORD=<set your password here>\n./qt-unified-linux-x64-online.run \\\n  install \\\n    qt.qt5.5152.gcc_64 \\\n    qt.qt5.5152.qtwebengine \\\n    qt.qt5.5152.qtwebengine.gcc_64 \\\n  --root /opt/qt \\\n  --email $QT_ACCOUNT_LOGIN \\\n  --pw $QT_ACCOUNT_PASSWORD\n```\n\n----------------------------------------\n\nTITLE: Setting Breakpoints with LLDB Debugger in Xcode\nDESCRIPTION: This snippet demonstrates how to set a breakpoint in Xcode using the lldb debugger's command-line interface. It assumes you have already attached to the Slicer process and broken the program's execution. The command will set a breakpoint at the specified method.  You will need to first attach to the process and break the program before using this command.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/debugging/macoscpp.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nbreakpoint set -M vtkMRMLScene::Clear\n```\n\n----------------------------------------\n\nTITLE: Add Executable Test and Link Libraries\nDESCRIPTION: This section creates an executable test named `${CLP}Test` using `ctk_add_executable_utf8`. It adds dependencies to the main module, links necessary libraries, and sets target properties such as labels and folder.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GrayscaleModelMaker/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nctk_add_executable_utf8(${CLP}Test ${CLP}Test.cxx)\nadd_dependencies(${CLP}Test ${CLP})\ntarget_link_libraries(${CLP}Test\n  ${CLP}Lib\n  ${${MODULE_NAME}_TARGET_LIBRARIES}\n  ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES}\n  )\nset_target_properties(${CLP}Test PROPERTIES LABELS ${CLP})\nset_target_properties(${CLP}Test PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Setting Module Build Directory\nDESCRIPTION: Determines the module's build directory based on the CMake configuration type (e.g., Debug, Release). If multiple configurations are present, it iterates through each one and appends the corresponding directory to the MODULE_BUILD_DIR variable. If not, it uses a default directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/CropVolumeSequence/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n\n  if(CMAKE_CONFIGURATION_TYPES)\n    set(MODULE_BUILD_DIR \"\")\n    foreach(config ${CMAKE_CONFIGURATION_TYPES})\n      list(APPEND MODULE_BUILD_DIR \"${CMAKE_BINARY_DIR}/${Slicer_QTLOADABLEMODULES_LIB_DIR}/${config}\")\n    endforeach()\n  else()\n    set(MODULE_BUILD_DIR \"${CMAKE_BINARY_DIR}/${Slicer_QTLOADABLEMODULES_LIB_DIR}\")\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Find ITK Components - CMake\nDESCRIPTION: This snippet defines the ITK components required by the module and then uses `find_package` to locate ITK with these components. It includes handling for different ITK versions to manage factory registration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GradientAnisotropicDiffusion/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKAnisotropicSmoothing\n  ITKIOImageBase\n  ITKImageFilterBase\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Creating Test Source List\nDESCRIPTION: Creates a test source list using the `create_test_sourcelist` macro. This macro gathers the C++ test source files, includes extra headers, and defines the `Tests` variable. It includes files like `qSlicerCoreModuleTest1.cxx` and `vtkMRMLDebugLeaksMacro.h`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Core/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_TESTDRIVER_BEFORE_TESTMAIN \"DEBUG_LEAKS_ENABLE_EXIT_ERROR();\" )\ncreate_test_sourcelist(Tests ${KIT}CxxTests.cxx\n  ${KIT_TEST_NAMES_CXX}\n  qSlicerCoreModuleTest1.cxx\n  qSlicerCoreModuleFactoryTest1.cxx\n  qSlicerModulePanelTest2.cxx\n  EXTRA_INCLUDE vtkMRMLDebugLeaksMacro.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Project Definition and Dependencies\nDESCRIPTION: This snippet defines the project name, qSlicerBaseQTCLI, and declares its dependencies, including SlicerExecutionModel and ModuleDescriptionParser.  It uses find_package to locate these dependencies and their associated components. It also handles ITK dependency setup using find_package.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCLI/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(qSlicerBaseQTCLI)\n\n#\n# Dependencies\n#\n\n#\n# ModuleDescriptionParser\n#\nfind_package(SlicerExecutionModel REQUIRED ModuleDescriptionParser)\n\n#\n# ITK - Import ITK targets required by ModuleDescriptionParser\n#\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ${ModuleDescriptionParser_ITK_COMPONENTS}\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: TerminologyEntry Tag Example\nDESCRIPTION: Example of a TerminologyEntry tag showing how to encode a mass in the right adrenal gland using DICOM terminology. This tag stores information about the segment's category, type, and anatomical region using coding scheme designators, code values, and code meanings.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/modules/segmentations.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nTerminologyEntry:\nSegmentation category and type - 3D Slicer General Anatomy list\n~SCT^49755003^Morphologically Altered Structure\n~SCT^4147007^Mass\n~^^\n~Anatomic codes - DICOM master list\n~SCT^23451007^Adrenal gland\n~SCT^24028007^Right\n```\n\n----------------------------------------\n\nTITLE: Library Building CMake\nDESCRIPTION: Creates the library using the add_library command, linking the specified source files. Defines the libraries to link against, including VTK, MRMLCore, and MRMLLogic.  Adds Python-related libraries if MRMLDisplayableManager_USE_PYTHON is enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/DisplayableManager/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(${lib_name} ${srcs})\n\nset(libs\n  ${VTK_LIBRARIES}\n  MRMLCore\n  MRMLLogic\n  )\n\nif(MRMLDisplayableManager_USE_PYTHON)\n  set(VTK_COMMON_PYTHON_LIBRARY\n    VTK::WrappingPythonCore # For vtkPythonUtil\n    )\n  list(APPEND libs\n    ${VTK_COMMON_PYTHON_LIBRARY} # For vtkPythonUtils\n    ${PYTHON_LIBRARY} # At some point, VTK should be updated to expose VTK_PYTHON_LIBRARY\n    )\nendif()\n\ntarget_link_libraries(${lib_name} ${libs})\n```\n\n----------------------------------------\n\nTITLE: Build Module Logic - CMake\nDESCRIPTION: Uses a CMake macro `SlicerMacroBuildModuleLogic` to build the module logic. This macro takes the module name, export directive, include directories, source files, and target libraries as input, and automates the build process.  It simplifies the build configuration by encapsulating common build steps.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/MRMLDM/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nSlicerMacroBuildModuleLogic(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files in CMake\nDESCRIPTION: Defines the list of C++ source files that will be compiled to build the library. This includes source files for the core module and the EventBroker module. These source files contain the implementation logic of the modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Core/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT_SRCS\n  qSlicerCoreModule.cxx\n  qSlicerCoreModule.h\n\n  qSlicerCoreModuleFactory.cxx\n  qSlicerCoreModuleFactory.h\n\n  EventBroker/qSlicerEventBrokerModule.cxx\n  EventBroker/qSlicerEventBrokerModule.h\n  EventBroker/qSlicerEventBrokerModuleWidget.cxx\n  EventBroker/qSlicerEventBrokerModuleWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name CMake\nDESCRIPTION: This snippet sets the module name to 'GrayscaleFillHoleImageFilter' using the `set` command in CMake. This variable is used later in the script to define the module and related build processes. It's a fundamental step in configuring the build for a specific module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GrayscaleFillHoleImageFilter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_NAME GrayscaleFillHoleImageFilter)\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion using CMake\nDESCRIPTION: This CMake snippet conditionally includes the 'Python' subdirectory. The 'add_subdirectory' command adds the specified directory to the build, but only if the 'Slicer_USE_PYTHONQT' variable evaluates to true.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(Slicer_USE_PYTHONQT)\n  add_subdirectory(Python)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Include Directories for CMake\nDESCRIPTION: This snippet defines include directories required for compiling the module.  It includes the Slicer base include directories, ensuring that the necessary header files are available during the build process.  These directories provide access to core Slicer functionalities and data structures.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Sequences/MRML/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${Slicer_Base_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Test Sources in CMake\nDESCRIPTION: Defines the source files used for testing the module. These sources are assigned to the KIT_TEST_SRCS variable for later use in creating a test driver.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/Testing/Cxx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT_TEST_SRCS\n  qSlicerColorsModuleWidgetTest1.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Add Module Test with Pixel Type in CMake\nDESCRIPTION: This function `add_module_test` generates a test with a specific pixel type. It utilizes `ExternalData_add_test` to define a test command which compares the output against a baseline mha file. It sets the label for the test.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/AddScalarVolumes/Testing/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_module_test pixeltype)\n  set(testname ${CLP}Test_${pixeltype})\n  ExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n    NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n    --compare DATA{${BASELINE}/${CLP}Test_${pixeltype}.mha}\n    ${TEMP}/${CLP}Test_${pixeltype}.mha\n    ModuleEntryPoint\n    DATA{${INPUT}/brainSlice${pixeltype}.mha}\n    DATA{${INPUT}/brainSlice${pixeltype}.mha}\n    ${TEMP}/${CLP}Test_${pixeltype}.mha\n    )\n  set_property(TEST ${testname} PROPERTY LABELS ${CLP})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Target\nDESCRIPTION: This snippet adds an external data target using `ExternalData_add_target` if `SEM_DATA_MANAGEMENT_TARGET` is equal to `${CLP}Data`. This allows CMake to manage external data dependencies for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/CLI/Testing/Cxx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building and Uploading Slicer Extensions (Windows)\nDESCRIPTION: This snippet demonstrates building, testing, packaging, and uploading Slicer extensions to a custom Extensions Server on Windows. It involves setting environment variables for the Slicer Package Manager client, URL, and API key, then configuring CMake with paths to the Slicer build tree and extension description files, and building the extensions. This snippet configures the CTest model, enables extension uploads, and uses environment variables for authentication.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/extensions.md#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\ncd /d C:\\D\\ExtensionsIndexR\n\"c:\\Program Files\\CMake\\bin\\cmake.exe\" -E env ^\n  SLICER_PACKAGE_MANAGER_CLIENT_EXECUTABLE=/path/to/slicer_package_manager_client ^\n  SLICER_PACKAGE_MANAGER_URL=https://slicer-packages.kitware.com ^\n  SLICER_PACKAGE_MANAGER_API_KEY=a0b012c0123d012abc01234a012345a0 ^\n  ^\n\"c:\\Program Files\\CMake\\bin\\cmake.exe\" -DSlicer_DIR:PATH=~/Slicer-SuperBuild-Release/Slicer-build ^\n -DSlicer_EXTENSION_DESCRIPTION_DIR:PATH=C:/D/ExtensionsIndex ^\n -DCMAKE_BUILD_TYPE:STRING=Release ^\n -DCTEST_MODEL:STRING=Experimental ^\n -DSlicer_UPLOAD_EXTENSIONS:BOOL=ON ^\n C:/D/S/Extensions/CMake\n\nmake\n```\n\n----------------------------------------\n\nTITLE: Adding Qt resources using QT5_ADD_RESOURCES\nDESCRIPTION: This snippet uses the `QT5_ADD_RESOURCES` command to add the Qt resource file to the build system. It takes the name of the target (`Tests`) and the path to the resource file as input.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/Testing/Cxx/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n    QT5_ADD_RESOURCES(Tests ${resources_dir}/${KIT}Testing.qrc)\n```\n\n----------------------------------------\n\nTITLE: Launching Qt Creator via Slicer in Windows\nDESCRIPTION: This batch script launches Qt Creator through the Slicer executable to set up the environment correctly. This ensures Qt Creator can design UIs using CTK and Slicer custom designer plugins. It requires the paths to the Slicer build directory and Qt Creator executable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/debugging/qtcreatorcpp.md#_snippet_1\n\nLANGUAGE: bat\nCODE:\n```\ncd c:\\path\\to\\Slicer-Superbuild\\Slicer-build\n.\\Slicer.exe --launch /path/to/qtcreator.exe\n```\n\n----------------------------------------\n\nTITLE: Register and Observe MRML Node Modification\nDESCRIPTION: The `vtkSetAndObserveMRMLObjectMacro` registers a MRML node and adds an observer for the vtkCommand::ModifiedEvent. This ensures that changes to the observed MRML node trigger updates in the registered object.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/mrml_overview.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Setting Variables for Qt Designer Plugin - CMake\nDESCRIPTION: This section defines CMake variables such as KIT, EXPORT, SRCS, MOC_SRCS, and TARGET_LIBRARIES which are later used by the ctkMacroBuildQtDesignerPlugin macro. These variables specify the necessary files and settings required to build the Qt Designer plugin.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT ${PROJECT_NAME}Plugins)\n\nset(${KIT}_EXPORT \"Q_SLICER_QTMODULES_${MODULE_NAME_UPPER}_WIDGETS_PLUGINS_EXPORT\")\n\nset(${KIT}_SRCS\n  qSlicerColorsModuleWidgetsAbstractPlugin.cxx\n  qSlicerColorsModuleWidgetsAbstractPlugin.h\n  qSlicerColorsModuleWidgetsPlugin.cxx\n  qSlicerColorsModuleWidgetsPlugin.h\n  qMRMLColorLegendDisplayNodeWidgetPlugin.cxx\n  qMRMLColorLegendDisplayNodeWidgetPlugin.h\n  qMRMLColorListViewPlugin.cxx\n  qMRMLColorListViewPlugin.h\n  qMRMLColorTableViewPlugin.cxx\n  qMRMLColorTableViewPlugin.h\n  )\n\nset(${KIT}_MOC_SRCS\n  qSlicerColorsModuleWidgetsPlugin.h\n  qMRMLColorLegendDisplayNodeWidgetPlugin.h\n  qMRMLColorListViewPlugin.h\n  qMRMLColorTableViewPlugin.h\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  qSlicer${MODULE_NAME}ModuleWidgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Test Executable\nDESCRIPTION: This snippet links the '${KIT}CxxTests' executable target with the '${KIT}' library. This ensures the test executable has access to the necessary code from the Core-Base module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/Logic/Testing/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${KIT}CxxTests ${KIT})\n```\n\n----------------------------------------\n\nTITLE: Adding Python Unittest in Slicer with CMake\nDESCRIPTION: This CMake command adds a Python unit test to the Slicer project. It uses the `slicer_add_python_unittest` macro, passing the `SCRIPT` argument to specify the Python script to execute as a test. The `${MODULE_NAME}` variable likely represents the name of the module being tested, and `ModuleTest.py` is the specific Python file containing the unit tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/SegmentStatistics/Testing/Python/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n#slicer_add_python_unittest(SCRIPT ${MODULE_NAME}ModuleTest.py)\n```\n\n----------------------------------------\n\nTITLE: Send DICOM data to PACS using DICOMweb (Python)\nDESCRIPTION: This snippet demonstrates sending DICOM files to a PACS server using the DICOMweb protocol. It uses the DICOMSender class with the 'DICOMweb' protocol, requiring authentication fetched via DICOMUtils.getGlobalDICOMAuth(). The 'delayed' parameter enables asynchronous sending.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/dicom.md#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom DICOMLib import DICOMSender\nsender = DICOMSender(\n  files=['path/to/0.dcm','path/to/1.dcm'],\n  address='dicomserver.co.uk:9999',\n  protocol=\"DICOMweb\",\n  auth=DICOMUtils.getGlobalDICOMAuth(),\n  delayed=True\n)\nsender.send()\n```\n\n----------------------------------------\n\nTITLE: Checking Slicer Launcher Options (Bash)\nDESCRIPTION: This code demonstrates how to check the available launcher options when running Slicer on MacOSX. It highlights that the `--launch` flag and other launcher-related options might not be listed, which is expected because of the application bundle structure.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/extensions.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n $ ./Slicer.app/Contents/MacOS/Slicer --help\n Usage\n  Slicer [options]\n\n  Options\n    --, --ignore-rest                     Ignores the rest of the labeled arguments following this flag. (default: false)\n    -h, --help                            Display available command line arguments.\n    [...]\n    --version                             Displays version information and exits.\n```\n\n----------------------------------------\n\nTITLE: Defining Target Libraries for CMake\nDESCRIPTION: This snippet defines the target libraries that the module depends on. These libraries are linked with the module during the build process. Dependencies include ITK, MRML libraries, and SlicerBaseLogic. These provide essential functionalities for image processing, data representation, and core Slicer logic.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Sequences/MRML/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  ${ITK_LIBRARIES}\n  ${MRML_LIBRARIES}\n  SlicerBaseLogic\n  )\n```\n\n----------------------------------------\n\nTITLE: Module File Structure\nDESCRIPTION: This snippet illustrates the file structure for a custom module in 3D Slicer. It includes module, module widget, and logic components, each with a header (.h) and implementation (.cxx) file. The logic component resides in its own subdirectory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/mrml_overview.md#_snippet_32\n\nLANGUAGE: filesystem\nCODE:\n```\n|-- <Extension>\n       |-- <Module>\n              |-- qSlicer<MyCustomType>Module.h\n              |-- qSlicer<MyCustomType>Module.cxx\n              |-- qSlicer<MyCustomType>ModuleWidget.h\n              |-- qSlicer<MyCustomType>ModuleWidget.cxx\n              |-- Logic\n                    |-- vtkSlicer<MyCustomType>Logic.h\n                    |-- vtkSlicer<MyCustomType>Logic.cxx\n```\n\n----------------------------------------\n\nTITLE: Setting Test Driver Parameters\nDESCRIPTION: This snippet configures the CTest test driver by defining variables that specify code to be executed before and after the main test function.  This includes setting up debug leak detection and output validation. It prepares the environment for testing the MRML module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Logic/Testing/Cxx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(EXTRA_INCLUDE \"vtkMRMLDebugLeaksMacro.h\"\\n#include \"vtkTestingOutputWindow.h\")\nset(CMAKE_TESTDRIVER_BEFORE_TESTMAIN \"DEBUG_LEAKS_ENABLE_EXIT_ERROR();\\nTESTING_OUTPUT_ASSERT_WARNINGS_ERRORS(0);\" )\nset(CMAKE_TESTDRIVER_AFTER_TESTMAIN \"TESTING_OUTPUT_ASSERT_WARNINGS_ERRORS(0);\" )\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet sets the `${KIT}_INCLUDE_DIRECTORIES` variable, which specifies the directories that the compiler should search for header files. It includes directories for vtkSlicerSubjectHierarchyModuleLogic, qSlicerTerminologiesModuleWidgets, MRMLCore, and optionally MRMLCLI if `Slicer_BUILD_CLI_SUPPORT` is enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/Widgets/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSlicerSubjectHierarchyModuleLogic_INCLUDE_DIRS}\n  ${qSlicerTerminologiesModuleWidgets_INCLUDE_DIRS}\n  ${MRMLCore_INCLUDE_DIRS}\n  )\nif(Slicer_BUILD_CLI_SUPPORT)\n  list(APPEND ${KIT}_INCLUDE_DIRECTORIES\n    ${MRMLCLI_INCLUDE_DIRS}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files - CMake\nDESCRIPTION: This snippet sets the source files for the module logic. It includes both C++ source (.cxx) and header (.h) files, which define the logic's implementation and interface.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Data/Logic/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  vtkSlicer${MODULE_NAME}ModuleLogic.cxx\n  vtkSlicer${MODULE_NAME}ModuleLogic.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Subject Hierarchy Plugin File Structure\nDESCRIPTION: This snippet shows the recommended file structure for a custom subject hierarchy plugin in 3D Slicer. It includes a header file (.h) and an implementation file (.cxx) within the SubjectHierarchyPlugins directory of an extension's module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/mrml_overview.md#_snippet_31\n\nLANGUAGE: filesystem\nCODE:\n```\n|-- <Extension>\n       |-- <Module>\n              |-- SubjectHierarchyPlugins\n                    |-- qSlicerSubjectHierarchy<MyCustomType>Plugin.h\n                    |-- qSlicerSubjectHierarchy<MyCustomType>Plugin.cxx\n```\n\n----------------------------------------\n\nTITLE: Configuring Displayable Manager Object Factory in CMake\nDESCRIPTION: This code snippet utilizes the SlicerConfigureDisplayableManagerObjectFactory macro to configure the object factory for the displayable manager. It sets the target name, source files, export macro, export header, and the output variable to store generated source files. This facilitates the dynamic instantiation of displayable manager objects within the Slicer application.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/MRMLDM/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(displayable_manager_SRCS\n  vtkMRML${MODULE_NAME}DisplayableManager3D.cxx\n  vtkMRML${MODULE_NAME}DisplayableManager2D.cxx\n  )\n\nSlicerConfigureDisplayableManagerObjectFactory(\n  TARGET_NAME ${KIT}\n  SRCS \"${displayable_manager_SRCS}\"\n  EXPORT_MACRO \"${${KIT}_EXPORT_DIRECTIVE}\"\n  EXPORT_HEADER \"${KIT}Export.h\"\n  OUTPUT_SRCS_VAR displayable_manager_instantiator_SRCS\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting MOC Source Files\nDESCRIPTION: Defines the MODULE_MOC_SRCS variable containing the list of header files that require processing by the Qt Meta-Object Compiler (moc). This is necessary for Qt's signal and slot mechanism to work correctly.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_MOC_SRCS\n  qSlicer${MODULE_NAME}IOOptionsWidget.h\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  qSlicer${MODULE_NAME}Reader.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Applying Library Properties (CMake)\nDESCRIPTION: This snippet applies user-defined properties to the library target.  It uses the `Slicer_LIBRARY_PROPERTIES` variable, which likely contains a list of properties to be applied.  This allows for customization of the library's behavior and attributes.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Core/CMakeLists.txt#_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nif(Slicer_LIBRARY_PROPERTIES)\n  set_target_properties(${lib_name} PROPERTIES ${Slicer_LIBRARY_PROPERTIES})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting MOC sources for the KIT - CMake\nDESCRIPTION: This snippet defines the header files that need to be processed by the Meta-Object Compiler (MOC). MOC is a Qt tool that generates meta-object code for classes that use Qt's signals and slots mechanism.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/Widgets/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_MOC_SRCS\n  qSlicerTableColumnPropertiesWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries CMake\nDESCRIPTION: Specifies the libraries that the module depends on. These libraries are linked with the module during the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  qSlicerSubjectHierarchyModuleWidgets\n  vtkSlicerSubjectHierarchyModuleLogic\n  qSlicerTerminologiesModuleWidgets\n  qMRMLWidgets\n  MRMLLogic\n  MRMLCore\n  )\n```\n\n----------------------------------------\n\nTITLE: Set Module Python Scripts (CMake)\nDESCRIPTION: This snippet defines a list of Python scripts associated with the module. In this case, it includes a Python script named \"VectorToScalarVolume.py\". This list is later used by the slicerMacroBuildScriptedModule macro.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/VectorToScalarVolume/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_PYTHON_SCRIPTS\n  ${MODULE_NAME}.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Target Libraries (CMake)\nDESCRIPTION: This snippet defines the target libraries that the module logic depends on. In this case, it depends on the MRMLCore library. These libraries will be linked during the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/Logic/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  MRMLCore\n  )\n```\n\n----------------------------------------\n\nTITLE: Project Definition\nDESCRIPTION: Defines the project name for the module widgets, using the naming convention qSlicer${MODULE_NAME}ModuleWidgets. It sets the stage for further configuration settings.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/Loadable/Widgets/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(qSlicer${MODULE_NAME}ModuleWidgets)\n```\n\n----------------------------------------\n\nTITLE: Set Input Directory\nDESCRIPTION: This snippet sets the input directory for testing. It defines the `INPUT` variable using the `set` command and assigns it the path to the `Testing` directory within the `MRMLCore_SOURCE_DIR`. This directory likely contains input files required by the tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Plots/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INPUT ${MRMLCore_SOURCE_DIR}/Testing)\n```\n\n----------------------------------------\n\nTITLE: Setting MRML_USE_vtkTeem Option\nDESCRIPTION: This snippet defines an option to control whether MRML is built with vtkTeem support. The option is set to ON by default and marked as advanced.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Core/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\noption(MRML_USE_vtkTeem \"Build MRML with vtkTeem support.\" ON)\nmark_as_advanced(MRML_USE_vtkTeem)\n```\n\n----------------------------------------\n\nTITLE: Project Definition\nDESCRIPTION: Defines the CMake project name for the qSlicerSubjectHierarchyPlugins module. This sets the foundation for the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(qSlicer${MODULE_NAME}SubjectHierarchyPlugins)\n```\n\n----------------------------------------\n\nTITLE: Executing Simple Tests\nDESCRIPTION: This snippet executes simple tests using the `simple_test` macro. Each `simple_test` command runs a test with specified data files.  The macro likely compares output to expected results. Some tests have one data file, others have two.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/Logic/Testing/Cxx/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nsimple_test( vtkSlicerTransformLogicTest1 ${DATA_DIR}/affineTransform.txt)\nsimple_test( vtkSlicerTransformLogicTest2 ${DATA_DIR}/cube.vtk)\nsimple_test( vtkSlicerTransformLogicTest3 ${DATA_DIR}/cube.vtk ${DATA_DIR}/transformedCube.vtk)\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory - CMake\nDESCRIPTION: This code snippet conditionally adds a subdirectory for testing if the `BUILD_TESTING` variable is enabled. This allows to organize the module tests in separate directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Python Test for Scene View Restoration (CMake)\nDESCRIPTION: Adds a Python test for restoring the scene view with a custom color node, addressing Bug 3992. This test script, CustomColorTableSceneViewRestoreTestBug3992.py, is executed with Slicer arguments that disable CLI modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/Testing/Python/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nslicer_add_python_test(SCRIPT CustomColorTableSceneViewRestoreTestBug3992.py\n                       SLICER_ARGS --disable-cli-modules)\n```\n\n----------------------------------------\n\nTITLE: Creating Documentation Tarball\nDESCRIPTION: This snippet creates a custom target named `SlicerWizard-doc-tarball` to create a tarball archive of the generated documentation. It depends on the `SlicerWizard-doc` target, ensuring the documentation is built before creating the archive.  It executes the `create_doc_tarball.cmake` script to create the tarball. It uses CMake's command line to pass INPUT_PATH and OUTPUT_FILE variables to the script.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Scripts/SlicerWizard/doc/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(SlicerWizard-doc-tarball\n  DEPENDS SlicerWizard-doc\n  COMMAND \"${CMAKE_COMMAND}\"\n          \"-DINPUT_PATH:PATH=${docdir}\"\n          \"-DOUTPUT_FILE:FILEPATH=${tarball}\"\n          -P \"${CMAKE_CURRENT_SOURCE_DIR}/create_doc_tarball.cmake\"\n  )\nadd_dependencies(doc-tarballs SlicerWizard-doc-tarball)\n```\n\n----------------------------------------\n\nTITLE: Finding LibArchive Package\nDESCRIPTION: This snippet uses `find_package` to locate the LibArchive package. The `REQUIRED` keyword ensures that CMake will stop with an error if the package is not found.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Core/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(LibArchive REQUIRED MODULE)\n```\n\n----------------------------------------\n\nTITLE: Setting Module Resources - CMake\nDESCRIPTION: This section is intended to define the resource files for the module, but is currently commented out. Resource files can include images, icons, and other data needed by the module. The commented-out line suggests that a qrc file was intended to be used.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Terminologies/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_RESOURCES\n  # Resources/qSlicer${MODULE_NAME}Module.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name\nDESCRIPTION: Sets the MODULE_NAME variable to \"Cameras\" and converts it to uppercase for use in other variable definitions. This is a fundamental step in defining the module's identity within the build system.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Cameras/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME Cameras)\n\nstring(TOUPPER ${MODULE_NAME} MODULE_NAME_UPPER)\n```\n\n----------------------------------------\n\nTITLE: Setting Python Scripts\nDESCRIPTION: Defines the Python scripts associated with the module, including the main module script.  These scripts are used by the `slicerMacroBuildScriptedModule` macro.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/SegmentEditor/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_PYTHON_SCRIPTS\n  ${MODULE_NAME}.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Conditional Factory Registration Management\nDESCRIPTION: Conditionally disables ITK factory registration managers based on the ITK version. For ITK versions 5.3 and greater, it disables IMAGEIO, MESHIO, and TRANSFORMIO factory registration. For older versions, it disables the general IO factory registration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/SimpleRegionGrowingSegmentation/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\n```\n\n----------------------------------------\n\nTITLE: Project Initialization - CMake\nDESCRIPTION: Initializes the CMake project for the qSlicer module widgets, naming the project and setting the kit name based on the project name.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Widgets/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(qSlicer${MODULE_NAME}ModuleWidgets)\n\nset(KIT ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Adding Python Unit Tests (CMake)\nDESCRIPTION: This snippet adds two Python unit tests for the VTK ITK archetype readers using the `slicer_add_python_unittest` function. These tests are defined in the specified Python scripts.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkITK/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nslicer_add_python_unittest(SCRIPT vtkITKArchetypeDiffusionTensorReaderFile.py)\nslicer_add_python_unittest(SCRIPT vtkITKArchetypeScalarReaderFile.py)\n```\n\n----------------------------------------\n\nTITLE: Include Python Subdirectory - CMake\nDESCRIPTION: This command adds the 'Python' subdirectory to the CMake build process. It instructs CMake to process the CMakeLists.txt file within the 'Python' directory and incorporate its build targets into the main project.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Python)\n```\n\n----------------------------------------\n\nTITLE: Deleting Existing Model Storage Nodes - Python\nDESCRIPTION: This snippet removes existing model storage nodes from the scene.  It retrieves all nodes of class 'vtkMRMLModelStorageNode' and iterates through them, removing each one from the scene. This allows default storage nodes to be recreated with updated settings.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# Delete existing model storage nodes so that they will be recreated with default settings\nexistingModelStorageNodes = slicer.util.getNodesByClass(\"vtkMRMLModelStorageNode\")\nfor modelStorageNode in existingModelStorageNodes:\n  slicer.mrmlScene.RemoveNode(modelStorageNode)\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name\nDESCRIPTION: Sets the name of the module to 'ExtractSkeleton'. This variable is used later in the configuration process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ExtractSkeleton/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME ExtractSkeleton)\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory - CMake\nDESCRIPTION: Conditionally adds the 'Testing' subdirectory to the build process if BUILD_TESTING is enabled. This allows for including tests as part of the module's build. It ensures testing is only included when configured.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ExecutionModelTour/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Object Factory - CMake\nDESCRIPTION: This snippet uses a custom CMake macro `SlicerConfigureDisplayableManagerObjectFactory` to generate the object factory for the displayable manager. It takes the target name, source files, export macro, and export header as input and outputs the generated source files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/MRMLDM/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nSlicerConfigureDisplayableManagerObjectFactory(\n  TARGET_NAME ${KIT}\n  SRCS \"${displayable_manager_SRCS}\"\n  EXPORT_MACRO \"${${KIT}_EXPORT_DIRECTIVE}\"\n  EXPORT_HEADER \"${KIT}Export.h\"\n  OUTPUT_SRCS_VAR displayable_manager_instantiator_SRCS\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name\nDESCRIPTION: This sets the name of the module to SuperCLIModuleTemplate, which is used in subsequent configuration steps.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperCLIModuleTemplate/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_NAME SuperCLIModuleTemplate)\n```\n\n----------------------------------------\n\nTITLE: Setting Module Target Libraries\nDESCRIPTION: This snippet lists the libraries that the module depends on. These libraries provide additional functionality that the module needs to work correctly. The target libraries contain pre-compiled code that the module uses.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Plots/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  qMRMLWidgets\n  qSlicer${MODULE_NAME}SubjectHierarchyPlugins\n  qSlicer${MODULE_NAME}ModuleWidgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Installing Headers\nDESCRIPTION: This snippet installs the header files. First it checks if `${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT` is defined; if not it sets it to ON. It then checks if `${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT` is NOT ON. If both of these checks pass, it globes all header files in the source directory, including the configured header, and installs them to the `include/${PROJECT_NAME}` directory within the install prefix. The `COMPONENT Development` argument indicates that these files are part of the development component.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Core/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT)\n  set(${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT ON)\nendif()\nif(NOT ${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT)\n  file(GLOB headers \"${CMAKE_CURRENT_SOURCE_DIR}/*.h\")\n  install(\n    FILES ${headers} ${CMAKE_CURRENT_BINARY_DIR}/${configure_header_file}\n    DESTINATION include/${PROJECT_NAME} COMPONENT Development)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding ITK Package in CMake\nDESCRIPTION: Finds the ITK package with specified components.  The required ITK components for the module are listed, and the ITK package is located using `find_package`.  Conditional logic disables ITK factory registration based on ITK version, aiming to avoid conflicts or issues.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/LabelMapSmoothing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKAntiAlias\n  ITKIOImageBase\n  ITKImageGrid\n  ITKImageStatistics\n  ITKSmoothing\n  ITKThresholding\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Building Loadable Module in CMake\nDESCRIPTION: This snippet uses the slicerMacroBuildLoadableModule macro to build the module. This macro encapsulates the common steps involved in building a loadable module for Slicer. It takes various parameters such as name, export directive, include directories, and source files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/Loadable/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroBuildLoadableModule(\n  NAME ${MODULE_NAME}\n  EXPORT_DIRECTIVE ${MODULE_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${MODULE_INCLUDE_DIRECTORIES}\n  SRCS ${MODULE_SRCS}\n  MOC_SRCS ${MODULE_MOC_SRCS}\n  UI_SRCS ${MODULE_UI_SRCS}\n  TARGET_LIBRARIES ${MODULE_TARGET_LIBRARIES}\n  RESOURCES ${MODULE_RESOURCES}\n  WITH_GENERIC_TESTS\n  )\n```\n\n----------------------------------------\n\nTITLE: Including a Subdirectory in CMake\nDESCRIPTION: This CMake command adds the specified subdirectory to the build.  The CMakeLists.txt file in the 'Cxx' subdirectory will be processed as part of the build configuration. This allows for modularity and organization of the build system.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/Widgets/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: UI Source Files Configuration\nDESCRIPTION: Specifies the UI files for the module widgets. These files define the graphical user interface using Qt Designer.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/Loadable/Widgets/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_UI_SRCS\n  ../Resources/UI/qSlicer${MODULE_NAME}FooBarWidget.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Initializing Project and Setting Variables\nDESCRIPTION: This snippet initializes the project, sets the export directive for the module widgets, and defines include directories related to the logic components. It also lists the source files (both .cxx and .h), moc files, UI files, resources and target libraries used in the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Texts/Widgets/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(qSlicer${MODULE_NAME}ModuleWidgets)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"Q_SLICER_MODULE_${MODULE_NAME_UPPER}_WIDGETS_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSlicer${MODULE_NAME}ModuleLogic_SOURCE_DIR}\n  ${vtkSlicer${MODULE_NAME}ModuleLogic_BINARY_DIR}\n  )\n\nset(${KIT}_SRCS\n  qMRMLTextWidget.cxx\n  qMRMLTextWidget.h\n  )\n\nset(${KIT}_MOC_SRCS\n  qMRMLTextWidget.h\n  )\n\nset(${KIT}_UI_SRCS\n  Resources/UI/qMRMLTextWidget.ui\n  )\n\nset(${KIT}_RESOURCES\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  )\n```\n\n----------------------------------------\n\nTITLE: Start Control Point Place Mode (Python)\nDESCRIPTION: Activates the markups control point placement mode, allowing the user to add points by clicking in the scene. The first snippet uses the module logic, while the second uses lower-level selection and interaction nodes. The `placeModePersistence` parameter controls whether the place mode remains active after placing a point.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nplaceModePersistence = 1\nslicer.modules.markups.logic().StartPlaceMode(placeModePersistence)\n```\n\nLANGUAGE: python\nCODE:\n```\nselectionNode = slicer.mrmlScene.GetNodeByID(\"vtkMRMLSelectionNodeSingleton\")\nselectionNode.SetReferenceActivePlaceNodeClassName(\"vtkMRMLMarkupsFiducialNode\")\ninteractionNode = slicer.mrmlScene.GetNodeByID(\"vtkMRMLInteractionNodeSingleton\")\nplaceModePersistence = 1\ninteractionNode.SetPlaceModePersistence(placeModePersistence)\n# mode 1 is Place, can also be accessed via slicer.vtkMRMLInteractionNode().Place\ninteractionNode.SetCurrentInteractionMode(1)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header File\nDESCRIPTION: This snippet configures the `vtkMRMLConfigure.h` header file using the `configure_file` command. It takes `vtkMRMLConfigure.h.in` as input and generates `vtkMRMLConfigure.h` in the binary directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Core/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset(configure_header_file vtkMRMLConfigure.h)\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/${configure_header_file}.in\n  ${CMAKE_CURRENT_BINARY_DIR}/${configure_header_file}\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring CTest Custom Settings\nDESCRIPTION: This snippet configures the CTest custom settings by copying a template file to the build directory. It uses the `configure_file` command to copy the CMake file.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_30\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(\n  CMake/CTestCustom.cmake.in\n  ${CMAKE_BINARY_DIR}/CTestCustom.cmake\n  COPYONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Disabling Slicer features via command line (Bash)\nDESCRIPTION: This code snippet shows how to disable Slicer features using command-line arguments. It disables the splash screen, ignores the slicerrc file, and disables CLI, loadable, and scripted modules. This is useful for pinpointing issues by starting Slicer with minimal features.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/debugging/tips.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./Slicer --no-splash --ignore-slicerrc --disable-cli-module --disable-loadable-module --disable-scriptedmodule\n```\n\n----------------------------------------\n\nTITLE: Finding Teem Package\nDESCRIPTION: If `MRML_USE_vtkTeem` is enabled, this snippet uses `find_package` to locate the Teem package. The `REQUIRED` keyword ensures that CMake will stop with an error if the package is not found. The Teem use file is then included.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Core/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(MRML_USE_vtkTeem)\n  find_package(Teem REQUIRED)\n  include(${Teem_USE_FILE})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Python Scripted CLI Module\nDESCRIPTION: Uses the `SlicerMacroBuildScriptedCLI` macro to build a Python scripted CLI module named `PyCLIModule4Test`. It specifies the module's folder and indicates that it should not be installed. `SlicerExecutionModel` is a dependency.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCLI/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nSlicerMacroBuildScriptedCLI(\n  NAME PyCLIModule4Test\n  FOLDER \"Core-Base\"\n  NO_INSTALL\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining MOC Source Files\nDESCRIPTION: This snippet defines a list of header files that require moc (Meta-Object Compiler) processing. These header files typically contain Qt-specific macros and classes that need to be preprocessed to generate meta-object code.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_MOC_SRCS\n  qSlicer${MODULE_NAME}ModuleWidgetsPlugin.h\n  qMRML${MODULE_NAME}DisplayNodeWidgetPlugin.h\n  qMRML${MODULE_NAME}FiducialProjectionPropertyWidgetPlugin.h\n  qMRML${MODULE_NAME}InteractionHandleWidgetPlugin.h\n  qMRML${MODULE_NAME}ROIWidgetPlugin.h\n  qSlicerMarkupsPlaceWidgetPlugin.h\n  qSlicerSimpleMarkupsWidgetPlugin.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Combine multiple volumes - Python\nDESCRIPTION: Combines two volumes by subtracting one from the other. It requires the SampleData module to download sample volumes and slicer.util for array operations. The resulting volume is displayed in the slice viewer.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_37\n\nLANGUAGE: Python\nCODE:\n```\nimport SampleData\n[input1Volume, input2Volume] = SampleData.SampleDataLogic().downloadDentalSurgery()\n\nimport slicer.util\na = slicer.util.arrayFromVolume(input1Volume)\nb = slicer.util.arrayFromVolume(input2Volume)\n\n# `a` and `b` are numpy arrays,\n# they can be combined using any numpy array operations\n# to produce the result array `c`\nc = b - a\n\nvolumeNode = slicer.modules.volumes.logic().CloneVolume(input1Volume, \"Difference\")\nslicer.util.updateVolumeFromArray(volumeNode, c)\nsetSliceViewerLayers(background=volumeNode)\n```\n\n----------------------------------------\n\nTITLE: Turn On Slice Intersections (Python)\nDESCRIPTION: This snippet enables the display of slice intersections in all slice views. It iterates through all vtkMRMLSliceDisplayNode instances and sets the IntersectingSlicesVisibility property to 1.  A workaround is included to force a visual update, addressing a known issue.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nsliceDisplayNodes = slicer.util.getNodesByClass(\"vtkMRMLSliceDisplayNode\")\nfor sliceDisplayNode in sliceDisplayNodes:\n  sliceDisplayNode.SetIntersectingSlicesVisibility(1)\n\n# Workaround to force visual update (see https://github.com/Slicer/Slicer/issues/6338)\nsliceNodes = slicer.util.getNodesByClass('vtkMRMLSliceNode')\nfor sliceNode in sliceNodes:\n    sliceNode.Modified()\n```\n\n----------------------------------------\n\nTITLE: vtkITK Module Documentation Generation (Python)\nDESCRIPTION: This snippet uses the ``automodule`` directive to generate documentation for the ``vtkITK`` Python module. It specifies that all members, undocumented members, inherited classes, and imported members should be included in the documentation. This directive is interpreted by Sphinx to automatically extract and format the documentation from the Python module's source code.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/vtkITK.md#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: vtkITK\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :imported-members:\n```\n\n----------------------------------------\n\nTITLE: Conditionally Appending Modules - CMake\nDESCRIPTION: These code blocks conditionally append modules to the `modules` list based on whether certain Slicer build options are enabled. `Slicer_BUILD_EXTENSIONMANAGER_SUPPORT`, `Slicer_USE_NUMPY`, and `Slicer_BUILD_DICOM_SUPPORT` are CMake variables that determine whether the respective modules should be included.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_BUILD_EXTENSIONMANAGER_SUPPORT)\n  list(APPEND modules\n    ExtensionWizard\n    )\nendif()\nif(Slicer_USE_NUMPY)\n  list(APPEND modules\n    Endoscopy\n    )\nendif()\nif(Slicer_BUILD_DICOM_SUPPORT)\n  list(APPEND modules\n    DICOM\n    DICOMLib\n    DICOMPlugins\n    DICOMPatcher\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Add noise to image - Python\nDESCRIPTION: Adds simulated noise to a volume by modifying the underlying NumPy array. Requires the SampleData module to download a sample volume and numpy for generating random noise.  slicer.util.arrayFromVolumeModified is used to signal that the volume's data has changed.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_38\n\nLANGUAGE: Python\nCODE:\n```\nimport SampleData\nimport numpy as np\n\n# Get a sample input volume node\nvolumeNode = SampleData.SampleDataLogic().downloadMRHead()\n\n# Get volume as numpy array and add noise\nvoxels = slicer.util.arrayFromVolume(volumeNode)\nvoxels[:] = voxels + np.random.normal(0.0, 20.0, size=voxels.shape)\nslicer.util.arrayFromVolumeModified(volumeNode)\n```\n\n----------------------------------------\n\nTITLE: Customizing ParameterPack with Overridden Methods in Python\nDESCRIPTION: This code demonstrates how to override the autogenerated methods (`__init__`) in a `@parameterPack` class. The overridden methods will not be automatically generated. In the below example, `__eq__`, `__str__`, and `__repr__` will still be generated\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/parameter_nodes/supported_types.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n@parameterPack\nclass ParameterPack:\n    i: int\n    j: int\n    k: str\n\n    # custom constructor\n    def __init__(self, k):\n        self.i = 1\n        self.j = 4\n        self.k = k\n\n    # default __eq__, __str__, and __repr__ are generated\n```\n\n----------------------------------------\n\nTITLE: Setting Slice Resolution Mode - Slicer Python\nDESCRIPTION: This code snippet demonstrates how to set the slice resolution mode for a slice node in Slicer using Python.  It retrieves a slice node by its ID and then sets the `SliceResolutionMode` to `vtkMRMLSliceNode::SliceResolutionMatchVolumes`. This replicates the functionality of the 'FOV, spacing match Volumes' checkbox in the slice view controller.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/python_faq.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nsliceNode = slicer.mrmlScene.GetNodeByID('vtkMRMLSliceNodeRed')\nsliceNode.SetSliceResolutionMode(slicer.vtkMRMLSliceNode.SliceResolutionMatchVolumes)\n```\n\n----------------------------------------\n\nTITLE: Set MOC Source Files - CMake\nDESCRIPTION: Lists the header files that require the Qt Meta Object Compiler (MOC) to generate meta-object code.  This is necessary for Qt's signals and slots mechanism.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/Widgets/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_MOC_SRCS\n  qMRMLSegmentsTableView.h\n  qMRMLSegmentsModel.h\n  qMRMLSegmentationConversionParametersWidget.h\n  qMRMLSegmentationDisplayNodeWidget.h\n  qMRMLSegmentationFileExportWidget.h\n  qMRMLSegmentationGeometryWidget.h\n  qMRMLSegmentationGeometryDialog.h\n  qMRMLSegmentationRepresentationsListView.h\n  qMRMLSegmentationShow3DButton.h\n  qMRMLSegmentEditorWidget.h\n  qMRMLSortFilterSegmentsProxyModel.h\n  qMRMLDoubleSpinBoxDelegate.h\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Superbuild Option\nDESCRIPTION: This code snippet defines an option to enable or disable the superbuild functionality, which builds the project and its dependencies. The option is enabled by default and marked as advanced, meaning it's not displayed in the standard CMake configuration interface. It also sets a variable for the inner build directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\noption(Slicer_SUPERBUILD \"Build ${PROJECT_NAME} and the projects it depends on.\" ON)\nmark_as_advanced(Slicer_SUPERBUILD)\nset(Slicer_BINARY_INNER_SUBDIR Slicer-build)\n```\n\n----------------------------------------\n\nTITLE: Using Enum with parameterNodeWrapper in Python\nDESCRIPTION: This code demonstrates how to use `enum.Enum` with the `@parameterNodeWrapper` decorator. It defines a simple `Color` enum and a custom parameter node with a `color` parameter of type `Color`.  Enum values are serialized by their name, allowing for associated metadata.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/parameter_nodes/supported_types.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom slicer.parameterNodeWrapper import *\nfrom enum import Enum\n\nclass Color(Enum):\n    RED = '#FF0000'\n    GREEN = '#00FF00'\n    BLUE = '#0000FF'\n\n@parameterNodeWrapper\nclass CustomParameterNode:\n    color: Color\n```\n\n----------------------------------------\n\nTITLE: Setting Python Resources\nDESCRIPTION: This line sets the `MARKUPS_PYTHON_RESOURCES` variable, which is intended to store a list of Python resources associated with the Markups module. However, in the provided snippet, it is initialized as an empty list. It's likely that this variable would later be populated with actual resource files if they existed.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Testing/Python/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(MARKUPS_PYTHON_RESOURCES\n  )\n```\n\n----------------------------------------\n\nTITLE: Set slice viewer layers in Slicer (Python)\nDESCRIPTION: This code demonstrates how to set the background and foreground volumes in the slice viewers, including adjusting the foreground opacity. It showcases both a recommended approach using `slicer.util.setSliceViewerLayers` and a lower-level approach that iterates through slice views. It assumes `mrVolume` and `ctVolume` are existing volume nodes.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_29\n\nLANGUAGE: Python\nCODE:\n```\nslicer.util.setSliceViewerLayers(background=mrVolume, foreground=ctVolume)\n```\n\nLANGUAGE: Python\nCODE:\n```\nlayoutManager = slicer.app.layoutManager()\nfor sliceViewName in layoutManager.sliceViewNames():\n  compositeNode = layoutManager.sliceWidget(sliceViewName).sliceLogic().GetSliceCompositeNode()\n  # Setup background volume\n  compositeNode.SetBackgroundVolumeID(mrVolume.GetID())\n  # Setup foreground volume\n  compositeNode.SetForegroundVolumeID(ctVolume.GetID())\n  # Change opacity\n  compositeNode.SetForegroundOpacity(0.3)\n```\n\n----------------------------------------\n\nTITLE: Project Definition and Variable Setting\nDESCRIPTION: Defines the CMake project, sets up a project-specific kit name, defines the export directive for widget classes, and initializes the include directories based on the dependencies of other modules. The MODULE_NAME variable is assumed to be defined elsewhere.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/Widgets/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(qSlicer${MODULE_NAME}ModuleWidgets)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"Q_SLICER_MODULE_${MODULE_NAME_UPPER}_WIDGETS_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSlicer${MODULE_NAME}ModuleMRML_INCLUDE_DIRS}\n  ${qSlicerTerminologiesModuleWidgets_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: Sets the include directories required to compile the module. This includes source and binary directories of other modules like Logic and MRML modules. It assumes the module names and associated directories have been defined previously.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/MRMLDM/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSlicer${MODULE_NAME}ModuleLogic_SOURCE_DIR}\n  ${vtkSlicer${MODULE_NAME}ModuleLogic_BINARY_DIR}\n  ${vtkSlicer${MODULE_NAME}ModuleMRML_SOURCE_DIR}\n  ${vtkSlicer${MODULE_NAME}ModuleMRML_BINARY_DIR}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Sources\nDESCRIPTION: This snippet aggregates all source files required for the module, including the instantiator source files generated by the object factory configuration, the displayable manager sources, and any helper classes.  These are combined into a single variable for further use.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/MRMLDM/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  ${displayable_manager_instantiator_SRCS}\n  ${displayable_manager_SRCS}\n  vtkMRML${MODULE_NAME}DisplayableManagerHelper.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Displayable Manager Sources\nDESCRIPTION: This snippet defines the source files for the displayable manager. It also uses `SlicerConfigureDisplayableManagerObjectFactory` to generate an instantiator source file. The factory configuration includes the target name, source files, export macro, and export header.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/MRMLDM/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(displayable_manager_SRCS\n  vtkMRML${MODULE_NAME}DisplayableManager.cxx\n  )\n\nSlicerConfigureDisplayableManagerObjectFactory(\n  TARGET_NAME ${KIT}\n  SRCS \"${displayable_manager_SRCS}\"\n  EXPORT_MACRO \"${${KIT}_EXPORT_DIRECTIVE}\"\n  EXPORT_HEADER \"${KIT}Export.h\"\n  OUTPUT_SRCS_VAR displayable_manager_instantiator_SRCS\n  )\n```\n\n----------------------------------------\n\nTITLE: Send DICOM data to PACS using DIMSE (Python)\nDESCRIPTION: This snippet sends DICOM files to a PACS server using the classic DIMSE protocol. It utilizes the DICOMSender class from the DICOMLib module, specifying the file paths, server address, and protocol. The 'delayed' parameter enables asynchronous sending.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/dicom.md#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom DICOMLib import DICOMSender\nsender = DICOMSender(\n  files=['path/to/0.dcm','path/to/1.dcm'],\n  address='dicomserver.co.uk:9999',\n  protocol=\"DIMSE\",\n  delayed=True\n)\nsender.send()\n```\n\n----------------------------------------\n\nTITLE: Creating VTK ITK Vector Reader Executable (CMake)\nDESCRIPTION: This snippet defines the source file for the executable, adds the executable using `ctk_add_executable_utf8`, and links it with the `vtkITK` library. It also sets the target properties to organize the project.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkITK/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(VTKITKTESTVECTORREADER_SOURCE VTKITKVectorReader.cxx)\nctk_add_executable_utf8(VTKITKVectorReader ${VTKITKTESTVECTORREADER_SOURCE})\ntarget_link_libraries(VTKITKVectorReader\n  vtkITK)\n\nset_target_properties(VTKITKVectorReader PROPERTIES FOLDER ${${PROJECT_NAME}_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Finding Git and Patch\nDESCRIPTION: This code snippet finds the Git and Patch executables, which are prerequisites for the build. It uses the `find_package` command to locate these tools and issues a fatal error if Git is not found. The paths to the executables are marked as superbuild variables.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Git)\nif(NOT GIT_FOUND)\n  message(FATAL_ERROR \"error: Install Git and try to re-configure\")\nendif()\nmark_as_superbuild(GIT_EXECUTABLE)\n\nfind_package(Patch REQUIRED)\nmark_as_superbuild(Patch_EXECUTABLE)\n```\n\n----------------------------------------\n\nTITLE: Set Slicer Package Manager URL\nDESCRIPTION: Sets the SLICER_PACKAGE_MANAGER_URL variable, first checking for an environment variable with the same name. If the environment variable is not set, it defaults to \"https://slicer-packages.kitware.com\".\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/CMake/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(SLICER_PACKAGE_MANAGER_URL $ENV{SLICER_PACKAGE_MANAGER_URL})\nif(\"${SLICER_PACKAGE_MANAGER_URL}\" STREQUAL \"\")\n  set(SLICER_PACKAGE_MANAGER_URL \"https://slicer-packages.kitware.com\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Define External Data Target - CMake\nDESCRIPTION: This conditional statement adds an external data target named ${CLP}Data if it matches the specified SEM_DATA_MANAGEMENT_TARGET.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ExecutionModelTour/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Internationalization Support\nDESCRIPTION: This snippet configures internationalization (i18n) support for Slicer. It defines a variable (`Slicer_LANGUAGES`) to specify the supported languages and marks it as advanced and superbuild.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_34\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_BUILD_I18N_SUPPORT)\n  set(Slicer_LANGUAGES\n    \"fr\"\n    CACHE STRING \"Semicolon separated list of supported Slicer languages. Expected format : language[_country] (both en and en_US are supported).\")\n  mark_as_advanced(Slicer_LANGUAGES)\n  mark_as_superbuild(Slicer_LANGUAGES)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Target (CMake)\nDESCRIPTION: This snippet adds an external data target using `ExternalData_add_target`, which is used to download external data required for tests. It only adds the target if `SEM_DATA_MANAGEMENT_TARGET` is equal to `${CLP}Data`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/LabelMapSmoothing/Testing/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Resources CMake\nDESCRIPTION: Lists the Qt resource files (.qrc) that the module uses. These files contain embedded resources like icons and other assets.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_RESOURCES\n  Resources/${KIT}.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (CMake)\nDESCRIPTION: This snippet sets the include directories required to compile the VTK widgets module. It includes the source and binary directories of the MRML module, as well as include directories from other modules that the current module depends on, like the Markups module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/LoadableCustomMarkups/VTKWidgets/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSlicer${MODULE_NAME}ModuleMRML_SOURCE_DIR}\n  ${vtkSlicer${MODULE_NAME}ModuleMRML_BINARY_DIR}\n  ${vtkSlicerMarkupsModuleVTKWidgets_INCLUDE_DIRS}\n  ${vtkSlicerMarkupsModuleVTKWidgets_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Superbuild Script Inclusion CMake\nDESCRIPTION: If `Slicer_SUPERBUILD` is enabled, includes the `SuperBuild.cmake` script from the current source directory and returns, skipping the rest of the configuration. This is used for building Slicer as a superbuild, where dependencies are built alongside the main project.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_52\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_SUPERBUILD)\n  include(\"${CMAKE_CURRENT_SOURCE_DIR}/SuperBuild.cmake\")\n  return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Clear Undo Stack\nDESCRIPTION: The `vtkMRMLScene::ClearUndoStack()` method clears the undo history, discarding all saved states and preventing undo operations.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/mrml_overview.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: QString to/from std::string Conversion\nDESCRIPTION: Illustrates the preferred method for converting between QString and std::string in Slicer, ensuring UTF-8 encoding. The example shows converting both from std::string to QString and from QString to std::string.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/style_guide.md#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nstd::string ss = ...\nQString qs1 = QString::fromUtf8(ss); // this is slightly preferred, as it is very clear and explicit\nQString qs2 = QString(ss); // same result as fromUtf8, acceptable, as it is a bit simpler and used throughout the code base anyway\n```\n\nLANGUAGE: C++\nCODE:\n```\nQString qs = ...\nstd::string ss  = QString::toUtf8(qs);\n```\n\n----------------------------------------\n\nTITLE: Setting Project Name and Export Directive - CMake\nDESCRIPTION: This snippet sets the project name, and the export directive. The export directive controls symbol visibility when building the module, allowing functions and classes to be accessed from other modules. It's crucial for modularity and preventing naming conflicts.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Logic/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleLogic)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_LOGIC_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories in CMake\nDESCRIPTION: Specifies the include directories needed for compiling the module's source files. Includes directories for widgets in both source and binary locations.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SlicerWelcome/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_INCLUDE_DIRECTORIES\n  ${CMAKE_CURRENT_SOURCE_DIR}/Widgets\n  ${CMAKE_CURRENT_BINARY_DIR}/Widgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Directories and Variables\nDESCRIPTION: This snippet sets CMake variables for directory paths (BASELINE, INPUT, TEMP) and the module name (CLP). It also conditionally defines SEM_DATA_MANAGEMENT_TARGET if it is not already defined. SEM_DATA_MANAGEMENT_TARGET is defaulted to ${CLP}Data.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/N4ITKBiasFieldCorrection/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(BASELINE ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Baseline)\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input)\nset(TEMP \"${Slicer_BINARY_DIR}/Testing/Temporary\")\n\nset(CLP ${MODULE_NAME})\n\nif(NOT DEFINED SEM_DATA_MANAGEMENT_TARGET)\n  set(SEM_DATA_MANAGEMENT_TARGET ${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Scripted Modules and Unit Tests (CMake)\nDESCRIPTION: Conditionally builds scripted modules and adds Python unit tests if QtTesting and PYTHONQT are enabled. It uses `slicerMacroBuildScriptedModule` to build the module and `slicer_add_python_unittest` to register the test.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/Testing/Python/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(Slicer_USE_QtTesting AND Slicer_USE_PYTHONQT)\n  slicerMacroBuildScriptedModule(\n    NAME SubjectHierarchyCorePluginsSelfTest\n    SCRIPTS SubjectHierarchyCorePluginsSelfTest.py\n    )\n  slicer_add_python_unittest(SCRIPT SubjectHierarchyCorePluginsSelfTest.py)\n\n  slicerMacroBuildScriptedModule(\n    NAME SubjectHierarchyGenericSelfTest\n    SCRIPTS SubjectHierarchyGenericSelfTest.py\n    )\n  slicer_add_python_unittest(SCRIPT SubjectHierarchyGenericSelfTest.py)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Application Library CMake\nDESCRIPTION: This snippet defines the application library's name (`APPLIB_NAME`) and sets the source files, header files that require moc, UI files, and resources that will be used to build the application library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Applications/SlicerApp/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(APPLIB_NAME \"q${PROJECT_NAME}\")\n\nset(APPLIB_SRCS\n  qSlicerAppMainWindow.cxx\n  qSlicerAppMainWindow.h\n  qSlicerAppMainWindow_p.h\n  )\n\nset(APPLIB_MOC_SRCS\n  qSlicerAppMainWindow.h\n  )\n\nset(APPLIB_UI_SRCS\n  )\n\nset(APPLIB_RESOURCES\n  Resources/SlicerApp.qrc\n  ${qSlicerBaseQTGUI_SOURCE_DIR}/Resources/qSlicerBaseQTGUI.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting MOC Source Files in CMake\nDESCRIPTION: This snippet defines the header files that need to be processed by the Meta-Object Compiler (MOC) for Qt integration. It lists the header files that contain Qt-specific features like signals and slots. It ensures that the necessary meta-object code is generated. No external dependencies are required.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Annotations/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_MOC_SRCS\n  qSlicerAnnotationsModule.h\n  GUI/qSlicerAnnotationModuleSnapShotDialog.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Project Definition and Variable Setting in CMake\nDESCRIPTION: This snippet defines the project name and sets several variables that are used throughout the CMake configuration. It sets the export directive, include directories, source files, and target libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Plots/Logic/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleLogic)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_LOGIC_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  )\n\nset(${KIT}_SRCS\n  vtkSlicer${MODULE_NAME}Logic.cxx\n  vtkSlicer${MODULE_NAME}Logic.h\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  ${ITK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting include directories\nDESCRIPTION: This snippet sets the include directories needed for compiling the SlicerBaseCLI project.  It includes the current source and binary directories, the testing directory, and include directories from ModuleDescriptionParser. `include_directories` makes these directories available to the compiler during the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/CLI/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(Slicer_BaseCLI_INCLUDE_DIRS\n  ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR}\n  ${CMAKE_CURRENT_SOURCE_DIR}/Testing\n  )\nset(include_dirs\n  ${Slicer_BaseCLI_INCLUDE_DIRS}\n  ${ModuleDescriptionParser_INCLUDE_DIRS}\n  )\ninclude_directories(${include_dirs})\n```\n\n----------------------------------------\n\nTITLE: Installing Headers\nDESCRIPTION: Installs the project's header files. It checks if `${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT` is defined and false. If so, it installs all .h files from the source directory and the configured header file to the `include/${PROJECT_NAME}` directory under the Development component.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/IDImageIO/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT)\n  set(${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT ON)\nendif()\nif(NOT ${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT)\n  file(GLOB headers \"${CMAKE_CURRENT_SOURCE_DIR}/*.h\")\n  install(\n    FILES ${headers} ${CMAKE_CURRENT_BINARY_DIR}/${configure_header_file}\n    DESTINATION include/${PROJECT_NAME} COMPONENT Development)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Loadable Module in CMake\nDESCRIPTION: Uses the slicerMacroBuildLoadableModule macro to build the loadable module, passing in the module name, export directive, include directories, source files, and other properties. This macro encapsulates the standard steps required to build a loadable module in Slicer.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SlicerWelcome/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroBuildLoadableModule(\n  NAME ${MODULE_NAME}\n  EXPORT_DIRECTIVE ${MODULE_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${MODULE_INCLUDE_DIRECTORIES}\n  SRCS ${MODULE_SRCS}\n  MOC_SRCS ${MODULE_MOC_SRCS}\n  UI_SRCS ${MODULE_UI_SRCS}\n  TARGET_LIBRARIES ${MODULE_TARGET_LIBRARIES}\n  RESOURCES ${MODULE_RESOURCES}\n  WITH_GENERIC_TESTS\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries in CMake\nDESCRIPTION: This snippet sets the target libraries that the VTK slicer module logic depends on, including the MRML module and ITK libraries. It also conditionally appends `qSlicerBaseQTCLI` to the `MODULE_TARGET_LIBRARIES` if CLI support is enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/GeneralizedReformat/Logic/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleMRML\n  ${ITK_LIBRARIES}\n  )\nif(Slicer_BUILD_CLI_SUPPORT)\n  list(APPEND MODULE_TARGET_LIBRARIES\n    qSlicerBaseQTCLI # For vtkSlicerCLIModuleLogic\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing the Library\nDESCRIPTION: This snippet installs the built library to the specified destinations based on the target type. The `RUNTIME` destination is for executables, `LIBRARY` is for shared libraries, and `ARCHIVE` is for static libraries. The destinations are defined by the variables `Slicer_INSTALL_BIN_DIR` and `Slicer_INSTALL_LIB_DIR`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/Logic/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${lib_name}\n  RUNTIME DESTINATION ${Slicer_INSTALL_BIN_DIR} COMPONENT RuntimeLibraries\n  LIBRARY DESTINATION ${Slicer_INSTALL_LIB_DIR} COMPONENT RuntimeLibraries\n  ARCHIVE DESTINATION ${Slicer_INSTALL_LIB_DIR} COMPONENT Development\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Include Directories\nDESCRIPTION: This snippet defines the include directories for the module. These directories contain the header files that are needed to compile the module's source code. It specifies directories containing headers for logic, widgets, and plugins.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Plots/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_INCLUDE_DIRECTORIES\n  ${CMAKE_CURRENT_SOURCE_DIR}/Logic\n  ${CMAKE_CURRENT_BINARY_DIR}/Logic\n  ${CMAKE_CURRENT_SOURCE_DIR}/Widgets\n  ${CMAKE_CURRENT_BINARY_DIR}/Widgets\n  ${CMAKE_CURRENT_SOURCE_DIR}/SubjectHierarchyPlugins\n  ${CMAKE_CURRENT_BINARY_DIR}/SubjectHierarchyPlugins\n  ${qSlicerSubjectHierarchyModuleWidgets_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Set Include Directories\nDESCRIPTION: Sets the include directories for the vtkSegmentationCore library. This includes the current source and binary directories, as well as the include directories for Slicer libs and vtkAddon.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkSegmentationCore/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(vtkSegmentationCore_INCLUDE_DIRS\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  ${CMAKE_CURRENT_BINARY_DIR}\n  ${Slicer_Libs_INCLUDE_DIRS}\n  ${vtkAddon_INCLUDE_DIRS}\n  CACHE INTERNAL \"\" FORCE\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name in CMake\nDESCRIPTION: This snippet sets the module name using the `set` command in CMake. The `MODULE_NAME` variable is incorporated into the module name, allowing for flexible module naming conventions.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/Loadable/Testing/Cxx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT qSlicer${MODULE_NAME}Module)\n```\n\n----------------------------------------\n\nTITLE: Toggle Sphere Brush Keyboard Shortcut\nDESCRIPTION: This snippet creates a keyboard shortcut ('s') to toggle the sphere brush for paint and erase effects in the segment editor. It gets the segment editor widget, finds the paint effect, and toggles the BrushSphere parameter.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndef toggleSphereBrush():\n  segmentEditorWidget = slicer.modules.segmenteditor.widgetRepresentation().self().editor\n  paintEffect = segmentEditorWidget.effectByName(\"Paint\")\n  isSphere = paintEffect.integerParameter(\"BrushSphere\")\n  # BrushSphere is \"common\" parameter (shared between paint and erase)\n  paintEffect.setCommonParameter(\"BrushSphere\", 0 if isSphere else 1)\n\nshortcut = qt.QShortcut(slicer.util.mainWindow())\nshortcut.setKey(qt.QKeySequence(\"s\"))\nshortcut.connect(\"activated()\", toggleSphereBrush)\n```\n\n----------------------------------------\n\nTITLE: UI and Resource File Definitions\nDESCRIPTION: This snippet defines the UI files and resources for the module. Currently, only the resource file is defined.  UI files define the graphical user interface elements.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/EditorEffects/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_UI_SRCS\n  )\n\nset(${KIT}_RESOURCES\n  Resources/${KIT}.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Including Directories\nDESCRIPTION: This CMake command adds the include directories for vtkTeem before other include directories. This ensures that the correct headers are found during compilation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ProbeVolumeWithModel/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(BEFORE ${vtkTeem_INCLUDE_DIRS})\n```\n\n----------------------------------------\n\nTITLE: Building the CLI using SEMMacroBuildCLI\nDESCRIPTION: This snippet uses the SEMMacroBuildCLI macro to build the CLI for the MergeModels module. It defines the name, logo header, target libraries, and include directories.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MergeModels/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/NAMICLogo.h\n  TARGET_LIBRARIES ${VTK_LIBRARIES} MRMLCore\n  INCLUDE_DIRECTORIES\n    ${MRMLCore_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Export Directive in CMake\nDESCRIPTION: Defines the export directive for the module, which is used to control the visibility of symbols when building shared libraries. It ensures proper linkage and avoids symbol collisions.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_EXPORT_DIRECTIVE \"Q_SLICER_QTMODULES_${MODULE_NAME_UPPER}_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name Variable\nDESCRIPTION: This snippet defines a CMake variable to store the module name, which is later used for defining target names and properties. It also sets a variable for the data management target if it's not already defined.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleScalarVolume/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(CLP ${MODULE_NAME})\n\nif(NOT DEFINED SEM_DATA_MANAGEMENT_TARGET)\n  set(SEM_DATA_MANAGEMENT_TARGET ${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: UI Source Files Definition\nDESCRIPTION: Defines the list of Qt Designer UI files. These files define the graphical user interface elements of the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_UI_SRCS\n  )\n```\n\n----------------------------------------\n\nTITLE: Python Wrapping Configuration CMake\nDESCRIPTION: This snippet handles Python wrapping for the library if VTK is configured with Python wrapping enabled. It includes the `vtkMacroKitPythonWrap` macro, configures Python wrapping using the macro, and exports the Python target.  It also configures the folder property for python module targets.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Logic/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nif(VTK_WRAP_PYTHON)\n  include(vtkMacroKitPythonWrap)\n\n  set(_python_wrapped_libraries)\n\n  vtkMacroKitPythonWrap(\n    KIT_NAME ${lib_name}\n    KIT_SRCS ${MRMLLogic_SRCS}\n    KIT_PYTHON_LIBRARIES ${_python_wrapped_libraries}\n    KIT_INSTALL_BIN_DIR ${${PROJECT_NAME}_INSTALL_BIN_DIR}\n    KIT_INSTALL_LIB_DIR ${${PROJECT_NAME}_INSTALL_LIB_DIR}\n    )\n  # Export target\n  export(TARGETS ${lib_name}Python APPEND FILE ${${PROJECT_NAME}_EXPORT_FILE})\n  # Folder\n  if(NOT \"${${PROJECT_NAME}_FOLDER}\" STREQUAL \"\")\n    set_target_properties(${lib_name}Python PROPERTIES FOLDER ${${PROJECT_NAME}_FOLDER})\n    if(TARGET ${lib_name}Hierarchy)\n      set_target_properties(${lib_name}Hierarchy PROPERTIES FOLDER ${${PROJECT_NAME}_FOLDER})\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding ITK with Required Components\nDESCRIPTION: This snippet finds the ITK library with specified components (ITKCommon, ITKIOImageBase). It also sets a variable to disable the IO factory register manager depending on the ITK version.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/RobustStatisticsSegmenter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKCommon\n  ITKIOImageBase\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Specifies the minimum required CMake version to build the project.  CMake will error out if the version installed is older than the one specified. The FATAL_ERROR option ensures that CMake will exit immediately if the version check fails.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Extensions/Default/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16.3...3.19.7 FATAL_ERROR)\n```\n\n----------------------------------------\n\nTITLE: Setting Slicer Version Tweak - CMake\nDESCRIPTION: This snippet sets the `Slicer_VERSION_TWEAK_OR_DEV` variable based on whether the `Slicer_RELEASE_TYPE` is \"Stable\". If it is stable, it sets the variable to \"0\"; otherwise, it sets it to \"\\\"dev0\\\"\". This variable is likely used in versioning the Slicer application.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Scripts/SlicerWizard/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(\"${Slicer_RELEASE_TYPE}\" STREQUAL \"Stable\")\n  set(Slicer_VERSION_TWEAK_OR_DEV \"0\")\nelse()\n  set(Slicer_VERSION_TWEAK_OR_DEV \"\\\"dev0\\\"\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Add Cxx subdirectory\nDESCRIPTION: This CMake command adds the 'Cxx' subdirectory to the build process. This indicates that the 'Cxx' directory contains CMakeLists.txt file which defines how to build C++ components.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Widgets/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n#add_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Setting Export Directive CMake\nDESCRIPTION: Defines the export directive for the module, which is used to control symbol visibility when building shared libraries. The `Q_SLICER_QTMODULES_${MODULE_NAME_UPPER}_EXPORT` macro is likely used to decorate classes and functions that should be exported from the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/ViewControllers/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_EXPORT_DIRECTIVE \"Q_SLICER_QTMODULES_${MODULE_NAME_UPPER}_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Testing Subdirectory in CMake\nDESCRIPTION: This snippet conditionally adds a testing subdirectory to the build process if the `BUILD_TESTING` variable is enabled. It allows for the inclusion of unit tests to ensure the module's functionality and stability.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/Logic/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Compiling and Installing SegmentStatisticsPlugins Python Scripts\nDESCRIPTION: This CMake macro compiles the Python scripts defined in SegmentStatisticsPlugins_PYTHON_SCRIPTS and resources defined in SegmentStatisticsPlugins_PYTHON_RESOURCES for the SegmentStatisticsPlugins module. It specifies the target name, source scripts, resources, destination directory within the build directory, installation directory, and indicates that no installation subdirectory should be used.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/SegmentStatistics/SegmentStatisticsPlugins/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nctkMacroCompilePythonScript(\n  TARGET_NAME SegmentStatisticsPlugins\n  SCRIPTS \"${SegmentStatisticsPlugins_PYTHON_SCRIPTS}\"\n  RESOURCES \"${SegmentStatisticsPlugins_PYTHON_RESOURCES}\"\n  DESTINATION_DIR ${Slicer_BINARY_DIR}/${Slicer_QTSCRIPTEDMODULES_LIB_DIR}/SegmentStatisticsPlugins\n  INSTALL_DIR ${Slicer_INSTALL_QTSCRIPTEDMODULES_LIB_DIR}/SegmentStatisticsPlugins\n  NO_INSTALL_SUBDIR\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking Test Executable in CMake\nDESCRIPTION: This section creates a test executable using `ctk_add_executable_utf8`, links the necessary libraries using `target_link_libraries`, and sets the target properties such as labels and folder.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ThresholdScalarVolume/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nctk_add_executable_utf8(${CLP}Test ${CLP}Test.cxx)\ntarget_link_libraries(${CLP}Test ${CLP}Lib ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES})\nset_target_properties(${CLP}Test PROPERTIES LABELS ${CLP})\nset_target_properties(${CLP}Test PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Set BUILD_SHARED_LIBS Option\nDESCRIPTION: This snippet defines a CMake option to control whether to build shared libraries or static libraries. If the BUILD_SHARED_LIBS variable is not already defined, it sets it to ON by default.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/RemoteIO/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED BUILD_SHARED_LIBS)\n  option(BUILD_SHARED_LIBS \"Build with shared libraries.\" ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Variables for Input Data Paths\nDESCRIPTION: This snippet defines CMake variables that store the paths to input data directories. These variables are used later in the file to specify the location of input data files for the tests. ResampleDTIVolume_INPUT points to the data directory within the module's source, while INPUT refers to a general input data directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleScalarVectorDWIVolume/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(ResampleDTIVolume_INPUT ${ResampleDTIVolume_SOURCE_DIR}/Data/Input)\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input)\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory (CMake)\nDESCRIPTION: Adds the `Testing` subdirectory to the build if `BUILD_TESTING` is enabled.  This integrates the project's testing infrastructure into the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_78\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding ITK with Specific Components in CMake\nDESCRIPTION: This snippet finds the ITK library with specific components (ITKIOImageBase, ITKMathematicalMorphology). It sets the required ITK components, finds the package, and then includes the ITK_USE_FILE to use the ITK library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GrayscaleGrindPeakImageFilter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKIOImageBase\n  ITKMathematicalMorphology\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Setting Extension Meta-Information\nDESCRIPTION: These CMake commands set meta-information about the extension, such as homepage, contributors, description, icon URL, screenshot URLs, and dependencies. This information is used for documentation and discovery of the extension.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/ScriptedLoadableExtensionTemplate/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(EXTENSION_HOMEPAGE \"https://www.slicer.org/wiki/Documentation/Nightly/Extensions/ScriptedLoadableExtensionTemplate\")\nset(EXTENSION_CONTRIBUTORS \"John Doe (AnyWare Corp.)\")\nset(EXTENSION_DESCRIPTION \"This is an example of a simple extension\")\nset(EXTENSION_ICONURL \"https://www.example.com/Slicer/Extensions/ScriptedLoadableExtensionTemplate.png\")\nset(EXTENSION_SCREENSHOTURLS \"https://www.example.com/Slicer/Extensions/ScriptedLoadableExtensionTemplate/Screenshots/1.png\")\nset(EXTENSION_DEPENDS \"NA\") # Specified as a list or \"NA\" if no dependencies\n```\n\n----------------------------------------\n\nTITLE: Building Loadable Module CMake\nDESCRIPTION: Invokes the `slicerMacroBuildLoadableModule` macro to build the module. This macro automates the process of building a Slicer loadable module, using the variables defined earlier in the file. The macro uses all the definitions from the previous set commands.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/ViewControllers/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroBuildLoadableModule(\n  NAME ${MODULE_NAME}\n  EXPORT_DIRECTIVE ${MODULE_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${MODULE_INCLUDE_DIRECTORIES}\n  SRCS ${MODULE_SRCS}\n  MOC_SRCS ${MODULE_MOC_SRCS}\n  UI_SRCS ${MODULE_UI_SRCS}\n  TARGET_LIBRARIES ${MODULE_TARGET_LIBRARIES}\n  RESOURCES ${MODULE_RESOURCES}\n  WITH_GENERIC_TESTS\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Project Name and Export Directive (CMake)\nDESCRIPTION: This snippet initializes the project name and defines the export directive for the VTK widgets module. The export directive controls symbol visibility when building shared libraries, ensuring that only necessary symbols are exposed.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/LoadableCustomMarkups/VTKWidgets/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleVTKWidgets)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_VTKWIDGETS_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory (CMake)\nDESCRIPTION: This snippet adds a subdirectory named \"Testing\" to the build process if testing is enabled (`BUILD_TESTING`). This allows for the inclusion of unit tests and other testing infrastructure for the MRMLCore library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Core/CMakeLists.txt#_snippet_25\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic C++ Module Tests\nDESCRIPTION: Configures generic C++ module tests using the `SlicerMacroConfigureGenericCxxModuleTests` macro. It takes a list of module names and output variables for source files and test names. `GENERIC_CXX_MODULE_TEST_SKIP_DEPENDENCIES` is defined to control dependency checking.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Core/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DGENERIC_CXX_MODULE_TEST_SKIP_DEPENDENCIES)\nSlicerMacroConfigureGenericCxxModuleTests(\"${modulenames}\" KIT_TEST_SRCS KIT_TEST_NAMES KIT_TEST_NAMES_CXX)\n```\n\n----------------------------------------\n\nTITLE: Defining Test Sources with CMake\nDESCRIPTION: This snippet defines the source files for the test suite using the `set` command in CMake. It specifies the C++ files containing the test cases for the module. The variable KIT_TEST_SRCS stores the list of source files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/Testing/Cxx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT_TEST_SRCS\n  qSlicer${MODULE_NAME}ModuleWidgetTest.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Additional Module Paths in Slicer on Startup\nDESCRIPTION: This command-line argument allows you to start Slicer with additional module paths, enabling the loading of CLIs from the specified directory. Replace `C:\\path\\to\\lib\\Slicer-X.Y\\cli-modules` with the actual path to your CLI modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/settings.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nSlicer.exe --additional-module-paths C:\\path\\to\\lib\\Slicer-X.Y\\cli-modules\n```\n\n----------------------------------------\n\nTITLE: Module Build Macro Invocation\nDESCRIPTION: This snippet invokes the `SlicerMacroBuildModuleQtLibrary` macro, which handles the actual building of the Qt library for the module. It passes in all the previously defined variables as arguments to configure the build process, including include directories, source files, and target libraries.  It specifies the export directive and a folder to place the generated library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/EditorEffects/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleQtLibrary(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  FOLDER \"Module-${MODULE_NAME}\"\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  UI_SRCS ${${KIT}_UI_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  RESOURCES ${${KIT}_RESOURCES}\n  WRAP_PYTHONQT\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory for Extension Module\nDESCRIPTION: This CMake snippet adds a subdirectory containing the extension's module. `add_subdirectory` instructs CMake to process the CMakeLists.txt file within the specified subdirectory (ScriptedSegmentEditorEffectModuleTemplate), allowing the module to be built as part of the overall extension project.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/ScriptedSegmentEditorEffectExtensionTemplate/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(ScriptedSegmentEditorEffectModuleTemplate)\n```\n\n----------------------------------------\n\nTITLE: Slicer Module Widget Build Macro (CMake)\nDESCRIPTION: This snippet uses the SlicerMacroBuildModuleWidgets macro to build the module, passing the defined variables as parameters. This macro handles the compilation, linking, and installation of the module's widgets. It relies on the variables defined in the previous snippet to know what to build.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Terminologies/Widgets/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleWidgets(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  UI_SRCS ${${KIT}_UI_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  RESOURCES ${${KIT}_RESOURCES}\n  WRAP_PYTHONQT\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries for Linking in CMake\nDESCRIPTION: This snippet specifies the target libraries that the module needs to link against. It ensures that the necessary dependencies, such as the MRML module, are available during the linking phase. The module utilizes functionality within vtkSlicer${MODULE_NAME}ModuleMRML.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/Logic/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleMRML\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Module Name Variable (CMake)\nDESCRIPTION: This snippet sets the module name variable CLP to the value of MODULE_NAME. This helps in reusing the module name in other parts of the script and the script also checks for a defined data management target and defaults it using CLP.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/LabelMapSmoothing/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(CLP ${MODULE_NAME})\n\nif(NOT DEFINED SEM_DATA_MANAGEMENT_TARGET)\n  set(SEM_DATA_MANAGEMENT_TARGET ${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Test Driver\nDESCRIPTION: This snippet sets the `CMAKE_TESTDRIVER_BEFORE_TESTMAIN` variable to include a command for enabling memory leak detection before each test. The command `DEBUG_LEAKS_ENABLE_EXIT_ERROR()` is assumed to handle the leak detection.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTApp/Testing/Cxx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_TESTDRIVER_BEFORE_TESTMAIN \"DEBUG_LEAKS_ENABLE_EXIT_ERROR();\" )\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories CMake\nDESCRIPTION: This snippet defines the include directories required for compiling the MRMLWidgets library. It includes the current source directory, the current binary directory, and the include directories of dependent libraries like MRMLCore, MRMLLogic, and MRMLDisplayableManager.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nset(include_dirs\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  ${CMAKE_CURRENT_BINARY_DIR}\n  ${MRMLCore_INCLUDE_DIRS}\n  ${MRMLLogic_INCLUDE_DIRS}\n  ${MRMLDisplayableManager_INCLUDE_DIRS}\n  )\ninclude_directories(${include_dirs})\n```\n\n----------------------------------------\n\nTITLE: Configure Test Driver\nDESCRIPTION: This snippet configures the C++ test driver for the Slicer module using the `slicerMacroConfigureModuleCxxTestDriver` macro.  It sets the name, sources, and enables checks for VTK debug leaks and error output.  It depends on the `KIT` and `KIT_TEST_SRCS` variables being defined.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/LoadableExtensionTemplate/LoadableModuleTemplate/Testing/Cxx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroConfigureModuleCxxTestDriver(\n  NAME ${KIT}\n  SOURCES ${KIT_TEST_SRCS}\n  WITH_VTK_DEBUG_LEAKS_CHECK\n  WITH_VTK_ERROR_OUTPUT_CHECK\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Test Source List (CMake)\nDESCRIPTION: This snippet defines a list of source files to be used for building the vtkSegmentationCore tests. The create_test_sourcelist macro populates the Tests variable with the specified C++ source files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkSegmentationCore/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT vtkSegmentationCore)\n\ncreate_test_sourcelist(Tests ${KIT}CxxTests.cxx\n  vtkSegmentationTest1.cxx\n  vtkSegmentationTest2.cxx\n  vtkSegmentationHistoryTest1.cxx\n  vtkSegmentationConverterTest1.cxx\n  vtkClosedSurfaceToFractionalLabelMapConversionTest1.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target\nDESCRIPTION: Adds an executable target named '${CLP}Test' using ctk_add_executable_utf8, linking it to relevant libraries and setting properties. It depends on the module library. It links against the module library (${CLP}Lib), the module's target libraries (${${MODULE_NAME}_TARGET_LIBRARIES}), and extra libraries for the Slicer Execution Model (${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES}).\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/PETStandardUptakeValueComputation/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nctk_add_executable_utf8(${CLP}Test ${CLP}Test.cxx)\nadd_dependencies(${CLP}Test ${CLP})\ntarget_link_libraries(${CLP}Test\n  ${CLP}Lib\n  ${${MODULE_NAME}_TARGET_LIBRARIES}\n  ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES}\n  )\nset_target_properties(${CLP}Test PROPERTIES LABELS ${CLP})\nset_target_properties(${CLP}Test PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files and Target Libraries in CMake\nDESCRIPTION: This snippet aggregates all source files, including the generated instantiator sources and the displayable manager sources, into a single variable. It also defines the target libraries that the module depends on, including MRML libraries and other Slicer modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/MRMLDM/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  ${displayable_manager_instantiator_SRCS}\n  ${displayable_manager_SRCS}\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  ${MRML_LIBRARIES}\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  vtkSlicer${MODULE_NAME}ModuleMRML\n  vtkSlicer${MODULE_NAME}ModuleVTKWidgets\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Test Driver\nDESCRIPTION: This snippet uses the `slicerMacroConfigureModuleCxxTestDriver` macro to configure a C++ test driver. It sets the NAME to `${KIT}`, the SOURCES to `${KIT_TEST_SRCS}`, and enables VTK debug leak checks and error output checks. The macro likely resides in Slicer's CMake infrastructure.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperLoadableModuleTemplate/Testing/Cxx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nslicerMacroConfigureModuleCxxTestDriver(\n  NAME ${KIT}\n  SOURCES ${KIT_TEST_SRCS}\n  WITH_VTK_DEBUG_LEAKS_CHECK\n  WITH_VTK_ERROR_OUTPUT_CHECK\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting include directories\nDESCRIPTION: This snippet sets the include directories for the project. It includes the current source directory, the current binary directory, and the include directories for MRMLCore and ModuleDescriptionParser.  These directories are added to the compiler's include path.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/CLI/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(include_dirs\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  ${CMAKE_CURRENT_BINARY_DIR}\n  ${MRMLCore_INCLUDE_DIRS}\n  ${ModuleDescriptionParser_INCLUDE_DIRS}\n  )\ninclude_directories(${include_dirs})\n```\n\n----------------------------------------\n\nTITLE: Platform Checks\nDESCRIPTION: This code snippet includes the `SlicerBlockPlatformCheck` module, which likely performs platform-specific checks and potentially blocks the build on unsupported platforms. The `Slicer_PLATFORM_CHECK` variable is marked as superbuild, indicating that its value is relevant to the superbuild configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(SlicerBlockPlatformCheck)\nmark_as_superbuild(Slicer_PLATFORM_CHECK:BOOL)\n```\n\n----------------------------------------\n\nTITLE: Checking VTK Python wrapping\nDESCRIPTION: This snippet checks if `Slicer_USE_PYTHONQT` is enabled and if `VTK_WRAP_PYTHON` is disabled. If both conditions are true, it generates a fatal error, indicating that VTK needs to be configured with Python wrapping since PythonQt support is enabled in Slicer.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/CLI/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_USE_PYTHONQT AND NOT VTK_WRAP_PYTHON)\n  message(FATAL_ERROR \"Since Slicer_USE_PYTHONQT is ON, VTK_WRAP_PYTHON is expected to be ON. \"\n                      \"Re-configure VTK with python wrapping.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building CLI with SEMMacroBuildCLI\nDESCRIPTION: This snippet uses the SEMMacroBuildCLI macro to configure the build process for the GrayscaleModelMaker command-line interface (CLI). It specifies the module name, logo header, target libraries, include directories, and sets the build to executable-only.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GrayscaleModelMaker/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/NAMICLogo.h\n  TARGET_LIBRARIES ${${MODULE_NAME}_TARGET_LIBRARIES}\n  INCLUDE_DIRECTORIES\n    ${vtkITK_INCLUDE_DIRS}\n    ${MRMLCore_INCLUDE_DIRS}\n  EXECUTABLE_ONLY\n  )\n```\n\n----------------------------------------\n\nTITLE: Cloning a Node (Python)\nDESCRIPTION: Clones a node that appears in the Subject Hierarchy in the Data module. The code first downloads a sample data node, then clones it. Requires the `SampleData` module and `slicer`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Get a node from SampleData that we will clone\nimport SampleData\nnodeToClone = SampleData.SampleDataLogic().downloadMRHead()\n\n# Clone the node\nshNode = slicer.vtkMRMLSubjectHierarchyNode.GetSubjectHierarchyNode(slicer.mrmlScene)\nitemIDToClone = shNode.GetItemByDataNode(nodeToClone)\nclonedItemID = slicer.modules.subjecthierarchy.logic().CloneSubjectHierarchyItem(shNode, itemIDToClone)\nclonedNode = shNode.GetItemDataNode(clonedItemID)\n```\n\n----------------------------------------\n\nTITLE: Conditional External Data Target Addition in CMake\nDESCRIPTION: This CMake snippet conditionally adds an external data target for the specified module if the `SEM_DATA_MANAGEMENT_TARGET` variable is equal to `${CLP}Data`. This is used for managing external data dependencies within the Slicer build system. It relies on the `ExternalData_add_target` function to add the target.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ProbeVolumeWithModel/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Data Target\nDESCRIPTION: Conditionally adds a data target named '${CLP}Data' using ExternalData_add_target if SEM_DATA_MANAGEMENT_TARGET is equal to '${CLP}Data'. This creates a target for managing external data required by the module. This portion of the code ensures that the target for data management is created if it hasn't already been managed.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/PETStandardUptakeValueComputation/Testing/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting MOC Source Files CMake\nDESCRIPTION: Specifies the header files that need to be processed by the Qt Meta Object Compiler (moc). The moc tool generates meta-object code that is used to implement Qt's signals and slots mechanism. The file names are based on the MODULE_NAME.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/ViewControllers/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_MOC_SRCS\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing Presets File\nDESCRIPTION: This snippet configures and installs the presets.xml file to the correct location within the Slicer application's directory structure. It ensures that the presets are available at runtime.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/Logic/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/../Resources/presets.xml\n  ${CMAKE_BINARY_DIR}/${Slicer_QTLOADABLEMODULES_SHARE_DIR}/${MODULE_NAME}/presets.xml\n  COPYONLY)\n\ninstall(\n  FILES ${CMAKE_BINARY_DIR}/${Slicer_QTLOADABLEMODULES_SHARE_DIR}/${MODULE_NAME}/presets.xml\n  DESTINATION ${Slicer_INSTALL_QTLOADABLEMODULES_SHARE_DIR}/${MODULE_NAME} COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Test Driver with CMake Macro\nDESCRIPTION: Configures a C++ test driver using the slicerMacroConfigureModuleCxxTestDriver macro. This macro sets up the necessary environment for running C++ tests, including specifying the module name, source files, and enabling debug leak and error output checks.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/Testing/Cxx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nslicerMacroConfigureModuleCxxTestDriver(\n  NAME ${KIT}\n  SOURCES ${KIT_TEST_SRCS}\n  WITH_VTK_DEBUG_LEAKS_CHECK\n  WITH_VTK_ERROR_OUTPUT_CHECK\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Python Unit Test\nDESCRIPTION: Registers a Python unittest for the module. The test script is specified, and Slicer arguments are passed to disable CLI modules during the test execution. The `slicer_add_python_unittest` macro creates a custom target in CMake to run the specified Python test script.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/SegmentEditor/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nslicer_add_python_unittest(\n  SCRIPT ${MODULE_NAME}.py\n  # TODO: slicer_add_python_unittest should take care of adding the additional module paths\n  SLICER_ARGS\n    --disable-cli-modules\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Module Logic Using Macro (CMake)\nDESCRIPTION: This snippet uses a custom CMake macro `SlicerMacroBuildModuleLogic` to build the module logic. It passes the module's name, export directive, include directories, source files, and target libraries as arguments to the macro.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/Logic/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nSlicerMacroBuildModuleLogic(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries\nDESCRIPTION: Defines the list of target libraries that the module depends on. This ensures that the necessary libraries are linked when building the module. The `MODULE_TARGET_LIBRARIES` variable lists the names of these libraries, which are typically defined in other CMakeLists.txt files within the project.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Units/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  qSlicer${MODULE_NAME}ModuleWidgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Add Slicer Setting Variable Message Test\nDESCRIPTION: This snippet adds a CMake script test using the `add_cmakescript_test` macro. It specifies the test name as `slicer_setting_variable_message_test` and the path to the corresponding CMake script as `CMake/UseSlicerMacros.cmake`. This test likely verifies the correct usage of Slicer-specific CMake macros within the specified script.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMake/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_cmakescript_test(\n  slicer_setting_variable_message_test\n  CMake/UseSlicerMacros.cmake)\n```\n\n----------------------------------------\n\nTITLE: itkTestMainExtended Scalar Test - CMake\nDESCRIPTION: Test to ensure that extending itkTestMainExtended.h to work with DTI images did not break compatibility with scalar images.  A scalar image is compared to itself.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleDTIVolume/Testing/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nset(testname itkTestMainExtendedScalarTest)\nset(TransformedImage7 ${TEMP}/dt-helix-transformed7.nrrd )\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n --compare\n   DATA{${BASELINE}/Brain_slice.nrrd}\n   DATA{${BASELINE}/Brain_slice.nrrd}\n  ModuleEntryPoint\n    --interpolation nn\n    ${OriginalImage}\n    ${TransformedImage7}\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Setting Module Source Files - CMake\nDESCRIPTION: This section defines the source files (.cxx and .h) that make up the Terminologies module. These files include the module's main class, module widget, and reader class. These are core components providing the module's functionality.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Terminologies/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_SRCS\n  qSlicer${MODULE_NAME}Module.cxx\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.cxx\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  qSlicer${MODULE_NAME}Reader.cxx\n  qSlicer${MODULE_NAME}Reader.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Qt Designer Plugin Using Macro\nDESCRIPTION: This snippet uses a custom CMake macro (`ctkMacroBuildQtDesignerPlugin`) to build the Qt Designer plugin.  It takes the kit name, export directive, folder name, source files, MOC source files, and target libraries as arguments.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nctkMacroBuildQtDesignerPlugin(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT}\n  FOLDER \"Module-${MODULE_NAME}\"\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Conditional Python Manager Sources (CMake)\nDESCRIPTION: This snippet conditionally includes source files and MOC sources for the Python manager, only when `Slicer_USE_PYTHONQT` is enabled. It adds `qSlicerPythonManager.cxx` and `qSlicerPythonManager.h` to the source list and the MOC source list.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTGUI/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\n# Python wrap\nif(Slicer_USE_PYTHONQT)\n\n  # Sources\n  list(APPEND KIT_SRCS\n    qSlicerPythonManager.cxx\n    qSlicerPythonManager.h\n    )\n\n  # Headers that should run through moc\n  list(APPEND KIT_MOC_SRCS\n    qSlicerPythonManager.h\n    )\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Module Python Resources (CMake)\nDESCRIPTION: This snippet specifies the resources associated with the module, including icons and UI definition files. These resources are typically used to define the module's user interface and visual elements within the Slicer application.  ${MODULE_NAME} is VectorToScalarVolume.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/VectorToScalarVolume/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_PYTHON_RESOURCES\n  Resources/Icons/${MODULE_NAME}.svg\n  Resources/UI/${MODULE_NAME}.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Displayable Manager Object Factory\nDESCRIPTION: This snippet configures a displayable manager object factory using the `SlicerConfigureDisplayableManagerObjectFactory` macro. It specifies the target name, source files, and output variable for the generated source files. Requires the `DisplayableManagerTest_SRCS` variable to be defined.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/DisplayableManager/Testing/Cxx/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Create the instantiator for DisplayableManager classes.\nSlicerConfigureDisplayableManagerObjectFactory(\n  TARGET_NAME ${KIT}CxxTests\n  SRCS \"${DisplayableManagerTest_SRCS}\"\n  NO_EXPORT\n  OUTPUT_SRCS_VAR DisplayableManagerInstantiatorTest_SRCS\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Target Libraries (CMake)\nDESCRIPTION: This snippet defines the target libraries that the qSlicerBaseQTGUI library depends on.  These libraries provide additional functionality, such as MRML widgets, scripting support, and DICOM support.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTGUI/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# Additional Target libraries (Qt libs already included)\nset(KIT_target_libraries\n  qSlicerBaseQTCore\n  qMRMLWidgets\n  )\n\n# Python wrap\nif(Slicer_USE_PYTHONQT)\n  list(APPEND KIT_target_libraries\n    CTKScriptingPythonWidgets\n    )\nendif()\n\n# DICOM\nif(Slicer_BUILD_DICOM_SUPPORT)\n  list(APPEND KIT_target_libraries\n    CTKDICOMWidgets\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Include Directories\nDESCRIPTION: This section defines include directories that the compiler will search for header files. It includes the current source directory, subdirectories for Qt core components (source and build), ensuring that all necessary headers are available during compilation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  ${CMAKE_CURRENT_SOURCE_DIR}/QTCore\n  ${CMAKE_CURRENT_BINARY_DIR}/QTCore\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Headers for MOC\nDESCRIPTION: This snippet defines the header files that need to be processed by the Meta-Object Compiler (moc). It sets the `${KIT}_MOC_SRCS` variable to a list of header files, including \"qSlicerStylePlugin.h\". Moc generates C++ code that provides meta-information for Qt's object model.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTGUI/StylePlugins/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_MOC_SRCS\n  qSlicerStylePlugin.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Building CLI with SEMMacroBuildCLI\nDESCRIPTION: This snippet utilizes the SEMMacroBuildCLI macro to build the command-line interface (CLI) for the MedianImageFilter module. It sets the module name, logo header, and target libraries. This macro simplifies the process of creating a CLI for Slicer modules based on ITK.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MedianImageFilter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/ITKLogo.h\n  TARGET_LIBRARIES ${ITK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Including SlicerGenerateSlicerConfig CMake module\nDESCRIPTION: This CMake code snippet includes the `SlicerGenerateSlicerConfig.cmake` module from the source directory. This module is responsible for generating the `SlicerConfig.cmake` file, which contains configuration settings for Slicer. The module is included from the source directory to avoid issues related to build directory structure or generation order.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMake/LastConfigureStep/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${Slicer_SOURCE_DIR}/CMake/SlicerGenerateSlicerConfig.cmake)\n```\n\n----------------------------------------\n\nTITLE: Building Module Logic using Macro - CMake\nDESCRIPTION: This snippet uses the `SlicerMacroBuildModuleLogic` macro to build the module logic component. It passes the name of the kit, the export directive, include directories, source files, and target libraries as arguments. The macro encapsulates the build logic to simplify the CMake configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/Logic/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleLogic(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Project and Setting Variables in CMake\nDESCRIPTION: This snippet defines the project name, sets the export directive for the module, and includes necessary include directories. It defines the macro to be used for exporting symbols and sets the include directories based on the vtkSlicerSegmentationsModuleMRML.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/MRMLDM/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleMRMLDisplayableManager)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_MRMLDISPLAYABLEMANAGER_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSlicerSegmentationsModuleMRML_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files in CMake\nDESCRIPTION: Defines the MODULE_SRCS variable, listing the C++ source files that make up the module.  These files include the module class, widget, reader and settings panel implementations.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_SRCS\n  qSlicer${MODULE_NAME}Module.cxx\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.cxx\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  qSlicer${MODULE_NAME}Reader.cxx\n  qSlicer${MODULE_NAME}Reader.h\n  qSlicerShaderPropertyReader.cxx\n  qSlicerShaderPropertyReader.h\n  qSlicer${MODULE_NAME}SettingsPanel.cxx\n  qSlicer${MODULE_NAME}SettingsPanel.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Include Directories in CMake\nDESCRIPTION: Defines the include directories for the module, which are used to locate header files during compilation. These includes are added to the compiler's search path.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_INCLUDE_DIRECTORIES\n  ${CMAKE_CURRENT_SOURCE_DIR}/Logic\n  ${CMAKE_CURRENT_BINARY_DIR}/Logic\n  ${CMAKE_CURRENT_SOURCE_DIR}/SubjectHierarchyPlugins\n  ${CMAKE_CURRENT_BINARY_DIR}/SubjectHierarchyPlugins\n  ${qSlicerSubjectHierarchyModuleWidgets_INCLUDE_DIRS}\n  ${CMAKE_CURRENT_SOURCE_DIR}/Widgets\n  ${CMAKE_CURRENT_BINARY_DIR}/Widgets\n  ${qSlicerColorsModuleWidgets_INCLUDE_DIRS}\n  ${vtkSlicerColorsModuleMRML_INCLUDE_DIRS}\n  ${vtkSlicerColorsModuleLogic_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Test (VTK)\nDESCRIPTION: Adds an external data test that utilizes VTK data files.  It executes the ${CLP}Test executable with input sphere and cube VTK files and produces a combined output VTK file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MergeModels/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(testname ${CLP}Test)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  ModuleEntryPoint\n    DATA{${INPUT}/sphere.vtk}\n    DATA{${INPUT}/cube.vtk}\n    ${TEMP}/sphereCube.vtk\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Setting Kit Variable (CMake)\nDESCRIPTION: Sets the KIT variable to the project name for further use in defining module properties. This helps in organizing and referencing the module's configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Annotations/Logic/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Find Slicer Package\nDESCRIPTION: Finds the Slicer package and includes its use file, which provides necessary definitions and variables for building against Slicer.  `mark_as_superbuild` makes the Slicer directory available during SuperBuild.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Extensions/SuperBuild/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Slicer REQUIRED)\ninclude(${Slicer_USE_FILE})\nmark_as_superbuild(Slicer_DIR)\n```\n\n----------------------------------------\n\nTITLE: Define Project Name\nDESCRIPTION: Defines the project name using the `project()` command in CMake. This sets the base name for the project, which is used for various other configurations and targets.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/VTKWidgets/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleVTKWidgets)\n```\n\n----------------------------------------\n\nTITLE: Setting Python Scripts for SegmentStatisticsPlugins\nDESCRIPTION: This CMake command sets the list of Python scripts that belong to the SegmentStatisticsPlugins module. These scripts include __init__, SegmentStatisticsPluginBase, LabelmapSegmentStatisticsPlugin, ScalarVolumeSegmentStatisticsPlugin, and ClosedSurfaceSegmentStatisticsPlugin. This list is later used for compiling and installing these scripts.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/SegmentStatistics/SegmentStatisticsPlugins/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SegmentStatisticsPlugins_PYTHON_SCRIPTS\n  __init__\n  SegmentStatisticsPluginBase\n  LabelmapSegmentStatisticsPlugin\n  ScalarVolumeSegmentStatisticsPlugin\n  ClosedSurfaceSegmentStatisticsPlugin\n  )\n```\n\n----------------------------------------\n\nTITLE: Add Python Test Script\nDESCRIPTION: This command adds a Python script as a test case within the Slicer project. It takes the script name as an argument and can optionally include additional Slicer arguments.  The `slicer_add_python_test` command registers a basic python test.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/Testing/Python/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n#slicer_add_python_test(SCRIPT LoadVolumeDisplaybleSceneModelClose.py\n#  SLICER_ARGS --disable-cli-modules)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: This snippet sets the minimum required CMake version to 3.16.3, with a maximum acceptable version of 3.19.7. If the CMake version is outside this range, a fatal error is raised.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Core/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16.3...3.19.7 FATAL_ERROR)\n```\n\n----------------------------------------\n\nTITLE: Installing Slicer Preview using Homebrew on macOS\nDESCRIPTION: These commands demonstrate how to install, upgrade, and uninstall the preview version of 3D Slicer on macOS using the Homebrew package manager and the `homebrew-cask-versions` tap. It assumes Homebrew is already installed and the tap has been added.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/getting_started.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nbrew tap homebrew/cask-versions     # needs to be run once\nbrew install --cask slicer-preview  # to install\nbrew upgrade slicer-preview         # to upgrade\nbrew uninstall slicer-preview       # to uninstall\n```\n\n----------------------------------------\n\nTITLE: Setting Build Options CMake\nDESCRIPTION: This snippet defines a build option for creating shared libraries. It uses the `option` command to create a CMake variable `BUILD_SHARED_LIBS` that controls whether the project is built with shared libraries or static libraries. If `BUILD_SHARED_LIBS` is not already defined, it defaults to ON.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Logic/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED BUILD_SHARED_LIBS)\n  option(BUILD_SHARED_LIBS \"Build with shared libraries.\" ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for Module Components\nDESCRIPTION: Adds subdirectories for the MRML, VTKWidgets, Logic, and Widgets components of the module. This allows CMake to process the CMakeLists.txt files within each of these subdirectories.  Each subdirectory likely contains source code and build configurations for its respective component.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/LoadableCustomMarkups/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(MRML)\nadd_subdirectory(VTKWidgets)\nadd_subdirectory(Logic)\nadd_subdirectory(Widgets)\n```\n\n----------------------------------------\n\nTITLE: Custom Class Definition with dataclass\nDESCRIPTION: Defines a simple dataclass `CustomClass` with three integer fields (x, y, z).  This class is used as an example for creating a custom serializer. It uses the `@dataclasses.dataclass` decorator for concise class definition.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/parameter_nodes/advanced/custom_classes.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport dataclasses\nimport slicer\nfrom slicer.parameterNodeWrapper import parameterNodeWrapper, Serializer, ValidatedSerializer\n\n# Note: for this case it would be much simpler to just use a parameterPack.\n@dataclasses.dataclass\nclass CustomClass:\n    x: int\n    y: int\n    z: int\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Addition (CMake)\nDESCRIPTION: This snippet conditionally adds subdirectories for designer plugins and testing based on CMake variables.  The designer plugins are added if `Slicer_BUILD_QT_DESIGNER_PLUGINS` is enabled, while testing is potentially enabled if `BUILD_TESTING` is true. This allows for optional components to be included in the build.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Terminologies/Widgets/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nif(Slicer_BUILD_QT_DESIGNER_PLUGINS)\n  add_subdirectory(DesignerPlugins)\nendif()\n\n#-----------------------------------------------------------------------------\nif(BUILD_TESTING)\n  #add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting target properties for test executable\nDESCRIPTION: This snippet sets various properties for the test executable using the `set_target_properties` command. It sets the `LABELS` property to `${KIT}` and the `FOLDER` property to \"Core-Base\". These properties are used for organizing and categorizing the tests in the build system.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/Testing/Cxx/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n  set_target_properties(${KIT}CxxTests PROPERTIES LABELS ${KIT})\n  set_target_properties(${KIT}CxxTests PROPERTIES FOLDER \"Core-Base\")\n```\n\n----------------------------------------\n\nTITLE: Setting Variables for Directories and Module Name (CMake)\nDESCRIPTION: This snippet sets CMake variables for specifying the baseline and input data directories, as well as the module name. These variables are used in subsequent commands to locate data files and define target names.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/HistogramMatching/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(BASELINE ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Baseline)\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input)\n\nset(CLP ${MODULE_NAME})\n\nif(NOT DEFINED SEM_DATA_MANAGEMENT_TARGET)\n  set(SEM_DATA_MANAGEMENT_TARGET ${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories in CMake\nDESCRIPTION: This section adds subdirectories for various module components like MRML, VTKWidgets, Logic, MRMLDM, Widgets, and SubjectHierarchyPlugins. Each subdirectory likely contains its own CMakeLists.txt file for building its respective part of the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(MRML)\nadd_subdirectory(VTKWidgets)\nadd_subdirectory(Logic)\nadd_subdirectory(MRMLDM)\nadd_subdirectory(Widgets)\nadd_subdirectory(SubjectHierarchyPlugins)\n```\n\n----------------------------------------\n\nTITLE: Conditional SimpleITK Support (CMake)\nDESCRIPTION: This CMake snippet conditionally appends the `sitkUtils` script to the list of Python scripts if `Slicer_USE_SimpleITK` is enabled. This ensures that SimpleITK-related utility functions are included in the build only when SimpleITK support is enabled in the Slicer build configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/Python/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_USE_SimpleITK)\n  list(APPEND Slicer_PYTHON_SCRIPTS\n    sitkUtils\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting MODEL_FILE Variable for Testing\nDESCRIPTION: This snippet sets the `MODEL_FILE` variable to the path of a VTK file (`cube.vtk`). This file is used as test data for the qSlicer module.  The path is relative to the `MRMLCore_SOURCE_DIR` variable, indicating that the file resides within the MRMLCore project's testing data directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Data/Testing/Cxx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODEL_FILE \"${MRMLCore_SOURCE_DIR}/Testing/TestData/cube.vtk\")\n```\n\n----------------------------------------\n\nTITLE: Launching Slicer with a file (Console)\nDESCRIPTION: Launches Slicer and opens a specified file.  The full path to the Slicer executable and the file to be loaded must be provided. This is useful for programmatically opening files in Slicer.  No dependencies are required beyond a functional Slicer installation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n\"c:\\Users\\myusername\\AppData\\Local\\NA-MIC\\Slicer 4.11.20210226\\Slicer.exe\" c:\\some\\folder\\MRHead.nrrd\n```\n\n----------------------------------------\n\nTITLE: Installing headers\nDESCRIPTION: This snippet handles the installation of header files. It checks if `PROJECT_NAME_INSTALL_NO_DEVELOPMENT` is defined. If not, it sets it to `ON`. If `PROJECT_NAME_INSTALL_NO_DEVELOPMENT` is false, it installs header files and the configured header to the include directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/CLI/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT)\n  set(${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT ON)\nendif()\nif(NOT ${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT)\n  file(GLOB headers \"${CMAKE_CURRENT_SOURCE_DIR}/*.h\")\n  install(\n    FILES ${headers} ${CMAKE_CURRENT_BINARY_DIR}/${configure_header_file}\n    DESTINATION include/${PROJECT_NAME} COMPONENT Development)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Get Binary Labelmap Representation (Explicit)\nDESCRIPTION: This snippet retrieves the binary labelmap representation of a segment. If it doesn't exist, it creates it for the segment. The function applies parent transforms by default. To disable transform application, add 'false' as the last argument.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport vtkSegmentationCorePython as vtkSegmentationCore\noutputOrientedImageData = vtkSegmentationCore.vtkOrientedImageData()\nslicer.vtkSlicerSegmentationsModuleLogic.GetSegmentBinaryLabelmapRepresentation(segmentationNode, segmentID, outputOrientedImageData)\n```\n\n----------------------------------------\n\nTITLE: Handling ITK Factory Registration\nDESCRIPTION: This snippet disables ITK's automatic IO factory registration based on the ITK version.  For ITK versions 5.3 and greater, it disables registration for IMAGEIO, MESHIO, and TRANSFORMIO. Otherwise, it disables the generic IO factory registration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CreateDICOMSeries/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\n```\n\n----------------------------------------\n\nTITLE: Launching Visual Studio Code from Slicer in Linux\nDESCRIPTION: This bash command launches Visual Studio Code through the Slicer launcher.  This ensures that the environment is properly set up, including necessary directory paths for running the Slicer application.  It's essential for initializing the environment before debugging.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/debugging/vscodecpp.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/D/Slicer-SuperBuild-Debug/Slicer-build\n./Slicer --launch code\n```\n\n----------------------------------------\n\nTITLE: Get Sequence Index Value in Slicer (Python)\nDESCRIPTION: This snippet shows how to retrieve and print the index value of a specific item within a sequence node in 3D Slicer. It uses the `GetIndexName`, `GetNthIndexValue`, and `GetIndexUnit` methods of the sequence node to display the index information.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/sequences.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nprint(\"Index value of {0}th item: {1} = {2} {3}\".format(\n  itemIndex,\n  sequenceNode.GetIndexName(),\n  sequenceNode.GetNthIndexValue(itemIndex),\n  sequenceNode.GetIndexUnit()))\n```\n\n----------------------------------------\n\nTITLE: Running Python script in Slicer (Console - MacOS)\nDESCRIPTION: Executes a Python script within the Slicer environment without a graphical user interface on MacOS. Uses `--python-script` flag to specify the script. The `--no-splash` and `--no-main-window` options suppress the GUI. Requires Slicer installation and a valid script path.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n/Applications/Slicer.app/Contents/MacOS/Slicer --no-splash --no-main-window --python-script \"/full/path/to/myscript.py\"\n```\n\n----------------------------------------\n\nTITLE: Installing Library\nDESCRIPTION: This snippet installs the library.  It defines the install directories for binaries and libraries, and then installs the library target to these directories for runtime, development, and archive components.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkTeem/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_INSTALL_BIN_DIR)\n  set(${PROJECT_NAME}_INSTALL_BIN_DIR bin)\nendif()\nif(NOT DEFINED ${PROJECT_NAME}_INSTALL_LIB_DIR)\n  set(${PROJECT_NAME}_INSTALL_LIB_DIR lib/${PROJECT_NAME})\nendif()\n\ninstall(TARGETS ${lib_name}\n  RUNTIME DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DIR} COMPONENT RuntimeLibraries\n  LIBRARY DESTINATION ${${PROJECT_NAME}_INSTALL_LIB_DIR} COMPONENT RuntimeLibraries\n  ARCHIVE DESTINATION ${${PROJECT_NAME}_INSTALL_LIB_DIR} COMPONENT Development\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting MOC Source Files\nDESCRIPTION: Sets the `${KIT}_MOC_SRCS` variable to a list of header files that require the Qt Meta Object Compiler (MOC) to generate meta-object code. This is typically header files that use Qt's signals, slots, and properties.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_MOC_SRCS\n  qSlicerSubjectHierarchy${MODULE_NAME}Plugin.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Project and KIT variables\nDESCRIPTION: This snippet sets the project name and KIT variables, which are used throughout the CMake file to define various aspects of the module build process.  The MODULE_NAME variable is used to create module-specific names. The PROJECT_NAME is assigned to the KIT variable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/Widgets/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(qSlicer${MODULE_NAME}ModuleWidgets)\n\nset(KIT ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Setting Project Properties\nDESCRIPTION: Sets the project name, finds the RapidJSON package, and defines variables for export directives and include directories. It specifies the required RapidJSON package using find_package().\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/MRML/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleMRML)\n\nfind_package(RapidJSON REQUIRED)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_MRML_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${RapidJSON_INCLUDE_DIR}\n  ${vtkSlicer${MODULE_NAME}ModuleVTKWidgets_SOURCE_DIR}\n  ${vtkSlicer${MODULE_NAME}ModuleVTKWidgets_BINARY_DIR}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Project and Kit Variables in CMake\nDESCRIPTION: This snippet defines project-related variables in CMake. It sets the project name, a kit name derived from the project, and an export directive for the module logic. The export directive controls symbol visibility when building shared libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Cameras/Logic/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleLogic)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_LOGIC_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Startup Working Path in Python\nDESCRIPTION: This Python code snippet shows how to access the application's startup working path using the `slicer.app.startupWorkingPath` property. This provides a reliable way to get the initial working directory, even if it has been changed by modules or packages.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/advanced_topics.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nslicer.app.startupWorkingPath\n```\n\n----------------------------------------\n\nTITLE: Running CTest on Windows (Batch)\nDESCRIPTION: This batch command runs automatic tests of a Slicer extension on Windows. It changes the directory to the extension build directory and executes `ctest.exe` with specified configuration and verbosity.  It requires CMake to be installed and available in the system's PATH.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/extensions.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd C:\\path\\to\\MyExtension-debug\n\"c:\\Program Files\\CMake\\bin\\ctest.exe\" -C Release -V\n```\n\n----------------------------------------\n\nTITLE: Install Target\nDESCRIPTION: Installs the library to the specified directories for runtime, library, and archive components. The destination directories are determined by the `${PROJECT_NAME}_INSTALL_BIN_DIR` and `${PROJECT_NAME}_INSTALL_LIB_DIR` variables.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkSegmentationCore/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_INSTALL_BIN_DIR)\n  set(${PROJECT_NAME}_INSTALL_BIN_DIR bin)\nendif()\nif(NOT DEFINED ${PROJECT_NAME}_INSTALL_LIB_DIR)\n  set(${PROJECT_NAME}_INSTALL_LIB_DIR lib/${PROJECT_NAME})\nendif()\n\ninstall(TARGETS ${PROJECT_NAME}\n  RUNTIME DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DIR} COMPONENT RuntimeLibraries\n  LIBRARY DESTINATION ${${PROJECT_NAME}_INSTALL_LIB_DIR} COMPONENT RuntimeLibraries\n  ARCHIVE DESTINATION ${${PROJECT_NAME}_INSTALL_LIB_DIR} COMPONENT Development\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories in CMake\nDESCRIPTION: This snippet demonstrates how to add subdirectories to a CMake project. It utilizes the `add_subdirectory` command to include the CMakeLists.txt files located within the specified subdirectories, allowing for modular project organization. The inclusion of the `Python` subdirectory is conditional, based on the `Slicer_USE_PYTHONQT` variable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n\nif(Slicer_USE_PYTHONQT)\n  add_subdirectory(Python)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories CMake\nDESCRIPTION: Defines the include directories required for compiling the module. These include directories contain the header files needed for various Slicer modules and VTK components that the current module depends on.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${qSlicerSubjectHierarchyModuleWidgets_INCLUDE_DIRS}\n  ${vtkSlicerSubjectHierarchyModuleLogic_INCLUDE_DIRS}\n  ${qSlicerTerminologiesModuleWidgets_INCLUDE_DIRS}\n  ${vtkSlicerTerminologiesModuleLogic_INCLUDE_DIRS}\n  ${vtkSegmentationCore_INCLUDE_DIRS}\n  ${qMRMLWidgets_INCLUDE_DIRS}\n  ${MRMLLogic_INCLUDE_DIRS}\n  ${MRMLCore_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Target Libraries\nDESCRIPTION: This snippet defines the target libraries that the module depends on. These libraries are linked with the module during the build process to provide the necessary functionality.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/Widgets/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel Package\nDESCRIPTION: This code finds the SlicerExecutionModel package, which is essential for integrating the module into the Slicer execution environment. It includes the necessary use file to define relevant macros and settings.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/DiffusionTensorTest/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Defining Color Lookup Table\nDESCRIPTION: This code snippet defines a color lookup table (CLUT) with 256 entries. Each row consists of an index, red, green, blue, and alpha (opacity) value.  These values define how a scalar input is mapped to a color during visualization.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/Logic/Resources/ColorFiles/Viridis.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n0 0 68 1 84 255\n1 1 68 2 85 255\n2 2 68 3 87 255\n3 3 69 5 88 255\n4 4 69 6 90 255\n5 5 69 8 91 255\n6 6 70 9 92 255\n7 7 70 11 94 255\n8 8 70 12 95 255\n9 9 70 14 97 255\n10 10 71 15 98 255\n11 11 71 17 99 255\n12 12 71 18 101 255\n13 13 71 20 102 255\n...\n253 253 248 230 33 255\n254 254 250 230 34 255\n255 255 253 231 36 255\n```\n\n----------------------------------------\n\nTITLE: Setting MOC Sources\nDESCRIPTION: This sets the header files that require meta-object compiler (MOC) processing. The `Tests_MOC_SRCS` variable lists the headers used to generate meta-object code for Qt signals and slots.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(Tests_MOC_SRCS\n  qMRMLMarkupsMalformedWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Building the Library\nDESCRIPTION: Builds the MRMLIDIO library from the source files defined in `MRMLIDImageIO_SRCS`. It then links the library against MRMLCore. It also applies any user-defined library properties defined in `Slicer_LIBRARY_PROPERTIES`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/IDImageIO/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(lib_name MRMLIDIO)\n\nset(srcs ${MRMLIDImageIO_SRCS})\nadd_library(${lib_name} ${srcs})\n\nset(libs MRMLCore)\ntarget_link_libraries(${lib_name} ${libs})\n\n# Apply user-defined properties to the library target.\nif(Slicer_LIBRARY_PROPERTIES)\n  set_target_properties(${lib_name} PROPERTIES ${Slicer_LIBRARY_PROPERTIES})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories\nDESCRIPTION: Adds subdirectories 'MRML' and 'Logic' to the build process. These subdirectories likely contain the MRML and Logic components of the CropVolume module, respectively.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/CropVolume/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(MRML)\nadd_subdirectory(Logic)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable and Linking Libraries\nDESCRIPTION: Adds an executable target named `${KIT}CxxTests` using the source files in the `Tests` variable. It then links the `${KIT}CxxTests` executable against the `${KIT}` library. Finally, it sets properties for the target, including LABELS and FOLDER.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Core/Testing/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIBRARY_NAME ${PROJECT_NAME})\n\nctk_add_executable_utf8(${KIT}CxxTests ${Tests})\ntarget_link_libraries(${KIT}CxxTests ${KIT})\nset_target_properties(${KIT}CxxTests PROPERTIES LABELS ${KIT})\nset_target_properties(${KIT}CxxTests PROPERTIES FOLDER \"Core-Base\")\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Tests in CMake\nDESCRIPTION: The `simple_test` macro defines individual tests. In this case, it defines tests for `qMRMLTransformInfoWidgetTest1` and `qMRMLTransformDisplayNodeWidgetTest1`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/Widgets/Testing/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nsimple_test( qMRMLTransformInfoWidgetTest1 )\nsimple_test( qMRMLTransformDisplayNodeWidgetTest1 )\n```\n\n----------------------------------------\n\nTITLE: Setting Project and Export Directives - CMake\nDESCRIPTION: This snippet sets the project name, defines the export directive for the module's widgets, and initializes variables for include directories. The export directive is used to control the visibility of classes and functions when the module is used by other projects.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/LoadableExtensionTemplate/LoadableModuleTemplate/Widgets/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(qSlicer${MODULE_NAME}ModuleWidgets)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"Q_SLICER_MODULE_${MODULE_NAME_UPPER}_WIDGETS_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel Package - CMake\nDESCRIPTION: Locates the SlicerExecutionModel package, which provides necessary functionalities for Slicer modules. Includes the usage file to incorporate the package's settings and functions.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GaussianBlurImageFilter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Building and Linking Executable with Image Spacing Off - CMake\nDESCRIPTION: This snippet creates an executable named `${CLP}TestWithImageSpacingOff` from the source file `${CLP}Test.cxx`. It links this executable to the `${CLP}Lib` library and other libraries defined in `SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES`. It also sets properties such as labels and folder for the target, and adds the external data test to compare results.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GradientAnisotropicDiffusion/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nctk_add_executable_utf8(${CLP}TestWithImageSpacingOff ${CLP}Test.cxx)\ntarget_link_libraries(${CLP}TestWithImageSpacingOff ${CLP}Lib ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES})\nset_target_properties(${CLP}TestWithImageSpacingOff PROPERTIES LABELS ${CLP})\nset_target_properties(${CLP}TestWithImageSpacingOff PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n\nset(testname ${CLP}TestWithImageSpacingOff)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}TestWithImageSpacingOff>\n  --compare DATA{${BASELINE}/GradientAnisotropicDiffusionTestWithImageSpacingOff.nhdr,GradientAnisotropicDiffusionTestWithImageSpacingOff.raw.gz}\n            ${TEMP}/GradientAnisotropicDiffusionTestWithImageSpacingOff.nhdr\n  ModuleEntryPoint\n    --conductance 2\n    --timeStep 0.0625\n    --iterations 2\n    DATA{${INPUT}/MRHeadResampled.nhdr,MRHeadResampled.raw.gz}\n    ${TEMP}/GradientAnisotropicDiffusionTestWithImageSpacingOff.nhdr\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Building Qt Designer Plugin using Macro - CMake\nDESCRIPTION: This code snippet uses the `ctkMacroBuildQtDesignerPlugin` macro to build the Qt Designer plugin. It passes the kit name, export directive, folder, source files, moc files, and target libraries as arguments. The macro handles the details of generating the necessary files and linking the required libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Sequences/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nctkMacroBuildQtDesignerPlugin(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT}\n  FOLDER \"Module-${MODULE_NAME}\"\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating an ExternalData Test (CMake)\nDESCRIPTION: This snippet creates an ExternalData test using `ExternalData_add_test`.  It defines a test named `${testname}` that executes the `${CLP}Test` executable, compares output files against baseline data, and uses the `ModuleEntryPoint` to pass arguments including input data files. The test compares the output nhdr file to the baseline nhdr file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/HistogramMatching/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(testname ${CLP}Test)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  --compare DATA{${BASELINE}/HistogramMatchingTest.nhdr,HistogramMatchingTest.raw.gz}\n            ${TEMP}/HistogramMatchingTest.nhdr\n  ModuleEntryPoint\n    --numberOfHistogramLevels 64\n    --numberOfMatchPoints 10\n    DATA{${INPUT}/CTHeadAxial.nhdr,CTHeadAxial.raw.gz}\n    DATA{${INPUT}/MRHeadResampled.nhdr,MRHeadResampled.raw.gz}\n    ${TEMP}/HistogramMatchingTest.nhdr\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name with CMake\nDESCRIPTION: This snippet sets the module name using the `set` command in CMake. The module name is constructed as `qSlicer${MODULE_NAME}Module` and assigned to the variable `KIT`. This variable is later used in other CMake functions to refer to the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/CropVolume/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT qSlicer${MODULE_NAME}Module)\n```\n\n----------------------------------------\n\nTITLE: Define Source Files\nDESCRIPTION: Defines the source files that make up the module logic component. These are the `.cxx` and `.h` files that contain the actual code for the logic.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/CropVolume/Logic/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_SRCS\n  vtkSlicer${MODULE_NAME}Logic.cxx\n  vtkSlicer${MODULE_NAME}Logic.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Running storescp.exe for DIMSE testing\nDESCRIPTION: This code snippet provides an example command to run the `storescp.exe` tool, which is part of the DCMTK toolkit distributed with 3D Slicer. This tool allows developers to test asynchronous store requests with DIMSE. The user needs to specify the port number for the tool to listen on.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/modules/dicom.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n> \"path/to/Slicer x.y.z\\bin\\storescp.exe\" <port-number>\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory\nDESCRIPTION: This snippet checks if the BUILD_TESTING variable is enabled. If it is, it adds a subdirectory named \"Testing\" to the build. This allows for including tests for the module as part of the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MultiplyScalarVolumes/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Test Sourcelist in CMake\nDESCRIPTION: This CMake command `create_test_sourcelist` generates a list of source files to be used in the test executable. It combines a main test file with the specified test sources.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/Widgets/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncreate_test_sourcelist(Tests ${KIT}CppTests.cxx\n  ${TEST_SOURCES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Module Logic with SlicerMacro (CMake)\nDESCRIPTION: This snippet uses the `SlicerMacroBuildModuleLogic` macro to build the module logic. It passes the module name, export directive, include directories, source files, and target libraries as parameters to the macro, which handles the compilation and linking process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/LoadableCustomMarkups/VTKWidgets/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleLogic(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory in CMake\nDESCRIPTION: Adds the 'Logic' subdirectory to the build, which likely contains the core logic of the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Data/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Logic)\n```\n\n----------------------------------------\n\nTITLE: Creating Test Source List\nDESCRIPTION: This snippet uses the `create_test_sourcelist` macro to generate a source list for the C++ tests. It includes the files specified in `KIT_TEST_SRCS`, as well as an extra include file `vtkMRMLDebugLeaksMacro.h`. The resulting source list is stored in the `Tests` variable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTApp/Testing/Cxx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncreate_test_sourcelist(Tests ${KIT}CxxTests.cxx\n  ${KIT_TEST_SRCS}\n  EXTRA_INCLUDE vtkMRMLDebugLeaksMacro.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Appending Target Libraries (DCMTK)\nDESCRIPTION: Conditionally appends target libraries related to DCMTK if DICOM support is enabled. It handles both namespaced and non-namespaced DCMTK targets.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_BUILD_DICOM_SUPPORT)\n  # Support namespaced DCMTK targets\n  foreach(lib IN LISTS DCMTK_LIBRARIES)\n    if(TARGET \"DCMTK::${lib}\")\n      list(APPEND KIT_target_libraries DCMTK::${lib})\n    else()\n      list(APPEND KIT_target_libraries ${lib})\n    endif()\n  endforeach()\n  list(APPEND KIT_target_libraries\n    CTKDICOMCore\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Test Source List\nDESCRIPTION: Uses `create_test_sourcelist` to generate a list of test source files. It takes the test name, the name of the test executable, the list of test source files, and any extra include files. This prepares the source files for compilation into the test executable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Applications/SlicerApp/Testing/Cpp/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncreate_test_sourcelist(Tests ${KIT}CxxTests.cxx\n  ${KIT_TEST_SRCS}\n  EXTRA_INCLUDE vtkMRMLDebugLeaksMacro.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name\nDESCRIPTION: This snippet sets the KIT variable to qSlicerTablesModule, which likely represents the name of the module being configured for testing. The MODULE_NAME variable seems to be used to dynamically construct the KIT variable name.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/Testing/Cxx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT qSlicer${MODULE_NAME}Module)\n```\n\n----------------------------------------\n\nTITLE: Install Library\nDESCRIPTION: Installs the RemoteIO library to the specified directories. It installs the runtime, library, and archive files to different destinations under the build directory, separated by component.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/RemoteIO/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_INSTALL_BIN_DIR)\n  set(${PROJECT_NAME}_INSTALL_BIN_DIR bin)\nendif()\nif(NOT DEFINED ${PROJECT_NAME}_INSTALL_LIB_DIR)\n  set(${PROJECT_NAME}_INSTALL_LIB_DIR lib/${PROJECT_NAME})\nendif()\n\ninstall(TARGETS ${lib_name}\n  RUNTIME DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DIR} COMPONENT RuntimeLibraries\n  LIBRARY DESTINATION ${${PROJECT_NAME}_INSTALL_LIB_DIR} COMPONENT RuntimeLibraries\n  ARCHIVE DESTINATION ${${PROJECT_NAME}_INSTALL_LIB_DIR} COMPONENT Development\n  )\n```\n\n----------------------------------------\n\nTITLE: Add Testing Subdirectory CMake\nDESCRIPTION: Adds a subdirectory for testing if BUILD_TESTING is enabled. This allows for running unit tests as part of the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/AddScalarVolumes/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Build Qt Designer Plugin using Macro\nDESCRIPTION: This snippet utilizes the `ctkMacroBuildQtDesignerPlugin` macro to handle the build process for the Qt Designer plugin. It takes the plugin name, export directive, source files, MOC source files, and target libraries as input.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Plots/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nctkMacroBuildQtDesignerPlugin(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT}\n  FOLDER \"Module-${MODULE_NAME}\"\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files CMake\nDESCRIPTION: Defines the source files that should be compiled to build the module. These are the `.cxx` and `.h` files that contain the implementation of the module's functionality. Filenames use the MODULE_NAME variable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/ViewControllers/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_SRCS\n  qSlicer${MODULE_NAME}Module.cxx\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.cxx\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Python Subdirectory using CMake\nDESCRIPTION: This CMake command adds the 'Python' subdirectory to the current build context. This allows CMake to process the CMakeLists.txt file located in the 'Python' directory and include its targets in the overall build process for the Slicer project. It is essential for integrating Python scripting and modules into Slicer.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/ScriptedSegmentEditorEffectExtensionTemplate/ScriptedSegmentEditorEffectModuleTemplate/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Python)\n```\n\n----------------------------------------\n\nTITLE: Defining UI Files (CMake)\nDESCRIPTION: This snippet defines the list of UI files (.ui) that are part of the qSlicerBaseQTGUI library. These files describe the layout and appearance of the GUI elements and are created using Qt Designer.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTGUI/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# UI files\nset(KIT_UI_SRCS\n  Resources/UI/qSlicerActionsDialog.ui\n  Resources/UI/qSlicerDataDialog.ui\n  Resources/UI/qSlicerExportNodeDialog.ui\n  Resources/UI/qSlicerModelsDialog.ui\n  Resources/UI/qSlicerModuleFinderDialog.ui\n  Resources/UI/qSlicerModulePanel.ui\n  Resources/UI/qSlicerNodeWriterOptionsWidget.ui\n  Resources/UI/qSlicerSaveDataDialog.ui\n  Resources/UI/qSlicerSettingsCachePanel.ui\n  Resources/UI/qSlicerSettingsGeneralPanel.ui\n  Resources/UI/qSlicerSettingsInternationalizationPanel.ui\n  Resources/UI/qSlicerSettingsModulesPanel.ui\n  Resources/UI/qSlicerSettingsStylesPanel.ui\n  Resources/UI/qSlicerSettingsViewsPanel.ui\n  Resources/UI/qSlicerSettingsDeveloperPanel.ui\n  Resources/UI/qSlicerSettingsUserInformationPanel.ui\n  Resources/UI/qSlicerWebWidget.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Include Cxx Subdirectory - CMake\nDESCRIPTION: This line uses the CMake command `add_subdirectory` to include the Cxx subdirectory in the current build scope. It is commonly used in a project's main CMakeLists.txt to organize source code into logical modules. The Cxx directory is expected to contain its own CMakeLists.txt file which will be processed as part of this inclusion.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Data/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Setting Input and CLP Variables - CMake\nDESCRIPTION: This snippet sets the INPUT variable to the path of the input data directory and the CLP variable to the module name. It also defines SEM_DATA_MANAGEMENT_TARGET if it is not already defined.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ImageLabelCombine/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input)\n\nset(CLP ${MODULE_NAME})\n\nif(NOT DEFINED SEM_DATA_MANAGEMENT_TARGET)\n  set(SEM_DATA_MANAGEMENT_TARGET ${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Resource Files\nDESCRIPTION: This snippet sets the `${KIT}_RESOURCES` variable, which lists the Qt resource files. These files contain images, icons, and other resources used by the module's widgets.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/Widgets/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_RESOURCES\n  Resources/${KIT}.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Individual Tests\nDESCRIPTION: This section adds the individual tests to the testing suite using `simple_test` and `simple_file_test`.  The `simple_file_test` macro is used to run the tests that rely on external files for data. CMAKE_BINARY_DIR is used for tests that create temporary files during their run.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Logic/Testing/Cxx/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nsimple_test( vtkMRMLAbstractLogicSceneEventsTest )\nsimple_test( vtkMRMLColorLogicTest1 )\nsimple_test( vtkMRMLDisplayableHierarchyLogicTest1 )\nsimple_test( vtkMRMLLayoutLogicCompareTest )\nsimple_test( vtkMRMLLayoutLogicTest1 )\nsimple_test( vtkMRMLLayoutLogicTest2 )\nsimple_test( vtkMRMLSliceLayerLogicTest )\nsimple_test( vtkMRMLSliceLogicTest1 )\nsimple_file_test( vtkMRMLSliceLogicTest2 fixed.nrrd)\nsimple_file_test( vtkMRMLSliceLogicTest3 fixed.nrrd)\nsimple_file_test( vtkMRMLSliceLogicTest4 fixed.nrrd)\nsimple_file_test( vtkMRMLSliceLogicTest5 fixed.nrrd)\nsimple_test( vtkMRMLApplicationLogicTest1 \"${CMAKE_BINARY_DIR}/Testing/Temporary\" )\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries\nDESCRIPTION: This snippet sets the `${KIT}_TARGET_LIBRARIES` variable, which lists the libraries that the module's widgets depend on. It includes libraries like vtkSlicer${MODULE_NAME}ModuleLogic, qSlicerTerminologiesModuleWidgets, MRMLCore, and optionally MRMLCLI if `Slicer_BUILD_CLI_SUPPORT` is enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/Widgets/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  qSlicerTerminologiesModuleWidgets\n  MRMLCore\n  vtkSlicerVolumesModuleLogic\n  )\nif(Slicer_BUILD_CLI_SUPPORT)\n  list(APPEND ${KIT}_TARGET_LIBRARIES\n    MRMLCLI\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining VTK Components\nDESCRIPTION: This snippet defines the list of VTK components that are required for the Slicer build.  If Slicer_USE_PYTHONQT is enabled, WrappingPythonCore is appended.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_41\n\nLANGUAGE: cmake\nCODE:\n```\nset(Slicer_VTK_COMPONENTS\n  FiltersExtraction\n  FiltersFlowPaths\n  FiltersGeometry\n  FiltersParallel\n  GUISupportQtSQL\n  IOExport\n  IOImage\n  IOLegacy\n  IOPLY\n  IOXML\n  ImagingMath\n  ImagingMorphological\n  ImagingStatistics\n  ImagingStencil\n  InteractionImage\n  RenderingContextOpenGL2\n  RenderingQt\n  RenderingVolumeOpenGL2\n  TestingRendering\n  ViewsQt\n  zlib\n  )\n\nif(Slicer_USE_PYTHONQT)\n  list(APPEND Slicer_VTK_COMPONENTS\n    WrappingPythonCore\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Module Source Files in CMake\nDESCRIPTION: This defines the source files (.cxx and .h) that make up the module. It includes the module class, widget, and reader components. The naming convention follows a pattern based on the MODULE_NAME variable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_SRCS\n  qSlicer${MODULE_NAME}Module.cxx\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.cxx\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  qSlicer${MODULE_NAME}Reader.cxx\n  qSlicer${MODULE_NAME}Reader.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Add Python Subdirectory with CMake\nDESCRIPTION: This CMake command adds the 'Python' directory to the current CMake project. This allows CMake to find and process the CMakeLists.txt file within the 'Python' directory, integrating its targets and definitions into the overall project build process. The path to the subdirectory is relative to the current CMakeLists.txt file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/ScriptedLoadableExtensionTemplate/ScriptedLoadableModuleTemplate/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Python)\n```\n\n----------------------------------------\n\nTITLE: Building CLI using SEMMacroBuildCLI\nDESCRIPTION: Uses the SEMMacroBuildCLI macro to build the command-line interface (CLI) for the module. Specifies the module name, logo header, and target libraries (ITK libraries).  The `NO_INSTALL` option prevents installation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/TestGridTransformRegistration/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/NAMICLogo.h\n  TARGET_LIBRARIES ${ITK_LIBRARIES}\n  NO_INSTALL\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel Package - CMake\nDESCRIPTION: Finds the required SlicerExecutionModel package using CMake's find_package command.  It then includes the use file provided by the package to set up necessary variables and configurations for building the module. The REQUIRED keyword ensures that the build fails if the package is not found.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ExecutionModelTour/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Add Cxx Subdirectory to CMake\nDESCRIPTION: This snippet adds the 'Cxx' subdirectory to the CMake project.  It instructs CMake to process the CMakeLists.txt file located within the 'Cxx' directory and include its targets in the build process. No specific dependencies are implied other than the presence of a valid CMakeLists.txt file in the 'Cxx' directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/Logic/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Setting shared library build option\nDESCRIPTION: This snippet defines an option to build the project with shared libraries. It checks if the `BUILD_SHARED_LIBS` variable is already defined and, if not, sets it to `ON` by default.  This allows users to control whether the project is built as a shared or static library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/CLI/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED BUILD_SHARED_LIBS)\n  option(BUILD_SHARED_LIBS \"Build with shared libraries.\" ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Module Kit Name in CMake\nDESCRIPTION: This snippet sets the name of the module kit using the `set` command. The `MODULE_NAME` variable is likely defined elsewhere and provides the specific name for the module being configured. The resulting variable, `${KIT}`, will be used in subsequent commands to refer to this module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/Testing/Cxx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT qSlicer${MODULE_NAME}Module)\n```\n\n----------------------------------------\n\nTITLE: Defining Project and Kit Variables - CMake\nDESCRIPTION: This snippet defines the project name and a kit name based on the module name. It also sets up a variable for the export directive which will be used for managing symbol visibility.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/MRMLDM/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleMRMLDisplayableManager)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_MRMLDISPLAYABLEMANAGER_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Setting Module Source Files - CMake\nDESCRIPTION: Lists the C++ source and header files that comprise the module. These files define the module's core functionality, including its module class, widget, and reader components.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Texts/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_SRCS\n  qSlicer${MODULE_NAME}Module.cxx\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.cxx\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  qSlicer${MODULE_NAME}Reader.cxx\n  qSlicer${MODULE_NAME}Reader.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Source Files in CMake\nDESCRIPTION: Defines the source files for the module, which are compiled and linked to create the module's executable or library. These are the core implementation files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_SRCS\n  qSlicer${MODULE_NAME}Module.cxx\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.cxx\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  qSlicer${MODULE_NAME}Reader.cxx\n  qSlicer${MODULE_NAME}Reader.h\n  qSlicer${MODULE_NAME}IOOptionsWidget.cxx\n  qSlicer${MODULE_NAME}IOOptionsWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Variables for Data and Module Name (CMake)\nDESCRIPTION: This snippet defines CMake variables for the baseline data directory, input data directory, and the module name (CLP). It also sets a default value for SEM_DATA_MANAGEMENT_TARGET if it's not already defined.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ModelToLabelMap/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(BASELINE ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Baseline)\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input)\n\nset(CLP ${MODULE_NAME})\n\nif(NOT DEFINED SEM_DATA_MANAGEMENT_TARGET)\n  set(SEM_DATA_MANAGEMENT_TARGET ${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet sets the include directories.  It defines the `include_dirs` variable with the source and binary directories and then includes these directories using `include_directories(BEFORE ${include_dirs})`. This ensures that the compiler can find the necessary header files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkTeem/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nset(include_dirs\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  ${CMAKE_CURRENT_BINARY_DIR}\n  )\ninclude_directories(BEFORE ${include_dirs})\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories with CMake\nDESCRIPTION: This CMake code snippet adds the 'Cxx' subdirectory to the build process. It also conditionally adds the 'Python' subdirectory based on whether the `Slicer_USE_PYTHONQT` flag is enabled. The `add_subdirectory` command instructs CMake to process the CMakeLists.txt file in the specified subdirectory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\nif(Slicer_USE_PYTHONQT)\n  add_subdirectory(Python)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Test Executable\nDESCRIPTION: This snippet uses `ctk_add_executable_utf8` to create an executable named `${KIT}CxxTests` (e.g., `slicerCxxTests`). It uses the source files listed in the `Tests` variable. It is expected that `ctk_add_executable_utf8` is a macro provided by the CTK framework.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTApp/Testing/Cxx/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nctk_add_executable_utf8(${KIT}CxxTests ${Tests})\n```\n\n----------------------------------------\n\nTITLE: Hide View Controller Bars - Python\nDESCRIPTION: This code snippet hides the controller bars for the 3D view and slice views. It retrieves the controller for each view (3D, Red slice, Plot, Table) and sets its visibility to 'False'.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nslicer.app.layoutManager().threeDWidget(0).threeDController().setVisible(False)\nslicer.app.layoutManager().sliceWidget(\"Red\").sliceController().setVisible(False)\nslicer.app.layoutManager().plotWidget(0).plotController().setVisible(False)\nslicer.app.layoutManager().tableWidget(0).tableController().setVisible(False)\n```\n\n----------------------------------------\n\nTITLE: Set Python Module Test Template Directory (CMake)\nDESCRIPTION: This snippet sets the `Slicer_PYTHON_MODULE_TEST_TEMPLATES_DIR` variable to the current source directory. This variable is cached internally and represents the path to the python test templates directory. This is crucial for locating and using python test templates within the Slicer build system.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/Testing/Python/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(Slicer_PYTHON_MODULE_TEST_TEMPLATES_DIR ${CMAKE_CURRENT_SOURCE_DIR}\n  CACHE INTERNAL \"Path to python test templates directory.\")\n```\n\n----------------------------------------\n\nTITLE: Headers for MOC - CMake\nDESCRIPTION: This section specifies headers that need to be processed by Qt's Meta Object Compiler (moc).  These are the header files that contain Qt specific macros such as Q_OBJECT.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTGUI/DesignerPlugins/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_MOC_SRCS\n  qSlicerQTGUIPlugins.h\n\n  qSlicerDirectoryListViewPlugin.h\n  qSlicerModulePanelPlugin.h\n  qSlicerModulesListViewPlugin.h\n  qSlicerMouseModeToolBarPlugin.h\n  qSlicerWidgetPlugin.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files - CMake\nDESCRIPTION: This snippet defines the source files (.cxx and .h) for the module. It lists all the C++ source and header files that make up the module's implementation, including the `qSlicerSubjectHierarchySegmentationsPlugin` and `qSlicerSubjectHierarchySegmentsPlugin` files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_SRCS\n  qSlicerSubjectHierarchySegmentationsPlugin.cxx\n  qSlicerSubjectHierarchySegmentationsPlugin.h\n  qSlicerSubjectHierarchySegmentsPlugin.cxx\n  qSlicerSubjectHierarchySegmentsPlugin.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Operating System Architecture Bitness CMake\nDESCRIPTION: Uses the `SlicerMacroGetOperatingSystemArchitectureBitness` macro to determine the operating system, architecture, and bitness. The results are stored in variables prefixed with `Slicer`. A message is then printed to the console indicating the configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_51\n\nLANGUAGE: cmake\nCODE:\n```\nSlicerMacroGetOperatingSystemArchitectureBitness(VAR_PREFIX Slicer)\nmessage(STATUS \"Configuring ${Slicer_MAIN_PROJECT_APPLICATION_NAME} for [${Slicer_OS}-${Slicer_ARCHITECTURE}]\")\n```\n\n----------------------------------------\n\nTITLE: Setting extension meta-information\nDESCRIPTION: Sets various metadata properties for the Slicer extension, including the homepage URL, contributor information, description, icon URL, screenshot URLs, and dependencies.  This information is used for managing and displaying the extension within the Slicer environment.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/CLIExtensionTemplate/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(EXTENSION_HOMEPAGE \"https://www.slicer.org/wiki/Documentation/Nightly/Extensions/CLIExtensionTemplate\")\nset(EXTENSION_CONTRIBUTORS \"John Doe (AnyWare Corp.)\")\nset(EXTENSION_DESCRIPTION \"This is an example of a simple extension\")\nset(EXTENSION_ICONURL \"https://www.example.com/Slicer/Extensions/CLIExtensionTemplate.png\")\nset(EXTENSION_SCREENSHOTURLS \"https://www.example.com/Slicer/Extensions/CLIExtensionTemplate/Screenshots/1.png\")\nset(EXTENSION_DEPENDS \"NA\") # Specified as a list or \"NA\" if no dependencies\n```\n\n----------------------------------------\n\nTITLE: Including Macro Build Scripted Module\nDESCRIPTION: This line includes the CMake macro for building scripted modules in Slicer. It's a prerequisite for using the `slicerMacroBuildScriptedModule` function.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Testing/Python/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(SlicerMacroBuildScriptedModule)\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode command line tools - console\nDESCRIPTION: This command installs the Xcode command line tools, which are required for building Slicer on macOS.  It's necessary for compiling C/C++ code and for various other build-related tasks.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/macos.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Setting Python Resources Variable (CMake)\nDESCRIPTION: Sets an empty list to store Python resources related to colors. In this case, COLORS_PYTHON_RESOURCES is empty, suggesting no specific Python resources are initially required.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/Testing/Python/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(COLORS_PYTHON_RESOURCES\n  )\n```\n\n----------------------------------------\n\nTITLE: Define Source Files in CMake\nDESCRIPTION: Specifies the source files (.cxx and .h) that comprise the plugin. These files implement the functionality of the Qt Designer plugins.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_SRCS\n  qMRMLWidgetsAbstractPlugin.cxx\n  qMRMLWidgetsAbstractPlugin.h\n  qMRMLWidgetsPlugin.cxx\n  qMRMLWidgetsPlugin.h\n\n  qMRMLCheckableNodeComboBoxPlugin.cxx\n  qMRMLCheckableNodeComboBoxPlugin.h\n  qMRMLClipNodeDisplayWidgetPlugin.cxx\n  qMRMLClipNodeDisplayWidgetPlugin.h\n  qMRMLClipNodeWidgetPlugin.cxx\n  qMRMLClipNodeWidgetPlugin.h\n  qMRMLCollapsibleButtonPlugin.cxx\n  qMRMLCollapsibleButtonPlugin.h\n  qMRMLColorTableComboBoxPlugin.cxx\n  qMRMLColorTableComboBoxPlugin.h\n  qMRMLCoordinatesWidgetPlugin.cxx\n  qMRMLCoordinatesWidgetPlugin.h\n  qMRMLDisplayNodeViewComboBoxPlugin.cxx\n  qMRMLDisplayNodeViewComboBoxPlugin.h\n  qMRMLDisplayNodeWidgetPlugin.cxx\n  qMRMLDisplayNodeWidgetPlugin.h\n  qMRMLEventBrokerWidgetPlugin.cxx\n  qMRMLEventBrokerWidgetPlugin.h\n  qMRMLLabelComboBoxPlugin.cxx\n  qMRMLLabelComboBoxPlugin.h\n  qMRMLLayoutWidgetPlugin.cxx\n  qMRMLLayoutWidgetPlugin.h\n  qMRMLLinearTransformSliderPlugin.cxx\n  qMRMLLinearTransformSliderPlugin.h\n  qMRMLListWidgetPlugin.cxx\n  qMRMLListWidgetPlugin.h\n  qMRMLMatrixWidgetPlugin.cxx\n  qMRMLMatrixWidgetPlugin.h\n  qMRMLModelInfoWidgetPlugin.cxx\n  qMRMLModelInfoWidgetPlugin.h\n  qMRMLNavigationViewPlugin.cxx\n  qMRMLNavigationViewPlugin.h\n  qMRMLNodeAttributeTableViewPlugin.cxx\n  qMRMLNodeAttributeTableViewPlugin.h\n  qMRMLNodeAttributeTableWidgetPlugin.cxx\n  qMRMLNodeAttributeTableWidgetPlugin.h\n  qMRMLNodeComboBoxPlugin.cxx\n  qMRMLNodeComboBoxPlugin.h\n  qMRMLPlotViewControllerWidgetPlugin.cxx\n  qMRMLPlotViewControllerWidgetPlugin.h\n  qMRMLPlotWidgetPlugin.cxx\n  qMRMLPlotWidgetPlugin.h\n  qMRMLRangeWidgetPlugin.cxx\n  qMRMLRangeWidgetPlugin.h\n  qMRMLROIWidgetPlugin.cxx\n  qMRMLROIWidgetPlugin.h\n  qMRMLScalarInvariantComboBoxPlugin.cxx\n  qMRMLScalarInvariantComboBoxPlugin.h\n  qMRMLScalarsDisplayWidgetPlugin.cxx\n  qMRMLScalarsDisplayWidgetPlugin.h\n  qMRMLSceneFactoryWidgetPlugin.cxx\n  qMRMLSceneFactoryWidgetPlugin.h\n  qMRMLSliceControllerWidgetPlugin.cxx\n  qMRMLSliceControllerWidgetPlugin.h\n  qMRMLSliceInformationWidgetPlugin.cxx\n  qMRMLSliceInformationWidgetPlugin.h\n  qMRMLSliceVerticalControllerWidgetPlugin.cxx\n  qMRMLSliceVerticalControllerWidgetPlugin.h\n  qMRMLSliceWidgetPlugin.cxx\n  qMRMLSliceWidgetPlugin.h\n  qMRMLSliderWidgetPlugin.cxx\n  qMRMLSliderWidgetPlugin.h\n  qMRMLSpinBoxPlugin.cxx\n  qMRMLSpinBoxPlugin.h\n  qMRMLTableViewPlugin.cxx\n  qMRMLTableViewPlugin.h\n  qMRMLThreeDViewInformationWidgetPlugin.cxx\n  qMRMLThreeDViewInformationWidgetPlugin.h\n  qMRMLThreeDViewPlugin.cxx\n  qMRMLThreeDViewPlugin.h\n  qMRMLTransformSlidersPlugin.cxx\n  qMRMLTransformSlidersPlugin.h\n  qMRMLTreeViewPlugin.cxx\n  qMRMLTreeViewPlugin.h\n  qMRMLVolumeInfoWidgetPlugin.cxx\n  qMRMLVolumeInfoWidgetPlugin.h\n  qMRMLVolumeThresholdWidgetPlugin.cxx\n  qMRMLVolumeThresholdWidgetPlugin.h\n  qMRMLWidgetPlugin.cxx\n  qMRMLWidgetPlugin.h\n  qMRMLWindowLevelWidgetPlugin.cxx\n  qMRMLWindowLevelWidgetPlugin.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding Qt and Checking Version CMake\nDESCRIPTION: Includes the `SlicerBlockFindQtAndCheckVersion` module to locate Qt and verify its version. It also marks Qt as a superbuild dependency using `mark_as_superbuild`. Sets `Slicer_HAVE_QT5` and `Slicer_HAVE_WEBKIT_SUPPORT` variables.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_46\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(SlicerBlockFindQtAndCheckVersion)\n  mark_as_superbuild(VARS Qt5_DIR LABELS \"FIND_PACKAGE\")\n\nset(Slicer_HAVE_QT5 1)\n    set(Slicer_HAVE_WEBKIT_SUPPORT 0)\n```\n\n----------------------------------------\n\nTITLE: Finding ITK Package\nDESCRIPTION: Finds the ITK (Insight Toolkit) package with specified components. It defines the required ITK components and includes the ITK use file. Conditional logic disables ITK factory register managers based on the ITK version.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ExtractSkeleton/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKIOImageBase\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Project Definition\nDESCRIPTION: Defines the project name. This is the top-level project name used by CMake.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Extensions/SuperBuild/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(TemplateKey)\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name CMake\nDESCRIPTION: Defines the module name and converts it to uppercase for use in other variables. This is a fundamental step in organizing and identifying the module within the CMake build system.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/ViewControllers/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME ViewControllers)\n\nstring(TOUPPER ${MODULE_NAME} MODULE_NAME_UPPER)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories\nDESCRIPTION: This snippet adds subdirectories for Logic, SubjectHierarchyPlugins, and Widgets. These subdirectories likely contain CMakeLists.txt files that define how to build the components within each directory. Each subdirectory represents a sub-module of the parent Plots module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Plots/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Logic)\nadd_subdirectory(SubjectHierarchyPlugins)\nadd_subdirectory(Widgets)\n```\n\n----------------------------------------\n\nTITLE: Setting VTK Wrapping Hints (CMake)\nDESCRIPTION: This sets the variable `VTK_WRAP_HINTS` to point to a directory containing hints for the wrapping process. This assists in automatically generating bindings for languages like Tcl, Python, and Java. The hints directory contains files that guide the wrapping process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Core/CMakeLists.txt#_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nset(VTK_WRAP_HINTS ${CMAKE_CURRENT_SOURCE_DIR}/Wrapping/Tcl/hints)\n```\n\n----------------------------------------\n\nTITLE: Setting Project and Kit Variables in CMake\nDESCRIPTION: This snippet sets the project name, kit name, export directive, and include directories for the module. It establishes the foundation for defining the build parameters and dependencies of the qSlicer module widgets.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/Widgets/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(qSlicer${MODULE_NAME}ModuleWidgets)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"Q_SLICER_QTMODULES_${MODULE_NAME_UPPER}_WIDGETS_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${qSlicerSubjectHierarchyModuleWidgets_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Python: Overriding Slicer Revision in Extensions Manager\nDESCRIPTION: This Python snippet demonstrates how to override the Slicer revision in the Extensions Manager. This is useful for testing purposes when developing extensions against development versions of Slicer. It sets the `slicerRevision` attribute of the `extensionsManagerModel` to a specific revision number.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/extensions.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> extensionManagerModel = slicer.app.extensionsManagerModel()\n>>> extensionManagerModel.slicerRevision = \"25742\"\n```\n\n----------------------------------------\n\nTITLE: Executing Simple Tests - CMake\nDESCRIPTION: Executes individual tests using the simple_test macro. This macro likely creates a CMake target for each test and handles its execution. The second test case includes an input file (cube.mrml).\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nsimple_test( qMRMLModelDisplayNodeWidgetTest1 )\nsimple_test( qMRMLModelDisplayNodeWidgetTest2 ${INPUT}/cube.mrml )\n```\n\n----------------------------------------\n\nTITLE: Launching Qt Creator via Slicer in Linux\nDESCRIPTION: This bash script launches Qt Creator through the Slicer executable to set up the environment correctly.  This ensures Qt Creator can design UIs using CTK and Slicer custom designer plugins. It requires the paths to the Slicer build directory and Qt Creator.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/debugging/qtcreatorcpp.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd /path/to/Slicer-Superbuild/Slicer-build\n./Slicer --launch /path/to/qtcreator\n```\n\n----------------------------------------\n\nTITLE: Setting Module Resources in CMake\nDESCRIPTION: This section specifies the resource file (.qrc) that contains resources used by the module, such as images, icons, and other data files. The qrc file is compiled into a binary format that can be accessed by the application at runtime.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_RESOURCES\n  Resources/qSlicer${MODULE_NAME}Module.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Set Test Sources\nDESCRIPTION: This snippet defines a list of C++ source files to be included in the test suite. The `KIT_TEST_SRCS` variable is assigned a list of filenames using the `set` command. These are the actual test implementations to be compiled and executed.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Plots/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT_TEST_SRCS\n  qMRMLPlotPropertiesWidgetTest1.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Library Folder CMake\nDESCRIPTION: This snippet configures the folder property for the library target in the IDE. It checks if `${PROJECT_NAME}_FOLDER` is defined and not empty. If so, it sets the `FOLDER` property of the library to the value of `${PROJECT_NAME}_FOLDER`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Logic/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_FOLDER)\n  set(${PROJECT_NAME}_FOLDER ${PROJECT_NAME})\nendif()\nif(NOT \"${${PROJECT_NAME}_FOLDER}\" STREQUAL \"\")\n  set_target_properties(${lib_name} PROPERTIES FOLDER ${${PROJECT_NAME}_FOLDER})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Launching Slicer using 'start' command (Console)\nDESCRIPTION: Launches Slicer and opens a specified file, utilizing the `start` command on Windows. This method relies on the Slicer application being registered during installation.  No additional dependencies are required besides Slicer and a valid file path.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nstart Slicer c:\\some\\folder\\MRHead.nrrd\n```\n\n----------------------------------------\n\nTITLE: Set Export Directive\nDESCRIPTION: Defines the export directive, which controls symbol visibility for the library. This macro allows symbols (classes, functions, etc.) to be marked for export, making them accessible from other modules or applications.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/VTKWidgets/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_VTKWIDGETS_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Finding ITK Package with Components\nDESCRIPTION: Finds the ITK package and specifies the required components for the SimpleRegionGrowingSegmentation module, including ITKCurvatureFlow, ITKIOImageBase, ITKImageFilterBase, and ITKRegionGrowing. It includes the ITK use file after finding the package.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/SimpleRegionGrowingSegmentation/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKCurvatureFlow\n  ITKIOImageBase\n  ITKImageFilterBase\n  ITKRegionGrowing\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Set Python Scripts (CMake)\nDESCRIPTION: Defines a list of Python scripts associated with the module.  These scripts are referenced by the `slicerMacroBuildScriptedModule` macro. No external dependencies are explicitly listed, but these files are dependencies for the build.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOMLib/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_PYTHON_SCRIPTS\n  __init__\n  DICOMBrowser\n  DICOMExportScalarVolume\n  DICOMExportScene\n  DICOMPlugin\n  DICOMPluginSelector\n  DICOMProcesses\n  DICOMRecentActivityWidget\n  DICOMSendDialog\n  DICOMUtils\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for Modules\nDESCRIPTION: This snippet adds subdirectories containing module definitions to the build process. Specifically, it adds 'SuperCLIModuleTemplate' and 'SuperLoadableModuleTemplate'. The '## NEXT_MODULE' comment suggests that additional module subdirectories will be added in the future.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\n# Extension modules\nadd_subdirectory(SuperCLIModuleTemplate)\nadd_subdirectory(SuperLoadableModuleTemplate)\n## NEXT_MODULE\n```\n\n----------------------------------------\n\nTITLE: Project Definition and Variable Initialization\nDESCRIPTION: Defines the project name and initializes variables to store include directories, source files, and target libraries. The project name is constructed using the module name. Export directive is also configured for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(qSlicer${MODULE_NAME}SubjectHierarchyPlugins)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"Q_SLICER_${MODULE_NAME_UPPER}_SUBJECT_HIERARCHY_PLUGINS_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Show a volume in slice views in Slicer (Python)\nDESCRIPTION: This code shows how to display a volume in slice views using different methods. It includes showing the volume in all visible views, selected views, and views where volume selection propagation is enabled. It assumes `YourVolumeNode` is an existing volume node.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_30\n\nLANGUAGE: Python\nCODE:\n```\nvolumeNode = slicer.util.getNode(\"YourVolumeNode\")\nslicer.util.setSliceViewerLayers(background=volumeNode)\n```\n\nLANGUAGE: Python\nCODE:\n```\nvolumeNode = slicer.util.getNode(\"YourVolumeNode\")\napplicationLogic = slicer.app.applicationLogic()\nselectionNode = applicationLogic.GetSelectionNode()\nselectionNode.SetSecondaryVolumeID(volumeNode.GetID())\napplicationLogic.PropagateForegroundVolumeSelection(0)\n```\n\nLANGUAGE: Python\nCODE:\n```\nn =  slicer.util.getNode(\"YourVolumeNode\")\nfor color in [\"Red\", \"Yellow\", \"Green\"]:\n  slicer.app.layoutManager().sliceWidget(color).sliceLogic().GetSliceCompositeNode().SetForegroundVolumeID(n.GetID())\n```\n\n----------------------------------------\n\nTITLE: Enable window/level adjustment via mouse drag in Slicer (Python)\nDESCRIPTION: This code activates the window/level adjustment mode in Slicer, allowing users to modify the brightness and contrast of the displayed image by left-clicking and dragging the mouse in a slice view. It depends on slicer interaction node.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_26\n\nLANGUAGE: Python\nCODE:\n```\nslicer.app.applicationLogic().GetInteractionNode().SetCurrentInteractionMode(slicer.vtkMRMLInteractionNode.AdjustWindowLevel)\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory\nDESCRIPTION: Conditionally adds the Testing subdirectory to the build process if the `BUILD_TESTING` variable is enabled. This allows for running unit tests and integration tests for the module. The `add_subdirectory` command includes the Testing directory and its CMakeLists.txt file in the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Units/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building CLI with SEMMacroBuildCLI in CMake\nDESCRIPTION: Uses the SEMMacroBuildCLI macro to build the command-line interface (CLI) for the module. It sets the name of the CLI to the module name, includes a logo header, and specifies the ITK libraries as target libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CheckerBoardFilter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/NAMICLogo.h\n  TARGET_LIBRARIES ${ITK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module MOC Sources in CMake\nDESCRIPTION: Defines the header files that require processing by the Meta-Object Compiler (MOC). These headers contain Qt-specific macros for signals, slots, and other meta-object features.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_MOC_SRCS\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  qSlicer${MODULE_NAME}Reader.h\n  qSlicer${MODULE_NAME}IOOptionsWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Limit volume rendering to ROI - C++\nDESCRIPTION: Limits volume rendering to a specified region of interest (ROI) using C++. Requires an existing ROI node and volume rendering display node. The cropping flag must also be enabled for the ROI to take effect.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_46\n\nLANGUAGE: C++\nCODE:\n```\nvtkMRMLMarkupsROINode* roiNode =...\nvtkMRMLVolumeRenderingDisplayNode* displayNode = ...\ndisplayNode->SetAndObserveROINodeID(roiNode->GetID());\ndisplayNode->SetCroppingEnabled(1);\n```\n\n----------------------------------------\n\nTITLE: Building CLI using SEMMacroBuildCLI\nDESCRIPTION: This snippet uses the `SEMMacroBuildCLI` macro to build the command line interface (CLI) for the module. It specifies the module name, logo header, and target libraries (ITK_LIBRARIES).\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/VotingBinaryHoleFillingImageFilter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/ITKLogo.h\n  TARGET_LIBRARIES ${ITK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Conditional Doxygen Execution Warning\nDESCRIPTION: This snippet checks if the `DOXYGEN_FOUND` variable is false or if `DOXYGEN_DOT_FOUND` is also false, then displays a warning message indicating that documentation will not be created due to missing Dot (Graphviz).\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Doxygen/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n  else()\n    message( WARNING\n      \"Warning: Dot not found - Documentation will not be created\"\n      )\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting module Python resources\nDESCRIPTION: This snippet defines the Python resources (e.g., icons) associated with the module. It creates a list of resource files.  Specifically, it includes an icon file located in the Resources/Icons directory, named after the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/ScriptedLoadableExtensionTemplate/ScriptedLoadableModuleTemplate/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_PYTHON_RESOURCES\n  Resources/Icons/${MODULE_NAME}.png\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories in CMake\nDESCRIPTION: This section sets the include directories required for compiling the module. It includes source and binary directories of related modules as well as the current binary directory, ensuring all necessary headers are accessible during compilation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/MRMLDM/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSlicer${MODULE_NAME}ModuleLogic_SOURCE_DIR}\n  ${vtkSlicer${MODULE_NAME}ModuleLogic_BINARY_DIR}\n  ${vtkSlicer${MODULE_NAME}ModuleMRML_SOURCE_DIR}\n  ${vtkSlicer${MODULE_NAME}ModuleMRML_BINARY_DIR}\n  ${vtkSlicer${MODULE_NAME}ModuleVTKWidgets_SOURCE_DIR}\n  ${vtkSlicer${MODULE_NAME}ModuleVTKWidgets_BINARY_DIR}\n  ${CMAKE_CURRENT_BINARY_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel Package\nDESCRIPTION: Finds the SlicerExecutionModel package, which provides utilities for building slicer executables. It requires the package to be found and includes its use file, which defines necessary macros and variables for building slicer modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ImageLabelCombine/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Setting Temporary and Input Directories CMake\nDESCRIPTION: This snippet defines variables for temporary and input directories used during the testing process. `TEMP` points to the directory where temporary files are stored, and `INPUT` specifies the location of input data required for the tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Testing/Cxx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(TEMP ${Slicer_BINARY_DIR}/Testing/Temporary)\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input)\n```\n\n----------------------------------------\n\nTITLE: Configuring bundled extension support\nDESCRIPTION: This snippet sets up support for bundled remote modules and extensions.  It configures a no-op SlicerConfig and SlicerConfigVersion for bundled projects and sets up the `Slicer_DIR` variable.  It allows for extensions to be specified via `REMOTE_MODULE` or `REMOTE_EXTENSION` labels or explicitly via the `Slicer_EXTENSION_SOURCE_DIRS` variable.  It also provides support for SuperBuild-type extensions, identifying them by the presence of a `SuperBuild` or `Superbuild` directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_73\n\nLANGUAGE: cmake\nCODE:\n```\nset(extensions_build_dir \"${Slicer_BINARY_DIR}/E\")\n\n# Configure a no-op SlicerConfig and SlicerConfigVersion for bundled projects\nset(Slicer_DIR ${extensions_build_dir})\nconfigure_file(\n  ${Slicer_SOURCE_DIR}/CMake/SlicerConfig.cmake.in\n  ${Slicer_DIR}/SlicerConfig.cmake @ONLY)\n\nconfigure_file(\n  ${Slicer_SOURCE_DIR}/CMake/SlicerConfigVersion.cmake.in\n  ${Slicer_DIR}/SlicerConfigVersion.cmake @ONLY)\n\n#\n# Directories can be set in three ways:\n#\n# (1) Automatically by specifying the label 'REMOTE_MODULE' when\n#     calling 'Slicer_Remote_Add' from SuperBuild.cmake.\n#\n# (2) Automatically by specifying the label 'REMOTE_EXTENSION' when\n#     calling 'Slicer_Remote_Add' from SuperBuild.cmake.\n#\n# (3) Explicitly by configuring the project using the following syntax:\n#  cmake -DSlicer_EXTENSION_SOURCE_DIRS:STRING=/path/to/ExtensionA;/path/to/ExtensionB /path/to/source/Slicer\n#\n\n#\n# Support for \"SuperBuild-type\" extension:\n#\n# * An extension is considered to be of type \"SuperBuild\" if a directory\n#   \"<extension_dir>/SuperBuild\" or \"<extension_dir>/Superbuild\" exists.\n#   Corresponding directory is appended to EXTERNAL_PROJECT_ADDITIONAL_DIRS.\n#\n# * If variable \"<extension_name>_EXTERNAL_PROJECT_EXCLUDE_ALL\" is set to TRUE, corresponding SuperBuild directory\n#   is not appended to EXTERNAL_PROJECT_ADDITIONAL_DIRS.\n#\n# * Associated external projects are globbed using expression of the form\n#   \"<extension_dir>/(SuperBuild|Superbuild)/External_*.cmake\".\n#\n# * List of external project names is extracted from the \"External_<projectName>.cmake\"\n#   files and appended to Slicer_DEPENDENCIES. This ensures they are build before Slicer inner build.\n```\n\n----------------------------------------\n\nTITLE: Setting Variables in CMake\nDESCRIPTION: This snippet sets several variables used throughout the CMake script. INPUT defines the input data directory, CLP defines the module name, and SEM_DATA_MANAGEMENT_TARGET specifies the data target, defaulting to the module name with 'Data' appended. These variables are used to configure build settings and test parameters.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/RobustStatisticsSegmenter/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input)\n\nset(CLP ${MODULE_NAME})\n\nif(NOT DEFINED SEM_DATA_MANAGEMENT_TARGET)\n  set(SEM_DATA_MANAGEMENT_TARGET ${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Test Source Files\nDESCRIPTION: This snippet defines the KIT_TEST_SRCS variable, which is a list of C++ source files to be included in the test suite. These files are likely specific tests related to the Core-Base module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/Logic/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT_TEST_SRCS\n  vtkDataIOManagerLogicTest1.cxx\n  vtkSlicerApplicationLogicTest1.cxx\n  vtkSlicerVersionConfigureTest1.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Module with Macro\nDESCRIPTION: Uses a Slicer macro to build the module, passing the name, export directive, include directories, source files, and target libraries as parameters. The macro encapsulates the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/MRML/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleMRML(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories\nDESCRIPTION: Adds subdirectories for SubjectHierarchyPlugins and SegmentStatisticsPlugins.  These subdirectories likely contain additional CMakeLists.txt files that define how to build the plugins.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/SegmentStatistics/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(SubjectHierarchyPlugins)\nadd_subdirectory(SegmentStatisticsPlugins)\n```\n\n----------------------------------------\n\nTITLE: Set Variables for Testing Environment - CMake\nDESCRIPTION: Defines variables for commonly used paths and names in the testing environment. These variables are used to locate input data, baseline images, temporary files, and the module name.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleDTIVolume/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(BASELINE ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Baseline)\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input)\nset(TEMP \"${Slicer_BINARY_DIR}/Testing/Temporary\")\n\nset(CLP ${MODULE_NAME})\n\nif(NOT DEFINED SEM_DATA_MANAGEMENT_TARGET)\n  set(SEM_DATA_MANAGEMENT_TARGET ${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory\nDESCRIPTION: This command adds the 'SegmentEditorEffects' subdirectory to the current CMake project.  This allows CMake to find and process the CMakeLists.txt file within that subdirectory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/EditorEffects/Python/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(SegmentEditorEffects)\n```\n\n----------------------------------------\n\nTITLE: Building Module Widgets CMake\nDESCRIPTION: This snippet uses the SlicerMacroBuildModuleWidgets macro to build the module, passing in all the previously defined variables such as source files, include directories, target libraries and resources. It also specifies that the module should be wrapped for PythonQt.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOMLib/Widgets/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nSlicerMacroBuildModuleWidgets(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  UI_SRCS ${${KIT}_UI_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  RESOURCES ${${KIT}_RESOURCES}\n  WRAP_PYTHONQT\n  )\n```\n\n----------------------------------------\n\nTITLE: Building CLI with SEMMacroBuildCLI\nDESCRIPTION: Uses the `SEMMacroBuildCLI` macro to configure the build for the CLIROITest module. It specifies the module name, logo header, target libraries (ModuleDescriptionParser, ITK, vtkTeem, MRMLCore, SlicerBaseCLI), include directories for these libraries, and indicates that the module should not be installed system-wide.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ROITest/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/NAMICLogo.h\n  TARGET_LIBRARIES\n    # ${VTK_LIBRARIES} # Not needed: All dependencies are transitively satisfied by other targets\n    ModuleDescriptionParser ${ITK_LIBRARIES}\n    vtkTeem\n    MRMLCore\n    SlicerBaseCLI\n  INCLUDE_DIRECTORIES\n    ${vtkTeem_INCLUDE_DIRS}\n    ${MRMLCore_INCLUDE_DIRS}\n    ${vtkITK_INCLUDE_DIRS}\n    ${SlicerBaseCLI_SOURCE_DIR} ${SlicerBaseCLI_BINARY_DIR}\n  NO_INSTALL\n  )\n```\n\n----------------------------------------\n\nTITLE: Find ITK Package\nDESCRIPTION: Finds the ITK package with specified components.  It requires ITK version 5.0 or greater and specifies the necessary ITK components.  The ITK_LIBRARIES and ITK_INCLUDE_DIRS are appended with ITKFactoryRegistration related variables.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkITK/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  GrowCut\n  ITKAnisotropicSmoothing\n  ITKCommon\n  ITKConnectedComponents\n  ITKDistanceMap\n  ITKIOGDCM\n  ITKIOGE\n  ITKIOImageBase\n  ITKImageCompose\n  ITKImageFilterBase\n  ITKImageFunction\n  ITKImageGrid\n  ITKLabelMap\n  ITKPath\n  ITKRegionGrowing\n  ITKThresholding\n  ITKVTK\n  # Needed for ITKv5 so that SimpleFastMutexLock is an alias to std::mutex in ITKv5\n  # once ITKv4 is not supported, then we can simply replace SimpleFastMutexLock with std::mutex\n  # the use the DeprecatedLib allows building without many preprocessor conditionals\n  # for ITKv5/ITKv4 differences.\n  ITKDeprecated\n  )\nfind_package(ITK 5.0 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\nlist(APPEND ITK_LIBRARIES ITKFactoryRegistration)\nlist(APPEND ITK_INCLUDE_DIRS ${ITKFactoryRegistration_INCLUDE_DIRS})\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Creating Test Source List\nDESCRIPTION: This snippet utilizes the `create_test_sourcelist` macro to create a source list for the tests, including the specified test sources and a generated C++ file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncreate_test_sourcelist(Tests ${KIT}CppTests.cxx\n  ${TEST_SOURCES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Variables for Plugin Build\nDESCRIPTION: This snippet sets CMake variables to define the components needed to build the Qt Designer plugin.  It defines the kit name, export directive, source files, moc files, and target libraries.  These variables are later used by the ctkMacroBuildQtDesignerPlugin macro.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT ${PROJECT_NAME}Plugins)\n\nset(${KIT}_EXPORT \"Q_SLICER_MODULE_${MODULE_NAME_UPPER}_WIDGETS_PLUGINS_EXPORT\")\n\nset(${KIT}_SRCS\n  qSlicer${MODULE_NAME}ModuleWidgetsAbstractPlugin.cxx\n  qSlicer${MODULE_NAME}ModuleWidgetsAbstractPlugin.h\n  qSlicer${MODULE_NAME}ModuleWidgetsPlugin.cxx\n  qSlicer${MODULE_NAME}ModuleWidgetsPlugin.h\n  qSlicerTableColumnPropertiesWidgetPlugin.cxx\n  qSlicerTableColumnPropertiesWidgetPlugin.h\n  )\n\nset(${KIT}_MOC_SRCS\n  qSlicer${MODULE_NAME}ModuleWidgetsPlugin.h\n  qSlicerTableColumnPropertiesWidgetPlugin.h\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  qSlicer${MODULE_NAME}ModuleWidgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Resources\nDESCRIPTION: Defines the list of resource files for the project. These files are typically Qt resource files (.qrc) that contain images, translations, and other resources.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT_resources\n  Resources/qSlicerBaseQTCore.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel in CMake\nDESCRIPTION: Locates the SlicerExecutionModel package, which is a prerequisite for building Slicer modules. It includes the necessary use file to define Slicer execution model related macros and functions.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/N4ITKBiasFieldCorrection/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Accessing Startup Working Path in C++\nDESCRIPTION: This C++ code snippet shows how to access the application's startup working path using the `qSlicerCoreApplication::startupWorkingPath()` method. This provides a reliable way to get the initial working directory in C++.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/advanced_topics.md#_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\nqSlicerCoreApplication::startupWorkingPath()\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory\nDESCRIPTION: Conditionally adds the 'Testing' subdirectory to the build if the BUILD_TESTING variable is enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/SubtractScalarVolumes/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding NumPy Python Test (CMake)\nDESCRIPTION: This CMake snippet conditionally adds a Python-based test named 'PythonSlicerSimpleNUMPYTest' to the build process. The test is added only if the 'Slicer_USE_NUMPY' variable is true and a Python executable is found. It executes the 'SimpleNUMPYTest.py' script using the Slicer launch command and the Python executable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(Slicer_USE_NUMPY AND PYTHON_EXECUTABLE)\n\n  add_test(PythonSlicerSimpleNUMPYTest ${Slicer_LAUNCH_COMMAND} ${PYTHON_EXECUTABLE} ${Slicer_SOURCE_DIR}/Testing/SimpleNUMPYTest.py)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding LastConfigureStep Subdirectory (CMake)\nDESCRIPTION: Adds the `CMake/LastConfigureStep` subdirectory to the build process. This directory typically contains commands that should be executed as the last step during the configuration phase.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_85\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(CMake/LastConfigureStep)\n```\n\n----------------------------------------\n\nTITLE: Setting Module Source Files - CMake\nDESCRIPTION: This code defines the source files for the module, including C++ source and header files for the module itself, its widget, and the reader. The files listed here are used in the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_SRCS\n  qSlicer${MODULE_NAME}Module.cxx\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.cxx\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  qSlicer${MODULE_NAME}Reader.cxx\n  qSlicer${MODULE_NAME}Reader.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Set Source Files - CMake\nDESCRIPTION: Lists the C++ source files (.cxx and .h) that make up the module's widgets. These files contain the implementation of the widgets' functionality.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/Widgets/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  qMRMLDoubleSpinBoxDelegate.h\n  qMRMLDoubleSpinBoxDelegate.cxx\n  qMRMLSegmentsModel.cxx\n  qMRMLSegmentsModel.h\n  qMRMLSegmentsModel_p.h\n  qMRMLSegmentsTableView.cxx\n  qMRMLSegmentsTableView.h\n  qMRMLSegmentationConversionParametersWidget.cxx\n  qMRMLSegmentationConversionParametersWidget.h\n  qMRMLSegmentationDisplayNodeWidget.cxx\n  qMRMLSegmentationDisplayNodeWidget.h\n  qMRMLSegmentationFileExportWidget.cxx\n  qMRMLSegmentationFileExportWidget.h\n  qMRMLSegmentationGeometryWidget.cxx\n  qMRMLSegmentationGeometryWidget.h\n  qMRMLSegmentationGeometryDialog.cxx\n  qMRMLSegmentationGeometryDialog.h\n  qMRMLSegmentationRepresentationsListView.cxx\n  qMRMLSegmentationRepresentationsListView.h\n  qMRMLSegmentationShow3DButton.h\n  qMRMLSegmentationShow3DButton.cxx\n  qMRMLSegmentEditorWidget.cxx\n  qMRMLSegmentEditorWidget.h\n  qMRMLSortFilterSegmentsProxyModel.cxx\n  qMRMLSortFilterSegmentsProxyModel.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Target\nDESCRIPTION: This snippet adds an external data target if the SEM_DATA_MANAGEMENT_TARGET variable is equal to the module data name. This ensures that data dependencies are properly managed for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CreateDICOMSeries/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Update CMake Module Path with CTK CMake\nDESCRIPTION: Updates the CMake module path to include CTK's CMake directories. This allows CMake to find CTK's modules and utilities.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_64\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_MODULE_PATH\n  ${CTK_CMAKE_DIR}\n  ${CMAKE_MODULE_PATH}\n  ${CTK_CMAKE_UTILITIES_DIR})\n```\n\n----------------------------------------\n\nTITLE: Running Python commands in Slicer (Console)\nDESCRIPTION: Executes Python commands within the Slicer environment without a graphical user interface. The `--testing`, `--no-splash`, and `--no-main-window` options suppress the GUI elements.  Slicer exits after command completion due to `--testing`.  Requires a functional Slicer installation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nSlicer.exe --python-code \"doSomething; doSomethingElse; etc.\" --testing --no-splash --no-main-window\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (CMake)\nDESCRIPTION: Sets the include directories for the module. This variable specifies the directories where the compiler should search for header files during compilation. In this case, it's initialized as an empty list, potentially to be populated elsewhere or to rely on system-wide include paths.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/CropVolume/MRML/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_INCLUDE_DIRECTORIES\n  )\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies on Fedora\nDESCRIPTION: This command installs the necessary dependencies for running 3D Slicer on Fedora. It uses the `dnf` package manager to install required libraries such as Mesa, libGL, libnsl, libXrender, Pulseaudio, NSS, libXcomposite, libXdamage, libXrandr, FTGL, libXcursor, libXi, libXtst, alsa-lib and Qt5 extras.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/getting_started.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install mesa-libGLU mesa-libGL libnsl libXrender pulseaudio-libs-glib2 nss libXcomposite libXdamage libXrandr ftgl libXcursor libXi libXtst alsa-lib qt5-qtx11extras\n```\n\n----------------------------------------\n\nTITLE: Set CMake Minimum Required Version\nDESCRIPTION: Specifies the minimum required CMake version for the project. This ensures that the CMake version used is compatible with the features used in the script.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkSegmentationCore/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16.3...3.19.7 FATAL_ERROR)\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name in CMake\nDESCRIPTION: This snippet sets the module name and its uppercase version for use in subsequent configurations. It defines the variable MODULE_NAME and MODULE_NAME_UPPER.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/Loadable/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME TemplateKey)\n\nstring(TOUPPER ${MODULE_NAME} MODULE_NAME_UPPER)\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory in CMake\nDESCRIPTION: Conditionally adds the Testing subdirectory to the build process if BUILD_TESTING is enabled.  This enables the inclusion of unit tests in the module's build and execution.  Requires BUILD_TESTING variable to be defined.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ThresholdScalarVolume/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Export Directive\nDESCRIPTION: Sets the `${KIT}_EXPORT_DIRECTIVE` variable, which defines the macro for exporting symbols from the library.  This is used when building shared libraries to control which symbols are visible outside the library. MODULE_NAME_UPPER is expected to be defined elsewhere.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_EXPORT_DIRECTIVE \"Q_SLICER_${MODULE_NAME_UPPER}_SUBJECT_HIERARCHY_PLUGINS_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Target\nDESCRIPTION: This snippet conditionally adds an external data target if `${SEM_DATA_MANAGEMENT_TARGET}` is equal to `${CLP}Data`. It uses `ExternalData_add_target` to define the target for downloading and managing external data dependencies.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/SubtractScalarVolumes/Testing/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: Specifies the include directories required for building the module. These directories contain header files for dependent modules and libraries like vtkSlicerColorsModuleMRML, vtkSlicerColorsModuleLogic, qSlicerSubjectHierarchyModuleWidgets, vtkSlicerSubjectHierarchyModuleLogic, qMRMLWidgets, MRMLLogic, and MRMLCore.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSlicerColorsModuleMRML_INCLUDE_DIRS}\n  ${vtkSlicerColorsModuleLogic_INCLUDE_DIRS}\n  ${qSlicerSubjectHierarchyModuleWidgets_INCLUDE_DIRS}\n  ${vtkSlicerSubjectHierarchyModuleLogic_INCLUDE_DIRS}\n  ${qMRMLWidgets_INCLUDE_DIRS}\n  ${MRMLLogic_INCLUDE_DIRS}\n  ${MRMLCore_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Variables for File Paths in CMake\nDESCRIPTION: This snippet sets CMake variables for commonly used file paths: baseline data directory, input data directory, and the module name (CLP). These variables are used later in the build configuration and test setup.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/SimpleRegionGrowingSegmentation/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(BASELINE ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Baseline)\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input)\n\nset(CLP ${MODULE_NAME})\n```\n\n----------------------------------------\n\nTITLE: Run Slicer with attach-process argument (Bash)\nDESCRIPTION: This command line argument launches Slicer and displays the process ID (PID) in a window before loading any modules. This simplifies the process of attaching GDB to the running Slicer instance, especially useful for debugging during the loading process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/debugging/linuxcpp.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ./Slicer --attach-process\n```\n\n----------------------------------------\n\nTITLE: Setting UI Source Files\nDESCRIPTION: Lists the user interface files (.ui) created with Qt Designer, which define the layout and widgets of the module's interface. These files are processed to generate C++ code for creating the UI.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_UI_SRCS\n  Resources/UI/qSlicer${MODULE_NAME}Module.ui\n  Resources/UI/qSlicer${MODULE_NAME}SettingsPanel.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries - CMake\nDESCRIPTION: This snippet defines the target libraries that the plugin depends on. These libraries provide necessary functionalities for the plugins. It also conditionally adds 'qSlicerBaseQTCLI' if 'Slicer_BUILD_CLI_SUPPORT' is enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTGUI/DesignerPlugins/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  qSlicerBaseQTGUI\n  )\nif(Slicer_BUILD_CLI_SUPPORT)\n  list(APPEND ${KIT}_TARGET_LIBRARIES\n    qSlicerBaseQTCLI\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name\nDESCRIPTION: Sets the module name to 'CropVolume' and converts it to uppercase for use in other variables. This ensures consistency in naming conventions throughout the module's build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/CropVolume/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME CropVolume)\n\nstring(TOUPPER ${MODULE_NAME} MODULE_NAME_UPPER)\n```\n\n----------------------------------------\n\nTITLE: Including SlicerCheckSourceTree Module\nDESCRIPTION: This line includes the `SlicerCheckSourceTree` CMake module. This module likely performs checks on the source tree to ensure that it is in a valid state for building.  This include statement doesn't define functionality but rather includes a separate file with potentially complex logic.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(SlicerCheckSourceTree)\n```\n\n----------------------------------------\n\nTITLE: Creating executable C and linking libraries\nDESCRIPTION: This snippet creates an executable named C and links it against the shared libraries B and A. The `add_executable` command creates the executable from the C.cxx source file. The `target_link_libraries` command specifies the dependencies of C, ensuring that B and A are linked when C is built.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMake/SlicerLinkerAsNeededFlagCheck/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(C C.cxx)\ntarget_link_libraries(C B A)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries\nDESCRIPTION: This CMake code block defines a variable `${MODULE_NAME}_TARGET_LIBRARIES` that lists the libraries required by the ProbeVolumeWithModel module. These libraries include ModuleDescriptionParser, MRMLCore, SlicerBaseCLI, vtkITK, VTK libraries, and vtkTeem.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ProbeVolumeWithModel/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${MODULE_NAME}_TARGET_LIBRARIES\n  ModuleDescriptionParser\n  MRMLCore\n  SlicerBaseCLI\n  vtkITK\n  ${VTK_LIBRARIES}\n  vtkTeem\n  )\n```\n\n----------------------------------------\n\nTITLE: Include Slicer Build Macro\nDESCRIPTION: This line includes a CMake macro from the Slicer build system, which is likely used to simplify the process of building loadable modules. The included file provides functions and variables that can be used to configure module-specific build settings.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${Slicer_CMAKE_DIR}/SlicerMacroBuildLoadableModule.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name and Uppercase Version - CMake\nDESCRIPTION: This snippet sets the MODULE_NAME variable to \"Terminologies\" and then creates an uppercase version of the name using the string(TOUPPER) command. This ensures that subsequent commands can reference both the lowercase and uppercase versions of the module name.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Terminologies/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME \"Terminologies\")\n\nstring(TOUPPER ${MODULE_NAME} MODULE_NAME_UPPER)\n```\n\n----------------------------------------\n\nTITLE: Setting MOC Source Files - CMake\nDESCRIPTION: Specifies the header files that require Qt's Meta Object Compiler (moc) to generate meta-object code. This is necessary for using Qt's signals and slots mechanism. qSlicerSubjectHierarchyColorLegendPlugin.h is listed here.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_MOC_SRCS\n  qSlicerSubjectHierarchyColorLegendPlugin.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Compute Surface Normals for Model\nDESCRIPTION: This snippet demonstrates how to compute consistent surface normals for a model using vtkTriangleFilter and vtkPolyDataNormals, and then adds the result as a new model node in Slicer.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ntriangle_filter = vtk.vtkTriangleFilter()\ntriangle_filter.SetInputConnection(extrude.GetOutputPort())\nnormals = vtk.vtkPolyDataNormals()\nnormals.SetInputConnection(triangle_filter.GetOutputPort())\nnormals.FlipNormalsOn()\n\n# Save result into new model node\nslicer.modules.models.logic().AddModel(normals.GetOutputPort())\n```\n\n----------------------------------------\n\nTITLE: Include Cxx Subdirectory (CMake)\nDESCRIPTION: This CMake command adds the `Cxx` directory to the build process. This assumes the `Cxx` directory contains its own CMakeLists.txt file that defines how to build its contents. No specific dependencies are mentioned but the `Cxx` directory is essential for the project.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Setting Additional Compiler Flags\nDESCRIPTION: This snippet defines variables for additional C and CXX compiler flags, allowing users to specify extra flags during the build process. These flags are cached and marked as advanced.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_31\n\nLANGUAGE: cmake\nCODE:\n```\nset(ADDITIONAL_C_FLAGS \"\" CACHE STRING \"Additional C Flags\")\nmark_as_advanced(ADDITIONAL_C_FLAGS)\nset(ADDITIONAL_CXX_FLAGS \"\" CACHE STRING \"Additional CXX Flags\")\nmark_as_advanced(ADDITIONAL_CXX_FLAGS)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Properties\nDESCRIPTION: This snippet sets the `RUN_SERIAL` property of the `vtkMRMLCameraDisplayableManagerTest1` test to `TRUE`. This ensures that the test is run serially, rather than in parallel. This can be necessary if the test depends on shared resources.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/DisplayableManager/Testing/Cxx/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nset_tests_properties(vtkMRMLCameraDisplayableManagerTest1 PROPERTIES RUN_SERIAL TRUE)\n```\n\n----------------------------------------\n\nTITLE: Setting Extension Dependencies in CMakeLists.txt (CMake)\nDESCRIPTION: This snippet demonstrates how to specify an extension dependency in the CMakeLists.txt file of an extension.  The `EXTENSION_DEPENDS` variable is set to the name of the extension that the current extension depends on. This ensures that the dependent extension is installed automatically.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/extensions.md#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(EXTENSION_DEPENDS Extension1)\n```\n\n----------------------------------------\n\nTITLE: Building Module Logic - CMake\nDESCRIPTION: This snippet utilizes the SlicerMacroBuildModuleLogic macro to build the module logic component. It passes in the name, export directive, include directories, source files, and target libraries as arguments to the macro.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Data/Logic/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleLogic(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Run GDB and follow forked process (Text)\nDESCRIPTION: These commands configure GDB to follow the forked `SlicerApp-real` process when debugging the Slicer launcher.  The `set follow-fork-mode child` command tells GDB to debug the child process (SlicerApp-real) instead of the parent process (Slicer).\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/debugging/linuxcpp.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n(gdb) set follow-fork-mode child\n(gdb) run\n```\n\n----------------------------------------\n\nTITLE: Defining project name and minimum CMake version\nDESCRIPTION: This snippet defines the project name and sets the minimum required CMake version to 3.16.3, allowing versions up to 3.19.7. It also specifies that encountering a version older than the minimum should result in a fatal error.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/CLI/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(MRMLCLI)\n\n#-----------------------------------------------------------------------------\ncmake_minimum_required(VERSION 3.16.3...3.19.7 FATAL_ERROR)\n#-----------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Install Headers\nDESCRIPTION: Installs the header files to the include directory if `${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT` is not defined or is false. The headers are installed as part of the Development component.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkSegmentationCore/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT)\n  set(${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT ON)\nendif()\nif(NOT ${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT)\n  file(GLOB headers \"${CMAKE_CURRENT_SOURCE_DIR}/*.(h|txx)\")\n  install(\n    FILES ${headers} ${CMAKE_CURRENT_BINARY_DIR}/${configure_header_file}\n    DESTINATION include/${PROJECT_NAME} COMPONENT Development)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Traverse Children of Subject Hierarchy Item - Python\nDESCRIPTION: This snippet demonstrates how to traverse the children of a subject hierarchy item using `vtkIdList`.  `parent` is the item ID whose children are being retrieved.  The `recursive` argument can be set to `True` for recursive querying.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/subjecthierarchy.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nchildren = vtk.vtkIdList()\nshNode.GetItemChildren(parent, children) # Add a third argument with value True for recursive query\nfor i in range(children.GetNumberOfIds()):\n  child = children.GetId(i)\n  ...\n```\n\n----------------------------------------\n\nTITLE: Hide Slicer Logo from Main Window - Python\nDESCRIPTION: This script hides the Slicer application logo from the main window, increasing vertical space for the module panel. It finds the child widget named \"LogoLabel\" within the main window and sets its visibility to 'False'.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nslicer.util.findChild(slicer.util.mainWindow(), \"LogoLabel\").visible = False\n```\n\n----------------------------------------\n\nTITLE: Include Slicer Macro Build Base Qt Library\nDESCRIPTION: This line includes a CMake macro that likely handles common tasks for building Qt-based libraries within the Slicer project. This simplifies the process of configuring and building Qt libraries by providing reusable functions and settings.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${Slicer_CMAKE_DIR}/SlicerMacroBuildBaseQtLibrary.cmake)\n```\n\n----------------------------------------\n\nTITLE: System Dependency Usage CMake\nDESCRIPTION: Iterates through a list of dependencies and checks if the `Slicer_USE_SYSTEM_${dep}` variable is set for each dependency. If it is, a message is printed to the console indicating that the system version of the dependency is being used.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_53\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(dep QT ${Slicer_DEPENDENCIES})\n  if(Slicer_USE_SYSTEM_${dep})\n    message(STATUS \"Using system ${dep}\")\n  endif()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Setting Module Source Files\nDESCRIPTION: This snippet lists the source files for the module. These files contain the C++ code that implements the module's functionality. The module contains .cxx and .h files for core functionality and for a module widget.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Plots/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_SRCS\n  qSlicer${MODULE_NAME}Module.cxx\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.cxx\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Files - CMake\nDESCRIPTION: This snippet specifies the source files (.cxx and .h) that make up the module's logic component.  These files contain the implementation of the module's functionality.  The compiler uses this list to build the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Logic/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_SRCS\n  vtkSlicer${MODULE_NAME}Logic.cxx\n  vtkSlicer${MODULE_NAME}Logic.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Register MRML Node with VTK Object\nDESCRIPTION: The `vtkSetMRMLObjectMacro` registers a MRML node with another VTK object without adding any observers. This macro establishes a connection between MRML nodes and other VTK objects, allowing them to interact without direct event observation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/mrml_overview.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Defining MOC Source Files - CMake\nDESCRIPTION: This snippet defines the header files that require the Meta-Object Compiler (MOC) to generate Qt meta-object code. It includes the header files for the plugins, which utilize Qt's signal and slot mechanism.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_MOC_SRCS\n  qSlicerSubjectHierarchySegmentationsPlugin.h\n  qSlicerSubjectHierarchySegmentsPlugin.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding and Including Slicer\nDESCRIPTION: This snippet uses `find_package` to locate the Slicer installation. It requires Slicer to be present. It then includes the Slicer use file and marks the Slicer directory as a SuperBuild dependency, ensuring that Slicer is built or located appropriately.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Slicer REQUIRED)\ninclude(${Slicer_USE_FILE})\nmark_as_superbuild(Slicer_DIR)\n```\n\n----------------------------------------\n\nTITLE: Debugging Extension with Third-Party DLLs (BAT)\nDESCRIPTION: This command launches Visual Studio to debug a Slicer extension that builds third-party DLLs. It specifies additional launcher settings and the extension's solution file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/debugging/windowscpp.md#_snippet_2\n\nLANGUAGE: bat\nCODE:\n```\n.\\SD\\Slicer-build\\Slicer.exe --VisualStudio --launcher-no-splash --launcher-additional-settings ./SlicerRT_D/inner-build/AdditionalLauncherSettings.ini c:\\d\\_Extensions\\SlicerRT_D\\inner-build\\SlicerRT.sln\n```\n\n----------------------------------------\n\nTITLE: Adding Simple Tests\nDESCRIPTION: This uses the `simple_test` macro to add two tests: `qMRMLMarkupsOptionsWidgetsFactoryTest` and `qMRMLSimpleMarkupsWidgetTest1`.  This macro is likely defined elsewhere to register the tests with the testing framework (e.g., CTest).\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nsimple_test( qMRMLMarkupsOptionsWidgetsFactoryTest )\nsimple_test( qMRMLSimpleMarkupsWidgetTest1 )\n```\n\n----------------------------------------\n\nTITLE: Setting Python Scripts for Displayable Manager (CMake)\nDESCRIPTION: This CMake command sets a variable containing a list of Python scripts related to the MRML Displayable Manager. These scripts will be processed later to generate executables. The scripts are located in the `mrmlDisplayableManager` subdirectory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/DisplayableManager/Python/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(displayableManager_PYTHON_SCRIPTS\n  mrmlDisplayableManager/vtkScriptedExampleDisplayableManager\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Export Directive in CMake\nDESCRIPTION: Sets the export directive for the library.  This is crucial for managing symbol visibility when the library is used by other projects.  It specifies the macro used to decorate classes and functions that should be accessible from outside the library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Core/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT_export_directive \"Q_SLICER_MODULES_CORE_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries for MRML Module in CMake\nDESCRIPTION: This snippet specifies the target libraries that the module depends on. In this case, it depends on MRML libraries, which provide the core MRML functionality used by the module. These libraries are linked to the module during the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/MRML/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  ${MRML_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Handling Transform Node Reference Changes in MRML\nDESCRIPTION: This snippet illustrates overriding the `OnTransformNodeReferenceChanged()` method to handle events triggered when a new transform is applied to the data node.  This allows custom actions to be performed when the transform associated with the node changes.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/mrml_overview.md#_snippet_18\n\nLANGUAGE: C++\nCODE:\n```\nvoid OnTransformNodeReferenceChanged(vtkMRMLTransformNode* transformNode)\n```\n\n----------------------------------------\n\nTITLE: Project Definition\nDESCRIPTION: Defines the project name as MRMLIDImageIO. This is the top-level definition for the project managed by CMake.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/IDImageIO/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(MRMLIDImageIO)\n```\n\n----------------------------------------\n\nTITLE: Setting Python Scripts\nDESCRIPTION: Specifies the Python scripts associated with the module. In this case, it sets the MODULE_PYTHON_SCRIPTS variable to the Python file \"CropVolumeSequence.py\".\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/CropVolumeSequence/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_PYTHON_SCRIPTS\n  ${MODULE_NAME}.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Temporary Directory\nDESCRIPTION: This snippet sets the TEMP variable, which is used to specify the temporary directory where test outputs are stored. The path is constructed relative to the Slicer binary directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/FiducialRegistration/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(TEMP ${Slicer_BINARY_DIR}/Testing/Temporary)\n```\n\n----------------------------------------\n\nTITLE: Customize View Menu with Allowlist - Python\nDESCRIPTION: This snippet demonstrates how to use an allowlist to customize the view menu, which pops up when right-clicking nodes in the 2D/3D views. It shows how to display the list of all available view context menu action names and how to hide all the other menu items and show only specific ones (e.g., \"Rename point\").\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/subjecthierarchy.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\npluginHandler = slicer.qSlicerSubjectHierarchyPluginHandler.instance()\npluginLogic = pluginHandler.pluginLogic()\n\n# Display list of all available view context menu action names.\n# This will print something like this: 'EditPropertiesAction', 'MouseModeViewTransformAction', 'MouseModeAdjustWindowLevelAction', 'MouseModePlaceAction', ...).\nprint(pluginLogic.registeredViewContextMenuActionNames)\n\n# Hide all the other menu items and show only \"Rename point\":\npluginLogic.allowedViewContextMenuActionNames = [\"RenamePointAction\"]\n```\n\n----------------------------------------\n\nTITLE: Adding Cxx Subdirectory - CMake\nDESCRIPTION: This command adds the 'Cxx' subdirectory to the current CMake project.  The CMakeLists.txt file in the 'Cxx' directory will be processed during the configuration step. This allows the build system to compile and link the code within the Cxx directory as part of the overall project.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/Logic/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Defining Python Scripts List (CMake)\nDESCRIPTION: This CMake snippet defines a list of Python scripts that are part of the Slicer project. These scripts are used for various functionalities within Slicer, such as i18n, logic, parameter node wrappers, scripted loadable modules, and utility functions. The `set` command creates the `Slicer_PYTHON_SCRIPTS` variable, storing the list of Python file paths relative to the source directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/Python/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(Slicer_PYTHON_SCRIPTS\n  slicer/__init__\n  slicer/i18n\n  slicer/logic\n  slicer/parameterNodeWrapper/__init__\n  slicer/parameterNodeWrapper/default\n  slicer/parameterNodeWrapper/guiCreation\n  slicer/parameterNodeWrapper/guiConnectors\n  slicer/parameterNodeWrapper/parameterInfo\n  slicer/parameterNodeWrapper/parameterPack\n  slicer/parameterNodeWrapper/serializers\n  slicer/parameterNodeWrapper/types\n  slicer/parameterNodeWrapper/util\n  slicer/parameterNodeWrapper/validators\n  slicer/parameterNodeWrapper/wrapper\n  slicer/ScriptedLoadableModule\n  slicer/slicerqt\n  slicer/testing\n  slicer/util\n  mrml\n  vtkAddon\n  vtkITK\n  vtkSegmentationCore\n  vtkTeem\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Target Libraries - CMake\nDESCRIPTION: This sets the target libraries that the Terminologies module depends on. These libraries, `vtkSlicer${MODULE_NAME}ModuleLogic` and `qSlicer${MODULE_NAME}ModuleWidgets`, are likely built in the Logic and Widgets subdirectories and provide the core functionality and UI elements for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Terminologies/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  qSlicer${MODULE_NAME}ModuleWidgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Set Target Libraries\nDESCRIPTION: Sets the target libraries that the module widgets depend on. These libraries provide the necessary functionality for the widgets to interact with the Slicer application and other modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/LoadableCustomMarkups/Widgets/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleMRML\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  qSlicerMarkupsModuleWidgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (CMake)\nDESCRIPTION: This snippet defines the include directories required to compile the library. These include directories contain header files for dependencies such as MRMLLogic, MRMLDisplayableManager, and qSlicerBaseQTCore.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTGUI/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Additional directories to include\nset(KIT_include_directories\n  ${MRMLLogic_INCLUDE_DIRS}\n  ${MRMLDisplayableManager_INCLUDE_DIRS}\n  ${qSlicerBaseQTCore_SOURCE_DIR}\n  ${qSlicerBaseQTCore_BINARY_DIR}\n  )\n```\n\n----------------------------------------\n\nTITLE: Building CLI with SEMMacroBuildCLI in CMake\nDESCRIPTION: Uses the SEMMacroBuildCLI macro to build the Command Line Interface (CLI) for the module. Requires the MODULE_NAME and ITK_LIBRARIES variables to be defined. Sets up necessary linking and build configurations.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ThresholdScalarVolume/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/ITKLogo.h\n  TARGET_LIBRARIES ${ITK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Running Simple Test\nDESCRIPTION: This CMake snippet executes a simple test using the 'simple_test' function, passing the test name, source directory, and scene file. It also sets the 'RUN_SERIAL' property to 'ON' for the test.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/Testing/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nsimple_test(${testname} ${Slicer_SOURCE_DIR} ${_scenefile})\nset_tests_properties(${testname} PROPERTIES RUN_SERIAL ON)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files\nDESCRIPTION: This snippet defines the source files that make up the plugin. It sets the `${KIT}_SRCS` variable to a list of source files, including \"qSlicerStylePlugin.cxx\" and \"qSlicerStylePlugin.h\". These source files are compiled and linked into the plugin.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTGUI/StylePlugins/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  qSlicerStylePlugin.cxx\n  qSlicerStylePlugin.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Processing MRML Events\nDESCRIPTION: This snippet demonstrates overriding the `ProcessMRMLEvents()` method to handle events related to a MRML object, such as transform modifications. It enables custom logic to react to specific events.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/mrml_overview.md#_snippet_24\n\nLANGUAGE: C++\nCODE:\n```\nvoid ProcessMRMLEvents(vtkObject * caller, unsigned long event, void* callData)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries for the Module\nDESCRIPTION: Defines the target libraries that the module depends on.  These libraries include VTK modules, MRML components, Qt libraries, and Slicer-specific logic.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  vtkSlicerSubjectHierarchyModuleLogic\n  qSlicerSubjectHierarchyModuleWidgets\n  MRMLCore\n  MRMLLogic\n  qMRMLWidgets\n  ${QT_LIBRARIES}\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Cxx Test Driver\nDESCRIPTION: This snippet configures the C++ test driver using the `slicerMacroConfigureModuleCxxTestDriver` macro. It specifies the name of the test, the source files, and whether to enable VTK debug leaks check.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Sequences/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroConfigureModuleCxxTestDriver(\n  NAME ${KIT}\n  SOURCES ${KIT_TEST_SRCS}\n  WITH_VTK_DEBUG_LEAKS_CHECK\n  )\n```\n\n----------------------------------------\n\nTITLE: Hide 3D View Controllers - Python\nDESCRIPTION: This code hides all 3D view controllers in the Slicer application. It loops through the available 3D views and sets the visibility of their controllers to False, which removes the controls from the user interface.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_69\n\nLANGUAGE: python\nCODE:\n```\nlm = slicer.app.layoutManager()\nfor viewIndex in range(slicer.app.layoutManager().threeDViewCount):\n  lm.threeDWidget(0).threeDController().setVisible(False)\n```\n\n----------------------------------------\n\nTITLE: Documenting Slicer Util Module\nDESCRIPTION: This snippet uses the `automodule` directive within reStructuredText to generate API documentation for the `slicer.util` module. It includes all members, even those not explicitly documented, and displays inheritance information.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/slicer.md#_snippet_5\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: slicer.util\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Include CLI Modules\nDESCRIPTION: Iterates through the list of CLI modules and includes each module's CMakeLists.txt file.  `slicer_is_cli_builtin_module_enabled` checks if the module is enabled, and `add_subdirectory` includes the module's CMakeLists.txt file if it is.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(SlicerCheckModuleEnabled)\n\nforeach(module ${cli_modules})\n  set(${module}_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/${module})\n  slicer_is_cli_builtin_module_enabled(${module} _build_module)\n  if(_build_module)\n    add_subdirectory(${module})\n  endif()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files in CMake\nDESCRIPTION: This snippet lists the source files for the module logic. It includes both the C++ implementation file (.cxx) and the header file (.h).  These files contain the core logic and definitions for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Cameras/Logic/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  vtkSlicer${MODULE_NAME}ModuleLogic.cxx\n  vtkSlicer${MODULE_NAME}ModuleLogic.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Resource Files in CMake\nDESCRIPTION: This snippet defines the resource files for the Annotations module. It specifies the qrc file, which contains embedded resources like images and UI definitions. These resources are packaged with the module. No external dependencies are required.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Annotations/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_RESOURCES\n  Resources/qSlicerAnnotationModule.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Set UI Source Files - CMake\nDESCRIPTION: Lists the Qt Designer UI files (.ui) that define the visual layout of the widgets. These files are processed to generate C++ code.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/Widgets/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_UI_SRCS\n  Resources/UI/qMRMLSegmentationRepresentationsListView.ui\n  Resources/UI/qMRMLSegmentationConversionParametersWidget.ui\n  Resources/UI/qMRMLSegmentEditorWidget.ui\n  Resources/UI/qMRMLSegmentationDisplayNodeWidget.ui\n  Resources/UI/qMRMLSegmentationFileExportWidget.ui\n  Resources/UI/qMRMLSegmentationGeometryWidget.ui\n  Resources/UI/qMRMLSegmentsTableView.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating symlink for Debian 10.12\nDESCRIPTION: This command creates a symbolic link to resolve a Qt platform plugin error on Debian 10.12 systems, allowing Slicer to initialize correctly. The specific library linked depends on the system's configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/getting_started.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nsudo ln -s /usr/lib/x86_64-linux-gnu/libxcb-util.so /usr/lib/x86_64-linux-gnu/libxcb-util.so.1\n```\n\nLANGUAGE: Shell\nCODE:\n```\nsudo ln -s /usr/lib/x86_64-linux-gnu/libxcb-util.so.0.0.0 /usr/lib/x86_64-linux-gnu/libxcb-util.so.1\n```\n\n----------------------------------------\n\nTITLE: Conditional Module Build Check CMake\nDESCRIPTION: This snippet checks if the SceneViews module is enabled using the `slicer_is_loadable_builtin_module_enabled` macro. The result is stored in the `_build_scene_views_module` variable, which is subsequently used to conditionally include or exclude components related to SceneViews.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Testing/Cxx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nslicer_is_loadable_builtin_module_enabled(\"SceneViews\" _build_scene_views_module)\n```\n\n----------------------------------------\n\nTITLE: Setting Module MOC Sources - CMake\nDESCRIPTION: This snippet defines the header files that need to be processed by the Meta-Object Compiler (MOC). The MOC generates code required for Qt's signal and slot mechanism.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_MOC_SRCS\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  qSlicer${MODULE_NAME}Reader.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Executable and Linking Libraries in CMake\nDESCRIPTION: This snippet creates an executable target named `${KIT}CxxTests` from the specified source files (`${Tests}`). It links the target against the `${KIT}` library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/Widgets/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nctk_add_executable_utf8(${KIT}CxxTests ${Tests})\ntarget_link_libraries(${KIT}CxxTests ${KIT} )\nset_target_properties(${KIT}CxxTests PROPERTIES FOLDER \"Module-${MODULE_NAME}\")\n```\n\n----------------------------------------\n\nTITLE: Define Target Libraries\nDESCRIPTION: Defines the target libraries that the module logic component depends on. This section lists the external libraries and other Slicer modules that are required for building and running the logic.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/CropVolume/Logic/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  ${ITK_LIBRARIES}\n  vtkSlicer${MODULE_NAME}ModuleMRML\n  vtkSlicerMarkupsModuleMRML\n  vtkSlicerVolumesModuleLogic\n  )\n```\n\n----------------------------------------\n\nTITLE: Applying Transforms to MRML Nodes\nDESCRIPTION: This snippet demonstrates how to override the `ApplyTransform()` method, which is called when a transform is hardened.  The method takes a `vtkAbstractTransform` pointer as input and applies the transformation to the node's data.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/mrml_overview.md#_snippet_19\n\nLANGUAGE: C++\nCODE:\n```\nvoid ApplyTransform(vtkAbstractTransform* transform)\n```\n\n----------------------------------------\n\nTITLE: Disable Slice Browsing - Python\nDESCRIPTION: This code snippet disables slice browsing using the mouse wheel and keyboard shortcuts in a specified slice viewer (e.g., the Red slice viewer). It accesses the interactor observer and disables the `BrowseSlice` action.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_67\n\nLANGUAGE: python\nCODE:\n```\ninteractorObserver = slicer.app.layoutManager().sliceWidget(\"Red\").sliceView().interactorObserver()\ninteractorObserver.SetActionEnabled(interactorStyle.BrowseSlice, False)\n```\n\n----------------------------------------\n\nTITLE: Project Initialization\nDESCRIPTION: Initializes the project name using the `project()` command in CMake. This sets the top-level project name, which can be used in other parts of the CMake configuration. MODULE_NAME is expected to be defined elsewhere.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(qSlicer${MODULE_NAME}SubjectHierarchyPlugins)\n```\n\n----------------------------------------\n\nTITLE: Add Python Unit Test to Slicer Module (CMake)\nDESCRIPTION: This snippet uses the `slicer_add_python_unittest` CMake macro to add a Python unit test script to a Slicer module. The macro takes the test script's path as an argument. It assumes that the `MODULE_NAME` variable is defined elsewhere in the CMake configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/ScriptedLoadableExtensionTemplate/ScriptedLoadableModuleTemplate/Testing/Python/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n#slicer_add_python_unittest(SCRIPT ${MODULE_NAME}ModuleTest.py)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: Defines the source files for the module, including both C++ source (.cxx) and header (.h) files.  This includes the main module class and widget class.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Cameras/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_SRCS\n  qSlicer${MODULE_NAME}Module.cxx\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.cxx\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Displaying Text in Slice View - Python\nDESCRIPTION: This code snippet shows how to display text in a slice view by setting corner annotation. It retrieves the slice view, typically named \"Red\", \"Green\", or \"Yellow\", and sets the same properties as the 3D view example.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nview=slicer.app.layoutManager().sliceWidget(\"Red\").sliceView()\n```\n\n----------------------------------------\n\nTITLE: Overriding CanApplyNonLinearTransforms() for MRML Transform\nDESCRIPTION: This snippet shows how to override the `CanApplyNonLinearTransforms()` method to specify whether non-linear transforms can be applied to a custom MRML data type. It returns a boolean value based on the data type's capabilities.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/mrml_overview.md#_snippet_17\n\nLANGUAGE: C++\nCODE:\n```\nbool CanApplyNonLinearTransforms() const\n```\n\n----------------------------------------\n\nTITLE: Defining Target Libraries in CMake\nDESCRIPTION: This snippet defines the target libraries that the module logic depends on. Currently, it's empty, but would list external libraries or other Slicer modules that this module's logic requires for compilation and linking.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Cameras/Logic/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  )\n```\n\n----------------------------------------\n\nTITLE: Overriding GetNodeTagName() for MRML Save\nDESCRIPTION: This snippet shows how to override the `GetNodeTagName()` method to define a unique XML tag for a custom MRML node. This is necessary for saving the node to a Medical Reality Bundle (MRB) file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/mrml_overview.md#_snippet_15\n\nLANGUAGE: C++\nCODE:\n```\nconst char* GetNodeTagName()\n```\n\n----------------------------------------\n\nTITLE: Installing Homebrew - shell\nDESCRIPTION: This command installs Homebrew, a package manager for macOS. It uses `curl` to download the installation script from GitHub and then executes it using `bash`. Requires internet access.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/macos.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory CMake\nDESCRIPTION: This snippet conditionally adds a subdirectory named 'Testing' to the build process if the `BUILD_TESTING` variable is enabled. This allows for the inclusion of unit tests or other testing-related code as part of the module build.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GrayscaleFillHoleImageFilter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Default Storage Node for MRML\nDESCRIPTION: This snippet demonstrates overriding the `CreateDefaultStorageNode()` method to return a pointer to the default storage node type associated with a custom MRML node class. It provides a mechanism for defining how the node's data is stored.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/mrml_overview.md#_snippet_22\n\nLANGUAGE: C++\nCODE:\n```\nvtkMRMLStorageNode* CreateDefaultStorageNode()\n```\n\n----------------------------------------\n\nTITLE: Find SlicerExecutionModel - CMake\nDESCRIPTION: This snippet uses `find_package` to locate the SlicerExecutionModel package, which is required for Slicer execution. It then includes the SlicerExecutionModel's use file to make its variables and functions available.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GradientAnisotropicDiffusion/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Include SlicerInitializeBuildType\nDESCRIPTION: Includes the SlicerInitializeBuildType module. This module likely sets a default build type (e.g., Debug, Release) if none was specified by the user.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/CMake/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(SlicerInitializeBuildType)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries\nDESCRIPTION: This snippet sets the `target_libraries` variable to the value of `KIT`. This variable will be used later to link the test executable against the libraries defined by `KIT` which is ${PROJECT_NAME} or slicer.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTApp/Testing/Cxx/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(target_libraries ${KIT})\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Specifies the include directories needed to compile the module. These include directories contain header files required by the module's source code, including widget headers and logic module headers.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/CropVolume/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_INCLUDE_DIRECTORIES\n  ${CMAKE_CURRENT_SOURCE_DIR}/Widgets\n  ${CMAKE_CURRENT_BINARY_DIR}/Widgets\n  ${vtkSlicerVolumesModuleLogic_SOURCE_DIR}\n  ${vtkSlicerVolumesModuleLogic_BINARY_DIR}\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding ITK Package with Components\nDESCRIPTION: This snippet finds the ITK package and specifies required components.  It uses `find_package` to locate ITK and ensures that specific ITK components like ITKCommon and ITKVNL are available. Requires ITK 5.0 or later.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkTeem/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKCommon\n  ITKVNL\n  )\nfind_package(ITK 5.0 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Project Definition and Export Directive Setup\nDESCRIPTION: Defines the CMake project name and sets up the export directive for the module logic component. The export directive is used to control which symbols are exported from the built library, making them available to other modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/CropVolume/Logic/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleLogic)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_LOGIC_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Setting Module Target Libraries\nDESCRIPTION: Specifies the libraries that the module depends on. These libraries will be linked with the module during the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Reformat/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating Library\nDESCRIPTION: This snippet creates the library. It uses `add_library` to create a library target named `${lib_name}` from the source files specified in `${srcs}`.  It also defines the libraries to link against (`libs`) and links them to the target using `target_link_libraries`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkTeem/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nset(lib_name ${PROJECT_NAME})\n\nset(srcs ${vtkTeem_SRCS})\nadd_library(${lib_name} ${srcs})\n\nset(libs\n  itkvnl\n  ITKCommon\n  ${Teem_LIBRARIES}\n  ${VTK_LIBRARIES}\n  )\ntarget_link_libraries(${lib_name} ${libs})\n```\n\n----------------------------------------\n\nTITLE: Setting Project and Finding Dependencies\nDESCRIPTION: This snippet sets the project name, the kit name, and finds the RapidJSON package, which is a required dependency. It sets the export directive used when building the library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Terminologies/Logic/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleLogic)\n\nset(KIT ${PROJECT_NAME})\n\nfind_package(RapidJSON REQUIRED)\n\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_LOGIC_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Setting Python Scripts Variable - CMake\nDESCRIPTION: This snippet sets the variable `SegmentEditorEffects_PYTHON_SCRIPTS` to a list of Python script filenames. These scripts are part of the SegmentEditorEffects module in Slicer.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/EditorEffects/Python/SegmentEditorEffects/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SegmentEditorEffects_PYTHON_SCRIPTS\n  __init__\n  AbstractScriptedSegmentEditorEffect\n  AbstractScriptedSegmentEditorLabelEffect\n  AbstractScriptedSegmentEditorPaintEffect\n  AbstractScriptedSegmentEditorAutoCompleteEffect\n  SegmentEditorDrawEffect\n  SegmentEditorFillBetweenSlicesEffect\n  SegmentEditorGrowFromSeedsEffect\n  SegmentEditorHollowEffect\n  SegmentEditorIslandsEffect\n  SegmentEditorLevelTracingEffect\n  SegmentEditorLogicalEffect\n  SegmentEditorMarginEffect\n  SegmentEditorMaskVolumeEffect\n  SegmentEditorSmoothingEffect\n  SegmentEditorThresholdEffect\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Export Directive - CMake\nDESCRIPTION: This sets the module export directive for the Terminologies module. This directive is used to manage symbol visibility when building shared libraries, ensuring that only the necessary symbols are exported. It concatenates the prefix `Q_SLICER_QTMODULES_` with the uppercase module name and `_EXPORT` to create the directive.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Terminologies/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_EXPORT_DIRECTIVE \"Q_SLICER_QTMODULES_${MODULE_NAME_UPPER}_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Setting Project Name\nDESCRIPTION: This snippet sets the project name using the `set` command in CMake.  The `${PROJECT_NAME}` variable is used to define the project name for subsequent commands.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Sequences/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Set Slicer Extensions Track Qualifier\nDESCRIPTION: Sets the Slicer_EXTENSIONS_TRACK_QUALIFIER variable, which is used to specify the CDash track qualifier (e.g., master, 4.4). It defaults to \"main\" and is stored in the CMake cache.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/CMake/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(Slicer_EXTENSIONS_TRACK_QUALIFIER \"main\" CACHE STRING \"CDash extensions track qualifier (master, 4.4, ...)\")\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name\nDESCRIPTION: Sets the module name to CLIROITest using the `set` command. This variable is likely used in subsequent build configurations and macro calls to refer to the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ROITest/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_NAME CLIROITest)\n```\n\n----------------------------------------\n\nTITLE: Setting up project name and kit variables - CMake\nDESCRIPTION: This snippet defines the project name and initializes the `KIT` variable, which is used to represent the project name in subsequent configurations. It is a standard practice to define variables early on for reuse throughout the CMake file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/Widgets/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(qSlicer${MODULE_NAME}ModuleWidgets)\n\nset(KIT ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: CMake Subdirectory Inclusion\nDESCRIPTION: This CMake snippet includes the `Cxx` subdirectory.  It optionally includes the `Python` subdirectory based on the value of the `Slicer_USE_PYTHONQT` variable. This determines whether PythonQt support is enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SceneViews/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\nif(Slicer_USE_PYTHONQT)\n  add_subdirectory(Python)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Updating a list in parameterNodeWrapper, Python\nDESCRIPTION: This code snippet demonstrates how to update a list stored within a parameter node wrapper. It shows that modifying the list (using `append`) automatically updates the underlying `vtkMRMLScriptedModuleNode`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/parameter_nodes/advanced/caching.md#_snippet_0\n\nLANGUAGE: py\nCODE:\n```\nstrings = parameterNodeWrapperInstance.listOfStrings\nstrings.append(\"text\")\n# the parameter node is automatically updated to add \"text\" its list\n```\n\n----------------------------------------\n\nTITLE: Minimum CMake Version Requirement\nDESCRIPTION: This snippet specifies the minimum required CMake version for the project.  It enforces a specific range of CMake versions to ensure compatibility and access to necessary features.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkTeem/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16.3...3.19.7 FATAL_ERROR)\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel Package\nDESCRIPTION: Finds the SlicerExecutionModel package, which provides necessary functions for creating Slicer executables.  It requires the package and includes its use file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ExtractSkeleton/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Building Module Logic\nDESCRIPTION: This snippet uses a macro `SlicerMacroBuildModuleLogic` to build the module logic library. It passes in the name, export directive, include directories, source files, and target libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Terminologies/Logic/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nSlicerMacroBuildModuleLogic(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Set UI Source Files\nDESCRIPTION: Sets the UI files for the module widgets. These files are created using Qt Designer and define the layout and visual elements of the widgets.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/LoadableCustomMarkups/Widgets/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_UI_SRCS\n  Resources/UI/qMRMLMarkupsTestLineWidget.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name - CMake\nDESCRIPTION: This snippet sets the module name using the `set` command in CMake. The module name is used in subsequent steps for configuring the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleScalarVolume/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME ResampleScalarVolume)\n```\n\n----------------------------------------\n\nTITLE: Defining Export Directive (CMake)\nDESCRIPTION: Defines the export directive used for exporting symbols from the module. This controls the visibility of the module's API when used by other modules or applications.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Annotations/Logic/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_LOGIC_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Setting Variables for the Module - CMake\nDESCRIPTION: This snippet sets several CMake variables which are used to define the module name, baseline data paths, and input data paths. It also sets the SEM_DATA_MANAGEMENT_TARGET which manages external data dependencies.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GradientAnisotropicDiffusion/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(BASELINE ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Baseline)\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input)\n\nset(CLP ${MODULE_NAME})\n\nif(NOT DEFINED SEM_DATA_MANAGEMENT_TARGET)\n  set(SEM_DATA_MANAGEMENT_TARGET ${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Specifies the minimum required CMake version for the project. This ensures that the project can be built with a compatible CMake version.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16.3...3.19.7 FATAL_ERROR)\n```\n\n----------------------------------------\n\nTITLE: Setting Folder Property (CMake)\nDESCRIPTION: This snippet sets the folder property for the library target in the IDE or build system.  It uses the `${PROJECT_NAME}_FOLDER` variable to determine the folder name. This is used to organize targets within the IDE.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Core/CMakeLists.txt#_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_FOLDER)\n  set(${PROJECT_NAME}_FOLDER ${PROJECT_NAME})\nendif()\nif(NOT \"${${PROJECT_NAME}_FOLDER}\" STREQUAL \"\")\n  set_target_properties(${lib_name} PROPERTIES FOLDER ${${PROJECT_NAME}_FOLDER})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory - CMake\nDESCRIPTION: This snippet conditionally adds the 'Testing' subdirectory to the build if the BUILD_TESTING option is enabled. It allows to include the testing infrastructure within the project build.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleScalarVolume/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building the Qt Library with SlicerMacroBuildModuleQtLibrary\nDESCRIPTION: Uses the `SlicerMacroBuildModuleQtLibrary` macro to build the Qt library for the module.  It configures various aspects like export directive, folder structure, include directories, source files, target libraries, and enables Python wrapping. The `NAME` parameter sets the library name using the value of `KIT`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleQtLibrary(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  FOLDER \"Module-${MODULE_NAME}\"\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  UI_SRCS ${${KIT}_UI_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  RESOURCES ${${KIT}_RESOURCES}\n  WRAP_PYTHONQT\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Python Test for Color Terminology (CMake)\nDESCRIPTION: Adds a Python test for color table nodes with terminology information using the ColorTerminologiesTest.py script. Slicer is launched with the --disable-cli-modules argument.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/Testing/Python/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nslicer_add_python_test(SCRIPT ColorTerminologiesTest.py\n                       SLICER_ARGS --disable-cli-modules)\n```\n\n----------------------------------------\n\nTITLE: Set Module UI Source Files in CMake\nDESCRIPTION: Specifies the UI file(s) that define the module's graphical user interface.  These files are used by Qt's uic (UI compiler) to generate C++ code for the UI.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperLoadableModuleTemplate/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_UI_SRCS\n  Resources/UI/qSlicer${MODULE_NAME}ModuleWidget.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding ITK CMake package with components\nDESCRIPTION: Locates the ITK package with required components such as ITKIOImageBase, ITKImageFunction, ITKImageGrid, and ITKImageIntensity. Includes the ITK use file to provide access to the ITK library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/SubtractScalarVolumes/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKIOImageBase\n  ITKImageFunction\n  ITKImageGrid\n  ITKImageIntensity\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Test in CMake\nDESCRIPTION: This snippet uses `ExternalData_add_test` to define a test case. It specifies the test name, the command to execute, input data dependencies (from `${INPUT}`), and expected output data for comparison (from `${BASELINE}`). It also sets properties for the test labels. The test launches the `${CLP}Test` executable with specific command-line arguments and data files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/SimpleRegionGrowingSegmentation/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(testname ${CLP}Test)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  --compare DATA{${BASELINE}/${CLP}Test.nhdr,SimpleRegionGrowingSegmentationTest.raw.gz}\n            ${TEMP}/${CLP}Test.nhdr\n    ModuleEntryPoint\n    --smoothingIterations 1\n    --timestep 0.0625\n    --iterations 5\n    --multiplier 2.5\n    --neighborhood 1\n    --labelvalue 2\n    --seed 9.71622,-8.1,14.2189 --seed -12.9459,-8.1,18.577\n    DATA{${INPUT}/MRHeadResampled.nhdr,MRHeadResampled.raw.gz}\n    ${TEMP}/${CLP}Test.nhdr\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Setting Input and CLP Variables - CMake\nDESCRIPTION: This snippet sets the input data directory and the module name as variables. The SEM_DATA_MANAGEMENT_TARGET variable is conditionally defined if it is not already set.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/DiffusionTensorTest/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n#-----------------------------------------------------------------------------\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input)\n\nset(CLP ${MODULE_NAME})\n\nif(NOT DEFINED SEM_DATA_MANAGEMENT_TARGET)\n  set(SEM_DATA_MANAGEMENT_TARGET ${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory for Logic Component in CMake\nDESCRIPTION: Adds the 'Logic' subdirectory to the build process. This indicates that the logic component of the module resides in this subdirectory and needs to be compiled and linked.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SceneViews/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Logic)\n```\n\n----------------------------------------\n\nTITLE: Setting UI Source Files\nDESCRIPTION: Defines the UI files (.ui) that define the user interface of the module. These files are created using Qt Designer and are used to generate C++ code for the UI elements.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/CropVolume/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_UI_SRCS\n  Resources/UI/qSlicer${MODULE_NAME}ModuleWidget.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (CMake)\nDESCRIPTION: This snippet configures the include directories for the module logic build. It includes the current source and binary directories, as well as base Slicer include directories, and sets these as internal cache variables.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/Logic/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset (${KIT}_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR} ${Slicer_Base_INCLUDE_DIRS} CACHE INTERNAL \"\" FORCE)\n```\n\n----------------------------------------\n\nTITLE: Use GDB with exec-wrapper (Text)\nDESCRIPTION: These commands show how to use an exec-wrapper script with GDB to debug Slicer.  The `set exec-wrapper` command specifies the wrapper script to use.  The `exec-file` command specifies the executable file to debug (SlicerQT-real). The `run` command starts the execution.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/debugging/linuxcpp.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n(gdb) set exec-wrapper ./WrapSlicer\n(gdb) exec-file ./bin/SlicerQT-real\n(gdb) run\n```\n\n----------------------------------------\n\nTITLE: Find SlicerExecutionModel\nDESCRIPTION: This snippet finds the SlicerExecutionModel package, which provides infrastructure for executing command-line interfaces (CLIs) within Slicer. It includes the necessary USE file to make the found package available.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CurvatureAnisotropicDiffusion/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Set Module Name (CMake)\nDESCRIPTION: Sets the module name to DICOMLib and converts it to uppercase for use in other CMake variables. This is a common practice in CMake to define a variable for the module's name that can be reused throughout the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOMLib/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_NAME DICOMLib)\nstring(TOUPPER ${MODULE_NAME} MODULE_NAME_UPPER)\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Target in CMake\nDESCRIPTION: Conditionally adds the ExternalData target if the `SEM_DATA_MANAGEMENT_TARGET` is equal to `${CLP}Data`. This ensures that external data is downloaded and managed if the module is responsible for its own data.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MedianImageFilter/Testing/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Create/Update Volume\nDESCRIPTION: Creates or updates a volume from a .nrrd file. Only uncompressed 3D volumes in LPS coordinate system with little endian short pixel type are accepted. The `id` parameter specifies the volume to create or update.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/modules/webserver.md#_snippet_8\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /volume\n```\n\n----------------------------------------\n\nTITLE: Writing Measurements to File (Python)\nDESCRIPTION: This script snippet shows how to write the extracted measurement data to a CSV file instead of the clipboard. It opens a file in append mode and writes the formatted output string to the file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nwith open(\"c:/tmp/results.csv\", \"a\") as f:\n  f.write(outputText)\n```\n\n----------------------------------------\n\nTITLE: Setting Module Kit Variable CMake\nDESCRIPTION: This snippet defines a variable named `KIT` representing the module's name, which appears to be a convention for referring to the Markups module within the Slicer project. This variable is used throughout the configuration for various build tasks.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Testing/Cxx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT qSlicer${MODULE_NAME}Module)\n```\n\n----------------------------------------\n\nTITLE: Adding Cxx Subdirectory using CMake\nDESCRIPTION: The `add_subdirectory` command in CMake adds a subdirectory to the build. In this case, it incorporates the CMakeLists.txt file located in the 'Cxx' subdirectory into the main project. This allows the main project to build targets defined within the Cxx subdirectory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperCLIModuleTemplate/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: Lists the source files (.cxx and .h) that make up the module. These files contain the actual implementation of the module's logic and user interface.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/LoadableExtensionTemplate/LoadableModuleTemplate/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_SRCS\n  qSlicer${MODULE_NAME}Module.cxx\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.cxx\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Conditional Header Installation CMake\nDESCRIPTION: This snippet conditionally installs header files from the current source directory to the `include/${PROJECT_NAME}` directory. Installation is skipped if `${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT` is defined.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT)\n  set(${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT ON)\nendif()\nif(NOT ${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT)\n  file(GLOB headers \"${CMAKE_CURRENT_SOURCE_DIR}/*.h\")\n  install(\n    FILES ${headers}\n    DESTINATION include/${PROJECT_NAME} COMPONENT Development)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Source Files\nDESCRIPTION: Specifies the source files that make up the module, including both C++ source (.cxx) and header (.h) files. These files are compiled and linked to create the module library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/VTKWidgets/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  vtkSlicerScalarBarActor.cxx\n  vtkSlicerScalarBarActor.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module UI Source Files - CMake\nDESCRIPTION: This sets the UI source files for the module.  These files are typically created using Qt Designer and define the user interface layout for the module's widget.  The UI file is `Resources/UI/qSlicer${MODULE_NAME}Module.ui`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Terminologies/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_UI_SRCS\n  Resources/UI/qSlicer${MODULE_NAME}Module.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Project and Kit Variables CMake\nDESCRIPTION: This snippet sets the project name, defines the KIT variable to the project name, and sets the export directive for the module. It is a standard setup procedure in CMake to define project-specific variables.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOMLib/Widgets/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(qSlicer${MODULE_NAME}ModuleWidgets)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"Q_SLICER_MODULE_${MODULE_NAME_UPPER}_WIDGETS_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Displaying console output using `tee` with PowerShell (Windows)\nDESCRIPTION: This code snippet shows how to capture and display the console output of the Slicer application on Windows using the `tee` command in PowerShell. The output is displayed on screen and written to a file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/debugging/tips.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\npowershell \".\\Slicer.exe 2>&1 | tee out.txt\"\n```\n\n----------------------------------------\n\nTITLE: Set Export Directive in CMake\nDESCRIPTION: Defines the export macro for the plugin. This macro is used to decorate the plugin's classes and functions, making them visible to the Qt Designer. It uses the `QMRML_WIDGETS_PLUGINS_EXPORT` macro which is defined elsewhere.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_EXPORT \"QMRML_WIDGETS_PLUGINS_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Setting UI Source Files in CMake\nDESCRIPTION: This snippet defines the UI files that will be compiled. In this case it is empty, indicating no explicit UI files are present. This could mean the UI is created programmatically, or the UI files are handled differently. No external dependencies are required.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Annotations/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_UI_SRCS\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Required Version\nDESCRIPTION: Specifies the minimum required CMake version for the project.  The cmake_minimum_required command ensures that the CMake version used to build the project is at least 3.16.3 and no greater than 3.19.7, preventing compatibility issues.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/CMake/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16.3...3.19.7 FATAL_ERROR)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Source Files CMake\nDESCRIPTION: This snippet defines the list of C++ source files that comprise the tests for the SceneView module. These files contain the actual test implementations.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SceneViews/Testing/Cxx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT_TEST_SRCS\n  vtkSceneViewEventsTest.cxx\n  vtkSceneViewImportSceneTest.cxx\n  vtkSceneViewStoreSceneTest.cxx\n  vtkSceneViewTest1.cxx\n  vtkSceneViewRestoreSceneTest.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Saving a Node to File (Python)\nDESCRIPTION: Saves a specified node to a file. The example uses a transform node, but it should work with other node types if the file extension is supported. Requires `slicer`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nmyNode = getNode(\"LinearTransform_3\")\n\nmyStorageNode = myNode.CreateDefaultStorageNode()\nmyStorageNode.SetFileName(\"c:/tmp/something.tfm\")\nmyStorageNode.WriteData(myNode)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files (CMake)\nDESCRIPTION: Defines the source files for the module. These are the .cxx and .h files that contain the implementation of the module's MRML node. These files will be compiled and linked to create the module's library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/CropVolume/MRML/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  vtkMRML${MODULE_NAME}ParametersNode.cxx\n  vtkMRML${MODULE_NAME}ParametersNode.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Simple Test\nDESCRIPTION: This snippet adds a simple test using the `simple_test` macro. This macro likely configures and adds a test case to the test suite, using the provided name. It simplifies the process of adding basic tests to the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nsimple_test( qSlicerTableColumnPropertiesWidgetTest1 )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Target Libraries\nDESCRIPTION: This snippet sets the `MODULE_TARGET_LIBRARIES` variable to include the ITK libraries. This indicates that the module depends on ITK and its libraries must be linked during the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/CLI/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_TARGET_LIBRARIES\n  ${ITK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Test Sources\nDESCRIPTION: This CMake snippet defines a variable `KIT_TEST_SRCS` which contains a list of test source files. In this example, the test source is commented out: `#qSlicer${MODULE_NAME}ModuleTest.cxx`. This indicates a placeholder for actual test implementations.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperLoadableModuleTemplate/Testing/Cxx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT_TEST_SRCS\n  #qSlicer${MODULE_NAME}ModuleTest.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Set Reference Image Geometry Parameter\nDESCRIPTION: This snippet shows how to change the reference image geometry parameter for a segmentation conversion, using an existing reference image data. It serializes the image geometry and sets it as a conversion parameter.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nreferenceGeometry = slicer.vtkSegmentationConverter.SerializeImageGeometry(referenceImageData)\nsegmentation.SetConversionParameter(slicer.vtkSegmentationConverter.GetReferenceImageGeometryParameterName(), referenceGeometry)\n```\n\n----------------------------------------\n\nTITLE: Running Slicer tests using CTest\nDESCRIPTION: This snippet shows how to run the Slicer tests using CTest. The `-j4` option specifies the number of parallel processes to use for running the tests. Replace 4 with the number of processor cores in the computer.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/linux.md#_snippet_18\n\nLANGUAGE: console\nCODE:\n```\nctest -j4\n```\n\n----------------------------------------\n\nTITLE: Define UUID Option\nDESCRIPTION: This snippet defines a CMake option to enable or disable the use of UUIDs for generating segment IDs. It depends on the `gdcm` library and is marked as advanced for user configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkSegmentationCore/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\noption(${PROJECT_NAME}_USE_UUID \"Use UUIDs for generating segment IDs. Requires gdcm library.\" ON)\nmark_as_advanced(${PROJECT_NAME}_USE_UUID)\n```\n\n----------------------------------------\n\nTITLE: Setting External Files (CMake)\nDESCRIPTION: This code snippet checks if a variable '_externalfiles' is already set. If not, it initializes it to an empty string. This is likely used to manage external files required for the tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Core/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n  set(_externalfiles \"\")\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Adding Executable and Linking Libraries (CMake)\nDESCRIPTION: This snippet adds an executable named `${CLP}Test` using `ctk_add_executable_utf8`. It links the executable with the library `${CLP}Lib` and any extra libraries specified by `SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES`. Properties are set to organize the target in the build system.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/LabelMapSmoothing/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nctk_add_executable_utf8(${CLP}Test ${CLP}Test.cxx)\ntarget_link_libraries(${CLP}Test ${CLP}Lib ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES})\nset_target_properties(${CLP}Test PROPERTIES LABELS ${CLP})\nset_target_properties(${CLP}Test PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Setting Export Directive CMake\nDESCRIPTION: Sets the export directive for the module, which is used to control symbol visibility when building the library. This ensures proper linking and prevents symbol conflicts.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_EXPORT_DIRECTIVE \"Q_SLICER_${MODULE_NAME_UPPER}_SUBJECT_HIERARCHY_PLUGINS_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: QT Critical Logging Example\nDESCRIPTION: Example of a critical message in a QT class. Shows the use of the `qCritical` function.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/style_guide.md#_snippet_13\n\nLANGUAGE: C++\nCODE:\n```\nqCritical() << \"qSlicerUtils::setPermissionsRecursively: Failed to set permissions on file\" << info.filePath();\n```\n\n----------------------------------------\n\nTITLE: Include Directories\nDESCRIPTION: Sets the include directories for the module. In this specific snippet, it is an empty list, which can be extended to include any needed header file paths.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/LoadableCustomMarkups/MRML/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_INCLUDE_DIRECTORIES\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Test Sources\nDESCRIPTION: This snippet defines the list of C++ source files for the tests. The `KIT_TEST_SRCS` variable is set to a list of `.cxx` files that will be used to build the test executables.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Sequences/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT_TEST_SRCS\n  qMRMLSequenceBrowserWidgetsTest1.cxx\n  qMRMLSequenceEditWidgetTest1.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name in CMake\nDESCRIPTION: This snippet sets the MODULE_NAME variable, which is likely used later in the CMake configuration to refer to the module's name. It's a common practice to define module names for clarity and reusability.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GrayscaleGrindPeakImageFilter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME GrayscaleGrindPeakImageFilter)\n```\n\n----------------------------------------\n\nTITLE: Setting Variables for Data Directories in CMake\nDESCRIPTION: This snippet defines CMake variables for specifying the locations of baseline and input data directories. These variables are used later in the configuration for setting up the test environment for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/OrientScalarVolume/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(BASELINE ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Baseline)\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input)\n```\n\n----------------------------------------\n\nTITLE: Save State for Undo\nDESCRIPTION: The `SaveStateForUndo()` method on the MRML scene saves the state of all nodes in the scene, enabling the undo/redo functionality. This method should be called before changing the state of MRML nodes to allow the changes to be reverted later.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/mrml_overview.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Setting up CMake project\nDESCRIPTION: This snippet initializes the CMake project with a minimum required version and sets the project name. The minimum required version ensures compatibility with the CMake features used in the project. The project name defines the name of the project within the CMake environment.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMake/SlicerLinkerAsNeededFlagCheck/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16.3 FATAL_ERROR)\nproject(SlicerLinkerAsNeededFlagCheck)\n```\n\n----------------------------------------\n\nTITLE: Setting Input Directory Variable\nDESCRIPTION: This snippet sets the INPUT variable to the path of the input data directory, which is located in the parent directory's Data/Input subdirectory relative to the current CMake source directory. This is likely used to provide test data for the tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/Logic/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory for Module\nDESCRIPTION: This CMake command adds a subdirectory to the build. The subdirectory contains source code and a CMakeLists.txt file for building a module within the extension. In this case, `ScriptedLoadableModuleTemplate` is the name of the module's directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/ScriptedLoadableExtensionTemplate/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(ScriptedLoadableModuleTemplate)\n## NEXT_MODULE\n```\n\n----------------------------------------\n\nTITLE: Building CLI with SEMMacroBuildCLI in CMake\nDESCRIPTION: This snippet uses the SEMMacroBuildCLI macro to build the command-line interface for the module. It specifies the module name, logo header, and target libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GrayscaleGrindPeakImageFilter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/ITKLogo.h\n  TARGET_LIBRARIES ${ITK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding Slicer Package\nDESCRIPTION: This CMake command uses `find_package` to locate the Slicer package. The `REQUIRED` keyword specifies that the build should fail if the Slicer package is not found. This allows the project to use Slicer's functionalities.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/ScriptedLoadableExtensionTemplate/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Slicer REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Including Directories\nDESCRIPTION: This adds include directories to the compiler's search path. It adds both the current binary and source directories. This allows the compiler to find header files during compilation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories( ${CMAKE_CURRENT_BINARY_DIR})\ninclude_directories( ${CMAKE_CURRENT_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Change the Crosshair Color - Python\nDESCRIPTION: This snippet changes the color of the crosshair to red. It retrieves the crosshair node and calls `SetCrosshairColor` with the RGB values (1.0, 0.0, 0.0).\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n# Get the crosshair node\ncrosshairNode = slicer.util.getNode(\"Crosshair\")\n# Set the crosshair color to Red\ncrosshairNode.SetCrosshairColor(1.0, 0.0, 0.0)\n```\n\n----------------------------------------\n\nTITLE: Export Directive Definition CMake\nDESCRIPTION: Defines the export directive for the module widgets, which is used to control symbol visibility when building shared libraries.  The directive ensures that only the necessary symbols are exported.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperLoadableModuleTemplate/Widgets/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_EXPORT_DIRECTIVE \"Q_SLICER_MODULE_${MODULE_NAME_UPPER}_WIDGETS_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Setting Python Resources\nDESCRIPTION: Specifies the Python resources, such as icons, associated with the module. These resources are also used by the `slicerMacroBuildScriptedModule` macro.  The resource path assumes a directory structure within the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/SegmentEditor/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_PYTHON_RESOURCES\n  Resources/Icons/${MODULE_NAME}.png\n  )\n```\n\n----------------------------------------\n\nTITLE: Include Directories\nDESCRIPTION: This snippet adds include directories for the compiler. It includes both the current binary directory and the current source directory to ensure the test code can find necessary header files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/Widgets/Testing/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR})\ninclude_directories(${CMAKE_CURRENT_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Adding Simple Tests\nDESCRIPTION: Adds simple tests using the simple_test macro.  Each test runs a specific executable, some of which require additional data files as input.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/Testing/Cxx/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nsimple_test( qSlicerModelsModuleWidgetTest1 ${MODEL_FILE} )\nsimple_test( qSlicerModelsModuleWidgetTestScene ${MODEL_SCENE} )\nsimple_test(vtkSlicerModelsLogicAddFileTest ${MODEL_FILE})\nsimple_test( qSlicerModelsModuleWidgetTest )\n```\n\n----------------------------------------\n\nTITLE: Center 3D View on Scene in Slicer (Python)\nDESCRIPTION: This code snippet centers the 3D view in 3D Slicer on the current scene. It retrieves the 3D view and resets the focal point, ensuring that the view is centered on the content of the scene.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_51\n\nLANGUAGE: python\nCODE:\n```\nlayoutManager = slicer.app.layoutManager()\nthreeDWidget = layoutManager.threeDWidget(0)\nthreeDView = threeDWidget.threeDView()\nthreeDView.resetFocalPoint()\n```\n\n----------------------------------------\n\nTITLE: Project Definition - CMake\nDESCRIPTION: Defines the project name for the CMake build process.  This name is used to identify the overall project being built.  The MODULE_NAME variable is expected to be defined elsewhere.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/MRMLDM/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleMRMLDisplayableManager)\n```\n\n----------------------------------------\n\nTITLE: Reset Slice View Field of View in Slicer (Python)\nDESCRIPTION: This snippet resets the field of view of all slice viewers to show the background volume maximized, replicating the functionality of the \"Adjust the slice viewer's field of view...\" button in the slice view controller. It uses slicer utility function.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_27\n\nLANGUAGE: Python\nCODE:\n```\nslicer.util.resetSliceViews()\n```\n\n----------------------------------------\n\nTITLE: Creating Extension Package on Linux/macOS (Bash)\nDESCRIPTION: This bash command creates an extension package on Linux or macOS after the extension has been built in release mode. It uses the `make package` command. Requires Make to be installed.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/extensions.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ make package\n```\n\n----------------------------------------\n\nTITLE: Setting Temporary Directory CMake\nDESCRIPTION: Sets the temporary directory for testing.  This directory is used to store temporary files created during the execution of the tests.  CMAKE_BINARY_DIR is a CMake variable that represents the root binary directory of the project.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/Testing/Cxx/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(TEMP \"${CMAKE_BINARY_DIR}/Testing/Temporary\")\n```\n\n----------------------------------------\n\nTITLE: Loading Volume from File - Slicer - Python\nDESCRIPTION: Loads a volume from a specified file path using `slicer.util.loadVolume`. It allows specifying additional properties such as disabling `singleFile` for loading image stacks. The function returns the loaded volume node.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nloadedVolumeNode = slicer.util.loadVolume(\"c:/Users/abc/Documents/MRHead.nrrd\")\n```\n\n----------------------------------------\n\nTITLE: Simple Test Call\nDESCRIPTION: This snippet represents a commented-out call to a simple test function, potentially `simple_test`.  It is likely related to running a basic test for the module. The `qSlicer${MODULE_NAME}ModuleTest` argument suggests it's a test specific to the configured module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/LoadableExtensionTemplate/LoadableModuleTemplate/Testing/Cxx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n#simple_test(qSlicer${MODULE_NAME}ModuleTest)\n```\n\n----------------------------------------\n\nTITLE: MRML Observer Macro Definition\nDESCRIPTION: This describes the MRML observer macros defined in Libs/MRML/vtkMRMLNode.h for registering a MRML node with a VTK object. These macros assist in adding observers for vtkCommand::ModifiedEvent or a specified set of events.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/mrml_overview.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: UI Source Files Definition CMake\nDESCRIPTION: Defines the UI description files, which are used to create the graphical user interface for the module widgets. This includes specifying the path to the .ui file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperLoadableModuleTemplate/Widgets/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_UI_SRCS\n  ../Resources/UI/qSlicer${MODULE_NAME}FooBarWidget.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Set Default Module at Startup - Python\nDESCRIPTION: This snippet sets a new default module to be opened at startup instead of the Welcome module.  It uses `qt.QSettings` to modify the `Modules/HomeModule` setting, specifying the desired module name, such as \"Data\".\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nqt.QSettings().setValue(\"Modules/HomeModule\", \"Data\")\n```\n\n----------------------------------------\n\nTITLE: Adding Data Target - CMake\nDESCRIPTION: This snippet adds a data target if SEM_DATA_MANAGEMENT_TARGET is equal to ${CLP}Data. The ExternalData_add_target command creates a target for managing external data associated with the module. Requires ExternalData module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ImageLabelCombine/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining UI Source Files - CMake\nDESCRIPTION: This snippet defines the UI source files, which are empty in this case. It is reserved for any .ui files that the module might use to define its graphical user interface.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_UI_SRCS\n  )\n```\n\n----------------------------------------\n\nTITLE: Export Directive Definition\nDESCRIPTION: Defines the export directive, which is used to control symbol visibility when building the library. This ensures that only necessary symbols are exported.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_EXPORT_DIRECTIVE \"Q_SLICER_${MODULE_NAME_UPPER}_SUBJECT_HIERARCHY_PLUGINS_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion based on Qt Scripted Modules\nDESCRIPTION: This snippet conditionally includes the 'Scripted' subdirectory if the `Slicer_BUILD_QTSCRIPTEDMODULES` CMake option is enabled. It controls whether scripted modules are included in the build based on the CMake option.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_BUILD_QTSCRIPTEDMODULES)\n  add_subdirectory(Scripted)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting up development environment\nDESCRIPTION: These commands change the directory to the cloned Slicer directory, run the `SetupForDevelopment.sh` script, and then change the directory back to the parent directory. The `SetupForDevelopment.sh` script configures the development environment for Slicer.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/linux.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\ncd Slicer\n./Utilities/SetupForDevelopment.sh\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Adding Executable & Linking Libraries\nDESCRIPTION: This snippet creates the executable for the tests and links it against the necessary libraries, including the KIT library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/Testing/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nctk_add_executable_utf8(${KIT}CxxTests ${Tests} ${Tests_MOC_CXX} ${Tests_UtilityFiles})\ntarget_link_libraries(${KIT}CxxTests ${KIT})\n\nset_target_properties(${KIT}CxxTests PROPERTIES FOLDER ${${PROJECT_NAME}_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Defining Resources (CMake)\nDESCRIPTION: This snippet defines the resources that are included in the qSlicerBaseQTGUI library. These resources can include images, stylesheets, and other data files that are needed by the library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTGUI/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n# Resources\nset(KIT_resources\n  Resources/qSlicerBaseQTGUI.qrc\n  ${qMRMLWidgets_SOURCE_DIR}/Resources/qMRMLWidgets.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module UI Source Files\nDESCRIPTION: This snippet lists the UI files for the module. These files define the module's user interface using Qt Designer. The UI source files are .ui files that are used to generate the graphical interface of the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Plots/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_UI_SRCS\n  Resources/UI/qSlicer${MODULE_NAME}ModuleWidget.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting export directive for the KIT - CMake\nDESCRIPTION: This snippet sets the export directive for the `KIT`, which defines the visibility of classes when the library is built. It uses `Q_SLICER_MODULE_${MODULE_NAME_UPPER}_WIDGETS_EXPORT` as the export macro.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/Widgets/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_EXPORT_DIRECTIVE \"Q_SLICER_MODULE_${MODULE_NAME_UPPER}_WIDGETS_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Building Scripted Module - CMake\nDESCRIPTION: This snippet uses the `slicerMacroBuildScriptedModule` macro to build the WebServer module. It specifies the module name, Python scripts, and resources, and also enables generic tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/WebServer/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nslicerMacroBuildScriptedModule(\n  NAME ${MODULE_NAME}\n  SCRIPTS ${MODULE_PYTHON_SCRIPTS}\n  RESOURCES ${MODULE_PYTHON_RESOURCES}\n  WITH_GENERIC_TESTS\n  )\n```\n\n----------------------------------------\n\nTITLE: Add Subdirectories - CMake\nDESCRIPTION: Adds subdirectories for Logic, MRMLDM, Widgets, and SubjectHierarchyPlugins. These subdirectories likely contain the source code and CMakeLists.txt files for each respective component of the Transforms module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Logic)\nadd_subdirectory(MRMLDM)\nadd_subdirectory(Widgets)\nadd_subdirectory(SubjectHierarchyPlugins)\n```\n\n----------------------------------------\n\nTITLE: Setting Module Source Files in CMake\nDESCRIPTION: Combines GUI source files with core module source files to define the complete set of source files for the module. This ensures all necessary code is compiled and linked.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SceneViews/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_SRCS\n  ${GUI_SRCS}\n  qSlicer${MODULE_NAME}Module.cxx\n  qSlicer${MODULE_NAME}Module.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Resource Files - CMake\nDESCRIPTION: Specifies the resource files (.qrc) used by the module, such as images or other data. Currently, it's empty, indicating no resources are directly included.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_RESOURCES\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Test with HField Transform\nDESCRIPTION: This test case incorporates an HField (Hessian Field) transform for resampling.  The '-H' flag indicates the use of a displacement field. The test validates whether the module correctly handles displacement field transforms during resampling.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleScalarVectorDWIVolume/Testing/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(testname ${CLP}HFieldTest)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  --compare\n    DATA{${INPUT}/MRHeadResampledHFieldTest.nrrd}\n    ${TEMP}/${testname}.nrrd\n  ModuleEntryPoint\n    -H DATA{${INPUT}/MRHeadResampledHField.nrrd}\n    DATA{${INPUT}/MRHeadResampled.nhdr,MRHeadResampled.raw.gz}\n    ${TEMP}/${testname}.nrrd\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Setting Slicer Launch Command CMake\nDESCRIPTION: Defines the Slicer launcher executable and the command to launch Slicer. It determines the binary directory based on whether it's a superbuild or not, and then sets the `Slicer_LAUNCHER_EXECUTABLE` and `Slicer_LAUNCH_COMMAND` variables.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_49\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_SUPERBUILD)\n  set(_slicer_dir ${CMAKE_BINARY_DIR}/${Slicer_BINARY_INNER_SUBDIR})\nelse()\n  set(_slicer_dir ${Slicer_BINARY_DIR})\nendif()\nset(Slicer_LAUNCHER_EXECUTABLE ${_slicer_dir}/${Slicer_MAIN_PROJECT_APPLICATION_NAME}${CMAKE_EXECUTABLE_SUFFIX})\nset(Slicer_LAUNCH_COMMAND ${Slicer_LAUNCHER_EXECUTABLE} --launch)\n```\n\n----------------------------------------\n\nTITLE: Wrapping UI files with Qt5\nDESCRIPTION: This uses `QT5_WRAP_UI` to generate C++ code from Qt UI files (specified in `Test_UI_SRCS`). The resulting C++ code is stored in `Test_UI_CXX`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nQT5_WRAP_UI(Test_UI_CXX ${Test_UI_SRCS})\n```\n\n----------------------------------------\n\nTITLE: Set Python Scripts - CMake\nDESCRIPTION: Defines the Python scripts associated with the module.  The `MODULE_PYTHON_SCRIPTS` variable is set to a list containing `DICOMPatcher.py`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOMPatcher/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_PYTHON_SCRIPTS\n  ${MODULE_NAME}.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Meta-Object Compiler (MOC) Source Files in CMake\nDESCRIPTION: Lists the header files that require processing by the Meta-Object Compiler (MOC). MOC generates code for Qt's signal and slot mechanism.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SceneViews/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_MOC_SRCS\n  GUI/qMRMLCaptureToolBar.h\n  GUI/qMRMLSceneViewMenu.h\n  GUI/qMRMLSceneViewMenu_p.h\n  qSlicer${MODULE_NAME}Module.h\n  GUI/qSlicer${MODULE_NAME}ModuleWidget.h\n  GUI/qSlicer${MODULE_NAME}ModuleDialog.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Library Version Properties (CMake)\nDESCRIPTION: This snippet configures the library version properties if `Slicer_WITH_LIBRARY_VERSION` is enabled.  It sets the `VERSION` and `SOVERSION` properties based on `Slicer_VERSION_FULL` and `Slicer_VERSION` variables. These properties are used to specify version information for the library target.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\noption(Slicer_WITH_LIBRARY_VERSION \"Build with library version information\" OFF)\nmark_as_advanced(Slicer_WITH_LIBRARY_VERSION)\nmark_as_superbuild(Slicer_WITH_LIBRARY_VERSION)\nif(Slicer_WITH_LIBRARY_VERSION)\n  set(Slicer_LIBRARY_PROPERTIES ${Slicer_LIBRARY_PROPERTIES}\n    VERSION ${Slicer_VERSION_FULL}\n    SOVERSION ${Slicer_VERSION}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Add Cxx Subdirectory (CMake)\nDESCRIPTION: This CMake command adds the 'Cxx' subdirectory to the current build.  It instructs CMake to process the CMakeLists.txt file located in the 'Cxx' directory as part of the overall build process. This enables the inclusion of C++ code and related build instructions defined within that subdirectory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Cameras/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Finding the JsonCpp package in CMake\nDESCRIPTION: This snippet uses `find_package` to locate the JsonCpp library and its associated include directories. JsonCpp is a dependency for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/MRML/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(JsonCpp REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name in CMake\nDESCRIPTION: This snippet sets the module name using the `set` command. The module is named `qSlicer${MODULE_NAME}Module` and assigned to the variable `KIT`. This variable is then used later in the CMake configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/GeneralizedReformat/Testing/Cxx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT qSlicer${MODULE_NAME}Module)\n```\n\n----------------------------------------\n\nTITLE: Add Simple Test in CMake\nDESCRIPTION: This snippet adds a simple test for the Slicer module using the `simple_test` macro. The macro takes the name of the test executable as an argument (e.g., `vtkSlicerColorLogicTest1`). This macro is responsible for generating test targets.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/Logic/Testing/Cxx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nsimple_test(vtkSlicerColorLogicTest1)\n```\n\n----------------------------------------\n\nTITLE: Disabling ITK IO Factory Registration\nDESCRIPTION: This snippet disables the registration of ITK IO factories. It checks the ITK version and sets a flag to disable the factory registration manager. This is done to manage the ITK IO factories registration manually, possibly to avoid conflicts or customize the registration process within Slicer.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MultiplyScalarVolumes/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Test Sources in CMake\nDESCRIPTION: This snippet sets the test sources for the module using the `set` command. It initializes a list of test source files stored in the `KIT_TEST_SRCS` variable.  The snippet is commented out which suggests these tests are not actively being used.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/GeneralizedReformat/Testing/Cxx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT_TEST_SRCS\n  #qSlicer${MODULE_NAME}ModuleTest.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Variables for Data Paths\nDESCRIPTION: This snippet sets CMake variables to define the paths to the baseline and input data directories. These variables are used later in the script to locate the data required for testing the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleScalarVolume/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(BASELINE ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Baseline)\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input)\n```\n\n----------------------------------------\n\nTITLE: Setting Project Name\nDESCRIPTION: This snippet sets the project name to \"slicer\" using the `PROJECT_NAME` variable and assigns it to the `KIT` variable. The `KIT` variable is likely used as a base name for other build targets.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTApp/Testing/Cxx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Setting include directories variable\nDESCRIPTION: This snippet sets the `${PROJECT_NAME}_INCLUDE_DIRS` variable. This variable stores a list of directories that should be used for including header files when compiling code that uses this library.  The directories are set to the current source and binary directories.  The cache is marked as INTERNAL and FORCE to ensure the value is always available.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/CLI/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nset(${PROJECT_NAME}_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR}\n  CACHE INTERNAL \"${PROJECT_NAME} include dirs\" FORCE)\n```\n\n----------------------------------------\n\nTITLE: Downloading Qt online installer\nDESCRIPTION: These commands download the Qt Linux online installer and make it executable. The installer can then be run to install the necessary Qt components for building Slicer.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/linux.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n curl -LO http://download.qt.io/official_releases/online_installers/qt-unified-linux-x64-online.run\n chmod +x qt-unified-linux-x64-online.run\n```\n\n----------------------------------------\n\nTITLE: Adding CMake Subdirectory\nDESCRIPTION: This command adds the specified directory ('Cxx') as a subdirectory in the CMake build process. It effectively includes the CMakeLists.txt file present in the 'Cxx' directory into the main project's build configuration. The 'Cxx' directory must contain a CMakeLists.txt file for this command to function correctly.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Logic/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name\nDESCRIPTION: Sets the module name for the SimpleRegionGrowingSegmentation module. This variable is used throughout the CMake configuration to refer to the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/SimpleRegionGrowingSegmentation/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME SimpleRegionGrowingSegmentation)\n```\n\n----------------------------------------\n\nTITLE: Adding DesignerPlugins Subdirectory\nDESCRIPTION: This snippet conditionally adds the `DesignerPlugins` subdirectory to the build if `Slicer_BUILD_QT_DESIGNER_PLUGINS` is enabled. This indicates that the module provides Qt Designer plugins that can be used to create custom widgets.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/Widgets/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_BUILD_QT_DESIGNER_PLUGINS)\n  add_subdirectory(DesignerPlugins)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Define Export Directive - CMake\nDESCRIPTION: Defines the export directive macro for the module, enabling proper symbol visibility when building shared libraries. The MODULE_NAME_UPPER variable is assumed to be defined elsewhere and represents the module name in uppercase. The macro VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_MRMLDISPLAYABLEMANAGER_EXPORT will be defined.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/MRMLDM/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_MRMLDISPLAYABLEMANAGER_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Setting Export Directive\nDESCRIPTION: Defines the export directive for the module, used when building shared libraries. This allows other modules to link against the CropVolume module's symbols.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/CropVolume/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_EXPORT_DIRECTIVE \"Q_SLICER_QTMODULES_${MODULE_NAME_UPPER}_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name in CMake\nDESCRIPTION: This snippet sets the module name for the OrientScalarVolume module. This variable is used in subsequent commands for configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/OrientScalarVolume/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_NAME OrientScalarVolume)\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory\nDESCRIPTION: Conditionally adds the Testing subdirectory to the build process if the BUILD_TESTING variable is enabled. This allows for including unit tests and other testing-related files in the module build.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/FiducialRegistration/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Define Qt Modules List\nDESCRIPTION: This section defines a list of Qt-based modules to be built within the Slicer application. Module order is significant due to inter-module dependencies. Comments indicate these dependencies, such as \"A depends on B\", which requires module B to be built before module A to provide necessary include directories during configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(qtmodules\n  Cameras\n  Units\n  Terminologies\n  SubjectHierarchy\n  Colors # Colors depends on SubjectHierarchy\n  Annotations\n  Transforms\n  GeneralizedReformat\n  Data\n  Models\n  Plots\n  Segmentations\n  Sequences\n  SceneViews # Scene views depends on Sequences\n  Markups # Markups depends on SceneViews (for testing) and Annotations\n  SlicerWelcome\n  Tables\n  Texts\n  Reformat\n  ViewControllers\n  Volumes\n  VolumeRendering # Volume Rendering depends of Volumes\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Module Logic\nDESCRIPTION: Uses the SlicerMacroBuildModuleLogic macro to configure and build the module logic component, passing the name, export directive, include directories, source files, and target libraries as parameters. The macro handles the actual build process based on these parameters.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Units/Logic/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleLogic(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining CMake project\nDESCRIPTION: Defines the project name. This name is used throughout the build process to identify the project. It's a fundamental step in any CMake project.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/CLIExtensionTemplate/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(CLIExtensionTemplate)\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory\nDESCRIPTION: This conditionally adds a subdirectory named 'Testing' if the BUILD_TESTING option is enabled. This allows for the inclusion of unit tests for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/RobustStatisticsSegmenter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Launch gnome-terminal (Bash)\nDESCRIPTION: These commands launch gnome-terminal using Slicer's `--launch` or `--gnome-terminal` arguments. This is useful for inspecting the environment variables set by the Slicer launcher, particularly LD_LIBRARY_PATH. The backticks execute `which gnome-terminal` to get the full path.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/debugging/linuxcpp.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nSlicer --launch `which gnome-terminal`\n```\n\nLANGUAGE: bash\nCODE:\n```\nSlicer --gnome-terminal\n```\n\n----------------------------------------\n\nTITLE: Define Module Name\nDESCRIPTION: This sets the module name and defines a data management target if not already defined. It provides a central variable for referencing the module throughout the script.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ExtractSkeleton/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(CLP ${MODULE_NAME})\n\nif(NOT DEFINED SEM_DATA_MANAGEMENT_TARGET)\n  set(SEM_DATA_MANAGEMENT_TARGET ${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Define Export Directive CMake\nDESCRIPTION: Defines the export directive `${KIT}_EXPORT_DIRECTIVE` using the variable `MODULE_NAME_UPPER`. This directive is used to control symbol visibility when building and linking the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Annotations/MRML/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_MRML_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Minimum CMake Version\nDESCRIPTION: Specifies the minimum required CMake version. The build will fail if the CMake version is older than specified. The `FATAL_ERROR` argument ensures that an error is raised if the version requirement is not met.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/IDImageIO/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16.3...3.19.7 FATAL_ERROR)\n```\n\n----------------------------------------\n\nTITLE: Set Folder Property\nDESCRIPTION: Sets the folder property for the library target in the IDE (e.g., Visual Studio).  This helps organize the project in the IDE's Solution Explorer.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/RemoteIO/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_FOLDER)\n  set(${PROJECT_NAME}_FOLDER ${PROJECT_NAME})\nendif()\nif(NOT \"${${PROJECT_NAME}_FOLDER}\" STREQUAL \"\")\n  set_target_properties(${lib_name} PROPERTIES FOLDER ${${PROJECT_NAME}_FOLDER})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Define Include Directories\nDESCRIPTION: Defines the include directories required for building the module logic component. This section specifies the locations where the compiler should search for header files needed by the source code.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/CropVolume/Logic/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_INCLUDE_DIRECTORIES\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files in CMake\nDESCRIPTION: Sets the list of source files (.cxx and .h) that make up the Segmentations module.  These are the core implementation files that will be compiled into the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_SRCS\n  qSlicer${MODULE_NAME}IOOptionsWidget.cxx\n  qSlicer${MODULE_NAME}IOOptionsWidget.h\n  qSlicer${MODULE_NAME}Module.cxx\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.cxx\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  qSlicer${MODULE_NAME}NodeWriter.cxx\n  qSlicer${MODULE_NAME}NodeWriter.h\n  qSlicer${MODULE_NAME}NodeWriterOptionsWidget.cxx\n  qSlicer${MODULE_NAME}NodeWriterOptionsWidget.h\n  qSlicer${MODULE_NAME}Reader.cxx\n  qSlicer${MODULE_NAME}Reader.h\n  qSlicer${MODULE_NAME}SettingsPanel.cxx\n  qSlicer${MODULE_NAME}SettingsPanel.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting CMake variables for Plugin Configuration\nDESCRIPTION: This snippet initializes CMake variables for configuring a set of Qt Designer plugins. It defines the KIT name, export directive, source files, header files to be processed by moc, and target libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT ${PROJECT_NAME}Plugins)\n\nset(${KIT}_EXPORT \"Q_SLICER_MODULE_${MODULE_NAME_UPPER}_WIDGETS_PLUGINS_EXPORT\")\n\nset(${KIT}_SRCS\n  qSlicerSubjectHierarchyModuleWidgetsAbstractPlugin.cxx\n  qSlicerSubjectHierarchyModuleWidgetsAbstractPlugin.h\n  qSlicerSubjectHierarchyModuleWidgetsPlugin.cxx\n  qSlicerSubjectHierarchyModuleWidgetsPlugin.h\n  qMRMLSubjectHierarchyTreeViewPlugin.cxx\n  qMRMLSubjectHierarchyTreeViewPlugin.h\n  qMRMLSubjectHierarchyComboBoxPlugin.cxx\n  qMRMLSubjectHierarchyComboBoxPlugin.h\n  )\n\nset(${KIT}_MOC_SRCS\n  qSlicerSubjectHierarchyModuleWidgetsPlugin.h\n  qMRMLSubjectHierarchyTreeViewPlugin.h\n  qMRMLSubjectHierarchyComboBoxPlugin.h\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  qSlicerSubjectHierarchyModuleWidgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding vtkAddon Package\nDESCRIPTION: If `Slicer_BUILD_vtkAddon` is not enabled, this snippet uses `find_package` to locate the vtkAddon package. The `REQUIRED` keyword ensures that CMake will stop with an error if the package is not found.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Core/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT Slicer_BUILD_vtkAddon)\n  find_package(vtkAddon REQUIRED)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting UI Source Files - CMake\nDESCRIPTION: Defines the UI files (.ui) used by the module. Currently, it's empty, indicating no direct UI files are present.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_UI_SRCS\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding ExternalData Target (CMake)\nDESCRIPTION: Adds a target using the `ExternalData_Add_Target` function to download data from the group specified by `${Slicer_ExternalData_DATA_MANAGEMENT_TARGET}`. This ensures necessary external data is available for the build.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_83\n\nLANGUAGE: CMake\nCODE:\n```\nExternalData_Add_Target(${Slicer_ExternalData_DATA_MANAGEMENT_TARGET})\n```\n\n----------------------------------------\n\nTITLE: Simple Test in CMake\nDESCRIPTION: This snippet shows a commented-out call to `simple_test`, suggesting that a simple test for the module was intended but is not currently active. The function name suggests a simple test case is configured for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/GeneralizedReformat/Testing/Cxx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n#simple_test(qSlicer${MODULE_NAME}ModuleTest)\n```\n\n----------------------------------------\n\nTITLE: Set Baseline and Input Paths\nDESCRIPTION: These commands define the paths to the baseline and input data directories relative to the current source directory. These paths are later used in the test definitions.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ExtractSkeleton/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(BASELINE ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Baseline)\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input)\n```\n\n----------------------------------------\n\nTITLE: Change 3D View Background Color in Slicer (Python)\nDESCRIPTION: This code changes the background color of the 3D view in 3D Slicer. It retrieves the MRML view node and sets both background colors to red (1,0,0).\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_53\n\nLANGUAGE: python\nCODE:\n```\nviewNode = slicer.app.layoutManager().threeDWidget(0).mrmlViewNode()\nviewNode.SetBackgroundColor(1,0,0)\nviewNode.SetBackgroundColor2(1,0,0)\n```\n\n----------------------------------------\n\nTITLE: Set Module Target Libraries in CMake\nDESCRIPTION: Defines the target libraries that the module depends on. These libraries are linked with the module during the build process.  These libraries are likely defined elsewhere in the project.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperLoadableModuleTemplate/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  qSlicer${MODULE_NAME}ModuleWidgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Python Subdirectory with CMake\nDESCRIPTION: This snippet adds the `Python` subdirectory to the build process using the `add_subdirectory` command. This allows the CMake configuration in the `Python` subdirectory to be processed, enabling the inclusion of Python-related components in the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/CropVolume/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Python)\n```\n\n----------------------------------------\n\nTITLE: Adding Slicer Extension Description Default Tests\nDESCRIPTION: This uses the `add_cmakescript_test` macro to add a test for the default slicer extension description specification. It calls `Extensions/CMake/SlicerExtensionDescriptionSpec.cmake` to verify its behavior.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/CMake/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_cmakescript_test(\n  slicer_extension_description_spec_defaults_test\n  Extensions/CMake/SlicerExtensionDescriptionSpec.cmake)\n```\n\n----------------------------------------\n\nTITLE: Update Fiducial Location\nDESCRIPTION: Sets the location of a control point in a markup point list (formerly called fiducial list). Requires node `id` and right (`r`), anterior (`a`), and superior (`s`) coordinates.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/modules/webserver.md#_snippet_10\n\nLANGUAGE: HTTP\nCODE:\n```\nPUT /fiducial\n```\n\n----------------------------------------\n\nTITLE: Disabling CLI modules in Slicer on Startup\nDESCRIPTION: This command-line argument allows you to start Slicer without loading any CLI modules. This is useful for debugging or when CLI modules are not needed for a specific task.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/settings.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nSlicer.exe --disable-cli-modules\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name\nDESCRIPTION: Defines the module's name and creates an uppercase version for other uses. The `MODULE_NAME` variable stores the name of the module and is then converted to uppercase for creating export directives.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/LoadableExtensionTemplate/LoadableModuleTemplate/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME LoadableModuleTemplate)\n\nstring(TOUPPER ${MODULE_NAME} MODULE_NAME_UPPER)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Project and Option\nDESCRIPTION: This snippet defines the project name `SlicerLibs` and sets the CMake option `GENERATECLP_USE_MD5` to `ON`. Setting this option avoids unnecessary recompilation related to command line modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(SlicerLibs)\n\n# Enable this option to avoid unnecessary re-compilation associated with command line module\nset(GENERATECLP_USE_MD5 ON)\n```\n\n----------------------------------------\n\nTITLE: Get Closed Surface Representation\nDESCRIPTION: This snippet retrieves the closed surface representation of a segment from a segmentation node. If the representation does not exist, it returns None. It requires the segmentation node and segment ID as input.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\noutputPolyData = vtk.vtkPolyData()\nsegmentationNode.GetClosedSurfaceRepresentation(segmentID, outputPolyData)\n```\n\n----------------------------------------\n\nTITLE: Using createModelFromVolume function in Slicer (Python)\nDESCRIPTION: This code snippet demonstrates how to use the `createModelFromVolume` function with the MRHead dataset. It retrieves the volume node and passes it to the function to generate a model.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/python_faq.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nvolumeNode = getNode('MRHead')\nmodelNode = createModelFromVolume(volumeNode)\n```\n\n----------------------------------------\n\nTITLE: Setting project and module name in CMake\nDESCRIPTION: This snippet sets the project name and a derived variable based on the module name. These variables are used throughout the CMake script for defining the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/MRML/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleMRML)\n\nset(KIT ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Creating Default Display Nodes for MRML\nDESCRIPTION: This snippet illustrates overriding the `CreateDefaultDisplayNodes()` method to instantiate and configure the default display nodes (for 3D and/or 2D viewing) associated with a custom MRML node.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/mrml_overview.md#_snippet_23\n\nLANGUAGE: C++\nCODE:\n```\nvoid CreateDefaultDisplayNodes()\n```\n\n----------------------------------------\n\nTITLE: Save Markups Node to JSON File (Python)\nDESCRIPTION: Saves a markup node to a markups JSON file. This format is recommended for preserving all properties of the markup node. Requires a valid markup node and file path.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmarkupsNode = slicer.util.getNode('F')\nslicer.util.saveNode(markupsNode, \"/path/to/MyMarkups.mkp.json\")\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel Package (CMake)\nDESCRIPTION: This snippet finds the SlicerExecutionModel package, which is a dependency for building command-line interface modules in Slicer. It also includes the use file for the package.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleDTIVolume/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Displayable Manager File Structure\nDESCRIPTION: Shows the expected file structure for displayable manager classes in a 3D Slicer extension. The custom type name is used as a placeholder in the class names.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/mrml_overview.md#_snippet_27\n\nLANGUAGE: filesystem\nCODE:\n```\n|-- <Extension>\n       |-- <Module>\n              |-- MRMLDM\n                    |-- vtkMRML<MyCustomType>DisplayableManager.h\n                    |-- vtkMRML<MyCustomType>DisplayableManager.cxx\n```\n\n----------------------------------------\n\nTITLE: Installing Slicer using Homebrew on macOS\nDESCRIPTION: These commands demonstrate how to install, upgrade, and uninstall the stable version of 3D Slicer on macOS using the Homebrew package manager. It assumes Homebrew is already installed.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/getting_started.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nbrew install --cask slicer  # to install\nbrew upgrade slicer         # to upgrade\nbrew uninstall slicer       # to uninstall\n```\n\n----------------------------------------\n\nTITLE: Setting Scene File Path\nDESCRIPTION: This CMake snippet sets the _scenefile variable to an empty string if the previous condition is not met. This ensures that if no scene file is specified, the variable is properly initialized.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/Testing/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nelse()\n  set(_scenefile \"\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Data Directory\nDESCRIPTION: This snippet sets the data directory using the `set` command. The data directory is stored in the variable `DATA_DIR` and points to the `Data` subdirectory within the current source directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/Logic/Testing/Cxx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(DATA_DIR ${CMAKE_CURRENT_SOURCE_DIR}/Data)\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory\nDESCRIPTION: This snippet adds the Testing subdirectory if the BUILD_TESTING option is enabled. This allows the module to include and run unit tests as part of the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/Logic/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Storage Node File Structure\nDESCRIPTION: Shows the expected file structure for storage node classes in a 3D Slicer extension. The custom type name is used as a placeholder in the class names.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/mrml_overview.md#_snippet_28\n\nLANGUAGE: filesystem\nCODE:\n```\n|-- <Extension>\n       |-- <Module>\n              |-- MRML\n                    |-- vtkMRML<MyCustomType>StorageNode.h\n                    |-- vtkMRML<MyCustomType>StorageNode.cxx\n```\n\n----------------------------------------\n\nTITLE: Setting Project Name Variable\nDESCRIPTION: This snippet sets the KIT variable to the name of the project, which is retrieved using the PROJECT_NAME variable. This variable typically holds the overall project name, which in this case is Slicer.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/Logic/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Set Include Directories CMake\nDESCRIPTION: Initializes the `${KIT}_INCLUDE_DIRECTORIES` variable as an empty list. This variable is intended to hold paths to header files required for compiling the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Annotations/MRML/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_INCLUDE_DIRECTORIES\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory\nDESCRIPTION: Adds a subdirectory named \"Testing\" to the build process. This subdirectory likely contains additional tests or test-related files for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/CropVolumeSequence/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Define Export Directive\nDESCRIPTION: Defines the export directive used for marking classes as exportable from the module's DLL. MODULE_NAME_UPPER is the uppercase version of MODULE_NAME, presumably defined elsewhere.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/LoadableCustomMarkups/Widgets/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_EXPORT_DIRECTIVE \"Q_SLICER_MODULE_${MODULE_NAME_UPPER}_WIDGETS_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories in CMake\nDESCRIPTION: This snippet sets the include directories for the module. These directories contain the header files needed to compile the module's source code. It includes source and binary directories for Logic and Widgets.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/Loadable/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_INCLUDE_DIRECTORIES\n  ${CMAKE_CURRENT_SOURCE_DIR}/Logic\n  ${CMAKE_CURRENT_BINARY_DIR}/Logic\n  ${CMAKE_CURRENT_SOURCE_DIR}/Widgets\n  ${CMAKE_CURRENT_BINARY_DIR}/Widgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Installing Testing Data (CMake)\nDESCRIPTION: Installs the contents of the `Testing` directory, excluding `CMakeLists.txt`, to`${Slicer_INSTALL_SHARE_DIR}` as part of the Development component, but only if `Slicer_INSTALL_NO_DEVELOPMENT` is not set.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_79\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT Slicer_INSTALL_NO_DEVELOPMENT)\n  install(DIRECTORY\n    Testing\n    DESTINATION ${Slicer_INSTALL_SHARE_DIR} COMPONENT Development\n    PATTERN \"CMakeLists.txt\" EXCLUDE\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Loadable Module\nDESCRIPTION: Uses the `slicerMacroBuildLoadableModule` macro to build the loadable module. This macro encapsulates the common steps required to build a 3D Slicer module, including setting up the necessary build targets, dependencies, and install rules. It takes several parameters, including the module name, export directive, include directories, source files, and target libraries. The `WITH_GENERIC_TESTS` option indicates that the module should include generic tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Units/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroBuildLoadableModule(\n  NAME ${MODULE_NAME}\n  EXPORT_DIRECTIVE ${MODULE_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${MODULE_INCLUDE_DIRECTORIES}\n  SRCS ${MODULE_SRCS}\n  MOC_SRCS ${MODULE_MOC_SRCS}\n  UI_SRCS ${MODULE_UI_SRCS}\n  TARGET_LIBRARIES ${MODULE_TARGET_LIBRARIES}\n  RESOURCES ${MODULE_RESOURCES}\n  WITH_GENERIC_TESTS\n  )\n```\n\n----------------------------------------\n\nTITLE: Define Target Libraries CMake\nDESCRIPTION: Specifies the libraries that the module depends on using the `${KIT}_TARGET_LIBRARIES` variable.  It includes `${MRML_LIBRARIES}`, which is expected to be a list of libraries related to the MRML framework.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Annotations/MRML/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  ${MRML_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Printing to Console Example\nDESCRIPTION: Demonstrates the use of the qPrintable macro for printing to the console in Slicer.  This ensures proper handling of QString objects when outputting to streams like std::cerr.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/style_guide.md#_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nstd::cerr << \"Failed to create file \" << qPrintable(filePath) << std::endl;\n```\n\n----------------------------------------\n\nTITLE: Defining Test Sources in CMake\nDESCRIPTION: This snippet defines a list of test source files for the module using the `set` command in CMake. These sources are later used by the test driver to execute the tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/Loadable/Testing/Cxx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT_TEST_SRCS\n  #qSlicer${MODULE_NAME}ModuleTest.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel\nDESCRIPTION: Finds the SlicerExecutionModel package using `find_package` and includes its use file. This provides access to CMake macros and functions defined within the SlicerExecutionModel, which are used to simplify the creation of CLI modules in Slicer.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ROITest/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Setting Export Directive\nDESCRIPTION: Defines the export directive for the module, used for managing symbol visibility. This is crucial for creating shared libraries that can be loaded by Slicer.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/LoadableExtensionTemplate/LoadableModuleTemplate/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_EXPORT_DIRECTIVE \"Q_SLICER_QTMODULES_${MODULE_NAME_UPPER}_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories - CMake\nDESCRIPTION: This code snippet adds subdirectories for the Logic, SubjectHierarchyPlugins, and Widgets components of the module. This structure helps to organize the module's source code and related files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Logic)\nadd_subdirectory(SubjectHierarchyPlugins)\nadd_subdirectory(Widgets)\n```\n\n----------------------------------------\n\nTITLE: Build Scripted Module - CMake\nDESCRIPTION: Uses the `slicerMacroBuildScriptedModule` macro to configure the build process for the scripted module. It takes the module name, scripts, resources, and testing options as input.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOMPatcher/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroBuildScriptedModule(\n  NAME ${MODULE_NAME}\n  SCRIPTS ${MODULE_PYTHON_SCRIPTS}\n  RESOURCES ${MODULE_PYTHON_RESOURCES}\n  WITH_GENERIC_TESTS\n  )\n```\n\n----------------------------------------\n\nTITLE: Add Cxx Subdirectory using CMake\nDESCRIPTION: This CMake command adds the 'Cxx' subdirectory to the current CMake project.  It makes the CMakeLists.txt file in the Cxx folder be processed as part of the overall build. This step is unconditional.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Capture full Slicer screen to file (Python)\nDESCRIPTION: Captures the entire Slicer application window as a QPixmap and saves it to a PNG file.  It requires the `slicer` module to be available. The file is saved to `c:/tmp/test.png`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/screencapture.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimg = qt.QPixmap.grabWidget(slicer.util.mainWindow()).toImage()\nimg.save(\"c:/tmp/test.png\")\n```\n\n----------------------------------------\n\nTITLE: Copying Content of MRML Nodes\nDESCRIPTION: This snippet demonstrates using the `vtkMRMLCopyContentMacro` macro in the class definition and overriding `CopyContent()` to enable shallow or deep copying of the data content of a custom MRML node.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/mrml_overview.md#_snippet_21\n\nLANGUAGE: C++\nCODE:\n```\nvtkMRMLCopyContentMacro(vtkMRMLYourNodeType)\n```\n\nLANGUAGE: C++\nCODE:\n```\nvoid CopyContent(vtkMRMLNode* anode, bool deepCopy)\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name and Data Target in CMake\nDESCRIPTION: This snippet sets the module name and data management target. If the SEM_DATA_MANAGEMENT_TARGET is not defined, it defaults to the module name plus \"Data\".\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ThresholdScalarVolume/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(CLP ${MODULE_NAME})\n\nif(NOT DEFINED SEM_DATA_MANAGEMENT_TARGET)\n  set(SEM_DATA_MANAGEMENT_TARGET ${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Kit Name CMake\nDESCRIPTION: Sets the KIT variable to the project name, which is later used to define other variables. This variable likely represents the library or component being built.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperLoadableModuleTemplate/Widgets/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Setting UI Source Files\nDESCRIPTION: Sets the `${KIT}_UI_SRCS` variable, likely intended to specify UI files. Currently, it's empty indicating no UI files are directly specified here.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_UI_SRCS\n  )\n```\n\n----------------------------------------\n\nTITLE: Build Shared Libraries Option\nDESCRIPTION: This snippet defines an option to build shared libraries. If BUILD_SHARED_LIBS is not already defined, it sets it to ON, allowing the user to control whether to build shared or static libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkTeem/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT DEFINED BUILD_SHARED_LIBS)\n  option(BUILD_SHARED_LIBS \"Build with shared libraries.\" ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Target\nDESCRIPTION: This snippet adds an external data target if `${SEM_DATA_MANAGEMENT_TARGET}` is equal to `${CLP}Data`.  The `ExternalData_add_target` function configures the external data dependencies for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CastScalarVolume/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Input and CLP Variables - CMake\nDESCRIPTION: This snippet sets the input directory and the module name. The SEM_DATA_MANAGEMENT_TARGET is set to ${CLP}Data if not already defined.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ExecutionModelTour/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input)\n\nset(CLP ${MODULE_NAME})\n\nif(NOT DEFINED SEM_DATA_MANAGEMENT_TARGET)\n  set(SEM_DATA_MANAGEMENT_TARGET ${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configure Support File\nDESCRIPTION: Configures the vtkITKConfig.cmake file from the .in template.  This file is used to provide information about the vtkITK library to other projects using find_package().\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkITK/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/vtkITKConfig.cmake.in\n  ${CMAKE_CURRENT_BINARY_DIR}/vtkITKConfig.cmake\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Test Source Files - CMake\nDESCRIPTION: Specifies the list of C++ source files that constitute the test cases. These files contain the actual test logic and assertions.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT_TEST_SRCS\n  qMRMLModelDisplayNodeWidgetTest1.cxx\n  qMRMLModelDisplayNodeWidgetTest2.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Sources\nDESCRIPTION: Lists the source files for the module. These files contain the actual implementation of the module's functionality and are compiled to create the module's library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/GeneralizedReformat/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_SRCS\n  qSlicer${MODULE_NAME}Module.cxx\n  qSlicer${MODULE_NAME}Module.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel\nDESCRIPTION: This snippet finds the SlicerExecutionModel package, which is required for execution model support. It also includes the associated use file to configure necessary variables.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/RobustStatisticsSegmenter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Rotate 3D View in Slicer (Python)\nDESCRIPTION: This snippet rotates the 3D view in 3D Slicer. It accesses the 3D view and calls the `yaw()` function, which rotates the view around the vertical axis.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_52\n\nLANGUAGE: python\nCODE:\n```\nlayoutManager = slicer.app.layoutManager()\nthreeDWidget = layoutManager.threeDWidget(0)\nthreeDView = threeDWidget.threeDView()\nthreeDView.yaw()\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory\nDESCRIPTION: This snippet conditionally adds the Testing subdirectory to the build process if BUILD_TESTING is enabled and the platform is not Windows. It includes tests for the GrayscaleModelMaker module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GrayscaleModelMaker/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  if(NOT WIN32)\n    add_subdirectory(Testing)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Module Target Libraries\nDESCRIPTION: Lists the libraries that the module depends on. These libraries provide additional functionality required by the module, such as MRML and Logic implementations.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/GeneralizedReformat/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleMRML\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  )\n```\n\n----------------------------------------\n\nTITLE: Find SlicerExecutionModel - CMake\nDESCRIPTION: Finds the SlicerExecutionModel package using `find_package` and includes its use file. This ensures that the module can leverage the Slicer execution model framework.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MaskScalarVolume/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Include Directories Configuration\nDESCRIPTION: Sets and includes necessary directories for finding header files. It includes the current source and binary directories, along with MRMLCore include directories.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/IDImageIO/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(include_dirs\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  ${CMAKE_CURRENT_BINARY_DIR}\n  ${MRMLCore_INCLUDE_DIRS}\n  )\ninclude_directories(${include_dirs})\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel\nDESCRIPTION: This snippet finds the SlicerExecutionModel package, which provides utilities for creating Slicer modules. It then includes the usage file to make the SlicerExecutionModel functions available.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GrayscaleModelMaker/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Adding a Subdirectory using CMake\nDESCRIPTION: This CMake command adds the 'Cxx' directory to the build.  CMake will process the CMakeLists.txt file located within the 'Cxx' subdirectory. This command is essential for modularizing large projects.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/Widgets/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Subdirectory\nDESCRIPTION: This snippet conditionally adds the `Python` subdirectory to the build if `Slicer_USE_PYTHONQT` is enabled. This indicates that the module has Python bindings and related code.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/Widgets/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_USE_PYTHONQT)\n  add_subdirectory(Python)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Measure Point Distances from Line - Python\nDESCRIPTION: This snippet calculates the distances of points from a line. It retrieves a point list node (`F`) and a line node (`L`).  It computes the perpendicular distance from each point to the line using vector operations. It relies on `slicer.util.arrayFromMarkupsControlPoints` to extract point coordinates from the markups nodes.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\npointListNode = getNode(\"F\")\nlineNode = getNode(\"L\")\n\n# Get point list control point positions and line endpoints as numpy arrays\npoints = slicer.util.arrayFromMarkupsControlPoints(pointListNode)\nline = slicer.util.arrayFromMarkupsControlPoints(lineNode)\n# Compute distance of control points from the line\nfrom numpy import cross\nfrom numpy.linalg import norm\nfor i, point in enumerate(points):\n    d = norm(cross(line[1]-line[0],point-line[0])/norm(line[1]-line[0]))\n    print(f\"Point {i}: Position = {point}. Distance from line = {d}.\")\n```\n\n----------------------------------------\n\nTITLE: Setting module name\nDESCRIPTION: This snippet sets the name of the module to ScriptedLoadableModuleTemplate using the set command. This variable is then used throughout the CMakeLists.txt file to refer to the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/ScriptedLoadableExtensionTemplate/ScriptedLoadableModuleTemplate/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_NAME ScriptedLoadableModuleTemplate)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing Certificates\nDESCRIPTION: Conditionally configures and installs SSL certificates if PythonQt with OpenSSL support is enabled.  This involves copying the Slicer.crt file to the appropriate destination.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/CMakeLists.txt#_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_USE_PYTHONQT_WITH_OPENSSL)\n  configure_file(\n    Resources/Certs/Slicer.crt\n    ${Slicer_BINARY_DIR}/${Slicer_SHARE_DIR}/Slicer.crt\n    COPYONLY\n    )\n  install(\n    FILES Resources/Certs/Slicer.crt\n    DESTINATION ${Slicer_INSTALL_SHARE_DIR} COMPONENT Runtime\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel dependency\nDESCRIPTION: This snippet uses `find_package` to locate the `SlicerExecutionModel` library and its `ModuleDescriptionParser` component. It requires that the package is found, indicating that the project depends on this external library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/CLI/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED ModuleDescriptionParser)\n```\n\n----------------------------------------\n\nTITLE: Set Kit Variable CMake\nDESCRIPTION: Sets the variable `KIT` to the project name. This simplifies referencing the project name throughout the configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Annotations/MRML/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Files\nDESCRIPTION: This snippet defines the resource file (.qrc) that contains embedded resources such as images and icons. This file is compiled into the module to provide these resources at runtime.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/Widgets/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_RESOURCES\n  Resources/qSlicer${MODULE_NAME}ModuleWidgets.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Prevent Building Extensions Within Slicer Source\nDESCRIPTION: This snippet checks if the Slicer_SOURCE_DIR variable is set, which indicates that the build is happening within the Slicer source tree. If so, it issues a fatal error message, advising users to build extensions separately using -DSlicer_DIR.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/CMake/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_SOURCE_DIR)\n  message(FATAL_ERROR \"Building extensions within Slicer is not supported any more. Instead consider\nbuilding this project specifying -DSlicer_DIR:PATH=/path/to/Slicer-SuperBuild/Slicer-build.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Module Build Directory\nDESCRIPTION: This CMake snippet determines the build directory for the module depending on whether multiple configurations are being used (e.g., Debug, Release). It iterates through the configurations to build the module directory path. If there is only one configuration type, it sets the module build directory directly.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/Testing/Python/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_CONFIGURATION_TYPES)\n  set(MODULE_BUILD_DIR \"\")\n  foreach(config ${CMAKE_CONFIGURATION_TYPES})\n    list(APPEND MODULE_BUILD_DIR \"${CMAKE_BINARY_DIR}/${Slicer_QTLOADABLEMODULES_LIB_DIR}/${config}\")\n  endforeach()\nelse()\n  set(MODULE_BUILD_DIR \"${CMAKE_BINARY_DIR}/${Slicer_QTLOADABLEMODULES_LIB_DIR}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Target Libraries Definition\nDESCRIPTION: Specifies the libraries that the module's logic component depends on. These are other Slicer modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/Logic/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleMRML\n  vtkSlicerTerminologiesModuleLogic\n  vtkSlicerMarkupsModuleMRML\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Resources - CMake\nDESCRIPTION: Lists the resource files used by the module, such as the module's Qt resource file (.qrc). These files typically contain images, stylesheets, and other non-code assets.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Texts/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_RESOURCES\n  Resources/qSlicer${MODULE_NAME}Module.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting source files for the KIT - CMake\nDESCRIPTION: This snippet defines the source files (C++ and header files) for the `KIT`. These files contain the implementation of the widgets.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/Widgets/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_SRCS\n  qSlicerTableColumnPropertiesWidget.cxx\n  qSlicerTableColumnPropertiesWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting target libraries\nDESCRIPTION: This snippet defines the target libraries for the module, including ITK, VTK, and other Slicer-specific libraries. It iterates through DCMTK libraries, checking if they are targets and appending them accordingly.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/PETStandardUptakeValueComputation/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(${MODULE_NAME}_TARGET_LIBRARIES\n  vtkITK ModuleDescriptionParser\n  MRMLCore SlicerBaseLogic SlicerBaseCLI\n  ${ITK_LIBRARIES}\n  ${VTK_LIBRARIES}\n  )\nforeach(lib IN LISTS DCMTK_LIBRARIES)\n  if(TARGET \"DCMTK::${lib}\")\n    list(APPEND ${MODULE_NAME}_TARGET_LIBRARIES DCMTK::${lib})\n  else()\n    list(APPEND ${MODULE_NAME}_TARGET_LIBRARIES ${lib})\n  endif()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Launching Slicer with a new console (Windows)\nDESCRIPTION: This code snippet shows how to launch the Slicer application with a new console window on Windows. It uses the `start` command within `cmd.exe` to launch `SlicerApp-real.exe`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/debugging/tips.md#_snippet_5\n\nLANGUAGE: batch\nCODE:\n```\nSlicer.exe --launch %comspec% /c start SlicerApp-real.exe\n```\n\n----------------------------------------\n\nTITLE: Adding Slicer Generate Extension Description Tests\nDESCRIPTION: This uses the `add_cmakescript_test` macro to add a test for generating slicer extension descriptions. It calls `Extensions/CMake/SlicerFunctionGenerateExtensionDescription.cmake` to verify the generation process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/CMake/Testing/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_cmakescript_test(\n  slicer_generate_extension_description_test\n  Extensions/CMake/SlicerFunctionGenerateExtensionDescription.cmake)\n```\n\n----------------------------------------\n\nTITLE: Appending MOC Sources (ExtensionManager)\nDESCRIPTION: Conditionally appends header files related to the Extension Manager to the list of MOC sources if Extension Manager support is enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_BUILD_EXTENSIONMANAGER_SUPPORT)\n  list(APPEND KIT_MOC_SRCS\n    qSlicerExtensionDownloadTask.h\n    qSlicerExtensionsManagerModel.h\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Options Configuration CMake\nDESCRIPTION: Configures options for PythonQt usage and shared library building. Sets MRMLDisplayableManager_USE_PYTHON based on Slicer_USE_PYTHONQT and VTK_WRAP_PYTHON variables. Defines the option to build shared libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/DisplayableManager/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_USE_PYTHONQT AND VTK_WRAP_PYTHON)\n  set(MRMLDisplayableManager_USE_PYTHON ON)\nelse()\n  set(MRMLDisplayableManager_USE_PYTHON OFF)\nendif()\n\nif(NOT DEFINED BUILD_SHARED_LIBS)\n  option(BUILD_SHARED_LIBS \"Build with shared libraries.\" ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Resource Files CMake\nDESCRIPTION: This snippet defines the resource files, such as images or other data, that are embedded into the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOMLib/Widgets/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_RESOURCES\n  #Resources/${KIT}.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Project and Setting Variables in CMake\nDESCRIPTION: This snippet defines the project name and sets several variables to control the build process. It defines the export directive, include directories, source files, meta-object compiler (MOC) sources, user interface (UI) sources, resources, and target libraries for the module's widgets.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/Widgets/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(qSlicer${MODULE_NAME}ModuleWidgets)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"Q_SLICER_MODULE_${MODULE_NAME_UPPER}_WIDGETS_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSlicer${MODULE_NAME}ModuleMRML_SOURCE_DIR}\n  ${vtkSlicer${MODULE_NAME}ModuleMRML_BINARY_DIR}\n  )\n\nset(${KIT}_SRCS\n  qSlicerCPURayCast${MODULE_NAME}PropertiesWidget.cxx\n  qSlicerCPURayCast${MODULE_NAME}PropertiesWidget.h\n  qSlicerGPURayCast${MODULE_NAME}PropertiesWidget.cxx\n  qSlicerGPURayCast${MODULE_NAME}PropertiesWidget.h\n  qSlicerMulti${MODULE_NAME}PropertiesWidget.cxx\n  qSlicerMulti${MODULE_NAME}PropertiesWidget.h\n  qSlicerPresetComboBox.cxx\n  qSlicerPresetComboBox.h\n  qSlicerPresetComboBox_p.h\n  qSlicer${MODULE_NAME}PropertiesWidget.cxx\n  qSlicer${MODULE_NAME}PropertiesWidget.h\n  qSlicer${MODULE_NAME}PresetComboBox.cxx\n  qSlicer${MODULE_NAME}PresetComboBox.h\n  qMRMLVolumePropertyNodeWidget.cxx\n  qMRMLVolumePropertyNodeWidget.h\n  qSlicerGPUMemoryComboBox.cxx\n  qSlicerGPUMemoryComboBox.h\n  )\n\nset(${KIT}_MOC_SRCS\n  qSlicerCPURayCast${MODULE_NAME}PropertiesWidget.h\n  qSlicerGPURayCast${MODULE_NAME}PropertiesWidget.h\n  qSlicerMulti${MODULE_NAME}PropertiesWidget.h\n  qSlicerPresetComboBox.h\n  qSlicerPresetComboBox_p.h\n  qSlicer${MODULE_NAME}PropertiesWidget.h\n  qSlicer${MODULE_NAME}PresetComboBox.h\n  qMRMLVolumePropertyNodeWidget.h\n  qSlicerGPUMemoryComboBox.h\n  )\n\nset(${KIT}_UI_SRCS\n  ../Resources/UI/qMRMLVolumePropertyNodeWidget.ui\n  ../Resources/UI/qSlicerCPURayCast${MODULE_NAME}PropertiesWidget.ui\n  ../Resources/UI/qSlicerGPURayCast${MODULE_NAME}PropertiesWidget.ui\n  ../Resources/UI/qSlicerMulti${MODULE_NAME}PropertiesWidget.ui\n  ../Resources/UI/qSlicer${MODULE_NAME}PresetComboBox.ui\n  )\n\nset(${KIT}_RESOURCES\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  vtkSlicer${MODULE_NAME}ModuleMRML\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files - CMake\nDESCRIPTION: Defines the source files that comprise the displayable manager, specifically vtkMRMLVolumeRenderingDisplayableManager.cxx.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/MRMLDM/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(displayable_manager_SRCS\n  vtkMRMLVolumeRenderingDisplayableManager.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Executable for Tests in CMake\nDESCRIPTION: The `ctk_add_executable_utf8` macro adds an executable target named `${KIT}CxxTests` (e.g., `vtkTeemCxxTests`) and specifies the source files to be compiled, which are stored in the `Tests` variable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkTeem/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nctk_add_executable_utf8(${KIT}CxxTests ${Tests})\n```\n\n----------------------------------------\n\nTITLE: Setting Module UI Sources - CMake\nDESCRIPTION: This code snippet specifies the UI files for the module, which define the user interface layout. These UI files are typically created using Qt Designer and are converted into C++ code during the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_UI_SRCS\n  Resources/UI/qSlicer${MODULE_NAME}ModuleWidget.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Resources in CMake\nDESCRIPTION: This snippet defines the resources for the module, such as icons and other data files.  These resources are bundled into the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/Loadable/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_RESOURCES\n  Resources/qSlicer${MODULE_NAME}Module.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting UI Source Files\nDESCRIPTION: Specifies the UI source files (.ui) that define the module's user interface. These files are created using Qt Designer and are used to generate the corresponding C++ code for the UI elements. The `MODULE_UI_SRCS` variable lists the paths to these UI files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Units/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_UI_SRCS\n  Resources/UI/qSlicer${MODULE_NAME}SettingsPanel.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Project Properties CMake\nDESCRIPTION: This snippet sets the project name and includes a macro for building the application. It lays the foundation for configuring the Slicer application build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Applications/SlicerApp/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(SlicerApp)\n\ninclude(SlicerMacroBuildApplication)\n```\n\n----------------------------------------\n\nTITLE: Setting Module UI Source Files CMake\nDESCRIPTION: Defines the list of UI files that are used by the module.  These UI files describe the graphical user interface using XML.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_UI_SRCS\n  Resources/UI/qSlicer${MODULE_NAME}Module.ui\n  Resources/UI/qSlicer${MODULE_NAME}SettingsPanel.ui\n  Resources/UI/qSlicerAnnotationModuleIOOptionsWidget.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Configure Module Cxx Test Driver\nDESCRIPTION: This snippet utilizes a custom CMake macro, `slicerMacroConfigureModuleCxxTestDriver`, to configure the test driver.  It sets the `NAME` to the `KIT` variable, `SOURCES` to the `KIT_TEST_SRCS` variable and enables checks for VTK debug leaks and error output during testing. This macro handles the necessary steps to create and configure a test executable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Data/Testing/Cxx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nslicerMacroConfigureModuleCxxTestDriver(\n  NAME ${KIT}\n  SOURCES ${KIT_TEST_SRCS}\n  WITH_VTK_DEBUG_LEAKS_CHECK\n  WITH_VTK_ERROR_OUTPUT_CHECK\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name\nDESCRIPTION: This snippet sets the module name using the `set` command. This variable is used in subsequent commands to define the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ModelMaker/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME ModelMaker)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Source Files\nDESCRIPTION: This snippet sets the KIT_TEST_SRCS variable to a list of C++ source files containing the tests for the module. In this case, it includes vtkSlicerTablesLogicAddFileTest.cxx.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/Testing/Cxx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT_TEST_SRCS\n  vtkSlicerTablesLogicAddFileTest.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Module Widgets\nDESCRIPTION: Uses the `SlicerMacroBuildModuleWidgets` macro to build the module widgets. This macro encapsulates the necessary build rules for creating a Slicer module widget library. It handles MOC processing, UI compilation, resource bundling, and linking with the specified libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/Loadable/Widgets/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleWidgets(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  UI_SRCS ${${KIT}_UI_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  RESOURCES ${${KIT}_RESOURCES}\n  WRAP_PYTHONQT\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name using CMake\nDESCRIPTION: This CMake snippet sets the MODULE_NAME variable to 'DICOMPlugins'. This variable is used later to reference the module in other parts of the build system.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOMPlugins/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME DICOMPlugins)\n```\n\n----------------------------------------\n\nTITLE: Building MRML Module using CMake Macro\nDESCRIPTION: This snippet uses a custom CMake macro, `SlicerMacroBuildModuleMRML`, to simplify the build process for MRML modules. This macro takes several parameters, including the module name, export directive, include directories, source files, and target libraries. It automates the steps required to build the module, such as creating the necessary targets and setting up the build dependencies.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/MRML/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleMRML(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Export Directive in CMake\nDESCRIPTION: Defines the export directive for the module. This directive controls how the module's symbols are exported, making them available to other parts of the application.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SceneViews/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_EXPORT_DIRECTIVE \"Q_SLICER_QTMODULES_${MODULE_NAME_UPPER}_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries\nDESCRIPTION: This snippet defines the target libraries that the module logic depends on.  In this case, it is currently empty.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Terminologies/Logic/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Project and Setting Variables (CMake)\nDESCRIPTION: This snippet sets up the project name and defines CMake variables to control the build process. It sets the module name, export directive, include directories, source files, and target libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOMLib/Logic/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleLogic)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_LOGIC_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  )\n\nset(${KIT}_SRCS\n  vtkSlicerDICOMLoadable.cxx\n  vtkSlicerDICOMLoadable.h\n  vtkSlicerDICOMExportable.cxx\n  vtkSlicerDICOMExportable.h\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  ${VTK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Export Directive\nDESCRIPTION: This snippet defines a CMake variable that specifies the export directive for the plugin. The export directive is crucial for managing symbol visibility when the plugin is built as a shared library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_EXPORT \"Q_SLICER_MODULE_${MODULE_NAME_UPPER}_WIDGETS_PLUGINS_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Find Git Package\nDESCRIPTION: Finds the Git executable.  `mark_as_superbuild` makes the Git executable available during SuperBuild.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Extensions/SuperBuild/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Git REQUIRED)\nmark_as_superbuild(GIT_EXECUTABLE)\n```\n\n----------------------------------------\n\nTITLE: Target Libraries Definition CMake\nDESCRIPTION: Specifies the target libraries that the module widgets depend on, such as `vtkSlicer${MODULE_NAME}ModuleLogic`. These dependencies will be linked when building the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperLoadableModuleTemplate/Widgets/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel Package in CMake\nDESCRIPTION: Finds the SlicerExecutionModel package, which provides macros and functions for building Slicer modules. It requires the package and includes its use file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/LabelMapSmoothing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Sets additional include directories for the project. These directories contain header files that the project needs to compile.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT_include_directories\n  ${MRMLLogic_INCLUDE_DIRS}\n  ${MRMLDisplayableManager_INCLUDE_DIRS}\n  )\n\nif(Slicer_BUILD_CLI_SUPPORT)\n  list(APPEND KIT_include_directories\n    ${ModuleDescriptionParser_INCLUDE_DIRS}\n    ${MRMLCLI_INCLUDE_DIRS}\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Target Libraries - CMake\nDESCRIPTION: Lists the external libraries that the module depends on. These libraries are linked with the module during the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/Widgets/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  qSlicerSegmentationsEditorEffects\n  qSlicerTerminologiesModuleWidgets\n  vtkSlicerSegmentationsModuleMRML\n  vtkSlicerSegmentationsModuleLogic\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Project Name\nDESCRIPTION: This line sets the project name using the variable `KIT`. It is initialized with the value of `PROJECT_NAME` which is likely defined elsewhere in the CMake configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Running Slicer with Visual Studio Project (BAT)\nDESCRIPTION: This command launches Slicer and opens the Visual Studio project with the necessary environment variables set. It allows debugging Slicer directly from Visual Studio.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/debugging/windowscpp.md#_snippet_0\n\nLANGUAGE: bat\nCODE:\n```\nSlicer.exe --VisualStudioProject\n```\n\n----------------------------------------\n\nTITLE: Marking Additional Qt Modules as Superbuild\nDESCRIPTION: This snippet marks the `Slicer_ADDITIONAL_REQUIRED_QT_MODULES` variable as a superbuild variable if it is defined. Also, the variable `Slicer_USE_SYSTEM_QT` is marked as superbuild.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_44\n\nLANGUAGE: cmake\nCODE:\n```\nif(DEFINED Slicer_ADDITIONAL_REQUIRED_QT_MODULES)\n  mark_as_superbuild(Slicer_ADDITIONAL_REQUIRED_QT_MODULES:STRING)\nendif()\n\nmark_as_superbuild(Slicer_USE_SYSTEM_QT:BOOL)\n```\n\n----------------------------------------\n\nTITLE: Set Minimum CMake Version\nDESCRIPTION: Specifies the minimum required CMake version for the project.  This ensures that the CMake features used are compatible with the CMake version being used.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Extensions/SuperBuild/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16.3...3.19.7 FATAL_ERROR)\n```\n\n----------------------------------------\n\nTITLE: Setting MOC Generation Sources\nDESCRIPTION: This sets the source files from which MOC files will be generated. The files listed are used by QT5_GENERATE_MOCS.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT_TEST_GENERATE_MOC_SRCS\n  qMRMLMarkupsOptionsWidgetsFactoryTest.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Module Path\nDESCRIPTION: Sets the CMAKE_MODULE_PATH variable to include the directory containing custom CMake modules for the project. This allows CMake to find and use the custom modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${MRMLWidgets_SOURCE_DIR}/CMake\")\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files CMake\nDESCRIPTION: Specifies the C++ source files (.cxx and .h) that make up the module. These files contain the implementation of the module's functionality.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  qSlicerSubjectHierarchy${MODULE_NAME}Plugin.cxx\n  qSlicerSubjectHierarchy${MODULE_NAME}Plugin.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Add Subdirectories in CMake\nDESCRIPTION: Adds subdirectories 'Logic' and 'Widgets' to the build process. These subdirectories likely contain the implementation logic and user interface widgets of the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperLoadableModuleTemplate/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Logic)\nadd_subdirectory(Widgets)\n```\n\n----------------------------------------\n\nTITLE: Setting Python Test Resources List\nDESCRIPTION: This CMake snippet defines a list of resources (e.g., data files) that may be needed by the Python test scripts. This list is empty in this specific file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/Testing/Python/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(EXTENSION_TEST_PYTHON_RESOURCES\n  )\n```\n\n----------------------------------------\n\nTITLE: Project Initialization - CMake\nDESCRIPTION: This snippet initializes the CMake project for a VTK Slicer module logic component. It sets the project name and related variables for later use.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Data/Logic/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleLogic)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_LOGIC_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory CMake\nDESCRIPTION: This snippet conditionally adds the `Testing` subdirectory to the build if `BUILD_TESTING` is enabled. This allows the inclusion of test cases into the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Applications/SlicerApp/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Logic Subdirectory\nDESCRIPTION: Adds the Logic subdirectory to the build. This subdirectory likely contains the core logic implementation of the Cameras module. It's a standard practice to separate the logic from the GUI.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Cameras/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Logic)\n```\n\n----------------------------------------\n\nTITLE: Export Segmentation to DICOM Segmentation Object in Python\nDESCRIPTION: Exports a segmentation to a DICOM segmentation object. Requires the segmentation node, a reference volume node, and an output folder. (Note: The provided snippet is incomplete.)\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/dicom.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nsegmentationNode = ...\nreferenceVolumeNode = ...\noutputFolder = \"c:/tmp/dicom-output\"\n\n```\n\n----------------------------------------\n\nTITLE: Adding ExternalData Target\nDESCRIPTION: This snippet adds an ExternalData target if the `SEM_DATA_MANAGEMENT_TARGET` is equal to `${CLP}Data`. This target is responsible for managing the external data required by the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleScalarVolume/Testing/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name\nDESCRIPTION: This snippet sets the module name to VotingBinaryHoleFillingImageFilter. This variable is likely used in other parts of the CMake configuration to define the target name and other related properties.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/VotingBinaryHoleFillingImageFilter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME VotingBinaryHoleFillingImageFilter)\n```\n\n----------------------------------------\n\nTITLE: Set INCLUDE_DIRS Variable\nDESCRIPTION: Sets the `${PROJECT_NAME}_INCLUDE_DIRS` variable to the current source and binary directories.  This variable is cached internally for use by other CMake modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/RemoteIO/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nset(${PROJECT_NAME}_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR}\n  CACHE INTERNAL \"${PROJECT_NAME} include dirs\" FORCE)\n```\n\n----------------------------------------\n\nTITLE: Add Control Point Programmatically (Python)\nDESCRIPTION: Adds a new control point to the currently active point list, either at the origin or at a specified initial location.  Uses the markups module logic to add the control point.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nslicer.modules.markups.logic().AddControlPoint()\n```\n\nLANGUAGE: python\nCODE:\n```\nslicer.modules.markups.logic().AddControlPoint(1.0, -2.0, 3.3)\n```\n\n----------------------------------------\n\nTITLE: Setting Application Folder CMake\nDESCRIPTION: This snippet defines a variable `${PROJECT_NAME}_FOLDER` which represents the folder where the application will be installed. It uses the `SlicerApp_APPLICATION_NAME` variable to create a folder name.\nSOURCE: https://github.com/slicer/slicer/blob/main/Applications/SlicerApp/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${PROJECT_NAME}_FOLDER \"App-${SlicerApp_APPLICATION_NAME}\")\n```\n\n----------------------------------------\n\nTITLE: Add External Data Test\nDESCRIPTION: This snippet configures an external data test using `ExternalData_add_test`.  It defines the test name, command to execute, and compares the output with baseline data. It requires external data to be available through the `ExternalData` module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GrayscaleFillHoleImageFilter/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(testname ${CLP}Test)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  --compare DATA{${BASELINE}/GrayscaleFillHoleTest.nhdr,GrayscaleFillHoleTest.raw.gz}\n            ${TEMP}/GrayscaleFillHoleTest.nhdr\n  ModuleEntryPoint\n    DATA{${INPUT}/MRHeadResampled.nhdr,MRHeadResampled.raw.gz}\n    ${TEMP}/GrayscaleFillHoleTest.nhdr\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Test\nDESCRIPTION: This snippet uses ExternalData_add_test to define the test command and input/output data. It specifies the command to execute the test executable with specific parameters and save the transform. It depends on SlicerExecutionModel for command execution.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/FiducialRegistration/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(testname ${CLP}Test)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  ModuleEntryPoint\n --returnparameterfile ${TEMP}/FiducialRegistration.params\n --fixedLandmarks 37.5615,82.3156,0 --fixedLandmarks -26.373,81.5164,0 --fixedLandmarks -2.39754,-21.5779,0\n --movingLandmarks 39.959,59.9385,30 --movingLandmarks -24.7746,62.3361,30 --movingLandmarks 0.79918,-52.7459,33.75\n --saveTransform ${TEMP}/FiducialRegistration_vtkMRMLLinearTransformNodeE.txt\n --transformType Rigid\n)\n```\n\n----------------------------------------\n\nTITLE: Load Markups from FCSV File (Python)\nDESCRIPTION: Loads a markups point list from a legacy FCSV file.  This file format is deprecated and only supports a limited set of markup properties.  Requires a valid FCSV file path.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nslicer.util.loadMarkupsFiducialList(\"/path/to/list/F.fcsv\")\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Ubuntu 22.04, 20.04, Debian 12, 11, 10\nDESCRIPTION: This command installs required dependencies for running 3D Slicer on Ubuntu 22.04 (Jammy Jellyfish), 20.04 (Focal Fossa), Debian 12 (bookworm), Debian 11 (bullseye), and Debian 10 (buster) using `apt-get`. It installs libraries for OpenGL, PulseAudio, NSS, ALSA, Qt, and SM.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/getting_started.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nsudo apt-get install libglu1-mesa libpulse-mainloop-glib0 libnss3 libasound2 qt5dxcb-plugin libsm6\n```\n\n----------------------------------------\n\nTITLE: Set Python Resources - CMake\nDESCRIPTION: Specifies the Python resources associated with the module. The `MODULE_PYTHON_RESOURCES` variable is set to a list containing the module's icon.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOMPatcher/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_PYTHON_RESOURCES\n  Resources/Icons/${MODULE_NAME}.png\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Utility Files\nDESCRIPTION: This sets the utility files needed for testing.  The `Tests_UtilityFiles` variable lists the header and source files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(Tests_UtilityFiles\n  qMRMLMarkupsMalformedWidget.h\n  qMRMLMarkupsMalformedWidget.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files - CMake\nDESCRIPTION: Defines the source files (.cxx and .h) that constitute the module. These files include qSlicerSubjectHierarchyColorLegendPlugin.cxx and qSlicerSubjectHierarchyColorLegendPlugin.h.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  qSlicerSubjectHierarchyColorLegendPlugin.cxx\n  qSlicerSubjectHierarchyColorLegendPlugin.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties\nDESCRIPTION: This sets properties for the target `${KIT}CxxTests`. Specifically, it sets the `FOLDER` property to `Module-${KIT}`, which organizes the target within the IDE.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(${KIT}CxxTests PROPERTIES FOLDER \"Module-${KIT}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory - CMake\nDESCRIPTION: Adds a subdirectory named 'Testing' to the build process if the BUILD_TESTING variable is enabled. This allows for including unit tests for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/CLIExtensionTemplate/CLIModuleTemplate/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Debug Message in Qt Classes (C++)\nDESCRIPTION: This snippet shows how to log a debug message in Qt-based classes using `qDebug()`. It logs the value of a variable for debugging purposes.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/style_guide.md#_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\nqDebug() << \"This variable has the value: \"<< value;\n```\n\n----------------------------------------\n\nTITLE: Target Libraries\nDESCRIPTION: Sets the target libraries that the module depends on. This ensures that these libraries are linked correctly when the module is built and used.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/LoadableCustomMarkups/MRML/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  ${MRML_LIBRARIES}\n  vtkSlicerMarkupsModuleMRML\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory CMake\nDESCRIPTION: This snippet adds a subdirectory for testing if the `BUILD_TESTING` option is enabled. This allows the project to include and build its test suite.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Logic/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Input Directory - CMake\nDESCRIPTION: Defines the input directory containing data or resources required for the tests. In this case, it points to the Testing directory within the MRMLCore source directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INPUT ${MRMLCore_SOURCE_DIR}/Testing)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries\nDESCRIPTION: Specifies the libraries that the module depends on. These libraries provide additional functionality and resources for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/LoadableExtensionTemplate/LoadableModuleTemplate/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  qSlicer${MODULE_NAME}ModuleWidgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Set Python Resources for Module\nDESCRIPTION: Defines the Python resources associated with the module. Currently, it's an empty list. These resources are used by `slicerMacroBuildScriptedModule` to build the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/SelfTests/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_PYTHON_RESOURCES\n  )\n\n```\n\n----------------------------------------\n\nTITLE: Add Testing Subdirectory\nDESCRIPTION: Adds the `Testing` subdirectory to the build process if `BUILD_TESTING` is enabled. This allows for running tests as part of the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkSegmentationCore/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Warning Message in VTK Classes (C++)\nDESCRIPTION: This snippet demonstrates how to log a warning message in VTK-based classes using `vtkWarningMacro()`. It logs a message indicating a potentially dangerous situation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/style_guide.md#_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\nvtkWarningMacro(\"Be careful here, this is dangerous\");\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files (CMake)\nDESCRIPTION: Lists the source files that comprise the module. These files will be compiled and linked into the module's library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Annotations/Logic/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_SRCS\n  vtkSlicerAnnotationModuleLogic.cxx\n  vtkSlicerAnnotationModuleLogic.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating symbolic links for ccache\nDESCRIPTION: This snippet shows how to create symbolic links to disguise `ccache` as valid compilers (c++ and cc). This is necessary because the Slicer build process might not directly recognize `ccache` as a valid compiler.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/linux.md#_snippet_14\n\nLANGUAGE: console\nCODE:\n```\nln -s /usr/bin/ccache ~/.local/bin/c++\nln -s /usr/bin/ccache ~/.local/bin/cc\n```\n\n----------------------------------------\n\nTITLE: Setting UI Source Files\nDESCRIPTION: This snippet sets the `${KIT}_UI_SRCS` variable, which lists the Qt Designer UI files. These files define the layout and visual appearance of the module's widgets. In this case, it's an empty list.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/Widgets/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_UI_SRCS\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Target for Data Management in CMake\nDESCRIPTION: This code checks if the `SEM_DATA_MANAGEMENT_TARGET` variable is defined. If not, it sets it to a default value based on the module name (CLP).  This target is used to manage the download and update of external data required by the module. This ensures that the data management target defaults to the module name's data target if it is not already specified.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/SimpleRegionGrowingSegmentation/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED SEM_DATA_MANAGEMENT_TARGET)\n  set(SEM_DATA_MANAGEMENT_TARGET ${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories\nDESCRIPTION: Adds subdirectories for Logic, SubjectHierarchyPlugins, and Widgets, indicating that these components are part of the Volumes module and need to be included in the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Logic)\nadd_subdirectory(SubjectHierarchyPlugins)\nadd_subdirectory(Widgets)\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory\nDESCRIPTION: Conditionally adds the 'Testing' subdirectory to the build process if the `BUILD_TESTING` variable is enabled. This allows the inclusion of unit tests for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ImageLabelCombine/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Module Export Directive\nDESCRIPTION: Defines the MODULE_EXPORT_DIRECTIVE, which is used to manage symbol visibility for the module. This macro ensures that the symbols are properly exported for use by other modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_EXPORT_DIRECTIVE \"Q_SLICER_QTMODULES_${MODULE_NAME_UPPER}_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name\nDESCRIPTION: This snippet sets the module name using the `set` command.  The variable `KIT` is assigned the value of `${PROJECT_NAME}` which likely represents the Slicer project's name. This variable is then used in subsequent configuration steps.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Include Cxx Subdirectory with CMake\nDESCRIPTION: This CMake command adds the 'Cxx' subdirectory to the current build process. The 'Cxx' directory should contain its own CMakeLists.txt file that defines how it should be built. This allows for modularity and organization within the overall project structure.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Defining Test Sources\nDESCRIPTION: This snippet defines the source files for the C++ tests. `qSlicerAboutDialogTest1.cxx` and `qSlicerErrorReportDialogTest1.cxx` are added to the `KIT_TEST_SRCS` variable, which is then used by `create_test_sourcelist` to generate a test source list.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTApp/Testing/Cxx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT_TEST_SRCS\n  qSlicerAboutDialogTest1.cxx\n  qSlicerErrorReportDialogTest1.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding Superbuild error logs - console\nDESCRIPTION: This command searches for error logs within the build directory.  It uses `find` to locate files with a name containing \"rr.log\", then uses `xargs` to list those files in order of latest access, with the most recently accessed log file at the bottom of the list.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/macos.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nfind . -name \"*rr*.log\" | xargs ls -ltur\n```\n\n----------------------------------------\n\nTITLE: Set Project Name\nDESCRIPTION: This snippet sets the project name using the `set` command. It assigns the value of the `PROJECT_NAME` variable to the `KIT` variable. This variable is likely used to identify the specific module or component being tested.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Plots/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Setting Module Target Libraries in CMake\nDESCRIPTION: Lists the libraries that the module depends on. These libraries are linked with the module during the build process, providing necessary functionality.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SceneViews/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_TARGET_LIBRARIES\n  qSlicerBaseQTCore\n  qMRMLWidgets\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  vtkSlicerSequencesModuleMRML\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory in CMake\nDESCRIPTION: This snippet conditionally adds the Testing subdirectory to the build process if the BUILD_TESTING variable is enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/OrientScalarVolume/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory - CMake\nDESCRIPTION: Conditionally adds the Testing subdirectory to the build process if the BUILD_TESTING variable is enabled. This includes any tests defined in the Testing directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GaussianBlurImageFilter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Appending MOC Sources (PythonQt)\nDESCRIPTION: Conditionally appends header files related to PythonQt to the list of MOC sources if PythonQt support is enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_USE_PYTHONQT)\n  list(APPEND KIT_MOC_SRCS\n    qSlicerScriptedFileReader.h\n    qSlicerScriptedFileWriter.h\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Target Properties Configuration CMake\nDESCRIPTION: Sets target properties such as COMPILE_DEFINITIONS for AUTOINIT. Applies user-defined library properties using Slicer_LIBRARY_PROPERTIES.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/DisplayableManager/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nif(${lib_name}_AUTOINIT)\n  set_property(TARGET ${lib_name}\n    APPEND PROPERTY COMPILE_DEFINITIONS\n    \"${lib_name}_AUTOINIT=1(${lib_name})\"\n    )\nendif()\n\n# Apply user-defined properties to the library target.\nif(Slicer_LIBRARY_PROPERTIES)\n  set_target_properties(${lib_name} PROPERTIES ${Slicer_LIBRARY_PROPERTIES})\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory\nDESCRIPTION: Adds a subdirectory for additional build-time tests if BUILD_TESTING is enabled.  This allows for more comprehensive testing of the module during the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/SegmentStatistics/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Source Files (CMake)\nDESCRIPTION: This snippet conditionally includes additional source files into the MRMLCore library if `MRML_USE_vtkTeem` is enabled. This allows for optional features and dependencies to be incorporated based on configuration settings. The files added relate to diffusion tensor and vector volume representations.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Core/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif(MRML_USE_vtkTeem)\n  set(MRMLCore_SRCS\n    ${MRMLCore_SRCS}\n    vtkMRMLDiffusionImageVolumeNode.cxx\n    vtkMRMLDiffusionTensorVolumeDisplayNode.cxx\n    vtkMRMLDiffusionTensorVolumeNode.cxx\n    vtkMRMLDiffusionTensorVolumeSliceDisplayNode.cxx\n    vtkMRMLNRRDStorageNode.cxx\n    vtkMRMLStreamingVolumeNode.cxx\n    vtkMRMLTensorVolumeNode.cxx\n    vtkMRMLVectorVolumeNode.cxx\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configure Header File\nDESCRIPTION: Configures the `vtkSegmentationCoreConfigure.h` header file by replacing variables in the `.in` file with their corresponding values during the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkSegmentationCore/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(configure_header_file vtkSegmentationCoreConfigure.h)\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/${configure_header_file}.in\n  ${CMAKE_CURRENT_BINARY_DIR}/${configure_header_file}\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel\nDESCRIPTION: Finds the SlicerExecutionModel package, which is a dependency for building Slicer modules. It requires the package and includes its use file to make its variables available.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/FiducialRegistration/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Install Headers\nDESCRIPTION: Installs the header files into the include directory. The ${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT variable controls whether development headers are installed.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkITK/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT)\n  set(${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT ON)\nendif()\nif(NOT ${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT)\n  file(GLOB headers \"${CMAKE_CURRENT_SOURCE_DIR}/*.(h|txx)\")\n  install(\n    FILES ${headers} ${CMAKE_CURRENT_BINARY_DIR}/${configure_header_file}\n    DESTINATION include/${PROJECT_NAME} COMPONENT Development)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory for Testing\nDESCRIPTION: This snippet conditionally adds the `Testing` subdirectory to the build process if `BUILD_TESTING` is enabled. This allows including and building unit tests for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/Widgets/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Module Include Directories - CMake\nDESCRIPTION: This snippet defines the include directories for the module. It includes source and binary directories for Logic, Widgets, and SubjectHierarchyPlugins, as well as include directories for qSlicerSubjectHierarchyModuleWidgets. These directories are needed to find header files during compilation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_INCLUDE_DIRECTORIES\n  ${CMAKE_CURRENT_SOURCE_DIR}/Logic\n  ${CMAKE_CURRENT_BINARY_DIR}/Logic\n  ${CMAKE_CURRENT_SOURCE_DIR}/Widgets\n  ${CMAKE_CURRENT_BINARY_DIR}/Widgets\n  ${CMAKE_CURRENT_SOURCE_DIR}/SubjectHierarchyPlugins\n  ${CMAKE_CURRENT_BINARY_DIR}/SubjectHierarchyPlugins\n  ${qSlicerSubjectHierarchyModuleWidgets_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties\nDESCRIPTION: This snippet sets properties for the `${KIT}CxxTests` executable, including labels and folder. The `LABELS` property is set to the value of `KIT`, and the `FOLDER` property is set to \"Core-Base\".\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTApp/Testing/Cxx/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(${KIT}CxxTests PROPERTIES LABELS ${KIT})\nset_target_properties(${KIT}CxxTests PROPERTIES FOLDER \"Core-Base\")\n```\n\n----------------------------------------\n\nTITLE: Setting Plugin Variables in CMake\nDESCRIPTION: This snippet defines CMake variables related to building a Qt Designer plugin, including the export directive, source files, MOC source files, and target libraries. These variables are later used in the `ctkMacroBuildQtDesignerPlugin` macro. The variable `KIT` represents the plugin name.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT ${PROJECT_NAME}Plugins)\n\nset(${KIT}_EXPORT \"Q_SLICER_MODULE_${MODULE_NAME_UPPER}_WIDGETS_PLUGINS_EXPORT\")\n\nset(${KIT}_SRCS\n  qSlicer${MODULE_NAME}ModuleWidgetsAbstractPlugin.cxx\n  qSlicer${MODULE_NAME}ModuleWidgetsAbstractPlugin.h\n  qSlicer${MODULE_NAME}ModuleWidgetsPlugin.cxx\n  qSlicer${MODULE_NAME}ModuleWidgetsPlugin.h\n\n  qMRMLVolumePropertyNodeWidgetPlugin.cxx\n  qMRMLVolumePropertyNodeWidgetPlugin.h\n  qSlicerPresetComboBoxPlugin.cxx\n  qSlicerPresetComboBoxPlugin.h\n  qSlicerVolumeRenderingPresetComboBoxPlugin.cxx\n  qSlicerVolumeRenderingPresetComboBoxPlugin.h\n  qSlicerGPUMemoryComboBoxPlugin.cxx\n  qSlicerGPUMemoryComboBoxPlugin.h\n  )\n\nset(${KIT}_MOC_SRCS\n  qSlicer${MODULE_NAME}ModuleWidgetsPlugin.h\n\n  qMRMLVolumePropertyNodeWidgetPlugin.h\n  qSlicerPresetComboBoxPlugin.h\n  qSlicerVolumeRenderingPresetComboBoxPlugin.h\n  qSlicerGPUMemoryComboBoxPlugin.h\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  qSlicer${MODULE_NAME}ModuleWidgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Qt Library\nDESCRIPTION: Uses the `SlicerMacroBuildModuleQtLibrary` macro to build the Qt library.  It takes various parameters such as the library name, export directive, include directories, source files, UI files, target libraries, and resources. It also specifies that PythonQt wrappers should be generated.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nSlicerMacroBuildModuleQtLibrary(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  FOLDER \"Module-${MODULE_NAME}\"\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  UI_SRCS ${${KIT}_UI_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  RESOURCES ${${KIT}_RESOURCES}\n  WRAP_PYTHONQT\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting module name\nDESCRIPTION: This snippet sets the module name using the `set` command. This name is used throughout the CMake configuration to refer to the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/PETStandardUptakeValueComputation/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_NAME PETStandardUptakeValueComputation)\n```\n\n----------------------------------------\n\nTITLE: Set Kit Name - CMake\nDESCRIPTION: Sets the variable KIT to the project name. This is used as a prefix for other variables related to the project. It establishes a naming convention.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/Widgets/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Setting Module Kit Variable CMake\nDESCRIPTION: This snippet sets the `KIT` variable to the name of the module, which is a convention in the Slicer build system for defining components. It indicates that `qSlicer${MODULE_NAME}Module` is part of the KIT.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SceneViews/Testing/Cxx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT qSlicer${MODULE_NAME}Module)\n```\n\n----------------------------------------\n\nTITLE: Finding Sphinx Executable\nDESCRIPTION: This snippet uses the `find_program` command to locate the Sphinx build executable (`sphinx-build`). It's a prerequisite for generating the documentation. If the executable is not found, a warning message is displayed.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Scripts/SlicerWizard/doc/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfind_program(SPHINX_BUILD_EXECUTABLE sphinx-build)\n```\n\n----------------------------------------\n\nTITLE: Setting Export Directive in CMake\nDESCRIPTION: This snippet defines the export directive for the module. The export directive is used to control the visibility of symbols when building shared libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/Loadable/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_EXPORT_DIRECTIVE \"Q_SLICER_QTMODULES_${MODULE_NAME_UPPER}_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel\nDESCRIPTION: This snippet finds the SlicerExecutionModel package, which is required to build the CLI. It also includes the necessary use file to use the package.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MergeModels/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory\nDESCRIPTION: Conditionally adds the Testing subdirectory to the build process if testing is enabled. This allows for running tests to verify the module's functionality.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/GeneralizedReformat/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Python Subdirectory\nDESCRIPTION: Conditionally adds the Python subdirectory if Slicer's PythonQt support is enabled. This allows the module to have Python bindings and interfaces.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_USE_PYTHONQT)\n  add_subdirectory(${MODULE_NAME}Lib)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Add DesignerPlugins Subdirectory\nDESCRIPTION: This snippet adds the DesignerPlugins subdirectory if Slicer_BUILD_QT_DESIGNER_PLUGINS is enabled. This allows the building of Qt designer plugins as part of the project.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCLI/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(Slicer_BUILD_QT_DESIGNER_PLUGINS)\n  add_subdirectory(DesignerPlugins)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Target Libraries\nDESCRIPTION: This snippet defines the libraries that the plugin depends on. It sets the `${KIT}_TARGET_LIBRARIES` variable to a list of libraries, including \"qSlicerBaseQTGUI\". The plugin will be linked against these libraries during the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTGUI/StylePlugins/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  qSlicerBaseQTGUI\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Kit Variable\nDESCRIPTION: Sets the KIT variable equal to the PROJECT_NAME.  This is likely used as a shorthand identifier for subsequent configuration steps.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files in CMake\nDESCRIPTION: This snippet defines the source files for the module. These files contain the C++ code that implements the module's functionality. The list includes .cxx and .h files related to the module and its widget.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/Loadable/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_SRCS\n  qSlicer${MODULE_NAME}Module.cxx\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.cxx\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Appending Target Libraries (qRestAPI)\nDESCRIPTION: Conditionally appends target libraries related to qRestAPI if either Extension Manager or Application Update support is enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_BUILD_EXTENSIONMANAGER_SUPPORT OR Slicer_BUILD_APPLICATIONUPDATE_SUPPORT)\n  list(APPEND KIT_target_libraries\n    qRestAPI\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Appending MOC Sources (ApplicationUpdate)\nDESCRIPTION: Conditionally appends header files related to the Application Update to the list of MOC sources if Application Update support is enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_BUILD_APPLICATIONUPDATE_SUPPORT)\n  list(APPEND KIT_MOC_SRCS\n    qSlicerApplicationUpdateManager.h\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Add Testing Subdirectory\nDESCRIPTION: This snippet adds the Testing subdirectory to the build if the BUILD_TESTING option is enabled. This includes tests for the module in the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CurvatureAnisotropicDiffusion/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CxxTestDriver\nDESCRIPTION: Configures a CxxTestDriver using the `slicerMacroConfigureModuleCxxTestDriver` macro. This sets up the test driver with the specified name, source files, and VTK debug leak check.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Sequences/Testing/Cxx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroConfigureModuleCxxTestDriver(\n  NAME ${KIT}\n  SOURCES ${KIT_TEST_SRCS}\n  WITH_VTK_DEBUG_LEAKS_CHECK\n  )\n```\n\n----------------------------------------\n\nTITLE: Set Module Name Variable - CMake\nDESCRIPTION: Sets the module name variable to 'Transforms'. This variable is used throughout the CMake script to define other related variables and build targets.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME Transforms)\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Test with CMake\nDESCRIPTION: Adds a simple test named qSlicerColorsModuleWidgetTest1. This test is likely a basic unit test for the specified widget component.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/Testing/Cxx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nsimple_test(qSlicerColorsModuleWidgetTest1)\n```\n\n----------------------------------------\n\nTITLE: Setting Temporary Directory\nDESCRIPTION: Sets a variable `TEMP` to store the path to the temporary directory used for testing, specifically within the binary directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Sequences/Testing/Cxx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(TEMP \"${CMAKE_BINARY_DIR}/Testing/Temporary\")\n```\n\n----------------------------------------\n\nTITLE: Setting Teem Libraries\nDESCRIPTION: This snippet sets the Teem library variable. It defines `Teem_LIBRARIES` to be `teem`. This is needed because there is no TeemConfigVersion.cmake.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkTeem/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(Teem_LIBRARIES teem)\n```\n\n----------------------------------------\n\nTITLE: Building Slicer using Make\nDESCRIPTION: This snippet shows the command to build the Slicer project using Make.  This command should be executed in the build directory after the CMake configuration step.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/linux.md#_snippet_16\n\nLANGUAGE: console\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory\nDESCRIPTION: Conditionally adds the Testing subdirectory if building tests is enabled. This incorporates the module's tests into the overall build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Export Target Configuration CMake\nDESCRIPTION: Configures the export target file. Exports the target using the export command, appending to the specified export file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/DisplayableManager/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_EXPORT_FILE)\n  set(${PROJECT_NAME}_EXPORT_FILE ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Targets.cmake)\nendif()\nexport(TARGETS ${lib_name} APPEND FILE ${${PROJECT_NAME}_EXPORT_FILE})\n```\n\n----------------------------------------\n\nTITLE: Setting module name\nDESCRIPTION: Sets the module name using the `set` command. This variable is later used to define the CLI name.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/TestGridTransformRegistration/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME TestGridTransformRegistration)\n```\n\n----------------------------------------\n\nTITLE: Defining UI Source Files in CMake\nDESCRIPTION: Specifies the UI files created with Qt Designer that define the user interface for the module's widget.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SlicerWelcome/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_UI_SRCS\n  Resources/UI/qSlicer${MODULE_NAME}ModuleWidget.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting vtkTeem Sources\nDESCRIPTION: This snippet defines a list of source files for the vtkTeem library.  It populates the `vtkTeem_SRCS` variable with the names of the C++ source files that make up the library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkTeem/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nset(vtkTeem_SRCS\n  vtkDiffusionTensorMathematics.cxx\n  vtkDiffusionTensorGlyph.cxx\n  vtkTeemNRRDReader.cxx\n  vtkTeemNRRDWriter.cxx\n  vtkImageLabelCombine.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Resources\nDESCRIPTION: Specifies resource files, if any, for the module. These files can contain images, icons, or other non-code resources that the module uses.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/GeneralizedReformat/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_RESOURCES\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Data Management Target\nDESCRIPTION: Conditionally sets the SEM_DATA_MANAGEMENT_TARGET variable to the value of CLP followed by 'Data', if it's not already defined. This target is used to manage external data dependencies of the module. This allows configuration of where data is managed.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/PETStandardUptakeValueComputation/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED SEM_DATA_MANAGEMENT_TARGET)\n  set(SEM_DATA_MANAGEMENT_TARGET ${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Install Library\nDESCRIPTION: Installs the library to the specified directories.  It installs the runtime, library, and archive files to different destinations. The install paths can be configured using ${PROJECT_NAME}_INSTALL_BIN_DIR and ${PROJECT_NAME}_INSTALL_LIB_DIR.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkITK/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_INSTALL_BIN_DIR)\n  set(${PROJECT_NAME}_INSTALL_BIN_DIR bin)\nendif()\nif(NOT DEFINED ${PROJECT_NAME}_INSTALL_LIB_DIR)\n  set(${PROJECT_NAME}_INSTALL_LIB_DIR lib/${PROJECT_NAME})\nendif()\n\ninstall(TARGETS ${lib_name}\n  RUNTIME DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DIR} COMPONENT RuntimeLibraries\n  LIBRARY DESTINATION ${${PROJECT_NAME}_INSTALL_LIB_DIR} COMPONENT RuntimeLibraries\n  ARCHIVE DESTINATION ${${PROJECT_NAME}_INSTALL_LIB_DIR} COMPONENT Development\n  )\n```\n\n----------------------------------------\n\nTITLE: Appending Source Files (ApplicationUpdate)\nDESCRIPTION: Conditionally appends source files related to the Application Update if Application Update support is enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_BUILD_APPLICATIONUPDATE_SUPPORT)\n  list(APPEND KIT_SRCS\n    qSlicerApplicationUpdateManager.cxx\n    qSlicerApplicationUpdateManager.h\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Clear SlicerTargets.cmake CMake\nDESCRIPTION: Clears the contents of the `SlicerTargets.cmake` file. This file is likely used to store target information, and clearing it ensures a clean build.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_56\n\nLANGUAGE: cmake\nCODE:\n```\nfile(WRITE \"${Slicer_BINARY_DIR}/SlicerTargets.cmake\" \"\")\n```\n\n----------------------------------------\n\nTITLE: Defining Python Resources\nDESCRIPTION: Specifies UI resource files used by the Python scripts. These files likely define the graphical user interface elements used by some of the self-tests. This provides a list of `.ui` files that are to be included in the build and installation process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Applications/SlicerApp/Testing/Python/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT_PYTHON_RESOURCES\n    Resources/UI/ScenePerformance.ui\n    Resources/UI/UtilTest.ui\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting VTK SMP Implementation Type\nDESCRIPTION: This snippet configures the VTK SMP (Symmetric Multi-Processing) implementation type.  It defaults to TBB.  It provides an option to choose between Sequential and TBB. If TBB is selected, Slicer_USE_TBB is set to TRUE.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_40\n\nLANGUAGE: cmake\nCODE:\n```\nset(Slicer_DEFAULT_VTK_SMP_IMPLEMENTATION_TYPE \"TBB\")\nset(Slicer_VTK_SMP_IMPLEMENTATION_TYPE ${Slicer_DEFAULT_VTK_SMP_IMPLEMENTATION_TYPE}\n  CACHE STRING \"Which multi-threaded parallelism implementation to use in VTK. Options are Sequential or TBB.\")\nset_property(CACHE Slicer_VTK_SMP_IMPLEMENTATION_TYPE\n  PROPERTY\n    STRINGS Sequential TBB)\nmark_as_superbuild(Slicer_VTK_SMP_IMPLEMENTATION_TYPE)\nif(${Slicer_VTK_SMP_IMPLEMENTATION_TYPE} STREQUAL \"TBB\")\n  set(Slicer_USE_TBB TRUE)\nelse()\n  set(Slicer_USE_TBB FALSE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries\nDESCRIPTION: This snippet sets the target libraries for the MRML module. It includes the core MRML libraries as dependencies, ensuring the module can access and utilize the necessary functionalities for interacting with the MRML data model.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/GeneralizedReformat/MRML/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  ${MRML_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Input Directory\nDESCRIPTION: This snippet sets the input directory for the tests.  It uses the `set` command to define the `INPUT` variable, which points to the Testing directory within the MRMLCore source directory. The MRMLCore_SOURCE_DIR variable is assumed to be defined elsewhere.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Sequences/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INPUT ${MRMLCore_SOURCE_DIR}/Testing)\n```\n\n----------------------------------------\n\nTITLE: Set Target Libraries\nDESCRIPTION: This snippet defines the list of target libraries that the plugin depends on. These libraries provide the necessary functionality for the plugin to operate within the Slicer environment.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Plots/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  qSlicer${MODULE_NAME}ModuleWidgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Include Directories in CMake\nDESCRIPTION: The `include_directories` command adds the current binary directory to the list of include directories. This allows the test files to find generated header files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/Widgets/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories( ${CMAKE_CURRENT_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: Adding testing subdirectory\nDESCRIPTION: This snippet adds the Testing subdirectory if the BUILD_TESTING variable is enabled. This allows for running tests for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MergeModels/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Install Extension Templates Directory (CMake)\nDESCRIPTION: This CMake command installs the 'Extensions' and 'Modules' directories to the specified destination within the Slicer installation directory. It sets the component to 'Runtime' and utilizes source permissions during the installation process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(DIRECTORY Extensions Modules\n  DESTINATION ${Slicer_INSTALL_SHARE_DIR}/Wizard/Templates\n  COMPONENT Runtime\n  USE_SOURCE_PERMISSIONS\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Resources - CMake\nDESCRIPTION: This code snippet specifies the resource files for the module, such as icons and other assets. These resources are embedded into the module during the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_RESOURCES\n  Resources/qSlicer${MODULE_NAME}Module.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Installing Slicer dependencies on Ubuntu 20.04\nDESCRIPTION: This command updates the package list and installs the necessary development tools and support libraries for building Slicer on Ubuntu 20.04 (Focal Fossa) using `apt`. It includes packages such as `git`, `build-essential`, `cmake`, CMake GUI tools, Qt5 development libraries, and `libxt-dev`.  Note that the default Qt version on Ubuntu 20.04 might be too old.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/linux.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nsudo apt update && sudo apt install git build-essential \\\n  cmake cmake-curses-gui cmake-qt-gui \\\n  libqt5x11extras5-dev qtmultimedia5-dev libqt5svg5-dev qtwebengine5-dev libqt5xmlpatterns5-dev qttools5-dev qtbase5-private-dev \\\n  libxt-dev qt5-default\n```\n\n----------------------------------------\n\nTITLE: Dependencies Configuration CMake\nDESCRIPTION: Handles dependencies, specifically checking if VTK_WRAP_PYTHON is ON when Slicer_USE_PYTHONQT is ON. If not, it throws a fatal error, requiring VTK to be re-configured with Python wrapping.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/DisplayableManager/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n#\n# VTK\n#\nif(Slicer_USE_PYTHONQT AND NOT VTK_WRAP_PYTHON)\n  message(FATAL_ERROR \"Since Slicer_USE_PYTHONQT is ON, VTK_WRAP_PYTHON is expected to be ON. \"\n                      \"Re-configure VTK with python wrapping.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Input Data Directory\nDESCRIPTION: This snippet defines the location of the test data.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/Testing/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nset(INPUT ${MRMLCore_SOURCE_DIR}/Testing/TestData)\n```\n\n----------------------------------------\n\nTITLE: Adding testing subdirectory in CMake\nDESCRIPTION: Adds the Testing subdirectory to the build if the BUILD_TESTING option is enabled. This allows the module to include and run its associated tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CheckerBoardFilter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Module Target Libraries - CMake\nDESCRIPTION: Sets the list of libraries that the module will link against, including the ITK libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/CLIExtensionTemplate/CLIModuleTemplate/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_TARGET_LIBRARIES\n  ${ITK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries in CMake\nDESCRIPTION: Sets the list of libraries that the Segmentations module depends on. These libraries are linked with the module during the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleMRML\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  vtkSlicer${MODULE_NAME}ModuleMRMLDisplayableManager\n  qSlicer${MODULE_NAME}ModuleWidgets\n  qSlicer${MODULE_NAME}SubjectHierarchyPlugins\n  qSlicer${MODULE_NAME}EditorEffects\n  qSlicerSubjectHierarchyModuleWidgets\n  qSlicerTerminologiesModuleWidgets\n  vtkSlicerTerminologiesModuleLogic\n  qSlicerBaseQTGUI\n  )\n```\n\n----------------------------------------\n\nTITLE: Reader File Structure\nDESCRIPTION: This snippet shows the recommended file structure for a custom reader in 3D Slicer. It includes a header file (.h) and an implementation file (.cxx) within the module directory of an extension.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/mrml_overview.md#_snippet_29\n\nLANGUAGE: filesystem\nCODE:\n```\n|-- <Extension>\n       |-- <Module>\n              |-- qSlicer<MyCustomType>Reader.h\n              |-- qSlicer<MyCustomType>Reader.cxx\n```\n\n----------------------------------------\n\nTITLE: Accessing the EventBroker Singleton in C++\nDESCRIPTION: This C++ snippet shows how to access the EventBroker singleton instance using `vtkEventBroker::GetInstance()`. This provides access to the EventBroker's functionality for managing vtkObject observations.  The EventBroker handles observations and provides introspection, logging, and asynchronous event handling capabilities.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/advanced_topics.md#_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\nvtkEventBroker *broker = vtkEventBroker::GetInstance();\n```\n\n----------------------------------------\n\nTITLE: Linking libraries to the test executable\nDESCRIPTION: This snippet links the necessary libraries to the test executable using the `target_link_libraries` command. It links the libraries specified in the `KIT_TEST_TARGET_LIBRARIES` variable to the `${KIT}CxxTests` executable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/Testing/Cxx/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n  target_link_libraries(${KIT}CxxTests ${KIT_TEST_TARGET_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries\nDESCRIPTION: Defines the list of target libraries that this module depends on. These libraries will be linked during the linking phase of the build process. Dependencies include MRML libraries and Slicer modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleMRML\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  qSlicerSubjectHierarchyModuleWidgets\n  qSlicerVolumesSubjectHierarchyPlugins\n  vtkSlicerSubjectHierarchyModuleLogic\n  qMRMLWidgets\n  MRMLLogic\n  MRMLCore\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Test Source Files\nDESCRIPTION: This snippet sets the variable KIT_TEST_SRCS to a list of C++ source files that make up the tests for the module. These source files contain the actual test implementations.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/Logic/Testing/Cxx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT_TEST_SRCS\n  vtkSlicerVolumeRenderingLogicTest.cxx\n  vtkSlicerVolumeRenderingLogicAddFromFileTest.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Project Name and Export Directive in CMake\nDESCRIPTION: This snippet sets the project name, defines an export directive for the module, and includes necessary directories. The export directive `VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_MRML_EXPORT` controls symbol visibility when building the module, allowing for proper linking and usage in other parts of the Slicer application. It also includes the vtkTeem include directories before others.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Sequences/MRML/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleMRML)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_MRML_EXPORT\")\n\ninclude_directories(BEFORE ${vtkTeem_INCLUDE_DIRS})\n```\n\n----------------------------------------\n\nTITLE: Project Declaration\nDESCRIPTION: Declares the project name as SlicerExtensions. This is a standard CMake command to define the project.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/CMake/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nproject(SlicerExtensions)\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory Conditionally in CMake\nDESCRIPTION: Conditionally adds the Testing subdirectory to the build process if the `BUILD_TESTING` variable is enabled. This allows the inclusion of unit tests and other testing infrastructure when building the project for testing purposes.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Core/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries - CMake\nDESCRIPTION: Lists the libraries that the module depends on. These libraries are linked during the build process. Dependencies include vtkSlicer${MODULE_NAME}ModuleMRML, vtkSlicer${MODULE_NAME}ModuleLogic, qSlicerSubjectHierarchyModuleWidgets, vtkSlicerSubjectHierarchyModuleLogic, qMRMLWidgets, MRMLLogic, and MRMLCore.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleMRML\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  qSlicerSubjectHierarchyModuleWidgets\n  vtkSlicerSubjectHierarchyModuleLogic\n  qMRMLWidgets\n  MRMLLogic\n  MRMLCore\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory\nDESCRIPTION: Conditionally adds the Testing subdirectory to the build if BUILD_TESTING is enabled. This includes the tests for the module in the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/SimpleRegionGrowingSegmentation/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: ExternalData Test Setup in CMake\nDESCRIPTION: This snippet sets up an external data test using `ExternalData_add_test`. It defines the test name, command to execute (using the built executable), and input data files (grayscale.nrrd and grayscale-label.nrrd). It also specifies the expected output file (rss-test-seg.nrrd) and test parameters (50 0.1 0.2). The LABELS property is set for the test.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/RobustStatisticsSegmenter/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(testname ${CLP}Test)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:SFLSRobustStat3DTestConsole>\n    DATA{${INPUT}/grayscale.nrrd}\n    DATA{${INPUT}/grayscale-label.nrrd}\n    ${TEMP}/rss-test-seg.nrrd 50 0.1 0.2)\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Leak Detection\nDESCRIPTION: This snippet sets the CMAKE_TESTDRIVER_BEFORE_TESTMAIN variable to enable debug leak detection before running the tests. This command executes before the main test function to detect memory leaks.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/Logic/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_TESTDRIVER_BEFORE_TESTMAIN \"DEBUG_LEAKS_ENABLE_EXIT_ERROR();\" )\n```\n\n----------------------------------------\n\nTITLE: Project Definition CMake\nDESCRIPTION: Defines the project name for the SubjectHierarchyPlugins module within the Slicer project. It sets the module name and initializes the CMake project.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(qSlicer${MODULE_NAME}SubjectHierarchyPlugins)\n\nset(KIT ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Set slice viewer background layer - Python\nDESCRIPTION: Sets the background layer of a slice viewer to the specified volume node. This is used to display the processing result in the slice viewer.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_34\n\nLANGUAGE: Python\nCODE:\n```\nslicer.util.setSliceViewerLayers(background=outputVolumeNode)\n```\n\n----------------------------------------\n\nTITLE: Set Module Name CMake\nDESCRIPTION: Sets the module name to AddScalarVolumes using the `set` command. This variable is used throughout the CMake configuration file to refer to the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/AddScalarVolumes/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_NAME AddScalarVolumes)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Data Files\nDESCRIPTION: Defines paths to model files and MRML scenes used for testing the Models module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/Testing/Cxx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODEL_FILE \"${MRMLCore_SOURCE_DIR}/Testing/TestData/cube.vtk\")\nset(MODEL_SCENE \"${MRMLCore_SOURCE_DIR}/Testing/modelHierarchy.mrml\")\n```\n\n----------------------------------------\n\nTITLE: Installing the library\nDESCRIPTION: This snippet installs the MRMLCLI library. It checks if `${PROJECT_NAME}_INSTALL_BIN_DIR` and `${PROJECT_NAME}_INSTALL_LIB_DIR` are defined, and if not, sets them to `bin` and `lib/${PROJECT_NAME}` respectively. It uses the `install` command to install the library to the specified directories under the `RuntimeLibraries` and `Development` components.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/CLI/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_INSTALL_BIN_DIR)\n  set(${PROJECT_NAME}_INSTALL_BIN_DIR bin)\nendif()\nif(NOT DEFINED ${PROJECT_NAME}_INSTALL_LIB_DIR)\n  set(${PROJECT_NAME}_INSTALL_LIB_DIR lib/${PROJECT_NAME})\nendif()\n\ninstall(TARGETS ${lib_name}\n  RUNTIME DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DIR} COMPONENT RuntimeLibraries\n  LIBRARY DESTINATION ${${PROJECT_NAME}_INSTALL_LIB_DIR} COMPONENT RuntimeLibraries\n  ARCHIVE DESTINATION ${${PROJECT_NAME}_INSTALL_LIB_DIR} COMPONENT Development\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Export Directive\nDESCRIPTION: This snippet defines the export directive for the module. This directive is used to control the visibility of classes and functions when the module is built as a shared library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/VTKWidgets/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_VTKWIDGETS_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name in CMake\nDESCRIPTION: Sets the MODULE_NAME variable to \"VolumeRendering\" and converts it to uppercase for MODULE_NAME_UPPER. This is a standard pattern for naming and referencing modules within CMake.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME VolumeRendering)\n\nstring(TOUPPER ${MODULE_NAME} MODULE_NAME_UPPER)\n```\n\n----------------------------------------\n\nTITLE: Setting Project Variables - CMake\nDESCRIPTION: This snippet sets project-specific variables such as the project name, export directive, include directories, source files, and target libraries. These variables are later used to configure and build the module logic.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/Logic/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleLogic)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_LOGIC_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${RapidJSON_INCLUDE_DIR}\n  )\n\nset(${KIT}_SRCS\n  vtkSlicer${MODULE_NAME}Logic.cxx\n  vtkSlicer${MODULE_NAME}Logic.h\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  ${ITK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Set Module Name\nDESCRIPTION: This snippet sets the name of the module to CurvatureAnisotropicDiffusion. This variable is used throughout the CMake configuration to refer to the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CurvatureAnisotropicDiffusion/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_NAME CurvatureAnisotropicDiffusion)\n```\n\n----------------------------------------\n\nTITLE: Setting Project Name\nDESCRIPTION: Sets the project name for the current CMake project. This variable is used throughout the CMake configuration to refer to the project.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCLI/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Launching Visual Studio with Slicer Environment (BAT)\nDESCRIPTION: This command starts Visual Studio with the Slicer environment configured by the launcher. This allows you to manually load project files and debug Slicer or its extensions.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/debugging/windowscpp.md#_snippet_1\n\nLANGUAGE: bat\nCODE:\n```\nSlicer.exe --VisualStudio\n```\n\n----------------------------------------\n\nTITLE: Setting Kit Name\nDESCRIPTION: Sets the variable KIT to the project name. This variable will be used to define other module properties.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/LoadableCustomMarkups/MRML/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory\nDESCRIPTION: This snippet conditionally adds the Testing subdirectory to the build process if the BUILD_TESTING variable is enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CreateDICOMSeries/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Project Initialization - CMake\nDESCRIPTION: Initializes the CMake project with the specified module name. It sets the project name as qSlicer${MODULE_NAME}SubjectHierarchyPlugins.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(qSlicer${MODULE_NAME}SubjectHierarchyPlugins)\n```\n\n----------------------------------------\n\nTITLE: Adding Testing CMake\nDESCRIPTION: This snippet conditionally adds the Testing subdirectory if BUILD_TESTING is enabled. This includes unit tests for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOMLib/Widgets/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  #add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional System Qt Usage CMake\nDESCRIPTION: This snippet determines whether to use the system-installed Qt or a locally built version. It checks if the `Qt5_DIR` variable points to a system path and sets `Slicer_USE_SYSTEM_QT` accordingly. This prevents conflicts between system and Slicer libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_47\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED Slicer_USE_SYSTEM_QT)\n  foreach(_path IN ITEMS\n      \"/usr/lib/\"\n      \"/usr/lib/${CMAKE_LIBRARY_ARCHITECTURE}/\"\n      # The following line is a consequence of multiarch usr merge (https://wiki.debian.org/UsrMerge)\n      # /usr/lib will bye symlinked to /lib. In this case Qt5_DIR could be reported as\n      # /lib/${CMAKE_LIBRARY_ARCHITECTURE}/\"\n      \"/lib/\"\n      \"/lib/${CMAKE_LIBRARY_ARCHITECTURE}/\"\n      \"/usr/lib32/\"\n      \"/usr/lib64/\"\n      \"/usr/local/lib/\"\n      # homebrew\n      \"/usr/local/Cellar/lib/\"\n      # macport\n      \"/opt/lib\"\n      \"/opt/local/lib\"\n      )\n    if(\"${Qt5_DIR}\" MATCHES \"^${_path}\")\n      set(Slicer_USE_SYSTEM_QT ON)\n      message(STATUS \"\")\n      message(STATUS \"Initializing Slicer_USE_SYSTEM_QT to ON (Qt5_DIR [${Qt5_DIR}] associated with a system location: ${_path})\")\n      message(STATUS \"\")\n      break()\n    endif()\n  endforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion (CMake)\nDESCRIPTION: This snippet conditionally adds the `DesignerPlugins` subdirectory to the build process if the `Slicer_BUILD_QT_DESIGNER_PLUGINS` variable is enabled. This allows for the inclusion of Qt Designer plugins if they are desired.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Units/Widgets/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(Slicer_BUILD_QT_DESIGNER_PLUGINS)\n  add_subdirectory(DesignerPlugins)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Minimum CMake Version\nDESCRIPTION: Specifies the minimum required CMake version for the project.  Using FATAL_ERROR ensures that the configuration fails if the CMake version is older than the specified range.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkITK/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16.3...3.19.7 FATAL_ERROR)\n```\n\n----------------------------------------\n\nTITLE: Set Plugin Source Files\nDESCRIPTION: This snippet defines the list of source files that make up the Qt Designer plugin.  It includes both `.cxx` and `.h` files. The source files contain the implementation of the custom widgets and related functionalities.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Plots/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  qSlicer${MODULE_NAME}ModuleWidgetsAbstractPlugin.cxx\n  qSlicer${MODULE_NAME}ModuleWidgetsAbstractPlugin.h\n  qSlicer${MODULE_NAME}ModuleWidgetsPlugin.cxx\n  qSlicer${MODULE_NAME}ModuleWidgetsPlugin.h\n  qMRMLPlotSeriesPropertiesWidgetPlugin.h\n  qMRMLPlotSeriesPropertiesWidgetPlugin.cxx\n  qMRMLPlotChartPropertiesWidgetPlugin.h\n  qMRMLPlotChartPropertiesWidgetPlugin.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name CMake Variable\nDESCRIPTION: Sets the MODULE_NAME CMake variable to \"TemplateKey\".  This is used throughout the CMakeLists.txt file to consistently reference the module. The string is then converted to uppercase for defining the MODULE_NAME_UPPER variable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/LoadableCustomMarkups/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME \"TemplateKey\")\n\nstring(TOUPPER ${MODULE_NAME} MODULE_NAME_UPPER)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory for Qt Designer Plugins in CMake\nDESCRIPTION: This snippet conditionally adds a subdirectory named `DesignerPlugins` to the build process if the `Slicer_BUILD_QT_DESIGNER_PLUGINS` variable is enabled. This allows building custom Qt Designer plugins for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/Widgets/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nif(Slicer_BUILD_QT_DESIGNER_PLUGINS)\n  add_subdirectory(DesignerPlugins)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel package\nDESCRIPTION: Finds the required SlicerExecutionModel package and includes its use file to make its variables available. This package provides necessary functionalities for Slicer modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/TestGridTransformRegistration/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Conditionally Append CLI Modules\nDESCRIPTION: This conditional statement checks if Slicer_BUILD_CLI_SUPPORT is enabled. If it is, the CropVolume module is appended to the qtmodules list. This means that the CropVolume module, which likely provides command-line interface (CLI) tools, will only be built if CLI support is enabled in the Slicer build configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_BUILD_CLI_SUPPORT)\n  list(APPEND qtmodules\n    CropVolume\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Project Initialization (CMake)\nDESCRIPTION: Initializes the CMake project for the module logic. The project name is defined as vtkSlicer${MODULE_NAME}ModuleLogic.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Annotations/Logic/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleLogic)\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name\nDESCRIPTION: Sets the module name to CastScalarVolume. This variable is used throughout the CMake file to identify the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CastScalarVolume/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_NAME CastScalarVolume)\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Test (CMake)\nDESCRIPTION: This snippet adds an external data test that executes the `VTKITKVectorReader` executable with a specific data file. It uses `ExternalData_add_test` to manage the test and its dependencies, using `${Slicer_LAUNCH_COMMAND}` to correctly set up the Slicer environment.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkITK/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nExternalData_add_test(${Slicer_ExternalData_DATA_MANAGEMENT_TARGET}\n  NAME VTKITKVectorReader\n  COMMAND ${Slicer_LAUNCH_COMMAND} $<TARGET_FILE:VTKITKVectorReader>\n    DATA{${MRML_TEST_DATA_DIR}/fixed.nrrd}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting MOC Source Files\nDESCRIPTION: Lists the header files that require processing by the Meta-Object Compiler (MOC). This is necessary for Qt classes that use signals and slots. These are the same header files listed in MODULE_SRCS.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Cameras/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_MOC_SRCS\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Get Volume/Grid Transform\nDESCRIPTION: Retrieves a specified volume or grid transform as a .nrrd file, identified by its `id`. The response is a data stream of the .nrrd file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/modules/webserver.md#_snippet_7\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /volume, GET /griddtransform\n```\n\n----------------------------------------\n\nTITLE: Exporting Target\nDESCRIPTION: This snippet exports the library target for use by other CMake projects. It defines the export file location using the `PROJECT_NAME_EXPORT_FILE` variable and then uses the `export` command to generate the export file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/ITKFactoryRegistration/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# --------------------------------------------------------------------------\n# Export target\n# --------------------------------------------------------------------------\nif(NOT DEFINED ${PROJECT_NAME}_EXPORT_FILE)\n  set(${PROJECT_NAME}_EXPORT_FILE ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Targets.cmake)\nendif()\nexport(TARGETS ${lib_name} APPEND FILE ${${PROJECT_NAME}_EXPORT_FILE})\n```\n\n----------------------------------------\n\nTITLE: Linking MRMLWidgets Library CMake\nDESCRIPTION: This snippet defines the libraries to link against the MRMLWidgets library. It includes Qt libraries, CTK libraries, and other MRML-related libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/CMakeLists.txt#_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nset(MRMLWidgets_LIBRARIES\n  ${QT_LIBRARIES}\n  ${CTK_LIBRARIES}\n  MRMLLogic\n  MRMLDisplayableManager\n  VTK::RenderingQt\n  )\n\ntarget_link_libraries(${lib_name} ${MRMLWidgets_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries - CMake\nDESCRIPTION: This snippet sets the target libraries that the module depends on. These include MRML libraries and the Slicer Transforms Module Logic.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/MRMLDM/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  ${MRML_LIBRARIES}\n  vtkSlicerTransformsModuleLogic\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module MOC Source Files CMake\nDESCRIPTION: Defines the list of header files that require processing by the Meta-Object Compiler (MOC).  These header files contain Qt specific macros. The MOC tool generates C++ source code from Qt-specific extensions.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_MOC_SRCS\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  qSlicer${MODULE_NAME}Reader.h\n  qSlicer${MODULE_NAME}SettingsPanel.h\n  qSlicer${MODULE_NAME}Writer.h\n  qSlicerAnnotationsIOOptionsWidget.h\n  qSlicerAnnotationsReader.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Add Python Subdirectory Conditionally (CMake)\nDESCRIPTION: This CMake code conditionally adds the 'Python' subdirectory if the `Slicer_USE_PYTHONQT` variable is set to true.  The Python subdirectory likely contains Python scripts and Qt-based user interface components. The condition is used to enable Python support when it's configured.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Sequences/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(Slicer_USE_PYTHONQT)\n  add_subdirectory(Python)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Module Meta-Object Compiler (MOC) Sources\nDESCRIPTION: Sets the MODULE_MOC_SRCS CMake variable. This lists the header files that need to be processed by the Qt Meta-Object Compiler (MOC). The MOC generates code for Qt's meta-object system, enabling features like signals and slots.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/LoadableCustomMarkups/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_MOC_SRCS\n  qSlicer${MODULE_NAME}Module.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Variables for Plugin Build\nDESCRIPTION: This snippet sets CMake variables for the plugin build process. It defines the kit name, export directive, source files, header files to be processed by moc, and target libraries to link against. These variables are later used by the ctkMacroBuildQtDesignerPlugin macro.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOMLib/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT ${PROJECT_NAME}Plugins)\n\nset(${KIT}_EXPORT \"Q_SLICER_MODULE_${MODULE_NAME_UPPER}_WIDGETS_PLUGINS_EXPORT\")\n\nset(${KIT}_SRCS\n  qSlicerDICOMLibModuleWidgetsAbstractPlugin.cxx\n  qSlicerDICOMLibModuleWidgetsAbstractPlugin.h\n  qSlicerDICOMLibModuleWidgetsPlugin.cxx\n  qSlicerDICOMLibModuleWidgetsPlugin.h\n  qSlicerDICOMTagEditorWidgetPlugin.cxx\n  qSlicerDICOMTagEditorWidgetPlugin.h\n  )\n\nset(${KIT}_MOC_SRCS\n  qSlicerDICOMLibModuleWidgetsPlugin.h\n  qSlicerDICOMTagEditorWidgetPlugin.h\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  qSlicerDICOMLibModuleWidgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name - CMake\nDESCRIPTION: Defines the module's name. This variable is used in subsequent commands to configure the module's build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GaussianBlurImageFilter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_NAME GaussianBlurImageFilter)\n```\n\n----------------------------------------\n\nTITLE: Python Wrapping Configuration\nDESCRIPTION: This snippet configures Python wrapping for the library. It includes the vtkMacroKitPythonWrap macro and defines the python wrapped libraries. The macro then handles generating the Python wrappers for the specified VTK sources. Finally, it sets properties for the generated Python target, placing it in the \"Core-Base\" folder.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCLI/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(VTK_WRAP_PYTHON)\n  include(vtkMacroKitPythonWrap)\n\n  set(_python_wrapped_libraries\n    )\n\n  vtkMacroKitPythonWrap(\n    KIT_NAME ${PROJECT_NAME}\n    KIT_SRCS ${KIT_VTK_SRCS}\n    KIT_INSTALL_BIN_DIR ${Slicer_INSTALL_BIN_DIR}\n    KIT_INSTALL_LIB_DIR ${Slicer_INSTALL_LIB_DIR}\n    KIT_PYTHON_LIBRARIES ${_python_wrapped_libraries}\n    )\n  set_property(GLOBAL APPEND PROPERTY Slicer_TARGETS ${PROJECT_NAME}Python)\n  # Folder\n  set_target_properties(${PROJECT_NAME}Python PROPERTIES FOLDER \"Core-Base\")\n  if(TARGET ${PROJECT_NAME}Hierarchy)\n    set_target_properties(${PROJECT_NAME}Hierarchy PROPERTIES FOLDER \"Core-Base\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding CLI Unit Tests\nDESCRIPTION: Adds Python scripts as unit tests specifically for testing CLI (Command Line Interface) modules. The `SLICER_ARGS --no-main-window` argument suggests the tests are designed to run without a graphical interface, useful for automated testing of CLI functionality.  This is conditionally included if `Slicer_BUILD_CLI_SUPPORT` is enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Applications/SlicerApp/Testing/Python/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif(Slicer_BUILD_CLI_SUPPORT)\n    slicer_add_python_unittest(SCRIPT CLIEventTest.py SLICER_ARGS --no-main-window)\n    slicer_add_python_unittest(SCRIPT TwoCLIsInARowTest.py)\n    slicer_add_python_unittest(SCRIPT TwoCLIsInParallelTest.py)\n\n    if(Slicer_BUILD_BRAINSTOOLS)\n      slicer_add_python_unittest(SCRIPT BRAINSFitRigidRegistrationCrashIssue4139.py)\n\n      list(APPEND KIT_PYTHON_SCRIPTS\n        BRAINSFitRigidRegistrationCrashIssue4139.py\n        )\n    endif()\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Target Libraries Definition - CMake\nDESCRIPTION: This snippet defines the target libraries that the module depends on.  It lists the necessary libraries such as vtkSlicerPlotsModuleLogic, qSlicerSubjectHierarchyModuleWidgets, vtkSlicerSubjectHierarchyModuleLogic, qMRMLWidgets, MRMLLogic, and MRMLCore.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Plots/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n#-----------------------------------------------------------------------------\nset(${KIT}_TARGET_LIBRARIES\n  vtkSlicerPlotsModuleLogic\n  qSlicerSubjectHierarchyModuleWidgets\n  vtkSlicerSubjectHierarchyModuleLogic\n  qMRMLWidgets\n  MRMLLogic\n  MRMLCore\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Required Version\nDESCRIPTION: This CMake command specifies the minimum required version of CMake for the project. It ensures that the CMake version used is within the specified range, otherwise it generates a fatal error.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/ScriptedLoadableExtensionTemplate/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16.3...3.19.7 FATAL_ERROR)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet sets the minimum required CMake version for the project to 3.16.3 up to 3.19.7. If the CMake version is outside this range, it will generate a fatal error, halting the configuration process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16.3...3.19.7 FATAL_ERROR)\n```\n\n----------------------------------------\n\nTITLE: Building Module Qt Library CMake\nDESCRIPTION: Uses the SlicerMacroBuildModuleQtLibrary macro to build the Qt library for the module. This macro handles the details of compiling the source files, linking the libraries, and generating the necessary Qt metadata. It takes various parameters to configure the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nSlicerMacroBuildModuleQtLibrary(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  FOLDER \"Module-${MODULE_NAME}\"\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  UI_SRCS ${${KIT}_UI_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  RESOURCES ${${KIT}_RESOURCES}\n  WRAP_PYTHONQT\n  )\n```\n\n----------------------------------------\n\nTITLE: Avoiding UnRegister with VTK_NEWINSTANCE in Python\nDESCRIPTION: This Python code shows a case where `UnRegister` should not be called. If a factory method is marked with the `VTK_NEWINSTANCE` hint, the ownership is transferred to Python's garbage collection, and calling `UnRegister` would prematurely delete the object and may crash the application.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/advanced_topics.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nbox = roiNode.CreateROIBoxPolyDataWorld()\n# no need to call UnRegister, as CreateROIBoxPolyDataWorld method is marked with VTK_NEWINSTANCE\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name - CMake\nDESCRIPTION: This snippet sets the module name to 'WebServer' using the `set` command. This name is later used in the `slicerMacroBuildScriptedModule` command.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/WebServer/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_NAME WebServer)\n```\n\n----------------------------------------\n\nTITLE: Including CTest Launcher (Optional)\nDESCRIPTION: This code includes the `CTestUseLaunchers` module, which is optional.  If the module is successfully included and `CTEST_USE_LAUNCHERS` is set, a status message is displayed indicating that CTest launchers are enabled. CTest launchers are used to run tests within a controlled environment.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(CTestUseLaunchers OPTIONAL)\nif(${CTEST_USE_LAUNCHERS})\n  message(STATUS \"CTest launchers enabled\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Writer File Structure\nDESCRIPTION: This snippet shows the recommended file structure for a custom writer in 3D Slicer.  It includes a header file (.h) and an implementation file (.cxx) within the module directory of an extension.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/mrml_overview.md#_snippet_30\n\nLANGUAGE: filesystem\nCODE:\n```\n|-- <Extension>\n       |-- <Module>\n              |-- qSlicer<MyCustomType>Writer.h\n              |-- qSlicer<MyCustomType>Writer.cxx\n```\n\n----------------------------------------\n\nTITLE: Appending Target Libraries (CLI)\nDESCRIPTION: Conditionally appends target libraries related to CLI support if CLI support is enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_BUILD_CLI_SUPPORT)\n  list(APPEND KIT_target_libraries\n    ${ITK_LIBRARIES}\n    ModuleDescriptionParser\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory\nDESCRIPTION: Adds the Testing subdirectory to the build. This includes both C++ and Python tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/CMakeLists.txt#_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Testing)\n```\n\n----------------------------------------\n\nTITLE: VTK Error Logging Example\nDESCRIPTION: Example of logging an error in a VTK class. Includes information that is used in the message.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/style_guide.md#_snippet_10\n\nLANGUAGE: C++\nCODE:\n```\nvtkErrorMacro(\"vtkMRMLClipModelsNode:: Invalid Clip Type\");\n```\n\n----------------------------------------\n\nTITLE: Defining Resources\nDESCRIPTION: Defines resource files for the project. In this case, no specific resources are defined.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTApp/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT_resources\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files\nDESCRIPTION: This snippet defines the source files (.cxx and .h) that make up the module's widgets. These files contain the implementation of the user interface elements and their associated logic.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/Widgets/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  qMRMLTransformDisplayNodeWidget.cxx\n  qMRMLTransformDisplayNodeWidget.h\n  qMRMLTransformInfoWidget.cxx\n  qMRMLTransformInfoWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion based on Qt Loadable Modules\nDESCRIPTION: This snippet conditionally includes the 'Loadable' subdirectory if the `Slicer_BUILD_QTLOADABLEMODULES` CMake option is enabled. This allows the Slicer build system to include loadable modules when specified.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_BUILD_QTLOADABLEMODULES)\n  add_subdirectory(Loadable)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting up test source files\nDESCRIPTION: This snippet defines the source files that make up the core tests. It also conditionally appends additional source files based on Slicer build options such as `Slicer_BUILD_EXTENSIONMANAGER_SUPPORT`, `Slicer_BUILD_APPLICATIONUPDATE_SUPPORT`, `Slicer_USE_PYTHONQT`, and `Slicer_USE_PYTHONQT_WITH_OPENSSL`. These source files are added to the `KIT_TEST_SRCS` variable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/Testing/Cxx/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n  set(CMAKE_TESTDRIVER_BEFORE_TESTMAIN \"DEBUG_LEAKS_ENABLE_EXIT_ERROR();\" )\n  include_directories(${CMAKE_CURRENT_BINARY_DIR})\n  set(KIT_TEST_SRCS\n    qSlicerAbstractCoreModuleTest1.cxx\n    qSlicerCoreApplicationTest1.cxx\n    qSlicerCoreIOManagerTest1.cxx\n    qSlicerLoadableModuleFactoryTest1.cxx\n    qSlicerUtilsTest1.cxx\n    )\n  if(Slicer_BUILD_EXTENSIONMANAGER_SUPPORT)\n    list(APPEND KIT_TEST_SRCS\n      qSlicerExtensionsManagerModelTest.cxx\n      qSlicerPersistentCookieJarTest.cxx\n      )\n  endif()\n  if(Slicer_BUILD_APPLICATIONUPDATE_SUPPORT)\n    list(APPEND KIT_TEST_SRCS\n      qSlicerApplicationUpdateManagerTest.cxx\n      )\n  endif()\n  if(Slicer_USE_PYTHONQT)\n    list(APPEND KIT_TEST_SRCS\n      qSlicerCorePythonManagerWithoutApplicationTest.cxx\n      qSlicerScriptedUtilsTest1.cxx\n      )\n  endif()\n  if(Slicer_USE_PYTHONQT_WITH_OPENSSL)\n    list(APPEND KIT_TEST_SRCS\n      qSlicerSslTest.cxx\n      )\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Project Definition\nDESCRIPTION: Defines the project name as qSlicerBaseQTApp. This is the entry point for the CMake project configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTApp/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(qSlicerBaseQTApp)\n```\n\n----------------------------------------\n\nTITLE: Setting module name\nDESCRIPTION: This snippet sets the module name to MergeModels. It is used later to build the CLI.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MergeModels/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_NAME MergeModels)\n```\n\n----------------------------------------\n\nTITLE: VTK Warning Logging Example\nDESCRIPTION: Example of logging a warning in a VTK class. Includes the object name.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/style_guide.md#_snippet_11\n\nLANGUAGE: C++\nCODE:\n```\nvtkWarningMacro(\"Model \" << modelNode->GetName() << \"'s display node is null\\n\");\n```\n\n----------------------------------------\n\nTITLE: Set Project Name in CMake\nDESCRIPTION: Sets the project name and initializes the project.  The `project()` command names the project for CMake.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT ${PROJECT_NAME})\nproject(${KIT}Plugins)\n```\n\n----------------------------------------\n\nTITLE: Export Target\nDESCRIPTION: Exports the library target to a CMake file. The file is located at ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Targets.cmake. This allows other projects to easily use vtkITK.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkITK/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_EXPORT_FILE)\n  set(${PROJECT_NAME}_EXPORT_FILE ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Targets.cmake)\nendif()\nexport(TARGETS ${lib_name} APPEND FILE ${${PROJECT_NAME}_EXPORT_FILE})\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: This snippet defines the source files and header files that make up the module logic. These files are used when building the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Terminologies/Logic/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  vtkSlicer${MODULE_NAME}ModuleLogic.cxx\n  vtkSlicer${MODULE_NAME}ModuleLogic.h\n  vtkSlicerTerminologyCategory.cxx\n  vtkSlicerTerminologyCategory.h\n  vtkSlicerTerminologyType.cxx\n  vtkSlicerTerminologyType.h\n  vtkSlicerTerminologyEntry.cxx\n  vtkSlicerTerminologyEntry.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Project Definition\nDESCRIPTION: Defines the project name as vtkITK. This is the starting point for the CMake configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkITK/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(vtkITK)\n```\n\n----------------------------------------\n\nTITLE: Generating Header Files List (CMake)\nDESCRIPTION: This snippet automatically generates a list of header files corresponding to the source files defined earlier. It uses a regular expression to replace the `.cxx` extension with `.h`. This list will be used for organizational purposes, likely for grouping files in the IDE.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Core/CMakeLists.txt#_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nstring(REGEX REPLACE \"\\\\.cxx\" \".h\" MRMLCore_SRCS_HEADERS \"${MRMLCore_SRCS}\")\nsource_group(\"Header Files\" FILES ${MRMLCore_SRCS_HEADERS})\n```\n\n----------------------------------------\n\nTITLE: Set Module Name in CMake\nDESCRIPTION: Sets the MODULE_NAME variable to \"Sequences\" and converts it to uppercase for use in other definitions. This is a fundamental step in defining the module for the build system and ensures consistency across the module's configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Sequences/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_NAME Sequences)\n\nstring(TOUPPER ${MODULE_NAME} MODULE_NAME_UPPER)\n```\n\n----------------------------------------\n\nTITLE: Adding Simple Test with CMake\nDESCRIPTION: This snippet uses the `simple_test` macro to add a basic test executable. It specifies the name of the test, which in this case is `qSlicerTransformsModuleWidgetTest`. This macro likely creates a test target in CMake that can be executed to verify the functionality of the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/Testing/Cxx/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nsimple_test(qSlicerTransformsModuleWidgetTest)\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name Variable - CMake\nDESCRIPTION: Sets the MODULE_NAME variable to \"Texts\" and converts it to uppercase for use in defining other variables.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Texts/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME Texts)\n\nstring(TOUPPER ${MODULE_NAME} MODULE_NAME_UPPER)\n```\n\n----------------------------------------\n\nTITLE: Add Python Unit Test for Slicer Module (CMake)\nDESCRIPTION: This CMake function adds a Python unit test to a Slicer module. It takes the Python script as an argument and configures the test to be run during the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/Scripted/Testing/Python/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n#slicer_add_python_unittest(SCRIPT ${MODULE_NAME}ModuleTest.py)\n```\n\n----------------------------------------\n\nTITLE: Setting ITK Components\nDESCRIPTION: This snippet defines the ITK components required for the MRML testing environment and uses `find_package` to locate the ITK installation.  It also handles potential differences between ITK versions greater than or equal to 5.3 and older versions regarding factory registration. ITK libraries and include directories are added to the respective lists.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Logic/Testing/Cxx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}Testing_ITK_COMPONENTS\n  ITKCommon\n  )\nfind_package(ITK 4.6 COMPONENTS ${${KIT}Testing_ITK_COMPONENTS} REQUIRED)\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\nlist(APPEND ITK_LIBRARIES ITKFactoryRegistration)\nlist(APPEND ITK_INCLUDE_DIRS\n  ${ITKFactoryRegistration_INCLUDE_DIRS}\n  )\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Add ExternalData Target (CMake)\nDESCRIPTION: This snippet adds an ExternalData target if `SEM_DATA_MANAGEMENT_TARGET` is equal to `${CLP}Data`.  This is often the case when the module has its own dedicated data management target.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ModelToLabelMap/Testing/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Create and Configure Executable Test Target - CMake\nDESCRIPTION: This code adds an executable test target named ${CLP}Test, links it against necessary libraries, sets target properties such as labels and folder, and configures an MRML file for testing.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ExecutionModelTour/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nctk_add_executable_utf8(${CLP}Test ${CLP}Test.cxx)\nadd_dependencies(${CLP}Test ${CLP})\ntarget_link_libraries(${CLP}Test ${CLP}Lib ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES})\nset_target_properties(${CLP}Test PROPERTIES LABELS ${CLP})\nset_target_properties(${CLP}Test PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n\nconfigure_file(${INPUT}/ExecutionModelTourTest.mrml\n      ${TEMP}/ExecutionModelTourTest.mrml\n      COPYONLY)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files - CMake\nDESCRIPTION: This snippet defines the source files that make up the displayable manager. These include various displayable manager classes for 2D and 3D views, as well as widget representations.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/MRMLDM/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(displayable_manager_SRCS\n  vtkMRML${MODULE_NAME}DisplayableManager2D.cxx\n  vtkMRML${MODULE_NAME}DisplayableManager3D.cxx\n  vtkMRMLLinear${MODULE_NAME}DisplayableManager.cxx\n  vtkMRMLTransformHandleWidget.cxx\n  vtkMRMLTransformHandleWidgetRepresentation.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter Packs for Point and BoundingBox in Slicer\nDESCRIPTION: This code defines two parameter packs: `Point` (containing x and y coordinates) and `BoundingBox` (containing two `Point` instances representing the top-left and bottom-right corners).  These packs are decorated with `@parameterPack` to signify their use in Slicer's parameter node wrapper system. It depends on `slicer.parameterNodeWrapper` module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/parameter_nodes/advanced/custom_widgets_for_parameter_packs.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom slicer.parameterNodeWrapper import *\n\n@parameterPack\nclass Point:\n    x: float\n    y: float\n\n@parameterPack\nclass BoundingBox:\n    # can nest parameterPacks\n    topLeft: Point\n    bottomRight: Point\n\n@parameterNodeWrapper\nclass ParameterNodeType:\n    box1: BoundingBox\n    box2: BoundingBox\n```\n\n----------------------------------------\n\nTITLE: Releasing Ownership of Factory Method Results in Python\nDESCRIPTION: This Python code snippet shows how to release the ownership of a VTK object returned by a factory method (`GetNodesByClass`).  The `UnRegister` method is called to decrement the reference count and avoid memory leaks.  This is necessary because Python adds its own reference to the VTK object.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/advanced_topics.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nnodes = scene.GetNodesByClass(\"vtkMRMLModelNode\")\nnodes.UnRegister(None) # GetNodesByClass method is NOT marked with VTK_NEWINSTANCE, manual unregistration is needed\n```\n\n----------------------------------------\n\nTITLE: Rotation And Affine Linear Test - CMake\nDESCRIPTION: Defines a test case that applies a combined rotation and affine transformation to an image using linear interpolation. It compares the result to a baseline image with a specified intensity tolerance. FS transform domain is used.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleDTIVolume/Testing/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(RotationAndAffineFile ${INPUT}/rotationAndAffine.tfm )\nset(TransformedImage2 ${TEMP}/dt-helix-transformed2.nrrd )\nset(testname ${CLP}2RigidTransformsLinearTest)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  --compare\n    DATA{${BASELINE}/dt-helix-ref-RotationAndAffine.nrrd}\n    ${TransformedImage2}\n  --compareIntensityTolerance 1e-10\n  ModuleEntryPoint\n    -f ${RotationAndAffineFile}\n    -T FS\n    --interpolation linear\n    -c\n    ${OriginalImage}\n    ${TransformedImage2}\n    --correction abs\n    -n 8\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name - DICOM - CMake\nDESCRIPTION: This snippet sets the module name to 'DICOM'. This variable is used in subsequent steps to define other module-related variables and when calling the `slicerMacroBuildScriptedModule` macro.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOM/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME DICOM)\n```\n\n----------------------------------------\n\nTITLE: Include Directories Definition\nDESCRIPTION: Defines the list of include directories required for the module. These directories contain header files needed to compile the source code. Dependencies include MRML, VTK, and subject hierarchy modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSlicerMarkupsModuleMRML_INCLUDE_DIRS}\n  ${vtkSlicerMarkupsModuleLogic_INCLUDE_DIRS}\n  ${vtkSlicerMarkupsModuleVTKWidgets_INCLUDE_DIRS}\n  ${qSlicerSubjectHierarchyModuleWidgets_INCLUDE_DIRS}\n  ${vtkSlicerSubjectHierarchyModuleLogic_INCLUDE_DIRS}\n  ${qSlicerTerminologiesModuleWidgets_INCLUDE_DIRS}\n  ${vtkSlicerTerminologiesModuleLogic_INCLUDE_DIRS}\n  ${vtkSegmentationCore_INCLUDE_DIRS}\n  ${qMRMLWidgets_INCLUDE_DIRS}\n  ${MRMLLogic_INCLUDE_DIRS}\n  ${MRMLCore_INCLUDE_DIRS}\n  ${MRMLDisplayableManager_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Variables for Module Configuration (CMake)\nDESCRIPTION: This snippet sets CMake variables to define input paths, module names, and data management targets. It configures the module's environment for building and testing.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/TestGridTransformRegistration/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input)\n\nset(CLP ${MODULE_NAME})\n\nif(NOT DEFINED SEM_DATA_MANAGEMENT_TARGET)\n  set(SEM_DATA_MANAGEMENT_TARGET ${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Define vtkITK Sources\nDESCRIPTION: Sets the source files for the vtkITK library.  This includes a list of .cxx and .h files that make up the library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkITK/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(vtkITK_SRCS\n  vtkITKNumericTraits.cxx\n  vtkITKArchetypeDiffusionTensorImageReaderFile.cxx\n  vtkITKArchetypeImageSeriesReader.cxx\n  vtkITKArchetypeImageSeriesScalarReader.cxx\n  vtkITKArchetypeImageSeriesVectorReaderFile.cxx\n  vtkITKArchetypeImageSeriesVectorReaderSeries.cxx\n  vtkITKImageThresholdCalculator.cxx\n  vtkITKImageWriter.cxx\n  vtkITKImageToImageFilter.h\n  vtkITKImageToImageFilterFF.h\n  vtkITKGradientAnisotropicDiffusionImageFilter.cxx\n  vtkITKGrowCut.cxx\n  vtkITKDistanceTransform.cxx\n  vtkITKLabelShapeStatistics.cxx\n  vtkITKLevelTracingImageFilter.cxx\n  vtkITKLevelTracing3DImageFilter.cxx\n  vtkITKIslandMath.cxx\n  vtkITKImageMargin.cxx\n  vtkITKMorphologicalContourInterpolator.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Test Driver using slicerMacro\nDESCRIPTION: This snippet uses the `slicerMacroConfigureModuleCxxTestDriver` macro (defined elsewhere in the Slicer build system) to configure a C++ test driver for the module. It specifies the name of the module (`${KIT}`), the source files, target libraries to link against, and options for memory leak and error output checks.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/Testing/Cxx/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroConfigureModuleCxxTestDriver(\n  NAME ${KIT}\n  SOURCES ${KIT_TEST_SRCS}\n  TARGET_LIBRARIES vtkSlicerVolumesModuleLogic\n  WITH_VTK_DEBUG_LEAKS_CHECK\n  WITH_VTK_ERROR_OUTPUT_CHECK\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting UI Source Files in CMake\nDESCRIPTION: This snippet specifies the user interface definition files for the module. These files are typically created using Qt Designer and describe the layout of the module's user interface.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/Loadable/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_UI_SRCS\n  Resources/UI/qSlicer${MODULE_NAME}ModuleWidget.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: ITK Factory Registration Handling\nDESCRIPTION: This snippet manages ITK's factory registration based on the ITK version. For ITK versions 5.3 and greater, it disables factory registration for IMAGEIO, MESHIO, and TRANSFORMIO. For older versions, it disables the IO factory register manager. This addresses compatibility issues with ITK's registration mechanism.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CurvatureAnisotropicDiffusion/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Executable and Linking Libraries\nDESCRIPTION: This snippet creates an executable named `${CLP}Test` from the source file `${CLP}Test.cxx` using `ctk_add_executable_utf8`. It then links the executable to the module's library (`${CLP}Lib`) and additional libraries required by Slicer's execution model (`${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES}`). Finally, it sets properties like labels and folder for the executable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/SubtractScalarVolumes/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nctk_add_executable_utf8(${CLP}Test ${CLP}Test.cxx)\ntarget_link_libraries(${CLP}Test ${CLP}Lib ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES})\nset_target_properties(${CLP}Test PROPERTIES LABELS ${CLP})\nset_target_properties(${CLP}Test PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Setting include directories for the KIT - CMake\nDESCRIPTION: This snippet sets the include directories for the `KIT`. These directories contain header files that are required to compile the source code. It includes both the source and binary directories of the module logic.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/Widgets/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSlicer${MODULE_NAME}ModuleLogic_SOURCE_DIR}\n  ${vtkSlicer${MODULE_NAME}ModuleLogic_BINARY_DIR}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name\nDESCRIPTION: This CMake command sets the MODULE_NAME variable to 'ProbeVolumeWithModel'. This variable is used throughout the CMake file to refer to the module name.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ProbeVolumeWithModel/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME ProbeVolumeWithModel)\n```\n\n----------------------------------------\n\nTITLE: Including CMake Subdirectory\nDESCRIPTION: This CMake command adds the specified subdirectory ('Cxx') to the build process. It allows CMake to find and process the CMakeLists.txt file within that directory, making its targets available for inclusion in the main project. This is essential for modularizing larger projects into manageable components.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTApp/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Import DICOM Files into DICOM Database in Python\nDESCRIPTION: Imports DICOM files into the application's DICOM database using the built-in indexer. The images are not directly loaded into the scene but appear in the DICOM browser. This allows for subsequent loading using DICOMUtils functions such as loadPatientByUID.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/dicom.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# instantiate a new DICOM browser\nslicer.util.selectModule(\"DICOM\")\ndicomBrowser = slicer.modules.DICOMWidget.browserWidget.dicomBrowser\n# use dicomBrowser.ImportDirectoryCopy to make a copy of the files (useful for importing data from removable storage)\ndicomBrowser.importDirectory(dicomFilesDirectory, dicomBrowser.ImportDirectoryAddLink)\n# wait for import to finish before proceeding (optional, if removed then import runs in the background)\ndicomBrowser.waitForImportFinished()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files in CMake\nDESCRIPTION: This snippet defines the source files (.cxx and .h) that constitute the module's logic component.  These files will be compiled and linked into the final library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Texts/Logic/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_SRCS\n  vtkSlicerTextsLogic.cxx\n  vtkSlicerTextsLogic.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Input Variable\nDESCRIPTION: Sets the INPUT variable to point to the input data directory relative to the current source directory. This is used to locate input data for the module. The variable is used later for test commands that rely on input data.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/PETStandardUptakeValueComputation/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files in CMake\nDESCRIPTION: This snippet defines the source files (.cxx and .h) for the module. It specifies the C++ source code that will be compiled into the library.  It also separates the moc and UI sources.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOMLib/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_SRCS\n  qSlicerSubjectHierarchyDICOMPlugin.cxx\n  qSlicerSubjectHierarchyDICOMPlugin.h\n  )\n\nset(${KIT}_MOC_SRCS\n  qSlicerSubjectHierarchyDICOMPlugin.h\n  )\n\nset(${KIT}_UI_SRCS\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Project and Module Names\nDESCRIPTION: Sets the project name and a list of module names. This is a prerequisite for configuring the module tests and other build steps. The project name is used to define the kit name.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Core/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT ${PROJECT_NAME})\n\nset(KIT_TEST_SRCS)\nset(KIT_TEST_NAMES)\nset(KIT_TEST_NAMES_CXX)\nset(modulenames\n  EventBroker\n  )\n```\n\n----------------------------------------\n\nTITLE: Avoiding Memory Leaks with VTK Objects (Bad Example)\nDESCRIPTION: This C++ code snippet demonstrates an anti-pattern for creating VTK objects, potentially leading to memory leaks. The `New()` method is called directly, and the returned pointer is stored in a plain pointer without proper memory management using smart pointers. It is crucial to avoid such direct pointer handling.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/advanced_topics.md#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nvtkMRMLScalarVolumeNode* vol = vtkMRMLScalarVolumeNode::New();\n// ... do something, such as vol->GetImageData(), someObject->SetVolume(vol)...\nvol->Delete();\nvol=NULL;\n```\n\n----------------------------------------\n\nTITLE: Building Qt Designer Plugin with ctkMacroBuildQtDesignerPlugin - CMake\nDESCRIPTION: This snippet utilizes the `ctkMacroBuildQtDesignerPlugin` macro to generate a Qt Designer plugin. It takes the plugin name, export directive, folder name, source files, MOC source files, and target libraries as input. The macro is responsible for handling the build process of the plugin.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Terminologies/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nctkMacroBuildQtDesignerPlugin(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT}\n  FOLDER \"Module-${MODULE_NAME}\"\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking Test Executable\nDESCRIPTION: This snippet uses `ctk_add_executable_utf8` to create an executable target named `${CLP}Test` from the source file `${CLP}Test.cxx`. It then links the executable with the necessary libraries, including `${CLP}Lib` and `${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES}`. Finally, it sets properties such as LABELS and FOLDER for the created target.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperCLIModuleTemplate/Testing/Cxx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nctk_add_executable_utf8(${CLP}Test ${CLP}Test.cxx)\ntarget_link_libraries(${CLP}Test ${CLP}Lib ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES})\nset_target_properties(${CLP}Test PROPERTIES LABELS ${CLP})\nset_target_properties(${CLP}Test PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Setting Resources - CMake\nDESCRIPTION: Specifies any resource files (e.g., images, icons) that the module's widgets use.  This is currently an empty list.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Widgets/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_RESOURCES\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel\nDESCRIPTION: This snippet uses `find_package` to locate the SlicerExecutionModel package. It then includes the use file provided by the package to set up necessary variables and dependencies.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ModelMaker/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Updating SlicerExecutionModel include directories\nDESCRIPTION: This snippet updates the `SlicerExecutionModel_EXTRA_INCLUDE_DIRECTORIES` variable with additional include directories required by the SlicerExecutionModel. It also configures a file named `SEMCommandLineLibraryWrapper.cxx` from a template.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/CLI/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(SlicerExecutionModel_EXTRA_INCLUDE_DIRECTORIES\n  ${SlicerExecutionModel_EXTRA_INCLUDE_DIRECTORIES}\n  ${Slicer_BaseCLI_INCLUDE_DIRS}\n  ${ITKFactoryRegistration_INCLUDE_DIRS}\n  CACHE INTERNAL \"SlicerExecutionModel extra includes\" FORCE\n  )\nset(SlicerExecutionModel_CLI_LIBRARY_WRAPPER_CXX\n  ${CMAKE_CURRENT_BINARY_DIR}/SEMCommandLineLibraryWrapper.cxx\n  CACHE INTERNAL \"SlicerExecutionModel extra includes\" FORCE\n  )\nconfigure_file(\n  SEMCommandLineLibraryWrapper.cxx.in\n  ${SlicerExecutionModel_CLI_LIBRARY_WRAPPER_CXX}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name in CMake\nDESCRIPTION: This snippet sets the module name to 'PerformanceTests'. This name is used throughout the CMake configuration to refer to the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/PerformanceTests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME PerformanceTests)\n```\n\n----------------------------------------\n\nTITLE: Setting Variables for Data Paths and Target Names (CMake)\nDESCRIPTION: This snippet sets CMake variables for defining paths to baseline data, input data, the name of the current module, and a target name for data management. The `SEM_DATA_MANAGEMENT_TARGET` is conditionally defined to avoid redefinition.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MaskScalarVolume/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nset(BASELINE ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Baseline)\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input)\n\nset(CLP ${MODULE_NAME})\n\nif(NOT DEFINED SEM_DATA_MANAGEMENT_TARGET)\n  set(SEM_DATA_MANAGEMENT_TARGET ${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Slicer in Release Mode using CMake CLI (Windows)\nDESCRIPTION: This snippet demonstrates how to configure and build Slicer in Release mode using the command line with CMake on Windows. It sets necessary paths for Qt and specifies the generator and architecture.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/windows.md#_snippet_0\n\nLANGUAGE: bat\nCODE:\n```\ncd C:\\D\n\n\"C:\\Program Files\\CMake\\bin\\cmake.exe\" ^\n  -G \"Visual Studio 17 2022\" -A x64 ^\n  -DQt5_DIR:PATH=C:/Qt/5.15.2/msvc2019_64/lib/cmake/Qt5 ^\n  -S C:\\D\\S -B C:\\D\\SR\n\n\"C:\\Program Files\\CMake\\bin\\cmake.exe\" --build C:\\D\\SR --config Release\n```\n\n----------------------------------------\n\nTITLE: Setting MOC Source Files\nDESCRIPTION: This snippet sets the `${KIT}_MOC_SRCS` variable, which lists the header files that need to be processed by the Meta-Object Compiler (MOC). The MOC generates code for Qt's signals and slots mechanism.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/Widgets/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_MOC_SRCS\n  qSlicerSubjectHierarchyPluginLogic.h\n  qSlicerSubjectHierarchyAbstractPlugin.h\n  qSlicerSubjectHierarchyPluginHandler.h\n  qSlicerSubjectHierarchyDefaultPlugin.h\n  qSlicerSubjectHierarchyCloneNodePlugin.h\n  qSlicerSubjectHierarchyParseLocalDataPlugin.h\n  qSlicerSubjectHierarchyRegisterPlugin.h\n  qSlicerSubjectHierarchyFolderPlugin.h\n  qSlicerSubjectHierarchyOpacityPlugin.h\n  qSlicerSubjectHierarchyViewContextMenuPlugin.h\n  qSlicerSubjectHierarchyVisibilityPlugin.h\n  qMRMLSubjectHierarchyTreeView.h\n  qMRMLSubjectHierarchyComboBox.h\n  qMRMLSubjectHierarchyModel.h\n  qMRMLSortFilterSubjectHierarchyProxyModel.h\n  qSlicerSubjectHierarchyExportPlugin.h\n  qSlicerSubjectHierarchyExpandToDepthPlugin.h\n  )\nif(Slicer_USE_PYTHONQT)\n  list(APPEND ${KIT}_MOC_SRCS\n    qSlicerSubjectHierarchyScriptedPlugin.h\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building scripted module\nDESCRIPTION: This snippet uses the slicerMacroBuildScriptedModule macro to build the scripted module.  It takes the module name, scripts, resources, and testing options as input. This macro handles the details of creating the necessary build targets and dependencies.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/ScriptedLoadableExtensionTemplate/ScriptedLoadableModuleTemplate/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nslicerMacroBuildScriptedModule(\n  NAME ${MODULE_NAME}\n  SCRIPTS ${MODULE_PYTHON_SCRIPTS}\n  RESOURCES ${MODULE_PYTHON_RESOURCES}\n  WITH_GENERIC_TESTS\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding ITK Package with Components (CMake)\nDESCRIPTION: This snippet finds the ITK (Insight Toolkit) package and specifies required components, enabling the use of ITK functionality within the module. It handles version compatibility by potentially disabling factory registration managers for versions 5.3 and greater to avoid conflicts. Includes the ITK_USE_FILE.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleDTIVolume/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKCommon\n  ITKDiffusionTensorImage\n  ITKIOImageBase\n  ITKIONRRD\n  ITKIOTransformBase\n  ITKImageFilterBase\n  ITKImageFunction\n  ITKImageGrid\n  ITKImageIntensity\n  ITKSpatialObjects\n  ITKTestKernel\n  ITKTransform\n  ${ModuleDescriptionParser_ITK_COMPONENTS}\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Target\nDESCRIPTION: This snippet conditionally adds an ExternalData target, which is used to manage the test data dependencies. It is only added if SEM_DATA_MANAGEMENT_TARGET is equal to ${CLP}Data.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/FiducialRegistration/Testing/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: Defines the list of source files (.cxx and .h) that make up the module. These source files contain the implementation of the module's functionality, including the module and widget classes.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/CropVolume/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_SRCS\n  qSlicer${MODULE_NAME}Module.cxx\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.cxx\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Configure Debugger Commands in CodeLite\nDESCRIPTION: This snippet shows the commands to be entered in the CodeLite debugger settings for debugging Slicer. It sets up an execution wrapper and specifies the executable file to be debugged. This is essential for the debugger to function correctly with the Slicer build environment.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/debugging/codelitecpp.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nset exec-wrapper `~/Slicer-SuperBuild-Debug/Slicer-build/WrapSlicer`\nexec-file `~/Slicer-SuperBuild-Debug/Slicer-build/bin/SlicerApp-real`\n```\n\n----------------------------------------\n\nTITLE: QT Debug Logging Example\nDESCRIPTION: Example of logging a debug message using QT. Shows the use of the `qDebug` function.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/style_guide.md#_snippet_15\n\nLANGUAGE: C++\nCODE:\n```\nqDebug() << \"qMRMLSceneFactoryWidget::deleteNode(\" <<className <<\") no node\";\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories CMake\nDESCRIPTION: Specifies the include directories that should be added to the compiler's search path when building the module. This ensures that the compiler can find the necessary header files for the module and its dependencies.  It includes source and binary directories of the Logic component.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/ViewControllers/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_INCLUDE_DIRECTORIES\n  ${CMAKE_CURRENT_SOURCE_DIR}/Logic\n  ${CMAKE_CURRENT_BINARY_DIR}/Logic\n  )\n```\n\n----------------------------------------\n\nTITLE: Add CMake Script Test\nDESCRIPTION: This snippet adds a CMake script test named `list_to_string_test`. It utilizes the `add_cmakescript_test` macro, passing the test name and the path to the CMake script (`CMake/ListToString.cmake`). The script is located in the `${CMAKE_SOURCE_DIR}` directory. It tests the 'ListToString.cmake' script.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMake/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_cmakescript_test(\n  list_to_string_test\n  CMake/ListToString.cmake)\n```\n\n----------------------------------------\n\nTITLE: Qt Wrapping CMake\nDESCRIPTION: This snippet uses `QT5_WRAP_CPP`, `QT5_WRAP_UI`, and `QT5_ADD_RESOURCES` CMake functions to generate C++ code from the header files listed in `MRMLWidgets_MOC_SRCS`, the UI files listed in `MRMLWidgets_UI_SRCS`, and the resource files listed in `MRMLWidgets_QRC_SRCS`, respectively.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\n  set(_moc_options OPTIONS -DMRML_WIDGETS_HAVE_QT5)\n  if(MRML_WIDGETS_HAVE_WEBENGINE_SUPPORT)\n    list(APPEND _moc_options -DMRML_WIDGETS_HAVE_WEBENGINE_SUPPORT)\n  endif()\n  QT5_WRAP_CPP(MRMLWidgets_MOC_CXX ${MRMLWidgets_MOC_SRCS} ${_moc_options})\n  QT5_WRAP_UI(MRMLWidgets_UI_CXX ${MRMLWidgets_UI_SRCS})\n  QT5_ADD_RESOURCES(MRMLWidgets_QRC_CXX ${MRMLWidgets_QRC_SRCS})\n```\n\n----------------------------------------\n\nTITLE: Setting Resources in CMake\nDESCRIPTION: Specifies resource files to be included in the project, such as images or other data. In this case, no specific resources are listed, so the set is empty.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Core/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT_resources\n  )\n```\n\n----------------------------------------\n\nTITLE: Option: Build Shared Libraries\nDESCRIPTION: Defines an option to build shared libraries. If BUILD_SHARED_LIBS is not already defined, it defaults to ON.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkITK/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED BUILD_SHARED_LIBS)\n  option(BUILD_SHARED_LIBS \"Build with shared libraries.\" ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Cxx Test Driver with CMake\nDESCRIPTION: This snippet uses a custom CMake macro, `slicerMacroConfigureModuleCxxTestDriver`, to configure the C++ test driver. It passes the module name (KIT), test source files (KIT_TEST_SRCS), and options to enable VTK debug leaks check and error output check. This macro likely handles the compilation and linking of the test driver executable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/Testing/Cxx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nslicerMacroConfigureModuleCxxTestDriver(\n  NAME ${KIT}\n  SOURCES ${KIT_TEST_SRCS}\n  WITH_VTK_DEBUG_LEAKS_CHECK\n  WITH_VTK_ERROR_OUTPUT_CHECK\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Designer Plugins CMake\nDESCRIPTION: This snippet conditionally adds the DesignerPlugins subdirectory if Slicer_BUILD_QT_DESIGNER_PLUGINS is enabled. This allows building Qt Designer plugins for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOMLib/Widgets/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(Slicer_BUILD_QT_DESIGNER_PLUGINS)\n  add_subdirectory(DesignerPlugins)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Resources Configuration\nDESCRIPTION: Specifies the resource files for the module, such as icons and other assets. These files are packaged into a resource bundle.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/Loadable/Widgets/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_RESOURCES\n  ../Resources/qSlicer${MODULE_NAME}Module.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Determining Wiki Documentation Version\nDESCRIPTION: This snippet sets the documentation version based on the `Slicer_VERSION_MAJOR` and `Slicer_VERSION_MINOR` variables.  It also differentiates between Stable and Nightly release types, modifying the `wiki_version` variable accordingly.  This allows the documentation to reflect the correct version of the software.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Scripts/SlicerWizard/doc/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(doc_version \"${Slicer_VERSION_MAJOR}.${Slicer_VERSION_MINOR}\")\nset(wiki_version \"Nightly\")\nif(\"${Slicer_RELEASE_TYPE}\" STREQUAL \"Stable\")\n  set(wiki_version \"${doc_version}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Project Name (CMake)\nDESCRIPTION: Sets the KIT variable to be the project name. This variable is used throughout the configuration file to refer to the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/CropVolume/MRML/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Building Qt Library with Slicer Macro\nDESCRIPTION: This snippet uses the `SlicerMacroBuildModuleQtLibrary` macro to build the Qt library for the module.  It passes in the configured variables such as include directories, source files, target libraries, and resources. This macro automates the process of building a Qt-based Slicer module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOMLib/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nSlicerMacroBuildModuleQtLibrary(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  FOLDER \"Module-${MODULE_NAME}\"\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  UI_SRCS ${${KIT}_UI_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  RESOURCES ${${KIT}_RESOURCES}\n  WRAP_PYTHONQT\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting VTK Wrapped Libraries Variable\nDESCRIPTION: This snippet defines the VTK wrapped libraries.  It initializes a list `_vtk_wrapped_libraries` with base VTK related libs, then conditionally appends additional libraries based on `Slicer_BUILD_vtkAddon`, `Slicer_USE_PYTHONQT`, `VTK_WRAP_PYTHON`, and `Slicer_BUILD_CLI_SUPPORT`. Finally, the `Slicer_Libs_VTK_WRAPPED_LIBRARIES` variable is set.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\n# Set variable Slicer_Libs_VTK_WRAPPED_LIBRARIES\n#-----------------------------------------------------------------------------\nset(_vtk_wrapped_libraries\n  vtkSegmentationCore\n  vtkTeem\n  vtkITK\n  MRMLCore\n  MRMLLogic\n  )\n\nif(Slicer_BUILD_vtkAddon)\n  list(APPEND _vtk_wrapped_libraries\n    vtkAddon\n    )\nendif()\nif(Slicer_USE_PYTHONQT AND VTK_WRAP_PYTHON)\n  list(APPEND _vtk_wrapped_libraries MRMLDisplayableManager)\nendif()\nif(Slicer_BUILD_CLI_SUPPORT)\n  list(APPEND _vtk_wrapped_libraries MRMLCLI)\nendif()\nset(Slicer_Libs_VTK_WRAPPED_LIBRARIES\n  ${_vtk_wrapped_libraries} CACHE INTERNAL \"Slicer Libs VTK wrapped\" FORCE)\n```\n\n----------------------------------------\n\nTITLE: Defining Project and Export Directive in CMake\nDESCRIPTION: This snippet defines the project name, sets up the export directive used for shared library symbols visibility, and specifies the module name to be used throughout the CMake configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/MRMLDM/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleMRMLDisplayableManager)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_MRMLDISPLAYABLEMANAGER_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Target Libraries Definition\nDESCRIPTION: Defines the list of target libraries that this module depends on. These libraries are linked with the module during the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleMRML\n  vtkSlicer${MODULE_NAME}ModuleVTKWidgets\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  qSlicerSubjectHierarchyModuleWidgets\n  vtkSlicerSubjectHierarchyModuleLogic\n  qSlicerTerminologiesModuleWidgets\n  qMRMLWidgets\n  MRMLLogic\n  MRMLCore\n  MRMLDisplayableManager\n  )\n```\n\n----------------------------------------\n\nTITLE: Conditional Testing Block (CMake)\nDESCRIPTION: This snippet enables testing-related code based on the `BUILD_TESTING` flag.  If `BUILD_TESTING` is true, any code within this block will be included during the build process, typically adding test executables or definitions. No specific dependencies are listed, but it relies on the CMake environment and build system.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/Testing/Python/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  # Code specific to Slicer testing is added here.\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories in CMake\nDESCRIPTION: This CMake snippet sets the `${PROJECT_NAME}_INCLUDE_DIRS` variable, which contains a list of directories to be used as include paths during compilation. It includes the current source and binary directories, as well as the include directories of `vtkAddon` and `vtkSegmentationCore`. The `CACHE INTERNAL` option makes the variable internal and stores it in the CMake cache, and `FORCE` overwrites any previous value.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Core/CMakeLists.txt#_snippet_27\n\nLANGUAGE: cmake\nCODE:\n```\nset(${PROJECT_NAME}_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR} ${vtkAddon_INCLUDE_DIRS} ${vtkSegmentationCore_INCLUDE_DIRS}\n  CACHE INTERNAL \"${PROJECT_NAME} include dirs\" FORCE)\n```\n\n----------------------------------------\n\nTITLE: Setting Module Export Directive CMake\nDESCRIPTION: Defines the export directive for the module, which is used to control the visibility of symbols when building shared libraries. The directive is based on the module's uppercase name and ensures proper symbol visibility for the Markups module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_EXPORT_DIRECTIVE \"Q_SLICER_QTMODULES_${MODULE_NAME_UPPER}_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Library Name Definition CMake\nDESCRIPTION: Defines the library name using the project name.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/DisplayableManager/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(lib_name ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Setting Module UI Source Files in CMake\nDESCRIPTION: Specifies the UI files designed using Qt Designer. These files define the layout and appearance of the module's user interface.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SceneViews/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_UI_SRCS\n  Resources/UI/qSlicer${MODULE_NAME}ModuleWidget.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Project Initialization\nDESCRIPTION: Initializes the CMake project for the Slicer module logic. Sets the project name based on the MODULE_NAME variable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Units/Logic/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleLogic)\n```\n\n----------------------------------------\n\nTITLE: Copying sysconfigdata for GDB in Linux\nDESCRIPTION: This bash script addresses an issue where GDB fails to start due to a missing `_sysconfigdata__linux_x86_64-linux-gnu.py` file. It copies the existing Slicer's sysconfigdata file to the expected filename, resolving the GDB startup issue. Requires the user to navigate to the Slicer's python library directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/debugging/vscodecpp.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/D/Slicer-SuperBuild-Debug/python-install/lib/python3.6/\ncp _sysconfigdata_m_linux2_.py _sysconfigdata__linux_x86_64-linux-gnu.py\n```\n\n----------------------------------------\n\nTITLE: Defining CLP Module and Data Target in CMake\nDESCRIPTION: Sets the module name using the `MODULE_NAME` variable and defines a target for data management. It checks if the `SEM_DATA_MANAGEMENT_TARGET` is defined and sets it to the module name with \"Data\" appended if not. This target is later used by ExternalData to manage external data dependencies.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MedianImageFilter/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(CLP ${MODULE_NAME})\n\nif(NOT DEFINED SEM_DATA_MANAGEMENT_TARGET)\n  set(SEM_DATA_MANAGEMENT_TARGET ${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Executing No-Warning Tests\nDESCRIPTION: Executes a series of no-warning tests using the `nowarning_test` macro. These tests cover various command-line options, including those related to main window visibility, module disabling, and application information. This ensures that Slicer runs without unexpected warnings in different scenarios.\nSOURCE: https://github.com/slicer/slicer/blob/main/Applications/SlicerApp/Testing/Python/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nnowarning_test(mainwindow --no-splash)\nnowarning_test(mainwindow_application_info --application-information)\nnowarning_test(mainwindow_python_console --show-python-console)\nnowarning_test(mainwindow_nocli --disable-cli-modules)\nnowarning_test(mainwindow_noloadable --disable-loadable-modules)\nnowarning_test(mainwindow_noscripted --disable-scripted-loadable-modules)\nnowarning_test(mainwindow_nocli_noloadable --disable-cli-modules --disable-loadable-modules)\nnowarning_test(mainwindow_nocli_noscripted --disable-cli-modules --disable-scripted-loadable-modules)\nnowarning_test(mainwindow_noloadable_noscripted --disable-loadable-modules --disable-scripted-loadable-modules)\nnowarning_test(mainwindow_nocli_noloadable_noscripted --disable-cli-modules --disable-loadable-modules --disable-scripted-loadable-modules)\nnowarning_test(mainwindow_nomodules --disable-modules)\nnowarning_test(nomainwindow --no-main-window)\nnowarning_test(nomainwindow_application_info --no-main-window --application-information)\nnowarning_test(nomainwindow_python_console --no-main-window --show-python-console)\nnowarning_test(nomainwindow_nocli --no-main-window --disable-cli-modules)\nnowarning_test(nomainwindow_noloadable --no-main-window --disable-loadable-modules)\nnowarning_test(nomainwindow_noscripted --no-main-window --disable-scripted-loadable-modules)\nnowarning_test(nomainwindow_nocli_noloadable --no-main-window --disable-cli-modules --disable-loadable-modules)\nnowarning_test(nomainwindow_nocli_noscripted --no-main-window --disable-cli-modules --disable-scripted-loadable-modules)\nnowarning_test(nomainwindow_noloadable_noscripted --no-main-window --disable-loadable-modules --disable-scripted-loadable-modules)\nnowarning_test(nomainwindow_nocli_noloadable_noscripted --no-main-window --disable-cli-modules --disable-loadable-modules --disable-scripted-loadable-modules)\nnowarning_test(nomainwindow_nomodules --no-main-window --disable-modules)\nnowarning_test(nomainwindow_ignoreslicerrc --no-main-window --ignore-slicerrc)\n```\n\n----------------------------------------\n\nTITLE: Finding Slicer Package\nDESCRIPTION: Uses the `find_package` command to locate the Slicer build environment and required libraries. `REQUIRED` keyword ensures that the configuration will halt if Slicer cannot be found.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Extensions/Default/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Slicer REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: SuperBuild Option and Inclusion\nDESCRIPTION: Adds an option to enable SuperBuild, which builds the extension and its dependencies. If enabled, it includes the `SuperBuild.cmake` script and returns, skipping the subsequent extension module setup. The `mark_as_advanced` command makes the option available in advanced mode in the CMake GUI.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Extensions/SuperBuild/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\noption(${EXTENSION_NAME}_SUPERBUILD \"Build ${EXTENSION_NAME} and the projects it depends on.\" ON)\nmark_as_advanced(${EXTENSION_NAME}_SUPERBUILD)\nif(${EXTENSION_NAME}_SUPERBUILD)\n  include(\"${CMAKE_CURRENT_SOURCE_DIR}/SuperBuild.cmake\")\n  return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Simple Tests\nDESCRIPTION: Adds simple tests for various components, including CLI module factories and CLI modules.  If `Slicer_USE_PYTHONQT` is enabled, it also adds a test for a Python CLI module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCLI/Testing/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nsimple_test( qSlicerCLIExecutableModuleFactoryTest1 )\nsimple_test( qSlicerCLILoadableModuleFactoryTest1 )\nsimple_test( qSlicerCLIModuleTest1 )\nif(Slicer_USE_PYTHONQT)\n  simple_test( qSlicerPyCLIModuleTest1 )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Project Initialization and ITK Dependencies\nDESCRIPTION: This snippet initializes the CMake project and defines dependencies on ITK modules. It uses `find_package` to locate ITK and its required components, ensuring that the necessary libraries and headers are available during the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/ITKFactoryRegistration/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(ITKFactoryRegistration)\n\ncmake_minimum_required(VERSION 3.16.3...3.19.7 FATAL_ERROR)\n\n# --------------------------------------------------------------------------\n# Dependencies\n# --------------------------------------------------------------------------\n\n#\n# ITK\n#\nset(ITK_IO_MODULES_USED\n  ITKIOJPEG\n  ITKIOGDCM\n  ITKIOBMP\n  ITKIOLSM\n  ITKIOPNG\n  ITKIOTIFF\n  ITKIOVTK\n  ITKIOStimulate\n  ITKIOBioRad\n  ITKIOMeta\n  ITKIOMRC\n  ITKIONIFTI\n  ITKIONRRD\n  ITKIOGIPL\n  ITKIOTransformHDF5\n  ITKIOTransformInsightLegacy\n  ITKIOTransformMatlab\n  MGHIO\n  ITKIOMINC\n  IOScanco\n  )\nif(Slicer_BUILD_DICOM_SUPPORT)\n  list(APPEND ITK_IO_MODULES_USED ITKIODCMTK)\nendif()\n\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKIOImageBase\n  ITKIOTransformBase\n  ${ITK_IO_MODULES_USED}\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\n\n# This is the Slicer library in charge of registering the default ITK factories.\nset(ITK_NO_IO_FACTORY_REGISTER_MANAGER 0)\n\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Configuring header file\nDESCRIPTION: This snippet configures the header file `vtkMRMLCLIConfigure.h` from its `.in` template. It uses the `configure_file` command to replace variables in the template with their actual values, creating the final header file in the binary directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/CLI/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(configure_header_file vtkMRMLCLIConfigure.h)\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/${configure_header_file}.in\n  ${CMAKE_CURRENT_BINARY_DIR}/${configure_header_file}\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Module Export Directive in CMake\nDESCRIPTION: Defines the export directive for the module, which is used for controlling symbol visibility when building shared libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SlicerWelcome/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_EXPORT_DIRECTIVE \"Q_SLICER_QTMODULES_${MODULE_NAME_UPPER}_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Target in CMake\nDESCRIPTION: This conditionally adds an external data target if the `SEM_DATA_MANAGEMENT_TARGET` is equal to the module name plus \"Data\".\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ThresholdScalarVolume/Testing/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Markups Control Points Table CSV Format Example\nDESCRIPTION: This snippet shows a CSV example of a markups control points table file format. The file contains a header line defining columns such as label, LPS coordinates (l, p, s), defined, selected, visible, locked, and description. Subsequent lines provide the corresponding values for each control point, representing its properties and position in the LPS coordinate system.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/modules/markups.md#_snippet_2\n\nLANGUAGE: CSV\nCODE:\n```\nlabel,l,p,s,defined,selected,visible,locked,description\nF-1,-19.9067,13.9347,29.443,1,1,1,0,\nF-2,-7.3939,-76.9499,17.5525,1,1,1,0,\nF-3,81.7333,-42.9415,9.62559,1,1,1,0,\n```\n\n----------------------------------------\n\nTITLE: Defining Python Resources for Module in CMake\nDESCRIPTION: Defines a list of Python resources (icons, UI files) associated with the DataProbe module. These resources provide the visual elements and user interface components for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DataProbe/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_PYTHON_RESOURCES\n  Resources/Icons/SlicerAdvancedGear-Small.png\n  ${MODULE_NAME}Lib/Resources/UI/settings.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories with CMake\nDESCRIPTION: This CMake code adds the 'Cpp' subdirectory to the build. If the `Slicer_USE_PYTHONQT` variable is set, it also adds the 'Python' subdirectory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Applications/SlicerApp/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Cpp)\nif(Slicer_USE_PYTHONQT)\n  add_subdirectory(Python)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files in CMake\nDESCRIPTION: Lists the source files for the module, including C++ source and header files for both the module and its widget.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SlicerWelcome/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_SRCS\n  qSlicer${MODULE_NAME}Module.cxx\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.cxx\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Displaying Slicer User Settings File Path\nDESCRIPTION: This command displays the exact location of the user-specific settings file, which applies to all versions of Slicer installed by the current user. The `more` command on Windows is used to paginate the output if it's too long.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/settings.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n./Slicer --settings-path\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nSlicer.exe --settings-path | more\n```\n\n----------------------------------------\n\nTITLE: Continue execution in GDB (Text)\nDESCRIPTION: This GDB command resumes the execution of the attached process after GDB has been attached.  This is a standard GDB command.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/debugging/linuxcpp.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n(gdb) continue\n```\n\n----------------------------------------\n\nTITLE: Setting Temporary Directory CMake\nDESCRIPTION: This snippet sets the `TEMP` variable to the directory used for temporary test files, which is the 'Testing/Temporary' directory within the binary directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SceneViews/Testing/Cxx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(TEMP \"${CMAKE_BINARY_DIR}/Testing/Temporary\")\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet adds the current source directory to the include directories. This allows the test source files to include headers from the current directory. Dependencies: Requires CMAKE_CURRENT_SOURCE_DIR.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/DisplayableManager/Testing/Cxx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Variables\nDESCRIPTION: Sets CMake variables for test configuration. `KIT` represents the application library name, `CMAKE_TESTDRIVER_BEFORE_TESTMAIN` sets up a debug leak check, and `KIT_TEST_SRCS` lists the C++ source files for the tests. These variables are used in subsequent steps to define the test executable and link dependencies.\nSOURCE: https://github.com/slicer/slicer/blob/main/Applications/SlicerApp/Testing/Cpp/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT ${APPLIB_NAME})\n\nset(CMAKE_TESTDRIVER_BEFORE_TESTMAIN \"DEBUG_LEAKS_ENABLE_EXIT_ERROR();\" )\nset(KIT_TEST_SRCS\n  qSlicerAppMainWindowTest1.cxx\n  qSlicerModuleFactoryManagerTest1.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties CMake\nDESCRIPTION: This snippet applies user-defined properties to the MRMLWidgets library target, setting its FOLDER property if defined. This organizes targets in the IDE.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/CMakeLists.txt#_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\n# Apply user-defined properties to the library target.\nif(Slicer_LIBRARY_PROPERTIES)\n  set_target_properties(${lib_name} PROPERTIES ${Slicer_LIBRARY_PROPERTIES})\nendif()\n\n# --------------------------------------------------------------------------\n# Folder\n# --------------------------------------------------------------------------\nif(NOT DEFINED ${PROJECT_NAME}_FOLDER)\n  set(${PROJECT_NAME}_FOLDER ${PROJECT_NAME})\nendif()\nif(NOT \"${${PROJECT_NAME}_FOLDER}\" STREQUAL \"\")\n  set_target_properties(${lib_name} PROPERTIES FOLDER ${${PROJECT_NAME}_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Add Cxx Subdirectory (CMake)\nDESCRIPTION: This command adds the 'Cxx' subdirectory to the current CMake project. The Cxx subdirectory likely contains C++ source code and CMakeLists.txt files for building C++ components of Slicer.  This is a mandatory subdirectory for Slicer.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Sequences/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Export Directive Definition\nDESCRIPTION: Defines the export directive for the module widgets, which is used to control symbol visibility. This ensures that only the necessary symbols are exported from the library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/Loadable/Widgets/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_EXPORT_DIRECTIVE \"Q_SLICER_MODULE_${MODULE_NAME_UPPER}_WIDGETS_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Setting Module MOC Source Files in CMake\nDESCRIPTION: This defines the header files that require meta-object compiler (MOC) processing.  It includes the module class, module widget, and reader headers, ensuring that Qt's signal and slot mechanisms are correctly handled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_MOC_SRCS\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  qSlicer${MODULE_NAME}Reader.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing Resources - CMake\nDESCRIPTION: This snippet configures and installs a JSON file containing volume display presets. It uses `configure_file` to copy the file to the binary directory and then installs it to the appropriate location under the Slicer installation directory.  `COPYONLY` ensures the file is simply copied without variable substitution.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/Logic/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/../Resources/VolumeDisplayPresets.json\n  ${CMAKE_BINARY_DIR}/${Slicer_QTLOADABLEMODULES_SHARE_DIR}/${MODULE_NAME}/VolumeDisplayPresets.json\n  COPYONLY)\ninstall(\n  FILES ${CMAKE_BINARY_DIR}/${Slicer_QTLOADABLEMODULES_SHARE_DIR}/${MODULE_NAME}/VolumeDisplayPresets.json\n  DESTINATION ${Slicer_INSTALL_QTLOADABLEMODULES_SHARE_DIR}/${MODULE_NAME} COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Include Directories Configuration\nDESCRIPTION: This snippet configures the include directories for the project. It adds the current source and binary directories to the include path, ensuring that header files in these locations can be found during compilation. Dependencies: CMAKE_CURRENT_SOURCE_DIR, CMAKE_CURRENT_BINARY_DIR.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/ITKFactoryRegistration/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# --------------------------------------------------------------------------\n# Include dirs\n# --------------------------------------------------------------------------\nset(include_dirs\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  ${CMAKE_CURRENT_BINARY_DIR}\n  )\ninclude_directories(${include_dirs})\n```\n\n----------------------------------------\n\nTITLE: Export Target\nDESCRIPTION: Exports the library target to a CMake file, which can be included by other projects to use the library. It uses the `${PROJECT_NAME}_EXPORT_FILE` variable to determine the export file name.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkSegmentationCore/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_EXPORT_FILE)\n  set(${PROJECT_NAME}_EXPORT_FILE ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Targets.cmake)\nendif()\nexport(TARGETS ${PROJECT_NAME} APPEND FILE ${${PROJECT_NAME}_EXPORT_FILE})\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (CMake)\nDESCRIPTION: Sets the include directories required for compiling the module. This specifies the locations where the compiler should search for header files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Annotations/Logic/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_INCLUDE_DIRECTORIES\n  )\n```\n\n----------------------------------------\n\nTITLE: Add Python Unit Test - CMake\nDESCRIPTION: Adds a Python unit test for the module if `BUILD_TESTING` is enabled. It uses the `slicer_add_python_unittest` macro to register the test script.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOMPatcher/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n\n  # Register the unittest subclass in the main script as a ctest.\n  # Note that the test will also be available at runtime.\n  slicer_add_python_unittest(SCRIPT ${MODULE_NAME}.py)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Add External Data Test in CMake\nDESCRIPTION: This snippet adds a test named `${CLP}Test` using `ExternalData_add_test`. The test executes the `${CLP}Test` executable and compares the output to a baseline data file. ModuleEntryPoint is specified as part of the command. It sets LABELS property for the test.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/AddScalarVolumes/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(testname ${CLP}Test)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  --compare DATA{${BASELINE}/${CLP}Test.nhdr,AddScalarVolumesTest.raw}\n  ${TEMP}/${CLP}Test.nhdr\n  ModuleEntryPoint\n  DATA{${INPUT}/CTHeadAxial.nhdr,CTHeadAxial.raw.gz,CTHeadAxial.raw.gz} DATA{${INPUT}/CTHeadAxial.nhdr,CTHeadAxial.raw.gz,CTHeadAxial.raw.gz} ${TEMP}/${CLP}Test.nhdr\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Setting resources for the KIT - CMake\nDESCRIPTION: This snippet defines any resource files for the `KIT`. In this case, the list is empty, indicating that no additional resources are needed.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/Widgets/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_RESOURCES\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory for Qt Designer Plugins (Conditional)\nDESCRIPTION: This snippet conditionally adds the `DesignerPlugins` subdirectory to the build process if the `Slicer_BUILD_QT_DESIGNER_PLUGINS` option is enabled. This allows building custom Qt Designer plugins for the Slicer module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Texts/Widgets/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nif(Slicer_BUILD_QT_DESIGNER_PLUGINS)\n  add_subdirectory(DesignerPlugins)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding ExternalData Test\nDESCRIPTION: This snippet creates a test using the `ExternalData_add_test` command. The test, named `${testname}`, executes the `${CLP}Test` executable with specified command-line arguments.  It compares the output file `${TEMP}/${CLP}Test.nhdr` with a baseline file located in `${BASELINE}/${CLP}Test.nhdr`.  It also uses input data specified with the `DATA` keyword. The `set_property` command adds a label to the test.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperCLIModuleTemplate/Testing/Cxx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(testname ${CLP}Test)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET} NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  --compare DATA{${BASELINE}/${CLP}Test.nhdr,${CLP}Test.raw}\n  ${TEMP}/${CLP}Test.nhdr\n  ModuleEntryPoint\n  --sigma 2.5 DATA{${INPUT}/CTHeadAxial.nhdr,CTHeadAxial.raw.gz} ${TEMP}/${CLP}Test.nhdr\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Adding UTF-8 Executable\nDESCRIPTION: This snippet adds an executable target named '${KIT}CxxTests' using the ctk_add_executable_utf8 macro. The source files for the executable are specified by the ${Tests} variable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/Logic/Testing/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nctk_add_executable_utf8(${KIT}CxxTests ${Tests})\n```\n\n----------------------------------------\n\nTITLE: Project Definition\nDESCRIPTION: Defines the CMake project name for the module widgets. The MODULE_NAME variable is expected to be defined elsewhere.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/LoadableCustomMarkups/Widgets/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(qSlicer${MODULE_NAME}ModuleWidgets)\n```\n\n----------------------------------------\n\nTITLE: Setting All Source Files - CMake\nDESCRIPTION: Sets all source files for the module, including the instantiator and the displayable manager sources.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/MRMLDM/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  ${displayable_manager_instantiator_SRCS}\n  ${displayable_manager_SRCS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Slicer Extensions Manually (Linux/macOS)\nDESCRIPTION: This snippet demonstrates how to manually build, test, and package Slicer extensions on Linux and macOS systems using CMake. It involves configuring CMake with paths to the Slicer build tree and extension description files, then building the extensions using the `make` command. This is useful for testing extension builds and creating extension packages for custom Slicer applications.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/extensions.md#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ncd ~/ExtensionsIndex-Release\n\ncmake -DSlicer_DIR:PATH=~/Slicer-SuperBuild-Release/Slicer-build \\\n -DSlicer_EXTENSION_DESCRIPTION_DIR:PATH=~/ExtensionsIndex \\\n -DCMAKE_BUILD_TYPE:STRING=Release \\\n ~/Slicer/Extensions/CMake\n\nmake\n```\n\n----------------------------------------\n\nTITLE: Adding Python Subdirectory with CMake\nDESCRIPTION: This CMake command includes the specified subdirectory in the build process.  It effectively executes the CMakeLists.txt file located within the 'Python' directory, incorporating its defined targets and variables into the parent project's configuration. This is a fundamental step in integrating modular components within a CMake-based project.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/Scripted/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Python)\n```\n\n----------------------------------------\n\nTITLE: Reading Application Properties CMake\nDESCRIPTION: This snippet invokes the `SlicerReadApplicationProperties` macro which is responsible for reading and setting application-specific properties used throughout the build process. These properties may include application name, version, descriptions, and icon paths.\nSOURCE: https://github.com/slicer/slicer/blob/main/Applications/SlicerApp/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nSlicerReadApplicationProperties()\n```\n\n----------------------------------------\n\nTITLE: Set Extension Meta-Information\nDESCRIPTION: Sets various meta-information variables for the extension, such as homepage, contributors, description, icon URL, screenshot URLs, dependencies, and build subdirectory. These variables are used to describe the extension in the Slicer application.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Extensions/SuperBuild/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(EXTENSION_HOMEPAGE \"https://www.slicer.org/wiki/Documentation/Nightly/Extensions/TemplateKey\")\nset(EXTENSION_CONTRIBUTORS \"John Doe (AnyWare Corp.)\")\nset(EXTENSION_DESCRIPTION \"This is an example of an extension using SuperBuild to build a dependent project named Foo\")\nset(EXTENSION_ICONURL \"https://www.example.com/Slicer/Extensions/TemplateKey.png\")\nset(EXTENSION_SCREENSHOTURLS \"https://www.example.com/Slicer/Extensions/TemplateKey/Screenshots/1.png\")\nset(EXTENSION_DEPENDS \"NA\") # Specified as a list or \"NA\" if no dependencies\nset(EXTENSION_BUILD_SUBDIRECTORY inner-build)\n\nset(SUPERBUILD_TOPLEVEL_PROJECT inner)\n```\n\n----------------------------------------\n\nTITLE: Build CLI Target - CMake\nDESCRIPTION: Uses the SEMMacroBuildCLI macro to create a CLI (Command Line Interface) target for the module. It defines the module name, logo header, and target libraries, linking against the ITK libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MaskScalarVolume/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/ITKLogo.h\n  TARGET_LIBRARIES ${ITK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Resources in CMake\nDESCRIPTION: Defines the resource files for the module, which can include images, icons, and other data. These resources are embedded into the module's executable or library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_RESOURCES\n  Resources/qSlicer${MODULE_NAME}Module.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining MOC Sources (CMake)\nDESCRIPTION: This snippet defines the list of header files that need to be processed by the Meta-Object Compiler (moc).  Moc generates code required for Qt's signals and slots mechanism.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTGUI/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Headers that should run through moc\nset(KIT_MOC_SRCS\n  qSlicerAbstractModule.h\n  qSlicerAbstractModulePanel.h\n  qSlicerAbstractModuleWidget.h\n  qSlicerActionsDialog.h\n  qSlicerApplication.h\n  qSlicerCommandOptions.h\n  qSlicerDarkStyle.h\n  qSlicerDataDialog.h\n  qSlicerDataDialog_p.h\n  qSlicerDirectoryListView.h\n  qSlicerExportNodeDialog.h\n  qSlicerExportNodeDialog_p.h\n  qSlicerFileDialog.h\n  qSlicerFileWriterOptionsWidget.h\n  qSlicerIOManager.h\n  qSlicerIOOptionsWidget.h\n  qSlicerLayoutManager.h\n  qSlicerLightStyle.h\n  qSlicerLoadableModule.h\n\n  qSlicerModelsDialog.h\n  qSlicerModelsDialog_p.h\n\n  qSlicerModuleFactoryFilterModel.h\n  qSlicerModuleFinderDialog.h\n  qSlicerModulesListView.h\n  qSlicerModulesMenu.h\n  qSlicerModulePanel.h\n  qSlicerModuleSelectorToolBar.h\n  qSlicerMouseModeToolBar.h\n  qSlicerMouseModeToolBar_p.h\n  qSlicerNodeWriter.h\n  qSlicerNodeWriterOptionsWidget.h\n  qSlicerNodeWriterOptionsWidget_p.h\n  qSlicerSaveDataDialog.h\n  qSlicerSaveDataDialog_p.h\n  qSlicerSettingsCachePanel.h\n  qSlicerSettingsGeneralPanel.h\n  qSlicerSettingsModulesPanel.h\n  qSlicerSettingsStylesPanel.h\n  qSlicerSettingsViewsPanel.h\n  qSlicerSettingsDeveloperPanel.h\n  qSlicerSettingsUserInformationPanel.h\n  qSlicerStyle.h\n  qSlicerViewersToolBar.h\n  qSlicerViewersToolBar_p.h\n  qSlicerWidget.h\n\n  qSlicerSingletonViewFactory.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding DesignerPlugins Subdirectory CMake\nDESCRIPTION: This snippet conditionally adds the `DesignerPlugins` subdirectory to the build process if the `MRML_BUILD_QT_DESIGNER_PLUGINS` option is enabled. This allows for building Qt Designer plugins for the MRMLWidgets library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/CMakeLists.txt#_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\nif(MRML_BUILD_QT_DESIGNER_PLUGINS)\n  add_subdirectory(DesignerPlugins)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Modifying Test List\nDESCRIPTION: Modifies the `Tests` list by removing items from `KIT_TEST_NAMES_CXX` and appending `KIT_TEST_SRCS`. This step organizes the test source files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Core/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nlist(REMOVE_ITEM Tests ${KIT_TEST_NAMES_CXX})\nlist(APPEND Tests ${KIT_TEST_SRCS})\n```\n\n----------------------------------------\n\nTITLE: Building Module Logic using SlicerMacroBuildModuleLogic in CMake\nDESCRIPTION: This snippet uses the SlicerMacroBuildModuleLogic macro to build the module logic component.  It passes the module name, export directive, include directories, source files, and target libraries as arguments to the macro. This macro handles the details of creating the build target and linking dependencies.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Reformat/Logic/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleLogic(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: QT Warning Logging Example\nDESCRIPTION: Example of logging a warning using QT. Shows the use of the `qWarning` function.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/style_guide.md#_snippet_14\n\nLANGUAGE: C++\nCODE:\n```\nqWarning() << \"qSlicerIOManager::openScreenshotDialog: Unable to get Annotations module (annotations), using the CTK screen shot dialog.\";\n```\n\n----------------------------------------\n\nTITLE: Setting Extension Meta-Information\nDESCRIPTION: This section sets various meta-information properties related to the extension, such as the homepage, contributors, description, icon URL, screenshot URLs, dependencies, and the build subdirectory. These properties provide essential information about the extension for display and dependency management within the Slicer environment.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\n# Extension meta-information\nset(EXTENSION_HOMEPAGE \"https://www.slicer.org/wiki/Documentation/Nightly/Extensions/SuperBuildExtensionTemplate\")\nset(EXTENSION_CONTRIBUTORS \"John Doe (AnyWare Corp.)\")\nset(EXTENSION_DESCRIPTION \"This is an example of an extension using SuperBuild to build a dependent project named Foo\")\nset(EXTENSION_ICONURL \"https://www.example.com/Slicer/Extensions/SuperBuildExtensionTemplate.png\")\nset(EXTENSION_SCREENSHOTURLS \"https://www.example.com/Slicer/Extensions/SuperBuildExtensionTemplate/Screenshots/1.png\")\nset(EXTENSION_DEPENDS \"NA\") # Specified as a list or \"NA\" if no dependencies\nset(EXTENSION_BUILD_SUBDIRECTORY inner-build)\n\nset(SUPERBUILD_TOPLEVEL_PROJECT inner)\n```\n\n----------------------------------------\n\nTITLE: Setting Variables for Data Paths in CMake\nDESCRIPTION: These commands define CMake variables for specifying the paths to the baseline and input data directories. These paths are relative to the current source directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ThresholdScalarVolume/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(BASELINE ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Baseline)\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input)\n```\n\n----------------------------------------\n\nTITLE: Adding Simple Test in CMake\nDESCRIPTION: The `simple_test` macro adds a simple test named `vtkDiffusionTensorMathematicsTest1`. This likely configures the test to be run as part of the project's testing framework.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkTeem/Testing/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nsimple_test( vtkDiffusionTensorMathematicsTest1 )\n```\n\n----------------------------------------\n\nTITLE: Install Headers with CMake\nDESCRIPTION: This CMake snippet finds all header files (`.h`) in the current source directory and installs them into the `${Slicer_INSTALL_SHARE_DIR}/Resources` directory. It first configures the files to copy them to the binary directory then installs the copied file.  The files are designated as part of the 'Development' component.  This section is skipped if `Slicer_INSTALL_NO_DEVELOPMENT` is set.\nSOURCE: https://github.com/slicer/slicer/blob/main/Resources/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT Slicer_INSTALL_NO_DEVELOPMENT)\n  file(GLOB HEADERFILES RELATIVE \"${CMAKE_CURRENT_SOURCE_DIR}\" \"*.h\")\n  foreach(headerfile ${HEADERFILES})\n    configure_file(\n      ${CMAKE_CURRENT_SOURCE_DIR}/${headerfile}\n      \"${CMAKE_BINARY_DIR}/${Slicer_INSTALL_SHARE_DIR}/Resources/${headerfile}\"\n      COPYONLY\n      )\n  endforeach()\n\n  install(\n    FILES ${HEADERFILES}\n    DESTINATION ${Slicer_INSTALL_SHARE_DIR}/Resources COMPONENT Development\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Test Driver (CMake)\nDESCRIPTION: This snippet uses a custom CMake macro, `slicerMacroConfigureModuleCxxTestDriver`, to configure a C++ test driver.  It specifies the name, source files, target libraries, and options for debugging memory leaks and error output. This creates the executable that runs all defined tests. It configures the test executable, linking it against relevant Slicer module libraries and setting up debugging options.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/Testing/Cxx/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroConfigureModuleCxxTestDriver(\n  NAME ${KIT}\n  SOURCES ${KIT_TEST_SRCS}\n  TARGET_LIBRARIES vtkSlicerVolumesModuleLogic vtkSlicerMarkupsModuleLogic\n  WITH_VTK_DEBUG_LEAKS_CHECK\n  WITH_VTK_ERROR_OUTPUT_CHECK\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding testing subdirectory\nDESCRIPTION: This snippet adds a subdirectory named Testing for additional build-time tests. This allows for more complex and comprehensive testing procedures beyond the basic unit tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/ScriptedLoadableExtensionTemplate/ScriptedLoadableModuleTemplate/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Testing)\n```\n\n----------------------------------------\n\nTITLE: Project Declaration\nDESCRIPTION: This snippet declares the project name as vtkSegmentationCore. It is the starting point for defining the build process of the library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkSegmentationCore/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(vtkSegmentationCore)\n```\n\n----------------------------------------\n\nTITLE: Adding Cxx Subdirectory\nDESCRIPTION: This CMake command adds a subdirectory named 'Cxx' to the project build process. The 'Cxx' directory should contain a CMakeLists.txt file which CMake will process. This allows for modular organization of the project build system.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/DisplayableManager/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Setting CPack Install Projects\nDESCRIPTION: This section configures CPack, the CMake package generator, to install the extension and any dependent projects. It prepares a list of CMake projects to install, including the extension itself and potentially other projects (commented out example provided). The list is then passed to CPack to be installed in the correct locations.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nset(EXTENSION_CPACK_INSTALL_CMAKE_PROJECTS)\n#list(APPEND EXTENSION_CPACK_INSTALL_CMAKE_PROJECTS \"${Foo_DIR};Foo;RuntimeLibraries;/\")\nset(${EXTENSION_NAME}_CPACK_INSTALL_CMAKE_PROJECTS \"${EXTENSION_CPACK_INSTALL_CMAKE_PROJECTS}\" CACHE STRING \"List of external projects to install\" FORCE)\n\n#-----------------------------------------------------------------------------\nlist(APPEND CPACK_INSTALL_CMAKE_PROJECTS \"${CMAKE_BINARY_DIR};${EXTENSION_NAME};ALL;/\")\nlist(APPEND CPACK_INSTALL_CMAKE_PROJECTS \"${${EXTENSION_NAME}_CPACK_INSTALL_CMAKE_PROJECTS}\")\ninclude(${Slicer_EXTENSION_GENERATE_CONFIG})\ninclude(${Slicer_EXTENSION_CPACK})\n```\n\n----------------------------------------\n\nTITLE: Setting Variables for Data Directories\nDESCRIPTION: This code snippet defines CMake variables for commonly used directories such as the baseline data directory, input data directory, and temporary directory used during testing. These variables simplify referencing these locations later in the CMake script. The module name is also defined.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperCLIModuleTemplate/Testing/Cxx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(BASELINE ${CMAKE_CURRENT_SOURCE_DIR}/../../Data/Baseline)\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../../Data/Input)\nset(TEMP \"${CMAKE_BINARY_DIR}/Testing/Temporary\")\n\nset(CLP ${MODULE_NAME})\n\nif(NOT DEFINED SEM_DATA_MANAGEMENT_TARGET)\n  set(SEM_DATA_MANAGEMENT_TARGET ${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting up Slicer development environment - console\nDESCRIPTION: This command executes the `SetupForDevelopment.sh` script, which is located in the `Utilities` directory. This script configures the development environment, potentially setting environment variables or performing other setup tasks required for building and running Slicer.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/macos.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ncd Slicer\n./Utilities/SetupForDevelopment.sh\n```\n\n----------------------------------------\n\nTITLE: Set KIT Variable\nDESCRIPTION: Sets the KIT variable to the project name. This variable is used throughout the CMake file to refer to the module's widget component.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/LoadableCustomMarkups/Widgets/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Add External Data Target\nDESCRIPTION: This conditional block adds an external data target using `ExternalData_add_target` if `SEM_DATA_MANAGEMENT_TARGET` is equal to `${CLP}Data`. This allows the download of required test data.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GrayscaleModelMaker/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting UI Source Files\nDESCRIPTION: Lists the Qt Designer UI files (.ui) used to define the module's user interface. These files are converted to C++ code during the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/LoadableExtensionTemplate/LoadableModuleTemplate/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_UI_SRCS\n  Resources/UI/qSlicer${MODULE_NAME}ModuleWidget.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Slicer Macro Build Module Widgets CMake\nDESCRIPTION: Uses the `SlicerMacroBuildModuleWidgets` macro to build the module widgets. This macro takes the configured variables as input and performs the necessary steps to build the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperLoadableModuleTemplate/Widgets/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nSlicerMacroBuildModuleWidgets(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  UI_SRCS ${${KIT}_UI_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  RESOURCES ${${KIT}_RESOURCES}\n  WRAP_PYTHONQT\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting UI Source Files in CMake\nDESCRIPTION: Defines the Qt Designer UI files (.ui) that define the graphical user interface of the module.  These are compiled into C++ code during the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Data/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_UI_SRCS\n  Resources/UI/qSlicer${MODULE_NAME}ModuleWidget.ui\n  Resources/UI/qSlicerSceneIOOptionsWidget.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting KIT_TEST_SRCS Variable for Test Sources\nDESCRIPTION: This snippet defines the list of source files used for testing the qSlicer module and assigns it to the `KIT_TEST_SRCS` variable. Here, the source file is `vtkSlicerDataLogicAutoRemoveTest.cxx`. This list of sources will be used by the test driver to compile and execute the tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Data/Testing/Cxx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT_TEST_SRCS\n  vtkSlicerDataLogicAutoRemoveTest.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory\nDESCRIPTION: This conditionally adds the Testing subdirectory to the build process if the BUILD_TESTING variable is enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperCLIModuleTemplate/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Header File\nDESCRIPTION: This snippet configures a header file `vtkSlicerBaseLogicConfigure.h` from its template `vtkSlicerBaseLogicConfigure.h.in`.  The configured file is created in the binary directory. `configure_file` replaces variables in the input file with their current values.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/Logic/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(configure_header_file vtkSlicerBaseLogicConfigure.h)\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/${configure_header_file}.in\n  ${CMAKE_CURRENT_BINARY_DIR}/${configure_header_file}\n  )\n```\n\n----------------------------------------\n\nTITLE: ITK Factory Registration conditional disable\nDESCRIPTION: Conditionally disables ITK factory registration based on the ITK version. For ITK versions greater than or equal to 5.3, IMAGEIO, MESHIO, and TRANSFORMIO factory register managers are disabled. For older versions, ITK_NO_IO_FACTORY_REGISTER_MANAGER is set.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/SubtractScalarVolumes/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running Python script in Slicer (Console - Windows)\nDESCRIPTION: Executes a Python script within the Slicer environment without a graphical user interface on Windows. Uses `--python-script` flag to specify the script. The `--no-splash` and `--no-main-window` options suppress the GUI. Requires Slicer installation and a valid script path.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nSlicer.exe --python-script \"/full/path/to/myscript.py\" --no-splash --no-main-window\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory in CMake (Conditional)\nDESCRIPTION: This commented-out snippet shows how to conditionally add a subdirectory for testing if the `BUILD_TESTING` variable is enabled. It would add the `Testing` subdirectory to the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Texts/Logic/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# if(BUILD_TESTING)\n  # add_subdirectory(Testing)\n# endif()\n```\n\n----------------------------------------\n\nTITLE: Project Definition and Variable Setting - CMake\nDESCRIPTION: This snippet defines the project name and sets several variables used throughout the CMake configuration. These variables include the export directive, include directories, source files, and target libraries, which are later used by the `SlicerMacroBuildModuleLogic` macro.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/Logic/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleLogic)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_LOGIC_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  )\n\nset(${KIT}_SRCS\n  vtkSlicer${MODULE_NAME}Logic.cxx\n  vtkSlicer${MODULE_NAME}Logic.h\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  ${ITK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory\nDESCRIPTION: This snippet checks if testing is enabled (`BUILD_TESTING`). If it is, it adds the `Testing` subdirectory to the build process. This allows the module's tests to be built and executed as part of the overall project.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/CLI/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configure Global DICOMweb Authentication in Python\nDESCRIPTION: Sets a global username and password combination for DICOMweb authentication in the Slicer application. This allows for persistent authentication across sessions. The example uses qt.QSettings to store the credentials and DICOMUtils.getGlobalDICOMAuth to retrieve them.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/dicom.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nqt.QSettings().setValue(DICOMUtils.GLOBAL_DICOMWEB_USER_KEY, '<user>')\nqt.QSettings().setValue(DICOMUtils.GLOBAL_DICOMWEB_PASSWORD_KEY, '<pwd>')\nDICOMUtils.importFromDICOMWeb(\n  dicomWebEndpoint=\"https://remote-url/\",\n  studyInstanceUID=\"1.3.6.1.4.1.14519.5.2.1.8421.4009.985792766370191766692237040819\",\n  auth=DICOMUtils.getGlobalDICOMAuth()\n)\n```\n\n----------------------------------------\n\nTITLE: Add Subdirectories for Modules\nDESCRIPTION: This foreach loop iterates through the list of Qt modules defined earlier. For each module, it calls the slicer_is_loadable_builtin_module_enabled function to check if the module is enabled. If the module is enabled, the add_subdirectory command adds the module's directory to the build process, allowing the module's source code to be compiled and linked.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(module ${qtmodules})\n  slicer_is_loadable_builtin_module_enabled(${module} _build_module)\n  if(_build_module)\n    add_subdirectory(${module})\n  endif()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Defining Test Source Files\nDESCRIPTION: This snippet defines a list of C++ source files that comprise the tests for the module.  The `${MODULE_NAME}` variable is used to create specific test file names. The resulting `KIT_TEST_SRCS` variable is used by the `slicerMacroConfigureModuleCxxTestDriver` macro.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/Testing/Cxx/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT_TEST_SRCS\n  qSlicer${MODULE_NAME}IOOptionsWidgetTest1.cxx\n  qSlicer${MODULE_NAME}ModuleWidgetTest1.cxx\n  vtkSlicer${MODULE_NAME}LogicTest1.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory\nDESCRIPTION: This snippet adds a subdirectory named 'Testing' if the `BUILD_TESTING` variable is enabled.  This allows the inclusion of tests for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ModelMaker/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Slicer extension scripts\nDESCRIPTION: Includes scripts for generating the extension configuration and packaging the extension. These scripts are provided by Slicer and automate the process of creating a distributable package for the extension. They depend on the `Slicer_EXTENSION_GENERATE_CONFIG` and `Slicer_EXTENSION_CPACK` variables being set by the Slicer package.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/CLIExtensionTemplate/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${Slicer_EXTENSION_GENERATE_CONFIG})\ninclude(${Slicer_EXTENSION_CPACK})\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory with CMake\nDESCRIPTION: This command adds the specified subdirectory to the build. This means that the CMakeLists.txt file located in the 'Cxx' directory will be processed as part of the overall build configuration.  The Cxx directory contains C++ source code.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Units/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Build Module\nDESCRIPTION: Uses a Slicer macro to build the module, passing in the previously defined variables such as name, export directive, include directories, source files, and target libraries. This macro encapsulates the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/LoadableCustomMarkups/MRML/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleMRML(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Define External Data Test - CMake\nDESCRIPTION: This snippet defines an external data test using ExternalData_add_test. It specifies the test name, command, module entry point, and input data. It also sets the test properties.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ExecutionModelTour/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(testname ${CLP}Test)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  ModuleEntryPoint\n    --integer 30\n    --double 30\n    -f 1.3,2,-14\n    --string_vector foo,bar,foobar\n    --enumeration Bill\n    --boolean1\n    --transform1 ${TEMP}/ExecutionModelTourTest.mrml#vtkMRMLLinearTransformNode1\n    --transform2 ${TEMP}/ExecutionModelTourTest.mrml#vtkMRMLLinearTransformNode2\n    DATA{${INPUT}/MRHeadResampled.nhdr,MRHeadResampled.raw.gz}\n    DATA{${INPUT}/CTHeadAxial.nhdr,CTHeadAxial.raw.gz}\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Building CLI using SEMMacroBuildCLI\nDESCRIPTION: Uses the SEMMacroBuildCLI macro to build the command-line interface (CLI) for the module. It specifies the module name, logo header, and target libraries (ITK_LIBRARIES). This macro simplifies the process of creating a CLI application within the Slicer environment.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/FiducialRegistration/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/NAMICLogo.h\n  TARGET_LIBRARIES ${ITK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Testing Subdirectory\nDESCRIPTION: This snippet adds the Testing subdirectory if BUILD_TESTING is enabled. This includes the testing infrastructure for the project, allowing the building and running of tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCLI/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Simple Tests (CMake)\nDESCRIPTION: This snippet adds several simple tests to the project. Each simple_test macro call likely defines a test case based on the provided name, integrating it into the overall testing framework.  These are assumed to be C++ tests, each corresponding to a source file listed earlier.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkSegmentationCore/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nsimple_test( vtkSegmentationTest1 )\nsimple_test( vtkSegmentationTest2 )\nsimple_test( vtkSegmentationHistoryTest1 )\nsimple_test( vtkSegmentationConverterTest1 )\nsimple_test( vtkClosedSurfaceToFractionalLabelMapConversionTest1 )\n```\n\n----------------------------------------\n\nTITLE: Source Files Definition\nDESCRIPTION: Defines the list of C++ source files that will be compiled into the module library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  qSlicerSubjectHierarchyMarkupsPlugin.cxx\n  qSlicerSubjectHierarchyMarkupsPlugin.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories in CMake\nDESCRIPTION: This snippet adds the Logic and Widgets subdirectories to the build. These subdirectories likely contain the core logic and user interface components of the module, respectively.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/Loadable/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Logic)\nadd_subdirectory(Widgets)\n```\n\n----------------------------------------\n\nTITLE: Folder Properties\nDESCRIPTION: Sets the folder property for the library. If `${PROJECT_NAME}_FOLDER` is defined and not empty, it sets the FOLDER property of the library to that value. This is used for organizing the project in IDEs.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/IDImageIO/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_FOLDER)\n  set(${PROJECT_NAME}_FOLDER ${PROJECT_NAME})\nendif()\nif(NOT \"${${PROJECT_NAME}_FOLDER}\" STREQUAL \"\")\n  set_target_properties(${lib_name} PROPERTIES FOLDER ${${PROJECT_NAME}_FOLDER})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Test Sources\nDESCRIPTION: This snippet defines the TEST_SOURCES variable, which is a list of C++ source files to be included in the tests. It also conditionally appends additional source files based on the Slicer_USE_QtTesting option.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(TEST_SOURCES\n  qMRMLCheckableNodeComboBoxTest.cxx\n  qMRMLCheckableNodeComboBoxTest1.cxx\n  qMRMLClipNodeWidgetTest1.cxx\n  qMRMLCollapsibleButtonTest.cxx\n  qMRMLColorModelTest.cxx\n  qMRMLColorModelTest1.cxx\n  qMRMLColorTableComboBoxTest1.cxx\n  qMRMLDisplayNodeViewComboBoxTest.cxx\n  qMRMLDisplayNodeWidgetTest1.cxx\n  qMRMLLayoutManagerTest1.cxx\n  qMRMLLayoutManagerTest2.cxx\n  qMRMLLayoutManagerTest3.cxx\n  qMRMLLayoutManagerTest4.cxx\n  qMRMLLayoutManagerVisibilityTest.cxx\n  qMRMLLayoutManagerWithCustomFactoryTest.cxx\n  qMRMLLinearTransformSliderTest1.cxx\n  qMRMLListWidgetTest1.cxx\n  qMRMLMatrixWidgetTest1.cxx\n  qMRMLModelInfoWidgetTest1.cxx\n  qMRMLModelTest1.cxx\n  qMRMLModelTreeViewTest1.cxx\n  qMRMLLabelComboBoxTest.cxx\n  qMRMLNavigationViewTest1.cxx\n  qMRMLNodeAttributeTableViewTest.cxx\n  qMRMLNodeAttributeTableWidgetTest.cxx\n  qMRMLNodeComboBoxTest1.cxx\n  qMRMLNodeComboBoxTest2.cxx\n  qMRMLNodeComboBoxTest3.cxx\n  qMRMLNodeComboBoxTest4.cxx\n  qMRMLNodeComboBoxTest5.cxx\n  qMRMLNodeComboBoxTest6.cxx\n  qMRMLNodeComboBoxTest7.cxx\n  qMRMLNodeComboBoxTest8.cxx\n  qMRMLNodeComboBoxTest9.cxx\n  qMRMLNodeComboBoxLazyUpdateTest1.cxx\n  qMRMLNodeFactoryTest1.cxx\n  qMRMLPlotViewTest1.cxx\n  qMRMLScalarInvariantComboBoxTest1.cxx\n  qMRMLSceneCategoryModelTest1.cxx\n  qMRMLSceneColorTableModelTest1.cxx\n  qMRMLSceneFactoryWidgetTest1.cxx\n  qMRMLSceneModelTest.cxx\n  qMRMLSceneModelTest1.cxx\n  qMRMLSceneTransformModelTest1.cxx\n  qMRMLSceneTransformModelTest2.cxx\n  qMRMLSceneDisplayableModelTest1.cxx\n  qMRMLSceneDisplayableModelTest2.cxx\n  qMRMLSegmentSelectorWidgetTest1.cxx\n  qMRMLSliceControllerWidgetTest.cxx\n  qMRMLSliceWidgetTest1.cxx\n  qMRMLSliceWidgetTest2.cxx\n  qMRMLTableViewTest1.cxx\n  qMRMLTransformSlidersTest1.cxx\n  qMRMLThreeDViewTest1.cxx\n  qMRMLThreeDWidgetTest1.cxx\n  qMRMLTreeViewTest1.cxx\n  qMRMLUtf8Test1.cxx\n  qMRMLUtilsTest1.cxx\n  qMRMLVolumeInfoWidgetTest1.cxx\n  qMRMLVolumeThresholdWidgetTest1.cxx\n  qMRMLVolumeThresholdWidgetTest2.cxx\n  qMRMLWidgetsExportTest1.cxx\n  qMRMLWindowLevelWidgetTest1.cxx\n  EXTRA_INCLUDE qMRMLWidgetCxxTests.h\n  )\n\nif(Slicer_USE_QtTesting)\n  list(APPEND TEST_SOURCES\n    qMRMLCheckableNodeComboBoxEventTranslatorPlayerTest1.cxx\n    qMRMLClipNodeWidgetEventTranslatorPlayerTest1.cxx\n    qMRMLCollapsibleButtonEventTranslatorPlayerTest1.cxx\n    qMRMLColorTableComboBoxEventTranslatorPlayerTest1.cxx\n    qMRMLDisplayNodeWidgetEventTranslatorPlayerTest1.cxx\n    qMRMLLabelComboBoxEventTranslatorPlayerTest1.cxx\n    qMRMLLinearTransformSliderEventTranslatorPlayerTest1.cxx\n    qMRMLListWidgetEventTranslatorPlayerTest1.cxx\n    qMRMLMatrixWidgetEventTranslatorPlayerTest1.cxx\n    qMRMLNavigationViewEventTranslatorPlayerTest1.cxx\n    qMRMLNodeComboBoxEventTranslatorPlayerTest1.cxx\n    qMRMLRangeWidgetEventTranslatorPlayerTest1.cxx\n    qMRMLROIWidgetEventTranslatorPlayerTest1.cxx\n    qMRMLScalarInvariantComboBoxEventTranslatorPlayerTest1.cxx\n    qMRMLSliceControllerWidgetEventTranslatorPlayerTest1.cxx\n    qMRMLSliceWidgetEventTranslatorPlayerTest1.cxx\n    qMRMLThreeDViewControllerWidgetEventTranslatorPlayerTest1.cxx\n    qMRMLThreeDWidgetEventTranslatorPlayerTest1.cxx\n    qMRMLTransformSlidersEventTranslatorPlayerTest1.cxx\n    qMRMLTreeViewEventTranslatorPlayerTest1.cxx\n    qMRMLVolumeInfoWidgetEventTranslatorPlayerTest1.cxx\n    qMRMLVolumeThresholdWidgetEventTranslatorPlayerTest1.cxx\n    qMRMLWindowLevelWidgetEventTranslatorPlayerTest1.cxx\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting INCLUDE_DIRS Variable CMake\nDESCRIPTION: This snippet sets the `${PROJECT_NAME}_INCLUDE_DIRS` variable with the project's include directories. This variable is cached internally and forced to be overwritten, ensuring that it always reflects the correct include directories.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Logic/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nset(${PROJECT_NAME}_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR}\n  CACHE INTERNAL \"${PROJECT_NAME} include dirs\" FORCE)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory using add_subdirectory command\nDESCRIPTION: The `add_subdirectory` command is used to add the `SubjectHierarchyPlugins` directory to the project. This ensures that the contents of the subdirectory are included in the build process. The subdirectory contains Python packages necessary for the source tree.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/Widgets/Python/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(SubjectHierarchyPlugins)\n```\n\n----------------------------------------\n\nTITLE: Setting Resource Files CMake\nDESCRIPTION: This snippet defines a CMake variable `MRMLWidgets_QRC_SRCS` containing a list of resource files (``.qrc``) used in the MRMLWidgets library. These files bundle images and other assets needed by the UI.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nset(MRMLWidgets_QRC_SRCS\n  Resources/qMRMLWidgets.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding ITK package with components\nDESCRIPTION: Finds the ITK (Insight Toolkit) package with specified components. The required components are defined and then passed to the `find_package` command. Includes ITK use file to access ITK variables.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/TestGridTransformRegistration/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKCommon\n  ITKIOImageBase\n  ITKImageGrid\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Exporting MRMLWidgets Target CMake\nDESCRIPTION: This snippet exports the MRMLWidgets library target to a CMake file for use by other projects. The export file path is defined by the `${PROJECT_NAME}_EXPORT_FILE` variable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/CMakeLists.txt#_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_EXPORT_FILE)\n  set(${PROJECT_NAME}_EXPORT_FILE ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Targets.cmake)\nendif()\nexport(TARGETS ${targets_to_export} APPEND FILE ${${PROJECT_NAME}_EXPORT_FILE})\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking Executable for Tests in CMake\nDESCRIPTION: This snippet creates an executable named `${CLP}Test` from the source file `${CLP}Test.cxx` and links it against required libraries, setting properties for labels and folder organization. Dependencies include `${CLP}Lib` and `${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES}`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/OrientScalarVolume/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nctk_add_executable_utf8(${CLP}Test ${CLP}Test.cxx)\ntarget_link_libraries(${CLP}Test ${CLP}Lib ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES})\nset_target_properties(${CLP}Test PROPERTIES LABELS ${CLP})\nset_target_properties(${CLP}Test PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Unsafe Legacy Method without Smart Pointers in C++\nDESCRIPTION: This C++ code snippet presents an unsafe, legacy way of handling VTK objects without smart pointers. This should be avoided due to potential memory leaks if the `Delete()` method is forgotten or skipped.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/advanced_topics.md#_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nvtkCollection* nodes = mrmlScene->GetNodesByClass(\"vtkMRMLLinearTransformNode\");\n// ...\nnodes->Delete();\n```\n\n----------------------------------------\n\nTITLE: Setting Export Directive\nDESCRIPTION: Sets the export directive for the library. This directive is used to control symbol visibility when building the library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT_export_directive \"Q_SLICER_BASE_QTCORE_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Color Table CSV Format Example\nDESCRIPTION: This is an example of the CSV file format for storing a color table node.  It defines the structure of the CSV file, including columns for label value, name, color components (R, G, B, A), and standard terminology columns for specifying content (category, type, region, and their modifiers). Columns are separated by commas, and values containing commas should be enclosed in quotation marks.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/modules/colors.md#_snippet_0\n\nLANGUAGE: CSV\nCODE:\n```\nLabelValue,Name,Color_R,Color_G,Color_B,Color_A,Category_CodingScheme,Category_CodeValue,Category_CodeMeaning,Type_CodingScheme,Type_CodeValue,Type_CodeMeaning,TypeModifier_CodingScheme,TypeModifier_CodeValue,TypeModifier_CodeMeaning,Region_CodingScheme,Region_CodeValue,Region_CodeMeaning,RegionModifier_CodingScheme,RegionModifier_CodeValue,RegionModifier_CodeMeaning\n1,left_kidney,185,102,83,255,SCT,123037004,Anatomical Structure,SCT,64033007,Kidney,SCT,7771000,Left,,,,,,\n5,right_kidney,185,102,83,255,SCT,123037004,Anatomical Structure,SCT,64033007,Kidney,SCT,24028007,Right,,,,,,\n6,right_kidney_mass,144,238,144,255,SCT,49755003,Morphologically Altered Structure,SCT,4147007,Mass,,,,SCT,64033007,Kidney,SCT,24028007,Right\n10,catheter_renal_artery,127,127,127,255,SCT,260787004,Physical object,SCT,19923001,Catheter,,,,SCT,2841007,Renal artery,,, \n```\n\n----------------------------------------\n\nTITLE: Setting Project Name in CMake\nDESCRIPTION: Sets the project name using the `set` command. This variable is used to reference the project name throughout the CMake configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name - CMake\nDESCRIPTION: Sets the module name for the Slicer module. This is a foundational step in configuring the build process, ensuring that the module is properly identified and organized within the project. The module name is used in subsequent build steps.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ExecutionModelTour/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_NAME ExecutionModelTour)\n```\n\n----------------------------------------\n\nTITLE: Configure CTestConfig.cmake\nDESCRIPTION: Configures the CTestConfig.cmake file using CTestConfig.cmake.in. This generates a CTest configuration file in the build directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/CMake/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(\n  CTestConfig.cmake.in\n  ${CMAKE_BINARY_DIR}/CTestConfig.cmake\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Project Name and Test Driver\nDESCRIPTION: This snippet sets the project name using the `PROJECT_NAME` variable and defines a CMake test driver. The `CMAKE_TESTDRIVER_BEFORE_TESTMAIN` variable configures a command to execute before each test main function. This can be used for debugging and leak detection.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/DisplayableManager/Testing/Cxx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT ${PROJECT_NAME})\n\nset(CMAKE_TESTDRIVER_BEFORE_TESTMAIN \"DEBUG_LEAKS_ENABLE_EXIT_ERROR();\" )\n```\n\n----------------------------------------\n\nTITLE: Conditional PythonQt Wrapping CMake\nDESCRIPTION: This snippet conditionally wraps the MRMLWidgets library for use with PythonQt if the `MRMLWidgets_WRAP_PYTHON` option is enabled. It uses the `ctkMacroBuildLibWrapper` macro to generate the PythonQt wrapper.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/CMakeLists.txt#_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nif(MRMLWidgets_WRAP_PYTHON)\n  ctkMacroBuildLibWrapper(\n    NAMESPACE \"org.slicer.libs\"\n    TARGET ${lib_name}\n    SRCS \"${MRMLWidgets_SRCS}\"\n    INSTALL_BIN_DIR ${Slicer_INSTALL_BIN_DIR}\n    INSTALL_LIB_DIR ${Slicer_INSTALL_LIB_DIR}\n    )\n  # Folder\n  if(NOT \"${${PROJECT_NAME}_FOLDER}\" STREQUAL \"\")\n    set_target_properties(${lib_name}PythonQt PROPERTIES FOLDER ${${PROJECT_NAME}_FOLDER})\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating shared libraries A and B\nDESCRIPTION: This snippet creates two shared libraries, A and B, using the `add_library` command. Each library is built from a corresponding C++ source file. The SHARED keyword indicates that these are shared libraries, dynamically linked at runtime.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMake/SlicerLinkerAsNeededFlagCheck/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(A SHARED A.cxx)\nadd_library(B SHARED B.cxx)\n```\n\n----------------------------------------\n\nTITLE: Building CLI using SEMMacroBuildCLI\nDESCRIPTION: This snippet uses the SEMMacroBuildCLI macro to build the command-line interface (CLI) for the module. It specifies the module name, logo header, target libraries (ITK_LIBRARIES), and indicates that the module should not be installed directly (NO_INSTALL).\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/DiffusionTensorTest/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/ITKLogo.h\n  TARGET_LIBRARIES ${ITK_LIBRARIES}\n  NO_INSTALL\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Cxx Subdirectory\nDESCRIPTION: This CMake command adds the subdirectory named \"Cxx\" to the current CMake project. It allows CMake to find and process the CMakeLists.txt file located within the 'Cxx' directory, incorporating the targets and configurations defined there into the main project build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/Widgets/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Source Files CMake\nDESCRIPTION: Defines a list of C++ source files for the module's tests. The vtkSlicerSubjectHierarchyModuleLogicTest.cxx file contains the actual test implementations.  KIT_TEST_SRCS is a CMake variable that stores the list of test source files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/Testing/Cxx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT_TEST_SRCS\n  vtkSlicerSubjectHierarchyModuleLogicTest.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Target Library Definition - CMake\nDESCRIPTION: Defines the target libraries that the module depends on, including Slicer modules, MRML libraries, and Qt libraries. These libraries will be linked with the module during the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Texts/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nset(${KIT}_TARGET_LIBRARIES\n  vtkSlicerSubjectHierarchyModuleLogic\n  qSlicerSubjectHierarchyModuleWidgets\n  MRMLCore\n  MRMLLogic\n  qMRMLWidgets\n  ${QT_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Python Script List - CMake\nDESCRIPTION: This snippet sets the `SlicerWizard_PYTHON_SCRIPTS` variable to a list of Python files that are part of the SlicerWizard module. These scripts likely contain the logic and functionality of the wizard.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Scripts/SlicerWizard/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SlicerWizard_PYTHON_SCRIPTS\n  __init__.py\n  __version__.py\n  CMakeParser.py\n  ExtensionDescription.py\n  ExtensionProject.py\n  ExtensionWizard.py\n  GithubHelper.py\n  TemplateManager.py\n  Utilities.py\n  WizardHelpFormatter.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Python Resources Variable in CMake\nDESCRIPTION: Defines a CMake variable `${MODULE_NAME}SubjectHierarchyPlugins_PYTHON_RESOURCES` containing a list of Python resources associated with the SubjectHierarchyPlugins module. This list, currently empty, can be used to include resources like UI files or data files alongside the Python scripts.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/SegmentEditor/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(${MODULE_NAME}SubjectHierarchyPlugins_PYTHON_RESOURCES\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Module using Slicer Macro in CMake\nDESCRIPTION: This snippet invokes a Slicer-specific CMake macro (`SlicerMacroBuildModuleMRML`) to build the module. It passes the module name, export directive, include directories, source files, and target libraries as arguments.  This macro encapsulates the standard build process for Slicer modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Sequences/MRML/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nSlicerMacroBuildModuleMRML(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion based on CLI Support\nDESCRIPTION: This snippet conditionally includes the 'CLI' subdirectory if both `Slicer_BUILD_CLI_SUPPORT` and `Slicer_BUILD_CLI` CMake options are enabled.  This allows the build system to include command line interface modules when the relevant options are specified.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_BUILD_CLI_SUPPORT AND Slicer_BUILD_CLI)\n  add_subdirectory(CLI)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Build Module Logic (CMake)\nDESCRIPTION: This snippet uses the SlicerMacroBuildModuleLogic macro to configure the build process for the module's logic component. It passes the project name, export directive, include directories, source files, and target libraries as arguments to the macro.  The macro performs the necessary steps to compile and link the logic component.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperLoadableModuleTemplate/Logic/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleLogic(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Set Testing Data Directories\nDESCRIPTION: Defines cache variables for various testing data directories. These directories are used to store baseline data, input data, MRML test data, and temporary files for CLI testing. These paths are set relative to the source and binary directories.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  # Set CLI testing directories as cache variable so that it can be used by\n  # remote module SlicerDMRI included from top-level CMakeLists.txt\n  set(BASELINE \"${Slicer_SOURCE_DIR}/Testing/Data/Baseline/CLI\"\n    CACHE PATH \"MRML CLI baseline directory\")\n  set(TEST_DATA \"${Slicer_SOURCE_DIR}/Testing/Data/Input\"\n    CACHE PATH \"MRML CLI testing input data directory\")\n  set(MRML_TEST_DATA \"${Slicer_SOURCE_DIR}/Libs/MRML/Core/Testing/TestData\"\n    CACHE PATH \"MRML CLI testing common data directory\")\n  set(TEMP \"${Slicer_BINARY_DIR}/Testing/Temporary\"\n    CACHE PATH \"MRML CLI testing temp directory\")\n\n  set(MRML_DATA \"${Slicer_HOME}/share/MRML/Testing/TestData\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Python Resources for Module\nDESCRIPTION: This snippet defines Python resources associated with the module. Currently, it's an empty list, indicating that no specific Python resources are defined for this module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/PerformanceTests/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_PYTHON_RESOURCES\n  )\n\n```\n\n----------------------------------------\n\nTITLE: Setting Variables for Data and Module Name\nDESCRIPTION: This snippet sets CMake variables to define paths for baseline data, input data, and the module name. The SEM_DATA_MANAGEMENT_TARGET variable is also defined if it's not already set.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CreateDICOMSeries/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(BASELINE ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Baseline)\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input)\n\nset(CLP ${MODULE_NAME})\n\nif(NOT DEFINED SEM_DATA_MANAGEMENT_TARGET)\n  set(SEM_DATA_MANAGEMENT_TARGET ${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries\nDESCRIPTION: This links the target executable `${KIT}CxxTests` with the `${KIT}` library.  This makes the functions and classes defined in the `${KIT}` library available to the test executable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${KIT}CxxTests ${KIT})\n```\n\n----------------------------------------\n\nTITLE: Adding subdirectory for designer plugins - CMake\nDESCRIPTION: This snippet conditionally adds the `DesignerPlugins` subdirectory to the build process if the `Slicer_BUILD_QT_DESIGNER_PLUGINS` option is enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/Widgets/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif(Slicer_BUILD_QT_DESIGNER_PLUGINS)\n  add_subdirectory(DesignerPlugins)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding SubjectHierarchyPlugins Subdirectory\nDESCRIPTION: Adds the 'SubjectHierarchyPlugins' subdirectory to the build process. This allows the inclusion of any CMakeLists.txt files within that directory, incorporating those plugins into the overall build.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/SegmentEditor/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(SubjectHierarchyPlugins)\n```\n\n----------------------------------------\n\nTITLE: Creating Test Sourcelist in CMake\nDESCRIPTION: The `create_test_sourcelist` macro creates a list of source files for tests related to the `vtkTeem` kit. It includes `CxxTests.cxx` and `vtkDiffusionTensorMathematicsTest1.cxx`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkTeem/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncreate_test_sourcelist(Tests ${KIT}CxxTests.cxx\n  vtkDiffusionTensorMathematicsTest1.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Help Message Test in CMake\nDESCRIPTION: Adds another test case using `ExternalData_add_test` to verify the help message. This test executes `${CLP}Test` with the `--help` argument, allowing verification of the command-line options provided by the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MedianImageFilter/Testing/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(testname ${CLP}Test2)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  ModuleEntryPoint\n  --help\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Setting Module Include Directories\nDESCRIPTION: This snippet defines a variable `MODULE_INCLUDE_DIRECTORIES`, which is expected to store include directories that the module needs. It's currently empty, indicating that no specific include directories are defined at this point.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/CLI/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_INCLUDE_DIRECTORIES\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Plugin Variables - CMake\nDESCRIPTION: This snippet sets variables to define the components of a Qt Designer plugin. These include the plugin's name (KIT), export directive, source files, moc source files, and target libraries. These variables are later used by the ctkMacroBuildQtDesignerPlugin macro to configure the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Texts/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT ${PROJECT_NAME}Plugins)\n\nset(${KIT}_EXPORT \"Q_SLICER_MODULE_${MODULE_NAME_UPPER}_WIDGETS_PLUGINS_EXPORT\")\n\nset(${KIT}_SRCS\n  qSlicer${MODULE_NAME}ModuleWidgetsAbstractPlugin.cxx\n  qSlicer${MODULE_NAME}ModuleWidgetsAbstractPlugin.h\n  qSlicer${MODULE_NAME}ModuleWidgetsPlugin.cxx\n  qSlicer${MODULE_NAME}ModuleWidgetsPlugin.h\n\n  qMRMLTextWidgetPlugin.cxx\n  qMRMLTextWidgetPlugin.h\n  )\n\nset(${KIT}_MOC_SRCS\n  qSlicer${MODULE_NAME}ModuleWidgetsPlugin.h\n\n  qMRMLTextWidgetPlugin.h\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  qSlicer${MODULE_NAME}ModuleWidgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory for Testing in CMake\nDESCRIPTION: Adds the 'Testing' subdirectory to the build if testing is enabled. This allows for including and running tests associated with the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SceneViews/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Target in CMake\nDESCRIPTION: This snippet adds an external data target if `${SEM_DATA_MANAGEMENT_TARGET}` is equal to `${CLP}Data`.  It uses the `ExternalData_add_target` command.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CheckerBoardFilter/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Module Source Files\nDESCRIPTION: This snippet defines a variable `MODULE_SRCS`, intended to contain a list of source files (.cxx, .cpp, etc.) for the module. It's currently empty, meaning no source files are explicitly listed in this section.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/CLI/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_SRCS\n  )\n```\n\n----------------------------------------\n\nTITLE: Building MRML Module Using Macro\nDESCRIPTION: Uses the `SlicerMacroBuildModuleMRML` macro to build the MRML module.  This macro encapsulates the common build steps for MRML modules in Slicer.  It takes the module name, export directive, include directories, source files, and target libraries as input.  The macro is responsible for generating the necessary CMake code to build and link the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/MRML/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nSlicerMacroBuildModuleMRML(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Set Module Source Files in CMake\nDESCRIPTION: Defines the source files for the module, including both .cxx and .h files. The file names follow a consistent naming convention based on the module name.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperLoadableModuleTemplate/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_SRCS\n  qSlicer${MODULE_NAME}Module.cxx\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.cxx\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Generating MOC Files for Qt Tests (CMake)\nDESCRIPTION: This snippet identifies C++ source files that require Meta-Object Compiler (MOC) processing, usually those that contain Qt signals and slots. It uses `QT5_GENERATE_MOCS` to generate the necessary MOC files, and includes the binary directory to locate generated headers. The MOC files are needed for Qt's signal and slot mechanism to work correctly.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/Testing/Cxx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT_TEST_GENERATE_MOC_SRCS\n  qSlicerPresetComboBoxTest.cxx\n  )\nQT5_GENERATE_MOCS(${KIT_TEST_GENERATE_MOC_SRCS})\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: Adding CMake subdirectories\nDESCRIPTION: This CMake code snippet adds the 'Cxx' subdirectory to the build process. It also conditionally adds the 'Python' subdirectory if the CMake variable 'Slicer_USE_PYTHONQT' is set to true.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\nif(Slicer_USE_PYTHONQT)\n  add_subdirectory(Python)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Add LoadableCustomMarkups Subdirectory (CMake)\nDESCRIPTION: This CMake command adds the 'Modules/LoadableCustomMarkups' directory as a subdirectory to the current CMake context. This integrates the LoadableCustomMarkups module into the Slicer project's build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Modules/LoadableCustomMarkups)\n```\n\n----------------------------------------\n\nTITLE: Defining Python Resources List (CMake)\nDESCRIPTION: This CMake snippet initializes an empty list called `Slicer_PYTHON_RESOURCES`. This list is intended to store paths to Python resource files, which are distinct from Python scripts. These resource files might contain data, UI definitions, or other non-executable components used by the Python scripts.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/Python/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(Slicer_PYTHON_RESOURCES\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Test\nDESCRIPTION: This snippet defines a test named `${CLP}Test` that compares the output of the module against a baseline. It uses `ExternalData_add_test` to download necessary input data and execute the test command. The test command involves running the module's executable, comparing the output with baseline data, and specifying input data dependencies.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/SubtractScalarVolumes/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(testname ${CLP}Test)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  --compare DATA{${BASELINE}/${CLP}Test.nhdr,SubtractScalarVolumesTest.raw.gz}\n            ${TEMP}/${CLP}Test.nhdr\n  ModuleEntryPoint\n    DATA{${INPUT}/CTHeadAxial.nhdr,CTHeadAxial.raw.gz}\n    DATA{${INPUT}/CTHeadAxialDoubled.nhdr,CTHeadAxialDoubled.raw.gz}\n    ${TEMP}/${CLP}Test.nhdr\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Adding Executable and Linking Libraries - CMake\nDESCRIPTION: This snippet creates an executable target named `${CLP}Test` from the source file `${CLP}Test.cxx`, links it against the `${CLP}Lib` and `${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES}` libraries, and sets properties like labels and folder for the target.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/DiffusionTensorTest/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n#-----------------------------------------------------------------------------\nctk_add_executable_utf8(${CLP}Test ${CLP}Test.cxx)\ntarget_link_libraries(${CLP}Test ${CLP}Lib ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES})\nset_target_properties(${CLP}Test PROPERTIES LABELS ${CLP})\nset_target_properties(${CLP}Test PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files List - CMake\nDESCRIPTION: This snippet sets the list of source files for the kit, combining the generated instantiator source files and the displayable manager source files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/MRMLDM/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  ${displayable_manager_instantiator_SRCS}\n  ${displayable_manager_SRCS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Set Module Include Directories in CMake\nDESCRIPTION: Defines include directories for the module, including source and binary directories for 'Logic' and 'Widgets'. This ensures that header files in these directories can be found during compilation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperLoadableModuleTemplate/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_INCLUDE_DIRECTORIES\n  ${CMAKE_CURRENT_SOURCE_DIR}/Logic\n  ${CMAKE_CURRENT_BINARY_DIR}/Logic\n  ${CMAKE_CURRENT_SOURCE_DIR}/Widgets\n  ${CMAKE_CURRENT_BINARY_DIR}/Widgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Displaying console output using `more` (Windows)\nDESCRIPTION: This code snippet shows how to capture and display the console output of the Slicer application on Windows using the `more` command. The `2>&1` argument redirects error output to the standard output.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/debugging/tips.md#_snippet_3\n\nLANGUAGE: batch\nCODE:\n```\nSlicer.exe --help 2>&1 | more\n```\n\n----------------------------------------\n\nTITLE: BSpline Windowed Sinc Test - CMake\nDESCRIPTION: Defines a test case that applies a BSpline transformation to an image using windowed sinc interpolation. It also includes a correction nearest neighbor and compares it to a baseline.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleDTIVolume/Testing/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(BSplineFile ${INPUT}/FastNonrigidBSplineregistrationTransform.tfm)\nset(TransformedImage3 ${TEMP}/dt-helix-transformed3.nrrd )\nset(testname ${CLP}BSplineWSInterpolationTest)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  --compare\n    DATA{${BASELINE}/dt-helix-ref-BS.nrrd}\n    ${TransformedImage3}\n  --compareIntensityTolerance 1e-10\n  ModuleEntryPoint\n    -f ${BSplineFile}\n    --interpolation ws\n    ${OriginalImage}\n    ${TransformedImage3}\n    --correction nearest\n    -n 8\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Set Source Files\nDESCRIPTION: Defines the list of source files that make up the vtkSegmentationCore library. These files are compiled and linked to create the library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkSegmentationCore/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(vtkSegmentationCore_SRCS\n  vtkOrientedImageData.cxx\n  vtkOrientedImageData.h\n  vtkOrientedImageDataResample.cxx\n  vtkOrientedImageDataResample.h\n  vtkSegment.cxx\n  vtkSegment.h\n  vtkSegmentation.cxx\n  vtkSegmentation.h\n  vtkSegmentationConversionParameters.cxx\n  vtkSegmentationConversionParameters.h\n  vtkSegmentationConversionPath.cxx\n  vtkSegmentationConversionPath.h\n  vtkSegmentationConverter.cxx\n  vtkSegmentationConverter.h\n  vtkSegmentationConverterFactory.cxx\n  vtkSegmentationConverterFactory.h\n  vtkSegmentationConverterRule.cxx\n  vtkSegmentationConverterRule.h\n  vtkSegmentationHistory.cxx\n  vtkSegmentationHistory.h\n  vtkSegmentationModifier.cxx\n  vtkSegmentationModifier.h\n  vtkTopologicalHierarchy.cxx\n  vtkTopologicalHierarchy.h\n  vtkBinaryLabelmapToClosedSurfaceConversionRule.cxx\n  vtkBinaryLabelmapToClosedSurfaceConversionRule.h\n  vtkClosedSurfaceToBinaryLabelmapConversionRule.cxx\n  vtkClosedSurfaceToBinaryLabelmapConversionRule.h\n  vtkCalculateOversamplingFactor.cxx\n  vtkCalculateOversamplingFactor.h\n  vtkClosedSurfaceToFractionalLabelmapConversionRule.h\n  vtkClosedSurfaceToFractionalLabelmapConversionRule.cxx\n  vtkFractionalLabelmapToClosedSurfaceConversionRule.h\n  vtkFractionalLabelmapToClosedSurfaceConversionRule.cxx\n  vtkPolyDataToFractionalLabelmapFilter.h\n  vtkPolyDataToFractionalLabelmapFilter.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Project and Export Details - CMake\nDESCRIPTION: This snippet sets the project name and the export directive used for the plugin. The project name is set to 'SlicerDesignerPlugins', and the export directive is configured to 'Q_SLICER_DESIGNER_PLUGINS_EXPORT'.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTGUI/DesignerPlugins/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT ${PROJECT_NAME}DesignerPlugins)\nproject(${KIT})\n\n#\n# See CTK/CMake/ctkMacroBuildQtPlugin.cmake for details\n#\n\n# The header '${KIT}Export.h' will be automatically configured.\nset(${KIT}_EXPORT \"Q_SLICER_DESIGNER_PLUGINS_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Building the Qt Library\nDESCRIPTION: Invokes the SlicerMacroBuildBaseQtLibrary macro to build the Qt library. This macro encapsulates the common steps for building Qt libraries within the Slicer project.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/CMakeLists.txt#_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\nSlicerMacroBuildBaseQtLibrary(\n  NAME ${PROJECT_NAME}\n  EXPORT_DIRECTIVE ${KIT_export_directive}\n  INCLUDE_DIRECTORIES ${KIT_include_directories}\n  SRCS ${KIT_SRCS}\n  MOC_SRCS ${KIT_MOC_SRCS}\n  TARGET_LIBRARIES ${KIT_target_libraries}\n  RESOURCES ${KIT_resources}\n  WRAP_PYTHONQT\n  )\n```\n\n----------------------------------------\n\nTITLE: Append Modules for Testing\nDESCRIPTION: Conditionally appends the 'ROITest' module to the list of CLI modules if testing is enabled (BUILD_TESTING is true).\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  list(APPEND cli_modules ROITest)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Extensions Directory Base Name\nDESCRIPTION: This snippet defines the base name for the Slicer extensions directory. This variable is used to locate extensions within the Slicer application. The note emphasizes updating `vtkSlicerApplicationLogic::IsEmbeddedModule` if this value changes.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_38\n\nLANGUAGE: cmake\nCODE:\n```\nset(Slicer_EXTENSIONS_DIRBASENAME \"Extensions\")\n```\n\n----------------------------------------\n\nTITLE: Setting Plugin Variables (CMake)\nDESCRIPTION: This snippet sets CMake variables that define the plugin name, export directive, source files, MOC files, and target libraries for the Qt Designer plugin. These variables are then used by the `ctkMacroBuildQtDesignerPlugin` macro.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Units/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT ${PROJECT_NAME}Plugins)\n\nset(${KIT}_EXPORT \"Q_SLICER_MODULE_${MODULE_NAME_UPPER}_WIDGETS_PLUGINS_EXPORT\")\n\nset(${KIT}_SRCS\n  qSlicer${MODULE_NAME}ModuleWidgetsAbstractPlugin.cxx\n  qSlicer${MODULE_NAME}ModuleWidgetsAbstractPlugin.h\n  qSlicer${MODULE_NAME}ModuleWidgetsPlugin.cxx\n  qSlicer${MODULE_NAME}ModuleWidgetsPlugin.h\n\n  qMRMLUnitWidgetPlugin.cxx\n  qMRMLUnitWidgetPlugin.h\n  )\n\nset(${KIT}_MOC_SRCS\n  qSlicer${MODULE_NAME}ModuleWidgetsPlugin.h\n\n  qMRMLUnitWidgetPlugin.h\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  qSlicer${MODULE_NAME}ModuleWidgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Updating Slicer_Base include directories\nDESCRIPTION: This snippet updates the `Slicer_Base_INCLUDE_DIRS` variable by appending the `Slicer_BaseCLI_INCLUDE_DIRS`. This ensures that the Slicer Base includes are updated with the specific include directories required by the SlicerBaseCLI library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/CLI/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(Slicer_Base_INCLUDE_DIRS ${Slicer_Base_INCLUDE_DIRS}\n  ${Slicer_BaseCLI_INCLUDE_DIRS} CACHE INTERNAL \"Slicer Base includes\" FORCE)\n```\n\n----------------------------------------\n\nTITLE: Get Volume/Grid Transform List\nDESCRIPTION: Retrieves a list of MRML volume or grid transform node names and IDs. The `cmd` parameter allows navigating through the list using `next` or `previous`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/modules/webserver.md#_snippet_6\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /volumes, GET /gridtransforms\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name in CMake\nDESCRIPTION: This snippet sets the module name for the ResampleDTIVolume module. The MODULE_NAME variable is used later in the build configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleDTIVolume/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME ResampleDTIVolume)\n```\n\n----------------------------------------\n\nTITLE: Install MRML Parameter Sets with CMake\nDESCRIPTION: This CMake snippet finds all MRML parameter set files (`.mrml`) located in the `ParameterSets` subdirectory of the current source directory. It installs them into the `${Slicer_INSTALL_SHARE_DIR}/ParameterSets` directory. It first configures the files to copy them to the binary directory. The files are designated as part of the 'Runtime' component.\nSOURCE: https://github.com/slicer/slicer/blob/main/Resources/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB PARAMETERSETS RELATIVE \"${CMAKE_CURRENT_SOURCE_DIR}\" \"ParameterSets/*.mrml\")\n\nforeach(parameterset ${PARAMETERSETS})\nconfigure_file(\n    ${CMAKE_CURRENT_SOURCE_DIR}/${parameterset}\n    \"${CMAKE_BINARY_DIR}/${Slicer_SHARE_DIR}/${parameterset}\"\n    COPYONLY\n    )\nendforeach()\ninstall(\n  FILES ${PARAMETERSETS}\n  DESTINATION ${Slicer_INSTALL_SHARE_DIR}/ParameterSets\n  COMPONENT Runtime\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Macro for Adding Script Tests\nDESCRIPTION: This CMake macro `add_cmakescript_test` simplifies the process of adding and configuring CMake script-based tests. It takes a test name and a script path as input, adds a test using `add_test`, and sets properties such as labels and a regular expression for pass/fail criteria.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/CMake/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(add_cmakescript_test testname script)\n  add_test(cmake_${testname} ${CMAKE_COMMAND}\n    -DTEST_${testname}:BOOL=ON\n    -P ${CMAKE_SOURCE_DIR}/${script})\n  set_tests_properties(cmake_${testname} PROPERTIES\n    LABELS CMake\n    PASS_REGULAR_EXPRESSION \"SUCCESS\")\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Add Testing Subdirectory\nDESCRIPTION: Adds the Testing subdirectory if BUILD_TESTING is enabled.  This allows running tests for the vtkITK library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkITK/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Input Data Path in CMake\nDESCRIPTION: Sets the input data directory for tests using the `set` command. It relies on the `MRMLCore_SOURCE_DIR` variable to locate the test data within the MRMLCore module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INPUT \"${MRMLCore_SOURCE_DIR}/Testing/TestData\")\n```\n\n----------------------------------------\n\nTITLE: Including ConfigurePrerequisites Component (CMake)\nDESCRIPTION: This CMake code snippet demonstrates how to include the `ConfigurePrerequisites` component to ensure the extension uses the same `CMAKE_OSX_*` variables as Slicer. This ensures compatibility with Slicer on macOS. It requires the Slicer package to be found.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/extensions.md#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Slicer COMPONENTS ConfigurePrerequisites REQUIRED)\n\nproject(Foo)\n\n# [...]\n\nfind_package(Slicer REQUIRED)\ninclude(${Slicer_USE_FILE})\n\n# [...]\n```\n\n----------------------------------------\n\nTITLE: Loadable Modules: Taking Ownership in C++ (Existing Variable)\nDESCRIPTION: This C++ code snippet shows how to take ownership of a VTK object returned by `GetNodesByClass` when assigning it to an existing `vtkSmartPointer`. It uses `vtkSmartPointer::TakeReference` to transfer ownership of the raw pointer to the smart pointer.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/advanced_topics.md#_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nvtkSmartPointer<vtkCollection> nodes;\nnodes.TakeReference(mrmlScene->GetNodesByClass(\"vtkMRMLLinearTransformNode\"));\n```\n\n----------------------------------------\n\nTITLE: Export Directive Definition\nDESCRIPTION: Defines the export directive for the module, controlling symbol visibility when building shared libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/Logic/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_LOGIC_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Add Python subdirectory\nDESCRIPTION: This CMake command adds the 'Python' subdirectory to the build process. This indicates that the 'Python' directory contains a CMakeLists.txt file that defines how to build or integrate Python components.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Widgets/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n#add_subdirectory(Python)\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name\nDESCRIPTION: Sets the name of the module to ModelToLabelMap. This name is used throughout the configuration process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ModelToLabelMap/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME ModelToLabelMap)\n```\n\n----------------------------------------\n\nTITLE: Configuring CxxTestDriver in CMake\nDESCRIPTION: This snippet configures a C++ test driver for the module using the `slicerMacroConfigureModuleCxxTestDriver` macro. It specifies the module name, test sources, and options for VTK debug leak checks and error output checks.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/Loadable/Testing/Cxx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nslicerMacroConfigureModuleCxxTestDriver(\n  NAME ${KIT}\n  SOURCES ${KIT_TEST_SRCS}\n  WITH_VTK_DEBUG_LEAKS_CHECK\n  WITH_VTK_ERROR_OUTPUT_CHECK\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Executable with UTF-8 Support\nDESCRIPTION: This uses the `ctk_add_executable_utf8` function to create an executable named `${KIT}CxxTests`.  It links the generated UI code, test sources, MOC files, and utility files.  UTF-8 support is enabled by this macro.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nctk_add_executable_utf8(${KIT}CxxTests ${Test_UI_CXX} ${Tests} ${Tests_MOC_CXX} ${Tests_UtilityFiles})\n```\n\n----------------------------------------\n\nTITLE: Add External Data Test\nDESCRIPTION: This snippet adds an external data test using `ExternalData_add_test`. The test executes the `${CLP}Test` executable with specific command-line arguments, input data, and output file. The test also sets a label for test categorization.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GrayscaleModelMaker/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(testname ${CLP}Test)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  GrayscaleModelMakerTest\n    --threshold 300\n    --name CTFace\n    --smooth 15\n    --decimate 0.95\n    --splitnormals\n    --pointnormals\n    DATA{${INPUT}/CTHeadAxial.nhdr,CTHeadAxial.raw.gz}\n    ${TEMP}GrayscaleModelMakerTest.vtp\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Set Baseline and Input Directories in CMake\nDESCRIPTION: This snippet defines the baseline and input directories, used to locate test data. It uses CMake's `set` command to assign the full paths based on the current source directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/AddScalarVolumes/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(BASELINE ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Baseline)\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input)\n```\n\n----------------------------------------\n\nTITLE: Building Module Logic - CMake\nDESCRIPTION: This snippet uses a custom CMake macro `SlicerMacroBuildModuleLogic` to build the module logic. It takes the module name, export directive, include directories, source files, and target libraries as input.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/MRMLDM/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleLogic(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Simple Tests\nDESCRIPTION: This snippet uses the `simple_test` macro to add several simple tests to the project.  Each test corresponds to a specific source file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/Widgets/Testing/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nsimple_test( qMRMLColorListViewTest1 )\nsimple_test( qMRMLColorPickerWidgetTest1 )\nsimple_test( qMRMLColorPickerWidgetTest2 )\nsimple_test( qMRMLColorPickerWidgetTest3 )\nsimple_test( qMRMLColorTableViewTest1 )\n```\n\n----------------------------------------\n\nTITLE: Folder Configuration CMake\nDESCRIPTION: Sets the folder property for the library target. The folder is determined by the ${PROJECT_NAME}_FOLDER variable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/DisplayableManager/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_FOLDER)\n  set(${PROJECT_NAME}_FOLDER ${PROJECT_NAME})\nendif()\nif(NOT \"${${PROJECT_NAME}_FOLDER}\" STREQUAL \"\")\n  set_target_properties(${lib_name} PROPERTIES FOLDER ${${PROJECT_NAME}_FOLDER})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Project Initialization CMake\nDESCRIPTION: Initializes the CMake project for the module widgets, naming the project based on the module name.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperLoadableModuleTemplate/Widgets/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(qSlicer${MODULE_NAME}ModuleWidgets)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties\nDESCRIPTION: This snippet applies user-defined properties to the library target. It checks if `Slicer_LIBRARY_PROPERTIES` is defined and applies these properties to the library target using `set_target_properties`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkTeem/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif(Slicer_LIBRARY_PROPERTIES)\n  set_target_properties(${lib_name} PROPERTIES ${Slicer_LIBRARY_PROPERTIES})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting INCLUDE_DIRS Variable\nDESCRIPTION: This snippet sets the `PROJECT_NAME_INCLUDE_DIRS` variable, which contains the include directories for the project. This variable is cached as an internal variable and is forced to be updated.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/ITKFactoryRegistration/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# --------------------------------------------------------------------------\n# Set INCLUDE_DIRS variable\n# --------------------------------------------------------------------------\nset(${PROJECT_NAME}_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR}\n  CACHE INTERNAL \"${PROJECT_NAME} include dirs\" FORCE)\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name\nDESCRIPTION: Sets the name of the module to FiducialRegistration. This variable is used throughout the CMake configuration to refer to the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/FiducialRegistration/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_NAME FiducialRegistration)\n```\n\n----------------------------------------\n\nTITLE: Setting Module Include Directories - CMake\nDESCRIPTION: Specifies the include directories required for compiling the module. These include directories contain header files for the module's logic, widgets, subject hierarchy plugins, and other dependencies, ensuring that the compiler can find necessary declarations.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Texts/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_INCLUDE_DIRECTORIES\n  ${CMAKE_CURRENT_SOURCE_DIR}/Logic\n  ${CMAKE_CURRENT_BINARY_DIR}/Logic\n  ${CMAKE_CURRENT_SOURCE_DIR}/Widgets\n  ${CMAKE_CURRENT_BINARY_DIR}/Widgets\n  ${qSlicerSubjectHierarchyModuleWidgets_INCLUDE_DIRS}\n  ${CMAKE_CURRENT_SOURCE_DIR}/SubjectHierarchyPlugins\n  ${CMAKE_CURRENT_BINARY_DIR}/SubjectHierarchyPlugins\n  )\n```\n\n----------------------------------------\n\nTITLE: Add SlicerApp Subdirectory in CMake\nDESCRIPTION: This CMake command adds the SlicerApp directory to the current CMake project.  It is typically used in a top-level CMakeLists.txt file to include subprojects or modules. This allows CMake to process the CMakeLists.txt file within the SlicerApp directory, incorporating its build instructions into the overall project.\nSOURCE: https://github.com/slicer/slicer/blob/main/Applications/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(SlicerApp)\n```\n\n----------------------------------------\n\nTITLE: Setting Input and CLP Variables (CMake)\nDESCRIPTION: This snippet sets the input data directory, the module name (CLP), and the data management target. It defines `SEM_DATA_MANAGEMENT_TARGET` to be the data target if it is not already defined, defaulting to `${CLP}Data`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ModelMaker/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input)\n\nset(CLP ${MODULE_NAME})\n\nif(NOT DEFINED SEM_DATA_MANAGEMENT_TARGET)\n  set(SEM_DATA_MANAGEMENT_TARGET ${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Extension Description File Metadata Example\nDESCRIPTION: This example demonstrates the syntax for specifying metadata in an extension description file.  It shows how to include comments and define metadata-value pairs.  The file uses a simple key-value structure for configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/extensions.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n# This is a comment\nmetadataname This is the value associated with 'metadataname'\n\n# This is an other comment\nanothermetadata This is the value associated with 'anothermetadata'\n```\n\n----------------------------------------\n\nTITLE: Find Slicer PID (Bash)\nDESCRIPTION: This command finds the process ID (PID) of the `SlicerApp-real` process using `ps` and `grep`.  It's an alternative to using the `--attach-process` argument.  Output includes the user, PID, CPU usage, memory usage, VSZ, RSS, TTY, state, start time, and the command.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/debugging/linuxcpp.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ ps -Afww | grep SlicerApp-real\n```\n\n----------------------------------------\n\nTITLE: Set Plugin Export Directive\nDESCRIPTION: This snippet defines the export directive used for the plugin, enabling proper symbol visibility when the plugin is loaded at runtime. It uses a predefined naming convention based on the module name.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Plots/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_EXPORT \"Q_SLICER_MODULE_${MODULE_NAME_UPPER}_WIDGETS_PLUGINS_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Find vtkAddon Package\nDESCRIPTION: Finds the vtkAddon package. It's only required if Slicer_BUILD_vtkAddon is not defined. If not found, it causes an error.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkITK/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT Slicer_BUILD_vtkAddon)\n  find_package(vtkAddon REQUIRED)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties in CMake\nDESCRIPTION: This CMake command sets the `FOLDER` property for the `${KIT}CxxTests` target to the value of `${${PROJECT_NAME}_FOLDER}`. This is used for organizing targets within the IDE or build system.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkTeem/Testing/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(${KIT}CxxTests PROPERTIES FOLDER ${${PROJECT_NAME}_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Include SlicerInitializeOSXVariables (macOS)\nDESCRIPTION: This snippet checks if the operating system is macOS (APPLE). If so, it includes the SlicerInitializeOSXVariables.cmake file to set macOS-specific variables related to bitness. This must happen before any enable_language() or project() calls to ensure proper detection.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/CMake/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(APPLE)\n  # Note: By setting CMAKE_OSX_* variables before any enable_language() or project() calls,\n  #       we ensure that the bitness will be properly detected.\n  include(${CMAKE_CURRENT_SOURCE_DIR}/../../CMake/SlicerInitializeOSXVariables.cmake)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Module Directories and Libraries\nDESCRIPTION: This snippet sets up the include directories, source files, and target libraries for the module.  The ITK libraries found earlier are included as target libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperCLIModuleTemplate/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_INCLUDE_DIRECTORIES\n  )\n\nset(MODULE_SRCS\n  )\n\nset(MODULE_TARGET_LIBRARIES\n  ${ITK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Add Testing Subdirectory in CMake\nDESCRIPTION: Adds the Testing subdirectory to the build if BUILD_TESTING is enabled. This allows for unit tests and integration tests to be built and run as part of the build process. The Testing directory contains a separate CMakeLists.txt file to configure testing.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Sequences/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Loadable Module - CMake\nDESCRIPTION: This uses the `slicerMacroBuildLoadableModule` macro to build the Terminologies module.  It passes in all the previously defined variables, such as the module name, export directive, include directories, source files, and target libraries. It also enables generic tests for the module using the `WITH_GENERIC_TESTS` option.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Terminologies/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroBuildLoadableModule(\n  NAME ${MODULE_NAME}\n  EXPORT_DIRECTIVE ${MODULE_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${MODULE_INCLUDE_DIRECTORIES}\n  SRCS ${MODULE_SRCS}\n  MOC_SRCS ${MODULE_MOC_SRCS}\n  UI_SRCS ${MODULE_UI_SRCS}\n  TARGET_LIBRARIES ${MODULE_TARGET_LIBRARIES}\n  RESOURCES ${MODULE_RESOURCES}\n  WITH_GENERIC_TESTS\n  )\n```\n\n----------------------------------------\n\nTITLE: Installing MRMLWidgets Library CMake\nDESCRIPTION: This snippet installs the MRMLWidgets library to the specified runtime, library, and archive directories.  The installation directories are defined by the `${PROJECT_NAME}_INSTALL_BIN_DIR` and `${PROJECT_NAME}_INSTALL_LIB_DIR` variables.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/CMakeLists.txt#_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_INSTALL_BIN_DIR)\n  set(${PROJECT_NAME}_INSTALL_BIN_DIR bin)\nendif()\nif(NOT DEFINED ${PROJECT_NAME}_INSTALL_LIB_DIR)\n  set(${PROJECT_NAME}_INSTALL_LIB_DIR lib/${PROJECT_NAME})\nendif()\n\ninstall(TARGETS ${lib_name}\n  RUNTIME DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DIR} COMPONENT RuntimeLibraries\n  LIBRARY DESTINATION ${${PROJECT_NAME}_INSTALL_LIB_DIR} COMPONENT RuntimeLibraries\n  ARCHIVE DESTINATION ${${PROJECT_NAME}_INSTALL_LIB_DIR} COMPONENT Development\n  )\n```\n\n----------------------------------------\n\nTITLE: Info Logging in Python\nDESCRIPTION: This snippet demonstrates logging an information message in Python using the `logging.info()` function. It prints the message to standard output and the application log.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/style_guide.md#_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nlogging.info(\"This is an information message. It is printed on the console (to standard output) and to the application log.\")\n```\n\n----------------------------------------\n\nTITLE: Defining Include Directories\nDESCRIPTION: This snippet defines the include directories necessary for compiling the module logic. It includes the RapidJSON include directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Terminologies/Logic/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${RapidJSON_INCLUDE_DIR}\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Executable and Linking Libraries\nDESCRIPTION: This snippet adds an executable target for testing the module, links required libraries, and sets target properties such as labels and folder location. The ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES} variable allows addition of extra executable target libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CreateDICOMSeries/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nctk_add_executable_utf8(${CLP}Test ${CLP}Test.cxx)\ntarget_link_libraries(${CLP}Test ${CLP}Lib ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES})\nset_target_properties(${CLP}Test PROPERTIES LABELS ${CLP})\nset_target_properties(${CLP}Test PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Finding Teem Package\nDESCRIPTION: This snippet finds the Teem package. It utilizes the `find_package` command and then verifies that the version of Teem found is compatible (at least 1.10). It includes the Teem use file to incorporate its configurations.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkTeem/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Teem REQUIRED NO_MODULE)\n# XXX Since no TeemConfigVersion.cmake is configured, let's check the version explicitly\nif(${Teem_VERSION_MAJOR}.${Teem_VERSION_MINOR}.${Teem_VERSION_PATCH} VERSION_LESS 1.10)\n  message(FATAL_ERROR\n    \"Could not find a configuration file for package \\\"Teem\\\" that is compatible with requested version \\\"1.10\\\".\")\nendif()\ninclude(${Teem_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Setting VTK Teem Kit Variable in CMake\nDESCRIPTION: This CMake command sets the variable `KIT` to the value `vtkTeem`.  This variable is likely used to identify or group related components or tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkTeem/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT vtkTeem)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Target Libraries CMake\nDESCRIPTION: This snippet defines the `KIT_TEST_TARGET_LIBRARIES` variable, listing the libraries that the tests need to link against. It includes `vtkSlicerAnnotationsModuleLogic` and, if the SceneViews module is enabled, `vtkSlicerSceneViewsModuleLogic`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Testing/Cxx/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT_TEST_TARGET_LIBRARIES\n  vtkSlicerAnnotationsModuleLogic\n  )\n\nif(_build_scene_views_module)\n  list(APPEND KIT_TEST_TARGET_LIBRARIES\n    vtkSlicerSceneViewsModuleLogic\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Cloning Slicer GitHub repository - console\nDESCRIPTION: This command clones the Slicer source code from the GitHub repository.  It downloads the entire project history and files to your local machine, creating a `Slicer` directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/macos.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ngit clone https://github.com/Slicer/Slicer.git\n```\n\n----------------------------------------\n\nTITLE: SuperBuild Option Configuration\nDESCRIPTION: This snippet defines an option, `${EXTENSION_NAME}_SUPERBUILD`, which controls whether to build the extension and its dependencies. It defaults to ON. It includes the `SuperBuild.cmake` script if the option is enabled, and then returns, skipping the rest of the CMake configuration in this file. This allows for separate builds of only the extension or everything (extension and dependencies).\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\noption(${EXTENSION_NAME}_SUPERBUILD \"Build ${EXTENSION_NAME} and the projects it depends on.\" ON)\nmark_as_advanced(${EXTENSION_NAME}_SUPERBUILD)\nif(${EXTENSION_NAME}_SUPERBUILD)\n  include(\"${CMAKE_CURRENT_SOURCE_DIR}/SuperBuild.cmake\")\n  return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Saving data nodes to file using slicerio\nDESCRIPTION: This code snippet illustrates how to save a data node from Slicer to a local file using the `slicerio.server.file_save` function. It leverages the `slicerio` package to communicate with the Slicer REST API. The code saves the node named \"MRHead\" to a file, and the properties parameter allows to specify if the file should be saved with compression.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/modules/webserver.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nslicerio.server.file_save(\"c:/tmp/MRHeadOutput.nrrd\", name=\"MRHead\", properties={'useCompression': False})\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel - CMake\nDESCRIPTION: Finds the SlicerExecutionModel package, which provides necessary functionality for Slicer CLI modules.  It requires the package and includes its use file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/CLIExtensionTemplate/CLIModuleTemplate/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Setting Test Source Files in CMake\nDESCRIPTION: Sets the list of C++ test source files for the Diffusion Tensor Volume Display Widget using the `set` command. These source files are used by the test driver.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT_TEST_SRCS\n  qSlicerDiffusionTensorVolumeDisplayWidgetTest1.cxx\n  qSlicerDTISliceDisplayWidgetTest1.cxx\n  qSlicerDTISliceDisplayWidgetTest2.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Slicer Extract Extension Description Tests\nDESCRIPTION: This uses the `add_cmakescript_test` macro to add a test to extract extension description information. It calls `Extensions/CMake/SlicerFunctionExtractExtensionDescription.cmake` to verify the extraction process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/CMake/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_cmakescript_test(\n  slicer_extract_extension_description_test\n  Extensions/CMake/SlicerFunctionExtractExtensionDescription.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Project Properties\nDESCRIPTION: This snippet defines project-specific settings like the project name, export directive, include directories, and source file lists. It initializes variables used in subsequent build steps for qSlicer<Module>ModuleWidgets.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Sequences/Widgets/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(qSlicer${MODULE_NAME}ModuleWidgets)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"Q_SLICER_MODULE_${MODULE_NAME_UPPER}_WIDGETS_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSlicer${MODULE_NAME}ModuleLogic_SOURCE_DIR}\n  ${vtkSlicer${MODULE_NAME}ModuleLogic_BINARY_DIR}\n  )\n\nset(${KIT}_SRCS\n  qMRMLSequenceBrowserPlayWidget.cxx\n  qMRMLSequenceBrowserPlayWidget.h\n  qMRMLSequenceBrowserSeekWidget.cxx\n  qMRMLSequenceBrowserSeekWidget.h\n  qMRMLSequenceBrowserToolBar.cxx\n  qMRMLSequenceBrowserToolBar.h\n  qMRMLSequenceEditWidget.cxx\n  qMRMLSequenceEditWidget.h\n  )\n\nset(${KIT}_MOC_SRCS\n  qMRMLSequenceBrowserPlayWidget.h\n  qMRMLSequenceBrowserSeekWidget.h\n  qMRMLSequenceBrowserToolBar.h\n  qMRMLSequenceEditWidget.h\n  )\n\nset(${KIT}_UI_SRCS\n  Resources/UI/qMRMLSequenceBrowserPlayWidget.ui\n  Resources/UI/qMRMLSequenceBrowserSeekWidget.ui\n  Resources/UI/qMRMLSequenceEditWidget.ui\n  )\n\nset(${KIT}_RESOURCES\n  Resources/qSlicer${MODULE_NAME}ModuleWidgets.qrc\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  )\n```\n\n----------------------------------------\n\nTITLE: Include Directories Setup CMake\nDESCRIPTION: Sets up include directories that the target library needs. Currently, it's empty and may be populated with directories later.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperLoadableModuleTemplate/Widgets/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_INCLUDE_DIRECTORIES\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name\nDESCRIPTION: This snippet sets the variable KIT to the name of the project (Slicer). This variable is later used for configuring the test driver.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/Logic/Testing/Cxx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Defining Include Directories - CMake\nDESCRIPTION: This snippet defines the include directories necessary for compiling the module's logic component.  These directories specify the locations of header files needed by the source code. This example currently has it empty, but it is intended to contain paths to required header files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Logic/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_INCLUDE_DIRECTORIES\n  )\n```\n\n----------------------------------------\n\nTITLE: Building and Uploading Slicer Extensions (Linux/macOS)\nDESCRIPTION: This snippet shows how to build, test, package, and upload Slicer extensions to a custom Extensions Server on Linux and macOS. It involves setting environment variables for the Slicer Package Manager client, URL, and API key, then configuring CMake with paths to the Slicer build tree and extension description files, and finally building the extensions using the `make` command. It also configures the CTest model and enables extension uploads.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/extensions.md#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ncd ~/ExtensionsIndex-Release\ncmake -E env \\\n  SLICER_PACKAGE_MANAGER_CLIENT_EXECUTABLE=/path/to/slicer_package_manager_client \\\n  SLICER_PACKAGE_MANAGER_URL=https://slicer-packages.kitware.com \\\n  SLICER_PACKAGE_MANAGER_API_KEY=a0b012c0123d012abc01234a012345a0 \\\n  \\\ncmake -DSlicer_DIR:PATH=~/Slicer-SuperBuild-Release/Slicer-build \\\n -DSlicer_EXTENSION_DESCRIPTION_DIR:PATH=~/ExtensionsIndex \\\n -DCMAKE_BUILD_TYPE:STRING=Release \\\n -DCTEST_MODEL:STRING=Experimental \\\n -DSlicer_UPLOAD_EXTENSIONS:BOOL=ON \\\n ~/Slicer/Extensions/CMake\n\nmake\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties\nDESCRIPTION: This snippet sets the `FOLDER` property of the `${KIT}CxxTests` target to the value of `${${PROJECT_NAME}_FOLDER}`. This helps organize the build output in a logical folder structure. Requires that `PROJECT_NAME` and `${PROJECT_NAME}_FOLDER` variables be defined.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/DisplayableManager/Testing/Cxx/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(${KIT}CxxTests PROPERTIES FOLDER ${${PROJECT_NAME}_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Include Python Subdirectory in CMake\nDESCRIPTION: This line adds the subdirectory named 'Python' to the current CMake project. This means the CMakeLists.txt file within the Python subdirectory will be processed, contributing to the overall build configuration. It is commonly used to modularize CMake projects.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/CropVolumeSequence/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Python)\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Sources\nDESCRIPTION: This snippet conditionally appends additional test sources to the `TEST_SOURCES` list based on whether `Slicer_USE_QtTesting` is enabled. This allows inclusion of Qt-specific tests when Qt testing is enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/Widgets/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_USE_QtTesting)\n  list(APPEND TEST_SOURCES\n    qMRMLColorListViewEventTranslatorPlayerTest1.cxx\n    qMRMLColorPickerWidgetEventTranslatorPlayerTest1.cxx\n    qMRMLColorTableViewEventTranslatorPlayerTest1.cxx\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional ITK Factory Registration CMake\nDESCRIPTION: This snippet conditionally disables ITK IO factory registration based on the ITK version. If ITK version is greater than or equal to 5.3, IMAGEIO, MESHIO and TRANSFORMIO factories are disabled. Otherwise, ITK_NO_IO_FACTORY_REGISTER_MANAGER is set to 1.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/HistogramMatching/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\n```\n\n----------------------------------------\n\nTITLE: Documenting Slicer Logic Module\nDESCRIPTION: This snippet uses the `automodule` directive within reStructuredText to generate API documentation for the `slicer.logic` module. It includes all members, even those not explicitly documented, and displays inheritance information.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/slicer.md#_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: slicer.logic\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Debug Logging in Python\nDESCRIPTION: This snippet demonstrates logging a debug message in Python using the `logging.debug()` function. It records the message in the application log, adding the file name and line number.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/style_guide.md#_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nlogging.debug(\"This is a debug message. It is only recorded in the application log but not displayed in the console. File name and line number is added to the log record.\")\n```\n\n----------------------------------------\n\nTITLE: Setting Export Directive (CMake)\nDESCRIPTION: Defines the export directive for the module. This directive controls the visibility of symbols when building shared libraries, ensuring proper linking and access to the module's functionality.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/CropVolume/MRML/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_MRML_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Building the Qt module library (CMake)\nDESCRIPTION: This snippet uses the SlicerMacroBuildModuleQtLibrary macro to build the Qt module library. It passes the module name, export directive, include directories, source files, MOC files, UI files, target libraries, and resources as arguments. The WRAP_PYTHONQT option indicates that Python wrappers should be generated for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleQtLibrary(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  FOLDER \"Module-${MODULE_NAME}\"\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  UI_SRCS ${${KIT}_UI_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  RESOURCES ${${KIT}_RESOURCES}\n  WRAP_PYTHONQT\n  )\n```\n\n----------------------------------------\n\nTITLE: Slicer Module Build with CMake\nDESCRIPTION: This CMake snippet conditionally builds a Slicer module named `MarkupsWidgetsSelfTest` if `Slicer_USE_QtTesting` and `Slicer_USE_PYTHONQT` are both enabled.  It uses the `slicerMacroBuildScriptedModule` macro to define the module, specifying the module name and the Python script associated with the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Widgets/Testing/Python/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(Slicer_USE_QtTesting AND Slicer_USE_PYTHONQT)\n  slicerMacroBuildScriptedModule(\n    NAME MarkupsWidgetsSelfTest\n    SCRIPTS MarkupsWidgetsSelfTest.py\n    )\n  slicer_add_python_unittest(SCRIPT MarkupsWidgetsSelfTest.py)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties\nDESCRIPTION: This snippet sets the `LABELS` property for the `SlicerWizard-doc` and `SlicerWizard-doc-tarball` targets to `Documentation`. This allows the targets to be grouped and filtered by their documentation status or type.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Scripts/SlicerWizard/doc/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(SlicerWizard-doc SlicerWizard-doc-tarball\n  PROPERTIES LABELS Documentation)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries - CMake\nDESCRIPTION: Lists the libraries that the module's widgets depend on. These libraries provide core functionality for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Widgets/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleMRML\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name - CMake\nDESCRIPTION: Defines the module name as CLIModuleTemplate. This variable is used throughout the CMake configuration to identify the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/CLIExtensionTemplate/CLIModuleTemplate/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_NAME CLIModuleTemplate)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Sources\nDESCRIPTION: This snippet defines the list of C++ source files for the test suite using the `set` command. The variable `KIT_TEST_SRCS` is assigned a list of source file names which are then compiled and linked into the test executable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT_TEST_SRCS\n  qSlicerTableColumnPropertiesWidgetTest1.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding ExternalData Target (Conditional)\nDESCRIPTION: This snippet conditionally adds an ExternalData target. If `SEM_DATA_MANAGEMENT_TARGET` is equal to `${CLP}Data`, then the `ExternalData_add_target` command is called with `${CLP}Data` as the target name. This is typically used to manage the data dependencies for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperCLIModuleTemplate/Testing/Cxx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name in CMake\nDESCRIPTION: This code snippet sets the module name for the MedianImageFilter. This variable is used later in the build process to define the module's name and identify it within the Slicer project. This step is crucial for organizing and managing the project's modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MedianImageFilter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_NAME MedianImageFilter)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Test Executable in CMake\nDESCRIPTION: This CMake command links the library specified by `${lib_name}` to the `${KIT}CxxTests` executable, making the library's functions and symbols available to the test executable. The `lib_name` variable likely contains the actual library name.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkTeem/Testing/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${KIT}CxxTests ${lib_name})\n```\n\n----------------------------------------\n\nTITLE: Fiducials Example Output\nDESCRIPTION: Example JSON output for GET /fiducials, showing the structure of the returned data for markup point lists, including name, color, scale, and individual markup point labels and positions.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/modules/webserver.md#_snippet_12\n\nLANGUAGE: JSON\nCODE:\n```\n{\n \"vtkMRMLMarkupsFiducialNode1\": {\n \"name\": \"F\",\n \"color\": [1.0, 0.5000076295109483, 0.5000076295109483],\n \"scale\": 3.0,\n \"markups\": [\n {\"label\": \"F-1\", \"position\": [-35.422643698898014, 13.121414583492907, -10.214302062988281]},\n {\"label\": \"F-2\", \"position\": [43.217879176918984, 41.565859027937364, -10.214302062988281]},\n {\"label\": \"F-3\", \"position\": [39.8714739481608, -32.05505600474238, -10.214302062988281]}]},\n \"vtkMRMLMarkupsFiducialNode2\": {\n \"name\": \"F_1\",\n \"color\": [1.0, 0.5000076295109483, 0.5000076295109483],\n \"scale\": 3.0,\n \"markups\": [\n {\"label\": \"F_1-1\", \"position\": [82.53814061482748, 13.121414583492907, -23.599922978020956]},\n {\"label\": \"F_1-2\", \"position\": [-4.468395332884938, 13.121414583492907, 65.07981558407056]}]}\n }\n```\n\n----------------------------------------\n\nTITLE: Project Definition and Variable Setup\nDESCRIPTION: This snippet defines the project name, sets the export directive for the module, and initializes variables for include directories and source files. It establishes the basic configuration for the module within the CMake build system.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/GeneralizedReformat/MRML/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleMRML)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_MRML_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  )\n\nset(${KIT}_SRCS\n  vtkMRMLAbstractVolumeResampler.cxx\n  #vtkMRML${MODULE_NAME}JsonElement.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Set Module MOC Source Files in CMake\nDESCRIPTION: Specifies header files that require processing by the Meta-Object Compiler (MOC).  These are typically the header files containing Qt's Q_OBJECT macro.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperLoadableModuleTemplate/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_MOC_SRCS\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Exporting Target\nDESCRIPTION: This snippet exports the library target. It defines `${PROJECT_NAME}_EXPORT_FILE` and then uses the `export` command to export the library target to this file. This allows other projects to easily find and use the library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkTeem/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_EXPORT_FILE)\n  set(${PROJECT_NAME}_EXPORT_FILE ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Targets.cmake)\nendif()\nexport(TARGETS ${lib_name} APPEND FILE ${${PROJECT_NAME}_EXPORT_FILE})\n```\n\n----------------------------------------\n\nTITLE: Setting target libraries for the KIT - CMake\nDESCRIPTION: This snippet defines the target libraries that the `KIT` depends on. It specifies that the `KIT` depends on the `vtkSlicer${MODULE_NAME}ModuleLogic` library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/Widgets/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Support File\nDESCRIPTION: This snippet configures the support file `vtkTeemConfig.cmake`.  It uses `configure_file` to generate `vtkTeemConfig.cmake` from `vtkTeemConfig.cmake.in` in the binary directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkTeem/CMakeLists.txt#_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/vtkTeemConfig.cmake.in\n  ${CMAKE_CURRENT_BINARY_DIR}/vtkTeemConfig.cmake\n  )\n```\n\n----------------------------------------\n\nTITLE: Calling the Test Function for Different Orientations in CMake\nDESCRIPTION: This snippet calls the `add_module_test` function for three different orientations: Axial, Coronal, and Sagittal. This automates the creation of tests covering these orientations for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/OrientScalarVolume/Testing/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_module_test(Axial)\nadd_module_test(Coronal)\nadd_module_test(Sagittal)\n```\n\n----------------------------------------\n\nTITLE: Packaging Slicer with Make - console\nDESCRIPTION: This command navigates to the build directory and then uses the `make package` command to create a distributable package of Slicer. This command is dependent on a successful build and requires Qt to be built from source.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/macos.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\ncd /opt/s\ncd Slicer-build\nmake package\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name\nDESCRIPTION: Defines the module name and converts it to uppercase for use in other variables. This is a standard CMake pattern for module configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Reformat/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME Reformat)\n\nstring(TOUPPER ${MODULE_NAME} MODULE_NAME_UPPER)\n```\n\n----------------------------------------\n\nTITLE: Configuring __version__.py - CMake\nDESCRIPTION: This snippet configures the `__version__.py` file from the `__version__.py.in` template file located in the current source directory. It uses the `@ONLY` option to only replace variables marked with `@` and sets the newline style to UNIX. The generated file is placed in the source directory. This ensures the Python version file is kept in sync.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Scripts/SlicerWizard/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(\n  \"__version__.py.in\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/__version__.py\"\n  @ONLY\n  NEWLINE_STYLE UNIX)\n```\n\n----------------------------------------\n\nTITLE: Setting Project Name and Module Name - CMake\nDESCRIPTION: This snippet sets the project name using the `project()` command and initializes the `KIT` variable with the project name. It also sets the export directive, which is used to manage symbol visibility for the module's shared library.  This ensures proper linkage and prevents symbol conflicts when the module is loaded.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(qSlicer${MODULE_NAME}SubjectHierarchyPlugins)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"Q_SLICER_${MODULE_NAME_UPPER}_PLUGINS_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel CMake\nDESCRIPTION: This snippet uses the `find_package` command to locate the SlicerExecutionModel package, which is a dependency for building the module. It also includes the use file associated with this package.  The `REQUIRED` argument ensures that the build fails if the package is not found.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GrayscaleFillHoleImageFilter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Setting Module Include Directories - CMake\nDESCRIPTION: This sets the include directories for the Terminologies module.  It includes the directories specified by `vtkSlicerTerminologiesModuleLogic_INCLUDE_DIRS` and `qSlicerTerminologiesModuleWidgets_INCLUDE_DIRS`.  These variables are likely populated by the CMakeLists.txt files in the Logic and Widgets subdirectories, respectively, and provide paths to necessary header files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Terminologies/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_INCLUDE_DIRECTORIES\n  ${vtkSlicerTerminologiesModuleLogic_INCLUDE_DIRS}\n  ${qSlicerTerminologiesModuleWidgets_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding a Simple Test\nDESCRIPTION: This snippet adds a simple test using the `simple_test` macro.  It seems to execute `vtkSlicerUnitsLogicTest1` and possibly load a MRML file (`modelHierarchy.mrml`) to set up the test's environment.  The test likely uses the data in this MRML file during its execution and verification steps.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Units/Testing/Cxx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nsimple_test(vtkSlicerUnitsLogicTest1 ${MRMLCore_SOURCE_DIR}/Testing/modelHierarchy.mrml)\n```\n\n----------------------------------------\n\nTITLE: Defining Project Name\nDESCRIPTION: Defines the name of the CMake project. This name is used in various build processes and generated files.  In this case, it's LoadableExtensionTemplate.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/LoadableExtensionTemplate/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(LoadableExtensionTemplate)\n```\n\n----------------------------------------\n\nTITLE: Getting help options (Bash/macOS)\nDESCRIPTION: This code snippet shows how to display all possible Slicer options on Linux and macOS using the `--help` argument.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/debugging/tips.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./Slicer --help\n```\n\n----------------------------------------\n\nTITLE: Building MRML Module\nDESCRIPTION: This snippet uses the `SlicerMacroBuildModuleMRML` macro to build the MRML module. It passes the module name, export directive, include directories, source files, and target libraries as arguments to the macro, which handles the compilation and linking process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/GeneralizedReformat/MRML/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleMRML(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Python Resources for DICOM Plugins\nDESCRIPTION: This CMake snippet defines a list of Python resources. In this specific instance, the list is empty.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOMPlugins/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_PYTHON_RESOURCES\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating Test Source List\nDESCRIPTION: This snippet utilizes the create_test_sourcelist macro to generate a list of source files for the test executable. It includes the ${KIT_TEST_SRCS} files and adds an extra include directory for 'vtkMRMLDebugLeaksMacro.h'.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/Logic/Testing/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ncreate_test_sourcelist(Tests ${KIT}CxxTests.cxx\n  ${KIT_TEST_SRCS}\n  EXTRA_INCLUDE vtkMRMLDebugLeaksMacro.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Disable MSVC8 Deprecated Warnings (Windows)\nDESCRIPTION: This snippet disables deprecated warnings in Visual Studio 8 (MSVC8) if the target platform is Windows.  It defines a CMake option to control this behavior and adds a preprocessor definition to suppress the warnings if the option is enabled. This is a platform specific option.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/RemoteIO/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n  option(DISABLE_MSVC8_DEPRECATED_WARNINGS\n    \"Disable Visual Studio 8 deprecated warnings\" ON)\n  mark_as_advanced(FORCE DISABLE_MSVC8_DEPRECATED_WARNINGS)\n  if(DISABLE_MSVC8_DEPRECATED_WARNINGS)\n    add_definitions(-D_CRT_SECURE_NO_DEPRECATE)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel\nDESCRIPTION: This CMake code block uses the `find_package` command to locate the SlicerExecutionModel package, which is required for building Slicer modules. It then includes the use file associated with the SlicerExecutionModel package.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ProbeVolumeWithModel/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Configuring files - CMake\nDESCRIPTION: This snippet configures several files by replacing variables in the input file (`.in` extension) with their corresponding values and writing the result to the output file. It uses the `configure_file` command, which is essential for generating configuration files specific to the build environment. A loop iterates through a list of script files to configure. Then configure_file is used for UseSlicer.cmake and SlicerConfigVersion.cmake.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_70\n\nLANGUAGE: cmake\nCODE:\n```\nset(files\n  Utilities/Scripts/computeCodeCoverageLocally.sh\n  Utilities/Scripts/computeCodeCoverageForOneTest.sh\n  Utilities/Scripts/runExperimentalOffScreen.sh\n  Utilities/Scripts/setupSlicerEnvironment.sh\n  )\nforeach(f ${files})\n  configure_file(\n    ${CMAKE_CURRENT_SOURCE_DIR}/${f}.in\n    ${CMAKE_CURRENT_BINARY_DIR}/${f}\n    )\nendforeach()\n\nconfigure_file(\n  ${Slicer_SOURCE_DIR}/CMake/UseSlicer.cmake.in\n  ${Slicer_USE_FILE} COPYONLY)\n\nconfigure_file(\n  ${Slicer_SOURCE_DIR}/CMake/SlicerConfigVersion.cmake.in\n  ${Slicer_BINARY_DIR}/SlicerConfigVersion.cmake @ONLY)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Properties (CMake)\nDESCRIPTION: Sets the `FAIL_REGULAR_EXPRESSION` property for the `py_VolumeRenderingThreeDOnlyLayout` test. If the test output matches \"OpenGL errors detected\", the test will fail. This ensures tests are sensitive to graphics API issues.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/Testing/Python/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset_tests_properties(\n    py_VolumeRenderingThreeDOnlyLayout\n    PROPERTIES FAIL_REGULAR_EXPRESSION \"OpenGL errors detected\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Building Module Widgets with SlicerMacroBuildModuleWidgets\nDESCRIPTION: This snippet uses the `SlicerMacroBuildModuleWidgets` macro to configure the build process for the module widgets.  It specifies the name, export directive, include directories, source files (including MOC and UI files), target libraries, and resources. It also enables PythonQt wrapping.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Texts/Widgets/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleWidgets(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  UI_SRCS ${${KIT}_UI_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  RESOURCES ${${KIT}_RESOURCES}\n  WRAP_PYTHONQT\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Target\nDESCRIPTION: Conditionally adds an external data target named ${CLP}Data. This target is responsible for downloading and managing the external data required for the tests if SEM_DATA_MANAGEMENT_TARGET is set to ${CLP}Data.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MergeModels/Testing/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Project Name and Kit Variables in CMake\nDESCRIPTION: This snippet sets the project name and defines a kit variable used throughout the CMake configuration. It initializes variables related to the module, such as export directives and include directories.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOMLib/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(qSlicer${MODULE_NAME}SubjectHierarchyPlugins)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"Q_SLICER_${MODULE_NAME_UPPER}_SUBJECT_HIERARCHY_PLUGINS_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Excluding Files from Wrapping (CMake)\nDESCRIPTION: This snippet excludes `vtkMRMLCoreTestingUtilities.cxx` from the wrapping process. This is useful for preventing testing utilities from being exposed in scripting languages.  This ensures that only the core MRML functionalities are accessible through the wrapped interfaces.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Core/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nset_source_files_properties(\n  vtkMRMLCoreTestingUtilities.cxx\n  WRAP_EXCLUDE\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Defines the include directories for the module using the `set` command. These directories contain header files required to compile the source code. Specifically, the include directories for `vtkSegmentationCore`, `MRMLCore`, and `vtkSlicerSubjectHierarchyModuleLogic` are specified.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/MRML/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSegmentationCore_INCLUDE_DIRS}\n  ${MRMLCore_INCLUDE_DIRS}\n  ${vtkSlicerSubjectHierarchyModuleLogic_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating executable using ctk_add_executable_utf8\nDESCRIPTION: This snippet creates an executable for the tests using the `ctk_add_executable_utf8` command. It takes the name of the executable (`${KIT}CxxTests`) and the source files (`${Tests}`) as input. This command is likely a custom function defined in the CTK library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/Testing/Cxx/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n  ctk_add_executable_utf8(${KIT}CxxTests ${Tests})\n```\n\n----------------------------------------\n\nTITLE: Object Factory Configuration CMake\nDESCRIPTION: Configures the DisplayableManager object factory using the SlicerConfigureDisplayableManagerObjectFactory module. Specifies the target name, source files, export macro, export header, and output source variable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/DisplayableManager/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(SlicerConfigureDisplayableManagerObjectFactory)\nSlicerConfigureDisplayableManagerObjectFactory(\n  TARGET_NAME ${lib_name}\n  SRCS \"${DisplayableManager_SRCS}\"\n  EXPORT_MACRO \"VTK_MRML_DISPLAYABLEMANAGER_EXPORT\"\n  EXPORT_HEADER \"vtk${PROJECT_NAME}Export.h\"\n  OUTPUT_SRCS_VAR DisplayableManagerInstantiator_SRCS\n  )\nset(srcs\n  ${KIT_SRCS}\n  ${DisplayableManagerInstantiator_SRCS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Determining Build Directory\nDESCRIPTION: Determines the module build directory based on whether CMake configuration types are defined. If configuration types exist (e.g., Debug, Release), it iterates through them to construct a list of build directories. Otherwise, it sets a single build directory.  This ensures correct handling of multi-configuration builds.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/SegmentEditor/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_CONFIGURATION_TYPES)\n  set(MODULE_BUILD_DIR \"\")\n  foreach(config ${CMAKE_CONFIGURATION_TYPES})\n    list(APPEND MODULE_BUILD_DIR \"${CMAKE_BINARY_DIR}/${Slicer_QTLOADABLEMODULES_LIB_DIR}/${config}\")\n  endforeach()\nelse()\n  set(MODULE_BUILD_DIR \"${CMAKE_BINARY_DIR}/${Slicer_QTLOADABLEMODULES_LIB_DIR}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Color Table TXT Format - Continuous Scale Example\nDESCRIPTION: This is an example of the TXT file format for storing a color node with a continuous scale. The file starts with the header `# Color procedural file`. Each subsequent line represents a color with its position (floating-point number), red, green, and blue values (0.0-1.0).\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/modules/colors.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\n# Color procedural file /path/to/file.txt\n# 5 points\n# position R G B\n0 0 0 0\n63 0 0.501961 0.490196\n128 0.501961 0 1\n192 1 0.501961 0\n255 1 1 1\n```\n\n----------------------------------------\n\nTITLE: Set Module Name - CMake\nDESCRIPTION: Sets the name of the module to DICOMPatcher. This variable is used throughout the build configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOMPatcher/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME DICOMPatcher)\n```\n\n----------------------------------------\n\nTITLE: BRAINSFit MultiModal Registration\nDESCRIPTION: This snippet shows a BRAINSFit command for registering a T2 scan to a T1 scan of the same subject collected in the same session. It sets the fixed and moving volumes, the output volume and transform, the transform type, the initialization mode, the mask processing mode, the dilation size and the interpolation mode. Histogram matching is explicitly avoided.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/modules/brainsfit.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nBRAINSFit --fixedVolume test.nii.gz \\\n    --movingVolume standard.nii.gz \\\n    --outputVolume testT2RegT1.nii.gz \\\n    --outputTransform T2ToT1.xform \\\n    --transformType Rigid \\\n    --initializeTransformMode useCenterOfHeadAlign \\\n    --maskProcessingMode ROIAUTO \\\n    --ROIAutoDilateSize 3 \\\n    --interpolationMode Linear\n```\n\n----------------------------------------\n\nTITLE: Set Module Name\nDESCRIPTION: This snippet sets the name of the Slicer module using the `set` command.  `${MODULE_NAME}` is a placeholder for the actual module name, and `qSlicer${MODULE_NAME}Module` constructs the final module identifier. This variable is used in subsequent configurations.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/LoadableExtensionTemplate/LoadableModuleTemplate/Testing/Cxx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT qSlicer${MODULE_NAME}Module)\n```\n\n----------------------------------------\n\nTITLE: Add Cxx Subdirectory - CMake\nDESCRIPTION: This command instructs CMake to process the CMakeLists.txt file located within the Cxx subdirectory. This is essential for incorporating the source code and build instructions defined in the Cxx directory into the overall project build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/LoadableExtensionTemplate/LoadableModuleTemplate/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Tests\nDESCRIPTION: Defines simple tests for various classes using the `simple_test` macro. The last test uses the temporary directory defined earlier.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Sequences/Testing/Cxx/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nsimple_test(vtkMRMLSequenceBrowserNodeTest1)\nsimple_test(vtkMRMLSequenceNodeTest1)\nsimple_test(vtkSlicerSequencesLogicTest1)\nsimple_test(vtkMRMLSequenceStorageNodeTest1 ${TEMP})\n```\n\n----------------------------------------\n\nTITLE: Adding extension subdirectories\nDESCRIPTION: Adds the `CLIModuleTemplate` subdirectory to the build process, allowing CMake to process the CMakeLists.txt file within that directory and build the corresponding module.  The `## NEXT_MODULE` comment suggests there may be other modules defined below in the original file which have been omitted from this excerpt.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/CLIExtensionTemplate/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(CLIModuleTemplate)\n## NEXT_MODULE\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries in CMake\nDESCRIPTION: This snippet defines the target libraries that the module depends on. These libraries provide the functionality that the module uses.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/Loadable/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  qSlicer${MODULE_NAME}ModuleWidgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding Slicer Package and Including Use File\nDESCRIPTION: Finds the Slicer package and includes the Slicer use file. This step makes available the Slicer-specific CMake functions and variables, which are essential for building Slicer extensions. It requires that Slicer is installed and configured correctly.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/LoadableExtensionTemplate/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Slicer REQUIRED)\ninclude(${Slicer_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Process MRML Events\nDESCRIPTION: The `ProcessMRMLEvents()` method should be implemented in MRML nodes, Logic, and GUI classes in order to process events from the observed nodes. This method acts as a central hub for handling and reacting to events emitted by observed nodes.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/mrml_overview.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Adding External Data Test with BSpline Transform\nDESCRIPTION: This test case utilizes a BSpline transform and windowed sinc ('ws') interpolation. It is set to compare the resultant resampled volume with a predefined expected output to confirm the correctness of BSpline transform handling.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleScalarVectorDWIVolume/Testing/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(BSplineFile ${Slicer_SOURCE_DIR}/Testing/Data/Input/MRHeadResampledBSplineTransform.tfm)\nset(testname ${CLP}BSplineWSInterpolationTest)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  --compare\n    DATA{${INPUT}/MRHeadResampledBSplineWSInterpolationTest.nrrd}\n    ${TEMP}/${testname}.nrrd\n  ModuleEntryPoint\n    -f ${BSplineFile}\n    --interpolation ws\n    DATA{${INPUT}/MRHeadResampled.nhdr,MRHeadResampled.raw.gz}\n    ${TEMP}/${testname}.nrrd\n    --transform_order input-to-output\n\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Example NRRD Volume Sequence File\nDESCRIPTION: This is an example of a .seq.nrrd file's header section. It shows how standard NRRD fields are used in combination with custom fields to represent a volume sequence, including axis indexing and the associated vtkMRML node class. The `axis 0 index values` defines the index (e.g. time) for each volume in the sequence.  The `DataNodeClassName` specifies the VTK node to be used when loading this sequence.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/modules/sequences.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nNRRD0005\n# Complete NRRD file format specification at:\n# http://teem.sourceforge.net/nrrd/format.html\ntype: int\ndimension: 4\nspace: right-anterior-superior\nsizes: 26 102 102 61\nspace directions: none (1.9531249999999991,0,0) (0,1.9531249999999991,0) (0,0,1.9531249999999991)\nkinds: list domain domain domain\nlabels: \"frame\" \"\" \"\" \"\"\nendian: little\nencoding: gzip\nspace origin: (-137.16099548339844,-36.806499481201172,-309.71899414062506)\nmeasurement frame: (1,0,0) (0,1,0) (0,0,1)\nDataNodeClassName:=vtkMRMLScalarVolumeNode\naxis 0 index type:=numeric\naxis 0 index values:=0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n```\n\n----------------------------------------\n\nTITLE: Building Module Widgets with SlicerMacroBuildModuleWidgets\nDESCRIPTION: Uses the SlicerMacroBuildModuleWidgets macro to automate the build process. This macro takes various parameters like source files, UI files, target libraries, and other settings to compile, link, and generate the module widgets. It also enables PythonQt wrapping.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Plots/Widgets/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nSlicerMacroBuildModuleWidgets(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  UI_SRCS ${${KIT}_UI_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  RESOURCES ${${KIT}_RESOURCES}\n  WRAP_PYTHONQT\n  )\n```\n\n----------------------------------------\n\nTITLE: Internal Cache Variables for Libraries and Includes CMake\nDESCRIPTION: Sets internal cache variables for Slicer libraries and include directories. These variables are used to store the locations of the base libraries, module logic includes, MRML includes, and module widgets includes.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_59\n\nLANGUAGE: cmake\nCODE:\n```\nset(Slicer_Base_LIBRARIES CACHE INTERNAL \"Slicer Base libraries\" FORCE)\nset(Slicer_Base_INCLUDE_DIRS CACHE INTERNAL \"Slicer Base includes\" FORCE)\nset(Slicer_ModuleLogic_INCLUDE_DIRS CACHE INTERNAL \"Slicer Module logic includes\" FORCE)\nset(Slicer_ModuleMRML_INCLUDE_DIRS CACHE INTERNAL \"Slicer Module MRML includes\" FORCE)\nset(Slicer_ModuleWidgets_INCLUDE_DIRS CACHE INTERNAL \"Slicer Module Widgets includes\" FORCE)\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Target\nDESCRIPTION: This snippet conditionally adds a target for managing the external data if the `SEM_DATA_MANAGEMENT_TARGET` is the same as the module data. This allows for explicit management of external data dependencies for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/CLIExtensionTemplate/CLIModuleTemplate/Testing/Cxx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories to Project\nDESCRIPTION: This snippet manages a list of subdirectories (`dirs`) to be added to the project. It conditionally appends directories based on CMake options like `Slicer_BUILD_vtkAddon` and `Slicer_BUILD_CLI_SUPPORT`. The directories are then iterated over and added as subdirectories using `add_subdirectory()`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(dirs )\n\nlist(APPEND dirs\n  ITKFactoryRegistration\n  )\nset(SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES\n  ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES} ITKFactoryRegistration\n  CACHE INTERNAL \"SlicerExecutionModel extra executable target libraries\" FORCE\n  )\n\nif(Slicer_BUILD_vtkAddon)\n  list(APPEND dirs\n    vtkAddon\n    )\nendif()\n\nlist(APPEND dirs\n  vtkTeem\n  vtkITK\n  vtkSegmentationCore\n  MRML/Core\n  )\nif(Slicer_BUILD_CLI_SUPPORT)\n  list(APPEND dirs MRML/CLI)\nendif()\nlist(APPEND dirs\n  RemoteIO\n  MRML/Logic\n  MRML/DisplayableManager\n  )\nif(Slicer_BUILD_CLI_SUPPORT)\n  list(APPEND dirs MRML/IDImageIO)\nendif()\nlist(APPEND dirs\n  MRML/Widgets\n  )\n\nforeach(dir ${dirs})\n  string(REPLACE \"/\" \"\" dir_noslash ${dir})\n  if(dir_noslash MATCHES \"Widgets$\")\n    set(dir_noslash \"q${dir_noslash}\")\n  endif()\n  set(${dir_noslash}_INSTALL_BIN_DIR ${Slicer_INSTALL_LIB_DIR})\n  set(${dir_noslash}_INSTALL_LIB_DIR ${Slicer_INSTALL_LIB_DIR})\n  set(${dir_noslash}_INSTALL_SHARE_DIR ${Slicer_INSTALL_ROOT}share/${dir_noslash})\n  set(${dir_noslash}_INSTALL_NO_DEVELOPMENT ${Slicer_INSTALL_NO_DEVELOPMENT})\n  set(${dir_noslash}_EXPORT_FILE ${Slicer_BINARY_DIR}/SlicerTargets.cmake)\n  set(${dir_noslash}_FOLDER Core-Libs/${dir_noslash})\n\n  # Check if library sources were specified as a remote module\n  if(DEFINED ${dir}_SOURCE_DIR AND Slicer_BUILD_${dir})\n    message(STATUS \"Configuring library: ${dir} [${dir}_SOURCE_DIR: ${${dir}_SOURCE_DIR}]\")\n    add_subdirectory(\n      ${${dir}_SOURCE_DIR}\n      ${CMAKE_CURRENT_BINARY_DIR}/${dir}\n      )\n  else()\n    message(STATUS \"Configuring library: ${dir}\")\n    add_subdirectory(${dir})\n  endif()\n\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Setting Variables for Qt Designer Plugin Build - CMake\nDESCRIPTION: This snippet sets variables used for building a Qt Designer plugin.  It defines variables such as the kit name, export directive, source files, MOC source files, and target libraries. These variables are later used in the `ctkMacroBuildQtDesignerPlugin` macro.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Terminologies/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT ${PROJECT_NAME}Plugins)\n\nset(${KIT}_EXPORT \"Q_SLICER_MODULE_${MODULE_NAME_UPPER}_WIDGETS_PLUGINS_EXPORT\")\n\nset(${KIT}_SRCS\n  qSlicerTerminologiesModuleWidgetsAbstractPlugin.cxx\n  qSlicerTerminologiesModuleWidgetsAbstractPlugin.h\n  qSlicerTerminologiesModuleWidgetsPlugin.cxx\n  qSlicerTerminologiesModuleWidgetsPlugin.h\n  qSlicerTerminologyNavigatorWidgetPlugin.cxx\n  qSlicerTerminologyNavigatorWidgetPlugin.h\n  )\n\nset(${KIT}_MOC_SRCS\n  qSlicerTerminologiesModuleWidgetsPlugin.h\n  qSlicerTerminologyNavigatorWidgetPlugin.h\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  qSlicerTerminologiesModuleWidgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Example of sub-values in ParameterNode\nDESCRIPTION: This code snippet provides an example of how `ListSerializer` stores separate entries in the underlying `vtkMRMLScriptedModuleNode` for each element of a list, along with the list's size, using a `.` as a separator to avoid name clashes.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/parameter_nodes/advanced/custom_classes.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@parameterNodeWrapper\nclass ParameterNodeWrapper:\n    strings: list[str]\n\nparam = ParameterNodeWrapper(slicer.mrmlScene.AddNewNodeByClass(\"vtkMRMLScriptedModuleNode\"))\nparam.strings = [\"a\", \"b\", \"c\"]\n```\n\n----------------------------------------\n\nTITLE: Header Configuration\nDESCRIPTION: Configures a header file from a template. It takes `itkMRMLIDImageIOConfigure.h.in` from the source directory, processes it, and places the result in the binary directory as `itkMRMLIDImageIOConfigure.h`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/IDImageIO/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(configure_header_file itkMRMLIDImageIOConfigure.h)\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/${configure_header_file}.in\n  ${CMAKE_CURRENT_BINARY_DIR}/${configure_header_file}\n  )\n```\n\n----------------------------------------\n\nTITLE: Color Table TXT Format - Discrete Scale Example\nDESCRIPTION: This is an example of the TXT/CTBL file format for storing a color node with a discrete scale. The file starts with the header `# Color table file`. Each subsequent line represents a color with its index, name (spaces replaced by underscores), red, green, blue, and opacity values (0-255).\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/modules/colors.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n# Color table file C:/Users/andra/OneDrive/Projects/SlicerTesting2022/20220109-ColorLegend/Segmentation-label_ColorTable.ctbl\n# 4 values\n0 Background 0 0 0 0\n1 artery 216 101 79 255\n2 bone 241 214 145 255\n3 connective_tissue 111 184 210 255\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Test Driver CMake\nDESCRIPTION: Configures a C++ test driver using the slicerMacroConfigureModuleCxxTestDriver macro. This macro sets up the test executable, links necessary libraries, and configures options such as leak detection and error output checking. NAME specifies the test name, SOURCES specifies the source files, TARGET_LIBRARIES specifies the libraries to link against, and WITH_VTK_DEBUG_LEAKS_CHECK and WITH_VTK_ERROR_OUTPUT_CHECK enable additional checks.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/Testing/Cxx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nslicerMacroConfigureModuleCxxTestDriver(\n  NAME ${KIT}\n  SOURCES ${KIT_TEST_SRCS}\n  TARGET_LIBRARIES vtkSlicer${MODULE_NAME}ModuleLogic qSlicer${MODULE_NAME}Module\n  WITH_VTK_DEBUG_LEAKS_CHECK\n  WITH_VTK_ERROR_OUTPUT_CHECK\n  )\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding WebEngine Sources\nDESCRIPTION: Conditionally adds web engine-related source files and headers to MRMLWidgets_SRCS and MRMLWidgets_MOC_SRCS if MRML_WIDGETS_HAVE_WEBENGINE_SUPPORT is enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(MRML_WIDGETS_HAVE_WEBENGINE_SUPPORT)\n  list(APPEND MRMLWidgets_SRCS\n    qMRMLExpandingWebView.cxx\n    qMRMLExpandingWebView.h\n    qMRMLExpandingWebView_p.h\n    )\nendif()\n```\n\nLANGUAGE: cmake\nCODE:\n```\nif(MRML_WIDGETS_HAVE_WEBENGINE_SUPPORT)\n  list(APPEND MRMLWidgets_MOC_SRCS\n    qMRMLExpandingWebView.h\n    qMRMLExpandingWebView_p.h\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Test Source Files\nDESCRIPTION: Defines a list of C++ source files for the project's tests.  If `Slicer_USE_PYTHONQT` is enabled, it also includes a Python CLI module test.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCLI/Testing/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT_TEST_SRCS\n  qSlicerCLIExecutableModuleFactoryTest1.cxx\n  qSlicerCLILoadableModuleFactoryTest1.cxx\n  qSlicerCLIModuleTest1.cxx\n  )\nif(Slicer_USE_PYTHONQT)\n  list(APPEND KIT_TEST_SRCS\n    qSlicerPyCLIModuleTest1.cxx\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting INCLUDE_DIRS variable CMake\nDESCRIPTION: This snippet sets the `${PROJECT_NAME}_INCLUDE_DIRS` variable to a list of include directories, including the current source and binary directories. This variable is used to make these directories available as include paths to other projects.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/CMakeLists.txt#_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\nset(${PROJECT_NAME}_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR}\n  CACHE INTERNAL \"${PROJECT_NAME} include dirs\" FORCE)\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Target in CMake\nDESCRIPTION: This snippet adds an external data target using `ExternalData_add_target` if the `SEM_DATA_MANAGEMENT_TARGET` is equal to `${CLP}Data`.  This sets up the data management system.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/OrientScalarVolume/Testing/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Required Version\nDESCRIPTION: Sets the minimum required CMake version for the project.  This ensures that the project is built with a compatible CMake version.  The FATAL_ERROR option causes CMake to stop processing with an error if the version is not met.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/LoadableExtensionTemplate/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16.3...3.19.7 FATAL_ERROR)\n```\n\n----------------------------------------\n\nTITLE: Include Slicer Extension Template Generator (CMake)\nDESCRIPTION: This CMake command includes the 'SlicerExtensionTemplatesGenerator' module, which is responsible for generating extension templates within the Slicer build environment.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(SlicerExtensionTemplatesGenerator)\n```\n\n----------------------------------------\n\nTITLE: Defining MOC Source Files\nDESCRIPTION: This snippet defines the header files that need to be processed by the Meta-Object Compiler (MOC) for Qt support. These files typically contain Qt-specific features such as signals and slots.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/Widgets/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_MOC_SRCS\n  qMRMLTransformDisplayNodeWidget.h\n  qMRMLTransformInfoWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Exclude Source from Wrapping\nDESCRIPTION: Excludes vtkITKNumericTraits.cxx from being wrapped, likely for Python. The WRAP_EXCLUDE property prevents it from being processed by the wrapping tools.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkITK/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset_source_files_properties(\n  vtkITKNumericTraits.cxx\n  WRAP_EXCLUDE\n  )\n```\n\n----------------------------------------\n\nTITLE: Export Target\nDESCRIPTION: Exports the library target to a CMake export file, allowing other projects to easily use the RemoteIO library as a dependency. The export file is named `${PROJECT_NAME}Targets.cmake`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/RemoteIO/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_EXPORT_FILE)\n  set(${PROJECT_NAME}_EXPORT_FILE ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Targets.cmake)\nendif()\nexport(TARGETS ${lib_name} APPEND FILE ${${PROJECT_NAME}_EXPORT_FILE})\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory CMake\nDESCRIPTION: This snippet conditionally adds the `Testing` subdirectory to the build process if the `BUILD_TESTING` option is enabled. This allows for building and running tests for the MRMLWidgets library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/CMakeLists.txt#_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Export Directive\nDESCRIPTION: This snippet sets the `${KIT}_EXPORT_DIRECTIVE` variable, which defines the macro used for exporting symbols from the module's shared library. This ensures that the necessary classes and functions are visible to other modules and applications.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/Widgets/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_EXPORT_DIRECTIVE \"Q_SLICER_MODULE_${MODULE_NAME_UPPER}_WIDGETS_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Automated MRML Module Documentation (Python)\nDESCRIPTION: This code snippet uses the ``automodule`` directive within a reStructuredText block to automatically generate documentation for the Python wrapped MRML module. It specifies that all members, undocumented members, inherited members, and imported members should be included in the documentation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/mrml.md#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: mrml\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :imported-members:\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories in CMake\nDESCRIPTION: This snippet defines the include directories required to compile the module. It includes the current source and binary directories, as well as the MRML and Logic subdirectories. This ensures that the compiler can find all necessary header files. It depends on the CMAKE_CURRENT_SOURCE_DIR and CMAKE_CURRENT_BINARY_DIR variables.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Annotations/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_INCLUDE_DIRECTORIES\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  ${CMAKE_CURRENT_BINARY_DIR}\n  ${CMAKE_CURRENT_SOURCE_DIR}/Logic\n  ${CMAKE_CURRENT_BINARY_DIR}/Logic\n  ${CMAKE_CURRENT_SOURCE_DIR}/MRML\n  ${CMAKE_CURRENT_BINARY_DIR}/MRML\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name with CMake\nDESCRIPTION: This snippet sets the module name using the `set` command in CMake.  It defines the KIT variable to represent the module name based on the MODULE_NAME variable. This is likely used for subsequent build and test configurations.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/Testing/Cxx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT qSlicer${MODULE_NAME}Module)\n```\n\n----------------------------------------\n\nTITLE: Adding Simple Tests\nDESCRIPTION: This snippet adds simple tests using the simple_test macro. It specifies the name of the test and the location of the test executable. It configures two simple tests, referencing the location where the tests are built within the slicer build directory structure.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/Logic/Testing/Cxx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nsimple_test(vtkSlicerVolumeRenderingLogicTest ${Slicer_BINARY_DIR}/${Slicer_QTLOADABLEMODULES_SHARE_DIR}/${MODULE_NAME})\nsimple_test(vtkSlicerVolumeRenderingLogicAddFromFileTest ${Slicer_BINARY_DIR}/Testing/Temporary/)\n```\n\n----------------------------------------\n\nTITLE: Setting Module UI Source Files - CMake\nDESCRIPTION: Lists the Qt Designer UI files used by the module's widgets. These files define the layout and appearance of the user interface components.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Texts/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_UI_SRCS\n  Resources/UI/qSlicer${MODULE_NAME}ModuleWidget.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories\nDESCRIPTION: Adds subdirectories for the Logic and Widgets components of the module. These subdirectories likely contain their own CMakeLists.txt files to manage their respective build processes.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Logic)\nadd_subdirectory(Widgets)\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Test\nDESCRIPTION: This snippet adds a test that uses external data for comparison. It executes the test executable, compares the output to a baseline data file, and sets properties for the test, like labels. The `ExternalData_add_test` command handles the data download and comparison.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/CLIExtensionTemplate/CLIModuleTemplate/Testing/Cxx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(testname ${CLP}Test)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET} NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  --compare DATA{${BASELINE}/${CLP}Test.nhdr,${CLP}Test.raw}\n  ${TEMP}/${CLP}Test.nhdr\n  ModuleEntryPoint\n  --sigma 2.5 DATA{${INPUT}/CTHeadAxial.nhdr,CTHeadAxial.raw.gz} ${TEMP}/${CLP}Test.nhdr\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Setting Input Directory\nDESCRIPTION: This sets the input directory for test data. The value is derived from the MRMLCore source directory, specifically the Testing subdirectory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INPUT ${MRMLCore_SOURCE_DIR}/Testing)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: Lists the source files (.cxx and .h) that make up the module, including the module widget, module, and settings panel. These files contain the actual implementation of the module's functionality.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_SRCS\n  qSlicer${MODULE_NAME}ModuleWidget.cxx\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  qSlicer${MODULE_NAME}Module.cxx\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}SettingsPanel.cxx\n  qSlicer${MODULE_NAME}SettingsPanel.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Install Headers\nDESCRIPTION: Installs the header files to the include directory under the Development component, unless `${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT` is set to OFF.  It uses GLOB to find all *.h files in the source directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/RemoteIO/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT)\n  set(${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT ON)\nendif()\nif(NOT ${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT)\n  file(GLOB headers \"${CMAKE_CURRENT_SOURCE_DIR}/*.h\")\n  install(\n    FILES ${headers} ${CMAKE_CURRENT_BINARY_DIR}/${configure_header_file}\n    DESTINATION include/${PROJECT_NAME} COMPONENT Development)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Customize 3D View Mouse Gestures (Python)\nDESCRIPTION: This snippet modifies the mouse gestures in a 3D view to rotate the view using right-click-and-drag.  It removes the old mapping and assigns the rotate action to the right mouse button. Requires the `slicer` and `vtk` modules to be available in the Python environment.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_63\n\nLANGUAGE: python\nCODE:\n```\nthreeDViewWidget = slicer.app.layoutManager().threeDWidget(0)\ncameraDisplayableManager = threeDViewWidget.threeDView().displayableManagerByClassName(\"vtkMRMLCameraDisplayableManager\")\ncameraWidget = cameraDisplayableManager.GetCameraWidget()\n\n# Remove old mapping from right-click-and-drag\ncameraWidget.SetEventTranslationClickAndDrag(cameraWidget.WidgetStateIdle, vtk.vtkCommand.RightButtonPressEvent, vtk.vtkEvent.NoModifier,\n  cameraWidget.WidgetStateRotate, vtk.vtkWidgetEvent.NoEvent, vtk.vtkWidgetEvent.NoEvent)\n\n# Make right-click-and-drag rotate the view\ncameraWidget.SetEventTranslationClickAndDrag(cameraWidget.WidgetStateIdle, vtk.vtkCommand.RightButtonPressEvent, vtk.vtkEvent.NoModifier,\n  cameraWidget.WidgetStateRotate, cameraWidget.WidgetEventRotateStart, cameraWidget.WidgetEventRotateEnd)\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Test (Commented)\nDESCRIPTION: This commented-out line suggests the use of a function `simple_test` to add a simple test for the module.  The test name is `qSlicer${MODULE_NAME}ModuleTest`.  The commenting indicates that this test setup is not currently active.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperLoadableModuleTemplate/Testing/Cxx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n#simple_test(qSlicer${MODULE_NAME}ModuleTest)\n```\n\n----------------------------------------\n\nTITLE: Overriding GetRASBounds() and GetBounds() for MRML Nodes\nDESCRIPTION: These snippets illustrate overriding the `GetRASBounds()` and `GetBounds()` methods, allowing the \"Center the 3D view on scene\" functionality to work correctly for custom MRML nodes.  `GetRASBounds` returns bounds after transforms, while `GetBounds` returns pre-transform bounds.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/mrml_overview.md#_snippet_20\n\nLANGUAGE: C++\nCODE:\n```\nvoid GetRASBounds(double bounds[6])\n```\n\nLANGUAGE: C++\nCODE:\n```\nvoid GetBounds(double bounds[6])\n```\n\n----------------------------------------\n\nTITLE: Setting Python version using find_package and execute_process - CMake\nDESCRIPTION: This code snippet uses `find_package` to locate the PythonLibs and PythonInterp packages with the specified version. It extracts the Python library path and version information using `execute_process` to run Python code and retrieve attributes such as major, minor, and micro version numbers. The extracted version information is then used to set CMake variables for the Slicer project. It depends on Slicer_USE_PYTHONQT being enabled and having a defined Slicer_REQUIRED_PYTHON_VERSION_DOT.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_66\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_USE_PYTHONQT)\n  find_package(PythonLibs ${Slicer_REQUIRED_PYTHON_VERSION_DOT} REQUIRED)\n  find_package(PythonInterp ${Slicer_REQUIRED_PYTHON_VERSION_DOT} REQUIRED)\n\n  # Extract python lib path\n  get_filename_component(PYTHON_DIR_PATH ${PYTHON_EXECUTABLE} PATH)\n  set(PYTHON_LIBRARY_PATH ${PYTHON_DIR_PATH}/../lib)\n  if(WIN32)\n    set(PYTHON_LIBRARY_PATH ${PYTHON_DIR_PATH})\n  endif()\n\n  # Extract python version components\n  ctkMacroSetPaths(\"${PYTHON_LIBRARY_PATH}\")\n  function(_python_sys_attribute attribute varname)\n    execute_process(\n      COMMAND ${PYTHON_EXECUTABLE} -c \"import sys; print(sys.${attribute})\"\n      OUTPUT_VARIABLE value\n      OUTPUT_STRIP_TRAILING_WHITESPACE)\n    set(${varname} ${value} PARENT_SCOPE)\n  endfunction()\n\n  _python_sys_attribute(\"version_info.major\" Slicer_PYTHON_VERSION_MAJOR)\n  _python_sys_attribute(\"version_info.minor\" Slicer_PYTHON_VERSION_MINOR)\n  _python_sys_attribute(\"version_info.micro\" Slicer_PYTHON_VERSION_PATCH)\n  _python_sys_attribute(\"abiflags\" Slicer_PYTHON_ABIFLAGS)\n\n  set(Slicer_PYTHON_VERSION_DOT \"${Slicer_PYTHON_VERSION_MAJOR}.${Slicer_PYTHON_VERSION_MINOR}\")\n  set(Slicer_PYTHON_VERSION \"${Slicer_PYTHON_VERSION_MAJOR}${Slicer_PYTHON_VERSION_MINOR}\")\n\n  message(STATUS \"Configuring ${Slicer_MAIN_PROJECT_APPLICATION_NAME} with python ${Slicer_PYTHON_VERSION_DOT}${Slicer_PYTHON_ABIFLAGS}\")\n\n  set(CTK_COMPILE_PYTHON_SCRIPTS_GLOBAL_TARGET_NAME \"Slicer\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Target Properties\nDESCRIPTION: Applies user-defined properties to the library target, such as compile flags or other build settings. This allows for customization of the build process based on project-specific requirements.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/RemoteIO/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_LIBRARY_PROPERTIES)\n  set_target_properties(${lib_name} PROPERTIES ${Slicer_LIBRARY_PROPERTIES})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Module Include Directories in CMake\nDESCRIPTION: Sets the include directories for the module. These directories contain header files that are needed to compile the module's source code. They include source and binary directories for Logic and Widgets, allowing access to necessary header files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Sequences/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_INCLUDE_DIRECTORIES\n  ${CMAKE_CURRENT_SOURCE_DIR}/Logic\n  ${CMAKE_CURRENT_BINARY_DIR}/Logic\n  ${CMAKE_CURRENT_SOURCE_DIR}/Widgets\n  ${CMAKE_CURRENT_BINARY_DIR}/Widgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Markups Point List JSON Format Example\nDESCRIPTION: This JSON snippet demonstrates the structure for storing a markups point list with three fiducial points.  It includes the schema definition, coordinate system (LPS), and the position and label for each control point. This file format allows for precise definition and storage of fiducial points with associated metadata.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/modules/markups.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\"@schema\": \"https://raw.githubusercontent.com/Slicer/Slicer/main/Modules/Loadable/Markups/Resources/Schema/markups-schema-v1.0.0.json#\",\n\"markups\": [{\"type\": \"Fiducial\", \"coordinateSystem\": \"LPS\", \"controlPoints\": [\n    { \"label\": \"F-1\", \"position\": [-53.388409961685827, -73.33572796934868, 0.0] },\n    { \"label\": \"F-2\", \"position\": [49.8682950191571, -88.58955938697324, 0.0] },\n    { \"label\": \"F-3\", \"position\": [-25.22749042145594, 59.255268199233729, 0.0] }\n]}]}\n```\n\n----------------------------------------\n\nTITLE: Add Cxx Subdirectory using CMake\nDESCRIPTION: This command instructs CMake to include the CMakeLists.txt file found in the 'Cxx' subdirectory for processing. This allows the 'Cxx' directory's build targets and instructions to be incorporated into the overall Slicer project build configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/GeneralizedReformat/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Target in CMake\nDESCRIPTION: This code conditionally adds an external data target using `ExternalData_add_target`. It checks if `SEM_DATA_MANAGEMENT_TARGET` is equal to `${CLP}Data`. If they are equal, it adds an external data target named `${CLP}Data`.  This step prepares the external data for use within the module's build and test processes.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/SimpleRegionGrowingSegmentation/Testing/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: This snippet sets the include directories required to compile the module. These directories include the source and binary directories of other related modules and the current binary directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/MRMLDM/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSlicer${MODULE_NAME}ModuleLogic_SOURCE_DIR}\n  ${vtkSlicer${MODULE_NAME}ModuleLogic_BINARY_DIR}\n  ${vtkSlicer${MODULE_NAME}ModuleMRML_SOURCE_DIR}\n  ${vtkSlicer${MODULE_NAME}ModuleMRML_BINARY_DIR}\n  ${CMAKE_CURRENT_BINARY_DIR}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Include Directories\nDESCRIPTION: Sets the MODULE_INCLUDE_DIRECTORIES CMake variable. This specifies the directories that the compiler should search for header files when compiling the module. It includes source and binary directories for Logic, MRML and Widgets, as well as include directories for qSlicerMarkupsModuleWidgets.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/LoadableCustomMarkups/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_INCLUDE_DIRECTORIES\n  ${CMAKE_CURRENT_SOURCE_DIR}/Logic\n  ${CMAKE_CURRENT_BINARY_DIR}/Logic\n  ${CMAKE_CURRENT_SOURCE_DIR}/MRML\n  ${CMAKE_CURRENT_BINARY_DIR}/MRML\n  ${CMAKE_CURRENT_SOURCE_DIR}/Widgets\n  ${CMAKE_CURRENT_BINARY_DIR}/Widgets\n  ${qSlicerMarkupsModuleWidgets_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Resources\nDESCRIPTION: Sets the `${KIT}_RESOURCES` variable to a list of resource files (.qrc). These files contain resources like images, icons, and other data used by the application.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_RESOURCES\n  Resources/${KIT}.qrc\n\n  )\n```\n\n----------------------------------------\n\nTITLE: Source Properties Configuration CMake\nDESCRIPTION: Excludes vtkMRMLDisplayableManagerGroup.cxx from wrapping.  Conditionally excludes vtkMRMLScriptedDisplayableManager.cxx from wrapping if MRMLDisplayableManager_USE_PYTHON is enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/DisplayableManager/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset_source_files_properties(\n  vtkMRMLDisplayableManagerGroup.cxx\n  WRAP_EXCLUDE\n  )\n\nif(MRMLDisplayableManager_USE_PYTHON)\n  list(APPEND KIT_SRCS\n    vtkMRMLScriptedDisplayableManager.cxx\n    )\n  set_source_files_properties(\n    vtkMRMLScriptedDisplayableManager.cxx\n    WRAP_EXCLUDE\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Baseline and Input Paths in CMake\nDESCRIPTION: Defines CMake variables for the baseline and input data directories used in tests. These variables are later used to specify the location of input data and expected output for comparison during testing. The paths are relative to the current source directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MedianImageFilter/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(BASELINE ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Baseline)\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input)\n```\n\n----------------------------------------\n\nTITLE: Set Legacy CLI Modules List\nDESCRIPTION: Defines a separate list of legacy CLI modules, including 'FiducialRegistration' and 'ResampleScalarVolume'. These modules are conditionally included based on Slicer_BUILD_LEGACY_CLI.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_BUILD_LEGACY_CLI)\n  set(legacy_cli_modules\n    FiducialRegistration\n    ResampleScalarVolume\n    )\n  if(BUILD_TESTING)\n    list(APPEND legacy_cli_modules\n      DiffusionTensorTest\n      TestGridTransformRegistration\n      )\n  endif()\n  list(APPEND cli_modules ${legacy_cli_modules})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Variables for Directories\nDESCRIPTION: This snippet defines variables for the baseline, input, and temporary directories used in testing. These variables store the paths to where the baseline data, input data, and temporary test results are located respectively. These paths are used later in the testing setup to locate the required files and directories.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/CLI/Testing/Cxx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(BASELINE ${CMAKE_CURRENT_SOURCE_DIR}/../../Data/Baseline)\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../../Data/Input)\nset(TEMP \"${CMAKE_BINARY_DIR}/Testing/Temporary\")\n\nset(CLP ${MODULE_NAME})\n\nif(NOT DEFINED SEM_DATA_MANAGEMENT_TARGET)\n  set(SEM_DATA_MANAGEMENT_TARGET ${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Homebrew bump-cask-pr command - shell\nDESCRIPTION: This command uses Homebrew's `bump-cask-pr` command to create a pull request updating the Slicer cask.  It specifies the new version and build number for the stable release. Requires the `brew` command to be available.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/macos.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ brew bump-cask-pr --version 4.11.20210226,1442768 slicer\n```\n\n----------------------------------------\n\nTITLE: Configure Cxx Test Driver in CMake\nDESCRIPTION: This snippet configures a C++ test driver for the Slicer module using the `slicerMacroConfigureModuleCxxTestDriver` macro. It sets the module name, test sources, and enables VTK's debug leak check and error output check.  The macro is used to generate a test executable for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/Logic/Testing/Cxx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nslicerMacroConfigureModuleCxxTestDriver(\n  NAME ${KIT}\n  SOURCES ${KIT_TEST_SRCS}\n  WITH_VTK_DEBUG_LEAKS_CHECK\n  WITH_VTK_ERROR_OUTPUT_CHECK\n  )\n```\n\n----------------------------------------\n\nTITLE: Opening .mrb file via command line (Console)\nDESCRIPTION: Opens a .mrb file (Slicer scene) by executing the `Slicer.exe` command with the `--python-code` option.  This command directly executes a Python command to load the scene.  Requires Slicer installation and a valid .mrb file path.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nSlicer.exe --python-code \"slicer.util.loadScene('f:/2013-08-23-Scene.mrb')\"\n```\n\n----------------------------------------\n\nTITLE: Setting Export Directive\nDESCRIPTION: Sets the export directive for the module.  This directive controls symbol visibility when the module is built and linked with other components.  The `VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_MRML_EXPORT` macro is used to ensure proper symbol management during the build process, preventing linking errors and ensuring proper module interaction.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/MRML/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_MRML_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Finding Slicer package\nDESCRIPTION: Finds the Slicer package using CMake's `find_package` command, making the Slicer libraries and include directories available for use in the extension. It requires the Slicer package to be present in the system's CMake module path. The `REQUIRED` keyword enforces that the build will fail if slicer cannot be found.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/CLIExtensionTemplate/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Slicer REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Python Subject Hierarchy Plugin Example\nDESCRIPTION: Demonstrates how to create a Python plugin for the Subject Hierarchy in 3D Slicer.  This involves creating a child class of AbstractScriptedSubjectHierarchyPlugin. This provides the structure for custom functionality and data node type support.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/modules/data.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# Child class of AbstractScriptedSubjectHierarchyPlugin which is a Python adaptor of the C++ qSlicerSubjectHierarchyScriptedPlugin class\n# Example: [role plugin](https://github.com/SlicerHeart/SlicerHeart/blob/master/ValveAnnulusAnalysis/HeartValveLib/HeartValvesSubjectHierarchyPlugin.py) in SlicerHeart extension, [function plugin](https://github.com/Slicer/Slicer/blob/main/Modules/Scripted/SegmentEditor/SubjectHierarchyPlugins/SegmentEditorSubjectHierarchyPlugin.py) in Segment Editor module\n```\n\n----------------------------------------\n\nTITLE: Including Subdirectory in CMake\nDESCRIPTION: This CMake command adds the specified subdirectory to the build process.  It allows the CMake project to recursively include and process CMakeLists.txt files within the 'Cxx' directory. This is essential for modularizing projects and managing dependencies between different components.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Plots/Widgets/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Defining CLP and Data Management Target\nDESCRIPTION: This snippet defines the module name (`CLP`) and sets the data management target. It uses `set` to assign the module name. It also includes a conditional check to assign a default value to `SEM_DATA_MANAGEMENT_TARGET` if it's not already defined.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/SubtractScalarVolumes/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(CLP ${MODULE_NAME})\n\nif(NOT DEFINED SEM_DATA_MANAGEMENT_TARGET)\n  set(SEM_DATA_MANAGEMENT_TARGET ${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting MOC Source Files CMake\nDESCRIPTION: This snippet specifies the header files that need to be processed by the Meta-Object Compiler (MOC). These are typically Qt header files that use signals and slots.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOMLib/Widgets/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_MOC_SRCS\n  qSlicerDICOMExportDialog.h\n  qSlicerDICOMLoadable.h\n  qSlicerDICOMExportable.h\n  qSlicerDICOMTagEditorWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Kit Variable\nDESCRIPTION: Sets the KIT variable to the project name, which is later used for defining other variables.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/Logic/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Setting MOC Source Files\nDESCRIPTION: Lists the header files that require processing by the Meta-Object Compiler (MOC). The MOC generates code for Qt's signals and slots mechanism.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/LoadableExtensionTemplate/LoadableModuleTemplate/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_MOC_SRCS\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding ExternalData Test (CMake)\nDESCRIPTION: This snippet adds a test using `ExternalData_add_test` to compare a masked volume generated by the module with a baseline. It defines the test name, the command to execute, and input/output data paths. The `SEM_LAUNCH_COMMAND` macro is assumed to be predefined to launch the Slicer execution model.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MaskScalarVolume/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(testname ${CLP}Test)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  --compare DATA{${BASELINE}/MaskedVolume.nrrd}\n  ${TEMP}/MaskedVolume.nrrd\n  ModuleEntryPoint --label 1\n  DATA{${INPUT}/CTHeadAxial.nhdr,CTHeadAxial.raw.gz} DATA{${INPUT}/CTHeadAxialMask.nrrd} ${TEMP}/MaskedVolume.nrrd\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Documenting Slicer Testing Module\nDESCRIPTION: This snippet uses the `automodule` directive within reStructuredText to generate API documentation for the `slicer.testing` module. It includes all members, even those not explicitly documented, and displays inheritance information.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/slicer.md#_snippet_4\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: slicer.testing\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories in CMake\nDESCRIPTION: Adds subdirectories for MRML, Logic, MRMLDM, EditorEffects, Widgets, and SubjectHierarchyPlugins. Each subdirectory likely contains its own CMakeLists.txt file for building the corresponding part of the Segmentations module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(MRML)\nadd_subdirectory(Logic)\nadd_subdirectory(MRMLDM)\nadd_subdirectory(EditorEffects)\nadd_subdirectory(Widgets)\nadd_subdirectory(SubjectHierarchyPlugins)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories - CMake\nDESCRIPTION: These commands add the Logic and Widgets subdirectories to the build process.  These subdirectories likely contain the core logic and user interface widgets for the Terminologies module, respectively. CMake will process the CMakeLists.txt files within these subdirectories.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Terminologies/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Logic)\nadd_subdirectory(Widgets)\n```\n\n----------------------------------------\n\nTITLE: Including SlicerPackageAndUploadTarget CMake module\nDESCRIPTION: This CMake snippet includes the `SlicerPackageAndUploadTarget` module. This module presumably handles the packaging and uploading of the Slicer application, although the exact implementation details are hidden within the included file.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMake/LastConfigureStep/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(SlicerPackageAndUploadTarget)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Append MOC Source Files in CMake\nDESCRIPTION: Conditionally appends header files to the list of headers to be processed by moc, based on the value of the `MRML_WIDGETS_HAVE_WEBENGINE_SUPPORT` variable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(MRML_WIDGETS_HAVE_WEBENGINE_SUPPORT)\n  list(APPEND ${KIT}_MOC_SRCS\n    qMRMLExpandingWebViewPlugin.h\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Attach GDB to running Slicer process (Bash)\nDESCRIPTION: This command attaches the GDB debugger to a running Slicer process, using the process ID (PID) obtained previously.  Replace `$PIDABOVE` with the actual PID.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/debugging/linuxcpp.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ gdb --pid $PIDABOVE\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory\nDESCRIPTION: This conditional statement adds the Testing subdirectory to the build if BUILD_TESTING is enabled.  This is a standard way to integrate unit tests into the CMake build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleScalarVectorDWIVolume/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Test Source Files\nDESCRIPTION: Defines a list of C++ source files that contain the tests to be executed for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Sequences/Testing/Cxx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT_TEST_SRCS\n  vtkMRMLSequenceBrowserNodeTest1.cxx\n  vtkMRMLSequenceNodeTest1.cxx\n  vtkSlicerSequencesLogicTest1.cxx\n  vtkMRMLSequenceStorageNodeTest1.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Temporary Directory and Input Data Paths\nDESCRIPTION: This snippet sets CMake variables to define paths for temporary files and input data used in tests. `Slicer_BINARY_DIR`, `MRMLCore_SOURCE_DIR`, and `Slicer_SOURCE_DIR` are assumed to be pre-defined CMake variables pointing to the respective directories. The set variables are then used in later test definitions.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/Testing/Cxx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(TEMP ${Slicer_BINARY_DIR}/Testing/Temporary)\nset(MRML_CORE_INPUT ${MRMLCore_SOURCE_DIR}/Testing/TestData/)\nset(SLICERAPP_INPUT ${Slicer_SOURCE_DIR}/Applications/SlicerApp/Data/Input/)\n```\n\n----------------------------------------\n\nTITLE: Setting up Documentation Directory and Tarball\nDESCRIPTION: This snippet defines variables for the package name, documentation directory, and tarball location. The documentation directory is determined by the CMake binary directory, and the tarball is stored in the `DOCUMENTATION_ARCHIVES_OUTPUT_DIRECTORY`. The package naming convention includes the major and minor version numbers.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Scripts/SlicerWizard/doc/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(pkg Slicer-${Slicer_VERSION_MAJOR}.${Slicer_VERSION_MINOR})\nset(docdir \"${CMAKE_BINARY_DIR}/share/doc/${pkg}/SlicerWizard\")\nset(tarball \"${DOCUMENTATION_ARCHIVES_OUTPUT_DIRECTORY}/SlicerWizard.tar.gz\")\n```\n\n----------------------------------------\n\nTITLE: Source File Definition - CMake\nDESCRIPTION: Defines the source files (SRCS), MOC sources (MOC_SRCS), UI sources (UI_SRCS), and resource files (RESOURCES) that are part of the module. These variables are later used in the SlicerMacroBuildModuleQtLibrary macro.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Texts/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  qSlicerSubjectHierarchy${MODULE_NAME}Plugin.cxx\n  qSlicerSubjectHierarchy${MODULE_NAME}Plugin.h\n  )\n\nset(${KIT}_MOC_SRCS\n  qSlicerSubjectHierarchy${MODULE_NAME}Plugin.h\n  )\n\nset(${KIT}_UI_SRCS\n  )\n\nset(${KIT}_RESOURCES\n  Resources/${KIT}.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: MOC Source File Definitions\nDESCRIPTION: This snippet defines the header files that require processing by the Meta-Object Compiler (MOC).  It ensures that Qt's signal and slot mechanism works correctly.  PythonQt-specific headers are also included conditionally.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/EditorEffects/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_MOC_SRCS\n  qSlicerSegmentEditorEffectFactory.h\n  qSlicerSegmentEditorAbstractEffect.h\n  qSlicerSegmentEditorAbstractEffect_p.h\n  qSlicerSegmentEditorAbstractLabelEffect.h\n  qSlicerSegmentEditorAbstractLabelEffect_p.h\n  qSlicerSegmentEditorPaintEffect.h\n  qSlicerSegmentEditorPaintEffect_p.h\n  qSlicerSegmentEditorEraseEffect.h\n  qSlicerSegmentEditorScissorsEffect.h\n  )\nif(Slicer_USE_PYTHONQT)\n  list(APPEND ${KIT}_MOC_SRCS\n    qSlicerSegmentEditorScriptedEffect.h\n    qSlicerSegmentEditorScriptedLabelEffect.h\n    qSlicerSegmentEditorScriptedPaintEffect.h\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Fixing GDB Python issues (Bash)\nDESCRIPTION: When debugging Slicer with GDB, inconsistencies between GDB's Python and Slicer's Python might cause errors. This snippet shows how to copy Slicer's sysconfigdata file to the location expected by GDB to resolve issues with missing `_sysconfigdata__linux_x86_64-linux-gnu.py` file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/debugging/linuxcpp.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/Slicer-4.13.0-2021-09-10-linux-amd64/lib/Python/lib/python3.6\ncp _sysconfigdata_m_linux2_.py _sysconfigdata__linux_x86_64-linux-gnu.py\n```\n\n----------------------------------------\n\nTITLE: Set Test Sources\nDESCRIPTION: This snippet defines the source files for the module's tests.  Currently, the test source is commented out, indicating that it may not be actively used or implemented.  ${KIT_TEST_SRCS} is a variable that stores the list of test source files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/LoadableExtensionTemplate/LoadableModuleTemplate/Testing/Cxx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT_TEST_SRCS\n  #qSlicer${MODULE_NAME}ModuleTest.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Include Directories in CMake\nDESCRIPTION: This snippet defines the include directories needed for the module. It aggregates directories from various Slicer modules and MRML libraries. These directories are used to locate header files during compilation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOMLib/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSlicerSubjectHierarchyModuleLogic_INCLUDE_DIRS}\n  ${qSlicerSubjectHierarchyModuleWidgets_INCLUDE_DIRS}\n  ${qSlicerDICOMLibModuleWidgets_INCLUDE_DIRS}\n  ${MRMLCore_INCLUDE_DIRS}\n  ${MRMLLogic_INCLUDE_DIRS}\n  ${qMRMLWidgets_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files - CMake\nDESCRIPTION: Lists the C++ source and header files that make up the module's widgets. These files define the functionality and user interface elements of the widgets.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Widgets/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  qMRML${MODULE_NAME}DisplayNodeWidget.cxx\n  qMRML${MODULE_NAME}DisplayNodeWidget.h\n  qMRML${MODULE_NAME}FiducialProjectionPropertyWidget.cxx\n  qMRML${MODULE_NAME}FiducialProjectionPropertyWidget.h\n  qMRML${MODULE_NAME}InteractionHandleWidget.cxx\n  qMRML${MODULE_NAME}InteractionHandleWidget.h\n  qMRML${MODULE_NAME}ToolBar.cxx\n  qMRML${MODULE_NAME}ToolBar.h\n  qMRML${MODULE_NAME}ToolBar_p.h\n  qMRML${MODULE_NAME}PlaneWidget.cxx\n  qMRML${MODULE_NAME}PlaneWidget.h\n  qMRML${MODULE_NAME}ROIWidget.cxx\n  qMRML${MODULE_NAME}ROIWidget.h\n  qMRML${MODULE_NAME}AbstractOptionsWidget.cxx\n  qMRML${MODULE_NAME}AbstractOptionsWidget.h\n  qMRML${MODULE_NAME}AngleMeasurementsWidget.h\n  qMRML${MODULE_NAME}AngleMeasurementsWidget.cxx\n  qMRML${MODULE_NAME}CurveSettingsWidget.h\n  qMRML${MODULE_NAME}CurveSettingsWidget.cxx\n  qMRML${MODULE_NAME}OptionsWidgetsFactory.h\n  qMRML${MODULE_NAME}OptionsWidgetsFactory.cxx\n  qSlicer${MODULE_NAME}PlaceWidget.cxx\n  qSlicer${MODULE_NAME}PlaceWidget.h\n  qSlicerSimpleMarkupsWidget.cxx\n  qSlicerSimpleMarkupsWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Set Include Directories\nDESCRIPTION: Sets the include directories required for compiling the module widgets. It includes the source and binary directories of the module logic, and the include directories of qSlicerMarkupsModuleWidgets. These paths are expected to be set elsewhere.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/LoadableCustomMarkups/Widgets/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSlicer${MODULE_NAME}ModuleLogic_SOURCE_DIR}\n  ${vtkSlicer${MODULE_NAME}ModuleLogic_BINARY_DIR}\n  ${qSlicerMarkupsModuleWidgets_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Documenting Slicer CLI Module\nDESCRIPTION: This snippet uses the `automodule` directive within reStructuredText to generate API documentation for the `slicer.cli` module. It includes all members, even those not explicitly documented, and displays inheritance information.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/slicer.md#_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: slicer.cli\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Setting Module MOC Source Files - CMake\nDESCRIPTION: Specifies the header files that require processing by the Qt Meta Object Compiler (moc). This is necessary for classes that use Qt's signals, slots, and properties system.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Texts/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_MOC_SRCS\n  qSlicer${MODULE_NAME}Module.h\n  qSlicer${MODULE_NAME}ModuleWidget.h\n  qSlicer${MODULE_NAME}Reader.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Project Initialization - CMake\nDESCRIPTION: Initializes the CMake project named qSlicer${MODULE_NAME}ModuleWidgets. This is the starting point for defining the project's build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/Widgets/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(qSlicer${MODULE_NAME}ModuleWidgets)\n```\n\n----------------------------------------\n\nTITLE: Include SlicerBlockBuildPackageAndUploadExtensions\nDESCRIPTION: Includes the SlicerBlockBuildPackageAndUploadExtensions module. This module likely contains the logic for building, packaging, and uploading the extensions.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/CMake/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(SlicerBlockBuildPackageAndUploadExtensions)\n```\n\n----------------------------------------\n\nTITLE: Running Slicer executable\nDESCRIPTION: This snippet shows how to run the Slicer executable after the build process has completed. It first changes the directory to the inner-build folder (`Slicer-build`) and then executes the `Slicer` executable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/linux.md#_snippet_17\n\nLANGUAGE: console\nCODE:\n```\ncd Slicer-build\n./Slicer`\n```\n\n----------------------------------------\n\nTITLE: Add Storable Data After Scene View Test (Disabled)\nDESCRIPTION: This snippet defines a test case for adding storable data after a scene view is created. The test is currently disabled and marked for future fixes. It involves building a scripted module and executing a Python unit test using the Slicer launcher.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SceneViews/Testing/Python/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Disabled scene view tests for now - they will be fixed in upcoming commit\n#\n# include(SlicerMacroBuildScriptedModule)\n#\n# # Test adding new storable data after creating a scene view\n# slicerMacroBuildScriptedModule(\n#   NAME AddStorableDataAfterSceneViewTest\n#   SCRIPTS AddStorableDataAfterSceneViewTest.py\n# )\n# slicer_add_python_unittest(SCRIPT AddStorableDataAfterSceneViewTest.py\n#                            SLICER_ARGS --disable-cli-modules)\n# set_property(TEST py_AddStorableDataAfterSceneViewTest PROPERTY LABELS ${MODULE_NAME})\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory (Conditional) - CMake\nDESCRIPTION: This conditionally adds a Testing subdirectory if the `BUILD_TESTING` variable is enabled. This allows for adding unit tests and other testing infrastructure for the module. The snippet is currently commented out suggesting testing may be disabled or handled elsewhere.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Terminologies/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  # add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Executable and Linking Libraries in CMake\nDESCRIPTION: Creates an executable named `${CLP}Test` from the source file `${CLP}Test.cxx`. It then links this executable with the `${CLP}Lib` library and any extra libraries specified by `SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES`. Finally, it sets properties like labels and folder for the target.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MedianImageFilter/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nctk_add_executable_utf8(${CLP}Test ${CLP}Test.cxx)\ntarget_link_libraries(${CLP}Test ${CLP}Lib ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES})\nset_target_properties(${CLP}Test PROPERTIES LABELS ${CLP})\nset_target_properties(${CLP}Test PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Querying node properties using slicerio\nDESCRIPTION: This code snippet shows how to query the properties of a node in Slicer using the `slicerio.server.node_properties` function. It employs the `slicerio` package to interact with the Slicer REST API. The code retrieves the properties of the node named \"Segmentation\" and prints the name and color of each segment within the segmentation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/modules/webserver.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nproperties = slicerio.server.node_properties(name=\"Segmentation\")[0]\nsegments = properties[\"Segmentation\"][\"Segments\"]\nfor segmentId in segments:\n    segment = segments[segmentId]\n    print(f\"{segment['Name']} color: {segment['Color']}\")\n```\n\n----------------------------------------\n\nTITLE: Adding a subdirectory in CMake\nDESCRIPTION: This CMake command adds a subdirectory named 'Cxx' to the current CMake project. This allows the CMakeLists.txt file located within the 'Cxx' directory to be processed during the build configuration phase.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/Logic/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Setting Input Directory\nDESCRIPTION: This snippet sets the input directory for testing resources using the `set` command. The variable `INPUT` is assigned the value of `${MRMLCore_SOURCE_DIR}/Testing`, specifying the directory where test input files are located.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INPUT ${MRMLCore_SOURCE_DIR}/Testing)\n```\n\n----------------------------------------\n\nTITLE: Adding Data Target in CMake\nDESCRIPTION: This snippet conditionally adds a data target using `ExternalData_add_target`. If the `SEM_DATA_MANAGEMENT_TARGET` is equal to `${CLP}Data`, the `${CLP}Data` target is added.  This ensures that the necessary data files are available for the module's tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/RobustStatisticsSegmenter/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory (CMake)\nDESCRIPTION: This conditional statement checks if testing is enabled (BUILD_TESTING). If enabled, it adds the `Testing` subdirectory to the build process. This allows for including and running tests for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/Logic/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: Specifies the include directories needed to compile the module's widgets. These directories contain header files for the module's logic component.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Widgets/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSlicer${MODULE_NAME}ModuleLogic_SOURCE_DIR}\n  ${vtkSlicer${MODULE_NAME}ModuleLogic_BINARY_DIR}\n  )\n```\n\n----------------------------------------\n\nTITLE: Include Cxx Subdirectory - CMake\nDESCRIPTION: This CMake command includes the 'Cxx' subdirectory in the current build process. It allows CMake to process the CMakeLists.txt file located in the 'Cxx' directory and integrate its build targets into the overall project build.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/CLI/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries\nDESCRIPTION: This snippet specifies the libraries that the module depends on. It includes the MRML libraries and the logic, MRML, and VTKWidgets modules for the specific module being configured. These libraries are linked during the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/MRMLDM/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  ${MRML_LIBRARIES}\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  vtkSlicer${MODULE_NAME}ModuleMRML\n  vtkSlicer${MODULE_NAME}ModuleVTKWidgets\n)\n```\n\n----------------------------------------\n\nTITLE: Error Message in VTK Classes (C++)\nDESCRIPTION: This snippet demonstrates how to log an error message in VTK-based classes using `vtkErrorMacro()`. It checks for an error condition and logs the message along with a return statement to stop further execution.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/style_guide.md#_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\nif (somethingWrongHappened)\n  {\n  vtkErrorMacro(\"I encountered an error\");\n  return;\n  }\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name in CMake\nDESCRIPTION: Sets the module name using CMake's `set` command.  The `MODULE_NAME` variable is incorporated into the final module name. This configuration is essential for defining the target name when building the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Cameras/Testing/Cxx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT qSlicer${MODULE_NAME}Module)\n```\n\n----------------------------------------\n\nTITLE: Using vtkMRMLMarkupsFiducialNode with parameterNodeWrapper in Python\nDESCRIPTION: This code demonstrates how to use `vtkMRMLMarkupsFiducialNode` with the `@parameterNodeWrapper` decorator. It imports the necessary modules and defines a custom parameter node with a markup and a list of markups, both of type `vtkMRMLMarkupsFiducialNode`. This snippet showcases how to work with MRML nodes from non-core modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/parameter_nodes/supported_types.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom slicer.parameterNodeWrapper import *\nfrom slicer import vtkMRMLMarkupsFiducialNode\n\n@parameterNodeWrapper\nclass CustomParameterNode:\n  markup: vtkMRMLMarkupsFiducialNode\n  markups: list[vtkMRMLMarkupsFiducialNode]\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Ubuntu 24.04\nDESCRIPTION: This command installs necessary dependencies for 3D Slicer to run correctly on Ubuntu 24.04 (Noble Numbat). It uses the `apt-get` package manager with sudo privileges.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/getting_started.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nsudo apt-get install libglu1-mesa libpulse-mainloop-glib0 libnss3 libasound2t64 qt5dxcb-plugin\n```\n\n----------------------------------------\n\nTITLE: ExternalData Configuration for Test Data CMake\nDESCRIPTION: Configures ExternalData for test data retrieval. It appends a URL template to the `ExternalData_URL_TEMPLATES` list and includes the `ExternalData` module. It then sets the `Slicer_ExternalData_OBJECT_STORES` and `Slicer_ExternalData_URL_TEMPLATES` variables.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_60\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND ExternalData_URL_TEMPLATES \"https://github.com/Slicer/SlicerTestingData/releases/download/%(algo)/%(hash)\")\ninclude(ExternalData)\nset(Slicer_ExternalData_OBJECT_STORES ${ExternalData_OBJECT_STORES})\nset(Slicer_ExternalData_URL_TEMPLATES ${ExternalData_URL_TEMPLATES})\n```\n\n----------------------------------------\n\nTITLE: Access Top Level DICOM Tags in Python\nDESCRIPTION: Accesses top-level tags of DICOM images imported into Slicer. It retrieves patient, study, series, and file information from the DICOM database and prints the value of a specified DICOM tag (e.g., \"0020,0032\" or StudyDate) from the database cache. pydicom is used to get tag group and number from tag name.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/dicom.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndb = slicer.dicomDatabase\npatientList = db.patients()\nstudyList = db.studiesForPatient(patientList[0])\nseriesList = db.seriesForStudy(studyList[0])\nfileList = db.filesForSeries(seriesList[0])\n# Note, fileValue accesses the database of cached top level tags\n# (nested tags are not included)\nprint(db.fileValue(fileList[0], \"0020,0032\"))\n# Get tag group,number from dicom dictionary\nimport pydicom as dicom\ntagName = \"StudyDate\"\ntagStr = str(dicom.tag.Tag(tagName))[1:-1].replace(\" \",\"\")\nprint(db.fileValue(fileList[0], tagStr))\n```\n\n----------------------------------------\n\nTITLE: Defining Python Scripts for Module in CMake\nDESCRIPTION: Defines a list of Python scripts associated with the DataProbe module. These scripts are essential for the module's functionality and include the main module file, library initialization, slice view annotations, and utility functions.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DataProbe/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_PYTHON_SCRIPTS\n  ${MODULE_NAME}.py\n  ${MODULE_NAME}Lib/__init__\n  ${MODULE_NAME}Lib/SliceViewAnnotations\n  ${MODULE_NAME}Lib/DataProbeUtil\n  )\n```\n\n----------------------------------------\n\nTITLE: Writing Pandas DataFrame to CSV (Python)\nDESCRIPTION: This script writes a Pandas DataFrame to a CSV file. It utilizes the `to_csv` function provided by Pandas.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_36\n\nLANGUAGE: python\nCODE:\n```\ncontrolPointsTable.to_csv(output_csv_filename)\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name\nDESCRIPTION: Sets the module name for the SegmentStatistics module. This variable is used in subsequent commands to refer to the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/SegmentStatistics/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME SegmentStatistics)\n```\n\n----------------------------------------\n\nTITLE: Set Source Files\nDESCRIPTION: Sets the source files (header and C++ implementation) for the module widgets. These files define the classes and functionality of the widgets.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/LoadableCustomMarkups/Widgets/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  qMRMLMarkupsTestLineWidget.h\n  qMRMLMarkupsTestLineWidget.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Displayable Manager Object Factory in CMake\nDESCRIPTION: This snippet uses a custom CMake macro, `SlicerConfigureDisplayableManagerObjectFactory`, to configure the object factory for the displayable manager.  It specifies source files, export macros, and an export header. It also defines the variable `displayable_manager_instantiator_SRCS` that will contain the generated factory source files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/MRMLDM/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nSlicerConfigureDisplayableManagerObjectFactory(\n  TARGET_NAME ${KIT}\n  SRCS \"${displayable_manager_SRCS}\"\n  EXPORT_MACRO \"${${KIT}_EXPORT_DIRECTIVE}\"\n  EXPORT_HEADER \"${KIT}Export.h\"\n  OUTPUT_SRCS_VAR displayable_manager_instantiator_SRCS\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Test Sources\nDESCRIPTION: This snippet sets the list of test source files. The list is stored in the variable `KIT_TEST_SRCS` and includes the C++ source files for the tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/Logic/Testing/Cxx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT_TEST_SRCS\n  vtkSlicerTransformLogicTest1.cxx\n  vtkSlicerTransformLogicTest2.cxx\n  vtkSlicerTransformLogicTest3.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Running Slicer application - console\nDESCRIPTION: This command executes the Slicer application from the build directory. It assumes that the application has been successfully built and that the necessary libraries and dependencies are in place.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/macos.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n/opt/s/Slicer-build/Slicer\n```\n\n----------------------------------------\n\nTITLE: Start Visual Studio with the launcher\nDESCRIPTION: This snippet shows how to start Visual Studio with the launcher.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/windows.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nSlicer.exe --VisualStudioProject\n```\n\n----------------------------------------\n\nTITLE: Setting MOC Sources - CMake\nDESCRIPTION: Specifies the header files that need to be processed by the Meta-Object Compiler (MOC) to generate code for Qt's signal and slot mechanism.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Widgets/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_MOC_SRCS\n  qMRML${MODULE_NAME}DisplayNodeWidget.h\n  qMRML${MODULE_NAME}FiducialProjectionPropertyWidget.h\n  qMRML${MODULE_NAME}InteractionHandleWidget.h\n  qMRML${MODULE_NAME}ToolBar.h\n  qMRML${MODULE_NAME}ToolBar_p.h\n  qMRML${MODULE_NAME}PlaneWidget.h\n  qMRML${MODULE_NAME}ROIWidget.h\n  qMRML${MODULE_NAME}AbstractOptionsWidget.h\n  qMRML${MODULE_NAME}AngleMeasurementsWidget.h\n  qMRML${MODULE_NAME}CurveSettingsWidget.h\n  qMRML${MODULE_NAME}OptionsWidgetsFactory.h\n  qSlicer${MODULE_NAME}PlaceWidget.h\n  qSlicerSimpleMarkupsWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Project Name\nDESCRIPTION: This snippet sets the project name using the `set` command in CMake. The `PROJECT_NAME` variable is predefined and available in CMake.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/Widgets/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Set Extension CPack Install Projects\nDESCRIPTION: Sets the list of external projects to install using CPack. This ensures that the necessary components from dependent projects are installed along with the extension.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Extensions/SuperBuild/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(EXTENSION_CPACK_INSTALL_CMAKE_PROJECTS)\n#list(APPEND EXTENSION_CPACK_INSTALL_CMAKE_PROJECTS \"${Foo_DIR};Foo;RuntimeLibraries;/\")\nset(${EXTENSION_NAME}_CPACK_INSTALL_CMAKE_PROJECTS \"${EXTENSION_CPACK_INSTALL_CMAKE_PROJECTS}\" CACHE STRING \"List of external projects to install\" FORCE)\n```\n\n----------------------------------------\n\nTITLE: CMake Subdirectory Inclusion\nDESCRIPTION: This snippet adds the 'Cxx' subdirectory to the build process. It also conditionally adds the 'Python' subdirectory if the 'Slicer_USE_PYTHONQT' CMake variable is enabled. The intended use is to structure the build process for Slicer.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\nif(Slicer_USE_PYTHONQT)\n  add_subdirectory(Python)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Displaying Slicer Revision Settings File Path (Python)\nDESCRIPTION: This Python code snippet displays the exact location of the revision-specific settings file within the Slicer Python console.  This file contains settings applying to a specific revision of Slicer installed by the current user.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/settings.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nslicer.app.slicerRevisionUserSettingsFilePath\n```\n\n----------------------------------------\n\nTITLE: Setting Project Name - CMake\nDESCRIPTION: Sets the project name for the build system. This variable is used throughout the CMake configuration files to refer to the project.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Setting Variables for Build Configuration\nDESCRIPTION: This snippet sets variables for the build configuration. It defines the baseline, input, and module name (CLP) paths. It also sets the SEM_DATA_MANAGEMENT_TARGET if it's not already defined.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CastScalarVolume/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(BASELINE ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Baseline)\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input)\n\nset(CLP ${MODULE_NAME})\n\nif(NOT DEFINED SEM_DATA_MANAGEMENT_TARGET)\n  set(SEM_DATA_MANAGEMENT_TARGET ${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional ITK Factory Registration Configuration\nDESCRIPTION: This snippet conditionally disables ITK factory registration based on the ITK version. If the ITK version is 5.3 or greater, it disables specific factory types (IMAGEIO, MESHIO, TRANSFORMIO) individually. Otherwise, it disables all I/O factory registration. This is likely done to manage compatibility with different ITK versions.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/Testing/Cxx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\nlist(APPEND ITK_LIBRARIES ITKFactoryRegistration)\nlist(APPEND ITK_INCLUDE_DIRS\n  ${ITKFactoryRegistration_INCLUDE_DIRS}\n  )\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Project Definition and Variable Setup (CMake)\nDESCRIPTION: This snippet initializes the CMake project and sets up variables for export directives, include directories, source files (.cxx and .h), meta-object compiler sources (.h), user interface sources (.ui), resources, and target libraries. These variables are used later in the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Units/Widgets/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(qSlicer${MODULE_NAME}ModuleWidgets)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"Q_SLICER_MODULE_${MODULE_NAME_UPPER}_WIDGETS_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSlicer${MODULE_NAME}ModuleLogic_SOURCE_DIR}\n  ${vtkSlicer${MODULE_NAME}ModuleLogic_BINARY_DIR}\n  )\n\nset(${KIT}_SRCS\n  qMRMLSettingsUnitWidget.cxx\n  qMRMLSettingsUnitWidget.h\n  qMRMLUnitWidget.cxx\n  qMRMLUnitWidget.h\n  )\n\nset(${KIT}_MOC_SRCS\n  qMRMLSettingsUnitWidget.h\n  qMRMLUnitWidget.h\n  )\n\nset(${KIT}_UI_SRCS\n  Resources/UI/qMRMLSettingsUnitWidget.ui\n  Resources/UI/qMRMLUnitWidget.ui\n  )\n\nset(${KIT}_RESOURCES\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  vtkSlicerUnitsModuleLogic\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Slicer with Make - console\nDESCRIPTION: This command navigates to the build directory and then uses the `make` command to compile the Slicer source code. The `-j4` option specifies that the build should use 4 parallel processes, which can significantly speed up the build time.  Adjust the number of cores as needed.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/macos.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ncd ~/opt/s\nmake -j4\n```\n\n----------------------------------------\n\nTITLE: MRML Scene Redo\nDESCRIPTION: The `vtkMRMLScene::Redo()` method restores the previously undone state of the MRML scene, re-applying the changes that were previously reverted.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/mrml_overview.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Setting Input Variables\nDESCRIPTION: This snippet sets the input variable pointing to the data directory within the module's source directory. It also sets the module name and defines the SEM_DATA_MANAGEMENT_TARGET if it is not already defined.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/FiducialRegistration/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input)\n\nset(CLP ${MODULE_NAME})\n\nif(NOT DEFINED SEM_DATA_MANAGEMENT_TARGET)\n  set(SEM_DATA_MANAGEMENT_TARGET ${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Getting help options (Windows)\nDESCRIPTION: This code snippet shows how to display all possible Slicer options on Windows using the `--help` argument combined with the `more` command for pagination.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/debugging/tips.md#_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\nSlicer.exe --help | more\n```\n\n----------------------------------------\n\nTITLE: Defining RGB Color Palette\nDESCRIPTION: This code defines a color palette by specifying RGB values for a range of indices. Each line represents a color associated with an index.  The alpha value is consistently set to 255, indicating full opacity. The indices range from 0 to 254, providing a discrete yet continuous color map.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/Logic/Resources/ColorFiles/Cividis.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n0 0 0 34 77 255\n1 1 0 35 79 255\n2 2 0 35 80 255\n3 3 0 36 82 255\n4 4 0 37 84 255\n5 5 0 38 85 255\n6 6 0 38 87 255\n7 7 0 39 89 255\n8 8 0 40 91 255\n9 9 0 40 92 255\n...\n253 253 253 229 52 255\n254 254 253 230 54 255\n```\n\n----------------------------------------\n\nTITLE: Configuring Qt on Apple\nDESCRIPTION: Configures Qt-specific settings on Apple platforms. It writes a qt.conf file to specify the plugins directory and configures an extra resource file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nif(APPLE)\n  set(QT_CONF_FILEPATH \"${CMAKE_CURRENT_BINARY_DIR}/Resources/qt.conf\")\n  file(WRITE ${QT_CONF_FILEPATH}\n\"[Paths]\nPlugins = ${Slicer_QtPlugins_DIR}\n\"\n)\n\n  configure_file(\n    Resources/qSlicerBaseQTCoreExtra.qrc.in\n    ${CMAKE_CURRENT_BINARY_DIR}/Resources/qSlicerBaseQTCoreExtra.qrc\n    )\n\n  list(APPEND KIT_resources\n    ${CMAKE_CURRENT_BINARY_DIR}/Resources/qSlicerBaseQTCoreExtra.qrc\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Build Loadable Module using CMake Macro\nDESCRIPTION: Uses a custom CMake macro (`slicerMacroBuildLoadableModule`) to build the loadable module.  This macro encapsulates the build process, using the previously defined variables. The macro takes name, export directive, include directories, source files, MOC sources, UI sources, target libraries, and resources as input.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperLoadableModuleTemplate/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroBuildLoadableModule(\n  NAME ${MODULE_NAME}\n  EXPORT_DIRECTIVE ${MODULE_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${MODULE_INCLUDE_DIRECTORIES}\n  SRCS ${MODULE_SRCS}\n  MOC_SRCS ${MODULE_MOC_SRCS}\n  UI_SRCS ${MODULE_UI_SRCS}\n  TARGET_LIBRARIES ${MODULE_TARGET_LIBRARIES}\n  RESOURCES ${MODULE_RESOURCES}\n  WITH_GENERIC_TESTS\n  )\n```\n\n----------------------------------------\n\nTITLE: Add Executable for Testing - CMake\nDESCRIPTION: Adds an executable target named `${CLP}Test` which is used as the entry point for the image transformation tests. Links the executable to necessary libraries and sets properties such as labels and folder.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleDTIVolume/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nctk_add_executable_utf8(${CLP}Test ${CLP}Test.cxx)\ntarget_link_libraries(${CLP}Test ${CLP}Lib ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES})\nset_target_properties(${CLP}Test PROPERTIES LABELS ${CLP})\nset_target_properties(${CLP}Test PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for MRML Module in CMake\nDESCRIPTION: This snippet defines the list of source files (.cxx and .h) that constitute the MRML module. These files typically contain the implementation and declaration of classes and functions that extend the MRML functionality within Slicer. Specifically, it includes files related to a color legend display node.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/MRML/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  vtkMRMLColorLegendDisplayNode.cxx\n  vtkMRMLColorLegendDisplayNode.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Applying library properties\nDESCRIPTION: This snippet applies user-defined properties to the library target. It checks if `Slicer_LIBRARY_PROPERTIES` is defined, and if so, it uses `set_target_properties` to apply those properties to the library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/CLI/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_LIBRARY_PROPERTIES)\n  set_target_properties(${lib_name} PROPERTIES ${Slicer_LIBRARY_PROPERTIES})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Header File\nDESCRIPTION: This snippet configures a header file. It uses the `configure_file` command to process a template header file (`vtkTeemConfigure.h.in`) and generate the actual header file (`vtkTeemConfigure.h`) in the binary directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkTeem/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(configure_header_file vtkTeemConfigure.h)\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/${configure_header_file}.in\n  ${CMAKE_CURRENT_BINARY_DIR}/${configure_header_file}\n  )\n```\n\n----------------------------------------\n\nTITLE: Rotate slice views to volume plane in Slicer (Python)\nDESCRIPTION: This code aligns the slice views to the axes of a specified volume, displaying the original image acquisition planes in the slice views. It needs an existing MRHead volume.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_28\n\nLANGUAGE: Python\nCODE:\n```\nvolumeNode = slicer.util.getNode(\"MRHead\")\nlayoutManager = slicer.app.layoutManager()\nfor sliceViewName in layoutManager.sliceViewNames():\n  layoutManager.sliceWidget(sliceViewName).mrmlSliceNode().RotateToVolumePlane(volumeNode)\n```\n\n----------------------------------------\n\nTITLE: Building CLI with SEMMacroBuildCLI\nDESCRIPTION: This uses the SEMMacroBuildCLI macro to build the CLI module. It passes the module name, target libraries, include directories, and source files as arguments to the macro.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperCLIModuleTemplate/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  TARGET_LIBRARIES ${MODULE_TARGET_LIBRARIES}\n  INCLUDE_DIRECTORIES ${MODULE_INCLUDE_DIRECTORIES}\n  ADDITIONAL_SRCS ${MODULE_SRCS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Python Resources for SegmentStatisticsPlugins\nDESCRIPTION: This CMake command sets the list of Python resources for the SegmentStatisticsPlugins module. In this case, the list is empty, indicating that there are no additional resources beyond the Python scripts themselves. If there were any resources, they would be added to this list to ensure they are properly handled during compilation and installation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/SegmentStatistics/SegmentStatisticsPlugins/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SegmentStatisticsPlugins_PYTHON_RESOURCES\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Additional Source Files\nDESCRIPTION: This snippet defines a list of C++ source files (`DisplayableManagerTest_SRCS`) used in the creation of the displayable manager object factory. These classes are for custom displayable manager testing. These files are used to create the instantiator.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/DisplayableManager/Testing/Cxx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(DisplayableManagerTest_SRCS\n  vtkMRMLTestThreeDViewDisplayableManager.cxx\n  vtkMRMLTestSliceViewDisplayableManager.cxx\n  vtkMRMLTestCustomDisplayableManager.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Executable\nDESCRIPTION: This snippet uses `ctk_add_executable_utf8` to create an executable named `${KIT}CxxTests` from the generated test source `${Tests}` and any moc files `${Tests_MOC_CXX}`.  It ensures that UTF-8 characters are handled correctly.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/Widgets/Testing/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nctk_add_executable_utf8(${KIT}CxxTests ${Tests} ${Tests_MOC_CXX})\ntarget_link_libraries(${KIT}CxxTests ${KIT})\n```\n\n----------------------------------------\n\nTITLE: VTK Debug Logging Example\nDESCRIPTION: Example of logging a debug message in a VTK class. Shows the use of the `vtkDebugMacro` function.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/style_guide.md#_snippet_12\n\nLANGUAGE: C++\nCODE:\n```\nvtkDebugMacro(\"CreateWidget: found a glyph type already defined for this node: \" << iter->second);\n```\n\n----------------------------------------\n\nTITLE: Link Libraries\nDESCRIPTION: Links the RemoteIO library with its dependencies.  It includes CURL libraries, MRMLCore, and optionally OpenSSL libraries if `Slicer_USE_PYTHONQT_WITH_OPENSSL` is enabled. These are linked using the `target_link_libraries` command.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/RemoteIO/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset(libs\n  ${CURL_LIBRARIES}\n  MRMLCore\n  )\nif(Slicer_USE_PYTHONQT_WITH_OPENSSL)\n  list(APPEND libs\n    ${OPENSSL_LIBRARIES}\n    )\nendif()\ntarget_link_libraries(${lib_name} ${libs})\n```\n\n----------------------------------------\n\nTITLE: Configuring Cxx Test Driver with slicerMacroConfigureModuleCxxTestDriver\nDESCRIPTION: Configures a C++ test driver using the `slicerMacroConfigureModuleCxxTestDriver` macro. It sets the test name, sources, target libraries, include directories, and enables VTK debug and error output checks. The macro likely handles compiling and linking the test executable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nslicerMacroConfigureModuleCxxTestDriver(\n  NAME ${KIT}\n  SOURCES ${KIT_TEST_SRCS}\n  TARGET_LIBRARIES vtkSlicerVolumesModuleLogic\n  INCLUDE_DIRECTORIES\n    ${vtkSlicerVolumesModuleLogic_SOURCE_DIR}\n    ${vtkSlicerVolumesModuleLogic_BINARY_DIR}\n  WITH_VTK_DEBUG_LEAKS_CHECK\n  WITH_VTK_ERROR_OUTPUT_CHECK\n  )\n```\n\n----------------------------------------\n\nTITLE: Quantifying Segments Example (Slicer Script Repository)\nDESCRIPTION: This snippet refers to examples in the Slicer script repository that demonstrate how to calculate segment statistics programmatically from custom modules. It relies on the SegmentStatisticsLogic class to compute the metrics and retrieve the results. It provides developers with a starting point for integrating segment statistics into their own Slicer modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/modules/segmentstatistics.md#_snippet_0\n\nLANGUAGE: NA\nCODE:\n```\n[Slicer script repository](../../developer_guide/script_repository.md#quantifying-segments)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries\nDESCRIPTION: This snippet links the executable `${KIT}CxxTests` to the library `${KIT}`. This ensures that the executable has access to the necessary functions and classes from the library. Requires `KIT` variable to be defined.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/DisplayableManager/Testing/Cxx/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${KIT}CxxTests ${KIT})\n```\n\n----------------------------------------\n\nTITLE: Installing Headers\nDESCRIPTION: This snippet installs the header files.  It checks if `${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT` is defined and false, then globs header files and installs them to the `include/${PROJECT_NAME}` directory under the Development component.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkTeem/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT)\n  set(${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT ON)\nendif()\nif(NOT ${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT)\n  file(GLOB headers \"${CMAKE_CURRENT_SOURCE_DIR}/*.(h|txx)\")\n  install(\n    FILES ${headers} ${CMAKE_CURRENT_BINARY_DIR}/${configure_header_file}\n    DESTINATION include/${PROJECT_NAME} COMPONENT Development)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory\nDESCRIPTION: This snippet adds a subdirectory for testing. If `BUILD_TESTING` is enabled, it adds the Testing subdirectory to the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkTeem/CMakeLists.txt#_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: ExternalData Target Management in CMake\nDESCRIPTION: This snippet conditionally adds an ExternalData target based on the value of `SEM_DATA_MANAGEMENT_TARGET`. If `SEM_DATA_MANAGEMENT_TARGET` is equal to `${CLP}Data`, it adds a target named `${CLP}Data` using `ExternalData_add_target`. This ensures that the necessary external data is downloaded and managed for the specific data management target.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GaussianBlurImageFilter/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building CLI using SEMMacroBuildCLI in CMake\nDESCRIPTION: This snippet uses the SEMMacroBuildCLI macro to build the command-line interface (CLI) for the module. It sets the module name, logo header, and target libraries (ITK_LIBRARIES).\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/OrientScalarVolume/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/NAMICLogo.h\n  TARGET_LIBRARIES ${ITK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Installing Xcode command line tools - console (2)\nDESCRIPTION: This command installs the Xcode command line tools, which are required for building Slicer on macOS.  It's a duplicate of the first entry, but included again because it's shown in a different context addressing a specific build error.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/macos.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory\nDESCRIPTION: Adds the Testing subdirectory to the build process if testing is enabled. This allows CMake to process the CMakeLists.txt file in that directory and build the module's tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/LoadableExtensionTemplate/LoadableModuleTemplate/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: SlicerLaunchSettings.ini example (INI)\nDESCRIPTION: This INI file shows a sample configuration for SlicerLaunchSettings.ini, defining paths, environment variables, and application launch settings for Slicer. This is used by the Slicer launcher to set up the environment before running SlicerApp-real.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/debugging/linuxcpp.md#_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\n[General]\nlauncherSplashImagePath=/cmn/git/Slicer4/Applications/SlicerQT/Resources/Images/SlicerSplashScreen.png\nlauncherSplashScreenHideDelayMs=3000\nadditionalLauncherHelpShortArgument=-h\nadditionalLauncherHelpLongArgument=--help\nadditionalLauncherNoSplashArguments=--no-splash,--help,--version,--home,--program-path,--no-main-window\n\n[Application]\npath=<APPLAUNCHER_DIR>/bin/./SlicerQT-real\narguments=\n\n[ExtraApplicationToLaunch]\n\ndesigner/shortArgument=\ndesigner/help=Start Qt designer using Slicer plugins\ndesigner/path=/usr/bin/designer-qt4\ndesigner/arguments=\n\ngnome-terminal/shortArgument=\ngnome-terminal/help=Start gnome-terminal\ngnome-terminal/path=/usr/bin/gnome-terminal\ngnome-terminal/arguments=\n\nxterm/shortArgument=\nxterm/help=Start xterm\nxterm/path=/usr/bin/xterm\nxterm/arguments=\n\nddd/shortArgument=\nddd/help=Start ddd\nddd/path=/usr/bin/ddd\nddd/arguments=\n\ngdb/shortArgument=\ngdb/help=Start gdb\ngdb/path=/usr/bin/gdb\ngdb/arguments=\n\n\n[LibraryPaths]\n1\\path=/cmn/git/Slicer4-sb/VTK-build/bin/.\n2\\path=/cmn/git/Slicer4-sb/CTK-build/CTK-build/bin/.\n3\\path=/usr/lib\n4\\path=/cmn/git/Slicer4-sb/ITKv3-build/bin/.\n5\\path=/cmn/git/Slicer4-sb/SlicerExecutionModel-build/ModuleDescriptionParser/bin/.\n6\\path=/cmn/git/Slicer4-sb/teem-build/bin/.\n7\\path=/cmn/git/Slicer4-sb/LibArchive-install/lib\n8\\path=<APPLAUNCHER_DIR>/bin/.\n9\\path=../lib/Slicer-4.0/qt-loadable-modules\n10\\path=<APPLAUNCHER_DIR>/lib/Slicer-4.0/cli-modules/.\n11\\path=<APPLAUNCHER_DIR>/lib/Slicer-4.0/qt-loadable-modules/.\n12\\path=/cmn/git/Slicer4-sb/tcl-build/lib\n13\\path=/cmn/git/Slicer4-sb/OpenIGTLink-build\n14\\path=/cmn/git/Slicer4-sb/OpenIGTLink-build/bin/.\n15\\path=/cmn/git/Slicer4-sb/CTK-build/PythonQt-build/.\n16\\path=/cmn/git/Slicer4-sb/python-build/lib\n17\\path=/cmn/git/Slicer4-sb/python-build/lib/python2.6/site-packages/numpy/core\n18\\path=/cmn/git/Slicer4-sb/python-build/lib/python2.6/site-packages/numpy/lib\nsize=18\n\n[Paths]\n1\\path=<APPLAUNCHER_DIR>/bin/.\n2\\path=/cmn/git/Slicer4-sb/teem-build/bin/.\n3\\path=/usr/bin\n4\\path=<APPLAUNCHER_DIR>/lib/Slicer-4.0/cli-modules/.\n5\\path=/cmn/git/Slicer4-sb/tcl-build/bin\nsize=5\n\n[EnvironmentVariables]\nQT_PLUGIN_PATH=<APPLAUNCHER_DIR>/bin<PATHSEP>/cmn/git/Slicer4-sb/CTK-build/CTK-build/bin<PATHSEP>/usr/lib/qt4/plugins\nSLICER_HOME=/cmn/git/Slicer4-sb/Slicer-build\nPYTHONHOME=/cmn/git/Slicer4-sb/python-build\nPYTHONPATH=<APPLAUNCHER_DIR>/bin<PATHSEP><APPLAUNCHER_DIR>/bin/Python<PATHSEP>/cmn/git/Slicer4-sb/python-build/lib/python2.6/site-packages<PATHSEP><APPLAUNCHER_DIR>/lib/Slicer-4.0/qt-loadable-modules/.<PATHSEP><APPLAUNCHER_DIR>/lib/Slicer-4.0/qt-loadable-modules/Python\nTCL_LIBRARY=/cmn/git/Slicer4-sb/tcl-build/lib/tcl8.4\nTK_LIBRARY=/cmn/git/Slicer4-sb/tcl-build/lib/tk8.4\nTCLLIBPATH=/cmn/git/Slicer4-sb/tcl-build/lib/itcl3.2 /cmn/git/Slicer4-sb/tcl-build/lib/itk3.2\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Target (CMake)\nDESCRIPTION: This snippet adds an external data target using `ExternalData_add_target`. The target name depends on value of SEM_DATA_MANAGEMENT_TARGET, and it will be added only if it is equal to `${CLP}Data`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/TestGridTransformRegistration/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name in CMake\nDESCRIPTION: Sets the MODULE_NAME variable to LabelMapSmoothing, which is likely used throughout the CMake configuration to identify the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/LabelMapSmoothing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_NAME LabelMapSmoothing)\n```\n\n----------------------------------------\n\nTITLE: Checking Include Files\nDESCRIPTION: Checks for the existence of the stdint.h header file. The result is stored in the HAVE_STDINT_H variable, which can be used in conditional compilation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(CheckIncludeFiles)\ncheck_include_files(\"stdint.h\" HAVE_STDINT_H)\n```\n\n----------------------------------------\n\nTITLE: Clone a Segment (Python)\nDESCRIPTION: This snippet demonstrates how to create a copy of an existing segment within a segmentation node. It retrieves the segmentation node and the ID of the source segment by its name, and uses the `CopySegmentFromSegmentation` method to duplicate the segment within the same segmentation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/segmentations.md#_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nsegmentationNode = getNode(\"Segmentation\")\nsourceSegmentName = \"Segment_1\"\n\nsegmentation = segmentationNode.GetSegmentation()\nsourceSegmentId = segmentation.GetSegmentIdBySegmentName(sourceSegmentName)\nsegmentation.CopySegmentFromSegmentation(segmentation, sourceSegmentId)\n```\n\n----------------------------------------\n\nTITLE: Building Module Widgets with Macro - CMake\nDESCRIPTION: This snippet uses the SlicerMacroBuildModuleWidgets macro to automate the build process for the module's widgets.  It passes in the project name, export directive, include directories, source files, UI files, target libraries, and resource files. The WRAP_PYTHONQT option indicates that Python bindings should be generated for the widgets.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/LoadableExtensionTemplate/LoadableModuleTemplate/Widgets/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleWidgets(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  UI_SRCS ${${KIT}_UI_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  RESOURCES ${${KIT}_RESOURCES}\n  WRAP_PYTHONQT\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Test with Baseline Comparison\nDESCRIPTION: Adds an external data test that compares generated output against a baseline VTP file. It executes a CMake script (`run_MergeModelsTest.cmake`) that likely performs the comparison.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MergeModels/Testing/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(testname ${CLP}TestCompare)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} ${CMAKE_COMMAND}\n  -Dtest_cmd=$<TARGET_FILE:${CLP}Test>\n  -Dtest_name=ModuleEntryPoint\n  -Dmodel1=DATA{${INPUT}/sphere.vtp}\n  -Dmodel2=DATA{${INPUT}/cube.vtp}\n  -Doutput_model=${TEMP}/sphereCube.vtp}\n  -Doutput_baseline=DATA{${BASELINE}/sphereCube.vtp}\n  -P ${CMAKE_CURRENT_SOURCE_DIR}/run_MergeModelsTest.cmake\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\nset_property(TEST ${testname} PROPERTY DEPENDS ${CLP}TestVtp)\n```\n\n----------------------------------------\n\nTITLE: Set Include Directories\nDESCRIPTION: Sets the include directories for the module.  This allows the compiler to find header files necessary for building the module. In this specific case, the list is empty.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/VTKWidgets/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_INCLUDE_DIRECTORIES\n  )\n```\n\n----------------------------------------\n\nTITLE: Initializing MRMLCore Project\nDESCRIPTION: This snippet initializes the MRMLCore project using the `project()` command in CMake. It specifies the project name as MRMLCore.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Core/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(MRMLCore)\n```\n\n----------------------------------------\n\nTITLE: KIT Source Files Definition CMake\nDESCRIPTION: Defines KIT source files, including core DisplayableManager classes, factories, interactor styles, widgets, and proxy classes. The KIT_SRCS variable compiles a comprehensive list of source files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/DisplayableManager/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT_SRCS\n  ${DisplayableManager_SRCS}\n  vtkMRMLAbstractDisplayableManager.cxx\n  vtkMRMLDisplayableManagerGroup.cxx\n  vtkMRMLDisplayableManagerFactory.cxx\n\n  # ThreeDView factory and DisplayableManager\n  vtkMRMLAbstractThreeDViewDisplayableManager.cxx\n  vtkMRMLThreeDViewDisplayableManagerFactory.cxx\n\n  # SliceView factory and DisplayableManager\n  vtkMRMLAbstractSliceViewDisplayableManager.cxx\n  vtkMRMLSliceViewDisplayableManagerFactory.cxx\n\n  vtkMRMLViewInteractorStyle.cxx\n  vtkMRMLSliceViewInteractorStyle.cxx\n  vtkMRMLThreeDViewInteractorStyle.cxx\n\n  # Widgets\n  vtkMRMLAbstractWidget.cxx\n  vtkMRMLAbstractWidgetRepresentation.cxx\n  vtkMRMLCameraWidget.cxx\n  vtkMRMLInteractionWidget.cxx\n  vtkMRMLInteractionWidgetRepresentation.cxx\n  vtkMRMLSliceEdgeWidgetRepresentation.cxx\n  vtkMRMLSliceIntersectionWidget.cxx\n  vtkMRMLSliceIntersectionRepresentation2D.cxx\n  vtkMRMLSliceIntersectionInteractionRepresentation.cxx\n  vtkMRMLSliceIntersectionInteractionRepresentationHelper.cxx\n  vtkMRMLRubberBandWidgetRepresentation.cxx\n  vtkMRMLWindowLevelWidget.cxx\n\n  # Proxy classes\n  vtkMRMLLightBoxRendererManagerProxy.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Text: ITK Exception Example\nDESCRIPTION: This text snippet shows an example of an ITK exception that can occur when running tests associated with CLI modules. It indicates a problem with creating an IO object for reading an image file, likely due to missing factory registration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/extensions.md#_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n ITK test driver caught an ITK exception:\n\n itk::ImageFileReaderException (0x1bd8430)\n Location: \"unknown\"\n File: /path/to/Slicer-SuperBuild/ITK/Modules/IO/ImageBase/include/itkImageFileReader.hxx\n Line: 139\n Description:  Could not create IO object for reading file /path/to/image.nrrd\n   Tried to create one of the following:\n     MRMLIDImageIO\n   You probably failed to set a file suffix, or\n     set the suffix to an unsupported type.\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Specifies the include directories required for compiling the module. These directories contain header files for the module's widgets and logic components. Includes source and binary directories.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Reformat/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_INCLUDE_DIRECTORIES\n  ${CMAKE_CURRENT_SOURCE_DIR}/Widgets\n  ${CMAKE_CURRENT_BINARY_DIR}/Widgets\n  ${CMAKE_CURRENT_SOURCE_DIR}/Logic\n  ${CMAKE_CURRENT_BINARY_DIR}/Logic\n  )\n```\n\n----------------------------------------\n\nTITLE: Initializing Project and Variables in CMake\nDESCRIPTION: This snippet initializes the CMake project, sets the project name, defines the export directive for the module, and specifies include directories based on vtkSlicerMarkupsModuleMRML.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Texts/Logic/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleLogic)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_LOGIC_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSlicerMarkupsModuleMRML_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Slicer Extract Extension Description JSON Tests\nDESCRIPTION: This uses the `add_cmakescript_test` macro to add a test to extract extension description information from a JSON file. It calls `Extensions/CMake/SlicerFunctionExtractExtensionDescription.cmake` to perform the extraction.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/CMake/Testing/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_cmakescript_test(\n  slicer_extract_extension_description_from_json_test\n  Extensions/CMake/SlicerFunctionExtractExtensionDescription.cmake)\n```\n\n----------------------------------------\n\nTITLE: Project Initialization\nDESCRIPTION: Initializes the CMake project named qSlicerBaseQTCore. This is the starting point for defining the project's build configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(qSlicerBaseQTCore)\n```\n\n----------------------------------------\n\nTITLE: Add External Data Target\nDESCRIPTION: This snippet adds an external data target if `SEM_DATA_MANAGEMENT_TARGET` is equal to `${CLP}Data`.  It uses `ExternalData_add_target` to define the data dependency.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GrayscaleFillHoleImageFilter/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Target Folder Property\nDESCRIPTION: This snippet sets the folder property for the library target in the IDE. It uses the `PROJECT_NAME_FOLDER` variable to determine the folder name.  If the variable is not defined, it defaults to the project name.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/ITKFactoryRegistration/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# --------------------------------------------------------------------------\n# Folder\n# --------------------------------------------------------------------------\nif(NOT DEFINED ${PROJECT_NAME}_FOLDER)\n  set(${PROJECT_NAME}_FOLDER ${PROJECT_NAME})\nendif()\nif(NOT \"${${PROJECT_NAME}_FOLDER}\" STREQUAL \"\")\n  set_target_properties(${lib_name} PROPERTIES FOLDER ${${PROJECT_NAME}_FOLDER})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories - CMake\nDESCRIPTION: Adds subdirectories for Logic, Widgets, and SubjectHierarchyPlugins, indicating the organization of the module's components. These subdirectories likely contain CMakeLists.txt files to manage their own specific build processes.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Texts/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Logic)\nadd_subdirectory(Widgets)\nadd_subdirectory(SubjectHierarchyPlugins)\n```\n\n----------------------------------------\n\nTITLE: Defining a Macro for Simple File Tests\nDESCRIPTION: This CMake macro simplifies the creation of tests that involve comparing output to files. It encapsulates the `simple_test` function and facilitates the creation of file-based tests. Input parameters include the test name and file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Logic/Testing/Cxx/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nmacro(simple_file_test TESTNAME FILE)\n  simple_test(${TESTNAME}_${FILE} DRIVER_TESTNAME ${TESTNAME} DATA{${MRMLCore_SOURCE_DIR}/Testing/TestData/${FILE}})\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Specifying target libraries for Qt CLI plugins using CMake\nDESCRIPTION: This snippet specifies the target libraries that the Qt CLI plugins depend on.  Here, it specifies that the plugins depend on the `qSlicerBaseQTCLI` library. This informs the linker to include symbols from this library when building the Qt CLI plugin.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCLI/DesignerPlugins/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  qSlicerBaseQTCLI\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining SIMPLE_TEST_WITH_SCENE Macro (CMake)\nDESCRIPTION: This CMake macro defines a function called SIMPLE_TEST_WITH_SCENE that creates a simple test based on a given scene file. It takes the test name and scene file name as input and uses the `simple_test` function to set up the test environment.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Core/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nsimple_test(${TESTNAME}_${SCENEFILENAME} DRIVER_TESTNAME ${TESTNAME} ${_scenefile} ${_externalfiles})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Clear Redo Stack\nDESCRIPTION: The `vtkMRMLScene::ClearRedoStack()` method clears the redo history, discarding all saved states and preventing redo operations.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/mrml_overview.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Adding TablesSelfTest module in CMake\nDESCRIPTION: This CMake script block conditionally adds a scripted module named TablesSelfTest, along with its associated Python script and unit tests. The inclusion depends on whether both Slicer_USE_QtTesting and Slicer_USE_PYTHONQT are enabled. If both conditions are true, it adds the module and its tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/Testing/Python/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(Slicer_USE_QtTesting AND Slicer_USE_PYTHONQT)\n  slicerMacroBuildScriptedModule(\n    NAME TablesSelfTest\n    SCRIPTS TablesSelfTest.py\n    )\n  slicer_add_python_unittest(SCRIPT TablesSelfTest.py)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Kit Variable\nDESCRIPTION: Sets the `KIT` variable to the project name.  This is likely used to store and refer to the module's name throughout the rest of the CMake configuration.  This promotes consistency within the script.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/MRML/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Find BrainWeb Data Root\nDESCRIPTION: Locates the root directory containing BrainWeb data, used for testing.  The `find_path` command searches for the `brainweb165a10f17.mha` file and sets the `SLICER_BRAINWEB_DATA_ROOT` variable. The result is marked as an advanced variable in CMake.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  # TODO Since the following snippet have been moved from CLI/Testing/CMakeLists.txt into\n  # CLI/CMakeLists.txt, the variable SLICER_BRAINWEB_DATA_ROOT won't be set properly.\n  # Configure the default SLICER_BRAINWEB_DATA_ROOT for the location of BrainWeb Data.\n  # When this data is available, additional 3D tests are enabled.\n  find_path(SLICER_BRAINWEB_DATA_ROOT brainweb165a10f17.mha\n    DOC \"Directory with data taken from https://public.kitware.com/pub/itk/Data/BrainWeb/\")\n  mark_as_advanced(SLICER_BRAINWEB_DATA_ROOT)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version and Project Name\nDESCRIPTION: This CMake snippet sets the minimum required CMake version to ensure compatibility and defines the project name. The `cmake_minimum_required` command specifies the minimum version, while `project` sets the name for the CMake project, which is crucial for organizing the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/ScriptedSegmentEditorEffectExtensionTemplate/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16.3...3.19.7 FATAL_ERROR)\n\nproject(ScriptedSegmentEditorEffectExtensionTemplate)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target\nDESCRIPTION: This snippet adds an executable target using `ctk_add_executable_utf8` for the module's test. It links the executable with the module's library and any extra libraries required by the SlicerExecutionModel. Properties are set to label and organize the target within the build system.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleScalarVolume/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nctk_add_executable_utf8(${CLP}Test ${CLP}Test.cxx)\ntarget_link_libraries(${CLP}Test ${CLP}Lib ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES})\nset_target_properties(${CLP}Test PROPERTIES LABELS ${CLP})\nset_target_properties(${CLP}Test PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Setting Folder Property\nDESCRIPTION: This snippet sets the FOLDER property for the library target. This helps organize targets in IDEs. It checks if `${PROJECT_NAME}_FOLDER` is defined and not empty, and sets the folder property accordingly.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkTeem/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_FOLDER)\n  set(${PROJECT_NAME}_FOLDER ${PROJECT_NAME})\nendif()\nif(NOT \"${${PROJECT_NAME}_FOLDER}\" STREQUAL \"\")\n  set_target_properties(${lib_name} PROPERTIES FOLDER ${${PROJECT_NAME}_FOLDER})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory (CMake)\nDESCRIPTION: This snippet adds a subdirectory named 'Testing' to the build process if testing is enabled. This allows including and running unit tests for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleDTIVolume/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Module Include Directories - CMake\nDESCRIPTION: Initializes an empty list for module include directories. These are added to the compiler's include path during the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/CLIExtensionTemplate/CLIModuleTemplate/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_INCLUDE_DIRECTORIES\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Python Scripts - CMake\nDESCRIPTION: This snippet defines a list of Python scripts associated with the WebServer module. These scripts are used to define the functionality of the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/WebServer/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_PYTHON_SCRIPTS\n  ${MODULE_NAME}.py\n  ${MODULE_NAME}Lib/__init__\n  ${MODULE_NAME}Lib/BaseRequestHandler.py\n  ${MODULE_NAME}Lib/DICOMRequestHandler.py\n  ${MODULE_NAME}Lib/SlicerRequestHandler.py\n  ${MODULE_NAME}Lib/StaticPagesRequestHandler.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding testing subdirectory\nDESCRIPTION: Conditionally adds the `Testing` subdirectory to the build process if the `BUILD_TESTING` variable is enabled. This allows for including unit tests for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/TestGridTransformRegistration/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Python Wrap Variables\nDESCRIPTION: Sets variables related to Python wrapping if PythonQt support is enabled.  It appends necessary libraries and sources for Python wrapping.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_USE_PYTHONQT)\n  set(VTK_COMMON_PYTHON_LIBRARY\n    VTK::WrappingPythonCore # For vtkPythonUtil\n    )\n  list(APPEND KIT_target_libraries\n    CTKScriptingPythonCore\n    ${VTK_COMMON_PYTHON_LIBRARY} # For vtkPythonUtils\n    )\n  if(WIN32)\n    # TODO: this resolves link errors on windows, but shouldn't be\n    # needed - issue may lie with ctk external library macros?\n    list(APPEND KIT_target_libraries\n      ${PYTHONQT_LIBRARY}\n      )\n  endif()\n\n  # Sources\n  list(APPEND KIT_SRCS\n    qSlicerCorePythonManager.cxx\n    qSlicerCorePythonManager.h\n    )\n\n  # Headers that should run through moc\n  list(APPEND KIT_MOC_SRCS\n    qSlicerCorePythonManager.h\n    )\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory\nDESCRIPTION: This snippet conditionally adds the 'Testing' subdirectory to the build process if the BUILD_TESTING variable is enabled. This ensures that tests are built and executed as part of the module's build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/DiffusionTensorTest/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CxxTest Driver CMake\nDESCRIPTION: This snippet utilizes the `slicerMacroConfigureModuleCxxTestDriver` macro to configure a CxxTest driver for the Markups module. It specifies the name, source files, target libraries, include directories, and options for VTK debug leaks and error output checks. This creates an executable for running the module's tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Testing/Cxx/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nslicerMacroConfigureModuleCxxTestDriver(\n  NAME ${KIT}\n  SOURCES ${KIT_TEST_SRCS}\n  TARGET_LIBRARIES ${KIT_TEST_TARGET_LIBRARIES}\n  INCLUDE_DIRECTORIES ${KIT_TEST_INCLUDE_DIRS}\n  WITH_VTK_DEBUG_LEAKS_CHECK\n  WITH_VTK_ERROR_OUTPUT_CHECK\n  )\n```\n\n----------------------------------------\n\nTITLE: MRML Widget Event Processing\nDESCRIPTION: This snippet outlines methods to override for handling interaction events in a MRML widget, including determining if an event can be processed, processing the event, handling the widget leaving state, and managing interactivity and mouse cursor appearance.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/mrml_overview.md#_snippet_25\n\nLANGUAGE: C++\nCODE:\n```\nbool CanProcessInteractionEvent(vtkMRMLInteractionEventData* eventData, double &distance2)\n```\n\nLANGUAGE: C++\nCODE:\n```\nbool ProcessInteractionEvent(vtkMRMLInteractionEventData* eventData)\n```\n\nLANGUAGE: C++\nCODE:\n```\nvoid Leave(vtkMRMLInteractionEventData* eventData)\n```\n\nLANGUAGE: C++\nCODE:\n```\nbool GetInteractive()\n```\n\nLANGUAGE: C++\nCODE:\n```\nint GetMouseCursor()\n```\n\n----------------------------------------\n\nTITLE: Adding a Subdirectory with CMake\nDESCRIPTION: This CMake command adds the subdirectory named 'Cxx' to the build process. It searches for a CMakeLists.txt file in the 'Cxx' directory and includes it in the current project. This allows for modular organization of the project's source code and build configuration.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperLoadableModuleTemplate/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Setting Module Kit Name CMake\nDESCRIPTION: Sets the name of the module kit.  This variable, KIT, is later used in other CMake commands to specify the module being configured. MODULE_NAME is a CMake variable representing the name of the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/Testing/Cxx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT qSlicer${MODULE_NAME}Module)\n```\n\n----------------------------------------\n\nTITLE: Setting UI Sources - CMake\nDESCRIPTION: Lists the Qt Designer UI files that define the layout and appearance of the module's widgets.  These `.ui` files are compiled into C++ code.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Widgets/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_UI_SRCS\n  Resources/UI/qMRML${MODULE_NAME}DisplayNodeWidget.ui\n  Resources/UI/qMRML${MODULE_NAME}FiducialProjectionPropertyWidget.ui\n  Resources/UI/qMRML${MODULE_NAME}InteractionHandleWidget.ui\n  Resources/UI/qMRML${MODULE_NAME}PlaneWidget.ui\n  Resources/UI/qMRML${MODULE_NAME}ROIWidget.ui\n  Resources/UI/qMRML${MODULE_NAME}AngleMeasurementsWidget.ui\n  Resources/UI/qMRML${MODULE_NAME}CurveSettingsWidget.ui\n  Resources/UI/qSlicer${MODULE_NAME}PlaceWidget.ui\n  Resources/UI/qSlicerSimpleMarkupsWidget.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Simple Tests with Data\nDESCRIPTION: This snippet uses the `simple_test` macro (likely defined within the Slicer build system) to add several basic tests. Some tests include data files specified using the `DATA` keyword, which likely passes these files as arguments to the test executable. The data files are accessed via the `${MRML_CORE_INPUT}` and `${SLICERAPP_INPUT}` variables.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/Testing/Cxx/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nsimple_test(qSlicerVolumesIOOptionsWidgetTest1)\nsimple_test(qSlicerVolumesModuleWidgetTest1 DATA{${MRML_CORE_INPUT}/fixed.nrrd})\nsimple_test(vtkSlicerVolumesLogicTest1 DATA{${MRML_CORE_INPUT}/fixed.nrrd})\nsimple_test(vtkSlicerVolumesLogicTest1_TestNAN\n  DRIVER_TESTNAME vtkSlicer${MODULE_NAME}LogicTest1 DATA{${SLICERAPP_INPUT}/testNANInVolume.nrrd}\n  )\n```\n\n----------------------------------------\n\nTITLE: Volume/Grid Transform List Example Output\nDESCRIPTION: Example JSON output for GET /volumes or GET /gridtransforms, showing a list of volume or grid transform nodes with their names and IDs.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/modules/webserver.md#_snippet_13\n\nLANGUAGE: JSON\nCODE:\n```\n[\n {\"name\": \"Volume1\", \"id\": \"vtkMRMLScalarVolumeNode1\"},\n {\"name\": \"Volume2\", \"id\": \"vtkMRMLScalarVolumeNode2\"},\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring the repository for developers (optional)\nDESCRIPTION: This snippet shows how to configure repository, it should be executed in the terminal.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/windows.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./SetupForDevelopment.sh\n```\n\n----------------------------------------\n\nTITLE: Setting Project and Module Name\nDESCRIPTION: Sets the project name using the `project()` command, effectively naming the module within the CMake environment.  This defines the project for dependency management and builds settings.  `vtkSlicer${MODULE_NAME}ModuleMRML` establishes a naming convention used within 3D Slicer's build system.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/MRML/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleMRML)\n```\n\n----------------------------------------\n\nTITLE: Building Module Widgets\nDESCRIPTION: This snippet uses the `SlicerMacroBuildModuleWidgets` macro to build the module widgets. It passes various parameters, including source files, header files, UI files, resources, and target libraries. It also configures PythonQt wrapping.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/Widgets/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nSlicerMacroBuildModuleWidgets(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  UI_SRCS ${${KIT}_UI_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  RESOURCES ${${KIT}_RESOURCES}\n  WRAP_PYTHONQT\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories\nDESCRIPTION: Adds the Logic and Widgets subdirectories to the build process. This allows CMake to process the CMakeLists.txt files in those subdirectories and build the corresponding components.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/LoadableExtensionTemplate/LoadableModuleTemplate/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Logic)\nadd_subdirectory(Widgets)\n```\n\n----------------------------------------\n\nTITLE: Installing FFmpeg on MacOS using Homebrew\nDESCRIPTION: This code snippet demonstrates how to install FFmpeg on MacOS using Homebrew package manager. It assumes that Homebrew is already installed. After running this command, the ffmpeg executable will be available at `/usr/local/bin/ffmpeg`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/modules/screencapture.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew install ffmpeg\n```\n\n----------------------------------------\n\nTITLE: Building the Library\nDESCRIPTION: This snippet creates the `SlicerBaseLogic` library using the source files defined in `SlicerBaseLogic_SRCS`.  It then links the library against other required libraries like MRMLLogic, VTK, and LibArchive. Conditional library linking for CLI support (MRMLCLI) and Python support (VTK::WrappingPythonCore, PYTHON_LIBRARY) are also included.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/Logic/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(lib_name SlicerBaseLogic)\n\n#set(srcs ${SlicerBaseLogic_SRCS} ${Instantiator_SRCS})\nset(srcs ${SlicerBaseLogic_SRCS})\n\nadd_library(${lib_name} ${srcs})\n\nset(libs\n  MRMLLogic\n  ${VTK_LIBRARIES}\n  )\n\n# Archive support used by extensions and by slicer data bundle\nlist(APPEND libs\n  ${LibArchive_LIBRARY}\n  )\n\nif(Slicer_BUILD_CLI_SUPPORT)\n  list(APPEND libs\n    MRMLCLI\n    )\nendif()\n\nif(Slicer_USE_PYTHONQT)\n  set(VTK_COMMON_PYTHON_LIBRARY\n    VTK::WrappingPythonCore # For vtkPythonUtil\n    )\n  list(APPEND libs\n    ${VTK_COMMON_PYTHON_LIBRARY}\n    ${PYTHON_LIBRARY} # At some point, VTK should be updated to expose VTK_PYTHON_LIBRARY\n    )\nendif()\n\ntarget_link_libraries(${lib_name} ${libs})\nset_target_properties(${lib_name} PROPERTIES LABELS ${lib_name})\nset_target_properties(${lib_name} PROPERTIES FOLDER \"Core-Base\")\n\n# Apply user-defined properties to the library target.\nif(Slicer_LIBRARY_PROPERTIES)\n  set_target_properties(${lib_name} PROPERTIES ${Slicer_LIBRARY_PROPERTIES})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Project Definition and Variable Setting (CMake)\nDESCRIPTION: This snippet defines the project name, sets the export directive, include directories, source files, moc source files, UI source files, resources, and target libraries for the qSlicerModuleWidgets module.  It configures the build environment by defining variables used in subsequent steps.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Terminologies/Widgets/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(qSlicer${MODULE_NAME}ModuleWidgets)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"Q_SLICER_MODULE_${MODULE_NAME_UPPER}_WIDGETS_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSlicerTerminologiesModuleLogic_INCLUDE_DIRS}\n  )\n\nset(${KIT}_SRCS\n  qMRMLSimpleColorTableView.cxx\n  qMRMLSimpleColorTableView.h\n  qSlicerTerminologyItemDelegate.cxx\n  qSlicerTerminologyItemDelegate.h\n  qSlicerTerminologyNavigatorWidget.cxx\n  qSlicerTerminologyNavigatorWidget.h\n  qSlicerTerminologySelectorButton.cxx\n  qSlicerTerminologySelectorButton.h\n  qSlicerTerminologySelectorDialog.cxx\n  qSlicerTerminologySelectorDialog.h\n  )\n\nset(${KIT}_MOC_SRCS\n  qMRMLSimpleColorTableView.h\n  qSlicerTerminologyItemDelegate.h\n  qSlicerTerminologyNavigatorWidget.h\n  qSlicerTerminologySelectorButton.h\n  qSlicerTerminologySelectorDialog.h\n)\n\nset(${KIT}_UI_SRCS\n  Resources/UI/qSlicerTerminologyNavigatorWidget.ui\n  )\n\nset(${KIT}_RESOURCES\n  Resources/${KIT}.qrc\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  vtkSlicerTerminologiesModuleLogic\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Variables for Module Build\nDESCRIPTION: Defines variables for source and data paths. Establishes the module name and data management target. The SEM_DATA_MANAGEMENT_TARGET variable determines which target manages external data.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MergeModels/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(BASELINE ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Baseline)\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input)\n\nset(CLP ${MODULE_NAME})\n\nif(NOT DEFINED SEM_DATA_MANAGEMENT_TARGET)\n  set(SEM_DATA_MANAGEMENT_TARGET ${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Error Message in Qt Classes (C++)\nDESCRIPTION: This snippet demonstrates how to log an error message in Qt-based classes using `qCritical()`. It checks for an error condition and logs the message along with a return statement to stop further execution.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/style_guide.md#_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nif (somethingWrongHappened)\n  {\n  qCritical() << \"I encountered an error\";\n  return;\n  }\n```\n\n----------------------------------------\n\nTITLE: Including Directories\nDESCRIPTION: This snippet includes the current binary and source directories for header files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/Testing/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories( ${CMAKE_CURRENT_BINARY_DIR})\ninclude_directories( ${CMAKE_CURRENT_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Setting Project Variables in CMake\nDESCRIPTION: This snippet sets CMake variables such as the project name (KIT), a command to run after test execution for debugging memory leaks, and a list of test source files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/Widgets/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT ${PROJECT_NAME})\nset(CMAKE_TESTDRIVER_AFTER_TESTMAIN  \"DEBUG_LEAKS_ENABLE_EXIT_ERROR();\")\nset(TEST_SOURCES\n  qMRMLTransformInfoWidgetTest1.cxx\n  qMRMLTransformDisplayNodeWidgetTest1.cxx\n  EXTRA_INCLUDE vtkMRMLDebugLeaksMacro.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining RGBA Colors for CLUT Indices\nDESCRIPTION: Each line represents a color value assigned to a specific index in the CLUT. The values are in the format: `index r g b a`. The alpha value is fixed at 255, representing full opacity. These values can then be used to map pixel data in an image to a visual color.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/Logic/Resources/ColorFiles/Inferno.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n0 0 0 0 3 255\n1 1 0 0 4 255\n2 2 0 0 6 255\n3 3 1 0 7 255\n4 4 1 1 9 255\n5 5 1 1 11 255\n6 6 2 1 14 255\n7 7 2 2 16 255\n8 8 3 2 18 255\n9 9 4 3 20 255\n10 10 4 3 22 255\n11 11 5 4 24 255\n12 12 6 4 27 255\n13 13 7 5 29 255\n14 14 8 6 31 255\n15 15 9 6 33 255\n16 16 10 7 35 255\n17 17 11 7 38 255\n18 18 13 8 40 255\n19 19 14 8 42 255\n20 20 15 9 45 255\n21 21 16 9 47 255\n22 22 18 10 50 255\n23 23 19 10 52 255\n24 24 20 11 54 255\n25 25 22 11 57 255\n26 26 23 11 59 255\n27 27 25 11 62 255\n28 28 26 11 64 255\n29 29 28 12 67 255\n30 30 29 12 69 255\n31 31 31 12 71 255\n32 32 32 12 74 255\n33 33 34 11 76 255\n34 34 36 11 78 255\n35 35 38 11 80 255\n36 36 39 11 82 255\n37 37 41 11 84 255\n38 38 43 10 86 255\n39 39 45 10 88 255\n40 40 46 10 90 255\n41 41 48 10 92 255\n42 42 50 9 93 255\n43 43 52 9 95 255\n44 44 53 9 96 255\n45 45 55 9 97 255\n46 46 57 9 98 255\n47 47 59 9 100 255\n48 48 60 9 101 255\n49 49 62 9 102 255\n50 50 64 9 102 255\n51 51 65 9 103 255\n52 52 67 10 104 255\n53 53 69 10 105 255\n54 54 70 10 105 255\n55 55 72 11 106 255\n56 56 74 11 106 255\n57 57 75 12 107 255\n58 58 77 12 107 255\n59 59 79 13 108 255\n60 60 80 13 108 255\n61 61 82 14 108 255\n62 62 83 14 109 255\n63 63 85 15 109 255\n64 64 87 15 109 255\n65 65 88 16 109 255\n66 66 90 17 109 255\n67 67 91 17 110 255\n68 68 93 18 110 255\n69 69 95 18 110 255\n70 70 96 19 110 255\n71 71 98 20 110 255\n72 72 99 20 110 255\n73 73 101 21 110 255\n74 74 102 21 110 255\n75 75 104 22 110 255\n76 76 106 23 110 255\n77 77 107 23 110 255\n78 78 109 24 110 255\n79 79 110 24 110 255\n80 80 112 25 110 255\n81 81 114 25 109 255\n82 82 115 26 109 255\n83 83 117 27 109 255\n84 84 118 27 109 255\n85 85 120 28 109 255\n86 86 122 28 109 255\n87 87 123 29 108 255\n88 88 125 29 108 255\n89 89 126 30 108 255\n90 90 128 31 107 255\n91 91 129 31 107 255\n92 92 131 32 107 255\n93 93 133 32 106 255\n94 94 134 33 106 255\n95 95 136 33 106 255\n96 96 137 34 105 255\n97 97 139 34 105 255\n98 98 141 35 105 255\n99 99 142 36 104 255\n100 100 144 36 104 255\n101 101 145 37 103 255\n102 102 147 37 103 255\n103 103 149 38 102 255\n104 104 150 38 102 255\n105 105 152 39 101 255\n106 106 153 40 100 255\n107 107 155 40 100 255\n108 108 156 41 99 255\n109 109 158 41 99 255\n110 110 160 42 98 255\n111 111 161 43 97 255\n112 112 163 43 97 255\n113 113 164 44 96 255\n114 114 166 44 95 255\n115 115 167 45 95 255\n116 116 169 46 94 255\n117 117 171 46 93 255\n118 118 172 47 92 255\n119 119 174 48 91 255\n120 120 175 49 91 255\n121 121 177 49 90 255\n122 122 178 50 89 255\n123 123 180 51 88 255\n124 124 181 51 87 255\n125 125 183 52 86 255\n126 126 184 53 86 255\n127 127 186 54 85 255\n128 128 187 55 84 255\n129 129 189 55 83 255\n130 130 190 56 82 255\n131 131 191 57 81 255\n132 132 193 58 80 255\n133 133 194 59 79 255\n134 134 196 60 78 255\n135 135 197 61 77 255\n136 136 199 62 76 255\n137 137 200 62 75 255\n138 138 201 63 74 255\n139 139 203 64 73 255\n140 140 204 65 72 255\n141 141 205 66 71 255\n142 142 207 68 70 255\n143 143 208 69 68 255\n144 144 209 70 67 255\n145 145 210 71 66 255\n146 146 212 72 65 255\n147 147 213 73 64 255\n148 148 214 74 63 255\n149 149 215 75 62 255\n150 150 217 77 61 255\n151 151 218 78 59 255\n152 152 219 79 58 255\n153 153 220 80 57 255\n154 154 221 82 56 255\n155 155 222 83 55 255\n156 156 223 84 54 255\n157 157 224 86 52 255\n158 158 226 87 51 255\n159 159 227 88 50 255\n160 160 228 90 49 255\n161 161 229 91 48 255\n162 162 230 92 46 255\n163 163 230 94 45 255\n164 164 231 95 44 255\n165 165 232 97 43 255\n166 166 233 98 42 255\n167 167 234 100 40 255\n168 168 235 101 39 255\n169 169 236 103 38 255\n170 170 237 104 37 255\n171 171 237 106 35 255\n172 172 238 108 34 255\n173 173 239 109 33 255\n174 174 240 111 31 255\n175 175 240 112 30 255\n176 176 241 114 29 255\n177 177 242 116 28 255\n178 178 242 117 26 255\n179 179 243 119 25 255\n180 180 243 121 24 255\n181 181 244 122 22 255\n182 182 245 124 21 255\n183 183 245 126 20 255\n184 184 246 128 18 255\n185 185 246 129 17 255\n186 186 247 131 16 255\n187 187 247 133 14 255\n188 188 248 135 13 255\n189 189 248 136 12 255\n190 190 248 138 11 255\n191 191 249 140 9 255\n192 192 249 142 8 255\n193 193 249 144 8 255\n194 194 250 145 7 255\n195 195 250 147 6 255\n196 196 250 149 6 255\n197 197 250 151 6 255\n198 198 251 153 6 255\n199 199 251 155 6 255\n200 200 251 157 6 255\n201 201 251 158 7 255\n202 202 251 160 7 255\n203 203 251 162 8 255\n204 204 251 164 10 255\n205 205 251 166 11 255\n206 206 251 168 13 255\n207 207 251 170 14 255\n208 208 251 172 16 255\n209 209 251 174 18 255\n210 210 251 176 20 255\n211 211 251 177 22 255\n212 212 251 179 24 255\n213 213 251 181 26 255\n214 214 251 183 28 255\n215 215 251 185 30 255\n216 216 250 187 33 255\n217 217 250 189 35 255\n218 218 250 191 37 255\n219 219 250 193 40 255\n220 220 249 195 42 255\n221 221 249 197 44 255\n222 222 249 199 47 255\n223 223 248 201 49 255\n224 224 248 203 52 255\n225 225 248 205 55 255\n226 226 247 207 58 255\n227 227 247 209 60 255\n228 228 246 211 63 255\n229 229 246 213 66 255\n230 230 245 215 69 255\n231 231 245 217 72 255\n232 232 244 219 75 255\n233 233 244 220 79 255\n234 234 243 222 82 255\n235 235 243 224 86 255\n236 236 243 226 89 255\n237 237 242 228 93 255\n238 238 242 230 96 255\n239 239 241 232 100 255\n240 240 241 233 104 255\n241 241 241 235 108 255\n242 242 241 237 112 255\n243 243 241 238 116 255\n244 244 241 240 121 255\n245 245 241 242 125 255\n246 246 242 243 129 255\n247 247 242 244 133 255\n248 248 243 246 137 255\n249 249 244 247 141 255\n250 250 245 248 145 255\n251 251 246 250 149 255\n252 252 247 251 153 255\n253 253 249 252 157 255\n254 254 250 253 160 255\n255 255 252 254 164 255\n```\n\n----------------------------------------\n\nTITLE: Export Model to Blender with Color by Scalar (Python)\nDESCRIPTION: This script exports a model to a PLY file, preserving color by scalar values for use in Blender. It retrieves a model node, converts it to triangles, sets up a lookup table from the model's display node for color mapping, and writes the PLY file. Requires a model named \"Model\".\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/models.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nmodelNode = getNode(\"Model\")\nplyFilePath = \"c:/tmp/model.ply\"\n\nmodelDisplayNode = modelNode.GetDisplayNode()\ntriangles = vtk.vtkTriangleFilter()\ntriangles.SetInputConnection(modelDisplayNode.GetOutputPolyDataConnection())\n\nplyWriter = vtk.vtkPLYWriter()\nplyWriter.SetInputConnection(triangles.GetOutputPort())\nlut = vtk.vtkLookupTable()\nlut.DeepCopy(modelDisplayNode.GetColorNode().GetLookupTable())\nlut.SetRange(modelDisplayNode.GetScalarRange())\nplyWriter.SetLookupTable(lut)\nplyWriter.SetArrayName(modelDisplayNode.GetActiveScalarName())\n\nplyWriter.SetFileName(plyFilePath)\nplyWriter.Write()\n```\n\n----------------------------------------\n\nTITLE: Defining Target Libraries in CMake\nDESCRIPTION: Specifies the libraries that the module depends on. In this case, it is empty.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SlicerWelcome/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_TARGET_LIBRARIES\n  )\n```\n\n----------------------------------------\n\nTITLE: Source Files Definition CMake\nDESCRIPTION: Defines the C++ source files for the module widgets, including the .cxx and .h files for the FooBarWidget.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperLoadableModuleTemplate/Widgets/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_SRCS\n  qSlicer${MODULE_NAME}FooBarWidget.cxx\n  qSlicer${MODULE_NAME}FooBarWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Export Directive\nDESCRIPTION: This snippet defines the export directive for the plugin, which is used to control which symbols are exported from the plugin's shared library. It sets the `${KIT}_EXPORT` variable to \"Q_SLICER_STYLES_PLUGINS_EXPORT\", which should be defined elsewhere to handle platform-specific decorations for export.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTGUI/StylePlugins/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_EXPORT \"Q_SLICER_STYLES_PLUGINS_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Adding Python Unit Test (CMake)\nDESCRIPTION: Adds a Python unit test for the ColorLegendSelfTest module. This test uses Slicer arguments to disable CLI modules, ensuring a focused test environment.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/Testing/Python/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nslicer_add_python_unittest(SCRIPT ColorLegendSelfTest.py\n                           SLICER_ARGS --disable-cli-modules)\n```\n\n----------------------------------------\n\nTITLE: Set Target Variable for Data Management in CMake\nDESCRIPTION: This snippet defines a variable `SEM_DATA_MANAGEMENT_TARGET` if it is not already defined. This variable is used to specify the target for external data management, defaulting to `${CLP}Data` if not already set. It sets default target name.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/AddScalarVolumes/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED SEM_DATA_MANAGEMENT_TARGET)\n  set(SEM_DATA_MANAGEMENT_TARGET ${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing Project and Setting Variables in CMake\nDESCRIPTION: This snippet initializes the CMake project for the module logic and sets several variables. The `KIT` variable is set to the project name, and export directive, include directories, source files, and target libraries are defined for use in subsequent build steps.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/ViewControllers/Logic/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleLogic)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_LOGIC_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  )\n\nset(${KIT}_SRCS\n  vtkSlicer${MODULE_NAME}Logic.cxx\n  vtkSlicer${MODULE_NAME}Logic.h\n  )\n\nset(${KIT}_TARGET_LIBRARIES\n  ${ITK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Build Shared Libraries Option (CMake)\nDESCRIPTION: This snippet sets the `BUILD_SHARED_LIBS` option, determining whether Slicer is built with shared libraries. It defaults to ON and marks it for superbuild configuration. The value is then assigned to `Slicer_BUILD_SHARED`. \nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\n# Build shared lib by default\n#------------------------------------------------------------------------------\n# option(BUILD_SHARED_LIBS \"Build Slicer with shared libraries.\" ON)\nset(BUILD_SHARED_LIBS ON)\nmark_as_superbuild(BUILD_SHARED_LIBS:BOOL)\nset(Slicer_BUILD_SHARED ${BUILD_SHARED_LIBS})\n```\n\n----------------------------------------\n\nTITLE: Cloning Slicer source code using Git (Windows)\nDESCRIPTION: This snippet shows how to clone the Slicer source code from the GitHub repository into the specified source directory. The dot at the end is crucial to clone into the current directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/windows.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/Slicer/Slicer.git .\n```\n\n----------------------------------------\n\nTITLE: QuaternionRigidTransform Definition\nDESCRIPTION: Defines a QuaternionRigidTransform using ITK's transform file format. The transform includes parameters representing the rotation (quaternion) and translation. Fixed parameters are also specified.\nSOURCE: https://github.com/slicer/slicer/blob/main/Testing/Data/Input/itkQuaternionRigidTransform02.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nTransform: QuaternionRigidTransform_double_3_3\nParameters: 0 0 0 1  10 10 10\nFixedParameters: 0 0 0\n```\n\n----------------------------------------\n\nTITLE: Getting Parameter Names from CLI Module in Slicer (Python)\nDESCRIPTION: This script prints all the parameter names, tags, and labels of a CLI module's parameter node. It iterates through parameter groups and their parameters to display the information.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/python_faq.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\ncliModule = slicer.modules.grayscalemodelmaker\nn=cliModule.cliModuleLogic().CreateNode()\nfor groupIndex in range(n.GetNumberOfParameterGroups()):\n  print(f'Group: {n.GetParameterGroupLabel(groupIndex)}')\n  for parameterIndex in range(n.GetNumberOfParametersInGroup(groupIndex)):\n    print('  {0} [{1}]: {2}'.format(n.GetParameterName(groupIndex, parameterIndex),\n      n.GetParameterTag(groupIndex, parameterIndex),n.GetParameterLabel(groupIndex, parameterIndex)))\n```\n\n----------------------------------------\n\nTITLE: Error Logging in Python\nDESCRIPTION: This snippet demonstrates logging an error message in Python using the `logging.error()` function. It prints the message to standard error and the application log.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/style_guide.md#_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nlogging.error(\"This is an error message. It is printed on the console (to standard error) and to the application log.\")\n```\n\n----------------------------------------\n\nTITLE: Debugging Make build with logging - console\nDESCRIPTION: This command shows how to run `make` and pipe the output to a log file. The `-j10` option specifies to run 10 jobs concurrently. `-k` option makes make continue as much as possible after an error. The standard error stream is redirected to standard output, and both are piped to the `tee` command, which outputs to both the terminal and the log file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/macos.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nmake -j10 -k; make 2>&1 | tee /tmp/build.log\n```\n\n----------------------------------------\n\nTITLE: Show Comparison View of Model Files in Folder (Python)\nDESCRIPTION: This script provides a starting point for comparing multiple model files within a directory.  It lists the files in the directory that match a specified extension.  The provided code only includes the file listing portion. The intended purpose is to load and display these models for visual comparison. Requires a directory with model files and a file extension.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/models.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Inputs\nmodelDir = \"c:/some/folder/containing/models\"\nmodelFileExt = \"stl\"\nnumberOfColumns = 4\n\nimport math\nimport os\nmodelFiles = list(f for f in os.listdir(modelDir) if f.endswith(\".\" + modelFileExt))\n```\n\n----------------------------------------\n\nTITLE: Downloading test extensions using file(DOWNLOAD)\nDESCRIPTION: This snippet downloads pre-built test extensions from a specified URL. It iterates through a list of SHA256 hashes and filenames. For each item, it constructs the download URL, downloads the file to the resources directory, and verifies the downloaded file's integrity by comparing its SHA256 hash against the expected value. The `EXPECTED_HASH` option is used to ensure file integrity.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/Testing/Cxx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n  foreach(hash_and_filename IN ITEMS\n      \"5eb10b69fe164d9998be8cfd2a18a868afe0d9ac052f79fea9564ec3de6a8a07:30987-linux-amd64-ImageMaker-git6293f99-2017-07-03.tar.gz\"\n      \"cd4434157d4846ee211ebe76ebc109e4ebf5dea6de06c146bfdd1366a7e32793:30987-linux-amd64-MarkupsToModel-git835453f-2022-05-11.tar.gz\"\n      \"aa0c39c22027777f27205b671eff272466c75cb020d7c264a44b271b23b3e91a:30987-linux-amd64-CurveMaker-git5619cf5-2019-09-09.tar.gz\"\n      \"66b6dfa2fd76b5d47f0a0eebabde1b61a7779b3c5c475243ead2e84fb5718d16:30987-macosx-amd64-ImageMaker-git6293f99-2017-07-03.tar.gz\"\n      \"505556ddfac14d69017146663e18360c03afd972c5b906e14fe92c17917a1f45:30987-macosx-amd64-MarkupsToModel-git835453f-2022-05-11.tar.gz\"\n      \"cd65433867aa1bfa9c7b57b193f3d6c01c9adb8eca8fb644147ec234fe1bcecb:30987-macosx-amd64-CurveMaker-git5619cf5-2019-09-09.tar.gz\"\n      )\n    string(REPLACE \":\" \";\" hash_and_filename ${hash_and_filename})\n    list(GET hash_and_filename 0 _hash)\n    list(GET hash_and_filename 1 _filename)\n    file(DOWNLOAD\n      https://github.com/Slicer/SlicerTestingData/releases/download/SHA256/${_hash}\n      ${resources_dir}/${_filename}\n      EXPECTED_HASH SHA256=${_hash}\n      )\n  endforeach()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Add CLI Subdirectories\nDESCRIPTION: This block conditionally adds the QTCLI and CLI subdirectories if the `Slicer_BUILD_CLI_SUPPORT` CMake option is enabled. This allows building the command-line interface components only when they are needed, reducing build time and dependencies.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_BUILD_CLI_SUPPORT)\n  add_subdirectory(QTCLI)\n  add_subdirectory(CLI)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Splitting Volume into Smaller Chunks in Python\nDESCRIPTION: This Python code snippet demonstrates how to split a volume into smaller chunks to avoid TDR errors when rendering large volumes. It retrieves the volume rendering displayable manager, gets the volume mapper for a specific volume, and sets the partitions for the volume rendering.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/modules/volumerendering.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nthreeDViewWidget = slicer.app.layoutManager().threeDWidget(0)\nvrDisplayableManager = threeDViewWidget.threeDView().displayableManagerByClassName('vtkMRMLVolumeRenderingDisplayableManager')\nvrMapper = vrDisplayableManager.GetVolumeMapper(getNode('skull'))\nvrMapper.SetPartitions(1,1,2)\n```\n\n----------------------------------------\n\nTITLE: Switch to View Transform Mode (Python)\nDESCRIPTION: Switches the interaction mode back to view transform, allowing users to manipulate the view instead of placing control points. Also allows turning off place mode persistence.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/markups.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ninteractionNode = slicer.mrmlScene.GetNodeByID(\"vtkMRMLInteractionNodeSingleton\")\ninteractionNode.SwitchToViewTransformMode()\n# also turn off place mode persistence if required\ninteractionNode.SetPlaceModePersistence(0)\n```\n\n----------------------------------------\n\nTITLE: Configuring Input Files (CMake)\nDESCRIPTION: This snippet configures multiple input files (ModelMakerTest.mrml) and copies them to a temporary directory. It loops through numbers 1 to 5, creating copies named `ModelMakerTest${filenum}.mrml` in the `${TEMP}` directory. The `COPYONLY` option ensures that the files are copied without further processing.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ModelMaker/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(filenum RANGE 1 5)\n  configure_file(${INPUT}/ModelMakerTest.mrml\n      ${TEMP}/ModelMakerTest${filenum}.mrml\n      COPYONLY)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory for Loadable Module\nDESCRIPTION: Adds a subdirectory containing a loadable module to the build process. The add_subdirectory command instructs CMake to process the CMakeLists.txt file in the specified directory and include its targets in the build. In this case, it's for the LoadableModuleTemplate.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/LoadableExtensionTemplate/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(LoadableModuleTemplate)\n```\n\n----------------------------------------\n\nTITLE: Project Definition CMake\nDESCRIPTION: This snippet defines the project name. It's a fundamental CMake command used to specify the name of the project being built.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkTeem/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(vtkTeem)\n```\n\n----------------------------------------\n\nTITLE: Setting Python Scripts - DICOM - CMake\nDESCRIPTION: This snippet defines the Python scripts associated with the DICOM module. Specifically, it sets the `MODULE_PYTHON_SCRIPTS` variable to a list containing 'DICOM.py'. This script likely contains the core logic of the DICOM module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOM/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_PYTHON_SCRIPTS\n  ${MODULE_NAME}.py\n  )\n```\n\n----------------------------------------\n\nTITLE: Disable thread events in GDB (Text)\nDESCRIPTION: This command disables the display of thread events in GDB, reducing clutter during debugging, especially when dealing with multithreaded VTK and ITK filters.  Without this, GDB will print messages for each new thread and exiting thread.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/debugging/linuxcpp.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nset print thread-events off\n```\n\n----------------------------------------\n\nTITLE: Appending Source Files (PythonQt)\nDESCRIPTION: Conditionally appends source files related to PythonQt support if PythonQt support is enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_USE_PYTHONQT)\n  list(APPEND KIT_SRCS\n    qSlicerScriptedFileReader.cxx\n    qSlicerScriptedFileReader.h\n    qSlicerScriptedFileWriter.cxx\n    qSlicerScriptedFileWriter.h\n    qSlicerScriptedUtils.cxx\n    qSlicerScriptedUtils_p.h\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Change Box Color in 3D View in Slicer (Python)\nDESCRIPTION: This snippet modifies the color of the box surrounding the 3D view in 3D Slicer. It accesses the MRML view node and sets the box color to red (1,0,0).\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_54\n\nLANGUAGE: python\nCODE:\n```\nviewNode = slicer.app.layoutManager().threeDWidget(0).mrmlViewNode()\nviewNode.SetBoxColor(1,0,0)\n```\n\n----------------------------------------\n\nTITLE: MOC Source Files Definition\nDESCRIPTION: Defines the list of header files that require the Qt Meta Object Compiler (moc) to generate meta-object code. This is necessary for Qt's signal and slot mechanism and other meta-object features.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_MOC_SRCS\n  qSlicerSubjectHierarchyMarkupsPlugin.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Including Slicer Extension CMake Modules\nDESCRIPTION: This CMake snippet includes Slicer-specific CMake modules for generating configuration files and creating packages for the extension. These modules, defined by `Slicer_EXTENSION_GENERATE_CONFIG` and `Slicer_EXTENSION_CPACK`, automate the process of preparing the extension for distribution and deployment within the Slicer environment.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/ScriptedSegmentEditorEffectExtensionTemplate/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${Slicer_EXTENSION_GENERATE_CONFIG})\ninclude(${Slicer_EXTENSION_CPACK})\n```\n\n----------------------------------------\n\nTITLE: Set Link Libraries\nDESCRIPTION: Sets the link libraries for the vtkSegmentationCore library. This includes the VTK libraries and, if UUIDs are enabled, the gdcmMSFF library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkSegmentationCore/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(vtkSegmentationCore_LIBS\n  ${VTK_LIBRARIES}\n  )\n\nif (${PROJECT_NAME}_USE_UUID)\n  # In order to use UUIDs for segment IDs, we need to link against the gdcmMSFF library\n  # for gdcm::UIDGenerator.\n  list(APPEND vtkSegmentationCore_LIBS\n    gdcmMSFF\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating MOC Sources with CMake\nDESCRIPTION: This snippet configures the generation of meta-object code (MOC) for the test source files using CMake. It identifies the C++ files that require MOC processing and then uses `QT5_GENERATE_MOCS` to generate the necessary MOC files. The generated files are placed in the build directory, which is then added to the include directories.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/Testing/Cxx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT_TEST_GENERATE_MOC_SRCS\n  qSlicer${MODULE_NAME}ModuleWidgetTest.cxx\n  )\n  QT5_GENERATE_MOCS(${KIT_TEST_GENERATE_MOC_SRCS})\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Project Properties\nDESCRIPTION: Sets the project name, defines an export directive for the module widgets, and specifies include directories based on the vtkSlicer${MODULE_NAME}ModuleLogic module. This allows the current module to access headers from the logic module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Plots/Widgets/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(qSlicer${MODULE_NAME}ModuleWidgets)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"Q_SLICER_MODULE_${MODULE_NAME_UPPER}_WIDGETS_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSlicer${MODULE_NAME}ModuleLogic_SOURCE_DIR}\n  ${vtkSlicer${MODULE_NAME}ModuleLogic_BINARY_DIR}\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining QtTesting Tests\nDESCRIPTION: This snippet defines a function to configure QtTesting tests, but the content of the function is incomplete in the provided extract.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/Testing/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_USE_QtTesting)\n  function(QtTesting_TEST testname)\n    if(${ARGC} GREATER 1)\n```\n\n----------------------------------------\n\nTITLE: Building Qt Designer Plugin - CMake\nDESCRIPTION: This utilizes the ctkMacroBuildQtDesignerPlugin macro to build the Qt Designer plugin. It configures the plugin with the project name, export directive, source files, moc sources, and target libraries. The plugin will be placed in the 'Core-Base' folder.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTGUI/DesignerPlugins/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nctkMacroBuildQtDesignerPlugin(\n  NAME ${PROJECT_NAME}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT}\n  FOLDER \"Core-Base\"\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Simple Tests\nDESCRIPTION: This snippet adds simple tests using the `simple_test` macro. It specifies the names of the tests to be added, which correspond to the source files defined earlier.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Sequences/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nsimple_test( qMRMLSequenceBrowserWidgetsTest1 )\nsimple_test( qMRMLSequenceEditWidgetTest1 )\n```\n\n----------------------------------------\n\nTITLE: Include Directories Configuration\nDESCRIPTION: Configures the include directories for the module widgets.  In this case, no specific directories are explicitly added, so the list is empty. This implies that include paths are either standard or defined elsewhere.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/Loadable/Widgets/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_INCLUDE_DIRECTORIES\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Executable and Linking Libraries\nDESCRIPTION: This snippet defines the test executable using `ctk_add_executable_utf8`, links the necessary libraries using `target_link_libraries`, and sets the folder property of the target using `set_target_properties`. It compiles and links the C++ tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Logic/Testing/Cxx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nctk_add_executable_utf8(${KIT}CxxTests ${Tests})\ntarget_link_libraries(${KIT}CxxTests ${KIT} ${ITK_LIBRARIES})\n\nset_target_properties(${KIT}CxxTests PROPERTIES FOLDER ${${PROJECT_NAME}_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Creating test sourcelist using create_test_sourcelist\nDESCRIPTION: This snippet uses a custom CMake function `create_test_sourcelist` to generate a source list for the tests. It specifies the main test source file (`${KIT}CxxTests.cxx`), the list of test source files (`${KIT_TEST_SRCS}`), and an extra include file (`vtkMRMLDebugLeaksMacro.h`).\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/Testing/Cxx/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n  create_test_sourcelist(Tests ${KIT}CxxTests.cxx\n    ${KIT_TEST_SRCS}\n    EXTRA_INCLUDE vtkMRMLDebugLeaksMacro.h\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name\nDESCRIPTION: This snippet sets the module name to GrayscaleModelMaker. This variable is used throughout the CMake configuration to refer to the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GrayscaleModelMaker/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME GrayscaleModelMaker)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Name in CMake\nDESCRIPTION: This CMake command sets the `LIBRARY_NAME` variable to the value of the `PROJECT_NAME` variable, which is presumably defined elsewhere in the project. This establishes the library name based on the project name.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkTeem/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIBRARY_NAME ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Defining Brain Region Colors\nDESCRIPTION: This text defines the color mapping for a specific brain region in the atlas. Each line assigns a unique ID to a brain region name and specifies its RGBA color value. The ID is an integer, the region name is a string, and the RGBA values are integers ranging from 0 to 255.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/Logic/Resources/ColorFiles/SPL-BrainAtlas-2009-ColorFile.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n0 background 0 0 0 255\n```\n\nLANGUAGE: text\nCODE:\n```\n2 white_matter_of_left_cerebral_hemisphere 245 245 245 255\n```\n\nLANGUAGE: text\nCODE:\n```\n4 left_lateral_ventricle 120 18 134 255\n```\n\nLANGUAGE: text\nCODE:\n```\n5 temporal_horn_of_left_lateral_ventricle 196 58 250 255\n```\n\nLANGUAGE: text\nCODE:\n```\n7 white_matter_of_cerebellum_left 221 248 164 255\n```\n\nLANGUAGE: text\nCODE:\n```\n8 left_cerebellar_cortex 230 148 34 255\n```\n\nLANGUAGE: text\nCODE:\n```\n10 left_thalamus 0 118 14 255\n```\n\nLANGUAGE: text\nCODE:\n```\n11 left_caudate_nucleus 122 186 220 255\n```\n\nLANGUAGE: text\nCODE:\n```\n12 left_putamen 236 13 176 255\n```\n\nLANGUAGE: text\nCODE:\n```\n13 left_globus_pallidus_pars_externa 12 48 255 255\n```\n\nLANGUAGE: text\nCODE:\n```\n14 wall_of_third_ventricle 204 182 142 255\n```\n\nLANGUAGE: text\nCODE:\n```\n15 fourth_ventricle 42 204 164 255\n```\n\nLANGUAGE: text\nCODE:\n```\n17 left_hippocampus 220 216 20 255\n```\n\nLANGUAGE: text\nCODE:\n```\n18 left_amygdala 103 255 255 255\n```\n\nLANGUAGE: text\nCODE:\n```\n24 third_ventricle_(1) 60 60 60 255\n```\n\nLANGUAGE: text\nCODE:\n```\n25 left_globus_pallidus_pars_interna 255 165 0 255\n```\n\nLANGUAGE: text\nCODE:\n```\n26 left_nucleus_accumbens 165 0 255 255\n```\n\nLANGUAGE: text\nCODE:\n```\n27 left_middle_cerebellar_peduncle 0 255 127 255\n```\n\nLANGUAGE: text\nCODE:\n```\n28 left_hypothalamus 165 42 42 255\n```\n\nLANGUAGE: text\nCODE:\n```\n34 left_superior_cerebellar_peduncle 122 135 50 255\n```\n\nLANGUAGE: text\nCODE:\n```\n35 pons 51 50 135 255\n```\n\nLANGUAGE: text\nCODE:\n```\n40 midbrain 205 62 78 255\n```\n\nLANGUAGE: text\nCODE:\n```\n41 white_matter_of_right_cerebral_hemisphere 0 225 0 255\n```\n\nLANGUAGE: text\nCODE:\n```\n43 right_lateral_ventricle 120 18 134 255\n```\n\nLANGUAGE: text\nCODE:\n```\n44 temporal_horn_of_right_lateral_ventricle 196 58 250 255\n```\n\nLANGUAGE: text\nCODE:\n```\n46 white_matter_of_cerebellum_right 220 248 164 255\n```\n\nLANGUAGE: text\nCODE:\n```\n47 right_cerebellar_cortex 230 148 34 255\n```\n\nLANGUAGE: text\nCODE:\n```\n49 right_thalamus 0 118 14 255\n```\n\nLANGUAGE: text\nCODE:\n```\n50 right_caudate_nucleus 122 186 220 255\n```\n\nLANGUAGE: text\nCODE:\n```\n51 right_putamen 236 13 176 255\n```\n\nLANGUAGE: text\nCODE:\n```\n52 right_globus_pallidus_pars_externa 13 48 255 255\n```\n\nLANGUAGE: text\nCODE:\n```\n53 right_hippocampus 220 216 20 255\n```\n\nLANGUAGE: text\nCODE:\n```\n54 right_amygdala 103 255 255 255\n```\n\nLANGUAGE: text\nCODE:\n```\n55 right_insula 80 196 98 255\n```\n\nLANGUAGE: text\nCODE:\n```\n58 right_nucleus_accumbens 255 165 0 255\n```\n\nLANGUAGE: text\nCODE:\n```\n60 right_hypothalamus 165 42 42 255\n```\n\nLANGUAGE: text\nCODE:\n```\n61 medulla_oblongata 135 206 235 255\n```\n\nLANGUAGE: text\nCODE:\n```\n63 choroid_plexus_of_right_lateral_ventricle 0 200 221 255\n```\n\nLANGUAGE: text\nCODE:\n```\n66 left_substantia_nigra 122 135 50 255\n```\n\nLANGUAGE: text\nCODE:\n```\n71 right_substantia_nigra 122 135 50 255\n```\n\nLANGUAGE: text\nCODE:\n```\n72 pineal_body 120 190 150 255\n```\n\nLANGUAGE: text\nCODE:\n```\n78 left_optic_tract 255 148 10 255\n```\n\nLANGUAGE: text\nCODE:\n```\n79 left_red_nucleus 255 148 10 255\n```\n\nLANGUAGE: text\nCODE:\n```\n84 right_red_nucleus 255 218 185 255\n```\n\nLANGUAGE: text\nCODE:\n```\n85 optic_chiasm 234 169 30 255\n```\n\nLANGUAGE: text\nCODE:\n```\n96 pellucid_septum 205 10 125 255\n```\n\nLANGUAGE: text\nCODE:\n```\n100 left_mammillothalamic_tract 124 140 178 255\n```\n\nLANGUAGE: text\nCODE:\n```\n142 anterior_commissure 221 226 68 255\n```\n\nLANGUAGE: text\nCODE:\n```\n200 right_mammillothalamic_tract 0 50 128 255\n```\n\nLANGUAGE: text\nCODE:\n```\n216 right_optic_tract 255 204 102 255\n```\n\nLANGUAGE: text\nCODE:\n```\n500 internal_medullar_lamina_R 200 200 200 255\n```\n\nLANGUAGE: text\nCODE:\n```\n501 internal_medullar_lamina_L 200 200 200 255\n```\n\nLANGUAGE: text\nCODE:\n```\n502 medial_geniculate_body_R 125 250 21 255\n```\n\nLANGUAGE: text\nCODE:\n```\n503 medial_geniculate_body_L 125 250 21 255\n```\n\nLANGUAGE: text\nCODE:\n```\n504 lateral_geniculate_body_R 102 178 255 255\n```\n\nLANGUAGE: text\nCODE:\n```\n505 lateral_geniculate_body_L 102 178 255 255\n```\n\nLANGUAGE: text\nCODE:\n```\n506 pulvinar_R 63 104 224 255\n```\n\nLANGUAGE: text\nCODE:\n```\n507 pulvinar_L 63 104 224 255\n```\n\nLANGUAGE: text\nCODE:\n```\n508 anterior_thalamic_nucleus_R 255 25 127 255\n```\n\nLANGUAGE: text\nCODE:\n```\n509 anterior_thalamic_nucleus_L 255 25 127 255\n```\n\nLANGUAGE: text\nCODE:\n```\n510 dorsomedial_thalamic_nucleus_R 60 189 130 255\n```\n\nLANGUAGE: text\nCODE:\n```\n511 dorsomedial_thalamic_nucleus_L 60 189 130 255\n```\n\nLANGUAGE: text\nCODE:\n```\n512 centromedian_thalamic_nucleus_R 188 181 105 255\n```\n\nLANGUAGE: text\nCODE:\n```\n513 centromedian_thalamic_nucleus_L 188 181 105 255\n```\n\nLANGUAGE: text\nCODE:\n```\n514 ventral_anterior_thalamic_nucleus_R 254 213 0 255\n```\n\nLANGUAGE: text\nCODE:\n```\n515 ventral_anterior_thalamic_nucleus_R 254 213 0 255\n```\n\nLANGUAGE: text\nCODE:\n```\n516 ventral_lateral_thalamic_nucleus_R 60 180 180 255\n```\n\nLANGUAGE: text\nCODE:\n```\n517 ventral_lateral_thalamic_nucleus_L 60 180 180 255\n```\n\nLANGUAGE: text\nCODE:\n```\n518 lateral_posterior_thalamic_nucleus_R 204 127 0 255\n```\n\nLANGUAGE: text\nCODE:\n```\n519 lateral_posterior_thalamic_nucleus_L 204 127 0 255\n```\n\nLANGUAGE: text\nCODE:\n```\n520 lateral_dorsal_thalamic_nucleus_R 175 194 221 255\n```\n\nLANGUAGE: text\nCODE:\n```\n521 lateral_dorsal_thalamic_nucleus_L 175 194 221 255\n```\n\nLANGUAGE: text\nCODE:\n```\n522 VPM_thalamic_nucleus_R 225 167 104 255\n```\n\nLANGUAGE: text\nCODE:\n```\n523 VPM_thalamic_nucleus_L 225 167 104 255\n```\n\nLANGUAGE: text\nCODE:\n```\n524 VPL_thalamic_nucleus_R 229 127 127 255\n```\n\nLANGUAGE: text\nCODE:\n```\n525 VPL_thalamic_nucleus_L 229 127 127 255\n```\n\nLANGUAGE: text\nCODE:\n```\n1000 left_insula 125 5 25 255\n```\n\nLANGUAGE: text\nCODE:\n```\n1001 left_superior_temporal_gyrus_(1) 25 100 40 255\n```\n\nLANGUAGE: text\nCODE:\n```\n1002 left_cingulate_gyrus_(1) 125 100 160 255\n```\n\nLANGUAGE: text\nCODE:\n```\n1003 left_middle_frontal_gyrus_(1) 100 25 0 255\n```\n\nLANGUAGE: text\nCODE:\n```\n1005 left_cuneus 220 20 100 255\n```\n\nLANGUAGE: text\nCODE:\n```\n1006 left_ambiens_gyrus 220 20 10 255\n```\n\nLANGUAGE: text\nCODE:\n```\n1007 left_fusiform_gyrus 180 220 140 255\n```\n\nLANGUAGE: text\nCODE:\n```\n1008 left_inferior_parietal_lobule 220 60 220 255\n```\n\nLANGUAGE: text\nCODE:\n```\n1009 left_inferior_temporal_gyrus 180 40 120 255\n```\n\nLANGUAGE: text\nCODE:\n```\n1010 left_cingulate_gyrus_(2) 140 20 140 255\n```\n\nLANGUAGE: text\nCODE:\n```\n1011 left_lateral_occipital_gyrus 20 30 140 255\n```\n\nLANGUAGE: text\nCODE:\n```\n1012 left_orbital_gyri 35 75 50 255\n```\n\nLANGUAGE: text\nCODE:\n```\n1013 left_lingual_gyrus 225 140 140 255\n```\n\nLANGUAGE: text\nCODE:\n```\n1014 left_straight_gyrus 200 35 75 255\n```\n\nLANGUAGE: text\nCODE:\n```\n1015 left_middle_temporal_gyrus 160 100 50 255\n```\n\nLANGUAGE: text\nCODE:\n```\n1017 left_paracentral_lobule 20 220 60 255\n```\n\nLANGUAGE: text\nCODE:\n```\n1018 opercular_part_of_left_inferior_frontal_gyrus 60 220 60 255\n```\n\nLANGUAGE: text\nCODE:\n```\n1019 orbital_part_of_left_inferior_frontal_gyrus 220 180 140 255\n```\n\nLANGUAGE: text\nCODE:\n```\n1020 triangular_part_of_left_inferior_frontal_gyrus 220 60 20 255\n```\n\nLANGUAGE: text\nCODE:\n```\n1021 left_visual_cortex 120 100 60 255\n```\n\nLANGUAGE: text\nCODE:\n```\n1022 left_postcentral_gyrus 220 20 20 255\n```\n\nLANGUAGE: text\nCODE:\n```\n1023 left_cingulate_gyrus_(1) 220 180 220 255\n```\n\nLANGUAGE: text\nCODE:\n```\n1024 left_precentral_gyrus 60 20 220 255\n```\n\nLANGUAGE: text\nCODE:\n```\n1025 left_precuneus 160 140 180 255\n```\n\nLANGUAGE: text\nCODE:\n```\n1026 left_cingulate_gyrus_(3) 80 20 140 255\n```\n\nLANGUAGE: text\nCODE:\n```\n1027 left_middle_frontal_gyrus_(2) 75 50 125 255\n```\n\nLANGUAGE: text\nCODE:\n```\n1028 left_superior_frontal_gyrus_(1) 20 220 160 255\n```\n\nLANGUAGE: text\nCODE:\n```\n1029 left_superior_parietal_lobule_and_precuneus 20 180 140 255\n```\n\nLANGUAGE: text\nCODE:\n```\n1030 left_superior_temporal_gyrus 140 220 220 255\n```\n\nLANGUAGE: text\nCODE:\n```\n1031 left_angular_and_supramarginal_gyrus 80 160 20 255\n```\n\nLANGUAGE: text\nCODE:\n```\n1032 left_frontal_pole 100 0 100 255\n```\n\nLANGUAGE: text\nCODE:\n```\n1033 left_temporal_pole 70 70 70 255\n```\n\nLANGUAGE: text\nCODE:\n```\n1034 right_transverse_temporal_gyri 150 150 200 255\n```\n\nLANGUAGE: text\nCODE:\n```\n2000 right_insula 125 5 25 255\n```\n\nLANGUAGE: text\nCODE:\n```\n2001 right_superior_temporal_gyrus_(2) 25 100 40 255\n```\n\nLANGUAGE: text\nCODE:\n```\n2003 right_middle_frontal_gyrus_(1) 100 25 0 255\n```\n\nLANGUAGE: text\nCODE:\n```\n2005 right_cuneus 220 20 100 255\n```\n\nLANGUAGE: text\nCODE:\n```\n2006 right_parahippocampal_gyrus 220 20 10 255\n```\n\nLANGUAGE: text\nCODE:\n```\n2007 right_fusiform_gyrus 180 220 140 255\n```\n\nLANGUAGE: text\nCODE:\n```\n2008 right_angular_and_supramarginal_gyri 220 60 220 255\n```\n\nLANGUAGE: text\nCODE:\n```\n2009 right_inferior_temporal_gyrus 180 40 120 255\n```\n\nLANGUAGE: text\nCODE:\n```\n2010 right_cingulate_gyrus_(2) 140 20 140 255\n```\n\nLANGUAGE: text\nCODE:\n```\n2011 right_lateral_occipital_gyrus 20 30 140 255\n```\n\nLANGUAGE: text\nCODE:\n```\n2012 right_orbital_gyri_(1) 35 75 50 255\n```\n\nLANGUAGE: text\nCODE:\n```\n2013 right_lingual_gyrus 225 140 140 255\n```\n\nLANGUAGE: text\nCODE:\n```\n2014 right_straight_gyrus 200 35 75 255\n```\n\nLANGUAGE: text\nCODE:\n```\n2015 right_middle_temporal_gyrus 160 100 50 255\n```\n\nLANGUAGE: text\nCODE:\n```\n2017 right_paracentral_lobule 60 220 60 255\n```\n\nLANGUAGE: text\nCODE:\n```\n2018 opercular_part_of_right_inferior_frontal_gyrus 220 180 140 255\n```\n\nLANGUAGE: text\nCODE:\n```\n2019 orbital_part_of_right_inferior_frontal_gyrus 20 100 50 255\n```\n\nLANGUAGE: text\nCODE:\n```\n2020 triangular_part_of_right_inferior_frontal_gyrus 220 60 20 255\n```\n\nLANGUAGE: text\nCODE:\n```\n2021 right_visual_cortex 120 100 60 255\n```\n\nLANGUAGE: text\nCODE:\n```\n2022 right_postcentral_gyrus 220 20 20 255\n```\n\nLANGUAGE: text\nCODE:\n```\n2023 right_cingulate_gyrus_(1) 220 180 220 255\n```\n\nLANGUAGE: text\nCODE:\n```\n2024 right_precentral_gyrus 60 20 220 255\n```\n\nLANGUAGE: text\nCODE:\n```\n2025 right_precuneus 160 140 180 255\n```\n\nLANGUAGE: text\nCODE:\n```\n2027 right_middle_frontal_gyrus_(1) 75 50 125 255\n```\n\nLANGUAGE: text\nCODE:\n```\n2028 right_superior_frontal_gyrus 20 220 160 255\n```\n\nLANGUAGE: text\nCODE:\n```\n2029 right_superior_parietal_lobule 20 180 140 255\n```\n\nLANGUAGE: text\nCODE:\n```\n2030 right_superior_temporal_gyrus_(3) 140 220 220 255\n```\n\nLANGUAGE: text\nCODE:\n```\n2031 right_supramarginal_gyrus 80 160 20 255\n```\n\nLANGUAGE: text\nCODE:\n```\n2032 right_frontal_pole 100 0 100 255\n```\n\nLANGUAGE: text\nCODE:\n```\n2033 right_temporal_pole 70 70 70 255\n```\n\nLANGUAGE: text\nCODE:\n```\n2108 right_angular_and_supramarginal_gyri 230 250 230 255\n```\n\nLANGUAGE: text\nCODE:\n```\n3000 right_claustrum 230 250 230 255\n```\n\nLANGUAGE: text\nCODE:\n```\n3001 left_claustrum 230 155 215 255\n```\n\nLANGUAGE: text\nCODE:\n```\n3002 right_mamillary_body 130 155 95 255\n```\n\nLANGUAGE: text\nCODE:\n```\n3003 left_mamillary_body 155 230 255 255\n```\n\nLANGUAGE: text\nCODE:\n```\n3004 corpus_callosum 135 185 205 255\n```\n\nLANGUAGE: text\nCODE:\n```\n3005 right_fornix_of_forebrain 35 235 155 255\n```\n\nLANGUAGE: text\nCODE:\n```\n3007 left_fornix_of_forebrain 75 35 115 255\n```\n\nLANGUAGE: text\nCODE:\n```\n3008 infundibulum_of_neurohypophysis 35 195 35 255\n```\n\nLANGUAGE: text\nCODE:\n```\n3011 adenohypophysis 235 225 115 255\n```\n\nLANGUAGE: text\nCODE:\n```\n3012 neurohypophysis 220 180 205 255\n```\n\n----------------------------------------\n\nTITLE: Building Qt Designer Plugin with ctkMacro\nDESCRIPTION: This snippet uses the ctkMacroBuildQtDesignerPlugin macro to automate the build process for the Qt Designer plugin. It passes the previously defined variables as arguments to the macro, which generates the necessary CMake rules for compiling, linking, and installing the plugin.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOMLib/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n#-----------------------------------------------------------------------------\nctkMacroBuildQtDesignerPlugin(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT}\n  FOLDER \"Module-${MODULE_NAME}\"\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Iterating and Running Tests (CMake)\nDESCRIPTION: This CMake code iterates through the `ScenesToTest` list and calls the `SIMPLE_TEST_WITH_SCENE` macro for each scene, effectively running the defined tests for each scene file. Two specific test cases, `vtkMRMLSceneTest2` and `vtkMRMLSceneImportTest`, are executed on each scene.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Core/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(SceneToTest ${ScenesToTest})\n  SIMPLE_TEST_WITH_SCENE( vtkMRMLSceneTest2 ${SceneToTest} )\n  SIMPLE_TEST_WITH_SCENE( vtkMRMLSceneImportTest ${SceneToTest} )\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Installing Header Files (CMake)\nDESCRIPTION: Installs the configured header files to the `${Slicer_INSTALL_INCLUDE_DIR}` destination as part of the Development component, but only if `Slicer_INSTALL_NO_DEVELOPMENT` is not set.  The header files installed include `vtkSlicerConfigure.h`, `vtkSlicerVersionConfigureMinimal.h`, and `vtkSlicerVersionConfigure.h`.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_77\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND files vtkSlicerVersionConfigure.h)\n\nif(NOT Slicer_INSTALL_NO_DEVELOPMENT)\nforeach(f ${files})\n  install(\n    FILES ${CMAKE_CURRENT_BINARY_DIR}/${f}\n    DESTINATION ${Slicer_INSTALL_INCLUDE_DIR} COMPONENT Development\n    )\nendforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Temporarily Disable ptrace Restriction (Ubuntu)\nDESCRIPTION: This bash command temporarily disables the ptrace restriction in Ubuntu, allowing GDB to attach to processes owned by other users. This is necessary because, starting with Ubuntu 10.10, ptracing of non-child processes by non-root users has been disabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/debugging/linuxcpp.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope\n```\n\n----------------------------------------\n\nTITLE: Defining Test Sources with CMake\nDESCRIPTION: This snippet defines a list of C++ source files that are part of the module's test suite.  The `set` command is used to assign the list of source files to the `KIT_TEST_SRCS` variable. These source files will be compiled and linked to create the test executable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/CropVolume/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT_TEST_SRCS\n  vtkMRMLCropVolumeParametersNodeTest1.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Add Testing Subdirectory in CMake\nDESCRIPTION: Conditionally adds the 'Testing' subdirectory to the build process if testing is enabled (BUILD_TESTING is true). This includes tests specific to the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperLoadableModuleTemplate/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building CLI with SEMMacroBuildCLI\nDESCRIPTION: This code uses the SEMMacroBuildCLI macro to generate a command-line interface (CLI) application. It sets the name, logo header, target libraries (ITK), include directories, and additional source files for the CLI. The macro simplifies the process of building a Slicer CLI module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ResampleScalarVectorDWIVolume/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/NAMICLogo.h\n  TARGET_LIBRARIES ${ITK_LIBRARIES}\n  INCLUDE_DIRECTORIES\n    ${ResampleDTIVolume_SOURCE_DIR}\n  ADDITIONAL_SRCS\n    ${ResampleDTIVolume_SOURCE_DIR}/itkWarpTransform3D.h\n    ${ResampleDTIVolume_SOURCE_DIR}/itkWarpTransform3D.txx\n    ${ResampleDTIVolume_SOURCE_DIR}/itkTransformDeformationFieldFilter.h\n    ${ResampleDTIVolume_SOURCE_DIR}/itkTransformDeformationFieldFilter.txx\n    ${ResampleDTIVolume_SOURCE_DIR}/dtiprocessFiles/deformationfieldio.h\n    ${ResampleDTIVolume_SOURCE_DIR}/dtiprocessFiles/deformationfieldio.cxx\n    ${ResampleDTIVolume_SOURCE_DIR}/dtiprocessFiles/dtitypes.h\n    ${ResampleDTIVolume_SOURCE_DIR}/dtiprocessFiles/itkHFieldToDeformationFieldImageFilter.h\n    ${ResampleDTIVolume_SOURCE_DIR}/dtiprocessFiles/itkHFieldToDeformationFieldImageFilter.txx\n  )\n```\n\n----------------------------------------\n\nTITLE: Building CLI using SEMMacroBuildCLI\nDESCRIPTION: This uses the SEMMacroBuildCLI macro to build a command-line interface (CLI) module.  It specifies the name, logo header, target libraries, additional source files, and include directories. This macro handles much of the build configuration for Slicer CLI modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/RobustStatisticsSegmenter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/NAMICLogo.h\n  TARGET_LIBRARIES ${ITK_LIBRARIES}\n  ADDITIONAL_SRCS\n    labelMapPreprocessor.h\n    SFLS.h\n    SFLSSegmentor3D.h\n    SFLSSegmentor3D.txx\n    SFLSRobustStatSegmentor3DLabelMap_single.h\n    SFLSRobustStatSegmentor3DLabelMap_single.txx\n  INCLUDE_DIRECTORIES\n    ${vtkTeem_INCLUDE_DIRS}\n    ${SlicerBaseCLI_SOURCE_DIR} ${SlicerBaseCLI_BINARY_DIR}\n  )\n```\n\n----------------------------------------\n\nTITLE: Project Definition\nDESCRIPTION: Defines the CMake project name for the module's logic component.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/Logic/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleLogic)\n```\n\n----------------------------------------\n\nTITLE: Wrapping C++ with Qt5 MOC\nDESCRIPTION: This uses `QT5_WRAP_CPP` to generate MOC files from the header files in `Tests_MOC_SRCS`. It includes options to define `MRML_WIDGETS_HAVE_QT5`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(_moc_options OPTIONS -DMRML_WIDGETS_HAVE_QT5)\nQT5_WRAP_CPP(Tests_MOC_CXX ${Tests_MOC_SRCS} ${_moc_options})\n```\n\n----------------------------------------\n\nTITLE: Setting the QRCC Script Path\nDESCRIPTION: This snippet sets the path to the `qrcc.py` script, which is used by the `slicerFunctionAddPythonQtResources()` CMake function to generate Qt resource files from Python code. The path is stored in an internal cache variable.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_33\n\nLANGUAGE: cmake\nCODE:\n```\nset(Slicer_QRCC_SCRIPT \"${CMAKE_CURRENT_SOURCE_DIR}/Utilities/Scripts/qrcc.py\" CACHE INTERNAL \"Path to qrcc.py script used in slicerFunctionAddPythonQtResources() CMake function\")\n```\n\n----------------------------------------\n\nTITLE: Executing Simple Tests in CMake\nDESCRIPTION: Executes simple tests using the `simple_test` macro. It runs the specified test executable and, optionally, passes data files as arguments. It assumes that the `simple_test` macro is defined elsewhere and handles the test execution process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/Widgets/Testing/Cxx/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nsimple_test(qSlicerDiffusionTensorVolumeDisplayWidgetTest1)\nsimple_test(qSlicerDTISliceDisplayWidgetTest1)\nsimple_test(qSlicerDTISliceDisplayWidgetTest2 DATA{${INPUT}/helix-DTI.nhdr})\n```\n\n----------------------------------------\n\nTITLE: Set INCLUDE_DIRS Variable\nDESCRIPTION: Sets the ${PROJECT_NAME}_INCLUDE_DIRS variable, caching it internally.  This variable is used by other projects to find the include directories for vtkITK.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkITK/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nset(${PROJECT_NAME}_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR}\n  CACHE INTERNAL \"${PROJECT_NAME} include dirs\" FORCE)\n```\n\n----------------------------------------\n\nTITLE: Fixing libcrypto.so.1.1 incompatibility on Fedora\nDESCRIPTION: This command addresses an incompatibility issue between the included `libcrypto.so.1.1` in the Slicer installation and the system libraries used by Fedora 35. It requires moving or removing the included libcrypto files from the Slicer installation directory to resolve the conflict. $SLICER_ROOT should be replaced by the actual path to the Slicer installation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/user_guide/getting_started.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$SLICER_ROOT/lib/Slicer-5.xx/libcrypto.*\n```\n\n----------------------------------------\n\nTITLE: Debug Message in VTK Classes (C++)\nDESCRIPTION: This snippet shows how to log a debug message in VTK-based classes using `vtkDebugMacro()`. It logs the value of a variable for debugging purposes.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/style_guide.md#_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\nvtkDebugMacro(\"This variable has the value: \"<< value);\n```\n\n----------------------------------------\n\nTITLE: Adding Simple Tests\nDESCRIPTION: This snippet iterates through the list of test source files (`KIT_TEST_SRCS`) and creates a simple test for each file using the `simple_test` macro. It sets the current source directory, temporary directory, and baseline image directory for each test. Requires `KIT_TEST_SRCS`, `Slicer_BINARY_DIR`, and `CMAKE_CURRENT_SOURCE_DIR` variables.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/DisplayableManager/Testing/Cxx/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n#\n# Add all the tests\n#\nset(TEMP \"${Slicer_BINARY_DIR}/Testing/Temporary\")\nforeach(test ${KIT_TEST_SRCS})\n  get_filename_component(TESTNAME ${test} NAME_WE)\n  simple_test(\n    ${TESTNAME}\n      -D ${CMAKE_CURRENT_SOURCE_DIR}/../\n      -T ${TEMP}\n      -V Baseline/${TESTNAME}.png\n    )\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Setting Module Export Directive\nDESCRIPTION: Defines the export directive for the module, which is used to control the visibility of symbols when building shared libraries. This directive is crucial for ensuring proper linking and symbol resolution when the module is used by other parts of the application. The variable is used later to tell the compiler how to export the symbols from the library.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Units/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_EXPORT_DIRECTIVE \"Q_SLICER_QTMODULES_${MODULE_NAME_UPPER}_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name in CMake\nDESCRIPTION: Sets the name of the module to \"Segmentations\" and converts it to uppercase for use in other CMake variables. This provides a central place to define the module name and ensure consistency.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME \"Segmentations\")\n\nstring(TOUPPER ${MODULE_NAME} MODULE_NAME_UPPER)\n```\n\n----------------------------------------\n\nTITLE: Add Executable and Link Libraries in CMake\nDESCRIPTION: This snippet adds an executable named `${CLP}Test` from the source file `${CLP}Test.cxx` using `ctk_add_executable_utf8`. It then links the executable to the `${CLP}Lib` library and extra libraries from `SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES`.  The executable's LABELS and FOLDER properties are also set.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/AddScalarVolumes/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nctk_add_executable_utf8(${CLP}Test ${CLP}Test.cxx)\ntarget_link_libraries(${CLP}Test ${CLP}Lib ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES})\nset_target_properties(${CLP}Test PROPERTIES LABELS ${CLP})\nset_target_properties(${CLP}Test PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Setting Variables for Testing\nDESCRIPTION: This snippet sets CMake variables for defining paths to baseline data, input data, temporary directory, and the module name. These variables are used throughout the script to configure the testing environment.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/CLIExtensionTemplate/CLIModuleTemplate/Testing/Cxx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(BASELINE ${CMAKE_CURRENT_SOURCE_DIR}/../../Data/Baseline)\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../../Data/Input)\nset(TEMP \"${CMAKE_BINARY_DIR}/Testing/Temporary\")\n\nset(CLP ${MODULE_NAME})\n\nif(NOT DEFINED SEM_DATA_MANAGEMENT_TARGET)\n  set(SEM_DATA_MANAGEMENT_TARGET ${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Test Case in CMake\nDESCRIPTION: Adds a test case using `ExternalData_add_test`.  This test executes the `${CLP}Test` executable with specific command-line arguments, compares the output with a baseline image, and uses the `ModuleEntryPoint` entry point. The `DATA{}` macro tells ExternalData where to find the specific input and baseline data. The generated data is stored in the `${TEMP}` directory.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MedianImageFilter/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(testname ${CLP}Test)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  --compare DATA{${BASELINE}/MedianImageFilterTest.nhdr,MedianImageFilterTest.raw} ${TEMP}/MedianImageFilterTest.nhdr\n  ModuleEntryPoint\n  --neighborhood 1,2,3 DATA{${INPUT}/CTHeadAxial.nhdr,CTHeadAxial.raw.gz} ${TEMP}/MedianImageFilterTest.nhdr\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Setting Test Include Directories CMake\nDESCRIPTION: This snippet defines the `KIT_TEST_INCLUDE_DIRS` variable, specifying the include directories required for compiling the tests. It conditionally appends include directories related to the SceneViews module if it is enabled, using the source and binary directories of the `vtkSlicerSceneViewsModuleLogic` component.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/Testing/Cxx/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT_TEST_INCLUDE_DIRS\n  )\n\nif(_build_scene_views_module)\n  list(APPEND KIT_TEST_INCLUDE_DIRS\n    ${vtkSlicerSceneViewsModuleLogic_SOURCE_DIR}\n    ${vtkSlicerSceneViewsModuleLogic_BINARY_DIR}\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting UI Source Files\nDESCRIPTION: Specifies the UI files (.ui) that define the graphical user interface layouts. These files are processed to generate C++ code.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTApp/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT_UI_SRCS\n  Resources/UI/qSlicerAboutDialog.ui\n  Resources/UI/qSlicerErrorReportDialog.ui\n  Resources/UI/qSlicerMainWindow.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Forcing Slicer Revision for Extension Build (Bash)\nDESCRIPTION: This bash script demonstrates how to set the `Slicer_REVISION` environment variable to force the Slicer revision associated with the extension build. This is useful for testing purposes to ensure compatibility with a specific Slicer version. It requires CMake to be installed and configured correctly.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/extensions.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd MyExtension-debug\n$ export Slicer_REVISION=31806\n$ cmake -DCMAKE_BUILD_TYPE:STRING=Debug -DSlicer_DIR:PATH=/path/to/Slicer-SuperBuild-Debug/Slicer-build ../MyExtension\n```\n\n----------------------------------------\n\nTITLE: Creating Executable & Linking Libraries (CMake)\nDESCRIPTION: This snippet creates an executable named vtkSegmentationCoreCxxTests from the source files defined in the Tests variable. It then links this executable to the main project's library using target_link_libraries, and finally sets the folder property to organize the test executables.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkSegmentationCore/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nctk_add_executable_utf8(${KIT}CxxTests ${Tests})\ntarget_link_libraries(${KIT}CxxTests ${PROJECT_NAME})\nset_target_properties(${KIT}CxxTests PROPERTIES FOLDER ${${PROJECT_NAME}_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Adding ExternalData Target\nDESCRIPTION: This snippet adds an ExternalData target if `${SEM_DATA_MANAGEMENT_TARGET}` is equal to `${CLP}Data`. It relies on `ExternalData_add_target` which likely downloads and manages external data required for the build process. This is important when data required for the module or tests is not included in the source repository directly.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/VotingBinaryHoleFillingImageFilter/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Export Directive\nDESCRIPTION: Sets the export directive for the module, which controls symbol visibility when the module is used in other projects. It defines a CMake variable `${KIT}_EXPORT_DIRECTIVE`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/LoadableCustomMarkups/MRML/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_MRML_EXPORT\")\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Test (CMake)\nDESCRIPTION: This snippet adds an external data test using `ExternalData_add_test`. It defines the test's name, command (using `${SEM_LAUNCH_COMMAND}` and the target file), entry point, and input data.  The test uses a transform output file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/TestGridTransformRegistration/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(testname ${CLP}Test00)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  ModuleEntryPoint\n  --gridSize 5\n  --outputtransform ${TEMP}/TestGridTransformRegistrationTest00Transform.txt\n  DATA{${INPUT}/CTHeadAxial.nhdr,CTHeadAxial.raw.gz}\n  DATA{${INPUT}/CTHeadAxial.nhdr,CTHeadAxial.raw.gz}\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Launcher CMake\nDESCRIPTION: This snippet conditionally configures the application launcher if the project name is equal to `Slicer_MAIN_PROJECT`. It uses the `CONFIGURE_LAUNCHER` argument which is passed to the `slicerMacroBuildApplication` macro.\nSOURCE: https://github.com/slicer/slicer/blob/main/Applications/SlicerApp/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(extra_args)\nif(${PROJECT_NAME} STREQUAL ${Slicer_MAIN_PROJECT})\n  set(extra_args CONFIGURE_LAUNCHER)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Baseline and Input Paths - CMake\nDESCRIPTION: Defines the paths to the baseline and input data directories used for testing the module. These paths are used to locate reference data for comparison and input data for processing.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MultiplyScalarVolumes/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(BASELINE ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Baseline)\nset(INPUT ${CMAKE_CURRENT_SOURCE_DIR}/../Data/Input)\n```\n\n----------------------------------------\n\nTITLE: Documenting vtkAddonPython Module with Sphinx\nDESCRIPTION: This snippet uses the ``automodule`` directive in reStructuredText to automatically generate documentation for the ``vtkAddonPython`` module. It includes module members, undocumented members, inheritance details, and imported members.  The code leverages the Sphinx documentation generator to render the documentation based on the provided directives.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/vtkAddon.md#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: vtkAddonPython\n   :members:\n   :undoc-members:\n   :show-inheritance:\n   :imported-members:\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Test (CMake)\nDESCRIPTION: This snippet defines an ExternalData test for the ModelMaker module. It sets the test name, command, entry point, and data dependencies. It uses `${SEM_LAUNCH_COMMAND}` to launch the test executable (`${CLP}Test`) and passes arguments such as `--labels`, `--modelSceneFile`, and data file paths. Each `ExternalData_add_test` call configures a distinct test case with different parameters.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ModelMaker/Testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(testname ${CLP}Test)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  ModuleEntryPoint\n    --labels 2\n    --modelSceneFile ${TEMP}/ModelMakerTest1.mrml#vtkMRMLModelHierarchyNode1\n    DATA{${INPUT}/helix-roi-lable2.nrrd}\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n\nset(testname ${CLP}GenerateAllOneLabelTest)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  ModuleEntryPoint\n    --generateAll\n    --modelSceneFile ${TEMP}/ModelMakerTest2.mrml#vtkMRMLModelHierarchyNode1\n    DATA{${INPUT}/helix-roi-lable2.nrrd}\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n\nset(testname ${CLP}GenerateAllThreeLabelsTest)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  ModuleEntryPoint\n    --generateAll\n    --modelSceneFile ${TEMP}/ModelMakerTest3.mrml#vtkMRMLModelHierarchyNode1\n    DATA{${INPUT}/helixMask3Labels.nrrd}\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n\nset(testname ${CLP}GenerateAllThreeLabelsPadTest)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  ModuleEntryPoint\n    --generateAll\n    --modelSceneFile ${TEMP}/ModelMakerTest4.mrml#vtkMRMLModelHierarchyNode1\n    --pad\n    DATA{${INPUT}/helixMask3Labels.nrrd}\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n\n\nset(testname ${CLP}StartEndTest)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  ModuleEntryPoint\n    --start 1 --end 5\n    --modelSceneFile ${TEMP}/ModelMakerTest5.mrml#vtkMRMLModelHierarchyNode1\n    DATA{${INPUT}/helixMask3Labels.nrrd}\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n\nset(testname ${CLP}LabelsTest)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  ModuleEntryPoint\n    --labels 3,1,5\n    --modelSceneFile ${TEMP}/ModelMakerTest6.mrml#vtkMRMLModelHierarchyNode1\n    DATA{${INPUT}/helixMask3Labels.nrrd}\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n\n\n\nset(testname ${CLP}GenerateAllThreeLabelsHierarchyTest)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  ModuleEntryPoint\n    --generateAll\n    --debug\n    --modelSceneFile ${TEMP}/ModelMakerTest7.mrml#vtkMRMLModelHierarchyNode1\n    --modelHierarchyFile ${INPUT}/helixMask3Labels.mrml\n    DATA{${INPUT}/helixMask3Labels.nrrd}\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Project Initialization CMake\nDESCRIPTION: This snippet initializes the CMake project with a specific name (MRMLLogic). It also sets the minimum required CMake version to ensure compatibility with the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Logic/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(MRMLLogic)\n\n#-----------------------------------------------------------------------------\ncmake_minimum_required(VERSION 3.16.3...3.19.7 FATAL_ERROR)\n```\n\n----------------------------------------\n\nTITLE: Building Qt Designer Plugin with ctkMacroBuildQtDesignerPlugin\nDESCRIPTION: This snippet utilizes the `ctkMacroBuildQtDesignerPlugin` macro to automate the build process for the Qt Designer plugin. It passes the previously defined CMake variables as arguments, including the plugin name, export directive, folder, source files, moc files, and target libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n#-----------------------------------------------------------------------------\nctkMacroBuildQtDesignerPlugin(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT}\n  FOLDER \"Module-${MODULE_NAME}\"\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Building Qt Designer Plugin using ctkMacroBuildQtDesignerPlugin\nDESCRIPTION: This snippet utilizes the ctkMacroBuildQtDesignerPlugin CMake macro to build a Qt Designer plugin. It specifies the plugin name, export directive, output folder, source files, moc source files, and target libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nctkMacroBuildQtDesignerPlugin(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT}\n  FOLDER \"Module-${MODULE_NAME}\"\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Python Unit Tests in Slicer (CMake)\nDESCRIPTION: Adds Python unit tests for volume rendering using the `slicer_add_python_unittest` macro.  The macro creates test executables for `VolumeRenderingSceneClose.py` and `VolumeRenderingThreeDOnlyLayout.py`. This snippet relies on the `Slicer_USE_QtTesting` and `Slicer_USE_PYTHONQT` CMake variables to be enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/Testing/Python/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(Slicer_USE_QtTesting AND Slicer_USE_PYTHONQT)\n\n  # add tests\n  slicer_add_python_unittest(SCRIPT VolumeRenderingSceneClose.py)\n  slicer_add_python_unittest(SCRIPT VolumeRenderingThreeDOnlyLayout.py)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting CLP Variable\nDESCRIPTION: Sets the CLP variable to the value of MODULE_NAME. This variable appears to represent a command line program name and ensures the name is available throughout the CMake configuration. The module name is often propagated to other CMake modules to name dependent libraries or targets.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/PETStandardUptakeValueComputation/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(CLP ${MODULE_NAME})\n```\n\n----------------------------------------\n\nTITLE: Generating vtkTeem Module Documentation using automodule\nDESCRIPTION: This snippet uses the `automodule` directive in reStructuredText to automatically generate documentation for the `vtkTeemPython` module. It includes members, undocumented members, inheritance information, and imported members from the Python module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/vtkTeem.md#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: vtkTeemPython\n   :members:\n   :undoc-members:\n   :show-inheritance:\n   :imported-members:\n```\n\n----------------------------------------\n\nTITLE: Start Visual Studio with the launcher for test Slicer\nDESCRIPTION: This snippet shows how to start Visual Studio with the launcher to run tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/windows.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nSlicer.exe --VisualStudioProject\n```\n\n----------------------------------------\n\nTITLE: Set Plugin Kit Name\nDESCRIPTION: This snippet sets the name of the plugin kit using the project name and a suffix indicating it's a set of plugins.  This variable is then used in other parts of the script to refer to the plugin kit.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Plots/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT ${PROJECT_NAME}Plugins)\n```\n\n----------------------------------------\n\nTITLE: Option: Build DICOM Support\nDESCRIPTION: Defines an option to build with DICOM support. If VTKITK_BUILD_DICOM_SUPPORT is not already defined, it defaults to ON.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkITK/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED VTKITK_BUILD_DICOM_SUPPORT)\n  option(VTKITK_BUILD_DICOM_SUPPORT \"Build with DICOM support\" ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing the Library\nDESCRIPTION: Installs the MRMLIDIO library to the specified directories. It sets the install directories for the runtime (bin) and library (lib/${PROJECT_NAME}) components if they are not already defined. It installs the library as a runtime, library, and archive, each to their respective destination under the specified components.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/IDImageIO/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_INSTALL_BIN_DIR)\n  set(${PROJECT_NAME}_INSTALL_BIN_DIR bin)\nendif()\nif(NOT DEFINED ${PROJECT_NAME}_INSTALL_LIB_DIR)\n  set(${PROJECT_NAME}_INSTALL_LIB_DIR lib/${PROJECT_NAME})\nendif()\n\ninstall(TARGETS ${lib_name}\n  RUNTIME DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DIR} COMPONENT RuntimeLibraries\n  LIBRARY DESTINATION ${${PROJECT_NAME}_INSTALL_LIB_DIR} COMPONENT RuntimeLibraries\n  ARCHIVE DESTINATION ${${PROJECT_NAME}_INSTALL_LIB_DIR} COMPONENT Development\n  )\n```\n\n----------------------------------------\n\nTITLE: Set MOC Source Files\nDESCRIPTION: Sets the header files that require processing by the Meta-Object Compiler (MOC).  This is typically required for Qt classes that use signals and slots.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/LoadableCustomMarkups/Widgets/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_MOC_SRCS\n  qMRMLMarkupsTestLineWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Simple Tests\nDESCRIPTION: This snippet uses a macro called `simple_test` to add individual tests for `qSlicerAboutDialogTest1` and `qSlicerErrorReportDialogTest1`. This macro is responsible for creating the necessary CMake infrastructure for each test.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTApp/Testing/Cxx/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nsimple_test( qSlicerAboutDialogTest1 )\nsimple_test( qSlicerErrorReportDialogTest1 )\n```\n\n----------------------------------------\n\nTITLE: Building Qt Designer Plugin with CMake Macro\nDESCRIPTION: This snippet utilizes the `ctkMacroBuildQtDesignerPlugin` macro to build a Qt Designer plugin. It passes the plugin name, export directive, folder name, source files, moc header files, and target libraries as arguments. This macro handles the necessary steps for building a Qt Designer plugin, including moc processing, compilation, and linking.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/Widgets/DesignerPlugins/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nctkMacroBuildQtDesignerPlugin(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT}\n  FOLDER \"Module-${MODULE_NAME}\"\n  SRCS ${${KIT}_SRCS}\n  MOC_SRCS ${${KIT}_MOC_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating Test Executable\nDESCRIPTION: This snippet adds an executable named `${CLP}Test` using `ctk_add_executable_utf8`. It then links the executable with the `${CLP}Lib` library and other libraries specified in `SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES`. The snippet sets properties such as `LABELS` and `FOLDER` for the test executable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/CLI/Testing/Cxx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nctk_add_executable_utf8(${CLP}Test ${CLP}Test.cxx)\ntarget_link_libraries(${CLP}Test ${CLP}Lib ${SlicerExecutionModel_EXTRA_EXECUTABLE_TARGET_LIBRARIES})\nset_target_properties(${CLP}Test PROPERTIES LABELS ${CLP})\nset_target_properties(${CLP}Test PROPERTIES FOLDER ${${CLP}_TARGETS_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Iterate through slice views in Slicer (Python)\nDESCRIPTION: This snippet iterates through all slice views in the current Slicer layout, accessing the slice node and composite node for each view. It prints the name, ID, and volume IDs (background, foreground, label) of each slice view.  Requires the `slicer` module to be available in the Python environment.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/gui.md#_snippet_58\n\nLANGUAGE: python\nCODE:\n```\nlayoutManager = slicer.app.layoutManager()\nfor sliceViewName in layoutManager.sliceViewNames():\n  view = layoutManager.sliceWidget(sliceViewName).sliceView()\n  sliceNode = view.mrmlSliceNode()\n  sliceLogic = slicer.app.applicationLogic().GetSliceLogic(sliceNode)\n  compositeNode = sliceLogic.GetSliceCompositeNode()\n  print(\"Slice view \" + str(sliceViewName))\n  print(\"  Name: \" + sliceNode.GetName())\n  print(\"  ID: \" + sliceNode.GetID())\n  print(\"  Background volume: {0}\".format(compositeNode.GetBackgroundVolumeID()))\n  print(\"  Foreground volume: {0} (opacity: {1})\".format(compositeNode.GetForegroundVolumeID(), compositeNode.GetForegroundOpacity()))\n  print(\"  Label volume: {0} (opacity: {1})\".format(compositeNode.GetLabelVolumeID(), compositeNode.GetLabelOpacity()))\n```\n\n----------------------------------------\n\nTITLE: Set Library Properties\nDESCRIPTION: Applies user-defined properties to the library target, allowing for customization of the build process based on specific project requirements.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/vtkSegmentationCore/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_LIBRARY_PROPERTIES)\n  set_target_properties(${PROJECT_NAME} PROPERTIES ${Slicer_LIBRARY_PROPERTIES})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel CMake package\nDESCRIPTION: Locates the SlicerExecutionModel package using `find_package` and includes its use file. This makes the functionality provided by SlicerExecutionModel available to this module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/SubtractScalarVolumes/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name in CMake\nDESCRIPTION: Sets the module name for the N4ITKBiasFieldCorrection module. This variable is later used to define the module's identity during the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/N4ITKBiasFieldCorrection/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_NAME N4ITKBiasFieldCorrection)\n```\n\n----------------------------------------\n\nTITLE: Installing devtoolset-11 on CentOS 7\nDESCRIPTION: This command installs and activates `devtoolset-11` on CentOS 7, providing a more recent version of GCC (11.2.1) that supports C++20.  This is necessary because the default GCC version on CentOS 7 has only experimental support for C++14. The activation step needs to be done for every terminal session.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/linux.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nsudo yum install centos-release-scl\nsudo yum install devtoolset-11-gcc*\nscl enable devtoolset-11 bash         # activation is needed for every terminal session\n```\n\n----------------------------------------\n\nTITLE: Finding ITK Package\nDESCRIPTION: This snippet finds the ITK package with specific components required for the module.  It sets the required version to 4.6 and includes necessary ITK components (ITKIOImageBase, ITKSmoothing). It also conditionally disables factory register managers based on the ITK version.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperCLIModuleTemplate/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKIOImageBase\n  ITKSmoothing\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: Sets the source files for the project, including both C++ implementation files (.cxx) and header files (.h).\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTApp/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT_SRCS\n  qSlicerAboutDialog.cxx\n  qSlicerAboutDialog.h\n  qSlicerApplicationHelper.cxx\n  qSlicerApplicationHelper.h\n  qSlicerErrorReportDialog.cxx\n  qSlicerErrorReportDialog.h\n  qSlicerMainWindow.cxx\n  qSlicerMainWindow.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Convert Module Name to Uppercase - CMake\nDESCRIPTION: Converts the module name to uppercase and stores it in the MODULE_NAME_UPPER variable. This uppercase version is used for defining export directives related to the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nstring(TOUPPER ${MODULE_NAME} MODULE_NAME_UPPER)\n```\n\n----------------------------------------\n\nTITLE: Defining Module Build Directory (CMake)\nDESCRIPTION: Sets the `MODULE_BUILD_DIR` variable based on the presence of multi-configuration builds (CMAKE_CONFIGURATION_TYPES). If present, it iterates through all configurations and creates a list of module build directories; otherwise, a single directory is used.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/SubjectHierarchy/Testing/Python/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_CONFIGURATION_TYPES)\n  set(MODULE_BUILD_DIR \"\")\n  foreach(config ${CMAKE_CONFIGURATION_TYPES})\n    list(APPEND MODULE_BUILD_DIR \"${CMAKE_BINARY_DIR}/${Slicer_QTLOADABLEMODULES_LIB_DIR}/${config}\")\n  endforeach()\nelse()\n  set(MODULE_BUILD_DIR \"${CMAKE_BINARY_DIR}/${Slicer_QTLOADABLEMODULES_LIB_DIR}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building CLI with SEMMacroBuildCLI\nDESCRIPTION: This snippet uses the SEMMacroBuildCLI macro to build the command-line interface for the module. It specifies the module name, logo header, and ITK libraries as input.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CreateDICOMSeries/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nSEMMacroBuildCLI(\n  NAME ${MODULE_NAME}\n  LOGO_HEADER ${Slicer_SOURCE_DIR}/Resources/ITKLogo.h\n  TARGET_LIBRARIES ${ITK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Test Driver\nDESCRIPTION: This snippet configures the C++ test driver for the module using the slicerMacroConfigureModuleCxxTestDriver macro. It specifies the name of the module, the source files for the tests, and options to enable VTK debug leaks check and error output check.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/Logic/Testing/Cxx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nslicerMacroConfigureModuleCxxTestDriver(\n  NAME ${KIT}\n  SOURCES ${KIT_TEST_SRCS}\n  WITH_VTK_DEBUG_LEAKS_CHECK\n  WITH_VTK_ERROR_OUTPUT_CHECK\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting MOC Source Files in CMake\nDESCRIPTION: Specifies the header files that require processing by Qt's Meta-Object Compiler (moc). This is necessary for classes that use Qt's signals and slots mechanism or other meta-object features. It includes headers for the core module and the EventBroker module's classes. These headers use Qt's meta-object system.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Core/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT_MOC_SRCS\n  qSlicerCoreModule.h\n\n  EventBroker/qSlicerEventBrokerModule.h\n  EventBroker/qSlicerEventBrokerModuleWidget.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Project Initialization CMake\nDESCRIPTION: Initializes the CMake project for MRMLDisplayableManager, specifying the minimum required CMake version.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/DisplayableManager/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(MRMLDisplayableManager)\n\n#-----------------------------------------------------------------------------\ncmake_minimum_required(VERSION 3.16.3...3.19.7 FATAL_ERROR)\n#-----------------------------------------------------------------------------\n```\n\n----------------------------------------\n\nTITLE: Adding Python Unit Test\nDESCRIPTION: Adds a Python unit test for the module using slicer_add_python_unittest. This macro registers the module's Python script as a test and specifies additional module paths for the test environment.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/CropVolumeSequence/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n  slicer_add_python_unittest(\n    SCRIPT ${MODULE_NAME}.py\n    # TODO: slicer_add_python_unittest should take care of adding the additional module paths\n    SLICER_ARGS\n      --additional-module-paths ${MODULE_BUILD_DIR} ${CMAKE_BINARY_DIR}/${Slicer_QTSCRIPTEDMODULES_LIB_DIR}\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting UI Source Files in CMake\nDESCRIPTION: Specifies the Qt Designer UI files that define the user interface.  These files are processed by the CMake build system to generate C++ code that creates the UI elements. The file specifies the UI file for the EventBroker module widget.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Core/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT_UI_SRCS\n  Resources/UI/qSlicerEventBrokerModuleWidget.ui\n  )\n```\n\n----------------------------------------\n\nTITLE: Library Installation\nDESCRIPTION: This snippet installs the library. It defines the installation directories for runtime binaries and libraries using the `PROJECT_NAME_INSTALL_BIN_DIR` and `PROJECT_NAME_INSTALL_LIB_DIR` variables. It uses the install command to install the library to the specified directories.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/ITKFactoryRegistration/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# --------------------------------------------------------------------------\n# Install library\n# --------------------------------------------------------------------------\nif(NOT DEFINED ${PROJECT_NAME}_INSTALL_BIN_DIR)\n  set(${PROJECT_NAME}_INSTALL_BIN_DIR bin)\nendif()\nif(NOT DEFINED ${PROJECT_NAME}_INSTALL_LIB_DIR)\n  set(${PROJECT_NAME}_INSTALL_LIB_DIR lib/${PROJECT_NAME})\nendif()\n\ninstall(TARGETS ${lib_name}\n  RUNTIME DESTINATION ${${PROJECT_NAME}_INSTALL_BIN_DIR} COMPONENT RuntimeLibraries\n  LIBRARY DESTINATION ${${PROJECT_NAME}_INSTALL_LIB_DIR} COMPONENT RuntimeLibraries\n  ARCHIVE DESTINATION ${${PROJECT_NAME}_INSTALL_LIB_DIR} COMPONENT Development\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Test Driver\nDESCRIPTION: This snippet configures the module test driver using the `slicerMacroConfigureModuleCxxTestDriver` macro. It specifies the module name, test source files, and options to enable VTK debug leak checks and error output checks.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/Logic/Testing/Cxx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nslicerMacroConfigureModuleCxxTestDriver(\n  NAME ${KIT}\n  SOURCES ${KIT_TEST_SRCS}\n  WITH_VTK_DEBUG_LEAKS_CHECK\n  WITH_VTK_ERROR_OUTPUT_CHECK\n  )\n```\n\n----------------------------------------\n\nTITLE: Set Module Name - CMake\nDESCRIPTION: Sets the module name using the `set` command. This variable is later used in other parts of the configuration to identify the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MaskScalarVolume/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME MaskScalarVolume)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Add Python Subdirectory\nDESCRIPTION: This block conditionally adds the Python subdirectory if the `Slicer_USE_PYTHONQT` CMake option is enabled. This allows building the Python interface only when it is needed.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_USE_PYTHONQT)\n  add_subdirectory(Python)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Subdirectory with CMake\nDESCRIPTION: The `add_subdirectory` command instructs CMake to process the `CMakeLists.txt` file located in the specified subdirectory ('Cxx').  This effectively integrates the 'Cxx' project as a part of the main project. This is a fundamental CMake command for creating multi-module projects.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTGUI/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Project Initialization and Variable Setting\nDESCRIPTION: This snippet initializes the project, sets the KIT variable to the project name, and defines the export directive. It also sets include directories for dependent modules, ensuring that the necessary headers can be found during compilation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Markups/MRMLDM/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleMRMLDisplayableManager)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_MRMLDISPLAYABLEMANAGER_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSlicer${MODULE_NAME}ModuleLogic_SOURCE_DIR}\n  ${vtkSlicer${MODULE_NAME}ModuleLogic_BINARY_DIR}\n  ${vtkSlicer${MODULE_NAME}ModuleMRML_SOURCE_DIR}\n  ${vtkSlicer${MODULE_NAME}ModuleMRML_BINARY_DIR}\n  ${vtkSlicer${MODULE_NAME}ModuleVTKWidgets_SOURCE_DIR}\n  ${vtkSlicer${MODULE_NAME}ModuleVTKWidgets_BINARY_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Execution Model Output Directories\nDESCRIPTION: This snippet defines the output directories for the Slicer Execution Model (SEM) based on whether it's a superbuild or not. It sets default values for CLI runtime, library, and archive output directories if they are not already defined.\nSOURCE: https://github.com/slicer/slicer/blob/main/CMakeLists.txt#_snippet_37\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_SUPERBUILD)\n  set(_sem_output_dir ${CMAKE_BINARY_DIR}/${Slicer_BINARY_INNER_SUBDIR})\nelse()\n  set(_sem_output_dir ${CMAKE_BINARY_DIR})\nendif()\nif(NOT DEFINED SlicerExecutionModel_DEFAULT_CLI_RUNTIME_OUTPUT_DIRECTORY)\n  set(SlicerExecutionModel_DEFAULT_CLI_RUNTIME_OUTPUT_DIRECTORY ${_sem_output_dir}/${Slicer_CLIMODULES_BIN_DIR})\nendif()\nif(NOT DEFINED SlicerExecutionModel_DEFAULT_CLI_LIBRARY_OUTPUT_DIRECTORY)\n  set(SlicerExecutionModel_DEFAULT_CLI_LIBRARY_OUTPUT_DIRECTORY ${_sem_output_dir}/${Slicer_CLIMODULES_LIB_DIR})\nendif()\nif(NOT DEFINED SlicerExecutionModel_DEFAULT_CLI_ARCHIVE_OUTPUT_DIRECTORY)\n  set(SlicerExecutionModel_DEFAULT_CLI_ARCHIVE_OUTPUT_DIRECTORY ${_sem_output_dir}/${Slicer_CLIMODULES_LIB_DIR})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Project Definition\nDESCRIPTION: Defines the CMake project for the MRML module. Sets the project name as vtkSlicer${MODULE_NAME}ModuleMRML, creating a CMake project context.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/LoadableCustomMarkups/MRML/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleMRML)\n```\n\n----------------------------------------\n\nTITLE: Project Definition (CMake)\nDESCRIPTION: Defines the project name for the MRML module. It initializes the project with a specific naming convention that includes the module name.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/CropVolume/MRML/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(vtkSlicer${MODULE_NAME}ModuleMRML)\n```\n\n----------------------------------------\n\nTITLE: Source Files Definition CMake\nDESCRIPTION: Defines source files for DisplayableManager classes related to both ThreeDView and SliceView functionalities. The DisplayableManager_SRCS variable is used to list specific source files.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/DisplayableManager/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(DisplayableManager_SRCS\n\n  # DisplayableManager associated with ThreeDView\n  vtkMRMLCameraDisplayableManager.cxx\n  vtkMRMLModelDisplayableManager.cxx\n  vtkMRMLViewDisplayableManager.cxx\n  vtkMRMLThreeDReformatDisplayableManager.cxx\n  vtkMRMLThreeDSliceEdgeDisplayableManager.cxx\n\n  # DisplayableManager associated with SliceView\n  vtkMRMLCrosshairDisplayableManager.cxx\n  vtkMRMLCrosshairDisplayableManager3D.cxx\n  vtkMRMLModelSliceDisplayableManager.cxx\n  vtkMRMLVolumeGlyphSliceDisplayableManager.cxx\n\n  # DisplayableManager common between ThreeDView and SliceView\n  vtkMRMLOrientationMarkerDisplayableManager.cxx\n  vtkMRMLRulerDisplayableManager.cxx\n  vtkMRMLScalarBarDisplayableManager.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory in CMake\nDESCRIPTION: Conditionally adds the `Testing` subdirectory if the `BUILD_TESTING` variable is enabled. This allows the inclusion of unit tests or other testing infrastructure for the Segmentations module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Test\nDESCRIPTION: This snippet adds an external data test using the ExternalData module. The test compares the output of the module against a baseline dataset. It also sets module entry point parameters such as patient name, ID, comments, study details, modality, manufacturer, model, series number, description, DICOM directory and prefix.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CreateDICOMSeries/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(testname ${CLP}Test)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  --compare DATA{${BASELINE}/${CLP}Test.dcm}\n            ${TEMP}/CTHeadAxialDicom0040.dcm\n  ModuleEntryPoint\n    --patientName Austrialian\n    --patientID 8775070\n    --patientComments \"A volunteer\"\n    --studyID 123456\n    --studyDate 20090102\n    --studyComments Resampled\n    --studyDescription None\n    --modality CT\n    --manufacturer \"GE Medical Systems\"\n    --model CT8800\n    --seriesNumber 123456\n    --seriesDescription None\n    --dicomDirectory ${TEMP}\n    --dicomPrefix CTHeadAxialDicom\n    DATA{${INPUT}/CTHeadAxial.nhdr,CTHeadAxial.raw.gz}\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```\n\n----------------------------------------\n\nTITLE: Including Extension Generation and CPack Modules\nDESCRIPTION: Includes the Slicer extension generation and CPack modules to simplify the process of generating configuration files and creating packages for the extension. These modules provide helper functions for tasks such as generating configuration files and creating installable packages.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Extensions/Default/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${Slicer_EXTENSION_GENERATE_CONFIG})\ninclude(${Slicer_EXTENSION_CPACK})\n```\n\n----------------------------------------\n\nTITLE: Add Testing Subdirectory - CMake\nDESCRIPTION: Conditionally adds the Testing subdirectory if BUILD_TESTING is enabled. This allows adding and building tests for the module. Currently commented out.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/Widgets/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  #add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Find SlicerExecutionModel CMake\nDESCRIPTION: Finds the SlicerExecutionModel package, which is required for building Slicer modules. The `find_package` command searches for the package, and `include` includes the necessary use file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/AddScalarVolumes/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Warning Message in Qt Classes (C++)\nDESCRIPTION: This snippet demonstrates how to log a warning message in Qt-based classes using `qWarning()`. It logs a message indicating a potentially dangerous situation.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/style_guide.md#_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nqWarning() << \"Be careful here, this is dangerous\";\n```\n\n----------------------------------------\n\nTITLE: Project Definition\nDESCRIPTION: This snippet defines the project name as 'SuperBuildExtensionTemplate'. It initializes the project in the CMake environment, allowing subsequent CMake commands to operate within the context of this project.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(SuperBuildExtensionTemplate)\n```\n\n----------------------------------------\n\nTITLE: Documenting Slicer Module\nDESCRIPTION: This snippet uses the `automodule` directive within reStructuredText to generate API documentation for the `slicer` module. It includes all members, even those not explicitly documented, and displays inheritance information.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/slicer.md#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: slicer\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Target - CMake\nDESCRIPTION: Adds an external data target based on the SEM_DATA_MANAGEMENT_TARGET.  This is typically used to download all the data required for the module and tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MultiplyScalarVolumes/Testing/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Compute Default Values for Paths\nDESCRIPTION: Computes default values for extension description and local extension directories. It resolves symlinks for CMAKE_CURRENT_SOURCE_DIR, and then sets the default paths relative to it.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/CMake/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nget_filename_component(CMAKE_CURRENT_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR} REALPATH) # Resolved symlinks if any\nset(default_extension_description_dir ${CMAKE_CURRENT_SOURCE_DIR}/../)\nset(default_local_extension_dir ${default_extension_description_dir})\n```\n\n----------------------------------------\n\nTITLE: Shared Library Option\nDESCRIPTION: Defines an option to control whether to build shared libraries. If `BUILD_SHARED_LIBS` is not already defined, it sets it to ON by default.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/IDImageIO/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED BUILD_SHARED_LIBS)\n  option(BUILD_SHARED_LIBS \"Build with shared libraries.\" ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Module Source Files - CMake\nDESCRIPTION: Initializes an empty list for module source files. This will contain the C++ or other source files that make up the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/CLIExtensionTemplate/CLIModuleTemplate/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_SRCS\n  )\n```\n\n----------------------------------------\n\nTITLE: Packaging Slicer using Make\nDESCRIPTION: This snippet shows how to package the Slicer application using Make. This command creates a distributable package of the Slicer application. This command should be executed in the inner-build folder.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/linux.md#_snippet_19\n\nLANGUAGE: console\nCODE:\n```\nmake package\n```\n\n----------------------------------------\n\nTITLE: Permanently Disable ptrace Restriction (Ubuntu)\nDESCRIPTION: Instructions to permanently disable the ptrace restriction by modifying the `/etc/sysctl.d/10-ptrace.conf` file. This allows GDB to attach to processes owned by other users without requiring temporary disabling.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/debugging/linuxcpp.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nkernel.yama.ptrace_scope = 1\n```\n\nLANGUAGE: text\nCODE:\n```\nkernel.yama.ptrace_scope = 0\n```\n\n----------------------------------------\n\nTITLE: Setting Target Libraries\nDESCRIPTION: This snippet defines a variable containing a list of libraries required by the GrayscaleModelMaker module. It includes VTK, ITK, MRML, and Slicer-specific libraries.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GrayscaleModelMaker/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(${MODULE_NAME}_TARGET_LIBRARIES\n  vtkITK ModuleDescriptionParser MRMLCore SlicerBaseCLI ${VTK_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Appending Source Files (ExtensionManager)\nDESCRIPTION: Conditionally appends source files related to the Extension Manager if Extension Manager support is enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_BUILD_EXTENSIONMANAGER_SUPPORT)\n  list(APPEND KIT_SRCS\n    qSlicerExtensionDownloadTask.cxx\n    qSlicerExtensionDownloadTask.h\n    qSlicerExtensionsManagerModel.cxx\n    qSlicerExtensionsManagerModel.h\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Cloning Slicer source code with Git\nDESCRIPTION: This command clones the Slicer source code from the GitHub repository using `git`. The source code will be downloaded into a directory named `Slicer`.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/linux.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\ngit clone https://github.com/Slicer/Slicer.git\n```\n\n----------------------------------------\n\nTITLE: Set Module Include Directories - CMake\nDESCRIPTION: Defines the include directories for the Transforms module. These directories are added to the compiler's include path, allowing the module's source code to find necessary header files. It includes source and binary directories of subdirectories and qSlicerSubjectHierarchyModuleWidgets include directories.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Transforms/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_INCLUDE_DIRECTORIES\n  ${CMAKE_CURRENT_SOURCE_DIR}/Logic\n  ${CMAKE_CURRENT_BINARY_DIR}/Logic\n  ${CMAKE_CURRENT_SOURCE_DIR}/SubjectHierarchyPlugins\n  ${CMAKE_CURRENT_BINARY_DIR}/SubjectHierarchyPlugins\n  ${qSlicerSubjectHierarchyModuleWidgets_INCLUDE_DIRS}\n  ${CMAKE_CURRENT_SOURCE_DIR}/Widgets\n  ${CMAKE_CURRENT_BINARY_DIR}/Widgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring a resource file for Qt tests\nDESCRIPTION: This snippet configures a Qt resource file (`.qrc`) using the `configure_file` command. It takes an input resource file, processes it, and places the output in the resources directory. This allows Qt applications and tests to access resources defined in the .qrc file.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/Testing/Cxx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n  configure_file(\n    Resources/${KIT}Testing.qrc\n    ${resources_dir}/${KIT}Testing.qrc\n    )\n```\n\n----------------------------------------\n\nTITLE: Project Definition and Variable Initialization - CMake\nDESCRIPTION: This snippet initializes the CMake project and sets up essential variables for the module. It defines the project name, export directive, include directories, source files (SRCS), meta-object compiler sources (MOC_SRCS), user interface sources (UI_SRCS), and resources (RESOURCES).\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Plots/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(qSlicer${MODULE_NAME}SubjectHierarchyPlugins)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"Q_SLICER_${MODULE_NAME_UPPER}_SUBJECT_HIERARCHY_PLUGINS_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSlicerPlotsModuleLogic_INCLUDE_DIRS}\n  ${qSlicerSubjectHierarchyModuleWidgets_INCLUDE_DIRS}\n  ${vtkSlicerSubjectHierarchyModuleLogic_INCLUDE_DIRS}\n  ${qMRMLWidgets_INCLUDE_DIRS}\n  ${MRMLLogic_INCLUDE_DIRS}\n  ${MRMLCore_INCLUDE_DIRS}\n  )\n\nset(${KIT}_SRCS\n  qSlicerSubjectHierarchy${MODULE_NAME}Plugin.cxx\n  qSlicerSubjectHierarchy${MODULE_NAME}Plugin.h\n  )\n\nset(${KIT}_MOC_SRCS\n  qSlicerSubjectHierarchy${MODULE_NAME}Plugin.h\n  )\n\nset(${KIT}_UI_SRCS\n  )\n\nset(${KIT}_RESOURCES\n  Resources/${KIT}.qrc\n\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory in CMake\nDESCRIPTION: This snippet conditionally adds the 'Testing' subdirectory to the build process if the `BUILD_TESTING` variable is enabled. This allows for the inclusion of unit tests for the module. It ensures that tests are only built when explicitly requested.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/MedianImageFilter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Source Files\nDESCRIPTION: Defines the source files for the RemoteIO library.  In this case, only vtkHTTPHandler.cxx is included.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/RemoteIO/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(RemoteIO_SRCS\n  vtkHTTPHandler.cxx\n  )\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion - CMake\nDESCRIPTION: This snippet conditionally includes subdirectories for building Qt Designer plugins and running tests. The `add_subdirectory` command is used to include the `DesignerPlugins` directory if `Slicer_BUILD_QT_DESIGNER_PLUGINS` is enabled, and the `Testing` directory if `BUILD_TESTING` is enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/Widgets/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(Slicer_BUILD_QT_DESIGNER_PLUGINS)\n  add_subdirectory(DesignerPlugins)\nendif()\n\n#-----------------------------------------------------------------------------\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Testing Slicer with CTest - console\nDESCRIPTION: This command navigates to the build directory and then uses the `ctest` command to run the Slicer test suite. The `-j4` option specifies that the tests should be run using 4 parallel processes. Adjust the number of cores as needed.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/macos.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\ncd /opt/s/Slicer-build\nctest -j4\n```\n\n----------------------------------------\n\nTITLE: Defining Hidden Python Scripts\nDESCRIPTION: Defines a list of Python scripts that are included as hidden modules. This list is later used during compilation. These scripts are likely required for the self-tests to function correctly at runtime within the Slicer application. This list represents python scripts that are to be incorporated for use within the application, but not explicitly exposed as modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Applications/SlicerApp/Testing/Python/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nset(KIT_PYTHON_SCRIPTS\n    AtlasTests.py\n    sceneImport2428.py\n    SlicerDisplayNodeSequenceTest.py\n    SlicerMRBMultipleSaveRestoreLoopTest.py\n    SlicerMRBMultipleSaveRestoreTest.py\n    SlicerMRBSaveRestoreCheckPathsTest.py\n    Slicer4Minute.py\n    SlicerBoundsTest.py\n    WebEngine.py\n    SliceLinkLogic.py\n    ScenePerformance.py\n    RSNAVisTutorial.py\n    RSNAQuantTutorial.py\n    SlicerOrientationSelectorTest.py\n    # Currently needs to be updated for new widget. PR-7562: https://github.com/Slicer/Slicer/pull/7562\n    #SlicerTransformInteractionTest1.py\n    ViewControllersSliceInterpolationBug1926.py\n    RSNA2012ProstateDemo.py\n    JRC2013Vis.py\n    FiducialLayoutSwitchBug1914.py\n    ShaderProperties.py\n    UtilTest.py\n    SlicerScriptedFileReaderWriterTest.py\n    CurvedPlanarReformation.py\n    )\n```\n\n----------------------------------------\n\nTITLE: Include ExternalProject, Find Slicer and Git\nDESCRIPTION: Includes the ExternalProject module and uses find_package to locate the Slicer and Git packages. These are required prerequisites for building Slicer extensions.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/CMake/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(ExternalProject)\nfind_package(Slicer REQUIRED)\nfind_package(Git REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: CMake ExternalData Target Conditional Definition\nDESCRIPTION: This CMake snippet conditionally adds an ExternalData target based on the equality of `${SEM_DATA_MANAGEMENT_TARGET}` and `${CLP}Data`.  If the condition is met, the `ExternalData_add_target` command is executed, adding the specified target.  This manages external data dependencies for the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CurvatureAnisotropicDiffusion/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding ITK Package\nDESCRIPTION: Finds the ITK package with specified components (ITKIOImageBase, ITKImageFilterBase). It sets ITK_NO_IO_FACTORY_REGISTER_MANAGER based on the ITK version to prevent factory registration issues and includes the ITK use file to make the package's variables available. Requires ITK version 4.6 or higher.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CastScalarVolume/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKIOImageBase\n  ITKImageFilterBase\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Include Subdirectory in CMake\nDESCRIPTION: This command instructs CMake to add the `Cxx` subdirectory to the build. This means CMake will look for a `CMakeLists.txt` file inside the `Cxx` directory and process it, adding any targets defined within that file to the overall project build process. It is essential for organizing a larger project into manageable modules.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/CLIExtensionTemplate/CLIModuleTemplate/Testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Cxx)\n```\n\n----------------------------------------\n\nTITLE: Widget Representation File Structure\nDESCRIPTION: Shows the expected file structure for widget representation classes in a 3D Slicer extension.  The custom type name is used as a placeholder in the class names.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/mrml_overview.md#_snippet_26\n\nLANGUAGE: filesystem\nCODE:\n```\n|-- <Extension>\n       |-- <Module>\n              |-- VTKWidgets\n                    |-- vtkSlicer<MyCustomType>WidgetRepresentation.h\n                    |-- vtkSlicer<MyCustomType>WidgetRepresentation.cxx\n```\n\n----------------------------------------\n\nTITLE: Specifying Target Libraries - CMake\nDESCRIPTION: This snippet specifies the target libraries that the module's widgets depend on. In this case, it depends on vtkSlicer${MODULE_NAME}ModuleLogic.  These libraries will be linked with the module during the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/LoadableExtensionTemplate/LoadableModuleTemplate/Widgets/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_TARGET_LIBRARIES\n  vtkSlicer${MODULE_NAME}ModuleLogic\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Sets the include directories required for compiling the module. These directories contain the header files needed for the module's source code.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/LoadableExtensionTemplate/LoadableModuleTemplate/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_INCLUDE_DIRECTORIES\n  ${CMAKE_CURRENT_SOURCE_DIR}/Logic\n  ${CMAKE_CURRENT_BINARY_DIR}/Logic\n  ${CMAKE_CURRENT_SOURCE_DIR}/Widgets\n  ${CMAKE_CURRENT_BINARY_DIR}/Widgets\n  )\n```\n\n----------------------------------------\n\nTITLE: Project Definition and Variable Setup - CMake\nDESCRIPTION: Defines the project name and sets up variables for export directives and include directories. It configures the necessary dependencies for the subject hierarchy plugin module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Texts/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(qSlicer${MODULE_NAME}SubjectHierarchyPlugins)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"Q_SLICER_${MODULE_NAME_UPPER}_SUBJECT_HIERARCHY_PLUGINS_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${vtkSlicerSubjectHierarchyModuleLogic_INCLUDE_DIRS}\n  ${qSlicerSubjectHierarchyModuleWidgets_INCLUDE_DIRS}\n  ${MRMLCore_INCLUDE_DIRS}\n  ${MRMLLogic_INCLUDE_DIRS}\n  ${qMRMLWidgets_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Project\nDESCRIPTION: This CMake command defines the project name. In this case, the project is named ScriptedLoadableExtensionTemplate. It is a fundamental command that sets the root name for the build process.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/ScriptedLoadableExtensionTemplate/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(ScriptedLoadableExtensionTemplate)\n```\n\n----------------------------------------\n\nTITLE: Custom Serializer for CustomClass\nDESCRIPTION: Implements a custom serializer `CustomClassSerializer` for the `CustomClass`.  It includes methods for checking serializability, creating serializer instances, providing a default value, checking parameter existence, writing values to the parameter node, reading values from the parameter node, and removing values from the parameter node.  It also demonstrates the use of `ValidatedSerializer` with `NotNone` and `IsInstance` validators.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/parameter_nodes/advanced/custom_classes.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# The Serializer class is used to read and write the values to the underlying\n# vtkMRMLScriptedModuleNode. There are built-in serializers for each of the support built-in types.\n# Adding a new serializer involves deriving from Serializer and implementing the following methods.\n# The @parameterNodeSerializer decorator registers the serializer so it can be found by a\n# parameterNodeWrapper.\n@parameterNodeSerializer\nclass CustomClassSerializer(Serializer):\n    @staticmethod\n    def canSerialize(type_) -> bool:\n        \"\"\"\n        Whether the serializer can serialize the given type if it is properly instantiated.\n        \"\"\"\n        return type_ == CustomClass\n\n    @staticmethod\n    def create(type_):\n        \"\"\"\n        Creates a new serializer object based on the given type. If this class does not support the given type,\n        None is returned.\n\n        It is common for the returned type to actually be a ValidatedSerializer wrapping this serializer that implements\n        any default validators (NotNone and IsInstance are common).\n        \"\"\"\n        if CustomClassSerializer.canSerialize(type_):\n            # in our example, lets say that we don't allow None. We will use NotNone() to enforce this\n            return ValidatedSerializer(CustomClassSerializer(), [NotNone(), IsInstance(CustomClass)])\n        return None\n\n    def default(self):\n        \"\"\"\n        The default value to use if another default is not specified.\n        \"\"\"\n        return CustomClass(0, 0, 0)\n\n    def isIn(self, parameterNode: slicer.vtkMRMLScriptedModuleNode, name: str) -> bool:\n        \"\"\"\n        Whether the parameterNode contains a parameter of the given name.\n        Note that most implementations can just use parameterNode.HasParameter(name).\n        \"\"\"\n        return parameterNode.HasParameter(name)\n\n    def write(self, parameterNode: slicer.vtkMRMLScriptedModuleNode, name: str, value) -> None:\n        \"\"\"\n        Writes the value to the parameterNode under the given name.\n        Note: It is acceptable to mangle the name as long the same name can be used for reading.\n        For example the built-in ListSerializer does this.\n        \"\"\"\n        parameterNode.SetParameter(name, f\"{value.x},{value.y},{value.z}\")\n\n    def read(self, parameterNode: slicer.vtkMRMLScriptedModuleNode, name: str):\n        \"\"\"\n        Reads and returns the value with the given name from the parameterNode.\n        \"\"\"\n        val = parameterNode.GetParameter(name)\n        vals = val.split(',')\n        return CustomClass(int(vals[0]), int(vals[1]), int(vals[2]))\n\n    def remove(self, parameterNode: slicer.vtkMRMLScriptedModuleNode, name: str) -> None:\n        \"\"\"\n        Removes the value of the given name from the parameterNode.\n        \"\"\"\n        parameterNode.UnsetParameter(name)\n```\n\n----------------------------------------\n\nTITLE: Setting Kit Name - CMake\nDESCRIPTION: Sets the kit name which is typically the project name to be used in subsequent steps. This is a shorthand variable for re-use. It relies on the PROJECT_NAME variable being defined by the project command.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/MRMLDM/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Changing build type to Release using CMake\nDESCRIPTION: This snippet demonstrates how to change the build type from the default Debug to Release using CMake.  The `CMAKE_BUILD_TYPE` variable is set to `Release` during the CMake configuration step.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/build_instructions/linux.md#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\ncmake -DCMAKE_BUILD_TYPE:STRING=Release ../Slicer\n```\n\n----------------------------------------\n\nTITLE: Adding External Data Target (CMake)\nDESCRIPTION: This snippet adds an ExternalData target named `${CLP}Data` if the `${SEM_DATA_MANAGEMENT_TARGET}` variable is equal to `${CLP}Data`. This target handles downloading and managing the external data required for the tests.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/ModelMaker/Testing/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Subdirectory in CMake\nDESCRIPTION: Conditionally adds the Testing subdirectory to the build process if the BUILD_TESTING variable is enabled. This enables the inclusion of unit tests for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/N4ITKBiasFieldCorrection/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Kit Name\nDESCRIPTION: Sets the `KIT` variable to the project name, providing a shorthand for referencing the project in subsequent configurations.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Colors/VTKWidgets/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(KIT ${PROJECT_NAME})\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories CMake\nDESCRIPTION: This snippet defines the include directories required for building the module. It uses the include directories from other modules like qSlicerSubjectHierarchyModuleWidgets and vtkSlicerDICOMLibModuleLogic.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/DICOMLib/Widgets/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${qSlicerSubjectHierarchyModuleWidgets_INCLUDE_DIRS}\n  ${vtkSlicerDICOMLibModuleLogic_INCLUDE_DIRS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Conditionally Add Python Subdirectory using CMake\nDESCRIPTION: This CMake code snippet conditionally adds the 'Python' subdirectory based on the value of the 'Slicer_USE_PYTHONQT' variable. If 'Slicer_USE_PYTHONQT' is true, the Python subdirectory's CMakeLists.txt is processed, otherwise it is skipped.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/VolumeRendering/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(Slicer_USE_PYTHONQT)\n  add_subdirectory(Python)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name\nDESCRIPTION: This snippet sets the module name to 'Plots' and converts it to uppercase for use in other CMake variables. It initializes the MODULE_NAME variable and MODULE_NAME_UPPER variables that are used throughout the rest of the script. It is the base setting of the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Plots/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME Plots)\n\nstring(TOUPPER ${MODULE_NAME} MODULE_NAME_UPPER)\n```\n\n----------------------------------------\n\nTITLE: Defining Project Name\nDESCRIPTION: Sets the name of the CMake project, which will be used for generating build targets and naming output files. In this case, the project is named 'TemplateKey'.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Extensions/Default/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(TemplateKey)\n```\n\n----------------------------------------\n\nTITLE: Finding ITK Package - CMake\nDESCRIPTION: Finds the ITK package, specifying required components like ITKIOImageBase and ITKSmoothing. Sets ITK version requirement to 4.6 or higher. Then includes ITK's use file, to provide the necessary compiler flags and linker options. Sets ITK_NO_*_FACTORY_REGISTER_MANAGER properties to avoid registration issues depending on the ITK version.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GaussianBlurImageFilter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKIOImageBase\n  ITKSmoothing\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\nif(ITK_VERSION VERSION_GREATER_EQUAL \"5.3\")\n  foreach(factory_uc IN ITEMS \"IMAGEIO\" \"MESHIO\" \"TRANSFORMIO\")\n    set(ITK_NO_${factory_uc}_FACTORY_REGISTER_MANAGER 1)\n  endforeach()\nelse()\n  set(ITK_NO_IO_FACTORY_REGISTER_MANAGER 1) # See Libs/ITKFactoryRegistration/CMakeLists.txt\nendif()\ninclude(${ITK_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Setting Test Driver Configuration\nDESCRIPTION: This snippet sets the CMAKE_TESTDRIVER_BEFORE_TESTMAIN and CMAKE_TESTDRIVER_AFTER_TESTMAIN variables. These define the code to be executed before and after each test, respectively. The `BEFORE_TESTMAIN` initializes output and ITKFactoryRegistration, while `AFTER_TESTMAIN` asserts warnings/errors and enables leak detection.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/Widgets/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nset(CMAKE_TESTDRIVER_BEFORE_TESTMAIN  \"\n  TESTING_OUTPUT_INIT();\n  itk::itkFactoryRegistration();\n  \")\n\nset(CMAKE_TESTDRIVER_AFTER_TESTMAIN  \"\n  TESTING_OUTPUT_ASSERT_WARNINGS_ERRORS(0);\n  DEBUG_LEAKS_ENABLE_EXIT_ERROR();\n  \")\n```\n\n----------------------------------------\n\nTITLE: Volume Rendering with Transparency - Slicer - Python\nDESCRIPTION: Renders a volume with soft tissues made transparent. It retrieves or creates a volume rendering display node, sets up a gradient vs opacity transfer function to make constant regions transparent, and adjusts the overall opacity of the volume. The function configures the volume rendering for transparency.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef showTransparentRendering(volumeNode, maxOpacity=0.2, gradientThreshold=30.0):\n  \"\"\"Make constant regions transparent and the entire volume somewhat transparent\n  :param maxOpacity: lower value makes the volume more transparent overall\n    (value is between 0.0 and 1.0)\n  :param gradientThreshold: regions that has gradient value below this threshold will be made transparent\n    (minimum value is 0.0, higher values make more tissues transparent, starting with soft tissues)\n  \"\"\"\n  # Get/create volume rendering display node\n  volRenLogic = slicer.modules.volumerendering.logic()\n  displayNode = volRenLogic.GetFirstVolumeRenderingDisplayNode(volumeNode)\n  if not displayNode:\n    displayNode = volRenLogic.CreateDefaultVolumeRenderingNodes(volumeNode)\n  # Set up gradient vs opacity transfer function\n  gradientOpacityTransferFunction = displayNode.GetVolumePropertyNode().GetVolumeProperty().GetGradientOpacity()\n  gradientOpacityTransferFunction.RemoveAllPoints()\n  gradientOpacityTransferFunction.AddPoint(0, 0.0)\n  gradientOpacityTransferFunction.AddPoint(gradientThreshold-1, 0.0)\n  gradientOpacityTransferFunction.AddPoint(gradientThreshold+1, maxOpacity)\n  # Show volume rendering\n  displayNode.SetVisibility(True)\n\nvolumeNode = slicer.mrmlScene.GetFirstNodeByClass(\"vtkMRMLScalarVolumeNode\")\nshowTransparentRendering(volumeNode, 0.2, 30.0)\n```\n\n----------------------------------------\n\nTITLE: Creating Test Executable\nDESCRIPTION: Creates the test executable using `ctk_add_executable_utf8`.  It takes the name of the executable and the list of source files to compile. It then links the executable to the required libraries using `target_link_libraries`.  Finally, it sets the folder property for the test executable in the IDE.\nSOURCE: https://github.com/slicer/slicer/blob/main/Applications/SlicerApp/Testing/Cpp/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(target_libraries ${KIT})\n\nctk_add_executable_utf8(${KIT}CxxTests ${Tests})\ntarget_link_libraries(${KIT}CxxTests  ${target_libraries})\nset_target_properties(${KIT}CxxTests PROPERTIES FOLDER ${${PROJECT_NAME}_FOLDER})\n```\n\n----------------------------------------\n\nTITLE: Header Installation CMake\nDESCRIPTION: Installs header files, including the configured header, to the include directory, conditioned on the ${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT variable.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/DisplayableManager/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED ${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT)\n  set(${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT ON)\nendif()\nif(NOT ${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT)\n  file(GLOB headers \"${CMAKE_CURRENT_SOURCE_DIR}/*.h\")\n  install(\n    FILES ${headers} ${CMAKE_CURRENT_BINARY_DIR}/${configure_header_file}\n    DESTINATION include/${PROJECT_NAME} COMPONENT Development)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Apply custom volume rendering transfer functions - C++\nDESCRIPTION: Applies custom color and opacity transfer functions to a volume rendering display node. It requires existing `vtkColorTransferFunction` and `vtkPiecewiseFunction` objects. The transfer functions are set on the volume property node.\nSOURCE: https://github.com/slicer/slicer/blob/main/Docs/developer_guide/script_repository/volumes.md#_snippet_44\n\nLANGUAGE: C++\nCODE:\n```\nvtkColorTransferFunction* colors = ...\nvtkPiecewiseFunction* opacities = ...\nvtkMRMLVolumeRenderingDisplayNode* displayNode = ...\nvtkMRMLVolumePropertyNode* propertyNode = displayNode->GetVolumePropertyNode();\npropertyNode->SetColor(colorTransferFunction);\npropertyNode->SetScalarOpacity(opacities);\n// optionally set the gradients opacities with SetGradientOpacity\n```\n\n----------------------------------------\n\nTITLE: Testing Subdirectory CMake\nDESCRIPTION: Adds the Testing subdirectory if BUILD_TESTING is enabled.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/DisplayableManager/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting up the project and its properties (CMake)\nDESCRIPTION: This snippet sets up the CMake project, defining project name, export directive, include directories, source files, moc files, UI files, and resource files. These variables will later be used by the SlicerMacroBuildModuleQtLibrary to build the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Volumes/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(qSlicer${MODULE_NAME}SubjectHierarchyPlugins)\n\nset(KIT ${PROJECT_NAME})\n\nset(${KIT}_EXPORT_DIRECTIVE \"Q_SLICER_${MODULE_NAME_UPPER}_SUBJECT_HIERARCHY_PLUGINS_EXPORT\")\n\nset(${KIT}_INCLUDE_DIRECTORIES\n  ${qSlicerSubjectHierarchyModuleWidgets_INCLUDE_DIRS}\n  ${vtkSlicerSubjectHierarchyModuleLogic_INCLUDE_DIRS}\n  ${qMRMLWidgets_INCLUDE_DIRS}\n  ${MRMLLogic_INCLUDE_DIRS}\n  ${MRMLCore_INCLUDE_DIRS}\n  ${vtkSlicerVolumesModuleLogic_INCLUDE_DIRS}\n  ${vtkSlicerColorsModuleLogic_INCLUDE_DIRS}\n  ${vtkSlicerColorsModuleMRML_INCLUDE_DIRS}\n  )\n\nset(${KIT}_SRCS\n  qSlicerSubjectHierarchyVolumesPlugin.cxx\n  qSlicerSubjectHierarchyVolumesPlugin.h\n  qSlicerSubjectHierarchyLabelMapsPlugin.cxx\n  qSlicerSubjectHierarchyLabelMapsPlugin.h\n  qSlicerSubjectHierarchyDiffusionTensorVolumesPlugin.cxx\n  qSlicerSubjectHierarchyDiffusionTensorVolumesPlugin.h\n  )\n\nset(${KIT}_MOC_SRCS\n  qSlicerSubjectHierarchyVolumesPlugin.h\n  qSlicerSubjectHierarchyLabelMapsPlugin.h\n  qSlicerSubjectHierarchyDiffusionTensorVolumesPlugin.h\n  )\n\nset(${KIT}_UI_SRCS\n  )\n\nset(${KIT}_RESOURCES\n  Resources/${KIT}.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name\nDESCRIPTION: Defines the module name as CropVolumeSequence. This variable is used throughout the CMake file for referencing the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Scripted/CropVolumeSequence/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME CropVolumeSequence)\n```\n\n----------------------------------------\n\nTITLE: Setting the module name in CMake\nDESCRIPTION: Sets the module name to CheckerBoardFilter. This variable is used later in the build process to name the module and its components.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/CheckerBoardFilter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(MODULE_NAME CheckerBoardFilter)\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name\nDESCRIPTION: This sets the module name to RobustStatisticsSegmenter. This variable is used later to define targets and other module-specific settings.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/RobustStatisticsSegmenter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME RobustStatisticsSegmenter)\n```\n\n----------------------------------------\n\nTITLE: Set Resources Files\nDESCRIPTION: Sets the resource files for the module widgets. These files may contain images, stylesheets, or other data required by the widgets. In this case, there are no resources defined.\nSOURCE: https://github.com/slicer/slicer/blob/main/Utilities/Templates/Modules/LoadableCustomMarkups/Widgets/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_RESOURCES\n  )\n```\n\n----------------------------------------\n\nTITLE: Including Slicer Extension Configuration and Packaging\nDESCRIPTION: Includes CMake files that generate the extension's configuration and packaging. These files handle tasks like creating the necessary directory structure, generating metadata files, and creating installers or archives for distribution. These scripts are provided by the Slicer build system.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/LoadableExtensionTemplate/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${Slicer_EXTENSION_GENERATE_CONFIG})\ninclude(${Slicer_EXTENSION_CPACK})\n```\n\n----------------------------------------\n\nTITLE: Adding ExternalData Target\nDESCRIPTION: Adds an external data target if `SEM_DATA_MANAGEMENT_TARGET` is equal to the module name plus \"Data\". This is used to manage the data required for the module.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GrayscaleGrindPeakImageFilter/Testing/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(${SEM_DATA_MANAGEMENT_TARGET} STREQUAL ${CLP}Data)\n  ExternalData_add_target(${CLP}Data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding ITK Package\nDESCRIPTION: Finds the ITK package with specified components. It sets the required ITK components and then calls `find_package` to locate ITK. ITK version 4.6 or higher is required.\nSOURCE: https://github.com/slicer/slicer/blob/main/Libs/MRML/IDImageIO/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(${PROJECT_NAME}_ITK_COMPONENTS\n  ITKCommon\n  ITKIOImageBase\n  )\nfind_package(ITK 4.6 COMPONENTS ${${PROJECT_NAME}_ITK_COMPONENTS} REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Setting User Interface (UI) Sources CMake\nDESCRIPTION: Defines the Qt Designer UI files (.ui) used by the module. In this case, there are no UI files listed, which means the module's UI is likely created programmatically.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Models/SubjectHierarchyPlugins/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_UI_SRCS\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding SlicerExecutionModel\nDESCRIPTION: Finds the SlicerExecutionModel package using CMake's `find_package` command. It then includes the `USE_FILE` provided by the package to set up the necessary compiler flags and library paths.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCLI/Testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(SlicerExecutionModel REQUIRED)\ninclude(${SlicerExecutionModel_USE_FILE})\n```\n\n----------------------------------------\n\nTITLE: Setting Module Name\nDESCRIPTION: This snippet sets the module name for the DiffusionTensorTest module. It's a fundamental configuration step, assigning the module's identifier for subsequent build processes and dependency resolution.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/DiffusionTensorTest/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MODULE_NAME DiffusionTensorTest)\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Test\nDESCRIPTION: This snippet uses the simple_test macro to define a basic test case. It specifies the name of the test executable (vtkSlicerTablesLogicAddFileTest) and the input file (table.csv).\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Tables/Testing/Cxx/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nsimple_test(vtkSlicerTablesLogicAddFileTest ${INPUT}/table.csv)\n```\n\n----------------------------------------\n\nTITLE: Finding DCMTK Package\nDESCRIPTION: Conditionally finds the DCMTK package if Slicer's DICOM support is enabled. This ensures the project can utilize DICOM functionalities if configured to do so.\nSOURCE: https://github.com/slicer/slicer/blob/main/Base/QTCore/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(Slicer_BUILD_DICOM_SUPPORT)\n  find_package(DCMTK REQUIRED)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Module Logic using SlicerMacroBuildModuleLogic in CMake\nDESCRIPTION: This code uses the SlicerMacroBuildModuleLogic macro to configure the module's build process. It sets the module name, export directive, include directories, source files, and target libraries. This macro encapsulates the necessary build steps for creating the module's library and linking it against its dependencies.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Segmentations/MRMLDM/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nSlicerMacroBuildModuleLogic(\n  NAME ${KIT}\n  EXPORT_DIRECTIVE ${${KIT}_EXPORT_DIRECTIVE}\n  INCLUDE_DIRECTORIES ${${KIT}_INCLUDE_DIRECTORIES}\n  SRCS ${${KIT}_SRCS}\n  TARGET_LIBRARIES ${${KIT}_TARGET_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining QuaternionRigidTransform in ITK Transform File\nDESCRIPTION: This snippet shows how to define a QuaternionRigidTransform within an Insight Transform File (ITK) version 1.0. It specifies the transform type as 'QuaternionRigidTransform_double_3_3', followed by the parameters and fixed parameters. The parameters represent the quaternion (0 0 0 1) and translation (5 5 5), while the fixed parameters are set to (0 0 0).\nSOURCE: https://github.com/slicer/slicer/blob/main/Testing/Data/Input/itkQuaternionRigidTransform01.txt#_snippet_0\n\nLANGUAGE: ITK Transform\nCODE:\n```\n#Insight Transform File V1.0\n# Transform 0\nTransform: QuaternionRigidTransform_double_3_3\nParameters: 0 0 0 1 5 5 5\nFixedParameters: 0 0 0\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for Modules\nDESCRIPTION: This snippet adds subdirectories for 'DesignerPlugins' and 'Testing'. The 'Testing' subdirectory is only included if the `BUILD_TESTING` option is enabled. This allows for modular inclusion of additional features like designer plugins and test suites.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/Loadable/Sequences/Widgets/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n#-----------------------------------------------------------------------------\nadd_subdirectory(DesignerPlugins)\n\n# Testing\nif(BUILD_TESTING)\n  add_subdirectory(Testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Resources Definition CMake\nDESCRIPTION: Defines the resource files used by the module, such as the qrc file which includes images, icons, and other resources.  The qrc file is specified with a relative path.\nSOURCE: https://github.com/slicer/slicer/blob/main/Extensions/Testing/SuperBuildExtensionTemplate/SuperLoadableModuleTemplate/Widgets/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(${KIT}_RESOURCES\n  ../Resources/qSlicer${MODULE_NAME}Module.qrc\n  )\n```\n\n----------------------------------------\n\nTITLE: ExternalData Test Setup in CMake\nDESCRIPTION: This snippet uses `ExternalData_add_test` to define a test case. It sets the test name, specifies the command to execute (including launching the ${CLP}Test executable with specific arguments), and defines input/output data files for comparison.  The data is managed externally, and the test compares the generated output with a baseline. The `SEM_LAUNCH_COMMAND` variable defines the launching mechanism within the Slicer Execution Model.\nSOURCE: https://github.com/slicer/slicer/blob/main/Modules/CLI/GaussianBlurImageFilter/Testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(testname ${CLP}Test)\nExternalData_add_test(${SEM_DATA_MANAGEMENT_TARGET}\n  NAME ${testname} COMMAND ${SEM_LAUNCH_COMMAND} $<TARGET_FILE:${CLP}Test>\n  --compare DATA{${BASELINE}/GaussianBlurImageFilterTest.nhdr,GaussianBlurImageFilterTest.raw}\n  ${TEMP}/GaussianBlurImageFilterTest.nhdr\n  ModuleEntryPoint\n  --sigma 2.5 DATA{${INPUT}/CTHeadAxial.nhdr,CTHeadAxial.raw.gz} ${TEMP}/GaussianBlurImageFilterTest.nhdr\n  )\nset_property(TEST ${testname} PROPERTY LABELS ${CLP})\n```"
  }
]