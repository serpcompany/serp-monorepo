[
  {
    "owner": "hapijs",
    "repo": "hapi.dev",
    "content": "TITLE: Configuring Query Validation with Joi Options in Hapi.js\nDESCRIPTION: Example of setting up query parameter validation with additional Joi options like stripUnknown to remove unknown parameters from the validated object.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/validation.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\noptions: {\n    validate: {\n        query: Joi.object({\n            limit: Joi.number().integer().min(1).max(100).default(10)\n        }).options({ stripUnknown: true });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Authentication in Hapi.js\nDESCRIPTION: Complete example of setting up basic authentication using @hapi/basic plugin, including user validation with bcrypt password comparison and route protection.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/auth.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst Bcrypt = require('bcrypt');\nconst Hapi = require('@hapi/hapi');\n\nconst users = {\n    john: {\n        username: 'john',\n        password: '$2a$10$iqJSHD.BGr0E2IxQwYgJmeP3NvhPrXAeLSaGCj6IR/XU5QtjVu5Tm',   // 'secret'\n        name: 'John Doe',\n        id: '2133d32a'\n    }\n};\n\nconst validate = async (request, username, password) => {\n\n    const user = users[username];\n    if (!user) {\n        return { credentials: null, isValid: false };\n    }\n\n    const isValid = await Bcrypt.compare(password, user.password);\n    const credentials = { id: user.id, name: user.name };\n\n    return { isValid, credentials };\n};\n\nconst start = async () => {\n\n    const server = Hapi.server({ port: 4000 });\n\n    await server.register(require('@hapi/basic'));\n\n    server.auth.strategy('simple', 'basic', { validate });\n\n    server.route({\n        method: 'GET',\n        path: '/',\n        options: {\n            auth: 'simple'\n        },\n        handler: function (request, h) {\n\n            return 'welcome';\n        }\n    });\n\n    await server.start();\n\n    console.log('server running at: ' + server.info.uri);\n};\n\nstart();\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Validation with Joi in hapi.js\nDESCRIPTION: This snippet demonstrates how to set up a route with validation options for the request payload using Joi. It includes disabling authentication for a signup route and validating username and password fields with specific constraints.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/routing.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'POST',\n    path: '/signup',\n    handler: function (request, h) {\n\n        const payload = request.payload;\n\n        return `Welcome ${payload.username}!`;\n    },\n    options: {\n        auth: false,\n        validate: {\n            payload: {\n                username: Joi.string().min(1).max(20),\n                password: Joi.string().min(7)\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Validating Payload Parameters in Hapi.js Routes\nDESCRIPTION: Example of payload validation using Joi. The code validates a blog post submission ensuring the post is between 1 and 140 characters and the date is required and in a valid format.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/validation.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'POST',\n    path: '/post',\n    handler: function (request, h) {\n\n        return 'Blog post added';\n    },\n    options: {\n        validate: {\n            payload: Joi.object({\n                post: Joi.string().min(1).max(140),\n                date: Joi.date().required()\n            })\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Validando Parâmetros de Rota com Joi em Hapi.js\nDESCRIPTION: Exemplo de como validar parâmetros de rota usando o módulo Joi. O código define uma rota GET que aceita um parâmetro 'name' com restrições de tamanho (entre 3 e 10 caracteres).\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/pt_BR/validation.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/hello/{name}',\n    handler: function (request, reply) {\n        reply('Hello ' + request.params.name + '!');\n    },\n    options: {\n        validate: {\n            params: {\n                name: Joi.string().min(3).max(10)\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Validando Parâmetros de Query com Joi em Hapi.js\nDESCRIPTION: Exemplo de como validar parâmetros de query usando Joi. O código define uma rota GET com um parâmetro 'limit' que deve ser um número inteiro entre 1 e 100, com valor padrão 10.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/pt_BR/validation.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/list',\n    handler: function (request, reply) {\n        reply(resources.slice(0, request.query.limit));\n    },\n    options: {\n        validate: {\n            query: {\n                limit: Joi.number().integer().min(1).max(100).default(10)\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Validação de Resposta Completa em Hapi.js\nDESCRIPTION: Exemplo de configuração de rota com validação de resposta. Define um esquema para objetos de livros e configura a validação para amostrar 50% das respostas.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/pt_BR/validation.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst bookSchema = Joi.object({\n    title: Joi.string().required(),\n    author: Joi.string().required(),\n    isbn: Joi.string().length(10),\n    pageCount: Joi.number(),\n    datePublished: Joi.date().iso()\n});\n\nserver.route({\n    method: 'GET',\n    path: '/books',\n    options: {\n        handler: function (request, reply) {\n\n            getBooks((err, books) => {\n\n                if (err) {\n                    return reply(err);\n                }\n\n                return reply(books);\n            });\n        },\n        response: {\n            sample: 50,\n            schema: Joi.array().items(bookSchema)\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie Authentication Strategy in Hapi.js\nDESCRIPTION: Example of registering a cookie-based authentication strategy with custom configuration options including session name, password, and security settings.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/auth.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nserver.auth.strategy('session', 'cookie', {\n    name: 'sid-example',\n    password: '!wsYhFA*C2U6nz=Bu^%A@^F#SF3&kSR6',\n    isSecure: false\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Path Parameters in Hapi.js\nDESCRIPTION: This snippet shows how to make a path parameter optional by adding a question mark after its name.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/routing.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/hello/{user?}',\n    handler: function (request, h) {\n\n        const user = request.params.user ? request.params.user : 'stranger';\n\n        return `Hello ${user}!`;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Template Engines with Engine-Specific Options in Hapi.js\nDESCRIPTION: This code example shows how to configure template engines with both global and engine-specific settings. It demonstrates setting different compilation modes for different engines.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/views.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nserver.views({\n    engines: {\n        html: {\n            module: require('handlebars'),\n            compileMode: 'sync' // engine specific\n        }\n    },\n    compileMode: 'async' // global setting\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Template Engines with Engine-Specific Options in Hapi.js\nDESCRIPTION: This code example shows how to configure template engines with both global and engine-specific settings. It demonstrates setting different compilation modes for different engines.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/views.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nserver.views({\n    engines: {\n        html: {\n            module: require('handlebars'),\n            compileMode: 'sync' // engine specific\n        }\n    },\n    compileMode: 'async' // global setting\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom 404 Error Handling in hapi.js\nDESCRIPTION: This example shows how to set up a catch-all route that returns a custom 404 response for any request that doesn't match other defined routes. It uses a wildcard method and a generic path pattern to catch all unhandled requests.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/routing.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst Hapi = require('@hapi/hapi');\n\nconst internals = {};\n\nconst init = async () => {\n\n    const server = Hapi.server({\n        port: 3000,\n        host: 'localhost'\n    });\n\n    server.route({\n        method: '*',\n        path: '/{any*}',\n        handler: function (request, h) {\n            return h.response('404 Error! Page Not Found!').code(404);\n        }\n    });\n\n    await server.start();\n    console.log('Server running on %s', server.info.uri);\n};\n\ninit();\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie Settings with server.state()\nDESCRIPTION: Configures a cookie named 'data' with custom settings for security, encoding, and validation. This example shows how to use server.state() to set up cookie behavior before using it in routes.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/cookies.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nserver.state('data', {\n    ttl: null,\n    isSecure: true,\n    isHttpOnly: true,\n    encoding: 'base64json',\n    clearInvalid: true,\n    strictHeader: true\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a hapi Plugin with Configuration Options\nDESCRIPTION: This snippet shows how to register a plugin while passing configuration options to it. The options are passed in an object alongside the plugin reference.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/plugins.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst start = async function () {\n\n    const server = Hapi.server();\n\n    await server.register({\n        plugin: require('myplugin'),\n        options: {\n            message: 'hello'\n        }\n    });\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering a View in Express.js\nDESCRIPTION: This snippet shows how to render a view in Express.js, passing a title and message to the template.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\napp.get('/', function (req, res) {\n\n    res.render('index', { title: 'Homepage', message: 'Welcome' });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic hapi Plugin\nDESCRIPTION: This snippet shows the simplest form of a hapi plugin with name, version, and a register function that creates a route. The plugin returns 'hello, world' when a user visits the '/test' path.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/plugins.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst myPlugin = {\n    name: 'myPlugin',\n    version: '1.0.0',\n    register: async function (server, options) {\n\n        // Create a route for example\n\n        server.route({\n            method: 'GET',\n            path: '/test',\n            handler: function (request, h) {\n\n                return 'hello, world';\n            }\n        });\n\n        // etc ...\n        await someAsyncMethods();\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: View Content Template\nDESCRIPTION: Simple view content that will be inserted into the layout template's content area.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/views.md#2025-04-09_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<div>Content</div>\n```\n\n----------------------------------------\n\nTITLE: Setting a Cookie with Response Chaining\nDESCRIPTION: Shows how to set a cookie using method chaining on the response object. This is a more concise way to set cookies while returning a response in the same statement.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/cookies.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nreturn h.response('Hello').state('data', { firstVisit: false });\n```\n\n----------------------------------------\n\nTITLE: Setting a Cookie Using Response Toolkit in Hapi.js\nDESCRIPTION: This snippet demonstrates how to set a cookie using the response toolkit in Hapi.js. It sets a cookie named 'data' with a JSON value.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/zh_CN/cookies.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nh.state('data', { firstVisit: false });\nreturn h.response('Hello');\n```\n\n----------------------------------------\n\nTITLE: Setting a Cookie with Custom Encoding Options\nDESCRIPTION: Demonstrates how to override the default cookie configuration when setting a cookie. This example sets the cookie with no encoding, storing the raw string value.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/cookies.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nreturn h.response('Hello').state('data', 'test', { encoding: 'none' });\n```\n\n----------------------------------------\n\nTITLE: Basic Catbox Policy Implementation in Hapi.js\nDESCRIPTION: Demonstrates setting up a basic caching policy for a simple addition function using server.cache(). Includes cache configuration with custom segment, expiration time, and generate function.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/caching.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst start = async () => {\n\n    const server = Hapi.server();\n\n    const add = async (a, b) => {\n\n        await Hoek.wait(1000);   // Simulate some slow I/O\n\n        return Number(a) + Number(b);\n    };\n\n    const sumCache = server.cache({\n        cache: 'my_cache',\n        expiresIn: 10 * 1000,\n        segment: 'customSegment',\n        generateFunc: async (id) => {\n\n            return await add(id.a, id.b);\n        },\n        generateTimeout: 2000\n    });\n\n    server.route({\n        path: '/add/{a}/{b}',\n        method: 'GET',\n        handler: async function (request, h) {\n\n            const { a, b } = request.params;\n            const id = `${a}:${b}`;\n\n            return await sumCache.get({ id, a, b });\n        }\n    });\n\n    await server.start();\n\n    console.log('Server running at:', server.info.uri);\n};\n\nstart();\n```\n\n----------------------------------------\n\nTITLE: Basic Catbox Policy Implementation in Hapi.js\nDESCRIPTION: Demonstrates setting up a basic caching policy for a simple addition function using server.cache(). Includes cache configuration with custom segment, expiration time, and generate function.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/caching.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst start = async () => {\n\n    const server = Hapi.server();\n\n    const add = async (a, b) => {\n\n        await Hoek.wait(1000);   // Simulate some slow I/O\n\n        return Number(a) + Number(b);\n    };\n\n    const sumCache = server.cache({\n        cache: 'my_cache',\n        expiresIn: 10 * 1000,\n        segment: 'customSegment',\n        generateFunc: async (id) => {\n\n            return await add(id.a, id.b);\n        },\n        generateTimeout: 2000\n    });\n\n    server.route({\n        path: '/add/{a}/{b}',\n        method: 'GET',\n        handler: async function (request, h) {\n\n            const { a, b } = request.params;\n            const id = `${a}:${b}`;\n\n            return await sumCache.get({ id, a, b });\n        }\n    });\n\n    await server.start();\n\n    console.log('Server running at:', server.info.uri);\n};\n\nstart();\n```\n\n----------------------------------------\n\nTITLE: Setting a Cookie with Custom Options in Hapi.js\nDESCRIPTION: This snippet shows how to set a cookie with custom encoding options, overriding the default server configuration for this specific cookie.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/pt_BR/cookies.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nreply('Hello').state('data', 'test', { encoding: 'none' });\n```\n\n----------------------------------------\n\nTITLE: Using Multi-Segment Parameters in Hapi.js Route\nDESCRIPTION: This snippet shows how to define a route with a multi-segment parameter, which can match multiple parts of the path, and how to process it in the handler.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/ko_KR/routing.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/hello/{user*2}',\n    handler: function (request, h) {\n\n        const userParts = request.params.user.split('/');\n        return `Hello ${encodeURIComponent(userParts[0])} ${encodeURIComponent(userParts[1])}!`;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies in hapi\nDESCRIPTION: Shows how to configure and set a cookie in hapi using server.state() for configuration and h.state() to set the cookie value in a route handler.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst Hapi = require('@hapi/hapi');\n\nconst server = Hapi.server({ port: 8000 });\n\nserver.state('username', {\n    ttl: null,\n    isSecure: true,\n    isHttpOnly: true\n});\n\nserver.route({\n    method: 'GET',\n    path: '/',\n    handler: function (request, h) {\n\n        h.state('username', 'tom');\n        return h.response('Hello');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Plugin with Options in hapi\nDESCRIPTION: Creates a hapi plugin that uses the options passed during registration to create a toolkit decorator that returns a formatted date string.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst getDate = {\n    name: 'getDate',\n    version: '1.0.0',\n    register: async function (server, options) {\n\n        const currentDate = function() {\n\n            const date = 'Hello ' + options.name + ', the date is ' + new Date();\n            return date;\n        };\n\n        server.decorate('toolkit', 'getDate', currentDate);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Cookie Values in hapi\nDESCRIPTION: Demonstrates how to access cookie values in hapi using the request.state object and set a cookie in the response.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst Hapi = require('@hapi/hapi');\n\nconst server = Hapi.server({ port: 8000 });\n\nserver.state('username', {\n    ttl: null,\n    isSecure: true,\n    isHttpOnly: true\n});\n\nserver.route({\n    method: 'GET',\n    path: '/',\n    handler: async (request, h) => {\n\n        h.state('username', 'tom');\n        return h.response(request.state.username);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Relative Paths for Static File Serving in Hapi.js\nDESCRIPTION: Demonstrates how to set up a Hapi server with relative path configuration for serving static files using the inert plugin. Includes server configuration and a basic route for serving an image file.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/servingfiles.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst Hapi = require('@hapi/hapi');\nconst Path = require('path');\n\nconst start = async () => {\n\n    const server = Hapi.server({\n        routes: {\n            files: {\n                relativeTo: Path.join(__dirname, 'public')\n            }\n        }\n    });\n\n    await server.register(require('@hapi/inert'));\n\n    server.route({\n        method: 'GET',\n        path: '/picture.jpg',\n        handler: function (request, h) {\n\n            return h.file('picture.jpg');\n        }\n    });\n\n    await server.start();\n\n    console.log('Server running at:', server.info.uri);\n};\n\nstart();\n```\n\n----------------------------------------\n\nTITLE: Configuring Relative Paths for Static File Serving in Hapi.js\nDESCRIPTION: Demonstrates how to set up a Hapi server with relative path configuration for serving static files using the inert plugin. Includes server configuration and a basic route for serving an image file.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/servingfiles.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst Hapi = require('@hapi/hapi');\nconst Path = require('path');\n\nconst start = async () => {\n\n    const server = Hapi.server({\n        routes: {\n            files: {\n                relativeTo: Path.join(__dirname, 'public')\n            }\n        }\n    });\n\n    await server.register(require('@hapi/inert'));\n\n    server.route({\n        method: 'GET',\n        path: '/picture.jpg',\n        handler: function (request, h) {\n\n            return h.file('picture.jpg');\n        }\n    });\n\n    await server.start();\n\n    console.log('Server running at:', server.info.uri);\n};\n\nstart();\n```\n\n----------------------------------------\n\nTITLE: Implementing File Handler with Options in Hapi.js\nDESCRIPTION: Examples of different file handler configurations including basic usage, dynamic paths using request parameters, and advanced options like Content-Disposition and compression.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/servingfiles.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/picture.jpg',\n    handler: {\n        file: 'picture.jpg'\n    }\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/{filename}',\n    handler: {\n        file: function (request) {\n            return request.params.filename;\n        }\n    }\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/script.js',\n    handler: {\n        file: {\n            path: 'script.js',\n            filename: 'client.js',\n            mode: 'attachment',\n            lookupCompressed: true\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Validation Error Response Format in Hapi.js\nDESCRIPTION: The JSON structure of the error response returned by Hapi.js when validation fails. It includes the error type, message, and HTTP status code.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/validation.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"Bad Request\",\n    \"message\": \"Invalid request payload input\",\n    \"statusCode\": 400\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Static File Server Setup in Hapi.js\nDESCRIPTION: Full implementation of a static file server using Hapi.js and inert plugin, including server configuration and directory handler setup.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/servingfiles.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst Path = require('path');\nconst Hapi = require('@hapi/hapi');\nconst Inert = require('@hapi/inert');\n\nconst init = async () => {\n\n    const server = new Hapi.Server({\n        port: 3000,\n        routes: {\n            files: {\n                relativeTo: Path.join(__dirname, 'public')\n            }\n        }\n    });\n\n    await server.register(Inert);\n\n    server.route({\n        method: 'GET',\n        path: '/{param*}',\n        handler: {\n            directory: {\n                path: '.',\n                redirectToSlash: true\n            }\n        }\n    });\n\n    await server.start();\n\n    console.log('Server running at:', server.info.uri);\n};\n\ninit();\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Static File Server in Express.js\nDESCRIPTION: This snippet shows how to set up a static file server in Express.js using express.static middleware.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(express.static('/public'));\n```\n\n----------------------------------------\n\nTITLE: Serving a Single Static File in hapi.js using File Handler\nDESCRIPTION: This snippet demonstrates an alternative way to serve a single static file (an image) in hapi.js using the file handler provided by the inert plugin.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nconst server = new Hapi.Server({\n    port: 3000,\n    routes: {\n        files: {\n            relativeTo: Path.join(__dirname, 'public')\n        }\n    }\n});\n\nawait server.register(require('@hapi/inert'));\n\nserver.route({\n    method: 'GET',\n    path: '/image',\n    handler: {\n        file: 'image.jpg'\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Cookie-based Authentication with @hapi/cookie in hapi.js\nDESCRIPTION: A complete example of setting up cookie-based authentication in a hapi.js application. It demonstrates how to register the plugin, configure an authentication strategy, implement login functionality, and protect routes. The example includes a simple user database, login form, and request handling for authentication flows.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/auth.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst Bcrypt = require('bcrypt');\nconst Hapi = require('@hapi/hapi');\n\nconst users = [\n    {\n        username: 'john',\n        password: '$2a$10$iqJSHD.BGr0E2IxQwYgJmeP3NvhPrXAeLSaGCj6IR/XU5QtjVu5Tm',   // 'secret'\n        name: 'John Doe',\n        id: '2133d32a'\n    }\n];\n\nconst start = async () => {\n\n    const server = Hapi.server({ port: 4000 });\n\n    await server.register(require('@hapi/cookie'));\n\n    server.auth.strategy('session', 'cookie', {\n        cookie: {\n            name: 'sid-example',\n            password: '!wsYhFA*C2U6nz=Bu^%A@^F#SF3&kSR6',\n            isSecure: false\n        },\n        redirectTo: '/login',\n        validate: async (request, session) => {\n\n            const account = await users.find(\n                (user) => (user.id === session.id)\n            );\n\n            if (!account) {\n\n                return { isValid: false };\n            }\n\n            return { isValid: true, credentials: account };\n        }\n    });\n\n    server.auth.default('session');\n\n    server.route([\n        {\n            method: 'GET',\n            path: '/',\n            handler: function (request, h) {\n\n                return 'Welcome to the restricted home page!';\n            }\n        },\n        {\n            method: 'GET',\n            path: '/login',\n            handler: function (request, h) {\n\n                return ` <html>\n                            <head>\n                                <title>Login page</title>\n                            </head>\n                            <body>\n                                <h3>Please Log In</h3>\n                                <form method=\"post\" action=\"/login\">\n                                    Username: <input type=\"text\" name=\"username\"><br>\n                                    Password: <input type=\"password\" name=\"password\"><br/>\n                                <input type=\"submit\" value=\"Login\"></form>\n                            </body>\n                        </html>`;\n            },\n            options: {\n                auth: false\n            }\n        },\n        {\n            method: 'POST',\n            path: '/login',\n            handler: async (request, h) => {\n\n                const { username, password } = request.payload;\n                const account = users.find(\n                    (user) => user.username === username\n                );\n\n                if (!account || !(await Bcrypt.compare(password, account.password))) {\n\n                    return h.redirect('/login');\n        }\n\n                request.cookieAuth.set({ id: account.id });\n\n                return h.redirect('/');\n             },\n             options: {\n                 auth: {\n                     mode: 'try'\n                 }\n             }\n        }\n    ]);\n\n    await server.start();\n\n    console.log('server running at: ' + server.info.uri);\n};\n\nstart();\n```\n\n----------------------------------------\n\nTITLE: Implementing Cookie-based Authentication with @hapi/cookie in hapi.js\nDESCRIPTION: A complete example of setting up cookie-based authentication in a hapi.js application. It demonstrates how to register the plugin, configure an authentication strategy, implement login functionality, and protect routes. The example includes a simple user database, login form, and request handling for authentication flows.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/auth.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst Bcrypt = require('bcrypt');\nconst Hapi = require('@hapi/hapi');\n\nconst users = [\n    {\n        username: 'john',\n        password: '$2a$10$iqJSHD.BGr0E2IxQwYgJmeP3NvhPrXAeLSaGCj6IR/XU5QtjVu5Tm',   // 'secret'\n        name: 'John Doe',\n        id: '2133d32a'\n    }\n];\n\nconst start = async () => {\n\n    const server = Hapi.server({ port: 4000 });\n\n    await server.register(require('@hapi/cookie'));\n\n    server.auth.strategy('session', 'cookie', {\n        cookie: {\n            name: 'sid-example',\n            password: '!wsYhFA*C2U6nz=Bu^%A@^F#SF3&kSR6',\n            isSecure: false\n        },\n        redirectTo: '/login',\n        validate: async (request, session) => {\n\n            const account = await users.find(\n                (user) => (user.id === session.id)\n            );\n\n            if (!account) {\n\n                return { isValid: false };\n            }\n\n            return { isValid: true, credentials: account };\n        }\n    });\n\n    server.auth.default('session');\n\n    server.route([\n        {\n            method: 'GET',\n            path: '/',\n            handler: function (request, h) {\n\n                return 'Welcome to the restricted home page!';\n            }\n        },\n        {\n            method: 'GET',\n            path: '/login',\n            handler: function (request, h) {\n\n                return ` <html>\n                            <head>\n                                <title>Login page</title>\n                            </head>\n                            <body>\n                                <h3>Please Log In</h3>\n                                <form method=\"post\" action=\"/login\">\n                                    Username: <input type=\"text\" name=\"username\"><br>\n                                    Password: <input type=\"password\" name=\"password\"><br/>\n                                <input type=\"submit\" value=\"Login\"></form>\n                            </body>\n                        </html>`;\n            },\n            options: {\n                auth: false\n            }\n        },\n        {\n            method: 'POST',\n            path: '/login',\n            handler: async (request, h) => {\n\n                const { username, password } = request.payload;\n                const account = users.find(\n                    (user) => user.username === username\n                );\n\n                if (!account || !(await Bcrypt.compare(password, account.password))) {\n\n                    return h.redirect('/login');\n        }\n\n                request.cookieAuth.set({ id: account.id });\n\n                return h.redirect('/');\n             },\n             options: {\n                 auth: {\n                     mode: 'try'\n                 }\n             }\n        }\n    ]);\n\n    await server.start();\n\n    console.log('server running at: ' + server.info.uri);\n};\n\nstart();\n```\n\n----------------------------------------\n\nTITLE: Serving a Single Static File in hapi.js using h.file()\nDESCRIPTION: This snippet shows how to serve a single static file (an image) in hapi.js using the h.file() method provided by the inert plugin.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nconst server = new Hapi.Server({\n    port: 3000,\n    routes: {\n        files: {\n            relativeTo: Path.join(__dirname, 'public')\n        }\n    }\n});\n\nawait server.register(require('@hapi/inert'));\n\nserver.route({\n    method: 'GET',\n    path: '/image',\n    handler: function (request, h) {\n\n        return h.file('image.jpg');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Directory Handler Implementation in Hapi.js\nDESCRIPTION: Examples of directory handler configurations including basic usage and advanced options like index files and directory listings.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/servingfiles.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/{param*}',\n    handler: {\n        directory: {\n            path: 'directory-path-here'\n        }\n    }\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/{param*}',\n    handler: {\n        directory: {\n            path: 'directory-path-here',\n            index: ['index.html', 'default.html']\n        }\n    }\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/{param*}',\n    handler: {\n        directory: {\n            path: 'directory-path-here',\n            listing: true\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing and Starting a Testable hapi.js Server\nDESCRIPTION: This code sets up a hapi.js server with a single route and exports functions to initialize and start the server. It's designed to be easily testable by separating the initialization and start processes.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/testing.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst Hapi = require('@hapi/hapi');\n\nconst server = Hapi.server({\n    port: 3000,\n    host: 'localhost'\n});\n\nserver.route({\n  method: 'GET',\n  path: '/',\n  handler: function () {\n\n      return 'Hello World!';\n  }\n});\n\nexports.init = async () => {\n\n    await server.initialize();\n    return server;\n};\n\nexports.start = async () => {\n\n    await server.start();\n    console.log(`Server running at: ${server.info.uri}`);\n    return server;\n};\n\nprocess.on('unhandledRejection', (err) => {\n\n    console.log(err);\n    process.exit(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Error Message in Express.js\nDESCRIPTION: This snippet shows how to return a custom 404 error message in Express.js using res.status() and res.send().\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nres.status(400).send({status: 404, error: \"Page not found\"});\n```\n\n----------------------------------------\n\nTITLE: Writing a Route Test for hapi.js using lab and code\nDESCRIPTION: This code demonstrates how to write a test for a hapi.js route using the lab testing framework and code assertion library. It sets up a test server, injects a request, and checks the response status code.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/testing.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst Lab = require('@hapi/lab');\nconst { expect } = require('@hapi/code');\nconst { afterEach, beforeEach, describe, it } = exports.lab = Lab.script();\nconst { init } = require('../lib/server');\n\ndescribe('GET /', () => {\n    let server;\n\n    beforeEach(async () => {\n        server = await init();\n    });\n\n    afterEach(async () => {\n        await server.stop();\n    });\n\n    it('responds with 200', async () => {\n        const res = await server.inject({\n            method: 'get',\n            url: '/'\n        });\n        expect(res.statusCode).to.equal(200);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting a Cookie in a Route Handler with h.state()\nDESCRIPTION: Demonstrates how to set a cookie named 'data' within a route handler using the response toolkit. This sets a JSON object as the cookie value using the previously configured encoding.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/cookies.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/',\n    handler: function (request, h) {\n\n        h.state('data', { firstVisit: false });\n        return h.response('Hello');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Vision Plugin for Template Rendering in Hapi.js\nDESCRIPTION: This snippet demonstrates how to register the Vision plugin and configure Handlebars as a templating engine. It sets up the server to use templates from a specific directory relative to the current file location.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/views.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst Path = require('path');\nconst Hapi = require('@hapi/hapi');\nconst Hoek = require('@hapi/hoek');\n\nconst start = async () => {\n\n    const server = Hapi.server();\n\n    await server.register(require('@hapi/vision'));\n\n    server.views({\n        engines: {\n            html: require('handlebars')\n        },\n        relativeTo: __dirname,\n        path: 'templates'\n    });\n\n    await server.start();\n};\n\nstart();\n```\n\n----------------------------------------\n\nTITLE: Parsing Request Payload in hapi\nDESCRIPTION: Implements a POST route handler in hapi that accesses form data directly from the request.payload object without requiring additional middleware.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'POST',\n    path: '/hello',\n    handler: function (request, h) {\n\n        const name = request.payload.name;\n        return `Hello ` + name;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Hapi.js Server with Vision and View Helpers\nDESCRIPTION: This code provides a complete server implementation that configures Vision with Handlebars, sets up template paths including a helpers path, and creates a route that renders a template using the fortune view helper.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/views.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst Hapi = require('@hapi/hapi');\n\nconst start = async () => {\n\n    const server = Hapi.server({ port: 8080 });\n\n    await server.register(require('@hapi/vision'));\n\n    server.views({\n        engines: {\n            html: require('handlebars')\n        },\n        relativeTo: __dirname,\n        path: 'templates',\n        helpersPath: 'helpers'\n    });\n\n    server.route({\n        method: 'GET',\n        path: '/',\n        handler: function (request, h) {\n\n            return h.view('index');\n        }\n    });\n\n    await server.start();\n};\n\nstart();\n```\n\n----------------------------------------\n\nTITLE: Configuring Server with Vision Plugin for Template Rendering in Hapi.js\nDESCRIPTION: Sets up a Hapi server with the vision plugin to enable template rendering. Configures Handlebars as the engine for HTML templates and specifies the template directory location.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/zh_CN/views.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst Path = require('path');\nconst Hapi = require('@hapi/hapi');\nconst Hoek = require('@hapi/hoek');\n\nconst server = Hapi.server();\n\nconst start = async () => {\n\n    await server.register(require('@hapi/vision'));\n\n    server.views({\n        engines: {\n            html: require('handlebars')\n        },\n        relativeTo: __dirname,\n        path: 'templates'\n    });\n};\n\nstart();\n```\n\n----------------------------------------\n\nTITLE: Configuring Server with Vision Plugin for Template Rendering in Hapi.js\nDESCRIPTION: Sets up a Hapi server with the vision plugin to enable template rendering. Configures Handlebars as the engine for HTML templates and specifies the template directory location.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/zh_CN/views.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst Path = require('path');\nconst Hapi = require('@hapi/hapi');\nconst Hoek = require('@hapi/hoek');\n\nconst server = Hapi.server();\n\nconst start = async () => {\n\n    await server.register(require('@hapi/vision'));\n\n    server.views({\n        engines: {\n            html: require('handlebars')\n        },\n        relativeTo: __dirname,\n        path: 'templates'\n    });\n};\n\nstart();\n```\n\n----------------------------------------\n\nTITLE: Configuring Vision Layout Settings in Hapi.js\nDESCRIPTION: Configuration for enabling built-in layouts in Vision plugin and setting the layout path. This enables the default layout system and specifies where layout templates are stored.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/views.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nserver.views({\n    // ...\n    layout: true,\n    layoutPath: 'templates/layout'\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring npm test script for running lab tests\nDESCRIPTION: This JSON snippet shows how to modify the package.json file to add a test script that runs lab tests for all files ending with .test.js in any subdirectory.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/testing.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n  \"scripts\": {\n    \"test\": \"lab -v **/*.test.js\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Complete Server Example with View Helper in Hapi.js\nDESCRIPTION: A complete Hapi server implementation that registers the vision plugin, configures views with a helpers path, and sets up a route that renders a template using the fortune helper.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/zh_CN/views.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst Hapi = require('@hapi/hapi');\n\nconst server = Hapi.server({ port: 8080 });\n\nconst start = async () => {\n\n    await server.register(require('@hapi/vision'));\n\n    server.views({\n        engines: {\n            html: require('handlebars')\n        },\n        relativeTo: __dirname,\n        path: 'templates',\n        helpersPath: 'helpers'\n    });\n\n    server.route({\n        method: 'GET',\n        path: '/',\n        handler: function (request, h) {\n\n            return h.view('index');\n        }\n    });\n};\n\nstart();\n```\n\n----------------------------------------\n\nTITLE: Configuring View Engine in Express.js\nDESCRIPTION: This snippet shows how to set the view engine in Express.js, using Pug as an example.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\napp.set('view engine', 'pug');\n```\n\n----------------------------------------\n\nTITLE: Configuring View Engine in hapi.js with Vision Plugin\nDESCRIPTION: This snippet demonstrates how to set up the view engine in hapi.js using the Vision plugin. It configures Pug as the template engine and sets the views directory.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nawait server.register(require('@hapi/vision'));\n\nserver.views({\n    engines: {\n        pug: require('pug')\n    },\n    relativeTo: __dirname,\n    path: 'views'\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Request Payload in Hapi.js\nDESCRIPTION: This snippet demonstrates how to access and use the request payload in a Hapi.js route handler.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/routing.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'POST',\n    path: '/signup',\n    handler: function (request, h) {\n\n        const payload = request.payload;\n\n        return `Welcome ${payload.username}!`;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering a View in hapi.js using h.view\nDESCRIPTION: This snippet demonstrates how to render a view in hapi.js using the h.view method, passing a title and message to the template.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/',\n    handler: function (request, h) {\n\n        return h.view('index', { title: 'Homepage', message: 'Welcome' });\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Route with Multiple Methods in hapi\nDESCRIPTION: Example of defining a single route in hapi that responds to multiple HTTP methods (PUT and POST).\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nserver.route({\n    method: ['PUT', 'POST'],\n    path: '/',\n    handler: function (request, h) {\n\n        return 'I did something!';\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering a View in hapi.js using View Handler\nDESCRIPTION: This snippet shows an alternative way to render a view in hapi.js using the view handler, passing a title and message to the template.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/',\n    handler: {\n        view: {\n            template: 'index',\n            context: {\n                title: 'Homepage',\n                message: 'Welcome'\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Using View Handler for Template Rendering in Hapi.js Routes\nDESCRIPTION: Shows how to use Hapi's built-in view handler to render templates in routes. This approach provides a more declarative way to specify the template and context data.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/zh_CN/views.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/',\n    handler: {\n        view: 'index'\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Gerando chave customizada para cache em métodos de servidor do Hapi.js\nDESCRIPTION: Exemplo de como implementar uma função generateKey para criar chaves de cache personalizadas quando os parâmetros do método incluem objetos complexos como arrays.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/pt_BR/servermethods.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst sum = function (array, next) {\n    let total = 0;\n\n    array.forEach((item) => {\n        total += item;\n    });\n\n    next(null, total);\n};\n\nserver.method('sum', sum, {\n    generateKey: function (array) {\n        return array.join(',');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: View Rendering with Context Data\nDESCRIPTION: Example of passing context data to a view using h.view() method.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/views.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nreturn h.view('index', { title: 'My home page' });\n```\n\n----------------------------------------\n\nTITLE: Dynamically Setting TTL for Server Method Cache in hapi\nDESCRIPTION: Demonstrates how to dynamically set the TTL (time to live) for cached server method results using the flags parameter. This allows for custom cache durations per method invocation.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/zh_CN/servermethods.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst add = async function (x, y, flags) {\n\n    const result = await someLongRunningFunction(x, y);\n\n    flags.ttl = 5 * 60 * 1000; // 5 mins\n\n    return result;\n};\n\nserver.method('add', add, {\n    cache: {\n        expiresIn: 2000,\n        generateTimeout: 100\n    }\n});\n\nserver.methods.add(5, 12);\n```\n\n----------------------------------------\n\nTITLE: Definindo Rota com Parâmetro no Caminho no Hapi\nDESCRIPTION: Este snippet demonstra como definir uma rota com um parâmetro nomeado no caminho, acessando-o no manipulador de requisição.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/pt_BR/routing.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/hello/{user}',\n    handler: function (request, reply) {\n        reply('Hello ' + encodeURIComponent(request.params.user) + '!');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Method Cache in hapi\nDESCRIPTION: Shows how to set up caching for a server method by providing cache configuration options. This demonstrates various caching parameters such as expiration times and timeouts.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/zh_CN/servermethods.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nserver.method('add', add, {\n    cache: {\n        expiresIn: 60000,\n        expiresAt: '20:30',\n        staleIn: 30000,\n        staleTimeout: 10000,\n        generateTimeout: 100\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Middleware in Express\nDESCRIPTION: Example of loading custom middleware in an Express application.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_15\n\nLANGUAGE: js\nCODE:\n```\napp.use(getDate);\n```\n\n----------------------------------------\n\nTITLE: Client-Server Caching with Decorated Values in Hapi.js\nDESCRIPTION: Illustrates advanced caching implementation using decorated values to access cache metadata and implement client-side caching through Last-modified headers.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/caching.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst start = async () => {\n\n    const server = Hapi.server();\n\n    server.method('sum', add, {\n        cache: {\n            cache: 'my_cache',\n            expiresIn: 10 * 1000,\n            generateTimeout: 2000,\n            getDecoratedValue: true\n        }\n    });\n\n    server.route({\n        path: '/add/{a}/{b}',\n        method: 'GET',\n        handler: async function (request, h) {\n\n            const { a, b } = request.params;\n            const { value, cached } = await server.methods.sum(a, b);\n            const lastModified = cached ? new Date(cached.stored) : new Date();\n\n            return h.response(value)\n                .header('Last-modified', lastModified.toUTCString());\n        }\n    });\n\n    await server.start();\n\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Hapi.js Server\nDESCRIPTION: This snippet demonstrates how to set up a basic Hapi.js server. It includes server initialization, error handling, and starting the server. The server is configured to listen on localhost:3000.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/gettingstarted.md#2025-04-09_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n'use strict';\n\nconst Hapi = require('@hapi/hapi');\n\nconst init = async () => {\n\n    const server = Hapi.server({\n        port: 3000,\n        host: 'localhost'\n    });\n\n    await server.start();\n    console.log('Server running on %s', server.info.uri);\n};\n\nprocess.on('unhandledRejection', (err) => {\n\n    console.log(err);\n    process.exit(1);\n});\n\ninit();\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Hapi.js Server\nDESCRIPTION: This snippet demonstrates how to set up a basic Hapi.js server. It includes server initialization, error handling, and starting the server. The server is configured to listen on localhost:3000.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/gettingstarted.md#2025-04-09_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n'use strict';\n\nconst Hapi = require('@hapi/hapi');\n\nconst init = async () => {\n\n    const server = Hapi.server({\n        port: 3000,\n        host: 'localhost'\n    });\n\n    await server.start();\n    console.log('Server running on %s', server.info.uri);\n};\n\nprocess.on('unhandledRejection', (err) => {\n\n    console.log(err);\n    process.exit(1);\n});\n\ninit();\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Logging in Hapi.js Route Handler\nDESCRIPTION: Demonstrates how to log events in the context of a request handler using request.log() method. The example shows logging an error event with a custom message.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/logging.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/',\n    handler: function (request, h) {\n\n        request.log('error', 'Event error');\n        return 'Hello World';\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Layout Template with Content Placeholder in Hapi.js\nDESCRIPTION: A layout template that includes a content placeholder using triple curly braces. When rendering a view with a layout, the view content will replace the {{{content}}} placeholder.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/zh_CN/views.md#2025-04-09_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <body>\n    {{{content}}}\n </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Server-Level Logging in Hapi.js\nDESCRIPTION: Shows how to implement server-wide logging using server.log() method. This example demonstrates logging an event with multiple tags outside of request context.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/logging.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Hapi = require('@hapi/hapi');\nconst server = Hapi.server({ port: 80 });\n\nserver.log(['test', 'error'], 'Test event');\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Route in Hapi.js\nDESCRIPTION: This snippet shows how to define a simple GET route in Hapi.js that responds with 'Hello World!'.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/routing.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/',\n    handler: function (request, h) {\n\n        return 'Hello World!';\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Route in Hapi.js\nDESCRIPTION: This snippet shows how to define a simple GET route in Hapi.js that responds with 'Hello World!'.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/routing.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/',\n    handler: function (request, h) {\n\n        return 'Hello World!';\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Log Collection in Hapi.js Route\nDESCRIPTION: Configuration example showing how to enable log collection for a specific route by setting the log.collect option to true.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/logging.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/',\n    options: {\n        log: {\n            collect: true\n        }\n    },\n    handler: function (request, h) {\n\n        return 'hello';\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Options in a hapi Plugin\nDESCRIPTION: This example shows how to access user-provided options in a plugin. The plugin creates a route that returns a personalized greeting using a name passed through the options object.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/plugins.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nexports.plugin = {\n    pkg: require('./package.json'),\n    register: async function (server, options) {\n\n        // Create a route for example\n\n        server.route({\n            method: 'GET',\n            path: '/test',\n            handler: function (request, h) {\n\n                const name = options.name;\n                return `Hello ${name}`;\n            }\n        });\n\n        // etc...\n        await someAsyncMethods();\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Twitter Authentication with Bell in hapi\nDESCRIPTION: Sets up Twitter OAuth authentication in hapi using the Bell plugin, configuring the authentication strategy and handling the callback route.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nconst Hapi = require('@hapi/hapi');\nconst Bell = require('@hapi/bell');\n\nconst server = Hapi.server({ port: 8000 });\n\nawait server.register(Bell);\n\nserver.auth.strategy('twitter', 'bell', {\n    provider: 'twitter',\n    password: 'cookie_encryption_password_secure',\n    clientId: TWITTER_CONSUMER_KEY,\n    clientSecret: TWITTER_CONSUMER_SECRET,\n    isSecure: false\n});\n\nserver.route({\n    method: '*', \n    path: '/auth/twitter',            // The callback endpoint registered with the provider\n    handler: function (request, h) {\n\n        if (!request.auth.isAuthenticated) {\n            return `Authentication failed due to: ${request.auth.error.message}`;\n        }\n        \n        // Perform any account lookup or registration, setup local session,\n        // and redirect to the application. The third-party credentials are\n        // stored in request.auth.credentials. Any query parameters from\n        // the initial request are passed back via request.auth.credentials.query.\n\n        return h.redirect('/home');\n    },\n    options: {\n        auth: {\n          strategy: 'twitter',\n          mode: 'try'\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Extension Points in hapi\nDESCRIPTION: Example of using hapi's extension points to modify the request at a specific point in the request lifecycle.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nserver.ext('onRequest', function (request, h) {\n\n    request.setUrl('/test');\n    return h.continue;\n});\n```\n\n----------------------------------------\n\nTITLE: Using the qs Module for Complex Query Parsing in Hapi.js\nDESCRIPTION: This example demonstrates how to use the qs module to parse complex query structures in Hapi.js.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/routing.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst Hapi = require('@hapi/hapi');\nconst Qs = require('qs');\n\nconst server = Hapi.server({\n    port: 3000,\n    host: 'localhost',\n    query: {\n        parser: (query) => Qs.parse(query)\n    }\n});\n\nserver.route({\n    method: 'GET',\n    path: '/',\n    handler: function (request, h) {\n\n        return request.query;\n    }\n});\n\nconst init = async () => {\n\n    await server.start();\n    console.log('Server running on %s', server.info.uri);\n};\n\nprocess.on('unhandledRejection', (err) => {\n\n    console.log(err);\n    process.exit(1);\n});\n\ninit();\n```\n\n----------------------------------------\n\nTITLE: Handlebars Template Using a Fortune Helper in Hapi.js\nDESCRIPTION: A simple Handlebars template that uses the custom fortune helper to display a random fortune message. The helper function is called using double curly braces syntax.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/zh_CN/views.md#2025-04-09_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<h1>Your fortune</h1>\n<p>{{fortune}}</p>\n```\n\n----------------------------------------\n\nTITLE: Creating a Plugin in hapi\nDESCRIPTION: Example of creating a custom plugin in hapi that adds a date function to the toolkit object.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nconst getDate = {\n    name: 'getDate',\n    version: '1.0.0',\n    register: async function (server, options) {\n\n        const currentDate = function() {\n\n            const date = new Date();\n            return date;\n        };\n\n        server.decorate('toolkit', 'getDate', currentDate);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Fortune View Helper for Handlebars in Hapi.js\nDESCRIPTION: This code defines a view helper function that randomly selects and returns a fortune message from an array. This helper can be used within Handlebars templates to display random fortune messages.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/views.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function () {\n\n    const fortunes = [\n        'Heisenberg may have slept here...',\n        'Wanna buy a duck?',\n        'Say no, then negotiate.',\n        'Time and tide wait for no man.',\n        'To teach is to learn.',\n        'Never ask the barber if you need a haircut.',\n        'You will forget that you ever knew me.',\n        'You will be run over by a beer truck.',\n        'Fortune favors the lucky.',\n        'Have a nice day!'\n    ];\n\n    const x = Math.floor(Math.random() * fortunes.length);\n    return fortunes[x];\n};\n```\n\n----------------------------------------\n\nTITLE: Registering a Plugin with Options in hapi\nDESCRIPTION: Shows how to register a plugin in hapi with configuration options, providing a name parameter that will be used by the plugin.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nserver.register({\n    plugin: getDate,\n    options: {\n        name: 'Tom'\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a GET Route in hapi\nDESCRIPTION: Example of how to define a basic GET route in hapi that returns a simple string response.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path:'/hello',\n    handler: (request, h) => {\n\n      return 'Hello World!';\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Plugin with Routes for Registration Options\nDESCRIPTION: This snippet demonstrates a plugin that creates a route, which will be affected by any registration options like prefix or vhost when the plugin is registered.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/plugins.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nexports.plugin = {\n    pkg: require('./package.json'),\n    register: async function (server, options) {\n\n        server.route({\n            method: 'GET',\n            path: '/test',\n            handler: function (request, h) {\n\n                return 'test passed';\n            }\n        });\n\n        // etc...\n        await someAsyncMethods();\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Basic View Rendering Route with h.view()\nDESCRIPTION: Example of rendering a view using the h.view() method in a route handler.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/views.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/',\n    handler: function (request, h) {\n\n        return h.view('index');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Routes to Hapi.js Server\nDESCRIPTION: This snippet shows how to add a route to a Hapi.js server. It defines a GET route for the root path ('/') that returns 'Hello World!'. The code also includes server initialization and error handling.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/gettingstarted.md#2025-04-09_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n'use strict';\n\nconst Hapi = require('@hapi/hapi');\n\nconst init = async () => {\n\n    const server = Hapi.server({\n        port: 3000,\n        host: 'localhost'\n    });\n\n    server.route({\n        method: 'GET',\n        path: '/',\n        handler: (request, h) => {\n\n            return 'Hello World!';\n        }\n    });\n\n    await server.start();\n    console.log('Server running on %s', server.info.uri);\n};\n\nprocess.on('unhandledRejection', (err) => {\n\n    console.log(err);\n    process.exit(1);\n});\n\ninit();\n```\n\n----------------------------------------\n\nTITLE: Setting Last-Modified Header in Hapi.js Response\nDESCRIPTION: Demonstrates how to set the Last-Modified header on a response object for conditional GET requests.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/caching.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nreturn h.response(result)\n    .header('Last-Modified', lastModified.toUTCString());\n```\n\n----------------------------------------\n\nTITLE: Using Multi-Segment Parameters in Hapi.js Routes\nDESCRIPTION: This example demonstrates how to use a multi-segment parameter in a route path and process it in the handler.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/routing.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/hello/{user*2}',\n    handler: function (request, h) {\n\n        const userParts = request.params.user.split('/');\n\n        return `Hello ${userParts[0]} ${userParts[1]}!`;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configurando Opções Adicionais para Rota no Hapi\nDESCRIPTION: Este exemplo mostra como adicionar opções extras à configuração da rota, como descrição, notas e tags, úteis para documentação da API.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/pt_BR/routing.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/hello/{user?}',\n    handler: function (request, reply) {\n        const user = request.params.user ? encodeURIComponent(request.params.user) : 'stranger';\n        reply('Hello ' + user + '!');\n    },\n    options: {\n        description: 'Say hello!',\n        notes: 'The user parameter defaults to \\'stranger\\' if unspecified',\n        tags: ['api', 'greeting']\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementando Rota com Parâmetro de Multisegmentos no Hapi\nDESCRIPTION: Este snippet demonstra como configurar uma rota com um parâmetro que aceita múltiplos segmentos de caminho, utilizando um asterisco e um número.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/pt_BR/routing.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/hello/{user*2}',\n    handler: function (request, reply) {\n        const userParts = request.params.user.split('/');\n        reply('Hello ' + encodeURIComponent(userParts[0]) + ' ' + encodeURIComponent(userParts[1]) + '!');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Route-Level Cookie Options\nDESCRIPTION: Sets route-level cookie configuration through the options.state object. This example enables cookie parsing and sets the failure action to 'error' when cookie parsing fails.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/cookies.md#2025-04-09_snippet_1\n\nLANGUAGE: json5\nCODE:\n```\n{\n    options: {\n        state: {\n            parse: true,\n            failAction: 'error'\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Named Parameters in Hapi.js Route Path\nDESCRIPTION: This snippet shows how to define a route with a named parameter in the path, and how to access it in the handler function using request.params.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/ko_KR/routing.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/hello/{user}',\n    handler: function (request, h) {\n\n        return `Hello ${encodeURIComponent(request.params.user)}!`;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache-Control Headers in Hapi.js Route\nDESCRIPTION: Example showing how to set Cache-Control headers on a route using the cache options object and dynamic TTL override via response object.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/caching.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    path: '/hapi/{ttl?}',\n    method: 'GET',\n    handler: function (request, h) {\n\n        const response = h.response({ be: 'hapi' });\n\n        if (request.params.ttl) {\n            response.ttl(request.params.ttl);\n        }\n\n        return response;\n    },\n    options: {\n        cache: {\n            expiresIn: 30 * 1000,\n            privacy: 'private'\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple HTTP Methods in Hapi.js\nDESCRIPTION: This example demonstrates how to set up a route that responds to both PUT and POST requests with the same handler.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/routing.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: ['PUT', 'POST'],\n    path: '/',\n    handler: function (request, h) {\n\n        return 'I did something!';\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookies in hapi\nDESCRIPTION: Sets up a cookie configuration in hapi using server.state() method, defining security and other options.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst Hapi = require('@hapi/hapi');\n\nconst server = Hapi.server({ port: 8000 });\n\nserver.state('data', {\n    ttl: null,\n    isSecure: true,\n    isHttpOnly: true\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Route in Hapi.js\nDESCRIPTION: This snippet shows how to define a simple route in Hapi.js with a GET method, a path, and a handler function that returns a string response.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/ko_KR/routing.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/',\n    handler: function (request, h) {\n\n        return 'Hello!';\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Response Validation with Custom failAction in Hapi.js\nDESCRIPTION: Example of output validation for a book list API with a custom failAction. It validates that the response is an array of book objects with the specified schema and logs errors instead of failing.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/validation.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst bookSchema = Joi.object({\n    title: Joi.string().required(),\n    author: Joi.string().required(),\n    isbn: Joi.string().length(10),\n    pageCount: Joi.number(),\n    datePublished: Joi.date().iso()\n});\n\nserver.route({\n    method: 'GET',\n    path: '/books',\n    handler: async function (request, h) {\n\n        return await getBooks();\n    },\n    options: {\n        response: {\n            schema: Joi.array().items(bookSchema),\n            failAction: 'log'\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Response Validation with Custom failAction in Hapi.js\nDESCRIPTION: Example of output validation for a book list API with a custom failAction. It validates that the response is an array of book objects with the specified schema and logs errors instead of failing.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/validation.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst bookSchema = Joi.object({\n    title: Joi.string().required(),\n    author: Joi.string().required(),\n    isbn: Joi.string().length(10),\n    pageCount: Joi.number(),\n    datePublished: Joi.date().iso()\n});\n\nserver.route({\n    method: 'GET',\n    path: '/books',\n    handler: async function (request, h) {\n\n        return await getBooks();\n    },\n    options: {\n        response: {\n            schema: Joi.array().items(bookSchema),\n            failAction: 'log'\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a GET Route in Express\nDESCRIPTION: Example of how to define a basic GET route in Express that returns a simple string response.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_4\n\nLANGUAGE: js\nCODE:\n```\napp.get('/hello', function (req, res) {  \n  res.send('Hello World!');\n});\n```\n\n----------------------------------------\n\nTITLE: Definindo uma Rota Básica no Hapi\nDESCRIPTION: Este snippet demonstra como definir uma rota básica no Hapi, especificando o método HTTP, o caminho e o manipulador de requisição.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/pt_BR/routing.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/',\n    handler: function (request, reply) {\n        reply('Hello!');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Route with Parameters in Express\nDESCRIPTION: Example of defining a route with named parameters in Express and accessing them in the handler.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_7\n\nLANGUAGE: js\nCODE:\n```\napp.get('/hello/:name', function (req, res) {\n\n    const name = req.params.name\n    res.send('Hello ' + name);\n}); \n```\n\n----------------------------------------\n\nTITLE: Registering Server Method with Method Object in hapi\nDESCRIPTION: Demonstrates registering a server method using an object containing name, method, and options properties. This approach uses a single configuration object instead of individual parameters.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/zh_CN/servermethods.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst add = function (x, y) {\n\n    return x + y;\n};\n\nserver.method({\n    name: 'add',\n    method: add,\n    options: {}\n});\n```\n\n----------------------------------------\n\nTITLE: Redirect Response in hapi\nDESCRIPTION: Example of redirecting to another route in hapi using the response toolkit's redirect method.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/home',\n    handler: function (request, h) {\n\n        return h.redirect('/');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: JSON Response in hapi\nDESCRIPTION: Example of returning JSON data in hapi by simply returning a JavaScript object from the handler.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/user',\n    handler: function (request, h) {\n\n        const user = {\n            firstName: 'John',\n            lastName: 'Doe',\n            userName: 'JohnDoe',\n            id: 123\n        }\n\n        return user;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Binding Context to Server Method in hapi\nDESCRIPTION: Demonstrates how to bind a specific context object to a server method, allowing the method to access properties and methods of that object via 'this'. This example binds a database client to enable direct access.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/zh_CN/servermethods.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst lookup = async function (id) {\n\n    // 调用 myDB.getOne\n\n    return await this.getOne({ id });\n};\n\nserver.method('lookup', lookup, { bind: myDB });\n```\n\n----------------------------------------\n\nTITLE: Configurando Rota com Parâmetro Opcional no Hapi\nDESCRIPTION: Este exemplo mostra como definir uma rota com um parâmetro opcional no caminho, utilizando um ponto de interrogação após o nome do parâmetro.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/pt_BR/routing.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/hello/{user?}',\n    handler: function (request, reply) {\n        const user = request.params.user ? encodeURIComponent(request.params.user) : 'stranger';\n        reply('Hello ' + user + '!');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple hapi Plugins with Options\nDESCRIPTION: This example shows how to register multiple plugins at once, with each plugin having its own options object. The plugins and their options are passed as an array of objects.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/plugins.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst start = async function () {\n\n    const server = Hapi.server();\n\n    await server.register([{\n        plugin: require('plugin1'),\n        options: {}\n    }, {\n        plugin: require('plugin2'),\n        options: {}\n    }]);\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple hapi Plugins with Options\nDESCRIPTION: This example shows how to register multiple plugins at once, with each plugin having its own options object. The plugins and their options are passed as an array of objects.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/plugins.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst start = async function () {\n\n    const server = Hapi.server();\n\n    await server.register([{\n        plugin: require('plugin1'),\n        options: {}\n    }, {\n        plugin: require('plugin2'),\n        options: {}\n    }]);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Server for Cookie Handling in Hapi.js\nDESCRIPTION: This snippet demonstrates how to configure the server to handle cookies using server.state(). It sets up a cookie named 'data' with specific security and encoding options.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/zh_CN/cookies.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nserver.state('data', {\n    ttl: null,\n    isSecure: true,\n    isHttpOnly: true,\n    encoding: 'base64json',\n    clearInvalid: false, // remove invalid cookies\n    strictHeader: true // don't allow violations of RFC 6265\n});\n```\n\n----------------------------------------\n\nTITLE: View Handler Route Configuration\nDESCRIPTION: Example of rendering a view using Hapi's built-in view handler in route configuration.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/views.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/',\n    handler: {\n        view: 'index'\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie Options in Hapi.js\nDESCRIPTION: This snippet demonstrates how to configure server-wide cookie options using server.state(). It sets up a cookie named 'data' with specific security and encoding settings.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/pt_BR/cookies.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nserver.state('data', {\n    ttl: null,\n    isSecure: true,\n    isHttpOnly: true,\n    encoding: 'base64json',\n    clearInvalid: false, // remove cookies inválidos\n    strictHeader: true // não permite violações da RFC 6265\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Error Message in hapi.js using Boom\nDESCRIPTION: This snippet demonstrates how to return a custom 404 error message in hapi.js using the Boom module.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nthrow Boom.notFound('Page not found');\n```\n\n----------------------------------------\n\nTITLE: Configuring Route-Level Cookie Behavior in Hapi.js\nDESCRIPTION: This JSON5 snippet shows how to configure cookie behavior at the route level. It sets options for parsing cookies and handling failures.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/zh_CN/cookies.md#2025-04-09_snippet_1\n\nLANGUAGE: json5\nCODE:\n```\n{\n    config: {\n        state: {\n            parse: true,        // 解析 cookies 并储存在 request.state\n            failAction: 'error' // 也可以为 'ignore' 或者 'log'\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Template Paths with Directory Structure in Hapi.js\nDESCRIPTION: This snippet demonstrates how to configure various template-related paths in Hapi.js, including the main templates path, layout path, and helpers path. All paths are set relative to the current directory.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/views.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nserver.views({\n    engines: {\n        html: require('handlebars')\n    },\n    relativeTo: __dirname,\n    path: './templates',\n    layoutPath: './templates/layout',\n    helpersPath: './templates/helpers'\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Route-specific Cookie Options in Hapi.js\nDESCRIPTION: This JSON5 snippet shows how to configure cookie parsing options for a specific route. It enables parsing of cookies and sets the fail action to 'error'.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/pt_BR/cookies.md#2025-04-09_snippet_1\n\nLANGUAGE: json5\nCODE:\n```\n{\n    options: {\n        state: {\n            parse: true, // analisa e armazena em request.state\n            failAction: 'error' // também pode ser 'ignore' ou 'log'\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Validation Configuration in Hapi.js (JSON5)\nDESCRIPTION: The default configuration object for the validate option in Hapi.js routes. By default, all validation types are set to true (no validation) with a failAction of 'error'.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/validation.md#2025-04-09_snippet_0\n\nLANGUAGE: json5\nCODE:\n```\n{ \n    headers: true, \n    params: true, \n    query: true, \n    payload: true, \n    state: true, \n    failAction: 'error'\n }\n```\n\n----------------------------------------\n\nTITLE: Clearing a Cookie with unstate()\nDESCRIPTION: Demonstrates how to clear a cookie by using the unstate() method on the response object. This example removes the 'data' cookie while returning a response.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/cookies.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nreturn h.response('Bye').unstate('data');\n```\n\n----------------------------------------\n\nTITLE: Using View Handler with Context in Hapi.js\nDESCRIPTION: Demonstrates using the view handler with a context object to pass data to the template. This configuration specifies both the template name and the context data in the handler configuration.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/zh_CN/views.md#2025-04-09_snippet_6\n\nLANGUAGE: json5\nCODE:\n```\nhandler: {\n    view: {\n        template: 'index',\n        context: {\n            title: 'My home page'\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing a Cookie in Hapi.js\nDESCRIPTION: This snippet demonstrates how to clear a cookie named 'data' using the unstate() method on the response object in Hapi.js.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/zh_CN/cookies.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nreturn h.response('Bye').unstate('data');\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Parameters in Hapi.js Route\nDESCRIPTION: This example demonstrates how to make a path parameter optional by adding a question mark, and how to handle both cases in the route handler.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/ko_KR/routing.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/hello/{user?}',\n    handler: function (request, h) {\n\n        const user = request.params.user ?\n            encodeURIComponent(request.params.user) :\n            'stranger';\n\n        return `Hello ${user}!`;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies in Express with cookie-parser\nDESCRIPTION: Demonstrates how to set up cookie-parser middleware in Express and use it to set a secure, HTTP-only cookie.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nvar express = require('express');\nvar app = express();\nvar cookieParser = require('cookie-parser');\n\napp.use(cookieParser());\n\napp.get('/', function(req, res) {\n    \n    res.cookie('username', 'tom', { maxAge: null, secure: true, httpOnly: true });\n    res.send('Hello');\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Input Validation in Express with express-validator\nDESCRIPTION: Sets up Express with express-validator middleware to validate the length of a blog post submission, handling validation errors with appropriate responses.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nconst bodyParser = require('body-parser');\nconst expressValidator = require('express-validator');\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(expressValidator())\n\napp.post('/post', function (req, res) {\n\n  req.check('post', 'Post too long').isLength({ max: 140 });\n\n  let errors = req.validationErrors();\n  if (errors) {\n    res.status(400).send(errors);\n  } else {\n    res.send('Blog post added!') \n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding JSON Body Parsing in Express\nDESCRIPTION: Shows how to enable JSON body parsing in Express using the body-parser middleware.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\napp.use(bodyParser.json());\n```\n\n----------------------------------------\n\nTITLE: Setting Global Context for Template Rendering in Hapi.js\nDESCRIPTION: This example shows how to set global context that will be available to all templates. The context provides default values that can be overridden by local context when rendering specific views.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/views.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst context = {\n    title: 'My personal site'\n};\n\nserver.views({\n    engines: {\n        html: {\n            module: require('handlebars'),\n            compileMode: 'sync' // engine specific\n        }\n    },\n    context\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Middleware in Express\nDESCRIPTION: Example of creating custom middleware in Express that adds a date function to the request object.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nconst getDate = function (req, res, next) {\n\n    req.getDate = function() {\n\n        const date = new Date();\n        return date;\n    };\n\n    next();\n};\n```\n\n----------------------------------------\n\nTITLE: View Content for Use with Layout in Hapi.js\nDESCRIPTION: A simple view template meant to be used with a layout. When this template is rendered with a layout, its content will replace the {{{content}}} placeholder in the layout template.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/zh_CN/views.md#2025-04-09_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<div>Content</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Options in Express Middleware\nDESCRIPTION: Creates an Express middleware that accepts configuration options and adds a getDate function to the request object. The function returns a formatted date string including the name provided in the options.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (options) {\n    return function getDate(req, res, next) {\n\n        req.getDate = function() {\n\n            const date = 'Hello ' + options.name + ', the date is ' + new Date();\n            return date;\n        };\n\n        next()\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Options in Hapi.js\nDESCRIPTION: This example demonstrates how to add metadata to a route using the options object, which can be useful for documentation generation and API exploration.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/ko_KR/routing.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/hello/{user?}',\n    handler: function (request, h) {\n\n        const user = request.params.user ?\n            encodeURIComponent(request.params.user) :\n            'stranger';\n\n        return `Hello ${user}!`;\n    },\n    options: {\n        description: 'Say hello!',\n        notes: 'The user parameter defaults to \\'stranger\\' if unspecified',\n        tags: ['api', 'greeting']\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Options Middleware in Express\nDESCRIPTION: Demonstrates how to require and use a custom middleware with options in an Express application.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst getDate = require('./mw/getDate.js');\n\napp.use(getDate({ name: 'Tom' }));\n```\n\n----------------------------------------\n\nTITLE: Server Methods Caching in Hapi.js\nDESCRIPTION: Shows how to implement caching using Hapi.js server methods, which provides a more streamlined approach with automatic cache key generation and segment handling.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/caching.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst start = async () => {\n\n    const server = Hapi.server();\n\n    server.method('sum', add, {\n        cache: {\n            cache: 'my_cache',\n            expiresIn: 10 * 1000,\n            generateTimeout: 2000\n        }\n    });\n\n    server.route({\n        path: '/add/{a}/{b}',\n        method: 'GET',\n        handler: async function (request, h) {\n\n            const { a, b } = request.params;\n            return await server.methods.sum(a, b);\n        }\n    });\n\n    await server.start();\n\n};\n\nstart();\n```\n\n----------------------------------------\n\nTITLE: Serving a Single Static File in Express.js\nDESCRIPTION: This snippet demonstrates how to serve a single static file (an image) in Express.js using res.sendFile.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\napp.get('/image', function (req, res) {\n\n    res.sendFile('image.jpg', {root: './public'});\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Express Server\nDESCRIPTION: Code to create and start a basic Express.js server listening on port 3000.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nvar express = require('express');\nvar app = express();\n\napp.listen(3000, function () {\n  console.log('Server is running on port 3000');\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cache Client in Hapi.js\nDESCRIPTION: Example of setting up a Redis cache client using Catbox-Redis adapter with custom configuration options.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/caching.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst Hapi = require('@hapi/hapi');\nconst CatboxRedis = require('@hapi/catbox-redis');\n\nconst server = Hapi.server({\n    port: 8000,\n    cache: [\n        {\n            name: 'my_cache',\n            provider: {\n                constructor: CatboxRedis,\n                options: {\n                    partition : 'my_cached_data',\n                    host: 'redis-cluster.domain.com',\n                    port: 6379,\n                    database: 0,\n                    tls: {}\n                }\n            }\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Installing hapi\nDESCRIPTION: Command to install the hapi framework via npm package manager.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @hapi/hapi\n```\n\n----------------------------------------\n\nTITLE: Finding a User by Username in hapi.js Authentication Handler\nDESCRIPTION: A code snippet that demonstrates how to find a user from a database array by searching for their username. This pattern is used in the login handler to verify user credentials before authentication.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/auth.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst account = users.find(\n    (user) => user.username === username\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Input Validation in hapi with Joi\nDESCRIPTION: Sets up a POST route in hapi that uses Joi to validate the request payload, ensuring that the post field is a string with maximum length of 140 characters.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nconst Joi = require('joi')\n\nserver.route({\n    method: 'POST',\n    path: '/post',\n    handler: (request, h) => {\n\n        return 'Blog post added!';\n    },\n    options: {\n        validate: {\n            payload: Joi.object({\n                post: Joi.string().max(140)\n            })\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Registrando método de servidor com parâmetros separados em Hapi.js\nDESCRIPTION: Exemplo de como registrar um método de servidor chamado 'add' usando parâmetros separados. A função recebe dois números e retorna sua soma através do callback 'next'.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/pt_BR/servermethods.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst add = function (x, y, next) {\n    // note que a função 'next' é utilizada para retornar valores\n    next(null, x + y);\n};\n\nserver.method('add', add, {});\n```\n\n----------------------------------------\n\nTITLE: Usando a opção bind para alterar o contexto em métodos de servidor do Hapi.js\nDESCRIPTION: Demonstração de como usar a opção bind para alterar o contexto this dentro de um método de servidor, útil para acessar recursos externos como conexões de banco de dados.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/pt_BR/servermethods.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst lookup = function (id, next) {\n    // calls myDB.getOne\n    this.getOne({ id: id }, (err, value) => {\n        next(err, value);\n    });\n};\n\nserver.method('lookup', lookup, { bind: myDB });\n```\n\n----------------------------------------\n\nTITLE: Registrando método de servidor usando objeto de configuração em Hapi.js\nDESCRIPTION: Demonstração de como registrar um método de servidor usando um objeto com os parâmetros 'name', 'method' e 'options'. Esta abordagem permite uma configuração mais estruturada.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/pt_BR/servermethods.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst add = function (x, y, next) {\n    next(null, x + y);\n};\n\nserver.method({\n    name: 'add',\n    method: add,\n    options: {}\n});\n```\n\n----------------------------------------\n\nTITLE: Configurando Múltiplos Métodos HTTP para uma Rota no Hapi\nDESCRIPTION: Este exemplo mostra como configurar uma rota para responder a múltiplos métodos HTTP (PUT e POST) com a mesma resposta.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/pt_BR/routing.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: ['PUT', 'POST'],\n    path: '/',\n    handler: function (request, reply) {\n        reply('I did something!');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Registrando método de servidor com nome aninhado em Hapi.js\nDESCRIPTION: Exemplo de como registrar um método de servidor com um nome que contém ponto, criando assim uma estrutura aninhada de objetos que será acessível como server.methods.math.add.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/pt_BR/servermethods.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nserver.method('math.add', add);\n```\n\n----------------------------------------\n\nTITLE: Configurando cache para métodos de servidor em Hapi.js\nDESCRIPTION: Demonstração de como configurar opções de cache ao registrar um método de servidor, incluindo tempo de expiração e configurações para valores obsoletos.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/pt_BR/servermethods.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nserver.method('add', add, {\n    cache: {\n        expiresIn: 60000,\n        expiresAt: '30:22',\n        staleIn: 30000,\n        staleTimeout: 10000\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Server Method with name, method, options Parameters in hapi\nDESCRIPTION: Shows how to register a simple add function as a server method using the server.method(name, method, [options]) signature. This approach directly specifies each parameter individually.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/zh_CN/servermethods.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst add = function (x, y) {\n\n    return x + y;\n};\n\nserver.method('add', add, {});\n```\n\n----------------------------------------\n\nTITLE: Defining Status-Specific Response Schemas in Hapi.js\nDESCRIPTION: Example showing how to configure different validation schemas for different HTTP status codes (201 and 202) in a Hapi.js route configuration. Uses Joi schemas to validate response data based on the status code.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/validation.md#2025-04-09_snippet_9\n\nLANGUAGE: json5\nCODE:\n```\n{\n    response: {\n        status: {\n            201: dataSchema,\n            202: Joi.object({ original: dataSchema, updated:  dataSchema })\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Server Method in hapi\nDESCRIPTION: Demonstrates creating an asynchronous server method using async/await syntax. This allows the method to perform asynchronous operations and still return a proper result.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/zh_CN/servermethods.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst add = async function (x, y) {\n\n    const result = await someLongRunningFunction(x, y);\n    return result;\n};\n\nserver.method('add', add, {});\n```\n\n----------------------------------------\n\nTITLE: Response Validation with Sampling in Hapi.js\nDESCRIPTION: Example of output validation with sampling for performance optimization. The 'sample' parameter is set to 50, meaning only half of the responses will be validated against the book schema.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/validation.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst bookSchema = Joi.object({\n    title: Joi.string().required(),\n    author: Joi.string().required(),\n    isbn: Joi.string().length(10),\n    pageCount: Joi.number(),\n    datePublished: Joi.date().iso()\n});\n\nserver.route({\n    method: 'GET',\n    path: '/books',\n    handler: async function (request, h) {\n\n        return await getBooks();\n    },\n    options: {\n        response: {\n            sample: 50,\n            schema: Joi.array().items(bookSchema)\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Cookie Values from request.state\nDESCRIPTION: Shows how to retrieve a cookie's value from the request.state object. This example accesses the 'data' cookie that was previously set with a JSON object value.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/cookies.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = request.state.data;\n// console.log(value) will give you { firstVisit : false }\n```\n\n----------------------------------------\n\nTITLE: Configuring View Engines with Engine-Specific and Global Options in Hapi.js\nDESCRIPTION: Demonstrates how to configure a view engine in Hapi with both engine-specific and global settings. Shows how to set compileMode differently for a specific engine versus the global default.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/zh_CN/views.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nserver.views({\n    engines: {\n        html: {\n            module: require('handlebars'),\n            compileMode: 'sync' // 引擎特定配置\n        }\n    },\n    compileMode: 'async' // 全局配置\n});\n```\n\n----------------------------------------\n\nTITLE: Configurando Layouts em Hapi (JavaScript)\nDESCRIPTION: Este snippet mostra como habilitar layouts em Hapi e definir o caminho padrão para os arquivos de layout. A configuração é feita usando o método server.views().\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/pt_BR/views.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nserver.views({\n    // ...\n    layout: true,\n    layoutPath: Path.join(__dirname, 'views/layout')\n});\n```\n\n----------------------------------------\n\nTITLE: Using a View Helper in a Handlebars Template\nDESCRIPTION: This HTML snippet demonstrates how to use the fortune view helper within a Handlebars template. The helper is called without parameters and its return value is inserted into the template.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/views.md#2025-04-09_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<h1>Your fortune</h1>\n<p>{{fortune}}</p>\n```\n\n----------------------------------------\n\nTITLE: Implementing Output Validation with Joi in hapi.js\nDESCRIPTION: This snippet demonstrates how to set up output validation for a route in hapi.js using Joi. It defines a schema for book objects and applies it to the response of a GET route.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nconst bookSchema = Joi.object({\n    title: Joi.string().required(),\n    author: Joi.string().required(),\n    isbn: Joi.string().length(10),\n    pageCount: Joi.number(),\n    datePublished: Joi.date().iso()\n});\n\nserver.route({\n    method: 'GET',\n    path: '/books',\n    handler: async function (request, h) {\n\n        return await getBooks();\n    },\n    options: {\n        response: {\n            schema: Joi.array().items(bookSchema),\n            failAction: 'log'\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a View Helper Function for Random Fortunes in Hapi.js\nDESCRIPTION: Defines a view helper function that returns a random fortune message from an array. This module can be placed in the helpersPath directory and used in templates.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/zh_CN/views.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function () {\n\n    const fortunes = [\n        'Heisenberg may have slept here...',\n        'Wanna buy a duck?',\n        'Say no, then negotiate.',\n        'Time and tide wait for no man.',\n        'To teach is to learn.',\n        'Never ask the barber if you need a haircut.',\n        'You will forget that you ever knew me.',\n        'You will be run over by a beer truck.',\n        'Fortune favors the lucky.',\n        'Have a nice day!'\n    ];\n\n    const x = Math.floor(Math.random() * fortunes.length);\n    return fortunes[x];\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Twitter Authentication with Passport in Express\nDESCRIPTION: Sets up Twitter OAuth authentication in Express using the Passport middleware with TwitterStrategy, including serialization and route handling.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nvar passport = require('passport');\nvar TwitterStrategy = require('passport-twitter').Strategy\n\npassport.use(new TwitterStrategy({\n    consumerKey: TWITTER_CONSUMER_KEY,\n    consumerSecret: TWITTER_CONSUMER_SECRET,\n    callbackURL: '/auth/twitter/callback'\n},\n    function(token, tokenSecret, profile, cb) {\n        User.findOrCreate({ twitterId: profile.id }, function (err, user) {\n            return cb(err, user);\n        }\n    }\n));\n\npassport.seralizeUser(function(user, cb) {\n    cb(null, user);\n})\n\npassport.deserializeUser(function(user, cb) {\n    cb(null, obj);\n})\n\napp.get('/auth/twitter', passport.authenticate('twitter'));\napp.get('/auth/twitter/callback', passport.authenticate('twitter', { failureRedirect: '/login'}),\n    function(req, res) {\n\n        res.redirect('/');\n    });\n```\n\n----------------------------------------\n\nTITLE: Using h.view() Method to Render Templates in Hapi.js Routes\nDESCRIPTION: Shows how to render views in a route handler using the h.view() method from the response toolkit. Includes examples of rendering with and without context data.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/zh_CN/views.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/',\n    handler: function (request, h) {\n\n        return h.view('index');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting a Cookie Using Response Object in Hapi.js\nDESCRIPTION: This snippet shows an alternative way to set a cookie using the response object in Hapi.js, allowing for chaining methods.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/zh_CN/cookies.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nreturn h.response('Hello').state('data', { firstVisit: false });\n```\n\n----------------------------------------\n\nTITLE: Passing Context Data to a View in Hapi.js\nDESCRIPTION: Demonstrates how to pass context data to a view when rendering it with h.view(). The context object will be available in the template for rendering dynamic content.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/zh_CN/views.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nreturn h.view('index', { title: 'My home page' });\n```\n\n----------------------------------------\n\nTITLE: Creating a hapi Plugin as an External Module\nDESCRIPTION: This snippet demonstrates how to create a hapi plugin as an external module, using the package.json for metadata via the pkg property instead of explicitly setting name and version.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/plugins.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nexports.plugin = {\n    pkg: require('./package.json'),\n    register: async function (server, options) {\n\n        // Create a route for example\n\n        server.route({\n            method: 'GET',\n            path: '/test',\n            handler: function (request, h) {\n\n                return 'hello, world';\n            }\n        });\n\n        // etc...\n        await someAsyncMethods();\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: HTML Layout Template Structure\nDESCRIPTION: Basic HTML layout template showing how to define a content area using {{{content}}} placeholder. This template serves as the base structure for views.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/views.md#2025-04-09_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <body>\n    {{{content}}}\n </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Registering a hapi Plugin with Options\nDESCRIPTION: This snippet shows how to register a plugin with the server, passing custom options to the plugin. The options object is passed directly to the plugin's register method.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/plugins.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst start = async function () {\n\n    await server.register({\n        plugin: require('myplugin'),\n        options: {\n            name: 'Bob'\n        }\n    });\n};\n```\n\n----------------------------------------\n\nTITLE: Estrutura Básica de um Arquivo de Layout (HTML)\nDESCRIPTION: Este snippet demonstra a estrutura básica de um arquivo de layout em HTML. O conteúdo da view será inserido no local do {{{content}}}.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/pt_BR/views.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <body>\n    {{{content}}}\n </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Cookie Value in Hapi.js\nDESCRIPTION: This snippet shows how to access the value of a cookie named 'data' from the request.state object in a Hapi.js route handler.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/zh_CN/cookies.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = request.state.data;\n// console.log(value) 将会得到 { firstVisit : false }\n```\n\n----------------------------------------\n\nTITLE: Exemplo de Conteúdo de View (HTML)\nDESCRIPTION: Este snippet mostra um exemplo simples de conteúdo de uma view que será inserido no layout.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/pt_BR/views.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div>Content</div>\n```\n\n----------------------------------------\n\nTITLE: Escaping User Input in Hapi.js Responses\nDESCRIPTION: This example demonstrates how to use Hoek.escapeHtml() to safely escape user input when returning it in a response.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/routing.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nreturn `Hello ${Hoek.escapeHtml(request.params.user)}!`\n```\n\n----------------------------------------\n\nTITLE: Definindo Layout Padrão Global em Hapi (JavaScript)\nDESCRIPTION: Este snippet demonstra como definir um layout padrão diferente globalmente para todas as views usando o método server.views().\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/pt_BR/views.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nserver.views({\n    // ...\n    layout: 'another_default'\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple HTTP Methods in Hapi.js Route\nDESCRIPTION: This example demonstrates how to define a route that responds to multiple HTTP methods (PUT and POST) with the same handler function.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/ko_KR/routing.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: ['PUT', 'POST'],\n    path: '/',\n    handler: function (request, h) {\n\n        return 'I did something!';\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Default Layout in Vision\nDESCRIPTION: Configuration to set a custom default layout globally for all views.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/views.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nserver.views({\n    // ...\n    layout: 'another_default'\n});\n```\n\n----------------------------------------\n\nTITLE: Validating Query Parameters in Hapi.js Routes\nDESCRIPTION: Example of query parameter validation using Joi. The code ensures that the 'limit' parameter is an integer between 1 and 100, defaulting to 10 if not provided.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/validation.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/posts',\n    handler: function (request, h) {\n\n        return posts.slice(0, request.query.limit);\n    },\n    options: {\n        validate: {\n            query: Joi.object({\n                limit: Joi.number().integer().min(1).max(100).default(10)\n            })\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Layout Per View\nDESCRIPTION: Example of how to specify a different layout for a specific view render operation.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/views.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nreturn h.view('myview', null, { layout: 'another_layout' });\n```\n\n----------------------------------------\n\nTITLE: Setting ETag Header in Hapi.js Response\nDESCRIPTION: Shows how to set an ETag header on a response for cache validation.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/caching.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nreturn h.response(result).etag('xxxxxxxxx');\n```\n\n----------------------------------------\n\nTITLE: Setting Global Context for All Views in Hapi.js\nDESCRIPTION: Shows how to set a global context object that will be available in all templates. This is useful for data that needs to be accessible across multiple views.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/zh_CN/views.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst context = {\n    title: 'My personal site'\n};\n\nserver.views({\n    engines: {\n        html: {\n            module: require('handlebars'),\n            compileMode: 'sync' // engine specific\n        }\n    },\n    context\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Static File Server in hapi.js\nDESCRIPTION: This snippet demonstrates how to set up a static file server in hapi.js using the inert plugin and the directory handler.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nconst server = new Hapi.Server({\n    port: 3000,\n    routes: {\n        files: {\n            relativeTo: Path.join(__dirname, 'public')\n        }\n    }\n});\n\nawait server.register(require('@hapi/inert'));\n\nserver.route({\n    method: 'GET',\n    path: '/{param*}',\n    handler: {\n        directory: {\n            path: '.'\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: View Handler with Context Configuration\nDESCRIPTION: Example of passing context data when using the view handler approach.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/views.md#2025-04-09_snippet_15\n\nLANGUAGE: json5\nCODE:\n```\nhandler: {\n    view: {\n        template: 'index',\n        context: {\n            title: 'My home page'\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Especificando Layout por View em Hapi (JavaScript)\nDESCRIPTION: Este snippet mostra como especificar um layout diferente para uma view específica ao renderizá-la usando o método reply.view().\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/pt_BR/views.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nreply.view('myview', null, { layout: 'another_layout' });\n```\n\n----------------------------------------\n\nTITLE: Using Path Parameters in Hapi.js Routes\nDESCRIPTION: This snippet shows how to define a route with a named path parameter and access it in the handler function.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/routing.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/hello/{user}',\n    handler: function (request, h) {\n\n        return `Hello ${request.params.user}!`;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Starting a hapi.js Server in the Main Entry Point\nDESCRIPTION: This snippet shows how to start the hapi.js server in the main entry point of the application by importing and calling the start function from the server module.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/testing.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n`use strict`;\n\nconst { start } = require('lib/server');\n\nstart();\n```\n\n----------------------------------------\n\nTITLE: Using Path Parameters in Hapi.js Routes\nDESCRIPTION: This snippet shows how to define a route with a named path parameter and access it in the handler function.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/routing.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/hello/{user}',\n    handler: function (request, h) {\n\n        return `Hello ${request.params.user}!`;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Exemplo de Erro de Validação com Parâmetro Muito Curto\nDESCRIPTION: Resposta JSON de erro quando o parâmetro de rota não atende ao requisito mínimo de comprimento.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/pt_BR/validation.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"Bad Request\",\n    \"message\": \"the length of name must be at least 3 characters long\",\n    \"statusCode\": 400,\n    \"validation\": {\n        \"keys\": [\n            \"name\"\n        ],\n        \"source\": \"params\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Cookie with Custom Encoding in Hapi.js\nDESCRIPTION: This snippet demonstrates how to set a cookie with custom encoding options, overriding the default server configuration.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/zh_CN/cookies.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nreturn h.response('Hello').state('data', 'test', { encoding: 'none' });\n```\n\n----------------------------------------\n\nTITLE: Exemplo de Erro de Validação com Parâmetro Muito Longo\nDESCRIPTION: Resposta JSON de erro quando o parâmetro de rota excede o comprimento máximo permitido.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/pt_BR/validation.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"Bad Request\",\n    \"message\": \"the length of name must be less than or equal to 10 characters long\",\n    \"statusCode\": 400,\n    \"validation\": {\n        \"keys\": [\n            \"name\"\n        ],\n        \"source\": \"params\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Route with Parameters in hapi\nDESCRIPTION: Example of defining a route with named parameters in hapi and accessing them in the handler.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/hello/{name}',\n    handler: function (request, h) {\n\n        const name = request.params.name;\n        return 'Hello ' + name\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Exemplo de Erro com Parâmetro de Query Não Permitido\nDESCRIPTION: Resposta JSON de erro quando um parâmetro de query não definido é fornecido na solicitação.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/pt_BR/validation.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"Bad Request\",\n    \"message\": \"the key offset is not allowed\",\n    \"statusCode\": 400,\n    \"validation\": {\n        \"keys\": [\n            \"offset\"\n        ],\n        \"source\": \"query\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a hapi Plugin with Route Prefix Option\nDESCRIPTION: This example shows how to use the routes.prefix option when registering a plugin. This option prepends a string to all routes created by the plugin, allowing for route namespacing.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/plugins.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst start = async function () {\n\n    const server = Hapi.server();\n\n    await server.register(require('myplugin'), {\n        routes: {\n            prefix: '/plugins'\n        }\n    });\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm\nDESCRIPTION: Command to install project dependencies after cloning the repository.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/README.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Development Server\nDESCRIPTION: Command to start the development server with hot reloading, allowing immediate preview of changes.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/README.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Validating Headers in Hapi.js Routes\nDESCRIPTION: Example of header validation using Joi. The code validates the 'cookie' header ensuring it exists and is a string, while allowing other unknown headers with the allowUnknown option.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/validation.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path:'/hello/{name}',\n    handler: (request, h) => {\n\n       return  `Hello ${request.params.name}!`;\n    },\n    options: {\n        validate: {\n            headers: Joi.object({\n                cookie: Joi.string().required()\n            }),\n            options: {\n                allowUnknown: true\n            }\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image\nDESCRIPTION: Series of commands for building a Docker image of the hapi.dev portal. This process installs dependencies, generates static content, and creates the Docker image.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/README.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run generate\nnpm run docker-build\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Parameters in Hapi.js\nDESCRIPTION: This snippet shows how to access query parameters in a Hapi.js route handler using request.query.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/routing.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/',\n    handler: function (request, h) {\n\n        return `Hello ${request.query.name}!`;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Testing hapi.dev Website Locally\nDESCRIPTION: Commands for building and testing the hapi.dev website locally before deployment. Includes generating the static distribution folder and running the static server to preview changes.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/DEPLOY.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run generate\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run static\n```\n\n----------------------------------------\n\nTITLE: Removing a Cookie in Hapi.js\nDESCRIPTION: This code demonstrates how to remove a cookie using the unstate() method on the response object in Hapi.js.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/pt_BR/cookies.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nreply('Hello').unstate('data');\n```\n\n----------------------------------------\n\nTITLE: Installing Express\nDESCRIPTION: Command to install Express.js via npm package manager.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install express\n```\n\n----------------------------------------\n\nTITLE: Redirect Response in Express\nDESCRIPTION: Example of redirecting to another route in Express using the response redirect method.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_9\n\nLANGUAGE: js\nCODE:\n```\napp.get('/home', function (req, res) {\n\n    res.redirect('/');\n});\n```\n\n----------------------------------------\n\nTITLE: Loading a Plugin in hapi\nDESCRIPTION: Example of registering a custom plugin in a hapi server.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nawait server.register({\n    plugin: getDate\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Cache Key Generation in hapi Server Methods\nDESCRIPTION: Shows how to provide a custom function for generating cache keys when server method parameters are complex objects. The generateKey function creates a unique string key from the input array.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/zh_CN/servermethods.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst sum = function (array) {\n\n    let total = 0;\n\n    array.forEach((item) => {\n\n        total += item;\n    });\n\n    return total;\n};\n\nserver.method('sum', sum, {\n    generateKey: (array) => array.join(',')\n});\n```\n\n----------------------------------------\n\nTITLE: Using h.file() Method in Hapi.js\nDESCRIPTION: Shows how to use the h.file() method to serve static files with absolute paths after registering the inert plugin.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/servingfiles.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst start = async () => {\n\n    const server = Hapi.server();\n\n    await server.register(require('@hapi/inert'));\n\n    server.route({\n        method: 'GET',\n        path: '/picture.jpg',\n        handler: function (request, h) {\n\n            return h.file('/path/to/picture.jpg');\n        }\n    });\n\n    await server.start();\n\n    console.log('Server running at:', server.info.uri);\n};\n\nstart();\n```\n\n----------------------------------------\n\nTITLE: Setting a Cookie in Hapi.js\nDESCRIPTION: This example demonstrates how to set a cookie using the reply interface in a request handler. It sets a cookie named 'data' with a JSON value.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/pt_BR/cookies.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nreply('Hello').state('data', { firstVisit: false });\n```\n\n----------------------------------------\n\nTITLE: Getting Cookie Values in Express\nDESCRIPTION: Shows how to retrieve cookie values in Express using the cookie-parser middleware and the req.cookies object.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nvar express = require('express');\nvar app = express();\nvar cookieParser = require('cookie-parser);\n\napp.use(cookieParser());\n\napp.get('/', (req, res) => {\n    \n    res.cookie('username', 'tom', { maxAge: null, secure: true, httpOnly: true })\n    res.send(req.cookies.username);\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Single and Multiple hapi Plugins\nDESCRIPTION: This example demonstrates different ways to load plugins, including loading a single plugin and loading multiple plugins in an array. It shows the basic pattern for plugin registration.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/plugins.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst start = async function () {\n\n    const server = Hapi.server();\n\n    // load one plugin\n\n    await server.register(require('myplugin'));\n\n    // load multiple plugins\n\n    await server.register([require('myplugin'), require('yourplugin')]);\n};\n```\n\n----------------------------------------\n\nTITLE: Parsing Request Body in Express with body-parser\nDESCRIPTION: Sets up body parsing middleware in Express to handle URL-encoded form data, then retrieves a name from the request body to generate a response.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nvar bodyParser = require('body-parser');\n\napp.use(bodyParser.urlencoded({extend: true}));\n\napp.post('/hello', function (req, res) {  \n\n  var name = req.body.name\n  res.send('Hello ' + name);  \n});\n```\n\n----------------------------------------\n\nTITLE: Validating Path Parameters in Hapi.js Routes\nDESCRIPTION: Example of path parameter validation using Joi. The code validates that the 'name' parameter is a string between 3 and 10 characters in length.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/validation.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nserver.route({\n    method: 'GET',\n    path: '/hello/{name}',\n    handler: function (request, h) {\n\n        return `Hello ${request.params.name}!`;\n    },\n    options: {\n        validate: {\n            params: Joi.object({\n                name: Joi.string().min(3).max(10)\n            })\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a hapi Server\nDESCRIPTION: Code to create and start a basic hapi server listening on port 3000 with localhost as the host.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/expresstohapi.md#2025-04-09_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst Hapi = require('@hapi/hapi');\n\nconst init = async () => {\n\n    const server = Hapi.server({\n        port: 3000,\n        host: 'localhost'\n    });\n\n    await server.start();\n    console.log('Server running on port 3000');\n};\n\ninit();\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Server Method Structure in hapi\nDESCRIPTION: Shows how to create a nested method structure using dot notation in the method name. This registers the method under a namespace rather than at the root level.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/zh_CN/servermethods.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nserver.method('math.add', add);\n```\n\n----------------------------------------\n\nTITLE: Event Listener for Server Logs in Hapi.js\nDESCRIPTION: Implementation of an event listener for server log events, specifically handling error tags and displaying them in the console.\nSOURCE: https://github.com/hapijs/hapi.dev/blob/master/static/lib/tutorials/en_US/logging.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nserver.events.on('log', (event, tags) => {\n\n    if (tags.error) {\n        console.log(`Server error: ${event.error ? event.error.message : 'unknown'}`);\n    }\n});\n```"
  }
]