[
  {
    "owner": "kitops-ml",
    "repo": "kitops.git",
    "content": "TITLE: Unpacking ModelKit Components with KitOps CLI\nDESCRIPTION: This command extracts all or selected components of a modelkit to the local filesystem. It supports filtering to unpack specific components and can retrieve modelkits from local storage or remote registries.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\nkit unpack [flags] [registry/]repository[:tag|@digest]\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Unpack all components of a modelkit to the current directory\nkit unpack myrepo/my-model:latest -d /path/to/unpacked\n\n# Unpack only the model and datasets of a modelkit to a specified directory\nkit unpack myrepo/my-model:latest --filter=model,datasets -d /path/to/unpacked\n\n# Unpack only the dataset named \"my-dataset\" to the current directory\nkit unpack myrepo/my-model:latest --filter=datasets:my-dataset\n\n# Unpack only the docs layer with path \"./README.md\" to the current directory\nkit unpack myrepo/my-model:latest --filter=docs:./README.md\n\n# Unpack the model and the dataset named \"validation\"\nkit unpack myrepo/my-model:latest --filter=model --filter=datasets:validation\n\n# Unpack a modelkit from a remote registry with overwrite enabled\nkit unpack registry.example.com/myrepo/my-model:latest -o -d /path/to/unpacked\n```\n\n----------------------------------------\n\nTITLE: Executing Kit Push Command\nDESCRIPTION: Demonstrates the use of the 'kit push' command for uploading modelkits to a specified registry. It includes examples of pushing modelkits tagged locally and by digest.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\nkit push [flags] SOURCE [DESTINATION]\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Push the ModelKit tagged 'latest' to a remote registry\nkit push registry.example.com/my-org/my-model:latest\n\n# Push a ModelKit to a remote registry by digest\nkit push registry.example.com/my-org/my-model@sha256:44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a\n\n# Push local modelkit 'mymodel:1.0.0' to a remote registry\nkit push mymodel:1.0.0 registry.example.com/my-org/my-model:latest\n```\n\n----------------------------------------\n\nTITLE: Example Kitfile YAML Manifest\nDESCRIPTION: Complete example showing the structure of a Kitfile manifest including all major sections: manifest version, package metadata, code references, dataset information, and model specifications. Demonstrates proper formatting and required fields for each section.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/pkg/artifact/kitfile.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmanifestVersion: 1.0\npackage:\n  name: AIProjectName\n  version: 1.2.3\n  description: >-\n    A brief description of the AI/ML project.\n  authors: [Author Name, Contributor Name]\ncode:\n  - path: src/\n    description: Source code for the AI models.\n    license: Apache-2.0\ndatasets:\n  - name: DatasetName\n    path: data/dataset.csv\n    description: Description of the dataset.\n    license: CC-BY-4.0\nmodel:\n    name: ModelName\n    path: models/model.h5\n    framework: TensorFlow\n    version: 1.0\n    description: Model description.\n    license: Apache-2.0\n```\n\n----------------------------------------\n\nTITLE: Pushing ModelKit to Remote Registry\nDESCRIPTION: Uploads the locally packed ModelKit to a remote container registry.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/get-started.md#2025-04-16_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nkit push jozu.ml/brad/quick-start:latest\n```\n\n----------------------------------------\n\nTITLE: Packing ModelKit for Registry\nDESCRIPTION: Creates a new ModelKit from local files and saves it to the local registry with specified tags.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/get-started.md#2025-04-16_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nkit pack . -t jozu.ml/brad/quick-start:latest\n```\n\n----------------------------------------\n\nTITLE: Installing Kit CLI via Homebrew on MacOS and Linux\nDESCRIPTION: These commands use Homebrew to install the Kit CLI on MacOS and Linux systems. They add the KitOps tap and then install the CLI.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/installation.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbrew tap kitops-ml/kitops\nbrew install kitops\n```\n\n----------------------------------------\n\nTITLE: Tagging a ModelKit as Champion for Production Deployment\nDESCRIPTION: Shows how to mark a ModelKit as the production version by tagging it as 'champion'. This is used when promoting a challenger model to production status after successful testing.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/next-steps.md#2025-04-16_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nkit tag mymodel:challenger mymodel:champion\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating Tags for ModelKits in KitOps CLI\nDESCRIPTION: This command allows users to create a new tag for an existing modelkit or update an existing tag. It's used for organizing and versioning modelkits within a repository.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\nkit tag SOURCE_MODELKIT[:TAG] TARGET_MODELKIT[:TAG] [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\nkit tag myregistry.com/myrepo/mykit:latest myregistry.com/myrepo/mykit:v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Complete Kitfile Configuration Example\nDESCRIPTION: Full example of a Kitfile including package metadata, model configuration, documentation, datasets, and code sections.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/next-steps.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nmanifestVersion: 1.0\\n\\npackage:\\n  authors:\\n    - Jozu\\n  description: Small language model based on Mistral-7B fine tuned for answering film photography questions.\\n  license: Apache-2.0\\n  name: FilmSLM\\n\\nmodel:\\n  name: FilmSLM\\n  description: Film photography Q&A model using Mistral-7B\\n  framework: Mistral-7B\\n  license: Apache-2.0\\n  path: ./models/film_slm:champion\\n  version: 1.2.6\\n\\ndocs:\\n  - path: ./README.md\\n    description: Readme file for this ModelKit\\n  - path: ./USAGE.md\\n    description: Information on how to use this model for inference\\n\\ndatasets:\\n  - description: Forum postings from sites like rangefinderforum, PhotographyTalk, and r/AnalogCommunity\\n    name: training data\\n    path: ./data/forum-to-2023-train.csv\\n  - description: validation data\\n    name: validation data\\n    path: ./data/test.csv\\n\\ncode:\\n  - description: Jupyter notebook with model training code in Python\\n    path: ./notebooks\n```\n\n----------------------------------------\n\nTITLE: Unpacking an LLM ModelKit from Jozu Hub\nDESCRIPTION: Command to unpack the Phi3 Mini LLM ModelKit from Jozu Hub for local development.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/dev-mode.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nkit unpack jozu.ml/jozu/phi3:3.8b-mini-instruct-4k-q4_K_M\n```\n\n----------------------------------------\n\nTITLE: Complete Kitfile Example in YAML\nDESCRIPTION: A comprehensive example of a Kitfile that includes all main sections: package metadata, code path, model specification, and multiple dataset references. This shows how to define a complete ModelKit for a flight satisfaction analysis project.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/kitfile/kf-overview.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmanifestVersion: v1.0.0\n\npackage:\n  authors:\n  - Jozu\n  description: Updated model to analyze flight trait and passenger satisfaction data\n  license: Apache-2.0\n  name: FlightSatML\n\ncode:\n- description: Jupyter notebook with model training code in Python\n  path: ./notebooks\n\nmodel:\n  description: Flight satisfaction and trait analysis model using Scikit-learn\n  framework: Scikit-learn\n  license: Apache-2.0\n  name: joblib Model\n  path: ./models/scikit_class_model_v2.joblib\n  version: 1.0.0\n\ndatasets:\n- description: Flight traits and traveller satisfaction training data (tabular)\n  name: training data\n  path: ./data/train.csv\n- description: validation data (tabular)\n  name: validation data\n  path: ./data/test.csv\n```\n\n----------------------------------------\n\nTITLE: Complete Kitfile Creation and Push Script in Python\nDESCRIPTION: A full Python script that creates a Kitfile, populates it with metadata, and pushes it to Jozu Hub using the ModelKitManager.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/pykitops/how-to-guides.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom kitops.modelkit.kitfile import Kitfile\nfrom kitops.modelkit.manager import ModelKitManager\n\nif __name__ == \"__main__\":\n    # Create the Kitfile\n    kitfile = Kitfile()\n    kitfile.manifestVersion = \"1.0\"\n    kitfile.package = {\n        \"name\": \"sample-kitfile\",\n        \"version\": \"1.0\",\n        \"description\": \"Sample kitfile for PyKitOps demonstration\"\n    }\n    \n    kitfile.model = {\n        \"name\": \"sample-model\",\n        \"path\": \"model/model.pkl\",\n        \"license\": \"Apache 2.0\",\n        \"version\": \"1.0\",\n        \"description\": \"Sample Model\"\n    }\n    \n    kitfile.code = [\n        {\n            \"path\": \"demo.py\",\n            \"description\": \"Sample model to demonstrate PyKitOps SDK\",\n            \"license\": \"Apache 2.0\"\n        },\n        {\n            \"path\": \"requirements.txt\",\n            \"description\": \"Python dependencies\"\n        }\n    ]\n    \n    kitfile.datasets = [\n        {\n            \"name\": \"dataset\",\n            \"path\": \"data/sample.csv\",\n            \"description\": \"full dataset\",\n            \"license\": \"Apache 2.0\"\n        }\n    ]\n    \n    kitfile.docs = [\n        {\"path\": \"docs/README.md\"},\n        {\"path\": \"docs/LICENSE\"}\n    ]\n    \n    # Push to Jozu Hub\n    modelkit_tag = \"jozu.ml/yourname/reponame:latest\"\n    manager = ModelKitManager(\n        working_directory=\".\",\n        modelkit_tag=modelkit_tag\n    )\n    manager.kitfile = kitfile\n    manager.pack_and_push_modelkit(save_kitfile=True)\n```\n\n----------------------------------------\n\nTITLE: Kitfile YAML Structure Example\nDESCRIPTION: Shows the structure of a Kitfile in YAML format, displaying metadata about the package, model, code, and datasets. This example demonstrates how ModelKit organizes and describes its components.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/next-steps.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nmanifestVersion: v1.0.0\npackage:\n  name: Finetuning_SLM\n  description: This Kitfile contains all the necessary files required for finetuning SLM.\n  license: Apache-2.0\n  authors: [Rajat]\nmodel:\n  name: keras Model\n  path: ./model_adapter\n  framework: Scikit-learn\n  version: 1.0.0\n  description: Flight satisfaction and trait analysis model using Scikit-learn\n  license: Apache-2.0\ncode:\n  - path: ./SLM_Finetuning.ipynb\n    description: Jupyter notebook with model training code in Python\ndatasets:\n  - name: training data\n    path: ./slm_tuning_dataset.csv\n    description: UCF Video Dataset\n```\n\n----------------------------------------\n\nTITLE: Deploying a ModelKit Using KitOps Init Container in Kubernetes\nDESCRIPTION: Example Kubernetes Pod configuration that demonstrates how to use the KitOps init container to download a ModelKit with signature verification and make it available to the main container through a shared volume.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/build/dockerfiles/init/README.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-modelkit-pod\nspec:\n  initContainers:\n  - name: kitops-init\n    image: ghcr.io/kitops-ml/kitops-init:latest\n    env:\n      - name: MODELKIT_REF\n        value: \"ghcr.io/kitops-ml/my-modelkit:latest\"\n      - name: UNPACK_PATH\n        value: /tmp/my-modelkit\n      - name: COSIGN_CERT_IDENTITY\n        value: kitops@jozu.com\n      - name: COSIGN_CERT_OIDC_ISSUER\n        value: https://github.com/login/oauth\n    volumeMounts:\n      - name: modelkit-storage\n        mountPath: /tmp/my-modelkit\n  containers:\n  - name: main-container\n    image: alpine:latest\n    volumeMounts:\n      - name: modelkit-storage\n        mountPath: /my-modelkit\n    command: [\"tail\"]\n    args: [\"-f\", \"/dev/null\"]\n  volumes:\n  - name: modelkit-storage\n    emptyDir: {}\n\n```\n\n----------------------------------------\n\nTITLE: Populating Kitfile with Metadata in Python\nDESCRIPTION: Demonstrates how to create a new Kitfile and populate it with various metadata including package information, model details, code files, datasets, and documentation.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/pykitops/how-to-guides.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom kitops.modelkit.kitfile import Kitfile\n\n# Create new Kitfile\nkitfile = Kitfile()\n\n# Set basic metadata\nkitfile.manifestVersion = \"1.0\"\nkitfile.package = {\n    \"name\": \"sample-kitfile\",\n    \"version\": \"1.0\",\n    \"description\": \"Sample kitfile for PyKitOps demonstration\"\n}\n\n# Configure model information\nkitfile.model = {\n    \"name\": \"sample-model\",\n    \"path\": \"model/model.pkl\",\n    \"license\": \"Apache 2.0\",\n    \"version\": \"1.0\",\n    \"description\": \"Sample Model\"\n}\n\n# Add code files\nkitfile.code = [\n    {\n        \"path\": \"demo.py\",\n        \"description\": \"Sample model to demonstrate PyKitOps SDK\",\n        \"license\": \"Apache 2.0\"\n    },\n    {\n        \"path\": \"requirements.txt\",\n        \"description\": \"Python dependencies\"\n    }\n]\n\n# Add datasets\nkitfile.datasets = [\n    {\n        \"name\": \"dataset\",\n        \"path\": \"data/sample.csv\",\n        \"description\": \"full dataset\",\n        \"license\": \"Apache 2.0\"\n    }\n]\n\n# Add documentation\nkitfile.docs = [\n    {\"path\": \"docs/README.md\"},\n    {\"path\": \"docs/LICENSE\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Registry\nDESCRIPTION: Logs into an OCI v1.1-compatible container registry using the Kit CLI login command.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/get-started.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nkit login jozu.ml\n```\n\n----------------------------------------\n\nTITLE: Examples of kit login command usage\nDESCRIPTION: Sample command examples showing how to authenticate with different registries using username/password or token authentication.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\n# Login to ghcr.io\nkit login ghcr.io -u github_user -p personal_token\n\n# Login to docker.io with password from stdin\nkit login docker.io --password-stdin -u docker_user\n```\n\n----------------------------------------\n\nTITLE: Using the kit login command\nDESCRIPTION: Basic usage syntax for the 'kit login' command which authenticates with OCI-compatible registries and saves credentials for future operations.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\nkit login [flags] [REGISTRY]\n```\n\n----------------------------------------\n\nTITLE: Packaging MLFlow Artifacts as a ModelKit\nDESCRIPTION: Python code that uses ModelKitManager to pack and push MLFlow artifacts as a ModelKit. It demonstrates authenticating with the registry, initializing a Kitfile, and pushing the ModelKit to the registry.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/pykitops/mlflow.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Add the KitOps ModelKitManager\nfrom kitops.modelkit.manager import ModelKitManager\nfrom kitops.modelkit.user import UserCredentials\nfrom kitops.cli import kit\n\n# A password can be read from Environment Variables or .env files: JOZU_PASSWORD=<secret password> \n# Add in your own username from the registry that you are accessing, e.g. username=bmicklea\ncreds = UserCredentials(username=username, registry=\"jozu.ml\")\n\n# Initialize the ModelKitManager with:\n# - the working directory (\"artifact_location\")\n# - reference to the creds variable\n# - a tag name e.g. modelkit_tag=latest\nmanager = ModelKitManager(working_directory=artifact_location, user_credentials=creds, modelkit_tag=modelkit_tag)\n\n# Log into the registry where the ModelKit will be pushed and stored\nmanager.login()\n\n# Create a new Kitfile (your ModelKit's \"recipe\") based on the contents of the working directory\nkit.init(directory=artifact_location, name=name, description=\"my cool project\", author=username)\n\n# Pack the ModelKit using the Kitfile recipe, and push it to the registry\nmanager.pack_and_push_modelkit(with_login_and_logout=False)\n```\n\n----------------------------------------\n\nTITLE: Tagging Model as Challenger\nDESCRIPTION: Commands to retag a tuned model as challenger and push it to the registry, signaling it's ready for deployment review.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/use-cases.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkit tag registry.gitlab.com/chatbot/legalchat:tuned registry.gitlab.com/chatbot/legalchat:challenger\n\nkit push registry.gitlab.com/chatbot/legalchat:challenger\n```\n\n----------------------------------------\n\nTITLE: Examples of kit info command usage\nDESCRIPTION: Sample command examples showing how to use 'kit info' with local modelkits, by digest, or with remote registries.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n# See configuration for a local modelkit:\nkit info mymodel:mytag\n\n# See configuration for a local modelkit by digest:\nkit info mymodel@sha256:44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a\n\n# See configuration for a remote modelkit:\nkit info --remote registry.example.com/my-model:1.0.0\n```\n\n----------------------------------------\n\nTITLE: Kit Dev Start Examples\nDESCRIPTION: Examples showing how to start the development server either in the current directory or with a specific model and port.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# Serve the model located in the current directory\nkit dev start\n\n# Serve the modelkit in ./my-model on port 8080\nkit dev start ./my-model --port 8080\n```\n\n----------------------------------------\n\nTITLE: Importing a Hugging Face Model with kit import Command\nDESCRIPTION: Command to import a Hugging Face model repository into KitOps as a ModelKit. This specific example imports the SmolLM-135M-Instruct model from HuggingFaceTB.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/hf-import.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkit import https://huggingface.co/HuggingFaceTB/SmolLM-135M-Instruct\n```\n\n----------------------------------------\n\nTITLE: Using Kit Dev Commands\nDESCRIPTION: Example of how to use the kit dev command to run models locally.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkit dev start\n```\n\n----------------------------------------\n\nTITLE: ModelKit Manifest JSON Structure Example\nDESCRIPTION: Shows the detailed manifest of a ModelKit in JSON format, displaying technical information about its configuration and layers. Each layer represents a different component with its media type, digest, and size in bytes.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/next-steps.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemaVersion\": 2,\n  \"config\": {\n    \"mediaType\": \"application/vnd.kitops.modelkit.config.v1+json\",\n    \"digest\": \"sha256:58444ef30d1cc7ee0fd2a24697e26252c38bf4317bfc791cd30c5af0d6f91f8f\",\n    \"size\": 619\n  },\n  \"layers\": [\n    {\n      \"mediaType\": \"application/vnd.kitops.modelkit.code.v1.tar+gzip\",\n      \"digest\": \"sha256:144ad8a89c3946ab794455450840f1b401511cdd8befc95884826376ef56d861\",\n      \"size\": 12657\n    },\n    {\n      \"mediaType\": \"application/vnd.kitops.modelkit.dataset.v1.tar+gzip\",\n      \"digest\": \"sha256:7d0f8d60895bba5c56e032f509c92553cfba1b014eee58f01e46d7af923099e8\",\n      \"size\": 13787789\n    },\n    {\n      \"mediaType\": \"application/vnd.kitops.modelkit.model.v1.tar+gzip\",\n      \"digest\": \"sha256:25646107e93d62ccd55b2cf14dfd55f7bbf426e5492a42d3d7f1bfd2cde30035\",\n      \"size\": 122\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Existing Kitfile in Python\nDESCRIPTION: Demonstrates how to create a Kitfile object from an existing ModelKit's Kitfile and print its YAML representation.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/pykitops/how-to-guides.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom kitops.modelkit.kitfile import Kitfile\n\nmy_kitfile = Kitfile(path='/path/to/Kitfile')\nprint(my_kitfile.to_yaml())\n\n# The output should match the contents of the Kitfile\n# located at: /path/to/Kitfile\n```\n\n----------------------------------------\n\nTITLE: Kit Import Examples\nDESCRIPTION: Examples showing different ways to import repositories from HuggingFace with various options.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n# Download repository myorg/myrepo and package it, using the default tag (myorg/myrepo:latest)\nkit import myorg/myrepo\n\n# Download repository using a different version (tag) than the default and package it\nkit import myorg/myrepo --ref v1.0.0\n\n# Download repository and tag it 'myrepository:mytag'\nkit import myorg/myrepo --tag myrepository:mytag\n\n# Download repository and pack it using an existing Kitfile\nkit import myorg/myrepo --file ./path/to/Kitfile\n```\n\n----------------------------------------\n\nTITLE: Examples of kit inspect command usage\nDESCRIPTION: Sample command examples showing how to use 'kit inspect' with local modelkits, by digest, or with remote registries.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\n# Inspect a local modelkit:\nkit inspect mymodel:mytag\n\n# Inspect a local modelkit by digest:\nkit inspect mymodel@sha256:44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a\n\n# Inspect a remote modelkit:\nkit inspect --remote registry.example.com/my-model:1.0.0\n```\n\n----------------------------------------\n\nTITLE: Examples of kit list command usage\nDESCRIPTION: Sample command examples showing how to list modelkits from local storage or from remote repositories.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\n# List local modelkits\nkit list\n\n# List modelkits from a remote repository\nkit list registry.example.com/my-namespace/my-model\n```\n\n----------------------------------------\n\nTITLE: Detailed ModelKit Inspection with kit inspect Command\nDESCRIPTION: Uses the kit inspect command to get more detailed information about a ModelKit, including size, file format, and SHA digest of contents. This provides a complete view of the ModelKit's manifest and technical details.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/next-steps.md#2025-04-16_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nkit inspect mymodel:challenger\n```\n\n----------------------------------------\n\nTITLE: Using the kit inspect command\nDESCRIPTION: Basic usage syntax for the 'kit inspect' command which displays the manifest contents of a modelkit from local or remote storage.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nkit inspect [flags] MODELKIT\n```\n\n----------------------------------------\n\nTITLE: Using the kit init command\nDESCRIPTION: Basic usage syntax for the 'kit init' command which generates a Kitfile based on directory contents, automatically identifying common file formats.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nkit init [flags] PATH\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Pod Configuration with ModelKit Init Container\nDESCRIPTION: Example Kubernetes YAML configuration showing how to deploy a pod with a ModelKit init container. Demonstrates volume mounting and environment variable configuration for unpacking ModelKits.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/deploy.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-modelkit-pod\nspec:\n  containers:\n    - name: model-server\n      image: \"\" # Some container that expects your modelkit\n      # Share a volumeMount between the init container and this one\n      volumeMounts:\n        - name: modelkit-storage\n          mountPath: /my-modelkit\n\n  # Run the init container to unpack the ModelKit into the volume mount and make\n  # it available to the main container\n  initContainers:\n    - name: kitops-init\n      image: ghcr.io/kitops-ml/kitops-init:latest\n      env:\n        - name: MODELKIT_REF\n          value: \"ghcr.io/kitops-ml/my-modelkit:latest\"\n        - name: UNPACK_PATH\n          value: /tmp/my-modelkit\n      volumeMounts:\n        - name: modelkit-storage\n          mountPath: /tmp/my-modelkit\n\n  # Define a volume to store the ModelKit\n  volumes:\n    - name: modelkit-storage\n      emptyDir: {}\n```\n\n----------------------------------------\n\nTITLE: Kit Dev Start Options\nDESCRIPTION: Options specific to the kit dev start command, including file path, host, and port configuration.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n  -f, --file string   Path to the kitfile\n      --host string   Host for the development server (default \"127.0.0.1\")\n      --port int      Port for development server to listen on\n  -h, --help          help for start\n```\n\n----------------------------------------\n\nTITLE: Creating a Directory for Local LLM Development\nDESCRIPTION: Commands to create and navigate to a new directory for local LLM development.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/dev-mode.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir kitdev\ncd kitdev\n```\n\n----------------------------------------\n\nTITLE: Kit Dev Stop Command\nDESCRIPTION: Command syntax for stopping the development server.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nkit dev stop [flags]\n```\n\n----------------------------------------\n\nTITLE: Executing Kit Pull Command\nDESCRIPTION: Illustrates the usage of the 'kit pull' command for retrieving modelkits from a remote registry to the local environment. It includes an example of pulling the latest version of a modelkit.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\nkit pull [flags] registry/repository[:tag|@digest]\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Pull the latest version of a modelkit from a remote registry\nkit pull registry.example.com/my-model:latest\n```\n\n----------------------------------------\n\nTITLE: Executing Kit Logout Command\nDESCRIPTION: Demonstrates the usage of the 'kit logout' command for logging out from an OCI-compatible registry. It shows the command syntax and an example of logging out from ghcr.io.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\nkit logout [flags] REGISTRY\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Log out from ghcr.io\nkit logout ghcr.io\n```\n\n----------------------------------------\n\nTITLE: Pulling ModelKit in Shell\nDESCRIPTION: Command to pull a ModelKit from a GitLab registry. This example pulls the 'tuned' version of the 'legalchat' model from the 'chatbot' repository.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/use-cases.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkit pull registry.gitlab.com/chatbot/legalchat:tuned\n```\n\n----------------------------------------\n\nTITLE: Extracting Kitfile from ModelKit using Kit CLI\nDESCRIPTION: Command to unpack a Kitfile configuration from a ModelKit repository using the Kit CLI tool. This extracts just the configuration file to the current directory.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/kitfile/kf-overview.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nkit unpack [registry/repo:tag] --config -d .\n```\n\n----------------------------------------\n\nTITLE: Executing Kit Pack Command\nDESCRIPTION: Shows how to use the 'kit pack' command to pack a modelkit from a kitfile. It includes examples of packing using the current directory and specifying a custom kitfile and tag.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\nkit pack [flags] DIRECTORY\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Pack a modelkit using the kitfile in the current directory\nkit pack .\n\n# Pack a modelkit with a specific kitfile and tag\nkit pack . -f /path/to/your/Kitfile -t registry/repository:modelv1\n```\n\n----------------------------------------\n\nTITLE: Viewing ModelKit Registry After Removal Operation\nDESCRIPTION: Displays the registry after removing a tag, showing that only the 'latest' and 'champion' tags remain. This demonstrates effective registry management by eliminating redundant tags.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/next-steps.md#2025-04-16_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nkit list\n\nREPOSITORY  TAG         MAINTAINER   NAME             SIZE       DIGEST\nmymodel     latest      Rajat        Finetuning_SLM   13.1 MiB   sha256:f268a74ff85a00f2a68400dfc17b045bc7c1638da7f096c7ae400ad5bdfd520c\n\nmymodel     champion    Rajat        Finetuning_SLM   13.1 MiB   sha256:f268a74ff85a00f2a68400dfc17b045bc7c1638da7f096c7ae400ad5bdfd520c\n```\n\n----------------------------------------\n\nTITLE: Examples of kit init command usage\nDESCRIPTION: Sample command examples showing how to use 'kit init' with different directories and options for naming and describing models.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n# Generate a Kitfile for the current directory:\nkit init .\n\n# Generate a Kitfile for files in ./my-model, with name \"mymodel\" and a description:\nkit init ./my-model --name \"mymodel\" --desc \"This is my model's description\"\n\n# Generate a Kitfile, overwriting any existing Kitfile:\nkit init ./my-model --force\n```\n\n----------------------------------------\n\nTITLE: Displaying Version Information for KitOps CLI\nDESCRIPTION: This command prints detailed version information for the KitOps CLI tool, including the current version, Git commit, build time, and Go version used for compilation.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\nkit version [flags]\n```\n\n----------------------------------------\n\nTITLE: Using the kit list command\nDESCRIPTION: Basic usage syntax for the 'kit list' command which displays available modelkits in a local or remote repository with size information.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nkit list [flags] [REPOSITORY]\n```\n\n----------------------------------------\n\nTITLE: Packing and Pushing ModelKit in Shell\nDESCRIPTION: Commands to pack the current directory into a ModelKit and push it to a GitLab registry. This example is for a fine-tuned 'legalchat' model in the 'chatbot' repository.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/use-cases.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkit pack . -t registry.gitlab.com/chatbot/legalchat:tuned\nkit push registry.gitlab.com/chatbot/legalchat:tuned\n```\n\n----------------------------------------\n\nTITLE: Options for kit login command\nDESCRIPTION: Command-line options specific to the 'kit login' command, including authentication credentials, TLS settings, and connection parameters.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\n  -u, --username string   registry username\n  -p, --password string   registry password or token\n      --password-stdin    read password from stdin\n      --plain-http        Use plain HTTP when connecting to remote registries\n      --tls-verify        Require TLS and verify certificates when connecting to remote registries (default true)\n      --cert string       Path to client certificate used for authentication (can also be set via environment variable KITOPS_CLIENT_CERT)\n      --key string        Path to client certificate key used for authentication (can also be set via environment variable KITOPS_CLIENT_KEY)\n      --concurrency int   Maximum number of simultaneous uploads/downloads (default 5)\n      --proxy string      Proxy to use for connections (overrides proxy set by environment)\n  -h, --help              help for login\n```\n\n----------------------------------------\n\nTITLE: Listing ModelKits to View Registry Contents\nDESCRIPTION: Uses the kit list command to display all ModelKits in the local registry with their tags, maintainers, names, sizes, and digests. This helps track which models are available and their metadata.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/next-steps.md#2025-04-16_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nkit list\n\nREPOSITORY  TAG         MAINTAINER   NAME             SIZE       DIGEST\nmymodel     latest      Rajat        Finetuning_SLM   13.1 MiB   sha256:f268a74ff85a00f2a68400dfc17b045bc7c1638da7f096c7ae400ad5bdfd520c\n\nmymodel     challenger  Rajat        Finetuning_SLM   13.1 MiB   sha256:f268a74ff85a00f2a68400dfc17b045bc7c1638da7f096c7ae400ad5bdfd520c\n```\n\n----------------------------------------\n\nTITLE: Importing KitOps CLI Commands in Python\nDESCRIPTION: This code snippet shows how to import all KitOps CLI commands from the kitops.cli.kit module. This allows programmatic access to functions like info(), inspect(), list(), login(), logout(), pack(), pull(), push(), remove(), tag(), unpack(), and version().\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/pykitops/reference/kit.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport kitops.cli.kit as kit\n```\n\n----------------------------------------\n\nTITLE: Installing PyKitOps Python Library\nDESCRIPTION: Command to install the KitOps Python library using pip, which is required to create and manage ModelKits programmatically.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/pykitops/mlflow.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install kitops\n```\n\n----------------------------------------\n\nTITLE: Importing ModelKitManager from kitops\nDESCRIPTION: Shows how to import the ModelKitManager class from the kitops.modelkit.manager module for use in Python applications.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/pykitops/reference/manager.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom kitops.modelkit.manager import ModelKitManager\n```\n\n----------------------------------------\n\nTITLE: Building the KitOps Init Container Image with Docker\nDESCRIPTION: Shell commands to build the KitOps init container image using Docker. Includes options for using the default 'next' version of KitOps or specifying a particular version using build arguments.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/build/dockerfiles/init/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker build -t kit-init-container:latest .\n```\n\nLANGUAGE: shell\nCODE:\n```\n# Build the image based on Kit v1.3.0 instead of 'next'\ndocker build -t kit-init-container:latest --build-arg KIT_BASE_IMAGE=ghcr.io/kitops-ml/kitops:v1.3.0 .\n```\n\n----------------------------------------\n\nTITLE: Tagging ModelKits for Version Management\nDESCRIPTION: Demonstrates how to tag a ModelKit to track its position in the development lifecycle. This example shows tagging a model from 'latest' to 'challenger', which helps identify models at different stages of development.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/next-steps.md#2025-04-16_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nkit tag mymodel:latest mymodel:challenger\n```\n\n----------------------------------------\n\nTITLE: Kit Dev Stop Options\nDESCRIPTION: Options specific to the kit dev stop command.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for stop\n```\n\n----------------------------------------\n\nTITLE: Executing Kit Remove Command\nDESCRIPTION: Shows how to use the 'kit remove' command to remove modelkits from local storage. It includes examples of removing modelkits by tag, digest, and removing all untagged or locally stored modelkits.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\nkit remove [flags] registry/repository[:tag|@digest]\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Remove modelkit by tag\nkit remove my-registry.com/my-org/my-repo:my-tag\n\n# Remove modelkit by digest\nkit remove my-registry.com/my-org/my-repo@sha256:<digest>\n\n# Remove multiple tags for a modelkit\nkit remove my-registry.com/my-org/my-repo:tag1,tag2,tag3\n\n# Remove all untagged modelkits\nkit remove --all\n\n# Remove all locally stored modelkits\nkit remove --all --force\n```\n\n----------------------------------------\n\nTITLE: Kit Import Command\nDESCRIPTION: Command syntax for importing a model from HuggingFace and packaging it as a ModelKit.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nkit import [flags] REPOSITORY\n```\n\n----------------------------------------\n\nTITLE: Kit Dev Logs Command\nDESCRIPTION: Command syntax for viewing logs from the development server.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkit dev logs [flags]\n```\n\n----------------------------------------\n\nTITLE: Checking KitOps CLI Version\nDESCRIPTION: Verifies proper installation of the Kit CLI tool by displaying the version information.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/get-started.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nkit version\n```\n\n----------------------------------------\n\nTITLE: Unpacking ModelKit Components Using Filters\nDESCRIPTION: Examples of using kit unpack command with various filters to selectively extract ModelKit components like datasets, models, and documentation.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/next-steps.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nkit unpack myrepo/my-model:latest --filter=datasets:my-dataset\n```\n\nLANGUAGE: sh\nCODE:\n```\nkit unpack myrepo/my-model:latest --filter=model,datasets -d /path/to/unpacked\n```\n\nLANGUAGE: sh\nCODE:\n```\nkit unpack myrepo/my-model:latest --filter=docs:./README.md\n```\n\nLANGUAGE: sh\nCODE:\n```\nkit unpack myrepo/my-model:latest\\n  --filter=datasets:training\\n  --filter=datasets:evaluation\n```\n\n----------------------------------------\n\nTITLE: Pushing Kitfile to Jozu Hub in Python\nDESCRIPTION: Shows how to use the ModelKitManager to push a created Kitfile to Jozu Hub.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/pykitops/how-to-guides.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom kitops.modelkit.manager import ModelKitManager\n\n# Configure the ModelKit manager\nmodelkit_tag = \"jozu.ml/yourname/reponame:latest\"\nmanager = ModelKitManager(\n    working_directory=\".\",\n    modelkit_tag=modelkit_tag\n)\n\n# Assign your Kitfile\nmanager.kitfile = kitfile\n\n# Pack and push to Jozu Hub\nmanager.pack_and_push_modelkit(save_kitfile=True)\n```\n\n----------------------------------------\n\nTITLE: Kit Cache Clear Command\nDESCRIPTION: Command syntax for clearing temporary files from the Kit cache storage.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkit cache clear [flags]\n```\n\n----------------------------------------\n\nTITLE: Kit Cache Info Command\nDESCRIPTION: Command syntax for getting information about the Kit cache disk usage.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkit cache info [flags]\n```\n\n----------------------------------------\n\nTITLE: Kit Dev Start Command\nDESCRIPTION: Command syntax for starting the development server from a modelkit directory.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkit dev start <directory> [flags]\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Pod Configuration for Kit CLI Container\nDESCRIPTION: Example Kubernetes YAML configuration for running a Kit CLI container in a pod, showing how to pass arguments to pull a specific ModelKit.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/deploy.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-modelkit-pod\nspec:\n  containers:\n    - name: me-using-kit\n      image: ghcr.io/kitops-ml/kitops:latest\n      args: # You can put whatever you want; args is an array\n        - pull\n        - jozu.ml/jozu/llama3-8b:8B-instruct-q5_0\n```\n\n----------------------------------------\n\nTITLE: Common options inherited by all kit commands\nDESCRIPTION: Global options that can be used with any kit command to control configuration location, logging level, and output verbosity.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n      --config string      Alternate path to root storage directory for CLI\n      --log-level string   Log messages above specified level ('trace', 'debug', 'info', 'warn', 'error') (default 'info') (default \"info\")\n      --progress string    Configure progress bars for longer operations (options: none, plain, fancy) (default \"plain\")\n  -v, --verbose count      Increase verbosity of output (use -vv for more)\n```\n\n----------------------------------------\n\nTITLE: Displaying Inherited Options for Kit CLI Commands\nDESCRIPTION: Shows the common options inherited by all Kit CLI commands, including configuration path, log level, progress display, and verbosity settings.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\n      --config string      Alternate path to root storage directory for CLI\n      --log-level string   Log messages above specified level ('trace', 'debug', 'info', 'warn', 'error') (default 'info') (default \"info\")\n      --progress string    Configure progress bars for longer operations (options: none, plain, fancy) (default \"plain\")\n  -v, --verbose count      Increase verbosity of output (use -vv for more)\n```\n\n----------------------------------------\n\nTITLE: Custom ModelKit Container Dockerfile\nDESCRIPTION: Multi-stage Dockerfile example showing how to create a custom container that includes a pre-downloaded ModelKit, using the Kit CLI container as a builder.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/deploy.md#2025-04-16_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Staged build to grab the ModelKit so we can use it later\nFROM ghcr.io/kitops-ml/kitops:latest AS modelkit-download\n\n# Download your ModelKit into the container\nRUN kit unpack my-modelkit /tmp/my-modelkit\n\n# Actual build stage; this just uses Alpine but you would build whatever\n# container you need here\nFROM alpine:latest\n\n# Normal container build + setup -- depends on your use case\n# ...\n# ...\n\n# Copy the downloaded ModelKit into this container\nCOPY --from=modelkit-download /tmp/my-modelkit /home/user/modelkit-data\n```\n\n----------------------------------------\n\nTITLE: Unpacking Model and Datasets with KitOps\nDESCRIPTION: Command to unpack a model and its datasets from a registry for validation testing. This ensures consistent dataset usage across teams.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/use-cases.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkit unpack registry.gitlab.com/chatbot/legalchat:tuned --model --datasets\n```\n\n----------------------------------------\n\nTITLE: Downloading MLFlow Run Artifacts\nDESCRIPTION: Python code to download the artifacts from a completed MLFlow experiment run to a local directory. This is typically done after the current MLFlow run is complete.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/pykitops/mlflow.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nartifact_location = mlflow.artifacts.download_artifacts(cur_run.info.run_id)\n```\n\n----------------------------------------\n\nTITLE: Retrieving ModelKit Information with kit info Command\nDESCRIPTION: Uses the kit info command to display the Kitfile contents for a specific ModelKit without having to pull or unpack it. This provides a quick way to understand what's in a ModelKit before performing more time-consuming operations.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/next-steps.md#2025-04-16_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nkit info mymodel:challenger\n```\n\n----------------------------------------\n\nTITLE: Creating a ClusterStorageContainer for KitOps in KServe\nDESCRIPTION: YAML configuration for creating a ClusterStorageContainer custom resource that supports the kit:// URI prefix for KServe. This enables KitOps to serve as a storage initializer for KServe InferenceServices.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/build/dockerfiles/KServe/README.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: \"serving.kserve.io/v1alpha1\"\nkind: ClusterStorageContainer\nmetadata:\n  name: kitops\nspec:\n  container:\n    name: storage-initializer\n    image: ghcr.io/kitops-ml/kitops-kserve:next\n    imagePullPolicy: Always\n    env:\n      - name: KIT_UNPACK_FLAGS\n        value: \"\" # Add extra flags for the `kit unpack` command\n    resources:\n      requests:\n        memory: 100Mi\n        cpu: 100m\n      limits:\n        memory: 1Gi\n  supportedUriFormats:\n    - prefix: kit://\n```\n\n----------------------------------------\n\nTITLE: Building Offline Container for Kit CLI from Local Sources\nDESCRIPTION: Command to build a Docker container by compiling the Kit CLI from local source code. This approach is useful for development or when working with unreleased changes to the CLI.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/build/dockerfiles/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t kit-cli:next -f build/dockerfiles/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Options for kit import command\nDESCRIPTION: Command-line options available for the 'kit import' command, which is used to import models from repositories.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n      --ref string        Version (tag) of repository to import (default \"main\")\n      --token string      Token to use for authenticating with repository\n  -t, --tag string        Tag for the ModelKit (default is '[repository]:latest')\n  -f, --file string       Path to Kitfile to use for packing (use '-' to read from standard input)\n      --tool string       Tool to use for downloading files: options are 'git' and 'hf' (default: detect based on repository)\n      --concurrency int   Maximum number of simultaneous downloads (for huggingface) (default 5)\n  -h, --help              help for import\n```\n\n----------------------------------------\n\nTITLE: ModelKit Packing and Registry Commands\nDESCRIPTION: CLI commands for packing ModelKits and pushing them to remote registries using kit pack and kit push.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/next-steps.md#2025-04-16_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nkit pack . -t film-slm:champion\n```\n\nLANGUAGE: sh\nCODE:\n```\nkit pack . -f /path/to/your/Kitfile -t film-slm:champion\n```\n\nLANGUAGE: sh\nCODE:\n```\nkit pack . -t docker.io/jozubrad/film-slm:champion\n```\n\nLANGUAGE: sh\nCODE:\n```\nkit login docker.io\\nkit push docker.io/jozubrad/film-slm:champion\n```\n\n----------------------------------------\n\nTITLE: Building the KitOps KServe Container Image\nDESCRIPTION: Bash command for building the KitOps KServe container image. The command uses docker build and requires setting the KIT_KSERVE_IMAGE environment variable to specify the target image tag.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/build/dockerfiles/KServe/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t $KIT_KSERVE_IMAGE .\n```\n\n----------------------------------------\n\nTITLE: Removing a ModelKit from the Registry\nDESCRIPTION: Uses the kit remove command to delete a specific ModelKit tag from the registry. This helps maintain a clean registry by removing duplicate or unnecessary tags.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/next-steps.md#2025-04-16_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nkit remove mymodel:challenger\n\nRemoved localhost/mymodel:challenger (digest sha256:f268a74ff85a00f2a68400dfc17b045bc7c1638da7f096c7ae400ad5bdfd520c)\n```\n\n----------------------------------------\n\nTITLE: Viewing Updated ModelKit Registry with Multiple Tags\nDESCRIPTION: Displays the registry after tagging operations, showing all three tags (latest, challenger, champion) pointing to the same ModelKit digest. This demonstrates how tagging provides an efficient way to mark models without duplicating storage.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/next-steps.md#2025-04-16_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nkit list\n\nREPOSITORY  TAG         MAINTAINER   NAME             SIZE       DIGEST\nmymodel     latest      Rajat        Finetuning_SLM   13.1 MiB   sha256:f268a74ff85a00f2a68400dfc17b045bc7c1638da7f096c7ae400ad5bdfd520c\n\nmymodel     challenger  Rajat        Finetuning_SLM   13.1 MiB   sha256:f268a74ff85a00f2a68400dfc17b045bc7c1638da7f096c7ae400ad5bdfd520c\n\nmymodel     champion    Rajat        Finetuning_SLM   13.1 MiB   sha256:f268a74ff85a00f2a68400dfc17b045bc7c1638da7f096c7ae400ad5bdfd520c\n```\n\n----------------------------------------\n\nTITLE: Minimal Kitfile Example for Datasets in YAML\nDESCRIPTION: A minimalist Kitfile example showing only the mandatory fields needed to create a ModelKit for distributing a pair of datasets. This demonstrates the simplest valid configuration possible.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/kitfile/kf-overview.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmanifestVersion: v1.0.0\n\ndatasets:\n- name: training data\n  path: ./data/train.csv\n- description: validation data (tabular)\n  name: validation data\n  path: ./data/test.csv\n```\n\n----------------------------------------\n\nTITLE: Kitfile Dataset Configuration Example\nDESCRIPTION: YAML configuration example showing how to define multiple datasets in a Kitfile with descriptions and paths.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/next-steps.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndatasets:\\n- description: Forum postings from photo sites\\n  name: training data\\n  path: ./data/forum-to-2023-train.csv\\n\\n- name: validation data\\n  path: ./data/test.csv\n```\n\n----------------------------------------\n\nTITLE: Using the kit info command\nDESCRIPTION: Basic usage syntax for the 'kit info' command which displays configuration for a modelkit, either locally or from a remote registry.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nkit info [flags] MODELKIT\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Kit Dev Mode UI Locally\nDESCRIPTION: Commands to install dependencies with pnpm and start the development server. Once running, the UI can be accessed at http://localhost:5173 in a web browser.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/frontend/dev-mode/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm i\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Kitfile Code Configuration Example\nDESCRIPTION: YAML configuration example showing how to define a codebase entry in a Kitfile.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/next-steps.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncode:\\n- description: Jupyter notebook with model training code in Python\\n  path: ./notebooks\n```\n\n----------------------------------------\n\nTITLE: Listing Local Registry Contents\nDESCRIPTION: Shows the contents of the local KitOps registry including repositories and tags.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/get-started.md#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nkit list\n```\n\n----------------------------------------\n\nTITLE: Cloning KitOps Repository for Source Build\nDESCRIPTION: These commands clone the KitOps repository from GitHub and navigate to the project directory for building from source.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/installation.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/kitops-ml/kitops.git\ncd kitops\n```\n\n----------------------------------------\n\nTITLE: Viewing Development Server Logs\nDESCRIPTION: Command to view logs from the running KitOps development server.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/dev-mode.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nkit dev logs\n```\n\n----------------------------------------\n\nTITLE: Updating Production Model Tags\nDESCRIPTION: Series of commands to manage production model deployment tags. Updates current champion to rollback status and promotes challenger to champion status.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/use-cases.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkit tag registry.gitlab.com/chatbot/legalchat:champion registry.gitlab.com/chatbot/legalchat:rollback\n\nkit push registry.gitlab.com/chatbot/legalchat:rollback\n\nkit tag registry.gitlab.com/chatbot/legalchat:challenger registry.gitlab.com/chatbot/legalchat:champion\n\nkit push registry.gitlab.com/chatbot/legalchat:champion\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Kitfile in Python\nDESCRIPTION: Shows how to create an empty Kitfile object from scratch and print its YAML representation.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/pykitops/how-to-guides.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom kitops.modelkit.kitfile import Kitfile\n\nmy_kitfile = Kitfile()\nprint(my_kitfile.to_yaml())\n\n# OUTPUT: {}\n```\n\n----------------------------------------\n\nTITLE: Extracting Kit CLI on Linux\nDESCRIPTION: This command extracts the downloaded TAR file containing the Kit CLI on Linux systems.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/installation.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ntar -xzvf kitops-linux-x86_64.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Stopping the LLM Development Server\nDESCRIPTION: Command to stop the running KitOps development server when finished with testing.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/dev-mode.md#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nkit dev stop\n```\n\n----------------------------------------\n\nTITLE: Unpacking Sample ModelKit\nDESCRIPTION: Retrieves and unpacks a sample ModelKit from Jozu Hub to the local filesystem.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/get-started.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nkit unpack jozu.ml/jozu-quickstarts/fine-tuning:latest\n```\n\n----------------------------------------\n\nTITLE: Generating Test Cases from Existing Modelkit Directory in Bash\nDESCRIPTION: A Bash script that generates a new test case YAML file from an existing modelkit directory. It automatically extracts the Kitfile and .kitignore content, and lists all files in the directory for manual categorization.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/testing/testdata/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncat <<EOF > new-test-case.yaml\ndescription: \"enter your description\"\nkitfile: |\n$(sed 's|^|  |g' Kitfile)\nkitignore: |\n$(sed 's|^|  |g' .kitignore)\nfiles: # Sort these into files vs ignored as necessary\n$(find . -type f | sed 's|^|  - |g')\nEOF\n```\n\n----------------------------------------\n\nTITLE: Kit Diff Examples\nDESCRIPTION: Examples showing how to compare ModelKits from local and remote registries.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n# Compare two ModelKits\nkit diff jozu.ml/foo:latest jozu.ml/bar:latest\n\n# Compare two ModelKits from a remote registry\nkit diff remote://jozu.ml/foo:champion remote://jozu.ml/bar:latest\n\n# Compare local ModelKit with a remote ModelKit\nkit diff local://jozu.ml/foo:latest remote://jozu.ml/foo:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Custom Registry\nDESCRIPTION: Example .env file configuration for using a custom OCI registry with PyKitOps SDK. Includes registry URL along with authentication credentials and namespace.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/pykitops/before-you-begin.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nJOZU_REGISTRY=hub.docker.com\nJOZU_USERNAME=brett@jozu.org\nJOZU_PASSWORD=my_password\nJOZU_NAMESPACE=brett\n```\n\n----------------------------------------\n\nTITLE: Running the Built CLI\nDESCRIPTION: Command to execute the built CLI and view available commands\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/CONTRIBUTING.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo run .\n```\n\n----------------------------------------\n\nTITLE: Kit Cache Command Options\nDESCRIPTION: Options available for the kit cache parent command, including help flag and options inherited from parent commands.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for cache\n```\n\n----------------------------------------\n\nTITLE: Configuring an InferenceService with KitOps Model Reference\nDESCRIPTION: YAML configuration demonstrating how to create a KServe InferenceService that uses a ModelKit stored at a kit:// URI. This shows the integration between KitOps and KServe.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/build/dockerfiles/KServe/README.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: \"serving.kserve.io/v1beta1\"\nkind: \"InferenceService\"\nmetadata:\n  name: \"iris-model\"\nspec:\n  predictor:\n    model:\n      modelFormat:\n        name: sklearn\n      storageUri: kit://<modelkit-reference>\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Command to launch the VitePress development server for local documentation preview and editing.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/README.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm docs:dev\n```\n\n----------------------------------------\n\nTITLE: Example ModelKit Manifest in JSON\nDESCRIPTION: Demonstrates the structure of a ModelKit manifest for a single serialized model and kitfile. It includes schema version, config details, and layer information with media types, digests, and sizes.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/pkg/artifact/spec.md#2025-04-16_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"schemaVersion\": 2,\n    \"config\": {\n        \"mediaType\": \"application/vnd.jozu.model.config.v1+json\",\n        \"digest\": \"sha256:d5815835051dd97d800a03f641ed8162877920e734d3d705b698912602b8c763\",\n        \"size\": 301\n    },\n    \"layers\": [\n        {\n            \"mediaType\": \"application/vnd.jozu.model.content.v1.tar+gzip\",\n            \"digest\": \"sha256:3f907c1a03bf20f20355fe449e18ff3f9de2e49570ffb536f1a32f20c7179808\",\n            \"size\": 30327160\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Available ModelKits in KitOps\nDESCRIPTION: Command to display all ModelKits available in your local KitOps registry, including any newly imported models from Hugging Face.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/hf-import.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkit list\n```\n\n----------------------------------------\n\nTITLE: Cloning the KitOps Repository\nDESCRIPTION: Command to clone the KitOps repository from GitHub to your local machine.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/kitops-ml/kitops.git\n```\n\n----------------------------------------\n\nTITLE: Kit Dev Command Options\nDESCRIPTION: Options available for the kit dev parent command.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for dev\n```\n\n----------------------------------------\n\nTITLE: Importing Kitfile Class in Python\nDESCRIPTION: This code snippet shows how to import the Kitfile class from the kitops.modelkit.kitfile module. This is the first step in working with kit files in a KitOps project.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/pykitops/reference/kitfile.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom kitops.modelkit.kitfile import Kitfile\n```\n\n----------------------------------------\n\nTITLE: Building Release Version Container for Kit CLI\nDESCRIPTION: Command to build a Docker container using a specific release version of the Kit CLI. The command requires specifying the KIT_VERSION build argument to download the appropriate release from GitHub.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/build/dockerfiles/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t kit-cli:my-tag -f build/dockerfiles/release.Dockerfile --build-arg KIT_VERSION=vX.Y.Z .\n```\n\n----------------------------------------\n\nTITLE: Options for kit list command\nDESCRIPTION: Command-line options specific to the 'kit list' command, including TLS settings, authentication options, and connection parameters.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\n      --plain-http        Use plain HTTP when connecting to remote registries\n      --tls-verify        Require TLS and verify certificates when connecting to remote registries (default true)\n      --cert string       Path to client certificate used for authentication (can also be set via environment variable KITOPS_CLIENT_CERT)\n      --key string        Path to client certificate key used for authentication (can also be set via environment variable KITOPS_CLIENT_KEY)\n      --concurrency int   Maximum number of simultaneous uploads/downloads (default 5)\n      --proxy string      Proxy to use for connections (overrides proxy set by environment)\n  -h, --help              help for list\n```\n\n----------------------------------------\n\nTITLE: Importing Kitfile Class in Python\nDESCRIPTION: Code snippet showing how to import the Kitfile class from the kitops.modelkit.kitfile module.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/pykitops/how-to-guides.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom kitops.modelkit.kitfile import Kitfile\n```\n\n----------------------------------------\n\nTITLE: Kit Cache Info Options\nDESCRIPTION: Options specific to the kit cache info command.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for info\n```\n\n----------------------------------------\n\nTITLE: Installing PyKitOps Package\nDESCRIPTION: Command to install the kitops package from PYPI using pip.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/pykitops/how-to-guides.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install kitops\n```\n\n----------------------------------------\n\nTITLE: Kit Dev Logs Options\nDESCRIPTION: Options specific to the kit dev logs command, including the ability to follow/stream logs.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n  -f, --follow   Stream the log file\n  -h, --help     help for logs\n```\n\n----------------------------------------\n\nTITLE: Using Kit Cache Commands\nDESCRIPTION: Examples of how to use the Kit cache management commands to get information about cached files and clear the cache.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Get information about size of cached files\nkit cache info\n\n# Clear files in cache\nkit cache clear\n```\n\n----------------------------------------\n\nTITLE: Kit Cache Clear Options\nDESCRIPTION: Options specific to the kit cache clear command.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n  -h, --help   help for clear\n```\n\n----------------------------------------\n\nTITLE: Kit Diff Command\nDESCRIPTION: Command syntax for comparing two ModelKits to see differences in their layers.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nkit diff <ModelKit1> <ModelKit2> [flags]\n```\n\n----------------------------------------\n\nTITLE: Kit Cache Inherited Options\nDESCRIPTION: Common options inherited from parent commands that apply to all kit cache subcommands, including configuration, logging, and verbosity settings.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n      --config string      Alternate path to root storage directory for CLI\n      --log-level string   Log messages above specified level ('trace', 'debug', 'info', 'warn', 'error') (default 'info') (default \"info\")\n      --progress string    Configure progress bars for longer operations (options: none, plain, fancy) (default \"plain\")\n  -v, --verbose count      Increase verbosity of output (use -vv for more)\n```\n\n----------------------------------------\n\nTITLE: Options for kit inspect command\nDESCRIPTION: Command-line options specific to the 'kit inspect' command, including TLS settings, authentication options, and remote retrieval.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\n      --plain-http        Use plain HTTP when connecting to remote registries\n      --tls-verify        Require TLS and verify certificates when connecting to remote registries (default true)\n      --cert string       Path to client certificate used for authentication (can also be set via environment variable KITOPS_CLIENT_CERT)\n      --key string        Path to client certificate key used for authentication (can also be set via environment variable KITOPS_CLIENT_KEY)\n      --concurrency int   Maximum number of simultaneous uploads/downloads (default 5)\n      --proxy string      Proxy to use for connections (overrides proxy set by environment)\n  -r, --remote            Check remote registry instead of local storage\n  -h, --help              help for inspect\n```\n\n----------------------------------------\n\nTITLE: Building Kit CLI from Source\nDESCRIPTION: This command compiles the Kit CLI from source code using the Go compiler.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/installation.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngo build -o kit\n```\n\n----------------------------------------\n\nTITLE: Options for kit info command\nDESCRIPTION: Command-line options specific to the 'kit info' command, including TLS settings, authentication options, and filtering capabilities.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n      --plain-http        Use plain HTTP when connecting to remote registries\n      --tls-verify        Require TLS and verify certificates when connecting to remote registries (default true)\n      --cert string       Path to client certificate used for authentication (can also be set via environment variable KITOPS_CLIENT_CERT)\n      --key string        Path to client certificate key used for authentication (can also be set via environment variable KITOPS_CLIENT_KEY)\n      --concurrency int   Maximum number of simultaneous uploads/downloads (default 5)\n      --proxy string      Proxy to use for connections (overrides proxy set by environment)\n  -r, --remote            Check remote registry instead of local storage\n  -f, --filter string     filter with node selectors\n  -h, --help              help for info\n```\n\n----------------------------------------\n\nTITLE: Viewing Directory Structure\nDESCRIPTION: Displays the tree structure of the unpacked ModelKit contents.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/get-started.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ntree\n```\n\n----------------------------------------\n\nTITLE: Options for kit init command\nDESCRIPTION: Command-line options specific to the 'kit init' command, including options to set model name, description, author, and force overwrite.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n      --name string     Name for the ModelKit\n      --desc string     Description for the ModelKit\n      --author string   Author for the ModelKit\n  -f, --force           Overwrite existing Kitfile if present\n  -h, --help            help for init\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Jozu Hub\nDESCRIPTION: Example .env file configuration for using the Jozu Hub registry with PyKitOps SDK. Contains username, password, and namespace variables required for authentication.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/pykitops/before-you-begin.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nJOZU_USERNAME=brett@jozu.org\nJOZU_PASSWORD=my_password\nJOZU_NAMESPACE=brett\n```\n\n----------------------------------------\n\nTITLE: Kit Diff Options\nDESCRIPTION: Options specific to the kit diff command, including HTTP settings, TLS verification, and authentication.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/cli-reference.md#2025-04-16_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n      --plain-http        Use plain HTTP when connecting to remote registries\n      --tls-verify        Require TLS and verify certificates when connecting to remote registries (default true)\n      --cert string       Path to client certificate used for authentication (can also be set via environment variable KITOPS_CLIENT_CERT)\n      --key string        Path to client certificate key used for authentication (can also be set via environment variable KITOPS_CLIENT_KEY)\n      --concurrency int   Maximum number of simultaneous uploads/downloads (default 5)\n      --proxy string      Proxy to use for connections (overrides proxy set by environment)\n  -h, --help              help for diff\n```\n\n----------------------------------------\n\nTITLE: Setting AWS ECR Region for IRSA Integration\nDESCRIPTION: YAML configuration example showing how to set the AWS ECR region through environment variables to enable AWS IRSA credentials integration with KitOps KServe.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/build/dockerfiles/KServe/README.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n    env:\n      - name: AWS_ECR_REGION\n        value: \"\" # AWS region of ECR repository containing artifacts\n```\n\n----------------------------------------\n\nTITLE: Generating Kitfile from Directory\nDESCRIPTION: Command to automatically generate a Kitfile from existing project directory structure using kit init.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/next-steps.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nkit init .\n```\n\n----------------------------------------\n\nTITLE: Configuring KIT_UNPACK_FLAGS Environment Variables\nDESCRIPTION: YAML configuration showing how to set additional flags for the 'kit unpack' command through the KIT_UNPACK_FLAGS environment variable in the ClusterStorageContainer specification.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/build/dockerfiles/KServe/README.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n    env:\n      - name: KIT_UNPACK_FLAGS\n        value: \"-v --plain-http\"\n```\n\n----------------------------------------\n\nTITLE: Running Containerized Kit CLI\nDESCRIPTION: Command to run the Kit CLI's version command using the container from GitHub Container Registry. This example shows how to execute commands using the containerized CLI without local installation.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/build/dockerfiles/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm ghcr.io/kitops-ml/kitops:latest version\n```\n\n----------------------------------------\n\nTITLE: Building Documentation for Production\nDESCRIPTION: Command to build the documentation from Markdown to static HTML files for deployment.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/README.md#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npnpm docs:build\n```\n\n----------------------------------------\n\nTITLE: Building KitOps KServe with Custom Kit Base Image\nDESCRIPTION: Shell command that demonstrates how to build the KitOps KServe image with a specific version of Kit as the base image rather than using the default 'next' tag.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/build/dockerfiles/KServe/README.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Build the image based on Kit v1.3.0 instead of 'next'\ndocker build -t kitops-kserve:latest --build-arg KIT_BASE_IMAGE=ghcr.io/kitops-ml/kitops:v1.3.0 .\n```\n\n----------------------------------------\n\nTITLE: Verifying Kit CLI Installation\nDESCRIPTION: This command checks the installed version of the Kit CLI to confirm successful installation across all platforms.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/installation.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkit version\n```\n\n----------------------------------------\n\nTITLE: Building Kit Dev Mode UI for Production\nDESCRIPTION: Command to build the production version of the Kit Dev Mode UI. The compiled output will be generated in the 'dist' folder.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/frontend/dev-mode/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Setting Up Vue Component for Blog Post Sorting\nDESCRIPTION: Implements a Vue.js setup script to import necessary components and data, and compute sorted blog posts based on publication date. Uses TypeScript for type safety.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/blog.md#2025-04-16_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\nimport Blog from '@theme/components/Blog.vue'\nimport { data as posts } from '@theme/blog.data.ts'\n\nconst sortedPost = computed(() =>\n  posts.toSorted((a, z) => z.published_time.localeCompare(a.published_time))\n)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing ModelKitReference Class in Python\nDESCRIPTION: Shows how to import the ModelKitReference class from the kitops.modelkit.reference module. This is the basic import statement needed to use this class in your Python code.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/pykitops/reference/reference.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom kitops.modelkit.reference import ModelKitReference\n```\n\n----------------------------------------\n\nTITLE: Starting the LLM Development Server\nDESCRIPTION: Command to start a local LLM development server using the kit dev start command.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/dev-mode.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nkit dev start .\n```\n\n----------------------------------------\n\nTITLE: Rendering Blog Component with Sorted Posts\nDESCRIPTION: Renders the Blog component, passing the computed sortedPost as a prop to display the blog posts in descending order of publication date.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/blog.md#2025-04-16_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<Blog :posts=\"sortedPost\" />\n```\n\n----------------------------------------\n\nTITLE: Importing UserCredentials from kitops.modelkit.user in Python\nDESCRIPTION: This snippet demonstrates how to import the UserCredentials class from the kitops.modelkit.user module. The UserCredentials class likely handles user authentication or stores user credential information for the kitops modelkit framework.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/pykitops/reference/user.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom kitops.modelkit.user import UserCredentials\n```\n\n----------------------------------------\n\nTITLE: Checking Kit CLI Version in Terminal\nDESCRIPTION: Command to verify Kit CLI installation and check its version in a terminal environment. The expected output shows version details, commit hash, build date, and Go version.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/pykitops/before-you-begin.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkit version\n```\n\n----------------------------------------\n\nTITLE: Custom CSS Styling for VitePress Home Container\nDESCRIPTION: CSS styles that apply custom max-width and margin settings to the VitePress home content container using Tailwind utilities.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/index.md#2025-04-16_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.VPHome .content-container {\n  @apply mx-auto;\n  /* Vitepress max-width */\n  max-width: calc(var(--vp-layout-max-width) - 64px);\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Documentation Directory\nDESCRIPTION: Command to change directory to the docs folder after cloning the repository.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd docs\n```\n\n----------------------------------------\n\nTITLE: Viewing Kit CLI Version Output\nDESCRIPTION: Example output from running the 'kit version' command showing version number, commit hash, build timestamp, and Go version details.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/pykitops/before-you-begin.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nVersion: 0.4.0\nCommit: e2e83d953823ac35648f2f76602a0cc6e8ead819\nBuilt: 2024-11-05T20:29:07Z\nGo version: go1.22.6\n```\n\n----------------------------------------\n\nTITLE: Generating Dev Mode Components\nDESCRIPTION: Command to generate development mode harness and UI components\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/CONTRIBUTING.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo generate ./...\n```\n\n----------------------------------------\n\nTITLE: Moving Kit CLI to System PATH on Linux\nDESCRIPTION: This command moves the extracted Kit CLI executable to a location in the system's PATH for global access.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/docs/cli/installation.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo mv kit /usr/local/bin/\n```\n\n----------------------------------------\n\nTITLE: Installing Go Dependencies\nDESCRIPTION: Command to fetch and install project dependencies using Go module system\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/CONTRIBUTING.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo mod tidy\n```\n\n----------------------------------------\n\nTITLE: Test Case YAML Structure for Kit CLI Testing\nDESCRIPTION: Defines the YAML structure used to specify test cases for the Kit CLI. The structure includes fields for test description, Kitfile content, kitignore content, files to include in the modelkit, and files to be ignored during testing.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/testing/testdata/README.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: \"Description of what the test is testing\"\nkitfile: |\n  The Kitfile to use for the test\nkitignore: |\n  The .kitignore to use for the test\nfiles:\n  - A list of files that should be included in the modelkit\n  - E.g. \"dir1/dir2/myfile.txt\"\n  - Directories will be created as necessary\nignored:\n  - A list of files that should exist in the context but should _not_ be included in the modelkit\n```\n\n----------------------------------------\n\nTITLE: Signing Git Commits\nDESCRIPTION: Command to commit changes with DCO sign-off\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/CONTRIBUTING.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -s -m 'This is my commit message'\n```\n\n----------------------------------------\n\nTITLE: Committing Documentation Changes\nDESCRIPTION: Git command example to commit changes made to the documentation.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/README.md#2025-04-16_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ngit commit -m 'Add documentation for XYZ'\n```\n\n----------------------------------------\n\nTITLE: Cloning KitOps Repository\nDESCRIPTION: Commands to clone the KitOps repository and navigate to the project directory\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/kitops-ml/kitops.git\ncd kitops\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Forked Repository\nDESCRIPTION: Git command example to push your feature branch to your forked repository.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/README.md#2025-04-16_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ngit push origin feature/your-feature\n```\n\n----------------------------------------\n\nTITLE: Building Kit CLI\nDESCRIPTION: Command to compile the source code into an executable named kit\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/CONTRIBUTING.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo build -o kit\n```\n\n----------------------------------------\n\nTITLE: Including External Markdown File in Documentation\nDESCRIPTION: This snippet demonstrates how to include an external Markdown file (CONTRIBUTING.md) in a documentation page using the VitePress or VuePress include directive.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/contributing.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--@include: ../../CONTRIBUTING.md-->\n```\n\n----------------------------------------\n\nTITLE: Defining KitOps Public Office Hours Meeting Details in Markdown\nDESCRIPTION: This snippet provides information about the bi-weekly KitOps Public Office Hours meeting, including time, time zone, video call link, and phone numbers for dial-in.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/GOVERNANCE.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### 📢 KitOps Public Office Hours (bi-weekly)\n**Wednesdays @ 13:30 – 14:00**  \n**Time zone**: America/Toronto  \n**Video call link**: [Google Meet](https://meet.google.com/zfq-uprp-csd)  \nOr dial: (CA) +1 647-736-3184 PIN: 144 931 404#  \nMore phone numbers: [Phone Numbers](https://tel.meet/zfq-uprp-csd?pin=1283456375953)\n```\n\n----------------------------------------\n\nTITLE: Including SECURITY.md File with VuePress Directive\nDESCRIPTION: A VuePress include directive that imports the content of SECURITY.md from two directories above the current file location. This allows maintaining security documentation in a single place while including it in multiple documentation pages.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/SECURITY.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--@include: ../../SECURITY.md-->\n```\n\n----------------------------------------\n\nTITLE: Vue Component Setup for VitePress Home Page\nDESCRIPTION: Script setup block that imports and uses a Home component from the VitePress theme.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/index.md#2025-04-16_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport Home from '@theme/components/Home.vue'\n</script>\n\n<Home />\n```\n\n----------------------------------------\n\nTITLE: Configuring Blog Page Layout in Markdown\nDESCRIPTION: Defines the layout and metadata for the KitOps blog page using YAML front matter in Markdown. Specifies the page title, sidebar configuration, and description for SEO purposes.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/blog.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: page\nsidebar: false\ntitle: Blog\ndescription: Stay updated with the latest news, insights, and tutorials from the KitOps community. Release notes, best practices, and advancements in AI/ML model packaging and deployment.\n---\n```\n\n----------------------------------------\n\nTITLE: Displaying Support Resources in Markdown\nDESCRIPTION: This markdown snippet outlines various support options for the KitOps project, including GitHub for bug tracking, product documentation, Discord community, public office hours, and enterprise support contact information.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/SUPPORT.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Getting Support\n\nWelcome to our project! We use GitHub for tracking bugs and feature requests.\n\nIf you need other types of help try:\n* View our [product documentation](/docs/overview/)\n* Join the [KitOps Discord](https://discord.gg/Tapeh8agYy)\n* Join our [public office hours meeting](https://github.com/kitops-ml/kitops/blob/main/GOVERNANCE.md#-meetings)\n\n## Enterprise Support\nIf you're looking to get enterprise support for your organization or team please contact [Jozu](mailto:sales@jozu.com)\n```\n\n----------------------------------------\n\nTITLE: Amending Commit with Sign-off\nDESCRIPTION: Command to amend the previous commit with a DCO sign-off\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/CONTRIBUTING.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit commit --amend -s\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: Command to install all required dependencies for the documentation project using PNPM.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/README.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Previewing Production Build\nDESCRIPTION: Command to serve the built documentation files locally to preview the production version.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/README.md#2025-04-16_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npnpm docs:preview\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch for Contributions\nDESCRIPTION: Git command example to create a new branch when contributing to the documentation.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/README.md#2025-04-16_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout -b feature/your-feature\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access in robots.txt\nDESCRIPTION: This robots.txt file defines access rules for various web crawlers. It specifically allows OpenAI's crawlers full site access while blocking all other crawlers. It also points to the website's sitemap.xml file for improved indexing.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/public/robots.txt#2025-04-16_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: GPTBot\nAllow: /\n\nUser-agent: ChatGPT-User\nAllow: /\n\nUser-agent: OAI-SearchBot\nAllow: /\n\nUser-agent: *\nDisallow:\n\nSitemap: https://kitops.org/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Including External Markdown Using VitePress Syntax\nDESCRIPTION: This code snippet demonstrates how to include content from another markdown file using VitePress's include syntax. The path '../../SUPPORT.md' points to a SUPPORT.md file located two directory levels up from the current file.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/SUPPORT.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--@include: ../../SUPPORT.md-->\n```\n\n----------------------------------------\n\nTITLE: Including Code of Conduct from Parent Directory in Markdown\nDESCRIPTION: A Markdown include directive that imports the CODE-OF-CONDUCT.md file from a location two directories above the current file. This is typically used in documentation systems that support transclusion to maintain consistency across documentation pages.\nSOURCE: https://github.com/kitops-ml/kitops.git/blob/main/docs/src/CODE-OF-CONDUCT.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--@include: ../../CODE-OF-CONDUCT.md-->\n```"
  }
]