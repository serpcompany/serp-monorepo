[
  {
    "owner": "otc-ai",
    "repo": "otc-mcp",
    "content": "TITLE: Getting Token Balance with ENS using McpClient\nDESCRIPTION: This snippet demonstrates using the `McpClient` to call the `get-token-balance` tool. It shows how to retrieve the balance of a specific ERC20 token (USDC) for an owner identified by their ENS name (`vitalik.eth`) on a given network (`ethereum`). The client connects to a local MCP server instance.\nSOURCE: https://github.com/otc-ai/otc-mcp/blob/main/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Example of using the MCP client to check a token balance using ENS\nconst mcp = new McpClient(\"http://localhost:3000\");\n\nconst result = await mcp.invokeTool(\"get-token-balance\", {\n  tokenAddress: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\", // USDC on Ethereum\n  ownerAddress: \"vitalik.eth\", // ENS name instead of address\n  network: \"ethereum\"\n});\n\nconsole.log(result);\n// {\n//   tokenAddress: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n//   owner: \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n//   network: \"ethereum\",\n//   raw: \"1000000000\",\n//   formatted: \"1000\",\n//   symbol: \"USDC\",\n//   decimals: 6\n// }\n```\n\n----------------------------------------\n\nTITLE: Resolving ENS Name to Address using McpClient\nDESCRIPTION: This snippet illustrates how to use the `McpClient` to invoke the `resolve-ens` tool. It takes an ENS name (`vitalik.eth`) and a network (`ethereum`) as input and returns the corresponding resolved Ethereum address. The client is configured to connect to a local MCP server instance.\nSOURCE: https://github.com/otc-ai/otc-mcp/blob/main/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Example of using the MCP client to resolve an ENS name to an address\nconst mcp = new McpClient(\"http://localhost:3000\");\n\nconst result = await mcp.invokeTool(\"resolve-ens\", {\n  ensName: \"vitalik.eth\",\n  network: \"ethereum\"\n});\n\nconsole.log(result);\n// {\n//   ensName: \"vitalik.eth\",\n//   normalizedName: \"vitalik.eth\",\n//   resolvedAddress: \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n//   network: \"ethereum\"\n// }\n```\n\n----------------------------------------\n\nTITLE: Example JavaScript Implementation with Cursor\nDESCRIPTION: A sample JavaScript file showing how to use the MCP server with Cursor, demonstrating how Cursor can interact with blockchain data through natural language commands.\nSOURCE: https://github.com/otc-ai/otc-mcp/blob/main/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// blockchain-example.js\nasync function main() {\n  try {\n    // Get ETH balance for an address using ENS\n    console.log(\"Getting ETH balance for vitalik.eth...\");\n    \n    // When using with Cursor, you can simply ask Cursor to:\n    // \"Check the ETH balance of vitalik.eth on mainnet\"\n    // Or \"Transfer 0.1 ETH from my wallet to vitalik.eth\"\n    \n    // Cursor will use the MCP server to execute these operations \n    // without requiring any additional code from you\n    \n    // This is the power of the MCP integration - your AI assistant\n    // can directly interact with blockchain data and operations\n  } catch (error) {\n    console.error(\"Error:\", error.message);\n  }\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Running EVM MCP Server with npx\nDESCRIPTION: Commands to run the MCP EVM Server directly without installation using npx, in either stdio mode for CLI tools or HTTP mode for web applications.\nSOURCE: https://github.com/otc-ai/otc-mcp/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Run the server in stdio mode (for CLI tools)\nnpx @mcpdotdirect/evm-mcp-server\n\n# Run the server in HTTP mode (for web applications)\nnpx @mcpdotdirect/evm-mcp-server --http\n```\n\n----------------------------------------\n\nTITLE: Running EVM MCP Server in HTTP Mode\nDESCRIPTION: Commands to start the HTTP server with Server-Sent Events (SSE) support for web applications using Bun.\nSOURCE: https://github.com/otc-ai/otc-mcp/blob/main/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Start the HTTP server\nbun start:http\n\n# Development mode with auto-reload\nbun dev:http\n```\n\n----------------------------------------\n\nTITLE: Running EVM MCP Server Locally\nDESCRIPTION: Commands to start the server locally using Bun in either stdio mode or HTTP mode, with options for both production and development environments.\nSOURCE: https://github.com/otc-ai/otc-mcp/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Start the stdio server\nbun start\n\n# Development mode with auto-reload\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Connecting to MCP Server using Claude CLI\nDESCRIPTION: Commands to add the MCP server to Claude CLI and start Claude with the MCP server enabled, allowing interaction with blockchain services through the CLI.\nSOURCE: https://github.com/otc-ai/otc-mcp/blob/main/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Add the MCP server\nclaude mcp add evm-mcp-server npx @mcpdotdirect/evm-mcp-server\n\n# Start Claude with the MCP server enabled\nclaude\n```\n\n----------------------------------------\n\nTITLE: Installing EVM MCP Server with Git\nDESCRIPTION: Commands to clone the repository and install dependencies using either Bun or npm package managers.\nSOURCE: https://github.com/otc-ai/otc-mcp/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Clone the repository\ngit clone https://github.com/mcpdotdirect/mcp-evm-server.git\ncd mcp-evm-server\n\n# Install dependencies with Bun\nbun install\n\n# Or with npm\nnpm install\n```\n\n----------------------------------------\n\nTITLE: HTTP Mode with SSE Configuration\nDESCRIPTION: JSON configuration for connecting to the HTTP server with Server-Sent Events (SSE), useful for web applications that need to connect to the MCP server from the browser.\nSOURCE: https://github.com/otc-ai/otc-mcp/blob/main/README.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"evm-mcp-sse\": {\n      \"url\": \"http://localhost:3001/sse\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MCP Server Configuration in mcp.json\nDESCRIPTION: JSON configuration file for Cursor that defines MCP server settings, including both command-line and HTTP-based server configurations.\nSOURCE: https://github.com/otc-ai/otc-mcp/blob/main/README.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"evm-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@mcpdotdirect/evm-mcp-server\"\n      ]\n    },\n    \"evm-mcp-http\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\", \n        \"@mcpdotdirect/evm-mcp-server\", \n        \"--http\"\n      ]\n    }\n  }\n}\n```"
  }
]