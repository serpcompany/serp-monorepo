[
  {
    "owner": "ansible-collections",
    "repo": "hetzner.hcloud",
    "content": "TITLE: Setting API Token as Environment Variable in Bash\nDESCRIPTION: This snippet demonstrates how to securely set the Hetzner Cloud API token using an environment variable in a Bash shell. It is the recommended approach for authenticating API calls with the hetzner.hcloud Ansible collection. After setting the environment variable HCLOUD_TOKEN, the example verifies the token's validity by running an Ansible ad hoc command to retrieve location info. No additional dependencies are required beyond Ansible and an environment supporting Bash.\nSOURCE: https://github.com/ansible-collections/hetzner.hcloud/blob/main/docs/docsite/rst/guides.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport HCLOUD_TOKEN='LRK9DAWQ1ZAEFSrCNEEzLCUwhYX1U3g7wMg4dTlkkDC96fyDuyJ39nVbVjCKSDfj'\n\n# Verify that your token is working\nansible -m hetzner.hcloud.location_info localhost\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Defaults for API Token in Ansible Playbook using YAML\nDESCRIPTION: This snippet demonstrates the use of module_defaults to configure the api_token parameter globally for the hetzner.hcloud.* collection modules within an Ansible playbook. By specifying the token in the group/hetzner.hcloud.all defaults group, individual tasks can omit the token argument, reducing duplication and improving security when combined with Ansible Vault for storing sensitive data. The example creates a server using the preconfigured api_token from a vault variable called _vault_hcloud_api_token. Key dependencies include Ansible 2.10+ to support module_defaults and a properly configured vault.\nSOURCE: https://github.com/ansible-collections/hetzner.hcloud/blob/main/docs/docsite/rst/guides.rst#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Demonstrate the usage of the 'hetzner.hcloud.all' module_defaults group\n  hosts: localhost\n  connection: local\n\n  module_defaults:\n    group/hetzner.hcloud.all:\n      api_token: \"{{ _vault_hcloud_api_token }}\"\n\n  tasks:\n    - name: Create server\n      hetzner.hcloud.server:\n        name: my-server\n        server_type: cx22\n        image: debian-12\n        state: present\n```\n\n----------------------------------------\n\nTITLE: Providing API Token Directly in Ansible Playbook Module Arguments using YAML\nDESCRIPTION: This YAML snippet provides an example of passing the Hetzner Cloud API token directly as an argument to the hetzner.hcloud.server module within an Ansible playbook task. It creates a server named 'my-server' with specified server type and image, authenticating explicitly with the passed token. This approach works without environment variables but may expose the token in plaintext and is less secure. The required parameters are api_token (string), name (string), server_type (string), image (string), and state (string).\nSOURCE: https://github.com/ansible-collections/hetzner.hcloud/blob/main/docs/docsite/rst/guides.rst#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Create server\n  hetzner.hcloud.server:\n    api_token: LRK9DAWQ1ZAEFSrCNEEzLCUwhYX1U3g7wMg4dTlkkDC96fyDuyJ39nVbVjCKSDfj\n    name: my-server\n    server_type: cx22\n    image: debian-12\n    state: present\n```\n\n----------------------------------------\n\nTITLE: Required Python Packages for hetzner.hcloud\nDESCRIPTION: Defines the Python library dependencies required to run the `hetzner.hcloud` Ansible collection. `netaddr` is used for network address manipulation, `cryptography` for cryptographic operations, `python-dateutil` for date/time parsing, and `requests` for making HTTP requests to the Hetzner Cloud API.\nSOURCE: https://github.com/ansible-collections/hetzner.hcloud/blob/main/tests/integration/requirements.txt#_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\nnetaddr\ncryptography\n\npython-dateutil\nrequests\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies for Hetzner Cloud Ansible Collection\nDESCRIPTION: Lists required Python packages with minimum version requirements for the Hetzner Cloud Ansible collection. Includes python-dateutil (version 2.7.5 or higher) for date handling and requests (version 2.20 or higher) for HTTP communication with the Hetzner Cloud API.\nSOURCE: https://github.com/ansible-collections/hetzner.hcloud/blob/main/tests/constraints.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npython-dateutil>=2.7.5\nrequests>=2.20\n```\n\n----------------------------------------\n\nTITLE: Testing Integration Tests\nDESCRIPTION: This snippet provides the command to run integration tests for a specific module within the hetzner.hcloud collection using ansible-test. The command utilizes the integration test functionality, enabling developers to test the server module and ensure correct functionality within the Ansible environment.  It requires the cloud-config-hcloud.ini file to be present for authentication.\nSOURCE: https://github.com/ansible-collections/hetzner.hcloud/blob/main/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nansible-test integration --color --local  -vvv hetzner.hcloud.server // Executed all integration tests for server module\n```\n\n----------------------------------------\n\nTITLE: Cloning hetzner.hcloud Collection\nDESCRIPTION: This snippet provides the command to clone the hetzner.hcloud collection from GitHub into the Ansible collections path.  The command utilizes git to clone the repository and places the collection into the standard Ansible collection directory structure for hetzner.hcloud.\nSOURCE: https://github.com/ansible-collections/hetzner.hcloud/blob/main/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ngit clone git@github.com:ansible-collections/hetzner.hcloud.git ~/.ansible/collections/ansible_collections/hetzner/hcloud\n```"
  }
]