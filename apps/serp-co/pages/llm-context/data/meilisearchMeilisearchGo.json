[
  {
    "owner": "meilisearch",
    "repo": "meilisearch-go",
    "content": "TITLE: Adding Documents to Meilisearch Index in Go\nDESCRIPTION: Example of how to add documents to a Meilisearch index using the Go client. It demonstrates creating a client, initializing an index, and adding multiple documents.\nSOURCE: https://github.com/meilisearch/meilisearch-go/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/meilisearch/meilisearch-go\"\n)\n\nfunc main() {\n\tclient := meilisearch.New(\"http://localhost:7700\", meilisearch.WithAPIKey(\"foobar\"))\n\n\t// An index is where the documents are stored.\n\tindex := client.Index(\"movies\")\n\n\t// If the index 'movies' does not exist, Meilisearch creates it when you first add the documents.\n\tdocuments := []map[string]interface{}{\n        { \"id\": 1, \"title\": \"Carol\", \"genres\": []string{\"Romance\", \"Drama\"} },\n        { \"id\": 2, \"title\": \"Wonder Woman\", \"genres\": []string{\"Action\", \"Adventure\"} },\n        { \"id\": 3, \"title\": \"Life of Pi\", \"genres\": []string{\"Adventure\", \"Drama\"} },\n        { \"id\": 4, \"title\": \"Mad Max: Fury Road\", \"genres\": []string{\"Adventure\", \"Science Fiction\"} },\n        { \"id\": 5, \"title\": \"Moana\", \"genres\": []string{\"Fantasy\", \"Action\"} },\n        { \"id\": 6, \"title\": \"Philadelphia\", \"genres\": []string{\"Drama\"} },\n\t}\n\ttask, err := index.AddDocuments(documents)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n\n\tfmt.Println(task.TaskUID)\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Search with Filters using Meilisearch Go Client\nDESCRIPTION: Example of how to perform a custom search operation with filters using the Meilisearch Go client.\nSOURCE: https://github.com/meilisearch/meilisearch-go/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nsearchRes, err := index.Search(\"wonder\",\n    &meilisearch.SearchRequest{\n        Filter: \"id > 1 AND genres = Action\",\n    })\n```\n\n----------------------------------------\n\nTITLE: Performing Basic Search with Meilisearch Go Client\nDESCRIPTION: Example of how to perform a basic search operation using the Meilisearch Go client. It demonstrates the typo-tolerance feature of Meilisearch.\nSOURCE: https://github.com/meilisearch/meilisearch-go/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"os\"\n\n    \"github.com/meilisearch/meilisearch-go\"\n)\n\nfunc main() {\n    // Meilisearch is typo-tolerant:\n    searchRes, err := client.Index(\"movies\").Search(\"philoudelphia\",\n        &meilisearch.SearchRequest{\n            Limit: 10,\n        })\n    if err != nil {\n        fmt.Println(err)\n        os.Exit(1)\n    }\n\n    fmt.Println(searchRes.Hits)\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Search with Meilisearch Go Client\nDESCRIPTION: Example of how to perform a custom search operation with highlighting using the Meilisearch Go client.\nSOURCE: https://github.com/meilisearch/meilisearch-go/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    searchRes, err := client.Index(\"movies\").Search(\"wonder\",\n        &meilisearch.SearchRequest{\n            AttributesToHighlight: []string{\"*\"},\n        })\n    if err != nil {\n        fmt.Println(err)\n        os.Exit(1)\n    }\n\n    fmt.Println(searchRes.Hits)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Filterable Attributes in Meilisearch Index\nDESCRIPTION: Example of how to update filterable attributes for a Meilisearch index using the Go client.\nSOURCE: https://github.com/meilisearch/meilisearch-go/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntask, err := index.UpdateFilterableAttributes(&[]string{\"id\", \"genres\"})\n```\n\n----------------------------------------\n\nTITLE: Customizing Meilisearch Go Client\nDESCRIPTION: Example of how to customize the Meilisearch Go client with various options such as custom HTTP client, API key, content encoding, and retry behavior.\nSOURCE: https://github.com/meilisearch/meilisearch-go/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"net/http\"\n    \"github.com/meilisearch/meilisearch-go\"\n)\n\nfunc main() {\n\tclient := meilisearch.New(\"http://localhost:7700\",\n        meilisearch.WithAPIKey(\"foobar\"),\n        meilisearch.WithCustomClient(http.DefaultClient),\n        meilisearch.WithContentEncoding(meilisearch.GzipEncoding, meilisearch.BestCompression),\n        meilisearch.WithCustomRetries([]int{502}, 20),\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Meilisearch Go Client\nDESCRIPTION: Instructions for installing the Meilisearch Go client using the go get command.\nSOURCE: https://github.com/meilisearch/meilisearch-go/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/meilisearch/meilisearch-go\n```\n\n----------------------------------------\n\nTITLE: Generating EasyJson Marshalers\nDESCRIPTION: Command to regenerate optimized JSON marshaling code using easyjson when types.go is modified.\nSOURCE: https://github.com/meilisearch/meilisearch-go/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake easyjson\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Linting for Meilisearch Go SDK\nDESCRIPTION: Command to execute integration tests and linter checks for the project.\nSOURCE: https://github.com/meilisearch/meilisearch-go/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Version Configuration in Meilisearch Go SDK\nDESCRIPTION: Code snippet showing how to update the version number in version.go file during release process.\nSOURCE: https://github.com/meilisearch/meilisearch-go/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nconst VERSION = \"X.X.X\"\n```"
  }
]