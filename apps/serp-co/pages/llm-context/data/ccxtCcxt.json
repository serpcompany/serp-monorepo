[
  {
    "owner": "ccxt",
    "repo": "ccxt",
    "content": "TITLE: Error Handling in CCXT (JavaScript)\nDESCRIPTION: Demonstrates how to handle errors in CCXT using try-catch blocks in JavaScript.  It catches specific CCXT exceptions like NetworkError and ExchangeError and logs the error messages. It also shows how to handle generic exceptions.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_302\n\nLANGUAGE: javascript\nCODE:\n```\n// try to call a unified method\ntry {\n    const response = await exchange.fetchTicker ('ETH/BTC')\n    console.log (response)\n} catch (e) {\n    // if the exception is thrown, it is \"caught\" and can be handled here\n    // the handling reaction depends on the type of the exception\n    // and on the purpose or business logic of your application\n    if (e instanceof ccxt.NetworkError) {\n        console.log (exchange.id, 'fetchTicker failed due to a network error:', e.message)\n        // retry or whatever\n    } else if (e instanceof ccxt.ExchangeError) {\n        console.log (exchange.id, 'fetchTicker failed due to exchange error:', e.message)\n        // retry or whatever\n    } else {\n        console.log (exchange.id, 'fetchTicker failed with:', e.message)\n        // retry or whatever\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BaseError Class in PHP\nDESCRIPTION: This code snippet defines the `BaseError` class in PHP, which extends the built-in `Exception` class. It serves as the root class for all custom exception types within the CCXT library.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_308\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nclass BaseError extends \\Exception {}\n?>\n```\n\n----------------------------------------\n\nTITLE: Error Handling in CCXT (PHP)\nDESCRIPTION: Demonstrates how to handle errors in CCXT using try-catch blocks in PHP. It catches specific CCXT exceptions like NetworkError and ExchangeError and logs the error messages. It also shows how to handle generic exceptions.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_304\n\nLANGUAGE: php\nCODE:\n```\n// try to call a unified method\ntry {\n    $response = $exchange->fetch_trades('ETH/BTC');\n    print_r($response);\n} catch (\\ccxt\\NetworkError $e) {\n    echo $exchange->id . ' fetch_trades failed due to a network error: ' . $e->getMessage () . \"\\n\";\n    // retry or whatever\n} catch (\\ccxt\\ExchangeError $e) {\n    echo $exchange->id . ' fetch_trades failed due to exchange error: ' . $e->getMessage () . \"\\n\";\n    // retry or whatever\n} catch (Exception $e) {\n    echo $exchange->id . ' fetch_trades failed with: ' . $e->getMessage () . \"\\n\";\n    // retry or whatever\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Order Books for All Markets - Python\nDESCRIPTION: This Python code snippet iterates over the exchange's available markets and fetches the order book for each market's symbol, printing the order book to the console. A delay is introduced to adhere to rate limits.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_82\n\nLANGUAGE: python\nCODE:\n```\nimport time\ndelay = 2 # seconds\nfor symbol in exchange.markets:\n    print (exchange.fetch_order_book (symbol))\n    time.sleep (delay) # rate limit\n\n```\n\n----------------------------------------\n\nTITLE: Fetching OHLCV Data with CCXT in Python\nDESCRIPTION: This snippet demonstrates how to fetch OHLCV data for all markets on an exchange using the `fetch_ohlcv` method in Python. It iterates through each market, adds a delay to respect rate limits, and then fetches the OHLCV data for a 1-day timeframe.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_94\n\nLANGUAGE: python\nCODE:\n```\nimport time\nif exchange.has['fetchOHLCV']:\n    for symbol in exchange.markets:\n        time.sleep (exchange.rateLimit / 1000) # time.sleep wants seconds\n        print (symbol, exchange.fetch_ohlcv (symbol, '1d')) # one day\n```\n\n----------------------------------------\n\nTITLE: Attaching Stop Loss/Take Profit to Position (JS, Python)\nDESCRIPTION: This code demonstrates how to attach stop loss and take profit orders to a primary order when creating an order with CCXT. The stopLoss and takeProfit parameters are defined as dictionaries within the 'params' object, specifying 'triggerPrice' and optionally 'price'. These orders are conditional on the primary order's execution. Not all exchanges support this feature. The createOrder method is called with the symbol, type, side, amount, price and params.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_192\n\nLANGUAGE: javascript\nCODE:\n```\nconst params = {\n    'stopLoss': {\n        'triggerPrice': 12.34, // at what price it will trigger\n        'price': 12.00, // if exchange supports, 'price' param would be limit price (for market orders, don't include this param)\n    },\n    'takeProfit': {\n        // similar params here\n    }\n}\nconst order = await exchange.createOrder ('SOL/USDT', 'limit', 'buy', 0.5, 13, params)\n```\n\n----------------------------------------\n\nTITLE: JavaScript Comprehensive Exchange Example\nDESCRIPTION: Detailed example showing various CCXT operations including market loading, order book fetching, and order creation in JavaScript.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/python/README.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n// cjs example\n'use strict';\nconst ccxt = require ('ccxt');\n\n(async function () {\n    let kraken    = new ccxt.kraken ()\n    let bitfinex  = new ccxt.bitfinex ({ verbose: true })\n    let huobipro  = new ccxt.huobipro ()\n    let okcoinusd = new ccxt.okcoin ({\n        apiKey: 'YOUR_PUBLIC_API_KEY',\n        secret: 'YOUR_SECRET_PRIVATE_KEY',\n    })\n\n    const exchangeId = 'binance'\n        , exchangeClass = ccxt[exchangeId]\n        , exchange = new exchangeClass ({\n            'apiKey': 'YOUR_API_KEY',\n            'secret': 'YOUR_SECRET',\n        })\n\n    console.log (kraken.id,    await kraken.loadMarkets ())\n    console.log (bitfinex.id,  await bitfinex.loadMarkets  ())\n    console.log (huobipro.id,  await huobipro.loadMarkets ())\n\n    console.log (kraken.id,    await kraken.fetchOrderBook (kraken.symbols[0]))\n    console.log (bitfinex.id,  await bitfinex.fetchTicker ('BTC/USD'))\n    console.log (huobipro.id,  await huobipro.fetchTrades ('ETH/USDT'))\n\n    console.log (okcoinusd.id, await okcoinusd.fetchBalance ())\n\n    // sell 1 BTC/USD for market price, sell a bitcoin for dollars immediately\n    console.log (okcoinusd.id, await okcoinusd.createMarketSellOrder ('BTC/USD', 1))\n\n    // buy 1 BTC/USD for $2500, you pay $2500 and receive à¸¿1 when the order is closed\n    console.log (okcoinusd.id, await okcoinusd.createLimitBuyOrder ('BTC/USD', 1, 2500.00))\n\n    // pass/redefine custom exchange-specific order params: type, amount, price or whatever\n    // use a custom order type\n    bitfinex.createLimitSellOrder ('BTC/USD', 1, 10, { 'type': 'trailing-stop' })\n\n}) ();\n```\n\n----------------------------------------\n\nTITLE: Fetching All Tickers JavaScript\nDESCRIPTION: Fetches all tickers from an exchange using the `fetchTickers` method. It first checks if the exchange supports the `fetchTickers` method. It then fetches all tickers indexed by their symbols. Requires the CCXT library and a configured exchange instance.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_87\n\nLANGUAGE: javascript\nCODE:\n```\nif (exchange.has['fetchTickers']) {\n    console.log (await (exchange.fetchTickers ())) // all tickers indexed by their symbols\n}\n```\n\n----------------------------------------\n\nTITLE: Watching Order Book in Python\nDESCRIPTION: This snippet demonstrates how to watch the order book using the `watch_order_book` method in Python within CCXT Pro. It continuously fetches and prints the top asks and bids of the order book for a given symbol. The code includes error handling to catch and log any exceptions, allowing for retries.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nif exchange.has['watchOrderBook']:\n    while True:\n        try:\n            orderbook = await exchange.watch_order_book(symbol, limit, params)\n            print(exchange.iso8601(exchange.milliseconds()), symbol, orderbook['asks'][0], orderbook['bids'][0])\n        except Exception as e:\n            print(e)\n            # stop the loop on exception or leave it commented to retry\n            # raise e\n```\n\n----------------------------------------\n\nTITLE: Instantiating a CCXT Pro Exchange (JavaScript)\nDESCRIPTION: This snippet shows how to instantiate a CCXT Pro exchange instance in JavaScript, specifically a Binance exchange. It sets the `newUpdates` option to `false`, disabling the exclusive new updates mode and utilizing the sliding cache. This demonstrates how to create an exchange object that can be used to interact with the Binance API.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst ccxt = require ('ccxt').pro\nconst exchange = new ccxtpro.binance ({ newUpdates: false })\n```\n\n----------------------------------------\n\nTITLE: Fetching Order Book with Limit and Params - Javascript\nDESCRIPTION: This code snippet demonstrates how to fetch an order book from an exchange, specifying a limit on the number of orders to return and including exchange-specific parameters. The exchange-specific parameter 'group' is used to group orders by price.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\n\n(async function test () {\n    const ccxt = require ('ccxt')\n    const exchange = new ccxt.bitfinex ()\n    const limit = 5\n    const orders = await exchange.fetchOrderBook ('BTC/USD', limit, {\n        // this parameter is exchange-specific, all extra params have unique names per exchange\n        'group': 1, // 1 = orders are grouped by price, 0 = orders are separate\n    })\n}) ()\n\n```\n\n----------------------------------------\n\nTITLE: Watching Order Book with CCXT Pro (PHP)\nDESCRIPTION: This PHP code snippet demonstrates how to use CCXT Pro to subscribe to a WebSocket stream of order book updates for a given symbol. It checks if the exchange supports the `watchOrderBook` method, and if so, it enters an infinite loop to continuously fetch and display the top ask and bid prices from the order book. Error handling is included to catch and log any exceptions that occur during the process. Dependencies: CCXT Pro library.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nif ($exchange->has['watchOrderBook']) {\n    $exchange::execute_and_run(function() use ($exchange, $symbol, $limit, $params) {\n        while (true) {\n            try {\n                $orderbook = yield $exchange->watch_order_book($symbol, $limit, $params);\n                echo date('c'), ' ', $symbol, ' ', json_encode(array($orderbook['asks'][0], $orderbook['bids'][0])), \"\\n\";\n            } catch (Exception $e) {\n                echo get_class($e), ' ', $e->getMessage(), \"\\n\";\n            }\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling Examples in Multiple Languages\nDESCRIPTION: Demonstrates error handling patterns for API calls in JavaScript, Python, and PHP using try-catch blocks.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_174\n\nLANGUAGE: JavaScript\nCODE:\n```\ntry {\n    const response = await exchange.fetchTicker ('ETH/BTC')\n    console.log (response)\n} catch (e) {\n    if (e instanceof ccxt.NetworkError) {\n        console.log (exchange.id, 'fetchTicker failed due to a network error:', e.message)\n    } else if (e instanceof ccxt.ExchangeError) {\n        console.log (exchange.id, 'fetchTicker failed due to exchange error:', e.message)\n    } else {\n        console.log (exchange.id, 'fetchTicker failed with:', e.message)\n    }\n}\n```\n\nLANGUAGE: Python\nCODE:\n```\ntry:\n    response = await exchange.fetch_order_book('ETH/BTC')\n    print(response)\nexcept ccxt.NetworkError as e:\n    print(exchange.id, 'fetch_order_book failed due to a network error:', str(e))\nexcept ccxt.ExchangeError as e:\n    print(exchange.id, 'fetch_order_book failed due to exchange error:', str(e))\nexcept Exception as e:\n    print(exchange.id, 'fetch_order_book failed with:', str(e))\n```\n\nLANGUAGE: PHP\nCODE:\n```\ntry {\n    $response = $exchange->fetch_trades('ETH/BTC');\n    print_r($response);\n} catch (\\ccxt\\NetworkError $e) {\n    echo $exchange->id . ' fetch_trades failed due to a network error: ' . $e->getMessage () . \"\\n\";\n} catch (\\ccxt\\ExchangeError $e) {\n    echo $exchange->id . ' fetch_trades failed due to exchange error: ' . $e->getMessage () . \"\\n\";\n} catch (Exception $e) {\n    echo $exchange->id . ' fetch_trades failed with: ' . $e->getMessage () . \"\\n\";\n}\n```\n\n----------------------------------------\n\nTITLE: Watching Ticker with CCXT Pro (Python)\nDESCRIPTION: This Python code snippet demonstrates how to subscribe to a WebSocket stream of ticker updates for a symbol using CCXT Pro. It verifies that the exchange supports the `watch_ticker` method before proceeding.  It then enters an infinite loop, continuously fetching and printing the ticker data, along with a timestamp.  Error handling is included to catch and print any exceptions that occur.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n# Python\nif exchange.has['watchTicker']:\n    while True:\n        try:\n            ticker = await exchange.watch_ticker(symbol, params)\n            print(exchange.iso8601(exchange.milliseconds()), ticker)\n        except Exception as e:\n            print(e)\n            # stop the loop on exception or leave it commented to retry\n            # raise e\n```\n\n----------------------------------------\n\nTITLE: Initializing Exchange with API Credentials in JavaScript/PHP\nDESCRIPTION: Creates an exchange instance with API credentials. This is a generic pattern that works for any exchange supported by CCXT.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript/PHP\nCODE:\n```\nexchange = exchange_class({\n    'apiKey': 'YOUR_API_KEY',\n    'secret': 'YOUR_SECRET',\n})\n```\n\n----------------------------------------\n\nTITLE: Watching Order Book for Symbols with CCXT Pro (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates how to use CCXT Pro to subscribe to WebSocket streams of order book updates for multiple symbols. It checks if the exchange supports the `watchOrderBookForSymbols` method, and if so, it enters an infinite loop to continuously fetch and display the top ask and bid prices from the order books for the defined symbols ('BTC/USDT' and 'LTC/USDT'). Error handling is implemented to catch and log any exceptions that occur during the process.  The limit parameter controls the depth of the order book.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nif (exchange.has['watchOrderBookForSymbols']) {\n    while (true) {\n        try {\n            const orderbook = await exchange.watchOrderBookForSymbols (['BTC/USDT', 'LTC/USDT'], limit, params)\n            console.log (new Date (), symbol, orderbook['asks'][0], orderbook['bids'][0])\n        } catch (e) {\n            console.log (e)\n            // stop the loop on exception or leave it commented to retry\n            // throw e\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reloading Market Data with Force Reload (Javascript)\nDESCRIPTION: This JavaScript code snippet demonstrates how to load market data from the Kraken exchange using the CCXT library. It initializes the exchange, loads markets, displays market information, and then forces a reload of the market data using the `loadMarkets(true)` method. This method bypasses the cache and fetches fresh data from the exchange's API. The verbose mode is enabled to log HTTP requests.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\n(async () => {\n    let kraken = new ccxt.kraken ({ verbose: true }) // log HTTP requests\n    await kraken.loadMarkets () // request markets\n    console.log (kraken.id, kraken.markets)    // output a full list of all loaded markets\n    console.log (Object.keys (kraken.markets)) // output a short list of market symbols\n    console.log (kraken.markets['BTC/USD'])    // output single market details\n    await kraken.loadMarkets () // return a locally cached version, no reload\n    let reloadedMarkets = await kraken.loadMarkets (true) // force HTTP reload = true\n    console.log (reloadedMarkets['ETH/BTC'])\n}) ()\n```\n\n----------------------------------------\n\nTITLE: Fetching Mark, Index OHLCV Data - JavaScript (Convenience Methods)\nDESCRIPTION: This JavaScript snippet shows the use of convenience methods `fetchMarkOHLCV` and `fetchIndexOHLCV` to retrieve Mark and Index OHLCV data from an exchange. It assumes the ccxt library is installed and configured.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_100\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main () {\n    const exchange = new ccxt.binanceusdm ()\n    const markKlines = await exchange.fetchMarkOHLCV ('ADA/USDT', '1h')\n    console.log (markKlines)\n    const indexKlines = await exchange.fetchIndexOHLCV ('ADA/USDT', '1h')\n    console.log (indexKlines)\n}\n\nmain ()\n```\n\n----------------------------------------\n\nTITLE: Fetching Index OHLCV Data - Python\nDESCRIPTION: This Python example demonstrates fetching Index OHLCV data using `fetch_ohlcv` and convenience methods `fetch_mark_ohlcv` and `fetch_index_ohlcv`. It uses the `ccxt` library and the `pprint` function for formatted output.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_101\n\nLANGUAGE: python\nCODE:\n```\nexchange = ccxt.binance()\nresponse = exchange.fetch_ohlcv('ADA/USDT', '1h', params={'price':'index'})\npprint(response)\n# Convenience methods\nmark_klines = exchange.fetch_mark_ohlcv('ADA/USDT', '1h')\nindex_klines = exchange.fetch_index_ohlcv('ADA/USDT', '1h')\npprint(mark_klines)\npprint(index_klines)\n```\n\n----------------------------------------\n\nTITLE: Fetching Exchange Time - JavaScript\nDESCRIPTION: This JavaScript function demonstrates the usage of `fetchTime` method to get the current time from the exchange server in milliseconds.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_106\n\nLANGUAGE: javascript\nCODE:\n```\nfetchTime(params = {})\n```\n\n----------------------------------------\n\nTITLE: Exchange Status Structure\nDESCRIPTION: This JavaScript code describes the structure of the object returned by the `fetchStatus()` method, which represents the status of the exchange.  The object includes fields like `status`, `updated`, `eta`, and `url`.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_108\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    'status': 'ok', // 'ok', 'shutdown', 'error', 'maintenance'\n    'updated': undefined, // integer, last updated timestamp in milliseconds if updated via the API\n    'eta': undefined, // when the maintenance or outage is expected to end\n    'url': undefined, // a link to a GitHub issue or to an exchange post on the subject\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Market Price - Python\nDESCRIPTION: This snippet fetches the order book for the first available symbol from a cryptocurrency exchange using the CCXT library in Python. It then extracts the best bid and ask prices and calculates the spread. If the bids or asks arrays are empty, the corresponding bid or ask price is set to None.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_79\n\nLANGUAGE: python\nCODE:\n```\norderbook = exchange.fetch_order_book (exchange.symbols[0])\nbid = orderbook['bids'][0][0] if len (orderbook['bids']) > 0 else None\nask = orderbook['asks'][0][0] if len (orderbook['asks']) > 0 else None\nspread = (ask - bid) if (bid and ask) else None\nprint (exchange.id, 'market price', { 'bid': bid, 'ask': ask, 'spread': spread })\n\n```\n\n----------------------------------------\n\nTITLE: Trade Structure Example JavaScript\nDESCRIPTION: This snippet shows the structure of a trade object returned by CCXT, including information like ID, timestamp, symbol, order ID, type, side, price, amount, cost, and fees.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_207\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    'info':         { ... },                    // the original decoded JSON as is\n    'id':           '12345-67890:09876/54321',  // string trade id\n    'timestamp':    1502962946216,              // Unix timestamp in milliseconds\n    'datetime':     '2017-08-17 12:42:48.000',  // ISO8601 datetime with milliseconds\n    'symbol':       'ETH/BTC',                  // symbol\n    'order':        '12345-67890:09876/54321',  // string order id or undefined/None/null\n    'type':         'limit',                    // order type, 'market', 'limit' or undefined/None/null\n    'side':         'buy',                      // direction of the trade, 'buy' or 'sell'\n    'takerOrMaker': 'taker',                    // string, 'taker' or 'maker'\n    'price':        0.06917684,                 // float price in quote currency\n    'amount':       1.5,                        // amount of base currency\n    'cost':         0.10376526,                 // total cost, `price * amount`,\n    'fee':          {\n        'cost':  0.0015,                        // float\n        'currency': 'ETH',                      // usually base currency for buys, quote currency for sells\n        'rate': 0.002,                          // the fee rate (if available)\n    },\n    'fees': [\n        {\n            'cost':  0.0015,                    // float\n            'currency': 'ETH',                  // usually base currency for buys, quote currency for sells\n            'rate': 0.002,                      // the fee rate (if available)\n        },\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP/HTTPS and WebSocket Proxy in CCXT (JavaScript)\nDESCRIPTION: Shows how to configure both HTTP/HTTPS and WebSocket proxies in CCXT using JavaScript.  The `wsProxy` property is used in addition to `httpProxy` to route websocket connections through the proxy.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_294\n\nLANGUAGE: javascript\nCODE:\n```\nex.httpProxy = 'http://1.2.3.4:8080/';\nex.wsProxy   = 'http://1.2.3.4:8080/';\n```\n\n----------------------------------------\n\nTITLE: Configuring API Keys PHP\nDESCRIPTION: This snippet shows three ways to configure API keys in PHP. The first assigns API keys after instantiation. The second passes them to the constructor. The third dynamically instantiates an exchange class based on an exchange ID and configures the keys.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_146\n\nLANGUAGE: php\nCODE:\n```\ninclude 'ccxt.php'\n\n// any time\n$hitbtc = new \\ccxt\\hitbtc ();\n$hitbtc->apiKey = 'YOUR_HITBTC_API_KEY';\n$hitbtc->secret = 'YOUR_HITBTC_SECRET_KEY';\n\n// upon instantiation\n$zaif = new \\ccxt\\zaif (array (\n    'apiKey' => 'YOUR_ZAIF_API_KEY',\n    'secret' => 'YOUR_ZAIF_SECRET_KEY'\n));\n\n// from variable id\n$exchange_id = 'binance';\n$exchange_class = \"\\\\ccxt\\\\$exchange_id\";\n$exchange = new $exchange_class (array (\n    'apiKey' => 'YOUR_API_KEY',\n    'secret' => 'YOUR_SECRET',\n));\n```\n\n----------------------------------------\n\nTITLE: Fetching Leverage Tiers in JavaScript\nDESCRIPTION: Fetches the leverage tiers for one or more symbols, or for all markets if no symbols are provided.  The `symbols` parameter is an optional array of unified CCXT market symbols. Additional exchange specific parameters can be passed in via the `params` parameter. Returns an array of leverage tiers structures.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_115\n\nLANGUAGE: javascript\nCODE:\n```\nfetchLeverageTiers(symbols = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Fetching All Trading Pairs Isolated Borrow Rates in JavaScript\nDESCRIPTION: Fetches the borrow rates for all trading pairs. The `params` parameter allows for exchange-specific API parameters such as start time. Returns a dictionary of isolated borrow rate structures with unified market symbols as keys.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_112\n\nLANGUAGE: javascript\nCODE:\n```\nfetchIsolatedBorrowRates (params = {})\n```\n\n----------------------------------------\n\nTITLE: Fetching All Currencies Cross Borrow Rates in JavaScript\nDESCRIPTION: Fetches the borrow rates for all currencies. The `params` parameter allows for exchange-specific API parameters such as start time. Returns a dictionary of borrow rate structures with unified currency codes as keys.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_110\n\nLANGUAGE: javascript\nCODE:\n```\nfetchCrossBorrowRates (params = {})\n```\n\n----------------------------------------\n\nTITLE: Fetch Withdrawals Method\nDESCRIPTION: Explains the usage of the `fetchWithdrawals` method to retrieve multiple withdrawals. Supports filtering by currency code, since timestamp, and limit. It returns an array of transaction structures.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_224\n\nLANGUAGE: javascript\nCODE:\n```\nfetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Fetching Orders with Date-Based Pagination in CCXT\nDESCRIPTION: This snippet demonstrates fetching orders using date-based pagination in Python. It sets an initial 'since' timestamp and continuously fetches orders, updating 'since' with the timestamp of the last order.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_67\n\nLANGUAGE: Python\nCODE:\n```\nif exchange.has['fetchOrders']:\n    since = exchange.milliseconds () - 86400000  # -1 day from now\n    # alternatively, fetch from a certain starting datetime\n    # since = exchange.parse8601('2018-01-01T00:00:00Z')\n    all_orders = []\n    while since < exchange.milliseconds ():\n        symbol = None  # change for your symbol\n        limit = 20  # change for your limit\n        orders = await exchange.fetch_orders(symbol, since, limit)\n        if len(orders):\n            since = orders[len(orders) - 1]['timestamp'] + 1\n            all_orders += orders\n        else:\n            break\n```\n\n----------------------------------------\n\nTITLE: Creating Stop-Loss and Take-Profit Orders\nDESCRIPTION: Demonstrates how to create orders with stop-loss and take-profit parameters. Shows implementation in multiple languages with support for both market and limit order types.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_121\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst params = {\n    'stopLoss': {\n        'type': 'limit', // or 'market'\n        'price': 100.33,\n        'triggerPrice': 101.25,\n    },\n    'takeProfit': {\n        'type': 'market',\n        'triggerPrice': 150.75,\n    }\n}\nconst order = await exchange.createOrder (symbol, type, side, amount, price, params)\n```\n\nLANGUAGE: Python\nCODE:\n```\nsymbol = 'ETH/BTC'\ntype = 'limit'  # or 'market'\nside = 'buy'\namount = 123.45  # your amount\nprice = 115.321  # your price\nparams = {\n    'stopLoss': {\n        'type': 'limit', # or 'market'\n        'price': 100.33,\n        'stopLossPrice': 101.25,\n    },\n    'takeProfit': {\n        'type': 'market',\n        'takeProfitPrice': 150.75,\n    }\n}\norder = exchange.create_order (symbol, type, side, amount, price, params)\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$symbol = 'ETH/BTC';\n$type = 'limit'; // or 'market'\n$side = 'buy';\n$amount = 123.45; // your amount\n$price = 115.321; // your price\n$params = {\n    'stopLoss': {\n        'type': 'limit', // or 'market'\n        'price': 100.33,\n        'stopLossPrice': 101.25,\n    },\n    'takeProfit': {\n        'type': 'market',\n        'takeProfitPrice': 150.75,\n    }\n}\n$order = $exchange->create_order ($symbol, $type, $side, $amount, $price, $params);\n```\n\n----------------------------------------\n\nTITLE: Precision Mode Examples in JavaScript\nDESCRIPTION: Illustrates the three main precision modes (DECIMAL_PLACES, TICK_SIZE, and SIGNIFICANT_DIGITS) and their effects on formatting values. Shows practical examples of how the same input value results in different output based on the precision mode.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_33\n\nLANGUAGE: JavaScript\nCODE:\n```\n// case A\nexchange.precisionMode = ccxt.DECIMAL_PLACES\nmarket = exchange.market (symbol)\nmarket['precision']['amount'] === 8 // up to 8 decimals after the dot\nexchange.amountToPrecision (symbol, 0.123456789) === 0.12345678\nexchange.amountToPrecision (symbol, 0.0000000000123456789) === 0.0000000 === 0.0\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// case B\nexchange.precisionMode = ccxt.TICK_SIZE\nmarket = exchange.market (symbol)\nmarket['precision']['amount'] === 0.00000001 // up to 0.00000001 precision\nexchange.amountToPrecision (symbol, 0.123456789) === 0.12345678\nexchange.amountToPrecision (symbol, 0.0000000000123456789) === 0.00000000 === 0.0\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// case C\nexchange.precisionMode = ccxt.SIGNIFICANT_DIGITS\nmarket = exchange.market (symbol)\nmarket['precision']['amount'] === 8 // up to 8 significant non-zero digits\nexchange.amountToPrecision (symbol, 0.0000000000123456789) === 0.000000000012345678\nexchange.amountToPrecision (symbol, 123.4567890123456789) === 123.45678\n```\n\n----------------------------------------\n\nTITLE: Validating Required Credentials in Python with CCXT\nDESCRIPTION: Example of checking required credentials for Coinbase Pro exchange in Python. This code shows how to display the required credentials and verify if they are properly set up.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_93\n\nLANGUAGE: Python\nCODE:\n```\n# Python\nimport ccxt\nexchange = ccxt.coinbasepro()\nprint(exchange.requiredCredentials)  # prints required credentials\nexchange.check_required_credentials()  # raises AuthenticationError\n```\n\n----------------------------------------\n\nTITLE: Configuring API Keys JavaScript\nDESCRIPTION: This snippet shows three ways to configure API keys in JavaScript. The first assigns API keys after instantiation. The second passes them to the constructor. The third dynamically instantiates an exchange class based on an exchange ID and configures the keys.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_144\n\nLANGUAGE: javascript\nCODE:\n```\nconst ccxt = require ('ccxt')\n\n// any time\nlet kraken = new ccxt.kraken ()\nkraken.apiKey = 'YOUR_KRAKEN_API_KEY'\nkraken.secret = 'YOUR_KRAKEN_SECRET_KEY'\n\n// upon instantiation\nlet okcoin = new ccxt.okcoin ({\n    apiKey: 'YOUR_OKCOIN_API_KEY',\n    secret: 'YOUR_OKCOIN_SECRET_KEY',\n})\n\n// from variable id\nconst exchangeId = 'binance'\n    , exchangeClass = ccxt[exchangeId]\n    , exchange = new exchangeClass ({\n        'apiKey': 'YOUR_API_KEY',\n        'secret': 'YOUR_SECRET',\n    })\n```\n\n----------------------------------------\n\nTITLE: Creating Order with CCXT in JavaScript\nDESCRIPTION: The createOrder method used to place an order on an exchange. This method accepts symbol, type, side, amount, price, and optional parameters, and returns a unified order structure containing at least the order ID and raw exchange response.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_112\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateOrder (symbol, type, side, amount, price = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Fetching Deposits in PHP\nDESCRIPTION: Example of how to fetch deposits using the CCXT library in PHP. Checks if the exchange supports the fetch_deposits method before calling it.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_143\n\nLANGUAGE: PHP\nCODE:\n```\n// fetch_deposits ($code = null, $since = null, $limit = null, $params = {})\n\nif ($exchange->has['fetchDeposits']) {\n    $deposits = $exchange->fetch_deposits ($code, $since, $limit, $params);\n} else {\n    throw new Exception ($exchange->id . ' does not have the fetch_deposits method');\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Margin Adjustment History (JavaScript)\nDESCRIPTION: This method retrieves the history of margin adjustments made, either manually or automatically by the exchange. It supports filtering by symbol, type (add/reduce), since timestamp, and limit.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_263\n\nLANGUAGE: javascript\nCODE:\n```\nfetchMarginAdjustmentHistory (symbol = undefined, type = undefined, since = undefined, limit = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Positions Risk Structure Example - JavaScript\nDESCRIPTION: Example structure showing position risk response format including leverage, margins, and liquidation information.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_91\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    info: { ... },\n    symbol: 'CTSI/USDT',\n    contracts: 0,\n    contractSize: 1,\n    unrealizedPnl: 0,\n    leverage: 20,\n    liquidationPrice: 0.7313,\n    collateral: 0,\n    notional: 0,\n    markPrice: 0.7724,\n    entryPrice: 0,\n    timestamp: 1647420354000,\n    initialMargin: 0,\n    initialMarginPercentage: 0.05,\n    maintenanceMargin: 0,\n    maintenanceMarginPercentage: 0.01,\n    marginRatio: 0.4881,\n    datetime: \"2022-03-16T08:45:54.000Z\",\n    marginMode: 'cross',\n    side: \"long\",\n    hedged: false,\n    percentage: 78\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching and Plotting ETH/USDT Price Data with CCXT and Pandas\nDESCRIPTION: Retrieves historical OHLCV (Open-High-Low-Close-Volume) data for ETH/USDT with daily resolution, processes timestamps, and creates a line chart of closing prices using Pandas and Matplotlib.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/examples/py/playing_with_ccxt_example.ipynb#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nfrom datetime import datetime\n\npair = 'ETH/USDT'\n\n# Load OHLCV (open/high/low/close/volume) data with 1-day resolution\nohlcv = exchange.fetch_ohlcv (pair, '1d')\n\n# Get closing prices for each day\nprices = [x[4] for x in ohlcv]\n\n# Convert Unix timestamps to Python dates\ndates = [datetime.fromtimestamp (x[0] // 1000) for x in ohlcv]\n\n# Prepare a Pandas series object\ndata = pd.Series (prices, index=dates)\n\n# Draw a simple line chart\ndata.plot ()\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign Method in JavaScript for CCXT\nDESCRIPTION: Implementation of the sign method that prepares and signs API requests. It handles authentication, adds specific headers, and constructs the complete request URL with proper parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/ts/src/static_dependencies/ethers/utils/test.txt#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsign (path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {\n    let url = this.urls['api'][api] + '/' + this.implodeParams (path, params);\n    let query = this.omit (params, this.extractParams (path));\n    if (api === 'public') {\n        if (Object.keys (query).length) {\n            url += '?' + this.urlencode (query);\n        }\n    } else {\n        this.checkRequiredCredentials ();\n        const nonce = this.nonce ().toString ();\n        const timestamp = this.seconds ().toString ();\n        let auth = timestamp + nonce;\n        headers = {\n            'Content-Type': 'application/json',\n            'ACCESS-KEY': this.apiKey,\n            'ACCESS-TIMESTAMP': timestamp,\n        };\n        if (method === 'POST') {\n            if (Object.keys (query).length) {\n                body = this.json (query);\n                auth += body;\n            }\n        } else {\n            if (Object.keys (query).length) {\n                const queryString = this.urlencode (query);\n                url += '?' + queryString;\n                auth += queryString;\n            }\n        }\n        const signature = this.hmac (this.encode (auth), this.encode (this.secret));\n        headers['ACCESS-SIGN'] = signature;\n    }\n    return { 'url': url, 'method': method, 'body': body, 'headers': headers };\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Open Interest History with CCXT (JavaScript)\nDESCRIPTION: This method fetches the historical open interest data for a given contract symbol. It takes a symbol, timeframe, and optional since and limit parameters to filter the results. The params argument allows for exchange-specific parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_123\n\nLANGUAGE: javascript\nCODE:\n```\nfetchOpenInterestHistory (symbol, timeframe = '5m', since = undefined, limit = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Exchange Reference Table in Markdown\nDESCRIPTION: A markdown table containing information about supported cryptocurrency exchanges, including logos, API versions, exchange types, and certification status.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| [![coinex](https://user-images.githubusercontent.com/51840849/87182089-1e05fa00-c2ec-11ea-8da9-cc73b45abbbc.jpg)](https://www.coinex.com/register?refer_code=yw5fz)         | coinex        | [CoinEx](https://www.coinex.com/register?refer_code=yw5fz)                              | [![API Version 2](https://img.shields.io/badge/2-lightgray)](https://docs.coinex.com/api/v2)                                     | ![CEX â Centralized EXchange](https://img.shields.io/badge/CEX-green.svg \"CEX â Centralized EXchange\") | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n```\n\n----------------------------------------\n\nTITLE: Correct Exchange Instance Usage (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates the correct pattern of reusing a single exchange instance for multiple API calls. By reusing the instance, the built-in rate limiter can effectively manage the request rate and prevent exceeding the exchange's rate limits.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// DO THIS INSTEAD:\n\nconst binance = new ccxt.binance ()\n\nwhile (true) {\n    const result = await Promise.all ([\n        binance.fetchOrderBook ('BTC/USDT'),\n        binance.fetchOrderBook ('ETH/USDT'),\n        binance.fetchOrderBook ('ETH/BTC'),\n    ])\n    console.log (result)\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in CCXT (Python)\nDESCRIPTION: Demonstrates how to handle errors in CCXT using try-except blocks in Python.  It catches specific CCXT exceptions like NetworkError and ExchangeError and logs the error messages. It also shows how to handle generic exceptions.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_303\n\nLANGUAGE: python\nCODE:\n```\n# try to call a unified method\ntry:\n    response = await exchange.fetch_order_book('ETH/BTC')\n    print(response)\nexcept ccxt.NetworkError as e:\n    print(exchange.id, 'fetch_order_book failed due to a network error:', str(e))\n    # retry or whatever\nexcept ccxt.ExchangeError as e:\n    print(exchange.id, 'fetch_order_book failed due to exchange error:', str(e))\n    # retry or whatever\nexcept Exception as e:\n    print(exchange.id, 'fetch_order_book failed with:', str(e))\n    # retry or whatever\n```\n\n----------------------------------------\n\nTITLE: Configuring API Keys Python\nDESCRIPTION: This snippet shows three ways to configure API keys in Python. The first assigns API keys after instantiation. The second passes them to the constructor. The third dynamically instantiates an exchange class based on an exchange ID and configures the keys.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_145\n\nLANGUAGE: python\nCODE:\n```\nimport ccxt\n\n# any time\nbitfinex = ccxt.bitfinex ()\nbitfinex.apiKey = 'YOUR_BFX_API_KEY'\nbitfinex.secret = 'YOUR_BFX_SECRET'\n\n# upon instantiation\nhitbtc = ccxt.hitbtc ({\n    'apiKey': 'YOUR_HITBTC_API_KEY',\n    'secret': 'YOUR_HITBTC_SECRET_KEY',\n})\n\n# from variable id\nexchange_id = 'binance'\nexchange_class = getattr(ccxt, exchange_id)\nexchange = exchange_class({\n    'apiKey': 'YOUR_API_KEY',\n    'secret': 'YOUR_SECRET',\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Stop Loss and Take Profit Orders in Multiple Languages\nDESCRIPTION: Implementation of stop loss and take profit orders that are activated when price crosses the specified threshold in a specific direction. Examples in JavaScript, Python, and PHP.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_120\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\n\n// for a stop loss order\nconst params = {\n    'stopLossPrice': 55.45, // your stop loss price\n}\n\n// for a take profit order\nconst params = {\n    'takeProfitPrice': 120.45, // your take profit price\n}\n\nconst order = await exchange.createOrder (symbol, type, side, amount, price, params)\n```\n\nLANGUAGE: Python\nCODE:\n```\n# Python\n\n# for a stop loss order\nparams = {\n    'stopLossPrice': 55.45,  # your stop loss price\n}\n\n# for a take profit order\nparams = {\n    'takeProfitPrice': 120.45,  # your take profit price\n}\n\norder = exchange.create_order (symbol, type, side, amount, price, params)\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// PHP\n\n// for a stop loss order\n$params = {\n    'stopLossPrice': 55.45, // your stop loss price\n}\n\n// for a take profit order\n$params = {\n    'takeProfitPrice': 120.45, // your take profit price\n}\n\n$order = $exchange->create_order ($symbol, $type, $side, $amount, $price, $params);\n```\n\n----------------------------------------\n\nTITLE: Instantiating a CCXT Pro Exchange (PHP)\nDESCRIPTION: This snippet demonstrates how to instantiate a CCXT Pro exchange instance (KuCoin) in PHP using ReactPHP. The `newUpdates` option is set to `false`, indicating that the sliding cache will be used. This demonstrates how to create an exchange object with ReactPHP's event loop for interacting with the KuCoin API.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// PHP\nerror_reporting(E_ALL);\ndate_default_timezone_set('UTC');\nrequire_once 'vendor/autoload.php';\n\n$exchange = new \\ccxt\\pro\\kucoin(array( 'newUpdates' => false ));\n```\n\n----------------------------------------\n\nTITLE: Fetching Trades - JavaScript (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates fetching trades for each symbol on an exchange using the `fetchTrades` method. It iterates through the exchange's markets and prints the recent trades. It includes a sleep function to manage rate limits.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_102\n\nLANGUAGE: javascript\nCODE:\n```\nif (exchange.has['fetchTrades']) {\n    let sleep = (ms) => new Promise (resolve => setTimeout (resolve, ms));\n    for (symbol in exchange.markets) {\n        console.log (await exchange.fetchTrades (symbol))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose Mode in Python for CCXT Debugging\nDESCRIPTION: Python code example showing how to enable verbose mode in CCXT for detailed debugging output. This is useful when troubleshooting issues with exchange connections or API calls.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_182\n\nLANGUAGE: Python\nCODE:\n```\nimport ccxt\nexchange = ccxt.binance()\nexchange.load_markets()\nexchange.verbose = True  # enable verbose mode after loading the markets\n```\n\n----------------------------------------\n\nTITLE: Using CCXT in Node.js\nDESCRIPTION: Basic example showing how to import and use CCXT in Node.js to view available exchanges.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/readme.rst#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar ccxt = require ('ccxt')\n\nconsole.log (ccxt.exchanges) // print all available exchanges\n```\n\n----------------------------------------\n\nTITLE: Using CCXT in Browser JavaScript\nDESCRIPTION: Example of accessing CCXT functionality in browser-side JavaScript after loading the library via CDN.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/readme.rst#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log (ccxt.exchanges) // print all available exchanges\n```\n\n----------------------------------------\n\nTITLE: Fetching User Trades with CCXT (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to fetch a user's trade history using the `fetchMyTrades` method in the CCXT library. It checks if the exchange supports the `fetchMyTrades` functionality and then calls the method with optional symbol, since, limit, and params arguments. The function returns an ordered array of trade objects with the most recent trade last.  Proper error handling and pagination may be required for production usage.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_204\n\nLANGUAGE: JavaScript\nCODE:\n```\n// fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {})\n\nif (exchange.has['fetchMyTrades']) {\n    const trades = await exchange.fetchMyTrades (symbol, since, limit, params)\n}\n```\n\n----------------------------------------\n\nTITLE: Building OHLCV from Trades (Python)\nDESCRIPTION: This Python code demonstrates how to build OHLCV (Open, High, Low, Close, Volume) data from trade streams when an exchange does not provide OHLCV streams directly. It retrieves trades using `watch_trades`, then uses CCXT Pro's `build_ohlcvc` method to generate OHLCV candles with a 1-minute timeframe ('1m'). This approach can be faster than waiting for exchange-provided OHLCV data.  Dependencies: CCXT Pro.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n# Python\nexchange = ccxtpro.binance()\nif not exchange.has['watchOHLCV']:\n    while True:\n        try:\n            trades = await exchange.watch_trades(symbol)\n            ohlcvc = exchange.build_ohlcvc(trades, '1m')\n            print(ohlcvc)\n        except Exception as e:\n            print(e)\n            # stop the loop on exception or leave it commented to retry\n            # raise e\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Funds in Multiple Languages\nDESCRIPTION: These snippets show how to withdraw funds using the API in JavaScript, Python, and PHP. They include parameters for currency code, amount, address, and optional tag.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_137\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\nwithdraw (code, amount, address, tag = undefined, params = {})\n```\n\nLANGUAGE: Python\nCODE:\n```\n# Python\nwithdraw(code, amount, address, tag=None, params={})\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// PHP\nwithdraw ($code, $amount, $address, $tag = null, $params = array ())\n```\n\n----------------------------------------\n\nTITLE: Creating Trigger Orders in Multiple Languages\nDESCRIPTION: Implementation of a trigger order that activates when the price crosses a specific threshold from any direction. Examples in JavaScript, Python, and PHP.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_119\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\nconst symbol = 'ETH/BTC'\nconst type = 'limit' // or 'market'\nconst side = 'sell'\nconst amount = 123.45 // your amount\nconst price = 54.321 // your price\nconst params = {\n    'triggerPrice': 123.45, // your stop price\n}\nconst order = await exchange.createOrder (symbol, type, side, amount, price, params)\n```\n\nLANGUAGE: Python\nCODE:\n```\n# Python\nsymbol = 'ETH/BTC'\ntype = 'limit'  # or 'market'\nside = 'sell'\namount = 123.45  # your amount\nprice = 54.321  # your price\nparams = {\n    'triggerPrice': 123.45,  # your stop price\n}\norder = exchange.create_order(symbol, type, side, amount, price, params)\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// PHP\n$symbol = 'ETH/BTC';\n$type = 'limit'; // or 'market'\n$side = 'sell';\n$amount = 123.45; // your amount\n$price = 54.321; // your price\n$params = {\n    'triggerPrice': 123.45, // your stop price\n}\n$order = $exchange->create_order ($symbol, $type, $side, $amount, $price, $params);\n```\n\n----------------------------------------\n\nTITLE: UTC Date and Timestamp Operations in CCXT\nDESCRIPTION: Core methods for working with UTC dates and timestamps, including conversion between ISO8601 strings and timestamps in milliseconds/seconds.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_50\n\nLANGUAGE: JavaScript\nCODE:\n```\nexchange.parse8601 ('2018-01-01T00:00:00Z') == 1514764800000 // integer, Z = UTC\nexchange.iso8601 (1514764800000) == '2018-01-01T00:00:00Z'   // iso8601 string\nexchange.seconds ()      // integer UTC timestamp in seconds\nexchange.milliseconds () // integer UTC timestamp in milliseconds\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limiter in Python with CCXT\nDESCRIPTION: Example of how to enable or disable the built-in rate limiter in Python. The rate limiter helps avoid getting banned by exchanges by controlling request frequency.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\n# enable built-in rate limiting upon instantiation of the exchange\nexchange = ccxt.bitfinex({\n    # 'enableRateLimit': True,  # enabled by default\n})\n\n# or switch the built-in rate-limiter on or off later after instantiation\nexchange.enableRateLimit = True  # enable\nexchange.enableRateLimit = False  # disable\n```\n\n----------------------------------------\n\nTITLE: Running CCXT PHP Examples from Command Line\nDESCRIPTION: This command demonstrates how to execute PHP example files from the CCXT library using the command line. The -f flag tells PHP to parse and execute the specified file, with a comment indicating where to substitute the actual filename.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/examples/php/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp -f path/to/example.php # substitute for actual filename here\n```\n\n----------------------------------------\n\nTITLE: Checking CCXT Version in JavaScript\nDESCRIPTION: Code snippet to print the current version of CCXT in JavaScript, useful for troubleshooting and ensuring the latest version is installed.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_179\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log (ccxt.version) // JavaScript\n```\n\n----------------------------------------\n\nTITLE: Installing JQ on Different Platforms\nDESCRIPTION: Commands to install the JQ JSON processor on various operating systems\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CLI.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install jq\n```\n\nLANGUAGE: bash\nCODE:\n```\nbrew install jq\n```\n\nLANGUAGE: bash\nCODE:\n```\nchoco install jq -y\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT with npm locally\nDESCRIPTION: Command to install CCXT locally in a Node.js project using npm, adding it as a dependency in package.json.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/go/tests/out.txt#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install ccxt\n```\n\n----------------------------------------\n\nTITLE: Creating an Order using createOrder JavaScript\nDESCRIPTION: This code snippet demonstrates how to create an order using the `createOrder` method in JavaScript. It takes the symbol, type, side, amount, price, and optional parameters as input. The function returns an order structure containing the order ID and raw exchange information.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_170\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateOrder (symbol, type, side, amount, price = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: OHLCV Data Structure\nDESCRIPTION: This JavaScript code shows the structure of an OHLCV (Open, High, Low, Close, Volume) candle returned by the `fetchOHLCV` method. It's a flat array containing timestamp, open, high, low, close, and volume data points.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_98\n\nLANGUAGE: javascript\nCODE:\n```\n[\n    [\n        1504541580000, // UTC timestamp in milliseconds, integer\n        4235.4,        // (O)pen price, float\n        4240.6,        // (H)ighest price, float\n        4230.0,        // (L)owest price, float\n        4230.7,        // (C)losing price, float\n        37.72941911    // (V)olume float (usually in terms of the base currency, the exchanges docstring may list whether quote or base units are used)\n    ],\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Using decimalToPrecision Method in JavaScript, Python and PHP\nDESCRIPTION: The decimalToPrecision method helps format values to the required decimal precision with support for different rounding, counting and padding modes. This is the core formatting function used across CCXT implementations.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction decimalToPrecision (x, roundingMode, numPrecisionDigits, countingMode = DECIMAL_PLACES, paddingMode = NO_PADDING)\n```\n\nLANGUAGE: Python\nCODE:\n```\n# WARNING! The `decimal_to_precision` method is susceptible to getcontext().prec!\ndef decimal_to_precision(n, rounding_mode=ROUND, precision=None, counting_mode=DECIMAL_PLACES, padding_mode=NO_PADDING):\n```\n\nLANGUAGE: PHP\nCODE:\n```\nfunction decimalToPrecision ($x, $roundingMode = ROUND, $numPrecisionDigits = null, $countingMode = DECIMAL_PLACES, $paddingMode = NO_PADDING)\n```\n\n----------------------------------------\n\nTITLE: Exchange Object Structure (JavaScript)\nDESCRIPTION: This is an example of the structure and properties of an exchange object in the CCXT library. It illustrates the different attributes like id, name, countries, URLs, version, API endpoints, capabilities (has), timeframes, timeouts, rate limits, user agent, markets, symbols, currencies, and API keys. This object provides a blueprint for how exchanges are represented and configured within the CCXT framework.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    'id':   'exchange',                   // lowercase string exchange id\n    'name': 'Exchange',                   // human-readable string\n    'countries': [ 'US', 'CN', 'EU' ],   // array of ISO country codes\n    'urls': {\n        'api': 'https://api.example.com/data',  // string or dictionary of base API URLs\n        'www': 'https://www.example.com'        // string website URL\n        'doc': 'https://docs.example.com/api',  // string URL or array of URLs\n    },\n    'version':         'v1',             // string ending with digits\n    'api':             { ... },          // dictionary of api endpoints\n    'has': {                             // exchange capabilities\n        'CORS': false,\n        'cancelOrder': true,\n        'createDepositAddress': false,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchCanceledOrders': false,\n        'fetchClosedOrder': false,\n        'fetchClosedOrders': false,\n        'fetchCurrencies': false,\n        'fetchDepositAddress': false,\n        'fetchMarkets': true,\n        'fetchMyTrades': false,\n        'fetchOHLCV': false,\n        'fetchOpenOrder': false,\n        'fetchOpenOrders': false,\n        'fetchOrder': false,\n        'fetchOrderBook': true,\n        'fetchOrders': false,\n        'fetchStatus': 'emulated',\n        'fetchTicker': true,\n        'fetchTickers': false,\n        'fetchBidsAsks': false,\n        'fetchTrades': true,\n        'withdraw': false,\n    },\n    'timeframes': {                      // empty if the exchange.has['fetchOHLCV'] !== true\n        '1m': '1minute',\n        '1h': '1hour',\n        '1d': '1day',\n        '1M': '1month',\n        '1y': '1year',\n    },\n    'timeout':           10000,          // number in milliseconds\n    'rateLimit':         2000,           // number in milliseconds\n    'userAgent':        'ccxt/1.1.1 ...' // string, HTTP User-Agent header\n    'verbose':           false,          // boolean, output error details\n    'markets':          { ... }          // dictionary of markets/pairs by symbol\n    'symbols':          [ ... ]          // sorted list of string symbols (traded pairs)\n    'currencies':       { ... }          // dictionary of currencies by currency code\n    'markets_by_id':    { ... },         // dictionary of array of dictionaries (markets) by id\n    'currencies_by_id': { ... },         // dictionary of dictionaries (markets) by id\n    'apiKey':   '92560ffae9b8a0421...',  // string public apiKey (ASCII, hex, Base64, ...)\n    'secret':   '9aHjPmW+EtRRKN/Oi...'   // string private secret key\n    'password': '6kszf4aci8r',           // string password\n    'uid':      '123456',                // string user id\n    'options':          { ... },         // exchange-specific options\n    // ... other properties here ...\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Balance - JavaScript Example\nDESCRIPTION: This JavaScript example shows how to use the `fetchBalance` method with the ccxt library.  It initializes an exchange instance and asynchronously calls the `fetchBalance` method, logging the result to the console. Requires the ccxt library.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_155\n\nLANGUAGE: javascript\nCODE:\n```\n(async () => {\n    console.log (await exchange.fetchBalance ())\n}) ()\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Orders using createOrders JavaScript\nDESCRIPTION: This code snippet shows how to create multiple orders simultaneously using the `createOrders` method. The orders are passed as a list where each element contains the order details (symbol, type, side, amount, price, and params).\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_171\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateOrders (orders, params = {}) // orders is a list in which each element contains a symbol, type, side, amount, price and params\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP/HTTPS Proxy in CCXT (JavaScript)\nDESCRIPTION: Demonstrates how to set an HTTP or HTTPS proxy for non-websocket requests in CCXT using JavaScript. It shows how to configure both `httpProxy` and `httpsProxy` properties of an exchange instance.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_293\n\nLANGUAGE: javascript\nCODE:\n```\nex.httpProxy = 'http://1.2.3.4:8080/';\n// or\nex.httpsProxy = 'http://1.2.3.4:8080/';\n```\n\n----------------------------------------\n\nTITLE: Recommended Exchange Instance Reuse Pattern - JavaScript\nDESCRIPTION: Demonstrates the proper way to reuse a CCXT exchange instance for multiple API calls while respecting rate limits.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst binance = new ccxt.binance ({ enableRateLimit: true })\n\nwhile (true) {\n    const result = await Promise.all ([\n        binance.fetchOrderBook ('BTC/USDT'),\n        binance.fetchOrderBook ('ETH/USDT'), \n        binance.fetchOrderBook ('ETH/BTC'),\n    ])\n    console.log (result)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limiter in JavaScript with CCXT\nDESCRIPTION: Example of how to enable or disable the built-in rate limiter in JavaScript. The rate limiter prevents API bans by throttling requests according to exchange limits.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\n// enable built-in rate limiting upon instantiation of the exchange\nconst exchange = new ccxt.bitfinex ({\n    // 'enableRateLimit': true, // enabled by default\n})\n\n// or switch the built-in rate-limiter on or off later after instantiation\nexchange.enableRateLimit = true // enable\nexchange.enableRateLimit = false // disable\n```\n\n----------------------------------------\n\nTITLE: Creating Limit Orders JavaScript\nDESCRIPTION: This code snippet shows the various ways to create limit orders using JavaScript, including the `createLimitSellOrder`, `createLimitBuyOrder`, `createLimitOrder`, and `createOrder` methods. Each method takes the symbol, amount, price, and optional parameters as input.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_174\n\nLANGUAGE: JavaScript\nCODE:\n```\n// camelCaseNotation\nexchange.createLimitSellOrder (symbol, amount, price, params)\nexchange.createLimitBuyOrder (symbol, amount, price, params)\n\n// underscore_notation\nexchange.create_limit_sell_order (symbol, amount, price, params)\nexchange.create_limit_buy_order (symbol, amount, price, params)\n\n// using general createLimitOrder and side = 'buy' or 'sell'\nexchange.createLimitOrder (symbol, side, amount, price, params)\nexchange.create_limit_order (symbol, side, amount, price, params)\n\n// using general createOrder, type = 'limit' and side = 'buy' or 'sell'\nexchange.createOrder (symbol, 'limit', side, amount, price, params)\nexchange.create_order (symbol, 'limit', side, amount, price, params)\n```\n\n----------------------------------------\n\nTITLE: Transferring Funds with CCXT in Javascript\nDESCRIPTION: This snippet shows how to perform internal transfers between accounts on the same exchange using CCXT in Javascript. It uses the `transfer` method, which takes currency code, amount, fromAccount, toAccount, and optional parameters. It can also transfer funds into or out of futures accounts using `transferIn` and `transferOut` methods.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_242\n\nLANGUAGE: javascript\nCODE:\n```\ntransfer (code, amount, fromAccount, toAccount, params = {})\ntransferIn (code, amount, params = {})\ntransferOut (code, amount, params = {})\n```\n\n----------------------------------------\n\nTITLE: Basic WebSocket Connection with Pawl in PHP\nDESCRIPTION: Demonstrates how to establish a basic WebSocket connection to an echo server, send a message, receive the response, and close the connection. This example uses the simple connection interface provided by Pawl.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/ratchet/pawl/README.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n\\Ratchet\\Client\\connect('wss://echo.websocket.org:443')->then(function($conn) {\n    $conn->on('message', function($msg) use ($conn) {\n        echo \"Received: {$msg}\\n\";\n        $conn->close();\n    });\n\n    $conn->send('Hello World!');\n}, function ($e) {\n    echo \"Could not connect: {$e->getMessage()}\\n\";\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Proxy Promise\nDESCRIPTION: Example showing how to create a proxy promise from an existing promise or constructing a new one directly with Unpromise.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/ts/src/static_dependencies/watchable/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst proxyPromise = Unpromise.proxy(promise);\n```\n\n----------------------------------------\n\nTITLE: Creating an AppendStream in PHP\nDESCRIPTION: Demonstrates how to create and use an AppendStream to read from multiple streams sequentially.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/ringcentral-psr7/README.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse RingCentral\\Psr7;\n\n$a = Psr7\\stream_for('abc, ');\n$b = Psr7\\stream_for('123.');\n$composed = new Psr7\\AppendStream([$a, $b]);\n\n$composed->addStream(Psr7\\stream_for(' Above all listen to me').\n\necho $composed(); // abc, 123. Above all listen to me.\n```\n\n----------------------------------------\n\nTITLE: Using CachingStream for Seeking Non-Seekable Streams in PHP\nDESCRIPTION: Demonstrates how to use CachingStream to enable seeking on non-seekable streams by buffering read data.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/ringcentral-psr7/README.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse RingCentral\\Psr7;\n\n$original = Psr7\\stream_for(fopen('http://www.google.com', 'r'));\n$stream = new Psr7\\CachingStream($original);\n\n$stream->read(1024);\necho $stream->tell();\n// 1024\n\n$stream->seek(0);\necho $stream->tell();\n// 0\n```\n\n----------------------------------------\n\nTITLE: Implementing a Non-Seekable Stream with NoSeekStream in PHP\nDESCRIPTION: Shows how to create a NoSeekStream that wraps an existing stream and prevents seeking operations.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/ringcentral-psr7/README.md#2025-04-22_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse RingCentral\\Psr7;\n\n$original = Psr7\\stream_for('foo');\n$noSeek = new Psr7\\NoSeekStream($original);\n\necho $noSeek->read(3);\n// foo\nvar_export($noSeek->isSeekable());\n// false\n$noSeek->seek(0);\nvar_export($noSeek->read(3));\n// NULL\n```\n\n----------------------------------------\n\nTITLE: Creating a Stop Loss Order with CCXT (JS, Python, PHP)\nDESCRIPTION: This code snippet illustrates how to create a stop loss order using the CCXT library. It defines 'stopLossPrice' within the 'params' object, representing the price at which the stop loss order should be triggered. This requires the symbol, type, side, amount and price variables to be defined beforehand.  When the stopLossPrice is reached, the order will be executed at the market price or limit price below the specified stopLossPrice for closing a long position, or above for closing a short position.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_188\n\nLANGUAGE: php\nCODE:\n```\n// for a stop loss order\n$params = {\n    'stopLossPrice': 55.45, // your stop loss price\n}\n\n$order = $exchange->create_order ($symbol, $type, $side, $amount, $price, $params);\n```\n\n----------------------------------------\n\nTITLE: Fetching a Single Ticker JavaScript\nDESCRIPTION: Fetches the ticker for a specific symbol from an exchange using the `fetchTicker` method. It first checks if the exchange supports the `fetchTicker` method. It then fetches the ticker for BTC/USD and a random symbol from the exchange's markets. Requires the CCXT library and a configured exchange instance.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_84\n\nLANGUAGE: javascript\nCODE:\n```\nif (exchange.has['fetchTicker']) {\n    console.log (await (exchange.fetchTicker ('BTC/USD'))) // ticker for BTC/USD\n    let symbols = Object.keys (exchange.markets)\n    let random = Math.floor (Math.random () * (symbols.length - 1))\n    console.log (exchange.fetchTicker (symbols[random])) // ticker for a random symbol\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Order Parameters\nDESCRIPTION: Examples of using exchange-specific custom parameters when creating orders. Shows how to add special flags or order types that are unique to specific exchanges.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_122\n\nLANGUAGE: JavaScript\nCODE:\n```\nbitfinex.createLimitSellOrder ('BTC/USD', 1, 10, { 'type': 'trailing-stop' })\n```\n\nLANGUAGE: Python\nCODE:\n```\nkraken.create_market_buy_order('BTC/USD', 1, {'validate': true})\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$hitbtc->create_order ('BTC/USD', 'limit', 'buy', 1, 3000, array ('clientOrderId' => '123'));\n```\n\n----------------------------------------\n\nTITLE: Creating Limit Orders in CCXT\nDESCRIPTION: Multiple ways to create limit orders in CCXT using different notation styles (camelCase, underscore) and various method names. All methods require symbol, amount, price, and optional parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_114\n\nLANGUAGE: JavaScript\nCODE:\n```\n// camelCaseNotation\nexchange.createLimitSellOrder (symbol, amount, price, params)\nexchange.createLimitBuyOrder (symbol, amount, price, params)\n\n// underscore_notation\nexchange.create_limit_sell_order (symbol, amount, price, params)\nexchange.create_limit_buy_order (symbol, amount, price, params)\n\n// using general createLimitOrder and side = 'buy' or 'sell'\nexchange.createLimitOrder (symbol, side, amount, price, params)\nexchange.create_limit_order (symbol, side, amount, price, params)\n\n// using general createOrder, type = 'limit' and side = 'buy' or 'sell'\nexchange.createOrder (symbol, 'limit', side, amount, price, params)\nexchange.create_order (symbol, 'limit', side, amount, price, params)\n```\n\n----------------------------------------\n\nTITLE: Exchange .has Property - JavaScript Example\nDESCRIPTION: This example displays a typical structure of the `.has` property, showcasing flags corresponding to order API methods. Flags indicate if a method is available directly, not available, or emulated within ccxt.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_161\n\nLANGUAGE: javascript\nCODE:\n```\nexchange.has = {\n\n    // ... other flags ...\n\n    'fetchOrder': true, // available from the exchange directly and implemented in ccxt\n    'fetchOrders': false, // not available from the exchange or not implemented in ccxt\n    'fetchOpenOrders': true,\n    'fetchClosedOrders': 'emulated', // not available from the exchange, but emulated in ccxt\n\n    // ... other flags ...\n\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Exchange Instance Passing (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates the correct way of reusing the same exchange instance across function calls. Passing the same instance to the function ensures consistent rate limiting and avoids unnecessary market reloading.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// DO THIS INSTEAD:\n\nasync function tick (exchange) {\n    const response = await exchange.fetchOrderBook ('BTC/USDT')\n    // ... some processing here ...\n    return response\n}\n\nconst exchange = new ccxt.binance ()\nwhile (true) {\n    const result = await tick (exchange)\n    console.log (result)\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Margin for Open Positions in JavaScript\nDESCRIPTION: Functions to increase, reduce or set margin for existing leveraged positions. Useful for adjusting collateral to manage liquidation risk.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_165\n\nLANGUAGE: JavaScript\nCODE:\n```\naddMargin (symbol, amount, params = {})\nreduceMargin (symbol, amount, params = {})\nsetMargin (symbol, amount, params = {})\n```\n\n----------------------------------------\n\nTITLE: Implementing fetchTicker Method in JavaScript for CCXT\nDESCRIPTION: Implementation of the fetchTicker method that retrieves current market ticker data for a specific symbol. It processes API response to create standardized ticker objects with price, volume, and timestamp information.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/ts/src/static_dependencies/ethers/utils/test.txt#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync fetchTicker (symbol, params = {}) {\n    await this.loadMarkets ();\n    const market = this.market (symbol);\n    // make a specific API call\n    const ticker = await this.publicGetEndpointPathParameter ({\n        'path_parameter': market['id'],\n    });\n    // ticker is a single ticker for symbol\n    // ticker = {\n    //     'high': 1234.5,\n    //     'low': 1234.5,\n    //     'bid': 1234.5,\n    //     'ask': 1234.5,\n    //     'last': 1234.5,\n    //     'volume': 1234.5,\n    //     'timestamp': 1234567890,\n    //     ...\n    // }\n    // parse that ticker and return a unified ticker object\n    return this.parseTicker (ticker, market);\n}\n```\n\n----------------------------------------\n\nTITLE: Fetch Positions for Multiple Markets (JavaScript)\nDESCRIPTION: This code snippet illustrates how to fetch position information for multiple markets using the `fetchPositions` and `fetchAccountPositions` methods in CCXT.  It accepts an array of market symbols, or undefined to retrieve all positions, and exchange-specific parameters. The method returns an array of position structures.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_277\n\nLANGUAGE: javascript\nCODE:\n```\nfetchPositions (symbols = undefined, params = {})\nfetchAccountPositions (symbols = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Stream Decorator in PHP\nDESCRIPTION: Demonstrates how to implement a custom stream decorator using the StreamDecoratorTrait, which adds EOF callback functionality.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/ringcentral-psr7/README.md#2025-04-22_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse Psr\\Http\\Message\\StreamInterface;\nuse RingCentral\\Psr7\\StreamDecoratorTrait;\n\nclass EofCallbackStream implements StreamInterface\n{\n    use StreamDecoratorTrait;\n\n    private $callback;\n\n    public function __construct(StreamInterface $stream, callable $cb)\n    {\n        $this->stream = $stream;\n        $this->callback = $cb;\n    }\n\n    public function read($length)\n    {\n        $result = $this->stream->read($length);\n\n        // Invoke the callback when EOF is hit.\n        if ($this->eof()) {\n            call_user_func($this->callback);\n        }\n\n        return $result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Stream Decorator in PHP\nDESCRIPTION: Shows how to use the custom EofCallbackStream decorator to add EOF callback functionality to an existing stream.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/ringcentral-psr7/README.md#2025-04-22_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nuse RingCentral\\Psr7;\n\n$original = Psr7\\stream_for('foo');\n\n$eofStream = new EofCallbackStream($original, function () {\n    echo 'EOF!';\n});\n\n$eofStream->read(2);\n$eofStream->read(1);\n// echoes \"EOF!\"\n$eofStream->seek(0);\n$eofStream->read(3);\n// echoes \"EOF!\"\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to API Methods in CCXT\nDESCRIPTION: Examples of how to pass parameters to API methods in CCXT for different programming languages. This demonstrates the use of associative arrays or dictionaries to pass key-value parameters to exchange-specific API endpoints.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_47\n\nLANGUAGE: JavaScript\nCODE:\n```\nbitso.publicGetTicker ({ book: 'eth_mxn' })\n```\n\nLANGUAGE: Python\nCODE:\n```\nccxt.zaif().public_get_ticker_pair ({ 'pair': 'btc_jpy' })\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$luno->public_get_ticker (array ('pair' => 'XBTIDR'));\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Client Order ID\nDESCRIPTION: Examples of setting custom clientOrderId when creating orders to help track and identify orders. Shows implementation across different programming languages.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_123\n\nLANGUAGE: JavaScript\nCODE:\n```\nexchange.createOrder (symbol, type, side, amount, price, {\n    'clientOrderId': 'Hello',\n})\n```\n\nLANGUAGE: Python\nCODE:\n```\nexchange.create_order(symbol, type, side, amount, price, {\n    'clientOrderId': 'World',\n})\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$exchange->create_order($symbol, $type, $side, $amount, $price, array(\n    'clientOrderId' => 'Foobar',\n))\n```\n\n----------------------------------------\n\nTITLE: Instantiating Exchanges with CCXT in JavaScript\nDESCRIPTION: This snippet shows how to instantiate various cryptocurrency exchanges using the CCXT library in JavaScript, including setting unique IDs and accessing exchanges by variable ID. Requires the CCXT JavaScript library to be installed.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ccxt = require ('ccxt')\nlet exchange = new ccxt.kraken () // default id\nlet kraken1 = new ccxt.kraken ({ id: 'kraken1' })\nlet kraken2 = new ccxt.kraken ({ id: 'kraken2' })\nlet id = 'coinbasepro'\nlet coinbasepro = new ccxt[id] ();\n\n// from variable id\nconst exchangeId = 'binance'\n    , exchangeClass = ccxt[exchangeId]\n    , exchange = new exchangeClass ({\n        'apiKey': 'YOUR_API_KEY',\n        'secret': 'YOUR_SECRET',\n    })\n```\n\n----------------------------------------\n\nTITLE: Creating a Take Profit Order with CCXT (JS, Python, PHP)\nDESCRIPTION: This snippet shows how to create a take profit order using CCXT. The 'takeProfitPrice' parameter in the 'params' object specifies the price at which the take profit order will be triggered. The symbol, type, side, amount and price variables needs to be defined beforehand.  When the takeProfitPrice is reached, the position will be closed at market price or the limit price higher than your takeProfitPrice for closing a long position, or lower than your takeProfitPrice for closing a short position.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_189\n\nLANGUAGE: javascript\nCODE:\n```\n// for a take profit order\nconst params = {\n    'takeProfitPrice': 120.45, // your take profit price\n}\n\nconst order = await exchange.createOrder (symbol, type, side, amount, price, params)\n```\n\n----------------------------------------\n\nTITLE: Formatting Amount and Price Example (JS)\nDESCRIPTION: JavaScript example demonstrating how to format amount and price values using `amountToPrecision` and `priceToPrecision` after loading markets.  The example initializes a symbol, amount, and price and prints the formatted values to the console.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait exchange.loadMarkets ()\nconst symbol = 'BTC/USDT'\nconst amount = 1.2345678 // amount in base currency BTC\nconst price = 87654.321 // price in quote currency USDT\nconst formattedAmount = exchange.amountToPrecision (symbol, amount)\nconst formattedPrice = exchange.priceToPrecision (symbol, price)\nconsole.log (formattedAmount, formattedPrice)\n```\n\n----------------------------------------\n\nTITLE: Fetching OHLCV Data with CCXT in JavaScript\nDESCRIPTION: This snippet shows how to fetch OHLCV data (candlestick data) for all markets on an exchange using the `fetchOHLCV` method in JavaScript. It iterates through each market, adds a delay to respect rate limits, and then fetches the OHLCV data for a 1-minute timeframe.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_93\n\nLANGUAGE: javascript\nCODE:\n```\nlet sleep = (ms) => new Promise (resolve => setTimeout (resolve, ms));\nif (exchange.has.fetchOHLCV) {\n    for (symbol in exchange.markets) {\n        await sleep (exchange.rateLimit) // milliseconds\n        console.log (await exchange.fetchOHLCV (symbol, '1m')) // one minute\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Orders with ID-Based Pagination in CCXT\nDESCRIPTION: This snippet demonstrates fetching orders using ID-based pagination in Python. It starts with a 'from_id' and repeatedly fetches orders, using 'from_id' to paginate through the results.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_70\n\nLANGUAGE: Python\nCODE:\n```\nif exchange.has['fetchOrders']:\n    from_id = 'abc123'  # all ids are strings\n    all_orders = []\n    while True:\n        symbol = None  # change for your symbol\n        since = None\n        limit = 20  # change for your limit\n        params = {\n            'from_id': from_id,  # exchange-specific non-unified parameter name\n        }\n        orders = await exchange.fetch_orders(symbol, since, limit, params)\n        if len(orders):\n            from_id = orders[len(orders) - 1]['id']\n            all_orders += orders\n        else:\n            break\n```\n\n----------------------------------------\n\nTITLE: Overriding Nonce JavaScript\nDESCRIPTION: This snippet showcases how to override the nonce in JavaScript. It provides four different methods: redefining in the constructor, redefining explicitly, using milliseconds, and using newer ES syntax.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_148\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\n\n// 1: custom nonce redefined in constructor parameters\nlet nonce = 1\nlet kraken1 = new ccxt.kraken ({ nonce: () => nonce++ })\n\n// 2: nonce redefined explicitly\nlet kraken2 = new ccxt.kraken ()\nkraken2.nonce = function () { return nonce++ } // uses same nonce as kraken1\n\n// 3: milliseconds nonce\nlet kraken3 = new ccxt.kraken ({\n    nonce: function () { return this.milliseconds () },\n})\n\n// 4: newer ES syntax\nlet kraken4 = new ccxt.kraken ({\n    nonce () { return this.milliseconds () },\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Market Order Support JavaScript\nDESCRIPTION: This snippet shows how to check if an exchange supports market orders using the `.has['createMarketOrder']` property in JavaScript.  This is useful for determining if you can use market orders with a particular exchange.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_176\n\nLANGUAGE: javascript\nCODE:\n```\nif (exchange.has['createMarketOrder']) {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Exchange Instance Pattern with Function - JavaScript\nDESCRIPTION: Demonstrates the recommended pattern of passing an exchange instance to functions rather than creating new instances.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function tick (exchange) {\n    const response = await exchange.fetchOrderBook ('BTC/USDT')\n    // ... some processing here ...\n    return response\n}\n\nconst exchange = new ccxt.binance ({ enableRateLimit: true })\nwhile (true) {\n    const result = await tick (exchange)\n    console.log (result)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Market Orders in CCXT\nDESCRIPTION: Multiple ways to create market orders in CCXT using different notation styles and method names. Market orders are executed immediately at the best available price and don't require a price parameter.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_115\n\nLANGUAGE: JavaScript\nCODE:\n```\n// camelCaseNotation\nexchange.createMarketSellOrder (symbol, amount, params)\nexchange.createMarketBuyOrder (symbol, amount, params)\n\n// underscore_notation\nexchange.create_market_sell_order (symbol, amount, params)\nexchange.create_market_buy_order (symbol, amount, params)\n\n// using general createMarketOrder and side = 'buy' or 'sell'\nexchange.createMarketOrder (symbol, side, amount, params)\nexchange.create_market_order (symbol, side, amount, params)\n\n// using general createOrder, type = 'market' and side = 'buy' or 'sell'\nexchange.createOrder (symbol, 'market', side, amount, ...)\nexchange.create_order (symbol, 'market', side, amount, ...)\n```\n\n----------------------------------------\n\nTITLE: Creating Market Sell/Buy Orders JavaScript\nDESCRIPTION: This snippet demonstrates how to create market sell and buy orders using the CCXT library in JavaScript. It shows both camelCase and underscore notations, as well as using the general createMarketOrder and createOrder methods.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_175\n\nLANGUAGE: javascript\nCODE:\n```\n// camelCaseNotation\nexchange.createMarketSellOrder (symbol, amount, params)\nexchange.createMarketBuyOrder (symbol, amount, params)\n\n// underscore_notation\nexchange.create_market_sell_order (symbol, amount, params)\nexchange.create_market_buy_order (symbol, amount, params)\n\n// using general createMarketOrder and side = 'buy' or 'sell'\nexchange.createMarketOrder (symbol, side, amount, params)\nexchange.create_market_order (symbol, side, amount, params)\n\n// using general createOrder, type = 'market' and side = 'buy' or 'sell'\nexchange.createOrder (symbol, 'market', side, amount, ...)\nexchange.create_order (symbol, 'market', side, amount, ...)\n```\n\n----------------------------------------\n\nTITLE: Configuring API Keys in Python with CCXT\nDESCRIPTION: Examples of setting up API keys for different exchanges in Python. Demonstrates three methods: assigning keys after instantiation, providing keys during instantiation, and using a variable exchange ID.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_96\n\nLANGUAGE: Python\nCODE:\n```\n# Python\n\nimport ccxt\n\n# any time\nbitfinex = ccxt.bitfinex ()\nbitfinex.apiKey = 'YOUR_BFX_API_KEY'\nbitfinex.secret = 'YOUR_BFX_SECRET'\n\n# upon instantiation\nhitbtc = ccxt.hitbtc ({\n    'apiKey': 'YOUR_HITBTC_API_KEY',\n    'secret': 'YOUR_HITBTC_SECRET_KEY',\n})\n\n# from variable id\nexchange_id = 'binance'\nexchange_class = getattr(ccxt, exchange_id)\nexchange = exchange_class({\n    'apiKey': 'YOUR_API_KEY',\n    'secret': 'YOUR_SECRET',\n})\n```\n\n----------------------------------------\n\nTITLE: Setting clientOrderId in Python\nDESCRIPTION: Demonstrates how to set a custom `clientOrderId` when creating an order using the CCXT library in Python. The `clientOrderId` is included within the `params` object passed to the `create_order` method. Requires symbol, type, side, amount, and price to be defined.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_202\n\nLANGUAGE: Python\nCODE:\n```\nexchange.create_order(symbol, type, side, amount, price, {\n    'clientOrderId': 'World',\n})\n```\n\n----------------------------------------\n\nTITLE: Funding Rate Structure Example - JavaScript\nDESCRIPTION: Example structure showing funding rate response format including mark price, index price, and funding rate timestamps.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_88\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    info: { ... },\n    symbol: 'BTC/USDT:USDT',\n    markPrice: 39294.43,\n    indexPrice: 39291.78,\n    interestRate: 0.0003,\n    estimatedSettlePrice: undefined,\n    timestamp: undefined,\n    datetime: undefined,\n    fundingRate: 0.000072,\n    fundingTimestamp: 1645833600000,\n    fundingDatetime: '2022-02-26T00:00:00.000Z',\n    nextFundingRate: -0.000018,\n    nextFundingTimestamp: undefined,\n    nextFundingDatetime: undefined,\n    previousFundingRate: undefined,\n    previousFundingTimestamp: undefined,\n    previousFundingDatetime: undefined\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Market Price - Javascript\nDESCRIPTION: This snippet retrieves the best bid and ask prices from an order book and calculates the spread. It fetches the order book for the first symbol available and checks if the bid and ask arrays have elements before extracting the price.  If either array is empty, bid or ask will be undefined.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\nlet orderbook = await exchange.fetchOrderBook (exchange.symbols[0])\nlet bid = orderbook.bids.length ? orderbook.bids[0][0] : undefined\nlet ask = orderbook.asks.length ? orderbook.asks[0][0] : undefined\nlet spread = (bid && ask) ? ask - bid : undefined\nconsole.log (exchange.id, 'market price', { bid, ask, spread })\n\n```\n\n----------------------------------------\n\nTITLE: Configuring API Keys in PHP with CCXT\nDESCRIPTION: Examples of setting up API keys for different exchanges in PHP. Shows three approaches: setting keys after instantiation, providing keys during instantiation, and using a variable exchange ID.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_97\n\nLANGUAGE: PHP\nCODE:\n```\n// PHP\n\ninclude 'ccxt.php'\n\n// any time\n$quoinex = new \\ccxt\\quoinex ();\n$quoinex->apiKey = 'YOUR_QUOINE_API_KEY';\n$quoinex->secret = 'YOUR_QUOINE_SECRET_KEY';\n\n// upon instantiation\n$zaif = new \\ccxt\\zaif (array (\n    'apiKey' => 'YOUR_ZAIF_API_KEY',\n    'secret' => 'YOUR_ZAIF_SECRET_KEY'\n));\n\n// from variable id\n$exchange_id = 'binance';\n$exchange_class = \"\\\\ccxt\\\\$exchange_id\";\n$exchange = new $exchange_class (array (\n    'apiKey' => 'YOUR_API_KEY',\n    'secret' => 'YOUR_SECRET',\n));\n```\n\n----------------------------------------\n\nTITLE: Fetching OHLCV Data with CCXT in Python\nDESCRIPTION: Example of fetching OHLCV (Open, High, Low, Close, Volume) data from a cryptocurrency exchange using CCXT library in Python, including standard, mark and index price OHLCV retrievals.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_80\n\nLANGUAGE: Python\nCODE:\n```\nresponse = exchange.fetch_ohlcv('ADA/USDT', '1h', params={'price':'index'})\npprint(response)\n# Convenience methods\nmark_klines = exchange.fetch_mark_ohlcv('ADA/USDT', '1h')\nindex_klines = exchange.fetch_index_ohlcv('ADA/USDT', '1h')\npprint(mark_klines)\npprint(index_klines)\n```\n\n----------------------------------------\n\nTITLE: Asynchronous API Call - JavaScript\nDESCRIPTION: Example of making asynchronous API calls using JavaScript with async/await syntax to fetch symbols and ticker data.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_44\n\nLANGUAGE: JavaScript\nCODE:\n```\n(async () => {\n    let pairs = await kraken.publicGetSymbolsDetails ()\n    let marketIds = Object.keys (pairs['result'])\n    let marketId = marketIds[0]\n    let ticker = await kraken.publicGetTicker ({ pair: marketId })\n    console.log (kraken.id, marketId, ticker)\n}) ()\n```\n\n----------------------------------------\n\nTITLE: Create Spot Margin Order with Margin Mode (JavaScript)\nDESCRIPTION: Example code snippet for creating a spot margin order using the createOrder method, while specifying the marginMode parameter.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_267\n\nLANGUAGE: javascript\nCODE:\n```\nconst params = {\n    'marginMode': 'isolated', // or 'cross'\n}\nconst order = await exchange.createOrder ('ETH/USDT', 'market', 'buy', 0.1, 1500, params)\n```\n\n----------------------------------------\n\nTITLE: Implementing fetchBalance Method in JavaScript for CCXT\nDESCRIPTION: Implementation of the fetchBalance method that retrieves user account balances. It processes API response data to create a standardized balance object with free, used, and total amounts for each currency.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/ts/src/static_dependencies/ethers/utils/test.txt#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nasync fetchBalance (params = {}) {\n    // make a specific API call\n    const balances = await this.privateGetEndpointPath (params);\n    // or\n    // const balances = await this.privateGetEndpointPathParameter ({\n    //     'path_parameter': 'value',\n    // });\n    //\n    // balances is a map of currencies\n    // balances = {\n    //     'BTC': {\n    //         'free': 1234.5,\n    //         'used': 1234.5,\n    //         'total': 1234.5,\n    //     },\n    //     'LTC': {\n    //         'free': 1234.5,\n    //         'used': 1234.5,\n    //         'total': 1234.5,\n    //     },\n    //     ...\n    // }\n    const result = { 'info': balances };\n    // parse each currency balance\n    const keys = Object.keys (balances);\n    for (let i = 0; i < keys.length; i++) {\n        const id = keys[i];\n        const balance = balances[id];\n        const code = this.safeCurrencyCode (id);\n        const account = this.account ();\n        account['free'] = this.safeFloat (balance, 'free');\n        account['used'] = this.safeFloat (balance, 'used');\n        account['total'] = this.safeFloat (balance, 'total');\n        result[code] = account;\n    }\n    return this.parseBalance (result);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Market Buy Order with Price Specification in JavaScript\nDESCRIPTION: Example of creating a market buy order when the exchange requires price specification. This uses the default option 'createMarketBuyOrderRequiresPrice' set to true, which calculates the total cost as amount * price.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_117\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst exchange = new ccxt.cex ({\n    'apiKey': YOUR_API_KEY,\n    'secret': 'YOUR_SECRET',\n    // 'options': {\n    //     'createMarketBuyOrderRequiresPrice': true, // default\n    // },\n})\n\n;(async () => {\n\n    // when `createMarketBuyOrderRequiresPrice` is true, we can pass the price\n    // so that the total cost of the order would be calculated inside the library\n    // by multiplying the amount over price (amount * price)\n\n    const symbol = 'BTC/USD'\n    const amount = 2 // BTC\n    const price = 9000 // USD\n    // cost = amount * price = 2 * 9000 = 18000 (USD)\n\n    // note that we don't use createMarketBuyOrder here, instead we use createOrder\n    // createMarketBuyOrder will omit the price and will not work when\n    // exchange.options['createMarketBuyOrderRequiresPrice'] = true\n    const order = await exchange.createOrder (symbol, 'market', 'buy', amount, price)\n\n    console.log (order)\n}) ()\n```\n\n----------------------------------------\n\nTITLE: Exchange Capability Flags in CCXT\nDESCRIPTION: Definition of the 'has' property that contains flags for exchange capabilities. This shows which methods are available for each exchange and how they are implemented.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\n'has': {\n\n    'CORS': false,  // has Cross-Origin Resource Sharing enabled (works from browser) or not\n\n    'publicAPI': true,  // has public API available and implemented, true/false\n    'privateAPI': true, // has private API available and implemented, true/false\n\n    // unified methods availability flags (can be true, false, or 'emulated'):\n\n    'cancelOrder': true,\n    'createDepositAddress': false,\n    'createOrder': true,\n    'fetchBalance': true,\n    'fetchCanceledOrders': false,\n    'fetchClosedOrder': false,\n    'fetchClosedOrders': false,\n    'fetchCurrencies': false,\n    'fetchDepositAddress': false,\n    'fetchMarkets': true,\n    'fetchMyTrades': false,\n    'fetchOHLCV': false,\n    'fetchOpenOrder': false,\n    'fetchOpenOrders': false,\n    'fetchOrder': false,\n    'fetchOrderBook': true,\n    'fetchOrders': false,\n    'fetchStatus': 'emulated',\n    'fetchTicker': true,\n    'fetchTickers': false,\n    'fetchBidsAsks': false,\n    'fetchTrades': true,\n    'withdraw': false,\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Stop Loss Order with CCXT (JS, Python, PHP)\nDESCRIPTION: This code snippet illustrates how to create a stop loss order using the CCXT library. It defines 'stopLossPrice' within the 'params' object, representing the price at which the stop loss order should be triggered. This requires the symbol, type, side, amount and price variables to be defined beforehand.  When the stopLossPrice is reached, the order will be executed at the market price or limit price below the specified stopLossPrice for closing a long position, or above for closing a short position.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_187\n\nLANGUAGE: python\nCODE:\n```\n# for a stop loss order\nparams = {\n    'stopLossPrice': 55.45,  # your stop loss price\n}\n\norder = exchange.create_order (symbol, type, side, amount, price, params)\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Rate Limiter (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to enable or disable the built-in rate limiter in CCXT when instantiating an exchange object, or after the object is created. Enabling the rate limiter helps prevent exceeding the exchange's API rate limits.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// enable built-in rate limiting upon instantiation of the exchange\nconst exchange = new ccxt.bitfinex ({\n    // 'enableRateLimit': true, // enabled by default\n})\n\n// or switch the built-in rate-limiter on or off later after instantiation\nexchange.enableRateLimit = true // enable\nexchange.enableRateLimit = false // disable\n```\n\n----------------------------------------\n\nTITLE: Fetching Trades by Order ID in PHP with CCXT\nDESCRIPTION: Method for retrieving trades associated with a specific order ID in PHP using CCXT. Takes required order ID parameter and optional symbol, since timestamp, limit, and additional parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_132\n\nLANGUAGE: PHP\nCODE:\n```\n// PHP\n// fetch_order_trades ($id, $symbol = null, $since = null, $limit = null, $params = array())\n\nif ($exchange->has['fetchOrderTrades']) {\n    $trades = $exchange->fetch_order_trades($order_id, $symbol, $since, $limit, $params);\n}\n```\n\n----------------------------------------\n\nTITLE: Stream-Based Orderbook Feed Loop in CCXT Pro (JavaScript)\nDESCRIPTION: This snippet illustrates a stream-based (WebSocket) orderbook feed loop using CCXT Pro. It watches for updates to the orderbook data and handles potential errors within the loop. The code demonstrates how to leverage the real-time streaming capabilities of CCXT Pro.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\n// a stream-based (WebSocket) orderbook feed loop\n\nwhile (condition) {\n\n    try {\n\n        // watch some of the public data\n        orderbook = await exchange.watchOrderBook (symbol, limit)\n\n        // do something or react somehow based on that data\n        // ...\n\n    } catch (e) {\n\n        // handle errors\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Market Data Structure Example in CCXT\nDESCRIPTION: This code snippet represents the structure of a market data object as returned by the CCXT library. It shows the key properties of a market, such as the ID, symbol, base and quote currencies, fees, precision, limits, and contract details. It includes examples of spot, margin, future, swap and option markets. It also shows the usage of active, taker and maker flags.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    'id':      'btcusd',      // string literal for referencing within an exchange\n    'symbol':  'BTC/USD',     // uppercase string literal of a pair of currencies\n    'base':    'BTC',         // uppercase string, unified base currency code, 3 or more letters\n    'quote':   'USD',         // uppercase string, unified quote currency code, 3 or more letters\n    'baseId':  'btc',         // any string, exchange-specific base currency id\n    'quoteId': 'usd',         // any string, exchange-specific quote currency id\n    'active':   true,         // boolean, market status\n    'type':    'spot',        // spot for spot, future for expiry futures, swap for perpetual swaps, 'option' for options\n    'spot':     true,         // whether the market is a spot market\n    'margin':   true,         // whether the market is a margin market\n    'future':   false,        // whether the market is a expiring future\n    'swap':     false,        // whether the market is a perpetual swap\n    'option':   false,        // whether the market is an option contract\n    'contract': false,        // whether the market is a future, a perpetual swap, or an option\n    'settle':   'USDT',       // the unified currency code that the contract will settle in, only set if `contract` is true\n    'settleId': 'usdt',       // the currencyId of that the contract will settle in, only set if `contract` is true\n    'contractSize': 1,        // the size of one contract, only used if `contract` is true\n    'linear':   true,         // the contract is a linear contract (settled in quote currency)\n    'inverse':  false,        // the contract is an inverse contract (settled in base currency)\n    'expiry':  1641370465121, // the unix expiry timestamp in milliseconds, undefined for everything except market['type'] `future`\n    'expiryDatetime': '2022-03-26T00:00:00.000Z', // The datetime contract will in iso8601 format\n    'strike': 4000,           // price at which a put or call option can be exercised\n    'optionType': 'call',     // call or put string, call option represents an option with the right to buy and put an option with the right to sell\n    // note, 'taker' and 'maker' compose extended data for markets, however it might be better to use `fetchTradingFees` for more accuracy\n    'taker':    0.002,        // taker fee rate, 0.002 = 0.2%\n    'maker':    0.0016,       // maker fee rate, 0.0016 = 0.16%\n    'percentage': true,       // whether the taker and maker fee rate is a multiplier or a fixed flat amount\n    'tierBased': false,       // whether the fee depends on your trading tier (your trading volume)\n    'feeSide': 'get',         // string literal can be 'get', 'give', 'base', 'quote', 'other'\n    'precision': {            // number of decimal digits \"after the dot\"\n        'price': 8,           // integer or float for TICK_SIZE roundingMode, might be missing if not supplied by the exchange\n        'amount': 8,          // integer, might be missing if not supplied by the exchange\n        'cost': 8,            // integer, very few exchanges actually have it\n    },\n    'limits': {               // value limits when placing orders on this market\n        'amount': {\n            'min': 0.01,      // order amount should be > min\n            'max': 1000,      // order amount should be < max\n        },\n        'price': { ... },     // same min/max limits for the price of the order\n        'cost':  { ... },     // same limits for order cost = price * amount\n        'leverage': { ... },  // same min/max limits for the leverage of the order\n    },\n    'marginModes': {\n        'cross': false,       // whether pair supports cross-margin trading\n        'isolated': false,    // whether pair supports isolated-margin trading\n    },\n    'info':      { ... },     // the original unparsed market info from the exchange\n}\n\n```\n\n----------------------------------------\n\nTITLE: Trading Implementation in Go using CCXT\nDESCRIPTION: Demonstrates creating orders and fetching OHLCV data using CCXT in Go. Includes error handling, optional parameters, and market loading.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/python/README.md#2025-04-22_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\npackage main\nimport (\n\t\"github.com/ccxt/ccxt/go/v4/go\"\n\t\"fmt\"\n)\n\nfunc main() {\n\texchange := ccxt.NewBinance(map[string]interface{}{\n\t\t\"apiKey\": \"MY KEY\",\n\t\t\"secret\": \"MY SECRET\",\n\t})\n\torderParams := map[string]interface{}{\n\t\t\"clientOrderId\": \"myOrderId68768678\",\n\t}\n\n    <-exchange.LoadMarkets()\n\n\torder, err := exchange.CreateOrder(\"BTC/USDT\", \"limit\", \"buy\", 0.001, ccxt.WithCreateOrderPrice(6000), ccxt.WithCreateOrderParams(orderParams))\n\tif err != nil {\n\t\tif ccxtError, ok := err.(*ccxt.Error); ok {\n\t\t\tif ccxtError.Type == \"InvalidOrder\" {\n\t\t\t\tfmt.Println(\"Invalid order\")\n\t\t\t} else {\n\t\t\t\tfmt.Println(\"Some other error\")\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfmt.Println(*order.Id)\n\t}\n\n\n    // fetching OHLCV\n\tohlcv, err := exchange.FetchOHLCV(\"BTC/USDT\", ccxt.WithFetchOHLCVTimeframe(\"5m\"), ccxt.WithFetchOHLCVLimit(100))\n\n\tif err != nil {\n\t\tfmt.Println(\"Error: \", err)\n\t} else {\n\t\tfmt.Println(\"Got OHLCV!\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Liquidations with CCXT (JavaScript)\nDESCRIPTION: This method fetches the public liquidations of a trading pair from the exchange. It takes the symbol, and optionally since and limit parameters to filter the results. The params argument allows for exchange-specific parameters, including 'until'.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_131\n\nLANGUAGE: javascript\nCODE:\n```\nfetchLiquidations (symbol, since = undefined, limit = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Checking Exchange Capabilities - Python Example\nDESCRIPTION: This Python example demonstrates checking exchange capabilities using the `.has` property. It initializes an exchange and prints the `.has` attribute, showing supported features. Requires the ccxt library.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_159\n\nLANGUAGE: python\nCODE:\n```\nimport ccxt\nid = 'binance'\nexchange = getattr(ccxt, id)()\nprint(exchange.has)\n```\n\n----------------------------------------\n\nTITLE: Withdraw Method (Javascript)\nDESCRIPTION: Demonstrates the usage of the `withdraw` method in JavaScript to withdraw funds from an account. Requires currency code, amount, and recipient address.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_220\n\nLANGUAGE: javascript\nCODE:\n```\nwithdraw (code, amount, address, tag = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Amount, Price, Cost, Currency to Precision (JS)\nDESCRIPTION: Defines JavaScript functions for formatting amount, price, cost, and currency values to exchange-specific precision. Requires loading markets with `exchange.loadMarkets()` before calling these methods.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction amountToPrecision (symbol, amount)\nfunction priceToPrecision (symbol, price)\nfunction costToPrecision (symbol, cost)\nfunction currencyToPrecision (code, amount)\n```\n\n----------------------------------------\n\nTITLE: Exchange Capabilities Metadata in CCXT (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates the structure of the 'has' property in CCXT, which defines an exchange's capabilities. Each flag indicates whether a specific method is natively available from the exchange API, emulated by CCXT, or not implemented. This example showcases flags for common trading operations such as cancelling orders, fetching balance, creating orders, fetching market data, order books, tickers, and trades.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n'has': {\n\n    'CORS': false,  // has Cross-Origin Resource Sharing enabled (works from browser) or not\n\n    // unified methods availability flags (can be true, false, or 'emulated'):\n\n    'cancelOrder': true,\n    'createDepositAddress': false,\n    'createOrder': true,\n    'fetchBalance': true,\n    'fetchCanceledOrders': false,\n    'fetchClosedOrder': false,\n    'fetchClosedOrders': false,\n    'fetchCurrencies': false,\n    'fetchDepositAddress': false,\n    'fetchMarkets': true,\n    'fetchMyTrades': false,\n    'fetchOHLCV': false,\n    'fetchOpenOrder': false,\n    'fetchOpenOrders': false,\n    'fetchOrder': false,\n    'fetchOrderBook': true,\n    'fetchOrders': false,\n    'fetchStatus': 'emulated',\n    'fetchTicker': true,\n    'fetchTickers': false,\n    'fetchBidsAsks': false,\n    'fetchTrades': true,\n    'withdraw': false,\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Create Spot Margin Order with Margin Mode (Python)\nDESCRIPTION: Example code snippet for creating a spot margin order using the create_order method in Python, while specifying the marginMode parameter.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_268\n\nLANGUAGE: python\nCODE:\n```\nparams = {\n    'marginMode': 'isolated', # or 'cross'\n}\norder = exchange.create_order ('ETH/USDT', 'market', 'buy', 0.1, 1500, params)\n```\n\n----------------------------------------\n\nTITLE: Attaching Stop Loss/Take Profit to Position (JS, Python)\nDESCRIPTION: This code demonstrates how to attach stop loss and take profit orders to a primary order when creating an order with CCXT. The stopLoss and takeProfit parameters are defined as dictionaries within the 'params' object, specifying 'triggerPrice' and optionally 'price'. These orders are conditional on the primary order's execution. Not all exchanges support this feature. The createOrder method is called with the symbol, type, side, amount, price and params.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_193\n\nLANGUAGE: python\nCODE:\n```\nparams = {\n    'stopLoss': {\n        'triggerPrice': 12.34,  # at what price it will trigger\n        'price': 12.00,  # if exchange supports, 'price' param would be limit price (for market orders, don't include this param)\n    },\n    'takeProfit': {\n        # similar params here\n    }\n}\norder = exchange.create_order ('SOL/USDT', 'limit', 'buy', 0.5, 13, params)\n```\n\n----------------------------------------\n\nTITLE: Listing Available Methods with an Exchange Instance\nDESCRIPTION: Demonstrates how to retrieve a list of available methods for a specific exchange instance using console.log, dir(), and var_dump() in JavaScript, Python, and PHP, respectively. This can be useful for exploring the API capabilities of an exchange.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_54\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log (new ccxt.kraken ())\n```\n\nLANGUAGE: Python\nCODE:\n```\nprint(dir(ccxt.kraken()))\n```\n\nLANGUAGE: PHP\nCODE:\n```\nvar_dump (new \\ccxt\\kraken ());\n```\n\n----------------------------------------\n\nTITLE: Set Leverage with CCXT (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to set leverage for a specific market using the `setLeverage` method in CCXT. It requires the desired leverage and the market symbol as parameters and can optionally include exchange-specific parameters. The method returns a response from the exchange.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_272\n\nLANGUAGE: javascript\nCODE:\n```\nsetLeverage (leverage, symbol = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Defining Ledger Entry Structure in JavaScript\nDESCRIPTION: This snippet outlines the structure of a ledger entry object, including fields for transaction details, amounts, fees, and associated metadata.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_135\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n   'id': 'hqfl-f125f9l2c9',                // string id of the ledger entry, e.g. an order id\n   'direction': 'out',                     // or 'in'\n   'account': '06d4ab58-dfcd-468a',        // string id of the account if any\n   'referenceId': 'bf7a-d4441fb3fd31',     // string id of the trade, transaction, etc...\n   'referenceAccount': '3146-4286-bb71',   // string id of the opposite account (if any)\n   'type': 'trade',                        // string, reference type, see below\n   'currency': 'BTC',                      // string, unified currency code, 'ETH', 'USDT'...\n   'amount': 123.45,                       // absolute number, float (does not include the fee)\n   'timestamp': 1544582941735,             // milliseconds since epoch time in UTC\n   'datetime': \"2018-12-12T02:49:01.735Z\", // string of timestamp, ISO8601\n   'before': 0,                            // amount of currency on balance before\n   'after': 0,                             // amount of currency on balance after\n   'status': 'ok',                         // 'ok, 'pending', 'canceled'\n   'fee': {                                // object or or undefined\n       'cost': 54.321,                     // absolute number on top of the amount\n       'currency': 'ETH',                  // string, unified currency code, 'ETH', 'USDT'...\n   },\n   'info': { ... },                        // raw ledger entry as is from the exchange\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Trades and OHLCV with Pagination in CCXT\nDESCRIPTION: This snippet demonstrates how to fetch trades and OHLCV data from the Binance and Bybit exchanges using CCXT's pagination feature. It showcases dynamic/time-based and deterministic pagination. It also shows cursor-based pagination for Bybit's ledger.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_64\n\nLANGUAGE: Python\nCODE:\n```\ntrades = await binance.fetch_trades(\"BTC/USDT\", params = {\"paginate\": True}) # dynamic/time-based\n\nohlcv = await binance.fetch_ohlcv(\"BTC/USDT\", params = {\"paginate\": True, \"paginationCalls\": 5}) # deterministic-pagination will perform 5 requests\n\ntrades = await binance.fetch_trades(\"BTC/USDT\", since = 1664812416000, params = {\"paginate\": True, \"paginationDirection\": \"forward\"}) # dynamic/time-based pagination starting from 1664812416000\n\nledger = await bybit.fetch_ledger(params = {\"paginate\": True}) # bybit returns a cursor so the pagination will be cursor-based\n\nfunding_rates = await binance.fetch_funding_rate_history(\"BTC/USDT:USDT\", params = {\"paginate\": True, \"maxEntriesPerRequest\": 50}) # customizes the number of entries per request\n```\n\n----------------------------------------\n\nTITLE: Transaction Fee Structure Example in JavaScript\nDESCRIPTION: Shows the structure of transaction fee data returned by fee-related functions, including separate rates for deposits and withdrawals by currency.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_160\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    'withdraw': {\n        'BTC': 0.00001,\n        'ETH': 0.001,\n        'LTC': 0.0003,\n    },\n    'deposit': {\n        'BTC': 0,\n    },\n    'info': { ... },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Trigger Order with CCXT (JS, Python, PHP)\nDESCRIPTION: This code snippet demonstrates how to create a trigger order using the CCXT library.  It defines a 'triggerPrice' within the 'params' object and passes it to the 'createOrder' method. The exchange then uses this price to trigger the order execution.  The createOrder method is called with the symbol, type, side, amount, price and params. The order will be triggered when the price touches 1700, with the direction automatically detected by the exchange.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_183\n\nLANGUAGE: python\nCODE:\n```\nparams = {\n    'triggerPrice': 1700,\n}\norder = exchange.create_order('ETH/USDT', 'market', 'buy', 0.1, 1500, params)\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Rate Limiter (PHP)\nDESCRIPTION: This PHP snippet shows how to enable or disable the built-in rate limiter in CCXT when instantiating an exchange object, or after the object is created. Enabling the rate limiter helps prevent exceeding the exchange's API rate limits.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n// enable built-in rate limiting upon instantiation of the exchange\n$exchange = new \\ccxt\\bitfinex (array (\n    // 'enableRateLimit' => true, // enabled by default\n));\n\n// or switch the built-in rate-limiter on or off later after instantiation\n$exchange->enableRateLimit = true; // enable\n$exchange->enableRateLimit = false; // disable\n```\n\n----------------------------------------\n\nTITLE: Fetching Greeks with CCXT (JavaScript)\nDESCRIPTION: This method fetches the greeks and implied volatility of an options trading pair. It takes the symbol and optional parameters for exchange-specific configurations. The returned structure contains greek values and implied volatility information.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_133\n\nLANGUAGE: javascript\nCODE:\n```\nfetchGreeks (symbol, params = {})\n```\n\n----------------------------------------\n\nTITLE: Creating a Stop Loss Order with CCXT (JS, Python, PHP)\nDESCRIPTION: This code snippet illustrates how to create a stop loss order using the CCXT library. It defines 'stopLossPrice' within the 'params' object, representing the price at which the stop loss order should be triggered. This requires the symbol, type, side, amount and price variables to be defined beforehand.  When the stopLossPrice is reached, the order will be executed at the market price or limit price below the specified stopLossPrice for closing a long position, or above for closing a short position.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_186\n\nLANGUAGE: javascript\nCODE:\n```\n// for a stop loss order\nconst params = {\n    'stopLossPrice': 55.45, // your stop loss price\n}\n\nconst order = await exchange.createOrder (symbol, type, side, amount, price, params)\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Tickers in PHP\nDESCRIPTION: Illustrates how to fetch tickers for specific symbols using CCXT in PHP.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_74\n\nLANGUAGE: PHP\nCODE:\n```\nif ($exchange->has['fetchTickers']) {\n    var_dump ($exchange->fetch_tickers (array ('ETH/BTC', 'LTC/BTC'))); // listed tickers indexed by their symbols\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Open Orders in JavaScript\nDESCRIPTION: Demonstrates how to retrieve currently open (active) orders using the fetchOpenOrders method, with optional filtering by symbol, time range, and count limits.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_109\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (exchange.has['fetchOpenOrders'])\n    exchange.fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Implementing createOrder Method in JavaScript for CCXT\nDESCRIPTION: Implementation of the createOrder method that places new trade orders on the exchange. It prepares parameters, submits the order to the API, and returns a standardized order object with ID, symbol, and status information.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/ts/src/static_dependencies/ethers/utils/test.txt#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nasync createOrder (symbol, type, side, amount, price = undefined, params = {}) {\n    await this.loadMarkets ();\n    const market = this.market (symbol);\n    // construct request\n    const request = {\n        'symbol': market['id'],\n        'side': side,\n        'type': type,\n        'amount': amount,\n    };\n    if (type !== 'market') {\n        request['price'] = price;\n    }\n    // make a specific API call\n    const response = await this.privatePostEndpointPath (this.extend (request, params));\n    // response is a single order\n    // response = {\n    //     'id': '1234567890',\n    //     'symbol': 'BTC/USD',\n    //     'side': 'buy',\n    //     'type': 'limit',\n    //     'amount': 1.2345,\n    //     'price': 1234.5,\n    //     'timestamp': 1234567890,\n    //     'status': 'open',\n    //     ...\n    // }\n    // parse that order and return a unified order structure\n    return this.parseOrder (response, market);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose Mode in CCXT\nDESCRIPTION: This snippet shows how to enable verbose mode for a CCXT exchange object. Verbose mode outputs detailed HTTP requests and responses, which is extremely helpful for debugging API issues and understanding the communication between your code and the exchange.  It is recommended to set `exchange.verbose = True` *after* `exchange.load_markets()` to avoid potential noise during market loading, but *before* the problematic code if possible.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_312\n\nLANGUAGE: python\nCODE:\n```\nexchange = ccxt.binance()\nexchange.load_markets()\nexchange.verbose = True  # for less noise, you can set that after `load_markets`, but if the error happens during `load_markets` then place this line before it\n# ... your codes here ...\n```\n\n----------------------------------------\n\nTITLE: Borrow Interest Data Structure in JavaScript\nDESCRIPTION: Defines the structure of borrow interest data, including the market, currency, interest amount, interest rate, and borrowed amount with timestamps.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_162\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    account: 'BTC/USDT',                    // The market that the interest was accrued in\n    currency: 'USDT',                       // The currency of the interest\n    interest: 0.00004842,                   // The amount of interest that was charged\n    interestRate: 0.0002,                   // The borrow interest rate\n    amountBorrowed: 5.81,                   // The amount of currency that was borrowed\n    timestamp: 1648699200000,               // The timestamp that the interest was charged\n    datetime: '2022-03-31T04:00:00.000Z',   // The datetime that the interest was charged\n    info: { ... }                           // Unparsed exchange response\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Order by ID JavaScript\nDESCRIPTION: This snippet demonstrates how to fetch an order by its ID using the `fetchOrder` method of the CCXT exchange object. It checks if the exchange supports the `fetchOrder` functionality and then calls the method with the order ID. The result is logged to the console.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_162\n\nLANGUAGE: javascript\nCODE:\n```\nif (exchange.has['fetchOrder']) {\n    //  you can use the params argument for custom overrides\n    let order = await exchange.fetchOrder (id, symbol = undefined, params = {})\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Exchange Capabilities - JavaScript Example\nDESCRIPTION: This JavaScript example shows how to check the capabilities of an exchange using the `.has` property. It initializes an exchange instance and logs the `.has` property to the console, revealing which features are supported by the specific exchange.  Requires the ccxt library.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_158\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst ccxt = require ('ccxt')\nconst id = 'poloniex'\nexchange = new ccxt[id] ()\nconsole.log (exchange.has)\n```\n\n----------------------------------------\n\nTITLE: Fetching Trading Fees\nDESCRIPTION: Demonstrates how to use `fetchTradingFee` and `fetchTradingFees` methods to retrieve trading fees for a specific symbol or for all symbols from an exchange.  It also shows how to pass parameters specific to the exchange API.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_245\n\nLANGUAGE: javascript\nCODE:\n```\nfetchTradingFee (symbol, params = {})\nfetchTradingFees (params = {})\n```\n\n----------------------------------------\n\nTITLE: Overriding Unified API Params in Python\nDESCRIPTION: Demonstrates overriding exchange-specific parameters in unified API calls using Python. The `params` dictionary is passed as the last argument to `exchange.fetch_order_book()` to customize the request. The parameters 'foo' and 'Hello' are examples of exchange-specific settings.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_62\n\nLANGUAGE: Python\nCODE:\n```\nparams = {\n    'foo': 'bar',       # exchange-specific overrides in unified queries\n    'Hello': 'World!',  # see their docs for more details on parameter names\n}\n\n# overrides go in the last argument to the unified call â HERE\nresult = exchange.fetch_order_book(symbol, length, params)\n```\n\n----------------------------------------\n\nTITLE: Fetching Public Trades for All Symbols in Python\nDESCRIPTION: Python example for retrieving the most recent trades for all symbols sequentially using CCXT's fetch_trades method. This demonstrates iterating through available markets.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_82\n\nLANGUAGE: Python\nCODE:\n```\n# Python\nimport time\nif exchange.has['fetchTrades']:\n    for symbol in exchange.markets:  # ensure you have called loadMarkets() or load_markets() method.\n        print (symbol, exchange.fetch_trades (symbol))\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Orders in Python\nDESCRIPTION: This snippet shows how to create a market buy order with a custom flag on Kraken using the CCXT library in Python.  It passes a 'trading_agreement' parameter within the 'params' array to include a custom flag. Requires an initialized Kraken exchange object.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_199\n\nLANGUAGE: Python\nCODE:\n```\n# add a custom order flag\nkraken.create_market_buy_order('BTC/USD', 1, {'trading_agreement': 'agree'})\n```\n\n----------------------------------------\n\nTITLE: Fetching Balance Examples in Multiple Languages\nDESCRIPTION: Code examples showing how to retrieve account balances using the fetchBalance method in JavaScript, Python, and PHP.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_104\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\n(async () => {\n    console.log (await exchange.fetchBalance ())\n}) ()\n```\n\nLANGUAGE: Python\nCODE:\n```\n# Python\nprint (exchange.fetch_balance ())\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// PHP\nvar_dump ($exchange->fetch_balance ());\n```\n\n----------------------------------------\n\nTITLE: Convenience Formatting Methods in JavaScript, Python and PHP\nDESCRIPTION: These methods provide convenient ways to format amounts, prices, costs, and currency values according to the exchange-specific precision rules. Markets must be loaded first before using these methods.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction amountToPrecision (symbol, amount)\nfunction priceToPrecision (symbol, price)\nfunction costToPrecision (symbol, cost)\nfunction currencyToPrecision (code, amount)\n```\n\nLANGUAGE: Python\nCODE:\n```\ndef amount_to_precision (symbol, amount):\ndef price_to_precision (symbol, price):\ndef cost_to_precision (symbol, cost):\ndef currency_to_precision (code, amount):\n```\n\nLANGUAGE: PHP\nCODE:\n```\nfunction amount_to_precision($symbol, $amount)\nfunction price_to_precision($symbol, $price)\nfunction cost_to_precision($symbol, $cost)\nfunction currency_to_precision($code, $amount)\n```\n\n----------------------------------------\n\nTITLE: Closing All Positions with closeAllPositions Function in TypeScript\nDESCRIPTION: Closes all open positions. The function takes optional parameters specific to the exchange API endpoint. It returns a list of order structures.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_281\n\nLANGUAGE: typescript\nCODE:\n```\ncloseAllPositions (params = {}): Promise<Position[]>\n```\n\n----------------------------------------\n\nTITLE: Watching Tickers with WebSocket in JavaScript\nDESCRIPTION: Continuously watches for ticker updates using the exchange's WebSocket API. Prints the received tickers and handles exceptions.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-22_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (exchange.has['watchTickers']) {\n    while (true) {\n        try {\n            const tickers = await exchange.watchTickers (symbols, params)\n            console.log (new Date (), tickers)\n        } catch (e) {\n            console.log (e)\n            // stop the loop on exception or leave it commented to retry\n            // throw e\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Open Orders JavaScript\nDESCRIPTION: This snippet shows how to fetch open orders from an exchange using the `fetchOpenOrders` method in JavaScript. It checks if the exchange supports fetching open orders and then calls the method with optional parameters for filtering by symbol, since timestamp, limit, and exchange-specific parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_167\n\nLANGUAGE: javascript\nCODE:\n```\nif (exchange.has['fetchOpenOrders'])\n    exchange.fetchOpenOrders (symbol = undefined, since = undefined, limit = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to create_order method in Python\nDESCRIPTION: Illustrates how to pass additional parameters to the unified create_order method in Python when interacting with an exchange API using the CCXT library. The `params` dictionary can be used to specify parameters such as 'type' and 'isIsolated' for margin trading.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_59\n\nLANGUAGE: Python\nCODE:\n```\nparams = {'type':'margin', 'isIsolated': 'TRUE'}  # --------------â\n# params will go as the last argument to the unified method       |\n#                                                                 v\nbinance.create_order('BTC/USDT', 'limit', 'buy', amount, price, params)\n```\n\n----------------------------------------\n\nTITLE: Fetching Long Short Ratio with CCXT in JavaScript\nDESCRIPTION: Fetches the current long short ratio of a symbol using the `fetchLongShortRatio` method. Requires a unified CCXT symbol, an optional period to calculate the ratio from, and an optional dictionary of extra parameters specific to the exchange API endpoint. Returns a long short ratio structure.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_138\n\nLANGUAGE: javascript\nCODE:\n```\nfetchLongShortRatio (symbol, period = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Fetching Trades - Python\nDESCRIPTION: This Python code shows how to fetch recent trades for each symbol on an exchange using the `fetch_trades` method.  It iterates through all available markets and prints the symbol along with its trades, after ensuring markets have been loaded.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_103\n\nLANGUAGE: python\nCODE:\n```\nimport time\nif exchange.has['fetchTrades']:\n    for symbol in exchange.markets:  # ensure you have called loadMarkets() or load_markets() method.\n        print (symbol, exchange.fetch_trades (symbol))\n```\n\n----------------------------------------\n\nTITLE: Fetching Option Chain with CCXT in JavaScript\nDESCRIPTION: Fetches the public option chain data of an underlying currency from the exchange using the `fetchOptionChain` method. Requires a unified CCXT currency code and an optional dictionary of extra parameters specific to the exchange API endpoint. Returns a list of option chain structures.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_136\n\nLANGUAGE: javascript\nCODE:\n```\nfetchOptionChain (code, params = {})\n```\n\n----------------------------------------\n\nTITLE: Watching OHLCV with CCXT Pro (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates how to subscribe to WebSocket streams of OHLCV (Open, High, Low, Close, Volume) data for a given symbol and timeframe using CCXT Pro. It checks if the exchange supports the `watchOHLCV` method. It then enters an infinite loop, continuously fetching and displaying the OHLCV data. Error handling is implemented to catch and log any exceptions.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nif (exchange.has['watchOHLCV']) {\n    while (true) {\n        try {\n            const candles = await exchange.watchOHLCV (symbol, timeframe, since, limit, params)\n            console.log (new Date (), candles)\n        } catch (e) {\n            console.log (e)\n            // stop the loop on exception or leave it commented to retry\n            // throw e\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Markets and Accessing Market Data in Python\nDESCRIPTION: This Python snippet illustrates how to load market data from an exchange using CCXT, access markets by symbol and ID, retrieve the market ID by symbol, and access lists of symbols and currencies. It provides an example using the Kraken exchange and demonstrates accessing the market's ID and symbol.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_45\n\nLANGUAGE: Python\nCODE:\n```\nprint(exchange.load_markets())\n\netheur1 = exchange.markets['ETH/EUR']         # get market structure by symbol\netheur2 = exchange.market('ETH/EUR')          # same result in a slightly different way\n\netheurId = exchange.market_id('ETH/EUR')      # get market id by symbol\n\nsymbols = exchange.symbols                    # get a list of symbols\nsymbols2 = list(exchange.markets.keys())      # same as previous line\n\nprint(exchange.id, symbols)                   # print all symbols\n\ncurrencies = exchange.currencies              # a dictionary of currencies\n\nkraken = ccxt.kraken()\nkraken.load_markets()\n\nkraken.markets['BTC/USD']                     # symbol â market (get market by symbol)\nkraken.markets_by_id['XXRPZUSD'][0]           # id â market (get market by id)\n\nkraken.markets['BTC/USD']['id']               # symbol â id (get id by symbol)\nkraken.markets_by_id['XXRPZUSD'][0]['symbol'] # id â symbol (get symbol by id)\n```\n\n----------------------------------------\n\nTITLE: Fetching a Deposit Address with CCXT in Javascript\nDESCRIPTION: This snippet shows how to fetch or create a deposit address using CCXT in Javascript. It demonstrates the use of `fetchDepositAddress` and `createDepositAddress` methods, requiring a currency code as a parameter. The `params` argument allows for exchange-specific parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_238\n\nLANGUAGE: javascript\nCODE:\n```\nfetchDepositAddress (code, params = {})\ncreateDepositAddress (code, params = {})\n```\n\n----------------------------------------\n\nTITLE: Calculating Liquidation Price in JavaScript\nDESCRIPTION: Demonstrates how to calculate the liquidation price for long and short positions. The formulas are provided for both regular and inverse contracts, using the current price, contract size, and maintenance margin.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_283\n\nLANGUAGE: javascript\nCODE:\n```\n// if long\n(liquidationPrice - price) * contracts = maintenanceMargin\n\n// if short\n(price - liquidationPrice) * contracts = maintenanceMargin\n// if inverse long\n(1/liquidationPrice - 1/price) * contracts = maintenanceMargin\n\n// if inverse short\n(1/price - 1/liquidationPrice) * contracts = maintenanceMargin\n```\n\n----------------------------------------\n\nTITLE: Fetching OHLCV Data in JavaScript\nDESCRIPTION: This snippet demonstrates how to fetch OHLCV data for all available symbols on an exchange using JavaScript. It includes rate limiting to avoid overloading the exchange's API.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_75\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet sleep = (ms) => new Promise (resolve => setTimeout (resolve, ms));\nif (exchange.has.fetchOHLCV) {\n    for (symbol in exchange.markets) {\n        await sleep (exchange.rateLimit) // milliseconds\n        console.log (await exchange.fetchOHLCV (symbol, '1m')) // one minute\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Greeks Structure (JavaScript)\nDESCRIPTION: This is the data structure returned by the fetchGreeks method, including symbol, timestamp, delta, gamma, theta, vega, rho, and other relevant option metrics.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_134\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    'symbol': 'BTC/USD:BTC-240927-40000-C',     // unified CCXT market symbol\n    'timestamp': 1699593511632,                 // unix timestamp in milliseconds\n    'datetime': '2023-11-10T05:18:31.632Z',     // ISO8601 datetime with milliseconds\n    'delta': 0.59833,                           // measures the rate of change in the options price per $1 change in the underlying assets price\n    'gamma': 0.00002,                           // measures the rate of change in the delta per $1 change in the underlying assets price\n    'theta': -13.4441,                          // measures the dollar amount that an options price will decline per day\n    'vega': 142.30124,                          // measures the dollar amount that an options price changes with a 1% change in the implied volatility\n    'rho': 131.82621,                           // measures the dollar amount that an options price changes with a 1% change in interest rates\n    'bidSize': 2.2,                             // the options bid amount\n    'askSize': 9,                               // the options ask amount\n    'bidImpliedVolatility': 60.06,              // the expected percentage price change of the underlying asset, over the remaining life of the option, calculated using the bid price\n    'askImpliedVolatility': 61.85,              // the expected percentage price change of the underlying asset, over the remaining life of the option, calculated using the ask price\n    'markImpliedVolatility': 60.86,             // the expected percentage price change of the underlying asset, over the remaining life of the option, calculated using the mark price\n    'bidPrice': 0.214,                          // the bid price of the option\n    'askPrice': 0.2205,                         // the ask price of the option\n    'markPrice': 0.2169,                        // the mark price of the option\n    'lastPrice': 0.215,                         // the last price of the option\n    'underlyingPrice': 39165.86,                // the current market price of the underlying asset\n    'info': { ... },                            // the original decoded JSON as is\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Personal Trades in JavaScript with CCXT\nDESCRIPTION: Method for retrieving the user's personal trade history in JavaScript using CCXT. Takes optional parameters including symbol, since timestamp for pagination, and limit for restricting the number of results.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_126\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\n// fetchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {})\n\nif (exchange.has['fetchMyTrades']) {\n    const trades = await exchange.fetchMyTrades (symbol, since, limit, params)\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Market Data in Python\nDESCRIPTION: Shows how to load market data, access market information, and force reload markets in Python using the CCXT library.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_41\n\nLANGUAGE: Python\nCODE:\n```\npoloniex = ccxt.poloniex({'verbose': True}) # log HTTP requests\npoloniex.load_markets() # request markets\nprint(poloniex.id, poloniex.markets)   # output a full list of all loaded markets\nprint(list(poloniex.markets.keys())) # output a short list of market symbols\nprint(poloniex.markets['BTC/ETH'])     # output single market details\npoloniex.load_markets() # return a locally cached version, no reload\nreloadedMarkets = poloniex.load_markets(True) # force HTTP reload = True\nprint(reloadedMarkets['ETH/ZEC'])\n```\n\n----------------------------------------\n\nTITLE: Ledger Entry Structure JavaScript\nDESCRIPTION: This snippet shows the structure of a ledger entry object returned by CCXT, including information like ID, direction, account, reference IDs, type, currency, amount, timestamp, datetime, balances before and after, status, fee, and raw info.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_213\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    'id': 'hqfl-f125f9l2c9',                // string id of the ledger entry, e.g. an order id\n    'direction': 'out',                     // or 'in'\n    'account': '06d4ab58-dfcd-468a',        // string id of the account if any\n    'referenceId': 'bf7a-d4441fb3fd31',     // string id of the trade, transaction, etc...\n    'referenceAccount': '3146-4286-bb71',   // string id of the opposite account (if any)\n    'type': 'trade',                        // string, reference type, see below\n    'currency': 'BTC',                      // string, unified currency code, 'ETH', 'USDT'...\n    'amount': 123.45,                       // absolute number, float (does not include the fee)\n    'timestamp': 1544582941735,             // milliseconds since epoch time in UTC\n    'datetime': \"2018-12-12T02:49:01.735Z\", // string of timestamp, ISO8601\n    'before': 0,                            // amount of currency on balance before\n    'after': 0,                             // amount of currency on balance after\n    'status': 'ok',                         // 'ok, 'pending', 'canceled'\n    'fee': {\n        'cost': 54.321,                     // absolute number on top of the amount\n        'currency': 'ETH',                  // string, unified currency code, 'ETH', 'USDT'...\n    },\n    'info': { ... },                        // raw ledger entry as is from the exchange\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Sandbox Mode in Python\nDESCRIPTION: This snippet shows how to enable sandbox mode for an exchange using the CCXT library in Python. It's crucial to set the sandbox mode immediately after instantiating the exchange object. Requires the CCXT Python library to be installed.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nexchange = ccxt.binance(config)\nexchange.set_sandbox_mode(True)  # enable sandbox mode\n```\n\n----------------------------------------\n\nTITLE: Creating Orders in Python using CCXT\nDESCRIPTION: Examples of creating limit buy orders and market buy orders using CCXT in Python. Shows how to specify order parameters and trading agreements.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/python/README.md#2025-04-22_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n# limit buy BTC/EUR, you pay â¬2500 and receive à¸¿1  when the order is closed\nprint(exmo.id, exmo.create_limit_buy_order('BTC/EUR', 1, 2500.00))\n\n# pass/redefine custom exchange-specific order params: type, amount, price, flags, etc...\nkraken.create_market_buy_order('BTC/USD', 1, {'trading_agreement': 'agree'})\n```\n\n----------------------------------------\n\nTITLE: Creating a Market Buy Order with Manual Cost Calculation in JavaScript\nDESCRIPTION: Example of creating a market buy order with 'createMarketBuyOrderRequiresPrice' set to false, allowing the user to manually calculate and specify the total cost of the order instead of the amount.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_118\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst exchange = new ccxt.cex ({\n    'apiKey': YOUR_API_KEY,\n    'secret': 'YOUR_SECRET',\n    'options': {\n        'createMarketBuyOrderRequiresPrice': false, // switch off\n    },\n})\n\n// or, to switch it off later, after the exchange instantiation, you can do\nexchange.options['createMarketBuyOrderRequiresPrice'] = false\n\n;(async () => {\n\n    // when `createMarketBuyOrderRequiresPrice` is true, we can pass the price\n    // so that the total cost of the order would be calculated inside the library\n    // by multiplying the amount over price (amount * price)\n\n    const symbol = 'BTC/USD'\n    const amount = 2 // BTC\n    const price = 9000 // USD\n    cost = amount * price // â instead of the amount cost goes â here\n    const order = await exchange.createMarketBuyOrder (symbol, cost)\n    console.log (order)\n}) ()\n```\n\n----------------------------------------\n\nTITLE: CCXT Library Structure Diagram\nDESCRIPTION: ASCII diagram showing the hierarchical structure of the CCXT library, including the unified API layer, custom exchange implementations, and base exchange class. It illustrates both public and private API methods available across the system.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n                                    User\n       +-------------------------------------------------------------+\n       |                            CCXT                             |\n       +------------------------------+------------------------------+\n       |            Public            |           Private            |\n       +=============================================================+\n       â                              .                              |\n       â                    The Unified CCXT API                     |\n       â                              .                              |\n       |       loadMarkets            .           fetchBalance       |\n       |       fetchMarkets           .            createOrder       |\n       |       fetchCurrencies        .            cancelOrder       |\n       |       fetchTicker            .             fetchOrder       |\n       |       fetchTickers           .            fetchOrders       |\n       |       fetchOrderBook         .        fetchOpenOrders       |\n       |       fetchOHLCV             .      fetchClosedOrders       |\n       |       fetchStatus            .          fetchMyTrades       |\n       |       fetchTrades            .                deposit       |\n       |                              .               withdraw       |\n       â                              .                              |\n       +=============================================================+\n       â                              .                              |\n       |                     Custom Exchange API                     |\n       |         (Derived Classes And Their Implicit Methods)        |\n       â                              .                              |\n       |       publicGet...           .          privateGet...       |\n       |       publicPost...          .         privatePost...       |\n       |                              .          privatePut...       |\n       |                              .       privateDelete...       |\n       |                              .                   sign       |\n       â                              .                              |\n       +=============================================================+\n       â                              .                              |\n       |                      Base Exchange Class                    |\n       â                              .                              |\n       +=============================================================\n```\n\n----------------------------------------\n\nTITLE: Fetch Leverage for Multiple Symbols (JavaScript)\nDESCRIPTION: This code snippet shows how to fetch leverage information for multiple market symbols using the `fetchLeverages` method in CCXT. It takes an array of symbols or undefined for all market symbols and accepts optional exchange-specific parameters. The method returns an array of leverage structures, one for each symbol.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_274\n\nLANGUAGE: javascript\nCODE:\n```\nfetchLeverages(symbols = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to Public API Methods\nDESCRIPTION: Shows examples of how to pass parameters to public API methods in JavaScript, Python, and PHP when accessing exchange data with the CCXT library. Parameters are passed as associative arrays (JavaScript and PHP) or dictionaries (Python).\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_58\n\nLANGUAGE: JavaScript\nCODE:\n```\nbitso.publicGetTicker ({ book: 'eth_mxn' })\n```\n\nLANGUAGE: Python\nCODE:\n```\nccxt.zaif().public_get_ticker_pair ({ 'pair': 'btc_jpy' })\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$luno->public_get_ticker (array ('pair' => 'XBTIDR'));\n```\n\n----------------------------------------\n\nTITLE: Listing Exchange Methods - Multiple Languages\nDESCRIPTION: Code examples showing how to list all available methods for an exchange instance across different programming languages.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_43\n\nLANGUAGE: text\nCODE:\n```\nconsole.log (new ccxt.kraken ())   // JavaScript\nprint(dir(ccxt.kraken()))           # Python\nvar_dump (new \\ccxt\\kraken ()); // PHP\n```\n\n----------------------------------------\n\nTITLE: Fetching Funding Rate History with CCXT (JavaScript)\nDESCRIPTION: This method fetches the funding rate history for a given contract symbol. It requires a symbol and optionally accepts since and limit parameters to filter the results. The params argument allows for exchange-specific parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_120\n\nLANGUAGE: javascript\nCODE:\n```\nfetchFundingRateHistory (symbol = undefined, since = undefined, limit = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Watching Balance with CCXT Pro in Python\nDESCRIPTION: This snippet demonstrates how to use the `watch_balance` method in the CCXT Pro library to watch for balance updates. It sets up a loop to continuously receive balance information and logs it with a timestamp using `exchange.iso8601`. It includes error handling with a retry loop.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nif exchange.has['watchBalance']:\n    while True:\n        try:\n            balance = await exchange.watch_balance(params)\n            print(exchange.iso8601(exchange.milliseconds()), balance)\n        except Exception as e:\n            print(e)\n            # stop the loop on exception or leave it commented to retry\n            # raise e\n```\n\n----------------------------------------\n\nTITLE: Asynchronous API Call - Python\nDESCRIPTION: Demonstration of asynchronous API usage in Python using async/await syntax to fetch ticker data.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_45\n\nLANGUAGE: Python\nCODE:\n```\nimport asyncio\nimport ccxt.async_support as ccxt\n\nasync def print_poloniex_ethbtc_ticker():\n    poloniex = ccxt.poloniex()\n    print(await poloniex.fetch_ticker('ETH/BTC'))\n\nasyncio.run(print_poloniex_ethbtc_ticker())\n```\n\n----------------------------------------\n\nTITLE: Fetching Balance - JavaScript Parameter Example\nDESCRIPTION: This code shows the use of `fetchBalance` with optional parameters. The parameters dictionary allows to specify extra exchange API endpoint parameters, such as filtering by currency.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_153\n\nLANGUAGE: javascript\nCODE:\n```\nfetchBalance (params = {})\n```\n\n----------------------------------------\n\nTITLE: Setting SOCKS Proxy in CCXT (JavaScript)\nDESCRIPTION: Illustrates how to configure a SOCKS proxy in CCXT for both regular and websocket connections using JavaScript. The code specifies the proxy type (socks, socks5, socks5h) and the address.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_295\n\nLANGUAGE: javascript\nCODE:\n```\n// from protocols: socks, socks5, socks5h\nex.socksProxy = 'socks5://1.2.3.4:8080/';\nex.wsSocksProxy = 'socks://1.2.3.4:8080/';\n```\n\n----------------------------------------\n\nTITLE: Fetching Borrow Interest Data with CCXT in JavaScript\nDESCRIPTION: Retrieves interest data for borrowed funds in margin trading. Can filter by currency, market symbol, time range, and limit the number of records returned.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_161\n\nLANGUAGE: JavaScript\nCODE:\n```\nfetchBorrowInterest (code = undefined, symbol = undefined, since = undefined, limit = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Nonce in Python\nDESCRIPTION: Multiple approaches for implementing custom nonce functionality in Python, including direct nonce assignment, subclassing exchange classes, and using lambda functions for milliseconds-based nonce.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_100\n\nLANGUAGE: Python\nCODE:\n```\n# Python\n\n# 1: the shortest\ncoinbasepro = ccxt.coinbasepro({'nonce': ccxt.Exchange.milliseconds})\n\n# 2: custom nonce\nclass MyKraken(ccxt.kraken):\n    n = 1\n    def nonce(self):\n        return self.n += 1\n\n# 3: milliseconds nonce\nclass MyBitfinex(ccxt.bitfinex):\n    def nonce(self):\n        return self.milliseconds()\n\n# 4: milliseconds nonce inline\nhitbtc = ccxt.hitbtc({\n    'nonce': lambda: int(time.time() * 1000)\n})\n\n# 5: milliseconds nonce\nacx = ccxt.acx({'nonce': lambda: ccxt.Exchange.milliseconds()})\n```\n\n----------------------------------------\n\nTITLE: Fetching Order Detail JavaScript\nDESCRIPTION: This example shows how to fetch the details of an order by ID using the CCXT library in JavaScript. It defines an asynchronous immediately invoked function expression (IIFE) that calls `exchange.fetchOrder(id)` and logs the order details to the console.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_163\n\nLANGUAGE: javascript\nCODE:\n```\n(async function () {\n    const order = await exchange.fetchOrder (id)\n    console.log (order)\n}) ()\n```\n\n----------------------------------------\n\nTITLE: Create Order WS Method Signature in Python\nDESCRIPTION: Defines the signature for the create_order_ws method in Python. It creates an order using WebSocket. Parameters include symbol, type, side, amount, price (optional), and additional parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_54\n\nLANGUAGE: python\nCODE:\n```\ncreate_order_ws(self, symbol: str, type: OrderType, side: OrderSide, amount: float, price: Optional[float] = None, params={})\n```\n\n----------------------------------------\n\nTITLE: Fetching Ledger Entries in JavaScript with CCXT\nDESCRIPTION: Method for retrieving multiple ledger entries in JavaScript using CCXT. Takes optional currency code, since timestamp for pagination, limit for restricting number of results, and additional parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_134\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync fetchLedger (code = undefined, since = undefined, limit = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Fetching Trades with Date-Based Pagination in CCXT\nDESCRIPTION: This PHP snippet shows how to fetch trades using date-based pagination. It initializes a 'since' timestamp and fetches trades repeatedly, updating 'since' with the timestamp of the last trade in each batch.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_68\n\nLANGUAGE: PHP\nCODE:\n```\nif ($exchange->has['fetchMyTrades']) {\n    $since = exchange->milliseconds () - 86400000; // -1 day from now\n    // alternatively, fetch from a certain starting datetime\n    // $since = $exchange->parse8601 ('2018-01-01T00:00:00Z');\n    $all_trades = array ();\n    while (since < exchange->milliseconds ()) {\n        $symbol = null; // change for your symbol\n        $limit = 20; // change for your limit\n        $trades = $exchange->fetchMyTrades ($symbol, $since, $limit);\n        if (count($trades)) {\n            $since = $trades[count($trades) - 1]['timestamp'] + 1;\n            $all_trades = array_merge ($all_trades, $trades);\n        } else {\n            break;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Order Structure Example JavaScript\nDESCRIPTION: This JavaScript object represents the typical structure of an order object returned by CCXT's unified API. It includes information like order ID, timestamps, status, symbol, type, side, price, amount, filled amount, cost, trades, fees, and the original exchange-specific info.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_169\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    'id':                '12345-67890:09876/54321', // string\n    'clientOrderId':     'abcdef-ghijklmnop-qrstuvwxyz', // a user-defined clientOrderId, if any\n    'datetime':          '2017-08-17 12:42:48.000', // ISO8601 datetime of 'timestamp' with milliseconds\n    'timestamp':          1502962946216, // order placing/opening Unix timestamp in milliseconds\n    'lastTradeTimestamp': 1502962956216, // Unix timestamp of the most recent trade on this order\n    'status':      'open',        // 'open', 'closed', 'canceled', 'expired', 'rejected'\n    'symbol':      'ETH/BTC',     // symbol\n    'type':        'limit',       // 'market', 'limit'\n    'timeInForce': 'GTC',         // 'GTC', 'IOC', 'FOK', 'PO'\n    'side':        'buy',         // 'buy', 'sell'\n    'price':        0.06917684,   // float price in quote currency (may be empty for market orders)\n    'average':      0.06917684,   // float average filling price\n    'amount':       1.5,          // ordered amount of base currency\n    'filled':       1.1,          // filled amount of base currency\n    'remaining':    0.4,          // remaining amount to fill\n    'cost':         0.076094524,  // 'filled' * 'price' (filling price used where available)\n    'trades':     [ ... ],        // a list of order trades/executions\n    'fee': {                      // fee info, if available\n        'currency': 'BTC',        // which currency the fee is (usually quote)\n        'cost': 0.0009,           // the fee amount in that currency\n        'rate': 0.002,            // the fee rate (if available)\n    },\n    'info': { ... },              // the original unparsed order structure as is\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching All Orders JavaScript\nDESCRIPTION: This snippet demonstrates how to fetch all orders using the `fetchOrders` method of the CCXT exchange object in JavaScript.  It checks if the exchange supports the `fetchOrders` functionality.  It includes optional parameters for filtering by symbol, since timestamp, and limit, and an additional params object for exchange-specific overrides.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_166\n\nLANGUAGE: javascript\nCODE:\n```\nif (exchange.has['fetchOrders'])\n    exchange.fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Using Proxy Callback in CCXT (JavaScript)\nDESCRIPTION: Demonstrates how to use a callback function to dynamically determine the proxy URL for CCXT requests. This allows for more flexible proxy selection based on the URL, method, headers, or body of the request.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_296\n\nLANGUAGE: javascript\nCODE:\n```\nmyEx.proxyUrlCallback = function (url, method, headers, body) { ... return 'http://1.2.3.4/'; }\n```\n\n----------------------------------------\n\nTITLE: Fetching Transactions in Python\nDESCRIPTION: Example of how to fetch transactions using the CCXT library in Python. Checks if the exchange supports the fetch_transactions method before calling it.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_148\n\nLANGUAGE: Python\nCODE:\n```\n# fetch_transactions(code = None, since = None, limit = None, params = {})\n\nif exchange.has['fetchTransactions']:\n    transactions = exchange.fetch_transactions(code, since, limit, params)\nelse:\n    raise Exception (exchange.id + ' does not have the fetch_transactions method')\n```\n\n----------------------------------------\n\nTITLE: Fetching All Tickers in JavaScript\nDESCRIPTION: Demonstrates how to fetch all tickers at once using CCXT in JavaScript.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_69\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (exchange.has['fetchTickers']) {\n    console.log (await (exchange.fetchTickers ())) // all tickers indexed by their symbols\n}\n```\n\n----------------------------------------\n\nTITLE: Amount, Price, Cost, Currency to Precision (Python)\nDESCRIPTION: Defines Python functions for formatting amount, price, cost, and currency values to exchange-specific precision. Requires loading markets with `exchange.load_markets()` before calling these methods.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_33\n\nLANGUAGE: Python\nCODE:\n```\ndef amount_to_precision (symbol, amount):\ndef price_to_precision (symbol, price):\ndef cost_to_precision (symbol, cost):\ndef currency_to_precision (code, amount):\n```\n\n----------------------------------------\n\nTITLE: Watching Ticker with CCXT Pro (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates how to use CCXT Pro to subscribe to a WebSocket stream of ticker updates for a given symbol. It checks if the exchange supports the `watchTicker` method, and if so, it enters an infinite loop to continuously fetch and display the ticker data. Error handling is included to catch and log any exceptions that occur during the process. It shows real time prices.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\nif (exchange.has['watchTicker']) {\n    while (true) {\n        try {\n            const ticker = await exchange.watchTicker (symbol, params)\n            console.log (new Date (), ticker)\n        } catch (e) {\n            console.log (e)\n            // stop the loop on exception or leave it commented to retry\n            // throw e\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Markets and Currencies in Python\nDESCRIPTION: Shows how to load markets, access market structures by symbol and ID, get lists of symbols and currencies, and navigate between symbols and market IDs using the CCXT library in Python.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_38\n\nLANGUAGE: Python\nCODE:\n```\nprint(exchange.load_markets())\n\netheur1 = exchange.markets['ETH/EUR']         # get market structure by symbol\netheur2 = exchange.market('ETH/EUR')          # same result in a slightly different way\n\netheurId = exchange.market_id('ETH/EUR')      # get market id by symbol\n\nsymbols = exchange.symbols                    # get a list of symbols\nsymbols2 = list(exchange.markets.keys())      # same as previous line\n\nprint(exchange.id, symbols)                   # print all symbols\n\ncurrencies = exchange.currencies              # a dictionary of currencies\n\nkraken = ccxt.kraken()\nkraken.load_markets()\n\nkraken.markets['BTC/USD']                     # symbol â market (get market by symbol)\nkraken.markets_by_id['XXRPZUSD'][0]           # id â market (get market by id)\n\nkraken.markets['BTC/USD']['id']               # symbol â id (get id by symbol)\nkraken.markets_by_id['XXRPZUSD'][0]['symbol'] # id â symbol (get symbol by id)\n```\n\n----------------------------------------\n\nTITLE: Overriding Nonce Python\nDESCRIPTION: This snippet demonstrates how to override the nonce in Python. It includes different approaches like using milliseconds, custom nonce, and lambda functions for concise implementation.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_149\n\nLANGUAGE: python\nCODE:\n```\n# Python\n\n# 1: the shortest\ncoinbasepro = ccxt.coinbasepro({'nonce': ccxt.Exchange.milliseconds})\n\n# 2: custom nonce\nclass MyKraken(ccxt.kraken):\n    n = 1\n    def nonce(self):\n        return self.n += 1\n\n# 3: milliseconds nonce\nclass MyBitfinex(ccxt.bitfinex):\n    def nonce(self):\n        return self.milliseconds()\n\n# 4: milliseconds nonce inline\nhitbtc = ccxt.hitbtc({\n    'nonce': lambda: int(time.time() * 1000)\n})\n\n# 5: milliseconds nonce\nacx = ccxt.acx({'nonce': lambda: ccxt.Exchange.milliseconds()})\n```\n\n----------------------------------------\n\nTITLE: Initializing Exchanges and Accessing Market Data in PHP with CCXT\nDESCRIPTION: Demonstrates how to initialize multiple exchange instances in PHP, load markets, fetch order books, trades, tickers, and create both market and limit orders. Shows different initialization methods including with API credentials.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/README.md#2025-04-22_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\ninclude 'ccxt.php';\n\n$poloniex = new \\ccxt\\poloniex ();\n$bittrex  = new \\ccxt\\bittrex  (array ('verbose' => true));\n$quoinex  = new \\ccxt\\quoinex   ();\n$zaif     = new \\ccxt\\zaif     (array (\n    'apiKey' => 'YOUR_PUBLIC_API_KEY',\n    'secret' => 'YOUR_SECRET_PRIVATE_KEY',\n));\n$hitbtc   = new \\ccxt\\hitbtc   (array (\n    'apiKey' => 'YOUR_PUBLIC_API_KEY',\n    'secret' => 'YOUR_SECRET_PRIVATE_KEY',\n));\n\n$exchange_id = 'binance';\n$exchange_class = \"\\\\ccxt\\\\$exchange_id\";\n$exchange = new $exchange_class (array (\n    'apiKey' => 'YOUR_API_KEY',\n    'secret' => 'YOUR_SECRET',\n));\n\n$poloniex_markets = $poloniex->load_markets ();\n\nvar_dump ($poloniex_markets);\nvar_dump ($bittrex->load_markets ());\nvar_dump ($quoinex->load_markets ());\n\nvar_dump ($poloniex->fetch_order_book ($poloniex->symbols[0]));\nvar_dump ($bittrex->fetch_trades ('BTC/USD'));\nvar_dump ($quoinex->fetch_ticker ('ETH/EUR'));\nvar_dump ($zaif->fetch_ticker ('BTC/JPY'));\n\nvar_dump ($zaif->fetch_balance ());\n\n// sell 1 BTC/JPY for market price, you pay Â¥ and receive à¸¿ immediately\nvar_dump ($zaif->id, $zaif->create_market_sell_order ('BTC/JPY', 1));\n\n// buy BTC/JPY, you receive à¸¿1 for Â¥285000 when the order closes\nvar_dump ($zaif->id, $zaif->create_limit_buy_order ('BTC/JPY', 1, 285000));\n\n// set a custom user-defined id to your order\n$hitbtc->create_order ('BTC/USD', 'limit', 'buy', 1, 3000, array ('clientOrderId' => '123'));\n```\n\n----------------------------------------\n\nTITLE: Fetching All Tickers in PHP\nDESCRIPTION: Illustrates how to fetch all tickers at once using CCXT in PHP.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_71\n\nLANGUAGE: PHP\nCODE:\n```\nif ($exchange->has['fetchTickers']) {\n    var_dump ($exchange->fetch_tickers ()); // all tickers indexed by their symbols\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Exchange Properties in JavaScript\nDESCRIPTION: This snippet demonstrates how to override exchange properties and options upon instantiation using the CCXT library in JavaScript, including setting rate limits, custom headers, and exchange-specific options. Requires the CCXT JavaScript library to be installed.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n\nconst exchange = new ccxt.binance ({\n    'rateLimit': 10000, // unified exchange property\n    'headers': {\n        'YOUR_CUSTOM_HTTP_HEADER': 'YOUR_CUSTOM_VALUE',\n    },\n    'options': {\n        'adjustForTimeDifference': true, // exchange-specific option\n    }\n})\nexchange.options['adjustForTimeDifference'] = false\n```\n\n----------------------------------------\n\nTITLE: Fetching Deposit Addresses By Network with CCXT in Javascript\nDESCRIPTION: This snippet shows how to fetch deposit addresses by network using CCXT in Javascript. The `fetchDepositAddressesByNetwork` method takes a currency code as input and optionally exchange-specific parameters in the `params` argument.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_240\n\nLANGUAGE: javascript\nCODE:\n```\nfetchDepositAddressesByNetwork (code, params = {})\n```\n\n----------------------------------------\n\nTITLE: Fetching Public Trades for All Symbols in PHP\nDESCRIPTION: PHP example for retrieving the most recent trades for all symbols sequentially using CCXT's fetch_trades method. This demonstrates iterating through market symbols.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_83\n\nLANGUAGE: PHP\nCODE:\n```\n// PHP\nif ($exchange->has['fetchTrades']) {\n    foreach ($exchange->markets as $symbol => $market) {\n        var_dump ($exchange->fetch_trades ($symbol));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Amount and Price Example (PHP)\nDESCRIPTION: PHP example demonstrating how to format amount and price values using `amount_to_precision` and `price_to_precision` after loading markets. The example initializes a symbol, amount, and price and prints the formatted values.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_37\n\nLANGUAGE: PHP\nCODE:\n```\n$exchange->load_markets();\n$symbol = 'BTC/USDT';\n$amount = 1.2345678;  // amount in base currency BTC\n$price = 87654.321; // price in quote currency USDT\n$formatted_amount = $exchange->amount_to_precision($symbol, $amount);\n$formatted_price = $exchange->price_to_precision($symbol, $price);\necho $formatted_amount, \" \", $formatted_price, \"\\n\";\n```\n\n----------------------------------------\n\nTITLE: Fetching Closed Orders JavaScript\nDESCRIPTION: This snippet demonstrates how to fetch closed orders using the `fetchClosedOrders` method of the CCXT exchange object in JavaScript. It first checks if the exchange supports the `fetchClosedOrders` functionality.  It allows filtering closed orders by symbol, `since` timestamp, `limit` of results, and custom parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_168\n\nLANGUAGE: javascript\nCODE:\n```\nif (exchange.has['fetchClosedOrders'])\n    exchange.fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Fetching Convert Trade History with fetchConvertTradeHistory Function in JavaScript\nDESCRIPTION: Fetches the conversion history for a specified currency code. The function takes an optional 'code', optional 'since' timestamp, optional 'limit', and optional parameters. Returns an array of conversion structures.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_289\n\nLANGUAGE: javascript\nCODE:\n```\nfetchConvertTradeHistory (code = undefined, since = undefined, limit = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Fetch Position for a Single Market (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to fetch information about a position in a single market using the `fetchPosition` method in CCXT. It requires the market symbol as a parameter and accepts optional exchange-specific parameters. The method returns a position structure containing details about the position.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_276\n\nLANGUAGE: javascript\nCODE:\n```\nfetchPosition (symbol, params = {})                         // for a single market\n```\n\n----------------------------------------\n\nTITLE: Position Structure (JavaScript)\nDESCRIPTION: This code snippet defines the structure of the object returned by the position-related methods in CCXT. It includes information about the position such as the exchange response, position ID, market symbol, timestamps, isolated/hedged status, side (long/short), number of contracts, contract size, entry price, mark price, notional value, leverage, collateral, initial margin, maintenance margin, unrealized PnL, liquidation price, margin mode, and percentage return.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_279\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   'info': { ... },             // json response returned from the exchange as is\n   'id': '1234323',             // string, position id to reference the position, similar to an order id\n   'symbol': 'BTC/USD',         // uppercase string literal of a pair of currencies\n   'timestamp': 1607723554607,  // integer unix time since 1st Jan 1970 in milliseconds\n   'datetime': '2020-12-11T21:52:34.607Z',  // ISO8601 representation of the unix time above\n   'isolated': true,            // boolean, whether or not the position is isolated, as opposed to cross where margin is added automatically\n   'hedged': false,             // boolean, whether or not the position is hedged, i.e. if trading in the opposite direction will close this position or make a new one\n   'side': 'long',              // string, long or short\n   'contracts': 5,              // float, number of contracts bought, aka the amount or size of the position\n   'contractSize': 100,         // float, the size of one contract in quote units\n   'entryPrice': 20000,         // float, the average entry price of the position\n   'markPrice': 20050,          // float, a price that is used for funding calculations\n   'notional': 100000,          // float, the value of the position in the settlement currency\n   'leverage': 100,             // float, the leverage of the position, related to how many contracts you can buy with a given amount of collateral\n   'collateral': 5300,          // float, the maximum amount of collateral that can be lost, affected by pnl\n   'initialMargin': 5000,       // float, the amount of collateral that is locked up in this position\n   'maintenanceMargin': 1000,   // float, the mininum amount of collateral needed to avoid being liquidated\n   'initialMarginPercentage': 0.05,      // float, the initialMargin as a percentage of the notional\n   'maintenanceMarginPercentage': 0.01,  // float, the maintenanceMargin as a percentage of the notional\n   'unrealizedPnl': 300,        // float, the difference between the market price and the entry price times the number of contracts, can be negative\n   'liquidationPrice': 19850,   // float, the price at which collateral becomes less than maintenanceMargin\n   'marginMode': 'cross',       // string, can be cross or isolated\n   'percentage': 3.32,          // float, represents unrealizedPnl / initialMargin * 100\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Public Trades for All Symbols in JavaScript\nDESCRIPTION: JavaScript example for retrieving the most recent trades for all symbols sequentially using CCXT's fetchTrades method. This demonstrates proper handling of rate limits with sleep function.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_81\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\nif (exchange.has['fetchTrades']) {\n    let sleep = (ms) => new Promise (resolve => setTimeout (resolve, ms));\n    for (symbol in exchange.markets) {\n        console.log (await exchange.fetchTrades (symbol))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Trade Data Structure in JavaScript\nDESCRIPTION: Example of the trade data structure returned by CCXT's fetchTrades method. This shows the expected fields in each trade object including ID, timestamp, price, and amount information.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_84\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n    {\n        'info':       { ... },                  // the original decoded JSON as is\n        'id':        '12345-67890:09876/54321', // string trade id\n        'timestamp':  1502962946216,            // Unix timestamp in milliseconds\n        'datetime':  '2017-08-17 12:42:48.000', // ISO8601 datetime with milliseconds\n        'symbol':    'ETH/BTC',                 // symbol\n        'order':     '12345-67890:09876/54321', // string order id or undefined/None/null\n        'type':      'limit',                   // order type, 'market', 'limit' or undefined/None/null\n        'side':      'buy',                     // direction of the trade, 'buy' or 'sell'\n        'price':      0.06917684,               // float price in quote currency\n        'amount':     1.5,                      // amount of base currency\n    },\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Fetching a Single Ticker Python\nDESCRIPTION: Fetches the ticker for a specific symbol from an exchange using the `fetch_ticker` method. It first checks if the exchange supports the `fetch_ticker` method. It then fetches the ticker for LTC/ZEC and a random symbol from the exchange's markets. Requires the CCXT library and a configured exchange instance.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_85\n\nLANGUAGE: python\nCODE:\n```\nimport random\nif (exchange.has['fetchTicker']):\n    print(exchange.fetch_ticker('LTC/ZEC')) # ticker for LTC/ZEC\n    symbols = list(exchange.markets.keys())\n    print(exchange.fetch_ticker(random.choice(symbols))) # ticker for a random symbol\n```\n\n----------------------------------------\n\nTITLE: Fetching Funding Rates for Multiple Markets in JavaScript\nDESCRIPTION: Fetches the funding rates for multiple market symbols.  The `symbols` parameter is an optional array of unified CCXT symbols. Optional exchange-specific parameters can be passed in via the `params` parameter. Returns an array of funding rate structures indexed by market symbols.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_117\n\nLANGUAGE: javascript\nCODE:\n```\nfetchFundingRates (symbols = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Fetching Multiple Positions in JavaScript\nDESCRIPTION: Retrieves information about all positions or specified positions in contract markets. Can filter by market symbols and accepts additional parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_171\n\nLANGUAGE: JavaScript\nCODE:\n```\nfetchPositions (symbols = undefined, params = {})\nfetchAccountPositions (symbols = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Using Precision Formatting in PHP\nDESCRIPTION: PHP implementation of precision formatting for cryptocurrency values. Shows how to format an amount and price for the BTC/USDT trading pair according to exchange-specific precision rules.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_32\n\nLANGUAGE: PHP\nCODE:\n```\n$exchange->load_markets();\n$symbol = 'BTC/USDT';\n$amount = 1.2345678;  // amount in base currency BTC\n$price = 87654.321; // price in quote currency USDT\n$formatted_amount = $exchange->amount_to_precision($symbol, $amount);\n$formatted_price = $exchange->price_to_precision($symbol, $price);\necho $formatted_amount, \" \", $formatted_price, \"\\n\";\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Tickers Python\nDESCRIPTION: Fetches specific tickers from an exchange using the `fetch_tickers` method with a list of symbols. It first checks if the exchange supports the `fetch_tickers` method. It then fetches the tickers for ETH/BTC and LTC/BTC indexed by their symbols. Requires the CCXT library and a configured exchange instance.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_91\n\nLANGUAGE: python\nCODE:\n```\nif (exchange.has['fetchTickers']):\n    print(exchange.fetch_tickers(['ETH/BTC', 'LTC/BTC'])) # listed tickers indexed by their symbols\n```\n\n----------------------------------------\n\nTITLE: Exchange Integration in PHP using CCXT\nDESCRIPTION: Demonstrates initializing multiple exchanges, loading markets, fetching order books, trades, tickers, and creating orders using CCXT in PHP. Includes authentication setup and custom order parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/python/README.md#2025-04-22_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\ninclude 'ccxt.php';\n\n$poloniex = new \\ccxt\\poloniex ();\n$bittrex  = new \\ccxt\\bittrex  (array ('verbose' => true));\n$quoinex  = new \\ccxt\\quoinex   ();\n$zaif     = new \\ccxt\\zaif     (array (\n    'apiKey' => 'YOUR_PUBLIC_API_KEY',\n    'secret' => 'YOUR_SECRET_PRIVATE_KEY',\n));\n$hitbtc   = new \\ccxt\\hitbtc   (array (\n    'apiKey' => 'YOUR_PUBLIC_API_KEY',\n    'secret' => 'YOUR_SECRET_PRIVATE_KEY',\n));\n\n$exchange_id = 'binance';\n$exchange_class = \"\\\\ccxt\\\\$exchange_id\";\n$exchange = new $exchange_class (array (\n    'apiKey' => 'YOUR_API_KEY',\n    'secret' => 'YOUR_SECRET',\n));\n\n$poloniex_markets = $poloniex->load_markets ();\n\nvar_dump ($poloniex_markets);\nvar_dump ($bittrex->load_markets ());\nvar_dump ($quoinex->load_markets ());\n\nvar_dump ($poloniex->fetch_order_book ($poloniex->symbols[0]));\nvar_dump ($bittrex->fetch_trades ('BTC/USD'));\nvar_dump ($quoinex->fetch_ticker ('ETH/EUR'));\nvar_dump ($zaif->fetch_ticker ('BTC/JPY'));\n\nvar_dump ($zaif->fetch_balance ());\n\n// sell 1 BTC/JPY for market price, you pay Â¥ and receive à¸¿ immediately\nvar_dump ($zaif->id, $zaif->create_market_sell_order ('BTC/JPY', 1));\n\n// buy BTC/JPY, you receive à¸¿1 for Â¥285000 when the order closes\nvar_dump ($zaif->id, $zaif->create_limit_buy_order ('BTC/JPY', 1, 285000));\n\n// set a custom user-defined id to your order\n$hitbtc->create_order ('BTC/USD', 'limit', 'buy', 1, 3000, array ('clientOrderId' => '123'));\n```\n\n----------------------------------------\n\nTITLE: Fetching Deposits in Python\nDESCRIPTION: Example of how to fetch deposits using the CCXT library in Python. Checks if the exchange supports the fetch_deposits method before calling it.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_142\n\nLANGUAGE: Python\nCODE:\n```\n# fetch_deposits(code = None, since = None, limit = None, params = {})\n\nif exchange.has['fetchDeposits']:\n    deposits = exchange.fetch_deposits(code, since, limit, params)\nelse:\n    raise Exception (exchange.id + ' does not have the fetch_deposits method')\n```\n\n----------------------------------------\n\nTITLE: Fetching Withdrawals with CCXT in Python\nDESCRIPTION: This snippet demonstrates how to fetch withdrawal history using the `fetch_withdrawals` method in CCXT with Python. It checks if the exchange supports the method and then calls it with optional parameters for currency code, start time, and limit. It raises an exception if the method is not supported by the exchange.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_233\n\nLANGUAGE: python\nCODE:\n```\n# fetch_withdrawals(code = None, since = None, limit = None, params = {})\n\nif exchange.has['fetchWithdrawals']:\n    withdrawals = exchange.fetch_withdrawals(code, since, limit, params)\nelse:\n    raise Exception (exchange.id + ' does not have the fetch_withdrawals method')\n```\n\n----------------------------------------\n\nTITLE: Watching Trades with CCXT Pro in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the `watchTrades` method in the CCXT Pro library to watch trades for a specific symbol. It sets up a loop to continuously receive trade updates and logs them with a timestamp. It includes error handling with a retry loop.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\nif (exchange.has['watchTrades']) {\n    while (true) {\n        try {\n            const trades = await exchange.watchTrades (symbol, since, limit, params)\n            console.log (new Date (), trades)\n        } catch (e) {\n            console.log (e)\n            // stop the loop on exception or leave it commented to retry\n            // throw e\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Proxy Configuration with proxyUrl Property\nDESCRIPTION: Configures a proxy URL to be prepended to API requests, useful for redirection or bypassing CORS restrictions. This example demonstrates how to set the `proxyUrl` property for a Binance exchange instance.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_291\n\nLANGUAGE: javascript\nCODE:\n```\nex = ccxt.binance();\nex.proxyUrl = 'YOUR_PROXY_URL';\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limiter in PHP with CCXT\nDESCRIPTION: Example of how to enable or disable the built-in rate limiter in PHP. The rate limiter throttles API requests to comply with exchange-imposed limits.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\n// enable built-in rate limiting upon instantiation of the exchange\n$exchange = new \\ccxt\\bitfinex (array (\n    // 'enableRateLimit' => true, // enabled by default\n));\n\n// or switch the built-in rate-limiter on or off later after instantiation\n$exchange->enableRateLimit = true; // enable\n$exchange->enableRateLimit = false; // disable\n```\n\n----------------------------------------\n\nTITLE: Edit Order WS Method Signature in JavaScript\nDESCRIPTION: Defines the signature for the editOrderWs method in JavaScript. It edits an existing order using WebSocket. Parameters include id, symbol, type, side, amount, price (optional), and additional parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\neditOrderWs (id, symbol: string, type: OrderType, side: OrderSide, amount: number, price: number = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Amount, Price, Cost, Currency to Precision (PHP)\nDESCRIPTION: Defines PHP functions for formatting amount, price, cost, and currency values to exchange-specific precision. Requires loading markets with `$exchange->load_markets();` before calling these methods.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_34\n\nLANGUAGE: PHP\nCODE:\n```\nfunction amount_to_precision($symbol, $amount)\nfunction price_to_precision($symbol, $price)\nfunction cost_to_precision($symbol, $cost)\nfunction currency_to_precision($code, $amount)\n```\n\n----------------------------------------\n\nTITLE: Fetching Order Books in Python with Rate Limiting\nDESCRIPTION: Example of how to fetch order books for all markets in an exchange using Python with a delay between requests to avoid rate limiting. The code iterates through all symbols in the exchange and outputs each order book.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_56\n\nLANGUAGE: Python\nCODE:\n```\nimport time\ndelay = 2 # seconds\nfor symbol in exchange.markets:\n    print (exchange.fetch_order_book (symbol))\n    time.sleep (delay) # rate limit\n```\n\n----------------------------------------\n\nTITLE: Overriding Unified API Params in JavaScript\nDESCRIPTION: Demonstrates how to override exchange-specific parameters in unified API calls using JavaScript.  The `params` object is passed as the last argument to `exchange.fetchOrderBook()` to customize the request.  The parameters 'foo' and 'Hello' are examples of exchange-specific settings.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_61\n\nLANGUAGE: JavaScript\nCODE:\n```\n(async () => {\n\n    const params = {\n        'foo': 'bar',      // exchange-specific overrides in unified queries\n        'Hello': 'World!', // see their docs for more details on parameter names\n    }\n\n    // the overrides go into the last argument to the unified call â HERE\n    const result = await exchange.fetchOrderBook (symbol, length, params)\n}) ()\n```\n\n----------------------------------------\n\nTITLE: Fetching a Single Ticker PHP\nDESCRIPTION: Fetches the ticker for a specific symbol from an exchange using the `fetch_ticker` method. It first checks if the exchange supports the `fetchTicker` method. It then fetches the ticker for ETH/CNY and a random symbol from the exchange's markets. Requires the CCXT library and a configured exchange instance and a correctly set timezone.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_86\n\nLANGUAGE: php\nCODE:\n```\n//(don't forget to set your timezone properly!)\nif ($exchange->has['fetchTicker']) {\n    var_dump ($exchange->fetch_ticker ('ETH/CNY')); // ticker for ETH/CNY\n    $symbols = array_keys ($exchange->markets);\n    $random = rand () % count ($symbols);\n    var_dump ($exchange->fetch_ticker ($symbols[$random])); // ticker for a random symbol\n}\n```\n\n----------------------------------------\n\nTITLE: Watching Tickers with CCXT Pro (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates how to subscribe to WebSocket streams of ticker updates for multiple symbols using CCXT Pro. It checks if the exchange supports the `watchTickers` method. It then enters an infinite loop, continuously fetching and displaying the ticker data for the specified symbols. Error handling is implemented to catch and log any exceptions.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nif (exchange.has['watchTickers']) {\n    while (true) {\n        try {\n            const tickers = await exchange.watchTickers (symbols, params)\n            console.log (new Date (), tickers)\n        } catch (e) {\n            console.log (e)\n            // stop the loop on exception or leave it commented to retry\n            // throw e\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Handler Override in JavaScript\nDESCRIPTION: This code demonstrates how to override the `handleMessage` method in a custom exchange class (inheriting from `ccxt.pro.coinbase`) to access raw incoming WebSocket messages and add custom logic.  The original handler is called with `super.handleMessage`.  The example also shows how to use this new class to watch the ticker.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\nclass myExchange extends ccxt.pro.coinbase {\n    handleMessage (wsClient, data) {\n        console.log(\"Raw incoming message:\", message) // this is the raw update\n        super.handleMessage(wsClient, data);\n        // your extra logic here\n    }\n}\nconst ex = new myExchange();\nex.watchTicker('BTC/USDT');\n```\n\n----------------------------------------\n\nTITLE: Transferring Funds Between Exchange Accounts in JavaScript\nDESCRIPTION: Methods for transferring funds between different account types within the same exchange. These methods allow transferring a specified amount of a currency to or from an account.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_150\n\nLANGUAGE: JavaScript\nCODE:\n```\ntransferIn (code, amount, params = {})\ntransferOut (code, amount, params = {})\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Exchanges in JavaScript\nDESCRIPTION: This snippet demonstrates how to get the full list of supported exchange IDs programmatically using CCXT in JavaScript.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ccxt = require ('ccxt')\nconsole.log (ccxt.exchanges)\n```\n\n----------------------------------------\n\nTITLE: Watching OHLCV with CCXT Pro (PHP)\nDESCRIPTION: This PHP code snippet demonstrates how to subscribe to OHLCV data streams via WebSocket using CCXT Pro. It starts by checking if the exchange supports the `watchOHLCV` method. If it does, it enters an infinite loop to continuously fetch and display OHLCV data for the specified symbol and timeframe. Error handling is implemented to catch and log any exceptions.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nif ($exchange->has['watchOHLCV']) {\n    $exchange::execute_and_run(function() use ($exchange, $symbol, $timeframe, $since, $limit, $params) {\n        while (true) {\n            try {\n                $candles = yield $exchange->watch_ohlcv($symbol, $timeframe, $since, $limit, $params);\n                echo date('c'), ' ', $symbol, ' ', $timeframe, ' ', json_encode($candles), \"\\n\";\n            } catch (Exception $e) {\n                echo get_class($e), ' ', $e->getMessage(), \"\\n\";\n            }\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Trades By Order ID PHP\nDESCRIPTION: This snippet demonstrates how to fetch trades associated with a specific order ID using the `fetch_order_trades` method in PHP. It checks if the exchange supports the `fetchOrderTrades` method before attempting to fetch the trades. Requires an exchange instance, an order ID, and optionally a symbol, since, limit, and params.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_210\n\nLANGUAGE: php\nCODE:\n```\n// fetch_order_trades ($id, $symbol = null, $since = null, $limit = null, $params = array())\n\nif ($exchange->has['fetchOrderTrades']) {\n    $trades = $exchange->fetch_order_trades($order_id, $symbol, $since, $limit, $params);\n}\n```\n\n----------------------------------------\n\nTITLE: Real-time WebSocket Data Processing in JavaScript\nDESCRIPTION: Example of real-time mode for processing WebSocket data updates in CCXT Pro. This loop continuously awaits updates as they arrive from the exchange, allowing for immediate reactions to each update.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n// real-time mode\nconst limit = 5 // optional\nwhile (true) {\n    try {\n        const orderbook = await exchange.watchOrderBook (symbol, limit)\n        // your reaction to the update takes place here\n        // you arrive here after receiving the update from the exchange in real time\n        console.log (orderbook) // every update\n    } catch (e) {\n        console.log (e)\n        // throw e // uncomment to stop the loop on exceptions\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Precision Formatting in Python\nDESCRIPTION: Python implementation of the precision formatting example. Demonstrates formatting an amount and price for the BTC/USDT symbol based on the exchange's precision requirements.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_31\n\nLANGUAGE: Python\nCODE:\n```\nexchange.load_markets()\nsymbol = 'BTC/USDT'\namount = 1.2345678  # amount in base currency BTC\nprice = 87654.321  # price in quote currency USDT\nformatted_amount = exchange.amount_to_precision(symbol, amount)\nformatted_price = exchange.price_to_precision(symbol, price)\nprint(formatted_amount, formatted_price)\n```\n\n----------------------------------------\n\nTITLE: Fetching Tickers with CCXT in PHP\nDESCRIPTION: This snippet demonstrates how to fetch tickers for specific trading pairs using the `fetch_tickers` method in PHP. It checks if the exchange supports the `fetchTickers` functionality before attempting to retrieve the data. The result is a list of tickers indexed by their symbols.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_92\n\nLANGUAGE: php\nCODE:\n```\nif ($exchange->has['fetchTickers']) {\n    var_dump ($exchange->fetch_tickers (array ('ETH/BTC', 'LTC/BTC'))); // listed tickers indexed by their symbols\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Trades with PageNumber-Based Pagination in CCXT\nDESCRIPTION: This JavaScript snippet illustrates fetching trades using page number-based pagination. It initializes a 'page' variable and fetches trades, updating the 'page' parameter based on the exchange's response.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_72\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (exchange.has['fetchTrades']) {\n    let page = 0  // exchange-specific type and value\n    let allTrades = []\n    while (true) {\n        const symbol = undefined // change for your symbol\n        const since = undefined\n        const limit = 20 // change for your limit\n        const params = {\n            'page': page, // exchange-specific non-unified parameter name\n        }\n        const trades = await exchange.fetchTrades (symbol, since, limit, params)\n        if (trades.length) {\n            // not thread-safu and exchange-specific !\n            last_json_response = exchange.parseJson (exchange.last_http_response)\n            page = last_json_response['cursor']\n            allTrades.push (trades)\n        } else {\n            break\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Exchange Properties in JavaScript\nDESCRIPTION: Shows how to customize exchange properties and options during instantiation in JavaScript, including rate limiting, custom headers, and exchange-specific options.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\nconst exchange = new ccxt.binance ({\n    'rateLimit': 10000, // unified exchange property\n    'headers': {\n        'YOUR_CUSTOM_HTTP_HEADER': 'YOUR_CUSTOM_VALUE',\n    },\n    'options': {\n        'adjustForTimeDifference': true, // exchange-specific option\n    }\n})\nexchange.options['adjustForTimeDifference'] = false\n```\n\n----------------------------------------\n\nTITLE: Fetching OHLCV Data in Python\nDESCRIPTION: This snippet shows how to fetch OHLCV data for all available symbols on an exchange using Python. It includes a time delay to respect the exchange's rate limit.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_76\n\nLANGUAGE: Python\nCODE:\n```\nimport time\nif exchange.has['fetchOHLCV']:\n    for symbol in exchange.markets:\n        time.sleep (exchange.rateLimit / 1000) # time.sleep wants seconds\n        print (symbol, exchange.fetch_ohlcv (symbol, '1d')) # one day\n```\n\n----------------------------------------\n\nTITLE: Creating a Take Profit Order with CCXT (JS, Python, PHP)\nDESCRIPTION: This snippet shows how to create a take profit order using CCXT. The 'takeProfitPrice' parameter in the 'params' object specifies the price at which the take profit order will be triggered. The symbol, type, side, amount and price variables needs to be defined beforehand.  When the takeProfitPrice is reached, the position will be closed at market price or the limit price higher than your takeProfitPrice for closing a long position, or lower than your takeProfitPrice for closing a short position.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_190\n\nLANGUAGE: python\nCODE:\n```\n# for a take profit order\nparams = {\n    'takeProfitPrice': 120.45,  # your take profit price\n}\n\norder = exchange.create_order (symbol, type, side, amount, price, params)\n```\n\n----------------------------------------\n\nTITLE: Watch My Trades Method Signature in JavaScript\nDESCRIPTION: Defines the method signature for watching personal trades using CCXT Pro in JavaScript. It takes symbol, since, limit and params as arguments, with default values assigned to symbol, since and limit.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nwatchMyTrades (symbol = undefined, since = undefined, limit = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Fetching Deposit/Withdrawal Fees\nDESCRIPTION: Shows the use of `fetchDepositWithdrawFee` and `fetchDepositWithdrawFees` methods to retrieve deposit and withdrawal fees for specific currencies or all available currencies on the exchange. Replaces deprecated `fetchTransactionFee(s)`.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_246\n\nLANGUAGE: javascript\nCODE:\n```\nfetchDepositWithdrawFees (codes = undefined, params = {})\nfetchDepositWithdrawFee (code, params = {})\n```\n\n----------------------------------------\n\nTITLE: Fetching All Tickers PHP\nDESCRIPTION: Fetches all tickers from an exchange using the `fetch_tickers` method. It first checks if the exchange supports the `fetchTickers` method. It then fetches all tickers indexed by their symbols. Requires the CCXT library and a configured exchange instance.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_89\n\nLANGUAGE: php\nCODE:\n```\nif ($exchange->has['fetchTickers']) {\n    var_dump ($exchange->fetch_tickers ()); // all tickers indexed by their symbols\n}\n```\n\n----------------------------------------\n\nTITLE: Fetch Leverage for a Single Symbol (JavaScript)\nDESCRIPTION: This code snippet illustrates how to fetch the leverage for a single market symbol using the `fetchLeverage` method in CCXT. It requires the market symbol as a parameter and accepts optional exchange-specific parameters. The method returns a leverage structure containing leverage information for the market.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_273\n\nLANGUAGE: javascript\nCODE:\n```\nfetchLeverage(symbol, params = {})\n```\n\n----------------------------------------\n\nTITLE: Closing Position with closePosition Function in TypeScript\nDESCRIPTION: Closes an open position for a given symbol using a market order. The function takes a symbol (required), an optional side ('buy' or 'sell'), and optional parameters specific to the exchange API endpoint. It returns an order structure.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_280\n\nLANGUAGE: typescript\nCODE:\n```\nclosePosition (symbol: string, side: OrderSide = undefined, params = {}): Promise<Order>\n```\n\n----------------------------------------\n\nTITLE: Fetching Individual Ticker in Python\nDESCRIPTION: Shows how to fetch a ticker for a specific symbol or a random symbol using CCXT in Python.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_67\n\nLANGUAGE: Python\nCODE:\n```\nimport random\nif (exchange.has['fetchTicker']):\n    print(exchange.fetch_ticker('LTC/ZEC')) # ticker for LTC/ZEC\n    symbols = list(exchange.markets.keys())\n    print(exchange.fetch_ticker(random.choice(symbols))) # ticker for a random symbol\n```\n\n----------------------------------------\n\nTITLE: Fetching User Trades with CCXT (PHP)\nDESCRIPTION: This PHP snippet demonstrates how to fetch a user's trade history using the `fetch_my_trades` method in the CCXT library. It checks if the exchange supports the `fetchMyTrades` functionality and then calls the method with optional symbol, since, limit, and params arguments (all set to null or empty array by default). The function returns an ordered array of trade objects with the most recent trade last. Proper error handling and pagination may be required for production usage.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_206\n\nLANGUAGE: PHP\nCODE:\n```\n// fetch_my_trades($symbol = null, $since = null, $limit = null, $params = array())\n\nif ($exchange->has['fetchMyTrades']) {\n    $trades = $exchange->fetch_my_trades($symbol, $since, $limit, $params);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Limit and Market Orders in Python with CCXT\nDESCRIPTION: Examples of creating limit buy orders and market buy orders in Python using the CCXT library. Shows how to specify order parameters and pass custom exchange-specific parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/README.md#2025-04-22_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\n# limit buy BTC/EUR, you pay â¬2500 and receive à¸¿1  when the order is closed\nprint(exmo.id, exmo.create_limit_buy_order('BTC/EUR', 1, 2500.00))\n\n# pass/redefine custom exchange-specific order params: type, amount, price, flags, etc...\nkraken.create_market_buy_order('BTC/USD', 1, {'trading_agreement': 'agree'})\n```\n\n----------------------------------------\n\nTITLE: Margin Structure in JavaScript\nDESCRIPTION: Defines the structure returned by margin management functions, showing the type of operation, amount changed, total margin, and related information.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_166\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    info: { ... },\n    type: 'add', // 'add', 'reduce', 'set'\n    amount: 1, // amount added, reduced, or set\n    total: 2,  // total margin or undefined if not specified by the exchange\n    code: 'USDT',\n    symbol: 'XRP/USDT:USDT',\n    status: 'ok'\n}\n```\n\n----------------------------------------\n\nTITLE: Edit Order WS Method Signature in Python\nDESCRIPTION: Defines the signature for the edit_order_ws method in Python. It edits an existing order using WebSocket. Parameters include id, symbol, type, side, amount, price (optional), and additional parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_58\n\nLANGUAGE: python\nCODE:\n```\nedit_order_ws(self, id, symbol: str, type: OrderType, side: OrderSide, amount: float, price: Optional[float] = None, params={})\n```\n\n----------------------------------------\n\nTITLE: Watching Ticker in PHP with CCXT Pro\nDESCRIPTION: Example of using the watch_ticker method in PHP to continuously stream and display ticker data. The method accepts a symbol and optional override parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-22_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n// PHP\nif ($exchange->has['watchTicker']) {\n    $exchange::execute_and_run(function() use ($exchange, $symbol, $params) {\n        while (true) {\n            try {\n\n```\n\n----------------------------------------\n\nTITLE: Overriding Exchange Methods in JavaScript\nDESCRIPTION: This snippet shows how to override instance methods of an exchange object during runtime using the CCXT library in JavaScript. Requires the CCXT JavaScript library to be installed.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n\nconst ex = new ccxt.binance ();\nex.fetch_ticker = function (symbol, params = {}) {\n    // your codes go here\n};\nconsole.log (ex.fetch_ticker('BTC/USDT'));\n```\n\n----------------------------------------\n\nTITLE: Fetch Accounts Method JavaScript\nDESCRIPTION: This snippet demonstrates the `fetchAccounts` method in JavaScript. It retrieves all accounts associated with a profile, accepting an optional `params` dictionary.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_151\n\nLANGUAGE: javascript\nCODE:\n```\nfetchAccounts (params = {})\n```\n\n----------------------------------------\n\nTITLE: Fetching Transactions with CCXT in PHP\nDESCRIPTION: This snippet demonstrates how to fetch transaction history using the `fetch_transactions` method in CCXT with PHP. It checks if the exchange supports the method and then calls it with optional parameters for currency code, start time, and limit. It throws an exception if the method is not supported by the exchange.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_237\n\nLANGUAGE: php\nCODE:\n```\n// fetch_transactions ($code = null, $since = null, $limit = null, $params = {})\n\nif ($exchange->has['fetchTransactions']) {\n    $transactions = $exchange->fetch_transactions ($code, $since, $limit, $params);\n} else {\n    throw new Exception ($exchange->id . ' does not have the fetch_transactions method');\n}\n```\n\n----------------------------------------\n\nTITLE: Withdrawing with Network Specification in Multiple Languages\nDESCRIPTION: These snippets demonstrate how to specify the network when withdrawing funds, allowing for withdrawals on multiple chains.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_139\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\nwithdraw (code, amount, address, { tag, network: 'ETH' })\n```\n\nLANGUAGE: Python\nCODE:\n```\n# Python\nwithdraw(code, amount, address, { 'tag': tag, 'network': 'ETH' })\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// PHP\nwithdraw ($code, $amount, $address, array( 'tag' => tag, 'network' -> 'ETH' ));\n```\n\n----------------------------------------\n\nTITLE: Fetching Convert Quote with fetchConvertQuote Function in JavaScript\nDESCRIPTION: Retrieves a quote for a conversion trade. The function takes the 'fromCode', 'toCode', optional amount to convert, and optional parameters specific to the exchange API endpoint. Returns a conversion structure.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_286\n\nLANGUAGE: javascript\nCODE:\n```\nfetchConvertQuote (fromCode, toCode, amount = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Fetching Individual Ticker in PHP\nDESCRIPTION: Illustrates how to fetch a ticker for a specific symbol or a random symbol using CCXT in PHP.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_68\n\nLANGUAGE: PHP\nCODE:\n```\nif ($exchange->has['fetchTicker']) {\n    var_dump ($exchange->fetch_ticker ('ETH/CNY')); // ticker for ETH/CNY\n    $symbols = array_keys ($exchange->markets);\n    $random = rand () % count ($symbols);\n    var_dump ($exchange->fetch_ticker ($symbols[$random])); // ticker for a random symbol\n}\n```\n\n----------------------------------------\n\nTITLE: Order Book Fetching Methods\nDESCRIPTION: Methods for retrieving order book data for single or multiple markets with optional limit parameter to control the number of returned orders.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_54\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync fetchOrderBook (symbol, limit = undefined, params = {})\nasync fetchOrderBooks (symbols = undefined, limit = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Trade Structure Object in CCXT\nDESCRIPTION: The standard structure of a trade object returned by CCXT. Contains information about the trade including id, timestamp, symbol, order details, price, amount, cost, and fee information.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_129\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    'info':         { ... },                    // the original decoded JSON as is\n    'id':           '12345-67890:09876/54321',  // string trade id\n    'timestamp':    1502962946216,              // Unix timestamp in milliseconds\n    'datetime':     '2017-08-17 12:42:48.000',  // ISO8601 datetime with milliseconds\n    'symbol':       'ETH/BTC',                  // symbol\n    'order':        '12345-67890:09876/54321',  // string order id or undefined/None/null\n    'type':         'limit',                    // order type, 'market', 'limit' or undefined/None/null\n    'side':         'buy',                      // direction of the trade, 'buy' or 'sell'\n    'takerOrMaker': 'taker',                    // string, 'taker' or 'maker'\n    'price':        0.06917684,                 // float price in quote currency\n    'amount':       1.5,                        // amount of base currency\n    'cost':         0.10376526,                 // total cost, `price * amount`,\n    'fee':          {                           // provided by exchange or calculated by ccxt\n        'cost':  0.0015,                        // float\n        'currency': 'ETH',                      // usually base currency for buys, quote currency for sells\n        'rate': 0.002,                          // the fee rate (if available)\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Transactions in JavaScript\nDESCRIPTION: Example of how to fetch transactions using the CCXT library in JavaScript. Checks if the exchange supports the fetchTransactions method before calling it.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_147\n\nLANGUAGE: JavaScript\nCODE:\n```\n// fetchTransactions (code = undefined, since = undefined, limit = undefined, params = {})\n\nif (exchange.has['fetchTransactions']) {\n    const transactions = await exchange.fetchTransactions (code, since, limit, params)\n} else {\n    throw new Error (exchange.id + ' does not have the fetchTransactions method')\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Market Price from Order Book in JavaScript\nDESCRIPTION: Example of how to extract the current market price from an order book in JavaScript. This code fetches the first bid and ask prices and calculates the spread between them.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_62\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet orderbook = await exchange.fetchOrderBook (exchange.symbols[0])\nlet bid = orderbook.bids.length ? orderbook.bids[0][0] : undefined\nlet ask = orderbook.asks.length ? orderbook.asks[0][0] : undefined\nlet spread = (bid && ask) ? ask - bid : undefined\nconsole.log (exchange.id, 'market price', { bid, ask, spread })\n```\n\n----------------------------------------\n\nTITLE: Listing Available Methods with an Exchange Instance (Alternative example)\nDESCRIPTION: Demonstrates how to retrieve a list of available methods for a specific exchange instance using console.log, dir(), and var_dump() in JavaScript, Python, and PHP, respectively. This can be useful for exploring the API capabilities of an exchange. Different exchanges are used to show variance\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_60\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log (new ccxt.kraken ())\n```\n\nLANGUAGE: Python\nCODE:\n```\nprint(dir(ccxt.hitbtc()))\n```\n\nLANGUAGE: PHP\nCODE:\n```\nvar_dump (new \\ccxt\\okcoin ());\n```\n\n----------------------------------------\n\nTITLE: Fetching Trades with Date-Based Pagination in CCXT\nDESCRIPTION: This snippet shows how to fetch trades using date-based pagination. It initializes a 'since' timestamp and iteratively fetches trades while updating 'since' with the timestamp of the last trade in the previous batch.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_66\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (exchange.has['fetchTrades']) {\n    let since = exchange.milliseconds () - 86400000 // -1 day from now\n    // alternatively, fetch from a certain starting datetime\n    // let since = exchange.parse8601 ('2018-01-01T00:00:00Z')\n    let allTrades = []\n    while (since < exchange.milliseconds ()) {\n        const symbol = undefined // change for your symbol\n        const limit = 20 // change for your limit\n        const trades = await exchange.fetchTrades (symbol, since, limit)\n        if (trades.length) {\n            since = trades[trades.length - 1]['timestamp'] + 1\n            allTrades = allTrades.concat (trades)\n        } else {\n            break\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching User Trades with CCXT (Python)\nDESCRIPTION: This Python snippet demonstrates how to fetch a user's trade history using the `fetch_my_trades` method in the CCXT library. It checks if the exchange supports the `fetch_my_trades` functionality and then calls the method with optional symbol, since, limit, and params arguments (all set to None by default). Proper error handling and pagination may be required for production usage.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_205\n\nLANGUAGE: Python\nCODE:\n```\n# fetch_my_trades(symbol=None, since=None, limit=None, params={})\n\nif exchange.has['fetchMyTrades']:\n    exchange.fetch_my_trades(symbol=None, since=None, limit=None, params={})\n```\n\n----------------------------------------\n\nTITLE: Fetching Withdrawals with CCXT in Javascript\nDESCRIPTION: This snippet demonstrates how to fetch withdrawal history using the `fetchWithdrawals` method in CCXT with Javascript. It checks if the exchange supports the method and then calls it with optional parameters for currency code, start time, and limit. It throws an error if the method is not supported by the exchange.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_232\n\nLANGUAGE: javascript\nCODE:\n```\n// fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {})\n\nif (exchange.has['fetchWithdrawals']) {\n    const withdrawals = await exchange.fetchWithdrawals (code, since, limit, params)\n} else {\n    throw new Error (exchange.id + ' does not have the fetchWithdrawals method')\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Tickers in Python\nDESCRIPTION: Demonstrates how to fetch tickers for specific symbols using CCXT in Python.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_73\n\nLANGUAGE: Python\nCODE:\n```\nif (exchange.has['fetchTickers']):\n    print(exchange.fetch_tickers(['ETH/BTC', 'LTC/BTC'])) # listed tickers indexed by their symbols\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Rate Limiter (Python)\nDESCRIPTION: This Python snippet shows how to enable or disable the built-in rate limiter in CCXT when instantiating an exchange object, or after the object is created. Enabling the rate limiter helps prevent exceeding the exchange's API rate limits.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# enable built-in rate limiting upon instantiation of the exchange\nexchange = ccxt.bitfinex({\n    # 'enableRateLimit': True,  # enabled by default\n})\n\n# or switch the built-in rate-limiter on or off later after instantiation\nexchange.enableRateLimit = True  # enable\nexchange.enableRateLimit = False  # disable\n```\n\n----------------------------------------\n\nTITLE: Fetching Transaction Fee with CCXT in JavaScript\nDESCRIPTION: Retrieves the transaction fee for a specific currency. Requires a currency code and can accept optional parameters like transaction type or network.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_158\n\nLANGUAGE: JavaScript\nCODE:\n```\nfetchTransactionFee (code, params = {})\n```\n\n----------------------------------------\n\nTITLE: Load Markets Example (PHP)\nDESCRIPTION: PHP example demonstrating how to load markets using `load_markets()` method. It instantiates a `huobipro` exchange object, loads the markets, and prints the exchange ID and the markets.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_43\n\nLANGUAGE: PHP\nCODE:\n```\n$id = 'huobipro';\n$exchange = '\\\\ccxt\\\\' . $id;\n$huobipro = new $exchange();\n$markets = $huobipro->load_markets();\nvar_dump($huobipro->id, $markets);\n```\n\n----------------------------------------\n\nTITLE: Fetching Personal Trades in PHP with CCXT\nDESCRIPTION: Method for retrieving the user's personal trade history in PHP using CCXT. Takes optional parameters including symbol, since timestamp for pagination, and limit for restricting the number of results.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_128\n\nLANGUAGE: PHP\nCODE:\n```\n// PHP\n// fetch_my_trades($symbol = null, $since = null, $limit = null, $params = array())\n\nif ($exchange->has['fetchMyTrades']) {\n    $trades = $exchange->fetch_my_trades($symbol, $since, $limit, $params);\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Order by ID in JavaScript\nDESCRIPTION: Example of using the fetchOrder method to retrieve order information by ID from an authenticated exchange instance in JavaScript. This asynchronous function demonstrates how to get details of a specific order.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_106\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (exchange.has['fetchOrder']) {\n   //  you can use the params argument for custom overrides\n   let order = await exchange.fetchOrder (id, symbol = undefined, params = {})\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Unified API Params in CCXT\nDESCRIPTION: Examples of how to override default parameters when calling unified API methods in CCXT for different programming languages. This demonstrates passing custom settings or optional parameters to unified queries.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_49\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\n(async () => {\n\n    const params = {\n        'foo': 'bar',      // exchange-specific overrides in unified queries\n        'Hello': 'World!', // see their docs for more details on parameter names\n    }\n\n    // the overrides go into the last argument to the unified call â HERE\n    const result = await exchange.fetchOrderBook (symbol, length, params)\n}) ()\n```\n\nLANGUAGE: Python\nCODE:\n```\n# Python\nparams = {\n    'foo': 'bar',       # exchange-specific overrides in unified queries\n    'Hello': 'World!',  # see their docs for more details on parameter names\n}\n\n# overrides go in the last argument to the unified call â HERE\nresult = exchange.fetch_order_book(symbol, length, params)\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// PHP\n$params = array (\n    'foo' => 'bar',       // exchange-specific overrides in unified queries\n    'Hello' => 'World!',  // see their docs for more details on parameter names\n}\n\n// overrides go into the last argument to the unified call â HERE\n$result = $exchange->fetch_order_book ($symbol, $length, $params);\n```\n\n----------------------------------------\n\nTITLE: Creating Limit Sell/Buy Orders JavaScript\nDESCRIPTION: This snippet demonstrates how to create limit sell and buy orders using the CCXT library in JavaScript. It shows both camelCase and underscore notations.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_181\n\nLANGUAGE: javascript\nCODE:\n```\n// camelCaseStyle\nexchange.createLimitBuyOrder (symbol, amount, price[, params])\nexchange.createLimitSellOrder (symbol, amount, price[, params])\n\n// underscore_style\nexchange.create_limit_buy_order (symbol, amount, price[, params])\nexchange.create_limit_sell_order (symbol, amount, price[, params])\n```\n\n----------------------------------------\n\nTITLE: Exchange setMarginMode Check (JavaScript)\nDESCRIPTION: Checks if an exchange supports the setMarginMode functionality.  If false, it usually indicates the exchange doesn't offer leveraged trading or only offers one margin mode.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_266\n\nLANGUAGE: javascript\nCODE:\n```\nexchange.has['setMarginMode'] == false\n```\n\n----------------------------------------\n\nTITLE: Loading Markets in Python\nDESCRIPTION: Python implementation of the market loading process. Demonstrates how to obtain the list of trading pairs from an exchange before making other API calls.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_35\n\nLANGUAGE: Python\nCODE:\n```\nokcoin = ccxt.okcoinusd()\nmarkets = okcoin.load_markets()\nprint(okcoin.id, markets)\n```\n\n----------------------------------------\n\nTITLE: Enabling Sandbox Mode in Python\nDESCRIPTION: Demonstrates how to enable sandbox/testnet mode for an exchange in Python. This must be called immediately after creating the exchange instance and before any other calls.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\n# Python\nexchange = ccxt.binance(config)\nexchange.set_sandbox_mode(True)  # enable sandbox mode\n```\n\n----------------------------------------\n\nTITLE: Fetching Settlement History with CCXT (JavaScript)\nDESCRIPTION: This method fetches the settlement history for a given contract symbol. It takes the symbol, and optionally since and limit parameters to filter the results. The params argument allows for exchange-specific parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_129\n\nLANGUAGE: javascript\nCODE:\n```\nfetchSettlementHistory (symbol = undefined, since = undefined, limit = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Instantiating Exchanges in Python\nDESCRIPTION: This code example shows different methods of instantiating exchange objects in Python, including using default IDs, custom IDs, and dynamic instantiation from variable IDs.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nimport ccxt\nexchange = ccxt.okcoinusd () # default id\nokcoin1 = ccxt.okcoinusd ({ 'id': 'okcoin1' })\nokcoin2 = ccxt.okcoinusd ({ 'id': 'okcoin2' })\nid = 'btcchina'\nbtcchina = eval ('ccxt.%s ()' % id)\ncoinbasepro = getattr (ccxt, 'coinbasepro') ()\n\n# from variable id\nexchange_id = 'binance'\nexchange_class = getattr(ccxt, exchange_id)\n```\n\n----------------------------------------\n\nTITLE: Fetching a Single Market Funding Rate in JavaScript\nDESCRIPTION: Fetches the funding rate for a single market symbol. Requires the `symbol` parameter. Optional exchange-specific parameters can be passed in via the `params` parameter. Returns a funding rate structure.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_116\n\nLANGUAGE: javascript\nCODE:\n```\nfetchFundingRate (symbol, params = {})\n```\n\n----------------------------------------\n\nTITLE: Fetching Mark and Index OHLCV Data in JavaScript\nDESCRIPTION: This snippet demonstrates how to fetch Mark and Index OHLCV data for a specific symbol using JavaScript. It uses the 'price' parameter to specify the type of data to retrieve.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_78\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function main () {\n    const exchange = new ccxt.binanceusdm ()\n    const markKlines = await exchange.fetchOHLCV ('ADA/USDT', '1h', undefined, undefined, { 'price': 'mark' })\n    console.log (markKlines)\n    const indexKlines = await exchange.fetchOHLCV ('ADA/USDT', '1h', undefined, undefined, { 'price': 'index' })\n    console.log (indexKlines)\n}\n\nmain ()\n```\n\n----------------------------------------\n\nTITLE: Watching Tickers with CCXT Pro (Python)\nDESCRIPTION: This Python code snippet illustrates how to use CCXT Pro to subscribe to WebSocket streams of ticker updates for multiple symbols. It verifies that the exchange supports the `watch_tickers` method. Then, it enters an infinite loop, continuously fetching and printing the ticker data, along with a timestamp. Error handling is included to catch and print any exceptions that occur.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nif exchange.has['watchTickers']:\n    while True:\n        try:\n            tickers = await exchange.watch_tickers(symbols, params)\n            print(exchange.iso8601(exchange.milliseconds()), tickers)\n        except Exception as e:\n            print(e)\n            # stop the loop on exception or leave it commented to retry\n            # raise e\n```\n\n----------------------------------------\n\nTITLE: Precalculating Fees\nDESCRIPTION: Demonstrates the use of the experimental `calculateFee` method to precalculate trading fees for an order based on specified parameters.  It warns about the instability and potential inaccuracy of this method.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_250\n\nLANGUAGE: javascript\nCODE:\n```\ncalculateFee (symbol, type, side, amount, price, takerOrMaker = 'taker', params = {})\n```\n\n----------------------------------------\n\nTITLE: Fetching All Orders in JavaScript\nDESCRIPTION: Shows how to use the fetchOrders method to retrieve all orders for a specific symbol, with optional filtering by time and limit parameters. This is useful for order history tracking.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_108\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (exchange.has['fetchOrders'])\n    exchange.fetchOrders (symbol = undefined, since = undefined, limit = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Fetching Order by ID Implementation Examples\nDESCRIPTION: Code examples showing how to fetch order information by ID across different programming languages (JavaScript, Python, and PHP) using CCXT library. Both synchronous and asynchronous approaches are demonstrated.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_107\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\n(async function () {\n    const order = await exchange.fetchOrder (id)\n    console.log (order)\n}) ()\n```\n\nLANGUAGE: Python\nCODE:\n```\n# Python 3 (synchronous)\nif exchange.has['fetchOrder']:\n    order = exchange.fetch_order(id)\n    print(order)\n\n# Python 3.5+ asyncio (asynchronous)\nimport asyncio\nimport ccxt.async_support as ccxt\nif exchange.has['fetchOrder']:\n    order = asyncio.run(exchange.fetch_order(id))\n    print(order)\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// PHP\nif ($exchange->has['fetchOrder']) {\n    $order = $exchange->fetch_order($id);\n    var_dump($order);\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Balance - Python Example\nDESCRIPTION: This Python example demonstrates how to use the `fetch_balance` method with the ccxt library. It initializes an exchange instance using `getattr` and then prints the balance. Requires the ccxt library.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_156\n\nLANGUAGE: python\nCODE:\n```\nprint (exchange.fetch_balance ())\n```\n\n----------------------------------------\n\nTITLE: Fetching Market Leverage Tiers in JavaScript\nDESCRIPTION: Fetches the leverage tiers for a specific market. Requires the `symbol` parameter, which is a unified CCXT market symbol.  Additional exchange specific parameters can be passed in via the `params` parameter. Returns a leverage tiers structure.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_114\n\nLANGUAGE: javascript\nCODE:\n```\nfetchMarketLeverageTiers(symbol, params = {})\n```\n\n----------------------------------------\n\nTITLE: Checking Market Order Support Python\nDESCRIPTION: This snippet shows how to check if an exchange supports market orders using the `.has['createMarketOrder']` property in Python. This is useful for determining if you can use market orders with a particular exchange.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_177\n\nLANGUAGE: python\nCODE:\n```\nif exchange.has['createMarketOrder']:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Enabling Sandbox Mode in PHP\nDESCRIPTION: This snippet shows how to enable sandbox mode for an exchange using the CCXT library in PHP. It's crucial to set the sandbox mode immediately after instantiating the exchange object. Requires the CCXT PHP library to be installed.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n$exchange = new \\ccxt\\binance($config);\n$exchange->set_sandbox_mode(true); // enable sandbox mode\n```\n\n----------------------------------------\n\nTITLE: Checking CCXT Version in Python\nDESCRIPTION: This Python snippet shows how to retrieve the installed version of the CCXT library. Knowing the version is crucial for identifying and resolving potential issues related to outdated or incompatible versions.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_310\n\nLANGUAGE: python\nCODE:\n```\nprint('CCXT version:', ccxt.__version__)  # Python\n```\n\n----------------------------------------\n\nTITLE: Custom Handler Override in Python\nDESCRIPTION: This code demonstrates how to override the `handle_message` method in a custom exchange class (inheriting from `ccxt.pro.coinbase`) to access raw incoming WebSocket messages and add custom logic.  The original handler is called with `super().handle_message`.  The example also shows how to use this new class to watch the ticker within an asyncio event loop.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_70\n\nLANGUAGE: python\nCODE:\n```\n\nclass my_exchange(ccxt.pro.coinbase):\n    def handle_message(self, client, message):\n        print(\"Raw incoming message:\", message)  # this is the raw update\n        super().handle_message(client, message)\n        # your extra logic here\n\nasync def example():\n    ex = my_exchange()\n    await ex.watch_ticker('BTC/USDT')\n\nasyncio.run(example())\n```\n\n----------------------------------------\n\nTITLE: Fetching Withdrawals in PHP\nDESCRIPTION: Example of how to fetch withdrawals using the CCXT library in PHP. Checks if the exchange supports the fetch_withdrawals method before calling it.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_146\n\nLANGUAGE: PHP\nCODE:\n```\n// fetch_withdrawals ($code = null, $since = null, $limit = null, $params = {})\n\nif ($exchange->has['fetchWithdrawals']) {\n    $withdrawals = $exchange->fetch_withdrawals ($code, $since, $limit, $params);\n} else {\n    throw new Exception ($exchange->id . ' does not have the fetch_withdrawals method');\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Order Book with Limit - Python\nDESCRIPTION: This code snippet shows how to fetch an order book using the CCXT library in Python, limiting the number of bid/ask entries returned.  It specifies the symbol 'BTC/USD' and a limit of 10.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_76\n\nLANGUAGE: python\nCODE:\n```\n\nimport ccxt\n# return up to ten bidasks on each side of the order book stack\nlimit = 10\nccxt.cex().fetch_order_book('BTC/USD', limit)\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Ticker Data Asynchronously in Python\nDESCRIPTION: This Python code demonstrates how to asynchronously fetch ticker data from the Poloniex exchange using the ccxt library's async support. It imports the asyncio and ccxt.async_support modules, defines an asynchronous function to fetch and print the ticker, and then runs the function using asyncio.run(). Requires Python 3.5+ and the aiohttp library.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_56\n\nLANGUAGE: Python\nCODE:\n```\nimport asyncio\nimport ccxt.async_support as ccxt\n\nasync def print_poloniex_ethbtc_ticker():\n    poloniex = ccxt.poloniex()\n    print(await poloniex.fetch_ticker('ETH/BTC'))\n    await polonix.close()  # close the exchange instance when you don't need it anymore\n\nasyncio.run(print_poloniex_ethbtc_ticker())\n```\n\n----------------------------------------\n\nTITLE: Formatting Amount and Price Example (Python)\nDESCRIPTION: Python example demonstrating how to format amount and price values using `amount_to_precision` and `price_to_precision` after loading markets. The example initializes a symbol, amount, and price and prints the formatted values.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_36\n\nLANGUAGE: Python\nCODE:\n```\nexchange.load_markets()\nsymbol = 'BTC/USDT'\namount = 1.2345678  # amount in base currency BTC\nprice = 87654.321  # price in quote currency USDT\nformatted_amount = exchange.amount_to_precision(symbol, amount)\nformatted_price = exchange.price_to_precision(symbol, price)\nprint(formatted_amount, formatted_price)\n```\n\n----------------------------------------\n\nTITLE: Setting Leverage for Trading in JavaScript\nDESCRIPTION: Sets the desired leverage for margin or contract trading. Some exchanges require a market symbol while others set leverage at the account level.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_169\n\nLANGUAGE: JavaScript\nCODE:\n```\nsetLeverage (leverage, symbol = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Funding History Structure in JavaScript\nDESCRIPTION: Defines the structure for funding history records including symbol, amount, and timestamp information.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_173\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    info: { ... },\n    symbol: \"XRP/USDT:USDT\",\n    code: \"USDT\",\n    timestamp: 1646954920000,\n    datetime: \"2022-03-08T16:00:00.000Z\",\n    id: \"1520286109858180\",\n    amount: -0.027722\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Exchanges with CCXT in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a list of supported cryptocurrency exchanges using the CCXT library in PHP.  It includes the CCXT library and then outputs a list of exchanges. Requires the CCXT PHP library to be installed.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\ninclude 'ccxt.php';\nvar_dump (\\ccxt\\Exchange::$exchanges);\n```\n\n----------------------------------------\n\nTITLE: Enabling Sandbox Mode in JavaScript\nDESCRIPTION: Demonstrates how to enable sandbox/testnet mode for an exchange in JavaScript. This must be called immediately after creating the exchange instance and before any other calls.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\nconst exchange = new ccxt.binance (config)\nexchange.setSandboxMode (true) // enable sandbox mode\n```\n\n----------------------------------------\n\nTITLE: Fetching Trading Fee (single symbol)\nDESCRIPTION: Shows the `fetchTradingFee` method and describes parameters required and the return value.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_252\n\nLANGUAGE: javascript\nCODE:\n```\nfetchTradingFee (symbol, params = {})\n```\n\n----------------------------------------\n\nTITLE: Setting clientOrderId in PHP\nDESCRIPTION: Demonstrates how to set a custom `clientOrderId` when creating an order using the CCXT library in PHP. The `clientOrderId` is included within an array passed as the `params` argument to the `create_order` method. Requires symbol, type, side, amount, and price to be defined.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_203\n\nLANGUAGE: PHP\nCODE:\n```\n$exchange->create_order($symbol, $type, $side, $amount, $price, array(\n    'clientOrderId' => 'Foobar',\n))\n```\n\n----------------------------------------\n\nTITLE: Fetching Long Short Ratio History with CCXT in JavaScript\nDESCRIPTION: Fetches the history of long short ratios for a symbol using the `fetchLongShortRatioHistory` method. Requires a unified CCXT symbol, an optional period, since timestamp, limit for the number of ratios to retrieve, and an optional dictionary of extra parameters specific to the exchange API endpoint. Returns an array of long short ratio structures.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_139\n\nLANGUAGE: javascript\nCODE:\n```\nfetchLongShortRatioHistory (symbol = undefined, period = undefined, since = undefined, limit = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: CCXT Transfer Structure in Javascript\nDESCRIPTION: This snippet shows the structure of the transfer object returned by the `transfer` methods. It includes information like `info` (raw response), `id`, `timestamp`, `datetime`, `currency`, `amount`, `fromAccount`, `toAccount`, and `status`.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_244\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    info: { ... },\n    id: \"93920432048\",\n    timestamp: 1646764072000,\n    datetime: \"2022-03-08T18:27:52.000Z\",\n    currency: \"USDT\",\n    amount: 11.31,\n    fromAccount: \"spot\",\n    toAccount: \"future\",\n    status: \"ok\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Trades By Order ID JavaScript\nDESCRIPTION: This snippet demonstrates how to fetch trades associated with a specific order ID using the `fetchOrderTrades` method in JavaScript. It checks if the exchange supports the `fetchOrderTrades` method before attempting to fetch the trades. Requires an exchange instance, an order ID, and optionally a symbol, since, limit, and params.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_208\n\nLANGUAGE: javascript\nCODE:\n```\n// fetchOrderTrades (id, symbol = undefined, since = undefined, limit = undefined, params = {})\n\nif (exchange.has['fetchOrderTrades']) {\n    const trades = await exchange.fetchOrderTrades (orderId, symbol, since, limit, params)\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Markets and Currencies in PHP\nDESCRIPTION: Illustrates how to load markets, access market structures by symbol and ID, get lists of symbols and currencies, and navigate between symbols and market IDs using the CCXT library in PHP.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_39\n\nLANGUAGE: PHP\nCODE:\n```\n$var_dump($exchange->load_markets());\n\n$dashcny1 = $exchange->markets['DASH/CNY'];        // get market structure by symbol\n$dashcny2 = $exchange->market('DASH/CNY');         // same result in a slightly different way\n\n$dashcnyId = $exchange->market_id('DASH/CNY');     // get market id by symbol\n\n$symbols = $exchange->symbols;                     // get an array of symbols\n$symbols2 = array_keys($exchange->markets);        // same as previous line\n\nvar_dump($exchange->id, $symbols);                 // print all symbols\n\n$currencies = $exchange->currencies;               // an associative array of currencies\n\n$okcoinusd = '\\\\ccxt\\\\okcoinusd';\n$okcoinusd = new $okcoinusd();\n\n$okcoinusd->load_markets();\n\n$okcoinusd->markets['BTC/USD'];                    // symbol â market (get market by symbol)\n$okcoinusd->markets_by_id['btc_usd'][0];              // id â market (get market by id)\n\n$okcoinusd->markets['BTC/USD']['id'];              // symbol â id (get id by symbol)\n$okcoinusd->markets_by_id['btc_usd'][0]['symbol']; // id â symbol (get symbol by id)\n```\n\n----------------------------------------\n\nTITLE: Fetching Multiple Transaction Fees with CCXT in JavaScript\nDESCRIPTION: Retrieves transaction fees for multiple currencies. Can be called without specifying currency codes to fetch all available fees.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_159\n\nLANGUAGE: JavaScript\nCODE:\n```\nfetchTransactionFees (codes = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Overriding Exchange Properties in Python\nDESCRIPTION: Shows how to customize exchange properties and options during instantiation in Python, including rate limiting, custom headers, and exchange-specific options.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n# Python\nexchange = ccxt.binance ({\n    'rateLimit': 10000,  # unified exchange property\n    'headers': {\n        'YOUR_CUSTOM_HTTP_HEADER': 'YOUR_CUSTOM_VALUE',\n    },\n    'options': {\n        'adjustForTimeDifference': True,  # exchange-specific option\n    }\n})\nexchange.options['adjustForTimeDifference'] = False\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using CCXT Exchanges in Python\nDESCRIPTION: This snippet demonstrates how to initialize CCXT exchange objects, load market data, and perform various operations like fetching order books, tickers, and trades. It also shows how to create market and limit orders.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/readme.rst#2025-04-22_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nexchange_class = getattr(ccxt, exchange_id)\nexchange = exchange_class({\n    'apiKey': 'YOUR_API_KEY',\n    'secret': 'YOUR_SECRET',\n})\n\nhitbtc_markets = hitbtc.load_markets()\n\nprint(hitbtc.id, hitbtc_markets)\nprint(bitmex.id, bitmex.load_markets())\nprint(huobipro.id, huobipro.load_markets())\n\nprint(hitbtc.fetch_order_book(hitbtc.symbols[0]))\nprint(bitmex.fetch_ticker('BTC/USD'))\nprint(huobipro.fetch_trades('LTC/USDT'))\n\nprint(exmo.fetch_balance())\n\n# sell one à¸¿ for market price and receive $ right now\nprint(exmo.id, exmo.create_market_sell_order('BTC/USD', 1))\n\n# limit buy BTC/EUR, you pay â¬2500 and receive à¸¿1  when the order is closed\nprint(exmo.id, exmo.create_limit_buy_order('BTC/EUR', 1, 2500.00))\n\n# pass/redefine custom exchange-specific order params: type, amount, price, flags, etc...\nkraken.create_market_buy_order('BTC/USD', 1, {'validate': true})\n```\n\n----------------------------------------\n\nTITLE: Instantiating Exchanges in JavaScript\nDESCRIPTION: This snippet illustrates various ways to instantiate exchange objects in JavaScript, including using default IDs, custom IDs, and dynamic instantiation from variable IDs.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ccxt = require ('ccxt')\nlet exchange = new ccxt.kraken () // default id\nlet kraken1 = new ccxt.kraken ({ id: 'kraken1' })\nlet kraken2 = new ccxt.kraken ({ id: 'kraken2' })\nlet id = 'coinbasepro'\nlet coinbasepro = new ccxt[id] ();\n\n// from variable id\nconst exchangeId = 'binance'\n    , exchangeClass = ccxt[exchangeId]\n    , exchange = new exchangeClass ({\n        'apiKey': 'YOUR_API_KEY',\n        'secret': 'YOUR_SECRET',\n    })\n```\n\n----------------------------------------\n\nTITLE: Fetching Fee Information in JavaScript\nDESCRIPTION: Methods to retrieve both trading and transaction fees from an exchange. These methods return structured data about the various fees applicable to your account.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_154\n\nLANGUAGE: JavaScript\nCODE:\n```\nfetchFees (params = {})\nfetchTradingFee (symbol, params = {})\nfetchTradingFees (params = {})\nfetchTransactionFee (code, params = {})\nfetchTransactionFees (codes  = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Reloading Market Data with Force Reload (PHP)\nDESCRIPTION: This PHP code snippet demonstrates how to load market data from the Bitfinex exchange using the CCXT library. It initializes the exchange, loads markets, displays market information, and then forces a reload of the market data using the `load_markets(true)` method. This method bypasses the cache and fetches fresh data from the exchange's API. The verbose mode is enabled to log HTTP requests.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_53\n\nLANGUAGE: php\nCODE:\n```\n$bitfinex = new \\ccxt\\bitfinex(array('verbose' => true)); // log HTTP requests\n$bitfinex.load_markets(); // request markets\nvar_dump($bitfinex->id, $bitfinex->markets); // output a full list of all loaded markets\nvar_dump(array_keys ($bitfinex->markets));   // output a short list of market symbols\nvar_dump($bitfinex->markets['XRP/USD']);     // output single market details\n$bitfinex->load_markets(); // return a locally cached version, no reload\n$reloadedMarkets = $bitfinex->load_markets(true); // force HTTP reload = true\nvar_dump($bitfinex->markets['XRP/BTC']);\n```\n\n----------------------------------------\n\nTITLE: Fetch Deposits Example (PHP)\nDESCRIPTION: Demonstrates how to use the `fetch_deposits` method in PHP, including a check for the method's availability on the exchange.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_231\n\nLANGUAGE: php\nCODE:\n```\n// fetch_deposits ($code = null, $since = null, $limit = null, $params = {})\n\nif ($exchange->has['fetchDeposits']) {\n    $deposits = $exchange->fetch_deposits ($code, $since, $limit, $params);\n} else {\n    throw new Exception ($exchange->id . ' does not have the fetch_deposits method');\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Order Detail Python\nDESCRIPTION: This snippet demonstrates how to fetch an order by ID using the `fetch_order` method in Python, both synchronously and asynchronously. It first checks if the exchange supports the `fetchOrder` functionality, then calls `fetch_order` with the order ID and prints the returned order details.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_164\n\nLANGUAGE: python\nCODE:\n```\nif exchange.has['fetchOrder']:\n    order = exchange.fetch_order(id)\n    print(order)\n\n# Python 3.7+ asyncio (asynchronous)\nimport asyncio\nimport ccxt.async_support as ccxt\nif exchange.has['fetchOrder']:\n    order = asyncio.run(exchange.fetch_order(id))\n    print(order)\n```\n\n----------------------------------------\n\nTITLE: Setting Timezone and Instantiating Exchanges in PHP\nDESCRIPTION: This snippet demonstrates how to set the default timezone to UTC and instantiate cryptocurrency exchanges using the CCXT library in PHP, including setting unique IDs and accessing exchanges by variable ID. It also showcases how to set API keys.  It requires the CCXT PHP library to be installed, and date.timezone to be set in php.ini if date_default_timezone_set() is not used.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n// PHP\ndate_default_timezone_set('UTC');\ninclude 'ccxt.php';\n$bitfinex = new \\ccxt\\bitfinex(); // default id\n$bitfinex1 = new \\ccxt\\bitfinex(array('id' => 'bitfinex1'));\n$bitfinex2 = new \\ccxt\\bitfinex(array('id' => 'bitfinex2'));\n$id = 'kraken';\n$exchange = '\\\\ccxt\\\\' . $id;\n$kraken = new $exchange();\n\n// from variable id\n$exchange_id = 'binance';\n$exchange_class = \"\\\\ccxt\\\\$exchange_id\";\n$exchange = new $exchange_class(array(\n    'apiKey' => 'YOUR_API_KEY',\n    'secret' => 'YOUR_SECRET',\n));\n```\n\n----------------------------------------\n\nTITLE: Fetching Trades by Order ID in Python with CCXT\nDESCRIPTION: Method for retrieving trades associated with a specific order ID in Python using CCXT. Takes required order ID parameter and optional symbol, since timestamp, limit, and additional parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_131\n\nLANGUAGE: Python\nCODE:\n```\n# Python\n# fetch_order_trades(id, symbol=None, since=None, limit=None, params={})\n\nif exchange.has['fetchOrderTrades']:\n    exchange.fetch_order_trades(order_id, symbol=None, since=None, limit=None, params={})\n```\n\n----------------------------------------\n\nTITLE: Trading Fees Schedule Example\nDESCRIPTION: Presents an example of the data structure returned by `fetchTradingFees`.  It contains maker and taker fees and info.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_248\n\nLANGUAGE: javascript\nCODE:\n```\nfetchTradingFees (params = {})\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    'withdraw': {\n        'BTC': 0.00001,\n        'ETH': 0.001,\n        'LTC': 0.0003,\n    },\n    'deposit': {\n        'BTC': 0,\n    },\n    'info': { ... },\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Single Ledger Entry in JavaScript with CCXT\nDESCRIPTION: Method for retrieving a specific ledger entry by ID in JavaScript using CCXT. Takes a required ledger entry ID, optional currency code, and additional parameters specific to the exchange API.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_133\n\nLANGUAGE: JavaScript\nCODE:\n```\nfetchLedgerEntry (id, code = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Tickers JavaScript\nDESCRIPTION: Fetches specific tickers from an exchange using the `fetchTickers` method with a list of symbols. It first checks if the exchange supports the `fetchTickers` method. It then fetches the tickers for ETH/BTC and LTC/BTC indexed by their symbols. Requires the CCXT library and a configured exchange instance.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_90\n\nLANGUAGE: javascript\nCODE:\n```\n//JavaScript\nif (exchange.has['fetchTickers']) {\n    console.log (await (exchange.fetchTickers ([ 'ETH/BTC', 'LTC/BTC' ]))) // listed tickers indexed by their symbols\n}\n```\n\n----------------------------------------\n\nTITLE: Using Precision Formatting in JavaScript\nDESCRIPTION: Example of how to use the precision formatting methods after loading markets. This formats an amount and price for a BTC/USDT trading pair according to the exchange's precision rules.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait exchange.loadMarkets ()\nconst symbol = 'BTC/USDT'\nconst amount = 1.2345678 // amount in base currency BTC\nconst price = 87654.321 // price in quote currency USDT\nconst formattedAmount = exchange.amountToPrecision (symbol, amount)\nconst formattedPrice = exchange.priceToPrecision (symbol, price)\nconsole.log (formattedAmount, formattedPrice)\n```\n\n----------------------------------------\n\nTITLE: Fetching Exchange Status - JavaScript\nDESCRIPTION: This JavaScript function shows the usage of the `fetchStatus` method to retrieve the current status of the exchange API.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_107\n\nLANGUAGE: javascript\nCODE:\n```\nfetchStatus(params = {})\n```\n\n----------------------------------------\n\nTITLE: Fetching Transaction Fees (all codes)\nDESCRIPTION: Shows the `fetchTransactionFees` method and describes parameters required and the return value.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_256\n\nLANGUAGE: javascript\nCODE:\n```\nfetchTransactionFees (codes = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Limits in CCXT Pro (Python)\nDESCRIPTION: This code snippet shows how to set the cache limits (tradesLimit, OHLCVLimit, ordersLimit) in CCXT Pro using Python. The limits determine the maximum number of entries stored in the local cache for each data type. These limits must be set prior to calling any watch-methods.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nccxtpro.binance({\n    'options': {\n        'tradesLimit': 1000,\n        'OHLCVLimit': 1000,\n        'ordersLimit': 1000,\n    },\n})\n\n# or\n\nexchange.options['tradesLimit'] = 1000\nexchange.options['OHLCVLimit'] = 1000\nexchange.options['ordersLimit'] = 1000\n```\n\n----------------------------------------\n\nTITLE: Watching Trades with CCXT Pro in Python\nDESCRIPTION: This snippet demonstrates how to use the `watch_trades` method in the CCXT Pro library to watch trades for a specific symbol. It sets up a loop to continuously receive trade updates and logs them with a timestamp using `exchange.iso8601` for date formatting. It includes error handling with a retry loop.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nif exchange.has['watchTrades']:\n    while True:\n        try:\n            trades = await exchange.watch_trades(symbol, since, limit, params)\n            print(exchange.iso8601(exchange.milliseconds()), trades)\n        except Exception as e:\n            print(e)\n            # stop the loop on exception or leave it commented to retry\n            # raise e\n```\n\n----------------------------------------\n\nTITLE: Fetching Order Books for All Markets - PHP\nDESCRIPTION: This PHP code iterates through all markets available on an exchange, fetches the order book for each market's symbol, dumps it, and then pauses for a short delay to avoid rate limiting.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_83\n\nLANGUAGE: php\nCODE:\n```\n$delay = 2000000; // microseconds = seconds * 1000000\nforeach ($exchange->markets as $symbol => $market) {\n    var_dump ($exchange->fetch_order_book ($symbol));\n    usleep ($delay); // rate limit\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Trades By Order ID Python\nDESCRIPTION: This snippet demonstrates how to fetch trades associated with a specific order ID using the `fetch_order_trades` method in Python. It checks if the exchange supports the `fetchOrderTrades` method before attempting to fetch the trades. Requires an exchange instance, an order ID, and optionally a symbol, since, limit, and params.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_209\n\nLANGUAGE: python\nCODE:\n```\n# fetch_order_trades(id, symbol=None, since=None, limit=None, params={})\n\nif exchange.has['fetchOrderTrades']:\n    exchange.fetch_order_trades(order_id, symbol=None, since=None, limit=None, params={})\n```\n\n----------------------------------------\n\nTITLE: Fetching Transactions with CCXT in Python\nDESCRIPTION: This snippet demonstrates how to fetch transaction history using the `fetch_transactions` method in CCXT with Python. It checks if the exchange supports the method and then calls it with optional parameters for currency code, start time, and limit. It raises an exception if the method is not supported by the exchange.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_236\n\nLANGUAGE: python\nCODE:\n```\n# fetch_transactions(code = None, since = None, limit = None, params = {})\n\nif exchange.has['fetchTransactions']:\n    transactions = exchange.fetch_transactions(code, since, limit, params)\nelse:\n    raise Exception (exchange.id + ' does not have the fetch_transactions method')\n```\n\n----------------------------------------\n\nTITLE: Cursor-based Pagination Implementation\nDESCRIPTION: Implementation of cursor-based pagination using page/cursor parameter to fetch trading data with response-dependent continuation.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_53\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (exchange.has['fetchTrades']) {\n    let page = 0  // exchange-specific type and value\n    let allTrades = []\n    while (true) {\n        const symbol = undefined // change for your symbol\n        const since = undefined\n        const limit = 20 // change for your limit\n        const params = {\n            'page': page, // exchange-specific non-unified parameter name\n        }\n        const trades = await exchange.fetchTrades (symbol, since, limit, params)\n        if (trades.length) {\n            // not thread-safu and exchange-specific !\n            page = exchange.last_json_response['cursor']\n            allTrades.push (trades)\n        } else {\n            break\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Final Order Book State in CCXT\nDESCRIPTION: Representation of the final state of an order book after a sell order has matched and filled with buy orders. It shows how fully filled orders (b) have disappeared from the book while partially filled orders (i) remain with reduced amounts.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_125\n\nLANGUAGE: text\nCODE:\n```\n    | price  | amount\n----|----------------\n  a |  1.200 | 200\n  s |  1.100 | 300\n  k |  0.900 | 100\n----|----------------\n  i |  0.700 | 150\n  d |  0.500 | 100\n```\n\n----------------------------------------\n\nTITLE: Fetching Order Books in PHP with Rate Limiting\nDESCRIPTION: Example of how to fetch order books for all markets in an exchange using PHP with a delay between requests to avoid rate limiting. The code iterates through all symbols in the exchange and outputs each order book.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_57\n\nLANGUAGE: PHP\nCODE:\n```\n$delay = 2000000; // microseconds = seconds * 1000000\nforeach ($exchange->markets as $symbol => $market) {\n    var_dump ($exchange->fetch_order_book ($symbol));\n    usleep ($delay); // rate limit\n}\n```\n\n----------------------------------------\n\nTITLE: Watching Order Book in JavaScript\nDESCRIPTION: This snippet demonstrates how to watch the order book using the `watchOrderBook` method in JavaScript within CCXT Pro. It continuously fetches and prints the top asks and bids of the order book for a given symbol. The code includes error handling to catch and log any exceptions, allowing for retries.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nif (exchange.has['watchOrderBook']) {\n    while (true) {\n        try {\n            const orderbook = await exchange.watchOrderBook (symbol, limit, params)\n            console.log (new Date (), symbol, orderbook['asks'][0], orderbook['bids'][0])\n        } catch (e) {\n            console.log (e)\n            // stop the loop on exception or leave it commented to retry\n            // throw e\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Watching Balance with CCXT Pro in PHP\nDESCRIPTION: This snippet shows how to use `watch_balance` in CCXT Pro with PHP. It asynchronously fetches balance updates within a loop. The balance data is JSON encoded and printed to the console along with a timestamp. Error handling is included to catch and print any exceptions that occur during the process.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nif ($exchange->has['watchBalance']) {\n    $exchange::execute_and_run(function() use ($exchange, $params) {\n        while (true) {\n            try {\n                $balance = yield $exchange->watch_balance($params);\n                echo date('c'), ' ', json_encode($balance), \"\\n\";\n            } catch (Exception $e) {\n                echo get_class($e), ' ', $e->getMessage(), \"\\n\";\n            }\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using CCXT Exchanges in PHP\nDESCRIPTION: This snippet shows how to initialize CCXT exchange objects in PHP, load market data, and perform various operations like fetching order books, trades, and tickers. It also demonstrates how to create market and limit orders with custom parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/readme.rst#2025-04-22_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\ninclude 'ccxt.php';\n\n$poloniex = new \\ccxt\\poloniex ();\n$bittrex  = new \\ccxt\\bittrex  (array ('verbose' => true));\n$quoinex  = new \\ccxt\\quoinex   ();\n$zaif     = new \\ccxt\\zaif     (array (\n    'apiKey' => 'YOUR_PUBLIC_API_KEY',\n    'secret' => 'YOUR_SECRET_PRIVATE_KEY',\n));\n$hitbtc   = new \\ccxt\\hitbtc   (array (\n    'apiKey' => 'YOUR_PUBLIC_API_KEY',\n    'secret' => 'YOUR_SECRET_PRIVATE_KEY',\n));\n\n$exchange_id = 'binance';\n$exchange_class = \"\\\\ccxt\\\\$exchange_id\";\n$exchange = new $exchange_class (array (\n    'apiKey' => 'YOUR_API_KEY',\n    'secret' => 'YOUR_SECRET',\n));\n\n$poloniex_markets = $poloniex->load_markets ();\n\nvar_dump ($poloniex_markets);\nvar_dump ($bittrex->load_markets ());\nvar_dump ($quoinex->load_markets ());\n\nvar_dump ($poloniex->fetch_order_book ($poloniex->symbols[0]));\nvar_dump ($bittrex->fetch_trades ('BTC/USD'));\nvar_dump ($quoinex->fetch_ticker ('ETH/EUR'));\nvar_dump ($zaif->fetch_ticker ('BTC/JPY'));\n\nvar_dump ($zaif->fetch_balance ());\n\n// sell 1 BTC/JPY for market price, you pay Â¥ and receive à¸¿ immediately\nvar_dump ($zaif->id, $zaif->create_market_sell_order ('BTC/JPY', 1));\n\n// buy BTC/JPY, you receive à¸¿1 for Â¥285000 when the order closes\nvar_dump ($zaif->id, $zaif->create_limit_buy_order ('BTC/JPY', 1, 285000));\n\n// set a custom user-defined id to your order\n$hitbtc->create_order ('BTC/USD', 'limit', 'buy', 1, 3000, array ('clientOrderId' => '123'));\n```\n\n----------------------------------------\n\nTITLE: Creating Orders in C# with CCXT\nDESCRIPTION: Example of creating a limit buy order on Binance using C# with the CCXT library. Shows how to initialize the exchange with API credentials and place an order asynchronously.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/README.md#2025-04-22_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nusing ccxt; // importing ccxt\nnamespace Project;\nclass Project {\n    public async static Task CreateOrder() {\n        var exchange = new Binance();\n        exchange.apiKey = \"my api key\";\n        exchange.secret = \"my secret\";\n        // always use the capitalized method (CreateOrder instead of createOrder)\n        var order = await exchange.CreateOrder(\"BTC/USDT\", \"limit\", \"buy\", 1, 50);\n        Console.WriteLine(\"Placed Order, order id: \" + order.id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Comprehensive CCXT Usage Example in JavaScript\nDESCRIPTION: Complete example demonstrating how to initialize different exchange objects, load markets, fetch data, and create orders using the CCXT library in JavaScript.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/readme.rst#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n'use strict';\nconst ccxt = require ('ccxt');\n\n(async function () {\n    let kraken    = new ccxt.kraken ()\n    let bitfinex  = new ccxt.bitfinex ({ verbose: true })\n    let huobipro  = new ccxt.huobipro ()\n    let okcoinusd = new ccxt.okcoin ({\n        apiKey: 'YOUR_PUBLIC_API_KEY',\n        secret: 'YOUR_SECRET_PRIVATE_KEY',\n    })\n\n    const exchangeId = 'binance'\n        , exchangeClass = ccxt[exchangeId]\n        , exchange = new exchangeClass ({\n            'apiKey': 'YOUR_API_KEY',\n            'secret': 'YOUR_SECRET',\n        })\n\n    console.log (kraken.id,    await kraken.loadMarkets ())\n    console.log (bitfinex.id,  await bitfinex.loadMarkets  ())\n    console.log (huobipro.id,  await huobipro.loadMarkets ())\n\n    console.log (kraken.id,    await kraken.fetchOrderBook (kraken.symbols[0]))\n    console.log (bitfinex.id,  await bitfinex.fetchTicker ('BTC/USD'))\n    console.log (huobipro.id,  await huobipro.fetchTrades ('ETH/USDT'))\n\n    console.log (okcoinusd.id, await okcoinusd.fetchBalance ())\n\n    // sell 1 BTC/USD for market price, sell a bitcoin for dollars immediately\n    console.log (okcoinusd.id, await okcoinusd.createMarketSellOrder ('BTC/USD', 1))\n\n    // buy 1 BTC/USD for $2500, you pay $2500 and receive à¸¿1 when the order is closed\n    console.log (okcoinusd.id, await okcoinusd.createLimitBuyOrder ('BTC/USD', 1, 2500.00))\n\n    // pass/redefine custom exchange-specific order params: type, amount, price or whatever\n    // use a custom order type\n    bitfinex.createLimitSellOrder ('BTC/USD', 1, 10, { 'type': 'trailing-stop' })\n\n}) ();\n```\n\n----------------------------------------\n\nTITLE: Fetching Order Detail PHP\nDESCRIPTION: This code snippet illustrates how to fetch order details by ID using the CCXT library in PHP. It first checks if the exchange supports fetching orders via `$exchange->has['fetchOrder']`. If supported, it calls `$exchange->fetch_order($id)` to retrieve the order details and then uses `var_dump()` to display the order information.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_165\n\nLANGUAGE: php\nCODE:\n```\nif ($exchange->has['fetchOrder']) {\n    $order = $exchange->fetch_order($id);\n    var_dump($order);\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching OHLCV Data in PHP\nDESCRIPTION: This snippet illustrates how to fetch OHLCV data for all available symbols on an exchange using PHP. It includes a microsecond delay to respect the exchange's rate limit.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_77\n\nLANGUAGE: PHP\nCODE:\n```\nif ($exchange->has['fetchOHLCV']) {\n    foreach ($exchange->markets as $symbol => $market) {\n        usleep ($exchange->rateLimit * 1000); // usleep wants microseconds\n        var_dump ($exchange->fetch_ohlcv ($symbol, '1M')); // one month\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Borrow Rate History in JavaScript\nDESCRIPTION: Retrieves the historical borrow rates for a currency.  Requires the currency `code`. Optionally accepts `since` timestamp for the earliest rate and a `limit` for the number of rates to return.  Exchange-specific parameters can be passed using `params`.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_113\n\nLANGUAGE: javascript\nCODE:\n```\nfetchBorrowRateHistory (code, since = undefined, limit = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Fetching Withdrawals in JavaScript\nDESCRIPTION: Example of how to fetch withdrawals using the CCXT library in JavaScript. Checks if the exchange supports the fetchWithdrawals method before calling it.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_144\n\nLANGUAGE: JavaScript\nCODE:\n```\n// fetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {})\n\nif (exchange.has['fetchWithdrawals']) {\n    const withdrawals = await exchange.fetchWithdrawals (code, since, limit, params)\n} else {\n    throw new Error (exchange.id + ' does not have the fetchWithdrawals method')\n}\n```\n\n----------------------------------------\n\nTITLE: Watching OHLCV For Symbols with CCXT Pro (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to subscribe to OHLCV data streams for multiple symbols and timeframes using `watchOHLCVForSymbols` in CCXT Pro. The `subscriptions` array defines pairs of symbols and timeframes to subscribe to. Error handling is present to catch and log exceptions.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nif (exchange.has['watchOHLCVForSymbols']) {\n    while (true) {\n        try {\n            const subscriptions = [[\n                ['BTC/USDT', '1d'],\n                ['LTC/USDT', '5m'],\n                ['ETH/USDT', '1h']\n            ]]\n            const candles = await exchange.watchOHLCVForSymbols (subscriptions, since, limit, params)\n            console.log (new Date (), candles)\n        } catch (e) {\n            console.log (e)\n            // stop the loop on exception or leave it commented to retry\n            // throw e\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Watching Ticker with CCXT Pro (PHP)\nDESCRIPTION: This PHP code snippet shows how to subscribe to a WebSocket stream of ticker updates for a symbol using CCXT Pro. It first checks if the exchange supports the `watchTicker` method. If it does, it enters an infinite loop to continuously fetch and display the ticker data. An error handling block is included to catch and log exceptions during the process.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nif ($exchange->has['watchTicker']) {\n    $exchange::execute_and_run(function() use ($exchange, $symbol, $params) {\n        while (true) {\n            try {\n                $ticker = yield $exchange->watch_ticker($symbol, $params);\n                echo date('c'), ' ', json_encode($ticker), \"\\n\";\n            } catch (Exception $e) {\n                echo get_class($e), ' ', $e->getMessage(), \"\\n\";\n            }\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Exchange Capabilities - PHP Example\nDESCRIPTION: This PHP example illustrates how to check the `.has` property of an exchange, indicating which features are supported. It initializes a Bitfinex exchange and prints the `.has` property. Requires the ccxt library.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_160\n\nLANGUAGE: php\nCODE:\n```\n$exchange = new \\ccxt\\bitfinex();\nprint_r ($exchange->has); // or var_dump\n```\n\n----------------------------------------\n\nTITLE: Overriding handle_message in PHP\nDESCRIPTION: This snippet demonstrates how to extend the ccxt.pro.binance class in PHP and override the handle_message method to add custom message handling logic. It calls the parent's handle_message method to ensure the original functionality is preserved.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_71\n\nLANGUAGE: php\nCODE:\n```\nclass myBinance extends \\\\ccxt\\\\pro\\\\binance {\n    public function __construct($options = array()) {\n        parent::__construct($options);\n    }\n\n    // your custom handler\n    public function handle_message($ws, $message) {\n        parent::handle_message($ws, $message); // trigger original `handleMessage`\n        if ($your_condition) {\n            // execute your additional code\n        }\n    }\n}\n\n$ex = new myBinance();\n$ex->watch_ticker('BTC/USDT');\n```\n\n----------------------------------------\n\nTITLE: Checking Contract Size for Swap Trading in Python\nDESCRIPTION: This snippet demonstrates how to load markets and check the contract size for a specific trading pair in CCXT using Python. It's useful for understanding the contract size when trading swaps or perpetual futures.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/FAQ.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nawait exchange.loadMarkets()\nsymbol = 'XRP/USDT:USDT'\nmarket = exchange.market(symbol)\nprint(market['contractSize'])\n```\n\n----------------------------------------\n\nTITLE: Fetching Ticker Data Asynchronously in PHP\nDESCRIPTION: This PHP code demonstrates how to asynchronously fetch ticker data from the OKX exchange using the ccxt library and ReactPHP. It includes the autoload file, uses the React\\Async\\await function, creates an OKX exchange instance with the \\ccxt\\async namespace, and then continuously fetches and dumps the ticker for ETH/BTC. Requires PHP 8+, Composer, and specific ReactPHP dependencies.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_57\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ninclude 'vendor/autoload.php';\n\nuse function React\\Async\\await;\n\n$okx = new \\ccxt\\async\\okx();\nwhile (true) {\n    $result = await($okx->fetch_ticker('ETH/BTC'));\n    var_dump($result);\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Transfers with CCXT in Javascript\nDESCRIPTION: This snippet shows how to fetch transfer history with CCXT in Javascript. It demonstrates the use of `fetchTransfers` and `fetchTransfer` methods, taking parameters like currency code, start time, limit, transfer ID, and exchange-specific parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_243\n\nLANGUAGE: javascript\nCODE:\n```\nfetchTransfers (code = undefined, since = undefined, limit = undefined, params = {})\nfetchTransfer (id, since = undefined, limit = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Python CCXT Implementation\nDESCRIPTION: Examples of using CCXT in Python, including basic synchronous and asynchronous usage patterns.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/python/README.md#2025-04-22_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport ccxt\nprint(ccxt.exchanges) # print a list of all available exchange classes\n```\n\nLANGUAGE: Python\nCODE:\n```\nimport ccxt.async_support as ccxt # link against the asynchronous version of ccxt\n```\n\nLANGUAGE: Python\nCODE:\n```\n# coding=utf-8\n\nimport ccxt\n\nhitbtc   = ccxt.hitbtc({'verbose': True})\nbitmex   = ccxt.bitmex()\nhuobipro = ccxt.huobipro()\nexmo     = ccxt.exmo({\n    'apiKey': 'YOUR_PUBLIC_API_KEY',\n    'secret': 'YOUR_SECRET_PRIVATE_KEY',\n})\nkraken = ccxt.kraken({\n    'apiKey': 'YOUR_PUBLIC_API_KEY',\n    'secret': 'YOUR_SECRET_PRIVATE_KEY',\n})\n\nexchange_id = 'binance'\nexchange_class = getattr(ccxt, exchange_id)\nexchange = exchange_class({\n    'apiKey': 'YOUR_API_KEY',\n    'secret': 'YOUR_SECRET',\n})\n\nhitbtc_markets = hitbtc.load_markets()\n\nprint(hitbtc.id, hitbtc_markets)\nprint(bitmex.id, bitmex.load_markets())\nprint(huobipro.id, huobipro.load_markets())\n\nprint(hitbtc.fetch_order_book(hitbtc.symbols[0]))\nprint(bitmex.fetch_ticker('BTC/USD'))\nprint(huobipro.fetch_trades('LTC/USDT'))\n\nprint(exmo.fetch_balance())\n\n# sell one à¸¿ for market price and receive $ right now\nprint(exmo.id, exmo.create_market_sell_order('BTC/USD', 1))\n```\n\n----------------------------------------\n\nTITLE: Setting Margin Mode in CCXT with JavaScript\nDESCRIPTION: Updates the type of margin used between cross and isolated modes. Cross uses shared collateral while isolated maintains separate accounts per market.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_167\n\nLANGUAGE: JavaScript\nCODE:\n```\nsetMarginMode (marginMode, symbol = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Watch Orders Method Signature in C#\nDESCRIPTION: Defines the method signature for watching orders using CCXT Pro in C#.  It's an async Task that takes symbol, since2, limit2 and parameters as arguments, with default values assigned to symbol, since2, limit2 and parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_44\n\nLANGUAGE: c#\nCODE:\n```\npublic async Task<List<Order>> WatchOrders(string symbol = null, Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)\n```\n\n----------------------------------------\n\nTITLE: Watching Ticker in JavaScript with CCXT Pro\nDESCRIPTION: Example of using the watchTicker method in JavaScript to continuously stream and display ticker data. Some exchanges support different ticker topics that can be configured in options.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-22_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\nif (exchange.has['watchTicker']) {\n    while (true) {\n        try {\n            const ticker = await exchange.watchTicker (symbol, params)\n            console.log (new Date (), ticker)\n        } catch (e) {\n            console.log (e)\n            // stop the loop on exception or leave it commented to retry\n            // throw e\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Message Handler in Python\nDESCRIPTION: This snippet demonstrates how to create a custom message handler in Python and replace the original handle_message function of a ccxt.pro.binance instance. The custom handler calls the original handler before executing additional logic, using asyncio.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_73\n\nLANGUAGE: python\nCODE:\n```\ndef myHandler(instance, ws, data, original_handle_message):\n    original_handle_message(ws, data)  # trigger original `handleMessage`\n    if your_condition:\n        # execute your additional code\n\nasync def example():\n    e = ccxt.pro.binance()\n    original_handle_message = e.handle_message\n    e.handle_message = lambda ws, data: myHandler(e, ws, data, original_handle_message)\n    await e.watch_ticker('BTC/USDT')\n\nasyncio.run(example())\n```\n\n----------------------------------------\n\nTITLE: Fetching Individual Ticker in JavaScript\nDESCRIPTION: Demonstrates how to fetch a ticker for a specific symbol or a random symbol using CCXT in JavaScript.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_66\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (exchange.has['fetchTicker']) {\n    console.log (await (exchange.fetchTicker ('BTC/USD'))) // ticker for BTC/USD\n    let symbols = Object.keys (exchange.markets)\n    let random = Math.floor (Math.random () * (symbols.length - 1))\n    console.log (exchange.fetchTicker (symbols[random])) // ticker for a random symbol\n}\n```\n\n----------------------------------------\n\nTITLE: Printing Required Credentials JavaScript\nDESCRIPTION: This snippet demonstrates how to print the required credentials for an exchange using JavaScript. It initializes a Binance exchange object and then prints the `requiredCredentials` property to the console, revealing the necessary authentication details.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_141\n\nLANGUAGE: javascript\nCODE:\n```\nconst ccxt = require ('ccxt')\nconst exchange = new ccxt.binance()\nconsole.log (exchange.requiredCredentials) // prints required credentials\nexchange.checkRequiredCredentials() // throw AuthenticationError\n```\n\n----------------------------------------\n\nTITLE: Watching OHLCV Data for Symbols with CCXT Pro in Python\nDESCRIPTION: This snippet demonstrates how to watch OHLCV (Open, High, Low, Close, Volume) data for multiple symbols using the `watchOHLCVForSymbols` method in the CCXT Pro library. It sets up a subscription for BTC/USDT (1d), LTC/USDT (5m), and ETH/USDT (1h) and prints the received candle data with a timestamp. It includes error handling with a retry loop.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nif exchange.has['watchOHLCVForSymbols']:\n    while True:\n        try:\n            subscriptions = [[\n                ['BTC/USDT', '1d'],\n                ['LTC/USDT', '5m'],\n                ['ETH/USDT', '1h']\n            ]]\n            candles = await exchange.watch_ohlcv_for_symbols(subscriptions, since, limit, params)\n            print(exchange.iso8601(exchange.milliseconds()), candles)\n        except Exception as e:\n            print(e)\n            # stop the loop on exception or leave it commented to retry\n            # raise e\n```\n\n----------------------------------------\n\nTITLE: Using CCXT with Python Async Support\nDESCRIPTION: Code example showing how to import the asynchronous version of CCXT in Python for concurrent operations.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/readme.rst#2025-04-22_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nimport ccxt.async_support as ccxt # link against the asynchronous version of ccxt\n```\n\n----------------------------------------\n\nTITLE: Converting Date and Timestamps in CCXT\nDESCRIPTION: This snippet demonstrates how to convert between ISO8601 date strings and timestamps in milliseconds using CCXT's utility functions.  It also shows how to get the current timestamp in seconds and milliseconds.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_65\n\nLANGUAGE: JavaScript\nCODE:\n```\nexchange.parse8601 ('2018-01-01T00:00:00Z') == 1514764800000 // integer in milliseconds, Z = UTC\nexchange.iso8601 (1514764800000) == '2018-01-01T00:00:00Z'   // from milliseconds to iso8601 string\nexchange.seconds ()      // integer UTC timestamp in seconds\nexchange.milliseconds () // integer UTC timestamp in milliseconds\n```\n\n----------------------------------------\n\nTITLE: Fetching Trades - PHP\nDESCRIPTION: This PHP example demonstrates fetching trades for each symbol on an exchange using the `fetch_trades` method.  It iterates through the markets array and uses `var_dump` to output the trade data.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_104\n\nLANGUAGE: php\nCODE:\n```\nif ($exchange->has['fetchTrades']) {\n    foreach ($exchange->markets as $symbol => $market) {\n        var_dump ($exchange->fetch_trades ($symbol));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Market Data in JavaScript\nDESCRIPTION: Demonstrates loading market data, accessing market information, and force reloading markets in JavaScript using the CCXT library.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_40\n\nLANGUAGE: JavaScript\nCODE:\n```\n(async () => {\n    let kraken = new ccxt.kraken ({ verbose: true }) // log HTTP requests\n    await kraken.loadMarkets () // request markets\n    console.log (kraken.id, kraken.markets)    // output a full list of all loaded markets\n    console.log (Object.keys (kraken.markets)) // output a short list of market symbols\n    console.log (kraken.markets['BTC/USD'])    // output single market details\n    await kraken.loadMarkets () // return a locally cached version, no reload\n    let reloadedMarkets = await kraken.loadMarkets (true) // force HTTP reload = true\n    console.log (reloadedMarkets['ETH/BTC'])\n}) ()\n```\n\n----------------------------------------\n\nTITLE: Enabling Sandbox Mode in JavaScript\nDESCRIPTION: This snippet shows how to enable sandbox mode for an exchange using the CCXT library in JavaScript. It's crucial to set the sandbox mode immediately after instantiating the exchange object. Requires the CCXT JavaScript library to be installed.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst exchange = new ccxt.binance (config)\nexchange.setSandboxMode (true) // enable sandbox mode\n```\n\n----------------------------------------\n\nTITLE: Fetching Option Details with CCXT in JavaScript\nDESCRIPTION: Fetches the public details of a single option contract from the exchange using the `fetchOption` method. Requires a unified CCXT market symbol and an optional dictionary of extra parameters specific to the exchange API endpoint. Returns an option chain structure.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_135\n\nLANGUAGE: javascript\nCODE:\n```\nfetchOption (symbol, params = {})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Matplotlib for Financial Chart Visualization\nDESCRIPTION: Configures Matplotlib for optimal display in Jupyter notebooks, including Retina display support. Sets the visual style and figure size for financial charts.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/examples/py/playing_with_ccxt_example.ipynb#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Enables 2x resolution for Retina displays\n%config InlineBackend.figure_format = 'retina'\n\n# This is the library we will use for chart drawing\nimport matplotlib.pyplot as plt\n\n# Configure the look\nplt.style.use ('seaborn-white')\nplt.rcParams[\"figure.figsize\"] = [15,6]\n```\n\n----------------------------------------\n\nTITLE: Fetching Mark, Index, PremiumIndex OHLCV Data - JavaScript\nDESCRIPTION: This JavaScript example demonstrates fetching Mark, Index, and Premium Index OHLCV data using the `fetchOHLCV` method with the `price` parameter.  It requires the ccxt library and utilizes asynchronous functions to interact with the exchange's API.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_99\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\nasync function main () {\n    const exchange = new ccxt.binanceusdm ()\n    const markKlines = await exchange.fetchOHLCV ('ADA/USDT', '1h', undefined, undefined, { 'price': 'mark' })\n    console.log (markKlines)\n    const indexKlines = await exchange.fetchOHLCV ('ADA/USDT', '1h', undefined, undefined, { 'price': 'index' })\n    console.log (indexKlines)\n}\n\nmain ()\n```\n\n----------------------------------------\n\nTITLE: Order Book Structure in JavaScript\nDESCRIPTION: Example of the standard order book structure returned by CCXT. The structure includes bids and asks arrays containing price and amount pairs, along with metadata such as symbol, timestamp, datetime, and nonce.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_58\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    'bids': [\n        [ price, amount ], // [ float, float ]\n        [ price, amount ],\n        ...\n    ],\n    'asks': [\n        [ price, amount ],\n        [ price, amount ],\n        ...\n    ],\n    'symbol': 'ETH/BTC', // a unified market symbol\n    'timestamp': 1499280391811, // Unix Timestamp in milliseconds (seconds * 1000)\n    'datetime': '2017-07-05T18:47:14.692Z', // ISO8601 datetime string with milliseconds\n    'nonce': 1499280391811, // an increasing unique identifier of the orderbook snapshot\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Markets and Accessing Market Data in Javascript\nDESCRIPTION: This JavaScript snippet demonstrates how to load market data from an exchange using CCXT, access markets by symbol and ID, retrieve the market ID by symbol, and access lists of symbols and currencies. It illustrates how to get both market structures and market IDs using the CCXT library.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_44\n\nLANGUAGE: JavaScript\nCODE:\n```\n(async () => {\n\n    console.log (await exchange.loadMarkets ())\n\n    let btcusd1 = exchange.markets['BTC/USD']     // get market structure by symbol\n    let btcusd2 = exchange.market ('BTC/USD')     // same result in a slightly different way\n\n    let btcusdId = exchange.marketId ('BTC/USD')  // get market id by symbol\n\n    let symbols = exchange.symbols                // get an array of symbols\n    let symbols2 = Object.keys (exchange.markets) // same as previous line\n\n    console.log (exchange.id, symbols)            // print all symbols\n\n    let currencies = exchange.currencies          // a dictionary of currencies\n\n    let bitfinex = new ccxt.bitfinex ()\n    await bitfinex.loadMarkets ()\n\n    bitfinex.markets['BTC/USD']                   // symbol â market (get market by symbol)\n    bitfinex.markets_by_id['XRPBTC'][0]           // id â market (get market by id)\n\n    bitfinex.markets['BTC/USD']['id']             // symbol â id (get id by symbol)\n    bitfinex.markets_by_id['XRPBTC'][0]['symbol'] // id â symbol (get symbol by id)\n\n}) ()\n```\n\n----------------------------------------\n\nTITLE: Fetching Funding Interval for a Single Market in JavaScript\nDESCRIPTION: Fetches the funding interval for a single market symbol. Requires the `symbol` parameter. Optional exchange-specific parameters can be passed in via the `params` parameter. Returns a funding rate structure.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_118\n\nLANGUAGE: javascript\nCODE:\n```\nfetchFundingInterval (symbol, params = {})\n```\n\n----------------------------------------\n\nTITLE: Fee Structure Example in JavaScript\nDESCRIPTION: Standard data structure for representing a fee in the CCXT library. Contains information about the fee currency, rate, and cost.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_155\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    'currency': 'BTC', // the unified fee currency code\n    'rate': percentage, // the fee rate, 0.05% = 0.0005, 1% = 0.01, ...\n    'cost': feePaid, // the fee cost (amount * fee rate)\n}\n```\n\n----------------------------------------\n\nTITLE: Watching Tickers with WebSocket in PHP\nDESCRIPTION: Continuously watches for ticker updates using the exchange's WebSocket API. Prints the received tickers as JSON and handles exceptions.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-22_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\nif ($exchange->has['watchTickers']) {\n    $exchange::execute_and_run(function() use ($exchange, $symbols, $params) {\n        while (true) {\n            try {\n                $tickers = yield $exchange->watch_tickers($symbols, $params);\n                echo date('c'), ' ', json_encode($tickers), \"\\n\";\n            } catch (Exception $e) {\n                echo get_class($e), ' ', $e->getMessage(), \"\\n\";\n            }\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Borrowing and Repaying Margin in CCXT with JavaScript\nDESCRIPTION: Functions for borrowing and repaying currency as margin loans. Requires currency code and amount, with optional market symbol for isolated margin trading.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_163\n\nLANGUAGE: JavaScript\nCODE:\n```\nborrowMargin (code, amount, symbol = undefined, params = {})\nrepayMargin (code, amount, symbol = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Watching Trades with CCXT Pro in PHP\nDESCRIPTION: This snippet demonstrates how to use the `watch_trades` method in the CCXT Pro library to watch trades for a specific symbol within a PHP environment that supports asynchronous operations. It uses `execute_and_run` to manage the event loop and continuously receive trade updates. It includes error handling to catch and log exceptions.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nif ($exchange->has['watchTrades']) {\n    $exchange::execute_and_run(function() use ($exchange, $symbol, $since, $limit, $params) {\n        while (true) {\n            try {\n                $trades = yield $exchange->watch_trades($symbol, $since, $limit, $params);\n                echo date('c'), ' ', json_encode($trades), \"\\n\";\n            } catch (Exception $e) {\n                echo get_class($e), ' ', $e->getMessage(), \"\\n\";\n            }\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Order Creation in C# using CCXT\nDESCRIPTION: Example of creating a limit buy order using Binance exchange through CCXT in C#. Shows authentication setup and async order placement.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/python/README.md#2025-04-22_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nusing ccxt; // importing ccxt\nnamespace Project;\nclass Project {\n    public async static Task CreateOrder() {\n        var exchange = new Binance();\n        exchange.apiKey = \"my api key\";\n        exchange.secret = \"my secret\";\n        // always use the capitalized method (CreateOrder instead of createOrder)\n        var order = await exchange.CreateOrder(\"BTC/USDT\", \"limit\", \"buy\", 1, 50);\n        Console.WriteLine(\"Placed Order, order id: \" + order.id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conversion Structure Example in JavaScript\nDESCRIPTION: Shows the structure of the conversion trade object. It contains information about the currencies being traded, amounts, price and fees.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_290\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    info: { ... },\n    timestamp: 1646954920000,\n    datetime: \"2022-03-08T16:00:00.000Z\",\n    id: \"1520286109858180\",\n    fromCurrency: \"USDT\",\n    fromAmount: 3.0,\n    toCurrency: \"USDC\",\n    toAmount: 2.9722,\n    price: 0.97,\n    fee: 0.0\n}\n```\n\n----------------------------------------\n\nTITLE: Throttling Mode in CCXT Pro\nDESCRIPTION: This snippet demonstrates the throttling mode in CCXT Pro, where the code reacts to data at fixed intervals, regardless of whether updates have arrived. The code retrieves the order book using `exchange.orderbooks[symbol].limit(limit)` and sleeps for a specified duration using `exchange.sleep(100)`. This mode is useful for controlling resource usage.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// throttling mode\nconst limit = 5 // optional\n// await is optional, alternatively you can launch it in bg without await\nawait exchange.watchOrderBook (symbol, limit)\nwhile (true) {\n    // your reaction takes place here\n    // you arrive here every 100 ms regardless of whether there was an update or not\n    // in throttling mode offloading the orderbook with .limit () is required\n    console.log (exchange.orderbooks[symbol].limit (limit))\n    await exchange.sleep (100) // every 100 ms\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Account Structure - JavaScript Example\nDESCRIPTION: This JavaScript example illustrates the structure of the accounts object returned by the `fetchAccounts()` method in the CCXT unified API. The structure includes the account ID, type, name, currency code, and additional information in the `info` field.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_152\n\nLANGUAGE: javascript\nCODE:\n```\n[\n    {\n        id: \"s32kj302lasli3930\",\n        type: \"main\",\n        name: \"main\",\n        code: \"USDT\",\n        info: { ... }\n    },\n    {\n        id: \"20f0sdlri34lf90\",\n        name: \"customAccount\",\n        type: \"margin\",\n        code: \"USDT\",\n        info: { ... }\n    },\n    {\n        id: \"4oidfk40dadeg4328\",\n        type: \"spot\",\n        name: \"spotAccount32\",\n        code: \"BTC\",\n        info: { ... }\n    },\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Fee Schedule Structure in JavaScript\nDESCRIPTION: Comprehensive structure containing both funding (deposit/withdrawal) fees and trading fees for various markets. Shows how fees are organized in CCXT's unified format.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_156\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    'funding': {\n        'withdraw': {\n            'BTC': 0.00001,\n            'ETH': 0.001,\n            'LTC': 0.0003,\n        },\n        'deposit': {\n            'BTC': 0,\n        },\n        'info': { ... },\n    },\n    'trading': {\n        'ETH/BTC': {\n            'maker': 0.001,\n            'taker': 0.002,\n            'info': { ... },\n            'symbol': 'ETH/BTC',\n        },\n        'LTC/BTC': {\n            'maker': 0.001,\n            'taker': 0.002,\n            'info': { ... },\n            'symbol': 'LTC/BTC',\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Watch My Trades Method Signature in C#\nDESCRIPTION: Defines the method signature for watching personal trades using CCXT Pro in C#.  It's an async Task that takes symbol, since2, limit2 and parameters as arguments, with default values assigned to symbol, since2, limit2 and parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_48\n\nLANGUAGE: c#\nCODE:\n```\npublic async Task<List<Trade>> WatchMyTrades(string symbol = null, Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Accounts Structure in JavaScript\nDESCRIPTION: Example of the fetchAccounts method and the returned data structure containing account information including id, type, name, and code.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_102\n\nLANGUAGE: JavaScript\nCODE:\n```\nfetchAccounts (params = {})\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n    {\n        id: \"s32kj302lasli3930\",\n        type: \"main\",\n        name: \"main\",\n        code: \"USDT\",\n        info: { ... }\n    },\n    {\n        id: \"20f0sdlri34lf90\",\n        name: \"customAccount\",\n        type: \"margin\",\n        code: \"USDT\",\n        info: { ... }\n    },\n    {\n        id: \"4oidfk40dadeg4328\",\n        type: \"spot\",\n        name: \"spotAccount32\",\n        code: \"BTC\",\n        info: { ... }\n    },\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Withdraw with Network Parameters (PHP)\nDESCRIPTION: Shows how to pass network parameters such as tag and network to the withdraw method in PHP.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_227\n\nLANGUAGE: php\nCODE:\n```\nwithdraw ($code, $amount, $address, array( 'tag' => tag, 'network' -> 'ETH' ));\n```\n\n----------------------------------------\n\nTITLE: Fetching Order Books in JavaScript with Rate Limiting\nDESCRIPTION: Example of how to fetch order books for all markets in an exchange using JavaScript with a delay between requests to avoid rate limiting. The code iterates through all symbols in the exchange and outputs each order book.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_55\n\nLANGUAGE: JavaScript\nCODE:\n```\ndelay = 2000 // milliseconds = seconds * 1000\n(async () => {\n    for (symbol in exchange.markets) {\n        console.log (await exchange.fetchOrderBook (symbol))\n        await new Promise (resolve => setTimeout (resolve, delay)) // rate limit\n    }\n}) ()\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT Globally with NPM\nDESCRIPTION: Command to install CCXT globally using Node Package Manager (NPM)\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CLI.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnpm -g ccxt\n```\n\n----------------------------------------\n\nTITLE: Calculate Contracts Python\nDESCRIPTION: This python snippet shows how to calculate the number of contracts based on the base amount and contract size. It first loads the markets, retrieves the contract size, and then calculates the number of contracts to enter into the `amount` argument of the `createOrder` function.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_173\n\nLANGUAGE: Python\nCODE:\n```\nawait exchange.loadMarkets()\nsymbol = 'BTC/USDT:USDT'\nmarket = exchange.market(symbol)\nprint(market['contractSize'])\n\n# Let's say you want to convert 0.5 BTC to the number of contracts:\nnumber_contracts = round((0.5 * 1) / market['contractSize'])\n```\n\n----------------------------------------\n\nTITLE: Withdraw with Network Parameters (Javascript)\nDESCRIPTION: Shows how to pass network parameters such as tag and network to the withdraw method in Javascript.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_225\n\nLANGUAGE: javascript\nCODE:\n```\nwithdraw (code, amount, address, { tag, network: 'ETH' })\n```\n\n----------------------------------------\n\nTITLE: Transfer Structure Example in JavaScript\nDESCRIPTION: Standard data structure representing a transfer in the CCXT library. Contains information about the transfer including timestamp, currency, amount, accounts involved, and status.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_153\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    info: { ... },\n    id: \"93920432048\",\n    timestamp: 1646764072000,\n    datetime: \"2022-03-08T18:27:52.000Z\",\n    currency: \"USDT\",\n    amount: 11.31,\n    fromAccount: \"spot\",\n    toAccount: \"future\",\n    status: \"ok\"\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Market ID Handling Using marketId() - JavaScript\nDESCRIPTION: Another correct approach using the marketId() method which directly returns just the exchange-specific ID of a market by a unified symbol, useful when only the ID is needed.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CONTRIBUTING.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nasync fetchTicker (symbol, params = {}) {\n   const marketId = this.marketId (symbol); // just the id\n   const request = {\n      'symbol': marketId, // good, they may be equal, but often differ, it's ok\n   };\n   const response = await this.publicGetEndpoint (this.extend (request, params));\n   // parse in a unified way...\n}\n```\n\n----------------------------------------\n\nTITLE: Long Short Ratio Structure in JavaScript\nDESCRIPTION: Illustrates the structure of the long short ratio data returned by the `fetchLongShortRatio` and `fetchLongShortRatioHistory` methods. Includes information about the symbol, timestamp, datetime, timeframe, and the longShortRatio itself. The 'info' field contains the original decoded JSON response from the exchange.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_140\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    info: { ... },\n    symbol: 'BTC/USDT:USDT',\n    timestamp: 1645833600000,\n    datetime: '2022-02-26T00:00:00.000Z',\n    timeframe: '24h',\n    longShortRatio: 0.000072,\n}\n```\n\n----------------------------------------\n\nTITLE: Watching Account Balance with WebSocket in JavaScript\nDESCRIPTION: Continuously watches for account balance updates using the exchange's WebSocket API. Prints the received balance and handles exceptions.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-22_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (exchange.has['watchBalance']) {\n    while (true) {\n        try {\n            const balance = await exchange.watchBalance (params)\n            console.log (new Date (), balance)\n        } catch (e) {\n            console.log (e)\n            // stop the loop on exception or leave it commented to retry\n            // throw e\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to Unified Methods in CCXT\nDESCRIPTION: Example of passing additional parameters to a unified method in CCXT. This shows how to include exchange-specific parameters when calling a unified API method like create_order.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_48\n\nLANGUAGE: Python\nCODE:\n```\nparams = {'type':'margin', 'isIsolated': 'TRUE'}  # --------------â\n# params will go as the last argument to the unified method       |\n#                                                                 v\nbinance.create_order('BTC/USDT', 'limit', 'buy', amount, price, params)\n```\n\n----------------------------------------\n\nTITLE: Overriding Exchange Properties in Python\nDESCRIPTION: This snippet demonstrates how to override exchange properties and options upon instantiation using the CCXT library in Python, including setting rate limits, custom headers, and exchange-specific options. Requires the CCXT Python library to be installed.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nexchange = ccxt.binance ({\n    'rateLimit': 10000,  # unified exchange property\n    'headers': {\n        'YOUR_CUSTOM_HTTP_HEADER': 'YOUR_CUSTOM_VALUE',\n    },\n    'options': {\n        'adjustForTimeDifference': True,  # exchange-specific option\n    }\n})\nexchange.options['adjustForTimeDifference'] = False\n```\n\n----------------------------------------\n\nTITLE: Margin Mode Structure Example (JavaScript)\nDESCRIPTION: This snippet presents the structure of a margin mode object returned by CCXT. It consists of the raw exchange response, the market symbol, and the margin mode (cross or isolated).\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_271\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"info\": { ... },             // response from the exchange\n    \"symbol\": \"BTC/USDT:USDT\",  // unified market symbol\n    \"marginMode\": \"cross\",      // the margin mode either cross or isolated\n}\n```\n\n----------------------------------------\n\nTITLE: Watch Positions Method Signature in Python\nDESCRIPTION: Defines the method signature for watching positions using CCXT Pro in Python. It takes symbols, since, limit and params as arguments, with default values assigned to symbols, since and limit.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nwatch_positions(symbols=None, since=None, limit=None, params={})\n```\n\n----------------------------------------\n\nTITLE: Watching Tickers with WebSocket in Python\nDESCRIPTION: Continuously watches for ticker updates using the exchange's WebSocket API. Prints the received tickers with timestamps and handles exceptions.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-22_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nif exchange.has['watchTickers']:\n    while True:\n        try:\n            tickers = await exchange.watch_tickers(symbols, params)\n            print(exchange.iso8601(exchange.milliseconds()), tickers)\n        except Exception as e:\n            print(e)\n            # stop the loop on exception or leave it commented to retry\n            # raise e\n```\n\n----------------------------------------\n\nTITLE: Loading CCXT in JavaScript with ES Modules\nDESCRIPTION: Example showing how to import and use CCXT using ES Modules syntax, displaying version and available exchanges.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n//esm\nimport {version, exchanges} from 'ccxt';\nconsole.log(version, Object.keys(exchanges));\n```\n\n----------------------------------------\n\nTITLE: Correct Market Symbol Handling in JavaScript\nDESCRIPTION: Proper methods for handling market symbols when making API requests. These examples use exchange-specific market IDs instead of unified symbols.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nasync fetchTicker (symbol, params = {}) {\n   const market = this.market (symbol); // the entire market structure\n   const request = {\n      'pair': market['id'], // good, they may be equal, but often differ, it's ok\n   };\n   const response = await this.publicGetEndpoint (this.extend (request, params));\n   // parse in a unified way...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nasync fetchTicker (symbol, params = {}) {\n   const marketId = this.marketId (symbol); // just the id\n   const request = {\n      'symbol': marketId, // good, they may be equal, but often differ, it's ok\n   };\n   const response = await this.publicGetEndpoint (this.extend (request, params));\n   // parse in a unified way...\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Trades with ID-Based Pagination in CCXT\nDESCRIPTION: This PHP snippet shows how to fetch trades using ID-based pagination. It begins with a 'from_id' and iteratively fetches trades, using 'from_id' as a parameter for pagination.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_71\n\nLANGUAGE: PHP\nCODE:\n```\nif ($exchange->has['fetchMyTrades']) {\n    $from_id = 'abc123' // all ids are strings\n    $all_trades = array ();\n    while (true) {\n        $symbol = null; // change for your symbol\n        $since = null;\n        $limit = 20; // change for your limit\n        $params = array (\n            'from_id' => $from_id, // exchange-specific non-unified parameter name\n        );\n        $trades = $exchange->fetchMyTrades ($symbol, $since, $limit, $params);\n        if (count($trades)) {\n            $from_id = $trades[count($trades) - 1]['id'];\n            $all_trades = array_merge ($all_trades, $trades);\n        } else {\n            break;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Python Installation and Usage\nDESCRIPTION: Basic Python example showing pip installation and usage of CCXT library\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Install.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npip install ccxt\n```\n\nLANGUAGE: python\nCODE:\n```\nimport ccxt\nprint(ccxt.exchanges) # print a list of all available exchange classes\n```\n\nLANGUAGE: python\nCODE:\n```\nimport ccxt.async_support as ccxt # link against the asynchronous version of ccxt\n```\n\n----------------------------------------\n\nTITLE: Accessing Market Data in PHP\nDESCRIPTION: Illustrates loading market data, accessing market information, and force reloading markets in PHP using the CCXT library.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_42\n\nLANGUAGE: PHP\nCODE:\n```\n$bitfinex = new \\ccxt\\bitfinex(array('verbose' => true)); // log HTTP requests\n$bitfinex.load_markets(); // request markets\nvar_dump($bitfinex->id, $bitfinex->markets); // output a full list of all loaded markets\nvar_dump(array_keys ($bitfinex->markets));   // output a short list of market symbols\nvar_dump($bitfinex->markets['XRP/USD']);     // output single market details\n$bitfinex->load_markets(); // return a locally cached version, no reload\n$reloadedMarkets = $bitfinex->load_markets(true); // force HTTP reload = true\nvar_dump($bitfinex->markets['XRP/BTC']);\n```\n\n----------------------------------------\n\nTITLE: Fetching Underlying Assets with CCXT (JavaScript)\nDESCRIPTION: This method retrieves the market IDs of underlying assets for contract market types. It accepts an optional params argument for exchange-specific parameters and the market type.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_127\n\nLANGUAGE: javascript\nCODE:\n```\nfetchUnderlyingAssets (params = {})\n```\n\n----------------------------------------\n\nTITLE: Cancel Orders WS Method Signature in Python\nDESCRIPTION: Defines the signature for the cancel_orders_ws method in Python. It cancels multiple orders using WebSocket. Parameters include an array of ids, symbol (optional), and additional parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_64\n\nLANGUAGE: python\nCODE:\n```\ncancel_orders_ws(self, ids, symbol: str, params={})\n```\n\n----------------------------------------\n\nTITLE: Fetching Market Price - PHP\nDESCRIPTION: This snippet fetches the order book for the first symbol available and extracts the best bid and ask prices in PHP using CCXT library. If bid or ask arrays are empty the variables are set to null. The bid-ask spread is then calculated and outputted.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_80\n\nLANGUAGE: php\nCODE:\n```\n$orderbook = $exchange->fetch_order_book ($exchange->symbols[0]);\n$bid = count ($orderbook['bids']) ? $orderbook['bids'][0][0] : null;\n$ask = count ($orderbook['asks']) ? $orderbook['asks'][0][0] : null;\n$spread = ($bid && $ask) ? $ask - $bid : null;\n$result = array ('bid' => $bid, 'ask' => $ask, 'spread' => $spread);\nvar_dump ($exchange->id, 'market price', $result);\n\n```\n\n----------------------------------------\n\nTITLE: Decimal to Precision Function Definition (PHP)\nDESCRIPTION: Defines a PHP function `decimalToPrecision` to format a decimal value to a specific precision, with customizable rounding, number of precision digits, counting mode, and padding mode. This function allows users to format values to the required decimal precision with support for different rounding, counting and padding modes.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_31\n\nLANGUAGE: PHP\nCODE:\n```\nfunction decimalToPrecision ($x, $roundingMode = ROUND, $numPrecisionDigits = null, $countingMode = DECIMAL_PLACES, $paddingMode = NO_PADDING)\n```\n\n----------------------------------------\n\nTITLE: Using newUpdates Mode (Python)\nDESCRIPTION: This snippet shows how to instantiate an exchange with the `newUpdates` flag set to `True`. This mode ensures that the user only receives the most recent trades since the last call to `watchTrades`. This is useful when dealing with exchanges that provide incremental updates. It continues to utilize the sliding cache in the background.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nexchange = ccxtpro.binance({'newUpdates': True})\nwhile True:\n    trades = await exchange.watchTrades (symbol)\n    print(trades)\n```\n\n----------------------------------------\n\nTITLE: Fetch Deposit Method IDs JavaScript\nDESCRIPTION: This snippet shows the function signature and parameters for fetching multiple deposit method IDs using the `fetchDepositMethodIds` method. Takes optional params.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_216\n\nLANGUAGE: javascript\nCODE:\n```\nfetchDepositMethodIds (params = {})\n```\n\n----------------------------------------\n\nTITLE: Fetching Order Book with Limit - PHP\nDESCRIPTION: This PHP code snippet demonstrates fetching an order book using CCXT, specifying a limit to restrict the number of orders returned. It instantiates a Kraken exchange object and calls `fetch_order_book` with the trading pair 'BTC/USD' and a limit of 20.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_77\n\nLANGUAGE: php\nCODE:\n```\n\n// instantiate the exchange by id\n$exchange = '\\\\ccxt\\\\kraken';\n$exchange = new $exchange ();\n// up to ten orders on each side, for example\n$limit = 20;\nvar_dump ($exchange->fetch_order_book ('BTC/USD', $limit));\n\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT with JavaScript/NPM\nDESCRIPTION: Command to install CCXT library using Node.js package manager NPM\nSOURCE: https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install ccxt\n```\n\n----------------------------------------\n\nTITLE: Setting Number Type to String in CCXT (Python)\nDESCRIPTION: Demonstrates how to configure CCXT to use string-based math instead of native numbers in Python. This is useful for situations requiring fixed-point arithmetic or high precision.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_299\n\nLANGUAGE: python\nCODE:\n```\nex = ccxt.coinbase()\nex.number = str  # str | float\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Orders in Javascript\nDESCRIPTION: This snippet shows how to create a limit sell order with a custom order type on Bitfinex using the CCXT library in Javascript. It passes a 'type' parameter within the 'params' array to specify the custom order type. Requires an initialized Bitfinex exchange object.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_198\n\nLANGUAGE: Javascript\nCODE:\n```\n// use a custom order type\nbitfinex.createLimitSellOrder ('BTC/USD', 1, 10, { 'type': 'trailing-stop' })\n```\n\n----------------------------------------\n\nTITLE: Accessing Exchange Features in JavaScript\nDESCRIPTION: This snippet shows how to access the `.features` property of an exchange object in JavaScript using the CCXT library, allowing you to determine supported methods and functionalities for different market types. Requires the CCXT JavaScript library to be installed.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst exchange = new ccxt.binance()\nconsole.log(exchange.features);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using CCXT in PHP\nDESCRIPTION: This snippet illustrates how to use CCXT in PHP to create an exchange instance and fetch market data.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/README.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\ninclude 'ccxt.php';\n\n$exchange = new \\ccxt\\binance();\nvar_dump($exchange->id, $exchange->load_markets());\n\n$ticker = $exchange->fetch_ticker('BTC/USDT');\nvar_dump($ticker);\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Orders and Fetching OHLCV Data in Go with CCXT\nDESCRIPTION: Demonstrates using the CCXT library in Go to create orders with optional parameters, handle errors, and fetch OHLCV (candlestick) data. Includes examples of order creation with custom client ID and error handling.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/README.md#2025-04-22_snippet_22\n\nLANGUAGE: Go\nCODE:\n```\npackage main\nimport (\n\t\"github.com/ccxt/ccxt/go/v4/go\"\n\t\"fmt\"\n)\n\nfunc main() {\n\texchange := ccxt.NewBinance(map[string]interface{}{\n\t\t\"apiKey\": \"MY KEY\",\n\t\t\"secret\": \"MY SECRET\",\n\t})\n\torderParams := map[string]interface{}{\n\t\t\"clientOrderId\": \"myOrderId68768678\",\n\t}\n\n    <-exchange.LoadMarkets()\n\n\torder, err := exchange.CreateOrder(\"BTC/USDT\", \"limit\", \"buy\", 0.001, ccxt.WithCreateOrderPrice(6000), ccxt.WithCreateOrderParams(orderParams))\n\tif err != nil {\n\t\tif ccxtError, ok := err.(*ccxt.Error); ok {\n\t\t\tif ccxtError.Type == \"InvalidOrder\" {\n\t\t\t\tfmt.Println(\"Invalid order\")\n\t\t\t} else {\n\t\t\t\tfmt.Println(\"Some other error\")\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfmt.Println(*order.Id)\n\t}\n\n\n    // fetching OHLCV\n\tohlcv, err := exchange.FetchOHLCV(\"BTC/USDT\", ccxt.WithFetchOHLCVTimeframe(\"5m\"), ccxt.WithFetchOHLCVLimit(100))\n\n\tif err != nil {\n\t\tfmt.Println(\"Error: \", err)\n\t} else {\n\t\tfmt.Println(\"Got OHLCV!\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Watching Order Book in PHP with CCXT Pro\nDESCRIPTION: Example of using the watch_order_book method in PHP to continuously stream and display order book data. The method accepts a symbol, optional limit parameter, and optional override parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-22_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n// PHP\nif ($exchange->has['watchOrderBook']) {\n    $exchange::execute_and_run(function() use ($exchange, $symbol, $limit, $params) {\n        while (true) {\n            try {\n                $orderbook = yield $exchange->watch_order_book($symbol, $limit, $params);\n                echo date('c'), ' ', $symbol, ' ', json_encode(array($orderbook['asks'][0], $orderbook['bids'][0])), \"\\n\";\n            } catch (Exception $e) {\n                echo get_class($e), ' ', $e->getMessage(), \"\\n\";\n            }\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Trades with ID-Based Pagination in CCXT\nDESCRIPTION: This snippet illustrates fetching trades using ID-based pagination in JavaScript. It initializes a 'from_id' and iteratively fetches trades using the 'from_id' parameter to retrieve the next batch.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_69\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (exchange.has['fetchTrades']) {\n    let from_id = 'abc123' // all ids are strings\n    let allTrades = []\n    while (true) {\n        const symbol = undefined // change for your symbol\n        const since = undefined\n        const limit = 20 // change for your limit\n        const params = {\n            'from_id': from_id, // exchange-specific non-unified parameter name\n        }\n        const trades = await exchange.fetchTrades (symbol, since, limit, params)\n        if (trades.length) {\n            from_id = trades[trades.length - 1]['id']\n            allTrades.push (trades)\n        } else {\n            break\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Exchange Properties in PHP\nDESCRIPTION: Shows how to customize exchange properties and options during instantiation in PHP, including rate limiting, custom headers, and exchange-specific options.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n// PHP\n$exchange_id = 'binance';\n$exchange_class = \"\\\\ccxt\\\\$exchange_id\";\n$exchange = new $exchange_class(array(\n    'rateLimit' => 10000, // unified exchange property\n    'headers' => array(\n        'YOUR_CUSTOM_HTTP_HEADER' => 'YOUR_CUSTOM_VALUE',\n    ),\n    'options' => array(\n        'adjustForTimeDifference' => true, // exchange-specific option\n    ),\n));\n$exchange->options['adjustForTimeDifference'] = false;\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose Mode for CCXT Instance\nDESCRIPTION: Shows how to instantiate a CCXT exchange object with verbose mode enabled to see detailed HTTP requests and responses for debugging purposes.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_184\n\nLANGUAGE: javascript\nCODE:\n```\nnew ccxt.exchange ({ 'verbose': true })\n```\n\n----------------------------------------\n\nTITLE: Implementing fetchMarkets Method in JavaScript for CCXT\nDESCRIPTION: Implementation of the fetchMarkets method that retrieves available trading pairs from an exchange. It processes API response data to create standardized market objects with symbol, base, and quote currencies.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/ts/src/static_dependencies/ethers/utils/test.txt#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync fetchMarkets (params = {}) {\n    // fetch all available markets from the exchange\n    const markets = await this.publicGetEndpointPath (params);\n    //\n    // or\n    //\n    // const markets = await this.publicGetEndpointPathParameter ({\n    //     'path_parameter': 'value',\n    // });\n    //\n    const result = [];\n    // markets is an array of markets\n    // const markets = [\n    //     { id: 'btcusd', name: 'BTC/USD', ... },\n    //     { id: 'ltcbtc', name: 'LTC/BTC', ... },\n    //     ...\n    // ]\n    for (let i = 0; i < markets.length; i++) {\n        const market = markets[i];\n        const id = market['id'];\n        const baseId = market['base']; // base currency ID\n        const quoteId = market['quote']; // quote currency ID\n        const base = this.safeCurrencyCode (baseId); // unified base currency code\n        const quote = this.safeCurrencyCode (quoteId); // unified quote currency code\n        const symbol = base + '/' + quote; // unified symbol (currency pair)\n        result.push ({\n            'id': id,\n            'symbol': symbol,\n            'base': base,\n            'quote': quote,\n            'baseId': baseId,\n            'quoteId': quoteId,\n            // ... other market properties here ...\n        });\n    }\n    return result;\n}\n```\n\n----------------------------------------\n\nTITLE: CCXT Pro Version and Exchanges (Python)\nDESCRIPTION: This code snippet demonstrates how to import the CCXT Pro library in Python and print the CCXT version and the list of supported exchanges to the console. This allows users to verify that the library is correctly installed and that the desired exchange is supported.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport ccxt.pro as ccxtpro\nprint('CCXT version', ccxtpro.__version__)\nprint('Supported exchanges:', ccxtpro.exchanges)\n```\n\n----------------------------------------\n\nTITLE: Watching Account Balance with WebSocket in PHP\nDESCRIPTION: Continuously watches for account balance updates using the exchange's WebSocket API. Prints the received balance as JSON and handles exceptions.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-22_snippet_27\n\nLANGUAGE: PHP\nCODE:\n```\nif ($exchange->has['watchBalance']) {\n    $exchange::execute_and_run(function() use ($exchange, $params) {\n        while (true) {\n            try {\n                $balance = yield $exchange->watch_balance($params);\n                echo date('c'), ' ', json_encode($balance), \"\\n\";\n            } catch (Exception $e) {\n                echo get_class($e), ' ', $e->getMessage(), \"\\n\";\n            }\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Nonce in PHP\nDESCRIPTION: Examples of custom nonce implementation in PHP through class extension, showing both incremental integer nonce and milliseconds-based nonce approaches.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_101\n\nLANGUAGE: PHP\nCODE:\n```\n// PHP\n\n// 1: custom nonce value\nclass MyOKCoinUSD extends \\ccxt\\okcoinusd {\n    public function __construct ($options = array ()) {\n        parent::__construct (array_merge (array ('i' => 1), $options));\n    }\n    public function nonce () {\n        return $this->i++;\n    }\n}\n\n// 2: milliseconds nonce\nclass MyZaif extends \\ccxt\\zaif {\n    public function __construct ($options = array ()) {\n        parent::__construct (array_merge (array ('i' => 1), $options));\n    }\n    public function nonce () {\n        return $this->milliseconds ();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Order Book State in CCXT\nDESCRIPTION: Representation of the intermediate state of an order book after a sell order has partially matched and filled a buy order. This visualization shows the price and amount columns with buy orders below and sell orders above the spread.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_124\n\nLANGUAGE: text\nCODE:\n```\n    | price  | amount\n----|----------------  â\n  a |  1.200 | 200     â\n  s |  1.100 | 300     â\n  k |  0.900 | 100     â\n----|----------------  â sell remaining 50 for 0.700\n  i |  0.700 | 200     -----------------------------\n  d |  0.500 | 100\n```\n\n----------------------------------------\n\nTITLE: Basic Go CCXT Usage\nDESCRIPTION: Example showing how to import and use CCXT in Go, displaying available exchanges.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/README.md#2025-04-22_snippet_14\n\nLANGUAGE: Go\nCODE:\n```\nimport \"ccxt\"\nfmt.Println(ccxt.Exchanges)\n```\n\n----------------------------------------\n\nTITLE: Examples of Selective CCXT Testing Commands\nDESCRIPTION: Various examples of test commands for different scenarios, showing how to test specific parts of the library. The first example tests only the JS version without requiring a build step, while others demonstrate testing specific exchanges with different languages.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CONTRIBUTING.md#2025-04-22_snippet_34\n\nLANGUAGE: shell\nCODE:\n```\nnode run-tests --js                  # test master ccxt.js, all exchanges\n\n# other examples require the 'npm run build' to run\n\nnode run-tests --python              # test Python sync version, all exchanges\nnode run-tests --php bitfinex        # test Bitfinex with PHP\nnode run-tests --python-async kraken # test Kraken with Python async test, requires 'npm run build'\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Python CCXT Example\nDESCRIPTION: Advanced example demonstrating CCXT usage in Python with multiple exchanges, including market data retrieval and order placement.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/README.md#2025-04-22_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\n# coding=utf-8\n\nimport ccxt\n\nhitbtc   = ccxt.hitbtc({'verbose': True})\nbitmex   = ccxt.bitmex()\nhuobipro = ccxt.huobipro()\nexmo     = ccxt.exmo({\n    'apiKey': 'YOUR_PUBLIC_API_KEY',\n    'secret': 'YOUR_SECRET_PRIVATE_KEY',\n})\nkraken = ccxt.kraken({\n    'apiKey': 'YOUR_PUBLIC_API_KEY',\n    'secret': 'YOUR_SECRET_PRIVATE_KEY',\n})\n\nexchange_id = 'binance'\nexchange_class = getattr(ccxt, exchange_id)\nexchange = exchange_class({\n    'apiKey': 'YOUR_API_KEY',\n    'secret': 'YOUR_SECRET',\n})\n\nhitbtc_markets = hitbtc.load_markets()\n\nprint(hitbtc.id, hitbtc_markets)\nprint(bitmex.id, bitmex.load_markets())\nprint(huobipro.id, huobipro.load_markets())\n\nprint(hitbtc.fetch_order_book(hitbtc.symbols[0]))\nprint(bitmex.fetch_ticker('BTC/USD'))\nprint(huobipro.fetch_trades('LTC/USDT'))\n\nprint(exmo.fetch_balance())\n\n# sell one à¸¿ for market price and receive $ right now\nprint(exmo.id, exmo.create_market_sell_order('BTC/USD', 1))\n```\n\n----------------------------------------\n\nTITLE: CCXT Pro Version and Exchanges (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to import the CCXT Pro library in JavaScript and print the CCXT version and the list of supported exchanges to the console. This allows users to verify that the library is correctly installed and that the desired exchange is supported.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst ccxtpro = require ('ccxt').pro\nconsole.log ('CCXT version', ccxtpro.version)\nconsole.log ('Supported exchanges:', ccxtpro.exchanges)\n```\n\n----------------------------------------\n\nTITLE: Trading Fee Structure Example in JavaScript\nDESCRIPTION: Data structure representing trading fees for different markets. Shows maker and taker fees for each trading pair.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_157\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    'ETH/BTC': {\n        'maker': 0.001,\n        'taker': 0.002,\n        'info': { ... },\n        'symbol': 'ETH/BTC',\n    },\n    'LTC/BTC': {\n        'maker': 0.001,\n        'taker': 0.002,\n        'info': { ... },\n        'symbol': 'LTC/BTC',\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Deposit/Withdrawal Fees Schedule Example\nDESCRIPTION: Shows the data structure returned by `fetchDepositWithdrawFees`.  It contains deposit and withdrawal fees, networks, and info.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_249\n\nLANGUAGE: javascript\nCODE:\n```\nfetchDepositWithdrawFees (codes, params = {})\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    'BTC': {\n        'withdraw': { 'fee': 0.0005, 'percentage': false },\n        'deposit': { 'fee': undefined, 'percentage': undefined },\n        'networks': {\n            'BTC': {\n                'deposit': { 'fee': undefined, 'percentage': undefined },\n                'withdraw': { 'fee': 0.0005, 'percentage': false }\n            }\n        },\n        'info': { ... },\n    },\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Watch My Trades Method Signature in PHP\nDESCRIPTION: Defines the method signature for watching personal trades using CCXT Pro in PHP. It takes symbol, since, lmit (typo) and params as arguments, with default values assigned to symbol, since and params.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nwatch_my_trades($symbol = null, $since = null, $lmit = null, $params = array());\n```\n\n----------------------------------------\n\nTITLE: Running CCXT JavaScript Examples from Command Line\nDESCRIPTION: Command for executing CCXT JavaScript example files from any directory using Node.js. Replace the filename with the actual example you want to run.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/examples/js/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnode path/to/example.js # substitute for actual filename here\n```\n\n----------------------------------------\n\nTITLE: Fetching Order Book with Custom Depth in JavaScript\nDESCRIPTION: Example of fetching an order book with a custom depth by specifying a limit and exchange-specific parameters. This example demonstrates fetching a limited number of orders from Bitfinex with grouping enabled.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_59\n\nLANGUAGE: JavaScript\nCODE:\n```\n(async function test () {\n    const ccxt = require ('ccxt')\n    const exchange = new ccxt.bitfinex ()\n    const limit = 5\n    const orders = await exchange.fetchOrderBook ('BTC/USD', limit, {\n        // this parameter is exchange-specific, all extra params have unique names per exchange\n        'group': 1, // 1 = orders are grouped by price, 0 = orders are separate\n    })\n}) ()\n```\n\n----------------------------------------\n\nTITLE: Watch My Trades Method Signature in Python\nDESCRIPTION: Defines the method signature for watching personal trades using CCXT Pro in Python. It takes symbol, since, limit and params as arguments, with default values assigned to symbol, since and limit.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nwatch_my_trades(symbol=None, since=None, limit=None, params={})\n```\n\n----------------------------------------\n\nTITLE: Loading Markets and Accessing Market Data in PHP\nDESCRIPTION: This PHP snippet demonstrates loading market data, accessing markets by symbol and ID, retrieving market IDs, and accessing symbol lists and currency dictionaries. It utilizes the ccxt library with the Okcoin exchange to showcase how to interact with market data and exchange properties.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_46\n\nLANGUAGE: PHP\nCODE:\n```\n$var_dump($exchange->load_markets());\n\n$dashcny1 = $exchange->markets['DASH/CNY'];        // get market structure by symbol\n$dashcny2 = $exchange->market('DASH/CNY');         // same result in a slightly different way\n\n$dashcnyId = $exchange->market_id('DASH/CNY');     // get market id by symbol\n\n$symbols = $exchange->symbols;                     // get an array of symbols\n$symbols2 = array_keys($exchange->markets);        // same as previous line\n\nvar_dump($exchange->id, $symbols);                 // print all symbols\n\n$currencies = $exchange->currencies;               // an associative array of currencies\n\n$okcoin = '\\\\ccxt\\\\okcoin';\n$okcoin = new $okcoin();\n\n$okcoin->load_markets();\n\n$okcoin->markets['BTC/USD'];                    // symbol â market (get market by symbol)\n$okcoin->markets_by_id['btc_usd'][0];              // id â market (get market by id)\n\n$okcoin->markets['BTC/USD']['id'];              // symbol â id (get id by symbol)\n$okcoin->markets_by_id['btc_usd'][0]['symbol']; // id â symbol (get symbol by id)\n```\n\n----------------------------------------\n\nTITLE: Setting clientOrderId in Javascript\nDESCRIPTION: Demonstrates how to set a custom `clientOrderId` when creating an order using the CCXT library in Javascript. The `clientOrderId` is included within the `params` object passed to the `createOrder` method. Requires symbol, type, side, amount, and price to be defined.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_201\n\nLANGUAGE: Javascript\nCODE:\n```\nexchange.createOrder (symbol, type, side, amount, price, {\n    'clientOrderId': 'Hello',\n})\n```\n\n----------------------------------------\n\nTITLE: Overriding Exchange Methods in Python\nDESCRIPTION: This snippet shows how to override instance methods of an exchange object during runtime using the CCXT library in Python. Requires the CCXT Python library to be installed.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nex = ccxt.binance()\ndef my_overload(symbol, params = {}):\n    # your codes go here\n\nex.fetch_ticker = my_overload\nprint(ex.fetch_ticker('BTC/USDT'))\n```\n\n----------------------------------------\n\nTITLE: Running CCXT Python Examples via Command Line\nDESCRIPTION: Command to run Python examples from any folder using the shell. User needs to substitute the actual example filename in the command.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/examples/py/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython path/to/example.py # substitute for actual filename here\n```\n\n----------------------------------------\n\nTITLE: Request-Response Loop in Standard CCXT\nDESCRIPTION: Demonstrates the typical async flow for a RESTful orderbook polling request-response loop in standard CCXT. This pattern repeatedly fetches data at intervals using the fetch* methods.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// a RESTful orderbook polling request-response loop\n\nwhile (condition) {\n\n    try {\n\n        // fetch some of the public data\n        orderbook = await exchange.fetchOrderBook (symbol, limit)\n\n        // do something or react somehow based on that data\n        // ...\n\n    } catch (e) {\n\n        // handle errors\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Withdrawals with CCXT in PHP\nDESCRIPTION: This snippet demonstrates how to fetch withdrawal history using the `fetch_withdrawals` method in CCXT with PHP. It checks if the exchange supports the method and then calls it with optional parameters for currency code, start time, and limit. It throws an exception if the method is not supported by the exchange.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_234\n\nLANGUAGE: php\nCODE:\n```\n// fetch_withdrawals ($code = null, $since = null, $limit = null, $params = {})\n\nif ($exchange->has['fetchWithdrawals']) {\n    $withdrawals = $exchange->fetch_withdrawals ($code, $since, $limit, $params);\n} else {\n    throw new Exception ($exchange->id . ' does not have the fetch_withdrawals method');\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Market Price from Order Book in Python\nDESCRIPTION: Example of how to extract the current market price from an order book in Python. This code fetches the first bid and ask prices and calculates the spread between them.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_63\n\nLANGUAGE: Python\nCODE:\n```\norderbook = exchange.fetch_order_book (exchange.symbols[0])\nbid = orderbook['bids'][0][0] if len (orderbook['bids']) > 0 else None\nask = orderbook['asks'][0][0] if len (orderbook['asks']) > 0 else None\nspread = (ask - bid) if (bid and ask) else None\nprint (exchange.id, 'market price', { 'bid': bid, 'ask': ask, 'spread': spread })\n```\n\n----------------------------------------\n\nTITLE: Creating Trailing Orders in Javascript\nDESCRIPTION: This snippet demonstrates how to create a trailing order in Javascript using the CCXT library. It defines the symbol, type, side, amount, and parameters including trailingPercent. Requires an initialized CCXT exchange object and an asynchronous context.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_195\n\nLANGUAGE: Javascript\nCODE:\n```\nsymbol = 'BTC/USDT:USDT';\ntype = 'market';\nside = 'sell';\namount = 1.0;\nprice = undefined;\nconst params = {\n    'trailingPercent': 1.0, // percentage away from the current market price 1.0 is equal to 1%\n    // 'trailingAmount': 100.0, // quote amount away from the current market price\n    // 'trailingTriggerPrice': 44500.0, // the price to trigger activating a trailing stop order\n    // 'reduceOnly': true, // set to true if you want to close a position, set to false if you want to open a new position\n}\nconst order = await exchange.createOrder (symbol, type, side, amount, price, params)\n```\n\n----------------------------------------\n\nTITLE: CCXT Pro Version and Exchanges (PHP)\nDESCRIPTION: This code snippet demonstrates how to import the CCXT Pro library in PHP and print the CCXT version and the list of supported exchanges to the console. It also shows how to use fully qualified names for the ccxt\\pro namespace. This allows users to verify that the library is correctly installed and that the desired exchange is supported.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse \\ccxt\\pro; // optional, since you can use fully qualified names\necho 'CCXT version ', \\ccxt\\pro\\Exchange::VERSION, \"\\n\";\necho 'Supported exchanges: ', json_encode(\\ccxt\\pro\\Exchange::$exchanges), \"\\n\";\n```\n\n----------------------------------------\n\nTITLE: Using CCXT in PHP\nDESCRIPTION: Basic example of including and using CCXT in a PHP application to list available exchanges.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/readme.rst#2025-04-22_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\ninclude \"ccxt.php\";\nvar_dump (\\ccxt\\Exchange::$exchanges); // print a list of all available exchange classes\n```\n\n----------------------------------------\n\nTITLE: Watching OHLCV Data with WebSocket in PHP\nDESCRIPTION: Continuously watches for OHLCV (candlestick) data updates using the exchange's WebSocket API. Prints the received candles as JSON and handles exceptions.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-22_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\nif ($exchange->has['watchOHLCV']) {\n    $exchange::execute_and_run(function() use ($exchange, $symbol, $timeframe, $since, $limit, $params) {\n        while (true) {\n            try {\n                $candles = yield $exchange->watch_ohlcv($symbol, $timeframe, $since, $limit, $params);\n                echo date('c'), ' ', $symbol, ' ', $timeframe, ' ', json_encode($candles), \"\\n\";\n            } catch (Exception $e) {\n                echo get_class($e), ' ', $e->getMessage(), \"\\n\";\n            }\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Balance Structure - JavaScript Example\nDESCRIPTION: This example demonstrates the structure of the balance object returned by the `fetchBalance()` method. It includes information about free, used, and total balances for each currency, as well as a timestamp and datetime.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_154\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    'info':  { ... },    // the original untouched non-parsed reply with details\n    'timestamp': 1499280391811, // Unix Timestamp in milliseconds (seconds * 1000)\n    'datetime': '2017-07-05T18:47:14.692Z', // ISO8601 datetime string with milliseconds\n\n    //-------------------------------------------------------------------------\n    // indexed by availability of funds first, then by currency\n\n    'free':  {           // money, available for trading, by currency\n        'BTC': 321.00,   // floats...\n        'USD': 123.00,\n        ...\n    },\n\n    'used':  { ... },    // money on hold, locked, frozen, or pending, by currency\n\n    'total': { ... },    // total (free + used), by currency\n\n    'debt': { ... },     // debt, by currency\n\n    //-------------------------------------------------------------------------\n    // indexed by currency first, then by availability of funds\n\n    'BTC':   {           // string, three-letter currency code, uppercase\n        'free': 321.00   // float, money available for trading\n        'used': 234.00,  // float, money on hold, locked, frozen or pending\n        'total': 555.00, // float, total balance (free + used)\n    },\n\n    'USD':   {           // ...\n        'free': 123.00   // ...\n        'used': 456.00,\n        'total': 579.00,\n    },\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Using CCXT in Python\nDESCRIPTION: Commands for installing CCXT via pip and basic usage example in Python to list available exchanges.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/readme.rst#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npip install ccxt\n```\n\nLANGUAGE: Python\nCODE:\n```\nimport ccxt\nprint(ccxt.exchanges) # print a list of all available exchange classes\n```\n\n----------------------------------------\n\nTITLE: Fetching Ledger Entry JavaScript\nDESCRIPTION: This snippet shows the function signature and parameters for fetching a single ledger entry using the `fetchLedgerEntry` method. Requires an ID, optionally a currency code, and optional params.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_211\n\nLANGUAGE: javascript\nCODE:\n```\nfetchLedgerEntry (id, code = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT using Docker\nDESCRIPTION: Commands to pull and run the CCXT Docker image from Docker Hub. This provides an isolated environment with CCXT pre-installed.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/go/tests/out.txt#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ccxt/ccxt\ndocker run -it ccxt/ccxt bash\n```\n\n----------------------------------------\n\nTITLE: Working with Optional Parameters in Go with CCXT\nDESCRIPTION: Explanation of how the CCXT library handles optional parameters in Go using Option structs and WithX methods. Shows the approach for providing optional parameters to functions like FetchMyTrades.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/README.md#2025-04-22_snippet_23\n\nLANGUAGE: Go\nCODE:\n```\nfunc (this *Binance) FetchMyTrades(options ...FetchMyTradesOptions) ([]Trade, error)\n```\n\nLANGUAGE: Go\nCODE:\n```\ntrades, error := exchange.FetchMyTrades(ccxt.withFetchMyTradesSymbol(\"BTC/USDT\"), ccxt.WithFetchOHLCVLimit(5), ccxt.WithFetchMyTradesParams(orderParams))\n```\n\n----------------------------------------\n\nTITLE: Placing Reduce-Only Orders in JavaScript, Python, and PHP\nDESCRIPTION: These snippets show how to place a reduce-only order using CCXT in JavaScript, Python, and PHP. Reduce-only orders are used to close positions without opening new ones, which is crucial for risk management in margin trading.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/FAQ.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst params = {\n    'reduceOnly': true, // set to true if you want to close a position, set to false if you want to open a new position\n}\nconst order = await exchange.createOrder (symbol, type, side, amount, price, params)\n```\n\nLANGUAGE: python\nCODE:\n```\nparams = {\n    'reduceOnly': True, # set to True if you want to close a position, set to False if you want to open a new position\n}\norder = exchange.create_order (symbol, type, side, amount, price, params)\n```\n\nLANGUAGE: php\nCODE:\n```\n$params = {\n    'reduceOnly': true, // set to true if you want to close a position, set to false if you want to open a new position\n}\n$order = $exchange->create_order ($symbol, $type, $side, $amount, $price, $params);\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT Library in Python\nDESCRIPTION: Installs the CCXT library using pip, which is a Python package for cryptocurrency exchange trading.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/examples/py/playing_with_ccxt_example.ipynb#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!pip install ccxt\n```\n\n----------------------------------------\n\nTITLE: Fetching Funding Intervals for Multiple Markets in JavaScript\nDESCRIPTION: Fetches the funding intervals for multiple market symbols. The `symbols` parameter is an optional array of unified CCXT symbols. Optional exchange-specific parameters can be passed in via the `params` parameter. Returns an array of funding rate structures.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_119\n\nLANGUAGE: javascript\nCODE:\n```\nfetchFundingIntervals (symbols = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Create Order WS Method Signature in PHP\nDESCRIPTION: Defines the signature for the create_order_ws method in PHP. It creates an order using WebSocket. Parameters include symbol, type, side, amount, price (optional), and additional parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_55\n\nLANGUAGE: php\nCODE:\n```\ncreate_order_ws(string $symbol, string $type, string $side, float $amount, ?float $price = null, $params = array ())\n```\n\n----------------------------------------\n\nTITLE: Decimal to Precision Function Definition (JS)\nDESCRIPTION: Defines a JavaScript function `decimalToPrecision` to format a decimal value to a specific precision, with customizable rounding, number of precision digits, counting mode, and padding mode. This function allows users to format values to the required decimal precision with support for different rounding, counting and padding modes.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction decimalToPrecision (x, roundingMode, numPrecisionDigits, countingMode = DECIMAL_PLACES, paddingMode = NO_PADDING)\n```\n\n----------------------------------------\n\nTITLE: Using safeMethodN for Multiple Key Lookup - JavaScript\nDESCRIPTION: Example of using safeMethodN family of functions that allows searching for a value across multiple possible keys in an object, returning the first match or a default value.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CONTRIBUTING.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst price = this.safeStringN (object, [ 'key1', 'key2', 'key3' ], default)\n```\n\n----------------------------------------\n\nTITLE: Fetch Position History (JavaScript)\nDESCRIPTION: This code snippet shows how to fetch the history of positions using the `fetchPositionHistory` method in CCXT. It supports filtering by symbol, specifying a start time (`since`), limiting the number of results (`limit`), and using exchange-specific parameters. The method returns an array of position structures representing the historical positions.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_278\n\nLANGUAGE: javascript\nCODE:\n```\nfetchPositionHistory (symbol = undefined, since = undefined, limit = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Loading Markets in PHP\nDESCRIPTION: PHP implementation for loading market data from an exchange. Shows how to dynamically instantiate an exchange class and load its markets data.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_36\n\nLANGUAGE: PHP\nCODE:\n```\n$id = 'huobipro';\n$exchange = '\\\\ccxt\\\\' . $id;\n$huobipro = new $exchange();\n$markets = $huobipro->load_markets();\nvar_dump($huobipro->id, $markets);\n```\n\n----------------------------------------\n\nTITLE: RESTful Orderbook Polling Loop in CCXT (JavaScript)\nDESCRIPTION: This snippet demonstrates a typical RESTful orderbook polling loop using CCXT. It fetches the orderbook data periodically and handles potential errors within the loop. The code showcases how to interact with exchange APIs using a request-response pattern.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\n// a RESTful orderbook polling request-response loop\n\nwhile (condition) {\n\n    try {\n\n        // fetch some of the public data\n        orderbook = await exchange.fetchOrderBook (symbol, limit)\n\n        // do something or react somehow based on that data\n        // ...\n\n    } catch (e) {\n\n        // handle errors\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT in JavaScript/Node.js Projects\nDESCRIPTION: Command to install the CCXT library in a JavaScript or Node.js project using NPM package manager.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# JavaScript / Node.js / NPM\nnpm install ccxt\n```\n\n----------------------------------------\n\nTITLE: Browser Integration with CDN\nDESCRIPTION: HTML example showing how to include CCXT via CDN script tag and basic browser usage\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Install.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/ccxt@4.4.77/dist/ccxt.browser.min.js\"></script>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log (ccxt.exchanges) // print all available exchanges\n```\n\n----------------------------------------\n\nTITLE: Running Python Examples in CCXT\nDESCRIPTION: Command to execute Python examples from the CCXT library. Replace the path with actual example filename.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/examples/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython path/to/example.py # substitute for actual filename here\n```\n\n----------------------------------------\n\nTITLE: Enabling DEBUG Logging (Python)\nDESCRIPTION: This code snippet demonstrates how to enable DEBUG logging in Python when using the CCXT library. By importing the logging module and configuring the basic logging level to DEBUG, you can output error details and other debugging information to the console, aiding in troubleshooting and understanding the behavior of your code when interacting with cryptocurrency exchanges.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Fetching Order Books for All Markets - Javascript\nDESCRIPTION: This javascript code iterates through all markets available on the exchange, fetches the order book for each symbol, logs it, and then pauses for a short delay to avoid rate limiting.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\ndelay = 2000 // milliseconds = seconds * 1000\n(async () => {\n    for (symbol in exchange.markets) {\n        console.log (await exchange.fetchOrderBook (symbol))\n        await new Promise (resolve => setTimeout (resolve, delay)) // rate limit\n    }\n}) ()\n\n```\n\n----------------------------------------\n\nTITLE: Creating Trailing Orders in Python\nDESCRIPTION: This snippet demonstrates how to create a trailing order in Python using the CCXT library. It defines the symbol, type, side, amount, and parameters including trailingPercent. Requires an initialized CCXT exchange object.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_196\n\nLANGUAGE: Python\nCODE:\n```\nsymbol = 'BTC/USDT:USDT'\ntype = 'market'\nside = 'sell'\namount = 1.0\nprice = None\nparams = {\n    'trailingPercent': 1.0, # percentage away from the current market price 1.0 is equal to 1%\n    # 'trailingAmount': 100.0, # quote amount away from the current market price\n    # 'trailingTriggerPrice': 44500.0, # the price to trigger activating a trailing stop order\n    # 'reduceOnly': True, # set to True if you want to close a position, set to False if you want to open a new position\n}\norder = exchange.create_order (symbol, type, side, amount, price, params)\n```\n\n----------------------------------------\n\nTITLE: Setting Up CCXT Development Environment without Docker\nDESCRIPTION: Series of commands to clone the CCXT repository, install dependencies, and build the project for development without using Docker.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/ccxt/ccxt.git\n```\n\nLANGUAGE: shell\nCODE:\n```\ncd ccxt\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Throttled WebSocket Data Processing in JavaScript\nDESCRIPTION: Example of throttling mode for processing WebSocket data in CCXT Pro. This approach controls the frequency of data processing by sleeping between iterations, which helps reduce resource usage and simplify synchronization across multiple exchanges.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n// throttling mode\nconst limit = 5 // optional\n// await is optional, alternatively you can launch it in bg without await\nawait exchange.watchOrderBook (symbol, limit)\nwhile (true) {\n    // your reaction takes place here\n    // you arrive here every 100 ms regardless of whether there was an update or not\n    // in throttling mode offloading the orderbook with .limit () is required\n    console.log (exchange.orderbooks[symbol].limit (limit))\n    await exchange.sleep (100) // every 100 ms\n}\n```\n\n----------------------------------------\n\nTITLE: Exchange Instantiation Examples\nDESCRIPTION: Examples of creating exchange instances in different languages with async support.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ccxt = require ('ccxt.pro')\nconst exchange = new ccxtpro.binance ({ newUpdates: false })\n```\n\nLANGUAGE: Python\nCODE:\n```\nimport ccxt.pro as ccxtpro\nfrom asyncio import run\n\nasync def main():\n    exchange = ccxtpro.kraken({'newUpdates': False})\n    while True:\n        orderbook = await exchange.watch_order_book('BTC/USD')\n        print(orderbook['asks'][0], orderbook['bids'][0])\n    await exchange.close()\n\nrun(main())\n```\n\nLANGUAGE: PHP\nCODE:\n```\nerror_reporting(E_ALL | E_STRICT);\ndate_default_timezone_set('UTC');\nrequire_once 'vendor/autoload.php';\n\n$loop = \\React\\EventLoop\\Factory::create();\n$exchange = new \\ccxt\\pro\\kucoin(array('loop' => $loop, 'newUpdates': false ));\n```\n\n----------------------------------------\n\nTITLE: Retry Mechanism Configuration (Python)\nDESCRIPTION: Shows how to configure the retry mechanism in CCXT to automatically retry failed requests due to server or network issues. It demonstrates setting the `maxRetriesOnFailure` and `maxRetriesOnFailureDelay` options.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_305\n\nLANGUAGE: python\nCODE:\n```\nexchange.options['maxRetriesOnFailure'] = 3 # if we get an error like the ones mentioned above we will retry up to three times per request\nexchange.options['maxRetriesOnFailureDelay'] = 1000 # we will wait 1000ms (1s) between retries\n```\n\n----------------------------------------\n\nTITLE: Cloning CCXT Repository\nDESCRIPTION: Commands for cloning the CCXT repository from GitHub, with options for full or shallow clone to avoid downloading complete commit history.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/python/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/ccxt/ccxt.git  # including 1GB of commit history\n\n# or\n\ngit clone https://github.com/ccxt/ccxt.git --depth 1  # avoid downloading 1GB of commit history\n```\n\n----------------------------------------\n\nTITLE: Parsing Numeric Values with Precise in JavaScript\nDESCRIPTION: Demonstrates the new approach for handling numeric values using the Precise class for string-based representations and calculations in CCXT parsers.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CONTRIBUTING.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst amount = this.safeNumber (order, 'amount'); // internal string-layer\nconst remaining = this.safeString (order, 'remaining'); // internal string-layer\nif (Precise.stringGt (remaining, '0')) { // internal string-layer\n    status = 'open';\n} else {\n    status = 'closed';\n}\n// ...\nreturn {\n    // ...\n    'amount': amount, // external layer, goes to the user\n    'remaining': this.parseNumber (remaining), // external layer, goes to the user\n    'status': status,\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: PHP CCXT Implementation\nDESCRIPTION: Basic example of using CCXT in PHP environment.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/python/README.md#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\ninclude \"ccxt.php\";\nvar_dump (\\ccxt\\Exchange::$exchanges); // print a list of all available exchange classes\n```\n\n----------------------------------------\n\nTITLE: Running Low-Level Language-Specific Tests\nDESCRIPTION: Commands for running language-specific tests for a particular exchange with verbose output. These commands directly invoke the test runners for each supported language when higher-level tests fail.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CONTRIBUTING.md#2025-04-22_snippet_32\n\nLANGUAGE: shell\nCODE:\n```\nnode js/test/test exchange --verbose\npython3 python/ccxt/test/test_sync.py exchange --verbose\npython3 python/ccxt/test/test_async.py exchange --verbose\nphp -f php/test/test_sync.php exchange --verbose\nphp -f php/test/test_async.php exchange --verbose\n```\n\n----------------------------------------\n\nTITLE: Module Initialization Examples\nDESCRIPTION: Examples of importing and initializing CCXT Pro in different languages.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ccxtpro = require ('ccxt.pro')\nconsole.log ('CCXT version', ccxtpro.version)\nconsole.log ('Supported exchanges:', ccxtpro.exchanges)\n```\n\nLANGUAGE: Python\nCODE:\n```\nimport ccxt.pro as ccxtpro\nprint('CCXT version', ccxtpro.__version__)\nprint('Supported exchanges:', ccxtpro.exchanges)\n```\n\nLANGUAGE: PHP\nCODE:\n```\nuse \\ccxt\\pro;\necho 'CCXT version ', \\ccxt\\pro\\Exchange::VERSION, \"\\n\";\necho 'Supported exchanges: ', json_encode(\\ccxt\\pro\\Exchange::$exchanges), \"\\n\";\n```\n\n----------------------------------------\n\nTITLE: Using HttpsProxyAgent with HTTPS Module in TypeScript\nDESCRIPTION: Example showing how to create an HttpsProxyAgent instance and use it with Node.js https module to make a request through a proxy server. The agent is passed to the https.get method to route the request through the specified proxy.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/ts/src/static_dependencies/proxies/https-proxy-agent/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as https from 'https';\nimport { HttpsProxyAgent } from 'https-proxy-agent';\n\nconst agent = new HttpsProxyAgent('http://168.63.76.32:3128');\n\nhttps.get('https://example.com', { agent }, (res) => {\n  console.log('\"response\" event!', res.headers);\n  res.pipe(process.stdout);\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Ledger JavaScript\nDESCRIPTION: This snippet shows the function signature and parameters for fetching multiple ledger entries using the `fetchLedger` method. Optionally takes a currency code, since timestamp, limit, and params.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_212\n\nLANGUAGE: javascript\nCODE:\n```\nasync fetchLedger (code = undefined, since = undefined, limit = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Converting Timestamps to Milliseconds in JavaScript\nDESCRIPTION: Demonstrates different methods for converting various timestamp formats to the standard millisecond format used throughout the CCXT library, including handling Unix timestamps in seconds, milliseconds, and decimal formats.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = {\n   'unixTimestampInSeconds': 1565242530,\n   'unixTimestampInMilliseconds': 1565242530165,\n   'unixTimestampAsDecimal': 1565242530.165,\n   'stringInSeconds': '1565242530',\n};\n\n// convert to integer if the underlying value is already in milliseconds\nconst timestamp = this.safeInteger (data, 'unixTimestampInMilliseconds'); // === 1565242530165\n\n// convert to integer and multiply by a thousand if the value has milliseconds after dot\nconst timestamp = this.safeTimestamp (data, 'unixTimestampAsDecimal'); // === 1565242530165\n\n// convert to integer and multiply by a thousand if the value is a UNIX timestamp in seconds\nconst timestamp = this.safeTimestamp (data, 'unixTimestampInSeconds'); // === 1565242530000\n\n// convert to integer and multiply by a thousand if the value is in seconds\nconst timestamp = this.safeTimestamp (data, 'stringInSeconds'); // === 1565242530000\n```\n\n----------------------------------------\n\nTITLE: Watch Positions Method Signature in C#\nDESCRIPTION: Defines the method signature for watching positions using CCXT Pro in C#.  It's an async Task that takes symbols, since2, limit2 and parameters as arguments, with default values assigned to symbols, since2, limit2 and parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_52\n\nLANGUAGE: c#\nCODE:\n```\npublic async Task<List<Position>> WatchPositions(List<string> symbols = null, Int64? since2 = 0, Int64? limit2 = 0, Dictionary<string, object> parameters = null)\n```\n\n----------------------------------------\n\nTITLE: Transaction Fee Structure Example\nDESCRIPTION: Presents an example of the data structure returned for transaction fees, showing withdrawal and deposit fees.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_257\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    'withdraw': {\n        'BTC': 0.00001,\n        'ETH': 0.001,\n        'LTC': 0.0003,\n    },\n    'deposit': {\n        'BTC': 0,\n    },\n    'info': { ... },\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Tickers in JavaScript\nDESCRIPTION: Shows how to fetch tickers for specific symbols using CCXT in JavaScript.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_72\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (exchange.has['fetchTickers']) {\n    console.log (await (exchange.fetchTickers ([ 'ETH/BTC', 'LTC/BTC' ]))) // listed tickers indexed by their symbols\n}\n```\n\n----------------------------------------\n\nTITLE: Cancel All Orders WS Method Signature in JavaScript\nDESCRIPTION: Defines the signature for the cancelAllOrdersWs method in JavaScript. It cancels all orders for a symbol using WebSocket. Parameters include symbol (optional) and additional parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\ncancelAllOrdersWs(symbol: string = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Real-Time Mode in CCXT Pro\nDESCRIPTION: This snippet illustrates the real-time mode in CCXT Pro, where the code awaits updates from the exchange and reacts to them immediately. It shows how to use `exchange.watchOrderBook` in a loop, processing each order book update as it arrives. Error handling is included with a `try...catch` block.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// real-time mode\nconst limit = 5 // optional\nwhile (true) {\n    try {\n        const orderbook = await exchange.watchOrderBook (symbol, limit)\n        // your reaction to the update takes place here\n        // you arrive here after receiving the update from the exchange in real time\n        console.log (orderbook) // every update\n    } catch (e) {\n        console.log (e)\n        // throw e // uncomment to stop the loop on exceptions\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Including CCXT in HTML via CDN\nDESCRIPTION: HTML script tag for loading CCXT from a CDN in a web browser environment.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/ccxt@4.4.77/dist/ccxt.browser.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Overriding parseOHLCV in Javascript to get raw response\nDESCRIPTION: This code snippet shows how to override the `parseOHLCV` function in JavaScript to access the raw OHLCV response from the exchange.  It modifies the function to return both the parsed result and the raw data.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_96\n\nLANGUAGE: javascript\nCODE:\n```\nconst ex = new ccxt.coinbase();\nconst originalParser = ex.parseOHLCV.bind(ex);\nex.parseOHLCV = ((ohlcv, market = undefined) => {\n    return {\n        'result': originalParser(ohlcv, market),\n        'raw': ohlcv,\n    };\n});\nconst result = await ex.fetchOHLCV('BTC/USDT', '1m');\nconsole.log (result[0]);\n```\n\n----------------------------------------\n\nTITLE: CCXT Repository Setup Commands\nDESCRIPTION: Series of commands to clone and set up the CCXT repository locally with its dependencies\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CLI.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/ccxt/ccxt\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd ccxt\n```\n\n----------------------------------------\n\nTITLE: Escaping Control Characters in JavaScript Strings\nDESCRIPTION: Illustrates the correct way to use escaped control characters in strings, emphasizing the use of double quotes for proper parsing across languages.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CONTRIBUTING.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst a = 'GET' + method.toLowerCase () + \"\\n\" + path; // eslint-disable-line quotes\n// eslint-disable-next-line quotes\nconst b = \"api\\nfoobar.com\\n\";\n```\n\n----------------------------------------\n\nTITLE: Watching Trades for Symbols with CCXT Pro in Python\nDESCRIPTION: This snippet demonstrates how to use the `watchTradesForSymbols` method in the CCXT Pro library to watch trades for multiple symbols. It sets up a loop to continuously receive trade updates for LTC/USDT and BTC/USDT. It logs the received trades with a timestamp using `exchange.iso8601`.  Error handling is included with a retry loop.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nif exchange.has['watchTradesForSymbols']:\n    while True:\n        try:\n            trades = await exchange.watchTradesForSymbols(['LTC/USDT', 'BTC/USDT'], since, limit, params)\n            print(exchange.iso8601(exchange.milliseconds()), trades)\n        except Exception as e:\n            print(e)\n            # stop the loop on exception or leave it commented to retry\n            # raise e\n```\n\n----------------------------------------\n\nTITLE: Fetching Deposits in JavaScript\nDESCRIPTION: Example of how to fetch deposits using the CCXT library in JavaScript. Checks if the exchange supports the fetchDeposits method before calling it.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_141\n\nLANGUAGE: JavaScript\nCODE:\n```\n// fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {})\n\nif (exchange.has['fetchDeposits']) {\n    const deposits = await exchange.fetchDeposits (code, since, limit, params)\n} else {\n    throw new Error (exchange.id + ' does not have the fetchDeposits method')\n}\n```\n\n----------------------------------------\n\nTITLE: Running CCXT Development Environment with Docker\nDESCRIPTION: Command to start a Docker container with all necessary dependencies for CCXT development and testing.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose run --rm ccxt\n```\n\n----------------------------------------\n\nTITLE: Running Targeted CCXT Tests with Filters\nDESCRIPTION: Command format for running selective tests on CCXT, allowing filtering by programming language, exchange, or symbol. This helps when focusing on specific components of the library.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CONTRIBUTING.md#2025-04-22_snippet_30\n\nLANGUAGE: shell\nCODE:\n```\nnode run-tests [--js] [--python] [--python-async] [--php] [--php-async] [exchange] [symbol]\n```\n\n----------------------------------------\n\nTITLE: Cancel Order WS Method Signature in PHP\nDESCRIPTION: Defines the signature for the cancel_order_ws method in PHP. It cancels an order using WebSocket. Parameters include id, symbol (optional), and additional parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_62\n\nLANGUAGE: php\nCODE:\n```\ncancel_order_ws(string $id, string $symbol, $params = array ())\n```\n\n----------------------------------------\n\nTITLE: Running CCXT in Docker\nDESCRIPTION: Command to run CCXT in a Docker container using docker-compose, useful for development and testing.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/readme.rst#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose run --rm ccxt\n```\n\n----------------------------------------\n\nTITLE: Overriding Exchange Properties in PHP\nDESCRIPTION: This snippet demonstrates how to override exchange properties and options upon instantiation using the CCXT library in PHP, including setting rate limits, custom headers, and exchange-specific options. Requires the CCXT PHP library to be installed.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n$exchange_id = 'binance';\n$exchange_class = \"\\\\ccxt\\\\$exchange_id\";\n$exchange = new $exchange_class(array(\n    'rateLimit' => 10000, // unified exchange property\n    'headers' => array(\n        'YOUR_CUSTOM_HTTP_HEADER' => 'YOUR_CUSTOM_VALUE',\n    ),\n    'options' => array(\n        'adjustForTimeDifference' => true, // exchange-specific option\n    ),\n));\n$exchange->options['adjustForTimeDifference'] = false;\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT via Git Clone\nDESCRIPTION: Command to clone the CCXT repository from GitHub, with options for either full history or shallow clone to save space.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/readme.rst#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/ccxt/ccxt.git  # including 1GB of commit history\n\n# or\n\ngit clone https://github.com/ccxt/ccxt.git --depth 1  # avoid downloading 1GB of commit history\n```\n\n----------------------------------------\n\nTITLE: Incorrect Use of Control Characters in JavaScript Strings\nDESCRIPTION: Shows incorrect examples of using control characters in single-quoted strings, which won't work properly when transpiled to other languages like PHP.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst a = 'GET' + method.toLowerCase () + '\\n' + path;\nconst b = 'api\\nfoobar.com\\n';\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT with Python/PIP\nDESCRIPTION: Command to install CCXT library using Python package manager PIP\nSOURCE: https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install ccxt  # or pip3 install ccxt\n```\n\n----------------------------------------\n\nTITLE: CCXT Exception Hierarchy Outline\nDESCRIPTION: Text-based outline showing the inheritance hierarchy of exceptions in CCXT, starting from BaseError and branching into various specific error types.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_178\n\nLANGUAGE: Text\nCODE:\n```\n+ BaseError\n|\n+---+ ExchangeError\n|   |\n|   +---+ AuthenticationError\n|   |   |\n|   |   +---+ PermissionDenied\n|   |   |\n|   |   +---+ AccountSuspended\n|   |\n|   +---+ ArgumentsRequired\n|   |\n|   +---+ BadRequest\n|   |   |\n|   |   +---+ BadSymbol\n|   |\n|   +---+ BadResponse\n|   |   |\n|   |   +---+ NullResponse\n|   |\n|   +---+ InsufficientFunds\n|   |\n|   +---+ InvalidAddress\n|   |   |\n|   |   +---+ AddressPending\n|   |\n|   +---+ InvalidOrder\n|   |   |\n|   |   +---+ OrderNotFound\n|   |   |\n|   |   +---+ OrderNotCached\n|   |   |\n|   |   +---+ CancelPending\n|   |   |\n|   |   +---+ OrderImmediatelyFillable\n|   |   |\n|   |   +---+ OrderNotFillable\n|   |   |\n|   |   +---+ DuplicateOrderId\n|   |\n|   +---+ NotSupported\n|\n+---+ NetworkError (recoverable)\n    |\n    +---+ InvalidNonce\n    |\n    +---+ RequestTimeout\n    |\n    +---+ ExchangeNotAvailable\n    |   |\n    |   +---+ OnMaintenance\n    |\n    +---+ DDoSProtection\n        |\n        +---+ RateLimitExceeded\n```\n\n----------------------------------------\n\nTITLE: Fetching Withdrawals in Python\nDESCRIPTION: Example of how to fetch withdrawals using the CCXT library in Python. Checks if the exchange supports the fetch_withdrawals method before calling it.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_145\n\nLANGUAGE: Python\nCODE:\n```\n# fetch_withdrawals(code = None, since = None, limit = None, params = {})\n\nif exchange.has['fetchWithdrawals']:\n    withdrawals = exchange.fetch_withdrawals(code, since, limit, params)\nelse:\n    raise Exception (exchange.id + ' does not have the fetch_withdrawals method')\n```\n\n----------------------------------------\n\nTITLE: Adding Query String Value to URI in PHP\nDESCRIPTION: This static method creates a new URI with a specific query string value added or replaced. It handles URL encoding of key-value pairs and removes any existing values for the given key before adding the new one.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/ringcentral-psr7/README.md#2025-04-22_snippet_29\n\nLANGUAGE: PHP\nCODE:\n```\npublic static function withQueryValue(UriInterface $uri, $key, $value) -> UriInterface\n```\n\n----------------------------------------\n\nTITLE: Cancel Orders WS Method Signature in JavaScript\nDESCRIPTION: Defines the signature for the cancelOrdersWs method in JavaScript. It cancels multiple orders using WebSocket. Parameters include an array of ids, symbol (optional), and additional parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\ncancelOrdersWs(ids: string[], symbol: string = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Another Incorrect Symbol Handling - JavaScript\nDESCRIPTION: Another incorrect approach when sending market symbols to exchanges. Exchange-specific market IDs should be used instead of unified symbols.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CONTRIBUTING.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nasync fetchTicker (symbol, params = {}) {\n   const request = {\n      'symbol': symbol, // very bad, sending unified symbols to the exchange directly\n   };\n   const response = await this.publicGetEndpoint (request);\n   // parse in a unified way...\n}\n```\n\n----------------------------------------\n\nTITLE: Borrow and Repay Margin Functions (JavaScript)\nDESCRIPTION: These functions are used to borrow or repay margin loans in either cross or isolated margin mode.  They require the currency code and amount to borrow or repay, with optional exchange-specific parameters. Returns a margin loan structure.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_260\n\nLANGUAGE: javascript\nCODE:\n```\nborrowCrossMargin (code, amount, params = {})\nrepayCrossMargin (code, amount, params = {})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nborrowIsolatedMargin (symbol, code, amount, params = {})\nrepayIsolatedMargin (symbol, code, amount, params = {})\n```\n\n----------------------------------------\n\nTITLE: Example Error Response for setMarginMode in JavaScript\nDESCRIPTION: Shows a suppressed error response when trying to set a margin mode that's already active. CCXT doesn't treat this as an error since the desired end state is achieved.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_168\n\nLANGUAGE: JavaScript\nCODE:\n```\n{ code: -4046, msg: 'No need to change margin type.' }\n```\n\n----------------------------------------\n\nTITLE: Fetching Ticker Data Asynchronously in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to asynchronously fetch ticker data from the Kraken exchange using the ccxt library. It retrieves a list of trading pairs, selects the first pair, and then fetches the ticker for that pair, logging the exchange ID, market ID, and ticker data to the console. Requires the ccxt library to be installed.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_55\n\nLANGUAGE: JavaScript\nCODE:\n```\n(async () => {\n    let pairs = await kraken.publicGetSymbolsDetails ()\n    let marketIds = Object.keys (pairs['result'])\n    let marketId = marketIds[0]\n    let ticker = await kraken.publicGetTicker ({ pair: marketId })\n    console.log (kraken.id, marketId, ticker)\n}) ()\n```\n\n----------------------------------------\n\nTITLE: Custom Message Handler in JavaScript\nDESCRIPTION: This snippet shows how to create a custom message handler in JavaScript and replace the original handleMessage function of the ccxt.pro.binance instance. The custom handler calls the original handler before executing additional logic.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\nfunction myHandler(ws, data, orignal_handler){\n    orignal_handler(ws, data); // trigger original `handleMessage`\n    if (your_condition) {\n        // execute your additional code\n    }\n}\n\nconst ex = new ccxt.pro.binance();\nconst original_handler = ex.handleMessage.bind(ex);\nex.handleMessage = (ws, data) => myHandler(ws, data, original_handler);\nex.watchTicker('BTC/USDT');\n```\n\n----------------------------------------\n\nTITLE: Safe File Opening in PHP\nDESCRIPTION: This function safely opens a PHP stream resource using a filename. It adds an error handler to throw an exception instead of raising a warning when fopen fails, improving error handling.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/ringcentral-psr7/README.md#2025-04-22_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\nfunction try_fopen($filename, $mode)\n```\n\n----------------------------------------\n\nTITLE: Network Structure Definition - JavaScript\nDESCRIPTION: Defines the structure of a network object used in CCXT to handle different blockchain networks for currencies.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    'id':       'tron',         // string literal for referencing within an exchange\n    'network':  'TRC20'         // unified network\n    'name':     'Tron Network', // string, human-readable name, if specified\n    'active':    true,          // boolean, currency status (tradeable and withdrawable)\n    'fee':       0.123,         // withdrawal fee, flat\n    'precision': 8,             // number of decimal digits \"after the dot\" (depends on exchange.precisionMode)\n    'deposit':   true           // boolean, deposits are available\n    'withdraw':  true           // boolean, withdraws are available\n    'limits': {                 // value limits when placing orders on this market\n        'amount': {\n            'min': 0.01,        // order amount should be > min\n            'max': 1000,        // order amount should be < max\n        },\n        'withdraw': { ... },    // withdrawal limits\n        'deposit': {...},       // deposit limits\n    },\n    'info': { ... },            // the original unparsed currency info from the exchange\n}\n```\n\n----------------------------------------\n\nTITLE: Using watchTrades with Cache Limits (Python)\nDESCRIPTION: This snippet shows how to use the watchTrades method in conjunction with cache limits. It demonstrates how the `since` and `limit` parameters interact with the cached data.  The `since` parameter filters trades by timestamp, and the `limit` parameter restricts the number of trades returned. The cache size is set to 5 in this example, and `since` is used to filter trades starting from a specific timestamp.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nexchange.options['tradesLimit'] = 5  # set the size of the cache to 5\n\n# this call will return up to 5 cached trades\nawait exchange.watchTrades (symbol)\n\n# the following call will return the first 2 of up to 5 cached trades\nawait exchange.watchTrades (symbol, since=None, limit=2)\n\n# this call will first filter cached trades by trade['timestamp'] >= since\n# and will return the first 2 of up to 5 cached trades that pass the filter\nsince = exchange.iso8601('2020-01-01T00:00:00Z')\nlimit = 2\nawait exchange.watchTrades (symbol, since, limit)\n```\n\n----------------------------------------\n\nTITLE: Fetch Deposits Example (Python)\nDESCRIPTION: Demonstrates how to use the `fetch_deposits` method in Python, including a check for the method's availability on the exchange.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_230\n\nLANGUAGE: python\nCODE:\n```\n# fetch_deposits(code = None, since = None, limit = None, params = {})\n\nif exchange.has['fetchDeposits']:\n    deposits = exchange.fetch_deposits(code, since, limit, params)\nelse:\n    raise Exception (exchange.id + ' does not have the fetch_deposits method')\n\n```\n\n----------------------------------------\n\nTITLE: Defining BaseError Class in PHP for CCXT\nDESCRIPTION: PHP implementation of the BaseError class for CCXT, extending the built-in Exception class.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_177\n\nLANGUAGE: PHP\nCODE:\n```\nclass BaseError extends \\Exception {}\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT with git and pip\nDESCRIPTION: Commands to clone the CCXT repository from GitHub and install it locally using pip. This method is useful for developers who want to work with the latest code.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/go/tests/out.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/ccxt/ccxt.git\ncd ccxt\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: JavaScript CCXT Example with ES Modules\nDESCRIPTION: Example showing CCXT usage in JavaScript using ES module imports, fetching a ticker from Binance.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/README.md#2025-04-22_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\n//esm example\nimport {version, binance} from 'ccxt';\n\nconsole.log(version);\nconst exchange = new binance();\nconst ticker = await exchange.fetchTicker('BTC/USDT');\nconsole.log(ticker);\n```\n\n----------------------------------------\n\nTITLE: Defining BaseError Class in Python for CCXT\nDESCRIPTION: Simple implementation of the BaseError class in Python for CCXT, which extends the built-in Exception class.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_176\n\nLANGUAGE: Python\nCODE:\n```\nclass BaseError (Exception):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Common Currency Substitutions\nDESCRIPTION: This snippet illustrates the structure of the `commonCurrencies` property in CCXT. It shows how to define currency symbol substitutions where the key represents the exchange-specific symbol and the value represents the unified CCXT symbol.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_47\n\nLANGUAGE: JavaScript\nCODE:\n```\n'commonCurrencies' : {\n    'XBT': 'BTC',\n    'OPTIMISM': 'OP',\n    // ... etc\n}\n```\n\n----------------------------------------\n\nTITLE: Running Comprehensive Tests for CCXT\nDESCRIPTION: Command for testing all exchange implementations across all supported programming languages. This will verify that the built files work correctly for all exchanges, symbols, and supported languages.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CONTRIBUTING.md#2025-04-22_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\nnode run-tests\n```\n\n----------------------------------------\n\nTITLE: Correcting Ternary Conditional Usage with Brackets in JavaScript\nDESCRIPTION: Improved version of the previous code snippet, using brackets to clarify the ternary operator usage for the CCXT transpiler.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CONTRIBUTING.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = {\n   'bar': (qux === 'baz') ? this.a () : this.b (), // much better now\n};\n```\n\n----------------------------------------\n\nTITLE: Exchange Information Table in Markdown\nDESCRIPTION: A markdown table containing exchange information including logos, names, API versions, and badges for exchange type and CCXT Pro support.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Exchange-Markets.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| [![tokocrypto](https://user-images.githubusercontent.com/1294454/183870484-d3398d0c-f6a1-4cce-91b8-d58792308716.jpg)](https://tokocrypto.com) | tokocrypto | [Tokocrypto](https://tokocrypto.com) | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://www.tokocrypto.com/apidocs/) | ![CEX â Centralized EXchange](https://img.shields.io/badge/CEX-green.svg \"CEX â Centralized EXchange\") | | |\n```\n\n----------------------------------------\n\nTITLE: BaseError Class Definition (JavaScript)\nDESCRIPTION: Defines the BaseError class in JavaScript, which serves as the base class for all CCXT exceptions.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_306\n\nLANGUAGE: javascript\nCODE:\n```\nclass BaseError extends Error {\n    constructor () {\n        super ()\n        // a workaround to make `instanceof BaseError` work in ES5\n        this.constructor = BaseError\n        this.__proto__   = BaseError.prototype\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Proper Key Existence Checking - JavaScript\nDESCRIPTION: Examples showing how to properly check for key existence in objects using safe methods instead of direct undefined checks, making code compatible across JavaScript, Python, and PHP.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CONTRIBUTING.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = this.safeValue (params, 'foo');\nif (foo !== undefined) {\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nif ('foo' in params) {\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Symbol Parsing in JavaScript\nDESCRIPTION: Proper method for parsing exchange-specific market IDs into unified symbols. This example uses the safeSymbol method to convert market IDs to unified symbols.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nparseTrade (trade, market = undefined) {\n    const marketId = this.safeString (trade, 'pair');\n    // safeSymbol is used to parse the market id to a unified symbol\n    const symbol = this.safeSymbol (marketId, market);\n    return {\n       'info': trade,\n       'symbol': symbol, // very good, a unified symbol here now\n       // other fields...\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Relative URIs in PHP\nDESCRIPTION: This static method resolves a base URI with a relative URI and returns a new URI. It implements the algorithm described in RFC 3986 section 5 for resolving relative references.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/ringcentral-psr7/README.md#2025-04-22_snippet_28\n\nLANGUAGE: PHP\nCODE:\n```\npublic static function resolve(UriInterface $base, $rel) -> UriInterface\n```\n\n----------------------------------------\n\nTITLE: Fetching Convert Trade with fetchConvertTrade Function in JavaScript\nDESCRIPTION: Fetches a specific conversion trade using its ID. The function takes the 'id', optional 'code', and optional parameters. Returns a conversion structure.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_288\n\nLANGUAGE: javascript\nCODE:\n```\nfetchConvertTrade (id, code = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Importing @watchable/unpromise in JavaScript\nDESCRIPTION: Shows how to import the Unpromise library using both ESM and CommonJS patterns.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/ts/src/static_dependencies/watchable/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Unpromise } from \"@watchable/unpromise\"; // esm build\nconst { Unpromise } = require(\"@watchable/unpromise\"); // commonjs build\n```\n\n----------------------------------------\n\nTITLE: Withdraw with Network Parameters (Python)\nDESCRIPTION: Shows how to pass network parameters such as tag and network to the withdraw method in Python.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_226\n\nLANGUAGE: python\nCODE:\n```\nwithdraw(code, amount, address, { 'tag': tag, 'network': 'ETH' })\n```\n\n----------------------------------------\n\nTITLE: Displaying CCXT Repository Structure in Shell\nDESCRIPTION: A shell-like representation of the CCXT repository folder structure, showing key files and directories along with brief descriptions of their purposes.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n/                          # root directory aka npm module/package folder for Node.js\n/.babelrc                  # babel config used for making the ES5 version of the library\n/.eslintrc                 # linter\n/.gitattributes            # contains linguist settings for language detection in repo\n/.gitignore                # ignore it\n/.npmignore                # files to exclude from the NPM package\n/.travis.yml               # a YAML config for travis-ci (continuous integration)\n/CONTRIBUTING.md           # this file\n/LICENSE.txt               # MIT\n/README.md                 # master markdown for GitHub, npmjs.com, npms.io, yarn and others\n/build/                    # build scripts\n/build/export-exchanges.js # used to create tables of exchanges in the docs during the build\n/build/transpile.js        # the transpilation script\n/build/update-badges.js    # a JS script to update badges in the README and in docs\n/build/vss.js              # reads single-sourced version from package.json and writes it everywhere\n/dist/                     # a folder for the generated browser bundle of CCXT\n/ccxt.js                   # entry point for the master JS version of the ccxt library\n/ccxt.php                  # entry point for the PHP version of the ccxt library\n/js/                       # the JS version of the library\n/ts/                       # the TypeScript version of the library\n/php/                      # PHP ccxt module/package folder\n/cs/                       # C#/dotnet package folder\n/python/                   # Python ccxt module/package folder for PyPI\n/python/__init__.py        # entry point for the Python version of the ccxt.library\n/python/async_support/     # asynchronous version of the ccxt.library for Python 3.5.3+ asyncio\n/python/base/              # base code for the Python version of the ccxt library\n/python/MANIFEST.in        # a PyPI-package file listing extra package files (license, configs, etc...)\n/python/README.md          # a copy of README.md for PyPI\n/python/setup.cfg          # wheels config file for the Python package\n/python/setup.py           # pip/setuptools script (build/install) for ccxt in Python\n/python/tox.ini            # tox config for Python\n/examples/                 # self-explanatory\n/examples/js               # ...\n/examples/php              # ...\n/examples/py               # ...\n/exchanges.cfg             # custom bundle config for including only the exchanges you need\n/package.json              # npm package file, also used in setup.py for version single-sourcing\n/run-tests.js              # a front-end to run individual tests of all exchanges in all languages (JS/PHP/Python)\n/wiki/                     # the source of all docs (edits go here)\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Using a CCXT Pro Exchange (C#)\nDESCRIPTION: This snippet shows how to instantiate and use a CCXT Pro exchange (Binance) in C#. It retrieves and prints the trades for 'BTC/USDT' in an infinite loop using `WatchTrades`. This demonstrates how to integrate CCXT Pro with C# for real-time data processing using the async Task.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_11\n\nLANGUAGE: c#\nCODE:\n```\nusing ccxt.pro;\n\n    public async static Task Watch()\n    {\n        var exchange = new binance();\n        while (true)\n        {\n            var trades = await exchange.WatchTrades(\"BTC/USDT\");\n            Console.WriteLine(\"Trades: \" + JsonConvert.SerializeObject(trades, Formatting.Indented));\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT with PHP/Composer\nDESCRIPTION: Command to install CCXT library using PHP package manager Composer\nSOURCE: https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncomposer install ccxt\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT with yarn locally\nDESCRIPTION: Command to install CCXT locally in a Node.js project using Yarn package manager, as an alternative to npm.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/go/tests/out.txt#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn add ccxt\n```\n\n----------------------------------------\n\nTITLE: Specifying Noble Hashes Library Version and Source in YAML\nDESCRIPTION: This YAML configuration defines the version and source repository for the noble-hashes library. It specifies version 1.3.0 and links to the GitHub repository of the project.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/ts/src/static_dependencies/noble-hashes/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1.3.0\nsource: https://github.com/paulmillr/noble-hashes\n```\n\n----------------------------------------\n\nTITLE: Exchange API Documentation in RestructuredText\nDESCRIPTION: A structured table showing cryptocurrency exchange details including logos, names, API versions, and certification statuses. Uses RestructuredText format for documentation.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n* - .. image:: https://user-images.githubusercontent.com/51840849/87295558-132aaf80-c50e-11ea-9801-a2fb0c57c799.jpg\n     :target: https://www.kucoin.com/ucenter/signup?rcode=E5wkqe\n     :alt: kucoin\n\n - kucoin\n - `KuCoin <https://www.kucoin.com/ucenter/signup?rcode=E5wkqe>`__\n - .. image:: https://img.shields.io/badge/2-lightgray\n     :target: https://docs.kucoin.com\n     :alt: API Version 2\n```\n\n----------------------------------------\n\nTITLE: Watching Trades with WebSocket in JavaScript\nDESCRIPTION: Continuously watches for trade updates using the exchange's WebSocket API. Prints the received trades and handles exceptions.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-22_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (exchange.has['watchTrades']) {\n    while (true) {\n        try {\n            const trades = await exchange.watchTrades (symbol, since, limit, params)\n            console.log (new Date (), trades)\n        } catch (e) {\n            console.log (e)\n            // stop the loop on exception or leave it commented to retry\n            // throw e\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetch Withdrawal Method\nDESCRIPTION: Explains the usage of the `fetchWithdrawal` method to retrieve a single withdrawal by its ID. Requires a withdrawal ID and a currency code. It returns a transaction structure.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_223\n\nLANGUAGE: javascript\nCODE:\n```\nfetchWithdrawal (id, code = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Unsafe Dictionary Access - JavaScript\nDESCRIPTION: An example of code patterns to avoid in JavaScript that won't work when transpiled to Python or PHP. These unsafe access patterns don't check for key existence properly across all languages.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CONTRIBUTING.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\nconst value = object['key'] || other_value; // will not work in Python or PHP!\nif (object['key'] || other_value) { /* will not work in Python or PHP! */ }\n```\n\n----------------------------------------\n\nTITLE: Decoding MessagePack data in C#\nDESCRIPTION: Example demonstrating how to unpack MessagePack binary data into C# objects. This snippet shows decoding the MessagePack equivalent of the JSON {\"compact\":true,\"schema\":0}.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/cs/ccxt/static/MiniMessagePack/README.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing MiniMessagePack;\n\n// it means {\"compact\":true,\"schema\":0} in JSON\nvar msgpack = new byte[] {\n    0x82, 0xa7, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0xc3,\n    0xa6, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x00\n};\n\nvar packer = new MiniMessagePacker ();\nobject unpacked_data = packer.Unpack (msgpack);\n/*\nunpacked_data = new Dictionary<string, object> {\n    { \"compact\", true },\n\t{ \"schema\", 0},\n};\n*/\n```\n\n----------------------------------------\n\nTITLE: Creating Convert Trade with createConvertTrade Function in JavaScript\nDESCRIPTION: Creates a conversion trade order using an ID obtained from 'fetchConvertQuote'. The function takes an ID, 'fromCode', 'toCode', optional amount, and optional parameters. Returns a conversion structure.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_287\n\nLANGUAGE: javascript\nCODE:\n```\ncreateConvertTrade (id, fromCode, toCode, amount = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Using Unpromise.race and Unpromise.any in TypeScript\nDESCRIPTION: Example showing how to use Unpromise.race and Unpromise.any as drop-in replacements for Promise.race and Promise.any to prevent memory leaks.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/ts/src/static_dependencies/watchable/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Unpromise } from \"@watchable/unpromise\";\n\nconst raceResult = await Unpromise.race([taskPromise, interruptPromise]);\n\nconst anyResult = await Unpromise.any([taskPromise, interruptPromise]);\n```\n\n----------------------------------------\n\nTITLE: Running CCXT in Docker\nDESCRIPTION: Command for running CCXT inside a Docker container using docker-compose.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/README.md#2025-04-22_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\ndocker-compose run --rm ccxt\n```\n\n----------------------------------------\n\nTITLE: Running Exchange-Specific Tests with Language Options\nDESCRIPTION: Examples of running tests for a specific exchange with different language options. These commands allow testing specific implementations of an exchange across various programming languages.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CONTRIBUTING.md#2025-04-22_snippet_31\n\nLANGUAGE: shell\nCODE:\n```\nnode run-tests exchange --js\nnode run-tests exchange --js --python-async\nnode run-tests exchange --js --php\nnode run-tests exchange --python --python-async\n...\n```\n\n----------------------------------------\n\nTITLE: Removing Query String Value from URI in PHP\nDESCRIPTION: This static method creates a new URI with a specific query string value removed. It handles URL encoding of key-value pairs and removes all existing values for the given key from the query string.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/ringcentral-psr7/README.md#2025-04-22_snippet_30\n\nLANGUAGE: PHP\nCODE:\n```\npublic static function withoutQueryValue(UriInterface $uri, $key, $value) -> UriInterface\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Table for CCXT Exchange Integration\nDESCRIPTION: This markdown snippet creates a table listing two exchanges (WOO X and WOOFI PRO) with their details, including logos, API versions, exchange types, CCXT certification, and referral links. The table uses image shields to display various statuses and offers.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/python/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| [![woo](https://user-images.githubusercontent.com/1294454/150730761-1a00e5e0-d28c-480f-9e65-089ce3e6ef3b.jpg)](https://woox.io/register?ref=DIJT0CNL)                       | woo           | [WOO X](https://woox.io/register?ref=DIJT0CNL)                                          | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://docs.woox.io/)                                              | ![CEX â Centralized EXchange](https://img.shields.io/badge/CEX-green.svg \"CEX â Centralized EXchange\") | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) | [![Sign up with WOO X using CCXT's referral link for a 35% discount!](https://img.shields.io/static/v1?label=Fee&message=%2d35%25&color=orange)](https://woox.io/register?ref=DIJT0CNL)                          |\n| [![woofipro](https://github.com/user-attachments/assets/9ba21b8a-a9c7-4770-b7f1-ce3bcbde68c1)](https://dex.woo.org/en/trade?ref=CCXT)                                       | woofipro      | [WOOFI PRO](https://dex.woo.org/en/trade?ref=CCXT)                                      | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://orderly.network/docs/build-on-evm/building-on-evm)          | ![DEX - Distributed EXchange](https://img.shields.io/badge/DEX-blue.svg \"DEX - Distributed EXchange\")  | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) | [![Sign up with WOOFI PRO using CCXT's referral link for a 5% discount!](https://img.shields.io/static/v1?label=Fee&message=%2d5%25&color=orange)](https://dex.woo.org/en/trade?ref=CCXT)                        |\n```\n\n----------------------------------------\n\nTITLE: Deposit Method JavaScript\nDESCRIPTION: This snippet shows the function signature and parameters for depositing fiat currency using the `deposit` method. Requires an ID, a currency code, and optional params.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_214\n\nLANGUAGE: javascript\nCODE:\n```\ndeposit (id, code = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Modified Imports in body.js\nDESCRIPTION: Shows commented out imports in the customized version vs active imports in the original node-fetch body.js file. The FormData and Blob imports have been disabled in the custom implementation.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/ts/src/static_dependencies/node-fetch/diff.txt#2025-04-22_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n< // import Blob from 'fetch-blob';\n< // import {FormData, formDataToBlob} from 'formdata-polyfill/esm.min.js';\n---\n> import Blob from 'fetch-blob';\n> import {FormData, formDataToBlob} from 'formdata-polyfill/esm.min.js';\n```\n\n----------------------------------------\n\nTITLE: Watching Order Book for Symbols with CCXT Pro (Python)\nDESCRIPTION: This Python code snippet demonstrates how to subscribe to WebSocket streams of order book updates for multiple symbols using CCXT Pro. It verifies that the exchange supports the `watchOrderBookForSymbols` method before proceeding.  The snippet then enters an infinite loop, continuously fetching and printing the top ask and bid prices for the specified symbols ('BTC/USDT' and 'LTC/USDT'). Error handling is in place to catch and print any exceptions encountered.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nif exchange.has['watchOrderBookForSymbols']:\n    while True:\n        try:\n            orderbook = await exchange.watchOrderBookForSymbols(['BTC/USDT', 'LTC/USDT'], limit, params)\n            print(exchange.iso8601(exchange.milliseconds()), symbol, orderbook['asks'][0], orderbook['bids'][0])\n        except Exception as e:\n            print(e)\n            # stop the loop on exception or leave it commented to retry\n            # raise e\n```\n\n----------------------------------------\n\nTITLE: Encoding data to MessagePack in C#\nDESCRIPTION: Example showing how to convert C# objects into MessagePack binary format. This snippet demonstrates packing a Dictionary into MessagePack data.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/cs/ccxt/static/MiniMessagePack/README.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing MiniMessagePack;\n\nvar unpacked_data = new Dictionary<string, object> {\n    { \"compact\", true },\n\t{ \"schema\", 0},\n};\n\nvar packer = new MiniMessagePacker ();\nbyte[] msgpack = packer.Pack (unpacked_data);\n// msgpack = new byte[] { 0x82, 0xa7, ...};\n```\n\n----------------------------------------\n\nTITLE: Borrow Rate Structure in JavaScript\nDESCRIPTION: Structure of the borrow rate information returned by fetchBorrowRate methods. Shows the fields including currency code, interest rate, period, and timestamp information.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_86\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  currency: 'USDT',  // Unified currency code\n  rate: 0.0006,  // A ratio of the rate that interest is accrued at\n  period: 86400000,  // The amount of time in milliseconds that is required to accrue the interest amount specified by rate\n  timestamp: 1646956800000,  // Timestamp for when the currency had this rate\n  datetime: '2022-03-11T00:00:00.000Z',  // Datetime for when the currency had this rate\n  info: [ ... ]\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Deployment\nDESCRIPTION: Commands for running CCXT in a Docker container using docker-compose or direct Docker commands\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Install.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose run --rm ccxt\n```\n\nLANGUAGE: shell\nCODE:\n```\ndocker build . --tag ccxt\ndocker run -it ccxt\n```\n\n----------------------------------------\n\nTITLE: Setting Position Mode with set_position_mode Function in JavaScript\nDESCRIPTION: Sets the position mode for margin and contract trading. The function takes a boolean value indicating whether to set the mode to 'hedged' (true) or 'one-way' (false), an optional symbol, and optional parameters specific to the exchange API endpoint. It returns a response from the exchange.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_282\n\nLANGUAGE: javascript\nCODE:\n```\nset_position_mode (false, symbol = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Memory Leak Example with Native Promise.race\nDESCRIPTION: Demonstrates the typical memory leak scenario that occurs when using Promise.race with long-lived promises, which the Unpromise library aims to solve.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/ts/src/static_dependencies/watchable/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst interruptPromise = new Promise((resolve) => {\n  process.once(\"SIGINT\", () => resolve(\"interrupted\"));\n});\n\nasync function run() {\n  let count = 0;\n  for (; ; count++) {\n    const taskPromise = new Promise((resolve) => {\n      // an imaginary task\n      setImmediate(() => resolve(\"task_result\"));\n    });\n    const result = await Promise.race([taskPromise, interruptPromise]);\n    if (result === \"interrupted\") {\n      break;\n    }\n    console.log(`Completed ${count} tasks`);\n  }\n  console.log(`Interrupted by user`);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Market Buy Order without Price JavaScript\nDESCRIPTION: This snippet demonstrates how to create a market buy order without a price on an exchange where `createMarketBuyOrderRequiresPrice` is false. The total cost is calculated manually. The total cost is passed as amount.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_180\n\nLANGUAGE: javascript\nCODE:\n```\nconst exchange = new ccxt.cex ({\n    'apiKey': YOUR_API_KEY,\n    'secret': 'YOUR_SECRET',\n    'options': {\n        'createMarketBuyOrderRequiresPrice': false, // switch off\n    },\n})\n\n// or, to switch it off later, after the exchange instantiation, you can do\nexchange.options['createMarketBuyOrderRequiresPrice'] = false\n\n;(async () => {\n\n    // when `createMarketBuyOrderRequiresPrice` is true, we can pass the price\n    // so that the total cost of the order would be calculated inside the library\n    // by multiplying the amount over price (amount * price)\n\n    const symbol = 'BTC/USD'\n    const amount = 2 // BTC\n    const price = 9000 // USD\n    cost = amount * price // â instead of the amount cost goes â here\n    const order = await exchange.createMarketBuyOrder (symbol, cost)\n    console.log (order)\n}) ()\n```\n\n----------------------------------------\n\nTITLE: Basic PHP CCXT Usage\nDESCRIPTION: Example showing how to include and use CCXT in PHP, displaying available exchange classes.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/README.md#2025-04-22_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\ninclude \"ccxt.php\";\nvar_dump (\\ccxt\\Exchange::$exchanges); // print a list of all available exchange classes\n```\n\n----------------------------------------\n\nTITLE: Parsing HTTP Headers in PHP\nDESCRIPTION: This function parses an array of header values containing semicolon-separated data into an array of associative arrays representing the header key-value pair data. It handles cases where a parameter has no value, injecting an empty string as the value.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/ringcentral-psr7/README.md#2025-04-22_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nfunction parse_header($header)\n```\n\n----------------------------------------\n\nTITLE: Building Query Strings in PHP\nDESCRIPTION: This function builds a query string from an array of key-value pairs. It supports different encoding types and maintains the original key structure without modifying array keys like http_build_query would.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/ringcentral-psr7/README.md#2025-04-22_snippet_24\n\nLANGUAGE: PHP\nCODE:\n```\nfunction build_query(array $params, $encoding = PHP_QUERY_RFC3986)\n```\n\n----------------------------------------\n\nTITLE: Running Essential Asynchronous Tests\nDESCRIPTION: Optimized commands for running only necessary tests in each language. These commands focus on asynchronous tests which usually cover the same functionality as synchronous tests in Python and PHP.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CONTRIBUTING.md#2025-04-22_snippet_33\n\nLANGUAGE: shell\nCODE:\n```\nnode js/test/test exchange --verbose\npython3 python/ccxt/test/test_async.py exchange --verbose\nphp -f php/test/test_async.php exchange --verbose\n```\n\n----------------------------------------\n\nTITLE: Enabling Sandbox Mode in PHP\nDESCRIPTION: Demonstrates how to enable sandbox/testnet mode for an exchange in PHP. This must be called immediately after creating the exchange instance and before any other calls.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n// PHP\n$exchange = new \\ccxt\\binance($config);\n$exchange->set_sandbox_mode(true); // enable sandbox mode\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Structure in JavaScript\nDESCRIPTION: This snippet outlines the structure of a transaction object, including fields for transaction details, amounts, addresses, and status information.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_140\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    'info':      { ... },    // the JSON response from the exchange as is\n    'id':       '123456',    // exchange-specific transaction id, string\n    'txid':     '0x68bfb29821c50ca35ef3762f887fd3211e4405aba1a94e448a4f218b850358f0',\n    'timestamp': 1534081184515,             // timestamp in milliseconds\n    'datetime': '2018-08-12T13:39:44.515Z', // ISO8601 string of the timestamp\n    'addressFrom': '0x38b1F8644ED1Dbd5DcAedb3610301Bf5fa640D6f', // sender\n    'address':  '0x02b0a9b7b4cDe774af0f8e47cb4f1c2ccdEa0806', // \"from\" or \"to\"\n    'addressTo': '0x304C68D441EF7EB0E2c056E836E8293BD28F8129', // receiver\n    'tagFrom', '0xabcdef', // \"tag\" or \"memo\" or \"payment_id\" associated with the sender\n    'tag':      '0xabcdef' // \"tag\" or \"memo\" or \"payment_id\" associated with the address\n    'tagTo': '0xhijgklmn', // \"tag\" or \"memo\" or \"payment_id\" associated with the receiver\n    'type':     'deposit',   // or 'withdrawal', string\n    'amount':    1.2345,     // float (does not include the fee)\n    'currency': 'ETH',       // a common unified currency code, string\n    'status':   'pending',   // 'ok', 'failed', 'canceled', string\n}\n```\n\n----------------------------------------\n\nTITLE: Modified Exports in index.js\nDESCRIPTION: Shows how the exports have been modified in the customized version to remove FormData, Blob, File and related exports, keeping only the core fetch-related components.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/ts/src/static_dependencies/node-fetch/diff.txt#2025-04-22_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n< // export {FormData, Headers, Request, Response, FetchError, AbortError, isRedirect};\n< // export {Blob, File, fileFromSync, fileFrom, blobFromSync, blobFrom};\n< \n< export {Headers, Request, Response, FetchError, AbortError, isRedirect};\n---\n> export {FormData, Headers, Request, Response, FetchError, AbortError, isRedirect};\n> export {Blob, File, fileFromSync, fileFrom, blobFromSync, blobFrom};\n```\n\n----------------------------------------\n\nTITLE: Calculating Stream Hash in PHP\nDESCRIPTION: This function calculates a hash of a PSR-7 StreamInterface using a specified algorithm. It reads the entire stream to calculate a rolling hash based on PHP's hash_init functions, supporting various hashing algorithms.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/ringcentral-psr7/README.md#2025-04-22_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\nfunction hash(StreamInterface $stream, $algo, $rawOutput = false)\n```\n\n----------------------------------------\n\nTITLE: Setting Number Type to String in CCXT (C#)\nDESCRIPTION: Demonstrates how to configure CCXT to use string-based math instead of native numbers in C#. This is useful for situations requiring fixed-point arithmetic or high precision.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_301\n\nLANGUAGE: csharp\nCODE:\n```\nvar ex = new ccxt.coinbase();\nex.number = typeof(String); // typeof(String) | typeof(float)\n```\n\n----------------------------------------\n\nTITLE: Creating URI from Parts in PHP\nDESCRIPTION: This static method creates a RingCentral\\Psr7\\Uri object from an array of parse_url parts. It provides a convenient way to construct URI objects from individual components.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/ringcentral-psr7/README.md#2025-04-22_snippet_31\n\nLANGUAGE: PHP\nCODE:\n```\npublic static function fromParts(array $parts) -> UriInterface\n```\n\n----------------------------------------\n\nTITLE: Creating a ProxyPromise with Constructor\nDESCRIPTION: Example showing how to create a ProxyPromise directly using the Unpromise constructor.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/ts/src/static_dependencies/watchable/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst proxyPromise = new Unpromise((resolve) => setTimeout(resolve, 1000));\n```\n\n----------------------------------------\n\nTITLE: Incorrect Symbol Parsing in Response - JavaScript\nDESCRIPTION: An example of incorrect symbol parsing when handling exchange responses. Never return exchange-specific market IDs directly as unified symbols in parsed structures.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CONTRIBUTING.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nparseTrade (trade, market = undefined) {\n   // parsing code...\n   return {\n      'info': trade,\n      'symbol': trade['pair'], // very bad, returning exchange-specific market-ids in a unified structure!\n      // other fields...\n   };\n}\n```\n\n----------------------------------------\n\nTITLE: Determining MIME Type from Filename in PHP\nDESCRIPTION: This function determines the MIME type of a file by looking at its extension. It provides a simple way to infer content types based on file names.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/ringcentral-psr7/README.md#2025-04-22_snippet_25\n\nLANGUAGE: PHP\nCODE:\n```\nfunction mimetype_from_filename($filename)\n```\n\n----------------------------------------\n\nTITLE: Adding Web3 and CryptoJS Dependencies Comment in JavaScript\nDESCRIPTION: A TODO comment indicating the need to add web3 (Ethereum JavaScript API) and cryptoJS (cryptographic functions library) as dependencies to the CCXT library.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/ts/src/static_dependencies/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// TODO: add web3 and cryptoJS here\n```\n\n----------------------------------------\n\nTITLE: Incorrect Ternary Operator Usage in JavaScript\nDESCRIPTION: Examples of poorly formatted ternary conditionals that will cause issues with the transpiler due to ambiguous operator precedence and lack of brackets.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = {\n   'bar': 'a' + qux === 'baz' ? this.a () : this.b () + 'b',\n};\n```\n\n----------------------------------------\n\nTITLE: Parsing Server-Side HTTP Requests in PHP\nDESCRIPTION: This function parses a request message string into a server-side PSR-7 request object. It includes support for additional server parameters, allowing for comprehensive server request handling.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/ringcentral-psr7/README.md#2025-04-22_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\nfunction parse_server_request($message, array $serverParams = array())\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT via Composer for PHP\nDESCRIPTION: This code shows how to install the CCXT library using Composer for PHP projects.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require ccxt/ccxt\n```\n\n----------------------------------------\n\nTITLE: Implementing parseTicker Method in JavaScript for CCXT\nDESCRIPTION: Implementation of the parseTicker method that transforms exchange-specific ticker data into a standardized format. It handles timestamp conversion and maps exchange-specific fields to the CCXT unified structure.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/ts/src/static_dependencies/ethers/utils/test.txt#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nparseTicker (ticker, market = undefined) {\n    // parse the ticker received from the exchange\n    const timestamp = this.safeInteger (ticker, 'timestamp');\n    // or\n    const timestamp = this.safeTimestamp (ticker, 'timestamp');\n    // or\n    const timestamp = this.parse8601 (ticker['iso8601']);\n    //\n    let symbol = undefined;\n    if (market !== undefined) {\n        symbol = market['symbol'];\n    }\n    // return a unified ticker structure\n    return {\n        'symbol': symbol,\n        'timestamp': timestamp,\n        'datetime': this.iso8601 (timestamp),\n        'high': this.safeFloat (ticker, 'high'),\n        'low': this.safeFloat (ticker, 'low'),\n        'bid': this.safeFloat (ticker, 'bid'),\n        'bidVolume': this.safeFloat (ticker, 'bidVolume'),\n        'ask': this.safeFloat (ticker, 'ask'),\n        'askVolume': this.safeFloat (ticker, 'askVolume'),\n        'vwap': this.safeFloat (ticker, 'vwap'),\n        'open': this.safeFloat (ticker, 'open'),\n        'close': this.safeFloat (ticker, 'close'),\n        'last': this.safeFloat (ticker, 'last'),\n        'previousClose': this.safeFloat (ticker, 'previousClose'),\n        'change': this.safeFloat (ticker, 'change'),\n        'percentage': this.safeFloat (ticker, 'percentage'),\n        'average': this.safeFloat (ticker, 'average'),\n        'baseVolume': this.safeFloat (ticker, 'baseVolume'),\n        'quoteVolume': this.safeFloat (ticker, 'quoteVolume'),\n        'info': ticker,\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Python CCXT Usage\nDESCRIPTION: Simple example showing how to import and use CCXT in Python, printing a list of available exchanges.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/README.md#2025-04-22_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nimport ccxt\nprint(ccxt.exchanges) # print a list of all available exchange classes\n```\n\n----------------------------------------\n\nTITLE: Modifying PSR-7 Requests in PHP\nDESCRIPTION: This function clones and modifies a PSR-7 RequestInterface object with the given changes. It allows for efficient mutation of request properties such as method, headers, body, and URI without creating multiple clones.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/ringcentral-psr7/README.md#2025-04-22_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\nfunction modify_request(RequestInterface $request, array $changes)\n```\n\n----------------------------------------\n\nTITLE: Withdraw Method (Python)\nDESCRIPTION: Demonstrates the usage of the `withdraw` method in Python to withdraw funds from an account. Requires currency code, amount, and recipient address.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_221\n\nLANGUAGE: python\nCODE:\n```\nwithdraw(code, amount, address, tag=None, params={})\n```\n\n----------------------------------------\n\nTITLE: Watch Orders Method Signature in Python\nDESCRIPTION: Defines the method signature for watching orders using CCXT Pro in Python. It takes symbol, since, limit and params as arguments, with default values assigned to symbol, since and limit.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nwatch_orders(symbol=None, since=None, limit=None, params={})\n```\n\n----------------------------------------\n\nTITLE: Async Python CCXT Usage\nDESCRIPTION: Example showing how to import CCXT in Python for asynchronous operations using async/await.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/README.md#2025-04-22_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nimport ccxt.async_support as ccxt # link against the asynchronous version of ccxt\n```\n\n----------------------------------------\n\nTITLE: Running PHP Examples in CCXT\nDESCRIPTION: Command to execute PHP examples from the CCXT library. Replace the path with actual example filename.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/examples/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp -f path/to/example.php # substitute for actual filename here\n```\n\n----------------------------------------\n\nTITLE: Noble Curves MIT License Header\nDESCRIPTION: MIT license declaration for noble-curves library by Paul Miller\nSOURCE: https://github.com/ccxt/ccxt/blob/master/dist/ccxt.browser.min.js.LICENSE.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT via pip for Python\nDESCRIPTION: This snippet demonstrates the installation of CCXT library using pip for Python projects.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install ccxt\n```\n\n----------------------------------------\n\nTITLE: Refactored Complex Ternary into Simple Lines\nDESCRIPTION: Complex ternary operation broken down into multiple simpler lines for better readability and maintainability.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst bar = (qux === 'baz') ? this.a () : this.b ();\nconst foo = {\n   'bar': 'a' + bar + 'b',\n};\n```\n\n----------------------------------------\n\nTITLE: Date-based Pagination Implementation\nDESCRIPTION: Implementation of date-based pagination for fetching historical trade data using since parameter in milliseconds with a specified limit.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_51\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (exchange.has['fetchTrades']) {\n    let since = exchange.milliseconds () - 86400000 // -1 day from now\n    // alternatively, fetch from a certain starting datetime\n    // let since = exchange.parse8601 ('2018-01-01T00:00:00Z')\n    let allTrades = []\n    while (since < exchange.milliseconds ()) {\n        const symbol = undefined // change for your symbol\n        const limit = 20 // change for your limit\n        const trades = await exchange.fetchTrades (symbol, since, limit)\n        if (trades.length) {\n            since = trades[trades.length - 1]['timestamp'] + 1\n            allTrades = allTrades.concat (trades)\n        } else {\n            break\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Closed Orders in JavaScript\nDESCRIPTION: Shows how to fetch closed (filled or canceled) orders using the fetchClosedOrders method with optional filtering parameters. Some exchanges may not directly support this and CCXT will emulate it when possible.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_110\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (exchange.has['fetchClosedOrders'])\n    exchange.fetchClosedOrders (symbol = undefined, since = undefined, limit = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Implementing Exchange Constructor in JavaScript for CCXT\nDESCRIPTION: Basic implementation of the constructor method for a new exchange class. It sets up the exchange ID, name, and default values for countries and URLs.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/ts/src/static_dependencies/ethers/utils/test.txt#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconstructor () {\n    super ({\n        'id': 'exchange',\n        'name': 'Exchange',\n        'countries': [ 'US', 'JP', 'EU' ], // array of ISO country codes\n        'urls': {\n            'api': {\n                'public': 'https://api.example.com/public',  // base endpoint for public API\n                'private': 'https://api.example.com/private', // base endpoint for private API\n            },\n            'www': 'https://www.example.com',              // official website\n            'doc': [\n                'https://docs.example.com/api',            // official documentation\n                'https://github.com/example/example-api',  // API documentation on GitHub, etc...\n            ],\n            'fees': 'https://www.example.com/fees',        // fees documentation\n        },\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT with yarn globally\nDESCRIPTION: Command to install CCXT globally using Yarn package manager, as an alternative to npm for Node.js applications.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/go/tests/out.txt#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn global add ccxt\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT with pip for Python\nDESCRIPTION: Command for installing CCXT using pip and a basic usage example in Python.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/README.md#2025-04-22_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\npip install ccxt\n```\n\n----------------------------------------\n\nTITLE: Option Contract Symbol\nDESCRIPTION: This snippet describes the structure of an option contract symbol within CCXT. It outlines the inclusion of base currency, quote currency, settlement currency, settlement date, strike price, and option type (put or call) in the symbol.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_50\n\nLANGUAGE: JavaScript\nCODE:\n```\n//\n// base asset or currency\n// â\n// â  quote asset or currency\n// â  â\n// â  â    settlement asset or currency\n// â  â    â\n// â  â    â       identifier (settlement date)\n// â  â    â       â\n// â  â    â       â   strike price\n// â  â    â       â   â\n// â  â    â       â   â   type, put (P) or call (C)\n// â  â    â       â   â   â\n'BTC/USDT:BTC-211225-60000-P'  // BTC/USDT put option contract strike price 60000 USDT settled in BTC (inverse) on 2021-12-25\n'ETH/USDT:USDT-211225-40000-C' // BTC/USDT call option contract strike price 40000 USDT settled in USDT (linear, vanilla) on 2021-12-25\n'ETH/USDT:ETH-210625-5000-P'   // ETH/USDT put option contract strike price 5000 USDT settled in ETH (inverse) on 2021-06-25\n'ETH/USDT:USDT-210625-5000-C'  // ETH/USDT call option contract strike price 5000 USDT settled in USDT (linear, vanilla) on 2021-06-25\n```\n\n----------------------------------------\n\nTITLE: Create Order WS Method Signature in C#\nDESCRIPTION: Defines the signature for the CreateOrderWs method in C#. It creates an order using WebSocket. Parameters include symbol, type, side, amount, price2 (optional), and additional parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_56\n\nLANGUAGE: c#\nCODE:\n```\npublic async Task<Order> CreateOrderWs(string symbol, string type, string side, float amount, float? price2 = 0, Dictionary<string, object> parameters = null)\n```\n\n----------------------------------------\n\nTITLE: Defining Version and Source for scure-base Library in YAML\nDESCRIPTION: This YAML snippet specifies the version number and GitHub repository URL for the scure-base library. It's likely used for dependency management or documentation purposes within the ccxt project.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/ts/src/static_dependencies/scure-base/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1.1.1\nsource: https://github.com/paulmillr/scure-base\n```\n\n----------------------------------------\n\nTITLE: Running Python Examples in CCXT\nDESCRIPTION: Shell command to execute Python examples from the CCXT library. Replace example.py with the actual filename you want to run.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Examples.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython path/to/example.py # substitute for actual filename here\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for CCXT Next.js Project\nDESCRIPTION: Command for installing the required dependencies for the CCXT Next.js integration project. This step must be completed before running the application.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/examples/ts/nextjs-page-router/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run install\n```\n\n----------------------------------------\n\nTITLE: Fetching Multiple Deposit Addresses with CCXT in Javascript\nDESCRIPTION: This snippet shows how to fetch multiple deposit addresses using CCXT in Javascript. The `fetchDepositAddresses` method takes an array of currency codes as input, and optionally exchange-specific parameters in the `params` argument.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_239\n\nLANGUAGE: javascript\nCODE:\n```\nfetchDepositAddresses (codes = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: PHP Integration\nDESCRIPTION: PHP example showing basic usage of CCXT library\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Install.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ninclude \"ccxt.php\";\nvar_dump (\\ccxt\\Exchange::$exchanges); // print a list of all available exchange classes\n```\n\n----------------------------------------\n\nTITLE: Creating a Take Profit Order with CCXT (JS, Python, PHP)\nDESCRIPTION: This snippet shows how to create a take profit order using CCXT. The 'takeProfitPrice' parameter in the 'params' object specifies the price at which the take profit order will be triggered. The symbol, type, side, amount and price variables needs to be defined beforehand.  When the takeProfitPrice is reached, the position will be closed at market price or the limit price higher than your takeProfitPrice for closing a long position, or lower than your takeProfitPrice for closing a short position.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_191\n\nLANGUAGE: php\nCODE:\n```\n// for a take profit order\n$params = {\n    'takeProfitPrice': 120.45, // your take profit price\n}\n\n$order = $exchange->create_order ($symbol, $type, $side, $amount, $price, $params);\n```\n\n----------------------------------------\n\nTITLE: Reloading Market Data with Force Reload (Python)\nDESCRIPTION: This Python code snippet demonstrates how to load market data from the Poloniex exchange using the CCXT library. It initializes the exchange, loads markets, displays market information, and then forces a reload of the market data using the `load_markets(True)` method.  This method bypasses the cache and fetches fresh data from the exchange's API. The verbose mode is enabled to log HTTP requests.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_52\n\nLANGUAGE: python\nCODE:\n```\npoloniex = ccxt.poloniex({'verbose': True}) # log HTTP requests\npoloniex.load_markets() # request markets\nprint(poloniex.id, poloniex.markets)   # output a full list of all loaded markets\nprint(list(poloniex.markets.keys())) # output a short list of market symbols\nprint(poloniex.markets['BTC/ETH'])     # output single market details\npoloniex.load_markets() # return a locally cached version, no reload\nreloadedMarkets = poloniex.load_markets(True) # force HTTP reload = True\nprint(reloadedMarkets['ETH/ZEC'])\n```\n\n----------------------------------------\n\nTITLE: C# Installation and Usage\nDESCRIPTION: Basic C# example showing usage of CCXT library with Nugget package\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Install.md#2025-04-22_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing ccxt;\nConsole.WriteLine(ccxt.Exchanges) // check this later\n```\n\n----------------------------------------\n\nTITLE: Copying Stream Contents Between Streams in PHP\nDESCRIPTION: This function copies the contents of one PSR-7 StreamInterface into another StreamInterface until the given number of bytes have been read. It enables efficient stream-to-stream content transfer with optional length limitation.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/ringcentral-psr7/README.md#2025-04-22_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\nfunction copy_to_stream(StreamInterface $source, StreamInterface $dest, $maxLen = -1)\n```\n\n----------------------------------------\n\nTITLE: Fetching Transactions with CCXT in Javascript\nDESCRIPTION: This snippet demonstrates how to fetch transaction history using the `fetchTransactions` method in CCXT with Javascript. It checks if the exchange supports the method and then calls it with optional parameters for currency code, start time, and limit. It throws an error if the method is not supported by the exchange.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_235\n\nLANGUAGE: javascript\nCODE:\n```\n// fetchTransactions (code = undefined, since = undefined, limit = undefined, params = {})\n\nif (exchange.has['fetchTransactions']) {\n    const transactions = await exchange.fetchTransactions (code, since, limit, params)\n} else {\n    throw new Error (exchange.id + ' does not have the fetchTransactions method')\n}\n```\n\n----------------------------------------\n\nTITLE: Watching Balance with CCXT Pro in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the `watchBalance` method in the CCXT Pro library to watch for balance updates. It sets up a loop to continuously receive balance information and logs it with a timestamp.  It includes error handling with a retry loop.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\nif (exchange.has['watchBalance']) {\n    while (true) {\n        try {\n            const balance = await exchange.watchBalance (params)\n            console.log (new Date (), balance)\n        } catch (e) {\n            console.log (e)\n            // stop the loop on exception or leave it commented to retry\n            // throw e\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Keccak Hash Function in PHP\nDESCRIPTION: Demonstrates how to use the Keccak hash function for various output sizes (224, 256, 384, 512 bits) and the SHAKE function with different parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/kornrunner/keccak/README.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse kornrunner\\Keccak;\n\nKeccak::hash('', 224);\n// f71837502ba8e10837bdd8d365adb85591895602fc552b48b7390abd\n\nKeccak::hash('', 256);\n// c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\n\nKeccak::hash('', 384);\n// 2c23146a63a29acf99e73b88f8c24eaa7dc60aa771780ccc006afbfa8fe2479b2dd2b21362337441ac12b515911957ff\n\nKeccak::hash('', 512);\n// 0eab42de4c3ceb9235fc91acffe746b29c29a8c366b7c60e4e67c466f36a4304c00fa9caf9d87976ba469bcbe06713b435f091ef2769fb160cdab33d3670680e\n\nKeccak::shake('', 128, 256);\n// 7f9c2ba4e88f827d616045507605853ed73b8093f6efbc88eb1a6eacfa66ef26\n\nKeccak::shake('', 256, 512);\n// 46b9dd2b0ba88d13233b3feb743eeb243fcd52ea62b81b82b50c27646ed5762fd75dc4ddd8c0f200cb05019d67b592f6fc821c49479ab48640292eacb3b7c4be\n```\n\n----------------------------------------\n\nTITLE: Normalizing HTTP Headers in PHP\nDESCRIPTION: This function converts an array of header values that may contain comma-separated headers into an array of headers with no comma-separated values, ensuring a consistent format for header handling.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/ringcentral-psr7/README.md#2025-04-22_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nfunction normalize_header($header)\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT for Go\nDESCRIPTION: Command for installing CCXT using Go and a basic usage example.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/README.md#2025-04-22_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\ngo install github.com/ccxt/ccxt/go/v4@latest\n```\n\n----------------------------------------\n\nTITLE: Watching Trades for Symbols with CCXT Pro in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the `watchTradesForSymbols` method in the CCXT Pro library to watch trades for multiple symbols. It sets up a loop to continuously receive trade updates for LTC/USDT and BTC/USDT. It includes error handling with a retry loop.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nif (exchange.has['watchTradesForSymbols']) {\n    while (true) {\n        try {\n            const trades = await exchange.watchTradesForSymbols (['LTC/USDT', 'BTC/USDT'], since, limit, params)\n            console.log (new Date (), trades)\n        } catch (e) {\n            console.log (e)\n            // stop the loop on exception or leave it commented to retry\n            // throw e\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Trades by Order ID in JavaScript with CCXT\nDESCRIPTION: Method for retrieving trades associated with a specific order ID in JavaScript using CCXT. Takes required order ID parameter and optional symbol, since timestamp, limit, and additional parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_130\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\n// fetchOrderTrades (id, symbol = undefined, since = undefined, limit = undefined, params = {})\n\nif (exchange.has['fetchOrderTrades']) {\n    const trades = await exchange.fetchOrderTrades (orderId, symbol, since, limit, params)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT in C# Projects\nDESCRIPTION: Command to install the CCXT library in a C# project using Nugget package manager.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# C# / Nugget\ndotnet add ccxt\n```\n\n----------------------------------------\n\nTITLE: Specifying CCXT Package Version in YAML\nDESCRIPTION: This YAML snippet defines the version number for the CCXT project. It sets the version to 6.9.0.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/ts/src/static_dependencies/starknet/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 6.9.0\n```\n\n----------------------------------------\n\nTITLE: BaseError Class Definition (Python)\nDESCRIPTION: Defines the BaseError class in Python, which serves as the base class for all CCXT exceptions.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_307\n\nLANGUAGE: python\nCODE:\n```\nclass BaseError (Exception):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Creating a LimitStream for Partial File Reading in PHP\nDESCRIPTION: Demonstrates how to use LimitStream to read a subset of an existing stream, useful for handling large files in chunks.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/ringcentral-psr7/README.md#2025-04-22_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse RingCentral\\Psr7;\n\n$original = Psr7\\stream_for(fopen('/tmp/test.txt', 'r+'));\necho $original->getSize();\n// >>> 1048576\n\n// Limit the size of the body to 1024 bytes and start reading from byte 2048\n$stream = new Psr7\\LimitStream($original, 1024, 2048);\necho $stream->getSize();\n// >>> 1024\necho $stream->tell();\n// >>> 0\n```\n\n----------------------------------------\n\nTITLE: Reading Line from Stream in PHP\nDESCRIPTION: This function reads a line from a PSR-7 StreamInterface up to the maximum allowed buffer length. It provides a convenient way to process streams line by line with optional length limitation.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/ringcentral-psr7/README.md#2025-04-22_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\nfunction readline(StreamInterface $stream, $maxLength = null)\n```\n\n----------------------------------------\n\nTITLE: Settlement History Structure (JavaScript)\nDESCRIPTION: This data structure represents a settlement history entry, including information such as symbol, price, timestamp, and datetime.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_130\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    info: { ... },\n    symbol: 'BTC/USDT:USDT-230728-25500-P',\n    price: 25761.35807869,\n    timestamp: 1694073600000,\n    datetime: '2023-09-07T08:00:00.000Z',\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Documentation Build\nDESCRIPTION: This requirements file lists the specific Python packages needed to build documentation. It includes m2r2 for Markdown to reStructuredText conversion, mistune with a specific version constraint due to compatibility issues, sphinx-rtd-theme for styling, and readthedocs-sphinx-search for search functionality.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nm2r2==0.2.7\n# mistune should remain on 0.8.4 for now\n# https://github.com/CrossNox/m2r2/issues/47\nmistune==0.8.4\nsphinx-rtd-theme==0.5.2\nreadthedocs-sphinx-search==0.3.2\n```\n\n----------------------------------------\n\nTITLE: Validating Required Credentials in PHP with CCXT\nDESCRIPTION: Example of checking required credentials for Bittrex exchange in PHP. This code illustrates how to view the required credentials and validate if all necessary authentication details are provided.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_94\n\nLANGUAGE: PHP\nCODE:\n```\n// PHP\ninclude 'ccxt.php';\n$exchange = new \\ccxt\\bittrex ();\nvar_dump($exchange->requiredCredentials); // prints required credentials\n$exchange->check_required_credentials(); // throws AuthenticationError\n```\n\n----------------------------------------\n\nTITLE: Yahoo BSD License Header\nDESCRIPTION: Copyright notice and BSD license declaration for Yahoo code version 2.9.0\nSOURCE: https://github.com/ccxt/ccxt/blob/master/dist/ccxt.browser.min.js.LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/*!\nCopyright (c) 2011, Yahoo! Inc. All rights reserved.\nCode licensed under the BSD License:\nhttp://developer.yahoo.com/yui/license.html\nversion: 2.9.0\n*/\n```\n\n----------------------------------------\n\nTITLE: Cache Window Visualization\nDESCRIPTION: ASCII diagram showing how the sliding cache window works for recent trades.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n     past > ------------------ > time > - - - - - - - - > future\n\n\n                          sliding frame\n                          of 1000 most\n                          recent trades\n                       +-----------------+\n                       |                 |\n                       |===========+=====|\n+----------------+------|           |     | - - - - - + - - - - - - - - + - - -\n|                |      |           |     |           |                 |\n0              1000     |         2000    |         3000              4000  ...\n|                |      |           |     |           |                 |\n+----------------+------|           |     | - - - - - + - - - - - - - - + - - -\n                       |===========+=====|\n                       |                 |\n                       +---+---------+---+\n                           |         |\n                     since ^         ^ limit\n```\n\n----------------------------------------\n\nTITLE: Fetch Deposits Method\nDESCRIPTION: Explains the usage of the `fetchDeposits` method to retrieve multiple deposits. Supports filtering by currency code, since timestamp, and limit. It returns an array of transaction structures.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_219\n\nLANGUAGE: javascript\nCODE:\n```\nfetchDeposits (code = undefined, since = undefined, limit = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Getting Market Price from Order Book in PHP\nDESCRIPTION: Example of how to extract the current market price from an order book in PHP. This code fetches the first bid and ask prices and calculates the spread between them.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_64\n\nLANGUAGE: PHP\nCODE:\n```\n$orderbook = $exchange->fetch_order_book ($exchange->symbols[0]);\n$bid = count ($orderbook['bids']) ? $orderbook['bids'][0][0] : null;\n$ask = count ($orderbook['asks']) ? $orderbook['asks'][0][0] : null;\n$spread = ($bid && $ask) ? $ask - $bid : null;\n$result = array ('bid' => $bid, 'ask' => $ask, 'spread' => $spread);\nvar_dump ($exchange->id, 'market price', $result);\n```\n\n----------------------------------------\n\nTITLE: Setting User Agent in CCXT (JavaScript)\nDESCRIPTION: Shows how to override the default user agent string in CCXT using JavaScript. This can be useful for specific cases where a custom user agent is required by an exchange.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_297\n\nLANGUAGE: javascript\nCODE:\n```\nexchange.userAgent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)...'\n```\n\n----------------------------------------\n\nTITLE: Commented Blob Import Block in index.js\nDESCRIPTION: Shows how multiple imports from fetch-blob have been commented out in the customized version compared to the active imports in the original library.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/ts/src/static_dependencies/node-fetch/diff.txt#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n< /* import {\n---\n> import {\n```\n\n----------------------------------------\n\nTITLE: Dictionary Key Access in Multi-language Context - Python\nDESCRIPTION: Example showing how dictionary key access differs between JavaScript and Python. Python requires explicit key existence checking or proper dictionary methods to avoid KeyError exceptions.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CONTRIBUTING.md#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# Python\nsome_dictionary = {}\n\n# breaks\nif some_dictionary['nonExistentKey']:\n    # in Python the attempt to dereference the nonExistentKey value\n    # will throw a standard built-in KeyError exception\n\n# works\nif 'nonExistentKey' in some_dictionary and some_dictionary['nonExistentKey']:\n    # this is a way to check if the key exists before accessing the value\n\n# also works\nif some_dictionary.get('nonExistentKey'):\n    # another a way to check if the key exists before accessing the value...\n```\n\n----------------------------------------\n\nTITLE: Fetching All Tickers Python\nDESCRIPTION: Fetches all tickers from an exchange using the `fetch_tickers` method. It first checks if the exchange supports the `fetch_tickers` method. It then fetches all tickers indexed by their symbols. Requires the CCXT library and a configured exchange instance.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_88\n\nLANGUAGE: python\nCODE:\n```\nif (exchange.has['fetchTickers']):\n    print(exchange.fetch_tickers()) # all tickers indexed by their symbols\n```\n\n----------------------------------------\n\nTITLE: Fee Structure Example\nDESCRIPTION: Illustrates the common fee structure format used throughout the CCXT library for representing fee information. This structure is often found in orders, trades, transactions, and ledger entries.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_247\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    'currency': 'BTC', // the unified fee currency code\n    'rate': percentage, // the fee rate, 0.05% = 0.0005, 1% = 0.01, ...\n    'cost': feePaid, // the fee cost (amount * fee rate)\n}\n```\n\n----------------------------------------\n\nTITLE: Building CCXT from Source\nDESCRIPTION: Commands to clone and build CCXT from source code\nSOURCE: https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/ccxt/ccxt.git\ncd ccxt\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Creating a Function-Based Stream with FnStream in PHP\nDESCRIPTION: Demonstrates how to use FnStream to create a custom stream implementation using a hash of functions.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/ringcentral-psr7/README.md#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse RingCentral\\Psr7;\n\n$stream = Psr7\\stream_for('hi');\n$fnStream = Psr7\\FnStream::decorate($stream, [\n    'rewind' => function () use ($stream) {\n        echo 'About to rewind - ';\n        $stream->rewind();\n        echo 'rewound!';\n    }\n]);\n\n$fnStream->rewind();\n// Outputs: About to rewind - rewound!\n```\n\n----------------------------------------\n\nTITLE: Removing Dot Segments from URI Path in PHP\nDESCRIPTION: This static method removes dot segments from a URI path and returns the new path. It implements the algorithm described in RFC 3986 section 5.2.4 for normalizing URI paths.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/ringcentral-psr7/README.md#2025-04-22_snippet_27\n\nLANGUAGE: PHP\nCODE:\n```\npublic static function removeDotSegments($path) -> UriInterface\n```\n\n----------------------------------------\n\nTITLE: C# CCXT Implementation\nDESCRIPTION: Example of using CCXT in C# environment with Nuget package.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/python/README.md#2025-04-22_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nusing ccxt;\nConsole.WriteLine(ccxt.Exchanges) // check this later\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies Command\nDESCRIPTION: Command to install Node.js dependencies before first build.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#2025-04-22_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Initializing a BufferStream in PHP\nDESCRIPTION: Shows how to create a BufferStream with a specified high water mark for buffer size control.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/ringcentral-psr7/README.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse RingCentral\\Psr7;\n\n// When more than 1024 bytes are in the buffer, it will begin returning\n// false to writes. This is an indication that writers should slow down.\n$buffer = new Psr7\\BufferStream(1024);\n```\n\n----------------------------------------\n\nTITLE: Fetching a Trading Pair Isolated Borrow Rate in JavaScript\nDESCRIPTION: Fetches the borrow rate for a single trading pair. The `symbol` parameter specifies the unified CCXT market symbol, and the `params` parameter allows for exchange-specific API parameters. Returns an isolated borrow rate structure.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_111\n\nLANGUAGE: javascript\nCODE:\n```\nfetchIsolatedBorrowRate (symbol, params = {})\n```\n\n----------------------------------------\n\nTITLE: Importing and Using CCXT in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the CCXT library and create an instance of an exchange in JavaScript.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport ccxt from 'ccxt'\n\nconst exchange = new ccxt.binance()\nconsole.log(exchange.id, await exchange.loadMarkets())\n\nexchange.fetchTicker('BTC/USDT').then(ticker => {\n    console.log(ticker)\n})\n```\n\n----------------------------------------\n\nTITLE: Web3 Implementation Placeholder Comment in JavaScript\nDESCRIPTION: A TODO comment indicating that web3 functionality needs to be implemented in the future. Web3 likely refers to the JavaScript library for interacting with Ethereum and other blockchain networks.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/python/ccxt/static_dependencies/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// TODO: add web3\n```\n\n----------------------------------------\n\nTITLE: Validating Required Credentials in JavaScript with CCXT\nDESCRIPTION: Example of checking required credentials for Binance exchange in JavaScript. This code demonstrates how to view the required credentials and validate if all necessary authentication details are provided.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_92\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\nconst ccxt = require ('ccxt')\nconst exchange = new ccxt.binance()\nconsole.log (exchange.requiredCredentials) // prints required credentials\nexchange.checkRequiredCredentials() // throw AuthenticationError\n```\n\n----------------------------------------\n\nTITLE: Margin Structure Example (JavaScript)\nDESCRIPTION: This snippet shows the structure of a margin object returned by CCXT after adding, reducing or setting margin.  It includes type, amount, total, code, symbol and status.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_264\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    info: { ... },\n    type: 'add', // 'add', 'reduce', 'set'\n    amount: 1, // amount added, reduced, or set\n    total: 2,  // total margin or undefined if not specified by the exchange\n    code: 'USDT',\n    symbol: 'XRP/USDT:USDT',\n    status: 'ok'\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Cryptocurrency Exchanges\nDESCRIPTION: Markdown formatted table containing cryptocurrency exchange information including logos, links, API versions, and badges for exchange types and CCXT compatibility.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| [![cex](https://user-images.githubusercontent.com/1294454/27766442-8ddc33b0-5ed8-11e7-8b98-f786aef0f3c9.jpg)](https://cex.io/r/0/up105393824/0/) | cex | [CEX.IO](https://cex.io/r/0/up105393824/0/) | [![API Version *](https://img.shields.io/badge/*-lightgray)](https://trade.cex.io/docs/) | ![CEX â Centralized EXchange](https://img.shields.io/badge/CEX-green.svg \"CEX â Centralized EXchange\") | | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |\n```\n\n----------------------------------------\n\nTITLE: Exchange Reference List Structure in RST\nDESCRIPTION: ReStructuredText formatted list of cryptocurrency exchanges with their logos, names, referral links and API version badges\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/exchange-markets-by-country.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n* - US\n  - .. image:: https://user-images.githubusercontent.com/1294454/187234005-b864db3d-f1e3-447a-aaf9-a9fc7b955d07.jpg\n       :target: https://alpaca.markets\n       :alt: alpaca\n  - alpaca\n  - `Alpaca <https://alpaca.markets>`__\n  - .. image:: https://img.shields.io/badge/*-lightgray\n       :target: https://alpaca.markets/docs/\n       :alt: API Version *\n```\n\n----------------------------------------\n\nTITLE: Correct Symbol Parsing Using safeSymbol - JavaScript\nDESCRIPTION: The correct way to parse market IDs from exchange responses into unified symbols using the safeSymbol method, which properly converts exchange-specific market IDs to unified CCXT symbols.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CONTRIBUTING.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nparseTrade (trade, market = undefined) {\n    const marketId = this.safeString (trade, 'pair');\n    // safeSymbol is used to parse the market id to a unified symbol\n    const symbol = this.safeSymbol (marketId, market);\n    return {\n       'info': trade,\n       'symbol': symbol, // very good, a unified symbol here now\n       // other fields...\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Borrow Interest Structure Example (JavaScript)\nDESCRIPTION: This snippet demonstrates the structure of the data returned by CCXT when fetching borrow interest. It includes information such as the symbol, currency, interest amount, interest rate, amount borrowed, margin mode, timestamp, and datetime.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_259\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    info: { ... },                           // Unparsed exchange response\n    symbol: 'BTC/USDT',                    // The market that the interest was accrued in\n    currency: 'USDT',                       // The currency of the interest\n    interest: 0.00004842,                   // The amount of interest that was charged\n    interestRate: 0.0002,                   // The borrow interest rate\n    amountBorrowed: 5.81,                   // The amount of currency that was borrowed\n    marginMode: 'cross',                    // The margin mode of the borrowed amount\n    timestamp: 1648699200000,               // The timestamp that the interest was charged\n    datetime: '2022-03-31T04:00:00.000Z',   // The datetime that the interest was charged\n}\n```\n\n----------------------------------------\n\nTITLE: Deposit ID Structure\nDESCRIPTION: Demonstrates the structure of the deposit ID object returned by `fetchDepositMethodId` and `fetchDepositMethodIds` methods. It includes fields such as `info`, `id`, `currency`, `verified`, and `tag`.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_217\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    'info': {},\n    'id': '75ab52ff-f25t',\n    'currency': 'USD',\n    'verified': true,\n    'tag': 'from credit card'\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Balance in CCXT\nDESCRIPTION: Method signature and returned structure for account balance retrieval, showing free, used, and total funds organized by currency.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_103\n\nLANGUAGE: JavaScript\nCODE:\n```\nfetchBalance (params = {})\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    'info':  { ... },    // the original untouched non-parsed reply with details\n    'timestamp': 1499280391811, // Unix Timestamp in milliseconds (seconds * 1000)\n    'datetime': '2017-07-05T18:47:14.692Z', // ISO8601 datetime string with milliseconds\n\n    //-------------------------------------------------------------------------\n    // indexed by availability of funds first, then by currency\n\n    'free':  {           // money, available for trading, by currency\n        'BTC': 321.00,   // floats...\n        'USD': 123.00,\n        ...\n    },\n\n    'used':  { ... },    // money on hold, locked, frozen, or pending, by currency\n\n    'total': { ... },    // total (free + used), by currency\n\n    //-------------------------------------------------------------------------\n    // indexed by currency first, then by availability of funds\n\n    'BTC':   {           // string, three-letter currency code, uppercase\n        'free': 321.00   // float, money available for trading\n        'used': 234.00,  // float, money on hold, locked, frozen or pending\n        'total': 555.00, // float, total balance (free + used)\n    },\n\n    'USD':   {           // ...\n        'free': 123.00   // ...\n        'used': 456.00,\n        'total': 579.00,\n    },\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Margin Loan Structure Example (JavaScript)\nDESCRIPTION: This snippet displays the structure of a margin loan object returned by CCXT. It includes the ID, currency, amount, symbol, timestamp, datetime, and raw exchange info.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_261\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    id: '1234323',                          // integer, the transaction id\n    currency: 'USDT',                       // string, the currency that is borrowed or repaid\n    amount: 5.81,                           // float, the amount of currency that was borrowed or repaid\n    symbol: 'BTC/USDT:USDT',                // string, unified market symbol\n    timestamp: 1648699200000,               // integer, the timestamp of when the transaction was made\n    datetime: '2022-03-31T04:00:00.000Z',   // string, the datetime of when the transaction was made\n    info: { ... }                           // Unparsed exchange response\n}\n```\n\n----------------------------------------\n\nTITLE: Position Structure Definition in JavaScript\nDESCRIPTION: Defines the structure of a trading position object including margin, collateral, PnL and other position-specific details.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_172\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n   'info': { ... },             // json response returned from the exchange as is\n   'id': '1234323',             // string, position id to reference the position, similar to an order id\n   'symbol': 'BTC/USD',         // uppercase string literal of a pair of currencies\n   'timestamp': 1607723554607,  // integer unix time since 1st Jan 1970 in milliseconds\n   'datetime': '2020-12-11T21:52:34.607Z',  // ISO8601 representation of the unix time above\n   'isolated': true,            // boolean, whether or not the position is isolated\n   'hedged': false,             // boolean, whether or not the position is hedged\n   'side': 'long',              // string, long or short\n   'contracts': 5,              // float, number of contracts bought\n   'contractSize': 100,         // float, the size of one contract in quote units\n   'entryPrice': 20000,         // float, the average entry price of the position\n   'markPrice': 20050,          // float, a price that is used for funding calculations\n   'notional': 100000,          // float, the value of the position in the settlement currency\n   'leverage': 100,             // float, the leverage of the position\n   'collateral': 5300,          // float, the maximum amount of collateral that can be lost\n   'initialMargin': 5000,       // float, the amount of collateral that is locked up\n   'maintenanceMargin': 1000,   // float, the mininum amount of collateral needed\n   'initialMarginPercentage': 0.05,      // float, the initialMargin as a percentage\n   'maintenanceMarginPercentage': 0.01,  // float, the maintenanceMargin as a percentage\n   'unrealizedPnl': 300,        // float, the difference between market and entry price\n   'liquidationPrice': 19850,   // float, the price at which collateral becomes less than maintenanceMargin\n   'marginMode': 'cross',       // string, can be cross or isolated\n   'percentage': 3.32           // float, represents unrealizedPnl / initialMargin * 100\n}\n```\n\n----------------------------------------\n\nTITLE: Browser Example with ByBit Integration\nDESCRIPTION: Complete HTML example demonstrating real-time cryptocurrency price tracking using CCXT with ByBit exchange\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Install.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n<script type=\"text/javascript\" src=\"https://cdn.ccxt.com/latest/bybit.min.js\"></script>\n<script>\nasync function update () {\n    const bid = document.querySelector ('#bid')\n    const ask = document.querySelector ('#ask')\n    const updates = document.querySelector ('#updates')\n\n    const bybit = new ccxt.pro.bybit ()\n    window.bybit = bybit\n    const ticker = await bybit.fetchTicker ('BTC/USDT:USDT')\n    bid.innerText = ticker.bid.toFixed (2)\n    ask.innerText = ticker.ask.toFixed (2)\n    while (true) {\n        const trades = await bybit.watchTrades ('BTC/USDT:USDT')\n        // const trades = await bybit.fetchTrades ('BTC/USDT:USDT', 1)\n        const trade = trades[0]\n\n        const notify = document.createElement ('li')\n        notify.innerHTML = `<strong>${trade.datetime.slice (11, 19)}</strong> &nbsp; ${trade.amount.toFixed (3)} btc was bought at ${trade.price.toFixed (1)}`\n        notify.style = 'padding-top: 8px;'\n        updates.appendChild (notify)\n    }\n}\n</script>\n</head>\n\n<body onload=\"update()\">\n<h3>The current bitcoin bid on bybit is <span id=\"bid\"></span><br><br>and the best ask is <span id=\"ask\"></span></h3>\n<ul id=\"updates\" style=\"color: red;\"></ul>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Correct Market ID Handling Using market() - JavaScript\nDESCRIPTION: The proper way to handle market IDs is to use the market() method to get the exchange-specific market ID from a unified symbol. This example shows how to correctly create a request using market['id'].\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CONTRIBUTING.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nasync fetchTicker (symbol, params = {}) {\n   const market = this.market (symbol); // the entire market structure\n   const request = {\n      'pair': market['id'], // good, they may be equal, but often differ, it's ok\n   };\n   const response = await this.publicGetEndpoint (this.extend (request, params));\n   // parse in a unified way...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Nonce in JavaScript\nDESCRIPTION: Examples of different ways to configure custom nonce values in JavaScript, including constructor parameters, explicit redefinition, and using milliseconds-based nonce.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_99\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\n\n// 1: custom nonce redefined in constructor parameters\nlet nonce = 1\nlet kraken1 = new ccxt.kraken ({ nonce: () => nonce++ })\n\n// 2: nonce redefined explicitly\nlet kraken2 = new ccxt.kraken ()\nkraken2.nonce = function () { return nonce++ } // uses same nonce as kraken1\n\n// 3: milliseconds nonce\nlet kraken3 = new ccxt.kraken ({\n    nonce: function () { return this.milliseconds () },\n})\n\n// 4: newer ES syntax\nlet kraken4 = new ccxt.kraken ({\n    nonce () { return this.milliseconds () },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT with C#/Nugget\nDESCRIPTION: Command to install CCXT library using C# package manager Nugget\nSOURCE: https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add ccxt\n```\n\n----------------------------------------\n\nTITLE: Fetching Order Book with Custom Depth in PHP\nDESCRIPTION: Example of fetching an order book with a custom depth in PHP by specifying a limit parameter. This code instantiates the Kraken exchange and fetches up to twenty orders on each side of the book.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_61\n\nLANGUAGE: PHP\nCODE:\n```\n// instantiate the exchange by id\n$exchange = '\\\\ccxt\\\\kraken';\n$exchange = new $exchange ();\n// up to ten orders on each side, for example\n$limit = 20;\nvar_dump ($exchange->fetch_order_book ('BTC/USD', $limit));\n```\n\n----------------------------------------\n\nTITLE: Watching Account Balance with WebSocket in Python\nDESCRIPTION: Continuously watches for account balance updates using the exchange's WebSocket API. Prints the received balance with timestamps and handles exceptions.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-22_snippet_26\n\nLANGUAGE: Python\nCODE:\n```\nif exchange.has['watchBalance']:\n    while True:\n        try:\n            balance = await exchange.watch_balance(params)\n            print(exchange.iso8601(exchange.milliseconds()), balance)\n        except Exception as e:\n            print(e)\n            # stop the loop on exception or leave it commented to retry\n            # raise e\n```\n\n----------------------------------------\n\nTITLE: Working with Array Lengths in Python\nDESCRIPTION: Demonstrates how to access array lengths in Python using the len() function, which works for both arrays and strings.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nlen(some_array)\n\n# or\n\nlen(some_string)\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Using a CCXT Pro Exchange with asyncio (Python)\nDESCRIPTION: This snippet demonstrates how to instantiate and use a CCXT Pro exchange (Kraken) in Python using `asyncio`. It retrieves and prints the top ask and bid prices from the order book for 'BTC/USD' in an infinite loop. This shows how to integrate CCXT Pro with `asyncio` for real-time data processing.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport ccxt.pro as ccxtpro\nfrom asyncio import run\n\nasync def main():\n    exchange = ccxtpro.kraken({'newUpdates': False})\n    while True:\n        orderbook = await exchange.watch_order_book('BTC/USD')\n        print(orderbook['asks'][0], orderbook['bids'][0])\n    await exchange.close()\n\n\nrun(main())\n```\n\n----------------------------------------\n\nTITLE: Fetching Transfer History in JavaScript\nDESCRIPTION: Method to fetch the transfer history for a specific currency within a timeframe. Returns an array of transfer structure objects containing details about each transfer.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_151\n\nLANGUAGE: JavaScript\nCODE:\n```\nfetchTransfers (code = undefined, since = undefined, limit = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: CCXT Pro Exchange Capabilities\nDESCRIPTION: This snippet shows the extended exchange capabilities available in CCXT Pro, including WebSocket support for various real-time functionalities such as watching order books, tickers, trades, balances, and orders. It also includes streaming API URLs and version information.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    'has': { // an associative array of extended exchange capabilities\n        'ws': true, // only available in CCXT Pro\n        'watchOrderBook': true,\n        'watchTicker': true,\n        'watchTickers': true,\n        'watchTrades': true,\n        'watchMyTrades': true,\n        'watchOHLCV': true,\n        'watchBalance': true,\n        'watchPositions': true,\n        'createOrderWs': true,\n        'editOrderWs': true,\n        'cancelOrderWs': true,\n        'cancelOrdersWs': false,\n        'cancelAllOrdersWs': true,\n        'fetchOrderWs': true,\n        'fetchOrdersWs': true,\n        'fetchBalanceWs': true,\n        'fetchMyTradesWs': true,\n        ...\n    },\n    'urls': {\n        'api': { // will contain a streaming API base URL, depending on the underlying protocol\n            'ws': 'wss://ws.exchange.com',            // https://en.wikipedia.org/wiki/WebSocket\n            'signalr': 'https://signalr.exchange.com' // https://en.wikipedia.org/wiki/SignalR\n            'socketio': 'wss://socket.exchange.io'    // https://socket.io\n        },\n    },\n    'version': '1.21',\n    'streaming': {\n        'keepAlive': 30000, // integer keep-alive rate in milliseconds\n        'maxPingPongMisses': 2.0, // how many ping pong misses to drop and reconnect\n        ... // other streaming options\n    },\n    // incremental data structures\n    'orderbooks':   {}, // incremental order books indexed by symbol\n    'ohlcvs':       {}, // standard CCXT OHLCVs indexed by symbol by timeframe\n    'balance':      {}, // a standard CCXT balance structure, accounts indexed by currency code\n    'orders':       {}, // standard CCXT order structures indexed by order id\n    'trades':       {}, // arrays of CCXT trades indexed by symbol\n    'tickers':      {}, // standard CCXT tickers indexed by symbol\n    'transactions': {}, // standard CCXT deposits and withdrawals indexed by id or txid\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @watchable/unpromise Package\nDESCRIPTION: Command to install the @watchable/unpromise package using npm.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/ts/src/static_dependencies/watchable/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nnpm install @watchable/unpromise\n```\n\n----------------------------------------\n\nTITLE: Watch Orders Method Signature in JavaScript\nDESCRIPTION: Defines the method signature for watching orders using CCXT Pro in JavaScript. It takes symbol, since, limit and params as arguments, with default values assigned to symbol, since and limit.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nwatchOrders (symbol = undefined, since = undefined, limit = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Watching OHLCV Data with WebSocket in Python\nDESCRIPTION: Continuously watches for OHLCV (candlestick) data updates using the exchange's WebSocket API. Prints the received candles with timestamps and handles exceptions.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-22_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\nif exchange.has['watchOHLCV']:\n    while True:\n        try:\n            candles = await exchange.watch_ohlcv(symbol, timeframe, since, limit, params)\n            print(exchange.iso8601(exchange.milliseconds()), candles)\n        except Exception as e:\n            print(e)\n            # stop the loop on exception or leave it commented to retry\n            # raise e\n```\n\n----------------------------------------\n\nTITLE: Converting Timestamps to Milliseconds in JavaScript\nDESCRIPTION: Demonstrates various methods to convert different timestamp formats to integer milliseconds using CCXT's safe methods.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CONTRIBUTING.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = {\n   'unixTimestampInSeconds': 1565242530,\n   'unixTimestampInMilliseconds': 1565242530165,\n   'unixTimestampAsDecimal': 1565242530.165,\n   'stringInSeconds': '1565242530',\n};\n\n// convert to integer if the underlying value is already in milliseconds\nconst timestamp = this.safeInteger (data, 'unixTimestampInMilliseconds'); // === 1565242530165\n\n// convert to integer and multiply by a thousand if the value has milliseconds after dot\nconst timestamp = this.safeTimestamp (data, 'unixTimestampAsDecimal'); // === 1565242530165\n\n// convert to integer and multiply by a thousand if the value is a UNIX timestamp in seconds\nconst timestamp = this.safeTimestamp (data, 'unixTimestampInSeconds'); // === 1565242530000\n\n// convert to integer and multiply by a thousand if the value is in seconds\nconst timestamp = this.safeTimestamp (data, 'stringInSeconds'); // === 1565242530000\n```\n\n----------------------------------------\n\nTITLE: Defining Exchange Integration JSON Structure in JavaScript\nDESCRIPTION: Basic JSON skeleton for integrating a new exchange into the CCXT library, including essential properties and API endpoint definitions.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CONTRIBUTING.md#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   'id': 'example',\n   'name': 'Example Exchange',\n   'country': [ 'US', 'EU', 'CN', 'RU' ],\n   'rateLimit': 1000,\n   'version': '1',\n   'comment': 'This comment is optional',\n   'urls': {\n      'logo': 'https://example.com/image.jpg',\n      'api': 'https://api.example.com/api',\n      'www': 'https://www.example.com',\n      'doc': [\n         'https://www.example.com/docs/api',\n         'https://www.example.com/docs/howto',\n         'https://github.com/example/docs',\n      ],\n   },\n   'api': {\n      'public': {\n         'get': [\n            'endpoint/example',\n            'orderbook/{pair}/full',\n            '{pair}/ticker',\n         ],\n      },\n      'private': {\n         'post': [\n            'balance',\n         ],\n      },\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Convenience Methods for Mark and Index OHLCV Data in JavaScript\nDESCRIPTION: This snippet shows how to use the convenience methods fetchMarkOHLCV and fetchIndexOHLCV to retrieve Mark and Index OHLCV data for a specific symbol using JavaScript.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_79\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function main () {\n    const exchange = new ccxt.binanceusdm ()\n    const markKlines = await exchange.fetchMarkOHLCV ('ADA/USDT', '1h')\n    console.log (markKlines)\n    const indexKlines = await exchange.fetchIndexOHLCV ('ADA/USDT', '1h')\n    console.log (indexKlines)\n}\n\nmain ()\n```\n\n----------------------------------------\n\nTITLE: Watching Order Book in JavaScript with CCXT Pro\nDESCRIPTION: Example of using the watchOrderBook method in JavaScript to continuously stream and display order book data. The method accepts a symbol, optional limit parameter, and optional override parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-22_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\nif (exchange.has['watchOrderBook']) {\n    while (true) {\n        try {\n            const orderbook = await exchange.watchOrderBook (symbol, limit, params)\n            console.log (new Date (), symbol, orderbook['asks'][0], orderbook['bids'][0])\n        } catch (e) {\n            console.log (e)\n            // stop the loop on exception or leave it commented to retry\n            // throw e\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Currency Structure Definition in CCXT\nDESCRIPTION: Defines the structure of a currency object within the CCXT library. It specifies the keys for referencing the currency within an exchange, its unified code, name, active status, fee, precision, deposit, withdraw, limits, networks and additional information.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    'id':       'btc',       // string literal for referencing within an exchange\n    'code':     'BTC',       // uppercase unified string literal code of the currency\n    'name':     'Bitcoin',   // string, human-readable name, if specified\n    'active':    true,       // boolean, currency status (tradeable and withdrawable)\n    'fee':       0.123,      // withdrawal fee, flat\n    'precision': 8,          // number of decimal digits \"after the dot\" (depends on exchange.precisionMode)\n    'deposit':   true        // boolean, deposits are available\n    'withdraw':  true        // boolean, withdraws are available\n    'limits': {              // value limits when placing orders on this market\n        'amount': {\n            'min': 0.01,     // order amount should be > min\n            'max': 1000,     // order amount should be < max\n        },\n        'withdraw': { ... }, // withdrawal limits\n        'deposit': {...},\n    },\n    'networks': {...}        // network structures indexed by unified network identifiers (ERC20, TRC20, BSC, etc)\n    'info': { ... },         // the original unparsed currency info from the exchange\n}\n```\n\n----------------------------------------\n\nTITLE: ID-based Pagination Implementation\nDESCRIPTION: Implementation of ID-based pagination using from_id parameter to fetch sequential trading data with a specified limit.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_52\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (exchange.has['fetchTrades']) {\n    let from_id = 'abc123' // all ids are strings\n    let allTrades = []\n    while (true) {\n        const symbol = undefined // change for your symbol\n        const since = undefined\n        const limit = 20 // change for your limit\n        const params = {\n            'from_id': from_id, // exchange-specific non-unified parameter name\n        }\n        const trades = await exchange.fetchTrades (symbol, since, limit, params)\n        if (trades.length) {\n            from_id = trades[trades.length - 1]['id']\n            allTrades.push (trades)\n        } else {\n            break\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Watching OHLCV Data with WebSocket in JavaScript\nDESCRIPTION: Continuously watches for OHLCV (candlestick) data updates using the exchange's WebSocket API. Prints the received candles and handles exceptions.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-22_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (exchange.has['watchOHLCV']) {\n    while (true) {\n        try {\n            const candles = await exchange.watchOHLCV (symbol, timeframe, since, limit, params)\n            console.log (new Date (), candles)\n        } catch (e) {\n            console.log (e)\n            // stop the loop on exception or leave it commented to retry\n            // throw e\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Stop-Loss and Take-Profit Orders in PHP\nDESCRIPTION: This snippet demonstrates how to create an order with stop-loss and take-profit parameters in PHP using the CCXT library.  It shows how to define trigger prices and limit prices within the 'params' array. Requires an initialized CCXT exchange object.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_194\n\nLANGUAGE: PHP\nCODE:\n```\n$params = [\n    'stopLoss' => [\n        'triggerPrice'=> 12.34, // at what price it will trigger\n        'price'=> 12.00, // if exchange supports, 'price' param would be limit price (for market orders, don't include this param)\n    ],\n    'takeProfit'=> [\n        // similar params here\n    ]\n];\n$order = $exchange->create_order ('SOL/USDT', 'limit', 'buy', 0.5, 13, $params);\n```\n\n----------------------------------------\n\nTITLE: Precision Mode Example B (JS)\nDESCRIPTION: JavaScript example demonstrating the effect of `TICK_SIZE` precision mode on formatting amounts. It shows how `amountToPrecision` rounds the amount based on the tick size defined in market data when the precision mode is set to `TICK_SIZE`.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_39\n\nLANGUAGE: JavaScript\nCODE:\n```\n// case B\nexchange.precisionMode = ccxt.TICK_SIZE\nmarket = exchange.market (symbol)\nmarket['precision']['amount'] === 0.00000001 // up to 0.00000001 precision\nexchange.amountToPrecision (symbol, 0.123456789) === 0.12345678\nexchange.amountToPrecision (symbol, 0.0000000000123456789) === 0.00000000 === 0.0\n```\n\n----------------------------------------\n\nTITLE: Enabling Message Queue in CCXT Pro\nDESCRIPTION: This snippet demonstrates how to enable the message queue for a WebSocket client in CCXT Pro. Setting `exchange.options['ws']['useMessageQueue'] = true` allows messages received when the watch function is not being awaited to be saved and returned the next time the watch function is called. This is useful for watch functions with low traffic.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexchange.options['ws']['useMessageQueue'] = true\n```\n\n----------------------------------------\n\nTITLE: Checking CCXT Version in PHP\nDESCRIPTION: This PHP snippet illustrates how to display the installed version of the CCXT library.  Verifying the version helps ensure you are using the correct version for your integration.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_311\n\nLANGUAGE: php\nCODE:\n```\necho \"CCXT v.\" . \\ccxt\\Exchange::VERSION . \"\\n\"; // PHP\n```\n\n----------------------------------------\n\nTITLE: Open Interest Structure Example - JavaScript\nDESCRIPTION: Example structure showing open interest response format including volume and timestamp information.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_90\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    symbol: 'BTC/USDT',\n    baseVolume: 80872.801,\n    quoteVolume: 3508262107.38,\n    openInterestAmount: 80872.801,\n    openInterestValue: 3508262107.38,\n    timestamp: 1649379000000,\n    datetime: '2022-04-08T00:50:00.000Z',\n    info: {\n        symbol: 'BTCUSDT',\n        sumOpenInterest: '80872.80100000',\n        sumOpenInterestValue: '3508262107.38000000',\n        timestamp: '1649379000000'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Trading Fees (all symbols)\nDESCRIPTION: Shows the `fetchTradingFees` method and describes parameters required and the return value.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_253\n\nLANGUAGE: javascript\nCODE:\n```\nfetchTradingFees (params = {})\n```\n\n----------------------------------------\n\nTITLE: Load Markets Example (JS)\nDESCRIPTION: JavaScript example demonstrating how to load markets using `loadMarkets()` method. It instantiates a `kraken` exchange object, loads the markets, and prints the exchange ID and the markets.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_41\n\nLANGUAGE: JavaScript\nCODE:\n```\n(async () => {\n    let kraken = new ccxt.kraken ()\n    let markets = await kraken.loadMarkets ()\n    console.log (kraken.id, markets)\n}) ()\n```\n\n----------------------------------------\n\nTITLE: Watching OHLCV with CCXT Pro (Python)\nDESCRIPTION: This Python code snippet shows how to subscribe to WebSocket streams of OHLCV data for a symbol and timeframe using CCXT Pro. It verifies that the exchange supports the `watchOHLCV` method. Then, it enters an infinite loop to continuously fetch and print the OHLCV data, along with a timestamp. Error handling is included to catch and print any exceptions that occur.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nif exchange.has['watchOHLCV']:\n    while True:\n        try:\n            candles = await exchange.watch_ohlcv(symbol, timeframe, since, limit, params)\n            print(exchange.iso8601(exchange.milliseconds()), candles)\n        except Exception as e:\n            print(e)\n            # stop the loop on exception or leave it commented to retry\n            # raise e\n```\n\n----------------------------------------\n\nTITLE: Configuring API Keys in JavaScript with CCXT\nDESCRIPTION: Examples of setting up API keys for different exchanges in JavaScript. Shows three approaches: setting keys after instantiation, providing keys during instantiation, and using a variable exchange ID.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_95\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\n\nconst ccxt = require ('ccxt')\n\n// any time\nlet kraken = new ccxt.kraken ()\nkraken.apiKey = 'YOUR_KRAKEN_API_KEY'\nkraken.secret = 'YOUR_KRAKEN_SECRET_KEY'\n\n// upon instantiation\nlet okcoinusd = new ccxt.okcoinusd ({\n    apiKey: 'YOUR_OKCOIN_API_KEY',\n    secret: 'YOUR_OKCOIN_SECRET_KEY',\n})\n\n// from variable id\nconst exchangeId = 'binance'\n    , exchangeClass = ccxt[exchangeId]\n    , exchange = new exchangeClass ({\n        'apiKey': 'YOUR_API_KEY',\n        'secret': 'YOUR_SECRET',\n    })\n```\n\n----------------------------------------\n\nTITLE: Printing Required Credentials PHP\nDESCRIPTION: This snippet demonstrates how to print the required credentials for an exchange using PHP. It initializes a Bittrex exchange object and then uses `var_dump` to print the `requiredCredentials` property, displaying the necessary authentication details. It also calls the `check_required_credentials()` method to demonstrate error handling.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_143\n\nLANGUAGE: php\nCODE:\n```\ninclude 'ccxt.php';\n$exchange = new \\ccxt\\bittrex ();\nvar_dump($exchange->requiredCredentials); // prints required credentials\n$exchange->check_required_credentials(); // throws AuthenticationError\n```\n\n----------------------------------------\n\nTITLE: Checking CCXT Version in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to check the installed version of the CCXT library. It is essential for verifying that you are using the most recent version to avoid compatibility issues or bugs.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_309\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log (ccxt.version) // JavaScript\n```\n\n----------------------------------------\n\nTITLE: Trade Data Structure\nDESCRIPTION: This JavaScript example describes the structure of a trade object returned by the `fetchTrades` method. It includes fields like `info`, `id`, `timestamp`, `datetime`, `symbol`, `order`, `type`, `side`, `takerOrMaker`, `price`, `amount`, `cost`, `fee`, and `fees`.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_105\n\nLANGUAGE: javascript\nCODE:\n```\n[\n    {\n        'info':          { ... },                  // the original decoded JSON as is\n        'id':           '12345-67890:09876/54321', // string trade id\n        'timestamp':     1502962946216,            // Unix timestamp in milliseconds\n        'datetime':     '2017-08-17 12:42:48.000', // ISO8601 datetime with milliseconds\n        'symbol':       'ETH/BTC',                 // symbol\n        'order':        '12345-67890:09876/54321', // string order id or undefined/None/null\n        'type':         'limit',                   // order type, 'market', 'limit' or undefined/None/null\n        'side':         'buy',                     // direction of the trade, 'buy' or 'sell'\n        'takerOrMaker': 'taker',                   // string, 'taker' or 'maker'\n        'price':         0.06917684,               // float price in quote currency\n        'amount':        1.5,                      // amount of base currency\n        'cost':          0.10376526,               // total cost, `price * amount`,\n        'fee':           {\n            'cost':  0.0015,                       // float\n            'currency': 'ETH',                     // usually base currency for buys, quote currency for sells\n            'rate': 0.002,                         // the fee rate (if available)\n        },\n        'fees': [                                  // an array of fees if paid in multiple currencies\n            {\n                'cost':  0.0015,                   // float\n                'currency': 'ETH',                 // usually base currency for buys, quote currency for sells\n                'rate': 0.002,                     // the fee rate (if available)\n            },\n        ]\n    },\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Cancel Order WS Method Signature in Python\nDESCRIPTION: Defines the signature for the cancel_order_ws method in Python. It cancels an order using WebSocket. Parameters include id, symbol (optional), and additional parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_61\n\nLANGUAGE: python\nCODE:\n```\ncancel_order_ws(self, id, symbol: str, params={})\n```\n\n----------------------------------------\n\nTITLE: Funding Rate History Structure (JavaScript)\nDESCRIPTION: This is the structure of the data returned by the fetchFundingRateHistory method. It contains information about the funding rate, timestamp, and other relevant details for a specific point in time.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_121\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    info: { ... },\n    symbol: \"BTC/USDT:USDT\",\n    fundingRate: -0.000068,\n    timestamp: 1642953600000,\n    datetime: \"2022-01-23T16:00:00.000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript Examples in CCXT\nDESCRIPTION: Shell command to execute JavaScript examples from the CCXT library. Replace example.js with the actual filename you want to run.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Examples.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnode path/to/example.js # substitute for actual filename here\n```\n\n----------------------------------------\n\nTITLE: Margin Loan Data Structure in JavaScript\nDESCRIPTION: Defines the structure of margin loan data returned by borrowing and repaying functions, including transaction ID, currency, amount, and timestamps.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_164\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    id: '1234323',                          // integer, the transaction id\n    currency: 'USDT',                       // string, the currency that is borrowed or repaid\n    amount: 5.81,                           // float, the amount of currency that was borrowed or repaid\n    symbol: 'BTC/USDT:USDT',                // string, unified market symbol\n    timestamp: 1648699200000,               // integer, the timestamp of when the transaction was made\n    datetime: '2022-03-31T04:00:00.000Z',   // string, the datetime of when the transaction was made\n    info: { ... }                           // Unparsed exchange response\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests Commands\nDESCRIPTION: Various commands for running CCXT tests, including language-specific, exchange-specific, and verbose testing options.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#2025-04-22_snippet_31\n\nLANGUAGE: shell\nCODE:\n```\nnode run-tests\nnode run-tests [--js] [--python] [--python-async] [--php] [--php-async] [exchange] [symbol]\nnode run-tests exchange --js\nnode run-tests exchange --js --python-async\nnode run-tests exchange --js --php\nnode run-tests exchange --python --python-async\nnode js/test/test exchange --verbose\npython3 python/ccxt/test/test_sync.py exchange --verbose\npython3 python/ccxt/test/test_async.py exchange --verbose\nphp -f php/test/test_sync.php exchange --verbose\nphp -f php/test/test_async.php exchange --verbose\nnode js/test/test exchange --verbose\npython3 python/ccxt/test/test_async.py exchange --verbose\nphp -f php/test/test_async.php exchange --verbose\nnode run-tests --js\nnode run-tests --python\nnode run-tests --php bitfinex\nnode run-tests --python-async kraken\n```\n\n----------------------------------------\n\nTITLE: Incorrect Exchange Instance Recreation (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates an anti-pattern where an exchange instance is created and destroyed repeatedly inside a function. This resets the rate limiter on each call and causes reloading markets, eventually breaking rate limits.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// DO NOT DO THIS!\n\nasync function tick () {\n    const exchange = new ccxt.binance ()\n    const response = await exchange.fetchOrderBook ('BTC/USDT')\n    // ... some processing here ...\n    return response\n}\n\nwhile (true) {\n    const result = await tick ()\n    console.log (result)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Exchange API Keys in keys.local.json\nDESCRIPTION: An example configuration of exchange API keys in keys.local.json file. This file stores credentials for authentication with various cryptocurrency exchanges and can include additional options for each exchange.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CONTRIBUTING.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"ftx\": {\n        \"apiKey\": \"XXX\",\n        \"secret\": \"YYY\"\n    },\n    \"binance\": {\n        \"apiKey\": \"XXX\",\n        \"secret\": \"YYY\",\n        \"options\": {\n            \"some-option\": \"some value\"\n        }\n    },\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging in Python\nDESCRIPTION: This Python snippet demonstrates how to enable debug-level logging using Python's built-in logging module. Debug logging provides detailed information about the program's execution, which can be invaluable for troubleshooting and identifying the root cause of problems. It should be added at the *very* beginning of the code.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_313\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Leverage Tiers Structure Example - JavaScript\nDESCRIPTION: Example structure showing leverage tiers response format with maintenance margin rates and notional limits for different position sizes.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_87\n\nLANGUAGE: JavaScript\nCODE:\n```\n[\n    {\n        \"tier\": 1,\n        \"notionalCurrency\": \"USDT\",\n        \"minNotional\": 0,\n        \"maxNotional\": 10000,\n        \"maintenanceMarginRate\": 0.0065,\n        \"maxLeverage\": 75,\n        \"info\": { ... }\n    },\n    {\n        \"tier\": 2,\n        \"notionalCurrency\": \"USDT\",\n        \"minNotional\": 10000,\n        \"maxNotional\": 50000,\n        \"maintenanceMarginRate\": 0.01,\n        \"maxLeverage\": 50,\n        \"info\": { ... }\n    },\n    {\n        \"tier\": 9,\n        \"notionalCurrency\": \"USDT\",\n        \"minNotional\": 20000000,\n        \"maxNotional\": 50000000,\n        \"maintenanceMarginRate\": 0.5,\n        \"maxLeverage\": 1,\n        \"info\": { ... }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Advanced WebSocket Configuration with Pawl in PHP\nDESCRIPTION: Shows a more detailed WebSocket connection setup with custom React socket connector, specific DNS settings, timeout configuration, subprotocols, and custom headers. This example also demonstrates explicit event handling for both messages and connection closure.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/ratchet/pawl/README.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n$reactConnector = new \\React\\Socket\\Connector([\n    'dns' => '8.8.8.8',\n    'timeout' => 10\n]);\n$loop = \\React\\EventLoop\\Loop::get();\n$connector = new \\Ratchet\\Client\\Connector($loop, $reactConnector);\n\n$connector('ws://127.0.0.1:9000', ['protocol1', 'subprotocol2'], ['Origin' => 'http://localhost'])\n->then(function(\\Ratchet\\Client\\WebSocket $conn) {\n    $conn->on('message', function(\\Ratchet\\RFC6455\\Messaging\\MessageInterface $msg) use ($conn) {\n        echo \"Received: {$msg}\\n\";\n        $conn->close();\n    });\n\n    $conn->on('close', function($code = null, $reason = null) {\n        echo \"Connection closed ({$code} - {$reason})\\n\";\n    });\n\n    $conn->send('Hello World!');\n}, function(\\Exception $e) use ($loop) {\n    echo \"Could not connect: {$e->getMessage()}\\n\";\n    $loop->stop();\n});\n```\n\n----------------------------------------\n\nTITLE: New String-Based Approach to Number Handling in CCXT\nDESCRIPTION: Demonstrates the new string-based approach for handling numeric values using the Precise class, which avoids floating-point precision issues by performing math operations on string representations.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst amount = this.safeNumber (order, 'amount'); // internal string-layer\nconst remaining = this.safeString (order, 'remaining'); // internal string-layer\nif (Precise.stringGt (remaining, '0')) { // internal string-layer\n    status = 'open';\n} else {\n    status = 'closed';\n}\n// ...\nreturn {\n    // ...\n    'amount': amount, // external layer, goes to the user\n    'remaining': this.parseNumber (remaining), // external layer, goes to the user\n    'status': status,\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Markets and Currencies in JavaScript\nDESCRIPTION: Demonstrates how to load markets, access market structures by symbol and ID, get lists of symbols and currencies, and navigate between symbols and market IDs using the CCXT library in JavaScript.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_37\n\nLANGUAGE: JavaScript\nCODE:\n```\n(async () => {\n\n    console.log (await exchange.loadMarkets ())\n\n    let btcusd1 = exchange.markets['BTC/USD']     // get market structure by symbol\n    let btcusd2 = exchange.market ('BTC/USD')     // same result in a slightly different way\n\n    let btcusdId = exchange.marketId ('BTC/USD')  // get market id by symbol\n\n    let symbols = exchange.symbols                // get an array of symbols\n    let symbols2 = Object.keys (exchange.markets) // same as previous line\n\n    console.log (exchange.id, symbols)            // print all symbols\n\n    let currencies = exchange.currencies          // a dictionary of currencies\n\n    let bitfinex = new ccxt.bitfinex ()\n    await bitfinex.loadMarkets ()\n\n    bitfinex.markets['BTC/USD']                   // symbol â market (get market by symbol)\n    bitfinex.markets_by_id['XRPBTC'][0]           // id â market (get market by id)\n\n    bitfinex.markets['BTC/USD']['id']             // symbol â id (get id by symbol)\n    bitfinex.markets_by_id['XRPBTC'][0]['symbol'] // id â symbol (get symbol by id)\n\n}) ()\n```\n\n----------------------------------------\n\nTITLE: Overriding Nonce PHP\nDESCRIPTION: This snippet illustrates how to override the nonce in PHP by extending the exchange class.  It provides examples of custom nonce and milliseconds nonce.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_150\n\nLANGUAGE: php\nCODE:\n```\n// PHP\n\n// 1: custom nonce value\nclass Myokcoin extends \\ccxt\\okcoin {\n    public function __construct ($options = array ()) {\n        parent::__construct (array_merge (array ('i' => 1), $options));\n    }\n    public function nonce () {\n        return $this->i++;\n    }\n}\n\n// 2: milliseconds nonce\nclass MyZaif extends \\ccxt\\zaif {\n    public function __construct ($options = array ()) {\n        parent::__construct (array_merge (array ('i' => 1), $options));\n    }\n    public function nonce () {\n        return $this->milliseconds ();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking CCXT Version in Python\nDESCRIPTION: Python code to print the current version of CCXT, important for verifying the installed version during troubleshooting.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_180\n\nLANGUAGE: Python\nCODE:\n```\nprint('CCXT version:', ccxt.__version__)  # Python\n```\n\n----------------------------------------\n\nTITLE: Watching Trades with WebSocket in PHP\nDESCRIPTION: Continuously watches for trade updates using the exchange's WebSocket API. Prints the received trades as JSON and handles exceptions.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-22_snippet_24\n\nLANGUAGE: PHP\nCODE:\n```\nif ($exchange->has['watchTrades']) {\n    $exchange::execute_and_run(function() use ($exchange, $symbol, $since, $limit, $params) {\n        while (true) {\n            try {\n                $trades = yield $exchange->watch_trades($symbol, $since, $limit, $params);\n                echo date('c'), ' ', json_encode($trades), \"\\n\";\n            } catch (Exception $e) {\n                echo get_class($e), ' ', $e->getMessage(), \"\\n\";\n            }\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Watching Order Book in Python with CCXT Pro\nDESCRIPTION: Example of using the watch_order_book method in Python to continuously stream and display order book data. The method accepts a symbol, optional limit parameter, and optional override parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-22_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\n# Python\nif exchange.has['watchOrderBook']:\n    while True:\n        try:\n            orderbook = await exchange.watch_order_book(symbol, limit, params)\n            print(exchange.iso8601(exchange.milliseconds()), symbol, orderbook['asks'][0], orderbook['bids'][0])\n        except Exception as e:\n            print(e)\n            # stop the loop on exception or leave it commented to retry\n            # raise e\n```\n\n----------------------------------------\n\nTITLE: Fetching Position Information in JavaScript\nDESCRIPTION: Retrieves information about a specific position in a contract market. Requires a market symbol and can accept additional parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_170\n\nLANGUAGE: JavaScript\nCODE:\n```\nfetchPosition (symbol, params = {})                         // for a single market\n```\n\n----------------------------------------\n\nTITLE: Volatility Structure (JavaScript)\nDESCRIPTION: This data structure contains information about volatility, including timestamp, datetime, and the volatility value itself.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_126\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    info: {\n        \"period\": 7,\n        \"value\": \"0.23854072\",\n        \"time\": \"1690574400000\"\n    }\n    timestamp: 1649379000000,\n    datetime: '2023-07-28T00:50:00.000Z',\n    volatility: 0.23854072,\n}\n```\n\n----------------------------------------\n\nTITLE: Comprehensive CCXT Usage Example in Python\nDESCRIPTION: Complete example showing how to initialize different exchange objects with API credentials and prepare for trading operations in Python.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/readme.rst#2025-04-22_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n# coding=utf-8\n\nimport ccxt\n\nhitbtc   = ccxt.hitbtc({'verbose': True})\nbitmex   = ccxt.bitmex()\nhuobipro = ccxt.huobipro()\nexmo     = ccxt.exmo({\n    'apiKey': 'YOUR_PUBLIC_API_KEY',\n    'secret': 'YOUR_SECRET_PRIVATE_KEY',\n})\nkraken = ccxt.kraken({\n    'apiKey': 'YOUR_PUBLIC_API_KEY',\n    'secret': 'YOUR_SECRET_PRIVATE_KEY',\n})\n\nexchange_id = 'binance'\n```\n\n----------------------------------------\n\nTITLE: Enabling DEBUG Logging in Python for CCXT\nDESCRIPTION: Python code to enable DEBUG level logging using the standard Python logger. This provides detailed logging information for CCXT operations, useful for in-depth troubleshooting.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_183\n\nLANGUAGE: Python\nCODE:\n```\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Setting Timezone and Initializing PHP Exchanges\nDESCRIPTION: Demonstrates setting the required timezone to UTC and various ways to instantiate exchange objects in PHP, including dynamic instantiation from variable exchange IDs.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n// PHP\ndate_default_timezone_set('UTC');\ninclude 'ccxt.php';\n$bitfinex = new \\ccxt\\bitfinex(); // default id\n$bitfinex1 = new \\ccxt\\bitfinex(array('id' => 'bitfinex1'));\n$bitfinex2 = new \\ccxt\\bitfinex(array('id' => 'bitfinex2'));\n$id = 'kraken';\n$exchange = '\\\\ccxt\\\\' . $id;\n$kraken = new $exchange();\n\n// from variable id\n$exchange_id = 'binance';\n$exchange_class = \"\\\\ccxt\\\\$exchange_id\";\n$exchange = new $exchange_class(array(\n    'apiKey' => 'YOUR_API_KEY',\n    'secret' => 'YOUR_SECRET',\n));\n```\n\n----------------------------------------\n\nTITLE: Minimal Order Structure in CCXT\nDESCRIPTION: The minimal order structure returned by the createOrder method, guaranteed to contain at least the order ID and the raw exchange response in the info field.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_113\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    'id': 'string',  // order id\n    'info': { ... }, // decoded original JSON response from the exchange as is\n}\n```\n\n----------------------------------------\n\nTITLE: Edit Order WS Method Signature in PHP\nDESCRIPTION: Defines the signature for the edit_order_ws method in PHP. It edits an existing order using WebSocket. Parameters include id, symbol, type, side, amount, price (optional), and additional parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_59\n\nLANGUAGE: php\nCODE:\n```\nedit_order_ws(string id, string $symbol, string $type, string $side, float $amount, ?float $price = null, $params = array ())\n```\n\n----------------------------------------\n\nTITLE: Accessing Fees from Markets\nDESCRIPTION: Shows how to access trading fees directly from the `.markets` property of the exchange object when `fetchTradingFees` is not supported.  It also displays the structure of the fee information stored in markets.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_251\n\nLANGUAGE: javascript\nCODE:\n```\nexchange.markets['ETH/BTC']['taker'] // taker fee rate for ETH/BTC\nexchange.markets['BTC/USD']['maker'] // maker fee rate for BTC/USD\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    'taker': 0.002,   // taker fee rate, 0.002 = 0.2%\n    'maker': 0.0016,  // maker fee rate, 0.0016 = 0.16%\n    'percentage': true, // whether the taker and maker fee rate is a multiplier or a fixed flat amount\n    'tierBased': false, // whether the fee depends on your trading tier (your trading volume)\n\n    'tiers': {\n        'taker': [\n            [0, 0.0026], // tupple (trade volume in USD, taker fee) ordered by increasing volume\n            [50000, 0.0024],\n            ...\n        ],\n        'maker': [\n            [0, 0.0016], // tupple (trade volume in USD, maker fee) ordered by increasing volume\n            [50000, 0.0014],\n            ...\n        ],\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Open Interest with CCXT (JavaScript)\nDESCRIPTION: This method fetches the current open interest for a given contract symbol.  It takes a symbol as input and an optional params argument for exchange-specific parameters.  The returned structure contains details about the open interest.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_122\n\nLANGUAGE: javascript\nCODE:\n```\nfetchOpenInterest (symbol, params = {})\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Exchanges in JavaScript with CCXT\nDESCRIPTION: This JavaScript snippet demonstrates how to retrieve a list of supported exchange IDs using the CCXT library.  It requires the 'ccxt' module to be installed. The output is a list of exchange IDs that are printed to the console.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ccxt = require ('ccxt')\nconsole.log (ccxt.exchanges)\n```\n\n----------------------------------------\n\nTITLE: Stream-Based Loop in CCXT Pro\nDESCRIPTION: Shows the WebSocket-based streaming pattern in CCXT Pro using the watch* methods. This approach maintains a persistent connection and receives real-time updates from the exchange.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// a stream-based (WebSocket) orderbook feed loop\n\nwhile (condition) {\n\n    try {\n\n        // watch some of the public data\n        orderbook = await exchange.watchOrderBook (symbol, limit)\n\n        // do something or react somehow based on that data\n        // ...\n\n    } catch (e) {\n\n        // handle errors\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Markets in JavaScript\nDESCRIPTION: Example of loading markets in JavaScript using async/await. This is required before using most CCXT API methods to obtain the list of available trading pairs and their parameters from the exchange.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\n(async () => {\n    let kraken = new ccxt.kraken ()\n    let markets = await kraken.loadMarkets ()\n    console.log (kraken.id, markets)\n}) ()\n```\n\n----------------------------------------\n\nTITLE: Fetching Order Book with Custom Depth in Python\nDESCRIPTION: Example of fetching an order book with a custom depth in Python by specifying a limit parameter. This code fetches up to ten bid and ask entries from the CEX exchange.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_60\n\nLANGUAGE: Python\nCODE:\n```\nimport ccxt\n# return up to ten bidasks on each side of the order book stack\nlimit = 10\nccxt.cex().fetch_order_book('BTC/USD', limit)\n```\n\n----------------------------------------\n\nTITLE: Watching Ticker in Python with CCXT Pro\nDESCRIPTION: Example of using the watch_ticker method in Python to continuously stream and display ticker data. The method accepts a symbol and optional override parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-22_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\n# Python\nif exchange.has['watchTicker']:\n    while True:\n        try:\n            ticker = await exchange.watch_ticker(symbol, params)\n            print(exchange.iso8601(exchange.milliseconds()), ticker)\n        except Exception as e:\n            print(e)\n            # stop the loop on exception or leave it commented to retry\n            # raise e\n```\n\n----------------------------------------\n\nTITLE: Liquidation Structure (JavaScript)\nDESCRIPTION: This data structure represents a liquidation event, including details such as symbol, number of contracts, contract size, liquidation price, and timestamp.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_132\n\nLANGUAGE: javascript\nCODE:\n```\n[\n    {\n        'info':          { ... },                        // the original decoded JSON as is\n        'symbol':        'BTC/USDT:USDT-231006-25000-P', // unified CCXT market symbol\n        'contracts':     2,                              // the number of derivative contracts\n        'contractSize':  0.001,                          // the contract size for the trading pair\n        'price':         27038.64,                       // the average liquidation price in the quote currency\n        'baseValue':     0.002,                          // value in the base currency (contracts * contractSize)\n        'quoteValue':    54.07728,                       // value in the quote currency ((contracts * contractSize) * price)\n        'timestamp':     1696996782210,                  // Unix timestamp in milliseconds\n        'datetime':      '2023-10-11 03:59:42.000',      // ISO8601 datetime with milliseconds\n    },\n    ...\n]\n```\n\n----------------------------------------\n\nTITLE: Fetching Funding History with fetchFundingHistory Function in JavaScript\nDESCRIPTION: Retrieves an account's history of funding fees paid or received. The function takes an optional symbol, optional 'since' timestamp, optional 'limit' for the number of records, and optional parameters specific to the exchange API endpoint. It returns an array of funding history structures.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_284\n\nLANGUAGE: javascript\nCODE:\n```\nfetchFundingHistory (symbol = undefined, since = undefined, limit = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Watch Orders Method Signature in PHP\nDESCRIPTION: Defines the method signature for watching orders using CCXT Pro in PHP. It takes symbol, since, lmit (typo) and params as arguments, with default values assigned to symbol, since and params.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_43\n\nLANGUAGE: php\nCODE:\n```\nwatch_orders($symbol = null, $since = null, $lmit = null, $params = array());\n```\n\n----------------------------------------\n\nTITLE: Future Contract Symbol\nDESCRIPTION: This snippet explains the structure of a future contract symbol in CCXT, including the base currency, quote currency, settlement currency, and settlement date identifier. It demonstrates how inverse and linear futures contracts are represented.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_48\n\nLANGUAGE: JavaScript\nCODE:\n```\n//\n// base asset or currency\n// â\n// â  quote asset or currency\n// â  â\n// â  â    settlement asset or currency\n// â  â    â\n// â  â    â     identifier (settlement date)\n// â  â    â     â\n// â  â    â     â\n'BTC/USDT:BTC-211225'  // BTC/USDT futures contract settled in BTC (inverse) on 2021-12-25\n'BTC/USDT:USDT-211225' // BTC/USDT futures contract settled in USDT (linear, vanilla) on 2021-12-25\n'ETH/USDT:ETH-210625'  // ETH/USDT futures contract settled in ETH (inverse) on 2021-06-25\n'ETH/USDT:USDT-210625' // ETH/USDT futures contract settled in USDT (linear, vanilla) on 2021-06-25\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Multiple Exchange Instances in JavaScript\nDESCRIPTION: An example showing what NOT to do when working with multiple instances of the same exchange. This creates separate rate limiters that aren't aware of each other, potentially leading to API bans.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\n// DO NOT DO THIS!\n\nconst binance1 = new ccxt.binance ({ enableRateLimit: true })\nconst binance2 = new ccxt.binance ({ enableRateLimit: true })\nconst binance3 = new ccxt.binance ({ enableRateLimit: true })\n\nwhile (true) {\n    const result = await Promise.all ([\n        binance1.fetchOrderBook ('BTC/USDT'),\n        binance2.fetchOrderBook ('ETH/USDT'),\n        binance3.fetchOrderBook ('ETH/BTC'),\n    ])\n    console.log (result)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Ternary Conditional Usage in JavaScript\nDESCRIPTION: Examples of poorly designed code that will likely break the CCXT transpiler due to improper use of ternary operators without brackets.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CONTRIBUTING.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// this is an example of bad code style that will likely break the transpiler\nconst foo = {\n   'bar': 'a' + qux === 'baz' ? this.a () : this.b () + 'b',\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// this confuses the transpiler and a human developer as well\nconst foo = 'bar' + baz + qux ? 'a' : '' + this.c ();\n```\n\n----------------------------------------\n\nTITLE: Overriding Exchange Methods in PHP\nDESCRIPTION: This snippet shows how to override instance methods of an exchange object during runtime using the CCXT library in PHP. Requires the CCXT PHP library to be installed.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n$ex = new \\ccxt\\binance();\n$ex->add_method('fetch_ticker', function($symbol, $params = []) {\n    // your codes go here\n});\nvar_dump($ex->call_method('fetch_ticker', ['BTC/USDT']));\n```\n\n----------------------------------------\n\nTITLE: Watching Trades with WebSocket in Python\nDESCRIPTION: Continuously watches for trade updates using the exchange's WebSocket API. Prints the received trades with timestamps and handles exceptions.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-22_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\nif exchange.has['watchTrades']:\n    while True:\n        try:\n            trades = await exchange.watch_trades(symbol, since, limit, params)\n            print(exchange.iso8601(exchange.milliseconds()), trades)\n        except Exception as e:\n            print(e)\n            # stop the loop on exception or leave it commented to retry\n            # raise e\n```\n\n----------------------------------------\n\nTITLE: Fetch Deposits Example (Javascript)\nDESCRIPTION: Demonstrates how to use the `fetchDeposits` method in Javascript, including a check for the method's availability on the exchange.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_229\n\nLANGUAGE: javascript\nCODE:\n```\n// fetchDeposits (code = undefined, since = undefined, limit = undefined, params = {})\n\nif (exchange.has['fetchDeposits']) {\n    const deposits = await exchange.fetchDeposits (code, since, limit, params)\n} else {\n    throw new Error (exchange.id + ' does not have the fetchDeposits method')\n}\n```\n\n----------------------------------------\n\nTITLE: Create Spot Margin Order with Margin Mode (PHP)\nDESCRIPTION: Example code snippet for creating a spot margin order using the create_order method in PHP, while specifying the marginMode parameter.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_269\n\nLANGUAGE: php\nCODE:\n```\n$params = {\n    'marginMode': 'isolated', // or 'cross'\n}\n$order = $exchange->create_order ('ETH/USDT', 'market', 'buy', 0.1, 1500, $params);\n```\n\n----------------------------------------\n\nTITLE: Fetching Volatility History with CCXT (JavaScript)\nDESCRIPTION: This method fetches the volatility history for the code of an options underlying asset from the exchange. It requires the currency code (e.g., 'BTC') and accepts exchange-specific parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_125\n\nLANGUAGE: javascript\nCODE:\n```\nfetchVolatilityHistory (code, params = {})\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for CCXT Development\nDESCRIPTION: Command for installing Node.js dependencies required for building CCXT. This step is necessary before building the project for the first time, but can be skipped when using the Docker image.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CONTRIBUTING.md#2025-04-22_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Watching User Trades in Multiple Languages\nDESCRIPTION: Method signature for watching user trades via WebSocket. Takes optional parameters for symbol, timestamp since, limit of results, and additional parameters. Returns trade updates in real-time.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-22_snippet_28\n\nLANGUAGE: Python\nCODE:\n```\nwatch_my_trades(symbol=None, since=None, limit=None, params={})\n```\n\nLANGUAGE: PHP\nCODE:\n```\nwatch_my_trades($symbol = null, $since = null, $lmit = null, $params = array());\n```\n\n----------------------------------------\n\nTITLE: Setting Number Type to String in CCXT (PHP)\nDESCRIPTION: Demonstrates how to configure CCXT to use string-based math instead of native numbers in PHP. This is useful for situations requiring fixed-point arithmetic or high precision.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_300\n\nLANGUAGE: php\nCODE:\n```\n$ex = new ccxt\\\\coinbase();\n$ex->number = 'strval'; // 'strval' | 'floatval'\n```\n\n----------------------------------------\n\nTITLE: Asynchronous API Call - PHP\nDESCRIPTION: Example showing asynchronous API implementation in PHP using ReactPHP and RecoilPHP for fetching ticker data.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_46\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ninclude 'ccxt.php';\n\n$loop = \\React\\EventLoop\\Factory::create();\n$kernel = \\Recoil\\React\\ReactKernel::create($loop);\n$kernel->execute(function() use ($loop, $kernel) {\n    $poloniex = new \\ccxt\\async\\poloniex(array('loop' => $loop, 'kernel' => $kernel, 'enableRateLimit' => true));\n    $result = yield $poloniex->fetch_ticker('ETH/BTC');\n    var_dump($result);\n}, $loop);\n$kernel->run();\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Exchanges in Python\nDESCRIPTION: This snippet shows how to obtain the full list of supported exchange IDs programmatically using CCXT in Python.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nimport ccxt\nprint (ccxt.exchanges)\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Limits in Python\nDESCRIPTION: Example showing how to set cache limits for trades, OHLCV and orders using exchange options in CCXT Pro.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nccxtpro.binance({\n    'options': {\n        'tradesLimit': 1000,\n        'OHLCVLimit': 1000,\n        'ordersLimit': 1000,\n    },\n})\n\n# or\n\nexchange.options['tradesLimit'] = 1000\nexchange.options['OHLCVLimit'] = 1000\nexchange.options['ordersLimit'] = 1000\n```\n\n----------------------------------------\n\nTITLE: Funding History Structure Example in JavaScript\nDESCRIPTION: Shows the structure of the funding history object. It contains information about the transaction like timestamp, amount, symbol and code.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_285\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    info: { ... },\n    symbol: \"XRP/USDT:USDT\",\n    code: \"USDT\",\n    timestamp: 1646954920000,\n    datetime: \"2022-03-08T16:00:00.000Z\",\n    id: \"1520286109858180\",\n    amount: -0.027722\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching a Single Currency Cross Borrow Rate in JavaScript\nDESCRIPTION: Fetches the borrow rate for a single currency. The `code` parameter specifies the unified CCXT currency code, and the `params` parameter allows for exchange-specific API parameters. Returns a borrow rate structure.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_109\n\nLANGUAGE: javascript\nCODE:\n```\nfetchCrossBorrowRate (code, params = {})\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for CCXT\nDESCRIPTION: This snippet enumerates the required Python packages and their minimum versions for the CCXT library. It includes libraries for HTTP requests, cryptography, async operations, and development tools.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/ci-requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsetuptools>=60.9.0\ncertifi>=2018.1.18\nrequests>=2.18.4\ncryptography>=2.6.1\ntyping_extensions>=4.4.0\naiohttp<=3.10.11\naiodns>=1.1.1\nyarl>=1.7.2\nruff==0.0.292\ntox>=4.8.0\nmypy==1.6.1\npyopenssl\npsutil\n```\n\n----------------------------------------\n\nTITLE: Order Structure Response JavaScript\nDESCRIPTION: This code snippet shows the structure of the order object returned by `createOrder`. It includes the order ID and the raw response from the exchange API in the `info` field.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_172\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    'id': 'string',  // order id\n    'info': { ... }, // decoded original JSON response from the exchange as is\n}\n```\n\n----------------------------------------\n\nTITLE: Building CCXT from TypeScript Source\nDESCRIPTION: Command for building all components of CCXT. This process generates PHP and Python versions from the TypeScript source files, creating the complete multi-language library.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CONTRIBUTING.md#2025-04-22_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Fetching Borrow Interest\nDESCRIPTION: Demonstrates how to use the `fetchBorrowInterest` method to retrieve borrow interest information for margin trading. It explains the parameters and the expected return value.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_258\n\nLANGUAGE: javascript\nCODE:\n```\nfetchBorrowInterest (code = undefined, symbol = undefined, since = undefined, limit = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Cancel All Orders WS Method Signature in Python\nDESCRIPTION: Defines the signature for the cancel_all_orders_ws method in Python. It cancels all orders for a symbol using WebSocket. Parameters include symbol (optional) and additional parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_67\n\nLANGUAGE: python\nCODE:\n```\ncancel_all_orders_ws(self, symbol: str, params={})\n```\n\n----------------------------------------\n\nTITLE: Cancel All Orders WS Method Signature in PHP\nDESCRIPTION: Defines the signature for the cancel_all_orders_ws method in PHP. It cancels all orders for a symbol using WebSocket. Parameters include symbol (optional) and additional parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_68\n\nLANGUAGE: php\nCODE:\n```\ncancel_all_orders_ws(string $symbol, $params = array ())\n```\n\n----------------------------------------\n\nTITLE: Cancel Order WS Method Signature in JavaScript\nDESCRIPTION: Defines the signature for the cancelOrderWs method in JavaScript. It cancels an order using WebSocket. Parameters include id, symbol (optional), and additional parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\ncancelOrderWs(id: string, symbol: string = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Adjusting Margin Balance Functions (JavaScript)\nDESCRIPTION: Functions for increasing, reducing, or setting margin balance in an open leveraged position. Requires symbol and amount, with optional parameters for exchange-specific configurations.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_262\n\nLANGUAGE: javascript\nCODE:\n```\naddMargin (symbol, amount, params = {})\nreduceMargin (symbol, amount, params = {})\nsetMargin (symbol, amount, params = {})\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging in Python with CCXT\nDESCRIPTION: Code to enable debug logging in Python when working with CCXT. This allows for verbose output of HTTP requests when the 'verbose' flag is not sufficient.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Fetching Transaction Fee (single code)\nDESCRIPTION: Shows the `fetchTransactionFee` method and describes parameters required and the return value.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_255\n\nLANGUAGE: javascript\nCODE:\n```\nfetchTransactionFee (code, params = {})\n```\n\n----------------------------------------\n\nTITLE: Load Markets Example (Python)\nDESCRIPTION: Python example demonstrating how to load markets using `load_markets()` method. It instantiates an `okcoin` exchange object, loads the markets, and prints the exchange ID and the markets.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_42\n\nLANGUAGE: Python\nCODE:\n```\nokcoin = ccxt.okcoin()\nmarkets = okcoin.load_markets()\nprint(okcoin.id, markets)\n```\n\n----------------------------------------\n\nTITLE: Precision Mode Example C (JS)\nDESCRIPTION: JavaScript example demonstrating the effect of `SIGNIFICANT_DIGITS` precision mode on formatting amounts. It shows how `amountToPrecision` truncates the amount based on the significant digits defined in market data when the precision mode is set to `SIGNIFICANT_DIGITS`.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_40\n\nLANGUAGE: JavaScript\nCODE:\n```\n// case C\nexchange.precisionMode = ccxt.SIGNIFICANT_DIGITS\nmarket = exchange.market (symbol)\nmarket['precision']['amount'] === 8 // up to 8 significant non-zero digits\nexchange.amountToPrecision (symbol, 0.0000000000123456789) === 0.000000000012345678\nexchange.amountToPrecision (symbol, 123.4567890123456789) === 123.45678\n```\n\n----------------------------------------\n\nTITLE: Cancel Orders WS Method Signature in PHP\nDESCRIPTION: Defines the signature for the cancel_orders_ws method in PHP. It cancels multiple orders using WebSocket. Parameters include an array of ids, symbol (optional), and additional parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_65\n\nLANGUAGE: php\nCODE:\n```\ncancel_orders_ws(string[] $ids, string $symbol, $params = array ())\n```\n\n----------------------------------------\n\nTITLE: Importing and Using CCXT in Python\nDESCRIPTION: This code shows how to import CCXT, create an exchange instance, and fetch market data in Python.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport ccxt\n\nexchange = ccxt.binance()\nprint(exchange.id, exchange.load_markets())\n\nticker = exchange.fetch_ticker('BTC/USDT')\nprint(ticker)\n```\n\n----------------------------------------\n\nTITLE: Go Proxy Configuration\nDESCRIPTION: This code shows how to configure a proxy in Go using CCXT.  After setting the proxy, `UpdateProxySettings()` must be called to apply the changes.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_292\n\nLANGUAGE: go\nCODE:\n```\nexchange := ccxt.NewBinance(nil)\nexchange.ProxyUrl = \"http://your-proxy-url:8080\"\nexchange.UpdateProxySettings()  // Required in Go to apply proxy settings\n```\n\n----------------------------------------\n\nTITLE: Setting Margin Mode (JavaScript)\nDESCRIPTION: Sets the margin mode for a specific market or account, to either cross or isolated. Requires the margin mode string and optionally a symbol and exchange-specific parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_265\n\nLANGUAGE: javascript\nCODE:\n```\nsetMarginMode (marginMode, symbol = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Handling Array Lengths in JavaScript, Python, and PHP\nDESCRIPTION: Illustrates the differences in accessing array and string lengths across JavaScript, Python, and PHP, with guidance on proper transpilation hints.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CONTRIBUTING.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nsomeArray.length\n\n// or\n\nsomeString.length\n```\n\nLANGUAGE: python\nCODE:\n```\nlen(some_array)\n\n# or\n\nlen(some_string)\n```\n\nLANGUAGE: php\nCODE:\n```\ncount(some_array);\n\n// or\n\nstrlen(some_string); // or mb_strlen\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst arrayLength = someArray.length;\n// the above line ends with .length;\n// that ending is a hint for the transpiler that will recognize someArray\n// as an array variable in this place, rather than a string type variable\n// now we can use arrayLength for the arithmetic\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT in PHP Projects\nDESCRIPTION: Command to install the CCXT library in a PHP project using Composer package manager.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# PHP / Composer\ncomposer install ccxt\n```\n\n----------------------------------------\n\nTITLE: Loading CCXT in JavaScript with CommonJS\nDESCRIPTION: Example showing how to import and use CCXT in Node.js using CommonJS module syntax, printing available exchanges.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n//cjs\nvar ccxt = require ('ccxt')\nconsole.log (ccxt.exchanges) // print all available exchanges\n```\n\n----------------------------------------\n\nTITLE: Fetching Deposits in JavaScript\nDESCRIPTION: This snippet demonstrates how to fetch deposits for a specific currency, with optional parameters for time range and limit.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_136\n\nLANGUAGE: JavaScript\nCODE:\n```\nfetchDeposits (code = undefined, since = undefined, limit = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Fetching Withdrawals in JavaScript\nDESCRIPTION: This snippet shows how to fetch withdrawals for a specific currency, with optional parameters for time range and limit.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_138\n\nLANGUAGE: JavaScript\nCODE:\n```\nfetchWithdrawals (code = undefined, since = undefined, limit = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT with pip\nDESCRIPTION: Command to install the CCXT package using Python's pip package manager. This is the recommended way to install CCXT for Python users.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/go/tests/out.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install ccxt\n```\n\n----------------------------------------\n\nTITLE: Sign In Method Signature in JavaScript with CCXT\nDESCRIPTION: Signature of the signIn method used to sign in to exchanges that require this step before making private API calls. The method accepts optional parameters specific to the exchange API endpoint.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_98\n\nLANGUAGE: JavaScript\nCODE:\n```\nsignIn (params = {})\n```\n\n----------------------------------------\n\nTITLE: Using Safe Methods for Data Access in JavaScript\nDESCRIPTION: Example of using safe methods to access data in JavaScript, which ensures compatibility across different programming languages.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = this.safeValue (params, 'foo');\nif (foo !== undefined) {\n}\n\n// Or:\n\nif ('foo' in params) {\n}\n```\n\n----------------------------------------\n\nTITLE: Converting PSR-7 Stream to PHP Stream Resource\nDESCRIPTION: Demonstrates how to use the StreamWrapper class to convert a PSR-7 stream into a PHP stream resource.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/ringcentral-psr7/README.md#2025-04-22_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nuse RingCentral\\Psr7\\StreamWrapper;\n\n$stream = RingCentral\\Psr7\\stream_for('hello!');\n$resource = StreamWrapper::getResource($stream);\necho fread($resource, 6); // outputs hello!\n```\n\n----------------------------------------\n\nTITLE: Defining Market Structure in JavaScript for CCXT\nDESCRIPTION: This snippet shows the complete market structure object used in CCXT to represent trading markets. It includes all properties such as identifiers, currencies, fees, precision settings, and trading limits that define a market in a cryptocurrency exchange.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    'id':      'btcusd',      // string literal for referencing within an exchange\n    'symbol':  'BTC/USD',     // uppercase string literal of a pair of currencies\n    'base':    'BTC',         // uppercase string, unified base currency code, 3 or more letters\n    'quote':   'USD',         // uppercase string, unified quote currency code, 3 or more letters\n    'baseId':  'btc',         // any string, exchange-specific base currency id\n    'quoteId': 'usd',         // any string, exchange-specific quote currency id\n    'active':   true,         // boolean, market status\n    'type':    'spot',        // spot for spot, future for expiry futures, swap for perpetual swaps, 'option' for options\n    'spot':     true,         // whether the market is a spot market\n    'margin':   true,         // whether the market is a margin market\n    'future':   false,        // whether the market is a expiring future\n    'swap':     false,        // whether the market is a perpetual swap\n    'option':   false,        // whether the market is an option contract\n    'contract': false,        // whether the market is a future, a perpetual swap, or an option\n    'settle':   'USDT',       // the unified currency code that the contract will settle in, only set if `contract` is true\n    'settleId': 'usdt',       // the currencyId of that the contract will settle in, only set if `contract` is true\n    'contractSize': 1,        // the size of one contract, only used if `contract` is true\n    'linear':   true,         // the contract is a linear contract (settled in quote currency)\n    'inverse':  false,        // the contract is an inverse contract (settled in base currency)\n    'expiry':  1641370465121, // the unix expiry timestamp in milliseconds, undefined for everything except market['type'] `future`\n    'expiryDatetime': '2022-03-26T00:00:00.000Z', // The datetime contract will in iso8601 format\n    'strike': 4000,           // price at which a put or call option can be exercised\n    'optionType': 'call',     // call or put string, call option represents an option with the right to buy and put an option with the right to sell\n    'taker':    0.002,        // taker fee rate, 0.002 = 0.2%\n    'maker':    0.0016,       // maker fee rate, 0.0016 = 0.16%\n    'percentage': true,       // whether the taker and maker fee rate is a multiplier or a fixed flat amount\n    'tierBased': false,       // whether the fee depends on your trading tier (your trading volume)\n    'feeSide': 'get',         // string literal can be 'get', 'give', 'base', 'quote', 'other'\n    'precision': {            // number of decimal digits \"after the dot\"\n        'price': 8,           // integer or float for TICK_SIZE roundingMode, might be missing if not supplied by the exchange\n        'amount': 8,          // integer, might be missing if not supplied by the exchange\n        'cost': 8,            // integer, very few exchanges actually have it\n    },\n    'limits': {               // value limits when placing orders on this market\n        'amount': {\n            'min': 0.01,      // order amount should be > min\n            'max': 1000,      // order amount should be < max\n        },\n        'price': { ... },     // same min/max limits for the price of the order\n        'cost':  { ... },     // same limits for order cost = price * amount\n        'leverage': { ... },  // same min/max limits for the leverage of the order\n    },\n    'info':      { ... },     // the original unparsed market info from the exchange\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Orders with PageNumber-Based Pagination in CCXT\nDESCRIPTION: This snippet demonstrates fetching orders using page number-based pagination in Python. It uses a 'cursor' variable and updates it based on the exchange's response headers to retrieve the next page of results.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_73\n\nLANGUAGE: Python\nCODE:\n```\nif exchange.has['fetchOrders']:\n    cursor = 0  # exchange-specific type and value\n    all_orders = []\n    while True:\n        symbol = None  # change for your symbol\n        since = None\n        limit = 20  # change for your limit\n        params = {\n            'cursor': cursor,  # exchange-specific non-unified parameter name\n        }\n        orders = await exchange.fetch_orders(symbol, since, limit, params)\n        if len(orders):\n            # not thread-safu and exchange-specific !\n            cursor = exchange.last_response_headers['CB-AFTER']\n            all_orders += orders\n        else:\n            break\n```\n\n----------------------------------------\n\nTITLE: Withdraw Method (PHP)\nDESCRIPTION: Demonstrates the usage of the `withdraw` method in PHP to withdraw funds from an account. Requires currency code, amount, and recipient address.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_222\n\nLANGUAGE: php\nCODE:\n```\nwithdraw ($code, $amount, $address, $tag = null, $params = array ())\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Exchanges in PHP\nDESCRIPTION: This code demonstrates how to get the full list of supported exchange IDs programmatically using CCXT in PHP.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\ninclude 'ccxt.php';\nvar_dump (\\ccxt\\Exchange::$exchanges);\n```\n\n----------------------------------------\n\nTITLE: Running PHP Examples in CCXT\nDESCRIPTION: Shell command to execute PHP examples from the CCXT library. Replace example.php with the actual filename you want to run.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Examples.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp -f path/to/example.php # substitute for actual filename here\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT with pip for current user\nDESCRIPTION: Command to install the CCXT package using Python's pip package manager for the current user only, useful when you don't have system-wide permissions.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/go/tests/out.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install --user ccxt\n```\n\n----------------------------------------\n\nTITLE: JavaScript NPM Usage Examples\nDESCRIPTION: Examples of using CCXT in JavaScript with CommonJS and ES modules, showing basic exchange listing functionality.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/python/README.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n//cjs\nvar ccxt = require ('ccxt')\nconsole.log (ccxt.exchanges) // print all available exchanges\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n//esm\nimport {version, exchanges} from 'ccxt';\nconsole.log(version, Object.keys(exchanges));\n```\n\n----------------------------------------\n\nTITLE: Correct Ternary Operator Usage with Brackets\nDESCRIPTION: Properly formatted ternary conditional using brackets to clearly indicate operator precedence.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = {\n   'bar': (qux === 'baz') ? this.a () : this.b (), // much better now\n};\n```\n\n----------------------------------------\n\nTITLE: Cloning CCXT Repository with Git\nDESCRIPTION: Commands for cloning the CCXT GitHub repository with options for including full commit history or using a shallow clone to save bandwidth.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/ccxt/ccxt.git  # including 1GB of commit history\n\n# or\n\ngit clone https://github.com/ccxt/ccxt.git --depth 1  # avoid downloading 1GB of commit history\n```\n\n----------------------------------------\n\nTITLE: Order Query Methods in CCXT\nDESCRIPTION: List of available methods for querying orders with different parameters, and example of checking method availability through the .has property.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_105\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\n'use strict';\n\nconst ccxt = require ('ccxt')\nconst id = 'poloniex'\nexchange = new ccxt[id] ()\nconsole.log (exchange.has)\n```\n\nLANGUAGE: Python\nCODE:\n```\n# Python\nimport ccxt\nid = 'binance'\nexchange = getattr(ccxt, id)()\nprint(exchange.has)\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// PHP\n$exchange = new \\ccxt\\bitfinex();\nprint_r ($exchange->has); // or var_dump\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nexchange.has = {\n\n    // ... other flags ...\n\n    'fetchOrder': true, // available from the exchange directly and implemented in ccxt\n    'fetchOrders': false, // not available from the exchange or not implemented in ccxt\n    'fetchOpenOrders': true,\n    'fetchClosedOrders': 'emulated', // not available from the exchange, but emulated in ccxt\n\n    // ... other flags ...\n\n}\n```\n\n----------------------------------------\n\nTITLE: Network Structure Definition in CCXT\nDESCRIPTION: Defines the structure of a network object within the CCXT library. It includes keys such as ID, network, name, active status, fee, precision, deposit, withdraw, limits, and additional information specific to the network.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    'id':       'tron',         // string literal for referencing within an exchange\n    'network':  'TRC20'         // unified network\n    'name':     'Tron Network', // string, human-readable name, if specified\n    'active':    true,          // boolean, currency status (tradeable and withdrawable)\n    'fee':       0.123,         // withdrawal fee, flat\n    'precision': 8,             // number of decimal digits \"after the dot\" (depends on exchange.precisionMode)\n    'deposit':   true           // boolean, deposits are available\n    'withdraw':  true           // boolean, withdraws are available\n    'limits': {                 // value limits when placing orders on this market\n        'amount': {\n            'min': 0.01,        // order amount should be > min\n            'max': 1000,        // order amount should be < max\n        },\n        'withdraw': { ... },    // withdrawal limits\n        'deposit': {...},       // deposit limits\n    },\n    'info': { ... },            // the original unparsed currency info from the exchange\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Trades with PageNumber-Based Pagination in CCXT\nDESCRIPTION: This PHP snippet shows how to fetch trades using page number-based pagination. It uses a 'start' variable to represent the cursor and updates it from the exchange's JSON response to fetch subsequent pages of trades.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_74\n\nLANGUAGE: PHP\nCODE:\n```\nif ($exchange->has['fetchMyTrades']) {\n    $start = '0' // exchange-specific type and value\n    $all_trades = array ();\n    while (true) {\n        $symbol = null; // change for your symbol\n        $since = null;\n        $limit = 20; // change for your limit\n        $params = array (\n            'start' => $start, // exchange-specific non-unified parameter name\n        );\n        $trades = $exchange->fetchMyTrades ($symbol, $since, $limit, $params);\n        if (count($trades)) {\n            // not thread-safu and exchange-specific !\n            $last_json_response = $exchange->parse_json ($exchange->last_http_response);\n            $start = $last_json_response['next'];\n            $all_trades = array_merge ($all_trades, $trades);\n        } else {\n            break;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the CCXT Next.js Development Server\nDESCRIPTION: Commands for starting the development server using various JavaScript package managers. This will launch the application locally for testing and development.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/examples/ts/nextjs-page-router/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Exchange Status Structure in JavaScript\nDESCRIPTION: Structure of the exchange status information returned by the fetchStatus method. This shows the fields including operational status, update timestamp, ETA for maintenance, and additional information.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_85\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    'status': 'ok', // 'ok', 'shutdown', 'error', 'maintenance'\n    'updated': undefined, // integer, last updated timestamp in milliseconds if updated via the API\n    'eta': undefined, // when the maintenance or outage is expected to end\n    'url': undefined, // a link to a GitHub issue or to an exchange post on the subject\n    'info': { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Single Transfer Details in JavaScript\nDESCRIPTION: Method to fetch details for a specific transfer by its ID. Returns a transfer structure containing information about the requested transfer.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_152\n\nLANGUAGE: JavaScript\nCODE:\n```\nfetchTransfer (id, since = undefined, limit = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Exchange Integration JSON Template\nDESCRIPTION: Basic JSON structure template for implementing a new exchange integration in CCXT.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#2025-04-22_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   'id': 'example',\n   'name': 'Example Exchange',\n   'country': [ 'US', 'EU', 'CN', 'RU' ],\n   'rateLimit': 1000,\n   'version': '1',\n   'comment': 'This comment is optional',\n   'urls': {\n      'logo': 'https://example.com/image.jpg',\n      'api': 'https://api.example.com/api',\n      'www': 'https://www.example.com',\n      'doc': [\n         'https://www.example.com/docs/api',\n         'https://www.example.com/docs/howto',\n         'https://github.com/example/docs',\n      ],\n   },\n   'api': {\n      'public': {\n         'get': [\n            'endpoint/example',\n            'orderbook/{pair}/full',\n            '{pair}/ticker',\n         ],\n      },\n      'private': {\n         'post': [\n            'balance',\n         ],\n      },\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Transactions in PHP\nDESCRIPTION: Example of how to fetch transactions using the CCXT library in PHP. Checks if the exchange supports the fetch_transactions method before calling it.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_149\n\nLANGUAGE: PHP\nCODE:\n```\n// fetch_transactions ($code = null, $since = null, $limit = null, $params = {})\n\nif ($exchange->has['fetchTransactions']) {\n    $transactions = $exchange->fetch_transactions ($code, $since, $limit, $params);\n} else {\n    throw new Exception ($exchange->id . ' does not have the fetch_transactions method');\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching All Tickers in Python\nDESCRIPTION: Shows how to fetch all tickers at once using CCXT in Python.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_70\n\nLANGUAGE: Python\nCODE:\n```\nif (exchange.has['fetchTickers']):\n    print(exchange.fetch_tickers()) # all tickers indexed by their symbols\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT in Python Projects\nDESCRIPTION: Command to install the CCXT library in a Python project using PIP package manager.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Python\npip install ccxt  # or pip3 install ccxt\n```\n\n----------------------------------------\n\nTITLE: NewUpdates Mode Example in Python\nDESCRIPTION: Example of using newUpdates mode to receive only the latest trade updates.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-22_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nexchange = ccxtpro.binance({'newUpdates': True})\nwhile True:\n    trades = await exchange.watchTrades (symbol)\n    print(trades)\n```\n\n----------------------------------------\n\nTITLE: Browser CCXT Usage Example\nDESCRIPTION: Example of using CCXT in a browser environment after loading via CDN.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/README.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log (ccxt.exchanges) // print all available exchanges\n```\n\n----------------------------------------\n\nTITLE: Parsing HTTP Requests in PHP\nDESCRIPTION: This function parses a request message string into a PSR-7 request object. It handles the conversion of raw HTTP request strings into structured request objects for further processing.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/ringcentral-psr7/README.md#2025-04-22_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\nfunction parse_request($message)\n```\n\n----------------------------------------\n\nTITLE: Funding Rate History Structure Example - JavaScript\nDESCRIPTION: Example structure showing historical funding rate response format with rate and timestamp information.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_89\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    info: { ... },\n    symbol: \"BTC/USDT:USDT\",\n    fundingRate: -0.000068,\n    timestamp: 1642953600000,\n    datetime: \"2022-01-23T16:00:00.000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Comprehensive JavaScript CCXT Example with CommonJS\nDESCRIPTION: Advanced example demonstrating CCXT usage in JavaScript with multiple exchanges, including market data retrieval and order placement using the CommonJS module format.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/README.md#2025-04-22_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\n// cjs example\n'use strict';\nconst ccxt = require ('ccxt');\n\n(async function () {\n    let kraken    = new ccxt.kraken ()\n    let bitfinex  = new ccxt.bitfinex ({ verbose: true })\n    let huobipro  = new ccxt.huobipro ()\n    let okcoinusd = new ccxt.okcoin ({\n        apiKey: 'YOUR_PUBLIC_API_KEY',\n        secret: 'YOUR_SECRET_PRIVATE_KEY',\n    })\n\n    const exchangeId = 'binance'\n        , exchangeClass = ccxt[exchangeId]\n        , exchange = new exchangeClass ({\n            'apiKey': 'YOUR_API_KEY',\n            'secret': 'YOUR_SECRET',\n        })\n\n    console.log (kraken.id,    await kraken.loadMarkets ())\n    console.log (bitfinex.id,  await bitfinex.loadMarkets  ())\n    console.log (huobipro.id,  await huobipro.loadMarkets ())\n\n    console.log (kraken.id,    await kraken.fetchOrderBook (kraken.symbols[0]))\n    console.log (bitfinex.id,  await bitfinex.fetchTicker ('BTC/USD'))\n    console.log (huobipro.id,  await huobipro.fetchTrades ('ETH/USDT'))\n\n    console.log (okcoinusd.id, await okcoinusd.fetchBalance ())\n\n    // sell 1 BTC/USD for market price, sell a bitcoin for dollars immediately\n    console.log (okcoinusd.id, await okcoinusd.createMarketSellOrder ('BTC/USD', 1))\n\n    // buy 1 BTC/USD for $2500, you pay $2500 and receive à¸¿1 when the order is closed\n    console.log (okcoinusd.id, await okcoinusd.createLimitBuyOrder ('BTC/USD', 1, 2500.00))\n\n    // pass/redefine custom exchange-specific order params: type, amount, price or whatever\n    // use a custom order type\n    bitfinex.createLimitSellOrder ('BTC/USD', 1, 10, { 'type': 'trailing-stop' })\n\n}) ();\n```\n\n----------------------------------------\n\nTITLE: Overriding Unified API Params in PHP\nDESCRIPTION: Demonstrates overriding exchange-specific parameters in unified API calls using PHP. The `$params` array is passed as the last argument to `$exchange->fetch_order_book()` to customize the request. The parameters 'foo' and 'Hello' are examples of exchange-specific settings.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_63\n\nLANGUAGE: PHP\nCODE:\n```\n$params = array (\n    'foo' => 'bar',       // exchange-specific overrides in unified queries\n    'Hello' => 'World!',  // see their docs for more details on parameter names\n}\n\n// overrides go into the last argument to the unified call â HERE\n$result = $exchange->fetch_order_book ($symbol, $length, $params);\n```\n\n----------------------------------------\n\nTITLE: Alternative Refactoring Using If Statement\nDESCRIPTION: Complex ternary operation refactored into clearer if statement logic.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#2025-04-22_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nlet foo = 'bar' + baz;\nif (qux) {\n   foo += 'a';\n};\nfoo += this.c ();\n```\n\n----------------------------------------\n\nTITLE: Fetch Deposit Method\nDESCRIPTION: Explains the usage of the `fetchDeposit` method to retrieve a single deposit by its ID. Requires a deposit ID and a currency code. It returns a transaction structure.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_218\n\nLANGUAGE: javascript\nCODE:\n```\nfetchDeposit (id, code = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Working with Array Lengths in PHP\nDESCRIPTION: Shows the different methods required for measuring lengths in PHP, using count() for arrays and strlen() for strings.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\ncount(some_array);\n\n// or\n\nstrlen(some_string); // or mb_strlen\n```\n\n----------------------------------------\n\nTITLE: Trigger Order with Direction (Ascending) - CCXT\nDESCRIPTION: This snippet shows how to specify the 'triggerDirection' along with 'triggerPrice' for a trigger order. The 'triggerDirection' can be set to 'ascending' or 'descending', indicating the direction the price should move to trigger the order. It depends on the exchange if specifying direction is required or optional.  In this case the order will be triggered when the price goes upward and touches 1700.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_185\n\nLANGUAGE: javascript\nCODE:\n```\nparams = {\n    'triggerPrice': 1700,\n    'triggerDirection': 'ascending', // order will be triggered when price goes upward and touches 1700\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript ESM Exchange Example\nDESCRIPTION: Example showing basic CCXT usage with ES modules in JavaScript.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/python/README.md#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n//esm example\nimport {version, binance} from 'ccxt';\n\nconsole.log(version);\nconst exchange = new binance();\nconst ticker = await exchange.fetchTicker('BTC/USDT');\nconsole.log(ticker);\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Table for Certified Cryptocurrency Exchanges\nDESCRIPTION: This markdown code creates a table that displays information about certified cryptocurrency exchanges. It includes columns for logo, ID, name, API version, exchange type, certification status, pro status, and discount information.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|logo                                                                                                                                                                         |id             |name                                                                                     |ver                                                                                                                               |type                                                                                                    |certified                                                                                                                    |pro                                                                           |discount                                                                                                                                                                                                          |\n|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------|-----------------------------------------------------------------------------------------|:--------------------------------------------------------------------------------------------------------------------------------:|--------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------|:----------------------------------------------------------------------------:|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [![binance](https://github.com/user-attachments/assets/e9419b93-ccb0-46aa-9bff-c883f096274b)](https://accounts.binance.com/en/register?ref=D7YA7CLY)                        | binance       | [Binance](https://accounts.binance.com/en/register?ref=D7YA7CLY)                        | [![API Version *](https://img.shields.io/badge/*-lightgray)](https://developers.binance.com/en)                                  | ![CEX â Centralized EXchange](https://img.shields.io/badge/CEX-green.svg \"CEX â Centralized EXchange\") | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) | [![Sign up with Binance using CCXT's referral link for a 10% discount!](https://img.shields.io/static/v1?label=Fee&message=%2d10%25&color=orange)](https://accounts.binance.com/en/register?ref=D7YA7CLY)        |\n| [![binancecoinm](https://github.com/user-attachments/assets/387cfc4e-5f33-48cd-8f5c-cd4854dabf0c)](https://accounts.binance.com/en/register?ref=D7YA7CLY)                   | binancecoinm  | [Binance COIN-M](https://accounts.binance.com/en/register?ref=D7YA7CLY)                 | [![API Version *](https://img.shields.io/badge/*-lightgray)](https://binance-docs.github.io/apidocs/delivery/en/)                | ![CEX â Centralized EXchange](https://img.shields.io/badge/CEX-green.svg \"CEX â Centralized EXchange\") | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) | [![Sign up with Binance COIN-M using CCXT's referral link for a 10% discount!](https://img.shields.io/static/v1?label=Fee&message=%2d10%25&color=orange)](https://accounts.binance.com/en/register?ref=D7YA7CLY) |\n| [![binanceusdm](https://github.com/user-attachments/assets/871cbea7-eebb-4b28-b260-c1c91df0487a)](https://accounts.binance.com/en/register?ref=D7YA7CLY)                    | binanceusdm   | [Binance USDâ-M](https://accounts.binance.com/en/register?ref=D7YA7CLY)                 | [![API Version *](https://img.shields.io/badge/*-lightgray)](https://binance-docs.github.io/apidocs/futures/en/)                 | ![CEX â Centralized EXchange](https://img.shields.io/badge/CEX-green.svg \"CEX â Centralized EXchange\") | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) | [![Sign up with Binance USDâ-M using CCXT's referral link for a 10% discount!](https://img.shields.io/static/v1?label=Fee&message=%2d10%25&color=orange)](https://accounts.binance.com/en/register?ref=D7YA7CLY) |\n| [![bingx](https://github-production-user-asset-6210df.s3.amazonaws.com/1294454/253675376-6983b72e-4999-4549-b177-33b374c195e3.jpg)](https://bingx.com/invite/OHETOM)        | bingx         | [BingX](https://bingx.com/invite/OHETOM)                                                | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://bingx-api.github.io/docs/)                                  | ![CEX â Centralized EXchange](https://img.shields.io/badge/CEX-green.svg \"CEX â Centralized EXchange\") | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |                                                                                                                                                                                                                  |\n| [![bitget](https://github.com/user-attachments/assets/fbaa10cc-a277-441d-a5b7-997dd9a87658)](https://www.bitget.com/expressly?languageType=0&channelCode=ccxt&vipCode=tg9j) | bitget        | [Bitget](https://www.bitget.com/expressly?languageType=0&channelCode=ccxt&vipCode=tg9j) | [![API Version 2](https://img.shields.io/badge/2-lightgray)](https://www.bitget.com/api-doc/common/intro)                        | ![CEX â Centralized EXchange](https://img.shields.io/badge/CEX-green.svg \"CEX â Centralized EXchange\") | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |                                                                                                                                                                                                                  |\n| [![bitmart](https://github.com/user-attachments/assets/0623e9c4-f50e-48c9-82bd-65c3908c3a14)](http://www.bitmart.com/?r=rQCFLh)                                             | bitmart       | [BitMart](http://www.bitmart.com/?r=rQCFLh)                                             | [![API Version 2](https://img.shields.io/badge/2-lightgray)](https://developer-pro.bitmart.com/)                                 | ![CEX â Centralized EXchange](https://img.shields.io/badge/CEX-green.svg \"CEX â Centralized EXchange\") | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) | [![Sign up with BitMart using CCXT's referral link for a 30% discount!](https://img.shields.io/static/v1?label=Fee&message=%2d30%25&color=orange)](http://www.bitmart.com/?r=rQCFLh)                             |\n| [![bitmex](https://github.com/user-attachments/assets/c78425ab-78d5-49d6-bd14-db7734798f04)](https://www.bitmex.com/app/register/NZTR1q)                                    | bitmex        | [BitMEX](https://www.bitmex.com/app/register/NZTR1q)                                    | [![API Version 1](https://img.shields.io/badge/1-lightgray)](https://www.bitmex.com/app/apiOverview)                             | ![CEX â Centralized EXchange](https://img.shields.io/badge/CEX-green.svg \"CEX â Centralized EXchange\") | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) | [![Sign up with BitMEX using CCXT's referral link for a 10% discount!](https://img.shields.io/static/v1?label=Fee&message=%2d10%25&color=orange)](https://www.bitmex.com/app/register/NZTR1q)                    |\n| [![bybit](https://github.com/user-attachments/assets/97a5d0b3-de10-423d-90e1-6620960025ed)](https://www.bybit.com/register?affiliate_id=35953)                              | bybit         | [Bybit](https://www.bybit.com/register?affiliate_id=35953)                              | [![API Version 5](https://img.shields.io/badge/5-lightgray)](https://bybit-exchange.github.io/docs/inverse/)                     | ![CEX â Centralized EXchange](https://img.shields.io/badge/CEX-green.svg \"CEX â Centralized EXchange\") | [![CCXT Certified](https://img.shields.io/badge/CCXT-Certified-green.svg)](https://github.com/ccxt/ccxt/wiki/Certification) | [![CCXT Pro](https://img.shields.io/badge/CCXT-Pro-black)](https://ccxt.pro) |                                                                                                                                                                                                                  |\n```\n\n----------------------------------------\n\nTITLE: Leverage Structure (JavaScript)\nDESCRIPTION: This code snippet defines the structure of the object returned by the `fetchLeverage` and `fetchLeverages` methods in CCXT. It contains information about the leverage for a specific market, including exchange-specific data, the market symbol, the margin mode, and the leverage for long and short positions.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_275\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"info\": { ... },             // response from the exchange\n    \"symbol\": \"BTC/USDT:USDT\",  // unified market symbol\n    \"marginMode\": \"cross\",      // the margin mode either cross or isolated\n    \"longLeverage\": 100,        // the set leverage for a long position\n    \"shortLeverage\": 75,        // the set leverage for a short position\n}\n```\n\n----------------------------------------\n\nTITLE: Modified FormData Handling in body.js\nDESCRIPTION: Comparison showing how FormData handling has been commented out in the customized version. The condition that checks if the body is an instance of FormData has been disabled.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/ts/src/static_dependencies/node-fetch/diff.txt#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n< \t\t} /* else if (body instanceof FormData) {\n< \t\t\tBody is FormData\n---\n> \t\t} else if (body instanceof FormData) {\n> \t\t\t// Body is FormData\n```\n\n----------------------------------------\n\nTITLE: Watch Positions Method Signature in JavaScript\nDESCRIPTION: Defines the method signature for watching positions using CCXT Pro in JavaScript. It takes symbols, since, limit and params as arguments, with default values assigned to symbols, since and limit.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nwatchPositions (symbols = undefined, since = undefined, limit = undefined, params = {}) \n```\n\n----------------------------------------\n\nTITLE: Dictionary Key Access in Python\nDESCRIPTION: Example of how to properly access dictionary keys in Python, demonstrating the difference between accessing non-existent keys in Python and JavaScript.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Python\nsome_dictionary = {}\n\n# breaks\nif some_dictionary['nonExistentKey']:\n    # in Python the attempt to dereference the nonExistentKey value\n    # will throw a standard built-in KeyError exception\n\n# works\nif 'nonExistentKey' in some_dictionary and some_dictionary['nonExistentKey']:\n    # this is a way to check if the key exists before accessing the value\n\n# also works\nif some_dictionary.get('nonExistentKey'):\n    # another a way to check if the key exists before accessing the value...\n```\n\n----------------------------------------\n\nTITLE: Handling Array Length Transpilation in JavaScript\nDESCRIPTION: Demonstrates the correct way to handle array lengths when code needs to be transpiled to other languages like PHP, using a specific syntax pattern to indicate array length operations.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst arrayLength = someArray.length;\n// the above line ends with .length;\n// that ending is a hint for the transpiler that will recognize someArray\n// as an array variable in this place, rather than a string type variable\n// now we can use arrayLength for the arithmetic\n```\n\n----------------------------------------\n\nTITLE: Watch Positions Method Signature in PHP\nDESCRIPTION: Defines the method signature for watching positions using CCXT Pro in PHP. It takes symbols, since, lmit (typo) and params as arguments, with default values assigned to symbols, since and params.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_51\n\nLANGUAGE: php\nCODE:\n```\nwatch_positions($symbols = null, $since = null, $lmit = null, $params = array());\n```\n\n----------------------------------------\n\nTITLE: Mapping File Extensions to MIME Types in PHP\nDESCRIPTION: This function maps a file extension to a MIME type. It serves as a utility for determining content types based on file extensions.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/ringcentral-psr7/README.md#2025-04-22_snippet_26\n\nLANGUAGE: PHP\nCODE:\n```\nfunction mimetype_from_extension($extension)\n```\n\n----------------------------------------\n\nTITLE: Defining Ticker Structure in JavaScript\nDESCRIPTION: Illustrates the structure of a ticker object in CCXT, including various price and volume fields.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_65\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    'symbol':        string symbol of the market ('BTC/USD', 'ETH/BTC', ...)\n    'info':        { the original non-modified unparsed reply from exchange API },\n    'timestamp':     int (64-bit Unix Timestamp in milliseconds since Epoch 1 Jan 1970)\n    'datetime':      ISO8601 datetime string with milliseconds\n    'high':          float, // highest price\n    'low':           float, // lowest price\n    'bid':           float, // current best bid (buy) price\n    'bidVolume':     float, // current best bid (buy) amount (may be missing or undefined)\n    'ask':           float, // current best ask (sell) price\n    'askVolume':     float, // current best ask (sell) amount (may be missing or undefined)\n    'vwap':          float, // volume weighed average price\n    'open':          float, // opening price\n    'close':         float, // price of last trade (closing price for current period)\n    'last':          float, // same as `close`, duplicated for convenience\n    'previousClose': float, // closing price for the previous period\n    'change':        float, // absolute change, `last - open`\n    'percentage':    float, // relative change, `(change/open) * 100`\n    'average':       float, // average price, `(last + open) / 2`\n    'baseVolume':    float, // volume of base currency traded for last 24 hours\n    'quoteVolume':   float, // volume of quote currency traded for last 24 hours\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying CCXT Repository Structure in Shell\nDESCRIPTION: This shell snippet shows the directory structure of the CCXT repository, including key files and folders for different programming language implementations and build scripts.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n/                          # root directory aka npm module/package folder for Node.js\n/.babelrc                  # babel config used for making the ES5 version of the library\n/.eslintrc                 # linter\n/.gitattributes            # contains linguist settings for language detection in repo\n/.gitignore                # ignore it\n/.npmignore                # files to exclude from the NPM package\n/.travis.yml               # a YAML config for travis-ci (continuous integration)\n/CONTRIBUTING.md           # this file\n/LICENSE.txt               # MIT\n/README.md                 # master markdown for GitHub, npmjs.com, npms.io, yarn and others\n/build/                    # build scripts\n/build/export-exchanges.js # used to create tables of exchanges in the docs during the build\n/build/transpile.js        # the transpilation script\n/build/update-badges.js    # a JS script to update badges in the README and in docs\n/build/vss.js              # reads single-sourced version from package.json and writes it everywhere\n/dist/                     # a folder for the generated browser bundle of CCXT\n/ccxt.js                   # entry point for the master JS version of the ccxt library\n/ccxt.php                  # entry point for the PHP version of the ccxt library\n/js/                       # the JS version of the library\n/ts/                       # the TypeScript version of the library\n/php/                      # PHP ccxt module/package folder\n/cs/                       # C#/dotnet package folder\n/python/                   # Python ccxt module/package folder for PyPI\n/python/__init__.py        # entry point for the Python version of the ccxt.library\n/python/async_support/     # asynchronous version of the ccxt.library for Python 3.5.3+ asyncio\n/python/base/              # base code for the Python version of the ccxt library\n/python/MANIFEST.in        # a PyPI-package file listing extra package files (license, configs, etc...)\n/python/README.md          # a copy of README.md for PyPI\n/python/setup.cfg          # wheels config file for the Python package\n/python/setup.py           # pip/setuptools script (build/install) for ccxt in Python\n/python/tox.ini            # tox config for Python\n/examples/                 # self-explanatory\n/examples/js               # ...\n/examples/php              # ...\n/examples/py               # ...\n/exchanges.cfg             # custom bundle config for including only the exchanges you need\n/package.json              # npm package file, also used in setup.py for version single-sourcing\n/run-tests.js              # a front-end to run individual tests of all exchanges in all languages (JS/PHP/Python)\n/wiki/                     # the source of all docs (edits go here)\n```\n\n----------------------------------------\n\nTITLE: Implementing a DroppingStream in PHP\nDESCRIPTION: Shows how to create a DroppingStream that discards data once the underlying stream reaches a specified size.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/ringcentral-psr7/README.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse RingCentral\\Psr7;\n\n// Create an empty stream\n$stream = Psr7\\stream_for();\n\n// Start dropping data when the stream has more than 10 bytes\n$dropping = new Psr7\\DroppingStream($stream, 10);\n\n$stream->write('01234567890123456789');\necho $stream; // 0123456789\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT with npm globally\nDESCRIPTION: Command to install CCXT globally using npm, making it available system-wide for Node.js applications.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/go/tests/out.txt#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install ccxt --global\n```\n\n----------------------------------------\n\nTITLE: Configuring Exchange API Keys in JSON\nDESCRIPTION: Example structure for storing exchange API credentials and options in keys.local.json file. This file should be created in the root folder and is gitignored.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#2025-04-22_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"ftx\": {\n        \"apiKey\": \"XXX\",\n        \"secret\": \"YYY\"\n    },\n    \"binance\": {\n        \"apiKey\": \"XXX\",\n        \"secret\": \"YYY\",\n        \"options\": {\n            \"some-option\": \"some value\"\n        }\n    },\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Exchange API Methods in JavaScript for CCXT\nDESCRIPTION: This code demonstrates how to structure the API mapping for both public and private API calls. It organizes endpoints by HTTP method (GET, POST) and specifies their respective paths.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/ts/src/static_dependencies/ethers/utils/test.txt#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst api = {\n    'public': {\n        'get': [\n            'endpoint/path',\n            'endpoint/{path_parameter}/{path_parameter}',\n        ],\n        'post': [\n            'endpoint/path',\n        ],\n    },\n    'private': {\n        'get': [\n            'endpoint/path',\n        ],\n        'post': [\n            'endpoint/path',\n        ],\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Perpetual Swap Symbol\nDESCRIPTION: This snippet shows the structure of a perpetual swap (perpetual future) contract symbol in CCXT. It highlights how the base currency, quote currency, and settlement currency are represented in the symbol, distinguishing between inverse and linear swaps.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_49\n\nLANGUAGE: JavaScript\nCODE:\n```\n// base asset or currency\n// â\n// â  quote asset or currency\n// â  â\n// â  â    settlement asset or currency\n// â  â    â\n// â  â    â\n'BTC/USDT:BTC'  // BTC/USDT inverse perpetual swap contract funded in BTC\n'BTC/USDT:USDT' // BTC/USDT linear perpetual swap contract funded in USDT\n'ETH/USDT:ETH'  // ETH/USDT inverse perpetual swap contract funded in ETH\n'ETH/USDT:USDT' // ETH/USDT linear perpetual swap contract funded in USDT\n```\n\n----------------------------------------\n\nTITLE: Underlying Assets Structure (JavaScript)\nDESCRIPTION: This is a simple array of strings representing the underlying asset market IDs.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_128\n\nLANGUAGE: javascript\nCODE:\n```\n[ 'BTC_USDT', 'ETH_USDT', 'DOGE_USDT' ]\n```\n\n----------------------------------------\n\nTITLE: Creating a Trigger Order with CCXT (JS, Python, PHP)\nDESCRIPTION: This code snippet demonstrates how to create a trigger order using the CCXT library.  It defines a 'triggerPrice' within the 'params' object and passes it to the 'createOrder' method. The exchange then uses this price to trigger the order execution.  The createOrder method is called with the symbol, type, side, amount, price and params. The order will be triggered when the price touches 1700, with the direction automatically detected by the exchange.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_184\n\nLANGUAGE: php\nCODE:\n```\n$params = {\n    'triggerPrice': 1700,\n}\n$order = $exchange->create_order ('ETH/USDT', 'market', 'buy', 0.1, 1500, $params)\n```\n\n----------------------------------------\n\nTITLE: Accessing Fees from Currencies\nDESCRIPTION: Shows how to access transaction fees directly from the `.currencies` property of the exchange object.  This aspect is not yet unified and may change.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_254\n\nLANGUAGE: javascript\nCODE:\n```\nexchange.currencies['ETH']['fee'] // tx/withdrawal fee rate for ETH\nexchange.currencies['BTC']['fee'] // tx/withdrawal fee rate for BTC\n```\n\n----------------------------------------\n\nTITLE: Refactoring Complex Ternary Expressions in JavaScript\nDESCRIPTION: Examples of breaking down complex ternary expressions into simpler, more readable code structures to improve maintainability and transpiler compatibility.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CONTRIBUTING.md#2025-04-22_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// before:\n// const foo = {\n//    'bar': 'a' + qux === 'baz' ? this.a () : this.b () + 'b',\n// };\n// ----------------------------------------------------------------------------\n// after:\nconst bar = (qux === 'baz') ? this.a () : this.b ();\nconst foo = {\n   'bar': 'a' + bar + 'b',\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// before:\n// const foo = 'bar' + baz + qux ? 'a' : '' + this.c ();\n// ----------------------------------------------------------------------------\n// after:\nlet foo = 'bar' + baz;\nif (qux) {\n   foo += 'a';\n};\nfoo += this.c ();\n```\n\n----------------------------------------\n\nTITLE: Browser Script Integration\nDESCRIPTION: Example of including CCXT in a browser environment using script tags and accessing the global CCXT object.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/python/README.md#2025-04-22_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/ccxt@4.4.77/dist/ccxt.browser.min.js\"></script>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconsole.log (ccxt.exchanges) // print all available exchanges\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT via npm for JavaScript\nDESCRIPTION: This snippet shows how to install the CCXT library using npm for JavaScript projects.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install ccxt\n```\n\n----------------------------------------\n\nTITLE: Closing of Commented Blob Import Block in index.js\nDESCRIPTION: Shows the closure of the commented-out import block in the customized version vs the active imports in the original library.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/ts/src/static_dependencies/node-fetch/diff.txt#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n< } from 'fetch-blob/from.js';*/\n---\n> } from 'fetch-blob/from.js';\n```\n\n----------------------------------------\n\nTITLE: Go CCXT Implementation\nDESCRIPTION: Example of using CCXT in Go environment.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/python/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngo install github.com/ccxt/ccxt/go/v4@latest\n```\n\nLANGUAGE: Go\nCODE:\n```\nimport \"ccxt\"\nfmt.Println(ccxt.Exchanges)\n```\n\n----------------------------------------\n\nTITLE: Rewinding PSR-7 Message Bodies in PHP\nDESCRIPTION: This function attempts to rewind a PSR-7 MessageInterface body stream. It only rewinds the stream if the current position is not at the beginning (0), throwing an exception on failure.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/ringcentral-psr7/README.md#2025-04-22_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nfunction rewind_body(MessageInterface $message)\n```\n\n----------------------------------------\n\nTITLE: Specifying Noble Curves Library Version in YAML\nDESCRIPTION: This YAML snippet defines the version and source of the Noble Curves library used in the project. It specifies version 0.8.3 and provides the GitHub repository URL.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/ts/src/static_dependencies/noble-curves/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 0.8.3\nsource: https://github.com/paulmillr/noble-curves\n```\n\n----------------------------------------\n\nTITLE: Old Approach to Number Handling in CCXT\nDESCRIPTION: Shows the previous float-based approach to handling numeric values in CCXT parsers, which is being phased out due to precision issues with floating-point arithmetic.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst amount = this.safeFloat (order, 'amount');\nconst remaining = this.safeFloat (order, 'remaining');\nif (remaining > 0) {\n    status = 'open';\n} else {\n    status = 'closed';\n}\n// ...\nreturn {\n    // ...\n    'amount': amount,\n    'remaining': remaining,\n    'status': status,\n    // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Use of Control Characters in JavaScript Strings\nDESCRIPTION: Demonstrates the proper way to handle control characters in strings for cross-language compatibility, using double quotes with necessary ESLint configuration comments.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst a = 'GET' + method.toLowerCase () + \"\\n\" + path; // eslint-disable-line quotes\n// eslint-disable-next-line quotes\nconst b = \"api\\nfoobar.com\\n\";\n```\n\n----------------------------------------\n\nTITLE: Building CCXT Command\nDESCRIPTION: Command to build and generate PHP/Python versions from TypeScript source files.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#2025-04-22_snippet_30\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Running CCXT Docker Environment\nDESCRIPTION: Command to run CCXT development environment using Docker\nSOURCE: https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose run --rm ccxt\n```\n\n----------------------------------------\n\nTITLE: Incorrect Exchange Instance Usage (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates an incorrect pattern where multiple instances of the same exchange are created and used concurrently. This defeats the purpose of the built-in rate limiter, as each instance has its own rate limiter, leading to potential rate limit violations.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// DO NOT DO THIS!\n\nconst binance1 = new ccxt.binance ()\nconst binance2 = new ccxt.binance ()\nconst binance3 = new ccxt.binance ()\n\nwhile (true) {\n    const result = await Promise.all ([\n        binance1.fetchOrderBook ('BTC/USDT'),\n        binance2.fetchOrderBook ('ETH/USDT'),\n        binance3.fetchOrderBook ('ETH/BTC'),\n    ])\n    console.log (result)\n}\n```\n\n----------------------------------------\n\nTITLE: Issue Code Template\nDESCRIPTION: Placeholder for user to insert reproduction code without sensitive API keys\nSOURCE: https://github.com/ccxt/ccxt/blob/master/ISSUE_TEMPLATE.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nREPLACE_THIS_WITH_YOUR_CODE_TO_REPRODUCE_THE_ISSUE_WITHOUT_YOUR_KEYS\n```\n\n----------------------------------------\n\nTITLE: Error Output Template\nDESCRIPTION: Placeholder for user to insert error messages or exceptions in text format\nSOURCE: https://github.com/ccxt/ccxt/blob/master/ISSUE_TEMPLATE.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nREPLACE_THIS_WITH_YOUR_OUTPUT_ERROR_EXCEPTION_IN_TEXT_NO_SCREENSHOTS\n```\n\n----------------------------------------\n\nTITLE: CCXT Pro Architecture Diagram\nDESCRIPTION: ASCII diagram showing the structure of CCXT Pro, including its relationship to CCXT and the different API layers it provides.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n                                User\n\n       +-------------------------------------------------------------+\n       |                          CCXT Pro                           |\n       +------------------------------+------------------------------+\n       |            Public            .           Private            |\n       +=============================================================+\n       â                              .                              |\n       â                  The Unified CCXT Pro API                   |\n       |                              .                              |\n       |       loadMarkets            .           watchBalance       |\n       |       watchTicker            .       watchCreateOrder       |\n       |       watchTickers           .       watchCancelOrder       |\n       |       watchOrderBook         .             watchOrder       |\n       |       watchOHLCV             .            watchOrders       |\n       |       watchStatus            .        watchOpenOrders       |\n       |       watchTrades            .      watchClosedOrders       |\n       |                              .          watchMyTrades       |\n       |                              .           watchDeposit       |\n       |                              .          watchWithdraw       |\n       â                              .                              |\n       +=============================================================+\n       â                              .                              |\n       |            The Underlying Exchange-Specific APIs            |\n       |         (Derived Classes And Their Implementations)         |\n       â                              .                              |\n       +=============================================================+\n       â                              .                              |\n       |                 CCXT Pro Base Exchange Class                |\n       â                              .                              |\n       +=============================================================+\n\n       +-------------------------------------------------------------+\n       |                                                             |\n       |                            CCXT                             |\n       |                                                             |\n       +=============================================================\n```\n\n----------------------------------------\n\nTITLE: Another Example of Problematic Ternary Usage\nDESCRIPTION: Additional example of confusing ternary conditional that lacks proper bracketing and clear operator precedence.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = 'bar' + baz + qux ? 'a' : '' + this.c ();\n```\n\n----------------------------------------\n\nTITLE: Defining BaseError Class in JavaScript for CCXT\nDESCRIPTION: Implementation of the BaseError class in JavaScript, which serves as the base for all exceptions in CCXT. It extends the built-in Error class and includes a workaround for ES5 compatibility.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_175\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass BaseError extends Error {\n    constructor () {\n        super ()\n        // a workaround to make `instanceof BaseError` work in ES5\n        this.constructor = BaseError\n        this.__proto__   = BaseError.prototype\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running CCXT CLI Examples\nDESCRIPTION: Examples of running CCXT CLI commands in different programming languages to fetch ticker data\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CLI.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnode examples/js/cli okx fetchTicker ETH/USDT\n```\n\nLANGUAGE: python\nCODE:\n```\npython3 examples/py/cli.py okx fetch_ticker ETH/USDT\n```\n\nLANGUAGE: php\nCODE:\n```\nphp -f examples/php/cli.php okx fetch_ticker ETH/USDT\n```\n\n----------------------------------------\n\nTITLE: Incorrect Exchange Instance Pattern - JavaScript\nDESCRIPTION: Shows an anti-pattern that incorrectly creates new exchange instances repeatedly, which can break rate limits.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function tick () {\n    const exchange = new ccxt.binance ({ enableRateLimit: true })\n    const response = await exchange.fetchOrderBook ('BTC/USDT')\n    // ... some processing here ...\n    return response\n}\n\nwhile (true) {\n    const result = await tick ()\n    console.log (result)\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Symbol Parsing in JavaScript\nDESCRIPTION: Examples of incorrect ways to parse exchange-specific market IDs into unified structures. These methods directly use exchange-specific IDs without proper conversion.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nparseTrade (trade, market = undefined) {\n   // parsing code...\n   return {\n      'info': trade,\n      'symbol': trade['pair'], // very bad, returning exchange-specific market-ids in a unified structure!\n      // other fields...\n   };\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nparseTrade (trade, market = undefined) {\n   // parsing code...\n   return {\n      'info': trade,\n      'symbol': trade['symbol'], // very bad, returning exchange-specific market-ids in a unified structure!\n      // other fields...\n   };\n}\n```\n\n----------------------------------------\n\nTITLE: Modified Condition Closing in body.js\nDESCRIPTION: Shows the closure of the commented-out FormData condition in the customized version vs the original code, including changes to the else clause structure.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/ts/src/static_dependencies/node-fetch/diff.txt#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n< \t\t} */\n< \t\telse {\n---\n> \t\t} else {\n```\n\n----------------------------------------\n\nTITLE: Scure Base MIT License Header\nDESCRIPTION: MIT license declaration for scure-base library by Paul Miller\nSOURCE: https://github.com/ccxt/ccxt/blob/master/dist/ccxt.browser.min.js.LICENSE.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n```\n\n----------------------------------------\n\nTITLE: Importing CCXT in Node.js\nDESCRIPTION: Example of how to require CCXT in a Node.js application, demonstrating how to access the library after installation.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/go/tests/out.txt#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar ccxt = require ('ccxt')\n```\n\n----------------------------------------\n\nTITLE: Noble Hashes MIT License Header\nDESCRIPTION: MIT license declaration for noble-hashes library by Paul Miller\nSOURCE: https://github.com/ccxt/ccxt/blob/master/dist/ccxt.browser.min.js.LICENSE.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n```\n\n----------------------------------------\n\nTITLE: Printing Required Credentials Python\nDESCRIPTION: This snippet demonstrates how to print the required credentials for an exchange using Python. It initializes a CoinbasePro exchange object and then prints the `requiredCredentials` property to the console, revealing the necessary authentication details.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_142\n\nLANGUAGE: python\nCODE:\n```\nimport ccxt\nexchange = ccxt.coinbasepro()\nprint(exchange.requiredCredentials)  # prints required credentials\nexchange.check_required_credentials()  # raises AuthenticationError\n```\n\n----------------------------------------\n\nTITLE: Incorrect Way of Sending Unified Symbols - JavaScript\nDESCRIPTION: This code example demonstrates what NOT to do when sending market symbols to exchanges. Never send unified symbols directly to exchanges as they are not interchangeable with exchange-specific market IDs.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nasync fetchTicker (symbol, params = {}) {\n   const request = {\n      'pair': symbol, // very bad, sending unified symbols to the exchange directly\n   };\n   const response = await this.publicGetEndpoint (request);\n   // parse in a unified way...\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Stream Contents to String in PHP\nDESCRIPTION: This function copies the contents of a PSR-7 StreamInterface into a string until the given number of bytes have been read. It allows for efficient stream content extraction with optional length limitation.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/ringcentral-psr7/README.md#2025-04-22_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\nfunction copy_to_string(StreamInterface $stream, $maxLen = -1)\n```\n\n----------------------------------------\n\nTITLE: Parsing Query Strings in PHP\nDESCRIPTION: This function parses a query string into an associative array. It handles multiple values for the same key and supports URL encoding, but does not parse nested PHP-style arrays.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/ringcentral-psr7/README.md#2025-04-22_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\nfunction parse_query($str, $urlEncoding = true)\n```\n\n----------------------------------------\n\nTITLE: Cloning CCXT Repository\nDESCRIPTION: Command to clone the CCXT library from GitHub repository\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Install.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/ccxt/ccxt.git\n```\n\n----------------------------------------\n\nTITLE: Creating a Market Buy Order with Cost in Python\nDESCRIPTION: This snippet demonstrates how to create a market buy order with a specified cost using CCXT. It first checks if the exchange supports this feature, then uses the createMarketBuyOrderWithCost method.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/FAQ.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\norder = await exchange.createMarketBuyOrderWithCost(symbol, cost)\n```\n\n----------------------------------------\n\nTITLE: Parsing HTTP Responses in PHP\nDESCRIPTION: This function parses a response message string into a PSR-7 response object. It handles the conversion of raw HTTP response strings into structured response objects for further processing.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/ringcentral-psr7/README.md#2025-04-22_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\nfunction parse_response($message)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Orders in PHP\nDESCRIPTION: This snippet shows how to create an order with a custom user ID on HitBTC using the CCXT library in PHP. It passes a 'clientOrderId' parameter within the 'params' array to include the custom user ID. Requires an initialized HitBTC exchange object.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_200\n\nLANGUAGE: PHP\nCODE:\n```\n// add custom user id to your order\n$hitbtc->create_order ('BTC/USD', 'limit', 'buy', 1, 3000, array ('clientOrderId' => '123'));\n```\n\n----------------------------------------\n\nTITLE: Instantiating Exchanges with CCXT in Python\nDESCRIPTION: This snippet demonstrates how to instantiate cryptocurrency exchanges using the CCXT library in Python, including setting unique IDs and accessing exchanges by variable ID. Requires the CCXT Python library to be installed.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nimport ccxt\nexchange = ccxt.okcoin () # default id\nokcoin1 = ccxt.okcoin ({ 'id': 'okcoin1' })\nokcoin2 = ccxt.okcoin ({ 'id': 'okcoin2' })\nid = 'btcchina'\nbtcchina = eval ('ccxt.%s ()' % id)\ncoinbasepro = getattr (ccxt, 'coinbasepro') ()\n\n# from variable id\nexchange_id = 'binance'\nexchange_class = getattr(ccxt, exchange_id)\nexchange = exchange_class({\n    'apiKey': 'YOUR_API_KEY',\n    'secret': 'YOUR_SECRET',\n})\n```\n\n----------------------------------------\n\nTITLE: Precision Mode Example A (JS)\nDESCRIPTION: JavaScript example demonstrating the effect of `DECIMAL_PLACES` precision mode on formatting amounts. It shows how `amountToPrecision` truncates the amount based on the precision defined in market data when the precision mode is set to `DECIMAL_PLACES`.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_38\n\nLANGUAGE: JavaScript\nCODE:\n```\n// case A\nexchange.precisionMode = ccxt.DECIMAL_PLACES\nmarket = exchange.market (symbol)\nmarket['precision']['amount'] === 8 // up to 8 decimals after the dot\nexchange.amountToPrecision (symbol, 0.123456789) === 0.12345678\nexchange.amountToPrecision (symbol, 0.0000000000123456789) === 0.0000000 === 0.0\n```\n\n----------------------------------------\n\nTITLE: Currency Structure Definition - JavaScript\nDESCRIPTION: Defines the structure of a currency object used in CCXT with all possible fields and their purposes.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    'id':       'btc',       // string literal for referencing within an exchange\n    'code':     'BTC',       // uppercase unified string literal code the currency\n    'name':     'Bitcoin',   // string, human-readable name, if specified\n    'active':    true,       // boolean, currency status (tradeable and withdrawable)\n    'fee':       0.123,      // withdrawal fee, flat\n    'precision': 8,          // number of decimal digits \"after the dot\" (depends on exchange.precisionMode)\n    'deposit':   true        // boolean, deposits are available\n    'withdraw':  true        // boolean, withdraws are available\n    'limits': {              // value limits when placing orders on this market\n        'amount': {\n            'min': 0.01,     // order amount should be > min\n            'max': 1000,     // order amount should be < max\n        },\n        'withdraw': { ... }, // withdrawal limits\n        'deposit': {...},\n    },\n    'networks': {...}        // network structures indexed by unified network identifiers (ERC20, TRC20, BSC, etc)\n    'info': { ... },         // the original unparsed currency info from the exchange\n}\n```\n\n----------------------------------------\n\nTITLE: Watching Tickers with CCXT Pro (PHP)\nDESCRIPTION: This PHP code snippet demonstrates how to subscribe to ticker updates for multiple symbols via WebSocket using CCXT Pro. It first checks if the exchange supports the `watchTickers` method. If so, it enters an infinite loop to fetch and display ticker data for the given symbols continuously. Error handling is included to catch and log any exceptions.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nif ($exchange->has['watchTickers']) {\n    $exchange::execute_and_run(function() use ($exchange, $symbols, $params) {\n        while (true) {\n            try {\n                $tickers = yield $exchange->watch_tickers($symbols, $params);\n                echo date('c'), ' ', json_encode($tickers), \"\\n\";\n            } catch (Exception $e) {\n                echo get_class($e), ' ', $e->getMessage(), \"\\n\";\n            }\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Loading and Initializing a Cryptocurrency Exchange in CCXT\nDESCRIPTION: Creates an instance of the Gate.io exchange and loads its markets. After execution, it prints the number of markets available on the exchange.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/examples/py/playing_with_ccxt_example.ipynb#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport ccxt\n\n# Load Exchange\nexchange = ccxt.gate ()\nexchange.load_markets ()\n\nprint ('exchange: %d markets loaded!' % len (exchange.markets))\n```\n\n----------------------------------------\n\nTITLE: Fetch Deposit Method ID JavaScript\nDESCRIPTION: This snippet shows the function signature and parameters for fetching a deposit method ID using the `fetchDepositMethodId` method. Requires an ID, and optional params.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_215\n\nLANGUAGE: javascript\nCODE:\n```\nfetchDepositMethodId (id, params = {})\n```\n\n----------------------------------------\n\nTITLE: Using HttpsProxyAgent with WebSocket in TypeScript\nDESCRIPTION: Example demonstrating how to use HttpsProxyAgent with the WebSocket protocol. The agent is configured with a proxy server address and passed to the WebSocket constructor to establish a connection through the proxy.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/ts/src/static_dependencies/proxies/https-proxy-agent/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport WebSocket from 'ws';\nimport { HttpsProxyAgent } from 'https-proxy-agent';\n\nconst agent = new HttpsProxyAgent('http://168.63.76.32:3128');\nconst socket = new WebSocket('ws://echo.websocket.org', { agent });\n\nsocket.on('open', function () {\n  console.log('\"open\" event!');\n  socket.send('hello world');\n});\n\nsocket.on('message', function (data, flags) {\n  console.log('\"message\" event! %j %j', data, flags);\n  socket.close();\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Market Order Support PHP\nDESCRIPTION: This snippet shows how to check if an exchange supports market orders using the `.has['createMarketOrder']` property in PHP.  This is useful for determining if you can use market orders with a particular exchange.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_178\n\nLANGUAGE: php\nCODE:\n```\nif ($exchange->has['createMarketOrder']) {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Open Interest Structure (JavaScript)\nDESCRIPTION: This is the data structure representing open interest information. It contains details such as symbol, base volume, quote volume, open interest amount, open interest value, timestamp, and datetime.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_124\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    symbol: 'BTC/USDT',\n    baseVolume: 80872.801, // deprecated\n    quoteVolume: 3508262107.38, // deprecated\n    openInterestAmount: 80872.801,\n    openInterestValue: 3508262107.38,\n    timestamp: 1649379000000,\n    datetime: '2022-04-08T00:50:00.000Z',\n    info: {\n        symbol: 'BTCUSDT',\n        sumOpenInterest: '80872.80100000',\n        sumOpenInterestValue: '3508262107.38000000',\n        timestamp: '1649379000000'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing CCXT ES Modules\nDESCRIPTION: Example of how to import CCXT using ES6 module syntax in JavaScript, an alternative to CommonJS require for modern environments.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/go/tests/out.txt#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport ccxt from 'ccxt'\n```\n\n----------------------------------------\n\nTITLE: Incorrect Market Symbol Handling in JavaScript\nDESCRIPTION: Examples of incorrect ways to handle market symbols when making API requests. These methods directly send unified symbols to the exchange, which is not recommended.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nasync fetchTicker (symbol, params = {}) {\n   const request = {\n      'pair': symbol, // very bad, sending unified symbols to the exchange directly\n   };\n   const response = await this.publicGetEndpoint (request);\n   // parse in a unified way...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nasync fetchTicker (symbol, params = {}) {\n   const request = {\n      'symbol': symbol, // very bad, sending unified symbols to the exchange directly\n   };\n   const response = await this.publicGetEndpoint (request);\n   // parse in a unified way...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Number Type to String in CCXT (JavaScript)\nDESCRIPTION: Demonstrates how to configure CCXT to use string-based math instead of native numbers in JavaScript. This is useful for situations requiring fixed-point arithmetic or high precision.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_298\n\nLANGUAGE: javascript\nCODE:\n```\nconst ex = new ccxt.coinbase ();\nex.number = String ; // String | Number\n```\n\n----------------------------------------\n\nTITLE: Cryptocurrency Exchange Documentation in RestructuredText\nDESCRIPTION: A table in reStructuredText format documenting various cryptocurrency exchanges, their API versions, certifications and CCXT Pro support. Contains logos, links and badges for each exchange.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/readme.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n* - .. image:: https://user-images.githubusercontent.com/51840849/87153921-edf53180-c2c0-11ea-96b9-f2a9a95a455b.jpg\n     :target: https://bittrex.com/Account/Register?referralCode=1ZE-G0G-M3B\n     :alt: bittrex\n\n - bittrex\n - `Bittrex <https://bittrex.com/Account/Register?referralCode=1ZE-G0G-M3B>`__\n - .. image:: https://img.shields.io/badge/3-lightgray\n     :target: https://bittrex.github.io/api/v3\n     :alt: API Version 3\n\n - \n - .. image:: https://img.shields.io/badge/CCXT-Pro-black\n     :target: https://ccxt.pro\n     :alt: CCXT Pro\n```\n\n----------------------------------------\n\nTITLE: Transaction Structure\nDESCRIPTION: Defines the structure of the transaction object returned by the deposit and withdrawal methods. Includes fields such as `info`, `id`, `txid`, `timestamp`, `datetime`, `addressFrom`, `address`, `addressTo`, `tagFrom`, `tag`, `tagTo`, `type`, `amount`, `currency`, `status`, `updated`, `comment`, and `fee`.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_228\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    'info':      { ... },\n    'id':       '123456',\n    'txid':     '0x68bfb29821c50ca35ef3762f887fd3211e4405aba1a94e448a4f218b850358f0',\n    'timestamp': 1534081184515,\n    'datetime': '2018-08-12T13:39:44.515Z',\n    'addressFrom': '0x38b1F8644ED1Dbd5DcAedb3610301Bf5fa640D6f',\n    'address':  '0x02b0a9b7b4cDe774af0f8e47cb4f1c2ccdEa0806',\n    'addressTo': '0x304C68D441EF7EB0E2c056E836E8293BD28F8129',\n    'tagFrom', '0xabcdef',\n    'tag':      '0xabcdef'\n    'tagTo': '0xhijgklmn',\n    'type':     'deposit',\n    'amount':    1.2345,\n    'currency': 'ETH',\n    'status':   'pending',\n    'updated':   undefined,\n    'comment':  'a comment or message defined by the user if any',\n    'fee': {\n        'currency': 'ETH',\n        'cost': 0.1234,\n        'rate': undefined,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Balance - PHP Example\nDESCRIPTION: This PHP example showcases the usage of the `fetch_balance` method in the ccxt library. It creates an exchange instance and uses `var_dump` to display the returned balance information. Requires the ccxt library.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_157\n\nLANGUAGE: php\nCODE:\n```\nvar_dump ($exchange->fetch_balance ());\n```\n\n----------------------------------------\n\nTITLE: Another Incorrect Symbol Parsing - JavaScript\nDESCRIPTION: Another example of incorrect symbol parsing, showing why exchange-specific market IDs should not be placed directly in unified structures.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/CONTRIBUTING.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nparseTrade (trade, market = undefined) {\n   // parsing code...\n   return {\n      'info': trade,\n      'symbol': trade['symbol'], // very bad, returning exchange-specific market-ids in a unified structure!\n      // other fields...\n   };\n}\n```\n\n----------------------------------------\n\nTITLE: Commented FormData Import in index.js\nDESCRIPTION: Shows how the FormData import has been commented out in the customized version of index.js compared to the active import in the original library.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/ts/src/static_dependencies/node-fetch/diff.txt#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n< // import {FormData} from 'formdata-polyfill/esm.min.js';\n---\n> import {FormData} from 'formdata-polyfill/esm.min.js';\n```\n\n----------------------------------------\n\nTITLE: Market Buy Order with Price JavaScript\nDESCRIPTION: This snippet demonstrates how to create a market buy order with a specified price on an exchange where `createMarketBuyOrderRequiresPrice` is true. It calculates the total cost within the library.  This snippet shows the concept of placing a market buy order by utilizing the createOrder() method.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_179\n\nLANGUAGE: javascript\nCODE:\n```\nconst exchange = new ccxt.cex ({\n    'apiKey': YOUR_API_KEY,\n    'secret': 'YOUR_SECRET',\n    // 'options': {\n    //     'createMarketBuyOrderRequiresPrice': true, // default\n    // },\n})\n\n;(async () => {\n\n    // when `createMarketBuyOrderRequiresPrice` is true, we can pass the price\n    // so that the total cost of the order would be calculated inside the library\n    // by multiplying the amount over price (amount * price)\n\n    const symbol = 'BTC/USD'\n    const amount = 2 // BTC\n    const price = 9000 // USD\n    // cost = amount * price = 2 * 9000 = 18000 (USD)\n\n    // note that we don't use createMarketBuyOrder here, instead we use createOrder\n    // createMarketBuyOrder will omit the price and will not work when\n    // exchange.options['createMarketBuyOrderRequiresPrice'] = true\n    const order = await exchange.createOrder (symbol, 'market', 'buy', amount, price)\n\n    console.log (order)\n}) ()\n```\n\n----------------------------------------\n\nTITLE: Watch Transactions Status Note\nDESCRIPTION: Indicates that the watchTransactions method is currently under development and may not be available for use.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/ccxt.pro.manual.rst#2025-04-22_snippet_29\n\nLANGUAGE: diff\nCODE:\n```\n- this method is a work in progress now (may be unavailable)\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript Examples in CCXT\nDESCRIPTION: Command to execute JavaScript examples from the CCXT library. Replace the path with actual example filename.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/examples/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnode path/to/example.js # substitute for actual filename here\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom HTTP/HTTPS Agent in TypeScript\nDESCRIPTION: Example implementation of a custom Agent class that handles both HTTP and HTTPS connections. The connect() method creates appropriate socket connections based on the secureEndpoint property, using net.Socket for HTTP and tls.Socket for HTTPS. Includes demonstration of usage with http.get().\nSOURCE: https://github.com/ccxt/ccxt/blob/master/ts/src/static_dependencies/proxies/agent-base/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as net from 'net';\nimport * as tls from 'tls';\nimport * as http from 'http';\nimport { Agent } from 'agent-base';\n\nclass MyAgent extends Agent {\n  connect(req, opts) {\n    // `secureEndpoint` is true when using the \"https\" module\n    if (opts.secureEndpoint) {\n      return tls.connect(opts);\n    } else {\n      return net.connect(opts);\n    }\n  }\n});\n\n// Keep alive enabled means that `connect()` will only be\n// invoked when a new connection needs to be created\nconst agent = new MyAgent({ keepAlive: true });\n\n// Pass the `agent` option when creating the HTTP request\nhttp.get('http://nodejs.org/api/', { agent }, (res) => {\n  console.log('\"response\" event!', res.headers);\n  res.pipe(process.stdout);\n});\n```\n\n----------------------------------------\n\nTITLE: Decimal to Precision Function Definition (Python)\nDESCRIPTION: Defines a Python function `decimal_to_precision` to format a decimal value to a specific precision, with customizable rounding, precision, counting mode, and padding mode.  The function is susceptible to `getcontext().prec!`.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_30\n\nLANGUAGE: Python\nCODE:\n```\n# WARNING! The `decimal_to_precision` method is susceptible to getcontext().prec!\ndef decimal_to_precision(n, rounding_mode=ROUND, precision=None, counting_mode=DECIMAL_PLACES, padding_mode=NO_PADDING):\n```\n\n----------------------------------------\n\nTITLE: Fetching Personal Trades in Python with CCXT\nDESCRIPTION: Method for retrieving the user's personal trade history in Python using CCXT. Takes optional parameters including symbol, since timestamp for pagination, and limit for restricting the number of results.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_127\n\nLANGUAGE: Python\nCODE:\n```\n# Python\n# fetch_my_trades(symbol=None, since=None, limit=None, params={})\n\nif exchange.has['fetchMyTrades']:\n    exchange.fetch_my_trades(symbol=None, since=None, limit=None, params={})\n```\n\n----------------------------------------\n\nTITLE: Fetching OHLCV Data with CCXT in PHP\nDESCRIPTION: This snippet shows how to fetch OHLCV data for all markets on an exchange using the `fetch_ohlcv` method in PHP. It iterates through each market, adds a delay to respect rate limits, and then fetches the OHLCV data for a 1-month timeframe.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_95\n\nLANGUAGE: php\nCODE:\n```\nif ($exchange->has['fetchOHLCV']) {\n    foreach ($exchange->markets as $symbol => $market) {\n        usleep ($exchange->rateLimit * 1000); // usleep wants microseconds\n        var_dump ($exchange->fetch_ohlcv ($symbol, '1M')); // one month\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking CCXT Version in PHP\nDESCRIPTION: PHP snippet to echo the current version of CCXT, useful for confirming the installed version when troubleshooting issues.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_181\n\nLANGUAGE: PHP\nCODE:\n```\necho \"CCXT v.\" . \\ccxt\\Exchange::VERSION . \"\\n\"; // PHP\n```\n\n----------------------------------------\n\nTITLE: Exchange Structure Example in JavaScript\nDESCRIPTION: A comprehensive example showing the structure of an exchange object with properties and capabilities. This demonstrates the standard properties available on all exchange instances.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    'id':   'exchange'                   // lowercase string exchange id\n    'name': 'Exchange'                   // human-readable string\n    'countries': [ 'US', 'CN', 'EU' ],   // array of ISO country codes\n    'urls': {\n        'api': 'https://api.example.com/data',  // string or dictionary of base API URLs\n        'www': 'https://www.example.com'        // string website URL\n        'doc': 'https://docs.example.com/api',  // string URL or array of URLs\n    },\n    'version':         'v1',             // string ending with digits\n    'api':             { ... },          // dictionary of api endpoints\n    'has': {                             // exchange capabilities\n        'CORS': false,\n        'publicAPI': true,\n        'privateAPI': true,\n        'cancelOrder': true,\n        'createDepositAddress': false,\n        'createOrder': true,\n        'fetchBalance': true,\n        'fetchCanceledOrders': false,\n        'fetchClosedOrder': false,\n        'fetchClosedOrders': false,\n        'fetchCurrencies': false,\n        'fetchDepositAddress': false,\n        'fetchMarkets': true,\n        'fetchMyTrades': false,\n        'fetchOHLCV': false,\n        'fetchOpenOrder': false,\n        'fetchOpenOrders': false,\n        'fetchOrder': false,\n        'fetchOrderBook': true,\n        'fetchOrders': false,\n        'fetchStatus': 'emulated',\n        'fetchTicker': true,\n        'fetchTickers': false,\n        'fetchBidsAsks': false,\n        'fetchTrades': true,\n        'withdraw': false,\n    },\n    'timeframes': {                      // empty if the exchange.has['fetchOHLCV'] !== true\n        '1m': '1minute',\n        '1h': '1hour',\n        '1d': '1day',\n        '1M': '1month',\n        '1y': '1year',\n    },\n    'timeout':           10000,          // number in milliseconds\n    'rateLimit':         2000,           // number in milliseconds\n    'userAgent':        'ccxt/1.1.1 ...' // string, HTTP User-Agent header\n    'verbose':           false,          // boolean, output error details\n    'markets':          { ... }          // dictionary of markets/pairs by symbol\n    'symbols':          [ ... ]          // sorted list of string symbols (traded pairs)\n    'currencies':       { ... }          // dictionary of currencies by currency code\n    'markets_by_id':    { ... },         // dictionary of array of dictionaries (markets) by id\n    'currencies_by_id': { ... },         // dictionary of dictionaries (markets) by id\n    'apiKey':   '92560ffae9b8a0421...',  // string public apiKey (ASCII, hex, Base64, ...)\n    'secret':   '9aHjPmW+EtRRKN/Oi...'   // string private secret key\n    'password': '6kszf4aci8r',           // string password\n    'uid':      '123456',                // string user id\n    'options':          { ... },         // exchange-specific options\n    // ... other properties here ...\n}\n```\n\n----------------------------------------\n\nTITLE: Sign In Method JavaScript\nDESCRIPTION: This snippet shows the `signIn` method in JavaScript. It takes an optional `params` dictionary and returns the response from the exchange.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_147\n\nLANGUAGE: javascript\nCODE:\n```\nsignIn (params = {})\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Exchanges in Python with CCXT\nDESCRIPTION: This Python snippet shows how to retrieve the list of supported exchange IDs using the CCXT library. It requires the 'ccxt' package to be installed. The script prints the list of exchange IDs to the standard output.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport ccxt\nprint (ccxt.exchanges)\n```\n\n----------------------------------------\n\nTITLE: Working with Array Lengths in JavaScript\nDESCRIPTION: Shows the proper syntax for accessing array lengths in JavaScript, which uses the .length property for both arrays and strings.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nsomeArray.length\n\n// or\n\nsomeString.length\n```\n\n----------------------------------------\n\nTITLE: Using LazyOpenStream for Delayed File Operations in PHP\nDESCRIPTION: Shows how to create a LazyOpenStream that only opens a file when an I/O operation is performed.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/php/static_dependencies/ringcentral-psr7/README.md#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse RingCentral\\Psr7;\n\n$stream = new Psr7\\LazyOpenStream('/path/to/file', 'r');\n// The file has not yet been opened...\n\necho $stream->read(10);\n// The file is opened and read from only when needed.\n```\n\n----------------------------------------\n\nTITLE: CCXT Deposit Address Structure in Javascript\nDESCRIPTION: This snippet describes the structure of the address object returned by the `fetchDepositAddress`, `fetchDepositAddresses`, `fetchDepositAddressesByNetwork` and `createDepositAddress` methods. It includes fields like `info` (raw response), `currency` (currency code), `network` (deposit/withdrawal network), `address`, and `tag` (memo/payment ID).\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_241\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    'info': response,       // raw unparsed data as returned from the exchange\n    'currency': 'USDC',     // currency code\n    'network': 'ERC20',     // a deposit/withdraw networks, ERC20, TRC20, BSC20 (see below)\n    'address': '0x',        // blockchain address in terms of the requested currency and network\n    'tag': undefined,       // tag / memo / paymentId for particular currencies (XRP, XMR, ...)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Trigger Order with CCXT (JS, Python, PHP)\nDESCRIPTION: This code snippet demonstrates how to create a trigger order using the CCXT library.  It defines a 'triggerPrice' within the 'params' object and passes it to the 'createOrder' method. The exchange then uses this price to trigger the order execution.  The createOrder method is called with the symbol, type, side, amount, price and params. The order will be triggered when the price touches 1700, with the direction automatically detected by the exchange.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_182\n\nLANGUAGE: javascript\nCODE:\n```\nconst params = {\n    'triggerPrice': 1700,\n}\nconst order = await exchange.createOrder ('ETH/USDT', 'market', 'buy', 0.1, 1500, params)\n```\n\n----------------------------------------\n\nTITLE: Basic C# CCXT Usage\nDESCRIPTION: Example showing how to import and use CCXT in C#, displaying available exchanges.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/README.md#2025-04-22_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nusing ccxt;\nConsole.WriteLine(ccxt.Exchanges) // check this later\n```\n\n----------------------------------------\n\nTITLE: Creating Trailing Orders in PHP\nDESCRIPTION: This snippet demonstrates how to create a trailing order in PHP using the CCXT library. It defines the symbol, type, side, amount, and parameters including trailingPercent. Requires an initialized CCXT exchange object.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_197\n\nLANGUAGE: PHP\nCODE:\n```\n$symbol = 'BTC/USDT:USDT';\n$type = 'market';\n$side = 'sell';\n$amount = 1.0;\n$price = null;\n$params = {\n    'trailingPercent': 1.0, // percentage away from the current market price 1.0 is equal to 1%\n    // 'trailingAmount': 100.0, // quote amount away from the current market price\n    // 'trailingTriggerPrice': 44500.0, // the price to trigger activating a trailing stop order\n    // 'reduceOnly': true, // set to true if you want to close a position, set to false if you want to open a new position\n}\n$order = $exchange->create_order ($symbol, $type, $side, $amount, $price, $params);\n```\n\n----------------------------------------\n\nTITLE: Create Order WS Method Signature in JavaScript\nDESCRIPTION: Defines the signature for the createOrderWs method in JavaScript. It creates an order using WebSocket. Parameters include symbol, type, side, amount, price (optional), and additional parameters.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/ccxt.pro.manual.md#_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\ncreateOrderWs (symbol: string, type: OrderType, side: OrderSide, amount: number, price: number = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Fetch Margin Mode (JavaScript)\nDESCRIPTION: Fetches the margin mode for a specific market or multiple markets. It uses the unified CCXT symbol and optional exchange-specific parameters. Returns a margin-mode-structure or an array of margin-mode-structures.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_270\n\nLANGUAGE: javascript\nCODE:\n```\nfetchMarginMode(symbol, params = {})\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfetchMarginModes(symbols = undefined, params = {})\n```\n\n----------------------------------------\n\nTITLE: Option Chain Structure in JavaScript\nDESCRIPTION: Illustrates the structure of the option chain data returned by the `fetchOption` and `fetchOptionChain` methods. Includes information about the option's symbol, timestamp, volatility, open interest, bid/ask prices, and underlying asset price. The 'info' field contains the original decoded JSON response from the exchange.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_137\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    'info': { ... },                            // the original decoded JSON as is\n    'currency': 'BTC',                          // unified CCXT currency code\n    'symbol': 'BTC/USD:BTC-240927-40000-C',     // unified CCXT market symbol\n    'timestamp': 1699593511632,                 // unix timestamp in milliseconds\n    'datetime': '2023-11-10T05:18:31.632Z',     // ISO8601 datetime with milliseconds\n    'impliedVolatility': 60.06,                 // the expected percentage price change of the underlying asset, over the remaining life of the option\n    'openInterest': 10,                         // the number of open options contracts that have not been settled\n    'bidPrice': 0.214,                          // the bid price of the option\n    'askPrice': 0.2205,                         // the ask price of the option\n    'midPrice': 0.2205,                         // the price in between the bid and the ask\n    'markPrice': 0.2169,                        // the mark price of the option\n    'lastPrice': 0.215,                         // the last price of the option\n    'underlyingPrice': 39165.86,                // the current market price of the underlying asset\n    'change': 15.43,                            // the 24 hour price change in a dollar amount\n    'percentage': 11.86,                        // the 24 hour price change as a percentage\n    'baseVolume': 100.86,                       // the volume in units of the base currency\n    'quoteVolume': 23772.86,                    // the volume in units of the quote currency\n}\n```\n\n----------------------------------------\n\nTITLE: Order Structure Definition in JavaScript\nDESCRIPTION: Complete specification of the unified order structure object returned by CCXT order-related methods. This structure includes order details such as ID, status, price, amount, fees, and execution information.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_111\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    'id':                '12345-67890:09876/54321', // string\n    'clientOrderId':     'abcdef-ghijklmnop-qrstuvwxyz', // a user-defined clientOrderId, if any\n    'datetime':          '2017-08-17 12:42:48.000', // ISO8601 datetime of 'timestamp' with milliseconds\n    'timestamp':          1502962946216, // order placing/opening Unix timestamp in milliseconds\n    'lastTradeTimestamp': 1502962956216, // Unix timestamp of the most recent trade on this order\n    'status':      'open',        // 'open', 'closed', 'canceled', 'expired', 'rejected'\n    'symbol':      'ETH/BTC',     // symbol\n    'type':        'limit',       // 'market', 'limit'\n    'timeInForce': 'GTC',         // 'GTC', 'IOC', 'FOK', 'PO'\n    'side':        'buy',         // 'buy', 'sell'\n    'price':        0.06917684,   // float price in quote currency (may be empty for market orders)\n    'average':      0.06917684,   // float average filling price\n    'amount':       1.5,          // ordered amount of base currency\n    'filled':       1.1,          // filled amount of base currency\n    'remaining':    0.4,          // remaining amount to fill\n    'cost':         0.076094524,  // 'filled' * 'price' (filling price used where available)\n    'trades':     [ ... ],        // a list of order trades/executions\n    'fee': {                      // fee info, if available\n        'currency': 'BTC',        // which currency the fee is (usually quote)\n        'cost': 0.0009,           // the fee amount in that currency\n        'rate': 0.002,            // the fee rate (if available)\n    },\n    'info': { ... },              // the original unparsed order structure as is\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CCXT via NPM\nDESCRIPTION: Basic JavaScript example showing NPM installation and usage of CCXT library\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Install.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install ccxt\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar ccxt = require ('ccxt')\n\nconsole.log (ccxt.exchanges) // print all available exchanges\n```\n\n----------------------------------------\n\nTITLE: Overriding parse_ohlcv in Python to get raw response\nDESCRIPTION: This code snippet demonstrates how to override the `parse_ohlcv` function in Python to access the raw OHLCV response from the exchange. It appends the raw OHLCV data to the end of the parsed result.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/wiki/Manual.md#_snippet_97\n\nLANGUAGE: python\nCODE:\n```\n# add raw member at last position in list\nasync def test():\n    ex = ccxt.async_support.coinbase()\n    prase_ohlcv_original = ex.parse_ohlcv\n    def prase_ohlcv_custom(ohlcv, market):\n        res = prase_ohlcv_original(ohlcv, market)\n        res.append(ohlcv)\n        return res\n    ex.parse_ohlcv = prase_ohlcv_custom\n    result = await ex.fetch_ohlcv('BTC/USDT', '1m')\n    print (result[0])\n\nasyncio.run(test())\n```\n\n----------------------------------------\n\nTITLE: Checking Market Order Support in CCXT\nDESCRIPTION: How to programmatically check if an exchange supports market orders using the has['createMarketOrder'] property in different programming languages.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/manual.rst#2025-04-22_snippet_116\n\nLANGUAGE: JavaScript\nCODE:\n```\n// JavaScript\nif (exchange.has['createMarketOrder']) {\n    ...\n}\n```\n\nLANGUAGE: Python\nCODE:\n```\n# Python\nif exchange.has['createMarketOrder']:\n    ...\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// PHP\nif ($exchange->has['createMarketOrder']) {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Including CCXT in Browser via CDN\nDESCRIPTION: HTML script tag for including CCXT directly in a web browser using a CDN.\nSOURCE: https://github.com/ccxt/ccxt/blob/master/doc/readme.rst#2025-04-22_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/ccxt@2.4.96/dist/ccxt.browser.js\"></script>\n```"
  }
]