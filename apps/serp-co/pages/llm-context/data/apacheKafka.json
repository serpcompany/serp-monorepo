[
  {
    "owner": "apache",
    "repo": "kafka",
    "content": "TITLE: Running Multi-Node Isolated SSL Kafka Cluster\nDESCRIPTION: Commands to run a multi-node Kafka cluster with isolated configuration and SSL communication using both JVM-based and GraalVM-based Native Apache Kafka Docker images.\nSOURCE: https://github.com/apache/kafka/blob/trunk/docker/examples/README.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# JVM based Apache Kafka Docker Image\n$ IMAGE=apache/kafka:latest docker compose -f docker/examples/docker-compose-files/cluster/isolated/ssl/docker-compose.yml up\n\n# GraalVM based Native Apache Kafka Docker Image\n$ IMAGE=apache/kafka-native:latest docker compose -f docker/examples/docker-compose-files/cluster/isolated/ssl/docker-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Running a Kafka Broker with Docker\nDESCRIPTION: Command to run a Kafka broker using the official Apache Kafka Docker image, exposing port 9092.\nSOURCE: https://github.com/apache/kafka/blob/trunk/README.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 9092:9092 apache/kafka:latest\n```\n\n----------------------------------------\n\nTITLE: Building Kafka JAR File\nDESCRIPTION: Command to build a Kafka JAR file using Gradle. This is a basic build step before following the quickstart instructions.\nSOURCE: https://github.com/apache/kafka/blob/trunk/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew jar\n```\n\n----------------------------------------\n\nTITLE: Running Apache Kafka Docker Container\nDESCRIPTION: Command to run Apache Kafka Docker container using the apache/kafka-native image with docker-compose.\nSOURCE: https://github.com/apache/kafka/blob/trunk/docker/examples/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nIMAGE=apache/kafka-native:latest <docker compose command>\n```\n\n----------------------------------------\n\nTITLE: Running Specific Kafka Tests\nDESCRIPTION: Commands to run specific tests or test methods within the Kafka project using Gradle.\nSOURCE: https://github.com/apache/kafka/blob/trunk/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew clients:test --tests RequestResponseTest\n./gradlew core:test --tests kafka.api.ProducerFailureHandlingTest.testCannotSendToInternalTopic\n./gradlew clients:test --tests org.apache.kafka.clients.MetadataTest.testTimeToNextUpdate\n```\n\n----------------------------------------\n\nTITLE: Running a Kafka Broker from Compiled Files\nDESCRIPTION: Commands to run a Kafka broker using compiled files. This includes generating a cluster ID, formatting storage, and starting the server.\nSOURCE: https://github.com/apache/kafka/blob/trunk/README.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nKAFKA_CLUSTER_ID=\"$(./bin/kafka-storage.sh random-uuid)\"\n./bin/kafka-storage.sh format --standalone -t $KAFKA_CLUSTER_ID -c config/server.properties\n./bin/kafka-server-start.sh config/server.properties\n```\n\n----------------------------------------\n\nTITLE: Running Synchronous Kafka Producer-Consumer Demo\nDESCRIPTION: Shell command to run a synchronous demo that sends and consumes 10,000 records to/from topic1.\nSOURCE: https://github.com/apache/kafka/blob/trunk/examples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexamples/bin/java-producer-consumer-demo.sh 10000 sync\n```\n\n----------------------------------------\n\nTITLE: Iterating Through All Subproject Dependencies with Gradle\nDESCRIPTION: This snippet demonstrates how to use Gradle tasks to list all project dependencies. The 'allDeps' and 'allDepInsight' tasks provide a detailed view of dependencies across subprojects. Users must have Gradle installed and navigate to the root of the Apache Kafka project.\nSOURCE: https://github.com/apache/kafka/blob/trunk/README.md#2025-04-22_snippet_24\n\nLANGUAGE: Shell\nCODE:\n```\n./gradlew allDeps\n```\n\n----------------------------------------\n\nTITLE: Running Single-Node File Input Kafka Example\nDESCRIPTION: Commands to run a single-node Kafka example with configuration from file input using both JVM-based and GraalVM-based Native Apache Kafka Docker images.\nSOURCE: https://github.com/apache/kafka/blob/trunk/docker/examples/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# JVM based Apache Kafka Docker Image\n$ IMAGE=apache/kafka:latest docker compose -f docker/examples/docker-compose-files/single-node/file-input/docker-compose.yml up\n\n# GraalVM based Native Apache Kafka Docker Image\n$ IMAGE=apache/kafka-native:latest docker compose -f docker/examples/docker-compose-files/single-node/file-input/docker-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Running Asynchronous Kafka Producer-Consumer Demo\nDESCRIPTION: Shell command to run an asynchronous demo that sends and consumes 10,000 records to/from topic1.\nSOURCE: https://github.com/apache/kafka/blob/trunk/examples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexamples/bin/java-producer-consumer-demo.sh 10000\n```\n\n----------------------------------------\n\nTITLE: Setting Log4j Loggers via Environment Variables in Kafka Docker\nDESCRIPTION: This example shows how to set log4j loggers using the KAFKA_LOG4J_LOGGERS environment variable when running a Kafka Docker container.\nSOURCE: https://github.com/apache/kafka/blob/trunk/docker/examples/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nKAFKA_LOG4J_LOGGERS='property1=value1,property2=value2'\n```\n\n----------------------------------------\n\nTITLE: Running Kafka Docker Compose with Specific Image\nDESCRIPTION: This command demonstrates how to use Docker Compose to bring up Kafka containers using a specified Docker image, controlled by the IMAGE environment variable.\nSOURCE: https://github.com/apache/kafka/blob/trunk/docker/examples/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nIMAGE=apache/kafka:latest <docker compose command>\n```\n\n----------------------------------------\n\nTITLE: Running Single-Node Plaintext Kafka Example\nDESCRIPTION: Commands to run a single-node Kafka example with plaintext configuration using both JVM-based and GraalVM-based Native Apache Kafka Docker images.\nSOURCE: https://github.com/apache/kafka/blob/trunk/docker/examples/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# JVM based Apache Kafka Docker Image\n$ IMAGE=apache/kafka:latest docker compose -f docker/examples/docker-compose-files/single-node/plaintext/docker-compose.yml up\n\n# GraalVM based Native Apache Kafka Docker Image\n$ IMAGE=apache/kafka-native:latest docker compose -f docker/examples/docker-compose-files/single-node/plaintext/docker-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Customizing ClusterTest Parameters in Java\nDESCRIPTION: Modifying specific parameters of the @ClusterTest annotation to customize the Kafka cluster configuration for testing.\nSOURCE: https://github.com/apache/kafka/blob/trunk/test-common/test-common-internal-api/src/main/java/org/apache/kafka/common/test/api/README.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class SampleTest {\n    @ClusterTest(brokers = 3, metadataVersion = MetadataVersion.IBP_4_0_IV3)\n    void testSomething() { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Exactly-Once Processing Demo\nDESCRIPTION: Shell command to demonstrate exactly-once processing with multiple partitions and application instances. Creates input and output topics with 6 partitions, runs 3 transactional instances, and processes 10,000 records.\nSOURCE: https://github.com/apache/kafka/blob/trunk/examples/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexamples/bin/exactly-once-demo.sh 6 3 10000\n```\n\n----------------------------------------\n\nTITLE: Starting Kafka Cluster for Trogdor Testing (Bash)\nDESCRIPTION: Commands to start a single-node Kafka cluster for Trogdor testing. It generates a cluster ID, formats storage, and starts the Kafka server.\nSOURCE: https://github.com/apache/kafka/blob/trunk/trogdor/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nKAFKA_CLUSTER_ID=\"$(./bin/kafka-storage.sh random-uuid)\"\n./bin/kafka-storage.sh format --standalone -t $KAFKA_CLUSTER_ID -c config/server.properties\n./bin/kafka-server-start.sh config/server.properties  &> /tmp/kafka.log &\n```\n\n----------------------------------------\n\nTITLE: Producing Messages to SSL-Enabled Kafka Using Console Producer\nDESCRIPTION: Command to produce messages to an SSL-enabled Kafka topic using the kafka-console-producer.sh script with SSL client properties.\nSOURCE: https://github.com/apache/kafka/blob/trunk/docker/examples/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/kafka-console-producer.sh --topic test --bootstrap-server localhost:9093 --producer.config ./docker/examples/fixtures/client-secrets/client-ssl.properties\n```\n\n----------------------------------------\n\nTITLE: Basic ClusterTest Annotation Usage in Java\nDESCRIPTION: The simplest usage of @ClusterTest annotation with default configurations for running tests against a Kafka cluster.\nSOURCE: https://github.com/apache/kafka/blob/trunk/test-common/test-common-internal-api/src/main/java/org/apache/kafka/common/test/api/README.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class SampleTest {\n    @ClusterTest\n    void testSomething() { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Dependency Updates in Gradle\nDESCRIPTION: This command utilizes the Gradle 'dependencyUpdates' task to check if any of the project's dependencies have available updates. It's essential for maintaining up-to-date dependencies.\nSOURCE: https://github.com/apache/kafka/blob/trunk/README.md#2025-04-22_snippet_26\n\nLANGUAGE: Shell\nCODE:\n```\n./gradlew dependencyUpdates\n```\n\n----------------------------------------\n\nTITLE: Running a Single KRaft Quorum Node\nDESCRIPTION: Command to start a single KRaft server for testing purposes using the kraft.properties configuration file with a specific replica directory ID.\nSOURCE: https://github.com/apache/kafka/blob/trunk/raft/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/test-kraft-server-start.sh --config config/kraft.properties --replica-directory-id b8tRS7h4TJ2Vt43Dp85v2A\n```\n\n----------------------------------------\n\nTITLE: Enabling Test Retries in Kafka\nDESCRIPTION: Command to enable test retries in Kafka. This allows failed tests to be retried a specified number of times.\nSOURCE: https://github.com/apache/kafka/blob/trunk/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew test -PmaxTestRetries=1 -PmaxTestRetryFailures=3\n```\n\n----------------------------------------\n\nTITLE: Running JMH Benchmarks with Basic Commands in Bash\nDESCRIPTION: Demonstrates the basic commands for running JMH benchmarks using the jmh.sh script, including running all benchmarks, selecting specific benchmarks by pattern, and checking which benchmarks match a pattern.\nSOURCE: https://github.com/apache/kafka/blob/trunk/jmh-benchmarks/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./jmh-benchmarks/jmh.sh\n    \n./jmh-benchmarks/jmh.sh LRUCacheBenchmark\n\n./jmh-benchmarks/jmh.sh -l LRUCacheBenchmark\n```\n\n----------------------------------------\n\nTITLE: Bringing up the Kafka Cluster\nDESCRIPTION: Commands to start the Kafka cluster using Vagrant, with an option for AWS deployment.\nSOURCE: https://github.com/apache/kafka/blob/trunk/vagrant/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ vagrant/vagrant-up.sh     \n$ # If on aws, run: vagrant/vagrant-up.sh --aws\n```\n\n----------------------------------------\n\nTITLE: Running JMH Benchmarks with Custom Parameters in Bash\nDESCRIPTION: Shows how to run JMH benchmarks with custom parameters such as the number of forks, iterations, and warm-up iterations, as well as with profilers like GC and async profiler with flame graph output.\nSOURCE: https://github.com/apache/kafka/blob/trunk/jmh-benchmarks/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./jmh-benchmarks/jmh.sh -f 2 -i 2 -wi 2 LRUCacheBenchmark\n\n./jmh-benchmarks/jmh.sh -prof gc -prof async:libPath=/path/to/libasyncProfiler.so\\;output=flamegraph LRUCacheBenchmark\n```\n\n----------------------------------------\n\nTITLE: Running Single-Node SSL Kafka Example\nDESCRIPTION: Commands to run a single-node Kafka example with SSL configuration using both JVM-based and GraalVM-based Native Apache Kafka Docker images.\nSOURCE: https://github.com/apache/kafka/blob/trunk/docker/examples/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# JVM based Apache Kafka Docker Image\n$ IMAGE=apache/kafka:latest docker compose -f docker/examples/docker-compose-files/single-node/ssl/docker-compose.yml up\n\n# GraalVM based Native Apache Kafka Docker Image\n$ IMAGE=apache/kafka-native:latest docker compose -f docker/examples/docker-compose-files/single-node/ssl/docker-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages from Kafka Topic\nDESCRIPTION: Command to start a Kafka console consumer to read messages from a topic, specifying brokers by their IP addresses.\nSOURCE: https://github.com/apache/kafka/blob/trunk/vagrant/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbin/kafka-console-consumer.sh --bootstrap-server 192.168.50.51:9092,192.168.50.52:9092,192.168.50.53:9092 --topic sandbox --from-beginning\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Native Image Locally\nDESCRIPTION: Command-line example for building and testing a GraalVM-based native Kafka Docker image locally. This specifies the image name, tag, type, and Kafka tarball URL to be used in the build process.\nSOURCE: https://github.com/apache/kafka/blob/trunk/docker/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npython docker_build_test.py kafka/test --image-tag=3.8.0 --image-type=native --kafka-url=https://archive.apache.org/dist/kafka/3.8.0/kafka_2.13-3.8.0.tgz\n```\n\n----------------------------------------\n\nTITLE: Producing Messages to Kafka Using Console Producer\nDESCRIPTION: Command to produce messages to a Kafka topic using the kafka-console-producer.sh script.\nSOURCE: https://github.com/apache/kafka/blob/trunk/docker/examples/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/kafka-console-producer.sh --topic test --bootstrap-server localhost:9092\n```\n\n----------------------------------------\n\nTITLE: Running Multi-Node Combined Plaintext Kafka Cluster\nDESCRIPTION: Commands to run a multi-node Kafka cluster with combined configuration and plaintext communication using both JVM-based and GraalVM-based Native Apache Kafka Docker images.\nSOURCE: https://github.com/apache/kafka/blob/trunk/docker/examples/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# JVM based Apache Kafka Docker Image\n$ IMAGE=apache/kafka:latest docker compose -f docker/examples/docker-compose-files/cluster/combined/plaintext/docker-compose.yml up\n\n# GraalVM based Native Apache Kafka Docker Image\n$ IMAGE=apache/kafka-native:latest docker compose -f docker/examples/docker-compose-files/cluster/combined/plaintext/docker-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Producing Messages to Kafka Topic\nDESCRIPTION: Command to start a Kafka console producer to send messages to a topic, specifying multiple brokers.\nSOURCE: https://github.com/apache/kafka/blob/trunk/vagrant/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbin/kafka-console-producer.sh --bootstrap-server broker1:9092,broker2:9092,broker3:9092 --topic sandbox\n```\n\n----------------------------------------\n\nTITLE: Building and Testing JVM Image Locally\nDESCRIPTION: Command-line example for building and testing a JVM-based Kafka Docker image locally. This specifies the image name, tag, type, and Kafka tarball URL to be used in the build process.\nSOURCE: https://github.com/apache/kafka/blob/trunk/docker/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npython docker_build_test.py kafka/test --image-tag=3.6.0 --image-type=jvm --kafka-url=https://archive.apache.org/dist/kafka/3.6.0/kafka_2.13-3.6.0.tgz\n```\n\n----------------------------------------\n\nTITLE: Starting KRaft Quorum Nodes\nDESCRIPTION: Commands to start each of the three KRaft nodes using their respective configuration files and unique replica directory IDs, forming a complete KRaft quorum for testing.\nSOURCE: https://github.com/apache/kafka/blob/trunk/raft/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbin/test-kraft-server-start.sh --config config/kraft-quorum-1.properties --replica-directory-id b8tRS7h4TJ2Vt43Dp85v2A\nbin/test-kraft-server-start.sh --config config/kraft-quorum-2.properties --replica-directory-id Nkij_D9XRiYKNb41SiJo7Q\nbin/test-kraft-server-start.sh --config config/kraft-quorum-3.properties --replica-directory-id 4-e97nI7eHPYKfEDtW8rtQ\n```\n\n----------------------------------------\n\nTITLE: Checking Task Status in Trogdor (Bash)\nDESCRIPTION: Command to check the status of a previously submitted task in Trogdor.\nSOURCE: https://github.com/apache/kafka/blob/trunk/trogdor/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./bin/trogdor.sh client showTask -t localhost:8889 -i produce0\n```\n\n----------------------------------------\n\nTITLE: Building Multi-Architecture Kafka Docker Image with Python\nDESCRIPTION: This Python command builds a multi-architecture Docker image for Apache Kafka using docker_release.py script. It specifies the image tag, Kafka version URL, and image type.\nSOURCE: https://github.com/apache/kafka/blob/trunk/docker/README.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\npython docker_release.py kafka-native/test:3.8.0 --kafka-url --image-type=native https://archive.apache.org/dist/kafka/3.8.0/kafka_2.13-3.8.0.tgz\n```\n\n----------------------------------------\n\nTITLE: Using GC Profiler with JMH Benchmarks in Bash\nDESCRIPTION: Shows how to use the GC profiler with JMH benchmarks to measure allocation rates, which is important for monitoring allocations per operation.\nSOURCE: https://github.com/apache/kafka/blob/trunk/jmh-benchmarks/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./jmh-benchmarks/jmh.sh -prof gc\n```\n\n----------------------------------------\n\nTITLE: Viewing Detailed Task Results in Trogdor (Bash)\nDESCRIPTION: Command to view detailed results of a completed task in Trogdor, including performance metrics.\nSOURCE: https://github.com/apache/kafka/blob/trunk/trogdor/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./bin/trogdor.sh client showTask -t localhost:8889 -i produce0 --show-status\n```\n\n----------------------------------------\n\nTITLE: Running Kafka Tests\nDESCRIPTION: Commands to run Kafka tests, including unit tests, integration tests, and tests marked as flaky.\nSOURCE: https://github.com/apache/kafka/blob/trunk/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew test  # runs both unit and integration tests\n./gradlew unitTest\n./gradlew integrationTest\n./gradlew test -Pkafka.test.run.flaky=true  # runs tests that are marked as flaky\n```\n\n----------------------------------------\n\nTITLE: Building Eclipse Project for Kafka\nDESCRIPTION: Command to generate Eclipse project files for Kafka using Gradle. This configures Eclipse to use a custom build directory to avoid clashes with Kafka's scripts directory.\nSOURCE: https://github.com/apache/kafka/blob/trunk/README.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew eclipse\n```\n\n----------------------------------------\n\nTITLE: Submitting Test Job to Trogdor (Bash)\nDESCRIPTION: Command to submit a test job (simple produce benchmark) to Trogdor using the client interface.\nSOURCE: https://github.com/apache/kafka/blob/trunk/trogdor/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./bin/trogdor.sh client createTask -t localhost:8889 -i produce0 --spec ./tests/spec/simple_produce_bench.json\n```\n\n----------------------------------------\n\nTITLE: Dynamic Cluster Configuration with ClusterTemplate in Java\nDESCRIPTION: Using @ClusterTemplate to reference a method that dynamically generates multiple cluster configurations with the builder pattern.\nSOURCE: https://github.com/apache/kafka/blob/trunk/test-common/test-common-internal-api/src/main/java/org/apache/kafka/common/test/api/README.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.Arrays;\n\n@ClusterTemplate(\"generateConfigs\")\nvoid testSomething() { ... }\n\nstatic List<ClusterConfig> generateConfigs() {\n  ClusterConfig config1 = ClusterConfig.defaultClusterBuilder()\n          .name(\"Generated Test 1\")\n          .serverProperties(props1)\n          .setMetadataVersion(MetadataVersion.IBP_2_7_IV1)\n          .build();\n  ClusterConfig config2 = ClusterConfig.defaultClusterBuilder()\n          .name(\"Generated Test 2\")\n          .serverProperties(props2)\n          .setMetadataVersion(MetadataVersion.IBP_2_7_IV2)\n          .build();\n  ClusterConfig config3 = ClusterConfig.defaultClusterBuilder()\n          .name(\"Generated Test 3\")\n          .serverProperties(props3)\n          .build();\n  return Arrays.asList(config1, config2, config3);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Trogdor Coordinator (Bash)\nDESCRIPTION: Command to start a Trogdor Coordinator process, which manages tasks across multiple agent processes.\nSOURCE: https://github.com/apache/kafka/blob/trunk/trogdor/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./bin/trogdor.sh coordinator -c ./config/trogdor.conf -n node0 &> /tmp/trogdor-coordinator.log &\n```\n\n----------------------------------------\n\nTITLE: Re-running Kafka Tests Without Code Changes\nDESCRIPTION: Commands to force re-running tests without code changes by using the --rerun-tasks flag with Gradle.\nSOURCE: https://github.com/apache/kafka/blob/trunk/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew test --rerun-tasks\n./gradlew unitTest --rerun-tasks\n./gradlew integrationTest --rerun-tasks\n```\n\n----------------------------------------\n\nTITLE: Building Kafka Release Package\nDESCRIPTION: Command to build a binary release gzipped tar ball of Kafka. The release file will be created in the ./core/build/distributions/ directory.\nSOURCE: https://github.com/apache/kafka/blob/trunk/README.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew clean releaseTarGz\n```\n\n----------------------------------------\n\nTITLE: Creating a Kafka Topic\nDESCRIPTION: Command to create a new Kafka topic using the kafka-topics.sh script, specifying brokers by their hostnames.\nSOURCE: https://github.com/apache/kafka/blob/trunk/vagrant/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbin/kafka-topics.sh --create --bootstrap-server broker1:9092 --replication-factor 3 --partitions 1 --topic sandbox\n```\n\n----------------------------------------\n\nTITLE: Creating a JVM Release Candidate Locally\nDESCRIPTION: Command-line example for building and pushing a multi-architecture JVM-based Kafka Docker image as a release candidate. This requires being logged in to the Docker registry with push access.\nSOURCE: https://github.com/apache/kafka/blob/trunk/docker/README.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npython docker_release.py kafka/test:3.6.0 --kafka-url --image-type=jvm https://archive.apache.org/dist/kafka/3.6.0/kafka_2.13-3.6.0.tgz\n```\n\n----------------------------------------\n\nTITLE: Promoting Kafka Native Release Candidate Docker Image\nDESCRIPTION: This Docker command promotes a release candidate image to a final release version for the native Kafka image. It uses docker buildx to create a new tag for the promoted image.\nSOURCE: https://github.com/apache/kafka/blob/trunk/docker/README.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndocker buildx imagetools create --tag apache/kafka-native:3.8.0 apache/kafka-native:3.8.0-rc0\n```\n\n----------------------------------------\n\nTITLE: JMH Command-Line Options Documentation\nDESCRIPTION: Lists and explains common JMH command-line options for configuring benchmark execution, including options for excluding benchmarks, controlling forking, iterations, output, profiling, and verbosity.\nSOURCE: https://github.com/apache/kafka/blob/trunk/jmh-benchmarks/README.md#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n   -e <regexp+>                Benchmarks to exclude from the run. \n\n   -f <int>                    How many times to fork a single benchmark. Use 0 to \n                               disable forking altogether. Warning: disabling \n                               forking may have detrimental impact on benchmark \n                               and infrastructure reliability, you might want \n                               to use different warmup mode instead.\n\n   -i <int>                    Number of measurement iterations to do. Measurement\n                               iterations are counted towards the benchmark score.\n                               (default: 1 for SingleShotTime, and 5 for all other\n                               modes)\n\n   -l                          List the benchmarks that match a filter, and exit.\n\n   -lprof                      List profilers, and exit.\n\n   -o <filename>               Redirect human-readable output to a given file. \n\n   -prof <profiler>            Use profilers to collect additional benchmark data. \n                               Some profilers are not available on all JVMs and/or \n                               all OSes. Please see the list of available profilers \n                               with -lprof.\n\n   -v <mode>                   Verbosity mode. Available modes are: [SILENT, NORMAL,\n                               EXTRA]\n\n   -wi <int>                   Number of warmup iterations to do. Warmup iterations\n                               are not counted towards the benchmark score. (default:\n                               0 for SingleShotTime, and 5 for all other modes)\n```\n\n----------------------------------------\n\nTITLE: Configuring JVM Release Candidate in GitHub Actions\nDESCRIPTION: Example configuration for pushing a JVM-based Kafka Docker image as a release candidate. This specifies the image type, Kafka tarball URL, and the Docker image name with RC tag.\nSOURCE: https://github.com/apache/kafka/blob/trunk/docker/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nimage_type: jvm\nkafka_url: https://archive.apache.org/dist/kafka/3.6.0/kafka_2.13-3.6.0.tgz\nrc_docker_image: apache/kafka:3.6.0-rc0\n```\n\n----------------------------------------\n\nTITLE: Configuring ClusterTest Properties in Java\nDESCRIPTION: Setting specific Kafka configuration properties using @ClusterProperty annotations within a @ClusterTest annotation.\nSOURCE: https://github.com/apache/kafka/blob/trunk/test-common/test-common-internal-api/src/main/java/org/apache/kafka/common/test/api/README.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class SampleTest {\n    @ClusterTest(\n      types = {Type.KRAFT},\n      brokerSecurityProtocol = SecurityProtocol.PLAINTEXT,\n      properties = {\n          @ClusterProperty(key = \"inter.broker.protocol.version\", value = \"2.7-IV2\"),\n          @ClusterProperty(key = \"socket.send.buffer.bytes\", value = \"10240\"),\n    })\n    void testSomething() { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Streams Quickstart Archetype to Maven\nDESCRIPTION: Commands to publish the Kafka Streams quickstart archetype to Maven, which requires using mvn deploy rather than Gradle.\nSOURCE: https://github.com/apache/kafka/blob/trunk/README.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncd streams/quickstart\nmvn deploy\n```\n\n----------------------------------------\n\nTITLE: Promoting Native Release Candidate in GitHub Actions\nDESCRIPTION: Example configuration for promoting a native Kafka Docker image from release candidate to final release. This specifies the RC image tag and the final promoted image tag.\nSOURCE: https://github.com/apache/kafka/blob/trunk/docker/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrc_docker_image: apache/kafka-native:3.8.0-rc0\npromoted_docker_image: apache/kafka-native:3.8.0\n```\n\n----------------------------------------\n\nTITLE: Setting Java Tool Options for Native Image Agent Configuration\nDESCRIPTION: Command to configure the native-image-agent for generating reachability metadata. This environment variable setup allows collecting metadata configurations when running Apache Kafka System Tests with GraalVM JIT.\nSOURCE: https://github.com/apache/kafka/blob/trunk/docker/native/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport JAVA_TOOL_OPTIONS=\"-agentlib:native-image-agent=config-merge-dir=/path/to/kafka/docker/native/native-image-configs\"\n```\n\n----------------------------------------\n\nTITLE: Running Multi-Node Combined SSL Kafka Cluster\nDESCRIPTION: Commands to run a multi-node Kafka cluster with combined configuration and SSL communication using both JVM-based and GraalVM-based Native Apache Kafka Docker images.\nSOURCE: https://github.com/apache/kafka/blob/trunk/docker/examples/README.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# JVM based Apache Kafka Docker Image\n$ IMAGE=apache/kafka:latest docker compose -f docker/examples/docker-compose-files/cluster/combined/ssl/docker-compose.yml up\n\n# GraalVM based Native Apache Kafka Docker Image\n$ IMAGE=apache/kafka-native:latest docker compose -f docker/examples/docker-compose-files/cluster/combined/ssl/docker-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Setting Class-wide ClusterTest Defaults in Java\nDESCRIPTION: Using @ClusterTestDefaults annotation to modify the default parameters for all @ClusterTest annotations in a test class.\nSOURCE: https://github.com/apache/kafka/blob/trunk/test-common/test-common-internal-api/src/main/java/org/apache/kafka/common/test/api/README.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@ClusterTestDefaults(brokers = 3, metadataVersion = MetadataVersion.IBP_4_0_IV3)\npublic class SampleTest {\n    @ClusterTest\n    void testSomething() { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Image Build Test in GitHub Actions\nDESCRIPTION: Example configuration for building and testing a GraalVM-based native Kafka Docker image using GitHub Actions workflow. This specifies the image type as 'native' and provides the URL to download the Kafka tarball.\nSOURCE: https://github.com/apache/kafka/blob/trunk/docker/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimage_type: native\nkafka_url: https://archive.apache.org/dist/kafka/3.8.0/kafka_2.13-3.8.0.tgz\n```\n\n----------------------------------------\n\nTITLE: Promoting Kafka JVM Release Candidate Docker Image\nDESCRIPTION: This Docker command promotes a release candidate image to a final release version for the JVM-based Kafka image. It uses docker buildx to create a new tag for the promoted image.\nSOURCE: https://github.com/apache/kafka/blob/trunk/docker/README.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker buildx imagetools create --tag apache/kafka:3.6.0 apache/kafka:3.6.0-rc0\n```\n\n----------------------------------------\n\nTITLE: Running Trogdor Agent in Exec Mode (Bash)\nDESCRIPTION: Command to run a Trogdor Agent in exec mode, which allows running a single task on one node without a Coordinator.\nSOURCE: https://github.com/apache/kafka/blob/trunk/trogdor/README.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n./bin/trogdor.sh agent -n node0 -c ./config/trogdor.conf --exec ./tests/spec/simple_produce_bench.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Release Candidate in GitHub Actions\nDESCRIPTION: Example configuration for pushing a GraalVM-based native Kafka Docker image as a release candidate. This specifies the image type, Kafka tarball URL, and the Docker image name with RC tag.\nSOURCE: https://github.com/apache/kafka/blob/trunk/docker/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nimage_type: native\nkafka_url: https://archive.apache.org/dist/kafka/3.8.0/kafka_2.13-3.8.0.tgz\nrc_docker_image: apache/kafka-native:3.8.0-rc0\n```\n\n----------------------------------------\n\nTITLE: Starting the Kafka Release Process\nDESCRIPTION: Executes the Python release script to begin the Apache Kafka release process.\nSOURCE: https://github.com/apache/kafka/blob/trunk/release/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython release.py\n```\n\n----------------------------------------\n\nTITLE: Running Kafka System Tests\nDESCRIPTION: Commands to navigate to the Kafka tests directory and run the system tests using ducktape.\nSOURCE: https://github.com/apache/kafka/blob/trunk/tests/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ cd kafka/tests\n$ ducktape kafkatest/tests\n```\n\n----------------------------------------\n\nTITLE: Configuring JVM Image Build Test in GitHub Actions\nDESCRIPTION: Example configuration for building and testing a JVM-based Kafka Docker image using GitHub Actions workflow. This specifies the image type as 'jvm' and provides the URL to download the Kafka tarball from the Apache archive.\nSOURCE: https://github.com/apache/kafka/blob/trunk/docker/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nimage_type: jvm\nkafka_url: https://archive.apache.org/dist/kafka/3.6.0/kafka_2.13-3.6.0.tgz\n```\n\n----------------------------------------\n\nTITLE: Installing Kafka Testing Dependencies\nDESCRIPTION: Commands to navigate to the Kafka directory, run the initialization script for AWS, and load environment variables from bashrc.\nSOURCE: https://github.com/apache/kafka/blob/trunk/tests/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ cd kafka\n$ ./vagrant/aws/aws-init.sh\n$ . ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Starting AWS Test Worker Instances\nDESCRIPTION: Command to start worker instances on AWS using Vagrant in small parallel batches.\nSOURCE: https://github.com/apache/kafka/blob/trunk/tests/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# This will brink up worker machines in small parallel batches\n$ vagrant/vagrant-up.sh --aws\n```\n\n----------------------------------------\n\nTITLE: Running Kafka Tests with Log4j Output\nDESCRIPTION: Command to run tests with log4j output enabled, which can be configured by modifying the log4j2.yaml file in the test resources directory.\nSOURCE: https://github.com/apache/kafka/blob/trunk/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew cleanTest clients:test --tests NetworkClientTest\n```\n\n----------------------------------------\n\nTITLE: Creating KRaft Quorum Configuration for Node 2\nDESCRIPTION: Bash command to create the second node configuration file with properties for node ID, listeners, controller configuration, and log directories for a 3-node KRaft quorum.\nSOURCE: https://github.com/apache/kafka/blob/trunk/raft/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncat << EOF >> config/kraft-quorum-2.properties\n    \n    node.id=2\n    listeners=PLAINTEXT://localhost:9093\n    controller.listener.names=PLAINTEXT\n    controller.quorum.voters=1@localhost:9092,2@localhost:9093,3@localhost:9094\n    log.dirs=/tmp/kraft-logs-2\n    EOF\n```\n\n----------------------------------------\n\nTITLE: Extracting Docker Official Image Artifact with Python\nDESCRIPTION: This Python command extracts the Docker official image artifact using a custom script. It creates a new directory under docker/docker_official_images for the specified Kafka version.\nSOURCE: https://github.com/apache/kafka/blob/trunk/docker/README.md#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\npython extract_docker_official_image_artifact.py --path_to_downloaded_artifact=path/to/downloaded/artifact\n```\n\n----------------------------------------\n\nTITLE: Repeatedly Running a Specific Kafka Test\nDESCRIPTION: Bash script to repeatedly run a specific test a fixed number of times, useful for detecting flaky tests.\nSOURCE: https://github.com/apache/kafka/blob/trunk/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nN=500; I=0; while [ $I -lt $N ] && ./gradlew clients:test --tests RequestResponseTest --rerun --fail-fast; do (( I=$I+1 )); echo \"Completed run: $I\"; sleep 1; done\n```\n\n----------------------------------------\n\nTITLE: Updating Supported Image Tags for CVE Scanning\nDESCRIPTION: Example configuration for updating the supported image tags after a bug fix release or RC change. This ensures the nightly CVE scans are running against the correct versions.\nSOURCE: https://github.com/apache/kafka/blob/trunk/docker/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsupported_image_tag: ['3.6.1', 'latest', '3.7.0-rc1']\n```\n\n----------------------------------------\n\nTITLE: Cloning Kafka Repository\nDESCRIPTION: Command to clone the Apache Kafka Git repository for testing.\nSOURCE: https://github.com/apache/kafka/blob/trunk/tests/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://git-wip-us.apache.org/repos/asf/kafka.git kafka\n```\n\n----------------------------------------\n\nTITLE: Using Async Profiler with JMH Benchmarks in Bash\nDESCRIPTION: Demonstrates how to use async profiler with JMH benchmarks, including basic profiling, generating flame graph output, and simultaneous CPU, allocation, and lock profiling with JFR output.\nSOURCE: https://github.com/apache/kafka/blob/trunk/jmh-benchmarks/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./jmh-benchmarks/jmh.sh -prof async:libPath=/path/to/libasyncProfiler.so\n\n./jmh-benchmarks/jmh.sh -prof async:libPath=/path/to/libasyncProfiler.so\\;output=flamegraph\n\n./jmh-benchmarks/jmh.sh -prof async:libPath=/path/to/libasyncProfiler.so\\;output=jfr\\;alloc\\;lock LRUCacheBenchmark\n\n./jmh-benchmarks/jmh.sh -prof async:help\n```\n\n----------------------------------------\n\nTITLE: Accessing Multi-Node Kafka Cluster Using Console Producer\nDESCRIPTION: Command to produce messages to a multi-node Kafka cluster using the kafka-console-producer.sh script.\nSOURCE: https://github.com/apache/kafka/blob/trunk/docker/examples/README.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/kafka-console-producer.sh --topic quickstart-events --bootstrap-server localhost:29092\n```\n\n----------------------------------------\n\nTITLE: Running Reviewers Script - Bash\nDESCRIPTION: Command to execute the reviewers.py script for managing PR reviewers.\nSOURCE: https://github.com/apache/kafka/blob/trunk/committer-tools/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython reviewers.py\n```\n\n----------------------------------------\n\nTITLE: Creating KRaft Quorum Configuration for Node 3\nDESCRIPTION: Bash command to create the third node configuration file with properties for node ID, listeners, controller configuration, and log directories for a 3-node KRaft quorum.\nSOURCE: https://github.com/apache/kafka/blob/trunk/raft/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncat << EOF >> config/kraft-quorum-3.properties\n    \n    node.id=3\n    listeners=PLAINTEXT://localhost:9094\n    controller.listener.names=PLAINTEXT\n    controller.quorum.voters=1@localhost:9092,2@localhost:9093,3@localhost:9094\n    log.dirs=/tmp/kraft-logs-3\n    EOF\n```\n\n----------------------------------------\n\nTITLE: Checking Python Installation Commands - Bash\nDESCRIPTION: Commands to verify Python and pip installation on the system.\nSOURCE: https://github.com/apache/kafka/blob/trunk/committer-tools/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython --version\npip --version\n```\n\n----------------------------------------\n\nTITLE: External Command Worker JSON Protocol Example (JSON)\nDESCRIPTION: Example JSON message format used by ExternalCommandWorker to communicate with external processes, showing how to log messages and set status.\nSOURCE: https://github.com/apache/kafka/blob/trunk/trogdor/README.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\"log\": \"Finished successfully.\", \"status\": {\"p99ProduceLatency\": \"100ms\", \"messagesSent\": 10000}}\n```\n\n----------------------------------------\n\nTITLE: Running Kafka System Test Unit Tests\nDESCRIPTION: Command to run the unit tests for the Kafka system testing framework from the tests directory.\nSOURCE: https://github.com/apache/kafka/blob/trunk/tests/README.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ cd kafka/tests # The base system test directory\n$ python3 setup.py test\n```\n\n----------------------------------------\n\nTITLE: Finding the Correct Git Remote Name\nDESCRIPTION: Command to identify the correct remote name for the apache/kafka repository that has push access.\nSOURCE: https://github.com/apache/kafka/blob/trunk/release/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit remote -v | grep -w 'github.com' | grep -w 'apache/kafka' | grep -w '(push)' | awk '{print $1}'\n```\n\n----------------------------------------\n\nTITLE: Building Auto-generated Messages\nDESCRIPTION: Command to rebuild RPC auto-generated message data in Kafka, which is sometimes necessary when switching between branches.\nSOURCE: https://github.com/apache/kafka/blob/trunk/README.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew processMessages processTestMessages\n```\n\n----------------------------------------\n\nTITLE: Network Partition Fault Specification (JSON)\nDESCRIPTION: JSON specification for a network partition fault task in Trogdor, describing a partition between nodes 1, 2, and 3.\nSOURCE: https://github.com/apache/kafka/blob/trunk/trogdor/README.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"org.apache.kafka.trogdor.fault.NetworkPartitionFaultSpec\",\n    \"startMs\": 1000,\n    \"durationMs\": 30000,\n    \"partitions\": [[\"node1\", \"node2\"], [\"node3\"]]\n}\n```\n\n----------------------------------------\n\nTITLE: Running JMH Benchmarks Outside of Gradle in Bash\nDESCRIPTION: Demonstrates how to run JMH benchmarks outside of Gradle by executing the generated executable JAR file directly with Java.\nSOURCE: https://github.com/apache/kafka/blob/trunk/jmh-benchmarks/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\njava -jar <kafka-repo-dir>/jmh-benchmarks/build/libs/kafka-jmh-benchmarks-*.jar -f2 LRUCacheBenchmark\n```\n\n----------------------------------------\n\nTITLE: Setting up Test Driver Dependencies\nDESCRIPTION: Command to update the system, install required packages including git and Python's pip, and install ducktape testing framework.\nSOURCE: https://github.com/apache/kafka/blob/trunk/tests/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt-get update && sudo apt-get -y upgrade && sudo apt-get install -y python3-pip git\n$ pip install ducktape\n```\n\n----------------------------------------\n\nTITLE: Updating Worker VM with Code Changes\nDESCRIPTION: Commands to rebuild the system test libraries and update worker VMs with recent code changes from the driver VM.\nSOURCE: https://github.com/apache/kafka/blob/trunk/tests/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ ./gradlew systemTestLibs\n$ vagrant rsync\n```\n\n----------------------------------------\n\nTITLE: Example Vagrantfile.local Configuration\nDESCRIPTION: Example Vagrant configuration file created by the aws-init.sh script, specifying EC2 instance details, number of workers, and other settings for the Kafka test environment.\nSOURCE: https://github.com/apache/kafka/blob/trunk/tests/README.md#2025-04-22_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\n# Vagrantfile.local\nec2_instance_type = \"...\" # Pick something appropriate for your\n                          # test. Note that the default m3.medium has\n                          # a small disk.\nec2_spot_max_price = \"0.123\"  # On-demand price for instance type\nenable_hostmanager = false\nnum_zookeepers = 0\nnum_kafka = 0\nnum_workers = 9\nec2_keypair_name = 'kafkatest'\nec2_keypair_file = '/home/ubuntu/kafkatest.pem'\nec2_security_groups = ['kafkatest']\nec2_region = 'us-west-2'\nec2_ami = \"ami-29ebb519\"\n```\n\n----------------------------------------\n\nTITLE: Running Trogdor Agent (Bash)\nDESCRIPTION: Command to start a Trogdor Agent process, which is responsible for implementing tasks on a single cluster node.\nSOURCE: https://github.com/apache/kafka/blob/trunk/trogdor/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./bin/trogdor.sh agent -c ./config/trogdor.conf -n node0 &> /tmp/trogdor-agent.log &\n```\n\n----------------------------------------\n\nTITLE: Uploading SSH Key to Test Driver on AWS\nDESCRIPTION: Command to securely copy your private SSH key to the AWS test driver instance for authentication purposes.\nSOURCE: https://github.com/apache/kafka/blob/trunk/tests/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ scp -i /path/to/kafkatest.pem \\\n    /path/to/kafkatest.pem ubuntu@public.hostname.amazonaws.com:kafkatest.pem\n```\n\n----------------------------------------\n\nTITLE: ProduceBench Task Specification (JSON)\nDESCRIPTION: JSON specification for a ProduceBench task in Trogdor, configuring a producer benchmark with specific topic and message generation settings.\nSOURCE: https://github.com/apache/kafka/blob/trunk/trogdor/README.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"org.apache.kafka.trogdor.workload.ProduceBenchSpec\",\n    \"durationMs\": 10000000,\n    \"producerNode\": \"node0\",\n    \"bootstrapServers\": \"localhost:9092\",\n    \"targetMessagesPerSec\": 10000,\n    \"maxMessages\": 50000,\n    \"activeTopics\": {\n        \"foo[1-3]\": {\n            \"numPartitions\": 10,\n            \"replicationFactor\": 1\n        }\n    },\n    \"inactiveTopics\": {\n         \"foo[4-5]\": {\n             \"numPartitions\": 10,\n             \"replicationFactor\": 1\n         }\n    },\n    \"keyGenerator\": {\n         \"type\": \"sequential\",\n         \"size\": 8,\n         \"offset\": 1\n    },\n    \"useConfiguredPartitioner\": true\n }\n```\n\n----------------------------------------\n\nTITLE: Mounting Configuration Files for Kafka Docker Container\nDESCRIPTION: This command demonstrates how to mount a local folder containing Kafka property files to the Docker container, overriding the default KRaft configuration.\nSOURCE: https://github.com/apache/kafka/blob/trunk/docker/examples/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --volume /path/to/property/folder:/mnt/shared/config -p 9092:9092 apache/kafka:latest\n```\n\n----------------------------------------\n\nTITLE: Building Kafka from Source\nDESCRIPTION: Commands to build Kafka from source using Gradle in the main Kafka folder.\nSOURCE: https://github.com/apache/kafka/blob/trunk/vagrant/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gradle\n$ ./gradlew jar\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for Apache Kafka Tools\nDESCRIPTION: Specifies Python package dependencies required for Kafka project tools or scripts. The file includes the JIRA API client for issue tracking integration and jproperties for parsing Java properties files in Python.\nSOURCE: https://github.com/apache/kafka/blob/trunk/release/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\njira==3.8.0\njproperties==2.1.1\n```\n\n----------------------------------------\n\nTITLE: Installing Vagrant Plugins for Kafka Setup\nDESCRIPTION: Commands to install required Vagrant plugins for managing hostnames and caching package downloads across VMs.\nSOURCE: https://github.com/apache/kafka/blob/trunk/vagrant/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ vagrant plugin install vagrant-hostmanager\n\n# Optional, to caches & shares package downloads across VMs\n$ vagrant plugin install vagrant-cachier\n```\n\n----------------------------------------\n\nTITLE: Running Multi-Node Isolated Plaintext Kafka Cluster\nDESCRIPTION: Commands to run a multi-node Kafka cluster with isolated configuration and plaintext communication using both JVM-based and GraalVM-based Native Apache Kafka Docker images.\nSOURCE: https://github.com/apache/kafka/blob/trunk/docker/examples/README.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# JVM based Apache Kafka Docker Image\n$ IMAGE=apache/kafka:latest docker compose -f docker/examples/docker-compose-files/cluster/isolated/plaintext/docker-compose.yml up\n\n# GraalVM based Native Apache Kafka Docker Image\n$ IMAGE=apache/kafka-native:latest docker compose -f docker/examples/docker-compose-files/cluster/isolated/plaintext/docker-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Building Kafka Source JAR\nDESCRIPTION: Command to build a JAR file containing the source code of Kafka using Gradle.\nSOURCE: https://github.com/apache/kafka/blob/trunk/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew srcJar\n```\n\n----------------------------------------\n\nTITLE: GitHub CLI Installation - Bash\nDESCRIPTION: Command to install GitHub CLI using Homebrew package manager.\nSOURCE: https://github.com/apache/kafka/blob/trunk/committer-tools/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbrew install gh\n```\n\n----------------------------------------\n\nTITLE: Updating AWS Credentials for Testing\nDESCRIPTION: Bash commands to retrieve and export AWS credentials from the EC2 instance metadata service, enabling AWS API access for the testing framework.\nSOURCE: https://github.com/apache/kafka/blob/trunk/tests/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport AWS_IAM_ROLE=$(curl -s http://169.254.169.254/latest/meta-data/iam/info | grep InstanceProfileArn | cut -d '\"' -f 4 | cut -d '/' -f 2)\nexport AWS_ACCESS_KEY=$(curl -s http://169.254.169.254/latest/meta-data/iam/security-credentials/$AWS_IAM_ROLE | grep AccessKeyId | awk -F\\\" '{ print $4 }')\nexport AWS_SECRET_KEY=$(curl -s http://169.254.169.254/latest/meta-data/iam/security-credentials/$AWS_IAM_ROLE | grep SecretAccessKey | awk -F\\\" '{ print $4 }')\nexport AWS_SESSION_TOKEN=$(curl -s http://169.254.169.254/latest/meta-data/iam/security-credentials/$AWS_IAM_ROLE | grep Token | awk -F\\\" '{ print $4 }')\n```\n\n----------------------------------------\n\nTITLE: Creating KRaft Quorum Configuration for Node 1\nDESCRIPTION: Bash command to create the first node configuration file with properties defining node ID, listeners, controller configuration, and log directories for a 3-node KRaft quorum.\nSOURCE: https://github.com/apache/kafka/blob/trunk/raft/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncat << EOF >> config/kraft-quorum-1.properties\n    \n    node.id=1\n    listeners=PLAINTEXT://localhost:9092\n    controller.listener.names=PLAINTEXT\n    controller.quorum.voters=1@localhost:9092,2@localhost:9093,3@localhost:9094\n    log.dirs=/tmp/kraft-logs-1\n    EOF\n```\n\n----------------------------------------\n\nTITLE: SSH Connection to AWS Test Driver\nDESCRIPTION: Command to establish an SSH connection to the Kafka test driver instance on AWS using the private key.\nSOURCE: https://github.com/apache/kafka/blob/trunk/tests/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ssh -i /path/to/kafkatest.pem ubuntu@public.hostname.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Promoting JVM Release Candidate in GitHub Actions\nDESCRIPTION: Example configuration for promoting a JVM-based Kafka Docker image from release candidate to final release. This specifies the RC image tag and the final promoted image tag.\nSOURCE: https://github.com/apache/kafka/blob/trunk/docker/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrc_docker_image: apache/kafka:3.6.0-rc0\npromoted_docker_image: apache/kafka:3.6.0\n```\n\n----------------------------------------\n\nTITLE: Cleaning the Kafka Build\nDESCRIPTION: Command to clean the Kafka build directory using Gradle.\nSOURCE: https://github.com/apache/kafka/blob/trunk/README.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew clean\n```\n\n----------------------------------------\n\nTITLE: Inspecting Dependency Configurations with Gradle\nDESCRIPTION: This command helps identify specific dependencies within a project's runtime classpath. It is useful for debugging dependency issues. Users need to specify the desired dependency in the '--dependency' argument.\nSOURCE: https://github.com/apache/kafka/blob/trunk/README.md#2025-04-22_snippet_25\n\nLANGUAGE: Shell\nCODE:\n```\n./gradlew allDepInsight --configuration runtimeClasspath --dependency com.fasterxml.jackson.core:jackson-databind\n```\n\n----------------------------------------\n\nTITLE: Running Tasks for Specific Kafka Projects\nDESCRIPTION: Commands to run Gradle tasks for specific Kafka projects, such as core, examples, clients, and streams.\nSOURCE: https://github.com/apache/kafka/blob/trunk/README.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew core:jar\n./gradlew core:test\n./gradlew :streams:testAll\n```\n\n----------------------------------------\n\nTITLE: Building Kafka Test JAR\nDESCRIPTION: Command to build a test JAR file for Kafka using Gradle.\nSOURCE: https://github.com/apache/kafka/blob/trunk/README.md#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew testJar\n```\n\n----------------------------------------\n\nTITLE: Running Code Quality Checks for Kafka\nDESCRIPTION: Commands to run code quality checks (Checkstyle and Spotless) for Kafka using Gradle.\nSOURCE: https://github.com/apache/kafka/blob/trunk/README.md#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew checkstyleMain checkstyleTest spotlessCheck\n./gradlew spotlessApply\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Cluster Configurations with ClusterTests in Java\nDESCRIPTION: Running the same test against multiple cluster configurations using the @ClusterTests annotation to wrap multiple @ClusterTest definitions.\nSOURCE: https://github.com/apache/kafka/blob/trunk/test-common/test-common-internal-api/src/main/java/org/apache/kafka/common/test/api/README.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class SampleTest {\n    @ClusterTests({\n        @ClusterTest(brokerSecurityProtocol = SecurityProtocol.PLAINTEXT),\n        @ClusterTest(brokerSecurityProtocol = SecurityProtocol.SASL_PLAINTEXT)\n    })\n    void testSomething() { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Kafka Documentation\nDESCRIPTION: Commands to build various documentation formats for Kafka, including aggregated JavaDoc, module-specific JavaDoc and ScalaDoc, and documentation JARs.\nSOURCE: https://github.com/apache/kafka/blob/trunk/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew aggregatedJavadoc\n./gradlew javadoc\n./gradlew javadocJar # builds a javadoc jar for each module\n./gradlew scaladoc\n./gradlew scaladocJar # builds a scaladoc jar for each module\n./gradlew docsJar # builds both (if applicable) javadoc and scaladoc jars for each module\n```\n\n----------------------------------------\n\nTITLE: Publishing Kafka to Local Maven Repository\nDESCRIPTION: Commands to publish Kafka projects to the local Maven repository, either all projects or specific ones, with signing disabled.\nSOURCE: https://github.com/apache/kafka/blob/trunk/README.md#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew -PskipSigning=true publishToMavenLocal\n./gradlew -PskipSigning=true :streams:publishToMavenLocal\n```\n\n----------------------------------------\n\nTITLE: Generating Test Coverage Reports\nDESCRIPTION: Commands to generate test coverage reports for the entire Kafka project or for specific modules.\nSOURCE: https://github.com/apache/kafka/blob/trunk/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew reportCoverage -PenableTestCoverage=true -Dorg.gradle.parallel=false\n./gradlew clients:reportCoverage -PenableTestCoverage=true -Dorg.gradle.parallel=false\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Apache Kafka Project\nDESCRIPTION: This code snippet lists the required Python packages and their versions for the Apache Kafka project. It includes BeautifulSoup for HTML parsing, PyGithub for GitHub API interactions, and ruamel.yaml for YAML file handling.\nSOURCE: https://github.com/apache/kafka/blob/trunk/committer-tools/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nbeautifulsoup4==4.12.3\nPyGithub==2.4.0\nruamel.yaml==0.18.6\n```\n\n----------------------------------------\n\nTITLE: Running SpotBugs Analysis\nDESCRIPTION: Command to run SpotBugs static analysis for finding potential bugs in Kafka code, with the option to exclude tests.\nSOURCE: https://github.com/apache/kafka/blob/trunk/README.md#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew spotbugsMain spotbugsTest -x test\n```\n\n----------------------------------------\n\nTITLE: Configuring Supported Image Tags for CVE Scanning\nDESCRIPTION: Example configuration for specifying supported image tags to be scanned for CVEs in the nightly scanning workflow. Each tag should be added to the supported_image_tag array.\nSOURCE: https://github.com/apache/kafka/blob/trunk/docker/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsupported_image_tag: ['3.6.0', 'latest', '3.7.0-rc0']\n```\n\n----------------------------------------\n\nTITLE: GitHub Token Setup - Bash\nDESCRIPTION: Commands to set up GitHub authentication token in environment variables for both manual token and GitHub CLI token.\nSOURCE: https://github.com/apache/kafka/blob/trunk/committer-tools/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# For Linux/macOS\nexport GITHUB_TOKEN=\"your_github_token\"\n# Or if you use GitHub CLI\nexport GITHUB_TOKEN=\"$(gh auth token)\"\n\n# On Windows:\n# .\\venv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies for Apache Kafka Testing\nDESCRIPTION: This snippet lists the Python dependencies required for testing Apache Kafka. It includes 'requests' for HTTP operations and 'HTMLTestRunner-Python3' for generating HTML test reports from unittest results.\nSOURCE: https://github.com/apache/kafka/blob/trunk/docker/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nrequests\nHTMLTestRunner-Python3\n```\n\n----------------------------------------\n\nTITLE: Running Collaborators Refresh Script - Bash\nDESCRIPTION: Command to execute the refresh_collaborators.py script for updating repository collaborators.\nSOURCE: https://github.com/apache/kafka/blob/trunk/committer-tools/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython refresh_collaborators.py\n```\n\n----------------------------------------\n\nTITLE: Constructor-Level Dependency Injection for ClusterInstance in Java\nDESCRIPTION: Injecting the ClusterInstance object through the constructor to make it available to setup methods and test methods.\nSOURCE: https://github.com/apache/kafka/blob/trunk/test-common/test-common-internal-api/src/main/java/org/apache/kafka/common/test/api/README.md#2025-04-22_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nclass SampleTest {\n    private final ClusterInstance cluster;\n\n    SampleTest(ClusterInstance cluster) {\n        this.cluster = cluster;\n    }\n    \n    @BeforeEach\n    public void setup() {\n      // Common setup code with started ClusterInstance\n      this.cluster.admin().createTopics(...); \n    }\n\n    @ClusterTest\n    public void testOne() {\n        // Test code\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Hanging Tests Finder - Bash\nDESCRIPTION: Command to execute the find-unfinished-test.py script with a log file path to identify hanging tests.\nSOURCE: https://github.com/apache/kafka/blob/trunk/committer-tools/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npython find-unfinished-test.py ~/Downloads/logs_28218821016/5_build\\ _\\ JUnit\\ tests\\ Java\\ 11.txt\n```\n\n----------------------------------------\n\nTITLE: Checking Running Daemons (Bash)\nDESCRIPTION: Command to list running Java processes, used to confirm that all necessary daemons (Coordinator, QuorumPeerMain, Kafka, Agent) are running.\nSOURCE: https://github.com/apache/kafka/blob/trunk/trogdor/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\njps\n```\n\n----------------------------------------\n\nTITLE: Generating Kafka PR Template for Docker Official Image\nDESCRIPTION: This Python command generates a PR template for updating the Docker official image repository. It takes the image type as an argument and creates a template for submitting a pull request.\nSOURCE: https://github.com/apache/kafka/blob/trunk/docker/README.md#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\npython generate_kafka_pr_template.py --image-type=jvm\n```\n\n----------------------------------------\n\nTITLE: Method-Level Dependency Injection for ClusterInstance in Java\nDESCRIPTION: Injecting the ClusterInstance object directly into the test method to access cluster functionality.\nSOURCE: https://github.com/apache/kafka/blob/trunk/test-common/test-common-internal-api/src/main/java/org/apache/kafka/common/test/api/README.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nclass SampleTest {\n    @ClusterTest\n    public void testOne(ClusterInstance cluster) {\n        this.cluster.admin().createTopics(...);\n        // Test code\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing All Gradle Tasks\nDESCRIPTION: Command to list all available Gradle tasks for the Kafka project.\nSOURCE: https://github.com/apache/kafka/blob/trunk/README.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew tasks\n```\n\n----------------------------------------\n\nTITLE: Dependencies Installation - Bash\nDESCRIPTION: Command to install required Python dependencies from requirements.txt file.\nSOURCE: https://github.com/apache/kafka/blob/trunk/committer-tools/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Maven Settings for Publishing Kafka Artifacts\nDESCRIPTION: XML configuration for Maven settings.xml file to set up credentials for publishing Kafka artifacts to Apache repositories.\nSOURCE: https://github.com/apache/kafka/blob/trunk/README.md#2025-04-22_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0\n                       https://maven.apache.org/xsd/settings-1.0.0.xsd\">\n...                           \n<servers>\n   ...\n   <server>\n      <id>apache.snapshots.https</id>\n      <username>${maven_username}</username>\n      <password>${maven_password}</password>\n   </server>\n   <server>\n      <id>apache.releases.https</id>\n      <username>${maven_username}</username>\n      <password>${maven_password}</password>\n    </server>\n    ...\n </servers>\n ...\n```\n\n----------------------------------------\n\nTITLE: Virtual Environment Setup - Bash\nDESCRIPTION: Commands to create and activate a Python virtual environment, with options for both Linux/macOS and Windows systems.\nSOURCE: https://github.com/apache/kafka/blob/trunk/committer-tools/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv venv\n\n# For Linux/macOS\nsource venv/bin/activate\n\n# On Windows:\n# .\\venv\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Virtual Environment for Kafka Release\nDESCRIPTION: Creates a Python virtual environment, activates it, and installs the required dependencies for the release process.\nSOURCE: https://github.com/apache/kafka/blob/trunk/release/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv .venv\nsource .venv/bin/activate\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Activating the Virtual Environment for Release\nDESCRIPTION: Activates the previously created Python virtual environment to prepare for running the release script.\nSOURCE: https://github.com/apache/kafka/blob/trunk/release/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Setting the Push Remote Name for Git\nDESCRIPTION: Sets the PUSH_REMOTE_NAME environment variable to identify the appropriate Git remote for apache/kafka repository.\nSOURCE: https://github.com/apache/kafka/blob/trunk/release/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport PUSH_REMOTE_NAME=<value>\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies for Apache Kafka\nDESCRIPTION: This code snippet enumerates the Python package dependencies required for the Apache Kafka project. It includes libraries for various functionalities such as cryptography (cffi, pycrypto), AWS integration (boto3), remote management (pywinrm), and debugging (debugpy).\nSOURCE: https://github.com/apache/kafka/blob/trunk/tests/docker/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ncffi \nvirtualenv \npyasn1 \nboto3 \npycrypto \npywinrm \nipaddress \ndebugpy \npsutil\nducktape==0.12.0\n```"
  }
]